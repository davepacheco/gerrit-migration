commit 7e04cc94e64d8021732bb8e92760a7b03907cae3 (refs/changes/46/2646/5)
Author: Jan Wyszynski <jan.wyszynski@joyent.com>
Date:   2017-09-26T00:17:25+00:00 (2 years ago)
    
    MORAY-410 FindObjects needs more tests

diff --git a/Makefile b/Makefile
index dd6460a..6f7ed05 100644
--- a/Makefile
+++ b/Makefile
@@ -73,6 +73,7 @@ test: | $(FAUCET) $(MORAY_TEST_ENV_FILE)
 	$(CTRUN) node test/arrays.test.js | $(FAUCET) && \
 	$(CTRUN) node test/version.test.js | $(FAUCET) && \
 	$(CTRUN) node test/clientparams.test.js | $(FAUCET) && \
+	$(CTRUN) node test/findobjects.test.js | $(FAUCET) && \
 	$(CTRUN) node test/findobjects-requireindexes.test.js | $(FAUCET) && \
 	$(CTRUN) node test/loop.test.js | bunyan -lfatal )
 	@echo tests passed
diff --git a/test/findobjects-requireindexes.test.js b/test/findobjects-requireindexes.test.js
index 42022af..9794786 100644
--- a/test/findobjects-requireindexes.test.js
+++ b/test/findobjects-requireindexes.test.js
@@ -112,79 +112,6 @@ function reindexBucket(bucketName, client, callback) {
     doReindex();
 }
 
-function performFindObjectsTest(t, client, options) {
-    assert.object(t, 't');
-    assert.object(client, 'client');
-    assert.object(options, 'options');
-    assert.string(options.bucketName, 'options.bucketName');
-    assert.string(options.searchFilter, 'options.searchFilter');
-    assert.object(options.findObjectsOpts, 'options.findObjectsOpts');
-    assert.object(options.expectedResults, 'options.expectedResults');
-    assert.bool(options.expectedResults.error, 'options.expectedResults.error');
-    assert.number(options.expectedResults.nbRecordsFound,
-        'options.expectedResults.nbRecordsFound');
-    assert.optionalString(options.expectedResults.errMsg,
-        'options.expectedResults.errMsg');
-
-    var bucketName = options.bucketName;
-    var errorExpected = options.expectedResults.error;
-    var findObjectsOpts = jsprim.deepCopy(options.findObjectsOpts);
-    var nbRecordsExpected = options.expectedResults.nbRecordsFound;
-    var nbRecordsFound = 0;
-    var req;
-    var searchFilter = options.searchFilter;
-
-    /*
-     * We intentionally bypass the bucket cache when performing findObjects
-     * requests because we want to run tests before and after the test bucket
-     * has been reindexed, and we don't want to wait for all buckets to have
-     * their cache expired before we can be sure that all instances of the moray
-     * service we're connected to have their bucket cache reflect the fact that
-     * all indexes are usable.
-     */
-    findObjectsOpts.noBucketCache = true;
-
-    req = client.findObjects(bucketName, searchFilter, findObjectsOpts);
-
-    req.on('error', function onFindObjError(findObjErr) {
-        var expectedErrorName = 'NotIndexedError';
-        var expectedErrMsg = options.expectedResults.errMsg;
-
-        if (errorExpected) {
-            t.ok(findObjErr, 'findObjects request should error');
-            t.ok(VError.hasCauseWithName(findObjErr, expectedErrorName),
-                'error name should be ' + expectedErrorName);
-
-            if (expectedErrMsg) {
-                t.ok(findObjErr.message.indexOf(expectedErrMsg) !== -1,
-                    'Error message should include: ' + expectedErrMsg);
-            }
-
-            t.equal(nbRecordsFound, 0,
-                'no record should have been sent as part of the response');
-        } else {
-            t.ifErr(findObjErr, 'findObjects request should not error');
-        }
-
-        t.end();
-    });
-
-    req.on('record', function onRecord(record) {
-        ++nbRecordsFound;
-    });
-
-    req.on('end', function onFindObjEnd() {
-        if (errorExpected) {
-            t.fail('should not get end event, only error event');
-        } else {
-            t.pass('should get end event and not error');
-            t.equal(nbRecordsFound, nbRecordsExpected, 'should have found ' +
-                nbRecordsExpected + ' record');
-        }
-        t.end();
-    });
-}
-
 tape.test('setup', function (t) {
     vasync.pipeline({arg: {}, funcs: [
         function createServer(ctx, next) {
@@ -235,7 +162,7 @@ tape.test('setup', function (t) {
 });
 
 tape.test('client() - findobjects()', function (t) {
-    performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
+    helper.performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
         bucketName: TEST_BUCKET,
         searchFilter: TEST_SEARCH_FILTER,
         findObjectsOpts: {},
@@ -256,7 +183,7 @@ tape.test('client() - findobjects()', function (t) {
 });
 
 tape.test('client() - findobjects({requireIndexes: false})', function (t) {
-    performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
+    helper.performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
         bucketName: TEST_BUCKET,
         searchFilter: TEST_SEARCH_FILTER,
         findObjectsOpts: {requireIndexes: false},
@@ -268,7 +195,7 @@ tape.test('client() - findobjects({requireIndexes: false})', function (t) {
 });
 
 tape.test('client() - findobjects({requireIndexes: true})', function (t) {
-    performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
+    helper.performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
         bucketName: TEST_BUCKET,
         searchFilter: TEST_SEARCH_FILTER,
         findObjectsOpts: {requireIndexes: true},
@@ -289,7 +216,7 @@ tape.test('client() - findobjects({requireIndexes: true})', function (t) {
 function createTestFindobjectsRequireIndexes(searchFilter) {
     tape.test('client() - findobjects(' + searchFilter + ', {requireIndexes: ' +
         'true})', function (t) {
-        performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
+        helper.performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
             bucketName: TEST_BUCKET,
             searchFilter: searchFilter,
             findObjectsOpts: {requireIndexes: true},
@@ -310,7 +237,7 @@ function createTestFindobjectsRequireIndexes(searchFilter) {
 FILTERS_ON_INTERNAL_FIELDS.forEach(createTestFindobjectsRequireIndexes);
 
 tape.test('client({requireIndexes: true}) - findobjects()', function (t) {
-    performFindObjectsTest(t, CLIENT_WITH_REQUIRE_INDEXES, {
+    helper.performFindObjectsTest(t, CLIENT_WITH_REQUIRE_INDEXES, {
         bucketName: TEST_BUCKET,
         searchFilter: TEST_SEARCH_FILTER,
         findObjectsOpts: {},
@@ -332,7 +259,7 @@ tape.test('client({requireIndexes: true}) - findobjects()', function (t) {
 FILTERS_ON_INTERNAL_FIELDS.forEach(function (searchFilter) {
     tape.test('client({requireIndexes: true}) - findobjects(' + searchFilter +
         ')', function (t) {
-        performFindObjectsTest(t, CLIENT_WITH_REQUIRE_INDEXES, {
+        helper.performFindObjectsTest(t, CLIENT_WITH_REQUIRE_INDEXES, {
             bucketName: TEST_BUCKET,
             searchFilter: searchFilter,
             findObjectsOpts: {},
@@ -352,7 +279,7 @@ FILTERS_ON_INTERNAL_FIELDS.forEach(function (searchFilter) {
 
 tape.test('client({requireIndexes: true}) - findobjects({requireIndexes: ' +
     'true})', function (t) {
-    performFindObjectsTest(t, CLIENT_WITH_REQUIRE_INDEXES, {
+    helper.performFindObjectsTest(t, CLIENT_WITH_REQUIRE_INDEXES, {
         bucketName: TEST_BUCKET,
         searchFilter: TEST_SEARCH_FILTER,
         findObjectsOpts: {requireIndexes: true},
@@ -375,7 +302,7 @@ tape.test('client({requireIndexes: true}) - findobjects({requireIndexes: ' +
 function createTestClientRequiresIndexes(searchFilter) {
     tape.test('client({requireIndexes: true}) - findobjects(' + searchFilter +
         ', {requireIndexes: true})', function (t) {
-        performFindObjectsTest(t, CLIENT_WITH_REQUIRE_INDEXES, {
+        helper.performFindObjectsTest(t, CLIENT_WITH_REQUIRE_INDEXES, {
             bucketName: TEST_BUCKET,
             searchFilter: searchFilter,
             findObjectsOpts: {requireIndexes: true},
@@ -398,7 +325,7 @@ FILTERS_ON_INTERNAL_FIELDS.forEach(createTestClientRequiresIndexes);
 
 tape.test('client({requireIndexes: true}) - findobjects({requireIndexes: ' +
     'false})', function (t) {
-    performFindObjectsTest(t, CLIENT_WITH_REQUIRE_INDEXES, {
+    helper.performFindObjectsTest(t, CLIENT_WITH_REQUIRE_INDEXES, {
         bucketName: TEST_BUCKET,
         searchFilter: TEST_SEARCH_FILTER,
         findObjectsOpts: {requireIndexes: false},
@@ -417,7 +344,7 @@ tape.test('client({requireIndexes: true}) - findobjects({requireIndexes: ' +
 function createTestRequireIndexesOverriden(searchFilter) {
     tape.test('client({requireIndexes: true}) - findobjects(' + searchFilter +
         ', {requireIndexes: false})', function (t) {
-        performFindObjectsTest(t, CLIENT_WITH_REQUIRE_INDEXES, {
+        helper.performFindObjectsTest(t, CLIENT_WITH_REQUIRE_INDEXES, {
             bucketName: TEST_BUCKET,
             searchFilter: searchFilter,
             findObjectsOpts: {requireIndexes: false},
@@ -452,7 +379,7 @@ tape.test('reindexObjects', function (t) {
 });
 
 tape.test('client() - findobjects()', function (t) {
-    performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
+    helper.performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
         bucketName: TEST_BUCKET,
         searchFilter: TEST_SEARCH_FILTER,
         findObjectsOpts: {},
@@ -464,7 +391,7 @@ tape.test('client() - findobjects()', function (t) {
 });
 
 tape.test('client() - findobjects({requireIndexes: true})', function (t) {
-    performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
+    helper.performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
         bucketName: TEST_BUCKET,
         searchFilter: TEST_SEARCH_FILTER,
         findObjectsOpts: {requireIndexes: true},
@@ -476,7 +403,7 @@ tape.test('client() - findobjects({requireIndexes: true})', function (t) {
 });
 
 tape.test('client({requireIndexes: true}) - findobjects()', function (t) {
-    performFindObjectsTest(t, CLIENT_WITH_REQUIRE_INDEXES, {
+    helper.performFindObjectsTest(t, CLIENT_WITH_REQUIRE_INDEXES, {
         bucketName: TEST_BUCKET,
         searchFilter: TEST_SEARCH_FILTER,
         findObjectsOpts: {},
@@ -489,7 +416,7 @@ tape.test('client({requireIndexes: true}) - findobjects()', function (t) {
 
 tape.test('client({requireIndexes: true}) - findobjects({requireIndexes: ' +
     'false})', function (t) {
-    performFindObjectsTest(t, CLIENT_WITH_REQUIRE_INDEXES, {
+    helper.performFindObjectsTest(t, CLIENT_WITH_REQUIRE_INDEXES, {
         bucketName: TEST_BUCKET,
         searchFilter: TEST_SEARCH_FILTER,
         findObjectsOpts: {requireIndexes: false},
@@ -502,7 +429,7 @@ tape.test('client({requireIndexes: true}) - findobjects({requireIndexes: ' +
 
 tape.test('client({requireIndexes: true}) - findobjects({requireIndexes: ' +
     'true})', function (t) {
-    performFindObjectsTest(t, CLIENT_WITH_REQUIRE_INDEXES, {
+    helper.performFindObjectsTest(t, CLIENT_WITH_REQUIRE_INDEXES, {
         bucketName: TEST_BUCKET,
         searchFilter: TEST_SEARCH_FILTER,
         findObjectsOpts: {requireIndexes: true},
@@ -540,4 +467,4 @@ tape.test('teardown', function (t) {
             CLIENT_WITHOUT_REQUIRE_INDEXES.close();
             CLIENT_WITH_REQUIRE_INDEXES.close();
         });
-});
\ No newline at end of file
+});
diff --git a/test/findobjects.test.js b/test/findobjects.test.js
new file mode 100644
index 0000000..7db6e37
--- /dev/null
+++ b/test/findobjects.test.js
@@ -0,0 +1,444 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+var libuuid = require('libuuid');
+var tape = require('tape');
+var vasync = require('vasync');
+
+var helper = require('./helper');
+
+/*
+ * This file implements a test suite for a number of findObjects operations
+ * including various options such as offset, limit, sorting, etc.
+ */
+var CLIENT;
+var SERVER;
+
+var TEST_BUCKET_CFG = {
+    index: {
+        foo: {
+            type: 'string'
+        },
+        bar: {
+            type: 'string'
+        },
+        fooArray: {
+            type: '[string]'
+        },
+        addr: {
+            type: 'ip'
+        },
+        net: {
+            type: 'subnet'
+        },
+        sort_by: {
+            type: 'number'
+        },
+        singleton: {
+            type: 'boolean'
+        }
+    },
+    options: {
+        version: 1
+    }
+};
+
+var TEST_BUCKET = 'moray_findobjects_unit_test' + libuuid.create().substr(0, 7);
+
+/*
+ * Filters used to test various options and other findobjects behaviors.
+ */
+var TEST_SEARCH_FILTER_BAD_AND = '(&(nonexisting=field)(notthere=filter))';
+var TEST_SEARCH_FILTER_BAD_OR = '(|(nonexisting=field))';
+
+var TEST_SEARCH_FILTER_BAD_SUBSTR_INITIAL = '(fooArray=initial*)';
+var TEST_SEARCH_FILTER_BAD_SUBSTR_ANY = '(fooArray=*any*)';
+var TEST_SEARCH_FILTER_BAD_SUBSTR_FINAL = '(fooArray=*final)';
+var TEST_SEARCH_FILTER_BAD_EXT = '(foo:fakeExt:=bad)';
+
+var TEST_IP_GE_FILTER = '(addr>=192.168.1.0)';
+
+var TEST_SUBNET_GE_FILTER = '(net>=192.168.1.0/24)';
+var TEST_SUBNET_LE_FILTER = '(net<=192.168.1.0/24)';
+
+var TEST_SORT_SINGLETON_FILTER = '(singleton=true)';
+
+/*
+ * These test objects are added to the test bucket on setup. They have various
+ * uncorrelated fields that are referenced by some of the above filters.
+ */
+var TEST_OBJECTS = {
+    'obj1': {
+        sort_by: 1,
+        singleton: true,
+        net: '192.168.1.0/24',
+        addr: '192.168.1.0'
+    },
+    'obj2': {
+        sort_by: 2,
+        singleton: false,
+        net: '192.168.0.0/24',
+        addr: '192.168.0.255'
+    },
+    'obj3': {
+        sort_by: 3,
+        singleton: false,
+        net: '192.168.2.0/24',
+        addr: '192.168.1.1'
+    }
+};
+
+var NUM_TEST_OBJECTS = Object.keys(TEST_OBJECTS).length;
+
+tape.test('setup', function (t) {
+    vasync.pipeline({arg: {}, funcs: [
+        function createServer(ctx, next) {
+            helper.createServer(null, function onServerCreated(server) {
+                SERVER = server;
+                next();
+            });
+        },
+        function createClient(ctx, next) {
+            CLIENT = helper.createClient();
+            CLIENT.on('connect', function onClientConnected() {
+                next();
+            });
+        },
+        function createBucket(ctx, next) {
+            CLIENT.createBucket(TEST_BUCKET, TEST_BUCKET_CFG,
+                function onBucketCreated(bucketCreateErr) {
+                    t.ifErr(bucketCreateErr);
+                    next();
+                });
+        },
+        function putTestObjects(ctx, next) {
+            var numObjectsPut = 0;
+            Object.keys(TEST_OBJECTS).forEach(function (key, index) {
+                CLIENT.putObject(TEST_BUCKET, key, TEST_OBJECTS[key],
+                    {etag: null}, function onPutObj(putObjErr, meta) {
+                        t.ifErr(putObjErr);
+                        t.ok(meta);
+                        if (meta) {
+                            t.ok(meta.etag);
+                        }
+                        numObjectsPut++;
+                        if (numObjectsPut == Object.keys(TEST_OBJECTS).length) {
+                            next();
+                        }
+                    });
+            });
+        }
+    ]}, function onTestSetupDone(testSetupErr) {
+        t.end();
+    });
+});
+
+tape.test('findobjects - bad \'&\' filter', function (t) {
+    helper.performFindObjectsTest(t, CLIENT, {
+        bucketName: TEST_BUCKET,
+        searchFilter: TEST_SEARCH_FILTER_BAD_AND,
+        findObjectsOpts: {},
+        expectedResults: {
+            error: true,
+            nbRecordsFound: 0,
+            /*
+             * This query results in an error because neither of the
+             * fields in the search filter exists and are therefore not
+             * indexed.
+             */
+            errMsg: TEST_BUCKET + ' does not have indexes that support ' +
+                TEST_SEARCH_FILTER_BAD_AND
+        }
+    });
+});
+
+tape.test('findobjects - bad \'|\' filter', function (t) {
+    helper.performFindObjectsTest(t, CLIENT, {
+        bucketName: TEST_BUCKET,
+        searchFilter: TEST_SEARCH_FILTER_BAD_OR,
+        findObjectsOpts: {},
+        expectedResults: {
+            /*
+             * Test filter contains fields whose index is not usable.
+             */
+            error: true,
+            nbRecordsFound: 0,
+            errMsg: TEST_BUCKET + ' does not have indexes that support ' +
+                TEST_SEARCH_FILTER_BAD_OR
+        }
+    });
+});
+
+tape.test('findobjects - prefix search on array field', function (t) {
+    helper.performFindObjectsTest(t, CLIENT, {
+        bucketName: TEST_BUCKET,
+        searchFilter: TEST_SEARCH_FILTER_BAD_SUBSTR_INITIAL,
+        findObjectsOpts: {requireIndexes: false},
+        expectedResults: {
+            error: true,
+            nbRecordsFound: 0,
+            errMsg: TEST_BUCKET + ' does not have indexes that support ' +
+                TEST_SEARCH_FILTER_BAD_SUBSTR_INITIAL
+        }
+    });
+});
+
+tape.test('findobjects - inner search on array field', function (t) {
+    helper.performFindObjectsTest(t, CLIENT, {
+        bucketName: TEST_BUCKET,
+        searchFilter: TEST_SEARCH_FILTER_BAD_SUBSTR_ANY,
+        findObjectsOpts: {requireIndexes: false},
+        expectedResults: {
+            error: true,
+            nbRecordsFound: 0,
+            errMsg: TEST_BUCKET + ' does not have indexes that support ' +
+                TEST_SEARCH_FILTER_BAD_SUBSTR_ANY
+        }
+    });
+});
+
+tape.test('findobjects - suffix search on array field', function (t) {
+    helper.performFindObjectsTest(t, CLIENT, {
+        bucketName: TEST_BUCKET,
+        searchFilter: TEST_SEARCH_FILTER_BAD_SUBSTR_ANY,
+        findObjectsOpts: {requireIndexes: false},
+        expectedResults: {
+            error: true,
+            nbRecordsFound: 0,
+            errMsg: TEST_BUCKET + ' does not have indexes that support ' +
+                TEST_SEARCH_FILTER_BAD_SUBSTR_ANY
+        }
+    });
+});
+
+tape.test('findobjects - >= filter on \'ip\' type', function (t) {
+     helper.performFindObjectsTest(t, CLIENT, {
+        bucketName: TEST_BUCKET,
+        searchFilter: TEST_IP_GE_FILTER,
+        findObjectsOpts: {requireIndexes: false},
+        expectedResults: {
+            error: false,
+            nbRecordsFound: 2
+        }
+    });
+});
+
+tape.test('findobjects - >= filter on \'subnet\' type', function (t) {
+     helper.performFindObjectsTest(t, CLIENT, {
+        bucketName: TEST_BUCKET,
+        searchFilter: TEST_SUBNET_GE_FILTER,
+        findObjectsOpts: {requireIndexes: false},
+        expectedResults: {
+            error: false,
+            nbRecordsFound: 2
+        }
+    });
+});
+
+tape.test('findobjects - <= filter on \'subnet\' type', function (t) {
+     helper.performFindObjectsTest(t, CLIENT, {
+        bucketName: TEST_BUCKET,
+        searchFilter: TEST_SUBNET_LE_FILTER,
+        findObjectsOpts: {requireIndexes: false},
+        expectedResults: {
+            error: false,
+            nbRecordsFound: 2
+        }
+    });
+});
+
+tape.test('findobjects - ascending sort on multiple objects', function (t) {
+     helper.performFindObjectsTest(t, CLIENT, {
+        bucketName: TEST_BUCKET,
+        searchFilter: '(sort_by=*)',
+        findObjectsOpts: {
+            sort: {
+                order: 'ASC',
+                attribute: 'sort_by'
+            }
+        },
+        expectedResults: {
+            error: false,
+            nbRecordsFound: NUM_TEST_OBJECTS,
+            verifyRecords: function (records) {
+                var order = 1;
+                for (var i = 0; i < NUM_TEST_OBJECTS; i++) {
+                    if (records[i].value.sort_by != order) {
+                        return false;
+                    }
+                    order++;
+                }
+                return true;
+            }
+        }
+    });
+});
+
+tape.test('findobjects - descending sort on multiple objects', function (t) {
+     helper.performFindObjectsTest(t, CLIENT, {
+        bucketName: TEST_BUCKET,
+        searchFilter: '(sort_by=*)',
+        findObjectsOpts: {
+            sort: {
+                order: 'DESC',
+                attribute: 'sort_by'
+            }
+        },
+        expectedResults: {
+            error: false,
+            nbRecordsFound: NUM_TEST_OBJECTS,
+            verifyRecords: function (records) {
+                var order = NUM_TEST_OBJECTS;
+                for (var i = 0; i < NUM_TEST_OBJECTS; i++) {
+                    if (records[i].value.sort_by != order) {
+                        return false;
+                    }
+                    order--;
+                }
+                return true;
+            }
+        }
+    });
+});
+
+tape.test('findobjects - ascending sort on single object', function (t) {
+     helper.performFindObjectsTest(t, CLIENT, {
+        bucketName: TEST_BUCKET,
+        searchFilter: '(&(sort_by=*)(singleton=true))',
+        findObjectsOpts: {
+            sort: {
+                order: 'ASC',
+                attribute: 'sort_by'
+            }
+        },
+        expectedResults: {
+            error: false,
+            nbRecordsFound: 1,
+            verifyRecords: function (records) {
+                return (records[0].value.sort_by == 1);
+            }
+        }
+    });
+});
+
+tape.test('findobjects - descending sort on single object', function (t) {
+     helper.performFindObjectsTest(t, CLIENT, {
+        bucketName: TEST_BUCKET,
+        searchFilter: '(&(sort_by=*)(singleton=true))',
+        findObjectsOpts: {
+            sort: {
+                order: 'DESC',
+                attribute: 'sort_by'
+            }
+        },
+        expectedResults: {
+            error: false,
+            nbRecordsFound: 1,
+            verifyRecords: function (records) {
+                return (records[0].value.sort_by == 1);
+            }
+        }
+    });
+});
+
+tape.test('findobjects - limit option as number', function (t) {
+     helper.performFindObjectsTest(t, CLIENT, {
+        bucketName: TEST_BUCKET,
+        searchFilter: '(sort_by=*)',
+        findObjectsOpts: {
+            limit: 1
+        },
+        expectedResults: {
+            error: false,
+            nbRecordsFound: 1
+        }
+    });
+});
+
+tape.test('findobjects - limit option as string', function (t) {
+    var limit = '1';
+    var numeric = 1;
+    helper.performFindObjectsTest(t, CLIENT, {
+        bucketName: TEST_BUCKET,
+        searchFilter: '(sort_by=*)',
+        findObjectsOpts: {
+            limit: limit
+        },
+        expectedResults: {
+            error: false,
+            nbRecordsFound: Math.min(numeric, NUM_TEST_OBJECTS)
+        }
+    });
+});
+
+tape.test('findobjects - offset option as number', function (t) {
+    var offset = 2;
+    helper.performFindObjectsTest(t, CLIENT, {
+        bucketName: TEST_BUCKET,
+        searchFilter: '(sort_by=*)',
+        findObjectsOpts: {
+            offset: offset
+        },
+        expectedResults: {
+            error: false,
+            nbRecordsFound: (NUM_TEST_OBJECTS - offset)
+        }
+    });
+});
+
+tape.test('findobjects - offset option as string', function (t) {
+    var offset = '2';
+    var numeric = 2;
+    helper.performFindObjectsTest(t, CLIENT, {
+        bucketName: TEST_BUCKET,
+        searchFilter: '(sort_by=*)',
+        findObjectsOpts: {
+            offset: offset
+        },
+        expectedResults: {
+            error: false,
+            nbRecordsFound: (NUM_TEST_OBJECTS - numeric)
+        }
+    });
+});
+
+tape.test('findobjects - sql_only', function (t) {
+     helper.performFindObjectsTest(t, CLIENT, {
+        bucketName: TEST_BUCKET,
+        searchFilter: '(sort_by=*)',
+        findObjectsOpts: {
+            sql_only: true
+        },
+        expectedResults: {
+            error: false,
+            nbRecordsFound: 1,
+            verifyRecords: function (records) {
+                for (var i = 0; i < records.length; i++) {
+                    if (!records[i].query || !records[i].args) {
+                        return false;
+                    }
+                }
+                return true;
+            }
+        }
+    });
+});
+
+tape.test('teardown', function (t) {
+    CLIENT.delBucket(TEST_BUCKET, function onDelBucket(delBucketErr) {
+        t.ifErr(delBucketErr);
+        CLIENT.once('close', function closeServerAndEnd() {
+            helper.cleanupServer(SERVER, function onCleanupServer() {
+                t.pass('closed');
+                t.end();
+            });
+        });
+        CLIENT.close();
+    });
+});
diff --git a/test/helper.js b/test/helper.js
index 54b311f..a9c786e 100644
--- a/test/helper.js
+++ b/test/helper.js
@@ -19,6 +19,7 @@ var mod_url = require('url');
 var path = require('path');
 var stream = require('stream');
 var util = require('util');
+var VError = require('verror');
 
 var bunyan = require('bunyan');
 var moray = require('moray'); // client
@@ -295,6 +296,97 @@ function defineStatelessTestCase(tape, func, tc) {
     });
 }
 
+function performFindObjectsTest(t, client, options) {
+    assert.object(t, 't');
+    assert.object(client, 'client');
+    assert.object(options, 'options');
+    assert.string(options.bucketName, 'options.bucketName');
+    assert.string(options.searchFilter, 'options.searchFilter');
+    assert.object(options.findObjectsOpts, 'options.findObjectsOpts');
+    assert.object(options.expectedResults, 'options.expectedResults');
+    assert.bool(options.expectedResults.error, 'options.expectedResults.error');
+    assert.number(options.expectedResults.nbRecordsFound,
+        'options.expectedResults.nbRecordsFound');
+    assert.optionalString(options.expectedResults.errMsg,
+        'options.expectedResults.errMsg');
+    assert.optionalFunc(options.expectedResults.verifyRecords,
+        'options.expectedResults.verifyRecords');
+
+    var bucketName = options.bucketName;
+    var errorExpected = options.expectedResults.error;
+    var findObjectsOpts = jsprim.deepCopy(options.findObjectsOpts);
+    var nbRecordsExpected = options.expectedResults.nbRecordsFound;
+    var nbRecordsFound = 0;
+    var req;
+    var searchFilter = options.searchFilter;
+
+    /*
+     * A function that accepts an array or all the records
+     * found during a test. It should return either true
+     * or false, depending on whether the test should pass
+     * or fail. This function is currently used to verify
+     * the order of the records returned to a findobjects
+     * query that requests a sort.
+     */
+    var verifyRecords = options.expectedResults.verifyRecords;
+    var recordsReceived = [];
+
+    /*
+     * We intentionally bypass the bucket cache when performing findObjects
+     * requests because we want to run tests before and after the test bucket
+     * has been reindexed, and we don't want to wait for all buckets to have
+     * their cache expired before we can be sure that all instances of the moray
+     * service we're connected to have their bucket cache reflect the fact that
+     * all indexes are usable.
+     */
+    findObjectsOpts.noBucketCache = true;
+
+    req = client.findObjects(bucketName, searchFilter, findObjectsOpts);
+
+    req.on('error', function onFindObjError(findObjErr) {
+        var expectedErrorName = 'NotIndexedError';
+        var expectedErrMsg = options.expectedResults.errMsg;
+
+        if (errorExpected) {
+            t.ok(findObjErr, 'findObjects request should error');
+            t.ok(VError.hasCauseWithName(findObjErr, expectedErrorName),
+                'error name should be ' + expectedErrorName);
+
+            if (expectedErrMsg) {
+                t.ok(findObjErr.message.indexOf(expectedErrMsg) !== -1,
+                    'Error message should include: ' + expectedErrMsg);
+            }
+
+            t.equal(nbRecordsFound, 0,
+                'no record should have been sent as part of the response');
+        } else {
+            t.ifErr(findObjErr, 'findObjects request should not error');
+        }
+
+        t.end();
+    });
+
+    req.on('record', function onRecord(record) {
+        ++nbRecordsFound;
+        recordsReceived.push(record);
+    });
+
+    req.on('end', function onFindObjEnd() {
+        if (errorExpected) {
+            t.fail('should not get end event, only error event');
+        } else {
+            t.pass('should get end event and not error');
+            t.equal(nbRecordsFound, nbRecordsExpected, 'should have found ' +
+                nbRecordsExpected + ' record');
+            if (verifyRecords) {
+                t.ok(verifyRecords(recordsReceived), 'verifyRecords failed');
+            }
+        }
+        t.end();
+    });
+}
+
+
 ///--- Exports
 
 module.exports = {
@@ -305,5 +397,6 @@ module.exports = {
     createServer: createServer,
     checkDeepSubset: checkDeepSubset,
     cleanupServer: cleanupServer,
-    defineStatelessTestCase: defineStatelessTestCase
+    defineStatelessTestCase: defineStatelessTestCase,
+    performFindObjectsTest: performFindObjectsTest
 };
