commit ed6a791a8fb9bbedf2054438d62f8d7d4b390700 (refs/changes/46/2646/1)
Author: Jan Wyszynski <jan.wyszynski@joyent.com>
Date:   2017-09-23T00:26:42+00:00 (2 years, 1 month ago)
    
    MORAY-410 FindObjects needs more tests

diff --git a/test/findobjects-requireindexes.test.js b/test/findobjects-requireindexes.test.js
index 42022af..52e235a 100644
--- a/test/findobjects-requireindexes.test.js
+++ b/test/findobjects-requireindexes.test.js
@@ -16,6 +16,7 @@
 var assert = require('assert-plus');
 var jsprim = require('jsprim');
 var libuuid = require('libuuid');
+var util = require('util');
 var tape = require('tape');
 var vasync = require('vasync');
 var VError = require('verror');
@@ -62,17 +63,114 @@ var BUCKET_CFG_V2 = {
     }
 };
 
+/*
+ * Used to test failures for substring operations when the value being tested
+ * against is an array.
+ */
+var ARRAY_BUCKET_CFG = {
+    index: {
+        foo: {
+            type: '[string]'
+        }
+    },
+    options: {
+        version: 1
+    }
+};
+
+/* Used to test >= and <= operations on ip types. */
+var IP_BUCKET_CFG = {
+    index: {
+        addr: {
+            type: 'ip'
+        }
+    },
+    options: {
+        version: 1
+    }
+};
+
+/* Used to test >= and <= operations on subnet types. */
+var SUBNET_BUCKET_CFG = {
+    index: {
+        net: {
+            type: 'subnet'
+        }
+    },
+    options: {
+        version: 1
+    }
+};
+
+/*
+ * Used for testing the sort option exposed by find objects. The singleton
+ * field is used to filter out a single object to test the single-object
+ * sort case.
+ */
+var SORT_BUCKET_CFG = {
+    index: {
+        sort_by: {
+            type: 'number'
+        },
+        singleton: {
+            type: 'boolean'
+        }
+    },
+    options: {
+        version: 1
+    }
+};
+
 var CLIENT_WITHOUT_REQUIRE_INDEXES;
 var CLIENT_WITH_REQUIRE_INDEXES;
 
 var SERVER;
 
 var TEST_BUCKET = 'moray_unit_test_' + libuuid.create().substr(0, 7);
+var TEST_ARRAY_BUCKET = 'moray_unit_test_array' + libuuid.create().substr(0, 7);
+var TEST_IP_BUCKET = 'moray_unit_test_ip' + libuuid.create().substr(0, 7);
+var TEST_SUBNET_BUCKET = 'moray_unit_test_subnet' +
+    libuuid.create().substr(0, 7);
+var TEST_SORT_BUCKET = 'moray_unit_test_sort' + libuuid.create().substr(0, 7);
+var TEST_LARGE_BUCKET = 'moray_unit_test_large' + libuuid.create().substr(0, 7);
 
 var TEST_OBJECT_KEY = 'someFoo';
 var TEST_OBJECT_VALUE = {foo: 'bar', bar: 'baz'};
 var TEST_SEARCH_FILTER = '(&(foo=bar)(bar=baz))';
 
+var TEST_SEARCH_FILTER_BAD_AND = '(&(nonexisting=field)(notthere=filter))';
+var TEST_SEARCH_FILTER_BAD_OR = '(|(nonexisting=field))';
+
+var TEST_SEARCH_FILTER_BAD_SUBSTR_INITIAL = '(foo=initial*)';
+var TEST_SEARCH_FILTER_BAD_SUBSTR_ANY = '(foo=*any*)';
+var TEST_SEARCH_FILTER_BAD_SUBSTR_FINAL = '(foo=*final)';
+var TEST_SEARCH_FILTER_BAD_EXT = '(foo:fakeExt:=bad)';
+
+var TEST_IP_GE_FILTER = '(addr>=192.168.1.0)';
+var TEST_IP_OBJECTS = {
+    'ipobject_le' : {addr: '192.168.1.0'},
+    'ipobject_strict_l': {addr: '192.168.0.255'},
+    'ipobject_strict_g': {addr: '192.168.1.1'}
+};
+
+var TEST_SUBNET_GE_FILTER = '(net>=192.168.1.0/24)';
+var TEST_SUBNET_LE_FILTER = '(net<=192.168.1.0/24)';
+var TEST_SUBNET_OBJECTS = {
+    'subnetobject_e' : {net: '192.168.1.0/24'},
+    'subnetobject_strict_l' : {net: '192.168.0.0/24'},
+    'subnetobject_strict_g' : {net: '192.168.2.0/24'}
+};
+
+var TEST_SORT_SINGLETON_FILTER = '(singleton=true)';
+
+var TEST_SORT_OBJECTS = {
+    'first': {sort_by: 1, singleton: true},
+    'second': {sort_by: 2, singleton: false},
+    'third': {sort_by: 3, singleton: false},
+    'fourth': {sort_by: 4, singleton: false},
+    'fifth': {sort_by: 5, singleton: false}
+};
+
 /*
  * Some fields usable in a findObjects request's search filter have underlying
  * indexes that are usable from the time the bucket is created. We want to make
@@ -125,6 +223,8 @@ function performFindObjectsTest(t, client, options) {
         'options.expectedResults.nbRecordsFound');
     assert.optionalString(options.expectedResults.errMsg,
         'options.expectedResults.errMsg');
+    assert.optionalFunc(options.expectedResults.verifyRecords,
+        'options.expectedResults.verifyRecords');
 
     var bucketName = options.bucketName;
     var errorExpected = options.expectedResults.error;
@@ -134,6 +234,17 @@ function performFindObjectsTest(t, client, options) {
     var req;
     var searchFilter = options.searchFilter;
 
+    /*
+     * A function that accepts an array or all the records
+     * found during a test. It should return either true
+     * or false, depending on whether the test should pass
+     * or fail. This function is currently used to verify
+     * the order of the records returned to a findobjects
+     * query that requests a sort.
+     */
+    var verifyRecords = options.expectedResults.verifyRecords;
+    var recordsReceived = [];
+
     /*
      * We intentionally bypass the bucket cache when performing findObjects
      * requests because we want to run tests before and after the test bucket
@@ -171,6 +282,7 @@ function performFindObjectsTest(t, client, options) {
 
     req.on('record', function onRecord(record) {
         ++nbRecordsFound;
+        recordsReceived.push(record);
     });
 
     req.on('end', function onFindObjEnd() {
@@ -180,6 +292,9 @@ function performFindObjectsTest(t, client, options) {
             t.pass('should get end event and not error');
             t.equal(nbRecordsFound, nbRecordsExpected, 'should have found ' +
                 nbRecordsExpected + ' record');
+            if (verifyRecords) {
+                t.ok(verifyRecords(recordsReceived), 'verifyRecords failed');
+            }
         }
         t.end();
     });
@@ -228,6 +343,76 @@ tape.test('setup', function (t) {
                     t.ifErr(bucketUpdateErr);
                     next();
                 });
+        },
+        function createArrayTestBucket(ctx, next) {
+            CLIENT_WITHOUT_REQUIRE_INDEXES.createBucket(TEST_ARRAY_BUCKET,
+                ARRAY_BUCKET_CFG, function onBucketCreated(bucketCreateErr) {
+                    t.ifErr(bucketCreateErr);
+                    next();
+                });
+        },
+        function createIpTestBucket(ctx, next) {
+            CLIENT_WITHOUT_REQUIRE_INDEXES.createBucket(TEST_IP_BUCKET,
+                IP_BUCKET_CFG, function onBucketCreated(bucketCreateErr) {
+                    t.ifErr(bucketCreateErr);
+                    next();
+                });
+        },
+        function putTestIpObjects(ctx, next) {
+            Object.keys(TEST_IP_OBJECTS).forEach(function (key) {
+                CLIENT_WITHOUT_REQUIRE_INDEXES.putObject(TEST_IP_BUCKET,
+                    key, TEST_IP_OBJECTS[key], {etag: null},
+                    function onPutObj(putObjErr, meta) {
+                        t.ifErr(putObjErr);
+                        t.ok(meta);
+                        if (meta) {
+                            t.ok(meta.etag);
+                        }
+                    });
+            });
+            next();
+        },
+        function createSubnetTestBucket(ctx, next) {
+            CLIENT_WITHOUT_REQUIRE_INDEXES.createBucket(TEST_SUBNET_BUCKET,
+                SUBNET_BUCKET_CFG, function onBucketCreated(bucketCreateErr) {
+                    t.ifErr(bucketCreateErr);
+                    next();
+                });
+        },
+        function putTestSubnetObjects(ctx, next) {
+            Object.keys(TEST_SUBNET_OBJECTS).forEach(function (key) {
+                CLIENT_WITHOUT_REQUIRE_INDEXES.putObject(TEST_SUBNET_BUCKET,
+                    key, TEST_SUBNET_OBJECTS[key], {etag: null},
+                    function onPutObj(putObjErr, meta) {
+                        t.ifErr(putObjErr);
+                        t.ok(meta);
+                        if (meta) {
+                            t.ok(meta.etag);
+                        }
+                    });
+            });
+            next();
+        },
+        function createSortTestBucket(ctx, next) {
+            CLIENT_WITHOUT_REQUIRE_INDEXES.createBucket(TEST_SORT_BUCKET,
+                SORT_BUCKET_CFG, function onBucketCreated(bucketCreateErr) {
+                    t.ifErr(bucketCreateErr);
+                    next();
+                });
+        },
+        function putTestSortObjects(ctx, next) {
+            Object.keys(TEST_SORT_OBJECTS).forEach(function (key) {
+                CLIENT_WITHOUT_REQUIRE_INDEXES.putObject(TEST_SORT_BUCKET,
+                    key, TEST_SORT_OBJECTS[key], {etag: null},
+                    function onPutObj(putObjErr, meta) {
+                        t.ifErr(putObjErr);
+                        t.ok(meta);
+                        if (meta) {
+                            t.ok(meta.etag);
+                        }
+                    });
+            });
+            next();
         }
     ]}, function onTestSetupDone(testSetupErr) {
         t.end();
@@ -286,6 +471,341 @@ tape.test('client() - findobjects({requireIndexes: true})', function (t) {
     });
 });
 
+tape.test('client() - findobjects({requireIndexes: false})', function (t) {
+    performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
+        bucketName: TEST_BUCKET,
+        searchFilter: TEST_SEARCH_FILTER_BAD_AND,
+        findObjectsOpts: {requireIndexes: false},
+        expectedResults: {
+            /*
+             * Using requireIndexes: true should result in an error, because the
+             * test filter contains fields whose index is not usable.
+             */
+            error: true,
+            nbRecordsFound: 0,
+            errMsg: TEST_BUCKET + ' does not have indexes that support ' +
+                TEST_SEARCH_FILTER_BAD_AND
+        }
+    });
+});
+
+tape.test('client() - findobjects({requireIndexes: false})', function (t) {
+    performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
+        bucketName: TEST_BUCKET,
+        searchFilter: TEST_SEARCH_FILTER_BAD_OR,
+        findObjectsOpts: {requireIndexes: false},
+        expectedResults: {
+            /*
+             * Using requireIndexes: true should result in an error, because the
+             * test filter contains fields whose index is not usable.
+             */
+            error: true,
+            nbRecordsFound: 0,
+            errMsg: TEST_BUCKET + ' does not have indexes that support ' +
+                TEST_SEARCH_FILTER_BAD_OR
+        }
+    });
+});
+
+tape.test('client() - findobjects({requireIndexes: false})', function (t) {
+    performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
+        bucketName: TEST_ARRAY_BUCKET,
+        searchFilter: TEST_SEARCH_FILTER_BAD_SUBSTR_INITIAL,
+        findObjectsOpts: {requireIndexes: false},
+        expectedResults: {
+            /*
+             * Using requireIndexes: true should result in an error, because the
+             * test filter contains fields whose index is not usable.
+             */
+            error: true,
+            nbRecordsFound: 0,
+            errMsg: TEST_ARRAY_BUCKET + ' does not have indexes that support ' +
+                TEST_SEARCH_FILTER_BAD_SUBSTR_INITIAL
+        }
+    });
+});
+
+tape.test('client() - findobjects({requireIndexes: false})', function (t) {
+    performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
+        bucketName: TEST_ARRAY_BUCKET,
+        searchFilter: TEST_SEARCH_FILTER_BAD_SUBSTR_ANY,
+        findObjectsOpts: {requireIndexes: false},
+        expectedResults: {
+            /*
+             * Using requireIndexes: true should result in an error, because the
+             * test filter contains fields whose index is not usable.
+             */
+            error: true,
+            nbRecordsFound: 0,
+            errMsg: TEST_ARRAY_BUCKET + ' does not have indexes that support ' +
+                TEST_SEARCH_FILTER_BAD_SUBSTR_ANY
+        }
+    });
+});
+
+tape.test('client() - findobjects({requireIndexes: false})', function (t) {
+    performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
+        bucketName: TEST_ARRAY_BUCKET,
+        searchFilter: TEST_SEARCH_FILTER_BAD_SUBSTR_FINAL,
+        findObjectsOpts: {requireIndexes: false},
+        expectedResults: {
+            /*
+             * Using requireIndexes: true should result in an error, because the
+             * test filter contains fields whose index is not usable.
+             */
+            error: true,
+            nbRecordsFound: 0,
+            errMsg: TEST_ARRAY_BUCKET + ' does not have indexes that support ' +
+                TEST_SEARCH_FILTER_BAD_SUBSTR_FINAL
+        }
+    });
+});
+
+tape.test('client() - findobjects({requireIndexes: false})', function (t) {
+     performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
+        bucketName: TEST_IP_BUCKET,
+        searchFilter: TEST_IP_GE_FILTER,
+        findObjectsOpts: {requireIndexes: false},
+        expectedResults: {
+            error: false,
+            nbRecordsFound: 2
+        }
+    });
+});
+
+tape.test('client() - findobjects({requireIndexes: false})', function (t) {
+     performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
+        bucketName: TEST_SUBNET_BUCKET,
+        searchFilter: TEST_SUBNET_GE_FILTER,
+        findObjectsOpts: {requireIndexes: false},
+        expectedResults: {
+            error: false,
+            nbRecordsFound: 2
+        }
+    });
+});
+
+tape.test('client() - findobjects({requireIndexes: false})', function (t) {
+     performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
+        bucketName: TEST_SUBNET_BUCKET,
+        searchFilter: TEST_SUBNET_LE_FILTER,
+        findObjectsOpts: {requireIndexes: false},
+        expectedResults: {
+            error: false,
+            nbRecordsFound: 2
+        }
+    });
+});
+
+tape.test('client() - findobjects({requireIndexes: false})', function (t) {
+     performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
+        bucketName: TEST_SORT_BUCKET,
+        searchFilter: '(sort_by=*)',
+        findObjectsOpts: {
+            requireIndexes: false,
+            sort: {
+                order: 'ASC',
+                attribute: 'sort_by'
+            }
+        },
+        expectedResults: {
+            error: false,
+            nbRecordsFound: 5,
+            verifyRecords: function (records) {
+                var order = 1;
+                for (var i = 0; i < 5; i++) {
+                    if (records[i].value.sort_by != order) {
+                        return false;
+                    }
+                    order++;
+                }
+                return true;
+            }
+        }
+    });
+});
+
+tape.test('client() - findobjects({requireIndexes: false})', function (t) {
+     performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
+        bucketName: TEST_SORT_BUCKET,
+        searchFilter: '(sort_by=*)',
+        findObjectsOpts: {
+            requireIndexes: false,
+            sort: {
+                order: 'DESC',
+                attribute: 'sort_by'
+            }
+        },
+        expectedResults: {
+            error: false,
+            nbRecordsFound: 5,
+            verifyRecords: function (records) {
+                var order = 5;
+                for (var i = 0; i < 5; i++) {
+                    if (records[i].value.sort_by != order) {
+                        return false;
+                    }
+                    order--;
+                }
+                return true;
+            }
+        }
+    });
+});
+
+tape.test('client() - findobjects({requireIndexes: false})', function (t) {
+     performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
+        bucketName: TEST_SORT_BUCKET,
+        searchFilter: '(&(sort_by=*)(singleton=true))',
+        findObjectsOpts: {
+            requireIndexes: false,
+            sort: {
+                order: 'ASC',
+                attribute: 'sort_by'
+            }
+        },
+        expectedResults: {
+            error: false,
+            nbRecordsFound: 1,
+            verifyRecords: function (records) {
+                return (records[0].value.sort_by == 1);
+            }
+        }
+    });
+});
+
+
+tape.test('client() - findobjects({requireIndexes: false})', function (t) {
+     performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
+        bucketName: TEST_SORT_BUCKET,
+        searchFilter: '(&(sort_by=*)(singleton=true))',
+        findObjectsOpts: {
+            requireIndexes: false,
+            sort: {
+                order: 'DESC',
+                attribute: 'sort_by'
+            }
+        },
+        expectedResults: {
+            error: false,
+            nbRecordsFound: 1,
+            verifyRecords: function (records) {
+                return (records[0].value.sort_by == 1);
+            }
+        }
+    });
+});
+
+/* Pass in the limit option as a string */
+tape.test('client() - findobjects({requireIndexes: false})', function (t) {
+     performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
+        bucketName: TEST_SORT_BUCKET,
+        searchFilter: '(sort_by=*)',
+        findObjectsOpts: {
+            requireIndexes: false,
+            limit: 1
+        },
+        expectedResults: {
+            error: false,
+            nbRecordsFound: 1
+        }
+    });
+});
+
+/* Pass in the limit option as a number */
+tape.test('client() - findobjects({requireIndexes: false})', function (t) {
+     performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
+        bucketName: TEST_SORT_BUCKET,
+        searchFilter: '(sort_by=*)',
+        findObjectsOpts: {
+            requireIndexes: false,
+            limit: '1'
+        },
+        expectedResults: {
+            error: false,
+            nbRecordsFound: 1
+        }
+    });
+});
+
+/* Pass in the offset option as a number. */
+tape.test('client() - findobjects({requireIndexes: false})', function (t) {
+     performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
+        bucketName: TEST_SORT_BUCKET,
+        searchFilter: '(sort_by=*)',
+        findObjectsOpts: {
+            requireIndexes: false,
+            offset: 2
+        },
+        expectedResults: {
+            error: false,
+            nbRecordsFound: 3
+        }
+    });
+});
+
+/* Pass in the offset option as a string */
+tape.test('client() - findobjects({requireIndexes: false})', function (t) {
+     performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
+        bucketName: TEST_SORT_BUCKET,
+        searchFilter: '(sort_by=*)',
+        findObjectsOpts: {
+            requireIndexes: false,
+            offset: '4'
+        },
+        expectedResults: {
+            error: false,
+            nbRecordsFound: 1
+        }
+    });
+});
+
+tape.test('client() - findobjects({requireIndexes: false})', function (t) {
+     performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
+        bucketName: TEST_SORT_BUCKET,
+        searchFilter: '(sort_by=*)',
+        findObjectsOpts: {
+            requireIndexes: false,
+            no_count: true
+        },
+        expectedResults: {
+            error: false,
+            nbRecordsFound: 5,
+            verifyRecords: function (records) {
+                for (var i = 0; i < records.length; i++) {
+                    if (records[i]._count) {
+                        return false;
+                    }
+                }
+                return true;
+            }
+        }
+    });
+});
+
+tape.test('client() - findobjects({requireIndexes: false})', function (t) {
+     performFindObjectsTest(t, CLIENT_WITHOUT_REQUIRE_INDEXES, {
+        bucketName: TEST_SORT_BUCKET,
+        searchFilter: '(sort_by=*)',
+        findObjectsOpts: {
+            requireIndexes: false,
+            sql_only: true
+        },
+        expectedResults: {
+            error: false,
+            nbRecordsFound: 1,
+            verifyRecords: function (records) {
+                for (var i = 0; i < records.length; i++) {
+                    if (!records[i].query || !records[i].args) {
+                        return false;
+                    }
+                }
+                return true;
+            }
+        }
+    });
+});
+
 function createTestFindobjectsRequireIndexes(searchFilter) {
     tape.test('client() - findobjects(' + searchFilter + ', {requireIndexes: ' +
         'true})', function (t) {
@@ -530,14 +1050,43 @@ tape.test('teardown', function (t) {
 
     var nbClientsClosed = 0;
 
-    CLIENT_WITHOUT_REQUIRE_INDEXES.delBucket(TEST_BUCKET,
-        function onDelBucket(delBucketErr) {
-            t.ifErr(delBucketErr);
-
-            CLIENT_WITHOUT_REQUIRE_INDEXES.once('close', onClientClosed);
-            CLIENT_WITHOUT_REQUIRE_INDEXES.once('close', onClientClosed);
+    vasync.waterfall([
+        function (callback) {
+            CLIENT_WITHOUT_REQUIRE_INDEXES.delBucket(TEST_BUCKET,
+                function onDelBucket(delBucketErr) {
+                    t.ifErr(delBucketErr);
+                    callback();
+                });
+        }, function (callback) {
+            CLIENT_WITHOUT_REQUIRE_INDEXES.delBucket(TEST_ARRAY_BUCKET,
+                function onDelBucket(delBucketErr) {
+                    t.ifErr(delBucketErr);
+                    callback();
+                });
+        }, function (callback) {
+            CLIENT_WITHOUT_REQUIRE_INDEXES.delBucket(TEST_IP_BUCKET,
+                function onDelBucket(delBucketErr) {
+                    t.ifErr(delBucketErr);
+                    callback();
+                });
+        }, function (callback) {
+            CLIENT_WITHOUT_REQUIRE_INDEXES.delBucket(TEST_SUBNET_BUCKET,
+                function onDelBucket(delBucketErr) {
+                    t.ifErr(delBucketErr);
+                    callback();
+                });
+        }, function (callback) {
+            CLIENT_WITHOUT_REQUIRE_INDEXES.delBucket(TEST_SORT_BUCKET,
+                function onDelBucket(delBucketErr) {
+                    t.ifErr(delBucketErr);
+                    callback();
+                });
+        }
+    ], function () {
+        CLIENT_WITHOUT_REQUIRE_INDEXES.once('close', onClientClosed);
+        CLIENT_WITHOUT_REQUIRE_INDEXES.once('close', onClientClosed);
 
-            CLIENT_WITHOUT_REQUIRE_INDEXES.close();
-            CLIENT_WITH_REQUIRE_INDEXES.close();
-        });
-});
\ No newline at end of file
+        CLIENT_WITHOUT_REQUIRE_INDEXES.close();
+        CLIENT_WITH_REQUIRE_INDEXES.close();
+    });
+});
