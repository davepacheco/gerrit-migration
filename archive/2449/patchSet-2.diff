From 23aebf417a8cc8edb7ff7b747446010fbc1874db Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Wed, 23 Aug 2017 14:01:41 -0700
Subject: [PATCH] MANTA-3390 recent binder changes broke cross-DC DNS
 resolution MANTA-3392 binder recursion hits self, takes 3 seconds to return
 not found

---
 lib/recursion.js | 35 ++++++++++++++++++++++++++++++++++-
 lib/server.js    |  6 ++++++
 2 files changed, 40 insertions(+), 1 deletion(-)

diff --git a/lib/recursion.js b/lib/recursion.js
index 7ca33b0..ff8abc9 100644
--- a/lib/recursion.js
+++ b/lib/recursion.js
@@ -31,6 +31,7 @@ var util = require('util');
 var vasync = require('vasync');
 var xtend = require('xtend');
 var zk = require('./zk');
+var os = require('os');
 
 
 
@@ -235,6 +236,7 @@ function refresh(cb) {
 
 function lookup(query, hosts, prot, cb) {
         var self = this;
+        var log = query._log;
         var domainName = query.name();
         var question = dns.Question({
                 name: domainName,
@@ -243,6 +245,7 @@ function lookup(query, hosts, prot, cb) {
 
         //Choose a host at random
         var host = hosts[Math.floor(Math.random() * hosts.length)];
+        log.trace('recursion trying upstream %s', host);
         var port = 53;
         var req = dns.Request({
                 question: question,
@@ -291,6 +294,8 @@ function lookup(query, hosts, prot, cb) {
 }
 
 
+var cachedNics;
+var cachedNicsRefreshed;
 
 ///--- API
 
@@ -326,7 +331,35 @@ Recursion.prototype.resolve = function (query, cb) {
         if (self.dcs[dc] === undefined) {
                 return (respond());
         }
-        lookup.call(self, query, self.dcs[dc], 'udp', function (err, ans) {
+
+        /*
+         * Now filter out all upstream resolver addresses that match IP
+         * addresses on our own NICs. This way we avoid recursing into
+         * ourselves and wasting a bunch of effort.
+         */
+        var upstreams = self.dcs[dc];
+        var now = new Date();
+        if (cachedNics == undefined ||
+            now.getTime() - cachedNicsRefreshed.getTime() > 30000) {
+                cachedNics = os.networkInterfaces();
+                cachedNicsRefreshed = now;
+        }
+
+        var myAddrs = [];
+        Object.keys(cachedNics).forEach(function (k) {
+                cachedNics[k].forEach(function (nic) {
+                        myAddrs.push(nic.address);
+                });
+        });
+        upstreams = upstreams.filter(function (addr) {
+                return (myAddrs.indexOf(addr) === -1);
+        });
+
+        if (upstreams.length < 1) {
+                return (respond());
+        }
+
+        lookup.call(self, query, upstreams, 'udp', function (err, ans) {
                 if (!err) {
                         answers = ans;
                 }
diff --git a/lib/server.js b/lib/server.js
index 45c846e..38cac7c 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -137,6 +137,12 @@ function resolve(options, query, cb) {
 
         if (!node) {
                 log.trace('node not found in ZK cache');
+
+                if (options.recursion) {
+                        log.trace('handing off to recursion');
+                        options.recursion.resolve(query, cb);
+                        return;
+                }
                 /*
                  * You might expect we would return an NXDOMAIN or
                  * NODATA response here.
-- 
2.21.0

