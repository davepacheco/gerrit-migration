From b9169255c547f5166a12c71ec29c692b85f5ea92 Mon Sep 17 00:00:00 2001
From: David Pacheco <dap@joyent.com>
Date: Mon, 12 Dec 2016 16:10:48 -0800
Subject: [PATCH] MORAY-280 Support SRV records in node-moray MORAY-381 want
 default values with cueballOptions MORAY-380 translateLegacyOptions not
 setting "service" MORAY-384 moray's default connection backoff need to be
 much less aggressive MORAY-385 moray tools need some cleanup MORAY-349 remove
 "backfill" command

---
 Makefile                      |   3 +-
 test/cli-parsing.test.js      | 521 ++++++++++++++++++++++++++++
 test/cli-sanity.test.js       |  25 +-
 test/clientparams.test.js     | 624 ++++++++++++++++++++++++++++++++++
 test/helper.js                |  77 ++++-
 test/translate-legacy.test.js | 323 ------------------
 6 files changed, 1241 insertions(+), 332 deletions(-)
 create mode 100644 test/cli-parsing.test.js
 create mode 100644 test/clientparams.test.js
 delete mode 100644 test/translate-legacy.test.js

diff --git a/Makefile b/Makefile
index 711c949..3d3e066 100644
--- a/Makefile
+++ b/Makefile
@@ -60,6 +60,7 @@ CLEAN_FILES += node_modules
 test: | $(FAUCET) $(MORAY_TEST_ENV_FILE)
 	(set -o pipefail; \
 	source $(MORAY_TEST_ENV_FILE) && \
+	$(CTRUN) node test/cli-parsing.test.js | $(FAUCET) && \
 	$(CTRUN) node test/cli-sanity.test.js | $(FAUCET) && \
 	$(CTRUN) node test/client.test.js | $(FAUCET) && \
 	$(CTRUN) node test/close-handles.test.js | $(FAUCET) && \
@@ -69,7 +70,7 @@ test: | $(FAUCET) $(MORAY_TEST_ENV_FILE)
 	$(CTRUN) node test/integ.test.js | $(FAUCET) && \
 	$(CTRUN) node test/arrays.test.js | $(FAUCET) && \
 	$(CTRUN) node test/version.test.js | $(FAUCET) && \
-	$(CTRUN) node test/translate-legacy.test.js | $(FAUCET) && \
+	$(CTRUN) node test/clientparams.test.js | $(FAUCET) && \
 	$(CTRUN) node test/loop.test.js | bunyan -lfatal )
 	@echo tests passed
 
diff --git a/test/cli-parsing.test.js b/test/cli-parsing.test.js
new file mode 100644
index 0000000..2ed20b7
--- /dev/null
+++ b/test/cli-parsing.test.js
@@ -0,0 +1,521 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2016, Joyent, Inc.
+ */
+
+/*
+ * cli-parsing.test.js: tests library interfaces for parsing options
+ */
+
+var assert = require('assert-plus');
+var helper = require('./helper');
+var moraycli = require('moray/lib/cmd');
+var tape = require('tape');
+var stream = require('stream');
+
+var parseCliOptions = moraycli.parseCliOptions;
+var argvbase = [ 'node', 'testcmd' ];
+
+function parseOptions(args, callback) {
+    var errstream, clientOptions, argv, parser, errdata;
+    var gotusage = false;
+
+    assert.object(args, 'args');
+    assert.object(args.cliargs, 'args.cliargs');
+    assert.object(args.env, 'args.env');
+
+    errstream = new stream.PassThrough();
+    clientOptions = {};
+    argv = argvbase.concat(args.cliargs);
+    parser = parseCliOptions({
+        'argv': argv,
+        'env': args.env,
+        'errstream': errstream,
+        'extraOptStr': '',
+        'clientOptions': clientOptions,
+        'onUsage': function () {
+            gotusage = true;
+        }
+    });
+
+    errdata = '';
+    errstream.on('data', function (d) {
+        errdata += d.toString('utf8');
+    });
+
+    errstream.on('end', function () {
+        var lines = errdata.split('\n');
+        assert.strictEqual(lines[lines.length - 1], '');
+        lines.pop();
+
+        callback({
+            'argvRest': argv.slice(parser.optind()),
+            'clientOptions': clientOptions,
+            'errors': lines,
+            'gotUsage': gotusage
+        });
+    });
+
+    errstream.end();
+}
+
+tape.test('no environment, no arguments (all defaults)', function (t) {
+    parseOptions({
+        'cliargs': [],
+        'env': {}
+    }, function (result) {
+        t.deepEqual(result.errors, []);
+        t.deepEqual(result.argvRest, []);
+        helper.checkDeepSubset(t, {
+            'host': '127.0.0.1',
+            'port': 2020,
+            'srvDomain': undefined,
+            'failFast': true
+        }, result.clientOptions, 'clientOptions');
+        t.ok(!result.gotUsage);
+        t.end();
+    });
+});
+
+tape.test('no environment, -S specified', function (t) {
+    parseOptions({
+        'cliargs': [ '-S', 'snpp.net' ],
+        'env': {}
+    }, function (result) {
+        t.deepEqual(result.errors, []);
+        t.deepEqual(result.argvRest, []);
+        helper.checkDeepSubset(t, {
+            'host': undefined,
+            'port': undefined,
+            'srvDomain': 'snpp.net',
+            'failFast': true
+        }, result.clientOptions, 'clientOptions');
+        t.ok(!result.gotUsage);
+        t.end();
+    });
+});
+
+tape.test('no environment, -h specified', function (t) {
+    parseOptions({
+        'cliargs': [ '-h', 'shelbyville.net' ],
+        'env': {}
+    }, function (result) {
+        t.deepEqual(result.errors, []);
+        t.deepEqual(result.argvRest, []);
+        helper.checkDeepSubset(t, {
+            'host': 'shelbyville.net',
+            'port': 2020,
+            'srvDomain': undefined,
+            'failFast': true
+        }, result.clientOptions, 'clientOptions');
+        t.ok(!result.gotUsage);
+        t.end();
+    });
+});
+
+tape.test('no environment, -p specified', function (t) {
+    parseOptions({
+        'cliargs': [ '-p', '2031' ],
+        'env': {}
+    }, function (result) {
+        t.deepEqual(result.errors, []);
+        t.deepEqual(result.argvRest, []);
+        helper.checkDeepSubset(t, {
+            'host': '127.0.0.1',
+            'port': 2031,
+            'srvDomain': undefined,
+            'failFast': true
+        }, result.clientOptions, 'clientOptions');
+        t.ok(!result.gotUsage);
+        t.end();
+    });
+});
+
+tape.test('no environment, --host and --port specified', function (t) {
+    parseOptions({
+        'cliargs': [ '--port', '2031', '--host', '10.1.2.3' ],
+        'env': {}
+    }, function (result) {
+        t.deepEqual(result.errors, []);
+        t.deepEqual(result.argvRest, []);
+        helper.checkDeepSubset(t, {
+            'host': '10.1.2.3',
+            'port': 2031,
+            'srvDomain': undefined,
+            'failFast': true
+        }, result.clientOptions, 'clientOptions');
+        t.ok(!result.gotUsage);
+        t.end();
+    });
+});
+
+tape.test('MORAY_SERVICE in environment', function (t) {
+    parseOptions({
+        'cliargs': [],
+        'env': {
+            'MORAY_SERVICE': 'snpp.net'
+        }
+    }, function (result) {
+        t.deepEqual(result.errors, []);
+        t.deepEqual(result.argvRest, []);
+        helper.checkDeepSubset(t, {
+            'host': undefined,
+            'port': undefined,
+            'srvDomain': 'snpp.net',
+            'failFast': true
+        }, result.clientOptions, 'clientOptions');
+        t.ok(!result.gotUsage);
+        t.end();
+    });
+});
+
+tape.test('MORAY_SERVICE in environment, overridden with -h', function (t) {
+    parseOptions({
+        'cliargs': [ '-h', 'shelbyville.net' ],
+        'env': {
+            'MORAY_SERVICE': 'snpp.net'
+        }
+    }, function (result) {
+        t.deepEqual(result.errors, []);
+        t.deepEqual(result.argvRest, []);
+        helper.checkDeepSubset(t, {
+            'host': 'shelbyville.net',
+            'port': 2020,
+            'srvDomain': undefined,
+            'failFast': true
+        }, result.clientOptions, 'clientOptions');
+        t.ok(!result.gotUsage);
+        t.end();
+    });
+});
+
+tape.test('MORAY_SERVICE in environment, overridden with -p', function (t) {
+    parseOptions({
+        'cliargs': [ '-p', '2040' ],
+        'env': {
+            'MORAY_SERVICE': 'snpp.net'
+        }
+    }, function (result) {
+        t.deepEqual(result.errors, []);
+        t.deepEqual(result.argvRest, []);
+        helper.checkDeepSubset(t, {
+            'host': '127.0.0.1',
+            'port': 2040,
+            'srvDomain': undefined,
+            'failFast': true
+        }, result.clientOptions, 'clientOptions');
+        t.ok(!result.gotUsage);
+        t.end();
+    });
+});
+
+tape.test('MORAY_SERVICE in environment, overridden with --host and --port',
+    function (t) {
+    parseOptions({
+        'cliargs': [ '--host', 'shelbyville.net', '--port', '2040' ],
+        'env': {
+            'MORAY_SERVICE': 'snpp.net'
+        }
+    }, function (result) {
+        t.deepEqual(result.errors, []);
+        t.deepEqual(result.argvRest, []);
+        helper.checkDeepSubset(t, {
+            'host': 'shelbyville.net',
+            'port': 2040,
+            'srvDomain': undefined,
+            'failFast': true
+        }, result.clientOptions, 'clientOptions');
+        t.ok(!result.gotUsage);
+        t.end();
+    });
+});
+
+tape.test('MORAY_SERVICE in environment, overridden with --service',
+    function (t) {
+    parseOptions({
+        'cliargs': [ '--service', 'shelbyville.net' ],
+        'env': {
+            'MORAY_SERVICE': 'shelbyville.net'
+        }
+    }, function (result) {
+        t.deepEqual(result.errors, []);
+        t.deepEqual(result.argvRest, []);
+        helper.checkDeepSubset(t, {
+            'srvDomain': 'shelbyville.net',
+            'host': undefined,
+            'port': undefined,
+            'failFast': true
+        }, result.clientOptions, 'clientOptions');
+        t.ok(!result.gotUsage);
+        t.end();
+    });
+});
+
+tape.test('MORAY_SERVICE and MORAY_URL in environment, no args',
+    function (t) {
+    parseOptions({
+        'cliargs': [],
+        'env': {
+            'MORAY_SERVICE': 'snpp.net',
+            'MORAY_URL': 'tcp://shelbyville.net:1234'
+        }
+    }, function (result) {
+        t.deepEqual(result.errors, []);
+        t.deepEqual(result.argvRest, []);
+        helper.checkDeepSubset(t, {
+            'srvDomain': 'snpp.net',
+            'host': undefined,
+            'port': undefined,
+            'failFast': true
+        }, result.clientOptions, 'clientOptions');
+        t.ok(!result.gotUsage);
+        t.end();
+    });
+});
+
+tape.test('MORAY_SERVICE and MORAY_URL in environment, with -S',
+    function (t) {
+    parseOptions({
+        'cliargs': [ '-S', 'ogdenville.net' ],
+        'env': {
+            'MORAY_SERVICE': 'snpp.net',
+            'MORAY_URL': 'tcp://shelbyville.net:1234'
+        }
+    }, function (result) {
+        t.deepEqual(result.errors, []);
+        t.deepEqual(result.argvRest, []);
+        helper.checkDeepSubset(t, {
+            'srvDomain': 'ogdenville.net',
+            'host': undefined,
+            'port': undefined,
+            'failFast': true
+        }, result.clientOptions, 'clientOptions');
+        t.ok(!result.gotUsage);
+        t.end();
+    });
+});
+
+tape.test('MORAY_SERVICE and MORAY_URL in environment, with -p',
+    function (t) {
+    parseOptions({
+        'cliargs': [ '-p', '3020' ],
+        'env': {
+            'MORAY_SERVICE': 'snpp.net',
+            'MORAY_URL': 'tcp://shelbyville.net:1234'
+        }
+    }, function (result) {
+        t.deepEqual(result.errors, []);
+        t.deepEqual(result.argvRest, []);
+        helper.checkDeepSubset(t, {
+            'srvDomain': undefined,
+            'host': 'shelbyville.net',
+            'port': 3020,
+            'failFast': true
+        }, result.clientOptions, 'clientOptions');
+        t.ok(!result.gotUsage);
+        t.end();
+    });
+});
+
+tape.test('MORAY_URL in environment (host only)', function (t) {
+    parseOptions({
+        'cliargs': [],
+        'env': {
+            'MORAY_URL': 'tcp://shelbyville.net'
+        }
+    }, function (result) {
+        t.deepEqual(result.errors, []);
+        t.deepEqual(result.argvRest, []);
+        helper.checkDeepSubset(t, {
+            'host': 'shelbyville.net',
+            'port': 2020,
+            'srvDomain': undefined,
+            'failFast': true
+        }, result.clientOptions, 'clientOptions');
+        t.ok(!result.gotUsage);
+        t.end();
+    });
+});
+
+tape.test('MORAY_URL in environment (host and port)', function (t) {
+    parseOptions({
+        'cliargs': [],
+        'env': {
+            'MORAY_URL': 'tcp://shelbyville.net:1234'
+        }
+    }, function (result) {
+        t.deepEqual(result.errors, []);
+        t.deepEqual(result.argvRest, []);
+        helper.checkDeepSubset(t, {
+            'host': 'shelbyville.net',
+            'port': 1234,
+            'srvDomain': undefined,
+            'failFast': true
+        }, result.clientOptions, 'clientOptions');
+        t.ok(!result.gotUsage);
+        t.end();
+    });
+});
+
+tape.test('MORAY_URL in environment, -S specified', function (t) {
+    parseOptions({
+        'cliargs': [ '-S', 'snpp.net' ],
+        'env': {
+            'MORAY_URL': 'tcp://shelbyville.net:1234'
+        }
+    }, function (result) {
+        t.deepEqual(result.errors, []);
+        t.deepEqual(result.argvRest, []);
+        helper.checkDeepSubset(t, {
+            'host': undefined,
+            'port': undefined,
+            'srvDomain': 'snpp.net',
+            'failFast': true
+        }, result.clientOptions, 'clientOptions');
+        t.ok(!result.gotUsage);
+        t.end();
+    });
+});
+
+tape.test('MORAY_URL in environment, -h specified', function (t) {
+    parseOptions({
+        'cliargs': [ '-h', 'snpp.net' ],
+        'env': {
+            'MORAY_URL': 'tcp://shelbyville.net:1234'
+        }
+    }, function (result) {
+        t.deepEqual(result.errors, []);
+        t.deepEqual(result.argvRest, []);
+        helper.checkDeepSubset(t, {
+            'host': 'snpp.net',
+            'port': 1234,
+            'srvDomain': undefined,
+            'failFast': true
+        }, result.clientOptions, 'clientOptions');
+        t.ok(!result.gotUsage);
+        t.end();
+    });
+});
+
+tape.test('MORAY_URL in environment, -p specified', function (t) {
+    parseOptions({
+        'cliargs': [ '-p', '3040' ],
+        'env': {
+            'MORAY_URL': 'tcp://shelbyville.net:1234'
+        }
+    }, function (result) {
+        t.deepEqual(result.errors, []);
+        t.deepEqual(result.argvRest, []);
+        helper.checkDeepSubset(t, {
+            'host': 'shelbyville.net',
+            'port': 3040,
+            'srvDomain': undefined,
+            'failFast': true
+        }, result.clientOptions, 'clientOptions');
+        t.ok(!result.gotUsage);
+        t.end();
+    });
+});
+
+tape.test('MORAY_URL in environment, -h and -p specified', function (t) {
+    parseOptions({
+        'cliargs': [ '-h', '10.1.2.3', '-p', '3040' ],
+        'env': {
+            'MORAY_URL': 'tcp://shelbyville.net:1234'
+        }
+    }, function (result) {
+        t.deepEqual(result.errors, []);
+        t.deepEqual(result.argvRest, []);
+        helper.checkDeepSubset(t, {
+            'host': '10.1.2.3',
+            'port': 3040,
+            'srvDomain': undefined,
+            'failFast': true
+        }, result.clientOptions, 'clientOptions');
+        t.ok(!result.gotUsage);
+        t.end();
+    });
+});
+
+/*
+ * Failure cases
+ */
+
+/*
+ * Note that there's no analog test for a bad port specified in MORAY_URL
+ * because Node's implementation of url.parse() doesn't really allow us to
+ * handle it well.
+ */
+tape.test('bad input: no environment, bad port specified with -p',
+    function (t) {
+    parseOptions({
+        'cliargs': [ '-p', 'asdf' ],
+        'env': {}
+    }, function (result) {
+        t.deepEqual(result.errors, [ '-p/--port: expected valid TCP port' ]);
+        t.deepEqual(result.argvRest, []);
+        t.ok(result.gotUsage);
+        t.end();
+    });
+});
+
+tape.test('bad input: -p specified with -S', function (t) {
+    parseOptions({
+        'cliargs': [ '-p', '201', '-S', 'junk' ],
+        'env': {}
+    }, function (result) {
+        t.deepEqual(result.errors, [
+            '-S/--service cannot be combined with -h/--host or -p/--port'
+        ]);
+        t.deepEqual(result.argvRest, []);
+        t.ok(result.gotUsage);
+        t.end();
+    });
+});
+
+tape.test('bad input: -h specified with -S', function (t) {
+    parseOptions({
+        'cliargs': [ '-h', '1.2.3.4', '-S', 'junk' ],
+        'env': {}
+    }, function (result) {
+        t.deepEqual(result.errors, [
+            '-S/--service cannot be combined with -h/--host or -p/--port'
+        ]);
+        t.deepEqual(result.argvRest, []);
+        t.ok(result.gotUsage);
+        t.end();
+    });
+});
+
+tape.test('bad input: -S specified with IP address', function (t) {
+    parseOptions({
+        'cliargs': [ '-S', '1.2.3.4' ],
+        'env': {}
+    }, function (result) {
+        t.deepEqual(result.errors, [
+            'cannot use an IP address with -S/--service/MORAY_SERVICE'
+        ]);
+        t.deepEqual(result.argvRest, []);
+        t.ok(result.gotUsage);
+        t.end();
+    });
+});
+
+tape.test('bad input: -S specified with IP address', function (t) {
+    parseOptions({
+        'cliargs': [],
+        'env': { 'MORAY_SERVICE': '1.2.3.4' }
+    }, function (result) {
+        t.deepEqual(result.errors, [
+            'cannot use an IP address with -S/--service/MORAY_SERVICE'
+        ]);
+        t.deepEqual(result.argvRest, []);
+        t.ok(result.gotUsage);
+        t.end();
+    });
+});
diff --git a/test/cli-sanity.test.js b/test/cli-sanity.test.js
index 3a4096c..168d7ff 100644
--- a/test/cli-sanity.test.js
+++ b/test/cli-sanity.test.js
@@ -335,7 +335,6 @@ function parseFindobjectsResults(t, stdout)
 function generateFailureTests()
 {
     var cmds = [
-        'backfill',
         'delbucket',
         'delmany',
         'delobject',
@@ -364,6 +363,16 @@ function generateFailureTests()
                 ':.*bogus-test.*: failed to establish connection')
         });
 
+        testcases.push({
+            'name': cmdname + ': usage error',
+            'exec': [ cmdname ].concat(
+                [ '-h', 'bogus-test', '-S', 'other-test' ].concat(args)),
+            'statusCode': 2,
+            'stdout': /^$/,
+            'stderr': new RegExp(
+                '-S/--service cannot be combined with -h/--host or -p/--port')
+        });
+
         testcases.push({
             'name': cmdname + ': bad port',
             'exec': [ cmdname ].concat(
@@ -391,11 +400,15 @@ function validArgsFor(cmdname)
         return ([ 'select NOW()' ]);
     }
 
-    if (cmdname == 'backfill' || cmdname == 'delbucket' ||
-        cmdname == 'delmany' || cmdname == 'delobject' ||
-        cmdname == 'findobjects' || cmdname == 'getbucket' ||
-        cmdname == 'getobject' || cmdname == 'putbucket' ||
-        cmdname == 'putobject' || cmdname == 'reindexobjects' ||
+    if (cmdname == 'delbucket' ||
+        cmdname == 'delmany' ||
+        cmdname == 'delobject' ||
+        cmdname == 'findobjects' ||
+        cmdname == 'getbucket' ||
+        cmdname == 'getobject' ||
+        cmdname == 'putbucket' ||
+        cmdname == 'putobject' ||
+        cmdname == 'reindexobjects' ||
         cmdname == 'updatemany') {
         /* add a bucket name */
         args.push(bucket);
diff --git a/test/clientparams.test.js b/test/clientparams.test.js
new file mode 100644
index 0000000..ab0325a
--- /dev/null
+++ b/test/clientparams.test.js
@@ -0,0 +1,624 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2016, Joyent, Inc.
+ */
+
+/*
+ * clientparams.test.js: tests parsing various combinations of client parameters
+ */
+
+var assertplus = require('assert-plus');
+var moray = require('moray');
+var tape = require('tape');
+var parseMorayParameters = moray.Client.privateParseMorayParameters;
+
+var helper = require('./helper');
+
+var testcases;
+
+function main()
+{
+    testcases.forEach(function (tc) {
+        helper.defineStatelessTestCase(tape, parseMorayParameters, tc);
+    });
+}
+
+testcases = [
+
+/* Invalid arguments */
+{
+    'name': 'error case: missing arguments',
+    'input': {},
+    'errmsg': /at least one of .* must be specified/
+}, {
+    'name': 'error case: url: bad type',
+    'input': {
+        'url': {}
+    },
+    'errmsg': /args.url \(string\) is required$/
+}, {
+    'name': 'error case: host: bad type',
+    'input': {
+        'host': {}
+    },
+    'errmsg': /args.host \(string\) is required$/
+}, {
+    'name': 'error case: port: bad type',
+    'input': {
+        'host': 'dental.plan',
+        'port': {}
+    },
+    'errmsg': /args.port must be a string or number/
+}, {
+    'name': 'error case: srvDomain with an IP address',
+    'input': {
+        'srvDomain': '127.0.0.1'
+    },
+    /* JSSTYLED */
+    'errmsg': /cannot use "srvDomain" with an IP address/
+}, {
+    'name': 'error case: cueballOptions: bad type',
+    'input': {
+        'cueballOptions': 47
+    },
+    'errmsg': /args.cueballOptions \(object\) is required$/
+}, {
+    'name': 'error case: cueballOptions.target: requires maximum',
+    'input': {
+        'cueballOptions': {
+            'target': 12
+        }
+    },
+    /* JSSTYLED */
+    'errmsg': /must specify either or both of "target" and "maximum"/
+}, {
+    'name': 'error case: cueballOptions.maximum: requires target',
+    'input': {
+        'cueballOptions': {
+            'maximum': 12
+        }
+    },
+    /* JSSTYLED */
+    'errmsg': /must specify either or both of "target" and "maximum"/
+}, {
+    'name': 'error case: cueballOptions.target: bad type',
+    'input': {
+        'cueballOptions': {
+            'target': 'foo'
+        }
+    },
+    'errmsg': /args.cueballOptions.target \(number\) is required$/
+}, {
+    'name': 'error case: cueballOptions.maximum: bad type',
+    'input': {
+        'cueballOptions': {
+            'maximum': 'foo'
+        }
+    },
+    'errmsg': /args.cueballOptions.maximum \(number\) is required$/
+}, {
+    'name': 'error case: cueballOptions.maxDNSConcurrency: bad type',
+    'input': {
+        'cueballOptions': {
+            'maxDNSConcurrency': 'foo'
+        }
+    },
+    'errmsg': /args.cueballOptions.maxDNSConcurrency \(number\) is required$/
+}, {
+    'name': 'error case: cueballOptions.recovery: bad type',
+    'input': {
+        'cueballOptions': {
+            'recovery': 38
+        }
+    },
+    'errmsg': /args.cueballOptions.recovery \(object\) is required$/
+}, {
+    'name': 'error case: cueballOptions.resolvers: bad type (number)',
+    'input': {
+        'cueballOptions': {
+            'resolvers': 38
+        }
+    },
+    'errmsg': /args.cueballOptions.resolvers \(\[string\]\) is required$/
+}, {
+    'name': 'error case: cueballOptions.resolvers: bad type (object)',
+    'input': {
+        'cueballOptions': {
+            'resolvers': {}
+        }
+    },
+    'errmsg': /args.cueballOptions.resolvers \(\[string\]\) is required$/
+}, {
+    'name': 'error case: cueballOptions.defaultPort: bad type',
+    'input': {
+        'cueballOptions': {
+            'defaultPort': 'braces'
+        }
+    },
+    'errmsg': /args.cueballOptions.defaultPort \(number\) is required$/
+}, {
+    'name': 'error case: cueballOptions.resolvers: bad element types',
+    'input': {
+        'cueballOptions': {
+            'resolvers': [ 37 ]
+        }
+    },
+    'errmsg': /args.cueballOptions.resolvers \(\[string\]\) is required$/
+}, {
+    'name': 'error case: cueballOptions.service: bad type',
+    'input': {
+        'host': 'dental.plan',
+        'cueballOptions': {
+            'service': 38
+        }
+    },
+    'errmsg': /args.cueballOptions.service \(string\) is required$/
+}, {
+    'name': 'error case: cueballOptions.domain: not allowed',
+    'input': {
+        'host': 'dental.plan',
+        'cueballOptions': {
+            'domain': 'foobar'
+        }
+    },
+    /* JSSTYLED */
+    'errmsg': /"domain" may not be specified in cueballOptions$/
+}, {
+    'name': 'error case: connectTimeout: bad type',
+    'input': {
+        'host': 'dental.plan',
+        'connectTimeout': '1234'
+    },
+    'errmsg': /args.connectTimeout \(number\) is required$/
+}, {
+    'name': 'error case: maxConnections: bad type',
+    'input': {
+        'host': 'dental.plan',
+        'maxConnections': {}
+    },
+    'errmsg': /args.maxConnections \(number\) is required$/
+}, {
+    'name': 'error case: dns: bad type',
+    'input': {
+        'host': 'dental.plan',
+        'dns': 17
+    },
+    'errmsg': /args.dns \(object\) is required$/
+}, {
+    'name': 'error case: retry: bad type',
+    'input': {
+        'host': 'dental.plan',
+        'retry': 37
+    },
+    'errmsg': /args.retry \(object\) is required$/
+}, {
+    'name': 'error case: retry: bad type',
+    'input': {
+        'host': 'dental.plan',
+        'retry': 37
+    },
+    'errmsg': /args.retry \(object\) is required$/
+}, {
+    'name': 'error case: retry: minTimeout > maxTimeout',
+    'input': {
+        'host': 'dental.plan',
+        'retry': {
+            'retries': 42,
+            'minTimeout': 7890,
+            'maxTimeout': 4567
+        }
+    },
+    'errmsg': /maxTimeout.*minTimeout/
+},
+
+/* Valid arguments */
+
+{
+    /*
+     * This is one of the most important default configurations.  This is also
+     * one of the only ones for which we bother verifying all the default
+     * filled-in values.
+     */
+    'name': 'srvDomain specified',
+    'input': { 'srvDomain': 'chilitown' },
+    'output': {
+        'mode': 'srv',
+        'label': 'chilitown',
+        'cueballOptions': {
+            'domain': 'chilitown',
+            'service': '_moray._tcp',
+            'defaultPort': 2020,
+            'maxDNSConcurrency': 3,
+            'target': 6,
+            'maximum': 15,
+            'recovery': {
+                'default': {
+                    'retries': 5,
+                    'timeout': 2000,
+                    'maxTimeout': 30000,
+                    'delay': 1000,
+                    'maxDelay': 60000
+                },
+                'dns': {
+                    'retries': 5,
+                    'timeout': 1000,
+                    'maxTimeout': 20000,
+                    'delay': 10,
+                    'maxDelay': 10000
+                },
+                'dns_srv': {
+                    'retries': 0,
+                    'timeout': 1000,
+                    'maxTimeout': 20000,
+                    'delay': 10,
+                    'maxDelay': 10000
+                }
+            }
+        }
+    }
+}, {
+    /* This is one of the most important default configurations. */
+    'name': 'srvDomain specified with failFast',
+    'input': { 'srvDomain': 'chilitown', 'failFast': true },
+    'output': {
+        'mode': 'srv',
+        'label': 'chilitown',
+        'cueballOptions': {
+            'domain': 'chilitown',
+            'service': '_moray._tcp',
+            'defaultPort': 2020,
+            'maxDNSConcurrency': 3,
+            'target': 6,
+            'maximum': 15,
+            'recovery': {
+                'default': {
+                    'retries': 0,
+                    'timeout': 2000,
+                    'maxTimeout': 30000,
+                    'delay': 0,
+                    'maxDelay': 0
+                },
+                'dns': {
+                    'retries': 5,
+                    'timeout': 1000,
+                    'maxTimeout': 20000,
+                    'delay': 10,
+                    'maxDelay': 10000
+                },
+                'dns_srv': {
+                    'retries': 0,
+                    'timeout': 1000,
+                    'maxTimeout': 20000,
+                    'delay': 10,
+                    'maxDelay': 10000
+                }
+            }
+        }
+    }
+}, {
+    /* This is one of the most important default configurations. */
+    'name': 'host specified, missing port',
+    'input': { 'host': 'foobar' },
+    'output': {
+        'mode': 'direct',
+        'label': 'foobar:2020',
+        'cueballOptions': {
+            'domain': 'foobar',
+            'service': '_moraybogus._tcp',
+            'defaultPort': 2020
+        }
+    }
+}, {
+    /* This is one of the most important default configurations. */
+    'name': 'host specified with port',
+    'input': { 'host': 'foobar', 'port': 2021 },
+    'output': {
+        'mode': 'direct',
+        'label': 'foobar:2021',
+        'cueballOptions': {
+            'domain': 'foobar',
+            'service': '_moraybogus._tcp',
+            'defaultPort': 2021
+        }
+    }
+}, {
+    'name': 'url specified with IP and port',
+    'input': { 'url': 'tcp://10.1.2.3:2022' },
+    'output': {
+        'mode': 'direct',
+        'label': '10.1.2.3:2022',
+        'cueballOptions': {
+            'domain': '10.1.2.3',
+            'service': '_moraybogus._tcp',
+            'defaultPort': 2022
+        }
+    }
+}, {
+    'name': 'url specified with hostname and port',
+    'input': { 'url': 'tcp://chilitown:2023/' },
+    'output': {
+        'mode': 'direct',
+        'label': 'chilitown:2023',
+        'cueballOptions': {
+            'domain': 'chilitown',
+            'service': '_moraybogus._tcp',
+            'defaultPort': 2023
+        }
+    }
+}, {
+    'name': 'url specified with hostname only',
+    'input': { 'url': 'tcp://chilitown/' },
+    'output': {
+        'mode': 'direct',
+        'label': 'chilitown:2020',
+        'cueballOptions': {
+            'domain': 'chilitown',
+            'service': '_moraybogus._tcp',
+            'defaultPort': 2020
+        }
+    }
+}, {
+    'name': 'srvDomain: the works',
+    'input': {
+        'srvDomain': 'chilitown',
+        'cueballOptions': {
+            'service': '_moray._tcp',
+            'defaultPort': 2025,
+            'maxDNSConcurrency': 2,
+            'target': 18,
+            'maximum': 25,
+            'recovery': {
+                'default': {
+                    'retries': 17,
+                    'timeout': 1234,
+                    'maxTimeout': 1678,
+                    'delay': 123,
+                    'maxDelay': 156
+                },
+                'dns': {
+                    'retries': 27,
+                    'timeout': 2234,
+                    'maxTimeout': 2678,
+                    'delay': 223,
+                    'maxDelay': 256
+                },
+                'dns_srv': {
+                    'retries': 37,
+                    'timeout': 3234,
+                    'maxTimeout': 3678,
+                    'delay': 323,
+                    'maxDelay': 356
+                }
+            }
+        }
+    },
+    'output': {
+        'cueballOptions': {
+            'domain': 'chilitown',
+            'service': '_moray._tcp',
+            'defaultPort': 2025,
+            'maxDNSConcurrency': 2,
+            'target': 18,
+            'maximum': 25,
+            'recovery': {
+                'default': {
+                    'retries': 17,
+                    'timeout': 1234,
+                    'maxTimeout': 1678,
+                    'delay': 123,
+                    'maxDelay': 156
+                },
+                'dns': {
+                    'retries': 27,
+                    'timeout': 2234,
+                    'maxTimeout': 2678,
+                    'delay': 223,
+                    'maxDelay': 256
+                },
+                'dns_srv': {
+                    'retries': 37,
+                    'timeout': 3234,
+                    'maxTimeout': 3678,
+                    'delay': 323,
+                    'maxDelay': 356
+                }
+            }
+        }
+    }
+}, {
+    'name': 'url and port specified',
+    'input': { 'url': 'tcp://dental.plan:1234/', 'port': 3456 },
+    'output': {
+        'mode': 'direct',
+        'label': 'dental.plan:3456',
+        'cueballOptions': {
+            'domain': 'dental.plan',
+            'service': '_moraybogus._tcp',
+            'defaultPort': 3456
+        }
+    }
+}, {
+    'name': 'legacy: connectTimeout option',
+    'input': {
+        'url': 'tcp://foobar.a.b:5678',
+        'connectTimeout': 4567
+    },
+    'output': {
+        'mode': 'direct',
+        'cueballOptions': {
+            'service': '_moraybogus._tcp',
+            'domain': 'foobar.a.b',
+            'defaultPort': 5678,
+            'recovery': {
+                'default': {
+                    'timeout': 4567,
+                    'maxTimeout': 30000,
+                    'retries': 5,
+                    'delay': 1000,
+                    'maxDelay': 60000
+                }
+            }
+        }
+    }
+}, {
+    'name': 'legacy: maxConnections options (does not affect target)',
+    'input': {
+        'srvDomain': 'foobar.a.b',
+        'maxConnections': 427
+    },
+    'output': {
+        'cueballOptions': {
+            'service': '_moray._tcp',
+            'domain': 'foobar.a.b',
+            'target': 6,
+            'maximum': 427
+        }
+    }
+}, {
+    'name': 'legacy: maxConnections option (affects target)',
+    'input': {
+        'srvDomain': 'foobar.a.b',
+        'maxConnections': 1
+    },
+    'output': {
+        'cueballOptions': {
+            'service': '_moray._tcp',
+            'domain': 'foobar.a.b',
+            'target': 1,
+            'maximum': 1
+        }
+    }
+}, {
+    /* This is one of the most important default configurations. */
+    'name': 'legacy: dns option (only resolvers)',
+    'input': {
+        'url': 'tcp://foobar.a.b:5678',
+        'dns': {
+            'resolvers': [ '1.2.3.4', '5.6.7.8' ]
+        }
+    },
+    'output': {
+        'cueballOptions': {
+            'service': '_moraybogus._tcp',
+            'domain': 'foobar.a.b',
+            'defaultPort': 5678,
+            'resolvers': [ '1.2.3.4', '5.6.7.8' ],
+            'recovery': {
+                'dns': {
+                    'retries': 5,
+                    'timeout': 1000,
+                    'maxTimeout': 20000
+                },
+                'dns_srv': {
+                    'retries': 0,
+                    'timeout': 1,
+                    'maxTimeout': 1
+                }
+            }
+        }
+    }
+}, {
+    'name': 'legacy: dns option (complex)',
+    'input': {
+        'srvDomain': 'foobar.a.b',
+        'dns': {
+            /* checkInterval should not appear in the output. */
+            'checkInterval': 37,
+            'resolvers': [ '1.2.3.4', '5.6.7.8' ],
+            'timeout': 9876
+        }
+    },
+    'output': {
+        'cueballOptions': {
+            'service': '_moray._tcp',
+            'domain': 'foobar.a.b',
+            'resolvers': [ '1.2.3.4', '5.6.7.8' ],
+            'recovery': {
+                'dns': {
+                    'timeout': 9876,
+                    'maxTimeout': 20000
+                },
+                'dns_srv': {
+                    'timeout': 9876,
+                    'maxTimeout': 20000
+                }
+            }
+        }
+    }
+}, {
+    'name': 'legacy: retry option',
+    'input': {
+        'url': 'tcp://foobar.a.b:5678',
+        'retry': {
+            'retries': 42,
+            'minTimeout': 4567,
+            'maxTimeout': 7890
+        }
+    },
+    'output': {
+        'cueballOptions': {
+            'service': '_moraybogus._tcp',
+            'resolvers': undefined,
+            'recovery': {
+                'default': {
+                    'retries': 42,
+                    'delay': 4567,
+                    'maxDelay': 7890
+                }
+            }
+        }
+    }
+}, {
+    'name': 'legacy: the works',
+    'input': {
+        'srvDomain': 'example.com',
+        'connectTimeout': 111,
+        'dns': {
+            /* checkInterval should not appear in the output. */
+            'checkInterval': 555,
+            'resolvers': [ '1.1.1.1', '2.2.2.2' ],
+            'timeout': 222
+        },
+        'maxConnections': 333,
+        'retry': {
+            'retries': 444,
+            'minTimeout': 777,
+            'maxTimeout': 888
+        }
+    },
+    'output': {
+        'cueballOptions': {
+            'domain': 'example.com',
+            'service': '_moray._tcp',
+            'defaultPort': 2020,
+            'target': 6,
+            'maximum': 333,
+            'resolvers': [ '1.1.1.1', '2.2.2.2' ],
+            'recovery': {
+                'dns': {
+                    'timeout': 222,
+                    'maxTimeout': 20000
+                },
+                'dns_srv': {
+                    'retries': 0,
+                    'timeout': 222,
+                    'maxTimeout': 20000
+                },
+                'default': {
+                    'timeout': 111,
+                    'maxTimeout': 30000,
+                    'retries': 444,
+                    'delay': 777,
+                    'maxDelay': 888
+                }
+            }
+        }
+    }
+} ];
+
+main();
diff --git a/test/helper.js b/test/helper.js
index 1013170..86c12e2 100644
--- a/test/helper.js
+++ b/test/helper.js
@@ -8,7 +8,7 @@
  * Copyright (c) 2016, Joyent, Inc.
  */
 
-var assert = require('assert');
+var assert = require('assert-plus');
 var child = require('child_process');
 var forkexec = require('forkexec');
 var fs = require('fs');
@@ -166,6 +166,77 @@ function cleanupServer(server, cb) {
     }
 }
 
+/*
+ * This function behaves like t.deepEqual(), except that it ignores properties
+ * in "actual" that are not present in "expected".  This applies recursively, so
+ * that if expected.x.y exists but actual.x.y doesn't (but actual.x and
+ * expected.x are otherwise equivalent), then no error is thrown.
+ *
+ * Arguments:
+ *
+ *     t            the node-tape test context
+ *
+ *     expected     expected object
+ *
+ *     actual       actual object
+ *
+ *     prefix       property name for the top-level objects.  This is used to
+ *                  construct specific error messages when subproperties don't
+ *                  match.
+ */
+function checkDeepSubset(t, expected, actual, prefix) {
+    var k;
+
+    assert.object(t, 't');
+    assert.object(expected, 'expected');
+    assert.object(actual, 'actual');
+    assert.string(prefix, 'prefix');
+
+    for (k in expected) {
+        if (typeof (expected[k]) == 'object' &&
+            typeof (actual[k]) == 'object' &&
+            expected[k] !== null && actual[k] !== null &&
+            !Array.isArray(expected[k]) && !Array.isArray(actual[k])) {
+
+            checkDeepSubset(t, expected[k], actual[k], prefix + '.' + k);
+        } else {
+            t.deepEqual(actual[k], expected[k], prefix + '.' + k + '  matches');
+        }
+    }
+}
+
+/*
+ * Defines a node-tape test-case called "tc.name" for testing a stateless,
+ * synchronous function "func" with specific input "tc.input".  If "tc.output"
+ * is specified, the function should return an object of which "tc.output" is a
+ * subset (according to checkDeepSubset()).  Otherwise, "tc.errmsg" must be
+ * specified, and the function must thrown an exception such that t.throws(...,
+ * errmsg) passes.
+ */
+function defineStatelessTestCase(tape, func, tc) {
+    assert.string(tc.name);
+    assert.object(tc.input);
+    assert.optionalObject(tc.output);
+    assert.ok(tc.output || tc.errmsg);
+    assert.ok(!(tc.output && tc.errmsg));
+
+    tape.test(tc.name, function runTestCase(t) {
+        var rv;
+
+        if (tc.errmsg) {
+            t.throws(function () {
+                func(tc.input);
+            }, tc.errmsg);
+        } else {
+            rv = func(tc.input);
+            assert.object(rv);
+            checkDeepSubset(t, tc.output, rv, 'result');
+        }
+
+        t.end();
+    });
+}
+
 ///--- Exports
 
 module.exports = {
@@ -173,5 +244,7 @@ module.exports = {
     createLogger: createLogger,
     createClient: createClient,
     createServer: createServer,
-    cleanupServer: cleanupServer
+    checkDeepSubset: checkDeepSubset,
+    cleanupServer: cleanupServer,
+    defineStatelessTestCase: defineStatelessTestCase
 };
diff --git a/test/translate-legacy.test.js b/test/translate-legacy.test.js
deleted file mode 100644
index 82b6f24..0000000
--- a/test/translate-legacy.test.js
+++ /dev/null
@@ -1,323 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2016, Joyent, Inc.
- */
-
-/*
- * translate-legacy.test.js: test Moray v2 function for translating v1-style
- * parameters.
- */
-
-var assertplus = require('assert-plus');
-var moray = require('moray');
-var tape = require('tape');
-var translateLegacyOptions = moray.Client.privateTranslateLegacyOptions;
-
-var testcases;
-
-function main()
-{
-    testcases.forEach(defineTestCase);
-}
-
-function defineTestCase(tc)
-{
-    assertplus.string(tc.name);
-    assertplus.object(tc.input);
-    assertplus.optionalObject(tc.output);
-    assertplus.ok(tc.output || tc.errmsg);
-    assertplus.ok(!(tc.output && tc.errmsg));
-
-    tape.test(tc.name, function runTestCase(t) {
-        var rv;
-
-        if (tc.errmsg) {
-            t.throws(function () {
-                translateLegacyOptions(tc.input);
-            }, tc.errmsg);
-            t.end();
-            return;
-        }
-
-        /*
-         * There's no sense in testing all of the defaults.  We only compare
-         * properties that were specified in tc.output.
-         */
-        rv = translateLegacyOptions(tc.input);
-        assertplus.object(rv);
-        checkDeepSubset(t, tc.output, rv, 'result');
-        t.end();
-    });
-}
-
-/*
- * This function behaves like t.deepEqual(), except that it ignores properties
- * in "actual" that are not present in "expected".  This applies recursively, so
- * that if expected.x.y exists but actual.x.y doesn't (but actual.x and
- * expected.x are otherwise equivalent), then no error is thrown.
- */
-function checkDeepSubset(t, expected, actual, prefix)
-{
-    var k;
-
-    for (k in expected) {
-        if (typeof (expected[k]) == 'object' &&
-            typeof (actual[k]) == 'object' &&
-            expected[k] !== null && actual[k] !== null &&
-            !Array.isArray(expected[k]) && !Array.isArray(actual[k])) {
-
-            checkDeepSubset(t, expected[k], actual[k], prefix + '.' + k);
-        } else {
-            t.deepEqual(expected[k], actual[k], prefix + '.' + k + '  matches');
-        }
-    }
-}
-
-/*
- * For details on allowed inputs and expected behavior, see the detailed comment
- * above translateLegacyOptions().
- */
-testcases = [ {
-    'name': 'no arguments',
-    'input': {},
-    'errmsg': /is required/
-},
-
-/*
- * The behavior with respect to "host", "port", and "url" is the most
- * complicated.
- */
-
-{
-    'name': 'host specified, missing port',
-    'input': { 'host': 'foobar' },
-    'errmsg': /port.*is required/
-}, {
-    'name': 'host and port specified',
-    'input': { 'host': 'foobar', 'port': 1234 },
-    'output': {
-        'defaultPort': 1234,
-        'domain': 'foobar'
-    }
-}, {
-    'name': 'host and port specified, wrong host type',
-    'input': { 'host': [], 'port': 1234 },
-    'errmsg': /host.*is required/
-}, {
-    'name': 'host and port specified, wrong port type',
-    'input': { 'host': 'foobar', 'port': '1234' },
-    'errmsg': /port.*is required/
-}, {
-    'name': 'url specified, bad type',
-    'input': { 'url': 1234 },
-    'errmsg': /is required/
-}, {
-    'name': 'url specified with port',
-    'input': { 'url': 'tcp://foobar.a.b.c:1234/' },
-    'output': {
-        'defaultPort': 1234,
-        'domain': 'foobar.a.b.c'
-    }
-}, {
-    'name': 'url specified with no port',
-    'input': { 'url': 'tcp://foobar.a.b.c/' },
-    'output': {
-        'defaultPort': 2020,
-        'domain': 'foobar.a.b.c'
-    }
-}, {
-    'name': 'url and port specified',
-    'input': { 'url': 'tcp://foobar.a.b.c:1234/', 'port': 3456 },
-    'output': {
-        'defaultPort': 3456,
-        'domain': 'foobar.a.b.c'
-    }
-}, {
-    'name': 'host, url, and port specified',
-    'input': { 'url': 'tcp://foobar.a:1234/', 'host': 'fooey', 'port': 3456 },
-    'output': {
-        'defaultPort': 3456,
-        'domain': 'fooey'
-    }
-},
-
-/*
- * Miscellaneous other parameters
- */
-{
-    'name': 'connectTimeout: bad',
-    'input': {
-        'url': 'tcp://foobar.a.b:5678',
-        'connectTimeout': {}
-    },
-    'errmsg': /connectTimeout/
-}, {
-    'name': 'connectTimeout: specified',
-    'input': {
-        'url': 'tcp://foobar.a.b:5678',
-        'connectTimeout': 4567
-    },
-    'output': {
-        'domain': 'foobar.a.b',
-        'defaultPort': 5678,
-        'recovery': {
-            'default': {
-                'timeout': 4567,
-                'maxTimeout': 4567,
-                'retries': 0,
-                'delay': 0,
-                'maxDelay': 0
-            }
-        }
-    }
-},
-
-{
-    'name': 'maxConnections: bad',
-    'input': {
-        'url': 'tcp://foobar.a.b:5678',
-        'maxConnections': {}
-    },
-    'errmsg': /maxConnections/
-}, {
-    'name': 'maxConnections specified',
-    'input': {
-        'url': 'tcp://foobar.a.b:5678',
-        'maxConnections': 427
-    },
-    'output': {
-        'domain': 'foobar.a.b',
-        'defaultPort': 5678,
-        'maximum': 427
-    }
-},
-
-{
-    'name': 'dns: bad',
-    'input': {
-        'url': 'tcp://foobar.a.b:5678',
-        'dns': 17
-    },
-    'errmsg': /dns/
-}, {
-    'name': 'dns: specified',
-    'input': {
-        'url': 'tcp://foobar.a.b:5678',
-        'dns': {
-            /* checkInterval should not appear in the output. */
-            'checkInterval': 37,
-            'resolvers': [ '1.2.3.4', '5.6.7.8' ],
-            'timeout': 9876
-        }
-    },
-    'output': {
-        'domain': 'foobar.a.b',
-        'defaultPort': 5678,
-        'resolvers': [ '1.2.3.4', '5.6.7.8' ],
-        'recovery': {
-            'dns': {
-                'timeout': 9876,
-                'maxTimeout': 9876
-            },
-            'dns_srv': {
-                'timeout': 9876,
-                'maxTimeout': 9876
-            }
-        }
-    }
-},
-
-{
-    'name': 'retry: bad',
-    'input': {
-        'url': 'tcp://foobar.a.b:5678',
-        'retry': 37
-    },
-    'errmsg': /retry/
-}, {
-    'name': 'retry: minTimeout > maxTimeout',
-    'input': {
-        'url': 'tcp://foobar.a.b:5678',
-        'retry': {
-            'retries': 42,
-            'minTimeout': 7890,
-            'maxTimeout': 4567
-        }
-    },
-    'errmsg': /maxTimeout.*minTimeout/
-}, {
-    'name': 'retry: specified',
-    'input': {
-        'url': 'tcp://foobar.a.b:5678',
-        'retry': {
-            'retries': 42,
-            'minTimeout': 4567,
-            'maxTimeout': 7890
-        }
-    },
-    'output': {
-        'resolvers': undefined,
-        'recovery': {
-            'dns': {},
-            'dns_srv': {},
-            'default': {
-                'retries': 42,
-                'delay': 4567,
-                'maxDelay': 7890
-            }
-        }
-    }
-},
-
-{
-    'name': 'the works',
-    'input': {
-        'url': 'tcp://foobar.a.b:5678',
-        'host': 'example.com',
-        'port': 314,
-        'connectTimeout': 111,
-        'dns': {
-            /* checkInterval should not appear in the output. */
-            'checkInterval': 555,
-            'resolvers': [ '1.1.1.1', '2.2.2.2' ],
-            'timeout': 222
-        },
-        'maxConnections': 333,
-        'retry': {
-            'retries': 444,
-            'minTimeout': 777,
-            'maxTimeout': 888
-        }
-    },
-    'output': {
-        'domain': 'example.com',
-        'defaultPort': 314,
-        'maximum': 333,
-        'resolvers': [ '1.1.1.1', '2.2.2.2' ],
-        'recovery': {
-            'dns': {
-                'timeout': 222,
-                'maxTimeout': 222
-            },
-            'dns_srv': {
-                'retries': 0,
-                'timeout': 222,
-                'maxTimeout': 222
-            },
-            'default': {
-                'timeout': 111,
-                'maxTimeout': 111,
-                'retries': 444,
-                'delay': 777,
-                'maxDelay': 888
-            }
-        }
-    }
-} ];
-
-main();
-- 
2.21.0

