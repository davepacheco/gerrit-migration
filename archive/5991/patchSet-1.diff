commit fe5861c62cda969eea12d7332326e151f465a497
Author: Rui Loura <rui@joyent.com>
Date:   2019-03-20T19:17:53+00:00 (7 months ago)
    
    MANTA-3974 manta deployment zone adminIp functions need to be factored out
    MANTA-3971 manta-oneach needs to be rack aware

diff --git a/lib/adm.js b/lib/adm.js
index 8dda76c..35d8d2f 100644
--- a/lib/adm.js
+++ b/lib/adm.js
@@ -18,6 +18,7 @@ var extsprintf = require('extsprintf');
 var fs = require('fs');
 var jsprim = require('jsprim');
 var net = require('net');
+var netconfig = require('triton-netconfig');
 var path = require('path');
 var sprintf = require('sprintf-js').sprintf;
 var tab = require('tab');
@@ -2867,79 +2868,49 @@ maAdm.prototype.eachZoneByFilter = function (args, callback)
 };
 
 /*
- * Returns the IP address on the "admin" network for the given component.  This
- * currently translates directly into a few NAPI calls.  It's not clear that
- * this is the most appropriate interface for extracting this information, so we
- * should be careful about generalizing its use.
+ * Returns the IP address on the "admin" network for the given component (either
+ * "server" or "zone".
  */
 maAdm.prototype.findAdminIpForComponent = function (args, callback)
 {
-	var self = this;
+	var type = args.belongs_to_type;
+	var uuid = args.belongs_to_uuid;
+	var admin_ip;
+	var err;
 
-	/*
-	 * This is a two-step process: first we find the network_uuid for the
-	 * "admin" network, and then we find the IP address of the component
-	 * that the caller specified on that network.  The approach used here
-	 * to find the network_uuid does not necessarily work for networks
-	 * besides the SDC "admin" network, which is why we don't support that
-	 * as a parameter.
-	 */
 	assert.ok(this.ma_instances_flattened !== null, 'must load first');
-	return (vasync.waterfall([
-		function fetchAdminNetworkUuid(subcallback) {
-			self.ma_sdc.NAPI.listNetworks({
-			    'limit': 2,
-			    'name': 'admin',
-			    'fabric': false
-			}, function (err, networks) {
-				if (err) {
-					err = VError(err, 'NAPI');
-				} else if (networks.length != 1) {
-					err = new VError(
-					    'expected 1 "admin" network, ' +
-					    'found %d', networks.length);
-				} else if (typeof (networks[0]['uuid']) !=
-				    'string') {
-					err = new VError('missing "uuid" on ' +
-					    'admin network');
-				}
-
-				if (err) {
-					subcallback(err);
-				} else {
-					subcallback(null, networks[0]['uuid']);
-				}
-			});
-		},
+	assert.ok(type === 'zone' || type === 'server',
+	    'belongs_to_type must be "zone" or "server"');
 
-		function fetchIpOnAdminNetwork(network_uuid, subcallback) {
-			self.ma_sdc.NAPI.listIPs(network_uuid, {
-			    'limit': 2,
-			    'belongs_to_type': args['belongs_to_type'],
-			    'belongs_to_uuid': args['belongs_to_uuid']
-			}, function (err, addresses) {
-				if (err) {
-					err = new VError(err, 'NAPI');
-				} else if (addresses.length != 1) {
-					err = new VError(
-					    'expected exactly one address, ' +
-					    'but found %d\n', addresses.length);
-				} else if (typeof (addresses[0]['ip']) !=
-				    'string') {
-					err = new VError('missing "ip" on ' +
-					    'address');
-				}
+	if (type === 'server') {
+		if (!this.ma_cns.hasOwnProperty(uuid)) {
+			callback(new VError('Could not find Server: "' +
+			    uuid + '"'));
+			return;
+		}
 
-				if (err) {
-					subcallback(err);
-				} else {
-					subcallback(null, addresses[0]['ip']);
-				}
-			});
+		var cn = this.ma_cns[uuid];
+		if (!cn.hasOwnPropety['admin_ip'] ||
+		    cn['admin_ip'] === 'unknown') {
+			err = new VError('missing admin IP on ' +
+			    'server: "' + uuid + '"');
 		}
-	], function (err, address) {
-		callback(err, address);
-	}));
+
+		callback(err, cn['admin_ip']);
+		return;
+	}
+
+	if (!this.ma_vms.hasOwnProperty(uuid)) {
+		callback(new VError('Could not find VM: "' + uuid + '"'));
+		return;
+	}
+
+	admin_ip = netconfig.adminIpFromVmMetadata(this.ma_vms[uuid]);
+	if (!admin_ip) {
+		err = new VError('missing admin IP on  VM: "' + uuid + '"');
+	}
+
+	callback(err, admin_ip);
 };
 
 /*
@@ -3692,13 +3663,11 @@ maAdm.prototype.loadCns = function ()
 	assert.ok(this.ma_gzinfo === null);
 
 	var gzinfo, cnid, cn;
-	var ifaces, ifacename, iface;
 	var cids;
-	var admin_tag;
+	var admin_ip;
 
 	gzinfo = {};
 	for (cnid in this.ma_cns) {
-		admin_tag = 'admin';
 		cn = this.ma_cns[cnid];
 		if (cn === null)
 			continue;
@@ -3712,16 +3681,9 @@ maAdm.prototype.loadCns = function ()
 		    'storage_ids': []
 		};
 
-		ifaces = cn['sysinfo']['Network Interfaces'];
-		if (cn['sysinfo']['Admin NIC Tag']) {
-			admin_tag = cn['sysinfo']['Admin NIC Tag'];
-		}
-		for (ifacename in ifaces) {
-			iface = ifaces[ifacename];
-			if (iface['NIC Names'].indexOf(admin_tag) == -1)
-				continue;
-
-			gzinfo[cnid]['admin_ip'] = iface['ip4addr'];
+		admin_ip = netconfig.adminIpFromSysinfo(cn['sysinfo']);
+		if (admin_ip) {
+			gzinfo[cnid]['admin_ip'] = admin_ip;
 		}
 
 		assertplus.ok(!this.ma_instance_svcname.hasOwnProperty(cnid));
