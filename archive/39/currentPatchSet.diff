From a9ec7ccc24cf9785d96a37ba09ad3e04879e3d44 Mon Sep 17 00:00:00 2001
From: Trent Mick <trentm@gmail.com>
Date: Wed, 6 Jul 2016 05:08:21 +0000
Subject: [PATCH] AdminReloadAuthKeys, signature auth key loading from local
 and manta dirs

- Add 'AdminReloadAuthKeys' endpoint (IMGAPI-579)
- Support for reading signature auth keys from a local dir and from Manta (see
  "Authentication" section).
- bumpver to 2.3.0
---
 CHANGES.md      |  10 ++
 deps/jsstyle    |   2 +-
 docs/index.md   |  81 ++++++++++++-
 lib/app.js      |  32 ++++--
 lib/authkeys.js | 297 ++++++++++++++++++++++++++++++++++++++++++++++++
 package.json    |   6 +-
 6 files changed, 412 insertions(+), 16 deletions(-)
 create mode 100644 CHANGES.md
 create mode 100644 lib/authkeys.js

diff --git a/CHANGES.md b/CHANGES.md
new file mode 100644
index 0000000..f599a12
--- /dev/null
+++ b/CHANGES.md
@@ -0,0 +1,10 @@
+# IMGAPI changelog
+
+## 2.3.0
+
+- IMGAPI-579: New `AdminReloadAuthKeys` endpoint
+- Improvements to standalone deployments. (Part of work for IMGAPI-567.)
+
+## 2.2.0
+
+First version before I started a changelog.
diff --git a/deps/jsstyle b/deps/jsstyle
index da42b50..b94eb62 160000
--- a/deps/jsstyle
+++ b/deps/jsstyle
@@ -1 +1 @@
-Subproject commit da42b50ceb12d431437b32efd4c411a8e2fac0c8
+Subproject commit b94eb629ee524d21b563c8b4461caa2bdf1becc6
diff --git a/docs/index.md b/docs/index.md
index af55496..4e2a999 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -630,6 +630,7 @@ and relevant for images in an IMGAPI server that uses [channels](#channels).
 | [ListChannels](#ListChannels)                     | GET /channels                                              | List image channels (if the server uses channels).                            |
 | [ChannelAddImage](#ChannelAddImage)               | POST /images/:uuid?action=channel-all                      | Add an existing image to another channel.                                     |
 | [Ping](#Ping)                                     | GET /ping                                                  | Ping if the server is up.                                                     |
+| [AdminReloadAuthKeys](#AdminReloadAuthKeys)       | POST /keys/reload                                          | (Added in v2.3.0.) Tell server to reload its auth keys. This is only relevant for servers using HTTP Signature auth. |
 
 
 
@@ -2360,9 +2361,10 @@ When not simulating an error response, a "pong" object is returned:
 | Field   | Type    | Description                                                                         |
 | ------- | ------- | ----------------------------------------------------------------------------------- |
 | ping    | String  | "pong"                                                                              |
-| pid     | String  | The PID of IMGAPI server process. Only for non-"public" mode IMGAPI configurations. |
 | version | String  | The version of the IMGAPI app.                                                      |
-| imgapi  | Boolean | true                                                                                |
+| imgapi  | Boolean | Always set `true`. This is to distinguish the server from the old Datasets API that IMGAPI replaced. |
+| pid     | String  | The PID of IMGAPI server process. Only for "dc" mode IMGAPI configurations, or when providing auth. |
+| user    | String  | Set to the authenticated username, if relevant. Note that "dc" mode servers don't use auth. |
 
 When simulating an error, the HTTP response code depends on the error type
 and the response body is an JSON object with:
@@ -2437,6 +2439,28 @@ A JSON representation of some internal state.
       ...
     }
 
+## AdminReloadAuthKeys (POST /keys/reload)
+
+Tells the IMGAPI server to reload its auth keys, if the server is using HTTP Signature auth
+(`config.auth.type === "signature"`). This is an authenticated endpoint. This allows a
+server administrator to add keys for users and have the server load those key changes
+without having to restart.
+
+Note that when this endpoint returns, the reload is not guaranteed to have completed.
+
+
+### Inputs
+
+None.
+
+### Returns
+
+An empty object: `{}`.
+
+### Examples
+
+    $ updates-imgadm reload-auth-keys
+
 
 # Image file storage
 
@@ -2488,6 +2512,50 @@ and can't practically live in a remote Manta. Therefore the algorithm is that
 "admin"-owned images prefer local storage to "remote Manta" storage. Images
 owned by others prefer remote Manta storage to local storage.
 
+# Authentication
+
+IMGAPI supports three authentication modes:
+
+1. HTTP Signature auth (`config.auth.type === "signature").
+2. HTTP Basic auth (`config.auth.type === "basic"`). This is deprecated and will be removed.
+3. No auth (`config.mode === "dc"`). When running as a component of a Triton DataCenter -- on the
+   DCs private "admin" network -- IMGAPI runs without auth.
+
+## HTTP Signature auth
+
+To support HTTP signature authentication the server needs a mapping of
+usernames to an array of SSH public keys. There are three places those keys
+can come from:
+
+1. `config.auth.keys`. For example:
+
+        ...
+        "auth": {
+            "type": "signature",
+            "keys": {
+                "trentm": ["ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDPLIC/hQIyd3gvIteBVOIrhZJ8KJHdZe3O/eb7wZL3yoEAOSQeC5yIZINLyZElFeDjKrgsshhPRnWV0QrPPPfkgnpiHTXbTPU0p5aEqekMgMUVVblGmtKr1QRxuQYW2S1r3HBZkoVC8LnbPBR4xWgtCx8LuVOOwCtYc9+E+e+Yl9EjW415KZyVtMVhpzR7ja8Le+SiapJOUejy7CuO73XS9A9xXDHGw81lQtoDJASgJhJKj8/64tgGFxkNERjBtA/hG/9bofHD/Zw4kxAoR1kjtF49sDop5UKEBT3WlejWedQ/fZqyHCNk+YOpmIt+aM0jF49vNMM+QhQotTN5iYHb DESCRIPTION"]
+            }
+        }
+
+2. Local ".keys" files in `${config.auth.keysDir}/local/$username.keys`. E.g.
+
+        $ cat /data/imgapi/etc/keys/local/trentm.keys
+        ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDPLIC/hQIyd3gvIteBVOIrhZJ8KJHdZe3O/eb7wZL3yoEAOSQeC5yIZINLyZElFeDjKrgsshhPRnWV0QrPPPfkgnpiHTXbTPU0p5aEqekMgMUVVblGmtKr1QRxuQYW2S1r3HBZkoVC8LnbPBR4xWgtCx8LuVOOwCtYc9+E+e+Yl9EjW415KZyVtMVhpzR7ja8Le+SiapJOUejy7CuO73XS9A9xXDHGw81lQtoDJASgJhJKj8/64tgGFxkNERjBtA/hG/9bofHD/Zw4kxAoR1kjtF49sDop5UKEBT3WlejWedQ/fZqyHCNk+YOpmIt+aM0jF49vNMM+QhQotTN5iYHb DESCRIPTION
+
+    This requires `config.auth.keysDir` to be set.
+
+3. ".keys" files in *Manta* at `.../keys/$username.keys` (where "..." is
+   determined from `config.storage.manta`, if set).
+
+        $ mls /trent.mick/stor/imgapi/keys
+        trentm.keys
+
+    This requires `config.storage.manta.*` and `config.auth.keysDir` be
+    set. When those are set, IMGAPI will periodically sync keys files in
+    Manta to `${config.auth.keysDir}/manta/` locally and load from there.
+    Use the [AdminReloadAuthKeys](#AdminReloadAuthKeys) endpoint to trigger
+    a reload.
+
 
 # Configuration
 
@@ -2504,9 +2572,9 @@ top-level keys in the factory settings. For example: if providing
 | serverName | String | IMGAPI/$version | Name of the HTTP server. This value is present on every HTTP response in the 'server' header. |
 | logLevel | String/Number | debug | Level at which to log. One of the supported Bunyan log levels. This is overridden by the `-d,--debug` switch. |
 | maxSockets | Number | 100 | Maximum number of sockets for external API calls |
-| mode | String | public | One of 'public' (default, running as a public server e.g. images.joyent.com), 'private' (a ironically "public" server that only houses images marked `public=false`), or 'dc' (running as the IMGAPI in an SDC datacenter). |
-| datacenterName | String | - | Name of the SDC datacenter on which IMGAPI is running. |
-| adminUuid | String | - | The UUID of the admin user in this SDC. |
+| mode | String | public | One of 'public' (default, running as a public server e.g. images.joyent.com), 'private' (a ironically "public" server that only houses images marked `public=false`), or 'dc' (running as the IMGAPI in a Triton DataCenter). |
+| datacenterName | String | - | Name of the Triton DataCenter on which IMGAPI is running. Only relevant if `mode === "dc"`. |
+| adminUuid | String | - | The UUID of the admin user in this Triton DataCenter. Only relevant if `mode === "dc"`. |
 | channels | Array | - | Set this make this IMGAPI server support [channels](#channels). It must be an array of channel definition objects of the form `{"name": "<name>", "description": "<desc>"[, "default": true]}`. See the example in "etc/imgapi.config.json.in". |
 | placeholderImageLifespanDays | Number | 7 | The number of days after which a "placeholder" image (one with state 'failed' or 'creating') is purged from the database. |
 | allowLocalCreateImageFromVm | Boolean | false | Whether to allow CreateImageFromVm using local storage (i.e. if no manta storage is configured). This should only be enabled for testing. For SDC installations of IMGAPI `"IMGAPI_ALLOW_LOCAL_CREATE_IMAGE_FROM_VM": true` can be set on the metadata for the 'imgapi' SAPI service to enable this. |
@@ -2517,7 +2585,8 @@ top-level keys in the factory settings. For example: if providing
 | auth | Object | - | If in 'public' mode, then auth details are required. 'dc' mode does no auth. |
 | auth.type | String | - | One of 'basic' (HTTP Basic Auth) or 'signature' ([HTTP Signature auth](https://github.com/joyent/node-http-signature)). |
 | auth.users | Object | - | Required if `auth.type === 'basic'`. A mapping of username to bcrypt-hashed password. Use the `bin/hash-basic-auth-password` tool to create the hash. |
-| auth.keys | Object | - | Required if `auth.type === 'signature'`. A mapping of username to an array of ssh public keys. |
+| auth.keys | Object | - | Optional. A mapping of username to an array of ssh public keys. Only used for HTTP signature auth (`config.auth.type === "signature"`). |
+| auth.keysDir | String | - | Optional. A local directory path (e.g. "/data/imgapi/etc/keys") in which the server will look for local keys files (`$auth.keysDir/local/$username.keys`) and sync keys from Manta (`$auth.keysDir/manta/$username.keys). Only relevant if `auth.type === 'signature'`. |
 | database | Object | - | Database info. The "database" is how the image manifest data is stored. |
 | database.type | String | ufds | One of 'ufds' (the default, i.e. use an SDC UFDS directory service) or 'local'. The 'local' type is a quick implementation appropriate only for smallish numbers of images. |
 | database.dir | String | - | The base directory for the database `database.type === 'local'`. |
diff --git a/lib/app.js b/lib/app.js
index c5d78e9..9a5121e 100644
--- a/lib/app.js
+++ b/lib/app.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright 2016 Joyent, Inc.
  */
 
 /*
@@ -32,6 +32,7 @@ var moray = require('moray');
 
 var channels = require('./channels');
 var database = require('./database');
+var authkeys = require('./authkeys');
 var storage = require('./storage');
 var utils = require('./utils');
 var errors = require('./errors');
@@ -136,6 +137,9 @@ function apiPing(req, res, next) {
         if (req._app.mode === 'dc' || req.remoteUser) {
             data.pid = process.pid;
         }
+        if (req.remoteUser) {
+            data.user = req.remoteUser;
+        }
         res.send(data);
         next();
     }
@@ -222,8 +226,6 @@ function getAuthMiddleware(app, config, passive) {
         };
     } else if (config.auth.type === 'signature') {
         var httpSig = require('http-signature');
-        assert.object(config.auth.keys, 'config.auth.keys');
-        var keys = config.auth.keys;
 
         // Disallow HMAC key type to avoid joyent/node-http-signature#40
         var VALID_ALGS = ['RSA-SHA1', 'RSA-SHA256', 'DSA-SHA1'];
@@ -254,12 +256,13 @@ function getAuthMiddleware(app, config, passive) {
                     '" is not a supported http-signature signing algorithm)'));
             }
 
-            var sshKeys = keys[sigInfo.keyId];
+            var sshKeys = (req._app.authKeys &&
+                req._app.authKeys[sigInfo.keyId]);
             if (sshKeys === undefined) {
                 return next(new errors.UnauthorizedError('Unauthorized'));
             }
 
-            assert.arrayOfString(sshKeys, 'config.auth.keys.'+sigInfo.keyId);
+            assert.arrayOfString(sshKeys, 'authKeys["' + sigInfo.keyId + '"]');
             // TODO: improve caching here: sshKeyToPEM, preferred key first
             for (var i = 0; i < sshKeys.length; i++) {
                 try {
@@ -488,14 +491,14 @@ function App(config, log) {
     server.get({path: '/ping', name: 'Ping'},
         reqPassiveAuth, apiPing);
     // TODO Kang-ify (https://github.com/davepacheco/kang)
-    server.get({path: '/state', name: 'GetState'},
+    server.get({path: '/state', name: 'AdminGetState'},
         reqAuth,
         function (req, res, next) {
             res.send(self.getStateSnapshot());
             next();
         }
     );
-    server.post({path: '/state', name: 'UpdateState'},
+    server.post({path: '/state', name: 'AdminUpdateState'},
         reqAuth,
         function apiDropCaches(req, res, next) {
             if (req.query.action !== 'dropcaches')
@@ -518,6 +521,7 @@ function App(config, log) {
     channels.mountApi(server, self, reqAuth, reqPassiveAuth);
     images.mountApi(server, reqAuth, reqPassiveAuth);
     datasets.mountApi(server);
+    authkeys.mountApi(server, reqAuth);
 }
 
 
@@ -634,6 +638,15 @@ App.prototype.setup = function (callback) {
         );
     });
 
+    /*
+     * If using "signature" auth, then a mapping of usernames to SSH keys
+     * is needed at `<app>.authKeys`. AuthKeysLoader handles that.
+     */
+    if (self.config.auth && self.config.auth.type === 'signature') {
+        this.authKeysLoader = new authkeys.AuthKeysLoader(this);
+        this.authKeysLoader.start();
+    }
+
     // NOTE Do not enforce it yet
     // Separate to db.setup
     // - We want to keep trying to create the workflows on init but we don't
@@ -967,6 +980,11 @@ App.prototype.getStor = function getStor(type) {
  * @param {Function} callback called when closed. Takes no arguments.
  */
 App.prototype.close = function (callback) {
+    if (this.authKeysLoader) {
+        this.authKeysLoader.close();
+        delete this.authKeysLoader;
+    }
+
     this.server.on('close', function () {
         callback();
     });
diff --git a/lib/authkeys.js b/lib/authkeys.js
new file mode 100644
index 0000000..4270102
--- /dev/null
+++ b/lib/authkeys.js
@@ -0,0 +1,297 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2016 Joyent, Inc.
+ */
+
+/*
+ * Set and update `app.authKeys` for "signature" auth.
+ *
+ * 1. Keys are loaded from "/data/imgapi/etc/keys/local/$username.keys".
+ *    This is loaded once on startup and when `AdminReloadAuthKeys` is
+ *    called.
+ * 2. If setup with Manta (via `config.storage.manta`), then keys
+ *    are sync'd from "/$account/stor/$baseDir/keys/$username.keys"
+ *    to "/data/imgapi/etc/keys/manta/$username.keys" and loaded from
+ *    there. These are loaded (a) at startup, (b) periodically
+ *    (every 10 minutes), and (c) when `AdminReloadAuthKeys` is called.
+ *
+ * The format for a "$username.keys" file is a subset of a
+ * "~/.ssh/authorized_keys" file:
+ * - SSH public key per line
+ * - lines beginning with a '#' are ignored (comment lines)
+ */
+
+var assert = require('assert-plus');
+var fs = require('fs');
+var glob = require('glob');
+var MantaDirWatcher = require('manta-dir-watcher');
+var mod_path = require('path');
+var util = require('util');
+var vasync = require('vasync');
+
+var errors = require('./errors');
+
+
+//---- globals
+
+var format = util.format;
+
+/*
+ * Every *hour*. We don't expect this to change frequently, so why bother
+ * with logs of polling. The desperate can call the AdminReloadAuthKeys
+ * endpoint.
+ */
+var POLL_INTERVAL = 60 * 60;
+
+
+// ---- internal helpers
+
+/*
+ * Load a "$username.keys" file from the given local path.
+ *
+ * @param {String} keysFile: Existing local path to the keys file to load.
+ *      The path basename will be "$username.keys".
+ * @param {Function} cb: `function (err, username, keys)`.
+ */
+function loadKeysFile(keysFile, cb) {
+    assert.string(keysFile, 'keysFile');
+    assert.func(cb, 'cb');
+
+    var base = mod_path.basename(keysFile);
+    var username = base.slice(0, base.lastIndexOf('.'));
+
+    /*
+     * Dev Note: when base node ver is 0.12, use 'readline' to stream
+     * read line-by-line:
+     * https://nodejs.org/docs/latest/api/all.html#readline_readline
+     */
+    fs.readFile(keysFile, {encoding: 'utf8'}, function (err, text) {
+        if (err) {
+            cb(err);
+            return;
+        }
+        var keys = [];
+        var lines = text.split(/\r?\n/g);
+        for (var i = 0; i < lines.length; i++) {
+            var line = lines[i];
+            var trimmed = line.trim();
+            if (!trimmed) {
+                continue;
+            } else if (trimmed[0] === '#') {
+                continue; // comment line
+            }
+            keys.push(trimmed);
+        }
+        cb(null, username, keys);
+    });
+}
+
+
+//---- endpoints
+
+/**
+ * AdminReloadAuthKeys
+ */
+function apiAdminReloadAuthKeys(req, res, cb) {
+    if (req._app.authKeysLoader) {
+        req._app.authKeysLoader.reload();
+    }
+    res.send({});
+    cb();
+}
+
+
+/**
+ * Mount API endpoints
+ *
+ * @param server {restify.Server}
+ * @param reqAuth {Function} A request middleware for strict
+ *      authentication of some endpoints (typically those that can make
+ *      changes) of the IMGAPI.
+ */
+function mountApi(server, reqAuth) {
+    server.post(
+        {path: '/keys/reload', name: 'AdminReloadAuthKeys'},
+        reqAuth,
+        apiAdminReloadAuthKeys);
+}
+
+
+
+//---- AuthKeysLoader
+
+function AuthKeysLoader(app) {
+    assert.object(app, 'app');
+    assert.optionalObject(app.config.auth.keys, 'app.config.auth.keys');
+    assert.optionalString(app.config.auth.keysDir, 'app.config.auth.keysDir');
+
+    this.app = app;
+    this.configAuthKeys = app.config.auth.keys;
+    this.log = app.log.child({component: 'authkeys'}, true);
+    this.mantaConfig = null;
+    this.loadDirs = [];
+    var keysDir = app.config.auth.keysDir;
+    if (keysDir) {
+        this.loadDirs.push(mod_path.join(keysDir, 'local'));
+        if (app.config.storage && app.config.storage.manta) {
+            this.mantaConfig = app.config.storage.manta;
+            this.mantaDir = mod_path.resolve(
+                '/' + this.mantaConfig.user + '/stor',
+                this.mantaConfig.baseDir, // might be empty, relative or abs
+                'keys');
+            this.mantaSyncDir = mod_path.join(keysDir, 'manta');
+            this.loadDirs.push(this.mantaSyncDir);
+        }
+    }
+    this.mantaWatcher = null;
+}
+
+AuthKeysLoader.prototype.start = function start() {
+    var self = this;
+
+    if (this.mantaConfig) {
+        this.mantaWatcher = new MantaDirWatcher({
+            clientOpts: {
+                url: this.mantaConfig.url,
+                user: this.mantaConfig.user,
+                sign: {
+                    keyId: this.mantaConfig.keyId,
+                    key: this.mantaConfig.key
+                },
+                insecure: this.mantaConfig.insecure
+            },
+            log: this.log,
+
+            dir: this.mantaDir,
+            interval: POLL_INTERVAL,
+            filter: {
+                type: 'object',
+                name: '*.keys'
+            },
+            syncDir: this.mantaSyncDir,
+            syncDelete: true
+        });
+        this.mantaWatcher.on('data', function onMantaKeysUpdate(group) {
+            self.log.debug({group: group, mantaDir: self.mantaDir},
+                'manta keys update');
+            self._load();
+        });
+    }
+
+    // First load of keys.
+    this._load();
+};
+
+AuthKeysLoader.prototype.close = function close() {
+    if (this.mantaWatcher) {
+        this.mantaWatcher.close();
+    }
+};
+
+AuthKeysLoader.prototype.reload = function reload() {
+    /*
+     * Reload keys now. Here we will poke the Manta watcher, if any, and
+     * also load locally. If there is a Manta key dir change, then we'll
+     * end up loading the local keys files twice, which is a bit wasteful.
+     */
+    if (this.mantaWatcher) {
+        this.mantaWatcher.poke();
+    }
+    this._load();
+};
+
+AuthKeysLoader.prototype._load = function _load(cb) {
+    assert.optionalFunc(cb, 'cb');
+
+    var self = this;
+    var log = this.log;
+
+    var context = {
+        keysFiles: [],
+        authKeys: {}
+    };
+
+    vasync.pipeline({arg: context, funcs: [
+        function authKeysFromConfig(arg, next) {
+            if (self.configAuthKeys) {
+                Object.keys(self.configAuthKeys).forEach(function (u) {
+                    arg.authKeys[u] = self.configAuthKeys[u].slice();
+                });
+            }
+            next();
+        },
+        function getKeysFiles(arg, next) {
+            vasync.forEachPipeline({
+                inputs: self.loadDirs,
+                func: function readLoadDir(dir, nextDir) {
+                    glob(mod_path.join(dir, '*.keys'), function (err, files) {
+                        log.trace({err: err, files: files, dir: dir},
+                            'readLoadDir');
+                        if (err) {
+                            nextDir(err);
+                            return;
+                        }
+                        arg.keysFiles = arg.keysFiles.concat(files);
+                        nextDir();
+                    });
+                }
+            }, next);
+        },
+        function getAuthKeys(arg, next) {
+            // Sort input files so we have a stable `app.authKeys`.
+            arg.keysFiles.sort();
+            vasync.forEachPipeline({
+                inputs: arg.keysFiles,
+                func: function loadOneKeysFile(keysFile, nextKeysFile) {
+                    loadKeysFile(keysFile, function (err, u, keys) {
+                        if (err) {
+                            nextKeysFile(err);
+                            return;
+                        }
+                        if (!arg.authKeys[u]) {
+                            arg.authKeys[u] = keys;
+                        } else {
+                            arg.authKeys[u] = arg.authKeys[u].concat(keys);
+                        }
+                        nextKeysFile();
+                    });
+                }
+            }, next);
+        },
+        function setIt(arg, next) {
+            /*
+             * Only log.info if there is a change in the keys.
+             */
+            var oldSerial = JSON.stringify(self.app.authKeys);
+            var newSerial = JSON.stringify(arg.authKeys);
+            var isDiff = Boolean(oldSerial !== newSerial);
+
+            self.app.authKeys = arg.authKeys;
+
+            if (isDiff) {
+                log.info({authKeys: self.app.authKeys}, 'updated app.authKeys');
+            } else {
+                log.trace({authKeys: arg.authKeys}, 'loaded authKeys');
+            }
+
+            next();
+        }
+    ]}, function doneLoad(err) {
+        if (cb) {
+            cb(err);
+        }
+    });
+};
+
+
+//---- exports
+
+module.exports = {
+    mountApi: mountApi,
+    AuthKeysLoader: AuthKeysLoader
+};
diff --git a/package.json b/package.json
index edeb2c7..9a838ab 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "imgapi",
   "description": "Image API to manage images for SDC 7",
-  "version": "2.2.0",
+  "version": "2.3.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
@@ -14,10 +14,12 @@
     "effluent-logger": "git+https://github.com/joshwilsdon/effluent-logger.git#d662f161a07f94045ad2afb45442931511c40e51",
     "expiring-lru-cache": "2.1.0",
     "extsprintf": "1.2.0",
+    "glob": "7.0.5",
     "imgmanifest": "git+ssh://git@github.com:joyent/node-imgmanifest.git#91e5d80",
     "ldapjs": "git+ssh://git@github.com:mcavage/node-ldapjs.git#3edf9de5786170b22581ddc87386b78e9dd5bb6a",
     "uuid": "2.0.2",
     "manta": "2.0.7",
+    "manta-dir-watcher": "1.1.0",
     "manta-sync": "0.3.3",
     "memorystream": "0.2.0",
     "mkdirp": "0.3.5",
@@ -29,7 +31,7 @@
     "progbar": "git+ssh://git@github.com:trentm/node-progbar.git#a4c56e6",
     "restify": "git://github.com/joyent/node-restify.git#fd5d5b5",
     "rimraf": "2.2.6",
-    "sdc-clients": "9.3.0",
+    "sdc-clients": "9.5.0",
     "semver": "3.0.1",
     "trace-event": "1.2.0",
     "ufds": "git+ssh://git@github.com:joyent/node-ufds.git#a7c674b76696fe7ab0fff1e2486f20d3af6a0d1a",
-- 
2.21.0

