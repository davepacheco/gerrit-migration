From c534f2766359858ca6795c7614c05b00f976a90f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?K=C3=A9vin=20Berthommier?= <kevin.bertho@gmail.com>
Date: Tue, 3 Jul 2018 22:49:37 +0200
Subject: [PATCH] use assertion-error (846B) instead of assert-plus (68.4kB)

---
 lib/verror.js | 75 ++++++++++++++++++++++++++++++++++-----------------
 package.json  |  2 +-
 2 files changed, 52 insertions(+), 25 deletions(-)

diff --git a/lib/verror.js b/lib/verror.js
index 8663dde..e5d0bf3 100644
--- a/lib/verror.js
+++ b/lib/verror.js
@@ -2,7 +2,7 @@
  * verror.js: richer JavaScript errors
  */
 
-var mod_assertplus = require('assert-plus');
+var mod_AssertionError = require('assertion-error');
 var mod_util = require('util');
 
 var mod_extsprintf = require('extsprintf');
@@ -52,9 +52,9 @@ function parseConstructorArguments(args)
 {
 	var argv, options, sprintf_args, shortmessage, k;
 
-	mod_assertplus.object(args, 'args');
-	mod_assertplus.bool(args.strict, 'args.strict');
-	mod_assertplus.array(args.argv, 'args.argv');
+	if (!isObject(args)) throw new mod_AssertionError('args (object) is required');
+	if (!isBoolean(args.strict)) new mod_AssertionError('args.strict (bool) is required');
+	if (!Array.isArray(args.argv)) new mod_AssertionError('args.argv (array) is required');
 	argv = args.argv;
 
 	/*
@@ -73,9 +73,12 @@ function parseConstructorArguments(args)
 		}
 		sprintf_args = argv.slice(1);
 	} else {
-		mod_assertplus.string(argv[0],
-		    'first argument to VError, SError, or WError ' +
-		    'constructor must be a string, object, or Error');
+		if (!isString(argv[0])) {
+			throw new mod_AssertionError(
+				'first argument to VError, SError, or WError ' +
+				'constructor must be a string, object, or Error'
+			);
+		}
 		options = {};
 		sprintf_args = argv;
 	}
@@ -106,7 +109,7 @@ function parseConstructorArguments(args)
 	 * desiring the strict behavior can use the SError class or pass the
 	 * "strict" option to the VError constructor.
 	 */
-	mod_assertplus.object(options);
+	if (!isObject(options)) throw new mod_AssertionError('options (object) is required');
 	if (!options.strict && !args.strict) {
 		sprintf_args = sprintf_args.map(function (a) {
 			return (a === null ? 'null' :
@@ -159,8 +162,7 @@ function VError()
 	 * If we've been given a name, apply it now.
 	 */
 	if (parsed.options.name) {
-		mod_assertplus.string(parsed.options.name,
-		    'error\'s "name" must be a string');
+		if (!isString(parsed.options.name)) throw new mod_AssertionError('error\'s "name" must be a string');
 		this.name = parsed.options.name;
 	}
 
@@ -178,7 +180,7 @@ function VError()
 	 */
 	cause = parsed.options.cause;
 	if (cause) {
-		mod_assertplus.ok(mod_isError(cause), 'cause is not an Error');
+		if (!isError(cause)) throw new mod_AssertionError('cause must be an Error');
 		this.jse_cause = cause;
 
 		if (!parsed.options.skipCauseMessage) {
@@ -245,7 +247,7 @@ VError.prototype.cause = function ve_cause()
 
 VError.cause = function (err)
 {
-	mod_assertplus.ok(mod_isError(err), 'err must be an Error');
+	if (!isError(err)) throw new mod_AssertionError('err must be an Error');
 	return (mod_isError(err.jse_cause) ? err.jse_cause : null);
 };
 
@@ -253,7 +255,7 @@ VError.info = function (err)
 {
 	var rv, cause, k;
 
-	mod_assertplus.ok(mod_isError(err), 'err must be an Error');
+	if (!isError(err)) throw new mod_AssertionError('err must be an Error');
 	cause = VError.cause(err);
 	if (cause !== null) {
 		rv = VError.info(cause);
@@ -274,12 +276,12 @@ VError.findCauseByName = function (err, name)
 {
 	var cause;
 
-	mod_assertplus.ok(mod_isError(err), 'err must be an Error');
-	mod_assertplus.string(name, 'name');
-	mod_assertplus.ok(name.length > 0, 'name cannot be empty');
+	if (!isError(err)) throw new mod_AssertionError('err must be an Error');
+	if (!isString(name)) throw new mod_AssertionError('name (string) is required');
+	if (name.length <= 0) throw new mod_AssertionError('name cannot be empty');
 
 	for (cause = err; cause !== null; cause = VError.cause(cause)) {
-		mod_assertplus.ok(mod_isError(cause));
+		if (!isError(cause)) throw new mod_AssertionError('cause must be an Error');
 		if (cause.name == name) {
 			return (cause);
 		}
@@ -295,7 +297,7 @@ VError.hasCauseWithName = function (err, name)
 
 VError.fullStack = function (err)
 {
-	mod_assertplus.ok(mod_isError(err), 'err must be an Error');
+	if (!isError(err)) throw new mod_AssertionError('err must be an Error');
 
 	var cause = VError.cause(err);
 
@@ -308,14 +310,17 @@ VError.fullStack = function (err)
 
 VError.errorFromList = function (errors)
 {
-	mod_assertplus.arrayOfObject(errors, 'errors');
+	if (!Array.isArray(errors)) throw new mod_AssertionError('errors ([object]) is required');
+	errors.forEach(function (e) {
+		if (!isObject(e)) throw new mod_AssertionError('errors ([object]) is required');
+	});
 
 	if (errors.length === 0) {
 		return (null);
 	}
 
 	errors.forEach(function (e) {
-		mod_assertplus.ok(mod_isError(e));
+		if (!isError(e)) throw new mod_AssertionError('err must be an Error');
 	});
 
 	if (errors.length == 1) {
@@ -327,8 +332,8 @@ VError.errorFromList = function (errors)
 
 VError.errorForEach = function (err, func)
 {
-	mod_assertplus.ok(mod_isError(err), 'err must be an Error');
-	mod_assertplus.func(func, 'func');
+	if (!isError(err)) throw new mod_AssertionError('err must be an Error');
+	if (!isFunc(func)) throw new mod_AssertionError('func (func) is required');
 
 	if (err instanceof MultiError) {
 		err.errors().forEach(function iterError(e) { func(e); });
@@ -379,8 +384,8 @@ mod_util.inherits(SError, VError);
  */
 function MultiError(errors)
 {
-	mod_assertplus.array(errors, 'list of errors');
-	mod_assertplus.ok(errors.length > 0, 'must be at least one error');
+	if (!Array.isArray(errors)) throw new mod_AssertionError('list of errors (array) is required');
+	if (!(errors.length > 0)) throw new mod_AssertionError('must be at least one error');
 	this.ase_errors = errors;
 
 	VError.call(this, {
@@ -449,3 +454,25 @@ WError.prototype.cause = function we_cause(c)
 
 	return (this.jse_cause);
 };
+
+// Assertion test functions
+
+function isBoolean(arg) {
+  return typeof arg === 'boolean';
+}
+
+function isString(arg) {
+  return typeof arg === 'string';
+}
+
+function isObject(arg) {
+  return typeof arg === 'object' && arg !== null;
+}
+
+function isError(arg) {
+  return isObject(arg) && (Object.prototype.toString.call(arg) === '[object Error]' || arg instanceof Error);
+}
+
+function isFunc(arg) {
+  return typeof arg === 'function';
+}
diff --git a/package.json b/package.json
index 79295c5..7dafc27 100644
--- a/package.json
+++ b/package.json
@@ -8,7 +8,7 @@
 		"url": "git://github.com/davepacheco/node-verror.git"
 	},
 	"dependencies": {
-		"assert-plus": "^1.0.0",
+		"assertion-error": "^1.1.0",
 		"core-util-is": "1.0.2",
 		"extsprintf": "^1.2.0"
 	},
-- 
2.17.2 (Apple Git-113)

