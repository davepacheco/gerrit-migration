From d01adb82f96f9f213bf272fa5e2308445236f37e Mon Sep 17 00:00:00 2001
From: Ryan Zezeski <rpz@joyent.com>
Date: Fri, 28 Jul 2017 20:49:42 -0600
Subject: [PATCH] OS-6257 proc_t changes broke genunix dmods and walker

---
 .../cmd/mdb/common/modules/genunix/genunix.c  | 197 ++++++++++++++----
 1 file changed, 153 insertions(+), 44 deletions(-)

diff --git a/usr/src/cmd/mdb/common/modules/genunix/genunix.c b/usr/src/cmd/mdb/common/modules/genunix/genunix.c
index 11a4233704..96eafc0ea2 100644
--- a/usr/src/cmd/mdb/common/modules/genunix/genunix.c
+++ b/usr/src/cmd/mdb/common/modules/genunix/genunix.c
@@ -21,7 +21,7 @@
 /*
  * Copyright 2011 Nexenta Systems, Inc.  All rights reserved.
  * Copyright (c) 1999, 2010, Oracle and/or its affiliates. All rights reserved.
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  * Copyright (c) 2013 by Delphix. All rights reserved.
  */
 
@@ -140,6 +140,7 @@ pstat2ch(uchar_t state)
 #define	PS_PROJECTS	0x10
 #define	PS_ZONES	0x20
 
+
 static int
 ps_threadprint(uintptr_t addr, const void *data, void *private)
 {
@@ -166,10 +167,17 @@ ps_threadprint(uintptr_t addr, const void *data, void *private)
 	return (WALK_NEXT);
 }
 
+typedef struct mdb_pflags_proc {
+	struct pid 	*p_pidp;
+	ushort_t	p_pidflag;
+	uint_t		p_proc_flag;
+	uint_t		p_flag;
+} mdb_pflags_proc_t;
+
 static int
 pflags(uintptr_t addr, uint_t flags, int argc, const mdb_arg_t *argv)
 {
-	proc_t pr;
+	mdb_pflags_proc_t pr;
 	struct pid pid;
 
 	static const mdb_bitmask_t p_flag_bits[] = {
@@ -231,7 +239,7 @@ pflags(uintptr_t addr, uint_t flags, int argc, const mdb_arg_t *argv)
 		return (DCMD_OK);
 	}
 
-	if (mdb_vread(&pr, sizeof (pr), addr) == -1 ||
+	if (mdb_ctf_vread(&pr, "proc_t", "mdb_pflags_proc_t", addr, 0) == -1 ||
 	    mdb_vread(&pid, sizeof (pid), (uintptr_t)pr.p_pidp) == -1) {
 		mdb_warn("cannot read proc_t or pid");
 		return (DCMD_ERR);
@@ -248,11 +256,27 @@ pflags(uintptr_t addr, uint_t flags, int argc, const mdb_arg_t *argv)
 	return (DCMD_OK);
 }
 
+typedef struct mdb_ps_proc {
+	char		p_stat;
+	struct pid 	*p_pidp;
+	struct pid 	*p_pgidp;
+	struct cred	*p_cred;
+	struct sess	*p_sessp;
+	struct task	*p_task;
+	struct zone	*p_zone;
+	pid_t		p_ppid;
+	uint_t		p_flag;
+	struct {
+		char		u_comm[MAXCOMLEN + 1];
+		char		u_psargs[PSARGSZ];
+	} p_user;
+} mdb_ps_proc_t;
+
 int
 ps(uintptr_t addr, uint_t flags, int argc, const mdb_arg_t *argv)
 {
 	uint_t prt_flags = 0;
-	proc_t pr;
+	mdb_ps_proc_t pr;
 	struct pid pid, pgid, sid;
 	sess_t session;
 	cred_t cred;
@@ -290,7 +314,7 @@ ps(uintptr_t addr, uint_t flags, int argc, const mdb_arg_t *argv)
 		    "UID", "FLAGS", "ADDR", "NAME");
 	}
 
-	mdb_vread(&pr, sizeof (pr), addr);
+	mdb_ctf_vread(&pr, "proc_t", "mdb_ps_proc_t", addr, 0);
 	mdb_vread(&pid, sizeof (pid), (uintptr_t)pr.p_pidp);
 	mdb_vread(&pgid, sizeof (pgid), (uintptr_t)pr.p_pgidp);
 	mdb_vread(&cred, sizeof (cred), (uintptr_t)pr.p_cred);
@@ -301,7 +325,7 @@ ps(uintptr_t addr, uint_t flags, int argc, const mdb_arg_t *argv)
 	if (prt_flags & PS_PROJECTS)
 		mdb_vread(&pj, sizeof (pj), (uintptr_t)tk.tk_proj);
 	if (prt_flags & PS_ZONES)
-		mdb_vread(&zn, sizeof (zone_t), (uintptr_t)pr.p_zone);
+		mdb_vread(&zn, sizeof (zn), (uintptr_t)pr.p_zone);
 
 	mdb_printf("%c %6d %6d %6d %6d ",
 	    pstat2ch(pr.p_stat), pid.pid_id, pr.p_ppid, pgid.pid_id,
@@ -338,39 +362,48 @@ typedef struct pgrep_data {
 #endif
 } pgrep_data_t;
 
+typedef struct mdb_pgrep_proc {
+	struct {
+		timestruc_t	u_start;
+		char		u_comm[MAXCOMLEN + 1];
+	} p_user;
+} mdb_pgrep_proc_t;
+
 /*ARGSUSED*/
 static int
-pgrep_cb(uintptr_t addr, const void *pdata, void *data)
+pgrep_cb(uintptr_t addr, const void *ignored, void *data)
 {
-	const proc_t *prp = pdata;
+	mdb_pgrep_proc_t p;
 	pgrep_data_t *pgp = data;
 #ifndef _KMDB
 	regmatch_t pmatch;
 #endif
 
+	mdb_ctf_vread(&p, "proc_t", "mdb_pgrep_proc_t", addr, 0);
+
 	/*
 	 * kmdb doesn't have access to the reg* functions, so we fall back
 	 * to strstr/strcmp.
 	 */
 #ifdef _KMDB
 	if ((pgp->pg_flags & PG_EXACT_MATCH) ?
-	    (strcmp(prp->p_user.u_comm, pgp->pg_pat) != 0) :
-	    (strstr(prp->p_user.u_comm, pgp->pg_pat) == NULL))
+	    (strcmp(p.p_user.u_comm, pgp->pg_pat) != 0) :
+	    (strstr(p.p_user.u_comm, pgp->pg_pat) == NULL))
 		return (WALK_NEXT);
 #else
-	if (regexec(&pgp->pg_reg, prp->p_user.u_comm, 1, &pmatch, 0) != 0)
+	if (regexec(&pgp->pg_reg, p.p_user.u_comm, 1, &pmatch, 0) != 0)
 		return (WALK_NEXT);
 
 	if ((pgp->pg_flags & PG_EXACT_MATCH) &&
-	    (pmatch.rm_so != 0 || prp->p_user.u_comm[pmatch.rm_eo] != '\0'))
+	    (pmatch.rm_so != 0 || p.p_user.u_comm[pmatch.rm_eo] != '\0'))
 		return (WALK_NEXT);
 #endif
 
 	if (pgp->pg_flags & (PG_NEWEST | PG_OLDEST)) {
 		hrtime_t start;
 
-		start = (hrtime_t)prp->p_user.u_start.tv_sec * NANOSEC +
-		    prp->p_user.u_start.tv_nsec;
+		start = (hrtime_t)p.p_user.u_start.tv_sec * NANOSEC +
+		    p.p_user.u_start.tv_nsec;
 
 		if (pgp->pg_flags & PG_NEWEST) {
 			if (pgp->pg_xaddr == NULL || start > pgp->pg_xstart) {
@@ -1894,21 +1927,33 @@ lg_walk_step(mdb_walk_state_t *wsp)
 #define	LM_VNPATHLEN	30
 #endif
 
+typedef struct mdb_lminfo_proc {
+	struct {
+		char		u_comm[MAXCOMLEN + 1];
+	} p_user;
+} mdb_lminfo_proc_t;
+
 /*ARGSUSED*/
 static int
 lminfo_cb(uintptr_t addr, const void *data, void *priv)
 {
 	const lock_descriptor_t *ld = data;
 	char buf[LM_VNPATHLEN];
-	proc_t p;
+	mdb_lminfo_proc_t p;
+	uintptr_t paddr = NULL;
+
+	if (ld->l_flock.l_pid != 0)
+		paddr = mdb_pid2proc(ld->l_flock.l_pid, NULL);
+
+	if (paddr != NULL)
+		mdb_ctf_vread(&p, "proc_t", "mdb_lminfo_proc_t", paddr, 0);
 
 	mdb_printf("%-?p %2s %04x %6d %-16s %-?p ",
 	    addr, ld->l_type == F_RDLCK ? "RD" :
 	    ld->l_type == F_WRLCK ? "WR" : "??",
 	    ld->l_state, ld->l_flock.l_pid,
 	    ld->l_flock.l_pid == 0 ? "<kernel>" :
-	    mdb_pid2proc(ld->l_flock.l_pid, &p) == NULL ?
-	    "<defunct>" : p.p_user.u_comm,
+	    paddr == NULL ? "<defunct>" : p.p_user.u_comm,
 	    ld->l_vnode);
 
 	mdb_vnode2path((uintptr_t)ld->l_vnode, buf,
@@ -2386,11 +2431,20 @@ typedef struct file_walk_data {
 	int fw_nofiles;
 } file_walk_data_t;
 
+typedef struct mdb_file_proc {
+	struct {
+		struct {
+			int			fi_nfiles;
+			uf_entry_t *volatile	fi_list;
+		} u_finfo;
+	} p_user;
+} mdb_file_proc_t;
+
 int
 file_walk_init(mdb_walk_state_t *wsp)
 {
 	file_walk_data_t *fw;
-	proc_t p;
+	mdb_file_proc_t p;
 
 	if (wsp->walk_addr == NULL) {
 		mdb_warn("file walk doesn't support global walks\n");
@@ -2399,7 +2453,8 @@ file_walk_init(mdb_walk_state_t *wsp)
 
 	fw = mdb_alloc(sizeof (file_walk_data_t), UM_SLEEP);
 
-	if (mdb_vread(&p, sizeof (p), wsp->walk_addr) == -1) {
+	if (mdb_ctf_vread(&p, "proc_t", "mdb_file_proc_t",
+	    wsp->walk_addr, 0) == -1) {
 		mdb_free(fw, sizeof (file_walk_data_t));
 		mdb_warn("failed to read proc structure at %p", wsp->walk_addr);
 		return (WALK_ERR);
@@ -2633,17 +2688,22 @@ proc_walk_init(mdb_walk_state_t *wsp)
 	return (WALK_NEXT);
 }
 
+typedef struct mdb_walk_proc {
+	struct proc	*p_child;
+	struct proc	*p_sibling;
+} mdb_walk_proc_t;
+
 int
 proc_walk_step(mdb_walk_state_t *wsp)
 {
 	proc_walk_data_t *pw = wsp->walk_data;
 	uintptr_t addr = wsp->walk_addr;
 	uintptr_t cld, sib;
-
 	int status;
-	proc_t pr;
+	mdb_walk_proc_t pr;
 
-	if (mdb_vread(&pr, sizeof (proc_t), addr) == -1) {
+	if (mdb_ctf_vread(&pr, "proc_t", "mdb_walk_proc_t",
+	    addr, 0) == -1) {
 		mdb_warn("failed to read proc at %p", addr);
 		return (WALK_DONE);
 	}
@@ -2656,13 +2716,20 @@ proc_walk_step(mdb_walk_state_t *wsp)
 		goto sib;
 	}
 
-	status = wsp->walk_callback(addr, &pr, wsp->walk_cbdata);
+	/*
+	 * Always pass NULL as the local copy pointer. Consumers
+	 * should use mdb_ctf_vread() to read their own minimal
+	 * version of proc_t. Thus minimizing the chance of breakage
+	 * with older crash dumps.
+	 */
+	status = wsp->walk_callback(addr, NULL, wsp->walk_cbdata);
 
 	if (status != WALK_NEXT)
 		return (status);
 
 	if ((wsp->walk_addr = cld) != NULL) {
-		if (mdb_vread(&pr, sizeof (proc_t), cld) == -1) {
+		if (mdb_ctf_vread(&pr, "proc_t", "mdb_walk_proc_t",
+		    cld, 0) == -1) {
 			mdb_warn("proc %p has invalid p_child %p; skipping\n",
 			    addr, cld);
 			goto sib;
@@ -2686,7 +2753,8 @@ sib:
 	if (pw->pw_depth == 0)
 		return (WALK_DONE);
 
-	if (sib != NULL && mdb_vread(&pr, sizeof (proc_t), sib) == -1) {
+	if (sib != NULL && mdb_ctf_vread(&pr, "proc_t", "mdb_walk_proc_t",
+	    sib, 0) == -1) {
 		mdb_warn("proc %p has invalid p_sibling %p; skipping\n",
 		    addr, sib);
 		sib = NULL;
@@ -2726,13 +2794,18 @@ task_walk_init(mdb_walk_state_t *wsp)
 	return (WALK_NEXT);
 }
 
+typedef struct mdb_task_proc {
+	struct proc	*p_tasknext;
+} mdb_task_proc_t;
+
 int
 task_walk_step(mdb_walk_state_t *wsp)
 {
-	proc_t proc;
+	mdb_task_proc_t proc;
 	int status;
 
-	if (mdb_vread(&proc, sizeof (proc_t), wsp->walk_addr) == -1) {
+	if (mdb_ctf_vread(&proc, "proc_t", "mdb_task_proc_t",
+	    wsp->walk_addr, 0) == -1) {
 		mdb_warn("failed to read proc at %p", wsp->walk_addr);
 		return (WALK_DONE);
 	}
@@ -2970,12 +3043,18 @@ cpuinfo_walk_ithread(uintptr_t addr, const kthread_t *thr, cpuinfo_data_t *cid)
 #define	CPUINFO_INDENT	mdb_printf("%*s", CPUINFO_THRDELT, \
     flagline < nflaglines ? flagbuf[flagline++] : "")
 
+typedef struct mdb_cpuinfo_proc {
+	struct {
+		char		u_comm[MAXCOMLEN + 1];
+	} p_user;
+} mdb_cpuinfo_proc_t;
+
 int
 cpuinfo_walk_cpu(uintptr_t addr, const cpu_t *cpu, cpuinfo_data_t *cid)
 {
 	kthread_t t;
 	disp_t disp;
-	proc_t p;
+	mdb_cpuinfo_proc_t p;
 	uintptr_t pinned;
 	char **flagbuf;
 	int nflaglines = 0, flagline = 0, bspl, rval = WALK_NEXT;
@@ -3039,7 +3118,8 @@ cpuinfo_walk_cpu(uintptr_t addr, const cpu_t *cpu, cpuinfo_data_t *cid)
 	else if (cpu->cpu_thread == NULL)
 		mdb_printf(" -\n");
 	else {
-		if (mdb_vread(&p, sizeof (p), (uintptr_t)t.t_procp) != -1) {
+		if (mdb_ctf_vread(&p, "proc_t", "mdb_cpuinfo_proc_t",
+		    (uintptr_t)t.t_procp, 0) != -1) {
 			mdb_printf(" %s\n", p.p_user.u_comm);
 		} else {
 			mdb_printf(" ?\n");
@@ -3130,8 +3210,8 @@ cpuinfo_walk_cpu(uintptr_t addr, const cpu_t *cpu, cpuinfo_data_t *cid)
 				    pinned);
 				return (WALK_ERR);
 			}
-			if (mdb_vread(&p, sizeof (p),
-			    (uintptr_t)t.t_procp) == -1) {
+			if (mdb_ctf_vread(&p, "proc_t", "mdb_cpuinfo_proc_t",
+			    (uintptr_t)t.t_procp, 0) == -1) {
 				mdb_warn("failed to read proc_t at %p",
 				    t.t_procp);
 				return (WALK_ERR);
@@ -3175,8 +3255,9 @@ cpuinfo_walk_cpu(uintptr_t addr, const cpu_t *cpu, cpuinfo_data_t *cid)
 					    "at %p", taddr);
 					return (WALK_ERR);
 				}
-				if (mdb_vread(&p, sizeof (p),
-				    (uintptr_t)t.t_procp) == -1) {
+				if (mdb_ctf_vread(&p, "proc_t",
+					"mdb_cpuinfo_proc_t",
+					(uintptr_t)t.t_procp, 0) == -1) {
 					mdb_warn("failed to read proc_t at %p",
 					    t.t_procp);
 					return (WALK_ERR);
@@ -3288,10 +3369,19 @@ flipone(uintptr_t addr, uint_t flags, int argc, const mdb_arg_t *argv)
 	return (DCMD_OK);
 }
 
+typedef struct mdb_as2proc_proc {
+	struct as *p_as;
+} mdb_as2proc_proc_t;
+
+/*ARGSUSED*/
 int
-as2proc_walk(uintptr_t addr, const proc_t *p, struct as **asp)
+as2proc_walk(uintptr_t addr, const void *ignored, struct as **asp)
 {
-	if (p->p_as == *asp)
+	mdb_as2proc_proc_t p;
+
+	mdb_ctf_vread(&p, "proc_t", "mdb_as2proc_proc_t", addr, 0);
+
+	if (p.p_as == *asp)
 		mdb_printf("%p\n", addr);
 	return (WALK_NEXT);
 }
@@ -3311,21 +3401,31 @@ as2proc(uintptr_t addr, uint_t flags, int argc, const mdb_arg_t *argv)
 	return (DCMD_OK);
 }
 
+typedef struct mdb_ptree_proc {
+	struct proc	*p_parent;
+	struct {
+		char		u_comm[MAXCOMLEN + 1];
+	} p_user;
+} mdb_ptree_proc_t;
+
 /*ARGSUSED*/
 int
-ptree_walk(uintptr_t addr, const proc_t *p, void *ignored)
+ptree_walk(uintptr_t addr, const void *ignored, void *data)
 {
-	proc_t parent;
+	mdb_ptree_proc_t proc;
+	mdb_ptree_proc_t parent;
 	int ident = 0;
 	uintptr_t paddr;
 
-	for (paddr = (uintptr_t)p->p_parent; paddr != NULL; ident += 5) {
-		mdb_vread(&parent, sizeof (parent), paddr);
+	mdb_ctf_vread(&proc, "proc_t", "mdb_ptree_proc_t", addr, 0);
+
+	for (paddr = (uintptr_t)proc.p_parent; paddr != NULL; ident += 5) {
+		mdb_ctf_vread(&parent, "proc_t", "mdb_ptree_proc_t", paddr, 0);
 		paddr = (uintptr_t)parent.p_parent;
 	}
 
 	mdb_inc_indent(ident);
-	mdb_printf("%0?p  %s\n", addr, p->p_user.u_comm);
+	mdb_printf("%0?p  %s\n", addr, proc.p_user.u_comm);
 	mdb_dec_indent(ident);
 
 	return (WALK_NEXT);
@@ -3334,9 +3434,9 @@ ptree_walk(uintptr_t addr, const proc_t *p, void *ignored)
 void
 ptree_ancestors(uintptr_t addr, uintptr_t start)
 {
-	proc_t p;
+	mdb_ptree_proc_t p;
 
-	if (mdb_vread(&p, sizeof (p), addr) == -1) {
+	if (mdb_ctf_vread(&p, "proc_t", "mdb_ptree_proc_t", addr, 0) == -1) {
 		mdb_warn("couldn't read ancestor at %p", addr);
 		return;
 	}
@@ -3365,13 +3465,22 @@ ptree(uintptr_t addr, uint_t flags, int argc, const mdb_arg_t *argv)
 	return (DCMD_OK);
 }
 
+typedef struct mdb_fd_proc {
+	struct {
+		struct {
+			int			fi_nfiles;
+			uf_entry_t *volatile	fi_list;
+		} u_finfo;
+	} p_user;
+} mdb_fd_proc_t;
+
 /*ARGSUSED*/
 static int
 fd(uintptr_t addr, uint_t flags, int argc, const mdb_arg_t *argv)
 {
 	int fdnum;
 	const mdb_arg_t *argp = &argv[0];
-	proc_t p;
+	mdb_fd_proc_t p;
 	uf_entry_t uf;
 
 	if ((flags & DCMD_ADDRSPEC) == 0) {
@@ -3386,7 +3495,7 @@ fd(uintptr_t addr, uint_t flags, int argc, const mdb_arg_t *argv)
 	else
 		fdnum = mdb_strtoull(argp->a_un.a_str);
 
-	if (mdb_vread(&p, sizeof (struct proc), addr) == -1) {
+	if (mdb_ctf_vread(&p, "proc_t", "mdb_fd_proc_t", addr, 0) == -1) {
 		mdb_warn("couldn't read proc_t at %p", addr);
 		return (DCMD_ERR);
 	}
-- 
2.21.0

