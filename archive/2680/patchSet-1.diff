commit 69c5a9b10b4f1511b1cf9e338cb9281139f893a1 (refs/changes/80/2680/1)
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2017-09-28T20:46:55+02:00 (2 years ago)
    
    TOOLS-1873 sdcadm: prepare "getHeadnode" functions for multiple HN

diff --git a/lib/post-setup/cmon.js b/lib/post-setup/cmon.js
index 830770e..2c4c009 100644
--- a/lib/post-setup/cmon.js
+++ b/lib/post-setup/cmon.js
@@ -280,14 +280,13 @@ function do_cmon(subcmd, opts, args, cb) {
 
         /* @field ctx.headnode */
         function getHeadnode(ctx, next) {
-            self.sdcadm.cnapi.listServers({
-                headnode: true
-            }, function (err, servers) {
+            self.sdcadm.getCurrentHeadnode(function (err, hn) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'cnapi'));
+                    next(err);
+                    return;
                 }
-                ctx.headnode = servers[0];
-                return next();
+                ctx.headnode = hn;
+                next();
             });
         },
         function createInst(ctx, next) {
diff --git a/lib/post-setup/cns.js b/lib/post-setup/cns.js
index 6fb1517..b856f2f 100644
--- a/lib/post-setup/cns.js
+++ b/lib/post-setup/cns.js
@@ -207,14 +207,13 @@ function do_cns(subcmd, opts, args, cb) {
 
         /* @field ctx.headnode */
         function getHeadnode(ctx, next) {
-            self.sdcadm.cnapi.listServers({
-                headnode: true
-            }, function (err, servers) {
+            self.sdcadm.getCurrentHeadnode(function (err, hn) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'cnapi'));
+                    next(err);
+                    return;
                 }
-                ctx.headnode = servers[0];
-                return next();
+                ctx.headnode = hn;
+                next();
             });
         },
         function createCnsInst(ctx, next) {
diff --git a/lib/post-setup/docker.js b/lib/post-setup/docker.js
index 4ca5c33..c12ccad 100644
--- a/lib/post-setup/docker.js
+++ b/lib/post-setup/docker.js
@@ -283,14 +283,13 @@ function do_docker(subcmd, opts, args, cb) {
         },
 
         function getHeadnode(_, next) {
-            self.sdcadm.cnapi.listServers({
-                headnode: true
-            }, function (err, servers) {
+            self.sdcadm.getCurrentHeadnode(function (err, hn) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'cnapi'));
+                    next(err);
+                    return;
                 }
-                headnode = servers[0];
-                return next();
+                headnode = hn;
+                next();
             });
         },
         function createDockerInst(ctx, next) {
diff --git a/lib/post-setup/fabrics.js b/lib/post-setup/fabrics.js
index 9c58721..e4c54dc 100644
--- a/lib/post-setup/fabrics.js
+++ b/lib/post-setup/fabrics.js
@@ -161,14 +161,13 @@ Fabrics.prototype.execute = function execute(options, cb) {
 
 Fabrics.prototype.getHeadnode = function getHeadnode(cb) {
     var self = this;
-    self.sdcadm.cnapi.listServers({
-        headnode: true
-    }, function (err, servers) {
+    self.sdcadm.getCurrentHeadnode(function (err, hn) {
         if (err) {
-            return cb(new errors.SDCClientError(err, 'cnapi'));
+            cb(err);
+            return;
         }
-        self.headnode = servers[0];
-        return cb();
+        self.headnode = hn;
+        cb();
     });
 };
 
diff --git a/lib/procedures/update-moray-v2.js b/lib/procedures/update-moray-v2.js
index 980070e..9745958 100644
--- a/lib/procedures/update-moray-v2.js
+++ b/lib/procedures/update-moray-v2.js
@@ -71,7 +71,7 @@ UpdateMorayV2.prototype.execute = function morayv2Execute(opts, cb) {
 
     var self = this;
     var progress = opts.progress;
-    var rollback = opts.plan.rollback || false;
+    var rollback = opts.plan.rollback || false;
 
     function updateMoray(change, nextSvc) {
         var inst = change.inst;
@@ -186,15 +186,13 @@ UpdateMorayV2.prototype.execute = function morayv2Execute(opts, cb) {
             funcs = funcs.concat([
                 s.imgadmInstall,
                 function getHeadnode(_, next) {
-                    opts.sdcadm.cnapi.listServers({
-                        headnode: true
-                    }, function (err, servers) {
+                    opts.sdcadm.getCurrentHeadnode(function (err, hn) {
                         if (err) {
-                            return next(new errors.SDCClientError(err,
-                                'cnapi'));
+                            next(err);
+                            return;
                         }
-                        arg.server_uuid = servers[0].uuid;
-                        return next();
+                        arg.server_uuid = hn.uuid;
+                        next();
                     });
                 },
                 /**
@@ -291,7 +289,7 @@ UpdateMorayV2.prototype.execute = function morayv2Execute(opts, cb) {
         func: checkServiceHA
     }, cb);
 };
-//---- exports
+// --- exports
 
 module.exports = {
     UpdateMorayV2: UpdateMorayV2
diff --git a/lib/procedures/update-single-hn-sapi-v1.js b/lib/procedures/update-single-hn-sapi-v1.js
index e9288df..9a94e0b 100644
--- a/lib/procedures/update-single-hn-sapi-v1.js
+++ b/lib/procedures/update-single-hn-sapi-v1.js
@@ -65,7 +65,7 @@ UpdateSingleHNSapiV1.prototype.execute = function sapiv1Execute(opts, cb) {
     var self = this;
     var sdcadm = opts.sdcadm;
     var progress = opts.progress;
-    var rollback = opts.plan.rollback || false;
+    var rollback = opts.plan.rollback || false;
 
     function updateSapi(change, nextSvc) {
         var inst = change.inst;
@@ -101,7 +101,8 @@ UpdateSingleHNSapiV1.prototype.execute = function sapiv1Execute(opts, cb) {
 
             function setFullMode(_, next) {
                 if (mode === 'full') {
-                    return next();
+                    next();
+                    return;
                 }
                 progress('Attempt to set SAPI full mode');
                 sdcadm.sapi.setMode('full', next);
@@ -109,7 +110,8 @@ UpdateSingleHNSapiV1.prototype.execute = function sapiv1Execute(opts, cb) {
 
             function ensureFullMode(_, next) {
                 if (mode === 'full') {
-                    return next();
+                    next();
+                    return;
                 }
                 progress('Verifying SAPI full mode');
                 sdcadm.sapi.getMode(function (err, m) {
@@ -161,14 +163,13 @@ UpdateSingleHNSapiV1.prototype.execute = function sapiv1Execute(opts, cb) {
             },
             s.checkHA,
             function getHeadnode(_, next) {
-                sdcadm.cnapi.listServers({
-                    headnode: true
-                }, function (err, servers) {
+                sdcadm.getCurrentHeadnode(function (err, hn) {
                     if (err) {
-                        return next(new errors.SDCClientError(err, 'cnapi'));
+                        next(err);
+                        return;
                     }
-                    arg.server_uuid = servers[0].uuid;
-                    return next();
+                    arg.server_uuid = hn.uuid;
+                    next();
                 });
             },
             /**
@@ -259,7 +260,7 @@ UpdateSingleHNSapiV1.prototype.execute = function sapiv1Execute(opts, cb) {
     }, cb);
 
 };
-//---- exports
+// --- exports
 
 module.exports = {
     UpdateSingleHNSapiV1: UpdateSingleHNSapiV1
diff --git a/lib/sdcadm.js b/lib/sdcadm.js
index 44cdbeb..55e7656 100644
--- a/lib/sdcadm.js
+++ b/lib/sdcadm.js
@@ -20,6 +20,7 @@ var format = util.format;
 var fs = require('fs');
 var http  = require('http');
 var https = require('https');
+var os = require('os');
 var path = require('path');
 var net = require('net');
 var mkdirp = require('mkdirp');
@@ -526,6 +527,43 @@ SdcAdm.prototype.getUrConnection = function getUrConnection(cb) {
 };
 
 
+/**
+ * Get the headnode from where we're running sdcadm
+ *
+ * @param cb {Function} `function (err, headnode)`
+ */
+
+SdcAdm.prototype.getCurrentHeadnode = function getCurrentHeadnode(cb) {
+    var self = this;
+    self.cnapi.listServers({
+        headnode: true
+    }, function (err, servers) {
+        if (err) {
+            cb(new errors.SDCClientError(err, 'cnapi'));
+            return;
+        }
+
+        if (!Array.isArray(servers) || !servers.length) {
+            cb(new errors.SDCClientError({
+                message: 'Unexpected CNAPI /servers response'
+            }, 'cnapi'));
+            return;
+        }
+
+        var currHostname = os.hostname();
+        var currHnArr = servers.filter(function (server) {
+            return (server.hostname && server.hostname === currHostname);
+        });
+
+        if (!currHnArr.length) {
+            cb(new errors.InternalError('Unable to find current hostname ' +
+                'from the list of servers provided by CNAPI'));
+            return;
+        }
+        cb(null, servers[0]);
+    });
+};
+
 /**
  * Gather a JSON object for every (or specified subset of) installed SDC
  * service instance.
@@ -3969,14 +4007,13 @@ SdcAdm.prototype.dcMaintStart = function dcMaintStart(opts, cb) {
 
     vasync.pipeline({funcs: [
         function getHeadnode(_, next) {
-            self.cnapi.listServers({
-                headnode: true
-            }, function (err, servers) {
+            self.getCurrentHeadnode(function (err, hn) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'cnapi'));
+                    next(err);
+                    return;
                 }
-                headnode = servers[0];
-                return next();
+                headnode = hn;
+                next();
             });
         },
 
@@ -5262,14 +5299,13 @@ function createCloudapiInstance(opts, callback) {
             });
         },
         function getHeadnode(_, next) {
-            self.cnapi.listServers({
-                headnode: true
-            }, function (err, servers) {
+            self.getCurrentHeadnode(function (err, hn) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'cnapi'));
+                    next(err);
+                    return;
                 }
-                headnode = servers[0];
-                return next();
+                headnode = hn;
+                next();
             });
         },
         function (_, next) {
