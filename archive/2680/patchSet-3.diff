From e1964f54bd7848d1d0b6507f69d1bbfc8af8195b Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Fri, 29 Sep 2017 20:25:42 +0200
Subject: [PATCH] TOOLS-1873 sdcadm: prepare "getHeadnode" functions for
 multiple HN

---
 lib/post-setup/cmon.js                     |  13 +-
 lib/post-setup/cns.js                      |  21 +-
 lib/post-setup/docker.js                   |  24 +-
 lib/post-setup/fabrics.js                  |  27 +-
 lib/procedures/update-moray-v2.js          |  16 +-
 lib/procedures/update-single-hn-sapi-v1.js |  21 +-
 lib/sdcadm.js                              | 397 +++++++++------------
 7 files changed, 237 insertions(+), 282 deletions(-)

diff --git a/lib/post-setup/cmon.js b/lib/post-setup/cmon.js
index 830770e..15e20a4 100644
--- a/lib/post-setup/cmon.js
+++ b/lib/post-setup/cmon.js
@@ -280,14 +280,13 @@ function do_cmon(subcmd, opts, args, cb) {
 
         /* @field ctx.headnode */
         function getHeadnode(ctx, next) {
-            self.sdcadm.cnapi.listServers({
-                headnode: true
-            }, function (err, servers) {
+            self.sdcadm.getCurrServerUuid(function (err, hn) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'cnapi'));
+                    next(err);
+                    return;
                 }
-                ctx.headnode = servers[0];
-                return next();
+                ctx.headnodeUuid = hn;
+                next();
             });
         },
         function createInst(ctx, next) {
@@ -300,7 +299,7 @@ function do_cmon(subcmd, opts, args, cb) {
             var instOpts = {
                 params: {
                     alias: 'cmon0',
-                    server_uuid: ctx.headnode.uuid
+                    server_uuid: ctx.headnodeUuid
                 }
             };
             self.sdcadm.sapi.createInstance(ctx.cmonSvc.uuid, instOpts,
diff --git a/lib/post-setup/cns.js b/lib/post-setup/cns.js
index 6fb1517..7191199 100644
--- a/lib/post-setup/cns.js
+++ b/lib/post-setup/cns.js
@@ -207,32 +207,33 @@ function do_cns(subcmd, opts, args, cb) {
 
         /* @field ctx.headnode */
         function getHeadnode(ctx, next) {
-            self.sdcadm.cnapi.listServers({
-                headnode: true
-            }, function (err, servers) {
+            self.sdcadm.getCurrServerUuid(function (err, hn) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'cnapi'));
+                    next(err);
+                    return;
                 }
-                ctx.headnode = servers[0];
-                return next();
+                ctx.headnodeUuid = hn;
+                next();
             });
         },
         function createCnsInst(ctx, next) {
             if (ctx.cnsInst) {
-                return next();
+                next();
+                return;
             }
             self.progress('Creating "cns" instance');
             ctx.didSomething = true;
             var instOpts = {
                 params: {
                     alias: 'cns0',
-                    server_uuid: ctx.headnode.uuid
+                    server_uuid: ctx.headnodeUuid
                 }
             };
             self.sdcadm.sapi.createInstance(ctx.cnsSvc.uuid, instOpts,
-                    function (err, inst) {
+                    function createInstCb(err, inst) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'sapi'));
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
                 }
                 self.progress('Created VM %s (%s)', inst.uuid,
                     inst.params.alias);
diff --git a/lib/post-setup/docker.js b/lib/post-setup/docker.js
index 4ca5c33..ce05b48 100644
--- a/lib/post-setup/docker.js
+++ b/lib/post-setup/docker.js
@@ -41,7 +41,6 @@ function do_docker(subcmd, opts, args, cb) {
     }
 
     var start = Date.now();
-    var headnode;
     var dockerSvcData = {
         name: 'docker',
         params: {
@@ -282,33 +281,34 @@ function do_docker(subcmd, opts, args, cb) {
             });
         },
 
-        function getHeadnode(_, next) {
-            self.sdcadm.cnapi.listServers({
-                headnode: true
-            }, function (err, servers) {
+        function getHeadnode(ctx, next) {
+            self.sdcadm.getCurrServerUuid(function (err, hn) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'cnapi'));
+                    next(err);
+                    return;
                 }
-                headnode = servers[0];
-                return next();
+                ctx.headnodeUuid = hn;
+                next();
             });
         },
         function createDockerInst(ctx, next) {
             if (ctx.dockerInst) {
-                return next();
+                next();
+                return;
             }
             self.progress('Creating "docker" instance');
             var instOpts = {
                 params: {
                     alias: 'docker0',
                     delegate_dataset: true,
-                    server_uuid: headnode.uuid
+                    server_uuid: ctx.headnodeUuid
                 }
             };
             self.sdcadm.sapi.createInstance(ctx.dockerSvc.uuid, instOpts,
-                    function (err, inst) {
+                    function createInstCb(err, inst) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'sapi'));
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
                 }
                 self.progress('Created VM %s (%s)', inst.uuid,
                     inst.params.alias);
diff --git a/lib/post-setup/fabrics.js b/lib/post-setup/fabrics.js
index 9c58721..d08c3f7 100644
--- a/lib/post-setup/fabrics.js
+++ b/lib/post-setup/fabrics.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -70,7 +70,7 @@ function napiUserError(err, field) {
     return true;
 }
 
-//---- internal support stuff
+// --- internal support stuff
 
 function Fabrics() {}
 
@@ -161,14 +161,13 @@ Fabrics.prototype.execute = function execute(options, cb) {
 
 Fabrics.prototype.getHeadnode = function getHeadnode(cb) {
     var self = this;
-    self.sdcadm.cnapi.listServers({
-        headnode: true
-    }, function (err, servers) {
+    self.sdcadm.getCurrServerUuid(function (err, hn) {
         if (err) {
-            return cb(new errors.SDCClientError(err, 'cnapi'));
+            cb(err);
+            return;
         }
-        self.headnode = servers[0];
-        return cb();
+        self.headnodeUuid = hn;
+        cb();
     });
 };
 
@@ -199,7 +198,7 @@ Fabrics.prototype.setupPortolan = function setupPortolan(cb) {
     };
 
     var app = self.sdcadm.sdc;
-    var headnode = self.headnode;
+    var headnodeUuid = self.headnodeUuid;
 
     var img, haveImg, svc, svcExists, instExists;
 
@@ -335,19 +334,21 @@ Fabrics.prototype.setupPortolan = function setupPortolan(cb) {
         function createPortolanInst(_, next) {
             if (instExists) {
                 self.progress('Instance "portolan0" already exists');
-                return next();
+                next();
+                return;
             }
             self.progress('Creating "portolan" instance');
             var instOpts = {
                 params: {
                     alias: 'portolan0',
-                    server_uuid: headnode.uuid
+                    server_uuid: headnodeUuid
                 }
             };
             self.sdcadm.sapi.createInstance(svc.uuid, instOpts,
-                    function (err, inst_) {
+                function createInstCb(err) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'sapi'));
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
                 }
                 self.progress('Finished portolan setup');
                 next();
diff --git a/lib/procedures/update-moray-v2.js b/lib/procedures/update-moray-v2.js
index 980070e..411dcb9 100644
--- a/lib/procedures/update-moray-v2.js
+++ b/lib/procedures/update-moray-v2.js
@@ -71,7 +71,7 @@ UpdateMorayV2.prototype.execute = function morayv2Execute(opts, cb) {
 
     var self = this;
     var progress = opts.progress;
-    var rollback = opts.plan.rollback ||Â false;
+    var rollback = opts.plan.rollback || false;
 
     function updateMoray(change, nextSvc) {
         var inst = change.inst;
@@ -186,15 +186,13 @@ UpdateMorayV2.prototype.execute = function morayv2Execute(opts, cb) {
             funcs = funcs.concat([
                 s.imgadmInstall,
                 function getHeadnode(_, next) {
-                    opts.sdcadm.cnapi.listServers({
-                        headnode: true
-                    }, function (err, servers) {
+                    opts.sdcadm.getCurrServerUuid(function (err, hn) {
                         if (err) {
-                            return next(new errors.SDCClientError(err,
-                                'cnapi'));
+                            next(err);
+                            return;
                         }
-                        arg.server_uuid = servers[0].uuid;
-                        return next();
+                        arg.server_uuid = hn;
+                        next();
                     });
                 },
                 /**
@@ -291,7 +289,7 @@ UpdateMorayV2.prototype.execute = function morayv2Execute(opts, cb) {
         func: checkServiceHA
     }, cb);
 };
-//---- exports
+// --- exports
 
 module.exports = {
     UpdateMorayV2: UpdateMorayV2
diff --git a/lib/procedures/update-single-hn-sapi-v1.js b/lib/procedures/update-single-hn-sapi-v1.js
index e9288df..1b5e3a4 100644
--- a/lib/procedures/update-single-hn-sapi-v1.js
+++ b/lib/procedures/update-single-hn-sapi-v1.js
@@ -65,7 +65,7 @@ UpdateSingleHNSapiV1.prototype.execute = function sapiv1Execute(opts, cb) {
     var self = this;
     var sdcadm = opts.sdcadm;
     var progress = opts.progress;
-    var rollback = opts.plan.rollback ||Â false;
+    var rollback = opts.plan.rollback || false;
 
     function updateSapi(change, nextSvc) {
         var inst = change.inst;
@@ -101,7 +101,8 @@ UpdateSingleHNSapiV1.prototype.execute = function sapiv1Execute(opts, cb) {
 
             function setFullMode(_, next) {
                 if (mode === 'full') {
-                    return next();
+                    next();
+                    return;
                 }
                 progress('Attempt to set SAPI full mode');
                 sdcadm.sapi.setMode('full', next);
@@ -109,7 +110,8 @@ UpdateSingleHNSapiV1.prototype.execute = function sapiv1Execute(opts, cb) {
 
             function ensureFullMode(_, next) {
                 if (mode === 'full') {
-                    return next();
+                    next();
+                    return;
                 }
                 progress('Verifying SAPI full mode');
                 sdcadm.sapi.getMode(function (err, m) {
@@ -161,14 +163,13 @@ UpdateSingleHNSapiV1.prototype.execute = function sapiv1Execute(opts, cb) {
             },
             s.checkHA,
             function getHeadnode(_, next) {
-                sdcadm.cnapi.listServers({
-                    headnode: true
-                }, function (err, servers) {
+                sdcadm.getCurrServerUuid(function (err, hn) {
                     if (err) {
-                        return next(new errors.SDCClientError(err, 'cnapi'));
+                        next(err);
+                        return;
                     }
-                    arg.server_uuid = servers[0].uuid;
-                    return next();
+                    arg.server_uuid = hn;
+                    next();
                 });
             },
             /**
@@ -259,7 +260,7 @@ UpdateSingleHNSapiV1.prototype.execute = function sapiv1Execute(opts, cb) {
     }, cb);
 
 };
-//---- exports
+// --- exports
 
 module.exports = {
     UpdateSingleHNSapiV1: UpdateSingleHNSapiV1
diff --git a/lib/sdcadm.js b/lib/sdcadm.js
index 44cdbeb..79a50ca 100644
--- a/lib/sdcadm.js
+++ b/lib/sdcadm.js
@@ -32,7 +32,6 @@ var WfClient = require('wf-client');
 var uuid = require('node-uuid');
 var ProgressBar = require('progbar').ProgressBar;
 var cueball = require('cueball');
-var VError = require('verror');
 
 var common = require('./common');
 var svcadm = require('./svcadm');
@@ -42,7 +41,6 @@ var pkg = require('../package.json');
 var procedures = require('./procedures');
 var History = require('./history').History;
 var ur = require('./ur');
-var steps = require('./steps');
 
 var UA = format('%s/%s (node/%s; openssl/%s)', pkg.name, pkg.version,
         process.versions.node, process.versions.openssl);
@@ -51,7 +49,7 @@ var UPDATE_PLAN_FORMAT_VER = 1;
 var SECONDS = 1000;
 
 
-//---- UpdatePlan class
+// --- UpdatePlan class
 // A light data object with some conveninence functions.
 
 function UpdatePlan(options) {
@@ -83,7 +81,7 @@ UpdatePlan.prototype.serialize = function serialize() {
 
 
 
-//---- SdcAdm class
+// --- SdcAdm class
 
 /**
  * Create a SdcAdm.
@@ -309,7 +307,7 @@ function SdcAdm(options) {
                     agent: false,
                     path: './not/used/because/we/do/not/loadWorkflows',
                     // TODO: Get wf-client to take `userAgent`.
-                    //userAgent: self.userAgent,
+                    // userAgent: self.userAgent,
                     log: self.log.child({client: 'wfapi'}, true),
                     headers: {
                         'x-request-id': self.uuid
@@ -526,6 +524,20 @@ SdcAdm.prototype.getUrConnection = function getUrConnection(cb) {
 };
 
 
+/**
+ * Get the headnode's uuid from where we're running sdcadm
+ *
+ * @param cb {Function} `function (err, headnode_uuid)`
+ */
+
+SdcAdm.prototype.getCurrServerUuid = function getCurrServerUuid(cb) {
+    var self = this;
+    // Intentionaly kept callback returning 'null' as first error argument,
+    // just in case we may need to modify this function in the future and
+    // return a different uuid result of some API call.
+    cb(null, self.config.serverUuid);
+};
+
 /**
  * Gather a JSON object for every (or specified subset of) installed SDC
  * service instance.
@@ -3961,95 +3973,70 @@ SdcAdm.prototype.dcMaintStart = function dcMaintStart(opts, cb) {
     var progress = opts.progress || function () {};
 
     var sdcApp = self.sdc;
-    var services = {};
-    var headnode;
     var putCloudapiIntoMaint = false;
     var putDockerIntoMaint = false;
     var startTime;
 
-    vasync.pipeline({funcs: [
-        function getHeadnode(_, next) {
-            self.cnapi.listServers({
-                headnode: true
-            }, function (err, servers) {
-                if (err) {
-                    return next(new errors.SDCClientError(err, 'cnapi'));
-                }
-                headnode = servers[0];
-                return next();
-            });
-        },
-
-        function getCloudapiSvc(_, next) {
+    vasync.pipeline({arg: {
+        services: {},
+        instances: []
+    }, funcs: [
+        function getCloudapiSvc(ctx, next) {
             if (opts.dockerOnly) {
-                return next();
+                next();
+                return;
             }
             var filters = {
                 application_uuid: sdcApp.uuid,
                 name: 'cloudapi'
             };
-            self.sapi.listServices(filters, function (svcsErr, svcs) {
+            self.sapi.listServices(filters, function listSvcCb(svcsErr, svcs) {
                 if (svcsErr) {
-                    return next(new errors.SDCClientError(svcsErr, 'sapi'));
+                    next(new errors.SDCClientError(svcsErr, 'sapi'));
+                    return;
                 }
-                services.cloudapi  = svcs && svcs.length && svcs[0];
+                ctx.services.cloudapi  = svcs && svcs.length && svcs[0];
                 next();
             });
         },
 
-        function getDockerSvc(_, next) {
+        function getDockerSvc(ctx, next) {
             if (opts.cloudapiOnly) {
-                return next();
+                next();
+                return;
             }
             var filters = {
                 application_uuid: sdcApp.uuid,
                 name: 'docker'
             };
-            self.sapi.listServices(filters, function (svcsErr, svcs) {
+            self.sapi.listServices(filters, function listSvcCb(svcsErr, svcs) {
                 if (svcsErr) {
-                    return next(new errors.SDCClientError(svcsErr, 'sapi'));
+                    next(new errors.SDCClientError(svcsErr, 'sapi'));
+                    return;
                 }
-                services.docker = svcs && svcs.length && svcs[0];
+                ctx.services.docker = svcs && svcs.length && svcs[0];
                 next();
             });
         },
 
-        function getSapiInstances(_, next) {
-            progress('Getting SDC\'s sapi instances from SAPI');
-
-            var keys = Object.keys(services);
-
-            vasync.forEachParallel({ inputs: keys, func:
-                function (key, feNext) {
-                    var serviceUuid = services[key].uuid;
-
-                    self.sapi.listInstances({
-                        service_uuid: serviceUuid
-                    }, function (instErr, insts) {
-                        if (instErr) {
-                            return feNext(instErr);
-                        }
-
-                        if (!insts.length) {
-                            progress('No ' + key + ' instances to update');
-                            delete services[key];
-                            feNext();
-                            return;
-                        }
-
-                        services[key].zone = insts[0];
-
-                        return feNext();
-                    });
-                }},
-                function (err) {
+        function getInstances(ctx, next) {
+            progress('Getting SDC\'s cloudapi and docker instances');
+            self.listInsts({
+                svcs: ['cloudapi', 'docker']
+            }, function listInstsCb(err, insts) {
+                if (err) {
                     next(err);
-                });
+                    return;
+                }
+                ctx.instances = insts;
+                next();
+            });
         },
 
-        function checkIfCloudapiInMaint(_, next) {
-            if (services.cloudapi && !opts.dockerOnly) {
-                if (services.cloudapi.metadata.CLOUDAPI_READONLY === true) {
+        function checkIfCloudapiInMaint(ctx, next) {
+            var cloudapiSvc = ctx.services.cloudapi;
+            if (cloudapiSvc && !opts.dockerOnly) {
+                if (cloudapiSvc.metadata.CLOUDAPI_READONLY === true) {
                     progress('Cloudapi service already in read-only mode');
                 } else {
                     putCloudapiIntoMaint = true;
@@ -4058,9 +4045,10 @@ SdcAdm.prototype.dcMaintStart = function dcMaintStart(opts, cb) {
             next();
         },
 
-        function checkIfDockerInMaint(_, next) {
-            if (services.docker && !opts.cloudapiOnly) {
-                if (services.docker.metadata.DOCKER_READONLY === true) {
+        function checkIfDockerInMaint(ctx, next) {
+            var dockerSvc = ctx.services.docker;
+            if (dockerSvc && !opts.cloudapiOnly) {
+                if (dockerSvc.metadata.DOCKER_READONLY === true) {
                     progress('Docker service already in read-only mode');
                 } else {
                     putDockerIntoMaint = true;
@@ -4069,35 +4057,39 @@ SdcAdm.prototype.dcMaintStart = function dcMaintStart(opts, cb) {
             next();
         },
 
-        function setCloudapiReadonly(_, next) {
+        function setCloudapiReadonly(ctx, next) {
             if (!putCloudapiIntoMaint) {
-                return next();
+                next();
+                return;
             }
             progress('Putting cloudapi in read-only mode');
             startTime = new Date();
             self.sapi.updateService(
-                services.cloudapi.uuid,
+                ctx.services.cloudapi.uuid,
                 { metadata: {CLOUDAPI_READONLY: true } },
-                function (err, svc) {
+                function updateSvcCb(err) {
                     if (err) {
-                        return next(new errors.SDCClientError(err, 'sapi'));
+                        next(new errors.SDCClientError(err, 'sapi'));
+                        return;
                     }
                     next();
                 });
         },
 
-        function setDockerReadonly(_, next) {
+        function setDockerReadonly(ctx, next) {
             if (!putDockerIntoMaint) {
-                return next();
+                next();
+                return;
             }
             progress('Putting docker in read-only mode');
             startTime = new Date();
             self.sapi.updateService(
-                services.docker.uuid,
+                ctx.services.docker.uuid,
                 { metadata: { DOCKER_READONLY: true } },
-                function (err, svc) {
+                function updateSvcCb(err) {
                     if (err) {
-                        return next(new errors.SDCClientError(err, 'sapi'));
+                        next(new errors.SDCClientError(err, 'sapi'));
+                        return;
                     }
                     next();
                 });
@@ -4114,50 +4106,40 @@ SdcAdm.prototype.dcMaintStart = function dcMaintStart(opts, cb) {
                 dcMaintOpts.DC_MAINT_ETA = opts.eta;
             }
             if (!Object.keys(dcMaintOpts).length) {
-                return next();
+                next();
+                return;
             }
             progress('Saving data center maintenance eta/message');
             startTime = new Date();
             self.sapi.updateApplication(sdcApp.uuid, {
                 metadata: dcMaintOpts
-            }, function (err, app) {
+            }, function updateAppCb(err) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'sapi'));
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
                 }
                 next();
             });
         },
 
-        function maybeRefreshCloudapiConfigAgent(_, next) {
-            var zone = services.cloudapi && services.cloudapi.zone;
-            if (zone) {
-                svcadm.svcadmRefresh({
-                    server_uuid: headnode.uuid,
-                    zone: zone.uuid,
-                    wait: true,
-                    fmri: 'config-agent',
-                    sdcadm: self,
-                    log: self.log
-                }, next);
-            } else {
-                next();
-            }
-        },
-
-        function maybeRefreshDockerConfigAgent(_, next) {
-            var zone = services.docker && services.docker.zone;
-            if (zone) {
-                svcadm.svcadmRefresh({
-                    server_uuid: headnode.uuid,
-                    zone: zone.uuid,
-                    wait: true,
-                    fmri: 'config-agent',
-                    sdcadm: self,
-                    log: self.log
-                }, next);
-            } else {
-                next();
-            }
+        function maybeRefreshInstsConfigAgent(ctx, next) {
+            vasync.forEachParallel({
+                inputs: ctx.instances,
+                func: function maybeRefreshInst(ins, nextInst) {
+                    if (!ctx.services[ins.service]) {
+                        nextInst();
+                        return;
+                    }
+                    svcadm.svcadmRefresh({
+                        server_uuid: ins.server,
+                        zone: ins.zonename,
+                        wait: true,
+                        fmri: 'config-agent',
+                        sdcadm: self,
+                        log: self.log
+                    }, nextInst);
+                }
+            }, next);
         },
 
         /**
@@ -4240,90 +4222,71 @@ SdcAdm.prototype.dcMaintStop = function dcMaintStop(opts, cb) {
     var log = self.log;
     var progress = opts.progress || function () {};
 
-    var headnode;
     var sdcApp = self.sdc;
-    var services = {};
     var disableCloudapiMaint = false;
     var disableDockerMaint = false;
     var disableAppMaint = false;
 
-    vasync.pipeline({funcs: [
-        function getHeadnode(_, next) {
-            self.cnapi.listServers({
-                headnode: true
-            }, function (err, servers) {
-                if (err) {
-                    return next(new errors.SDCClientError(err, 'cnapi'));
-                }
-                headnode = servers[0];
-                return next();
-            });
-        },
-
-        function getCloudapiSvc(_, next) {
+    vasync.pipeline({arg: {
+        services: {},
+        instances: []
+    }, funcs: [
+       function getCloudapiSvc(ctx, next) {
+            if (opts.dockerOnly) {
+                next();
+                return;
+            }
             var filters = {
                 application_uuid: sdcApp.uuid,
                 name: 'cloudapi'
             };
-            self.sapi.listServices(filters, function (svcsErr, svcs) {
+            self.sapi.listServices(filters, function listSvcCb(svcsErr, svcs) {
                 if (svcsErr) {
-                    return next(new errors.SDCClientError(svcsErr, 'sapi'));
+                    next(new errors.SDCClientError(svcsErr, 'sapi'));
+                    return;
                 }
-                services.cloudapi = svcs && svcs.length && svcs[0];
+                ctx.services.cloudapi  = svcs && svcs.length && svcs[0];
                 next();
             });
         },
 
-        function getDockerSvc(_, next) {
+        function getDockerSvc(ctx, next) {
+            if (opts.cloudapiOnly) {
+                next();
+                return;
+            }
             var filters = {
                 application_uuid: sdcApp.uuid,
                 name: 'docker'
             };
-            self.sapi.listServices(filters, function (svcsErr, svcs) {
+            self.sapi.listServices(filters, function listSvcCb(svcsErr, svcs) {
                 if (svcsErr) {
-                    return next(new errors.SDCClientError(svcsErr, 'sapi'));
+                    next(new errors.SDCClientError(svcsErr, 'sapi'));
+                    return;
                 }
-                services.docker = svcs && svcs.length && svcs[0];
+                ctx.services.docker = svcs && svcs.length && svcs[0];
                 next();
             });
         },
 
-        function getSapiInstances(_, next) {
-            progress('Getting SDC\'s sapi instances from SAPI');
-
-            var keys = Object.keys(services);
-
-            vasync.forEachParallel({ inputs: keys, func:
-                function (key, feNext) {
-                    var serviceUuid = services[key].uuid;
-
-                    self.sapi.listInstances({
-                        service_uuid: serviceUuid
-                    }, function (instErr, insts) {
-                        if (instErr) {
-                            return feNext(instErr);
-                        }
-
-                        if (!insts.length) {
-                            progress('No ' + key + ' instances to update');
-                            delete services[key];
-                            feNext();
-                            return;
-                        }
-
-                        services[key].zone = insts[0];
-
-                        return feNext();
-                    });
-                }},
-                function (err) {
+        function getInstances(ctx, next) {
+            progress('Getting SDC\'s cloudapi and docker instances');
+            self.listInsts({
+                svcs: ['cloudapi', 'docker']
+            }, function listInstsCb(err, insts) {
+                if (err) {
                     next(err);
-                });
+                    return;
+                }
+                ctx.instances = insts;
+                next();
+            });
         },
 
-        function checkIfCloudapiInMaint(_, next) {
-            if (services.cloudapi) {
-                if (services.cloudapi.metadata.CLOUDAPI_READONLY !== true) {
+        function checkIfCloudapiInMaint(ctx, next) {
+            var cloudapiSvc = ctx.services.cloudapi;
+            if (cloudapiSvc) {
+                if (cloudapiSvc.metadata.CLOUDAPI_READONLY !== true) {
                     progress('Cloudapi service is not in read-only mode');
                 } else {
                     disableCloudapiMaint = true;
@@ -4331,9 +4294,10 @@ SdcAdm.prototype.dcMaintStop = function dcMaintStop(opts, cb) {
             }
             next();
         },
-        function checkIfDockerInMaint(_, next) {
-            if (services.docker) {
-                if (services.docker.metadata.DOCKER_READONLY !== true) {
+        function checkIfDockerInMaint(ctx, next) {
+            var dockerSvc = ctx.services.docker;
+            if (dockerSvc) {
+                if (dockerSvc.metadata.DOCKER_READONLY !== true) {
                     progress('Docker service is not in read-only mode');
                 } else {
                     disableDockerMaint = true;
@@ -4349,35 +4313,39 @@ SdcAdm.prototype.dcMaintStop = function dcMaintStop(opts, cb) {
             } else {
                 disableAppMaint = true;
             }
-            return next();
+            next();
         },
 
-        function setCloudapiWriteable(_, next) {
+        function setCloudapiWriteable(ctx, next) {
             if (!disableCloudapiMaint) {
-                return next();
+                next();
+                return;
             }
             progress('Taking cloudapi out of read-only mode');
             self.sapi.updateService(
-                services.cloudapi.uuid,
+                ctx.services.cloudapi.uuid,
                 { metadata: { CLOUDAPI_READONLY: false } },
-                function (err, svc) {
+                function updateSvcCb(err) {
                     if (err) {
-                        return next(new errors.SDCClientError(err, 'sapi'));
+                        next(new errors.SDCClientError(err, 'sapi'));
+                        return;
                     }
                     next();
                 });
         },
-        function setDockerWriteable(_, next) {
+        function setDockerWriteable(ctx, next) {
             if (!disableDockerMaint) {
-                return next();
+                next();
+                return;
             }
             progress('Taking docker out of read-only mode');
             self.sapi.updateService(
-                services.docker.uuid,
+                ctx.services.docker.uuid,
                 { metadata: { DOCKER_READONLY: false } },
-                function (err, svc) {
+                function updateSvcCb(err) {
                     if (err) {
-                        return next(new errors.SDCClientError(err, 'sapi'));
+                        next(new errors.SDCClientError(err, 'sapi'));
+                        return;
                     }
                     next();
                 });
@@ -4402,36 +4370,24 @@ SdcAdm.prototype.dcMaintStop = function dcMaintStop(opts, cb) {
             });
         },
 
-        function maybeRefreshCloudapiConfigAgent(_, next) {
-            var zone = services.cloudapi && services.cloudapi.zone;
-            if (zone) {
-                svcadm.svcadmRefresh({
-                    server_uuid: headnode.uuid,
-                    zone: zone.uuid,
-                    wait: true,
-                    fmri: 'config-agent',
-                    sdcadm: self,
-                    log: self.log
-                }, next);
-            } else {
-                next();
-            }
-        },
-
-        function maybeRefreshDockerConfigAgent(_, next) {
-            var zone = services.docker && services.docker.zone;
-            if (zone) {
-                svcadm.svcadmRefresh({
-                    server_uuid: headnode.uuid,
-                    zone: zone.uuid,
-                    wait: true,
-                    fmri: 'config-agent',
-                    sdcadm: self,
-                    log: self.log
-                }, next);
-            } else {
-                next();
-            }
+        function maybeRefreshInstsConfigAgent(ctx, next) {
+            vasync.forEachParallel({
+                inputs: ctx.instances,
+                func: function maybeRefreshInst(ins, nextInst) {
+                    if (!ctx.services[ins.service]) {
+                        nextInst();
+                        return;
+                    }
+                    svcadm.svcadmRefresh({
+                        server_uuid: ins.server,
+                        zone: ins.zonename,
+                        wait: true,
+                        fmri: 'config-agent',
+                        sdcadm: self,
+                        log: self.log
+                    }, nextInst);
+                }
+            }, next);
         },
 
         /**
@@ -5196,12 +5152,12 @@ function createCloudapiInstance(opts, callback) {
     var progress = opts.progress;
     var cloudapisvc;
     var changes = [];
-    var img, history, headnode;
+    var img, history;
 
     // find cloudapi service, get service uuid
     // use sapi.createInstance to create the service
 
-    vasync.pipeline({ funcs: [
+    vasync.pipeline({ arg: {}, funcs: [
         function (_, next) {
             sapi.listServices({ name: 'cloudapi' }, function (err, svcs) {
                 if (err) {
@@ -5261,21 +5217,20 @@ function createCloudapiInstance(opts, callback) {
                 return next();
             });
         },
-        function getHeadnode(_, next) {
-            self.cnapi.listServers({
-                headnode: true
-            }, function (err, servers) {
+        function getHeadnode(ctx, next) {
+            self.getCurrServerUuid(function (err, hn) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'cnapi'));
+                    next(err);
+                    return;
                 }
-                headnode = servers[0];
-                return next();
+                ctx.headnodeUuid = hn;
+                next();
             });
         },
-        function (_, next) {
+        function (ctx, next) {
             var cOpts = {
                 params: {
-                    server_uuid: headnode.uuid,
+                    server_uuid: ctx.headnodeUuid,
                     alias: opts.alias,
                     networks: [
                         {
@@ -5806,6 +5761,6 @@ SdcAdm.prototype.genRollbackPlan = function genRollbackPlan(options, cb) {
     });
 };
 
-//---- exports
+// --- exports
 
 module.exports = SdcAdm;
-- 
2.21.0

