From 14904f37310da47b98a219a34b8cd6ac4c60fc83 Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Fri, 29 Sep 2017 17:48:35 +0200
Subject: [PATCH] TOOLS-1873 sdcadm: prepare "getHeadnode" functions for
 multiple HN

---
 lib/post-setup/cmon.js                     | 13 ++--
 lib/post-setup/cns.js                      | 21 +++---
 lib/post-setup/docker.js                   | 24 +++----
 lib/post-setup/fabrics.js                  | 27 +++----
 lib/procedures/update-moray-v2.js          | 16 ++---
 lib/procedures/update-single-hn-sapi-v1.js | 21 +++---
 lib/sdcadm.js                              | 82 ++++++++++++----------
 7 files changed, 106 insertions(+), 98 deletions(-)

diff --git a/lib/post-setup/cmon.js b/lib/post-setup/cmon.js
index 830770e..15e20a4 100644
--- a/lib/post-setup/cmon.js
+++ b/lib/post-setup/cmon.js
@@ -280,14 +280,13 @@ function do_cmon(subcmd, opts, args, cb) {
 
         /* @field ctx.headnode */
         function getHeadnode(ctx, next) {
-            self.sdcadm.cnapi.listServers({
-                headnode: true
-            }, function (err, servers) {
+            self.sdcadm.getCurrServerUuid(function (err, hn) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'cnapi'));
+                    next(err);
+                    return;
                 }
-                ctx.headnode = servers[0];
-                return next();
+                ctx.headnodeUuid = hn;
+                next();
             });
         },
         function createInst(ctx, next) {
@@ -300,7 +299,7 @@ function do_cmon(subcmd, opts, args, cb) {
             var instOpts = {
                 params: {
                     alias: 'cmon0',
-                    server_uuid: ctx.headnode.uuid
+                    server_uuid: ctx.headnodeUuid
                 }
             };
             self.sdcadm.sapi.createInstance(ctx.cmonSvc.uuid, instOpts,
diff --git a/lib/post-setup/cns.js b/lib/post-setup/cns.js
index 6fb1517..7191199 100644
--- a/lib/post-setup/cns.js
+++ b/lib/post-setup/cns.js
@@ -207,32 +207,33 @@ function do_cns(subcmd, opts, args, cb) {
 
         /* @field ctx.headnode */
         function getHeadnode(ctx, next) {
-            self.sdcadm.cnapi.listServers({
-                headnode: true
-            }, function (err, servers) {
+            self.sdcadm.getCurrServerUuid(function (err, hn) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'cnapi'));
+                    next(err);
+                    return;
                 }
-                ctx.headnode = servers[0];
-                return next();
+                ctx.headnodeUuid = hn;
+                next();
             });
         },
         function createCnsInst(ctx, next) {
             if (ctx.cnsInst) {
-                return next();
+                next();
+                return;
             }
             self.progress('Creating "cns" instance');
             ctx.didSomething = true;
             var instOpts = {
                 params: {
                     alias: 'cns0',
-                    server_uuid: ctx.headnode.uuid
+                    server_uuid: ctx.headnodeUuid
                 }
             };
             self.sdcadm.sapi.createInstance(ctx.cnsSvc.uuid, instOpts,
-                    function (err, inst) {
+                    function createInstCb(err, inst) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'sapi'));
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
                 }
                 self.progress('Created VM %s (%s)', inst.uuid,
                     inst.params.alias);
diff --git a/lib/post-setup/docker.js b/lib/post-setup/docker.js
index 4ca5c33..ce05b48 100644
--- a/lib/post-setup/docker.js
+++ b/lib/post-setup/docker.js
@@ -41,7 +41,6 @@ function do_docker(subcmd, opts, args, cb) {
     }
 
     var start = Date.now();
-    var headnode;
     var dockerSvcData = {
         name: 'docker',
         params: {
@@ -282,33 +281,34 @@ function do_docker(subcmd, opts, args, cb) {
             });
         },
 
-        function getHeadnode(_, next) {
-            self.sdcadm.cnapi.listServers({
-                headnode: true
-            }, function (err, servers) {
+        function getHeadnode(ctx, next) {
+            self.sdcadm.getCurrServerUuid(function (err, hn) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'cnapi'));
+                    next(err);
+                    return;
                 }
-                headnode = servers[0];
-                return next();
+                ctx.headnodeUuid = hn;
+                next();
             });
         },
         function createDockerInst(ctx, next) {
             if (ctx.dockerInst) {
-                return next();
+                next();
+                return;
             }
             self.progress('Creating "docker" instance');
             var instOpts = {
                 params: {
                     alias: 'docker0',
                     delegate_dataset: true,
-                    server_uuid: headnode.uuid
+                    server_uuid: ctx.headnodeUuid
                 }
             };
             self.sdcadm.sapi.createInstance(ctx.dockerSvc.uuid, instOpts,
-                    function (err, inst) {
+                    function createInstCb(err, inst) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'sapi'));
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
                 }
                 self.progress('Created VM %s (%s)', inst.uuid,
                     inst.params.alias);
diff --git a/lib/post-setup/fabrics.js b/lib/post-setup/fabrics.js
index 9c58721..d08c3f7 100644
--- a/lib/post-setup/fabrics.js
+++ b/lib/post-setup/fabrics.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -70,7 +70,7 @@ function napiUserError(err, field) {
     return true;
 }
 
-//---- internal support stuff
+// --- internal support stuff
 
 function Fabrics() {}
 
@@ -161,14 +161,13 @@ Fabrics.prototype.execute = function execute(options, cb) {
 
 Fabrics.prototype.getHeadnode = function getHeadnode(cb) {
     var self = this;
-    self.sdcadm.cnapi.listServers({
-        headnode: true
-    }, function (err, servers) {
+    self.sdcadm.getCurrServerUuid(function (err, hn) {
         if (err) {
-            return cb(new errors.SDCClientError(err, 'cnapi'));
+            cb(err);
+            return;
         }
-        self.headnode = servers[0];
-        return cb();
+        self.headnodeUuid = hn;
+        cb();
     });
 };
 
@@ -199,7 +198,7 @@ Fabrics.prototype.setupPortolan = function setupPortolan(cb) {
     };
 
     var app = self.sdcadm.sdc;
-    var headnode = self.headnode;
+    var headnodeUuid = self.headnodeUuid;
 
     var img, haveImg, svc, svcExists, instExists;
 
@@ -335,19 +334,21 @@ Fabrics.prototype.setupPortolan = function setupPortolan(cb) {
         function createPortolanInst(_, next) {
             if (instExists) {
                 self.progress('Instance "portolan0" already exists');
-                return next();
+                next();
+                return;
             }
             self.progress('Creating "portolan" instance');
             var instOpts = {
                 params: {
                     alias: 'portolan0',
-                    server_uuid: headnode.uuid
+                    server_uuid: headnodeUuid
                 }
             };
             self.sdcadm.sapi.createInstance(svc.uuid, instOpts,
-                    function (err, inst_) {
+                function createInstCb(err) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'sapi'));
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
                 }
                 self.progress('Finished portolan setup');
                 next();
diff --git a/lib/procedures/update-moray-v2.js b/lib/procedures/update-moray-v2.js
index 980070e..411dcb9 100644
--- a/lib/procedures/update-moray-v2.js
+++ b/lib/procedures/update-moray-v2.js
@@ -71,7 +71,7 @@ UpdateMorayV2.prototype.execute = function morayv2Execute(opts, cb) {
 
     var self = this;
     var progress = opts.progress;
-    var rollback = opts.plan.rollback ||Â false;
+    var rollback = opts.plan.rollback || false;
 
     function updateMoray(change, nextSvc) {
         var inst = change.inst;
@@ -186,15 +186,13 @@ UpdateMorayV2.prototype.execute = function morayv2Execute(opts, cb) {
             funcs = funcs.concat([
                 s.imgadmInstall,
                 function getHeadnode(_, next) {
-                    opts.sdcadm.cnapi.listServers({
-                        headnode: true
-                    }, function (err, servers) {
+                    opts.sdcadm.getCurrServerUuid(function (err, hn) {
                         if (err) {
-                            return next(new errors.SDCClientError(err,
-                                'cnapi'));
+                            next(err);
+                            return;
                         }
-                        arg.server_uuid = servers[0].uuid;
-                        return next();
+                        arg.server_uuid = hn;
+                        next();
                     });
                 },
                 /**
@@ -291,7 +289,7 @@ UpdateMorayV2.prototype.execute = function morayv2Execute(opts, cb) {
         func: checkServiceHA
     }, cb);
 };
-//---- exports
+// --- exports
 
 module.exports = {
     UpdateMorayV2: UpdateMorayV2
diff --git a/lib/procedures/update-single-hn-sapi-v1.js b/lib/procedures/update-single-hn-sapi-v1.js
index e9288df..1b5e3a4 100644
--- a/lib/procedures/update-single-hn-sapi-v1.js
+++ b/lib/procedures/update-single-hn-sapi-v1.js
@@ -65,7 +65,7 @@ UpdateSingleHNSapiV1.prototype.execute = function sapiv1Execute(opts, cb) {
     var self = this;
     var sdcadm = opts.sdcadm;
     var progress = opts.progress;
-    var rollback = opts.plan.rollback ||Â false;
+    var rollback = opts.plan.rollback || false;
 
     function updateSapi(change, nextSvc) {
         var inst = change.inst;
@@ -101,7 +101,8 @@ UpdateSingleHNSapiV1.prototype.execute = function sapiv1Execute(opts, cb) {
 
             function setFullMode(_, next) {
                 if (mode === 'full') {
-                    return next();
+                    next();
+                    return;
                 }
                 progress('Attempt to set SAPI full mode');
                 sdcadm.sapi.setMode('full', next);
@@ -109,7 +110,8 @@ UpdateSingleHNSapiV1.prototype.execute = function sapiv1Execute(opts, cb) {
 
             function ensureFullMode(_, next) {
                 if (mode === 'full') {
-                    return next();
+                    next();
+                    return;
                 }
                 progress('Verifying SAPI full mode');
                 sdcadm.sapi.getMode(function (err, m) {
@@ -161,14 +163,13 @@ UpdateSingleHNSapiV1.prototype.execute = function sapiv1Execute(opts, cb) {
             },
             s.checkHA,
             function getHeadnode(_, next) {
-                sdcadm.cnapi.listServers({
-                    headnode: true
-                }, function (err, servers) {
+                sdcadm.getCurrServerUuid(function (err, hn) {
                     if (err) {
-                        return next(new errors.SDCClientError(err, 'cnapi'));
+                        next(err);
+                        return;
                     }
-                    arg.server_uuid = servers[0].uuid;
-                    return next();
+                    arg.server_uuid = hn;
+                    next();
                 });
             },
             /**
@@ -259,7 +260,7 @@ UpdateSingleHNSapiV1.prototype.execute = function sapiv1Execute(opts, cb) {
     }, cb);
 
 };
-//---- exports
+// --- exports
 
 module.exports = {
     UpdateSingleHNSapiV1: UpdateSingleHNSapiV1
diff --git a/lib/sdcadm.js b/lib/sdcadm.js
index 44cdbeb..aa8f6ce 100644
--- a/lib/sdcadm.js
+++ b/lib/sdcadm.js
@@ -32,7 +32,6 @@ var WfClient = require('wf-client');
 var uuid = require('node-uuid');
 var ProgressBar = require('progbar').ProgressBar;
 var cueball = require('cueball');
-var VError = require('verror');
 
 var common = require('./common');
 var svcadm = require('./svcadm');
@@ -526,6 +525,20 @@ SdcAdm.prototype.getUrConnection = function getUrConnection(cb) {
 };
 
 
+/**
+ * Get the headnode's uuid from where we're running sdcadm
+ *
+ * @param cb {Function} `function (err, headnode_uuid)`
+ */
+
+SdcAdm.prototype.getCurrServerUuid = function getCurrServerUuid(cb) {
+    var self = this;
+    // Intentionaly kept callback returning 'null' as first error argument,
+    // just in case we may need to modify this function in the future and
+    // return a different uuid result of some API call.
+    cb(null, self.config.serverUuid);
+};
+
 /**
  * Gather a JSON object for every (or specified subset of) installed SDC
  * service instance.
@@ -3962,21 +3975,19 @@ SdcAdm.prototype.dcMaintStart = function dcMaintStart(opts, cb) {
 
     var sdcApp = self.sdc;
     var services = {};
-    var headnode;
     var putCloudapiIntoMaint = false;
     var putDockerIntoMaint = false;
     var startTime;
 
     vasync.pipeline({funcs: [
-        function getHeadnode(_, next) {
-            self.cnapi.listServers({
-                headnode: true
-            }, function (err, servers) {
+        function getHeadnode(ctx, next) {
+            self.getCurrServerUuid(function (err, hn) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'cnapi'));
+                    next(err);
+                    return;
                 }
-                headnode = servers[0];
-                return next();
+                ctx.headnodeUuid = hn;
+                next();
             });
         },
 
@@ -4128,11 +4139,11 @@ SdcAdm.prototype.dcMaintStart = function dcMaintStart(opts, cb) {
             });
         },
 
-        function maybeRefreshCloudapiConfigAgent(_, next) {
+        function maybeRefreshCloudapiConfigAgent(ctx, next) {
             var zone = services.cloudapi && services.cloudapi.zone;
             if (zone) {
                 svcadm.svcadmRefresh({
-                    server_uuid: headnode.uuid,
+                    server_uuid: ctx.headnodeUuid,
                     zone: zone.uuid,
                     wait: true,
                     fmri: 'config-agent',
@@ -4144,11 +4155,11 @@ SdcAdm.prototype.dcMaintStart = function dcMaintStart(opts, cb) {
             }
         },
 
-        function maybeRefreshDockerConfigAgent(_, next) {
+        function maybeRefreshDockerConfigAgent(ctx, next) {
             var zone = services.docker && services.docker.zone;
             if (zone) {
                 svcadm.svcadmRefresh({
-                    server_uuid: headnode.uuid,
+                    server_uuid: ctx.headnodeUuid,
                     zone: zone.uuid,
                     wait: true,
                     fmri: 'config-agent',
@@ -4240,23 +4251,21 @@ SdcAdm.prototype.dcMaintStop = function dcMaintStop(opts, cb) {
     var log = self.log;
     var progress = opts.progress || function () {};
 
-    var headnode;
     var sdcApp = self.sdc;
     var services = {};
     var disableCloudapiMaint = false;
     var disableDockerMaint = false;
     var disableAppMaint = false;
 
-    vasync.pipeline({funcs: [
-        function getHeadnode(_, next) {
-            self.cnapi.listServers({
-                headnode: true
-            }, function (err, servers) {
+    vasync.pipeline({arg: {}, funcs: [
+        function getHeadnode(ctx, next) {
+            self.getCurrServerUuid(function (err, hn) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'cnapi'));
+                    next(err);
+                    return;
                 }
-                headnode = servers[0];
-                return next();
+                ctx.headnodeUuid = hn;
+                next();
             });
         },
 
@@ -4402,11 +4411,11 @@ SdcAdm.prototype.dcMaintStop = function dcMaintStop(opts, cb) {
             });
         },
 
-        function maybeRefreshCloudapiConfigAgent(_, next) {
+        function maybeRefreshCloudapiConfigAgent(ctx, next) {
             var zone = services.cloudapi && services.cloudapi.zone;
             if (zone) {
                 svcadm.svcadmRefresh({
-                    server_uuid: headnode.uuid,
+                    server_uuid: ctx.headnodeUuid,
                     zone: zone.uuid,
                     wait: true,
                     fmri: 'config-agent',
@@ -4418,11 +4427,11 @@ SdcAdm.prototype.dcMaintStop = function dcMaintStop(opts, cb) {
             }
         },
 
-        function maybeRefreshDockerConfigAgent(_, next) {
+        function maybeRefreshDockerConfigAgent(ctx, next) {
             var zone = services.docker && services.docker.zone;
             if (zone) {
                 svcadm.svcadmRefresh({
-                    server_uuid: headnode.uuid,
+                    server_uuid: ctx.headnodeUuid,
                     zone: zone.uuid,
                     wait: true,
                     fmri: 'config-agent',
@@ -5196,12 +5205,12 @@ function createCloudapiInstance(opts, callback) {
     var progress = opts.progress;
     var cloudapisvc;
     var changes = [];
-    var img, history, headnode;
+    var img, history;
 
     // find cloudapi service, get service uuid
     // use sapi.createInstance to create the service
 
-    vasync.pipeline({ funcs: [
+    vasync.pipeline({ arg: {}, funcs: [
         function (_, next) {
             sapi.listServices({ name: 'cloudapi' }, function (err, svcs) {
                 if (err) {
@@ -5261,21 +5270,20 @@ function createCloudapiInstance(opts, callback) {
                 return next();
             });
         },
-        function getHeadnode(_, next) {
-            self.cnapi.listServers({
-                headnode: true
-            }, function (err, servers) {
+        function getHeadnode(ctx, next) {
+            self.getCurrServerUuid(function (err, hn) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'cnapi'));
+                    next(err);
+                    return;
                 }
-                headnode = servers[0];
-                return next();
+                ctx.headnodeUuid = hn;
+                next();
             });
         },
-        function (_, next) {
+        function (ctx, next) {
             var cOpts = {
                 params: {
-                    server_uuid: headnode.uuid,
+                    server_uuid: ctx.headnodeUuid,
                     alias: opts.alias,
                     networks: [
                         {
-- 
2.21.0

