From ec72f1894f4b0c44143b5a6dec851c867dee777c Mon Sep 17 00:00:00 2001
From: Tim Foster <tim.foster@joyent.com>
Date: Thu, 21 Feb 2019 15:18:43 +0000
Subject: [PATCH] TRITON-1145 convert sdc-firewaller-agent to engbld framework

---
 tools/eslint.node.conf => .eslintrc  |   0
 .gitignore                           |   1 +
 .gitmodules                          |   3 +
 Makefile                             |  48 ++--
 deps/eng                             |   1 +
 tools/mk/Makefile.defs               |  51 -----
 tools/mk/Makefile.deps               |  52 -----
 tools/mk/Makefile.node.defs          | 104 ---------
 tools/mk/Makefile.node.targ          |  42 ----
 tools/mk/Makefile.node_deps.defs     |  43 ----
 tools/mk/Makefile.node_deps.targ     |  24 --
 tools/mk/Makefile.node_prebuilt.defs | 153 -------------
 tools/mk/Makefile.node_prebuilt.targ |  42 ----
 tools/mk/Makefile.smf.defs           |  40 ----
 tools/mk/Makefile.smf.targ           |  29 ---
 tools/mk/Makefile.targ               | 317 ---------------------------
 16 files changed, 23 insertions(+), 927 deletions(-)
 rename tools/eslint.node.conf => .eslintrc (100%)
 create mode 160000 deps/eng
 delete mode 100644 tools/mk/Makefile.defs
 delete mode 100644 tools/mk/Makefile.deps
 delete mode 100644 tools/mk/Makefile.node.defs
 delete mode 100644 tools/mk/Makefile.node.targ
 delete mode 100644 tools/mk/Makefile.node_deps.defs
 delete mode 100644 tools/mk/Makefile.node_deps.targ
 delete mode 100644 tools/mk/Makefile.node_prebuilt.defs
 delete mode 100644 tools/mk/Makefile.node_prebuilt.targ
 delete mode 100644 tools/mk/Makefile.smf.defs
 delete mode 100644 tools/mk/Makefile.smf.targ
 delete mode 100644 tools/mk/Makefile.targ

diff --git a/tools/eslint.node.conf b/.eslintrc
similarity index 100%
rename from tools/eslint.node.conf
rename to .eslintrc
diff --git a/.gitignore b/.gitignore
index 5381b79..c1e02fc 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,4 @@
+/bits
 /build
 /node_modules
 /smf/manifests/firewaller.xml
diff --git a/.gitmodules b/.gitmodules
index 62eb074..d6274e7 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -4,3 +4,6 @@
 [submodule "deps/jsstyle"]
 	path = deps/jsstyle
 	url = https://github.com/davepacheco/jsstyle.git
+[submodule "deps/eng"]
+	path = deps/eng
+	url = git@github.com:joyent/eng.git
diff --git a/Makefile b/Makefile
index 67b97f5..bd0dc12 100644
--- a/Makefile
+++ b/Makefile
@@ -5,13 +5,16 @@
 #
 
 #
-# Copyright 2018, Joyent, Inc.
+# Copyright (c) 2019, Joyent, Inc.
 #
 
 #
 # Firewaller agent Makefile
 #
 
+ENGBLD_REQUIRE := $(shell git submodule update --init deps/eng)
+include ./deps/eng/tools/mk/Makefile.defs
+TOP ?= $(error Unable to access eng.git submodule Makefiles.)
 
 #
 # Files
@@ -24,7 +27,6 @@ JSL_CONF_NODE	 = tools/jsl.node.conf
 JSL_FILES_NODE	 = $(JS_FILES)
 JSSTYLE_FILES	 = $(JS_FILES)
 JSSTYLE_FLAGS	 = -f tools/jsstyle.conf
-ESLINT_CONF	 = tools/eslint.node.conf
 ESLINT_FILES	 = $(JS_FILES)
 REPO_MODULES	 = src/node-dummy
 SMF_MANIFESTS_IN = smf/manifests/firewaller.xml.in
@@ -35,22 +37,20 @@ ifeq ($(shell uname -s),SunOS)
 	NODE_PREBUILT_IMAGE=fd2cc906-8938-11e3-beab-4359c665ac99
 endif
 
-include ./tools/mk/Makefile.defs
 ifeq ($(shell uname -s),SunOS)
-	include ./tools/mk/Makefile.node_prebuilt.defs
+	include ./deps/eng/tools/mk/Makefile.node_prebuilt.defs
 else
 	NPM_EXEC :=
 	NPM = npm
 endif
-include ./tools/mk/Makefile.smf.defs
+include ./deps/eng/tools/mk/Makefile.smf.defs
 
 NAME		:= firewaller
 RELEASE_TARBALL := $(NAME)-$(STAMP).tgz
 RELEASE_MANIFEST := $(NAME)-$(STAMP).manifest
-RELSTAGEDIR          := /tmp/$(STAMP)
+RELSTAGEDIR          := /tmp/$(NAME)-$(STAMP)
 DSTDIR          := $(RELSTAGEDIR)/$(NAME)
 
-ESLINT = ./node_modules/.bin/eslint
 NODEUNIT_EXEC := ./node_modules/.bin/nodeunit
 NODEUNIT := $(NODE) $(NODEUNIT_EXEC)
 
@@ -66,11 +66,6 @@ all: $(SMF_MANIFESTS) | node_modules $(REPO_DEPS)
 $(NODEUNIT_EXEC): | node_modules
 	$(NPM) install
 
-$(ESLINT): | $(NPM_EXEC)
-	$(NPM) install \
-	    eslint@`json -f package.json devDependencies.eslint` \
-	    eslint-plugin-joyent@`json -f package.json devDependencies.eslint-plugin-joyent`
-
 # Remove binary modules - we use the ones in the platform that are built
 # against the platform node
 node_modules: | $(NPM_EXEC)
@@ -79,6 +74,7 @@ node_modules: | $(NPM_EXEC)
 	cp -r deps/fw-overlay/* node_modules/fw
 
 CLEAN_FILES += node_modules
+DISTCLEAN_FILES += $(NAME)-*.manifest $(NAME)-*.tgz
 
 .PHONY: test
 test: $(NODEUNIT_EXEC)
@@ -107,7 +103,7 @@ release: all docs $(SMF_MANIFESTS)
 	cp -PR $(NODE_INSTALL) $(DSTDIR)/node
 	# Cleanup dev / unused bits
 	rm -rf $(DSTDIR)/node_modules/nodeunit
-	(cd $(RELSTAGEDIR) && $(TAR) -zcf $(TOP)/$(RELEASE_TARBALL) *)
+	(cd $(RELSTAGEDIR) && $(TAR) -I pigz -cf $(TOP)/$(RELEASE_TARBALL) *)
 	cat $(TOP)/manifest.tmpl | sed \
 		-e "s/UUID/$$(cat $(DSTDIR)/image_uuid)/" \
 		-e "s/NAME/$$(json name < $(TOP)/package.json)/" \
@@ -122,23 +118,15 @@ release: all docs $(SMF_MANIFESTS)
 
 .PHONY: publish
 publish: release
-	@if [[ -z "$(BITS_DIR)" ]]; then \
-		@echo "error: 'BITS_DIR' must be set for 'publish' target"; \
-		exit 1; \
-	fi
-	mkdir -p $(BITS_DIR)/$(NAME)
-	cp $(TOP)/$(RELEASE_TARBALL) $(BITS_DIR)/$(NAME)/$(RELEASE_TARBALL)
-	cp $(TOP)/$(RELEASE_MANIFEST) $(BITS_DIR)/$(NAME)/$(RELEASE_MANIFEST)
-
-.PHONY: check
-check:: $(ESLINT)
-	$(ESLINT) -c $(ESLINT_CONF) $(ESLINT_FILES)
-
-include ./tools/mk/Makefile.deps
+	mkdir -p $(ENGBLD_BITS_DIR)/$(NAME)
+	cp $(TOP)/$(RELEASE_TARBALL) $(ENGBLD_BITS_DIR)/$(NAME)/$(RELEASE_TARBALL)
+	cp $(TOP)/$(RELEASE_MANIFEST) $(ENGBLD_BITS_DIR)/$(NAME)/$(RELEASE_MANIFEST)
+
+include ./deps/eng/tools/mk/Makefile.deps
 ifeq ($(shell uname -s),SunOS)
-	include ./tools/mk/Makefile.node_prebuilt.targ
+	include ./deps/eng/tools/mk/Makefile.node_prebuilt.targ
 else
-	include ./tools/mk/Makefile.node.targ
+	include ./deps/eng/tools/mk/Makefile.node.targ
 endif
-include ./tools/mk/Makefile.smf.targ
-include ./tools/mk/Makefile.targ
+include ./deps/eng/tools/mk/Makefile.smf.targ
+include ./deps/eng/tools/mk/Makefile.targ
diff --git a/deps/eng b/deps/eng
new file mode 160000
index 0000000..7c472bc
--- /dev/null
+++ b/deps/eng
@@ -0,0 +1 @@
+Subproject commit 7c472bc495ba44ac4cdde0af50ff627021942524
diff --git a/tools/mk/Makefile.defs b/tools/mk/Makefile.defs
deleted file mode 100644
index 85139d7..0000000
--- a/tools/mk/Makefile.defs
+++ /dev/null
@@ -1,51 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.defs: common defines.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-# This makefile defines some useful defines. Include it at the top of
-# your Makefile.
-#
-# Definitions in this Makefile:
-#
-#	TOP 		The absolute path to the project directory. The top dir.
-#	BRANCH 		The current git branch.
-#	TIMESTAMP	The timestamp for the build. This can be set via
-#			the TIMESTAMP envvar (used by MG-based builds).
-#	STAMP		A build stamp to use in built package names.
-#
-
-TOP := $(shell pwd)
-
-#
-# Mountain Gorilla-spec'd versioning.
-# See "Package Versioning" in MG's README.md:
-# <https://mo.joyent.com/mountain-gorilla/blob/master/README.md#L139-200>
-#
-# Need GNU awk for multi-char arg to "-F".
-_AWK := $(shell (which gawk >/dev/null && echo gawk) \
-	|| (which nawk >/dev/null && echo nawk) \
-	|| echo awk)
-BRANCH := $(shell git symbolic-ref HEAD | $(_AWK) -F/ '{print $$3}')
-ifeq ($(TIMESTAMP),)
-	TIMESTAMP := $(shell date -u "+%Y%m%dT%H%M%SZ")
-endif
-_GITDESCRIBE := g$(shell git describe --all --long --dirty | $(_AWK) -F'-g' '{print $$NF}')
-STAMP := $(BRANCH)-$(TIMESTAMP)-$(_GITDESCRIBE)
-
-# node-gyp will print build info useful for debugging with V=1
-export V=1
diff --git a/tools/mk/Makefile.deps b/tools/mk/Makefile.deps
deleted file mode 100644
index 2d92ec3..0000000
--- a/tools/mk/Makefile.deps
+++ /dev/null
@@ -1,52 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.deps: Makefile for including common tools as dependencies
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-# This file is separate from Makefile.targ so that teams can choose
-# independently whether to use the common targets in Makefile.targ and the
-# common tools here.
-#
-
-#
-# javascriptlint
-#
-JSL_EXEC	?= deps/javascriptlint/build/install/jsl
-JSL		?= $(JSL_EXEC)
-
-$(JSL_EXEC): | deps/javascriptlint/.git
-	cd deps/javascriptlint && make install
-
-distclean::
-	if [[ -f deps/javascriptlint/Makefile ]]; then \
-		cd deps/javascriptlint && make clean; \
-	fi
-
-#
-# jsstyle
-#
-JSSTYLE_EXEC	?= deps/jsstyle/jsstyle
-JSSTYLE		?= $(JSSTYLE_EXEC)
-
-$(JSSTYLE_EXEC): | deps/jsstyle/.git
-
-#
-# restdown
-#
-RESTDOWN_EXEC	?= deps/restdown/bin/restdown
-RESTDOWN	?= python $(RESTDOWN_EXEC)
-$(RESTDOWN_EXEC): | deps/restdown/.git
diff --git a/tools/mk/Makefile.node.defs b/tools/mk/Makefile.node.defs
deleted file mode 100644
index 9376841..0000000
--- a/tools/mk/Makefile.node.defs
+++ /dev/null
@@ -1,104 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.node.defs: Makefile for building and bundling your own Node.js.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-#
-# This Makefile facilitates building and bundling your own copy of Node.js in
-# your repo.  All it does is define variables for node, node-waf, and npm for
-# you to use elsewhere in your Makefile and rules to build these tools when
-# needed.
-#
-# To use this facility, include "Makefile.node.defs", use the variables as
-# described below to define targets, and then include "Makefile.node.targ".
-#
-# There are two use cases addressed here:
-#
-# (1) Invoking node, node-waf, or npm as part of the build process, as in "npm
-#     install" and "node-waf configure build".  To facilitate this, this
-#     Makefile defines Make variables NODE, NODE_WAF, and NPM that you can use
-#     to invoke these commands during the build process.  You MUST NOT assume
-#     that these variables just evaluate to the filenames themselves, as they
-#     may have environment variable definitions and other things that prevent
-#     you from using them directly as a filename.  If you want that, see (2).
-#
-#     Wherever you use one of these variables, you MUST include a dependency on
-#     the corresponding *_EXEC variable as well, like so:
-#
-#	node_modules/restify: deps/restify $(NPM_EXEC)
-#		$(NPM) install deps/restify
-#
-#     or better, use an order-only dependency to avoid spurious rebuilds:
-#
-#	node_modules/restify: deps/restify | $(NPM_EXEC)
-#		$(NPM) install deps/restify
-#
-#     Otherwise, the underlying file will not get built.  We don't
-#     automatically build them as part of "all" because that approach is
-#     brittle.
-#
-# (2) Specifying paths for invoking node, node-waf, or npm at RUNTIME, as in
-#     specifying the path to node used for the start method of your service's
-#     SMF manifest.  For this, this Makefile defines variables NODE_EXEC,
-#     NODE_WAF_EXEC, and NPM_EXEC, which represent the relative paths of these
-#     files from the root of the workspace.  You MUST NOT use these variables
-#     to invoke these commands during the build process.  See (1) instead.
-#
-#     However, in order to work at runtime, you must build the tool as well.
-#     That is, if you use NODE_EXEC to specify the path to node, you must
-#     depend on NODE_EXEC somewhere. This usually happens anyway because you
-#     usually need them during the build process too, but if you don't then
-#     you need to explicitly add NODE_EXEC (or whichever) to your "all"
-#     target.
-#
-# When including this Makefile, you MAY also specify:
-#
-#	BUILD			top-level directory for built binaries
-#				(default: "build")
-#
-#	NODE_INSTALL		where node should install its built items
-#				(default: "$BUILD/node")
-#
-#	NODE_CONFIG_FLAGS	extra flags to pass to Node's "configure"
-#				(default: "--with-dtrace" on SmartOS; empty
-#				otherwise.)
-#
-
-TOP ?= $(error You must include Makefile.defs before this makefile)
-
-BUILD		?= build
-NODE_INSTALL 	?= $(BUILD)/node
-DISTCLEAN_FILES	+= $(NODE_INSTALL)
-
-NODE_CONFIG_FLAGS += --prefix=$(TOP)/$(NODE_INSTALL)
-
-ifeq ($(shell uname -s),SunOS)
-	NODE_CONFIG_FLAGS += 	--with-dtrace \
-				--openssl-libpath=/opt/local/lib \
-				--openssl-includes=/opt/local/include
-endif
-
-NODE_EXEC	= $(NODE_INSTALL)/bin/node
-NODE_WAF_EXEC	= $(NODE_INSTALL)/bin/node-waf
-NPM_EXEC	= $(NODE_INSTALL)/bin/npm
-
-# Ensure these use absolute paths to the executables to allow running
-# from a dir other than the project top.
-NODE		:= $(TOP)/$(NODE_EXEC)
-NODE_WAF	:= $(TOP)/$(NODE_WAF_EXEC)
-NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) node $(TOP)/$(NPM_EXEC)
diff --git a/tools/mk/Makefile.node.targ b/tools/mk/Makefile.node.targ
deleted file mode 100644
index abdc616..0000000
--- a/tools/mk/Makefile.node.targ
+++ /dev/null
@@ -1,42 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.node.targ: See Makefile.node.defs.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-ifneq ($(shell uname -s),SunOS)
-NODE_PREBUILT_VERSION ?= $(error You must define NODE_PREBUILT_VERSION to use Makefile.node.targ on non-SunOS)
-endif
-
-ifeq ($(shell uname -s),SunOS)
-$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC): | deps/node/.git
-	(cd deps/node; ./configure $(NODE_CONFIG_FLAGS) && $(MAKE) && $(MAKE) install)
-else
-$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC):
-	(mkdir -p $(BUILD) \
-		&& cd $(BUILD) \
-		&& [[ -d src-node ]] && (cd src-node && git checkout master && git pull) || git clone git://github.com/joyent/node.git src-node \
-		&& cd src-node \
-		&& git checkout $(NODE_PREBUILT_VERSION) \
-		&& ./configure $(NODE_CONFIG_FLAGS) \
-		&& $(MAKE) && $(MAKE) install)
-endif
-
-DISTCLEAN_FILES += $(NODE_INSTALL) $(BUILD)/src-node
-
-distclean::
-	-([[ ! -d deps/node ]] || (cd deps/node && $(MAKE) distclean))
diff --git a/tools/mk/Makefile.node_deps.defs b/tools/mk/Makefile.node_deps.defs
deleted file mode 100644
index 29a83f7..0000000
--- a/tools/mk/Makefile.node_deps.defs
+++ /dev/null
@@ -1,43 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.node_deps.defs: Makefile for including npm modules whose sources
-# reside inside the repo.  This should NOT be used for modules in the npm
-# public repo or modules that could be specified with git SHAs.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-#
-# This Makefile takes as input the following make variable:
-#
-#    REPO_MODULES	List of relative paths to node modules (i.e., npm
-#    			packages) inside this repo.  For example:
-#    			src/node-canative, where there's a binary npm package
-#    			in src/node-canative.
-#
-# Based on the above, this Makefile defines the following new variables:
-#
-#    REPO_DEPS		List of relative paths to the installed modules.  For
-#    			example: "node_modules/canative".
-#
-# The accompanying Makefile.node_deps.targ defines a target that will install
-# each of REPO_MODULES into REPO_DEPS and remove REPO_DEPS with "make clean".
-# The top-level Makefile is responsible for depending on REPO_DEPS where
-# appropriate (usually the "deps" or "all" target).
-#
-
-REPO_DEPS    = $(REPO_MODULES:src/node-%=node_modules/%)
-CLEAN_FILES += $(REPO_DEPS)
diff --git a/tools/mk/Makefile.node_deps.targ b/tools/mk/Makefile.node_deps.targ
deleted file mode 100644
index bb2ab4f..0000000
--- a/tools/mk/Makefile.node_deps.targ
+++ /dev/null
@@ -1,24 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.node_deps.targ: targets for Makefile.node_deps.defs.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-NPM_EXEC  ?= $(error NPM_EXEC must be defined for Makefile.node_deps.targ)
-
-node_modules/%: src/node-% | $(NPM_EXEC)
-	$(NPM) install $<
diff --git a/tools/mk/Makefile.node_prebuilt.defs b/tools/mk/Makefile.node_prebuilt.defs
deleted file mode 100644
index 5744489..0000000
--- a/tools/mk/Makefile.node_prebuilt.defs
+++ /dev/null
@@ -1,153 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.node_prebuilt.defs: Makefile for including a prebuilt Node.js build.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-#
-# This Makefile facilitates downloading and bundling a prebuilt node.js
-# build (using the 'sdcnode' distro builds). This is an alternative to
-# the "Makefile.node.*" makefiles for *building* a node from source.
-#
-# Usage:
-#
-# - Define `NODE_PREBUILT_VERSION` in your Makefile to choose a node version.
-#   E.g.: `NODE_PREBUILT_VERSION=v0.6.19`. See other optional variables
-#   below.
-# - `include tools/mk/Makefile.node_prebuilt.defs` after this in your Makefile.
-# - `include tools/mk/Makefile.node_prebuilt.targ` near the end of your
-#   Makefile.
-# - Have at least one of your Makefile targets depend on either `$(NODE_EXEC)`
-#   or `$(NPM_EXEC)`. E.g.:
-#
-#		node_modules/restify: deps/restify $(NPM_EXEC)
-#			$(NPM) install deps/restify
-#
-#   or better, use an order-only dependency to avoid spurious rebuilds:
-#
-#		node_modules/restify: deps/restify | $(NPM_EXEC)
-#			$(NPM) install deps/restify
-#
-# - Use `$(NPM)` or `$(NODE)` to use your node build.
-# - Include the "$(NODE_INSTALL)" tree in your release package.
-#
-#
-# When including this Makefile, you MUST also specify:
-#
-#	NODE_PREBUILT_VERSION 	The node version in the prebuilt 'sdcnode'
-#				package to use. Typically this is one of the
-#				node version tags, e.g. "v0.6.18" but it
-#				can be any commitish.
-#
-# When including this Makefile, you MAY also specify:
-#
-#	NODE_PREBUILT_DIR 	The dir in which to find sdcnode builds. This
-#				can either be a *local directory* or *a
-#				URL* dir (with trailing '/') which serves
-#				Apache/Nginx dir listing HTML.
-#				(default: sdcnode master build dir on stuff)
-#
-#	NODE_PREBUILT_TAG	The 'sdcnode' project supports special
-#				configuration builds of node, e.g. say a
-#				build configured `--without-ssl`. These
-#				special configurations are given a tag, e.g.
-#				'gz', that is used in the filename. Optionally
-#				specify a tag name here.
-#				(default: empty)
-#
-#	NODE_PREBUILT_BRANCH	Specify a particular branch of 'sdcnode' builds
-#				from which to pull. Generally one should stick
-#				with the default.
-#				(default: master)
-#
-#	NODE_PREBUILT_IMAGE		If you have a zone image that differs from that
-#				for an sdcnode build that you want to use (potential compat
-#				issues be damned), then set this to the UUID of the sdcnode
-#				build you want. See here for available build image uuids:
-#				<https://download.joyent.com/pub/build/sdcnode/master-latest/sdcnode/>
-#
-#	BUILD			top-level directory for built binaries
-#				(default: "build")
-#
-#	NODE_INSTALL		where node should install its built items
-#				(default: "$BUILD/node")
-#
-#
-# Dev Notes:
-#
-# This works by getting "NODE_PREBUILT_NAME" from the provided "NODE_PREBUILT_*"
-# vars and the image version (via 'mdata-get sdc:image_uuid'). The image uuid is
-# included to ensure an exact match with the build machine. This name (e.g.
-# "v0.6.18-zone-$uuid") is used to find a matching "sdcnode-$name-*.tgz" build
-# in "NODE_PREBUILT_DIR" (either a local directory or a URL). That tarball is
-# downloaded and extracted into "NODE_INSTALL".
-#
-# The "*_EXEC" vars are set to named symlinks, e.g.
-# "build/prebuilt-node-v0.6.18-$uuid", so that a change of selected node
-# build (say the developer changes NODE_PREBUILT_VERSION) will recreate the
-# node install.
-#
-# See <https://mo.joyent.com/docs/sdcnode/master/> for details on 'sdcnode-*'
-# package naming.
-#
-
-TOP ?= $(error You must include Makefile.defs before this makefile)
-NODE_PREBUILT_VERSION ?= $(error NODE_PREBUILT_VERSION is not set.)
-
-
-BUILD		?= build
-NODE_INSTALL	?= $(BUILD)/node
-DISTCLEAN_FILES	+= $(NODE_INSTALL) \
-	$(BUILD)/prebuilt-node-* $(BUILD)/prebuilt-npm-*
-
-NODE_PREBUILT_BRANCH ?= master
-NODE_PREBUILT_IMAGE ?= $(shell pfexec mdata-get sdc:image_uuid)
-ifeq ($(NODE_PREBUILT_TAG),)
-	NODE_PREBUILT_NAME := $(NODE_PREBUILT_VERSION)-$(NODE_PREBUILT_IMAGE)
-else
-	NODE_PREBUILT_NAME := $(NODE_PREBUILT_VERSION)-$(NODE_PREBUILT_TAG)-$(NODE_PREBUILT_IMAGE)
-endif
-NODE_PREBUILT_PATTERN := sdcnode-$(NODE_PREBUILT_NAME)-$(NODE_PREBUILT_BRANCH)-.*\.tgz
-NODE_PREBUILT_DIR ?= https://download.joyent.com/pub/build/sdcnode/$(NODE_PREBUILT_IMAGE)/$(NODE_PREBUILT_BRANCH)-latest/sdcnode/
-ifeq ($(shell echo $(NODE_PREBUILT_DIR) | cut -c 1-4),http)
-	NODE_PREBUILT_BASE := $(shell curl -ksS --fail --connect-timeout 30 $(NODE_PREBUILT_DIR) | grep 'href=' | cut -d'"' -f2 | grep "^$(NODE_PREBUILT_PATTERN)$$" | sort | tail -1)
-	ifneq ($(NODE_PREBUILT_BASE),)
-		NODE_PREBUILT_TARBALL := $(NODE_PREBUILT_DIR)$(NODE_PREBUILT_BASE)
-	endif
-else
-	NODE_PREBUILT_BASE := $(shell ls -1 $(NODE_PREBUILT_DIR)/ | grep "^$(NODE_PREBUILT_PATTERN)$$" 2>/dev/null | sort | tail -1)
-	ifneq ($(NODE_PREBUILT_BASE),)
-		NODE_PREBUILT_TARBALL := $(NODE_PREBUILT_DIR)/$(NODE_PREBUILT_BASE)
-	endif
-endif
-ifeq ($(NODE_PREBUILT_TARBALL),)
-	NODE_PREBUILT_TARBALL = $(error NODE_PREBUILT_TARBALL is empty: no '$(NODE_PREBUILT_DIR)/$(NODE_PREBUILT_PATTERN)' found)
-endif
-
-
-# Prebuild-specific paths for the "*_EXEC" vars to ensure that
-# a prebuild change (e.g. if master Makefile's NODE_PREBUILT_VERSION
-# choice changes) causes a install of the new node.
-NODE_EXEC	:= $(BUILD)/prebuilt-node-$(NODE_PREBUILT_NAME)
-NODE_WAF_EXEC	:= $(BUILD)/prebuilt-node-waf-$(NODE_PREBUILT_NAME)
-NPM_EXEC	:= $(BUILD)/prebuilt-npm-$(NODE_PREBUILT_NAME)
-
-# Ensure these use absolute paths to the executables to allow running
-# from a dir other than the project top.
-NODE		:= $(TOP)/$(NODE_INSTALL)/bin/node
-NODE_WAF	:= $(TOP)/$(NODE_INSTALL)/bin/node-waf
-NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) node $(TOP)/$(NODE_INSTALL)/bin/npm
diff --git a/tools/mk/Makefile.node_prebuilt.targ b/tools/mk/Makefile.node_prebuilt.targ
deleted file mode 100644
index 6877333..0000000
--- a/tools/mk/Makefile.node_prebuilt.targ
+++ /dev/null
@@ -1,42 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.node_prebuilt.targ: Makefile for including a prebuilt Node.js
-# build.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-
-
-NODE_PREBUILT_TARBALL ?= $(error NODE_PREBUILT_TARBALL is not set: was Makefile.node_prebuilt.defs included?)
-
-
-# TODO: remove this limitation
-# Limitation: currently presuming that the NODE_INSTALL basename is
-# 'node' and that sdcnode tarballs have a 'node' top-level dir.
-$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC):
-	[[ $(shell basename $(NODE_INSTALL)) == "node" ]] \
-		|| (echo "Limitation: 'basename NODE_INSTALL' is not 'node'" && exit 1)
-	rm -rf $(NODE_INSTALL) \
-		$(BUILD)/prebuilt-node-* $(BUILD)/prebuilt-npm-*
-	mkdir -p $(shell dirname $(NODE_INSTALL))
-	if [[ $(shell echo $(NODE_PREBUILT_TARBALL) | cut -c 1-4) == "http" ]]; then \
-		echo "Downloading '$(NODE_PREBUILT_BASE)'."; \
-		curl -ksS --fail --connect-timeout 30 -o $(shell dirname $(NODE_INSTALL))/$(NODE_PREBUILT_BASE) $(NODE_PREBUILT_TARBALL); \
-		(cd $(shell dirname $(NODE_INSTALL)) && $(TAR) xf $(NODE_PREBUILT_BASE)); \
-	else \
-		(cd $(shell dirname $(NODE_INSTALL)) && $(TAR) xf $(NODE_PREBUILT_TARBALL)); \
-	fi
-	ln -s $(TOP)/$(NODE_INSTALL)/bin/node $(NODE_EXEC)
-	ln -s $(TOP)/$(NODE_INSTALL)/bin/npm $(NPM_EXEC)
diff --git a/tools/mk/Makefile.smf.defs b/tools/mk/Makefile.smf.defs
deleted file mode 100644
index b988bbe..0000000
--- a/tools/mk/Makefile.smf.defs
+++ /dev/null
@@ -1,40 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.smf.defs: common targets for SMF manifests
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-# This Makefile uses the following definitions:
-#
-#	SMF_MANIFESTS_IN	Source files for SMF manifests.  The following
-#				substitutions will be made on these files:
-#
-#		@@NODE@@	path to installed node
-#
-# It updates SMF_MANIFESTS with the set of files generated by SMF_MANIFESTS_IN.
-# It also updates the "check" target to check the XML syntax of all manifests,
-# generated or otherwise.
-#
-# To use this file, be sure to also include Makefile.smf.targ after defining
-# targets.
-#
-
-SED 		?= sed
-SMF_DTD		?= tools/service_bundle.dtd.1
-XMLLINT		?= xmllint --noout
-
-SMF_MANIFESTS	+= $(SMF_MANIFESTS_IN:%.in=%)
-CLEAN_FILES	+= $(SMF_MANIFESTS_IN:%.in=%)
diff --git a/tools/mk/Makefile.smf.targ b/tools/mk/Makefile.smf.targ
deleted file mode 100644
index f78de96..0000000
--- a/tools/mk/Makefile.smf.targ
+++ /dev/null
@@ -1,29 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.smf.targ: see Makefile.smf.defs.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-.PHONY: check-manifests
-check-manifests: $(SMF_MANIFESTS:%=%.smfchk)
-
-%.smfchk: %
-	$(XMLLINT) --path $(dir $(SMF_DTD)) --dtdvalid $(SMF_DTD) $^
-
-check:: check-manifests
-
-$(SMF_MANIFESTS): %: %.in
-	$(SED) -e 's#@@NODE@@#@@PREFIX@@/$(NODE_INSTALL)/bin/node#' $< > $@
diff --git a/tools/mk/Makefile.targ b/tools/mk/Makefile.targ
deleted file mode 100644
index ef60baa..0000000
--- a/tools/mk/Makefile.targ
+++ /dev/null
@@ -1,317 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.targ: common targets.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-# This Makefile defines several useful targets and rules. You can use it by
-# including it from a Makefile that specifies some of the variables below.
-#
-# Targets defined in this Makefile:
-#
-#	check	Checks JavaScript files for lint and style
-#		Checks bash scripts for syntax
-#		Checks SMF manifests for validity against the SMF DTD
-#
-#	clean	Removes built files
-#
-#	docs	Builds restdown documentation in docs/
-#
-#	prepush	Depends on "check" and "test"
-#
-#	test	Does nothing (you should override this)
-#
-#	xref	Generates cscope (source cross-reference index)
-#
-# For details on what these targets are supposed to do, see the Joyent
-# Engineering Guide.
-#
-# To make use of these targets, you'll need to set some of these variables. Any
-# variables left unset will simply not be used.
-#
-#	BASH_FILES	Bash scripts to check for syntax
-#			(paths relative to top-level Makefile)
-#
-#	CLEAN_FILES	Files to remove as part of the "clean" target.  Note
-#			that files generated by targets in this Makefile are
-#			automatically included in CLEAN_FILES.  These include
-#			restdown-generated HTML and JSON files.
-#
-#	DOC_FILES	Restdown (documentation source) files. These are
-#			assumed to be contained in "docs/", and must NOT
-#			contain the "docs/" prefix.
-#
-#	JSL_CONF_NODE	Specify JavaScriptLint configuration files
-#	JSL_CONF_WEB	(paths relative to top-level Makefile)
-#
-#			Node.js and Web configuration files are separate
-#			because you'll usually want different global variable
-#			configurations.  If no file is specified, none is given
-#			to jsl, which causes it to use a default configuration,
-#			which probably isn't what you want.
-#
-#	JSL_FILES_NODE	JavaScript files to check with Node config file.
-#	JSL_FILES_WEB	JavaScript files to check with Web config file.
-#
-#	JSON_FILES	JSON files to be validated
-#
-#	JSSTYLE_FILES	JavaScript files to be style-checked
-#
-# You can also override these variables:
-#
-#	BASH		Path to bash (default: "bash")
-#
-#	CSCOPE_DIRS	Directories to search for source files for the cscope
-#			index. (default: ".")
-#
-#	JSL		Path to JavaScriptLint (default: "jsl")
-#
-#	JSL_FLAGS_NODE	Additional flags to pass through to JSL
-#	JSL_FLAGS_WEB
-#	JSL_FLAGS
-#
-#	JSON		Path to json tool (default: "json")
-#
-#	JSSTYLE		Path to jsstyle (default: "jsstyle")
-#
-#	JSSTYLE_FLAGS	Additional flags to pass through to jsstyle
-#
-#	RESTDOWN_EXT	By default '.restdown' is required for DOC_FILES
-#			(see above). If you want to use, say, '.md' instead, then
-#			set 'RESTDOWN_EXT=.md' in your Makefile.
-#
-
-#
-# Defaults for the various tools we use.
-#
-BASH		?= bash
-BASHSTYLE	?= $(NODE) tools/bashstyle
-CP		?= cp
-CSCOPE		?= cscope
-CSCOPE_DIRS	?= .
-JSL		?= jsl
-JSON		?= json
-JSSTYLE		?= jsstyle
-MKDIR		?= mkdir -p
-MV		?= mv
-RESTDOWN_FLAGS	?=
-RESTDOWN_EXT	?= .restdown
-RMTREE		?= rm -rf
-JSL_FLAGS  	?= --nologo --nosummary
-
-ifeq ($(shell uname -s),SunOS)
-	TAR	?= gtar
-else
-	TAR	?= tar
-endif
-
-
-#
-# Defaults for other fixed values.
-#
-BUILD		= build
-DISTCLEAN_FILES += $(BUILD)
-DOC_BUILD	= $(BUILD)/docs/public
-
-#
-# Configure JSL_FLAGS_{NODE,WEB} based on JSL_CONF_{NODE,WEB}.
-#
-ifneq ($(origin JSL_CONF_NODE), undefined)
-	JSL_FLAGS_NODE += --conf=$(JSL_CONF_NODE)
-endif
-
-ifneq ($(origin JSL_CONF_WEB), undefined)
-	JSL_FLAGS_WEB += --conf=$(JSL_CONF_WEB)
-endif
-
-#
-# Targets. For descriptions on what these are supposed to do, see the
-# Joyent Engineering Guide.
-#
-
-#
-# Instruct make to keep around temporary files. We have rules below that
-# automatically update git submodules as needed, but they employ a deps/*/.git
-# temporary file. Without this directive, make tries to remove these .git
-# directories after the build has completed.
-#
-.SECONDARY: $($(wildcard deps/*):%=%/.git)
-
-#
-# This rule enables other rules that use files from a git submodule to have
-# those files depend on deps/module/.git and have "make" automatically check
-# out the submodule as needed.
-#
-deps/%/.git:
-	git submodule update --init deps/$*
-
-#
-# These recipes make heavy use of dynamically-created phony targets. The parent
-# Makefile defines a list of input files like BASH_FILES. We then say that each
-# of these files depends on a fake target called filename.bashchk, and then we
-# define a pattern rule for those targets that runs bash in check-syntax-only
-# mode. This mechanism has the nice properties that if you specify zero files,
-# the rule becomes a noop (unlike a single rule to check all bash files, which
-# would invoke bash with zero files), and you can check individual files from
-# the command line with "make filename.bashchk".
-#
-.PHONY: check-bash
-check-bash: $(BASH_FILES:%=%.bashchk) $(BASH_FILES:%=%.bashstyle)
-
-%.bashchk: %
-	$(BASH) -n $^
-
-%.bashstyle: %
-	$(BASHSTYLE) $^
-
-.PHONY: check-json
-check-json: $(JSON_FILES:%=%.jsonchk)
-
-%.jsonchk: %
-	$(JSON) --validate -f $^
-
-#
-# The above approach can be slow when there are many files to check because it
-# requires that "make" invoke the check tool once for each file, rather than
-# passing in several files at once.  For the JavaScript check targets, we define
-# a variable for the target itself *only if* the list of input files is
-# non-empty.  This avoids invoking the tool if there are no files to check.
-#
-JSL_NODE_TARGET = $(if $(JSL_FILES_NODE), check-jsl-node)
-.PHONY: check-jsl-node
-check-jsl-node: $(JSL_EXEC)
-	$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_NODE) $(JSL_FILES_NODE)
-
-JSL_WEB_TARGET = $(if $(JSL_FILES_WEB), check-jsl-web)
-.PHONY: check-jsl-web
-check-jsl-web: $(JSL_EXEC)
-	$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_WEB) $(JSL_FILES_WEB)
-
-.PHONY: check-jsl
-check-jsl: $(JSL_NODE_TARGET) $(JSL_WEB_TARGET)
-
-JSSTYLE_TARGET = $(if $(JSSTYLE_FILES), check-jsstyle)
-.PHONY: check-jsstyle
-check-jsstyle:  $(JSSTYLE_EXEC)
-	$(JSSTYLE) $(JSSTYLE_FLAGS) $(JSSTYLE_FILES)
-
-.PHONY: check
-check:: check-jsl check-json $(JSSTYLE_TARGET) check-bash
-	@echo check ok
-
-.PHONY: clean
-clean::
-	-$(RMTREE) $(CLEAN_FILES)
-
-.PHONY: distclean
-distclean:: clean
-	-$(RMTREE) $(DISTCLEAN_FILES)
-
-CSCOPE_FILES = cscope.in.out cscope.out cscope.po.out
-CLEAN_FILES += $(CSCOPE_FILES)
-
-.PHONY: xref
-xref: cscope.files
-	$(CSCOPE) -bqR
-
-.PHONY: cscope.files
-cscope.files:
-	find $(CSCOPE_DIRS) -name '*.c' -o -name '*.h' -o -name '*.cc' \
-	    -o -name '*.js' -o -name '*.s' -o -name '*.cpp' > $@
-
-#
-# The "docs" target is complicated because we do several things here:
-#
-#    (1) Use restdown to build HTML and JSON files from each of DOC_FILES.
-#
-#    (2) Copy these files into $(DOC_BUILD) (build/docs/public), which
-#        functions as a complete copy of the documentation that could be
-#        mirrored or served over HTTP.
-#
-#    (3) Then copy any directories and media from docs/media into
-#        $(DOC_BUILD)/media. This allows projects to include their own media,
-#        including files that will override same-named files provided by
-#        restdown.
-#
-# Step (3) is the surprisingly complex part: in order to do this, we need to
-# identify the subdirectories in docs/media, recreate them in
-# $(DOC_BUILD)/media, then do the same with the files.
-#
-DOC_MEDIA_DIRS := $(shell find docs/media -type d 2>/dev/null | grep -v "^docs/media$$")
-DOC_MEDIA_DIRS := $(DOC_MEDIA_DIRS:docs/media/%=%)
-DOC_MEDIA_DIRS_BUILD := $(DOC_MEDIA_DIRS:%=$(DOC_BUILD)/media/%)
-
-DOC_MEDIA_FILES := $(shell find docs/media -type f 2>/dev/null)
-DOC_MEDIA_FILES := $(DOC_MEDIA_FILES:docs/media/%=%)
-DOC_MEDIA_FILES_BUILD := $(DOC_MEDIA_FILES:%=$(DOC_BUILD)/media/%)
-
-#
-# Like the other targets, "docs" just depends on the final files we want to
-# create in $(DOC_BUILD), leveraging other targets and recipes to define how
-# to get there.
-#
-.PHONY: docs
-docs:							\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.html)		\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.json)		\
-	$(DOC_MEDIA_FILES_BUILD)
-
-#
-# We keep the intermediate files so that the next build can see whether the
-# files in DOC_BUILD are up to date.
-#
-.PRECIOUS:					\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.html)		\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%json)
-
-#
-# We do clean those intermediate files, as well as all of DOC_BUILD.
-#
-CLEAN_FILES +=					\
-	$(DOC_BUILD)				\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.html)		\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.json)
-
-#
-# Before installing the files, we must make sure the directories exist. The |
-# syntax tells make that the dependency need only exist, not be up to date.
-# Otherwise, it might try to rebuild spuriously because the directory itself
-# appears out of date.
-#
-$(DOC_MEDIA_FILES_BUILD): | $(DOC_MEDIA_DIRS_BUILD)
-
-$(DOC_BUILD)/%: docs/% | $(DOC_BUILD)
-	$(CP) $< $@
-
-docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC)
-	$(RESTDOWN) $(RESTDOWN_FLAGS) -m $(DOC_BUILD) $<
-
-$(DOC_BUILD):
-	$(MKDIR) $@
-
-$(DOC_MEDIA_DIRS_BUILD):
-	$(MKDIR) $@
-
-#
-# The default "test" target does nothing. This should usually be overridden by
-# the parent Makefile. It's included here so we can define "prepush" without
-# requiring the repo to define "test".
-#
-.PHONY: test
-test:
-
-.PHONY: prepush
-prepush: check test
-- 
2.21.0

