commit 9639842b4fdde7a27265309e864d6542164adcf6 (refs/changes/87/787/1)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2016-10-26T14:02:36-07:00 (2 years, 11 months ago)
    
    DOCKER-957 simplify auth code after upgrading to newer node
    
    XXX: do not merge until sdc-docker is on node 4.x

diff --git a/lib/auth.js b/lib/auth.js
index 584f5dd..fbe478a 100644
--- a/lib/auth.js
+++ b/lib/auth.js
@@ -40,84 +40,24 @@ var errors = require('./errors');
 
 var fmt = util.format;
 
-/* Turn a potentially non-zero-padded hex string into a Buffer. */
-function fromHex(hex) {
-    /*
-     * Buffer() can't take a hex string unless it's zero-padded out to an
-     * even length.
-     */
-    if (hex.length % 2 !== 0)
-        hex = '0' + hex;
-    return (new Buffer(hex, 'hex'));
-}
-
-/*
- * This is a sample certificate as parsed by node TLS. We will authorize
- * the user by finding the corresponding UFDS user by their certificate CN
- * (login/username), compute the modulus and exponent of their SSH public
- * key to their parsed certificate's modulus and exponent.
- *
- * { subject:
- *    { C: 'CA',
- *      ST: 'BC',
- *      L: 'Vancouver',
- *      O: 'Joyent',
- *      CN: 'foo',
- *      emailAddress: 'foo@bar.com' },
- *   issuer:
- *    { C: 'CA',
- *      ST: 'BC',
- *      L: 'Vancouver',
- *      O: 'Joyent',
- *      CN: 'foo',
- *      emailAddress: 'foo@bar.com' },
- *   modulus: '1AB02CD03EF...',
- *   exponent: '10001',
- *   valid_from: 'Feb 11 19:31:38 2015 GMT',
- *   valid_to: 'Feb 11 19:31:38 2016 GMT',
- *   fingerprint: 'AA:BB:CC:DD:EE:FF' }
- *
- * Note that the "modulus" and "exponent" fields are completely undocumented
- * and not guaranteed to survive into new nodejs versions. As of node v0.12
- * the new field "raw" became available (and documented), containing the raw
- * DER certificate.
- *
- */
 function authTls(req, res, next) {
     var log = req.log;
     var authCache = req.app.authCache;
     var ufds = req.app.ufds;
-    var cert = req.connection.getPeerCertificate();
 
-    /* We only support RSA keys for now until we have a newer node. */
-    if (!cert.subject || !cert.subject.CN || !cert.fingerprint
-        || !cert.modulus || !cert.exponent) {
+    var peerCert = req.connection.getPeerCertificate();
+    if (!peerCert || !peerCert.raw) {
         next(new errors.UnauthorizedError());
         return;
     }
 
-    var exponent = fromHex(cert.exponent);
-    var modulus = fromHex(cert.modulus);
-
-    /*
-     * This is an sshpk private API, so it could break if we upgrade our sshpk
-     * dep. We should keep an eye on this, and change to using the "raw" DER
-     * certificate instead of the exponent/modulus fields once we're on node
-     * 0.12 or later.
-     */
-    var peerKey = new sshpk.Key({
-        type: 'rsa',
-        parts: [
-            { name: 'e', data: sshpkUtils.mpNormalize(exponent) },
-            { name: 'n', data: sshpkUtils.mpNormalize(modulus) }
-        ]
-    });
-
+    var cert = sshpk.parseCertificate(peerCert.raw, 'x509');
+    var peerKey = cert.subjectKey;
     var peerKeyFp = peerKey.fingerprint('sha512').toString();
 
     var account;
     var ufdsKey;
-    var login = cert.subject.CN;
+    var login = cert.subjects[0].cn;
     var authFunctions = [ getMainAccount ];
 
     if (authCache.get(login) && authCache.get(login) === peerKeyFp) {
diff --git a/package.json b/package.json
index 681eb91..1060d31 100644
--- a/package.json
+++ b/package.json
@@ -22,7 +22,7 @@
     "sdc-bunyan-serializers": "git+https://github.com/joyent/sdc-bunyan-serializers.git#5454ae4",
     "sdc-clients": "10.0.1",
     "sprintf": "0.1.5",
-    "sshpk": "1.8.3",
+    "sshpk": "1.10.0",
     "strsplit": "1.0.0",
     "tape": "^4.4.0",
     "trace-event": "1.2.0",
