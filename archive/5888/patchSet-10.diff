From fddbc350d2245ef6d4790a84cdcda2ed837559e2 Mon Sep 17 00:00:00 2001
From: Jon Anderson <jon.anderson@joyent.com>
Date: Tue, 9 Apr 2019 10:46:14 -0400
Subject: [PATCH] MANTA-4133 Invalid content-type resulted in 500 response

---
 deps/jsstyle     |   2 +-
 lib/server.js    |  19 ++++++---
 test/obj.test.js | 100 +++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 115 insertions(+), 6 deletions(-)

diff --git a/deps/jsstyle b/deps/jsstyle
index 52dc973..d75b7ca 160000
--- a/deps/jsstyle
+++ b/deps/jsstyle
@@ -1 +1 @@
-Subproject commit 52dc973cf64da11834eca7cf46ebce8518e3ee88
+Subproject commit d75b7ca8308be17c80e2b120f2a01d4a0c20d8a8
diff --git a/lib/server.js b/lib/server.js
index c23229d..eba95f3 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -40,9 +40,14 @@ require('./errors');
 ///--- Globals
 
 var JOBS_ROOT_RE = /^\/([a-zA-Z][a-zA-Z0-9_\.@%]+)\/jobs\/?$/;
-/* JSSTYLED */
+/* BEGIN JSSTYLED */
 var JOBS_LIVE_RE = /(state|status|name)=/i;
-
+/*
+ * from https://www.w3.org/Protocols/rfc1341/4_Content-Type.html
+ * match 'type/subtype' where subtypes can be +/- delimited
+ */
+var VALID_CONTENT_TYPE_RE = /.+\/.+/;
+/* END JSSTYLED */
 
 ///--- Helpers
 
@@ -192,9 +197,14 @@ function createServer(options, clients, name) {
     server.pre(restify.pre.sanitizePath());
     server.pre(function cleanupContentType(req, res, next) {
         var ct = req.headers['content-type'];
-        /* JSSTYLED */
-        if (ct && !/.*\/.*/.test(ct))
+        /*
+         * content-type must have a type, '/' and sub-type
+         */
+        if (ct && !VALID_CONTENT_TYPE_RE.test(ct)) {
+            req.log.debug('receieved a malformed content-type: %s', ct);
             req.headers['content-type'] = mime.lookup(ct);
+        }
+
         next();
     });
 
@@ -499,7 +509,6 @@ function forbiddenHandler(req, res, next) {
 }
 
 
-
 /*
  * This adds the routes for the majority of multipart upload API endpoints,
  * including:
diff --git a/test/obj.test.js b/test/obj.test.js
index c4863a1..7511bc2 100644
--- a/test/obj.test.js
+++ b/test/obj.test.js
@@ -345,6 +345,7 @@ test('chattr: content-type', function (t) {
 });
 
 
+
 test('chattr: durability-level (not ok)', function (t) {
     var opts = {
         headers: {
@@ -1058,3 +1059,102 @@ test('put timeout', function (t) {
         stream.write(TEXT.substr(0, 1));
     });
 });
+
+/*
+ * verify that a write with an malformed content-type succeeds
+ * and server returns correct content-type on read of the same object.
+ */
+test('MANTA-4133 (malformed content-type)', function (t) {
+    var self = this;
+    var opts = {
+        headers: {
+            'content-type': '/*'
+        }
+    };
+
+    writeObject(self.client, self.key, opts, function (err, res) {
+        t.ifError(err);
+        t.checkResponse(res, 204);
+        self.client.get(self.key, function (err2, stream, res2) {
+            t.ifError(err2);
+            t.checkResponse(res2, 200);
+            t.equal(res2.headers['content-type'], 'application/octet-stream');
+            t.end();
+        });
+    });
+});
+
+/*
+ * verify that a write with an empty content-type succeeds and server
+ * returns correct content-type on read of the same object.
+ */
+test('MANTA-4133 (empty content-type)', function (t) {
+    var self = this;
+    var opts = {
+        headers: {
+            'content-type': ''
+        }
+    };
+
+    writeObject(self.client, self.key, opts, function (err, res) {
+        t.ifError(err);
+        t.checkResponse(res, 204);
+        self.client.get(self.key, function (err2, stream, res2) {
+            t.ifError(err2);
+            t.checkResponse(res2, 200);
+            t.equal(res2.headers['content-type'], 'text/plain');
+            t.end();
+        });
+    });
+});
+
+/*
+ * verify that a write with unknown content-type with a valid format succeeds
+ * and server returns correct content-type on read of the same object.
+ */
+test('MANTA-4133 (non-existent content-type)', function (t) {
+    var self = this;
+    var opts = {
+        headers: {
+            'content-type': 'argle/'
+        }
+    };
+
+    writeObject(self.client, self.key, opts, function (err, res) {
+        t.ifError(err);
+        t.checkResponse(res, 204);
+        self.client.get(self.key, function (err2, stream, res2) {
+            t.ifError(err2);
+            t.checkResponse(res2, 200);
+            t.equal(res2.headers['content-type'], 'application/octet-stream');
+            t.end();
+        });
+    });
+});
+
+/*
+ * verify that a write with unknown content-type with a valid format succeeds
+ * and server returns correct content-type on read of the same object.
+ */
+test('MANTA-4133 (verify non-existant utf-8 content-type)', function (t) {
+    var self = this;
+    var encoded = '%EC%95%88%EB%85%95%ED%95%98%EC%84%B8%EC%9A%94';
+    var ct_utf8 = unescape(encoded);
+
+    var opts = {
+        headers: {
+            'content-type': ct_utf8
+        }
+    };
+
+    writeObject(self.client, self.key, opts, function (err, res) {
+        t.ifError(err);
+        t.checkResponse(res, 204);
+        self.client.get(self.key, function (err2, stream, res2) {
+            t.ifError(err2);
+            t.checkResponse(res2, 200);
+            t.equal(res2.headers['content-type'], 'application/octet-stream');
+            t.end();
+        });
+    });
+});
-- 
2.21.0

