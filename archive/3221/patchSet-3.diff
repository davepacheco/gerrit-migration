From 0a9d1dda203abe24115325f1d1d5782e73c0b05d Mon Sep 17 00:00:00 2001
From: Julien Gilli <julien.gilli@joyent.com>
Date: Mon, 15 Jan 2018 16:08:48 -0800
Subject: [PATCH] VOLAPI-82 volume names should be limited in size Reviewed by:
 Josh Wilsdon <jwilsdon@joyent.com> Approved by: Josh Wilsdon
 <jwilsdon@joyent.com>

---
 docs/api/README.md                            |   6 +-
 lib/endpoints/volume-reservations.js          |  92 +++-----
 lib/endpoints/volumes.js                      | 212 ++++++------------
 lib/validation/predicate.js                   |   7 +-
 lib/validation/uuid.js                        |   8 +-
 lib/validation/volumes.js                     | 120 +++++-----
 ...red-volumes-creation-invalid-names.test.js | 101 +++++++++
 ...d-volumes-creation-name-generation.test.js |  54 ++---
 8 files changed, 300 insertions(+), 300 deletions(-)
 create mode 100644 test/integration/nfs-shared-volumes-creation-invalid-names.test.js

diff --git a/docs/api/README.md b/docs/api/README.md
index 17a6155..10b3b43 100644
--- a/docs/api/README.md
+++ b/docs/api/README.md
@@ -92,8 +92,8 @@ Volumes are be represented as objects that share a common set of properties:
 
 * `name`: the volume's name. It must be unique for a given user. This is similar
   to the `alias` property of VMAPI's VM objects. It must match the regular
-  expression `/^[a-zA-Z0-9][a-zA-Z0-9_\.\-]+$/`. There is no limit on the length
-  of a volume's name.
+  expression `/^[a-zA-Z0-9][a-zA-Z0-9_\.\-]+$/`. The maximum number of
+  characters for a volume name is 256.
 
 * `type`: identifies the volume's type. There is currently one possible value
   for this property: `tritonnfs`. Additional types can be added in the future,
@@ -259,7 +259,7 @@ A [volume object](#volume-objects) representing the volume with UUID `uuid`.
 
 | Param         | Type         | Description                              |
 | ------------- | ------------ | ---------------------------------------- |
-| name          | String       | The desired name for the volume. If missing, a unique name for the current user will be generated |
+| name          | String       | The desired name for the volume. If missing, a unique name for the current user will be generated. Names cannot be longer than 256 characters |
 | owner_uuid    | String       | The UUID of the volume's owner. |
 | size          | Number       | The desired storage capacity for that volume in mebibytes. Default value is 10240 mebibytes (10 gibibytes). |
 | type          | String       | The type of volume. Currently only `'tritonnfs'` is supported. |
diff --git a/lib/endpoints/volume-reservations.js b/lib/endpoints/volume-reservations.js
index 31d039a..6230556 100644
--- a/lib/endpoints/volume-reservations.js
+++ b/lib/endpoints/volume-reservations.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -80,52 +80,44 @@ function validateAddVolumeReservation(req, res, next) {
     assert.object(res, 'res');
     assert.func(next, 'next');
 
-    var validationErr;
+    var errs = [];
+    var invalidParamsErrs;
+    var MANDATORY_PARAM_NAMES;
+    var mandatoryParamsErrs;
     var validationErrs = [];
     var VALID_PARAM_NAMES =
         ['job_uuid', 'owner_uuid', 'volume_name', 'vm_uuid'];
-    var MANDATORY_PARAM_NAMES = VALID_PARAM_NAMES.slice();
 
-    var mandatoryParamsErrs =
+    MANDATORY_PARAM_NAMES = VALID_PARAM_NAMES.slice();
+
+    mandatoryParamsErrs =
         validationUtils.checkMandatoryParamsPresence(req.params,
             MANDATORY_PARAM_NAMES);
-    var invalidParamsErrs =
+    invalidParamsErrs =
         validationUtils.checkInvalidParams(req.params, VALID_PARAM_NAMES);
 
     validationErrs = validationErrs.concat(mandatoryParamsErrs);
     validationErrs = validationErrs.concat(invalidParamsErrs);
 
     if (req.params.owner_uuid !== undefined) {
-        validationErr =
-            uuidValidation.validateUuid(req.params.owner_uuid, 'owner');
-        if (validationErr !== undefined) {
-            validationErrs.push(validationErr);
-        }
+        errs = uuidValidation.validateUuid(req.params.owner_uuid, 'owner');
+        validationErrs = validationErrs.concat(errs);
     }
 
     if (req.params.volume_name !== undefined) {
-        validationErr =
-            volumesValidation.validateVolumeName(req.params.volume_name,
-                'volume_name');
-        if (validationErr !== undefined) {
-            validationErrs.push(validationErr);
-        }
+        errs = volumesValidation.validateVolumeName(req.params.volume_name,
+            'volume_name');
+        validationErrs = validationErrs.concat(errs);
     }
 
     if (req.params.vm_uuid !== undefined) {
-        validationErr =
-            uuidValidation.validateUuid(req.params.vm_uuid, 'VM');
-        if (validationErr !== undefined) {
-            validationErrs.push(validationErr);
-        }
+        errs = uuidValidation.validateUuid(req.params.vm_uuid, 'VM');
+        validationErrs = validationErrs.concat(errs);
     }
 
     if (req.params.job_uuid !== undefined) {
-        validationErr =
-            uuidValidation.validateUuid(req.params.job_uuid, 'job');
-        if (validationErr !== undefined) {
-            validationErrs.push(validationErr);
-        }
+        errs = uuidValidation.validateUuid(req.params.job_uuid, 'job');
+        validationErrs = validationErrs.concat(errs);
     }
 
     if (validationErrs.length > 0) {
@@ -403,7 +395,7 @@ function validateRemoveVolumeReservation(req, res, next) {
     assert.object(res, 'res');
     assert.func(next, 'next');
 
-    var validationErr;
+    var errs = [];
     var validationErrs = [];
     var VALID_PARAM_NAMES = ['uuid', 'owner_uuid'];
     var MANDATORY_PARAM_NAMES = VALID_PARAM_NAMES.slice();
@@ -418,19 +410,13 @@ function validateRemoveVolumeReservation(req, res, next) {
     validationErrs = validationErrs.concat(invalidParamsErrs);
 
     if (req.params.uuid) {
-        validationErr =
-            uuidValidation.validateUuid(req.params.uuid, 'uuid');
-        if (validationErr !== undefined) {
-            validationErrs.push(validationErr);
-        }
+        errs = uuidValidation.validateUuid(req.params.uuid, 'uuid');
+        validationErrs = validationErrs.concat(errs);
     }
 
     if (req.params.owner_uuid) {
-        validationErr =
-            uuidValidation.validateUuid(req.params.owner_uuid, 'owner');
-        if (validationErr !== undefined) {
-            validationErrs.push(validationErr);
-        }
+        errs = uuidValidation.validateUuid(req.params.owner_uuid, 'owner');
+        validationErrs = validationErrs.concat(errs);
     }
 
     if (validationErrs.length > 0) {
@@ -529,7 +515,7 @@ function validateListVolumeReservations(req, res, next) {
     assert.object(res, 'res');
     assert.func(next, 'next');
 
-    var validationErr;
+    var errs = [];
     var validationErrs = [];
     var VALID_PARAM_NAMES =
         ['owner_uuid', 'volume_name', 'vm_uuid', 'job_uuid'];
@@ -545,36 +531,24 @@ function validateListVolumeReservations(req, res, next) {
     validationErrs = validationErrs.concat(invalidParamsErrs);
 
     if (req.params.owner_uuid) {
-        validationErr =
-            uuidValidation.validateUuid(req.params.owner_uuid, 'owner_uuid');
-        if (validationErr !== undefined) {
-            validationErrs.push(validationErr);
-        }
+        errs = uuidValidation.validateUuid(req.params.owner_uuid, 'owner_uuid');
+        validationErrs = validationErrs.concat(errs);
     }
 
     if (req.params.volume_name) {
-        validationErr =
-            volumesValidation.validateVolumeName(req.params.volume_name,
-                'volume_name');
-        if (validationErr !== undefined) {
-            validationErrs.push(validationErr);
-        }
+        errs = volumesValidation.validateVolumeName(req.params.volume_name,
+            'volume_name');
+            validationErrs = validationErrs.concat(errs);
     }
 
     if (req.params.vm_uuid) {
-        validationErr =
-            uuidValidation.validateUuid(req.params.vm_uuid, 'vm_uuid');
-        if (validationErr !== undefined) {
-            validationErrs.push(validationErr);
-        }
+        errs = uuidValidation.validateUuid(req.params.vm_uuid, 'vm_uuid');
+        validationErrs = validationErrs.concat(errs);
     }
 
     if (req.params.job_uuid) {
-        validationErr =
-            uuidValidation.validateUuid(req.params.job_uuid, 'job_uuid');
-        if (validationErr !== undefined) {
-            validationErrs.push(validationErr);
-        }
+        errs = uuidValidation.validateUuid(req.params.job_uuid, 'job_uuid');
+        validationErrs = validationErrs.concat(errs);
     }
 
     if (validationErrs.length > 0) {
diff --git a/lib/endpoints/volumes.js b/lib/endpoints/volumes.js
index a6bf610..8700126 100644
--- a/lib/endpoints/volumes.js
+++ b/lib/endpoints/volumes.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -224,13 +224,13 @@ function validateCreateVolume(req, res, next) {
     assert.func(next, 'next');
 
     var invalidParamsErrs;
+    var MANDATORY_PARAM_NAMES = ['owner_uuid', 'type', 'networks'];
     var mandatoryParamsErrs;
     var networkValidationErrs;
-    var validationErr;
-    var validationErrs = [];
     var VALID_PARAM_NAMES = ['uuid', 'owner_uuid', 'size', 'name', 'type',
         'networks'];
-    var MANDATORY_PARAM_NAMES = ['owner_uuid', 'type', 'networks'];
+    var errs;
+    var validationErrs = [];
 
     invalidParamsErrs = validationUtils.checkInvalidParams(req.params,
         VALID_PARAM_NAMES);
@@ -240,36 +240,26 @@ function validateCreateVolume(req, res, next) {
     validationErrs = validationErrs.concat(mandatoryParamsErrs);
     validationErrs = validationErrs.concat(invalidParamsErrs);
 
-    validationErr = uuidValidation.validateUuid(req.params.owner_uuid,
+    errs = uuidValidation.validateUuid(req.params.owner_uuid,
         'owner_uuid');
-    if (validationErr !== undefined) {
-        validationErrs.push(validationErr);
-    }
+    validationErrs = validationErrs.concat(errs);
 
     if (req.params.uuid !== undefined) {
-        validationErr = uuidValidation.validateUuid(req.params.uuid, 'uuid');
-        if (validationErr !== undefined) {
-            validationErrs.push(validationErr);
-        }
+        errs = uuidValidation.validateUuid(req.params.uuid, 'uuid');
+        validationErrs = validationErrs.concat(errs);
     }
 
     if (req.params.size !== undefined) {
-        validationErr = volumesValidation.validateVolumeSize(req.params.size);
-        if (validationErr !== undefined) {
-            validationErrs.push(validationErr);
-        }
+        errs = volumesValidation.validateVolumeSize(req.params.size);
+        validationErrs = validationErrs.concat(errs);
     }
 
-    validationErr = volumesValidation.validateVolumeName(req.params.name,
+    errs = volumesValidation.validateVolumeName(req.params.name,
         {allowEmpty: true});
-    if (validationErr !== undefined) {
-        validationErrs.push(validationErr);
-    }
+    validationErrs = validationErrs.concat(errs);
 
-    validationErr = volumesValidation.validateVolumeType(req.params.type);
-    if (validationErr !== undefined) {
-        validationErrs.push(validationErr);
-    }
+    errs = volumesValidation.validateVolumeType(req.params.type);
+    validationErrs = validationErrs.concat(errs);
 
     if (!Array.isArray(req.params.networks) ||
         req.params.networks.length === 0) {
@@ -692,7 +682,7 @@ function validateGetVolume(req, res, next) {
     assert.object(res, 'res');
     assert.func(next, 'next');
 
-    var validationErr;
+    var errs;
     var validationErrs = [];
     var VALID_PARAM_NAMES = ['owner_uuid', 'uuid'];
     var MANDATORY_PARAM_NAMES = ['uuid'];
@@ -707,18 +697,13 @@ function validateGetVolume(req, res, next) {
     validationErrs = validationErrs.concat(invalidParamsErrs);
 
     if (req.params.uuid) {
-        validationErr = uuidValidation.validateUuid(req.params.uuid, 'uuid');
-        if (validationErr !== undefined) {
-            validationErrs.push(validationErr);
-        }
+        errs = uuidValidation.validateUuid(req.params.uuid, 'uuid');
+        validationErrs = validationErrs.concat(errs);
     }
 
     if (req.params.owner_uuid) {
-        validationErr =
-            uuidValidation.validateUuid(req.params.owner_uuid, 'owner_uuid');
-        if (validationErr !== undefined) {
-            validationErrs.push(validationErr);
-        }
+        errs = uuidValidation.validateUuid(req.params.owner_uuid, 'owner_uuid');
+        validationErrs = validationErrs.concat(errs);
     }
 
     if (validationErrs.length > 0) {
@@ -752,14 +737,9 @@ function validateListVolumes(req, res, next) {
 
     var errs = [];
     var invalidParamsErrs;
-    var nameValidationErr;
-    var ownerUuidValidationErr;
     var predFields;
     var predicateValidationErr;
-    var refsValidationErr;
-    var sizeValidationErr;
-    var stateValidationErr;
-    var validationErr;
+    var validationErrs = [];
     var VALID_PARAM_NAMES = [
         'name',
         'owner_uuid',
@@ -772,7 +752,7 @@ function validateListVolumes(req, res, next) {
 
     invalidParamsErrs = validationUtils.checkInvalidParams(req.params,
         VALID_PARAM_NAMES);
-    errs = errs.concat(invalidParamsErrs);
+    validationErrs = validationErrs.concat(invalidParamsErrs);
 
     if (req.query.predicate) {
         predicateValidationErr =
@@ -788,7 +768,7 @@ function validateListVolumes(req, res, next) {
                     req.query[field] !== null) {
 
                     // we have both query parameter and predicate field, invalid
-                    errs.push(new Error('predicate has "' + field
+                    validationErrs.push(new Error('predicate has "' + field
                         + '" which conflicts with query parameter with same'
                         + ' name'));
                 }
@@ -798,57 +778,42 @@ function validateListVolumes(req, res, next) {
 
     assert.optionalObject(predicateValidationErr, predicateValidationErr);
     if (predicateValidationErr !== undefined) {
-        errs.push(predicateValidationErr);
+        validationErrs.push(predicateValidationErr);
     }
 
     // 'name' is special because we allow '*' as a prefix or suffix for wildcard
     // searching.
     if (req.query.name !== undefined && req.query.name !== null) {
-        nameValidationErr = volumesValidation
-            .validateVolumeNameSearchParam(req.query.name);
-        if (nameValidationErr) {
-            errs.push(nameValidationErr);
-        }
+        errs = volumesValidation.validateVolumeNameSearchParam(req.query.name);
+        validationErrs = validationErrs.concat(errs);
     }
 
     // for 'size' the value must be a number
     if (req.query.size !== undefined && req.query.size !== null) {
-        sizeValidationErr = volumesValidation
-            .validateVolumeSizeSearchParam(req.query.size);
-        if (sizeValidationErr) {
-            errs.push(sizeValidationErr);
-        }
+        errs = volumesValidation .validateVolumeSizeSearchParam(req.query.size);
+        validationErrs = validationErrs.concat(errs);
     }
 
     if (req.query.state !== undefined && req.query.state !== null) {
-        stateValidationErr = volumesValidation
-            .validateVolumeState(req.query.state);
-        if (stateValidationErr) {
-            errs.push(stateValidationErr);
-        }
+        errs = volumesValidation.validateVolumeState(req.query.state);
+        validationErrs = validationErrs.concat(errs);
     }
 
     if (req.query.owner_uuid !== undefined && req.query.owner_uuid !== null) {
-        ownerUuidValidationErr =
-            uuidValidation.validateUuid(req.query.owner_uuid, 'owner_uuid');
-        if (ownerUuidValidationErr) {
-            errs.push(ownerUuidValidationErr);
-        }
+        errs = uuidValidation.validateUuid(req.query.owner_uuid, 'owner_uuid');
+        validationErrs = validationErrs.concat(errs);
     }
 
     if (req.params.refs !== undefined && req.params.ref !== null) {
-        refsValidationErr =
-            uuidValidation.validateUuid(req.params.refs, 'refs');
-        if (refsValidationErr !== undefined) {
-            errs.push(refsValidationErr);
-        }
+        errs = uuidValidation.validateUuid(req.params.refs, 'refs');
+        validationErrs = validationErrs.concat(errs);
     }
 
-    if (errs.length > 0) {
-        validationErr = new errors.ValidationError(errs);
+    if (validationErrs.length > 0) {
+        next(new errors.ValidationError(validationErrs));
+    } else {
+        next();
     }
-
-    next(validationErr);
 }
 
 function listVolumes(req, res, next) {
@@ -892,7 +857,7 @@ function validateListVolumeSizes(req, res, next) {
     assert.func(next, 'next');
 
     var invalidParamsErrs;
-    var validationErr;
+    var errs = [];
     var validationErrs = [];
 
     var VALID_PARAM_NAMES = ['type'];
@@ -903,10 +868,8 @@ function validateListVolumeSizes(req, res, next) {
 
     // if type=<type> is passed, must be a valid type
     if (req.params.type) {
-        validationErr = volumesValidation.validateVolumeType(req.params.type);
-        if (validationErr) {
-            validationErrs.push(validationErr);
-        }
+        errs = volumesValidation.validateVolumeType(req.params.type);
+        validationErrs = validationErrs.concat(errs);
     }
 
     if (validationErrs.length > 0) {
@@ -989,18 +952,16 @@ function validateGetVolumeReferences(req, res, next) {
     assert.object(res, 'res');
     assert.func(next, 'next');
 
+    var errs = [];
     var validationErrs = [];
-    var validationErr;
     var VALID_PARAM_NAMES = ['uuid'];
 
     validationErrs = validationUtils.checkInvalidParams(req.params,
         VALID_PARAM_NAMES);
 
     if (req.params.uuid !== undefined) {
-        validationErr = uuidValidation.validateUuid(req.params.uuid, 'uuid');
-        if (validationErr !== undefined) {
-            validationErrs.push(validationErr);
-        }
+        errs = uuidValidation.validateUuid(req.params.uuid, 'uuid');
+        validationErrs = validationErrs.concat(errs);
     }
 
     if (validationErrs.length > 0) {
@@ -1027,7 +988,7 @@ function validateDeleteVolume(req, res, next) {
     assert.object(res, 'res');
     assert.func(next, 'next');
 
-    var validationErr;
+    var errs = [];
     var validationErrs = [];
     var VALID_PARAM_NAMES = ['owner_uuid', 'uuid', 'force'];
     var MANDATORY_PARAM_NAMES = ['uuid'];
@@ -1042,26 +1003,19 @@ function validateDeleteVolume(req, res, next) {
     validationErrs = validationErrs.concat(invalidParamsErrs);
 
     if (req.params.uuid !== undefined) {
-        validationErr = uuidValidation.validateUuid(req.params.uuid, 'uuid');
-        if (validationErr !== undefined) {
-            validationErrs.push(validationErr);
-        }
+        errs = uuidValidation.validateUuid(req.params.uuid, 'uuid');
+        validationErrs = validationErrs.concat(errs);
     }
 
     if (req.params.owner_uuid !== undefined) {
-        validationErr =
-            uuidValidation.validateUuid(req.query.owner_uuid, 'owner_uuid');
-        if (validationErr !== undefined) {
-            validationErrs.push(validationErr);
-        }
+        errs = uuidValidation.validateUuid(req.query.owner_uuid, 'owner_uuid');
+        validationErrs = validationErrs.concat(errs);
     }
 
     if (req.params.force !== undefined) {
-        validationErr =
-            volumesValidation.validateBooleanAsString(req.query.force, 'force');
-        if (validationErr !== undefined) {
-            validationErrs.push(validationErr);
-        }
+        errs = volumesValidation.validateBooleanAsString(req.query.force,
+            'force');
+        validationErrs = validationErrs.concat(errs);
     }
 
     if (validationErrs.length > 0) {
@@ -1274,7 +1228,7 @@ function validateUpdateVolume(req, res, next) {
     assert.object(res, 'res');
     assert.func(next, 'next');
 
-    var validationErr;
+    var errs = [];
     var validationErrs = [];
     var VALID_PARAM_NAMES = ['name', 'owner_uuid', 'uuid'];
     var MANDATORY_PARAM_NAMES = ['uuid'];
@@ -1289,25 +1243,19 @@ function validateUpdateVolume(req, res, next) {
     validationErrs = validationErrs.concat(invalidParamsErrs);
 
     if (req.params.uuid) {
-        validationErr = uuidValidation.validateUuid(req.params.uuid, 'uuid');
-        if (validationErr !== undefined) {
-            validationErrs.push(validationErr);
-        }
+        errs = uuidValidation.validateUuid(req.params.uuid, 'uuid');
+        validationErrs = validationErrs.concat(errs);
     }
 
     if (req.params.owner_uuid) {
-        validationErr =
+        errs =
             uuidValidation.validateUuid(req.params.owner_uuid, 'owner_uuid');
-        if (validationErr !== undefined) {
-            validationErrs.push(validationErr);
-        }
+            validationErrs = validationErrs.concat(errs);
     }
 
     if (req.params.name) {
-        validationErr = volumesValidation.validateVolumeName(req.params.name);
-        if (validationErr !== undefined) {
-            validationErrs.push(validationErr);
-        }
+        errs = volumesValidation.validateVolumeName(req.params.name);
+        validationErrs = validationErrs.concat(errs);
     }
 
     if (validationErrs.length > 0) {
@@ -1531,7 +1479,7 @@ function validateAddVolumeReference(req, res, next) {
     assert.object(res, 'res');
     assert.func(next, 'next');
 
-    var validationErr;
+    var errs = [];
     var validationErrs = [];
     var VALID_PARAM_NAMES = ['uuid', 'owner_uuid', 'vm_uuid'];
     var MANDATORY_PARAM_NAMES = ['uuid', 'owner_uuid', 'vm_uuid'];
@@ -1546,26 +1494,18 @@ function validateAddVolumeReference(req, res, next) {
     validationErrs = validationErrs.concat(invalidParamsErrs);
 
     if (req.params.uuid !== undefined) {
-        validationErr = uuidValidation.validateUuid(req.params.uuid, 'uuid');
-        if (validationErr !== undefined) {
-            validationErrs.push(validationErr);
-        }
+        errs = uuidValidation.validateUuid(req.params.uuid, 'uuid');
+        validationErrs = validationErrs.concat(errs);
     }
 
     if (req.params.owner_uuid !== undefined) {
-        validationErr =
-            uuidValidation.validateUuid(req.params.owner_uuid, 'owner_uuid');
-        if (validationErr !== undefined) {
-            validationErrs.push(validationErr);
-        }
+        errs = uuidValidation.validateUuid(req.params.owner_uuid, 'owner_uuid');
+        validationErrs = validationErrs.concat(errs);
     }
 
     if (req.params.vm_uuid !== undefined) {
-        validationErr =
-            uuidValidation.validateUuid(req.params.vm_uuid, 'vm_uuid');
-        if (validationErr !== undefined) {
-            validationErrs.push(validationErr);
-        }
+        errs = uuidValidation.validateUuid(req.params.vm_uuid, 'vm_uuid');
+        validationErrs = validationErrs.concat(errs);
     }
 
     if (validationErrs.length > 0) {
@@ -1658,7 +1598,7 @@ function validateRemoveVolumeReference(req, res, next) {
     assert.object(res, 'res');
     assert.func(next, 'next');
 
-    var validationErr;
+    var errs = [];
     var validationErrs = [];
     var VALID_PARAM_NAMES = ['uuid', 'owner_uuid', 'vm_uuid'];
     var MANDATORY_PARAM_NAMES = ['uuid', 'owner_uuid', 'vm_uuid'];
@@ -1673,26 +1613,18 @@ function validateRemoveVolumeReference(req, res, next) {
     validationErrs = validationErrs.concat(invalidParamsErrs);
 
     if (req.params.uuid) {
-        validationErr = uuidValidation.validateUuid(req.params.uuid, 'uuid');
-        if (validationErr !== undefined) {
-            validationErrs.push(validationErr);
-        }
+        errs = uuidValidation.validateUuid(req.params.uuid, 'uuid');
+        validationErrs = validationErrs.concat(errs);
     }
 
     if (req.params.owner_uuid) {
-        validationErr =
-            uuidValidation.validateUuid(req.params.owner_uuid, 'owner_uuid');
-        if (validationErr !== undefined) {
-            validationErrs.push(validationErr);
-        }
+        errs = uuidValidation.validateUuid(req.params.owner_uuid, 'owner_uuid');
+        validationErrs = validationErrs.concat(errs);
     }
 
     if (req.params.vm_uuid) {
-        validationErr =
-            uuidValidation.validateUuid(req.params.vm_uuid, 'vm_uuid');
-        if (validationErr !== undefined) {
-            validationErrs.push(validationErr);
-        }
+        errs = uuidValidation.validateUuid(req.params.vm_uuid, 'vm_uuid');
+        validationErrs = validationErrs.concat(errs);
     }
 
     if (validationErrs.length > 0) {
diff --git a/lib/validation/predicate.js b/lib/validation/predicate.js
index afceab7..316726d 100644
--- a/lib/validation/predicate.js
+++ b/lib/validation/predicate.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -73,10 +73,7 @@ function validatePredicate(predicateString) {
             assert.func(validationFunc, 'validationFunc');
 
             predicateValues.forEach(function validatePredicateValue(value) {
-                var validationError = validationFunc(value);
-                if (validationError) {
-                    validationErrs.push(validationError);
-                }
+                validationErrs = validationErrs.concat(validationFunc(value));
             });
         }
     }
diff --git a/lib/validation/uuid.js b/lib/validation/uuid.js
index 6b83c0a..7ba0a12 100644
--- a/lib/validation/uuid.js
+++ b/lib/validation/uuid.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -15,14 +15,14 @@ var mod_uuid = require('../uuid');
 function validateUuid(uuid, paramName) {
     assert.string(paramName, 'paramName');
 
-    var err;
+    var errs = [];
     var validUuid = mod_uuid.validUuid(uuid);
 
     if (!validUuid) {
-        err = new Error(uuid + ' is not a valid ' + paramName + ' UUID');
+        errs.push(new Error(uuid + ' is not a valid ' + paramName + ' UUID'));
     }
 
-    return err;
+    return errs;
 }
 
 module.exports = {
diff --git a/lib/validation/volumes.js b/lib/validation/volumes.js
index 1e14d2b..2597cb1 100644
--- a/lib/validation/volumes.js
+++ b/lib/validation/volumes.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -19,70 +19,88 @@ var VALID_VOLUME_SIZE_REGEXP = /^[1-9][0-9]*$/;
 function validateBoolean(value, paramName) {
     assert.string(paramName, 'paramName');
 
-    var err;
+    var errs = [];
     var validBoolean = typeof (value) === 'boolean';
 
     if (!validBoolean) {
-        err = new Error(value + ' is not a valid boolean value for ' +
-            paramName + '.');
+        errs.push(new Error(value + ' is not a valid boolean value for ' +
+            paramName + '.'));
     }
 
-    return err;
+    return errs;
 }
 
 function validateBooleanAsString(value, paramName) {
     assert.string(paramName, 'paramName');
 
-    var err;
+    var errs = [];
     var validBooleanAsString = typeof (value) === 'string' &&
         (value === 'true' || value === 'false');
 
     if (!validBooleanAsString) {
-        err = new Error(value + ' is not a valid boolean string value for ' +
-            paramName + '.');
+        errs.push(new Error(value + ' is not a valid boolean string value ' +
+            'for ' + paramName + '.'));
     }
 
-    return err;
+    return errs;
 }
 
 function validateVolumeNetwork(volumeNetworkUuid) {
-    var err;
+    var errs = [];
     var validNetworkUuid = mod_uuid.validUuid(volumeNetworkUuid);
 
      if (!validNetworkUuid) {
-         err = new Error(volumeNetworkUuid + ' is not a valid volume ' +
-            'network UUID');
+         errs.push(new Error(volumeNetworkUuid + ' is not a valid volume ' +
+            'network UUID'));
      }
 
-     return err;
+     return errs;
 }
 
 function validateVolumeName(name, opts) {
-     var validName;
-     var err;
+    var errs = [];
+    /*
+     * The limit was chosen so that:
+     *
+     * 1. it's reasonably close to the limit that docker uses for named volumes
+     *    (it seems like it uses the maximum file path length, which according
+     *    to POSIX at
+     *    http://pubs.opengroup.org/onlinepubs/009695399/basedefs/limits.h.html
+     *    is 256)
+     *
+     * 2. it's long enough to allow volume names generated by tools such as
+     *    docker-compose (which include a "project name" as a way to namespace
+     *    resources) to work
+     *
+     * 3. It's short enough to constrain the amount of resources used when
+     *    processing and storing volume names
+     */
+    var MAX_NAME_LENGTH = 256;
 
      // Some actions allow non-existent names (empty or undefined), if
-     // opts.allowEmpty is truthy, we'll accept a missing name or empty string
-     // as valid.
-     if (opts && opts.allowEmpty && ((name === undefined) ||
-             (typeof (name) === 'string' && name === ''))) {
-         validName = true;
-     } else {
-        validName = typeof (name) === 'string' &&
-        name !== '' &&
-        name.match(VALID_VOLUME_NAME_REGEXP);
-     }
-
-     if (!validName) {
-         err = new Error(name + ' is not a valid volume name');
-     }
+     // opts.allowEmpty is truthy, we'll accept a missing name as valid.
+     if (!opts || !opts.allowEmpty || name !== undefined) {
+        if (typeof (name) !== 'string') {
+            errs.push(new Error('volume name must be a string'));
+        } else {
+            if (!VALID_VOLUME_NAME_REGEXP.test(name)) {
+                errs.push(new Error('volume name must match ' +
+                    VALID_VOLUME_NAME_REGEXP));
+            }
+
+            if (name.length > MAX_NAME_LENGTH) {
+                errs.push(new Error('volume name is too long, max length is ' +
+                    MAX_NAME_LENGTH));
+            }
+        }
+    }
 
-     return err;
+     return errs;
 }
 
 function validateVolumeNameSearchParam(name) {
     var coreName;
-    var err;
+    var errs = [];
     var nameBegin;
     var nameLen;
 
@@ -105,69 +123,69 @@ function validateVolumeNameSearchParam(name) {
     coreName = name.substr(nameBegin, nameLen);
 
     if (!VALID_VOLUME_NAME_CHARS_REGEXP.test(coreName)) {
-        err = new Error('invalid value for name search parameter');
+        errs.push(new Error('invalid value for name search parameter'));
     }
 
-    return err;
+    return errs;
 }
 
 
 function validateVolumeType(type) {
-    var err;
+    var errs = [];
 
     if (type !== 'tritonnfs') {
-        err = new Error('Volume type: ' + type + ' is not supported');
+        errs.push(new Error('Volume type: ' + type + ' is not supported'));
     }
 
-    return err;
+    return errs;
 }
 
 function validateVolumeSize(size) {
-    var err;
+    var errs = [];
     var validSize = typeof (size) === 'number' && size > 0;
 
     if (!validSize) {
-        err = new Error('Volume size: "' + size + '" is not a valid volume ' +
-            'size. Size must be a number > 0');
+        errs.push(new Error('Volume size: "' + size + '" is not a valid ' +
+            'volume size. Size must be a number > 0'));
     }
 
-    return err;
+    return errs;
 }
 
 function validateVolumeSizeSearchParam(size) {
-    var err;
+    var errs = [];
 
     if (!VALID_VOLUME_SIZE_REGEXP.test(size)) {
-        err = new Error('invalid value for size search parameter, must match '
-            + VALID_VOLUME_SIZE_REGEXP.toString());
+        errs.push(new Error('invalid value for size search parameter, must ' +
+            'match ' + VALID_VOLUME_SIZE_REGEXP.toString()));
     }
 
-    return err;
+    return errs;
 }
 
 function validateVolumeState(state) {
     console.log('state: ', state);
 
+    var errs = [];
     var VALID_STATES = ['creating', 'ready', 'failed', 'deleting'];
-    var err;
 
     if (VALID_STATES.indexOf(state) === -1) {
-        err = new Error('Volume state: ' + state + ' is invalid');
+        errs.push(new Error('Volume state: ' + state + ' is invalid'));
     }
 
-    return err;
+    return errs;
 }
 
 function validateDanglingPredicate(dangling) {
-    var err;
+    var errs = [];
     var validDanglingPredicate = typeof (dangling) === 'boolean';
 
     if (!validDanglingPredicate) {
-        err = new Error('Dangling predicate: "' + dangling + '" is not a ' +
-            'valid dangling predicate. must be either true or false');
+        errs.push(new Error('Dangling predicate: "' + dangling + '" is not a ' +
+            'valid dangling predicate. must be either true or false'));
     }
 
-    return err;
+    return errs;
 }
 
 module.exports = {
diff --git a/test/integration/nfs-shared-volumes-creation-invalid-names.test.js b/test/integration/nfs-shared-volumes-creation-invalid-names.test.js
new file mode 100644
index 0000000..249deb4
--- /dev/null
+++ b/test/integration/nfs-shared-volumes-creation-invalid-names.test.js
@@ -0,0 +1,101 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+var assert = require('assert-plus');
+var jsprim = require('jsprim');
+var test = require('tape');
+var vasync = require('vasync');
+
+var clientsSetup = require('./lib/clients-setup');
+var configLoader = require('../../lib/config-loader');
+
+var ADMIN_OWNED_FABRIC_NETWORK_UUID;
+var CLIENTS;
+var CONFIG = configLoader.loadConfigSync();
+var NFS_SHARED_VOLUMES_TYPE_NAME = 'tritonnfs';
+var UFDS_ADMIN_UUID = CONFIG.ufdsAdminUuid;
+
+assert.string(UFDS_ADMIN_UUID, 'UFDS_ADMIN_UUID');
+
+test('setup', function (tt) {
+    tt.test('setup clients', function (t) {
+        clientsSetup.getApiClients(function onClientsSetup(err, clients) {
+            CLIENTS = clients;
+            t.end();
+        });
+    });
+
+    tt.test('setup networks', function (t) {
+        CLIENTS.napi.get('/networks?owner_uuid=' + UFDS_ADMIN_UUID,
+            function onListNetworks(err, networks) {
+                var idx;
+
+                t.ifError(err, 'expected success listing networks');
+                t.ok(networks, 'got networks from NAPI');
+                t.ok(Array.isArray(networks),
+                    'networks object from NAPI is an array');
+                t.ok(networks.length > 1, 'expected more than 1 NAPI network');
+
+                for (idx = 0; idx < networks.length &&
+                    !ADMIN_OWNED_FABRIC_NETWORK_UUID; idx++) {
+                    if (networks[idx].fabric) {
+                        ADMIN_OWNED_FABRIC_NETWORK_UUID = networks[idx].uuid;
+                    }
+                }
+
+                t.ok(ADMIN_OWNED_FABRIC_NETWORK_UUID,
+                    'expected to find admin-owned fabric network, got: ' +
+                    ADMIN_OWNED_FABRIC_NETWORK_UUID);
+
+                t.end();
+            });
+    });
+});
+
+test('NFS shared volume creation with invalid names', function (tt) {
+    tt.test('creating nfs shared volumes with invalid name should fail',
+        function (t) {
+            var COMMON_PAYLOAD = {
+                owner_uuid: UFDS_ADMIN_UUID,
+                type: NFS_SHARED_VOLUMES_TYPE_NAME,
+                networks: [ADMIN_OWNED_FABRIC_NETWORK_UUID]
+            };
+            /*
+             * 'x'.repeat(257) generates a volume name that is one character too
+             * long, as the max length for volume names is 256 characters.
+             */
+            var INVALID_NAMES = ['', '-foo', '.foo', 'x'.repeat(257)];
+
+            vasync.forEachParallel({
+                func: function createVolume(volumeName, done) {
+                    var createVolumeParams = jsprim.deepCopy(COMMON_PAYLOAD);
+                    createVolumeParams.name = volumeName;
+
+                    CLIENTS.volapi.createVolumeAndWait(createVolumeParams,
+                        function onVolumeCreated(err, volume) {
+                            var expectedErrMsg = 'volume name';
+
+                            t.ok(err, 'volume creation with name ' +
+                                createVolumeParams.name + ' should error');
+                            if (err) {
+                                t.notEqual(err.message.indexOf(expectedErrMsg),
+                                    -1, 'error message should include ' +
+                                        expectedErrMsg + ', got: ' +
+                                        err.message);
+                            }
+                            done();
+                        });
+                },
+                inputs: INVALID_NAMES
+            }, function invalidNamesTested(err, results) {
+                t.end();
+            });
+        });
+});
diff --git a/test/integration/nfs-shared-volumes-creation-name-generation.test.js b/test/integration/nfs-shared-volumes-creation-name-generation.test.js
index 5b019f3..d510ea6 100644
--- a/test/integration/nfs-shared-volumes-creation-name-generation.test.js
+++ b/test/integration/nfs-shared-volumes-creation-name-generation.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -64,51 +64,29 @@ test('setup', function (tt) {
 test('NFS shared volume creation with missing "name"', function (tt) {
     tt.test('creating a nfs shared volume w/o name should generate one',
         function (t) {
-            var COMMON_PAYLOAD = {
+            var MISSING_NAME_PAYLOAD = {
                 owner_uuid: UFDS_ADMIN_UUID,
                 type: NFS_SHARED_VOLUMES_TYPE_NAME,
                 networks: [ADMIN_OWNED_FABRIC_NETWORK_UUID]
             };
-            var EMPTY_NAME_PAYLOAD = JSON.parse(JSON.stringify(COMMON_PAYLOAD));
-            var MISSING_NAME_PAYLOADS;
 
-            EMPTY_NAME_PAYLOAD.name = '';
+            CLIENTS.volapi.createVolumeAndWait(MISSING_NAME_PAYLOAD,
+                function onVolumeCreated(err, volume) {
+                    t.ifErr(err, 'volume creation with no name should succeed');
 
-            MISSING_NAME_PAYLOADS = [
-                COMMON_PAYLOAD,
-                EMPTY_NAME_PAYLOAD
-            ];
+                    t.equal(volume.name.length, 64,
+                        'expected 64 character name');
+                    t.ok(volume.name.match(/^[a-f0-9]*$/),
+                        'expected ^[a-f0-9]*$');
+                    t.equal(volume.name.substr(0, 32),
+                        volume.uuid.replace(/\-/g, ''),
+                        'expected uuid to match first 32 chars of volume '
+                            + 'name');
 
-            vasync.forEachParallel({
-                func: createVolumeWithMissingName,
-                inputs: MISSING_NAME_PAYLOADS
-            }, function missingNamesTested(err, results) {
-                t.end();
-            });
+                    CREATED_VOLUMES.push(volume.uuid);
 
-            function createVolumeWithMissingName(volumeParams, callback) {
-                assert.func(callback, 'callback');
-
-                CLIENTS.volapi.createVolumeAndWait(volumeParams,
-                    function onVolumeCreated(err, volume) {
-                        t.ifErr(err, 'volume creation (name='
-                            + JSON.stringify(volumeParams.name)
-                            + ') should succeed');
-
-                        t.equal(volume.name.length, 64,
-                            'expected 64 character name');
-                        t.ok(volume.name.match(/^[a-f0-9]*$/),
-                            'expected ^[a-f0-9]*$');
-                        t.equal(volume.name.substr(0, 32),
-                            volume.uuid.replace(/\-/g, ''),
-                            'expected uuid to match first 32 chars of volume '
-                                + 'name');
-
-                        CREATED_VOLUMES.push(volume.uuid);
-
-                        callback();
-                    });
-            }
+                    t.end();
+                });
         });
 });
 
-- 
2.21.0

