From fbcdba64bc4ba85afe246c050a352ca3a715af00 Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Wed, 5 Jun 2019 11:23:22 -0700
Subject: [PATCH] joyent/node-zkstream#40 Fallback poll for watchers to panic
 on missed notifications

---
 lib/zk-session.js | 73 +++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 73 insertions(+)

diff --git a/lib/zk-session.js b/lib/zk-session.js
index 774a7b0..a361c6d 100644
--- a/lib/zk-session.js
+++ b/lib/zk-session.js
@@ -24,6 +24,17 @@ const mod_verror = require('verror');
 
 var METRIC_ZK_NOTIFICATION_COUNTER = 'zookeeper_notifications';
 
+/*
+ * If a watcher is idle for this many milliseconds, do a "double check" to
+ * see if we've missed a wakeup (by comparing the zxid). If we have, we panic.
+ *
+ * To calculate "this many" we take DOUBLECHECK_RAND and add a random part,
+ * up to DOUBLECHECK_RAND. This spreads out the probes and avoids inducing
+ * too much load on ZK.
+ */
+var DOUBLECHECK_TIMEOUT = 900*1000;
+var DOUBLECHECK_RAND = 600*1000;
+
 function ZKSession(opts) {
 	mod_assert.object(opts, 'options');
 	mod_assert.number(opts.timeout, 'options.timeout');
@@ -889,6 +900,68 @@ ZKWatchEvent.prototype.state_armed = function (S) {
 	S.on(this, 'disconnectAsserted', function () {
 		S.gotoState('resuming');
 	});
+	var dblCheckTimeout = Math.round(DOUBLECHECK_TIMEOUT +
+	    Math.random() * DOUBLECHECK_RAND);
+	S.timeout(dblCheckTimeout, function () {
+		S.gotoState('armed.doublecheck');
+	}).unref();
+};
+
+/*
+ * This sub-state is entered to submit our "double check" probe to ZK to see
+ * whether we have missed any notifications/wakeups that we should have gotten.
+ * If we have, it's almost certainly a bug in this code, so we throw and
+ * crash the process so that someone can investigate the core dump.
+ *
+ * If we encounter any errors or problems sending the probe, just ignore them.
+ */
+ZKWatchEvent.prototype.state_armed.doublecheck = function (S) {
+	if (!this.zkwe_session.isInState('attached')) {
+		S.gotoState('armed');
+		return;
+	}
+	var conn = this.zkwe_session.getConnection();
+	if (!conn.isInState('connected')) {
+		S.gotoState('armed');
+		return;
+	}
+	var qpkt = {
+		path: this.zkwe_path,
+		opcode: 'EXISTS',
+		watch: false
+	};
+	var req = conn.request(qpkt);
+	var evt = this.zkwe_evt;
+	var self = this;
+	S.on(req, 'reply', function (pkt) {
+		var zxid;
+		switch (evt) {
+		case 'createdOrDeleted':
+			zxid = pkt.stat.czxid;
+			break;
+		case 'dataChanged':
+			zxid = pkt.stat.mzxid;
+			break;
+		case 'childrenChanged':
+			zxid = pkt.stat.pzxid;
+			break;
+		default:
+			throw (new Error('Unknown watcher event ' + evt));
+		}
+		self.zkwe_log.trace({ zxid: zxid.toString('hex'),
+		    prevZxid: self.zkwe_prevZxid ?
+		    self.zkwe_prevZxid.toString('hex') : null },
+		    'got reply to doublecheck request');
+		if (!self.zkwe_prevZxid || !zxid.equals(self.zkwe_prevZxid)) {
+			throw (new Error('ZKWatchEvent double-check failed: ' +
+			    'zkstream has missed a ZK event wakeup, this is ' +
+			    'a bug'));
+		}
+		S.gotoState('armed');
+	});
+	S.on(req, 'error', function (err) {
+		S.gotoState('armed');
+	});
 };
 
 /*
-- 
2.21.0

