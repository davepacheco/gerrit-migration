commit e7fd382934686e2fb72521a351c6e1314b669e10
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2019-06-05T23:50:24+00:00 (4 months ago)
    
    joyent/node-zkstream#40 Fallback poll for watchers to panic on missed notifications
    Reviewed by: Robert Mustacchi <rm@joyent.com>
    Approved by: Joshua M. Clulow <jmc@joyent.com>

diff --git a/lib/zk-session.js b/lib/zk-session.js
index 774a7b0..8cd8e97 100644
--- a/lib/zk-session.js
+++ b/lib/zk-session.js
@@ -24,6 +24,17 @@ const mod_verror = require('verror');
 
 var METRIC_ZK_NOTIFICATION_COUNTER = 'zookeeper_notifications';
 
+/*
+ * If a watcher is idle for this many milliseconds, do a "double check" to
+ * see if we've missed a wakeup (by comparing the zxid). If we have, we panic.
+ *
+ * To calculate "this many" we take DOUBLECHECK_RAND and add a random part,
+ * up to DOUBLECHECK_RAND. This spreads out the probes and avoids inducing
+ * too much load on ZK.
+ */
+var DOUBLECHECK_TIMEOUT = 900*1000;
+var DOUBLECHECK_RAND = 600*1000;
+
 function ZKSession(opts) {
 	mod_assert.object(opts, 'options');
 	mod_assert.number(opts.timeout, 'options.timeout');
@@ -608,53 +619,56 @@ ZKWatcher.prototype._armEvent = function (evt) {
  * itself each time something happens that disarms the watcher on the server
  * side (e.g. the watcher firing a notification or losing our connection).
  *
- *        +----------+
- *        |          |
- *        | disarmed |
- *        |          |
- *        +--+-------+
- *           |
- *           |
- *           | arm() (from ZKWatcher)
- *           v
- *        +--+-----------+
- *        |              |
- *  +---->+ wait_session +<---------<----+--<---------+
- *  |     |              |                \           |
- *  |     +--+-----------+                 |          |
- *  |        |                             ^ node     |
- *  |        | session attached            | created  |
- *  |        v                             |          ^
- *  |     +--+-------------+         +-----+-----+    |
- *  |     |                |         |           |    |
- *  ^     | wait_connected |         | wait_node |    |
- *  |     |                |         |           |    |
- *  |     +--+-------------+         +-----+-----+    |
- *  |        |                             ^          |
- *  |        | connected                   |          |
- *  |        v                             |          |
- *  |     +--+-----+                       ^          ^
- *  |     |        |                       |          |
- *  +--<--+ arming +--->----------->-------+          |
- * error  |        |      NO_NODE && !(existence)     |
- *        +-+------+                                  |
- *          |                                         |
- *          | response from ZK  +---->  emit!         ^
- *          v                                         |
- *        +-+-------+                                 |
- *        |         | notify() (from ZKWatcher)      /|
- *        |  armed  +--->--------->----------->-----/ |
- *        |         +<------------<----------<----\   |
- *        +----+----+                             |   |
- *             |                         resume() |   ^ notify()
- *             |                 (from ZKSession) ^   | (from ZKSession)
- *             v disconnected()                   |   |
- *             | (from ZKSession)               +-+---+----+
- *             |                                |          |
- *             +--------->------------->------->+ resuming |
- *                                              |          |
- *                                              +----------+
+ *              +----------+
+ *              |          |
+ *              | disarmed |
+ *              |          |
+ *              +--+-------+
+ *                 |
+ *                 |
+ *                 | arm() (from ZKWatcher)
+ *                 v
+ *              +--+-----------+
+ *              |              |
+ *        +---->+ wait_session +<---------<----+--<---------+
+ *        |     |              |                \           |
+ *        |     +--+-----------+                 |          |
+ *        |        |                             ^ node     |
+ *        |        | session attached            | created  |
+ *        |        v                             |          ^
+ *        |     +--+-------------+         +-----+-----+    |
+ *        |     |                |         |           |    |
+ *        ^     | wait_connected |         | wait_node |    |
+ *        |     |                |         |           |    |
+ *        |     +--+-------------+         +-----+-----+    |
+ *        |        |                             ^          |
+ *        |        | connected                   |          |
+ *        |        v                             |          |
+ *        |     +--+-----+                       ^          ^
+ *        |     |        |                       |          |
+ *        +--<--+ arming +--->----------->-------+          |
+ *       error  |        |      NO_NODE && !(existence)     |
+ *              +-+------+                                  |
+ *                |                                         |
+ *                | response from ZK  +---->  emit!         ^
+ *                v                                         |
+ *              +-+-------+                                 |
+ *              |         | notify() (from ZKWatcher)      /|
+ *    timeout   |  armed  +--->--------->----------->-----/ |
+ *        .-----+         +<------------<----------<----\   |
+ *        v     +-+--+----+                             |   |
+ *  +----+---+    ^  |                         resume() |   ^ notify()
+ *  | armed. |----'  |                 (from ZKSession) ^   | (from ZKSession)
+ *  | dblchk |       v disconnected()                   |   |
+ *  +--------+       | (from ZKSession)               +-+---+----+
+ *                   |                                |          |
+ *                   +--------->------------->------->+ resuming |
+ *                                                    |          |
+ *                                                    +----------+
  *
+ * Note that as usual with mooremachine FSMs, substates inherit the transitions
+ * of their parents, so "armed.doublecheck" still has the notify() and
+ * disconnected() transitions of "armed".
  */
 function ZKWatchEvent(session, path, emitter, evt, log) {
 	this.zkwe_path = path;
@@ -889,6 +903,68 @@ ZKWatchEvent.prototype.state_armed = function (S) {
 	S.on(this, 'disconnectAsserted', function () {
 		S.gotoState('resuming');
 	});
+	var dblCheckTimeout = Math.round(DOUBLECHECK_TIMEOUT +
+	    Math.random() * DOUBLECHECK_RAND);
+	S.timeout(dblCheckTimeout, function () {
+		S.gotoState('armed.doublecheck');
+	}).unref();
+};
+
+/*
+ * This sub-state is entered to submit our "double check" probe to ZK to see
+ * whether we have missed any notifications/wakeups that we should have gotten.
+ * If we have, it's almost certainly a bug in this code, so we throw and
+ * crash the process so that someone can investigate the core dump.
+ *
+ * If we encounter any errors or problems sending the probe, just ignore them.
+ */
+ZKWatchEvent.prototype.state_armed.doublecheck = function (S) {
+	if (!this.zkwe_session.isInState('attached')) {
+		S.gotoState('armed');
+		return;
+	}
+	var conn = this.zkwe_session.getConnection();
+	if (!conn.isInState('connected')) {
+		S.gotoState('armed');
+		return;
+	}
+	var qpkt = {
+		path: this.zkwe_path,
+		opcode: 'EXISTS',
+		watch: false
+	};
+	var req = conn.request(qpkt);
+	var evt = this.zkwe_evt;
+	var self = this;
+	S.on(req, 'reply', function (pkt) {
+		var zxid;
+		switch (evt) {
+		case 'createdOrDeleted':
+			zxid = pkt.stat.czxid;
+			break;
+		case 'dataChanged':
+			zxid = pkt.stat.mzxid;
+			break;
+		case 'childrenChanged':
+			zxid = pkt.stat.pzxid;
+			break;
+		default:
+			throw (new Error('Unknown watcher event ' + evt));
+		}
+		self.zkwe_log.trace({ zxid: zxid.toString('hex'),
+		    prevZxid: self.zkwe_prevZxid ?
+		    self.zkwe_prevZxid.toString('hex') : null },
+		    'got reply to doublecheck request');
+		if (!self.zkwe_prevZxid || !zxid.equals(self.zkwe_prevZxid)) {
+			throw (new Error('ZKWatchEvent double-check failed: ' +
+			    'zkstream has missed a ZK event wakeup, this is ' +
+			    'a bug'));
+		}
+		S.gotoState('armed');
+	});
+	S.on(req, 'error', function (err) {
+		S.gotoState('armed');
+	});
 };
 
 /*
