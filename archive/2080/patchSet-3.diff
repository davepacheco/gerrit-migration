From 776af6ad6368cc24cc3020b889e104f7848a99f2 Mon Sep 17 00:00:00 2001
From: Josh Wilsdon <jwilsdon@joyent.com>
Date: Wed, 14 Jun 2017 22:14:21 -0700
Subject: [PATCH] TOOLS-1795 remove old jenkins setup docs from MG Reviewed by:
 Trent Mick <trentm@gmail.com> Approved by: Trent Mick <trentm@gmail.com>

---
 README.md                                     |  14 +-
 docs/index.md                                 |  48 +-
 tools/jenkins/README                          |  81 ---
 tools/jenkins/sdc-jenkins/README.md           | 103 ---
 tools/jenkins/sdc-jenkins/bin/sdc-jenkins.js  |  18 -
 .../create-jenkins-slave/.gitignore           |   3 -
 .../sdc-jenkins/create-jenkins-slave/README   |  45 --
 .../create-jenkins-slave/copy-and-start.sh    |  24 -
 .../create-jenkins-slave/create-slave.sh      | 192 -----
 .../create-jenkins-slave/payload.json         |  27 -
 .../setup-jenkins-slave.sh                    | 238 ------
 tools/jenkins/sdc-jenkins/lib/app.js          | 680 ------------------
 tools/jenkins/sdc-jenkins/package.json        |  35 -
 .../sdc-jenkins/sdcjenkins-conf-example       |   9 -
 14 files changed, 17 insertions(+), 1500 deletions(-)
 delete mode 100644 tools/jenkins/README
 delete mode 100644 tools/jenkins/sdc-jenkins/README.md
 delete mode 100755 tools/jenkins/sdc-jenkins/bin/sdc-jenkins.js
 delete mode 100644 tools/jenkins/sdc-jenkins/create-jenkins-slave/.gitignore
 delete mode 100644 tools/jenkins/sdc-jenkins/create-jenkins-slave/README
 delete mode 100755 tools/jenkins/sdc-jenkins/create-jenkins-slave/copy-and-start.sh
 delete mode 100755 tools/jenkins/sdc-jenkins/create-jenkins-slave/create-slave.sh
 delete mode 100644 tools/jenkins/sdc-jenkins/create-jenkins-slave/payload.json
 delete mode 100755 tools/jenkins/sdc-jenkins/create-jenkins-slave/setup-jenkins-slave.sh
 delete mode 100644 tools/jenkins/sdc-jenkins/lib/app.js
 delete mode 100644 tools/jenkins/sdc-jenkins/package.json
 delete mode 100644 tools/jenkins/sdc-jenkins/sdcjenkins-conf-example

diff --git a/README.md b/README.md
index 3898e32..8d1eb87 100644
--- a/README.md
+++ b/README.md
@@ -70,17 +70,9 @@ used only when building Joyent products.
 
 # Prerequisites
 
-The "tools/mk-jenkins-slave/mk-jenkins-slave.sh" script is used to build
-new Jenkins (CI system) slaves and set them up for building Triton. Basically
-it creates a new zone (current using the smartos-1.6.3 image) passing in
-"tools/mk-jenkins-slave/jenkins-slave-setup.user-script". See
-"tools/mk-jenkins-slave/README.md" for how to create a new build zone
-for yourself, but basically it means running this from the GZ:
-
-    ./tools/mk-jenkins-slave/mk-jenkins-slave.sh BUILD-ZONE-ALIAS
-
-If you already have a zone that you want to setup, you *should* be able to just
-manually run that user script (though that hasn't been tested).
+You need several components to build our images in Triton. The easiest way to
+get these is to use the (private repo) [jenkins-agent](https://github.com/joyent/jenkins-agent)
+builds but you can also manually install all the things from those images.
 
 You should now be able to build mountain-gorilla (MG): i.e. all of Triton.
 Let's try that:
diff --git a/docs/index.md b/docs/index.md
index a5f6cbd..5e19f7e 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -10,7 +10,7 @@ apisections:
 -->
 
 <!--
-    Copyright (c) 2014, Joyent, Inc.
+    Copyright (c) 2017, Joyent, Inc.
 -->
 
 # Mountain Gorilla
@@ -87,12 +87,10 @@ but the platform you will need:
 
 - a SmartOS zone of the appropriate image. At the time of writing most
   services are using 'sdc-smartos@1.6.3', and a few are using 'sdc-multiarch'.
-- [python, gcc, gmake, et al from
-  pkgsrc](https://mo.joyent.com/mountain-gorilla/blob/master/tools/mk-jenkins-slave/jenkins-slave-setup.user-script#L107-119)
+- python, gcc, gmake, et al from pkgsrc
 
-The platform build requires more setup. The best authority are the Jenkins
-build slave creation scripts here:
-<https://mo.joyent.com/mountain-gorilla/tree/master/tools/jenkins/sdc-jenkins>.
+The easiest way to get the required components is to use the jenkins-agent-*
+builds from updates.joyent.com (experimental channel).
 
 
 # Branches
@@ -183,34 +181,21 @@ In the "Overview" above we showed the list of files generated by an amon build.
 This section will explain how we go from clicking the build button in Jenkins to
 having those files in Manta.
 
-When you click the "Build" button in Jenkins, it selects a build slave from the
-pool. At the time of this writing we have 2 different categories of build
-slaves:
+Details on the Jenkins setup itself are available only within Joyent at:
 
-1) Platform build slaves
+https://mo.joyent.com/docs/engdoc/master/jenkins/index.html
 
-These live in us-east-1 in JPC under the Joyent_Dev account. They currently are
-running with the image multiarch-13.3.0 and each slave is setup to run only one
-job at a time. They're only used for platform and platform-debug jobs currently.
+but the rest of this section will explain what is done once a Jenkins agent is
+chosen.
 
-2) Zone / Other build slaves
-
-These all currently live in us-beta-4 on the 00000000-0000-0000-0000-00259094356c
-server. This server is specifically selected because we want to build on an
-ancient platform. This is very important. We must build all our binary bits for
-the builds on a platform that matches (or is older than) the oldest platform the
-bits can be deployed on. At the time of this writing that platform matches the
-one on the eu-ams-1 headnode.  All builds other than platform and platform-debug
-will get sent to one of these slaves.
-
-The determination of which slave we should send a job to happens based on
-"labels". Which you can see in the job configuration and the build slave
+The determination of which agent we should send a job to happens based on
+"labels". Which you can see in the job configuration and the build agent
 configuration. The job will only build where the labels between the two
 match.
 
-Having selected a slave, Jenkins will send the job to the slave over the SSH
-connection it holds open to its agent running in the slave zone. What gets run
-is what's listed in the 'Execute Shell / Command' section of the job's
+Having selected a agent, Jenkins will send the job to the agent over the
+connection it holds open to the jenkins process running in the agent zone. What
+gets run is what's listed in the 'Execute Shell / Command' section of the job's
 configuration.
 
 Simplified, what most of our jobs do here is:
@@ -414,12 +399,7 @@ section documents how to perform a release.
       Jenkins page to start the appropriate build.
 
     That this babysitting is required is lame. We should attempt to fix
-    this (TODO). I'm [Trent] open to suggestions. A start would be improvements
-    to the `sdc-jenkins` tool to ensure that current Jenkins job definitions
-    have the proper dependencies. For example, the 'amon' build currently
-    triggers builds a many jobs that use amon-agent, but not all of them.
-    Of latest EASTONE-111 is a killer: it stalls a build for 20 minutes, then
-    often fails.
+    this (TODO).
 
 3. "Release" this sprint version in our Jira projects:
 
diff --git a/tools/jenkins/README b/tools/jenkins/README
deleted file mode 100644
index 3c9dcf9..0000000
--- a/tools/jenkins/README
+++ /dev/null
@@ -1,81 +0,0 @@
-# Joyent Jenkins Infrastructure
-
-Jenkins is a continuous integration (CI) server. We are using it for SDC builds
-in the engineering group, pkgsrc builds (jperkin), driving the nightly staging
-environment (nightly* jobs), etc. It is running here:
-
-url     https://jenkins.joyent.us
-auth    Your Joyent internal LDAP creds
-
-Currently this is being managed by Trent, JoshW with Orlando as their loyal
-sidekick.
-
-
-## Jenkins Slaves
-
-Slaves are named after fictional butlers. See
-https://jenkins.joyent.us/computer/ for the current slaves.
-
-## Jabber bot
-
-There is a "jerkins" (sic) jabber bot (curtesy the XMPP plugin for Jenkins)
-listening in mib@, os@ and jenkins@). It is using the "jenkins@joyent.com" JID
-(I think that is still true). Ask Trent for the password if you need it. Use
-"jerkins: help" (or "! help" shortcut) to learn how to use it.
-
-#  Jenkins Master Setup Details
-
-Jenkins is running on the "jenkins" zone in us-beta-4 as the "root" user. It
-was created as per the setup instructions in MG's README.
-
-Jenkins is running as a "jenkins" SMF service using "/config/jenkins.smf". All
-jenkins data is in "/data/jenkins". Currently we only have one builder machine,
-the "jenkins" master zone itself. We can add more later as we get more
-comfortable with Jenkins and need more speed.
-
-## Adding a Jenkins build slave
-
-There is a script for this at mountain-gorilla.git/tools/jenkins/sdc-jenkins/
-
-
-### jperkin's notes on pkgsrc github webhooks for building on commit
-
-(Note: For the non-pkgsrc Joyent repos on github for which we want builds: we
-could consider switching to the notifyCommit URL which doesn't require a
-password. This requires "Poll SCM" be enabled for that Jenkins Job. However,
-this likely won't work for private repos on github.)
-
-
-  - GitHub is configured with a webhook to POST the full push data to
-    http://jenkins.joyent.us:8080/ , as configured in https://github.com/joyent/pkgsrc/settings/hooks/1958947
-
-
-  - There is a small proxy /root/jenkins/github-proxy.js on jenkins.joyent.us
-    started from svc:/site/github-proxy:default which listens on that port for
-    requests.
-
-  - For now it just dumps requests to the SMF log, a better long-term solution
-    would be to ditch 'gith' and write a proper module which returns correct
-    responses back to GitHub - they are saved alongside each webhook request, and
-    that would make debugging a lot nicer.
-
-  - If a request comes in which matches the 'joyent/pkgsrc' repository, it does
-    a GET to
-
-    https://jenkins.joyent.us/git/notifyCommit?url=git@github.com:joyent/pkgsrc.git&branches=<branch>
-
-    where the branch is taken from GitHub's POST body (e.g.
-    'joyent/release/trunk')
-
-  - Each Jenkins pkgsrc job is configured for:
-
-    * Git repository = git@github.com:joyent/pkgsrc.git Branches to build =
-    * <branch> Poll SCM
-
-    and these are matched to the GET request, so that a build is only triggered
-    for an exact repo+branch combination.  scripting adding Jenkins Jobs
-
-
-See:
-
-    https://mo.joyent.com/pbulk/commit/617e1ac5f6c244b03131c75a6058db4feaf330c0#L2934
diff --git a/tools/jenkins/sdc-jenkins/README.md b/tools/jenkins/sdc-jenkins/README.md
deleted file mode 100644
index a08a292..0000000
--- a/tools/jenkins/sdc-jenkins/README.md
+++ /dev/null
@@ -1,103 +0,0 @@
-<!--
-    This Source Code Form is subject to the terms of the Mozilla Public
-    License, v. 2.0. If a copy of the MPL was not distributed with this
-    file, You can obtain one at http://mozilla.org/MPL/2.0/.
--->
-
-<!--
-    Copyright (c) 2015, Joyent, Inc.
--->
-
-# NAME
-
-sdc-jenkins - SmartDataCentre Jenkins multi-toool
-
-# SYNOPSIS
-
-        sdc-jenkins [OPTIONS] COMMAND [ARGS...]
-        sdc-jenkins help COMMAND
-
-    Options:
-        -c FILE, --config=FILE  Configuration JSON file. Must contain keys: user,
-                                pass, host.
-
-    Commands:
-        help (?)        Help on a specific sub-command.
-        nodes           Return all Jenkins nodes (workers)
-
-# DESCRIPTION
-
-`sdc-jenkins` is meant to be a convenient tool to maintain the SmartDataCentre
-Jenkins build vms.
-
-The utility is a patchwork abomination of different API calls (REST/ssh),
-HTML scraping, and ssh'ing. You've been warned.
-
-
-# INSTALLATION
-
-    git clone git@github.com:joyent/mountain-gorilla.git
-    npm install -g mountain-gorilla/tools/jenkins/sdc-jenkins
-
-# REQUIREMENTS
-
-- Access to the 'automation' Jenkins user
-- SSH access to emy-jenkins
-
-
-# COMMANDS
-
-### nodes
-
-Return a list of all nodes the Jenkins instance knows about. Returns the
-following information on these nodes: name, ip, dc, server uuid, image uuid,
-platform image, jenkins labels.
-
-*Important Note* In order to retrieve some data you will need to have ssh
-access to the given jenkins node by it's name.
-
-For instance, if there is a Jenkins node named 'igor', in order to retrieve
-certain details about igor, `sdc-jenkins` will perform `ssh igor ...`.
-
-### create-node
-
-Create a new Jenkins SDC node in Emeryville.
-
-- create directory in emy-jenkins (/var/tmp/jenkins-node-setup-XXX)
-- scp create-jenkins-slave files to directory
-- run `create-jenkins-slave` with parameters (See create-jenkins-slave/README)
-- ensure machine shows up in jenkins
-
-
-
-
-# OPTIONS
-
-     -c   Specify a configuration file other than the default.
-
-
-# FILES
-
-#### ~/.sdcjenkins
-
-Jenkins url and credentials. Must contain "user", "pass", and "host" keys.
-
-    {
-        "user": "automation",
-        "pass": "PASSWORD",
-        "host": "jenkins.joyent.us"
-    }
-
-# SSH Config Entries
-
-    Host emy-jenkins
-        User root
-        StrictHostKeyChecking no
-        UserKnownHostsFile /dev/null
-        Hostname 172.26.0.4
-
-
-
-# AUTHOR
-
-Joyent
diff --git a/tools/jenkins/sdc-jenkins/bin/sdc-jenkins.js b/tools/jenkins/sdc-jenkins/bin/sdc-jenkins.js
deleted file mode 100755
index 75031f7..0000000
--- a/tools/jenkins/sdc-jenkins/bin/sdc-jenkins.js
+++ /dev/null
@@ -1,18 +0,0 @@
-#!/usr/bin/env node
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2014, Joyent, Inc.
- */
-
-var App = require('../lib/app');
-var cmdln = require('cmdln');
-
-// Avoid DEPTH_ZERO_SELF_SIGNED_CERT error from self-signed certs
-process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
-
-cmdln.main(App);
diff --git a/tools/jenkins/sdc-jenkins/create-jenkins-slave/.gitignore b/tools/jenkins/sdc-jenkins/create-jenkins-slave/.gitignore
deleted file mode 100644
index 8ab1abd..0000000
--- a/tools/jenkins/sdc-jenkins/create-jenkins-slave/.gitignore
+++ /dev/null
@@ -1,3 +0,0 @@
-automation.id_rsa
-jenkins.creds
-slave-create.log
diff --git a/tools/jenkins/sdc-jenkins/create-jenkins-slave/README b/tools/jenkins/sdc-jenkins/create-jenkins-slave/README
deleted file mode 100644
index b9df758..0000000
--- a/tools/jenkins/sdc-jenkins/create-jenkins-slave/README
+++ /dev/null
@@ -1,45 +0,0 @@
-This is intended to be copied to the headnode and run from there. Currently
-pretty rough. It also expects:
-
- - you have your SSH agent forwarded and the account you're creating this under
-   has your key (it tries to SSH to the new instance)
- - you have added your SSH key to Jenkins
-   https://jenkins.joyent.us/user/<username>/configure (and you know your login)
- - your SSH public key should also be added to the 'admin' user in the DC so
-   that you will be able to SSH into the newly created zone.
- - your Jenkins user should have the 'Slave/Create permission' in Jenkins.
-   Permissions can be viewed at https://jenkins.joyent.us/configureSecurity/
-
-To setup a new slave run the following from the headnode in your target DC:
-
-    JENKINS_USER=<username> ./create-slave <name> <server> <dataset>
-
-which will create the VM with VMAPI, install the packages and files and register
-the slave with jenkins. We've been choosing butler names, e.g. from
-<http://en.wikipedia.org/wiki/List_of_famous_fictional_butlers>.
-
-The <server> here is a UUID of a server in this datacenter and the <dataset>
-here is an image_uuid of the image to use when creating this slave. Most likely
-you'll want one of:
-
- - fd2cc906-8938-11e3-beab-4359c665ac99 sdc-smartos   1.6.3
- - b4bdc598-8939-11e3-bea4-8341f6861379 sdc-multiarch 13.3.1
-
-And where <username> is the login name you use when logging into Jenkins. The
-one onto which you added your SSH keys.
-
-Once you've created your new slave you may need to go to Jenkins and add some
-more labels such as the 'oldest_jpc_platform' label if your slave is running on
-a CN with an ancient platform.
-
-If you already have a zone setup, you can run:
-
-    setup-jenkins-slave.sh
-
-in it, but this will not automatically add it to Jenkins.
-
-NOTE: you'll need 2 files that are not in the repo:
-
-automation.id_rsa - the ssh *private* key for the automation user
-jenkins.creds     - a file with 'user:pass' for the user you want to use talking
-                    to jenkins
diff --git a/tools/jenkins/sdc-jenkins/create-jenkins-slave/copy-and-start.sh b/tools/jenkins/sdc-jenkins/create-jenkins-slave/copy-and-start.sh
deleted file mode 100755
index d9e4d4c..0000000
--- a/tools/jenkins/sdc-jenkins/create-jenkins-slave/copy-and-start.sh
+++ /dev/null
@@ -1,24 +0,0 @@
-#!/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-set -o xtrace
-
-DIR=$(cd `dirname $0` && pwd)
-DESTDIR=/var/tmp/jenkins-setup
-
-ssh root@emy-jenkins mkdir -p ${DESTDIR}
-
-# copy all files in create-jenkins-slave to remote
-scp -r $DIR/* root@emy-jenkins:${DESTDIR}
-
-ssh -A root@emy-jenkins \
-    "cd ${DESTDIR} && JENKINS_USER=$JENKINS_USER ./create-slave.sh $*"
-
diff --git a/tools/jenkins/sdc-jenkins/create-jenkins-slave/create-slave.sh b/tools/jenkins/sdc-jenkins/create-jenkins-slave/create-slave.sh
deleted file mode 100755
index 166f65a..0000000
--- a/tools/jenkins/sdc-jenkins/create-jenkins-slave/create-slave.sh
+++ /dev/null
@@ -1,192 +0,0 @@
-#!/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2015, Joyent, Inc.
-#
-
-#
-# Summary:
-#
-# This tool is used to create additional Jenkins slaves.
-#
-# Usage:
-#
-# create-slave.sh <name> <server> <dataset>
-#
-# IMPORTANT:
-#
-# This script expects to be run from an SDC headnode. Running from elsewhere
-# is very unlikely to do what you expect.
-#
-
-set -o errexit
-set -o pipefail
-
-export PATH=/usr/bin:/usr/sbin:/smartdc/bin:/opt/smartdc/bin:/opt/local/bin:/opt/local/sbin:/opt/smartdc/agents/bin
-
-exec 4>>slave-create.log
-echo "" >&4
-echo "== Starting Create ==" >&4
-export BASH_XTRACEFD=4
-set -o xtrace
-
-SSH="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
-DATACENTER=$(sysinfo | json "Datacenter Name")
-
-if [[ -z ${JENKINS_USER} ]]; then
-    echo "You must set \${JENKINS_USER} in the environment" >&2
-    exit 3
-fi
-
-PACKAGE_UUID=$(sdc-papi /packages?name=sdc_8192 | json -Ha uuid)
-if [[ -z ${PACKAGE_UUID} ]]; then
-    echo "Cannot determine \${PACKAGE_UUID}" >&2
-    exit 3
-fi
-
-NETWORK_UUID=$(sdc-napi /networks?nic_tag=external | json -Ha uuid | head -1)
-if [[ -z ${NETWORK_UUID} ]]; then
-    echo "Cannot determine \${NETWORK_UUID}" >&2
-    exit 3
-fi
-
-ADMIN_UUID=$(grep "^ufds_admin_uuid=" /usbkey/config | cut -d'=' -f2)
-if [[ -z ${ADMIN_UUID} ]]; then
-    echo "Cannot determine \${ADMIN_UUID}" >&2
-    exit 3
-fi
-
-name=$1
-server=$2
-dataset=$3
-
-if [[ -z ${name} || -z ${server} || -z ${dataset} || -n $4 ]]; then
-    echo "Usage: $0 <name> <server> <dataset>" >&2
-    exit 2
-fi
-
-IMAGE_UUID=${dataset}
-SERVER_UUID=${server}
-
-#IMAGE_UUID=$(imgadm avail -H -o uuid,name,version \
-    #| awk '{ print $1,$2 "-" $3 }' | grep "${DATASET}$" | cut -d' ' -f1)
-#if [[ -z ${IMAGE_UUID} ]]; then
-    #echo "Unable to find dataset '${DATASET}'" >&2
-    #exit 1
-#fi
-
-result=$(sdc-imgadm import -S https://updates.joyent.com ${IMAGE_UUID} 2>&1 || /bin/true)
-if [[ ${result} =~ "already exists" ]]; then
-    echo "Image ${IMAGE_UUID} already exists."
-elif [[ $? -ne 0 ]]; then
-    echo "Failed to import ${IMAGE_UUID}: ${result}" >&2
-    exit 4
-fi
-
-DATASET=$(imgadm avail -H -o uuid,name,version \
-    | awk '{ print $1,$2 "-" $3 }' | grep "^${IMAGE_UUID}" | cut -d ' ' -f2-)
-
-IMAGE_VERSION=$(imgadm show ${IMAGE_UUID} | json version)
-if [[ -z ${IMAGE_UUID} ]]; then
-    echo "Unable to determine image version" >&2
-    exit 1
-fi
-
-TEMP_FILE=/tmp/payload.$$
-
-if [[ ! -f automation.id_rsa && -f ~/.ssh/automation.id_rsa ]]; then
-    cp ~/.ssh/automation.id_rsa .
-fi
-
-for file in payload.json setup-jenkins-slave.sh automation.id_rsa jenkins.creds; do
-    if [[ ! -f ${file} ]]; then
-        echo "Missing ${file} in $(pwd)" >&2
-        exit 1
-    fi
-done
-
-/usr/vm/sbin/add-userscript setup-jenkins-slave.sh \
-    < <(sed -e "s/ALIAS/${name}/" \
-        -e "s/ADMIN_UUID/${ADMIN_UUID}/" \
-        -e "s/IMAGE_UUID/${IMAGE_UUID}/" \
-        -e "s/SERVER_UUID/${SERVER_UUID}/" \
-        -e "s/PACKAGE_UUID/${PACKAGE_UUID}/" \
-        -e "s/NETWORK_UUID/${NETWORK_UUID}/" \
-        -e "s/IMAGE_VERSION/${IMAGE_VERSION}/" \
-        -e "s/JENKINS_CREDS/$(cat jenkins.creds)/" \
-        payload.json \
-        | (/usr/vm/sbin/add-userscript automation.id_rsa | sed -e 's/"user-script"/"automation.id_rsa"/')) \
-        > ${TEMP_FILE}
-
-sdc-vmapi /vms -X POST -d @${TEMP_FILE} > /tmp/output.$$
-vm_uuid=$(json -H vm_uuid < /tmp/output.$$)
-
-# XXX loop until "running"
-state=$(sdc-vmapi /vms/${vm_uuid} | json -H state)
-while [[ ${state} == "provisioning" ]]; do
-    sleep 5
-    state=$(sdc-vmapi /vms/${vm_uuid} | json -H state)
-done
-
-if [[ ${state} != "running" ]]; then
-    echo "FAILED: expected 'running' got '${state}' for VM ${vm_uuid}" >&2
-    exit 1
-fi
-
-sdc-vmapi /vms/${vm_uuid} > /tmp/object.$$
-server_uuid=$(json -H server_uuid < /tmp/object.$$)
-ip=$(json -H nics.0.ip < /tmp/object.$$)
-
-# XXX loop until "hostname" is set which indicates we rebooted
-while [[ "$(${SSH} root@${ip} hostname 2>/dev/null)" != "${name}" ]]; do
-    sleep 5
-done
-
-# Add the SSH keys to known_hosts replacing any existing entries since we just
-# set this up, but it might reuse an IP.
-cat > /var/tmp/fix_known_hosts.sh <<EOF
-set -o xtrace
-set -o errexit
-(cat ~/.ssh/known_hosts | grep -v '${ip} '; ssh-keyscan -t rsa,dsa ${ip}) > ~/.ssh/known_hosts.new
-mv ~/.ssh/known_hosts.new ~/.ssh/known_hosts
-EOF
-
-ssh-keyscan -t rsa,dsa jenkins.joyent.us >> ${HOME}/.ssh/known_hosts
-ssh-keyscan -p 31337 -t rsa,dsa jenkins.joyent.us \
-    >> ${HOME}/.ssh/known_hosts.jenkins-31337
-
-scp /var/tmp/fix_known_hosts.sh root@jenkins.joyent.us:/var/tmp/fix_known_hosts.sh
-ssh root@jenkins.joyent.us bash /var/tmp/fix_known_hosts.sh
-
-ssh -o UserKnownHostsFile=$HOME/.ssh/known_hosts.jenkins-31337 \
-        -p 31337 ${JENKINS_USER}@jenkins.joyent.us create-node ${name} <<EOF
-<?xml version="1.0" encoding="UTF-8"?>
-<slave>
-  <name>${name}</name>
-  <description>VM ${vm_uuid} on server ${server_uuid} in ${DATACENTER}</description>
-  <remoteFS>/root/data/jenkins</remoteFS>
-  <numExecutors>1</numExecutors>
-  <mode>NORMAL</mode>
-  <retentionStrategy class="hudson.slaves.RetentionStrategy\$Always"/>
-  <launcher class="hudson.slaves.JNLPLauncher"/>
-  <label>${DATASET} sdc ${DATACENTER} ${name}</label>
-  <nodeProperties/>
-  <userId>guest</userId>
-</slave>
-EOF
-
-set +o xtrace
-
-# output data for ~/.ssh/config
-echo "# ${DATASET} / ${DATACENTER}"
-echo "Host ${name}"
-echo "    User root"
-echo "    Hostname ${ip}"
-echo ""
-
-exit 0
diff --git a/tools/jenkins/sdc-jenkins/create-jenkins-slave/payload.json b/tools/jenkins/sdc-jenkins/create-jenkins-slave/payload.json
deleted file mode 100644
index 9481b7f..0000000
--- a/tools/jenkins/sdc-jenkins/create-jenkins-slave/payload.json
+++ /dev/null
@@ -1,27 +0,0 @@
-{
-  "image_uuid": "IMAGE_UUID",
-  "ram": 8192,
-  "owner_uuid": "ADMIN_UUID",
-  "brand": "joyent",
-  "alias": "jenkins-ALIAS-IMAGE_VERSION",
-  "server_uuid": "SERVER_UUID",
-  "billing_id": "PACKAGE_UUID",
-  "customer_metadata": {
-    "jenkins_creds": "JENKINS_CREDS",
-    "slave_name": "ALIAS"
-  },
-  "mdata_exec_timeout": 3600,
-  "cpu_cap": 4800,
-  "max_lwps": 4000,
-  "max_swap": 16384,
-  "quota": 300,
-  "fs_allowed": "ufs,pcfs,tmpfs",
-  "zfs_io_priority": 1000,
-  "zfs_root_compression": "lz4",
-  "networks": [
-    {
-      "uuid": "NETWORK_UUID",
-      "primary": true
-    }
-  ]
-}
diff --git a/tools/jenkins/sdc-jenkins/create-jenkins-slave/setup-jenkins-slave.sh b/tools/jenkins/sdc-jenkins/create-jenkins-slave/setup-jenkins-slave.sh
deleted file mode 100755
index a25e03f..0000000
--- a/tools/jenkins/sdc-jenkins/create-jenkins-slave/setup-jenkins-slave.sh
+++ /dev/null
@@ -1,238 +0,0 @@
-#!/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-set -o errexit
-set -o xtrace
-
-export HOME=/root
-export PATH=/root/opt/node/bin:/opt/local/bin:/opt/local/sbin:/usr/bin:/usr/sbin
-
-if [[ -f /root/.ssh/automation.id_rsa.pub ]]; then
-    # already setup
-    exit 0
-fi
-
-hostname=$1
-
-if [[ -z ${hostname} ]]; then
-    hostname=$(mdata-get slave_name)
-fi
-
-JENKINS_CREDS=$(mdata-get jenkins_creds)
-
-if [[ -z ${hostname} ]]; then
-    echo "Usage: $0 <hostname>" >&2
-    exit 1
-fi
-
-echo "${hostname}" > /etc/nodename
-sed -e "s/$(zonename)/${hostname}/" /etc/hosts > /etc/hosts.new \
-    && mv /etc/hosts.new /etc/hosts
-
-mkdir -p /root/.ssh
-chmod 700 /root/.ssh
-
-cat > /root/.ssh/automation.id_rsa.pub <<EOF
-ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA2s5twaK3yK3iEW1Ka1rCoE7pENen2ijsZpSCDTxeKL9gzXE/W5Hm7VEp2AY+POWE3sTVmLf+b+mc3+ABCq3UnZgMGgsfZuTmmzQYuWI3yH1m1m3PzOjxF4n+2jWwwZ9JAyuzxQFfch8WPzhoylHEbuIsLc8QKUkr+26VYEA4o3ztK3vwNQ6WqSIfl9zGEak2u6laSQH8AFwodZfamEXfgj4YfM23gDz382aJOVa5q6EnDK01/8yveOM9AxK52y4+40mpQJiBwUTRMtP1irB6sT/zXJCVBkwKAiZnYlb9jHEwU1sN2QOe9rh0LwxO3j0wQuy7FmAtFOqZQlDN5Bki7Q== automation@lab-www-00
-EOF
-chmod 644 /root/.ssh/automation.id_rsa.pub
-ln -s /root/.ssh/automation.id_rsa.pub /root/.ssh/id_rsa.pub
-
-mdata-get automation.id_rsa > /root/.ssh/automation.id_rsa
-chmod 600 /root/.ssh/automation.id_rsa
-ln -s /root/.ssh/automation.id_rsa /root/.ssh/id_rsa
-
-cat >> /root/.ssh/known_hosts <<EOF
-git.joyent.com,165.225.133.140 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA5lZJiIxLoJPgAagmVdH5cYZxP+p3p2Q4EK+SYUrTNQV50z2UXCRMnkT2gBSlBIENefQd0+H3z2jzzsteNBudb+g/78adWx7nK7HCuBqXZ9fv6TR/LZ8Pg0u3u6+1OolMpspifxbO2RdgOY16+7A5b2SDH43xSSSjb+aoEvIbriLxFPifUcKlpw16XXktTWAppcMwiKRjyAyr1eDqVuyfDFOIK352jydLGTobkSnjkAkomwZjHoizFII2mGu7CpMZsDNyRaZP3Wr0MMNgZpLqkXH+HjxLe/DWb6cJE8uS86EyKKBJ0q7kpgQz864UnJ9N+eznzA1IdeNUmmnGvwTgUQ==
-github.com,192.30.252.131 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
-EOF
-chmod 600 /root/.ssh/known_hosts
-
-# Allow Jenkins in
-cat >> /root/.ssh/authorized_keys <<EOF
-ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA2rHvfbH+VSzSWEj6IdA91OYVCmOOnS2/2mekUYnpYUCM1tGVVY8JFet0fxIg0UDZPsreInbvM3rycej8hcVrPLDXHjgbAsjVhEdHjdDY5qJYM+5OsqWSmbK06NdqOhwhZ5QSaq6r1disNIBpZBrqeCIodmcSsYs36Gd64a0Fp8iPUUZ3Zjm7JSSGm9mYPpJMWpnddfbKbjLj4t79b2ecbWhGX2UB5BmKwwf9kjzJJS4+vCxoEJU5suEkfw6KF3KHXXN+j1hBwfJDFyrYyXiJhWOiqFs0x87BnERXGyJZE1UxrV32SYlu/rsg2cVF4lCLv/4IEAA1Z4wIWCuk8F9Tzw== molybdenum
-ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAn6QHOqxWJr9Ice+fsqGPiURLgEOSWPt7slo1JkfncBLTlEswk/QpI36zepystMfrYq5kHNdgml3IivPgGLzLX3faNGup5z9dhFxv0Q9sX7WpDhtQNBhd9JZHX9x5PEDHq+bHpHmtJ6zDNfTkeH7Z+3pd9szVKxsSrRB96I2tB5hF4QQo4uv5H1Ljbk7+2mBlzEHxBnW3SYHgppLiADIaMolosYSPG/iIqORx9PRhAPXvu1pvvp5CTiWwvepq/S9/2dX/9acYvOo/0Ub0PY7uG+Do8dA1Nea7i4qH9L+iFNdpE95SQMPlNBSXU20YpMvKdrIUpnk4ojHw2l24uq9Lfw== trent.mick@joyent.com
-ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAqkeeWZHqiTNGGJJhyHJkD6LdmDsn30cPaJUzyt5Xu8U9j8Q/2WlkfC7ZVOwVBlDY4zNYsJZvrUB/xyN0QYrDXFVJ4fk+GNpCjCyTaZMq6HPtesB+vfWxe9DNcu+4QzEVy1Jrrw0S/fMk8IA3RXkwirQlGe5pmifxd8w+dyWZiiwE+5hiJcYo/XSPvzZxkayJDwST/WEBt9qGvTqWomFdVCn3W/BmWZILPPN6oE49v/yEp+h3DCcPLG/rYepeukto6wBfbGnHrQ2Uca6XLANtVv7L7KtT5gV6YdNWj5/N/bsCCO4dhPdygpZZOgZbR2v03w6iioAfCoR6dN60ssO6tw== joshw@Josh-Wilsdons-MacBook-Pro.local
-ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAs5xKh88/HuL+lr+i3DRUzcpkx5Ebbfq7NZVbjVZiICkhn6oCV60OGFmT5qsC2KTVyilakjU5tFlLSSNLQPbYs+hA2Q5tsrXx9JEUg/pfDQdfFjD2Rqhi3hMg7JUWxr9W3HaUtmnMCyrnJhgjA3RKfiZzY/Fkt8zEmRd8SZio0ypAI1IBTxpeaBQ217YqthKzhYlMh7pj9PIwRh7V0G1yDOCOoOR6SYCdOYYwiAosfFSMA2eMST4pjhnJTvrHMBOSn77lJ1hYPesjfjx/VpWIMYCzcP6mBLWaNGuJAIJMAk2EdNwO6tNoicQOH07ZJ4SbJcw6pv54EICxsaFnv0NZMQ== orlando@azathoth.local
-EOF
-chmod 600 /root/.ssh/authorized_keys
-
-# Stupid Java will ask us for license otherwise.
-mkdir -p /opt/local
-touch /opt/local/.dlj_license_accepted
-
-IS_163=0
-IMAGE_UUID=$(mdata-get sdc:image_uuid)
-
-if [[ ${IMAGE_UUID} == "01b2c898-945f-11e1-a523-af1afbe22822" || ${IMAGE_UUID} == "fd2cc906-8938-11e3-beab-4359c665ac99" ]]; then
-    # smartos-1.6.3 force binutils to install first, this preempts gcc-tools from breaking us
-    pkgin -y install binutils
-    IS_163=1
-fi
-
-# scmgit, gcc-*, gmake: needed by most parts of sdc build
-# png, GeoIP, GeoLiteCity, ghostscript: cloud-analytics (CA)
-# cscope: I (Trent) believe this is just for CA dev work
-# python26: many parts of the build for javascriptlint
-# zookeeper-client: binder needs this
-# postgres client: needed by manta
-# gsharutils: needed by manta
-#
-# Note: ignore failures here because one some newer images the package names
-# differ. E.g. no such postgresql client package version on multiarch.
-pkgin -y install gcc47 gcc-compiler gcc-runtime gcc-tools cscope gmake \
-     scmgit python26 png GeoIP GeoLiteCity ghostscript zookeeper-client \
-     binutils postgresql91-client-9.1.2 gsharutils build-essential \
-     cdrtools \
-     || /bin/true
-
-# Download our own (sdc) node 0.10
-pkgin -y rm nodejs || /bin/true
-
-mkdir -p ~/opt
-
-if [[ ${IMAGE_UUID} == "01b2c898-945f-11e1-a523-af1afbe22822" ||    # old
-      ${IMAGE_UUID} == "fd2cc906-8938-11e3-beab-4359c665ac99" ||    # sdc-smartos-1.6.3
-      ${IMAGE_UUID} == "de411e86-548d-11e4-a4b7-3bb60478632a"       # sdc-base-14.2.0
-   ]]; then
-    # If smartos-1.6.3
-    NODEURL=https://download.joyent.com/pub/build/sdcnode/fd2cc906-8938-11e3-beab-4359c665ac99/master-20150315T023150Z/sdcnode/sdcnode-v0.10.26-zone-fd2cc906-8938-11e3-beab-4359c665ac99-master-20150314T232700Z-gd176204.tgz
-    cd ~/opt && curl $NODEURL | tar zxvf -
-else
-    # If multiarch
-    NODEURL=https://download.joyent.com/pub/build/sdcnode/b4bdc598-8939-11e3-bea4-8341f6861379/master-20150315T024811Z/sdcnode/sdcnode-v0.10.26-zone64-b4bdc598-8939-11e3-bea4-8341f6861379-master-20150314T232234Z-gd176204.tgz
-    cd ~/opt && curl $NODEURL | tar zxvf -
-fi
-
-/root/opt/node/bin/node /root/opt/node/lib/node_modules/npm/cli.js install -gf npm
-
-git config --global user.name "Jenkins Slave"
-git config --global user.email jenkins-slave@joyent.com
-
-
-# Get npm working with the old old node and npm by default in
-# smartos/1.6.3. This avoids a CERT problem to the registry.
-cat > /root/.npmrc <<EOF
-registry = http://registry.npmjs.org/
-EOF
-
-if [[ ${IS_163} -eq 0 ]]; then
-    # Do the smartos-live setup
-    mkdir -p /root/tmp
-    cd /root/tmp
-    # Note: This "./configure" step is necessary to setup your system.
-    git clone https://github.com/joyent/smartos-live.git
-    cd smartos-live
-    curl -k -O https://download.joyent.com/pub/build/configure.joyent
-    GIT_SSL_NO_VERIFY=true ./configure
-    cd /root
-    rm -rf /root/tmp
-fi
-
-# Now install openjdk which we do want
-pkgin install -y openjdk7 || /bin/true
-if [[ -z $(pkgin list | grep openjdk7) ]]; then
-    (cd / ; curl -k https://us-east.manta.joyent.com/Joyent_Dev/public/bits/openjdk7.tgz | tar -zxf -)
-fi
-
-sed -i "s/^export PATH=/export PATH=\\/root\\/opt\\/node\\/bin:/g" ~/.bashrc
-
-# setup some tunables and a /root/bin/startup.sh script so we can run stuff at boot.
-
-mkdir -p /root/bin
-cat > /root/bin/startup.sh <<EOF
-#!/bin/bash
-#
-# This script runs from the application/jenkins-slave service on every boot.
-#
-
-set -o xtrace
-set -o errexit
-
-. /lib/svc/share/smf_include.sh
-
-# Tune TCP so we will work better with Manta (borrowed from IMGAPI per TOOLS-364)
-# '|| true' because this 'ipadm set-prop' is necessary on some platform versions
-# and breaks on older ones.
-ipadm set-prop -t -p max_buf=2097152 tcp || true
-ndd -set /dev/tcp tcp_recv_hiwat 2097152
-ndd -set /dev/tcp tcp_xmit_hiwat 2097152
-ndd -set /dev/tcp tcp_conn_req_max_q 2048
-ndd -set /dev/tcp tcp_conn_req_max_q0 8192
-
-# Grr. for some reason DNS doesn't work right after startup.
-# XXX figure it out!
-retries=60
-while [[ \${retries} -gt 0 ]]; do
-    if ping www.google.com; then
-        break;
-    fi
-    retries=\$((\${retries} - 1))
-    sleep 1
-done
-[[ \${retries} -eq 0 ]] && exit 1
-
-export GIT_SSL_NO_VERIFY=true
-export PATH=/root/opt/node/bin:/root/opt/imgapi-cli/bin:/opt/local/bin:/opt/local/sbin:/usr/bin:/usr/sbin
-export HOME=/root
-export JENKINS_IP_ADDR=\$(/usr/sbin/mdata-get sdc:nics.0.ip)
-
-mkdir -p /root/data/jenkins
-curl -z /root/data/jenkins/slave.jar \
-    -o /root/data/jenkins/slave.jar \
-    -k https://jenkins.joyent.us/jnlpJars/slave.jar
-rm -f /root/data/jenkins/slave.jnlp
-curl -k -o /root/data/jenkins/slave.jnlp \
-    https://${JENKINS_CREDS}@jenkins.joyent.us/computer/${hostname}/slave-agent.jnlp
-
-nohup /opt/local/java/openjdk7/bin/java -jar /root/data/jenkins/slave.jar \
-    -noCertificateCheck \
-    -jnlpUrl file:///root/data/jenkins/slave.jnlp \
-    2>&1 &
-
-exit \${SMF_EXIT_OK}
-EOF
-chmod 755 /root/bin/startup.sh
-
-
-cat > /tmp/jenkins-slave-startup.xml <<EOF
-<?xml version='1.0'?>
-<!DOCTYPE service_bundle SYSTEM '/usr/share/lib/xml/dtd/service_bundle.dtd.1'>
-<service_bundle type='manifest' name='export'>
-  <service name='application/jenkins-slave' type='service' version='0'>
-    <create_default_instance enabled='true'/>
-    <single_instance/>
-    <dependency name='multi-user' grouping='require_all' restart_on='none' type='service'>
-      <service_fmri value='svc:/milestone/multi-user:default'/>
-    </dependency>
-    <dependency name='net-phys' grouping='require_all' restart_on='none' type='service'>
-      <service_fmri value='svc:/network/physical:default'/>
-    </dependency>
-    <exec_method name='start' type='method' exec='/root/bin/startup.sh' timeout_seconds='360'>
-      <method_context>
-        <method_credential user='root'/>
-      </method_context>
-    </exec_method>
-    <exec_method name='stop' type='method' exec=':kill' timeout_seconds='60'/>
-    <property_group name='application' type='application'/>
-    <property_group name='startd' type='framework'>
-      <propval name='ignore_error' type='astring' value='core,signal' />
-    </property_group>
-  </service>
-</service_bundle>
-EOF
-svccfg import /tmp/jenkins-slave-startup.xml
-
-# reboot
-(sleep 20 ; reboot) &
-
-exit 0
-
diff --git a/tools/jenkins/sdc-jenkins/lib/app.js b/tools/jenkins/sdc-jenkins/lib/app.js
deleted file mode 100644
index 1e28a25..0000000
--- a/tools/jenkins/sdc-jenkins/lib/app.js
+++ /dev/null
@@ -1,680 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2014, Joyent, Inc.
- */
-
-/*
- * Main CLI for sdc-jenkins tool.
- */
-
-var cmdln = require('cmdln');
-var fs = require('fs');
-var util = require('util');
-var format = util.format;
-var sprintf = require('sprintf').sprintf;
-var request = require('request');
-var cheerio = require('cheerio');
-
-var jenkins = require('jenkins');
-var assert = require('assert-plus');
-var async = require('async');
-var tabula = require('tabula');
-var exec = require('child_process').exec;
-var spawn = require('child_process').spawn;
-var vasync = require('vasync');
-
-
-//---- globals
-
-var p = console.log;
-
-
-
-//---- internal support stuff
-
-function shellEscape(s) {
-    return s.replace(/'/g, "'\\''");
-}
-
-
-
-//---- the CLI "App"
-
-function App() {
-    this.blacklist = ['master', 'pkgsrc-pbulk-master'];
-
-    cmdln.Cmdln.call(this, {
-        name: 'sdc-jenkins',
-        desc: 'SDC Jenkins Multitool',
-        options: [
-            {
-                names: ['config', 'c'],
-                helpArg: 'FILE',
-                type: 'string',
-                default: process.env.HOME + '/.sdcjenkins',
-                help: 'Configuration JSON file. ' +
-                    'Must contain keys: user, pass, host. ' +
-                    'Default is "~/.sdcjenkins".'
-            }
-        ]
-    });
-}
-util.inherits(App, cmdln.Cmdln);
-
-
-App.prototype.do_ssh_config = function (subcmd, opts, args, callback) {
-    var self = this;
-    var nodes = [];
-
-    var infos = {}, mdata, labels;
-
-    self.initialize();
-
-    async.waterfall([
-        getNodeList,
-        getNodesSystemInfo
-    ],
-    function (err) {
-        if (err) {
-            console.warn(err.message);
-            return;
-        }
-
-        var items = [];
-
-        nodes.forEach(function (n) {
-            var item = {
-                name: n,
-                ip: (infos[n] &&
-                     infos[n].JENKINS_IP_ADDR)
-            };
-
-            if (!item.ip) {
-                console.warn('Error: no IP address for %s', n);
-                return;
-            }
-            console.log(sprintf(
-                'Host %s\n'
-              + '    Hostname %s\n'
-              + '    User root\n'
-              + '    StrictHostKeyChecking no\n'
-              + '    UserKnownHostsFile /dev/null\n', n, item.ip));
-        });
-
-        callback();
-    });
-
-    function getNodeList(cb) {
-        if (args.length) {
-            nodes = args;
-            nodes.sort();
-        } else {
-            self.jc.node.list(function (err, l) {
-                if (err) {
-                    cb(err);
-                    return;
-                }
-
-                nodes = l.computer.map(function (i) { return i.displayName; });
-                nodes.sort();
-                cb();
-            });
-        }
-    }
-
-    function getNodesSystemInfo(cb) {
-        self.getNodeSystemInfo(nodes, function (err, systemInfos) {
-            if (err) {
-                cb(err);
-                return;
-            }
-            infos = systemInfos;
-
-            cb();
-        });
-    }
-
-    function getNodesMdata(cb) {
-        self.getNodesMdata(nodes, function (err, nodeMdata) {
-            if (err) {
-                cb(err);
-                return;
-            }
-            mdata = nodeMdata;
-
-            cb();
-        });
-    }
-};
-
-
-App.prototype.do_ssh_config.help = 'Generate SSH config for given Jenkins nodes with defined addresses';
-
-
-App.prototype.do_create_node = function (subcmd, opts, args, callback) {
-    var params = [ args[0] ];
-
-    if (opts.image) {
-        params.push(opts.image);
-    }
-
-    var spawnArgs = [
-        __dirname + '/../create-jenkins-slave/copy-and-start.sh',
-        params,
-        {
-            stdio: 'inherit',
-            env: {
-                JENKINS_USER: opts.jenkins_user
-            }
-        } ,
-        function (error, stdout, stderr) {
-            if (error) {
-                console.warn('ERROR:');
-                callback(error);
-                return;
-            }
-
-            callback();
-        }
-    ];
-
-    spawn.apply(null, spawnArgs);
-};
-
-App.prototype.do_create_node.help =
-    'Create a new SDC Jenkins node\n'
-    + '\n'
-    + 'Usage:\n'
-    + '     {{name}} create-node [OPTIONS] node-name\n'
-    + '\n'
-    + '{{options}}';
-
-App.prototype.do_create_node.options = [
-    {
-        names: ['jenkins-user', 'u'],
-        helpArg: 'USER',
-        type: 'string',
-        default: 'guest',
-        help: 'Jenkins user for jenkins-ssh-api access.'
-    },
-    {
-        names: ['image', 'i'],
-        helpArg: 'IMAGE',
-        type: 'string',
-        default: 'sdc-smartos-1.6.3',
-        help: 'Name of image to be used for provisioning Jenkins node'
-    },
-    {
-        names: ['datacenter', 'd'],
-        helpArg: 'DATACENTER',
-        type: 'string',
-        default: 'emy-jenkins',
-        help: 'The datacenter to provision on'
-    },
-    {
-        names: ['server', 's'],
-        helpArg: 'SERVER',
-        type: 'string',
-        default: '49fbb6b8-367b-0010-bed7-047d7bbb7863',
-        help: 'The datacenter to provision on'
-    },
-];
-
-
-App.prototype.do_nodes = function (subcmd, opts, args, callback) {
-    var self = this;
-
-    var list, infos = {}, mdata, labels;
-
-    self.initialize();
-
-    async.waterfall([
-        getNodeList,
-        getNodesSystemInfo,
-        getNodesMdata,
-        getNodeLabels
-    ],
-    function (err) {
-        if (err) {
-            console.warn(err.message);
-            return;
-        }
-        var input = [];
-
-        list.computer.forEach(function (i) {
-            if (self.blacklist.indexOf(i.displayName) !== -1) {
-                return;
-            }
-
-            var item = {
-                name: i.displayName,
-                ip: (infos[i.displayName] &&
-                     infos[i.displayName].JENKINS_IP_ADDR),
-                dc: mdata[i.displayName].datacenter_name,
-                'package': mdata[i.displayName].package_name,
-                image: mdata[i.displayName].image_uuid,
-                server: mdata[i.displayName].server_uuid,
-                pi: mdata[i.displayName].platform,
-                labels: labels[i.displayName]
-            };
-
-            input.push(item);
-        });
-
-        var tabOptions = {
-            columns: [
-                'name', 'ip', 'dc', 'server', 'pi', 'image', 'package',
-                'labels'],
-            validFields: [
-                'name', 'ip', 'dc', 'server', 'pi', 'image', 'package',
-                'labels']
-        };
-
-        tabula(input, tabOptions);
-    });
-
-    function getNodeList(cb) {
-        self.jc.node.list(function (err, l) {
-            if (err) {
-                cb(err);
-                return;
-            }
-
-            list = l;
-            cb();
-        });
-    }
-
-    function getNodesSystemInfo(cb) {
-        var nodes = list.computer.map(function (i) { return i.displayName; });
-
-//         cb(); return;
-
-        self.getNodeSystemInfo(nodes, function (err, systemInfos) {
-            if (err) {
-                cb(err);
-                return;
-            }
-            infos = systemInfos;
-
-            cb();
-        });
-    }
-
-    function getNodesMdata(cb) {
-        var nodes = list.computer.map(function (i) { return i.displayName; });
-
-        self.getNodesMdata(nodes, function (err, nodeMdata) {
-            if (err) {
-                cb(err);
-                return;
-            }
-            mdata = nodeMdata;
-
-            cb();
-        });
-    }
-
-    function getNodeLabels(cb) {
-        var nodes = list.computer.map(function (i) { return i.displayName; });
-
-        self.getNodeLabels(nodes, function (err, nodeLabels) {
-            if (err) {
-                cb(err);
-                return;
-            }
-            labels = nodeLabels;
-
-            cb();
-        });
-    }
-};
-
-App.prototype.do_nodes.help = 'Return all Jenkins nodes (workers)';
-
-
-App.prototype.initialize = function () {
-    this.config = JSON.parse(fs.readFileSync(this.opts.config));
-    this.jenkinsUrl = sprintf('https://%s:%s@%s',
-        this.config.user, this.config.pass, this.config.host);
-
-    this.jc = jenkins(this.jenkinsUrl);
-
-    assert.string(this.config.user, 'options.user');
-    assert.string(this.config.pass, 'options.pass');
-    assert.string(this.config.host, 'options.host');
-};
-
-
-
-App.prototype.do_oneachnode = function do_oneachnode(subcmd, opts, args, cb) {
-    var self = this;
-    if (opts.help) {
-        this.do_help('help', {}, [subcmd], cb);
-        return;
-    } else if (args.length !== 1) {
-        return cb(new Error('incorrect number of args: ' + args));
-    }
-
-    self.initialize();
-    var SSH = 'ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -l root';
-    var cmd = args[0];
-    var computers;
-    var results = [];
-    var execTimeoutMs = (opts.exectimeout || 60) * 1000;
-
-    vasync.pipeline({funcs: [
-        function getComputers(_, next) {
-            self.jc.node.list(function (err, nodes) {
-                if (err) {
-                    return next(err)
-                }
-                computers = nodes.computer;
-                next();
-            });
-        },
-
-        function trim(_, next) {
-            var trimmed = computers.filter(function (c) {
-                return (self.blacklist.indexOf(c.displayName) === -1);
-            });
-            computers = trimmed;
-            next();
-        },
-
-        function run(_, next) {
-            vasync.forEachParallel({
-                inputs: computers,
-                func: function runOne(computer, next2) {
-                    exec(
-                        format("%s %s '%s'", SSH, computer.displayName,
-                            shellEscape(cmd)),
-                        {timeout: execTimeoutMs},
-                        function (err, stdout, stderr) {
-                            results.push({
-                                computer: computer.displayName,
-                                result: {
-                                    err: err,
-                                    exit_status: (err ? err.code : 0),
-                                    stdout: stdout,
-                                    stderr: stderr
-                                }
-                            });
-                            next2();
-                        }
-                    );
-                }
-            }, next);
-        },
-
-        function display(_, next) {
-            tabula.sortArrayOfObjects(results, ['computer']);
-            if (opts.json) {
-                p(JSON.stringify(results, null, 4));
-            } else if (opts.jsonstream) {
-                for (var i = 0; i < results.length; i++) {
-                    p(JSON.stringify(results[i]));
-                }
-            } else {
-                var table = [];
-                var singleLineOutputs = true;
-                for (var i = 0; i < results.length; i++) {
-                    var computer = results[i].computer;
-                    var result = results[i].result;
-                    var output;
-                    if (result.err && result.err.killed) {
-                        output = format('<ERROR: timeout for computer %s>',
-                            computer);
-                    } else if (result.err && !result.stdout && !result.stderr) {
-                        output = format('<ERROR: ssh to %s failed (update your ~/.ssh/config)>',
-                            computer);
-                    } else {
-                        output = result.stdout;
-                        if (output.length > 1 && output.slice(-1) === '\n') {
-                            output = output.slice(0, output.length - 1);
-                        }
-                        if (result.stderr) {
-                            if (output) {
-                                output += '\n';
-                            }
-                            output += result.stderr;
-                        }
-                    }
-                    if (output.trim().indexOf('\n') !== -1) {
-                        singleLineOutputs = false;
-                    }
-                    table.push({computer: computer, output: output});
-                }
-                if (singleLineOutputs) {
-                    tabula(table);
-                } else {
-                    for (var i = 0; i < table.length; i++) {
-                        p("=== Output from", table[i].computer);
-                        p(table[i].output);
-                        if (table[i].output.slice(-1) !== '\n') {
-                            p();
-                        }
-                    }
-                }
-            }
-        }
-    ]}, function (err) {
-        cb(err);
-    });
-};
-App.prototype.do_oneachnode.options = [
-    {
-        names: ['help', 'h'],
-        type: 'bool',
-        help: 'Show this help.'
-    },
-    {
-        names: ['json', 'j'],
-        type: 'bool',
-        help: 'JSON output'
-    },
-    {
-        names: ['jsonstream', 'J'],
-        type: 'bool',
-        help: 'JSON stream output'
-    },
-    {
-        names: ['exectimeout', 'T'],
-        type: 'positiveInteger',
-        help: 'Command execution timeout. Default is 60s.'
-    },
-];
-App.prototype.do_oneachnode.help = (
-    'Run the given command on each SDC jenkins slave.\n'
-    + '\n'
-    + 'Usage:\n'
-    + '     {{name}} oneachnode [<options>] <cmd>\n'
-    + '\n'
-    + '{{options}}\n'
-    + 'This skips the "master" and pkgsrc pbulk nodes.\n'
-);
-
-
-/*
- * HTML scrape the node environment variables from the Jenkins HTML off the
- * Jenkins admin site.
- */
-
-App.prototype.getNodeSystemInfo = function (n, callback) {
-    var self = this;
-    var dict = {};
-
-    var nodes = [];
-
-    if (!Array.isArray(n)) {
-        nodes.push(n);
-    } else {
-        nodes = n;
-    }
-
-    async.each(
-        nodes,
-        function (node, cb) {
-            var url = sprintf(
-                '%s/computer/%s/systemInfo', self.jenkinsUrl, node);
-            if (self.blacklist.indexOf(node) !== -1) {
-                cb();
-                return;
-            }
-            request(url, { rejectUnauthorized: false }, function (error, response, body) {
-                if (error) {
-                    console.warn(error.message);
-                    callback(error);
-                    return;
-                }
-
-                var re = '<tr><td class="pane">(.*?)</td>\\s*'
-                           + '<td[^>]+>(.*?)</td>\\s*</tr>';
-                var m = body.match(new RegExp(re, 'g'));
-
-                var $;
-
-                for (var i = 1; i < m.length; i++) {
-                    if (!dict[node]) {
-                        dict[node] = {};
-                    }
-
-                    $ = cheerio.load(m[i]);
-                    var key = $('tr > td').eq(0).text();
-                    var value = $('tr > td').eq(1).text();
-
-                    dict[node][key] = value;
-                }
-
-                cb();
-            });
-        },
-        function (err) {
-            if (err) {
-                callback(err);
-                return;
-            }
-
-            callback(null, dict);
-        });
-};
-
-
-/*
- * HTML scrape the node environment variables from the Jenkins HTML off the
- * Jenkins admin site.
- */
-
-App.prototype.getNodesMdata = function (n, callback) {
-    var self = this;
-    var dict = {};
-
-    var nodes = [];
-
-    if (!Array.isArray(n)) {
-        nodes.push(n);
-    } else {
-        nodes = n;
-    }
-
-    async.each(
-        nodes,
-        function (node, cb) {
-            if (self.blacklist.indexOf(node) !== -1) {
-                cb();
-                return;
-            }
-
-            var vals = [
-                'sdc:image_uuid',
-                'sdc:server_uuid',
-                'sdc:package_name',
-                'sdc:datacenter_name'
-            ];
-
-            exec('ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -l root ' + node +
-                 ' \'for i in ' + vals.join(' ') +
-                 '; do mdata-get $i || echo "-"; done; sysinfo |json "Live Image"\'',
-                 { timeout: 5000 },
-                 function (err, stdout, stderr) {
-                     if (!dict[node]) {
-                         dict[node] = {};
-                     }
-
-                     if (err) {
-                         console.warn(err.message);
-                         dict[node].image_uuid = '!';
-                         dict[node].server_uuid = '!';
-                         dict[node].datacenter_name = '!';
-                         dict[node].platform = '!';
-                         dict[node].package_name = '!';
-                         cb();
-                         return;
-                     }
-
-                     var parts = stdout.trim().split('\n');
-
-                     dict[node].image_uuid = parts[0];
-                     dict[node].server_uuid = parts[1];
-                     dict[node].package_name = parts[2];
-                     dict[node].datacenter_name = parts[3];
-                     dict[node].platform = parts[4];
-
-                     cb();
-                });
-        },
-        function (err) {
-            callback(err, dict);
-        });
-};
-
-App.prototype.getNodeLabels = function (n, callback) {
-    var self = this;
-    var dict = {};
-
-    var nodes = [];
-
-    if (!Array.isArray(n)) {
-        nodes.push(n);
-    } else {
-        nodes = n;
-    }
-
-    async.each(
-        nodes,
-        function (node, cb) {
-            if (self.blacklist.indexOf(node) !== -1) {
-                cb();
-                return;
-            }
-
-            exec('ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 31337 jenkins.joyent.us get-node ' + node,
-                 { timeout: 5000 },
-                 function (err, stdout, stderr) {
-                     var re = '<label>(.*)</label>';
-                     var m = (new RegExp(re, 'g')).exec(stdout.toString());
-
-                     if (!dict[node]) {
-                         dict[node] = {};
-                     }
-
-                     if (!m) {
-                         console.log(stdout);
-                     }
-                     dict[node] = m[1];
-
-                     cb();
-                     return;
-                 });
-        },
-        function (err) {
-            callback(err, dict);
-        });
-};
-
-module.exports = App;
diff --git a/tools/jenkins/sdc-jenkins/package.json b/tools/jenkins/sdc-jenkins/package.json
deleted file mode 100644
index 35f71b9..0000000
--- a/tools/jenkins/sdc-jenkins/package.json
+++ /dev/null
@@ -1,35 +0,0 @@
-{
-  "name": "sdc-jenkins",
-  "version": "0.0.0",
-  "description": "Joyent SmartDataCenter Jenkins Tools",
-  "main": "index.js",
-  "scripts": {
-    "test": "echo \"Error: no test specified\" && exit 1"
-  },
-  "dependencies": {
-    "assert-plus": "0.1.5",
-    "async": "0.9.0",
-    "cheerio": "0.16.0",
-    "cmdln": "git+https://github.com/trentm/node-cmdln.git#5333231da28f9ea659cc56f417513563f261fded",
-    "jenkins": "git+https://github.com/silas/node-jenkins.git#a2145a04b879b8e524f023c71c1e3045214d5968",
-    "request": "2.36.0",
-    "sprintf": "0.1.3",
-    "tabula": "1.2.1",
-    "vasync": "1.5.0"
-  },
-  "repository": {
-    "type": "git",
-    "url": "mountain-gorilla.git"
-  },
-  "bin": {
-    "sdc-jenkins": "./bin/sdc-jenkins.js"
-  },
-  "keywords": [
-    "jenkins",
-    "builds",
-    "sdc",
-    "joyent"
-  ],
-  "author": "Joyent",
-  "license": "MPL-2.0"
-}
diff --git a/tools/jenkins/sdc-jenkins/sdcjenkins-conf-example b/tools/jenkins/sdc-jenkins/sdcjenkins-conf-example
deleted file mode 100644
index 16ab691..0000000
--- a/tools/jenkins/sdc-jenkins/sdcjenkins-conf-example
+++ /dev/null
@@ -1,9 +0,0 @@
-{
-    "user": "automation",
-    "pass": "PASSWORD",
-    "host": "jenkins.joyent.us",
-    "datacenters": {
-        "emy-jenkins": "172.26.0.4",
-        "staging-1": "172.26.3.4",
-    }
-}
-- 
2.21.0

