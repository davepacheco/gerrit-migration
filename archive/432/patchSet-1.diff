commit 57388e9a4d17c6b405f13c9eadd523e86bb100df (refs/changes/32/432/1)
Author: Marsell Kukuljevic <marsell@joyent.com>
Date:   2016-09-08T20:17:46+12:00 (3 years, 1 month ago)
    
    PUBAPI-1322 - GetImage should be able to retrieve disabled images.

diff --git a/lib/datasets.js b/lib/datasets.js
index 1a0520c..757d166 100644
--- a/lib/datasets.js
+++ b/lib/datasets.js
@@ -202,18 +202,25 @@ function translate(req, dataset) {
 
 
 function loadImage(req, cb) {
-    var pathname = req.getUrl().pathname;
-    var accountUuid = req.account.uuid;
     var datasetUuid = req.params.dataset || req.params.image;
+    var accountUuid = req.account.uuid;
     var opts = { headers: { 'x-request-id': req.getId() } };
 
-    if (/\/machines/.test(pathname) && req.method === 'GET') {
-        // We don't pass 'account' here, since we might be loading a
-        // now-disabled image which was previously used for a machine:
-        return req.sdc.imgapi.getImage(datasetUuid, opts, cb);
-    } else {
-        return req.sdc.imgapi.getImage(datasetUuid, accountUuid, opts, cb);
-    }
+    // We don't pass the account UUID here, since we might be loading a
+    // now-disabled image, and imgapi won't let us load a disabled
+    // image if we provide an account UUID; we need to check that next.
+    req.sdc.imgapi.getImage(datasetUuid, opts, function (err, img) {
+        if (err) {
+            return cb(err);
+        }
+
+        // Users should not see non-public images that don't belong to them
+        if (!img.public && img.owner !== accountUuid) {
+            return cb(new ResourceNotFoundError('image not found'));
+        }
+
+        return cb(null, img);
+    });
 }
 
 
@@ -317,9 +324,11 @@ function getImage(req, res, next) {
     loadImage(req, function (err, img) {
         if (err) {
             return next(err);
-        } else if (img.state === 'destroyed') {
-            // Users should not see their destroyed images
-            return next(new ResourceNotFoundError('%s not found', img.uuid));
+        }
+
+        // Users should not be able to see their destroyed images
+        if (img.state === 'destroyed') {
+            return next(new ResourceNotFoundError('image not found'));
         }
 
         req.dataset = img;
diff --git a/test/images.test.js b/test/images.test.js
index 680ad96..77de4c2 100644
--- a/test/images.test.js
+++ b/test/images.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
 var test = require('tape').test;
@@ -217,6 +217,27 @@ test('GetImage should not return non-permission images', function (t) {
 });
 
 
+test('GetImage returns disabled images', function (t) {
+    CLIENT.imgapi.disableImage(IMAGE.id, function (err) {
+        t.ifError(err);
+
+        CLIENT.get('/my/images/' + IMAGE.id, function (err2, req, res, body) {
+            t.ifError(err2);
+
+            t.equal(res.statusCode, 200, 'GET /my/images/:uuid status');
+            common.checkHeaders(t, res.headers);
+            t.ok(body, 'GET /my/images/:uuid body');
+            checkImage(t, body);
+
+            CLIENT.imgapi.enableImage(IMAGE.id, function (err3) {
+                t.ifError(err3);
+                t.end();
+            });
+        });
+    });
+});
+
+
 test('GetImage 404', function (t) {
     CLIENT.get('/my/images/' + common.uuid(), function (err) {
         t.ok(err, 'GET /my/images/ error');
