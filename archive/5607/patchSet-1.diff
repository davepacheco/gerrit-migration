commit 657eb212b19cb2a02a1bfe8369699418bbb70287 (refs/changes/07/5607/1)
Author: Rob Johnston <rob.johnston@joyent.com>
Date:   2019-02-17T06:59:59+00:00 (8 months ago)
    
    OS-7560 libtopo's XML serialization code is broken and incomplete

diff --git a/usr/src/lib/fm/topo/libtopo/Makefile.com b/usr/src/lib/fm/topo/libtopo/Makefile.com
index c0c164fa18..4f397a589e 100644
--- a/usr/src/lib/fm/topo/libtopo/Makefile.com
+++ b/usr/src/lib/fm/topo/libtopo/Makefile.com
@@ -76,6 +76,7 @@ SRCDIR =	../common
 CLEANFILES += $(SRCDIR)/topo_error.c $(SRCDIR)/topo_tables.c
 
 CPPFLAGS += -I../common -I$(ADJUNCT_PROTO)/usr/include/libxml2 -I.
+CSTD = $(CSTD_GNU99)
 CFLAGS += $(CCVERBOSE) $(C_BIGPICFLAGS)
 CFLAGS += -D_POSIX_PTHREAD_SEMANTICS
 CFLAGS64 += $(CCVERBOSE) $(C_BIGPICFLAGS)
diff --git a/usr/src/lib/fm/topo/libtopo/common/topo_2xml.c b/usr/src/lib/fm/topo/libtopo/common/topo_2xml.c
index d7edbc31e7..42299597cb 100644
--- a/usr/src/lib/fm/topo/libtopo/common/topo_2xml.c
+++ b/usr/src/lib/fm/topo/libtopo/common/topo_2xml.c
@@ -115,129 +115,239 @@ txml_print_prop(topo_hdl_t *thp, FILE *fp, tnode_t *node, const char *pgname,
     topo_propval_t *pv)
 {
 	int err;
-	char *fmri = NULL;
-	char vbuf[INT64BUFSZ], tbuf[32], *pval = NULL, *aval = NULL;
+	uint_t nelem;
+	char vbuf[INT64BUFSZ];
 
 	switch (pv->tp_type) {
 		case TOPO_TYPE_INT32: {
 			int32_t val;
+
 			if (topo_prop_get_int32(node, pgname, pv->tp_name, &val,
-			    &err) == 0) {
-				(void) snprintf(vbuf, INT64BUFSZ, "%d", val);
-				(void) snprintf(tbuf, sizeof (tbuf), "%s",
-				    Int32);
-				pval = vbuf;
-			} else
+			    &err) != 0)
 				return;
+
+			(void) snprintf(vbuf, INT64BUFSZ, "%d", val);
+			begin_end_element(fp, Propval, Name, pv->tp_name, Type,
+			    Int32, Value, vbuf, NULL);
 			break;
 		}
 		case TOPO_TYPE_UINT32: {
 			uint32_t val;
+
 			if (topo_prop_get_uint32(node, pgname, pv->tp_name,
-			    &val, &err) == 0) {
-				(void) snprintf(vbuf, INT64BUFSZ, "0x%x", val);
-				(void) snprintf(tbuf, sizeof (tbuf), "%s",
-				    UInt32);
-				pval = vbuf;
-			} else
+			    &val, &err) != 0)
 				return;
+
+			(void) snprintf(vbuf, INT64BUFSZ, "0x%x", val);
+			begin_end_element(fp, Propval, Name, pv->tp_name, Type,
+			    UInt32, Value, vbuf, NULL);
 			break;
 		}
 		case TOPO_TYPE_INT64: {
 			int64_t val;
+
 			if (topo_prop_get_int64(node, pgname, pv->tp_name, &val,
-			    &err) == 0) {
-				(void) snprintf(vbuf, INT64BUFSZ, "0x%llx",
-				    (longlong_t)val);
-				(void) snprintf(tbuf, sizeof (tbuf), "%s",
-				    Int64);
-				pval = vbuf;
-			} else
+			    &err) != 0)
 				return;
+
+			(void) snprintf(vbuf, INT64BUFSZ, "0x%llx",
+			    (longlong_t)val);
+			begin_end_element(fp, Propval, Name, pv->tp_name, Type,
+			    Int64, Value, vbuf, NULL);
 			break;
 		}
 		case TOPO_TYPE_UINT64: {
 			uint64_t val;
+
 			if (topo_prop_get_uint64(node, pgname, pv->tp_name,
-			    &val, &err) == 0) {
-				(void) snprintf(vbuf, INT64BUFSZ, "0x%llx",
-				    (u_longlong_t)val);
-				(void) snprintf(tbuf, sizeof (tbuf), "%s",
-				    UInt64);
-				pval = vbuf;
-			} else
+			    &val, &err) != 0)
 				return;
+
+			(void) snprintf(vbuf, INT64BUFSZ, "0x%llx",
+			    (u_longlong_t)val);
+			begin_end_element(fp, Propval, Name, pv->tp_name, Type,
+			    UInt64, Value, vbuf, NULL);
+			break;
+		}
+		case TOPO_TYPE_DOUBLE: {
+			double val;
+			char *dblstr = NULL;
+
+			if (topo_prop_get_double(node, pgname, pv->tp_name,
+			    &val, &err) != 0)
+				return;
+
+			/*
+			 * The %a format specifier allows floating point values
+			 * to be serialized without losing precision.
+			 */
+			if (asprintf(&dblstr, "0x%a", val) < 0)
+				return;
+			begin_end_element(fp, Propval, Name, pv->tp_name, Type,
+			    Double, Value, dblstr, NULL);
+			free(dblstr);
 			break;
 		}
 		case TOPO_TYPE_STRING: {
+			char *strbuf = NULL;
+
 			if (topo_prop_get_string(node, pgname, pv->tp_name,
-			    &pval, &err) != 0)
+			    &strbuf, &err) != 0)
 				return;
-			(void) snprintf(tbuf, sizeof (tbuf), "%s", "string");
+
+			begin_end_element(fp, Propval, Name, pv->tp_name, Type,
+			    String, Value, strbuf, NULL);
+			topo_hdl_strfree(thp, strbuf);
 			break;
 		}
 		case TOPO_TYPE_FMRI: {
-			nvlist_t *val;
+			nvlist_t *val = NULL;
+			char *fmristr = NULL;
 
 			if (topo_prop_get_fmri(node, pgname, pv->tp_name, &val,
-			    &err) == 0) {
-				if (topo_fmri_nvl2str(thp, val, &fmri, &err)
-				    == 0) {
-					nvlist_free(val);
-					pval = fmri;
-				} else {
-					nvlist_free(val);
-					return;
-				}
-			} else
+			    &err) != 0 ||
+			    topo_fmri_nvl2str(thp, val, &fmristr, &err) != 0) {
+				nvlist_free(val);
+				return;
+			}
+			nvlist_free(val);
+			begin_end_element(fp, Propval, Name, pv->tp_name, Type,
+			    FMRI, Value, fmristr, NULL);
+			topo_hdl_strfree(thp, fmristr);
+			break;
+		}
+		case TOPO_TYPE_INT32_ARRAY: {
+			int32_t *val;
+
+			if (topo_prop_get_int32_array(node, pgname,
+			    pv->tp_name, &val, &nelem, &err) != 0)
 				return;
-			(void) snprintf(tbuf, sizeof (tbuf), "%s", FMRI);
+
+			begin_element(fp, Propval, Name, pv->tp_name, Type,
+			    Int32_Arr, NULL);
+
+			for (int i = 0; i < nelem; i++) {
+				(void) sprintf(vbuf, "%d", val[i]);
+				begin_end_element(fp, Propitem, Value, vbuf,
+				    NULL);
+			}
+
+			topo_hdl_free(thp, val, nelem * sizeof (int32_t));
+			end_element(fp, Propval);
 			break;
 		}
 		case TOPO_TYPE_UINT32_ARRAY: {
 			uint32_t *val;
-			uint_t nelem, i;
+
 			if (topo_prop_get_uint32_array(node, pgname,
 			    pv->tp_name, &val, &nelem, &err) != 0)
 				return;
 
-			if (nelem > 0) {
-				if ((aval = calloc((nelem * 9 - 1),
-				    sizeof (uchar_t))) == NULL) {
-
-					topo_hdl_free(thp, val,
-					    nelem * sizeof (uint32_t));
-					return;
-				}
-
-				(void) sprintf(aval, "0x%x", val[0]);
-				for (i = 1; i < nelem; i++) {
-					(void) sprintf(vbuf, " 0x%x", val[i]);
-					(void) strcat(aval, vbuf);
-				}
-				topo_hdl_free(thp, val,
-				    nelem * sizeof (uint32_t));
-				(void) snprintf(tbuf, sizeof (tbuf), "%s",
-				    UInt32_Arr);
-				pval = aval;
+			begin_element(fp, Propval, Name, pv->tp_name, Type,
+			    UInt32_Arr, NULL);
+
+			for (int i = 0; i < nelem; i++) {
+				(void) sprintf(vbuf, "0x%x", val[i]);
+				begin_end_element(fp, Propitem, Value, vbuf,
+				    NULL);
 			}
+
+			topo_hdl_free(thp, val, nelem * sizeof (uint32_t));
+			end_element(fp, Propval);
 			break;
 		}
-		default:
-			return;
-	}
+		case TOPO_TYPE_INT64_ARRAY: {
+			int64_t *val;
+
+			if (topo_prop_get_int64_array(node, pgname,
+			    pv->tp_name, &val, &nelem, &err) != 0)
+				return;
+
+			begin_element(fp, Propval, Name, pv->tp_name, Type,
+			    Int64_Arr, NULL);
+
+			for (int i = 0; i < nelem; i++) {
+				(void) sprintf(vbuf, "0x%llx", val[i]);
+				begin_end_element(fp, Propitem, Value, vbuf,
+				    NULL);
+			}
+
+			topo_hdl_free(thp, val, nelem * sizeof (int64_t));
+			end_element(fp, Propval);
+			break;
+		}
+		case TOPO_TYPE_UINT64_ARRAY: {
+			uint64_t *val;
+
+			if (topo_prop_get_uint64_array(node, pgname,
+			    pv->tp_name, &val, &nelem, &err) != 0)
+				return;
+
+			begin_element(fp, Propval, Name, pv->tp_name, Type,
+			    UInt64_Arr, NULL);
+
+			for (int i = 0; i < nelem; i++) {
+				(void) sprintf(vbuf, "0x%llx", val[i]);
+				begin_end_element(fp, Propitem, Value, vbuf,
+				    NULL);
+			}
+
+			topo_hdl_free(thp, val, nelem * sizeof (uint64_t));
+			end_element(fp, Propval);
+			break;
+		}
+		case TOPO_TYPE_STRING_ARRAY: {
+			char **val;
+
+			if (topo_prop_get_string_array(node, pgname,
+			    pv->tp_name, &val, &nelem, &err) != 0)
+				return;
 
-	begin_end_element(fp, Propval, Name, pv->tp_name, Type, tbuf,
-	    Value, pval, NULL);
+			begin_element(fp, Propval, Name, pv->tp_name, Type,
+			    String_Arr, NULL);
 
-	if (pval != NULL && pv->tp_type == TOPO_TYPE_STRING)
-		topo_hdl_strfree(thp, pval);
+			for (int i = 0; i < nelem; i++) {
+				begin_end_element(fp, Propitem, Value, val[i],
+				    NULL);
+			}
+			for (int i = 0; i < nelem; i++) {
+				topo_hdl_strfree(thp, val[i]);
+			}
+			topo_hdl_free(thp, val, nelem * sizeof (char *));
 
-	if (fmri != NULL)
-		topo_hdl_strfree(thp, fmri);
+			end_element(fp, Propval);
+			break;
+		}
+		case TOPO_TYPE_FMRI_ARRAY: {
+			nvlist_t **val;
+			char *fmristr = NULL;
+			int ret;
+
+			if (topo_prop_get_fmri_array(node, pgname,
+			    pv->tp_name, &val, &nelem, &err) != 0)
+				return;
 
-	if (aval != NULL)
-		free(aval);
+			begin_element(fp, Propval, Name, pv->tp_name, Type,
+			    FMRI_Arr, NULL);
+
+			for (int i = 1; i < nelem; i++) {
+				if ((ret = topo_fmri_nvl2str(thp, val[i],
+				    &fmristr, &err)) != 0)
+					break;
+				begin_end_element(fp, Propitem, Value, fmristr,
+				    NULL);
+				topo_hdl_strfree(thp, fmristr);
+			}
+			for (int i = 0; i < nelem; i++) {
+				nvlist_free(val[i]);
+			}
+			topo_hdl_free(thp, val, nelem * sizeof (nvlist_t *));
+			end_element(fp, Propval);
+			break;
+		}
+		default:
+			return;
+	}
 }
 
 static void
