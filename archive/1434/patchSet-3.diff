From 942b195de26f8abd15a5bcccbdf936b9d349710a Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Fri, 3 Feb 2017 19:42:06 -0800
Subject: [PATCH] joyent/node-cueball#26 timers and sockets should not be
 unref'd Reviewed by: Trent Mick <trent.mick@joyent.com>

---
 CHANGES.adoc          | 16 ++++++++++++++++
 docs/api.adoc         | 43 ++++++++++++++++++++-----------------------
 lib/connection-fsm.js | 22 +---------------------
 lib/resolver.js       |  3 +--
 package.json          |  2 +-
 test/pool.test.js     |  4 ++--
 6 files changed, 41 insertions(+), 49 deletions(-)

diff --git a/CHANGES.adoc b/CHANGES.adoc
index 796f9f1..91ba027 100644
--- a/CHANGES.adoc
+++ b/CHANGES.adoc
@@ -6,6 +6,22 @@ toc::[]
 
 ## v2.x
 
+### v2.1.0
+
+New minor release, due to relaxation of API requirements.
+
+API changes:
+
+ - `Connection` interface implementations (i.e. implementers of the objects
+   that are returned by the `constructor` parameter) are no longer required to
+   implement `#ref()` or `#unref()`.
+
+Bugs fixed:
+
+ - #85 documentation improvements and re-organization
+ - #26 clarified that programs that wish to exit cleanly without calling
+   `process.exit()` must call `.stop()` on agents or pools.
+
 ### v2.0.1
 
 Bugs fixed:
diff --git a/docs/api.adoc b/docs/api.adoc
index 19e6e17..7aa2f66 100644
--- a/docs/api.adoc
+++ b/docs/api.adoc
@@ -49,6 +49,12 @@ Parameters
 
 - `cb` -- optional Function (err)
 
+NOTE: Any pools spun up by the Agent will continue to keep the process
+open even if there are no outstanding requests (due to the spare connections
+held by the pool). The `stop()` method should be used on an Agent if your
+program does not plan to use it again and wishes to be able to exit node
+without calling `process.exit()`.
+
 [[pool]]
 ## ConnectionPool
 
@@ -140,6 +146,11 @@ configuration properties.
 
 Stops the connection pool and its `Resolver`, then destroys all connections.
 
+NOTE: Any pool running in a process will continue to keep the process
+open even if there are no outstanding claims or activity (due to the spare
+connections held by the pool). The `stop()` method is the correct way to
+allow the process to exit if there is no more work to be done using the Pool.
+
 ### `#claim([options, ]callback)`
 
 Claims a connection from the pool ready for use.
@@ -432,6 +443,15 @@ connection to the backend specified by the first argument to the constructor.
 When the connection succeeds, it must emit the event `connect`. No arguments are
 required.
 
+### `->close()` (required)
+
+Connection objects must emit `close` as the final event they emit after the
+connection has ended. No events may be emitted after `close`.
+
+### `#destroy()` (required)
+
+Immediately disconnects the connection and proceeds to emit `close`.
+
 ### `->error(errObj)`
 
 Connection objects may emit `error` at any time in response to a fatal error.
@@ -445,29 +465,6 @@ should be `true`).
 May also be emitted as `connectError` only in the state before `connect` has
 been emitted.
 
-### `->close()` (required)
-
-Connection objects must emit `close` as the final event they emit after the
-connection has ended. No events may be emitted after `close`.
-
-### `#ref()` (required)
-
-Marks the connection as "referenced", meaning that it should keep the Node
-process running even if no event handlers are registered on it.
-
-It is generally acceptable for long-lived server processes (which never intend
-to exit in normal operation) to provide a Connection that implements `ref()` and
-`unref()` as no-ops.
-
-### `#unref()` (required)
-
-Marks the connection as "unreferenced", allowing the Node process to exit if it
-is the only remaining source of events.
-
-### `#destroy()` (required)
-
-Immediately disconnects the connection and proceeds to emit `close`.
-
 ### `->timeout()`
 
 Optional. Equivalent to emitting `error` with a ConnectionTimeoutError as an
diff --git a/lib/connection-fsm.js b/lib/connection-fsm.js
index e78abf2..2fa697c 100644
--- a/lib/connection-fsm.js
+++ b/lib/connection-fsm.js
@@ -361,18 +361,10 @@ SocketMgrFSM.prototype.state_backoff = function (S) {
 			this.sm_delay = this.sm_maxDelay;
 	}
 
-	var t = S.timeout(delay, function () {
+	S.timeout(delay, function () {
 		S.gotoState('connecting');
 	});
 
-	/*
-	 * If we're in monitor mode, unref the backoff timer. That way we
-	 * don't block a commandline app from exiting that wants to exit as
-	 * soon as a pool enters 'failed'.
-	 */
-	if (this.sm_monitor)
-		t.unref();
-
 	S.on(this, 'closeAsserted', function () {
 		S.gotoState('closed');
 	});
@@ -955,16 +947,6 @@ ConnectionSlotFSM.prototype.state_idle = function (S) {
 
 	this.csf_handle = undefined;
 
-	if (smgr.isInState('connected')) {
-		var sock = smgr.getSocket();
-		/*
-		 * If we can, unref the socket while idle, so that a bunch of
-		 * spare connections doing nothing don't hold the process open.
-		 */
-		if (typeof (sock.unref) === 'function')
-			sock.unref();
-	}
-
 	/* Monitor successfully connected: make it into a normal slot now. */
 	if (this.csf_monitor === true) {
 		this.csf_monitor = false;
@@ -1089,8 +1071,6 @@ ConnectionSlotFSM.prototype.state_busy = function (S) {
 	 */
 	if (smgr.isInState('connected')) {
 		var sock = smgr.getSocket();
-		if (typeof (sock.ref) === 'function')
-			sock.ref();
 		hdl.accept(sock);
 	} else {
 		hdl.reject();
diff --git a/lib/resolver.js b/lib/resolver.js
index 2f0502e..09e0e6d 100644
--- a/lib/resolver.js
+++ b/lib/resolver.js
@@ -917,10 +917,9 @@ CueBallDNSResolver.prototype.state_sleep = function (S) {
 	} else {
 		self.r_log.trace({state: state, delay: minDelay},
 		    'sleeping until next TTL expiry');
-		var t = S.timeout(minDelay, function () {
+		S.timeout(minDelay, function () {
 			S.gotoState(state);
 		});
-		t.unref();
 		S.on(this, 'stopAsserted', function () {
 			S.gotoState('init');
 		});
diff --git a/package.json b/package.json
index 6d6b6a8..50e34b5 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "cueball",
-  "version": "2.0.1",
+  "version": "2.1.0",
   "description": "",
   "main": "lib/index.js",
   "dependencies": {
diff --git a/test/pool.test.js b/test/pool.test.js
index 0766a95..a1a3d94 100644
--- a/test/pool.test.js
+++ b/test/pool.test.js
@@ -169,7 +169,7 @@ mod_tape.test('pool with one backend', function (t) {
 
 		function claimAgain() {
 			connections.forEach(function (c) {
-				t.strictEqual(c.refd, false);
+				t.strictEqual(c.refd, true);
 			});
 
 			pool.claim({timeout: 100}, function (err, hdl, conn) {
@@ -704,7 +704,7 @@ mod_tape.test('claim cancellation', function (t) {
 
 		function claimAgain() {
 			connections.forEach(function (c) {
-				t.strictEqual(c.refd, false);
+				t.strictEqual(c.refd, true);
 			});
 
 			var claim = pool.claim({timeout: 100},
-- 
2.21.0

