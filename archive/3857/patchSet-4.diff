From 38e42e72c58adea813ac7fbeebf9016d9466ea03 Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Wed, 27 Apr 2016 23:50:18 +0000
Subject: [PATCH] NAPI-357 Want unit tests for networks created with old
 versions of NAPI

---
 lib/apis/moray.js                             |   9 -
 test/lib/migration.js                         | 136 +------
 test/runtests                                 |   2 +-
 test/unit/longs.test.js                       | 357 ++++++++++++++++++
 .../migration-1.2.0-networks.test.js          |  51 ++-
 5 files changed, 409 insertions(+), 146 deletions(-)
 create mode 100644 test/unit/longs.test.js
 rename test/{integration => unit}/migration-1.2.0-networks.test.js (95%)

diff --git a/lib/apis/moray.js b/lib/apis/moray.js
index 35aa29e..cf50852 100644
--- a/lib/apis/moray.js
+++ b/lib/apis/moray.js
@@ -29,11 +29,9 @@ var VError = require('verror');
 
 
 
-var BUCKETS_CREATED = [];
 // Allow setting this to prefix all created buckets (generally used for
 // testing):
 var BUCKET_PFX = '';
-var TEST_PFX = 'test_';
 
 
 
@@ -184,12 +182,6 @@ function initBucket(moray, bucket, callback) {
                             moray.log.info({ schema: schema },
                                 'initBucket: successfully created bucket %s',
                                 name);
-
-                            // If we're in test mode, add this to the list
-                            // of buckets to clean up after:
-                            if (BUCKET_PFX === TEST_PFX) {
-                                BUCKETS_CREATED.push(name);
-                            }
                         }
 
                         return callback(err2, res);
@@ -420,7 +412,6 @@ function valToArray(params, key) {
 module.exports = {
     arrayToVal: arrayToVal,
     bucketName: bucketName,
-    bucketsCreated: function () { return BUCKETS_CREATED; },
     delObj: delObj,
     filter: ldapFilter,
     getObj: getObj,
diff --git a/test/lib/migration.js b/test/lib/migration.js
index 88902c3..e87bd96 100644
--- a/test/lib/migration.js
+++ b/test/lib/migration.js
@@ -15,10 +15,8 @@
 'use strict';
 
 var assert = require('assert-plus');
-var config = require('./config');
 var fmt = require('util').format;
 var log = require('./log');
-var mod_moray = require('moray');
 var mod_server = require('./server');
 var mod_vasync = require('vasync');
 var napi_moray = require('../../lib/apis/moray');
@@ -49,100 +47,33 @@ function closeClient(t) {
 
 
 function getMorayClient(callback) {
-    if (MORAY_CLIENT) {
-        return callback(null, MORAY_CLIENT);
-    }
-
-    assert.object(config, 'config');
-    assert.object(config.moray, 'config.moray');
     assert.func(callback, 'callback');
 
-    MORAY_CLIENT = mod_moray.createClient({
-        host: config.moray.host,
-        log: log.child({
-            component: 'moray-migrate',
-            level: process.env.LOG_LEVEL || 'fatal'
-        }),
-        port: config.moray.port
-    });
+    if (MORAY_CLIENT) {
+        callback(null, MORAY_CLIENT);
+        return;
+    }
 
-    MORAY_CLIENT.once('connect', function _afterConnect() {
-        return callback(null, MORAY_CLIENT);
+    var log_child = log.child({
+        component: 'moray-migrate',
+        level: process.env.LOG_LEVEL || 'fatal'
     });
-}
-
-
-
-// --- Exports
-
 
+    mod_server.setupMoray(log_child, function (err, moray) {
+        if (err) {
+            callback(err);
+            return;
+        }
 
-/**
- * Delete all test buckets created
- */
-function delAllCreatedBuckets(t) {
-    var created = napi_moray.bucketsCreated();
-    if (created.length === 0) {
-        t.ok(true, 'No buckets created');
-        return t.end();
-    }
+        MORAY_CLIENT = moray;
 
-    getMorayClient(function (_, client) {
-        mod_vasync.forEachParallel({
-            inputs: created,
-            func: function _delBucket(bucketName, cb) {
-                client.delBucket(bucketName, function (delErr) {
-                    t.ifErr(delErr, 'delete bucket ' + bucketName);
-                    return cb();
-                });
-            }
-        }, function () {
-            return t.end();
-        });
+        callback(null, moray);
     });
 }
 
 
-function delAllPreviousTestBuckets(t) {
-    var opts = {
-        noBucketCache: true
-    };
-
-    getMorayClient(function (_, client) {
-        client.listBuckets(opts, function _afterBucketList(lErr, buckets) {
-            var matching = [];
-
-            t.ifErr(lErr, 'list buckets');
-            if (lErr) {
-                return t.end();
-            }
 
-            buckets.forEach(function (bucket) {
-                if (bucket.name.match(/^test_napi/) ||
-                    bucket.name.match(/^test_portolan/)) {
-                    matching.push(bucket.name);
-                }
-            });
-
-            if (matching.length === 0) {
-                t.ok(true, 'No previous test buckets found');
-                return t.end();
-            }
-
-            mod_vasync.forEachParallel({
-                inputs: matching,
-                func: function _delBucket(bucketName, cb) {
-                    client.delBucket(bucketName, function (delErr) {
-                        t.ifErr(delErr, 'delete bucket ' + bucketName);
-                        return cb();
-                    });
-                }
-            }, function () {
-                return t.end();
-            });
-        });
-    });
-}
+// --- Exports
 
 
 /**
@@ -182,12 +113,8 @@ function initTestBucket(t, opts) {
     assert.string(opts.bucket.name, 'opts.bucket.name');
     assert.optionalArrayOfObject(opts.records, 'opts.records');
 
-    napi_moray.setTestPrefix();
     var bucketName = napi_moray.bucketName(opts.bucket.name);
     var client;
-    var origName = opts.bucket.name;
-
-    assert.equal(bucketName, 'test_' + origName, 'bucket has test prefix');
 
     if (opts.records && opts.records.length !== 0) {
         for (var r in opts.records) {
@@ -222,10 +149,7 @@ function initTestBucket(t, opts) {
             napi_moray.initBucket(client, opts.bucket,
                     function _afterInit(initErr) {
                 t.ifErr(initErr, 'initialize bucket ' + bucketName);
-                t.equal(opts.bucket.name, 'test_' + origName,
-                    'prefix added to bucket name');
-
-                return cb(initErr);
+                cb(initErr);
             });
         },
 
@@ -265,33 +189,9 @@ function initTestBucket(t, opts) {
 }
 
 
-function runMigrations(t) {
-    var server = mod_server.get();
-    t.ok(server, 'server');
-
-    if (!server) {
-        return t.end();
-    }
-
-    server.loadInitialData(function () {
-        // We don't really need to do this, but the real NAPI server does
-        // it, so we do to be consistent
-        log.debug('Initial data loaded');
-
-        server.doMigrations(function _afterMigrations(mErr) {
-            t.ifErr(mErr, 'migration err');
-            return t.end();
-        });
-    });
-}
-
-
-
 module.exports = {
     closeClient: closeClient,
-    delAllCreated: delAllCreatedBuckets,
-    delAllPrevious: delAllPreviousTestBuckets,
+    getMorayClient: getMorayClient,
     getMorayObj: getMorayObject,
-    initBucket: initTestBucket,
-    run: runMigrations
+    initBucket: initTestBucket
 };
diff --git a/test/runtests b/test/runtests
index 80612b0..7993927 100755
--- a/test/runtests
+++ b/test/runtests
@@ -118,7 +118,7 @@ if [[ -n "$opt_test_pattern" ]]; then
 else
     # Otherwise the default set we want to skip know *hanging*
     # test cases.
-    hangers="migration-1.2.0-networks.test.js"
+    hangers=""
     for hanger in $hangers; do
         echo "# Excluding hanger test file: $hanger"
         test_files=$(echo "$test_files" | grep -v $hanger)
diff --git a/test/unit/longs.test.js b/test/unit/longs.test.js
new file mode 100644
index 0000000..6eefec8
--- /dev/null
+++ b/test/unit/longs.test.js
@@ -0,0 +1,357 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+/*
+ * No ip_use_strings field unit tests
+ *
+ * Older versions of NAPI used the numeric representation of IPv4 addresses
+ * as keys and for other values. These tests make sure that NAPI continues
+ * to work with networks created before changing to string representations.
+ */
+
+'use strict';
+
+var constants = require('../../lib/util/constants');
+var h = require('./helpers');
+var ipaddr = require('ip6addr');
+var mod_ip = require('../lib/ip');
+var mod_net = require('../lib/net');
+var mod_nic_tag = require('../lib/nic-tag');
+var mod_server = require('../lib/server');
+var mod_uuid = require('node-uuid');
+var test = require('tape');
+var util = require('util');
+
+// --- Globals
+
+
+var MORAY;
+var NAPI;
+var NET_UUID = mod_uuid.v4();
+var ZONE1_UUID = mod_uuid.v4();
+var IPS_BUCKET = util.format('napi_ips_%s', NET_UUID.replace(/-/g, '_'));
+var OLD_IP_SCHEMA = {
+    index: {
+        belongs_to_type: { type: 'string' },
+        belongs_to_uuid: { type: 'string' },
+        owner_uuid: { type: 'string' },
+        ip: { type: 'number', unique: true },
+        reserved: { type: 'boolean' }
+    },
+    options: {
+        version: 2
+    }
+};
+
+// --- Setup
+
+
+test('Initial setup', function (t) {
+    h.reset();
+
+    t.test('create client and server', function (t2) {
+        h.createClientAndServer(function (err, res, moray) {
+            t2.ifError(err, 'server creation');
+            t2.ok(res, 'client');
+            t2.ok(moray, 'moray');
+            NAPI = res;
+            MORAY = moray;
+
+            t2.end();
+        });
+    });
+
+    t.test('create default nic tag', mod_nic_tag.createDefault);
+
+    t.test('create nic tag', function (t2) {
+        mod_nic_tag.create(t2, {
+            name: 'nic_tag'
+        });
+    });
+
+    t.test('create network in moray', function (t2) {
+        var prov_start_ip = ipaddr.parse('10.0.128.30').toLong();
+        var prov_end_ip = ipaddr.parse('10.0.130.254').toLong();
+        var subnet_start_ip = ipaddr.parse('10.0.128.0').toLong();
+        var subnet_end_ip = ipaddr.parse('10.0.135.255').toLong();
+        var resolver = ipaddr.parse('10.0.128.13').toLong();
+        var gateway = ipaddr.parse('10.0.128.1').toLong();
+
+        t2.deepEqual(prov_start_ip, 167804958, 'prov_start_ip');
+        t2.deepEqual(prov_end_ip, 167805694, 'prov_end_ip');
+        t2.deepEqual(subnet_start_ip, 167804928, 'subnet_start_ip');
+        t2.deepEqual(subnet_end_ip, 167806975, 'subnet_end_ip');
+        t2.deepEqual(resolver, 167804941, 'resolver');
+        t2.deepEqual(gateway, 167804929, 'gateway');
+
+        MORAY.putObject('napi_networks', NET_UUID, {
+            'name_str': 'global:admin',
+            'subnet_type': 'ipv4',
+            'nic_tag': 'admin',
+            'uuid': NET_UUID,
+            'vlan_id': 0,
+            'subnet_bits': 21,
+            'provision_start_ip': prov_start_ip,
+            'provision_end_ip': prov_end_ip,
+            'subnet_start_ip': subnet_start_ip,
+            'subnet_end_ip': subnet_end_ip,
+            'owner_uuids': ',' + constants.UFDS_ADMIN_UUID + ',',
+            'resolvers': [ resolver ],
+            'routes': {
+                '168427520/18': gateway,
+                '168361984/18': gateway,
+                '167772160/11': { octets: [ 10, 0, 128, 1 ] }
+            },
+            'gateway': gateway
+        }, {}, function (err, res) {
+            t2.ifError(err, 'creating network');
+            t2.end();
+        });
+    });
+
+    t.test('create ips bucket', function (t2) {
+        MORAY.createBucket(IPS_BUCKET, OLD_IP_SCHEMA, function (err, res) {
+            t2.ifError(err, 'creating ips bucket');
+            t2.end();
+        });
+    });
+
+    t.test('create beginning boundary', function (t2) {
+        MORAY.putObject(IPS_BUCKET, '167804957', {
+            'reserved': true,
+            'ip': 167804957
+        }, {}, function (err, res) {
+            t2.ifError(err, 'creating beginning boundary');
+            t2.end();
+        });
+    });
+
+    t.test('create end boundary', function (t2) {
+        MORAY.putObject(IPS_BUCKET, '167805695', {
+            'ip': 167805695,
+            'reserved': true
+        }, {}, function (err, res) {
+            t2.ifError(err, 'creating end boundary');
+            t2.end();
+        });
+    });
+
+
+    t.test('create broadcast address', function (t2) {
+        MORAY.putObject(IPS_BUCKET, '167806975', {
+            'ip': 167806975,
+            'reserved': true,
+            'belongs_to_type': 'other',
+            'belongs_to_uuid': constants.UFDS_ADMIN_UUID,
+            'owner_uuid': constants.UFDS_ADMIN_UUID
+        }, {}, function (err, res) {
+            t2.ifError(err, 'creating broadcast address');
+            t2.end();
+        });
+    });
+});
+
+
+
+// --- Tests
+
+
+test('get network', function (t) {
+    mod_net.get(t, {
+        params: {
+            uuid: NET_UUID
+        },
+        exp: {
+            family: 'ipv4',
+            gateway: '10.0.128.1',
+            mtu: 1500,
+            name: 'admin',
+            netmask: '255.255.248.0',
+            nic_tag: 'admin',
+            owner_uuids: [ 'aaaaaaaa-aaaa-aaaa-aaaa-000000000000' ],
+            provision_end_ip: '10.0.130.254',
+            provision_start_ip: '10.0.128.30',
+            resolvers: [ '10.0.128.13' ],
+            routes: {
+                '10.0.0.0/11': '10.0.128.1',
+                '10.10.0.0/18': '10.0.128.1',
+                '10.9.0.0/18': '10.0.128.1'
+            },
+            subnet: '10.0.128.0/21',
+            uuid: NET_UUID,
+            vlan_id: 0
+        }
+    });
+});
+
+
+test('get end ip address', function (t) {
+    var BROADCAST_ADDR = {
+        belongs_to_type: 'other',
+        belongs_to_uuid: constants.UFDS_ADMIN_UUID,
+        free: false,
+        ip: '10.0.135.255',
+        network_uuid: NET_UUID,
+        owner_uuid: constants.UFDS_ADMIN_UUID,
+        reserved: true
+    };
+
+    t.test('search by long', function (t2) {
+        mod_ip.get(t2, {
+            net: NET_UUID,
+            ip: '167806975',
+            exp: BROADCAST_ADDR
+        });
+    });
+
+    t.test('search by string', function (t2) {
+        mod_ip.get(t2, {
+            net: NET_UUID,
+            ip: '10.0.135.255',
+            exp: BROADCAST_ADDR
+        });
+    });
+});
+
+
+test('NAPI-319: Update provisioning start', function (t) {
+    t.test('first update', function (t2) {
+        var params = {
+            provision_start_ip: '10.0.128.35'
+        };
+        NAPI.updateNetwork(NET_UUID, params, function (err, res) {
+            t2.ifError(err, 'update provision_start_ip');
+            t2.end();
+        });
+    });
+
+    t.test('second update', function (t2) {
+        var params = {
+            provision_start_ip: '10.0.128.20'
+        };
+        NAPI.updateNetwork(NET_UUID, params, function (err, res) {
+            t2.ifError(err, 'update provision_start_ip');
+            t2.end();
+        });
+    });
+});
+
+
+test('NAPI-319: Update provisioning end', function (t) {
+    t.test('first update', function (t2) {
+        var params = {
+            provision_end_ip: '10.0.130.50'
+        };
+        NAPI.updateNetwork(NET_UUID, params, function (err, res) {
+            t2.ifError(err, 'update provision_end_ip');
+            t2.end();
+        });
+    });
+
+    t.test('second update', function (t2) {
+        var params = {
+            provision_end_ip: '10.0.130.250'
+        };
+        NAPI.updateNetwork(NET_UUID, params, function (err, res) {
+            t2.ifError(err, 'update provision_end_ip');
+            t2.end();
+        });
+    });
+});
+
+
+test('NAPI-371: Series of provisions and deletes', function (t) {
+    var params = {
+        belongs_to_uuid: ZONE1_UUID,
+        belongs_to_type: 'zone',
+        owner_uuid: constants.UFDS_ADMIN_UUID,
+        network_uuid: NET_UUID
+    };
+    var nic;
+
+    t.test('provision nic (first round)', function (t2) {
+        NAPI.provisionNic(NET_UUID, params, function (err, res) {
+            if (h.ifErr(t2, err, 'provision nic')) {
+                t2.end();
+                return;
+            }
+
+            nic = res;
+            t2.ok(nic, 'returned nic');
+            t2.ok(nic.ip, 'returned nic with ip');
+            t2.ok(nic.mac, 'returned nic with mac');
+            t2.end();
+        });
+    });
+
+    t.test('get ip (pre-delete)', function (t2) {
+        mod_ip.get(t2, {
+            net: NET_UUID,
+            ip: nic.ip,
+            exp: {
+                belongs_to_uuid: ZONE1_UUID,
+                belongs_to_type: 'zone',
+                free: false,
+                ip: nic.ip,
+                network_uuid: NET_UUID,
+                owner_uuid: constants.UFDS_ADMIN_UUID,
+                reserved: false
+            }
+        });
+    });
+
+    t.test('delete nic', function (t2) {
+        NAPI.deleteNic(nic.mac, function (err) {
+            t2.ifError(err, 'deleted NIC');
+            t2.end();
+        });
+    });
+
+    t.test('get ip (post-delete)', function (t2) {
+        mod_ip.get(t2, {
+            net: NET_UUID,
+            ip: nic.ip,
+            exp: {
+                free: true,
+                ip: nic.ip,
+                network_uuid: NET_UUID,
+                reserved: false
+            }
+        });
+    });
+
+    t.test('provision nic (second round)', function (t2) {
+        NAPI.provisionNic(NET_UUID, params, function (err, res) {
+            if (h.ifErr(t2, err, 'provision nic')) {
+                t2.end();
+                return;
+            }
+
+            nic = res;
+            t2.ok(nic, 'returned nic');
+            t2.ok(nic.ip, 'returned nic with ip');
+            t2.ok(nic.mac, 'returned nic with mac');
+            t2.end();
+        });
+    });
+
+    t.test('delete nic', function (t2) {
+        NAPI.deleteNic(nic.mac, function (err) {
+            t2.ifError(err, 'deleted NIC');
+            t2.end();
+        });
+    });
+});
+
+
+// --- Teardown
+
+
+test('Stop server', mod_server.close);
diff --git a/test/integration/migration-1.2.0-networks.test.js b/test/unit/migration-1.2.0-networks.test.js
similarity index 95%
rename from test/integration/migration-1.2.0-networks.test.js
rename to test/unit/migration-1.2.0-networks.test.js
index 7835531..3103b7e 100644
--- a/test/integration/migration-1.2.0-networks.test.js
+++ b/test/unit/migration-1.2.0-networks.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -15,6 +15,7 @@
 'use strict';
 
 var constants = require('../../lib/util/constants');
+var h = require('./helpers');
 var mod_ip = require('../lib/ip');
 var mod_jsprim = require('jsprim');
 var mod_migr = require('../lib/migration');
@@ -32,6 +33,7 @@ var extend = mod_jsprim.mergeObjects;
 
 
 
+var NAPI;
 var BUCKETS = {
     adminIPs: ipsBucketV1('napi_ips_07eef409_c6eb_42cb_8712_bb0deaab8108'),
 
@@ -84,8 +86,8 @@ var BUCKETS = {
 };
 
 var VERSIONS = {
-    networks: 3,
-    nics: 2,
+    networks: 4,
+    nics: 3,
     nictags: 1
 };
 
@@ -326,6 +328,7 @@ var EXP = {
             mtu: constants.MTU_DEFAULT,
             name: 'external',
             vlan_id: 0,
+            family: 'ipv4',
             subnet: '10.88.88.0/24',
             netmask: '255.255.255.0',
             provision_start_ip: '10.88.88.3',
@@ -339,6 +342,7 @@ var EXP = {
             mtu: constants.MTU_DEFAULT,
             name: 'admin',
             vlan_id: 0,
+            family: 'ipv4',
             subnet: '10.99.99.0/24',
             netmask: '255.255.255.0',
             provision_start_ip: '10.99.99.38',
@@ -512,13 +516,9 @@ function ipsBucketV1(name) {
 // --- Tests
 
 
-
 test('setup', function (t) {
-    t.test('delete previous test buckets', mod_migr.delAllPrevious);
-});
-
+    h.reset();
 
-test('migrate', function (t) {
     t.test('load initial data: networks', function (t2) {
         mod_migr.initBucket(t2, {
             bucket: BUCKETS.networks,
@@ -551,11 +551,24 @@ test('migrate', function (t) {
     });
 
 
-    t.test('create server', mod_server.create);
-
-
-    t.test('run migrations', mod_migr.run);
+    t.test('create server', function (t2) {
+        mod_migr.getMorayClient(function (err, client) {
+            if (h.ifErr(t2, err, 'got Moray sandbox client')) {
+                t2.end();
+                return;
+            }
 
+            mod_server._create({ moray: client }, function (err2, res) {
+                if (h.ifErr(t2, err2, 'started NAPI server')) {
+                    t.end();
+                    return;
+                }
+                NAPI = res;
+                t2.ok(NAPI, 'have NAPI client object');
+                t2.end();
+            });
+        });
+    });
 });
 
 test('networks', function (t) {
@@ -656,6 +669,8 @@ test('nics', function (t) {
             key: NICS.serverNoIP,
             exp: extend(INITIAL.nics[0].value, {
                 nic_tags_provided_arr: [ 'external' ],
+                modified_timestamp: 0,
+                created_timestamp: 0,
                 v: VERSIONS.nics
             })
         });
@@ -666,6 +681,8 @@ test('nics', function (t) {
         var exp = extend(INITIAL.nics[1].value, {
             ipaddr: '10.99.99.7',
             nic_tags_provided_arr: [ 'admin' ],
+            modified_timestamp: 0,
+            created_timestamp: 0,
             v: VERSIONS.nics
         });
         delete exp.free;
@@ -681,6 +698,8 @@ test('nics', function (t) {
     t.test('moray: zone nic with IP', function (t2) {
         var exp = extend(INITIAL.nics[2].value, {
             ipaddr: '10.99.99.8',
+            modified_timestamp: 0,
+            created_timestamp: 0,
             v: VERSIONS.nics
         });
         delete exp.free;
@@ -745,10 +764,6 @@ test('nic tags', function (t) {
 });
 
 
-test('teardown', function (t) {
-    t.test('shutdown server', mod_server.close);
+test('delete nics', mod_nic.delAllCreated);
 
-    t.test('delete test buckets', mod_migr.delAllCreated);
-
-    t.test('close moray client', mod_migr.closeClient);
-});
+test('teardown', mod_server.close);
-- 
2.21.0

