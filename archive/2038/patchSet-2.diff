commit a4d0bc5d1fadf3aecc7abd3ba94ba543146d4105 (refs/changes/38/2038/2)
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2017-06-06T17:00:02+02:00 (2 years, 4 months ago)
    
    ZAPI-784 Upgrade to Moray client v3
    Reviewed by: Josh Wilsdon <josh@wilsdon.ca>
    Approved by: Josh Wilsdon <josh@wilsdon.ca>

diff --git a/lib/apis/moray.js b/lib/apis/moray.js
index d51b009..bf9e878 100644
--- a/lib/apis/moray.js
+++ b/lib/apis/moray.js
@@ -24,6 +24,7 @@ var ldapjs = require('ldap-filter');
 var restify = require('restify');
 var sprintf = require('sprintf').sprintf;
 var util = require('util');
+var verror = require('verror');
 
 var errors = require('../errors');
 var common = require('./../common');
@@ -143,22 +144,16 @@ Moray.prototype.setCfPublisher = function setCfPublisher(cfPublisher) {
  */
 Moray.prototype.connect = function () {
     var self = this;
+    var config;
     var log = this.log;
-    var retry = this.options.retry || {};
     this.log.debug('Connecting to moray...');
 
-    var connection = this.connection = moray.createClient({
-        connectTimeout: this.options.connectTimeout || 200,
-        log: this.log,
-        host: this.options.host,
-        port: this.options.port,
-        reconnect: true,
-        retry: (this.options.retry === false ? false : {
-            retries: Infinity,
-            minTimeout: retry.minTimeout || 1000,
-            maxTimeout: retry.maxTimeout || 16000
-        })
-    });
+    assert.object(self.options, 'options');
+
+    config = jsprim.deepCopy(self.options);
+    config.log = log;
+
+    var connection = this.connection = moray.createClient(config);
 
 
     connection.on('connect', function () {
@@ -228,7 +223,7 @@ Moray.prototype.ping = function (callback) {
  * Gets a VM object from moray. uuid is required param and owner_uuid is
  * optional
  */
-Moray.prototype.getVm = function (params, cb) {
+Moray.prototype.getVm = function getVm(params, cb) {
     var uuid = params.uuid;
     var owner = params.owner_uuid;
     var filter = '';
@@ -674,7 +669,7 @@ function computeDiff(oldObject, newObject, log) {
  * Puts a VM. If it doesn't exist it gets created, if it does exist it gets
  * updated. We no longer need to execute partial updates
  */
-Moray.prototype.putVm = function (uuid, vm, oldVm, cb) {
+Moray.prototype.putVm = function putVm(uuid, vm, oldVm, cb) {
     var self = this;
 
     assert.uuid(uuid, 'uuid');
@@ -761,7 +756,7 @@ Moray.prototype.delVms = function delVms(params, cb) {
 /*
  * Marks a VM as destroyed
  */
-Moray.prototype.markAsDestroyed = function (vm, callback) {
+Moray.prototype.markAsDestroyed = function markAsDestroyed(vm, callback) {
     assert.object(vm, 'vm');
     assert.func(callback, 'callback');
 
@@ -999,7 +994,7 @@ Moray.prototype._setupBuckets = function (cb) {
     async.mapSeries(buckets, function (bucket, next) {
         self._getBucket(bucket.name, function (err, bck) {
             if (err) {
-                if (err.name === 'BucketNotFoundError') {
+                if (verror.hasCauseWithName(err, 'BucketNotFoundError')) {
                     self._createBucket(bucket.name, bucket.indices, next);
                 } else {
                     next(err);
@@ -1141,7 +1136,7 @@ Moray.prototype.getVmRoleTags = function (uuid, cb) {
     this.connection.getObject(VM_ROLE_TAGS_BUCKET_NAME, uuid,
         function (err, obj) {
         if (err) {
-            if (err.name === 'ObjectNotFoundError') {
+            if (verror.hasCauseWithName(err, 'ObjectNotFoundError')) {
                 cb(null, []);
             } else {
                 cb(err);
@@ -1167,7 +1162,8 @@ Moray.prototype.putVmRoleTags = function (uuid, roleTags, cb) {
  */
 Moray.prototype.delVmRoleTags = function (uuid, cb) {
     this.connection.delObject(VM_ROLE_TAGS_BUCKET_NAME, uuid, function (err) {
-        if (!err || (err && err.name === 'ObjectNotFoundError')) {
+        if (!err ||
+            (err && verror.hasCauseWithName(err, 'ObjectNotFoundError'))) {
             cb(null);
         } else {
             cb(err);
diff --git a/lib/common/validation.js b/lib/common/validation.js
index b04d6cd..023c351 100644
--- a/lib/common/validation.js
+++ b/lib/common/validation.js
@@ -21,6 +21,7 @@ var libuuid = require('libuuid');
 var net = require('net');
 var restify = require('restify');
 var tritonTags = require('triton-tags');
+var verror = require('verror');
 
 var common = require('./vm-common');
 var errors = require('../errors');
@@ -901,7 +902,7 @@ function validatePackageValues(papi, params, errs, callback) {
 
     papi.getPackage(params.billing_id, function (err, pkg) {
         if (err) {
-            if (err.name === 'ResourceNotFoundError') {
+            if (verror.hasCauseWithName(err, 'ResourceNotFoundError')) {
                 errs.push({
                     field: 'billing_id',
                     code: 'Invalid',
@@ -1048,7 +1049,7 @@ exports.validateCreateVmParams = function (vmapi, params, callback) {
     function validateServer(next) {
         vmapi.cnapi.getServer(params.server_uuid, function (err) {
             if (err) {
-                if (err.name === 'ResourceNotFoundError') {
+                if (verror.hasCauseWithName(err, 'ResourceNotFoundError')) {
                     errs.push({
                         field: 'server_uuid',
                         code: 'Invalid',
@@ -1071,7 +1072,7 @@ exports.validateCreateVmParams = function (vmapi, params, callback) {
 
         vmapi.imgapi.getImage(img_uuid, function (err, image) {
             if (err) {
-                if (err.name === 'ResourceNotFoundError') {
+                if (verror.hasCauseWithName(err, 'ResourceNotFoundError')) {
                     errs.push({
                         field: 'image_uuid',
                         code: 'Invalid',
@@ -1273,7 +1274,7 @@ exports.validateUpdateVmParams = function (vmapi, vm, obj, callback) {
         // images that can be deleted from the IMGAPI repository
         vmapi.imgapi.getImage(vm.image_uuid, function (err, image) {
             if (err) {
-                if (err.name === 'ResourceNotFoundError') {
+                if (verror.hasCauseWithName(err, 'ResourceNotFoundError')) {
                     return vmapi.cnapi.getImage(
                         vm.server_uuid,
                         vm.image_uuid,
@@ -1287,7 +1288,7 @@ exports.validateUpdateVmParams = function (vmapi, vm, obj, callback) {
 
         function onImage(err, image) {
             if (err) {
-                if (err.name === 'ResourceNotFoundError') {
+                if (verror.hasCauseWithName(err, 'ResourceNotFoundError')) {
                     errs.push(errors.invalidParamErr(
                         'image_uuid',
                         err.message));
diff --git a/package.json b/package.json
index 7183a4a..39fe63b 100644
--- a/package.json
+++ b/package.json
@@ -16,7 +16,7 @@
     "jsprim": "^1.2.2",
     "ldap-filter": "0.3.3",
     "libuuid": "0.2.1",
-    "moray": "git+https://github.com/joyent/node-moray.git#fd5781bc25a9bfe2ba82167664639753fb9f0ca5",
+    "moray": "3.1.1",
     "nodeunit": "0.9.1",
     "once": "^1.3.3",
     "restify": "4.3.0",
@@ -27,6 +27,7 @@
     "trace-event": "1.3.0",
     "triton-tags": "^1.1.4",
     "vasync": "^1.6.3",
+    "verror": "1.10.0",
     "wf-client": "0.2.1"
   },
   "sdcDependencies": {
diff --git a/sapi_manifests/vmapi/template b/sapi_manifests/vmapi/template
index cda96e1..ecad82c 100644
--- a/sapi_manifests/vmapi/template
+++ b/sapi_manifests/vmapi/template
@@ -1,4 +1,7 @@
 {
+    "binder": {
+        "domain": "{{{BINDER_SERVICE}}}"
+    },
     "logLevel": "debug",
     "maxSockets": 100,
     "useVmAgent": true,
@@ -56,12 +59,9 @@
         "url": "http://{{{PAPI_SERVICE}}}"
     },
     "moray": {
-        "host": "{{{MORAY_SERVICE}}}",
-        "port": 2020,
-        "connectTimeout": 200,
-        "retry": {
-            "retries": 2,
-            "minTimeout": 500
+        "srvDomain": "{{MORAY_SERVICE}}",
+        "cueballOptions": {
+            "resolvers": ["{{{BINDER_SERVICE}}}"]
         }
     },
     "changefeed": {
