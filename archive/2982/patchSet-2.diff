commit d15dbaebcafc593490ecd3ad433add5a2ac2a791 (refs/changes/82/2982/2)
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2017-11-23T11:42:14+01:00 (1 year, 10 months ago)
    
    TOOLS-1930 'sdcadm post-setup service' to use sdcadm current server as default
    Reviewed by: Trent Mick <trentm@gmail.com>
    Approved by: Trent Mick <trentm@gmail.com>

diff --git a/lib/post-setup/cloudapi.js b/lib/post-setup/cloudapi.js
index e57cb49..8b8cad6 100644
--- a/lib/post-setup/cloudapi.js
+++ b/lib/post-setup/cloudapi.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -13,10 +13,186 @@
  */
 
 var assert = require('assert-plus');
+var vasync = require('vasync');
 
 var common = require('../common');
+var errors = require('../errors');
+var svcadm = require('../svcadm');
 
-//---- internal support stuff
+// --- internal support stuff
+
+
+function createCloudapiInstance(opts, callback) {
+    assert.object(opts, 'opts');
+    assert.object(opts.sdcadm, 'opts.sdcadm');
+    assert.func(opts.progress, 'opts.progress');
+    assert.func(callback, 'callback');
+
+    var progress = opts.progress;
+    var sdcadm = opts.sdcadm;
+    var sapi = opts.sdcadm.sapi;
+
+    var networks;
+    var cloudapisvc;
+    var changes = [];
+    var img, history;
+
+    // find cloudapi service, get service uuid
+    // use sapi.createInstance to create the service
+
+    vasync.pipeline({ arg: {}, funcs: [
+        function (_, next) {
+            sapi.listServices({ name: 'cloudapi' }, function (err, svcs) {
+                if (err) {
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
+                }
+                if (svcs.length !== 1) {
+                    next(new Error('expected 1 cloudapi service, found %d',
+                        svcs.length));
+                    return;
+                }
+                cloudapisvc = svcs[0];
+                next();
+            });
+        },
+        function (_, next) {
+            getNetworksAdminExternal(function (err, nets) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+                networks = nets;
+                next();
+            });
+        },
+        function (_, next) {
+            sdcadm.updates.listImages({
+                name: 'cloudapi'
+            }, function (err, images) {
+                if (err) {
+                    next(new errors.SDCClientError(err, 'updates'));
+                } else if (images && images.length) {
+                    img = images[images.length - 1]; // XXX presuming sorted
+                    next();
+                } else {
+                    next(new errors.UpdateError('no "cloudapi" image found'));
+                }
+            });
+        },
+        function (_, next) {
+            changes.push({
+                image: img,
+                service: cloudapisvc,
+                type: 'add-instance',
+                inst: {
+                    type: 'vm',
+                    alias: opts.alias,
+                    version: img.version,
+                    service: 'cloudapi',
+                    image: img.uuid
+                }
+            });
+            sdcadm.history.saveHistory({
+                changes: changes
+            }, function (err, hst) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+                history = hst;
+                next();
+            });
+        },
+        function getHeadnode(ctx, next) {
+            sdcadm.getCurrServerUuid(function (err, hn) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+                ctx.headnodeUuid = hn;
+                next();
+            });
+        },
+        function (ctx, next) {
+            var cOpts = {
+                params: {
+                    server_uuid: ctx.headnodeUuid,
+                    alias: opts.alias,
+                    networks: [
+                        {
+                            uuid: networks.admin.uuid
+                        },
+                        {
+                            primary: true,
+                            uuid: networks.external.uuid
+                        }
+                    ]
+                }
+            };
+            sapi.createInstance(cloudapisvc.uuid, cOpts, function (err, inst) {
+                if (err) {
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
+                }
+                changes[0].inst.zonename = changes[0].inst.uuid = inst.uuid;
+                next();
+            });
+        },
+        function hupHermes(_, next) {
+            svcadm.restartHermes({
+                sdcadm: sdcadm,
+                log: sdcadm.log,
+                progress: progress
+            }, next);
+        }
+    ] }, function (err) {
+        if (!history) {
+            sdcadm.log.warn('History not set for post-setup cloudapi');
+            callback(err);
+            return;
+        }
+        history.changes = changes;
+        if (err) {
+            history.error = err;
+        }
+        // No need to add `history.finished` here, History instance will do
+        sdcadm.history.updateHistory(history, function (err2) {
+            if (err) {
+                callback(err);
+            } else if (err2) {
+                callback(err2);
+            } else {
+                progress('cloudapi0 zone created');
+                callback();
+            }
+        });
+    });
+
+    function getNetworksAdminExternal(cb) {
+        var napi = sdcadm.napi;
+        var foundnets = {};
+
+        napi.listNetworks({
+            name: ['admin', 'external']
+        }, function listNetworksCb(listerr, nets) {
+            if (listerr) {
+                cb(new errors.SDCClientError(listerr, 'sapi'));
+                return;
+            }
+
+            if (!nets.length) {
+                cb(new Error('Couldn\'t find admin network in NAPI'));
+                return;
+            }
+            for (var i in nets) {
+                foundnets[nets[i].name] = nets[i];
+            }
+
+            cb(null, foundnets);
+        });
+    }
+}
 
 function Cloudapi() {}
 
@@ -40,23 +216,27 @@ Cloudapi.prototype.execute = function cExecute(options, cb) {
 
     function onInstances(err, insts) {
         if (err) {
-            return cb(err);
+            cb(err);
+            return;
         }
 
         log.info({insts: insts}, '%d existing cloudapi insts', insts.length);
         if (insts.length === 1) {
             progress('Already have a cloudapi: vm %s (%s)',
                 insts[0].instance, insts[0].alias);
-            return cb();
+            cb();
+            return;
         } else if (insts.length > 1) {
             progress('Already have %d cloudapi instances: vm %s (%s), ...',
                 insts.length, insts[0].instance, insts[0].alias);
-            return cb();
+            cb();
+            return;
         }
 
-        sdcadm.createCloudapiInstance({
+        createCloudapiInstance({
             alias: 'cloudapi0',
-            progress: progress
+            progress: progress,
+            sdcadm: sdcadm
         }, cb);
     }
 
@@ -65,13 +245,16 @@ Cloudapi.prototype.execute = function cExecute(options, cb) {
 
 
 
-//---- CLI
+// --- CLI
 
 function do_cloudapi(subcmd, opts, args, cb) {
     var self = this;
     if (opts.help) {
         this.do_help('help', {}, [subcmd], cb);
         return;
+    } else if (args.length > 0) {
+        cb(new errors.UsageError('too many args: ' + args));
+        return;
     }
 
     var proc = new Cloudapi();
@@ -83,7 +266,8 @@ function do_cloudapi(subcmd, opts, args, cb) {
     function setupCloudapiCb(err) {
         if (err) {
             self.top.progress('CloudAPI setup failed');
-            return cb(err);
+            cb(err);
+            return;
         }
         cb();
     }
@@ -120,7 +304,7 @@ do_cloudapi.options = [
 
 
 
-//---- exports
+// --- exports
 
 module.exports = {
     do_cloudapi: do_cloudapi
diff --git a/lib/post-setup/volapi.js b/lib/post-setup/volapi.js
index 4fd2ee3..06ca821 100644
--- a/lib/post-setup/volapi.js
+++ b/lib/post-setup/volapi.js
@@ -315,14 +315,13 @@ function do_volapi(subcmd, opts, args, cb) {
         // Get headnode's server UUID, which is needed to provision services
         // instances in next tasks below.
         function getHeadnode(ctx, next) {
-            self.sdcadm.cnapi.listServers({
-                headnode: true
-            }, function (err, servers) {
+            self.sdcadm.getCurrServerUuid(function (err, hn) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'cnapi'));
+                    next(err);
+                    return;
                 }
-                ctx.headnode = servers[0];
-                return next();
+                ctx.headnodeUuid = hn;
+                next();
             });
         },
 
@@ -390,7 +389,7 @@ function do_volapi(subcmd, opts, args, cb) {
             var instOpts = {
                 params: {
                     alias: 'volapi0',
-                    server_uuid: ctx.headnode.uuid
+                    server_uuid: ctx.headnodeUuid
                 }
             };
             self.sdcadm.sapi.createInstance(ctx.volapiSvc.uuid, instOpts,
diff --git a/lib/sdcadm.js b/lib/sdcadm.js
index cfcb834..0adc4d8 100644
--- a/lib/sdcadm.js
+++ b/lib/sdcadm.js
@@ -5145,165 +5145,6 @@ SdcAdm.prototype.checkHealth = function checkHealth(opts, cb) {
     });
 };
 
-SdcAdm.prototype.createCloudapiInstance =
-function createCloudapiInstance(opts, callback) {
-    var self = this;
-    var sapi = self.sapi;
-    assert.func(opts.progress, 'opts.progress');
-
-    var networks;
-    var progress = opts.progress;
-    var cloudapisvc;
-    var changes = [];
-    var img, history;
-
-    // find cloudapi service, get service uuid
-    // use sapi.createInstance to create the service
-
-    vasync.pipeline({ arg: {}, funcs: [
-        function (_, next) {
-            sapi.listServices({ name: 'cloudapi' }, function (err, svcs) {
-                if (err) {
-                    return next(new errors.SDCClientError(err, 'sapi'));
-                }
-                if (svcs.length !== 1) {
-                    return next(new Error(
-                        'expected 1 cloudapi service, found %d', svcs.length));
-                }
-                cloudapisvc = svcs[0];
-                next();
-            });
-        },
-        function (_, next) {
-            getNetworksAdminExternal({}, function (err, nets) {
-                if (err) {
-                    return next(err);
-                }
-                networks = nets;
-                next();
-            });
-        },
-        function (_, next) {
-            self.updates.listImages({
-                name: 'cloudapi'
-            }, function (err, images) {
-                if (err) {
-                    next(new errors.SDCClientError(err, 'updates'));
-                } else if (images && images.length) {
-                    img = images[images.length - 1]; //XXX presuming sorted
-                    next();
-                } else {
-                    next(new errors.UpdateError('no "cloudapi" image found'));
-                }
-            });
-        },
-        function (_, next) {
-            changes.push({
-                image: img,
-                service: cloudapisvc,
-                type: 'add-instance',
-                inst: {
-                    type: 'vm',
-                    alias: opts.alias,
-                    version: img.version,
-                    service: 'cloudapi',
-                    image: img.uuid
-                }
-            });
-            self.history.saveHistory({
-                changes: changes
-            }, function (err, hst) {
-                if (err) {
-                    return next(err);
-                }
-                history = hst;
-                return next();
-            });
-        },
-        function getHeadnode(ctx, next) {
-            self.getCurrServerUuid(function (err, hn) {
-                if (err) {
-                    next(err);
-                    return;
-                }
-                ctx.headnodeUuid = hn;
-                next();
-            });
-        },
-        function (ctx, next) {
-            var cOpts = {
-                params: {
-                    server_uuid: ctx.headnodeUuid,
-                    alias: opts.alias,
-                    networks: [
-                        {
-                            uuid: networks.admin.uuid
-                        },
-                        {
-                            primary: true,
-                            uuid: networks.external.uuid
-                        }
-                    ]
-                }
-            };
-            sapi.createInstance(cloudapisvc.uuid, cOpts, function (err, inst) {
-                if (err) {
-                    return next(new errors.SDCClientError(err, 'sapi'));
-                }
-                changes[0].inst.zonename = changes[0].inst.uuid = inst.uuid;
-                next();
-            });
-        },
-        function hupHermes(_, next) {
-            svcadm.restartHermes({
-                sdcadm: self,
-                log: self.log,
-                progress: progress
-            }, next);
-        }
-    ] }, function (err) {
-        if (!history) {
-            self.log.warn('History not set for post-setup cloudapi');
-            return callback(err);
-        }
-        history.changes = changes;
-        if (err) {
-            history.error = err;
-        }
-        // No need to add `history.finished` here, History instance will do
-        self.history.updateHistory(history, function (err2, hist2) {
-            if (err) {
-                callback(err);
-            } else if (err2) {
-                callback(err2);
-            } else {
-                progress('cloudapi0 zone created');
-                callback();
-            }
-        });
-    });
-
-    function getNetworksAdminExternal(err, cb) {
-        var napi = self.napi;
-        var foundnets = {};
-
-        napi.listNetworks({ name: ['admin', 'external'] },
-        function (listerr, nets) {
-            if (listerr) {
-                return cb(new errors.SDCClientError(listerr, 'sapi'));
-            }
-
-            if (!nets.length) {
-                return cb(new Error('Couldn\'t find admin network in NAPI'));
-            }
-            for (var i in nets) {
-                foundnets[nets[i].name] = nets[i];
-            }
-
-            cb(null, foundnets);
-        });
-    }
-};
 
 // Extracted from setupCommonExternalNics b/c it's also used by DownloadImages
 // to check if the reason for an IMGAPI failure could be the lack of external
diff --git a/lib/svcadm.js b/lib/svcadm.js
index 82622a9..98dc9df 100644
--- a/lib/svcadm.js
+++ b/lib/svcadm.js
@@ -5,21 +5,22 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent Inc.
  */
 
 /*
  * A library to exec `svcadm` commands.
  */
 
-var assert = require('assert-plus');
-var ur = require('./ur');
 var format = require('util').format;
 
+var assert = require('assert-plus');
+
 var common = require('./common');
 var execFilePlus = common.execFilePlus;
 var errors = require('./errors');
 var InternalError = errors.InternalError;
+var ur = require('./ur');
 
 /**
  * Call `svcadm <command> FMRI`.
@@ -41,9 +42,10 @@ function svcadm(cmd, args, cb) {
     assert.string(cmd, 'cmd');
     var cmds = ['enable', 'disable', 'restart', 'refresh'];
     if (cmds.indexOf(cmd) === -1) {
-        return cb(new InternalError({
+        cb(new InternalError({
             message: format('Unknown svcadm %s command', cmd)
         }));
+        return;
     }
     assert.object(args, 'args');
     var fmri = (args.fmri && !Array.isArray(args.fmri) ?
@@ -146,31 +148,53 @@ function restartHermes(opts, cb) {
         name: 'sdc'
     }, function (svcErr, svcs) {
         if (svcErr) {
-            return cb(svcErr);
+            cb(svcErr);
+            return;
         }
         if (!svcs.length) {
-            return cb(new errors.SDCClientError(new Error(
+            cb(new errors.SDCClientError(new Error(
                 'Cannot find sdc service'), 'sapi'));
+            return;
         }
         svc = svcs[0];
         opts.sdcadm.sapi.listInstances({
             service_uuid: svc.uuid
         }, function (instErr, insts) {
             if (instErr) {
-                return cb(instErr);
+                cb(instErr);
+                return;
             }
 
             if (!insts.length) {
-                return cb(new errors.SDCClientError(new Error(
+                cb(new errors.SDCClientError(new Error(
                     'Unable to find sdc instance'), 'sapi'));
+                return;
             }
-
+            // Assume we just have a single sdc instance for now:
             inst = insts[0];
-            return svcadmRestart({
+            var hermesOpts = {
                 fmri: 'hermes',
                 zone: inst.uuid,
                 log: opts.log
-            }, cb);
+            };
+            opts.sdcadm.vmapi.getVm({
+                uuid: inst.uuid
+            }, function getVmCb(getVmErr, vm) {
+                if (getVmErr) {
+                    cb(new errors.SDCClientError(new Error(
+                        'Unable to find sdc VM'), 'vmapi'));
+                    return;
+                }
+                opts.sdcadm.getCurrServerUuid(function gCsCb(_, serverUuid) {
+                    // No need to use Ur if we're running sdcadm from the same
+                    // server the sdc instance is running:
+                    if (serverUuid !== vm.server_uuid) {
+                        hermesOpts.server_uuid = vm.server_uuid;
+                    }
+                    svcadmRestart(hermesOpts, cb);
+                });
+
+            });
         });
     });
 }
