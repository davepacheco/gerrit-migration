From 2f604cada4ab78bfaecca0dcc2916bdc686e2ee6 Mon Sep 17 00:00:00 2001
From: Todd Whiteman <todd.whiteman@joyent.com>
Date: Wed, 1 May 2019 07:57:23 -0700
Subject: [PATCH] TRITON-1407 Migration sync fails with a snapshot out of space
 error for bhyve zones

---
 lib/backends/smartos/tasks/machine_migrate.js | 292 +++++++++++-------
 package.json                                  |   2 +-
 2 files changed, 187 insertions(+), 107 deletions(-)

diff --git a/lib/backends/smartos/tasks/machine_migrate.js b/lib/backends/smartos/tasks/machine_migrate.js
index 1ed40af..8a8f630 100644
--- a/lib/backends/smartos/tasks/machine_migrate.js
+++ b/lib/backends/smartos/tasks/machine_migrate.js
@@ -205,6 +205,154 @@ function zfsError(prefixMsg, error, stderr) {
 }
 
 
+function getFilesystemDetails(callback) {
+    var self = this;
+
+    var log = self.log;
+    var payload = self.req.params;
+
+    assert.object(payload, 'payload');
+    assert.object(payload.vm, 'payload.vm');
+
+    var vm = payload.vm;
+
+    var cmd = '/usr/sbin/zfs';
+    var args = [
+        'list',
+        '-Hp',
+        '-o',
+        'quota,reservation',
+        vm.zfs_filesystem
+    ];
+
+    log.debug({cmd: cmd, args: args}, 'getFilesystemDetails');
+
+    child_process.execFile(cmd, args, gExecFileDefaults,
+            function _execZfsListQuotaCb(err, stdout, stderr) {
+        if (err) {
+            log.error('zfs list error:', err, ', stderr:', stderr);
+            self.fatal(new zfsError('zfs list failure', err, stderr));
+            return;
+        }
+
+        // Note that we are leaving these numbers as strings.
+        var values = stdout.trim().split('\t');
+        var result = {
+            quotaStr: values[0],
+            reservationStr: values[1]
+        };
+
+        log.debug('getFilesystemDetails:: result:', result);
+        self.finish(result);
+    });
+}
+
+
+function removeZfsQuota(callback) {
+    var self = this;
+
+    var log = self.log;
+    var payload = self.req.params;
+
+    assert.object(payload, 'payload');
+    assert.object(payload.vm, 'payload.vm');
+
+    var vm = payload.vm;
+
+    var cmd = '/usr/sbin/zfs';
+    var args = [
+        'set',
+        'quota=none',
+        vm.zfs_filesystem
+    ];
+
+    log.debug({cmd: cmd, args: args}, 'removeZfsQuota');
+
+    child_process.execFile(cmd, args, gExecFileDefaults,
+            function _execZfsSetQuotaCb(err, stdout, stderr) {
+        if (err) {
+            log.error('zfs set error:', err, ', stderr:', stderr);
+            self.fatal(new zfsError('zfs set failure', err, stderr));
+            return;
+        }
+
+        self.finish();
+    });
+}
+
+
+function restoreZfsQuota(callback) {
+    var self = this;
+
+    var log = self.log;
+    var payload = self.req.params;
+
+    assert.object(payload, 'payload');
+    assert.object(payload.vm, 'payload.vm');
+    assert.string(payload.vm.zfs_filesystem, 'payload.vm.zfs_filesystem');
+
+    var vm = payload.vm;
+
+    // Determine what the current used size is, then set the zfs filesystem
+    // quota to that value.
+    vasync.pipeline({arg: {}, funcs: [
+        function getUsedSize(ctx, next) {
+            var cmd = '/usr/sbin/zfs';
+            var args = [
+                'list',
+                '-Hp',
+                '-o',
+                'used',
+                vm.zfs_filesystem
+            ];
+
+            log.debug({cmd: cmd, args: args}, 'restoreZfsQuota');
+
+            child_process.execFile(cmd, args, gExecFileDefaults,
+                    function _execZfsListUsedSizeCb(err, stdout, stderr) {
+                if (err) {
+                    log.error('zfs list error:', err, ', stderr:', stderr);
+                    next(new zfsError('zfs list failure', err, stderr));
+                    return;
+                }
+
+                ctx.quotaStr = stdout.trim();
+                next();
+            });
+        },
+
+        function setQuota(ctx, next) {
+            var cmd = '/usr/sbin/zfs';
+            var args = [
+                'set',
+                'quota=' + ctx.quotaStr,
+                vm.zfs_filesystem
+            ];
+
+            log.debug({cmd: cmd, args: args}, 'setQuota');
+
+            child_process.execFile(cmd, args, gExecFileDefaults,
+                    function _execZfsSetQuotaCb(err, stdout, stderr) {
+                if (err) {
+                    log.error('zfs set error:', err, ', stderr:', stderr);
+                    next(new zfsError('zfs set failure', err, stderr));
+                    return;
+                }
+
+                next();
+            });
+        }
+    ]}, function _pipelineCb(err) {
+        if (err) {
+            self.fatal(err);
+            return;
+        }
+
+        self.finish();
+    });
+}
+
+
 function deleteSnapshot(snapshot, log, callback) {
     assert.string(snapshot, 'snapshot');
     assert.object(log, 'log');
@@ -250,7 +398,6 @@ function estimate(callback) {
 
     var estimatedSize = 0;
     var vm = payload.vm;
-    var isDocker = (vm.brand === 'lx' && vm.docker === true);
 
     // This is the main context for each dataset sync operation.
     var datasets = [vm.zfs_filesystem];
@@ -265,121 +412,46 @@ function estimate(callback) {
         });
     }
 
-    function estimateOneDataset(dataset, next) {
-        var ctx = {
-            snapshot: dataset + '@' + SNAPSHOT_NAME_PREFIX
-        };
+    function estimateOneDataset(dataset, cb) {
+        var cmd = '/usr/sbin/zfs';
+        var args = [
+            'list',
+            '-p', // computer parseable
+            '-r', // recursive
+            '-H', // no headers
+            '-o', 'usedds',
+            dataset
+        ];
 
-        vasync.pipeline({funcs: [
-            // Delete any existing migration estimate snapshot.
-            function deletePreviousSnapshot(_, cb) {
-                deleteSnapshot(ctx.snapshot, log, cb);
-            },
-
-            // Create a temporary snapshot to get an estimate.
-            function createSnapshot(_, cb) {
-                var cmd = '/usr/sbin/zfs';
-                var args = [
-                    'snapshot',
-                    '-r',
-                    ctx.snapshot
-                ];
-
-                log.debug({cmd: cmd, args: args}, 'zfs snapshot');
-
-                child_process.execFile(cmd, args, gExecFileDefaults,
-                        function _execZfsSnapshotCb(err, stdout, stderr) {
-                    if (err) {
-                        log.error('zfs snapshot error:', err,
-                            ', stderr:', stderr);
-                            cb(new zfsError('zfs snapshot failure',
-                                err, stderr));
-                        return;
-                    }
-
-                    ctx.snapshotCreated = true;
-                    cb();
-                });
-            },
-
-            // Get the estimate for the snapshot.
-            function getEstimate(_, cb) {
-                var replicateArg = '--replicate';
-
-                // Docker datasets are created on demand for each CN, so they
-                // will always be different between each CN. Thus we don't want
-                // the usual --replicate argument (as that will expect the
-                // origin dataset to be the same) - we want a full send instead.
-                if (isDocker) {
-                    replicateArg = '--props';
-                }
+        log.info({cmd: cmd, args: args}, 'getEstimate');
 
-                var cmd = '/usr/sbin/zfs';
-                var args = [
-                    'send',
-                    '--dryrun',
-                    '--parsable',
-                    replicateArg,
-                    ctx.snapshot
-                ];
-
-                log.info({cmd: cmd, args: args}, 'getEstimate');
-
-                child_process.execFile(cmd, args, gExecFileDefaults,
-                        function _execZfsSendEstimateCb(error, stdout, stderr) {
-                    if (error) {
-                        log.error('zfs snapshot error:', error,
-                            ', stderr:', stderr);
-                        cb(zfsError('zfs snapshot error', error, stderr));
-                        return;
-                    }
-
-                    var lines = stdout.trim().split('\n');
-                    var lastLine = lines.splice(-1)[0].trim();
-                    log.trace('getEstimate:: lastLine: %s', lastLine);
-
-                    var match = lastLine.match(/^size\s+(\d+)$/);
-                    if (!match) {
-                        log.error('Unable to get zfs send estimate, stdout:',
-                            stdout);
-                        cb(new Error('Unable to get zfs send estimate'));
-                        return;
-                    }
-
-                    log.debug({dataset: dataset, estimate: match[1]},
-                        'getEstimate');
-
-                    estimatedSize += Number(match[1]);
-
-                    cb();
-                });
-            },
-
-            // Delete the created migration estimate snapshot.
-            function cleanupSnapshot(_, cb) {
-                deleteSnapshot(ctx.snapshot, log, cb);
-            }
-
-        ]}, function _onEstimateOneDatasetPipelineCb(err) {
-            if (err) {
-                if (ctx.snapshotCreated) {
-                    deleteSnapshot(ctx.snapshot, log, function _deleteCb(err2) {
-                        // Ignoring err2 and using original err.
-                        next(err);
-                        return;
-                    });
-                }
-                next(err);
+        child_process.execFile(cmd, args, gExecFileDefaults,
+                function _execZfsSendEstimateCb(error, stdout, stderr) {
+            if (error) {
+                log.error('zfs list error:', error, ', stderr:', stderr);
+                cb(zfsError('zfs list error', error, stderr));
                 return;
             }
-            next();
+
+            var size = 0;
+            var lines = stdout.trim().split('\n');
+
+            lines.map(function _estimateLine(line) {
+                size += parseInt(line, 10) || 0;
+            });
+
+            log.debug({dataset: dataset, estimate: size}, 'getEstimate');
+
+            estimatedSize += size;
+
+            cb();
         });
     }
 
     vasync.forEachParallel({inputs: datasets, func: estimateOneDataset},
             function _onEstimateComplete(err) {
         if (err) {
-            // log.error('estimate failure', err);
+            log.error('estimate failure', err);
             self.fatal(err);
             return;
         }
@@ -633,9 +705,17 @@ function start(callback) {
     if (payload.action === 'kill_migration_process') {
         killChild.bind(this)(callback);
 
+    /* Begin */
+    } else if (payload.action === 'get-filesystem-details') {
+        getFilesystemDetails.bind(this)(callback);
+
     /* Sync */
     } else if (payload.action === 'sync' || payload.action === 'receive') {
         startChildProcess.bind(this)(callback);
+    } else if (payload.action === 'remove-zfs-quota') {
+        removeZfsQuota.bind(this)(callback);
+    } else if (payload.action === 'restore-zfs-quota') {
+        restoreZfsQuota.bind(this)(callback);
 
     /* Estimate */
     } else if (payload.action === 'estimate') {
diff --git a/package.json b/package.json
index bffe8dd..c271dca 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "cn-agent",
   "description": "Triton Compute Node Agent",
-  "version": "2.12.3",
+  "version": "2.12.4",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
-- 
2.21.0

