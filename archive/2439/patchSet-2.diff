From ce66fa1ee89c0ee9a071729dfc27f2a67ed5c351 Mon Sep 17 00:00:00 2001
From: Todd Whiteman <todd.whiteman@joyent.com>
Date: Mon, 21 Aug 2017 17:20:00 -0700
Subject: [PATCH] DOCKER-1091 Cannot login into Artifactory private docker
 registry

---
 lib/registry-client-v2.js       | 33 ++------------------
 test/v2.dockerioprivate.test.js | 53 +++++++++++++++++----------------
 2 files changed, 30 insertions(+), 56 deletions(-)

diff --git a/lib/registry-client-v2.js b/lib/registry-client-v2.js
index 5c1946f..ad7ec1c 100644
--- a/lib/registry-client-v2.js
+++ b/lib/registry-client-v2.js
@@ -572,13 +572,6 @@ function _verifyJws(jws) {
  *        used instead of `opts.index`.
  *      --
  *      - opts.log {Bunyan Logger} Optional.
- *      - opts.username {String} Optional. Set this and `opts.password` for
- *        Basic auth.
- *      - opts.password {String} Optional, but required if `opts.username` is
- *        provided.
- *      - opts.authInfo {Object} Optional. This is an auth object result
- *        from the top-level `login` (a.k.a.
- *        `require('docker-registry-client').loginV2()`.)
  *      --
  *      TODO: document other options
  * @param cb {Function} `function (err, body, res, req)`
@@ -598,15 +591,6 @@ function ping(opts, cb) {
     assert.ok(opts.index || opts.indexName,
         'opts.index or opts.indexName is required');
     assert.optionalObject(opts.log, 'opts.log');
-    // Auth options:
-    assert.optionalString(opts.username, 'opts.username');
-    if (opts.username) {
-        assert.string(opts.password,
-            'opts.password required if username given');
-    } else {
-        assert.optionalString(opts.password, 'opts.password');
-    }
-    assert.optionalObject(opts.authInfo, 'opts.authInfo');
     // HTTP client basic options:
     assert.optionalBool(opts.insecure, 'opts.insecure');
     assert.optionalBool(opts.rejectUnauthorized, 'opts.rejectUnauthorized');
@@ -627,9 +611,8 @@ function ping(opts, cb) {
     }
 
     var log = _createLogger(opts.log);
-    log.trace({index: index, username: opts.username,
-        password: (opts.password ? '(censored)' : '(none)'),
-        scope: opts.scope, insecure: opts.insecure}, 'ping');
+    log.trace({index: index, scope: opts.scope, insecure: opts.insecure},
+        'ping');
 
     /*
      * We have to special case usage of the "official" docker.io to
@@ -676,20 +659,8 @@ function ping(opts, cb) {
         proxy: opts.proxy
     });
 
-    var headers = {};
-    if (opts.authInfo) {
-        _setAuthHeaderFromAuthInfo(headers, opts.authInfo);
-        assert.string(headers.authentication, 'headers.authentication');
-    } else if (opts.username) {
-        _setAuthHeaderFromAuthInfo(headers, {
-            username: opts.username,
-            password: opts.password
-        });
-    }
-
     client.get({
         path: '/v2/',
-        headers: headers,
         // Ping should be fast. We don't want 15s of retrying.
         retry: false,
         connectTimeout: 10000
diff --git a/test/v2.dockerioprivate.test.js b/test/v2.dockerioprivate.test.js
index 5ef090d..f93e1e7 100644
--- a/test/v2.dockerioprivate.test.js
+++ b/test/v2.dockerioprivate.test.js
@@ -62,6 +62,7 @@ test('v2 docker.io private repo (' + CONFIG.repo + ')', function (tt) {
 
     tt.test('  createClient', function (t) {
         client = drc.createClientV2({
+            maxSchemaVersion: 2,
             name: CONFIG.repo,
             username: CONFIG.username,
             password: CONFIG.password,
@@ -142,18 +143,22 @@ test('v2 docker.io private repo (' + CONFIG.repo + ')', function (tt) {
     });
 
     /*
-     *  {
-     *      "name": <name>,
-     *      "tag": <tag>,
-     *      "fsLayers": [
-     *         {
-     *            "blobSum": <tarsum>
-     *         },
-     *         ...
-     *      ],
-     *      "history": <v1 images>,
-     *      "signature": <JWS>
-     *  }
+     * {
+     *   "schemaVersion": 2,
+     *   "mediaType": "application/vnd.docker.distribution.manifest.v2+json",
+     *   "config": {
+     *     "mediaType": "application/octet-stream",
+     *     "size": 1459,
+     *     "digest": "sha256:2b8fd9751c4c0f5dd266fc...01"
+     *   },
+     *   "layers": [
+     *     {
+     *       "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
+     *       "size": 667590,
+     *       "digest": "sha256:8ddc19f16526912237dd8af...a9"
+     *     }
+     *   ]
+     * }
      */
     var manifest;
     var manifestDigest;
@@ -163,13 +168,12 @@ test('v2 docker.io private repo (' + CONFIG.repo + ')', function (tt) {
             manifest = manifest_;
             manifestDigest = res.headers['docker-content-digest'];
             t.ok(manifest);
-            t.equal(manifest.schemaVersion, 1);
-            t.equal(manifest.name, repo.remoteName);
-            t.equal(manifest.tag, CONFIG.tag);
-            t.ok(manifest.architecture);
-            t.ok(manifest.fsLayers);
-            t.ok(manifest.history[0].v1Compatibility);
-            t.ok(manifest.signatures[0].signature);
+            t.equal(manifest.schemaVersion, 2);
+            t.ok(manifest.config);
+            t.ok(manifest.config.digest, manifest.config.digest);
+            t.ok(manifest.layers);
+            t.ok(manifest.layers.length > 0);
+            t.ok(manifest.layers[0].digest);
             t.end();
         });
     });
@@ -179,10 +183,9 @@ test('v2 docker.io private repo (' + CONFIG.repo + ')', function (tt) {
             t.ifErr(err);
             t.ok(manifest);
             ['schemaVersion',
-             'name',
-             'tag',
-             'architecture'].forEach(function (k) {
-                t.equal(manifest_[k], manifest[k], k);
+             'config',
+             'layers'].forEach(function (k) {
+               t.deepEqual(manifest_[k], manifest[k], k);
             });
             t.end();
         });
@@ -198,7 +201,7 @@ test('v2 docker.io private repo (' + CONFIG.repo + ')', function (tt) {
     });
 
     tt.test('  headBlob', function (t) {
-        var digest = manifest.fsLayers[0].blobSum;
+        var digest = manifest.layers[0].digest;
         client.headBlob({digest: digest}, function (err, ress) {
             t.ifErr(err, 'no headBlob err');
             t.ok(ress, 'got a "ress"');
@@ -240,7 +243,7 @@ test('v2 docker.io private repo (' + CONFIG.repo + ')', function (tt) {
     });
 
     tt.test('  createBlobReadStream', function (t) {
-        var digest = manifest.fsLayers[0].blobSum;
+        var digest = manifest.layers[0].digest;
         client.createBlobReadStream({digest: digest},
                 function (err, stream, ress) {
             t.ifErr(err, 'createBlobReadStream err');
-- 
2.21.0

