From 5cd6762a504da1f448fa5d0ba345bedbc097ac1b Mon Sep 17 00:00:00 2001
From: Nick Zivkovic <nick.zivkovic@joyent.com>
Date: Mon, 19 Jun 2017 23:42:15 +0000
Subject: [PATCH] TOOLS-1799 Warden should have uuidPrefix validator

---
 lib/constants.js  |  3 +++
 lib/validate.js   |  1 +
 lib/validators.js | 54 +++++++++++++++++++++++++++++++++++++
 tests/run.js      | 68 +++++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 126 insertions(+)

diff --git a/lib/constants.js b/lib/constants.js
index d2c7a63..302a988 100644
--- a/lib/constants.js
+++ b/lib/constants.js
@@ -20,6 +20,9 @@ var MESSAGES = {
     ARRAY_EMPTY: 'must not be an empty array',
     STR: 'must be a string',
     INVALID_UUID: 'invalid UUID',
+    UUID_PREF: 'only UUID prefixes are allowed',
+    UUID_PREF_CHAR: 'UUID prefix has invalid chars',
+    UUID_WILDCARD: 'need only 1 wildcard',
     UNKNOWN_PARAMS: 'Unknown parameters',
     PARAMETERS_ARE_OBJECTS: 'Parameters must be objects',
     CIDR_SUBNET: 'Subnet must be in CIDR form',
diff --git a/lib/validate.js b/lib/validate.js
index af51327..53dc4cf 100644
--- a/lib/validate.js
+++ b/lib/validate.js
@@ -242,6 +242,7 @@ module.exports = {
     subnet: validators.subnet,
     subnetArray: validators.subnetArray,
     UUID: validators.UUID,
+    uuidPrefix: validators.uuidPrefix,
     isUUID: validators.isUUID,
     UUIDarray: validators.UUIDarray,
     isNotInteger: validators.isNotInteger,
diff --git a/lib/validators.js b/lib/validators.js
index 85f3eec..a01c3bc 100644
--- a/lib/validators.js
+++ b/lib/validators.js
@@ -41,6 +41,7 @@ var ipaddr = require('ip6addr');
  */
 
 var UUID_RE = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
+var STR_RE = /\s/g;
 
 /*
  * Validates an array of (one or more) IP addresses
@@ -277,6 +278,58 @@ function validateUUIDarray(_, name, val, callback) {
     callback(null, Object.keys(valid).sort());
 }
 
+/*
+ * Verifies that the query string either contains only 1 `*` character at the
+ * end of the string, or none at all.
+ *
+ * The goal here is to validate requests that try match UUIDs by prefix, like:
+ * deadbeef*. However, we also wish to disallow matching UUIDs by suffix, infix,
+ * or circumfix. This is meant to be used in places like sdc-napi, which allows
+ * the user to request networks by uuid-prefix.
+ */
+function validateUUIDPrefix(_, name, str, callback) {
+    if (typeof (str) !== 'string') {
+        callback(new errors.invalidParam(name, constants.msg.STR));
+        return;
+    }
+
+    if (str.length > constants.MAX_STR_LEN) {
+        callback(new errors.invalidParam(name,
+            fmt('must not be longer than %d characters',
+                constants.MAX_STR_LEN)));
+        return;
+    }
+
+    if (str.replace(STR_RE, '') === '') {
+        callback(new errors.invalidParam(name, 'must not be empty'));
+        return;
+    }
+
+    /* JSSTYLED */
+    var nstars = (str.match(/\*/g) || []).length;
+    if (nstars > 1) {
+        callback(new errors.invalidParam(name, constants.msg.UUID_WILDCARD));
+        return;
+    }
+
+    if (nstars > 0 && str.slice(-1) !== '*') {
+        callback(new errors.invalidParam(name, constants.msg.UUID_PREF));
+        return;
+    }
+
+    if (nstars > 0 && !str.match(/^[0-9a-f*-]+$/)) {
+
+        callback(new errors.invalidParam(name, constants.msg.UUID_PREF_CHAR));
+        return;
+    }
+
+    if (nstars === 0 && !isValidUUID(str)) {
+        callback(new errors.invalidParam('Invalid UUID'));
+        return;
+    }
+
+    callback(null, str);
+}
 
 
 function isNotInteger(val, id) {
@@ -398,6 +451,7 @@ module.exports = {
     IP: validateIP,
     subnet: validateSubnet,
     subnetArray: validateSubnetArray,
+    uuidPrefix: validateUUIDPrefix,
     UUID: validateUUID,
     isUUID: isValidUUID,
     UUIDarray: validateUUIDarray,
diff --git a/tests/run.js b/tests/run.js
index 4bb84ad..e8c1ce5 100644
--- a/tests/run.js
+++ b/tests/run.js
@@ -910,6 +910,74 @@ test('UUID-S-KI-U', function (t) {
     });
 });
 
+test('uuidPrefix-S-KV', function (t) {
+    var opts = {
+        strict: true,
+        required: {
+            uuid: validate.uuidPrefix
+        }
+    };
+    var params = { uuid: '895ef360*' };
+    validate.params(opts, null, params, function (err, res) {
+        t.ifErr(err, 'Expecting success');
+        t.end();
+    });
+});
+
+test('uuidPrefix-S-KI-infix', function (t) {
+    var opts = {
+        strict: true,
+        required: {
+            uuid: validate.uuidPrefix
+        }
+    };
+    var params = { uuid: '*895ef360*' };
+    validate.params(opts, null, params, function (err, res) {
+        t.ok(err, 'Expecting error');
+        var msg = util_const.msg.INVALID_PARAMS;
+        var errors = [ util_err.invalidParam('uuid',
+            util_const.msg.UUID_WILDCARD) ];
+        expErr(msg, errors, err, t);
+        t.end();
+    });
+});
+
+test('uuidPrefix-S-KI-prefix-bad-char', function (t) {
+    var opts = {
+        strict: true,
+        required: {
+            uuid: validate.uuidPrefix
+        }
+    };
+    var params = { uuid: '895ef360zzz*' };
+    validate.params(opts, null, params, function (err, res) {
+        t.ok(err, 'Expecting error');
+        var msg = util_const.msg.INVALID_PARAMS;
+        var errors = [ util_err.invalidParam('uuid',
+            util_const.msg.UUID_PREF_CHAR) ];
+        expErr(msg, errors, err, t);
+        t.end();
+    });
+});
+
+test('uuidPrefix-S-KI-suffix', function (t) {
+    var opts = {
+        strict: true,
+        required: {
+            uuid: validate.uuidPrefix
+        }
+    };
+    var params = { uuid: '*895ef360' };
+    validate.params(opts, null, params, function (err, res) {
+        t.ok(err, 'Expecting error');
+        var msg = util_const.msg.INVALID_PARAMS;
+        var errors = [ util_err.invalidParam('uuid',
+            util_const.msg.UUID_PREF) ];
+        expErr(msg, errors, err, t);
+        t.end();
+    });
+});
+
 test('UUIDarray-S-KV: accepts and returns array of UUIDs', function (t) {
     var opts = {
         strict: true,
-- 
2.21.0

