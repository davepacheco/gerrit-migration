commit f98fb9f26a68bb8def46ed18de4d0825ee780837 (refs/changes/93/2793/3)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2017-10-16T23:04:50+00:00 (2 years ago)
    
    TOOLS-1892 Want documentation for node-vmadm
    Reviewed by: Trent Mick <trent.mick@joyent.com>
    Approved by: Trent Mick <trent.mick@joyent.com>

diff --git a/.npmignore b/.npmignore
new file mode 100644
index 0000000..0b050fb
--- /dev/null
+++ b/.npmignore
@@ -0,0 +1,8 @@
+/Makefile
+/build
+/deps
+/test
+/tools
+/.gitmodules
+/.npmignore
+/coverage
diff --git a/Makefile b/Makefile
index 7169b0c..b59b430 100644
--- a/Makefile
+++ b/Makefile
@@ -5,44 +5,26 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
-# Makefile: basic Makefile for template API service
+# node-vmadm Makefile
 #
-# This Makefile is a template for new repos. It contains only repo-specific
-# logic and uses included makefiles to supply common targets (javascriptlint,
-# jsstyle, restdown, etc.), which are used by other repos as well. You may well
-# need to rewrite most of this file, but you shouldn't need to touch the
-# included makefiles.
-#
-# If you find yourself adding support for new targets that could be useful for
-# other projects too, you should add these to the original versions of the
-# included Makefiles (in eng.git) so that other teams can use them too.
-#
-
-#
-# Tools
-#
-TAP		:= ./node_modules/.bin/tap
 
 #
 # Files
 #
-DOC_FILES	 = index.md boilerplateapi.md
-JS_FILES	:= $(shell ls *.js) $(shell find lib test -name '*.js')
+JS_FILES	:= $(shell ls *.js) $(shell find lib -name '*.js')
 JSON_FILES	 = package.json
 JSL_CONF_NODE	 = tools/jsl.node.conf
 JSL_FILES_NODE	 = $(JS_FILES)
 JSSTYLE_FILES	 = $(JS_FILES)
 JSSTYLE_FLAGS	 = -f tools/jsstyle.conf
-REPO_MODULES	 = src/node-dummy
-
-NODE_PREBUILT_VERSION=v0.8.28
 
 ifeq ($(shell uname -s),SunOS)
-	NODE_PREBUILT_CC_VERSION=4.6.2
+	NODE_PREBUILT_IMAGE=18b094b0-eb01-11e5-80c1-175dac7ddf02
+	NODE_PREBUILT_VERSION=v4.6.1
 	NODE_PREBUILT_TAG=zone
 endif
 
@@ -50,7 +32,8 @@ include ./tools/mk/Makefile.defs
 ifeq ($(shell uname -s),SunOS)
 	include ./tools/mk/Makefile.node_prebuilt.defs
 else
-	include ./tools/mk/Makefile.node.defs
+	NPM_EXEC :=
+	NPM = npm
 endif
 include ./tools/mk/Makefile.smf.defs
 
@@ -58,18 +41,9 @@ include ./tools/mk/Makefile.smf.defs
 # Repo-specific targets
 #
 .PHONY: all
-all: | $(TAP) $(REPO_DEPS)
+all: | $(NPM_EXEC) $(REPO_DEPS)
 	$(NPM) rebuild
 
-$(TAP): | $(NPM_EXEC)
-	$(NPM) install
-
-CLEAN_FILES += $(TAP) ./node_modules/tap
-
-.PHONY: test
-test: $(TAP)
-	TAP=1 $(TAP) test/*.test.js
-
 include ./tools/mk/Makefile.deps
 ifeq ($(shell uname -s),SunOS)
 	include ./tools/mk/Makefile.node_prebuilt.targ
diff --git a/README.md b/README.md
index 61e4e3a..746ef79 100644
--- a/README.md
+++ b/README.md
@@ -5,60 +5,253 @@
 -->
 
 <!--
-    Copyright (c) 2014, Joyent, Inc.
+    Copyright (c) 2017, Joyent, Inc.
 -->
 
-# eng: Joyent Engineering Guide
+# node-vmadm
 
-This repo serves two purposes: (1) It defines the guidelines and best
-practices for Joyent engineering work (this is the primary goal), and (2) it
-also provides boilerplate for a SmartDataCenter (SDC) project repo, giving you
-a starting point for many of the suggestion practices defined in the guidelines.
-This is especially true for node.js-based REST API projects.
+This library provides a node.js wrapper for executing SmartOS's
+[vmadm(1M)](https://smartos.org/man/1M/vmadm) tool, and processing
+its output.
 
-**You probably want to be looking at the
-[actual Joyent engineering guide at docs/index.md](docs/index.md).**
-This README.md is a template for repos to use.
+Note that some of the `vmadm` commands this library helps you call are
+experimental. Please refer to the manual page for information on each
+command's current stability.
 
+This repository is part of the Joyent Triton project. For contribution
+guidelines, issues, and general documentation, visit the main
+[Triton](https://github.com/joyent/triton) project page.
 
-## Development
+# Installation
 
-Describe steps necessary for development here.
+    npm install vmadm
 
-    make all
+# API
+
+Many of the functions in this library share the following options:
+
+- `include_dni` (optional, defaults to false), whether or not the targeted VM
+  should be affected if it's been marked with `do_not_inventory`
+- `log`, a [Bunyan](https://github.com/trentm/node-bunyan.git) Logger object
+- `req_id` (optional), a UUID to pass to `vmadm` for identifying this request in
+  the output logs
+- `uuid`, the target VM's UUID
+
+They are listed below where applicable.
+
+## Lifecycle Management
+
+### create(opts, callback)
+
+Calls `vmadm create` with a payload of `opts`. The callback is invoked as
+`callback(err, info)`, where `info` is the output JSON object on a successful
+VM creation.
+
+Options:
+
+- `log`
+- `req_id`
+
+### delete(opts, callback)
+
+Calls `vmadm create <uuid>`. The callback is invoked as `callback(err)`.
+
+Options:
+
+- `include_dni`
+- `log`
+- `req_id`
+- `uuid`
+
+### kill(opts, callback)
+
+Calls `vmadm kill <uuid>`. The callback is invoked as `callback(err)`.
+
+Options:
+
+- `include_dni`
+- `log`
+- `signal` (optional), the name of the signal to send (i.e. `"SIGKILL"`)
+- `uuid`
+
+### reboot(opts, callback)
+
+Calls `vmadm reboot <uuid>`. The callback is invoked as `callback(err)`.
+
+Options:
+
+- `include_dni`
+- `log`
+- `req_id`
+- `uuid`
+
+### reprovision(opts, callback)
+
+Calls `vmadm reprovision <uuid>`. The callback is invoked as `callback(err)`.
+
+Options:
+
+- `image_uuid`, the new image for the VM to use
+- `include_dni`
+- `log`
+- `req_id`
+- `uuid`
+
+### start(opts, callback)
+
+Calls `vmadm start <uuid>`. The callback is invoked as `callback(err)`.
+
+Options:
+
+- `include_dni`
+- `log`
+- `req_id`
+- `uuid`
+
+### stop(opts, callback)
 
+Calls `vmadm stop <uuid>`. The callback is invoked as `callback(err)`.
 
-## Test
+Options:
 
-Describe steps necessary for testing here.
+- `force` (optional), whether to force the VM to stop
+- `timeout` (optional), a number of seconds to wait between sending `SIGTERM`
+  and `SIGKILL` when stopping Docker containers
+- `include_dni`
+- `log`
+- `req_id`
+- `uuid`
 
-    make test
+### sysrq(opts, callback)
 
+Calls `vmadm sysrq <uuid>`. The callback is invoked as `callback(err)`.
 
-## Documentation
+Options:
 
-[Joyent Engineering Guide is at docs/index.md](docs/index.md).
+- `req`, the request to send, `"screenshot"` or `"nmi"`
+- `include_dni`
+- `log`
+- `req_id`
+- `uuid`
 
-To update the guidelines, edit "docs/index.md" and run `make docs`
-to update "docs/index.html". Works on either SmartOS or Mac OS X.
+### update(opts, callback)
 
+Calls `vmadm update` with a payload of `opts`. The callback is invoked as
+`callback(err)`.
 
-## Starting a Repo Based on eng.git
+Options:
 
-Create a new repo called "some-cool-fish" in "~/work" based on
-"eng.git":
+- `include_dni`
+- `log`
+- `req_id`
+- `uuid`
 
-    ./tools/mkrepo $HOME/work/some-cool-fish
+## Fetching information
 
+### exists(opts, callback)
 
-## Your Other Sections Here
+Checks whether or not the VM `uuid` exists. The callback is invoked as
+`callback(err, present)`. If the VM is present on the system, `present` will
+be `true`. Otherwise, it'll be `false`. If an error occurs while trying to
+determine whether the VM exists, then `err` will be an explanatory Error.
 
-Add other sections to your README as necessary. E.g. Running a demo, adding
-development data.
+Options:
+
+- `include_dni`
+- `log`
+- `uuid`
+
+### info(opts, callback)
+
+Calls `vmadm info <uuid>`. The callback is invoked as `callback(err, info)`.
+
+Options:
+
+- `types` (optional), an array of strings indicating the kind of information
+  to return (i.e., `block`, `chardev`, and more; see the manual page for a
+  full listing)
+- `include_dni`
+- `log`
+- `req_id`
+- `uuid`
+
+### load(opts, callback)
+
+Calls `vmadm get <uuid>`. The callback is invoked as `callback(err, vm)`.
+
+Options:
+
+- `fields` (optional), the set of fields to return on the object (the default is
+  to return all fields)
+- `include_dni`
+- `log`
+- `req_id`
+- `uuid`
+
+### lookup(search, opts, callback)
+
+Calls `vmadm lookup -j`. `search` is an object representing how to filter VMs,
+such as `{"brand": "kvm"}`. The callback is invoked as `callback(err, vms)`,
+where `vms` is an array of VM objects.
+
+Options:
+
+- `fields` (optional), the set of fields to return on each object (the default
+  is to return all fields)
+- `include_dni`
+- `log`
+- `req_id`
+
+## Managing Snapshots
+
+### create\_snapshot(opts, callback)
+
+Calls `vmadm create-snapshot <uuid>`. The callback is invoked as
+`callback(err)`.
+
+Options:
+
+- `snapshot_name`, the name to assign to the new snapshot
+- `include_dni`
+- `log`
+- `req_id`
+- `uuid`
+
+### delete\_snapshot(opts, callback)
+
+Calls `vmadm delete-snapshot <uuid>`. The callback is invoked as
+`callback(err)`.
+
+Options:
+
+- `snapshot_name`, the name of the snapshot to delete
+- `include_dni`
+- `log`
+- `req_id`
+- `uuid`
+
+### rollback\_snapshot(opts, callback)
+
+Calls `vmadm rollback-snapshot <uuid>`. The callback is invoked as
+`callback(err)`.
+
+Options:
+
+- `snapshot_name`, the name of the snapshot to roll the target VM back to
+- `include_dni`
+- `log`
+- `req_id`
+- `uuid`
+
+## Development
+
+Describe steps necessary for development here.
+
+    make all
 
+# License
 
-## License
+This Source Code Form is subject to the terms of the Mozilla Public License, v.
+2.0.  For the full license text see LICENSE, or http://mozilla.org/MPL/2.0/.
 
-"eng: Joyent Engineering Guide" is licensed under the
-[Mozilla Public License version 2.0](http://mozilla.org/MPL/2.0/).
-See the file LICENSE.
+Copyright (c) 2017, Joyent, Inc.
diff --git a/tools/mk/Makefile.defs b/tools/mk/Makefile.defs
index 85139d7..8c6be90 100644
--- a/tools/mk/Makefile.defs
+++ b/tools/mk/Makefile.defs
@@ -1,4 +1,3 @@
-# -*- mode: makefile -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -28,6 +27,9 @@
 #			the TIMESTAMP envvar (used by MG-based builds).
 #	STAMP		A build stamp to use in built package names.
 #
+#	MAKE_STAMPS_DIR	The directory in which make stamp files are to be
+#			created.  See comments below on expensive targets.
+#
 
 TOP := $(shell pwd)
 
@@ -49,3 +51,47 @@ STAMP := $(BRANCH)-$(TIMESTAMP)-$(_GITDESCRIBE)
 
 # node-gyp will print build info useful for debugging with V=1
 export V=1
+
+#
+# EXPENSIVE TARGETS AND MAKE STAMP FILES
+#
+# Targets which are expensive to run and lack a single file that marks
+# completion are difficult to track with make; e.g., "npm install".  One
+# solution to this problem is to create "stamp" files with symbolic names which
+# are created as the final step in a complex make rule in order to mark
+# completion.
+#
+# In order to make these more uniform, and easier to target with "make clean",
+# we will attempt to store them under a single directory.  Note that these
+# files are never targets for shipping in build artefacts.
+#
+# Stamp-backed targets come in several parts.  First, a macro should be defined
+# which names a file in the MAKE_STAMPS_DIR directory.  Then, a target which
+# creates this stamp file must be provided.  The recipe for this target should
+# use MAKE_STAMP_REMOVE and MAKE_STAMP_CREATE to perform the appropriate stamp
+# management.
+#
+# For example:
+#
+# --- Makefile.*.defs:
+#
+#	$(STAMP_EXPENSIVE_RESULT) := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# --- Makefile.*.targ:
+#
+#	$(STAMP_EXPENSIVE_RESULT): input/file another/input/file
+#		$(MAKE_STAMP_REMOVE)
+#		rm -rf output_tree/  # <--- ensure a clean slate
+#		expensive_program -o output_tree/ $^
+#		$(MAKE_STAMP_CREATE)
+#
+# NOTE: Every stamp file is exposed as an implicit "stamp-$STAMP_NAME" target.
+# The example above could be built manually by invoking:
+#
+#	make stamp-expensive-result
+#
+MAKE_STAMPS_DIR ?=	make_stamps
+CLEAN_FILES +=		$(MAKE_STAMPS_DIR)
+
+MAKE_STAMP_REMOVE =	mkdir -p $(@D); rm -f $(@)
+MAKE_STAMP_CREATE =	mkdir -p $(@D); touch $(@)
diff --git a/tools/mk/Makefile.node.defs b/tools/mk/Makefile.node.defs
index 9376841..487824d 100644
--- a/tools/mk/Makefile.node.defs
+++ b/tools/mk/Makefile.node.defs
@@ -1,4 +1,3 @@
-# -*- mode: makefile -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -97,8 +96,15 @@ NODE_EXEC	= $(NODE_INSTALL)/bin/node
 NODE_WAF_EXEC	= $(NODE_INSTALL)/bin/node-waf
 NPM_EXEC	= $(NODE_INSTALL)/bin/npm
 
-# Ensure these use absolute paths to the executables to allow running
-# from a dir other than the project top.
+#
+# These paths should be used during the build process to invoke Node and
+# Node-related build tools like NPM.  All paths are fully qualified so that
+# they work regardless of the current working directory at the point of
+# invocation.
+#
+# Note that where PATH is overridden, the value chosen must cause execution of
+# "node" to find the same binary to which the NODE macro refers.
+#
 NODE		:= $(TOP)/$(NODE_EXEC)
 NODE_WAF	:= $(TOP)/$(NODE_WAF_EXEC)
-NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) node $(TOP)/$(NPM_EXEC)
+NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) $(NODE) $(TOP)/$(NPM_EXEC)
diff --git a/tools/mk/Makefile.node_prebuilt.defs b/tools/mk/Makefile.node_prebuilt.defs
index 5744489..2129742 100644
--- a/tools/mk/Makefile.node_prebuilt.defs
+++ b/tools/mk/Makefile.node_prebuilt.defs
@@ -1,4 +1,3 @@
-# -*- mode: makefile -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -146,8 +145,15 @@ NODE_EXEC	:= $(BUILD)/prebuilt-node-$(NODE_PREBUILT_NAME)
 NODE_WAF_EXEC	:= $(BUILD)/prebuilt-node-waf-$(NODE_PREBUILT_NAME)
 NPM_EXEC	:= $(BUILD)/prebuilt-npm-$(NODE_PREBUILT_NAME)
 
-# Ensure these use absolute paths to the executables to allow running
-# from a dir other than the project top.
+#
+# These paths should be used during the build process to invoke Node and
+# Node-related build tools like NPM.  All paths are fully qualified so that
+# they work regardless of the current working directory at the point of
+# invocation.
+#
+# Note that where PATH is overridden, the value chosen must cause execution of
+# "node" to find the same binary to which the NODE macro refers.
+#
 NODE		:= $(TOP)/$(NODE_INSTALL)/bin/node
 NODE_WAF	:= $(TOP)/$(NODE_INSTALL)/bin/node-waf
-NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) node $(TOP)/$(NODE_INSTALL)/bin/npm
+NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) $(NODE) $(TOP)/$(NODE_INSTALL)/bin/npm
diff --git a/tools/mk/Makefile.targ b/tools/mk/Makefile.targ
index 9950458..54edf0e 100644
--- a/tools/mk/Makefile.targ
+++ b/tools/mk/Makefile.targ
@@ -1,4 +1,3 @@
-# -*- mode: makefile -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -294,6 +293,7 @@ CLEAN_FILES +=					\
 $(DOC_MEDIA_FILES_BUILD): | $(DOC_MEDIA_DIRS_BUILD)
 
 $(DOC_BUILD)/%: docs/% | $(DOC_BUILD)
+	$(MKDIR) $(shell dirname $@)
 	$(CP) $< $@
 
 docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC) \
@@ -316,3 +316,19 @@ test:
 
 .PHONY: prepush
 prepush: check test
+
+#
+# This rule automatically exposes every "stamp" file as a target that can be
+# invoked manually as "stamp-$STAMP_NAME".  For example, if a stamp has been
+# defined thus:
+#
+#	STAMP_EXPENSIVE_RESULT := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# ... this can be invoked manually as "make stamp-expensive-result".  Note that
+# these phony targets are essentially just for interactive usage.  Targets
+# should be specified to depend on the macro containing the stamp file name.
+#
+# See also the comments in "Makefile.defs".
+#
+stamp-%: $(MAKE_STAMPS_DIR)/%
+	@:
