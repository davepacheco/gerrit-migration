commit dec833c3e42505f11b45285d63fd050e5f48fe09 (refs/changes/79/3179/4)
Author: Julien Gilli <julien.gilli@joyent.com>
Date:   2018-01-09T14:45:17-08:00 (1 year, 9 months ago)
    
    DOCKER-1138 Errors With Docker-Compose and TritonFS
    DOCKER-916 Add support for using docker-compose in CLI integration tests
    DOCKER-503 tests: add docker-compose testing in nightly

diff --git a/Makefile b/Makefile
index e127d9b..ea77d50 100644
--- a/Makefile
+++ b/Makefile
@@ -90,7 +90,10 @@ test: $(TAPE)
 #
 .PHONY: test-integration-in-coal
 test-integration-in-coal:
-	@ssh root@$(COAL) 'DOCKER_CLI_VERSIONS="$(DOCKER_CLI_VERSIONS)" LOG_LEVEL=$(LOG_LEVEL) /zones/$$(vmadm lookup -1 alias=docker0)/root/opt/smartdc/docker/test/runtests $(TEST_ARGS)'
+	@ssh root@$(COAL) 'DOCKER_CLI_VERSIONS="$(DOCKER_CLI_VERSIONS)" \
+		COMPOSE_CLI_VERSIONS="$(COMPOSE_CLI_VERSIONS)" \
+		LOG_LEVEL=$(LOG_LEVEL) \
+		/zones/$$(vmadm lookup -1 alias=docker0)/root/opt/smartdc/docker/test/runtests $(TEST_ARGS)'
 
 
 .PHONY: git-hooks
diff --git a/lib/validate.js b/lib/validate.js
index 268c9e2..25770aa 100644
--- a/lib/validate.js
+++ b/lib/validate.js
@@ -593,7 +593,11 @@ function validateCreateVolume(req, res, next) {
     var validVolumeSize = false;
     var volumeDriver = req.params.Driver;
     var volumeName = req.params.Name;
-    var volumeSize = req.params.DriverOpts.size;
+    var volumeSize;
+
+    if (req.params.DriverOpts) {
+        volumeSize = req.params.DriverOpts.size;
+    }
 
     if (typeof (volumeDriver) !== 'string') {
         next(new errors.ValidationError('volume driver must be a string'));
diff --git a/test/compose/compose-with-nfs-volume/docker-compose.yml b/test/compose/compose-with-nfs-volume/docker-compose.yml
new file mode 100644
index 0000000..3e55a69
--- /dev/null
+++ b/test/compose/compose-with-nfs-volume/docker-compose.yml
@@ -0,0 +1,10 @@
+version: "2.1"
+services:
+  foo:
+    image: busybox
+    volumes:
+      - compose-with-nfs-volume-test:/bar
+    network_mode: bridge
+volumes:
+    compose-with-nfs-volume-test:
+      driver: "tritonnfs"
\ No newline at end of file
diff --git a/test/integration/compose-with-nfs-volume.test.js b/test/integration/compose-with-nfs-volume.test.js
new file mode 100644
index 0000000..2ca766b
--- /dev/null
+++ b/test/integration/compose-with-nfs-volume.test.js
@@ -0,0 +1,112 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+var assert = require('assert-plus');
+var fs = require('fs');
+var path = require('path');
+var vasync = require('vasync');
+
+var cli = require('../lib/cli');
+var common = require('../lib/common');
+var composeCli = require('../lib/compose-cli.js');
+var helpers = require('./helpers');
+var testVolumes = require('../lib/volumes');
+
+var test = testVolumes.createTestFunc({
+    checkTritonSupportsNfsVols: true
+});
+
+var ALICE_USER;
+var COMPOSE_FILE = fs.readFileSync(path.join(__dirname, '..', 'compose',
+    'compose-with-nfs-volume', 'docker-compose.yml')).toString();
+
+/*
+ * We use a project name as a way to namespace all resources created by this
+ * test, so that they do not conflict with any other test or any other resource
+ * that may have been created either automatically or manually.
+ */
+var COMPOSE_PROJECT_NAME = 'compose-nfs-volume-test';
+var MOUNTING_CONTAINER_NAMES_PREFIX = 'test-nfs-mounting-container';
+var VOLAPI_CLIENT;
+
+test('setup', function (tt) {
+    tt.test('DockerEnv: alice init', function (t) {
+        cli.init(t, function onCliInit(err, env) {
+            t.ifErr(err, 'Docker environment initialization should not err');
+            if (env) {
+                ALICE_USER = env.user;
+            }
+        });
+    });
+
+    tt.test('volapi client init', function (t) {
+        helpers.createVolapiClient(function (err, client) {
+            t.ifErr(err, 'volapi client');
+            VOLAPI_CLIENT = client;
+            t.end();
+        });
+    });
+});
+
+test('docker volume created with docker compose', function (tt) {
+    /*
+     * docker-compose creates resources based on the project name (the -p
+     * command line option passed to the docker-compose command), but removes
+     * hyphens from the project name only.
+     */
+    var volumeName = COMPOSE_PROJECT_NAME.replace(/-/g, '')
+        + '_compose-with-nfs-volume-test';
+
+    tt.test('docker compose up should succeed', function (t) {
+        vasync.pipeline({arg: {}, funcs: [
+            function composeUp(ctx, next) {
+                composeCli(COMPOSE_FILE, {
+                    args: '-p ' + COMPOSE_PROJECT_NAME + ' up -d',
+                    user: ALICE_USER
+                }, function onComposeUp(composeUpErr, stdout, stderr) {
+                    t.ifErr(composeUpErr,
+                        'compose up should not error');
+                    next(composeUpErr);
+                });
+            },
+            function checkVolumeExists(ctx, next) {
+                VOLAPI_CLIENT.listVolumes({
+                    name: volumeName,
+                    owner_uuid: ALICE_USER.account.uuid,
+                    state: 'ready'
+                }, function onListVols(listVolsErr, vols) {
+                    t.ifErr(listVolsErr, 'Listing volumes with name '
+                        + volumeName + ' should not error');
+                    t.ok(vols, 'result should not be empty');
+                    if (vols) {
+                        t.equal(vols.length, 1,
+                                'only one volume should be present');
+                    }
+                    next(listVolsErr);
+                });
+            }
+        ]}, function onDone(err) {
+            t.end();
+        });
+    });
+
+    tt.test('docker-compose down should succeed', function (t) {
+        composeCli(COMPOSE_FILE, {
+            /*
+             * We use -v here so that volumes are also deleted.
+             */
+            args: '-p ' + COMPOSE_PROJECT_NAME + ' down -v',
+            user: ALICE_USER
+        }, function onComposeDown(composeDownErr, stdout, stderr) {
+            t.ifErr(composeDownErr, 'compose down should not error');
+            t.end();
+        });
+    });
+});
diff --git a/test/integration/helpers.js b/test/integration/helpers.js
index 30b1ad4..472b50e 100644
--- a/test/integration/helpers.js
+++ b/test/integration/helpers.js
@@ -437,7 +437,9 @@ function stepClientZonePayload(state, cb) {
 
         var vars = {
             DOCKER_AVAILABLE_CLI_VERSIONS:
-                process.env.DOCKER_AVAILABLE_CLI_VERSIONS
+                process.env.DOCKER_AVAILABLE_CLI_VERSIONS,
+            COMPOSE_AVAILABLE_CLI_VERSIONS:
+                process.env.COMPOSE_AVAILABLE_CLI_VERSIONS
         };
         Object.keys(vars).forEach(function (k) {
             userScript = userScript.replace(
@@ -759,6 +761,30 @@ GzDockerEnv.prototype.docker = function denvDocker(cmd, opts, cb) {
     this.exec(dockerCmd, opts, cb);
 };
 
+/*
+ * Run 'docker-compose $cmd' as this user.
+ *
+ * @param config {String} The compose configuration to deploy, typically the
+ *   full content of a docker-compose.yml file.
+ * @param cmd {String} The command (after the 'docker-compose ') to run. E.g.
+ *  'up -d'.
+ * @param cb {Function} `function (err, stdout, stderr)`
+ */
+GzDockerEnv.prototype.compose = function compose(config, cmd, cb) {
+    assert.string(config, 'config');
+    assert.string(cmd, 'cmd');
+    assert.func(cb, 'cb');
+
+    assert.ok(process.env.COMPOSE_CLI_VERSION,
+        '$COMPOSE_CLI_VERSION is not set, do not know which '
+            + '"docker-compose-$ver" to execute');
+    var dockerCmd = fmt('(source /root/.sdc/docker/%s/env.sh; '
+        + '/root/bin/docker-compose-%s -f - %s <<EOC\n' + config + '\n'
+        + 'EOC' + '\n)',
+        this.login, process.env.COMPOSE_CLI_VERSION, cmd);
+    this.exec(dockerCmd, cb);
+};
+
 /*
  * Run '$cmd' in the test zone.
  *
diff --git a/test/integration/sdcdockertest_client.user-script.in b/test/integration/sdcdockertest_client.user-script.in
index f94c7ff..a5a4b8e 100644
--- a/test/integration/sdcdockertest_client.user-script.in
+++ b/test/integration/sdcdockertest_client.user-script.in
@@ -5,7 +5,11 @@ set -o pipefail
 export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
 set -o xtrace
 
+ARCH=x86_64
+COMPOSE_AVAILABLE_CLI_VERSIONS="{{COMPOSE_AVAILABLE_CLI_VERSIONS}}"
+COMPOSE_RELEASES_BASE_URL=https://github.com/docker/compose/releases/download
 DOCKER_AVAILABLE_CLI_VERSIONS="{{DOCKER_AVAILABLE_CLI_VERSIONS}}"
+OS=$(uname)
 
 if [[ ! -d /root/bin ]]; then
     mkdir -p /root/bin
@@ -24,6 +28,13 @@ if [[ ! -x get-docker-clients.sh ]]; then
     chmod +x get-docker-clients.sh
 fi
 
+for compose_cli_version in ${COMPOSE_AVAILABLE_CLI_VERSIONS}; do
+    if [[ ! -x docker-compose-${compose_cli_version} ]]; then
+        curl -LsS $COMPOSE_RELEASES_BASE_URL/$compose_cli_version/docker-compose-$OS-$ARCH > docker-compose-${compose_cli_version}
+        chmod +x docker-compose-${compose_cli_version}
+    fi
+done
+
 echo "Get docker CLI clients (allow 3 attempts)"
 got_docker_clients_successfully=
 for i in {3..1}; do
diff --git a/test/lib/compose-cli.js b/test/lib/compose-cli.js
new file mode 100644
index 0000000..1ec6808
--- /dev/null
+++ b/test/lib/compose-cli.js
@@ -0,0 +1,37 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+var assert = require('assert-plus');
+var vasync = require('vasync');
+
+/**
+ * `docker-compose <opts.args>`
+ *
+ * @param composeConfig {String} The compose configuration to deploy, typically
+ *   the full content of a docker-compose.yml file.
+ * @param opts {Object}:
+ *   - args {String} The command (after the 'docker-compose ') to run. E.g.
+ *    'up -d'.
+ *   - user {Object} The user object passed to `getDockerEnv`'s callback.
+ * @param callback {Function} `function (err, stdout, stderr)`
+ */
+function cliCompose(composeConfig, opts, callback) {
+    assert.string(composeConfig, 'composeConfig');
+    assert.object(opts, 'opts');
+    assert.string(opts.args, 'opts.args');
+    assert.object(opts.user, 'opts.user');
+    assert.func(callback, 'callback');
+
+    var user = opts.user;
+
+    user.compose(composeConfig, opts.args, callback);
+}
+
+module.exports = cliCompose;
\ No newline at end of file
diff --git a/test/runtest.common b/test/runtest.common
index 6e543b4..86e9f73 100644
--- a/test/runtest.common
+++ b/test/runtest.common
@@ -66,6 +66,29 @@ if [[ -z "$DOCKER_CLI_VERSIONS" || "$DOCKER_CLI_VERSIONS" == "latest" ]]; then
     export DOCKER_CLI_VERSIONS="${DOCKER_AVAILABLE_CLI_VERSIONS%% *}"
 fi
 
+# docker-compose versions for testing:
+# 1. 'COMPOSE_AVAILABLE_CLI_VERSIONS' is the set of 'docker-compose' CLI
+#    versions we install in the "sdcdockertest_client" zone from which we run
+#    'docker-compose'. This is the set of possible values for
+#    COMPOSE_CLI_VERSIONS.
+# 2. 'COMPOSE_CLI_VERSIONS' defines the 'docker-compose' CLI versions against
+#    which we run the "test/integration/compose-*.test.js" files. This is
+#    overridable, e.g.: COMPOSE_CLI_VERSIONS=1.9.0 .../runtests
+#
+# The only available compose version for now is 1.9.0 because it is what
+# triton-docker uses (see
+# https://github.com/joyent/triton-docker-cli/blob/4cc524dcb1a9d12adf192e057ca737fcf80069be/triton-docker#L5)
+# and triton-docker represents the closest thing to what's officially supported
+# by sdc-docker as possible.
+export COMPOSE_AVAILABLE_CLI_VERSIONS="1.9.0"
+if [[ "$COMPOSE_CLI_VERSIONS" == "all" ]]; then
+    export COMPOSE_CLI_VERSIONS="$COMPOSE_AVAILABLE_CLI_VERSIONS"
+fi
+if [[ -z "$COMPOSE_CLI_VERSIONS" || "$COMPOSE_CLI_VERSIONS" == "latest" ]]; then
+    # Use the first (latest) version, splitting on the space separator.
+    export COMPOSE_CLI_VERSIONS="${COMPOSE_AVAILABLE_CLI_VERSIONS%% *}"
+fi
+
 # Guard
 guard_file=/lib/sdc/.sdc-test-no-production-data
 if [[ $(uname) == "SunOS" && ! -f "$guard_file" ]]; then
@@ -133,6 +156,8 @@ echo "# Test config:"
 echo "#  DOCKER_ADMIN_URL=${DOCKER_ADMIN_URL}"
 echo "#  DOCKER_AVAILABLE_CLI_VERSIONS=${DOCKER_AVAILABLE_CLI_VERSIONS}"
 echo "#  DOCKER_CLI_VERSIONS=${DOCKER_CLI_VERSIONS}"
+echo "#  COMPOSE_AVAILABLE_CLI_VERSIONS=${COMPOSE_AVAILABLE_CLI_VERSIONS}"
+echo "#  COMPOSE_CLI_VERSIONS=${COMPOSE_CLI_VERSIONS}"
 echo "#  DOCKER_URL=${DOCKER_URL}"
 echo "#  DOCKER_UUID=${DOCKER_UUID}"
 echo "#  FWAPI_URL=${FWAPI_URL}"
diff --git a/test/runtests b/test/runtests
index 9521e5b..4de11a3 100755
--- a/test/runtests
+++ b/test/runtests
@@ -112,6 +112,19 @@ for test_file in $test_files; do
                 [[ -n "$opt_stop_on_failure" ]] && break
             fi
         done
+    elif [[ ${test_base:0:8} == "compose-" ]]; then
+        for compose_cli_version in $COMPOSE_CLI_VERSIONS; do
+            echo "# $test_base (COMPOSE_CLI_VERSION=$compose_cli_version)"
+            COMPOSE_CLI_VERSION=$compose_cli_version \
+                PATH=$NODE_INSTALL/bin:$PATH \
+                $TAPE $test_file \
+                | tee $OUTPUT_DIR/$test_base-$compose_cli_version.tap
+            if [[ "$?" != "0" ]]; then
+                echo "$test_file (COMPOSE_CLI_VERSION=$compose_cli_version)" \
+                    >> $OUTPUT_DIR/failing-tests.txt
+                [[ -n "$opt_stop_on_failure" ]] && break
+            fi
+        done
     else
         echo "# $test_base"
         PATH=$NODE_INSTALL/bin:$PATH $TAPE $test_file \
diff --git a/tools/get-compose-clients.sh b/tools/get-compose-clients.sh
new file mode 100644
index 0000000..93d40b1
--- /dev/null
+++ b/tools/get-compose-clients.sh
@@ -0,0 +1,84 @@
+#!/bin/bash
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright 2018, Joyent, Inc.
+#
+
+# Get 'docker' client binaries (from
+# https://github.com/docker/compose/releases/download/{{compose_version}}/) By
+# default it will get all the docker-compose client versions that sdc-docker.git
+# cares about. If given versions it will just download those.
+#
+# Usage:
+#       cd ~/opt/dockers
+#       ~/sdc-docker/tools/get-compose-clients.sh
+#
+#       # Get just a particular version:
+#       cd ~/opt/dockers
+#       ~/sdc-docker/tools/get-compose-clients.sh 1.11.0
+#
+
+
+if [[ -n "$TRACE" ]]; then
+    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
+    set -o xtrace
+fi
+set -o errexit
+set -o pipefail
+set -o nounset
+
+
+# ---- globals
+
+# Note: Should keep this in sync with "COMPOSE_AVAILABLE_CLI_VERIONS"
+DEFAULT_VERS="1.9.0"
+
+WRKDIR=/var/tmp/tmp.get-docker-clients
+DSTDIR=$(pwd)
+OS=$(uname)
+ARCH=x86_64
+COMPOSE_RELEASES_BASE_URL=https://github.com/docker/compose/releases/download
+
+# ---- support functions
+
+function fatal
+{
+    echo "" >&2
+    echo "* * *" >&2
+    printf "$NAME: fatal error: $*\n" >&2
+    exit 1
+}
+
+
+function get_compose_client
+{
+    local ver
+    ver="$1"
+
+    if [[ ! -f $DSTDIR/docker-compose-$ver ]]; then
+        echo "# Getting docker-compose-$ver"
+        curl -OsS $COMPOSE_RELEASES_BASE_URL/$ver/docker-compose-$OS-$ARCH
+        mv docker-compose-$OS-$ARCH $DSTDIR/docker-compose-$ver
+        chmod 755 $DSTDIR/docker-compose-$ver
+        $DSTDIR/docker-compose-$ver --version
+    else
+        echo "# Already have docker-compose-$ver"
+        $DSTDIR/docker-compose-$ver --version
+    fi
+}
+
+# ---- mainline
+
+versions="$@"
+if [[ -z "$versions" ]]; then
+    versions="$DEFAULT_VERS"
+fi
+
+for ver in $versions; do
+    get_compose_client "$ver"
+done
