commit 8bccd690dbb1b144304226ef3694baefd4f5cc77
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2019-06-27T16:29:40+02:00 (3 months ago)
    
    TRITON-1764 VMAPI doesn't support "remaining" disk size for machine creation
    Reviewed by: Mike Gerdts <mike.gerdts@joyent.com>
    Approved by: Mike Gerdts <mike.gerdts@joyent.com>

diff --git a/lib/common/validation.js b/lib/common/validation.js
index 8a7b980..be69401 100644
--- a/lib/common/validation.js
+++ b/lib/common/validation.js
@@ -2560,13 +2560,18 @@ exports.setDefaultValues = function (params, options) {
 
     // Add additional values for bhyve or kvm disks
     if (['bhyve', 'kvm'].indexOf(params.brand) !== -1) {
-        console.log(params);
+        // Set the disks to be used to package disks in case none is given:
+        if (!params.disks && params.package.disks) {
+            params.disks = params.package.disks;
+        }
+
         params.disks[0].image_name = params.image.name;
 
         if (!params.disks[0].image_size) {
             params.disks[0].image_size = params.image.image_size;
         }
 
+
         // We don't set the refreservation via VMAPI for bhyve and instead
         // allow SmartOS to determine the refreservation.
         if (params.brand === 'kvm') {
diff --git a/lib/endpoints/vms.js b/lib/endpoints/vms.js
index 6d24871..0cf5fc4 100644
--- a/lib/endpoints/vms.js
+++ b/lib/endpoints/vms.js
@@ -2119,6 +2119,7 @@ function createVm(req, res, next) {
         arg: req,
         funcs: [
             validateCreateVmParams,
+            setBhyveDisksSizes,
             checkAllNfsVolumesReachable,
             allocateServer,
             getNicTags,
@@ -2321,6 +2322,83 @@ function createVm(req, res, next) {
         handleUpdateVMResponse(req, res, next, juuid);
         return;
     }
+
+    function setBhyveDisksSizes(_, done) {
+        var params = req.params;
+        if (params.brand !== 'bhyve') {
+            done();
+            return;
+        }
+
+        if (params.quota) {
+            if (!params.flexible_disk_size &&
+                (params.package && params.package.flexible_disk)) {
+                params.flexible_disk_size = params.quota;
+            }
+            delete params.quota;
+        }
+
+        var error = [ errors.invalidParamErrorsElem('disks') ];
+
+        if (params.flexible_disk_size) {
+            var remainingIdx;
+            try {
+                var disksSum = params.disks.reduce(
+                    function sumDisk(sum, disk, idx) {
+                    var diskSize;
+                    if (remainingIdx !== undefined &&
+                        disk.size === 'remaining') {
+                        throw new errors.ValidationFailedError(
+                            'Only one disk.size can be set to ' +
+                            '`remaining`', error);
+                    }
+
+                    if (disk.size === 'remaining') {
+                        remainingIdx = idx;
+                        diskSize = 0;
+                    } else {
+                        diskSize = disk.size;
+                    }
+
+                    if (diskSize === undefined && disk.image_uuid) {
+                        if (idx !== 0) {
+                            throw new errors.ValidationFailedError(
+                                'disk.size must be set if disk is ' +
+                                'not the boot disk', error);
+                        }
+
+                        diskSize = params.image.image_size;
+                    }
+
+                    return sum + diskSize;
+                }, 0);
+            } catch (e) {
+                done(e);
+                return;
+            }
+
+            if (remainingIdx !== undefined) {
+                var remaining = params.flexible_disk_size - disksSum;
+
+                if ((remainingIdx === 0 &&
+                    params.image.image_size > remaining) || (remaining <= 0)) {
+                    done(new errors.ValidationFailedError(
+                        'The size of the disks must not be ' +
+                        'greater than the package quota', error));
+                    return;
+                }
+
+                params.disks[remainingIdx].size = remaining;
+                disksSum += remaining;
+            }
+        }
+
+        // With bhyve we also need to always set boot=true for the image
+        // disk. This avoids the problem described in OS-6604.
+        params.disks[0].boot = true;
+
+        done();
+    }
 }
 
 /*
diff --git a/test/vms.disks.test.js b/test/vms.disks.test.js
index aace437..508d744 100644
--- a/test/vms.disks.test.js
+++ b/test/vms.disks.test.js
@@ -14,7 +14,6 @@ var uuid = require('libuuid');
 var common = require('./common');
 var waitForValue = common.waitForValue;
 
-
 // --- Globals
 
 
@@ -34,8 +33,8 @@ var VM_OPTS = {
     vcpus: 1,
     cpu_cap: 100,
     ram: 1024,
-    disks: [],     // filled in later
-    networks: [],  // filled in later
+    disks: [], // filled in later
+    networks: [], // filled in later
     creator_uuid: CUSTOMER_UUID,
     tags: {
         'triton.placement.exclude_virtual_servers': true
@@ -47,6 +46,7 @@ var CALLER = {
     keyId: '/foo@joyent.com/keys/id_rsa'
 };
 
+var IMG_DISK_SIZE;
 
 // --- Helpers
 
@@ -104,6 +104,16 @@ function deleteVm(t) {
 }
 
 
+function createVmAttempt(t, vmOpts) {
+    var opts = createOpts('/vms', vmOpts);
+    CLIENT.post(opts, vmOpts, function postCb(err, req, res) {
+        t.ok(err, 'Failed Attempt Error');
+        t.equal(res.statusCode, 409, 'status code: ' + res.statusCode);
+        t.done();
+    });
+}
+
+
 // --- Tests
 
 
@@ -129,6 +139,7 @@ exports.setup = function setup(t) {
                 })[0];
 
                 VM_OPTS.disks.push({ image_uuid: newestImg.uuid });
+                IMG_DISK_SIZE = newestImg.image_size;
 
                 t.done();
             });
@@ -137,6 +148,44 @@ exports.setup = function setup(t) {
 };
 
 
+exports.attempt_to_use_remaining_disk_size_not_enough_quota =
+function attempt_to_use_remaining_disk_size_not_enough_quota(t) {
+    var opts = jsprim.deepCopy(VM_OPTS);
+    opts.alias = VM_ALIAS_BASE + '-' + process.pid;
+    opts.flexible_disk_size = IMG_DISK_SIZE / 2;
+    opts.quota = IMG_DISK_SIZE / 2;
+    opts.disks.push({size: 'remaining'});
+    createVmAttempt(t, opts);
+};
+
+
+exports.initialize_remaining_correctly_with_flexible_disk_size =
+function initialize_remaining_correctly_with_flexible_disk_size(t) {
+    var opts = jsprim.deepCopy(VM_OPTS);
+    opts.alias = VM_ALIAS_BASE + '-' + process.pid;
+    opts.flexible_disk_size = IMG_DISK_SIZE + 1024;
+    opts.quota = IMG_DISK_SIZE + 1024;
+    opts.disks.push({size: 'remaining'});
+    createVm(t, opts);
+};
+
+exports.destroy_remaining_correctly_with_flexible_disk_size = deleteVm;
+
+exports.initialize_remaining_correctly_without_flexible_disk_size =
+function initialize_remaining_correctly_without_flexible_disk_size(t) {
+    var opts = jsprim.deepCopy(VM_OPTS);
+    opts.alias = VM_ALIAS_BASE + '-' + process.pid;
+    opts.quota = 22528;
+    opts.disks.push({size: 'remaining'});
+    opts.package = {
+        flexible_disk: true
+    };
+    createVm(t, opts);
+};
+
+exports.destroy_remaining_correctly_without_flexible_disk_size = deleteVm;
+
+
 exports.initialize_non_flexible_disk_vm =
 function initialize_non_flexible_disk_vms(t) {
     var opts = jsprim.deepCopy(VM_OPTS);
@@ -164,6 +213,7 @@ exports.initialize_flexible_disk_vm = function initialize_flexible_disk_vm(t) {
     var opts = jsprim.deepCopy(VM_OPTS);
     opts.alias = VM_ALIAS_BASE + '-' + process.pid;
     opts.flexible_disk_size = 11264;
+    opts.quota = 22528;
     createVm(t, opts);
 };
 
