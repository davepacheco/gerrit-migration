From bcaf0675f77fdb07e155951a9199df933eb44c9c Mon Sep 17 00:00:00 2001
From: Chris Burroughs <chris.burroughs@joyent.com>
Date: Mon, 25 Mar 2019 20:08:15 +0000
Subject: [PATCH] TOOLS-2202 buildimage needs a mechanism to audit pkgsrc
 packages TOOLS-2203 buildimage needs a way to (optionally) upgrade packages
 Reviewed by: Tim Foster <tim.foster@joyent.com> Approved by: Tim Foster
 <tim.foster@joyent.com>

---
 Makefile                        |   6 ++
 tools/buildimage/bin/buildimage | 166 ++++++++++++++++++++++++++++++++
 tools/mk/Makefile.targ          |  13 +++
 3 files changed, 185 insertions(+)

diff --git a/Makefile b/Makefile
index ef2e975..5f441d6 100644
--- a/Makefile
+++ b/Makefile
@@ -209,6 +209,12 @@ BUILDIMAGE_PKGSRC = foobar-42 ook-1.0.1b cheese-0.4cheddar
 # BUILDIMAGE_PKG=$(TOP)/bar/mytarball.tar.gz
 #
 
+#
+# Set for buildimage to have pkgin update and full-upgrade before installing
+# BUILDIMAGE_PKGSRC packages.
+#
+# BUILDIMAGE_DO_PKGSRC_UPGRADE=true
+
 #
 # Repo-specific targets
 #
diff --git a/tools/buildimage/bin/buildimage b/tools/buildimage/bin/buildimage
index 91d10af..626ce67 100755
--- a/tools/buildimage/bin/buildimage
+++ b/tools/buildimage/bin/buildimage
@@ -50,12 +50,24 @@ var CLI_OPTIONS = [
         help: 'A JSON object with manifest data. Must have at least name and version. [required]',
         helpArg: '{"name": "blah", "version": "1.0.0", ...}'
     },
+    {
+        names: ['upgrade_first', 'u'],
+        type: 'bool',
+        help: 'pkgin update and full-upgrade before installing additional packages',
+        default: false
+    },
     {
         names: ['packages', 'p'],
         type: 'string',
         help: 'Comma separated list of pkgsrc packages to install in image.',
         helpArg: 'pkg1,pkg2,...'
     },
+    {
+        names: ['pkg_audit', 'a'],
+        type: 'bool',
+        help: 'perform a pkg audit after installing packages and save results in a .pkgaudit file',
+        default: false
+    },
     {
         names: ['image_prefix', 'P'],
         type: 'string',
@@ -267,6 +279,64 @@ function replaceHttpProxy(opts, callback) {
     callback();
 }
 
+
+function pkginUpdate(opts, callback) {
+    assert.object(opts, 'opts');
+    assert.bool(opts.upgrade_first, 'opts.upgrade_first');
+    assert.func(callback, 'callback');
+
+    if (!opts.upgrade_first) {
+        return callback();
+    }
+
+    logLine('pkgin update...');
+    const child = child_process.spawn('/usr/sbin/chroot', [
+        opts.mountpoint + '/root',
+        '/opt/local/bin/pkgin', 'update'
+    ], {
+        stdio: ['ignore', process.stdout, process.stderr]
+    });
+
+    child.on('close', function _onClose(code) {
+        logLine('Child pkgin chroot exited with code ' + code);
+        if (code !== 0) {
+            callback(new Error('failed to update pkgin'));
+            return;
+        }
+        callback();
+    });
+}
+
+
+function pkginFullUpgrade(opts, callback) {
+    assert.object(opts, 'opts');
+    assert.bool(opts.upgrade_first, 'opts.upgrade_first');
+    assert.func(callback, 'callback');
+
+    if (!opts.upgrade_first) {
+        return callback();
+    }
+
+    logLine('pkgin full-upgrade...');
+    const child = child_process.spawn('/usr/sbin/chroot', [
+        opts.mountpoint + '/root',
+        '/opt/local/bin/pkgin', '-y', 'full-upgrade'
+    ].concat(opts.packages), {
+        stdio: ['ignore', process.stdout, process.stderr]
+    });
+
+    child.on('close', function _onRsync(code) {
+        logLine('Child pkgsrc chroot exited with code ' + code);
+        if (code !== 0) {
+            callback(new Error('failed to upgrade packages'));
+            return;
+        }
+        logLine('Installed ' + opts.packages.join(', '));
+        callback();
+    });
+}
+
+
 function installPkgsrcPkgs(opts, callback) {
     assert.object(opts, 'opts');
     assert.string(opts.mountpoint, 'opts.mountpoint');
@@ -332,6 +402,94 @@ function loadPkgsrcPkgs(opts, callback) {
     });
 }
 
+
+function pkgAudit(opts, callback) {
+    assert.object(opts, 'opts');
+    assert.bool(opts.pkg_audit, 'opts.pkg_audit');
+    assert.string(opts.mountpoint, 'opts.mountpoint');
+    assert.array(opts.packages, 'opts.packages');
+    assert.func(callback, 'callback');
+
+    if (!opts.pkg_audit) {
+        logLine('skipping pkg audit');
+        return callback();
+    }
+
+    // pkg_admin fetch-pkg-vulnerabilities && pkg_admin audit
+    vasync.pipeline({
+        arg: {},
+        funcs: [
+            function stepFetch(_, next) {
+                const child = child_process.spawn('/usr/sbin/chroot', [
+                    opts.mountpoint + '/root',
+                    '/opt/local/sbin/pkg_admin', 'fetch-pkg-vulnerabilities'
+                ], {
+                    stdio: ['ignore', process.stdout, process.stderr]
+                });
+
+                child.on('close', function _onAdmin(code) {
+                    logLine('Child pkgsrc chroot exited with code ' + code);
+                    if (code !== 0) {
+                        callback(new Error('failed fetch pkg vulnerabilities'));
+                        return;
+                    }
+                    next();
+                });
+            },
+            function stepAudit(stash, next) {
+                child_process.execFile('/usr/sbin/chroot', [
+                    opts.mountpoint + '/root',
+                    '/opt/local/sbin/pkg_admin', 'audit'
+                ], {
+                    maxBuffer: 10 * 1024 * 1024
+                }, function _onAudit(err, stdout, stderr) {
+                    // pkg_admin exits with 1 if there are any vulnerabilities.
+                    // This is intended as an informational service and not to
+                    // abort the build.
+                    if (err && err.code !== 1) {
+                        logExecError(err, stdout, stderr);
+                        return next(err);
+                    }
+                    logLine('audited vulnerabilities:')
+                    logLine(stdout);
+                    stash.vulnerabilities = stdout;
+                    next();
+                });
+            },
+            function stepSave(stash, next) {
+                const fname = ('/tmp/' + opts.image_prefix + '-' + opts.manifest.version +
+                               '.pkgaudit');
+                fs.writeFile(fname, stash.vulnerabilities, next);
+            }
+        ]}, callback);
+}
+
+
+function pkginCleanup(opts, callback) {
+    assert.object(opts, 'opts');
+    assert.bool(opts.pkg_audit, 'opts.pkg_audit');
+    assert.string(opts.mountpoint, 'opts.mountpoint');
+    assert.array(opts.packages, 'opts.packages');
+    assert.func(callback, 'callback');
+
+    logLine('cleaning up pkgin files...');
+    const child = child_process.spawn('/usr/sbin/chroot', [
+        opts.mountpoint + '/root',
+        '/usr/bin/rm', '-rf', '/var/db/pkgin/'
+    ].concat(opts.packages), {
+        stdio: ['ignore', process.stdout, process.stderr]
+    });
+
+    child.on('close', function _onClose(code) {
+        logLine('Child rm chroot exited with code ' + code);
+        if (code !== 0) {
+            callback(new Error('failed to cleanup pkgin files'));
+            return;
+        }
+        callback();
+    });
+}
+
 function doChrootUmount(mountObj, callback) {
     assert.object(mountObj, 'mountObj');
     assert.string(mountObj.dest, 'mountObj.dest');
@@ -497,6 +655,8 @@ function buildImage(opts, callback) {
     assert.string(opts.image_prefix, 'opts.image_prefix');
     assert.string(opts.manifest.name, 'opts.manifest.name');
     assert.string(opts.manifest.version, 'opts.manifest.version');
+    assert.bool(opts.upgrade_first, 'opts.upgrade_first');
+    assert.bool(opts.pkg_audit, 'opts.pkg_audit');
     assert.func(callback, 'callback');
 
     if (!opts.manifest.owner) {
@@ -536,8 +696,12 @@ function buildImage(opts, callback) {
             replaceHttpProxy,
             installFiles,
             setupChroot,
+            pkginUpdate,
+            pkginFullUpgrade,
             installPkgsrcPkgs,
             loadPkgsrcPkgs,
+            pkgAudit,
+            pkginCleanup,
             unsetupChroot,
             cleanupZoneAnalog,
             createImage,
@@ -675,7 +839,9 @@ function main() {
         image: opts.image,
         image_prefix: opts.image_prefix,
         manifest: manifest,
+        upgrade_first: opts.upgrade_first,
         packages: packages,
+        pkg_audit: opts.pkg_audit,
         verbose: opts.verbose
     }, function _onBuild(err) {
         if (err) {
diff --git a/tools/mk/Makefile.targ b/tools/mk/Makefile.targ
index 159e095..060d5e3 100644
--- a/tools/mk/Makefile.targ
+++ b/tools/mk/Makefile.targ
@@ -397,6 +397,15 @@ prepublish:
 	@echo "Generating $(ENGBLD_BITS_DIR)/$(NAME)/npm-ls.json"
 	-/opt/tools/bin/npm ls --json > $(ENGBLD_BITS_DIR)/$(NAME)/npm-ls.json
 
+
+#
+# Transform the boolean into the appropriate cli flag
+#
+ifdef BUILDIMAGE_DO_PKGSRC_UPGRADE
+BUILDIMAGE_DO_PKGSRC_UPGRADE_ARGS=-u
+endif
+
+
 #
 # The list of pkgsrc packages that should be installed in the
 # image that the 'buildimage' target constructs. Set here rather than
@@ -447,12 +456,16 @@ buildimage: stamp-buildimage-prep release $(AGENTS:%=%-prebuilt)
 		-i $(BASE_IMAGE_UUID) \
 		-d $(BUILDIMAGE_STAGEDIR)/root \
 		-m '$(BUILDIMAGE_MF)' \
+		$(BUILDIMAGE_DO_PKGSRC_UPGRADE_ARGS) \
 		$(BUILDIMAGE_PKGSRC_ARGS) \
+		-a \
 		-P $(NAME)-zfs
 	cp /tmp/$(NAME)-zfs-$(BUILDIMAGE_VERSION).zfs.gz $(ENGBLD_BITS_DIR)/$(NAME)
 	cp /tmp/$(NAME)-zfs-$(BUILDIMAGE_VERSION).imgmanifest $(ENGBLD_BITS_DIR)/$(NAME)
+	cp /tmp/$(NAME)-zfs-$(BUILDIMAGE_VERSION).pkgaudit $(ENGBLD_BITS_DIR)/$(NAME)
 	$(PFEXEC) rm /tmp/$(NAME)-zfs-$(BUILDIMAGE_VERSION).zfs.gz
 	$(PFEXEC) rm /tmp/$(NAME)-zfs-$(BUILDIMAGE_VERSION).imgmanifest
+	$(PFEXEC) rm /tmp/$(NAME)-zfs-$(BUILDIMAGE_VERSION).pkgaudit
 	$(PFEXEC) rm -rf $(BUILDIMAGE_STAGEDIR)
 
 #
-- 
2.21.0

