From bc504a5c30c80e21b33f6bf0be0a2a3830ab53c8 Mon Sep 17 00:00:00 2001
From: Todd Whiteman <todd.whiteman@joyent.com>
Date: Wed, 7 Aug 2019 19:18:46 -0700
Subject: [PATCH] TRITON-1862 add triton account limits support

---
 CHANGES.md                           |   5 ++
 lib/cloudapi2.js                     |  11 +++
 lib/do_account/do_limits.js          | 104 +++++++++++++++++++++++++++
 lib/do_account/index.js              |   4 +-
 package.json                         |   2 +-
 test/integration/cli-account.test.js |  28 ++++++++
 6 files changed, 152 insertions(+), 2 deletions(-)
 create mode 100644 lib/do_account/do_limits.js

diff --git a/CHANGES.md b/CHANGES.md
index 3eb02a4..0cfd736 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -6,6 +6,11 @@ Known issues:
 
 ## not yet released
 
+## 7.4.0
+
+- [TRITON-1862] Add `triton account limits` support. This returns the
+  provisioning limits set for the account and/or datacenter.
+
 ## 7.3.0
 
 - [TRITON-899] Add node-triton support for triton instance migration.
diff --git a/lib/cloudapi2.js b/lib/cloudapi2.js
index 89fd0a1..96e3944 100644
--- a/lib/cloudapi2.js
+++ b/lib/cloudapi2.js
@@ -756,6 +756,17 @@ CloudApi.prototype.getAccount = function getAccount(opts, cb) {
 };
 
 
+/**
+ * Get account provisioning limits.
+ *
+ * @param {Function} callback of the form `function (err, limits, res)`
+ */
+CloudApi.prototype.getAccountLimits = function getAccountLimits(opts, cb) {
+    var endpoint = format('/%s/limits', this.account);
+    this._passThrough(endpoint, opts, cb);
+};
+
+
 // <updatable account field> -> <expected typeof>
 CloudApi.prototype.UPDATE_ACCOUNT_FIELDS = {
     email: 'string',
diff --git a/lib/do_account/do_limits.js b/lib/do_account/do_limits.js
new file mode 100644
index 0000000..bb0a522
--- /dev/null
+++ b/lib/do_account/do_limits.js
@@ -0,0 +1,104 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2019, Joyent, Inc.
+ *
+ * `triton account limits ...`
+ */
+
+var tabula = require('tabula');
+
+var common = require('../common');
+
+
+var COLUMNS = [
+    { lookup: 'type', width: 9 },
+    { lookup: 'used', align: 'right' },
+    { lookup: 'limit', align: 'right' }
+];
+var COLUMNS_EXTRA = COLUMNS.concat([
+    { lookup: 'os', width: 8 },
+    { lookup: 'image' }
+]);
+
+function do_limits(subcmd, opts, args, callback) {
+    if (opts.help) {
+        this.do_help('help', {}, [subcmd], callback);
+        return;
+    } else if (args.length !== 0) {
+        callback(new Error('invalid args: ' + args));
+        return;
+    }
+
+    var tritonapi = this.top.tritonapi;
+    common.cliSetupTritonApi({cli: this.top}, function onSetup(setupErr) {
+        if (setupErr) {
+            callback(setupErr);
+            return;
+        }
+        tritonapi.cloudapi.getAccountLimits(function (err, limits) {
+            if (err) {
+                callback(err);
+                return;
+            }
+
+            var columns = COLUMNS;
+            var i;
+            var limit;
+
+            for (i = 0; i < limits.length; i++) {
+                limit = limits[i];
+
+                // Check if we need the extra column format.
+                if (limit.check) {
+                    columns = COLUMNS_EXTRA;
+                }
+
+                // Convert limit field names for readability.
+                limit.limit = limit.value;
+                limit.type = limit.by;
+                delete limit.value;
+                delete limit.by;
+            }
+
+            if (opts.json) {
+                console.log(JSON.stringify(limits));
+            } else {
+                tabula(limits, {
+                    skipHeader: opts.H,
+                    columns: columns
+                });
+            }
+            callback();
+        });
+    });
+}
+
+do_limits.options = [
+    {
+        names: ['help', 'h'],
+        type: 'bool',
+        help: 'Show this help.'
+    },
+    {
+        names: ['json', 'j'],
+        type: 'bool',
+        help: 'JSON output.'
+    }
+];
+
+do_limits.synopses = ['{{name}} {{cmd}}'];
+
+do_limits.help = [
+    'Show account provisioning limit information',
+    '',
+    '{{usage}}',
+    '',
+    '{{options}}'
+].join('\n');
+
+module.exports = do_limits;
diff --git a/lib/do_account/index.js b/lib/do_account/index.js
index a79f1c9..4786011 100644
--- a/lib/do_account/index.js
+++ b/lib/do_account/index.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  *
  * `triton account ...`
  */
@@ -32,6 +32,7 @@ function AccountCLI(top) {
         helpSubcmds: [
             'help',
             'get',
+            'limits',
             'update'
         ]
     });
@@ -44,6 +45,7 @@ AccountCLI.prototype.init = function init(opts, args, cb) {
 };
 
 AccountCLI.prototype.do_get = require('./do_get');
+AccountCLI.prototype.do_limits = require('./do_limits');
 AccountCLI.prototype.do_update = require('./do_update');
 
 
diff --git a/package.json b/package.json
index 96ef2e8..50def24 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "triton",
   "description": "Joyent Triton CLI and client (https://www.joyent.com/triton)",
-  "version": "7.3.0",
+  "version": "7.4.0",
   "author": "Joyent (joyent.com)",
   "homepage": "https://github.com/joyent/node-triton",
   "dependencies": {
diff --git a/test/integration/cli-account.test.js b/test/integration/cli-account.test.js
index b2f8f96..e0ee2c5 100644
--- a/test/integration/cli-account.test.js
+++ b/test/integration/cli-account.test.js
@@ -111,5 +111,33 @@ test('triton account', function (suite) {
             });
     });
 
+    suite.test(' triton account limits', function (t) {
+        h.triton('-v account limits', function (err, stdout, stderr) {
+            if (h.ifErr(t, err))
+                return t.end();
+            t.ok(stdout.indexOf('LIMIT') > 0, 'LIMIT header should be found');
+            t.end();
+        });
+    });
+
+    suite.test(' triton account limits -j', function (t) {
+        h.triton('account limits -j', function (err, stdout, stderr) {
+            if (h.ifErr(t, err))
+                return t.end();
+            var i;
+            var limits = JSON.parse(stdout);
+            t.ok(Array.isArray(limits), 'json limits should be an array');
+            if (Array.isArray(limits) && limits.length > 0) {
+                for (i = 0; i < limits.length; i++) {
+                    t.ok(['ram', 'quota', 'machines'].indexOf(
+                        limits[i].type) >= 0, 'limit has a valid type field');
+                    t.ok(limits[i].used >= 0, 'limit has a valid used field');
+                    t.ok(limits[i].limit >= 0, 'limit has a valid limit field');
+                }
+            }
+            t.end();
+        });
+    });
+
     suite.end();
 });
-- 
2.21.0

