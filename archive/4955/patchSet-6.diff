commit 410149230860b710cf9a396e50017f39f172309d (refs/changes/55/4955/6)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2018-10-19T20:23:51+00:00 (12 months ago)
    
    TRITON-880 want ufds to store and understand Yubikey attestation certs
    Reviewed by: Cody Peter Mello <cody.mello@joyent.com>
    Approved by: Cody Peter Mello <cody.mello@joyent.com>

diff --git a/etc/config.coal.json b/etc/config.coal.json
index 115bad9..2164bf0 100644
--- a/etc/config.coal.json
+++ b/etc/config.coal.json
@@ -30,6 +30,12 @@
             "targetdn": { "type": "string"}
         }
     },
+    "attestation": {
+        "enabled": true,
+        "ca_certs": [
+            "-----BEGIN CERTIFICATE-----\nMIIDFzCCAf+gAwIBAgIDBAZHMA0GCSqGSIb3DQEBCwUAMCsxKTAnBgNVBAMMIFl1\nYmljbyBQSVYgUm9vdCBDQSBTZXJpYWwgMjYzNzUxMCAXDTE2MDMxNDAwMDAwMFoY\nDzIwNTIwNDE3MDAwMDAwWjArMSkwJwYDVQQDDCBZdWJpY28gUElWIFJvb3QgQ0Eg\nU2VyaWFsIDI2Mzc1MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMN2\ncMTNR6YCdcTFRxuPy31PabRn5m6pJ+nSE0HRWpoaM8fc8wHC+Tmb98jmNvhWNE2E\nilU85uYKfEFP9d6Q2GmytqBnxZsAa3KqZiCCx2LwQ4iYEOb1llgotVr/whEpdVOq\njoU0P5e1j1y7OfwOvky/+AXIN/9Xp0VFlYRk2tQ9GcdYKDmqU+db9iKwpAzid4oH\nBVLIhmD3pvkWaRA2H3DA9t7H/HNq5v3OiO1jyLZeKqZoMbPObrxqDg+9fOdShzgf\nwCqgT3XVmTeiwvBSTctyi9mHQfYd2DwkaqxRnLbNVyK9zl+DzjSGp9IhVPiVtGet\nX02dxhQnGS7K6BO0Qe8CAwEAAaNCMEAwHQYDVR0OBBYEFMpfyvLEojGc6SJf8ez0\n1d8Cv4O/MA8GA1UdEwQIMAYBAf8CAQEwDgYDVR0PAQH/BAQDAgEGMA0GCSqGSIb3\nDQEBCwUAA4IBAQBc7Ih8Bc1fkC+FyN1fhjWioBCMr3vjneh7MLbA6kSoyWF70N3s\nXhbXvT4eRh0hvxqvMZNjPU/VlRn6gLVtoEikDLrYFXN6Hh6Wmyy1GTnspnOvMvz2\nlLKuym9KYdYLDgnj3BeAvzIhVzzYSeU77/Cupofj093OuAswW0jYvXsGTyix6B3d\nbW5yWvyS9zNXaqGaUmP3U9/b6DlHdDogMLu3VLpBB9bm5bjaKWWJYgWltCVgUbFq\nFqyi4+JE014cSgR57Jcu3dZiehB6UtAPgad9L5cNvua/IWRmm+ANy3O2LH++Pyl8\nSREzU8onbBsjMg9QDiSf5oJLKvd/Ren+zGY7\n-----END CERTIFICATE-----"
+        ]
+    },
     "o=smartdc": {
         "blacklistRDN": "cn=blacklist",
         "pwdPolicyRDN": "cn=pwdPolicy",
diff --git a/lib/index.js b/lib/index.js
index ecaaeed..bf32ee4 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -81,6 +81,7 @@ module.exports = {
     modify: function modify(pre) {
         var chain = [
             db.authorize,
+            keys.modify,
             salt.modify
         ].concat(db.modify(schema.modify));
 
diff --git a/lib/keys.js b/lib/keys.js
index 83825ec..5707ddb 100644
--- a/lib/keys.js
+++ b/lib/keys.js
@@ -10,11 +10,32 @@
 
 var sshpk = require('sshpk');
 var ldap = require('ldapjs');
+var asn1 = require('asn1');
 
 ///--- API
 
 module.exports = {
 
+    modify: function modifyKey(req, res, next) {
+        var i;
+        for (i = req.changes.length - 1; i >= 0; i--) {
+            var c = req.changes[i];
+            if (c.operation === 'delete') {
+                continue;
+            }
+            if (c.modification.type === 'attested' ||
+                c.modification.type === 'ykserial' ||
+                c.modification.type === 'ykpinrequired' ||
+                c.modification.type === 'yktouchrequired') {
+
+                return next(new ldap.InvalidAttributeSyntaxError(
+                    'Modifying attestation data for an sdckey is not allowed'));
+            }
+        }
+
+        next();
+    },
+
     add: function addKey(req, res, next) {
         var entry = req.toObject().attributes;
         var log = req.log;
@@ -55,7 +76,7 @@ module.exports = {
 
             // Delete the old pkcs attribute, in case it's a lie
             if (entry.pkcs) {
-                delete req.attributes[req.indexOf('pkcs')];
+                req.attributes.splice(req.indexOf('pkcs'), 1);
             }
             req.addAttribute(new ldap.Attribute({
                 type: 'pkcs',
@@ -79,6 +100,115 @@ module.exports = {
             return next(new ldap.InvalidAttributeSyntaxError(e.toString()));
         }
 
+        if (entry.attested) {
+            req.attributes.splice(req.indexOf('attested'), 1);
+        }
+
+        if (entry.ykserial) {
+            req.attributes.splice(req.indexOf('ykserial'), 1);
+        }
+        if (entry.ykpinrequired) {
+            req.attributes.splice(req.indexOf('ykpinrequired'), 1);
+        }
+        if (entry.yktouchrequired) {
+            req.attributes.splice(req.indexOf('yktouchrequired'), 1);
+        }
+
+        var attested = false;
+
+        if (entry.attestation && entry.attestation.length > 0) {
+            if (!req.config.attestation.enabled) {
+                return next(new ldap.InvalidAttributeSyntaxError(
+                    'Attestation support is disabled'));
+            }
+
+            try {
+                var chain = entry.attestation.map(function (pem) {
+                    return (sshpk.parseCertificate(pem, 'pem'));
+                });
+            } catch (e) {
+                return next(new ldap.InvalidAttributeSyntaxError(e.toString()));
+            }
+
+            if (!chain[0].subjectKey.fingerprint('sha512').matches(key)) {
+                return next(new ldap.InvalidAttributeSyntaxError(
+                    'First attestation certificate must match subject key'));
+            }
+
+            for (i = 0; i < chain.length; ++i) {
+                log.debug({
+                    subject: chain[i].subjects[0].toString(),
+                    issuer: chain[i].issuer.toString(),
+                    purposes: chain[i].purposes
+                }, 'cert in attestation chain at %d', i);
+                if (chain[i].isExpired()) {
+                    return next(new ldap.InvalidAttributeSyntaxError(
+                        'Attestation certificate ' + i + ' has expired'));
+                }
+                if (i > 0 && chain[i].purposes &&
+                    chain[i].purposes.indexOf('ca') === -1) {
+
+                    return next(new ldap.InvalidAttributeSyntaxError(
+                        'Attestation chain certificate ' + i + ' is not a CA'));
+                }
+            }
+            for (i = 0; i < (chain.length - 1); ++i) {
+                if (!chain[i].isSignedBy(chain[i + 1])) {
+                    return next(new ldap.InvalidAttributeSyntaxError(
+                        'Attestation certificate ' + i + ' not signed by next' +
+                        ' in chain'));
+                }
+            }
+            var last = chain[chain.length - 1];
+            var ca = req.config.attestation.ca_certs.filter(function (maybeCA) {
+                return (last.isSignedBy(maybeCA));
+            })[0];
+
+            if (ca === undefined) {
+                return next(new ldap.InvalidAttributeSyntaxError(
+                    'Failed to find CA: ' + last.issuer.toString()));
+            }
+
+            var caBasicCons = ca.getExtension('2.5.29.19');
+            if (caBasicCons && caBasicCons.pathLen &&
+                (chain.length - 1) > caBasicCons.pathLen) {
+
+                return next(new ldap.InvalidAttributeSyntaxError(
+                    'Attestation chain too long for CA ' +
+                    ca.issuer.toString()));
+            }
+
+            attested = true;
+
+            var serialExt = chain[0].getExtension('1.3.6.1.4.1.41482.3.7');
+            if (serialExt !== undefined) {
+                var der = new asn1.Ber.Reader(serialExt.data);
+                req.addAttribute(new ldap.Attribute({
+                    type: 'ykserial',
+                    vals: [der.readInt()]
+                }));
+            }
+
+            var policyExt = chain[0].getExtension('1.3.6.1.4.1.41482.3.8');
+            if (policyExt !== undefined) {
+                req.addAttribute(new ldap.Attribute({
+                    type: 'ykpinrequired',
+                    vals: [policyExt.data[0] > 1]
+                }));
+                req.addAttribute(new ldap.Attribute({
+                    type: 'yktouchrequired',
+                    vals: [policyExt.data[1] > 1]
+                }));
+            }
+        }
+
+        if (req.config.attestation.enabled) {
+            req.addAttribute(new ldap.Attribute({
+                type: 'attested',
+                vals: [attested]
+            }));
+        }
+
         return next();
     }
 
diff --git a/lib/ufds.js b/lib/ufds.js
index db423aa..28f4431 100644
--- a/lib/ufds.js
+++ b/lib/ufds.js
@@ -20,6 +20,7 @@ var util = require('util');
 var EventEmitter = require('events').EventEmitter;
 var path = require('path');
 var fs = require('fs');
+var sshpk = require('sshpk');
 
 var ldap = require('ldapjs');
 var morayClient = require('moray');
@@ -187,6 +188,25 @@ function processConfigFile(file) {
         if (!config.port) {
             config.port = 389;
         }
+
+        if (!config.attestation) {
+            config.attestation = {};
+        }
+
+        if (!config.attestation.ca_certs) {
+            config.attestation.ca_certs = [];
+        }
+        config.attestation.ca_certs = config.attestation.ca_certs.
+            map(function (pem) {
+
+            var cert = sshpk.parseCertificate(pem, 'pem');
+            if (!cert.isSignedBy(cert) || cert.purposes.indexOf('ca') === -1) {
+                throw (new Error('CA cert for ' + cert.subjects[0].toString() +
+                    ' is invalid (not self-signed or not marked as CA)'));
+            }
+            return (cert);
+        });
+
     } catch (e) {
         console.error('Unable to parse configuration file: ' + e.message);
         process.exit(1);
diff --git a/package.json b/package.json
index f46456d..3d2469f 100644
--- a/package.json
+++ b/package.json
@@ -13,6 +13,7 @@
     "dependencies": {
         "aperture": "git+https://github.com/joyent/node-aperture.git#016977",
         "aperture-config": "git+https://github.com/joyent/aperture-config.git#master",
+        "asn1": "^0.2.4",
         "assert-plus": "0.1.2",
         "async": "0.1.22",
         "backoff": "2.4.1",
@@ -26,7 +27,7 @@
         "nopt": "2.1.1",
         "once": "1.3.0",
         "restify": "2.3.4",
-        "sshpk": "1.7.0",
+        "sshpk": "1.15.1",
         "ufds": "git+https://github.com/joyent/node-ufds.git#a7c674b76696fe7ab0fff1e2486f20d3af6a0d1a",
         "vasync": "1.6.2"
     },
diff --git a/sapi_manifests/ufds/template b/sapi_manifests/ufds/template
index ede90c4..84c8368 100644
--- a/sapi_manifests/ufds/template
+++ b/sapi_manifests/ufds/template
@@ -17,6 +17,17 @@
         },
         "version": 19
     },
+    "attestation": {
+        "enabled": {{#UFDS_ATTESTATION}}true{{/UFDS_ATTESTATION}}{{^UFDS_ATTESTATION}}false{{/UFDS_ATTESTATION}},
+        "ca_certs": [
+            {{^UFDS_ATTESTATION_CA_CERTS}}
+            "-----BEGIN CERTIFICATE-----\nMIIDFzCCAf+gAwIBAgIDBAZHMA0GCSqGSIb3DQEBCwUAMCsxKTAnBgNVBAMMIFl1\nYmljbyBQSVYgUm9vdCBDQSBTZXJpYWwgMjYzNzUxMCAXDTE2MDMxNDAwMDAwMFoY\nDzIwNTIwNDE3MDAwMDAwWjArMSkwJwYDVQQDDCBZdWJpY28gUElWIFJvb3QgQ0Eg\nU2VyaWFsIDI2Mzc1MTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMN2\ncMTNR6YCdcTFRxuPy31PabRn5m6pJ+nSE0HRWpoaM8fc8wHC+Tmb98jmNvhWNE2E\nilU85uYKfEFP9d6Q2GmytqBnxZsAa3KqZiCCx2LwQ4iYEOb1llgotVr/whEpdVOq\njoU0P5e1j1y7OfwOvky/+AXIN/9Xp0VFlYRk2tQ9GcdYKDmqU+db9iKwpAzid4oH\nBVLIhmD3pvkWaRA2H3DA9t7H/HNq5v3OiO1jyLZeKqZoMbPObrxqDg+9fOdShzgf\nwCqgT3XVmTeiwvBSTctyi9mHQfYd2DwkaqxRnLbNVyK9zl+DzjSGp9IhVPiVtGet\nX02dxhQnGS7K6BO0Qe8CAwEAAaNCMEAwHQYDVR0OBBYEFMpfyvLEojGc6SJf8ez0\n1d8Cv4O/MA8GA1UdEwQIMAYBAf8CAQEwDgYDVR0PAQH/BAQDAgEGMA0GCSqGSIb3\nDQEBCwUAA4IBAQBc7Ih8Bc1fkC+FyN1fhjWioBCMr3vjneh7MLbA6kSoyWF70N3s\nXhbXvT4eRh0hvxqvMZNjPU/VlRn6gLVtoEikDLrYFXN6Hh6Wmyy1GTnspnOvMvz2\nlLKuym9KYdYLDgnj3BeAvzIhVzzYSeU77/Cupofj093OuAswW0jYvXsGTyix6B3d\nbW5yWvyS9zNXaqGaUmP3U9/b6DlHdDogMLu3VLpBB9bm5bjaKWWJYgWltCVgUbFq\nFqyi4+JE014cSgR57Jcu3dZiehB6UtAPgad9L5cNvua/IWRmm+ANy3O2LH++Pyl8\nSREzU8onbBsjMg9QDiSf5oJLKvd/Ren+zGY7\n-----END CERTIFICATE-----"
+            {{/UFDS_ATTESTATION_CA_CERTS}}
+            {{#UFDS_ATTESTATION_CA_CERTS}}
+            "{{{cert}}}"{{^last}},{{/last}}
+            {{/UFDS_ATTESTATION_CA_CERTS}}
+        ]
+    },
     "changelog": {
         "bucket": "ufds_cn_changelog",
         "schema": {
diff --git a/schema/sdckey.js b/schema/sdckey.js
index ab1a7d4..0a24406 100644
--- a/schema/sdckey.js
+++ b/schema/sdckey.js
@@ -25,6 +25,15 @@ function SDCKey() {
             fingerprint: 1,
             pkcs: 1
         },
+        optional: {
+            attested: 1,
+            attestation: 0,  /* zero or more */
+
+            /* Specific to attested keys stored in Yubikeys. */
+            ykserial: 1,
+            ykpinrequired: 1,
+            yktouchrequired: 1
+        },
         strict: true
     });
 }
