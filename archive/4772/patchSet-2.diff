commit 1cc6a1117f16c0ce4f46df17a24c3c479c90a730 (refs/changes/72/4772/2)
Author: Orlando Vazquez <ovazquez@gmail.com>
Date:   2018-08-31T11:00:38-07:00 (1 year, 1 month ago)
    
    TRITON-740 Following upgrade to node v6 CNAPI dies in DAPI schema validation after having parsed overprovision_ratios value from moray with "querystring" module.
    Reviewed by: Orlando Vazquez <orlando@joyent.com>
    Approved by: Orlando Vazquez <orlando@joyent.com>

diff --git a/lib/common.js b/lib/common.js
index 713c925..e5620e7 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -10,8 +10,6 @@
 
 var fs = require('fs');
 var libuuid = require('libuuid');
-var qs = require('querystring');
-
 
 var HEARTBEAT_RECONCILIATION_PERIOD_SECONDS = 5;
 
@@ -87,30 +85,6 @@ function isString(obj) {
     return Object.prototype.toString.call(obj) === '[object String]';
 }
 
-// Return a query string representation of a "flat" (un-nested) object such
-// that that the keys in the query string appear in sorted order. This makes
-// it possible to compare two objects for equality using a string comparison.
-//
-// Convert from:
-//      {
-//           b: 10,
-//           x: "hi",
-//           a: 3.0
-//      }
-//
-// To:
-//      a=3.0&b=10&x=hi
-
-function orderedKVString(obj) {
-    var keys = Object.keys(obj).sort();
-    var parts = [];
-    var i = keys.length;
-    while (i--) {
-        parts.unshift(qs.escape(keys[i]) + '=' + qs.escape(obj[keys[i]]));
-    }
-    return parts.join('&');
-}
-
 
 function getAdminIp(sysinfo) {
     var interfaces;
@@ -163,7 +137,6 @@ module.exports = {
     isString: isString,
     filterEscape: filterEscape,
     randSort: randSort,
-    orderedKVString: orderedKVString,
     HEARTBEAT_RECONCILIATION_PERIOD_SECONDS:
         HEARTBEAT_RECONCILIATION_PERIOD_SECONDS,
     HEARTBEAT_LIFETIME_SECONDS: HEARTBEAT_LIFETIME_SECONDS
diff --git a/lib/endpoints/servers.js b/lib/endpoints/servers.js
index f6a42da..2f3acaa 100644
--- a/lib/endpoints/servers.js
+++ b/lib/endpoints/servers.js
@@ -16,7 +16,7 @@
 
 var async = require('async');
 var fs = require('fs');
-var qs = require('querystring');
+var qs = require('qs');
 var restify = require('restify');
 var sprintf = require('sprintf').sprintf;
 var util = require('util');
diff --git a/lib/models/server.js b/lib/models/server.js
index 7267877..ba59962 100644
--- a/lib/models/server.js
+++ b/lib/models/server.js
@@ -17,7 +17,7 @@
 var async = require('async');
 var assert = require('assert-plus');
 var dns = require('dns');
-var qs = require('querystring');
+var qs = require('qs');
 var restify = require('restify');
 var sprintf = require('sprintf').sprintf;
 var util = require('util');
@@ -1170,7 +1170,8 @@ ModelServer.prototype.getFinal = function (/* extras, */ callback) {
         },
         function (cb) {
             if (server.overprovision_ratios) {
-                var v = qs.parse(server.overprovision_ratios);
+                var v = qs.parse(server.overprovision_ratios,
+                    { allowDots: false, plainObjects: false });
 
                 // Convert number values to strings
                 Object.keys(v).forEach(function (k) {
diff --git a/package.json b/package.json
index e59d330..73abf39 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "cnapi",
   "description": "SmartDataCenter Compute Node API",
-  "version": "1.11.5",
+  "version": "1.11.6",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
@@ -19,6 +19,7 @@
     "moray": "3.5.0",
     "nodeunit": "0.11.0",
     "once": "1.4.0",
+    "qs": "6.5.2",
     "restify": "4.3.0",
     "restify-validator": "0.3.1",
     "sdc-clients": "10.0.3",
diff --git a/test/test-servers.js b/test/test-servers.js
index 819840e..ca72795 100644
--- a/test/test-servers.js
+++ b/test/test-servers.js
@@ -254,6 +254,96 @@ function testUpdateServer(t) {
     });
 }
 
+/*
+ * Test that we do not succumb to TRITON-740 while parsing
+ * overprovision_ratios.
+ */
+function testUpdateServerOverprovisionRatios(t) {
+    var uuid;
+    var origRatios;
+
+    async.waterfall([
+        function (next) {
+            client.get('/servers?headnode=true&extras=all',
+                       function (err, req, res, body) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+
+                uuid = body[0].uuid;
+                origRatios = body[0].overprovision_ratios;
+
+                next();
+            });
+        },
+        // Explicitly override the default value
+        function (next) {
+            var changes = {
+                overprovision_ratios: { ram: 2 }
+            };
+
+            client.post('/servers/' + uuid, changes,
+                        function (err, req, res, body) {
+                next(err);
+            });
+        },
+        function (next) {
+            client.get('/servers/' + uuid, function (err, req, res, body) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+
+                // DAPI overrides these values
+                t.equal(body.overprovision_ratios.ram, 1,
+                    'overprovision_ratios.ram 1');
+                next();
+            });
+        },
+
+        function (next) {
+            client.get('/servers?headnode=true&extras=all',
+            function (err, req, res, body) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+                next();
+            });
+        },
+
+        // Reset overprovision_ratio back to its original value.
+        function (next) {
+            var changes = {
+                overprovision_ratios: origRatios
+            };
+
+            client.post('/servers/' + uuid, changes,
+            function (err, req, res, body) {
+                next(err);
+            });
+        },
+
+        // Confirm values were reset.
+        function (next) {
+            client.get('/servers/' + uuid, function (err, req, res, body) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+                t.deepEqual(body.overprovision_ratios, origRatios,
+                    'ratios should match');
+
+                next();
+            });
+        }
+    ], function (err) {
+        t.ifError(err);
+        t.done();
+    });
+}
+
 //
 // This test will:
 //
@@ -704,5 +794,6 @@ module.exports = {
     'list servers with all 2': testListServersWithAll2,
     'list servers using unknown parameter': testListServersUnknownParam,
     'get server': testGetServer,
-    'update server': testUpdateServer
+    'update server': testUpdateServer,
+    'update server overprovision ratios': testUpdateServerOverprovisionRatios
 };
