commit 34e037c49be959493710bef348e23a82fecf78f8 (refs/changes/32/632/2)
Author: Pedro P. Candel <kusorbox@gmail.com>
Date:   2016-10-10T20:01:40+02:00 (3 years ago)
    
    INTRO-721 make check is broken

diff --git a/pkg/cabase-postinstall.sh b/pkg/cabase-postinstall.sh
index 278b368..a8996a8 100755
--- a/pkg/cabase-postinstall.sh
+++ b/pkg/cabase-postinstall.sh
@@ -34,7 +34,8 @@ function warn_and_exit()
 function instance_exists()
 {
     local instance_uuid=$1
-    local sapi_instance=$(curl ${SAPI_URL}/instances/${instance_uuid} | json -H uuid)
+    local sapi_instance=""
+    sapi_instance=$(curl ${SAPI_URL}/instances/${instance_uuid} | json -H uuid)
 
     if [[ -n ${sapi_instance} ]]; then
         return 0
@@ -45,7 +46,8 @@ function instance_exists()
 
 function adopt_instance_if_necessary()
 {
-    local instance_uuid=$(cat $ETC_DIR/$AGENT)
+    local instance_uuid=""
+    instance_uuid=$(cat $ETC_DIR/$AGENT)
 
     # verify it exists on sapi if there is an instance uuid written to disk
     if [[ -n ${instance_uuid} ]]; then
@@ -61,32 +63,33 @@ function adopt_instance_if_necessary()
 # new agent instances when needed.
 function adopt_instance()
 {
-    local instance_uuid=$1
-    echo $instance_uuid > $ETC_DIR/$AGENT
+    local instance=$1
+    echo $instance > $ETC_DIR/$AGENT
 
-    local service_uuid=""
+    local service=""
     local sapi_instance=""
     local i=0
 
-    service_uuid=$(curl "${SAPI_URL}/services?type=agent&name=${AGENT}"\
+    service=$(curl "${SAPI_URL}/services?type=agent&name=${AGENT}"\
         -sS -H accept:application/json | json -Ha uuid)
 
-    [[ -n ${service_uuid} ]] || \
+    [[ -n ${service} ]] || \
         warn_and_exit "Unable to get service_uuid for role ${AGENT} from SAPI"
 
     sapi_instance=$(curl ${SAPI_URL}/instances -sS -X POST \
         -H content-type:application/json \
-        -d "{ \"service_uuid\" : \"${service_uuid}\", \"uuid\" : \"${instance_uuid}\" }" \
+        -d "{ \"service_uuid\" : \"${service}\", \"uuid\" : \"${instance}\" }" \
     | json -H uuid)
 
     [[ -n ${sapi_instance} ]] \
-        || warn_and_exit "Unable to adopt ${instance_uuid} into SAPI"
-    echo "Adopted service ${AGENT} to instance ${instance_uuid}"
+        || warn_and_exit "Unable to adopt ${instance} into SAPI"
+    echo "Adopted service ${AGENT} to instance ${instance}"
 }
 
 function save_instance_uuid()
 {
-    local instance_uuid=$(cat $ETC_DIR/$AGENT)
+    local instance_uuid=""
+    instance_uuid=$(cat $ETC_DIR/$AGENT)
 
     if [[ -z ${instance_uuid} ]]; then
         instance_uuid=$(uuid -v4)
@@ -100,7 +103,8 @@ function save_instance_uuid()
 # disabled and avoid running any SAPI-dependant configuration. sapi_domain is
 # zero length when the upgrade scripts we need were not executed for this CN
 if [[ -z $CONFIG_sapi_domain ]]; then
-    echo "sapi_domain was not found on node.config, agent will be installed but not configured"
+    echo "sapi_domain was not found on node.config, agent will be" \
+        "installed but not configured"
     exit 0
 fi
 
@@ -111,7 +115,8 @@ IMGAPI_URL=http://${CONFIG_imgapi_domain}
 # install script runs in the following circumstances:
 # 1. (don't call adopt) hn=1, sapi=0: first hn boot, disable agent, exit 0
 # 2. (call adopt) hn=1, sapi=1: upgrades, run script, get-or-create instance
-# 3. (call adopt) hn=0, sapi=0: new cns, cn upgrades, run script, get-or-create instance
+# 3. (call adopt) hn=0, sapi=0: new cns, cn upgrades, run script, get-or-create
+#     instance
 # 4. (call adopt) hn=0, sapi=1: no sdc-sapi on CNs, unexpected but possible
 is_headnode=$(sysinfo | json "Boot Parameters".headnode)
 have_sapi=false
@@ -142,13 +147,14 @@ MIN_VALID_SAPI_VERSION=20140703
 # We need at least a MIN_VALID_SAPI_VERSION image so type=agent suport is there.
 # When the SAPI version doesn't match the expected format we ignore this script
 #
-valid_sapi=$(curl ${IMGAPI_URL}/images/$(curl ${SAPI_URL}/services?name=sapi | json -Ha params.image_uuid) \
+valid_sapi=$(curl ${IMGAPI_URL}/images/$(curl ${SAPI_URL}/services?name=sapi \
+    | json -Ha params.image_uuid) \
     | json -e \
-    "var splitVersion = this.version.split('-');
-    if (splitVersion[0] === 'master') {
-        this.validSapi = splitVersion[1].substr(0, 8) >= '$MIN_VALID_SAPI_VERSION';
-    } else if (splitVersion[0] === 'release') {
-        this.validSapi = splitVersion[1] >= '$MIN_VALID_SAPI_VERSION';
+    "var splitVer = this.version.split('-');
+    if (splitVer[0] === 'master') {
+        this.validSapi = splitVer[1].substr(0, 8) >= '$MIN_VALID_SAPI_VERSION';
+    } else if (splitVer[0] === 'release') {
+        this.validSapi = splitVer[1] >= '$MIN_VALID_SAPI_VERSION';
     } else {
         this.validSapi = false;
     }
diff --git a/pkg/cainstsvc-postinstall.sh b/pkg/cainstsvc-postinstall.sh
index a999b0d..6f72df4 100755
--- a/pkg/cainstsvc-postinstall.sh
+++ b/pkg/cainstsvc-postinstall.sh
@@ -34,7 +34,8 @@ function warn_and_exit()
 function instance_exists()
 {
     local instance_uuid=$1
-    local sapi_instance=$(curl ${SAPI_URL}/instances/${instance_uuid} | json -H uuid)
+    local sapi_instance=""
+    sapi_instance=$(curl ${SAPI_URL}/instances/${instance_uuid} | json -H uuid)
 
     if [[ -n ${sapi_instance} ]]; then
         return 0
@@ -45,7 +46,8 @@ function instance_exists()
 
 function adopt_instance_if_necessary()
 {
-    local instance_uuid=$(cat $ETC_DIR/$AGENT)
+    local instance_uuid=""
+    instance_uuid=$(cat $ETC_DIR/$AGENT)
 
     # verify it exists on sapi if there is an instance uuid written to disk
     if [[ -n ${instance_uuid} ]]; then
@@ -61,32 +63,33 @@ function adopt_instance_if_necessary()
 # new agent instances when needed.
 function adopt_instance()
 {
-    local instance_uuid=$1
-    echo $instance_uuid > $ETC_DIR/$AGENT
+    local instance=$1
+    echo $instance > $ETC_DIR/$AGENT
 
-    local service_uuid=""
+    local service=""
     local sapi_instance=""
     local i=0
 
-    service_uuid=$(curl "${SAPI_URL}/services?type=agent&name=${AGENT}"\
+    service=$(curl "${SAPI_URL}/services?type=agent&name=${AGENT}"\
         -sS -H accept:application/json | json -Ha uuid)
 
-    [[ -n ${service_uuid} ]] || \
+    [[ -n ${service} ]] || \
         warn_and_exit "Unable to get service_uuid for role ${AGENT} from SAPI"
 
     sapi_instance=$(curl ${SAPI_URL}/instances -sS -X POST \
         -H content-type:application/json \
-        -d "{ \"service_uuid\" : \"${service_uuid}\", \"uuid\" : \"${instance_uuid}\" }" \
+        -d "{ \"service_uuid\" : \"${service}\", \"uuid\" : \"${instance}\" }" \
     | json -H uuid)
 
     [[ -n ${sapi_instance} ]] \
-        || warn_and_exit "Unable to adopt ${instance_uuid} into SAPI"
-    echo "Adopted service ${AGENT} to instance ${instance_uuid}"
+        || warn_and_exit "Unable to adopt ${instance} into SAPI"
+    echo "Adopted service ${AGENT} to instance ${instance}"
 }
 
 function save_instance_uuid()
 {
-    local instance_uuid=$(cat $ETC_DIR/$AGENT)
+    local instance_uuid=""
+    instance_uuid=$(cat $ETC_DIR/$AGENT)
 
     if [[ -z ${instance_uuid} ]]; then
         instance_uuid=$(uuid -v4)
@@ -127,7 +130,8 @@ done
 # disabled and avoid running any SAPI-dependant configuration. sapi_domain is
 # zero length when the upgrade scripts we need were not executed for this CN
 if [[ -z $CONFIG_sapi_domain ]]; then
-    echo "sapi_domain was not found on node.config, agent will be installed but not configured"
+    echo "sapi_domain was not found on node.config, agent will be" \
+        "installed but not configured"
     exit 0
 fi
 
@@ -138,7 +142,8 @@ IMGAPI_URL=http://${CONFIG_imgapi_domain}
 # install script runs in the following circumstances:
 # 1. (don't call adopt) hn=1, sapi=0: first hn boot, disable agent, exit 0
 # 2. (call adopt) hn=1, sapi=1: upgrades, run script, get-or-create instance
-# 3. (call adopt) hn=0, sapi=0: new cns, cn upgrades, run script, get-or-create instance
+# 3. (call adopt) hn=0, sapi=0: new cns, cn upgrades, run script, get-or-create
+#    instance
 # 4. (call adopt) hn=0, sapi=1: no sdc-sapi on CNs, unexpected but possible
 is_headnode=$(sysinfo | json "Boot Parameters".headnode)
 have_sapi=false
@@ -169,13 +174,14 @@ MIN_VALID_SAPI_VERSION=20140703
 # We need at least a MIN_VALID_SAPI_VERSION image so type=agent suport is there.
 # When the SAPI version doesn't match the expected format we ignore this script
 #
-valid_sapi=$(curl ${IMGAPI_URL}/images/$(curl ${SAPI_URL}/services?name=sapi | json -Ha params.image_uuid) \
+valid_sapi=$(curl ${IMGAPI_URL}/images/$(curl ${SAPI_URL}/services?name=sapi \
+    | json -Ha params.image_uuid) \
     | json -e \
-    "var splitVersion = this.version.split('-');
-    if (splitVersion[0] === 'master') {
-        this.validSapi = splitVersion[1].substr(0, 8) >= '$MIN_VALID_SAPI_VERSION';
-    } else if (splitVersion[0] === 'release') {
-        this.validSapi = splitVersion[1] >= '$MIN_VALID_SAPI_VERSION';
+    "var splitVer = this.version.split('-');
+    if (splitVer[0] === 'master') {
+        this.validSapi = splitVer[1].substr(0, 8) >= '$MIN_VALID_SAPI_VERSION';
+    } else if (splitVer[0] === 'release') {
+        this.validSapi = splitVer[1] >= '$MIN_VALID_SAPI_VERSION';
     } else {
         this.validSapi = false;
     }
@@ -190,4 +196,3 @@ else
 fi
 
 exit 0
-
diff --git a/tools/catest b/tools/catest
index 000a5ab..6815490 100755
--- a/tools/catest
+++ b/tools/catest
@@ -117,7 +117,10 @@ USAGE
 #
 function abspath
 {
-	local dir=$(dirname $1) base=$(basename $1)
+	local dir=""
+	dir=$(dirname $1)
+	local base=""
+	base=$(basename $1)
 
 	if [[ $base = ".." ]]; then
 		cd "$dir"/.. > /dev/null || fail "abspath '$1': failed to chdir"
@@ -194,12 +197,18 @@ function emit_pass
 function execute_test
 {
 	[[ $# -eq 1 ]] || fail "Missing test to execute"
-	local test_path=$1
-	local test_name=$(basename $1)
-	local test_dir=$(dirname $1)
-	local test_label=$(echo $test_path | sed -e s#^$SRC/##)
-	local test_odir="$cat_outdir/test.$cat_nrun"
-	local ext=${test_name##*.}
+	local test_path
+	test_path=$1
+	local test_name
+	test_name=$(basename $1)
+	local test_dir
+	test_dir=$(dirname $1)
+	local test_label
+	test_label=$(echo $test_path | sed -e s#^$SRC/##)
+	local test_odir
+	test_odir="$cat_outdir/test.$cat_nrun"
+	local ext
+	ext=${test_name##*.}
 	local faildir
 	local EXEC
 
diff --git a/tools/devsetup b/tools/devsetup
index 8fbfe11..4aaac0a 100755
--- a/tools/devsetup
+++ b/tools/devsetup
@@ -55,14 +55,16 @@ function provision_devzone
 	echo "$sh_headnode."
 
 	echo "Fetching uuid for $sh_dataset_name $sh_dataset_version ... \c "
-	local dataset_uuid=$(sdc-imgadm list \
+	local dataset_uuid
+	dataset_uuid=$(sdc-imgadm list \
 	    name=$sh_dataset_name version=$sh_dataset_version -H -o uuid | \
 	    head -1) || fail "failed"
 	[[ -n $dataset_uuid ]] || fail "not found"
 	echo $dataset_uuid
 
 	echo "Retrieving \"admin\" customer uuid ... \c "
-	local cust_uuid=$(sdc-ldap search login=admin | grep uuid: | \
+	local cust_uuid
+	cust_uuid=$(sdc-ldap search login=admin | grep uuid: | \
 	    awk '{print $2}') || fail "failed"
 	[[ -n $cust_uuid ]] || fail "not found"
 	echo "$cust_uuid"
@@ -80,6 +82,7 @@ function provision_devzone
 	done
 
 	echo "Creating dev zone ... \c "
+	# BEGIN BASHSTYLED
 	sdc-vm create > /var/tmp/casetup.$$.create.log 2>&1 <<-EOF
 	{
 		"brand": "joyent",
@@ -96,6 +99,7 @@ function provision_devzone
 		"zfs_io_priority": 20
 	}
 	EOF
+	# END BASHSTYLED
 	echo "done."
 
 	echo "Identifying new zone ... \c "
