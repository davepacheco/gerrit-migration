From f968841a07baf7d3a385d9fab20fb5526f032157 Mon Sep 17 00:00:00 2001
From: "Pedro P. Candel" <kusorbox@gmail.com>
Date: Mon, 10 Oct 2016 17:24:03 +0200
Subject: [PATCH] INTRO-721 make check is broken

---
 pkg/cabase-postinstall.sh    | 38 ++++++++++++++++++++----------------
 pkg/cainstsvc-postinstall.sh | 38 ++++++++++++++++++++----------------
 2 files changed, 42 insertions(+), 34 deletions(-)

diff --git a/pkg/cabase-postinstall.sh b/pkg/cabase-postinstall.sh
index 278b368..1b6e6d1 100755
--- a/pkg/cabase-postinstall.sh
+++ b/pkg/cabase-postinstall.sh
@@ -34,7 +34,8 @@ function warn_and_exit()
 function instance_exists()
 {
     local instance_uuid=$1
-    local sapi_instance=$(curl ${SAPI_URL}/instances/${instance_uuid} | json -H uuid)
+    local sapi_instance=""
+    sapi_instance=$(curl ${SAPI_URL}/instances/${instance_uuid} | json -H uuid)
 
     if [[ -n ${sapi_instance} ]]; then
         return 0
@@ -61,27 +62,27 @@ function adopt_instance_if_necessary()
 # new agent instances when needed.
 function adopt_instance()
 {
-    local instance_uuid=$1
-    echo $instance_uuid > $ETC_DIR/$AGENT
+    local instance=$1
+    echo $instance > $ETC_DIR/$AGENT
 
-    local service_uuid=""
+    local service=""
     local sapi_instance=""
     local i=0
 
-    service_uuid=$(curl "${SAPI_URL}/services?type=agent&name=${AGENT}"\
+    service=$(curl "${SAPI_URL}/services?type=agent&name=${AGENT}"\
         -sS -H accept:application/json | json -Ha uuid)
 
-    [[ -n ${service_uuid} ]] || \
+    [[ -n ${service} ]] || \
         warn_and_exit "Unable to get service_uuid for role ${AGENT} from SAPI"
 
     sapi_instance=$(curl ${SAPI_URL}/instances -sS -X POST \
         -H content-type:application/json \
-        -d "{ \"service_uuid\" : \"${service_uuid}\", \"uuid\" : \"${instance_uuid}\" }" \
+        -d "{ \"service_uuid\" : \"${service}\", \"uuid\" : \"${instance}\" }" \
     | json -H uuid)
 
     [[ -n ${sapi_instance} ]] \
-        || warn_and_exit "Unable to adopt ${instance_uuid} into SAPI"
-    echo "Adopted service ${AGENT} to instance ${instance_uuid}"
+        || warn_and_exit "Unable to adopt ${instance} into SAPI"
+    echo "Adopted service ${AGENT} to instance ${instance}"
 }
 
 function save_instance_uuid()
@@ -100,7 +101,8 @@ function save_instance_uuid()
 # disabled and avoid running any SAPI-dependant configuration. sapi_domain is
 # zero length when the upgrade scripts we need were not executed for this CN
 if [[ -z $CONFIG_sapi_domain ]]; then
-    echo "sapi_domain was not found on node.config, agent will be installed but not configured"
+    echo "sapi_domain was not found on node.config, agent will be" \
+        "installed but not configured"
     exit 0
 fi
 
@@ -111,7 +113,8 @@ IMGAPI_URL=http://${CONFIG_imgapi_domain}
 # install script runs in the following circumstances:
 # 1. (don't call adopt) hn=1, sapi=0: first hn boot, disable agent, exit 0
 # 2. (call adopt) hn=1, sapi=1: upgrades, run script, get-or-create instance
-# 3. (call adopt) hn=0, sapi=0: new cns, cn upgrades, run script, get-or-create instance
+# 3. (call adopt) hn=0, sapi=0: new cns, cn upgrades, run script, get-or-create
+#     instance
 # 4. (call adopt) hn=0, sapi=1: no sdc-sapi on CNs, unexpected but possible
 is_headnode=$(sysinfo | json "Boot Parameters".headnode)
 have_sapi=false
@@ -142,13 +145,14 @@ MIN_VALID_SAPI_VERSION=20140703
 # We need at least a MIN_VALID_SAPI_VERSION image so type=agent suport is there.
 # When the SAPI version doesn't match the expected format we ignore this script
 #
-valid_sapi=$(curl ${IMGAPI_URL}/images/$(curl ${SAPI_URL}/services?name=sapi | json -Ha params.image_uuid) \
+valid_sapi=$(curl ${IMGAPI_URL}/images/$(curl ${SAPI_URL}/services?name=sapi \
+    | json -Ha params.image_uuid) \
     | json -e \
-    "var splitVersion = this.version.split('-');
-    if (splitVersion[0] === 'master') {
-        this.validSapi = splitVersion[1].substr(0, 8) >= '$MIN_VALID_SAPI_VERSION';
-    } else if (splitVersion[0] === 'release') {
-        this.validSapi = splitVersion[1] >= '$MIN_VALID_SAPI_VERSION';
+    "var splitVer = this.version.split('-');
+    if (splitVer[0] === 'master') {
+        this.validSapi = splitVer[1].substr(0, 8) >= '$MIN_VALID_SAPI_VERSION';
+    } else if (splitVer[0] === 'release') {
+        this.validSapi = splitVer[1] >= '$MIN_VALID_SAPI_VERSION';
     } else {
         this.validSapi = false;
     }
diff --git a/pkg/cainstsvc-postinstall.sh b/pkg/cainstsvc-postinstall.sh
index a999b0d..b9e25f4 100755
--- a/pkg/cainstsvc-postinstall.sh
+++ b/pkg/cainstsvc-postinstall.sh
@@ -34,7 +34,8 @@ function warn_and_exit()
 function instance_exists()
 {
     local instance_uuid=$1
-    local sapi_instance=$(curl ${SAPI_URL}/instances/${instance_uuid} | json -H uuid)
+    local sapi_instance=""
+    sapi_instance=$(curl ${SAPI_URL}/instances/${instance_uuid} | json -H uuid)
 
     if [[ -n ${sapi_instance} ]]; then
         return 0
@@ -61,27 +62,27 @@ function adopt_instance_if_necessary()
 # new agent instances when needed.
 function adopt_instance()
 {
-    local instance_uuid=$1
-    echo $instance_uuid > $ETC_DIR/$AGENT
+    local instance=$1
+    echo $instance > $ETC_DIR/$AGENT
 
-    local service_uuid=""
+    local service=""
     local sapi_instance=""
     local i=0
 
-    service_uuid=$(curl "${SAPI_URL}/services?type=agent&name=${AGENT}"\
+    service=$(curl "${SAPI_URL}/services?type=agent&name=${AGENT}"\
         -sS -H accept:application/json | json -Ha uuid)
 
-    [[ -n ${service_uuid} ]] || \
+    [[ -n ${service} ]] || \
         warn_and_exit "Unable to get service_uuid for role ${AGENT} from SAPI"
 
     sapi_instance=$(curl ${SAPI_URL}/instances -sS -X POST \
         -H content-type:application/json \
-        -d "{ \"service_uuid\" : \"${service_uuid}\", \"uuid\" : \"${instance_uuid}\" }" \
+        -d "{ \"service_uuid\" : \"${service}\", \"uuid\" : \"${instance}\" }" \
     | json -H uuid)
 
     [[ -n ${sapi_instance} ]] \
-        || warn_and_exit "Unable to adopt ${instance_uuid} into SAPI"
-    echo "Adopted service ${AGENT} to instance ${instance_uuid}"
+        || warn_and_exit "Unable to adopt ${instance} into SAPI"
+    echo "Adopted service ${AGENT} to instance ${instance}"
 }
 
 function save_instance_uuid()
@@ -127,7 +128,8 @@ done
 # disabled and avoid running any SAPI-dependant configuration. sapi_domain is
 # zero length when the upgrade scripts we need were not executed for this CN
 if [[ -z $CONFIG_sapi_domain ]]; then
-    echo "sapi_domain was not found on node.config, agent will be installed but not configured"
+    echo "sapi_domain was not found on node.config, agent will be" \
+        "installed but not configured"
     exit 0
 fi
 
@@ -138,7 +140,8 @@ IMGAPI_URL=http://${CONFIG_imgapi_domain}
 # install script runs in the following circumstances:
 # 1. (don't call adopt) hn=1, sapi=0: first hn boot, disable agent, exit 0
 # 2. (call adopt) hn=1, sapi=1: upgrades, run script, get-or-create instance
-# 3. (call adopt) hn=0, sapi=0: new cns, cn upgrades, run script, get-or-create instance
+# 3. (call adopt) hn=0, sapi=0: new cns, cn upgrades, run script, get-or-create
+#    instance
 # 4. (call adopt) hn=0, sapi=1: no sdc-sapi on CNs, unexpected but possible
 is_headnode=$(sysinfo | json "Boot Parameters".headnode)
 have_sapi=false
@@ -169,13 +172,14 @@ MIN_VALID_SAPI_VERSION=20140703
 # We need at least a MIN_VALID_SAPI_VERSION image so type=agent suport is there.
 # When the SAPI version doesn't match the expected format we ignore this script
 #
-valid_sapi=$(curl ${IMGAPI_URL}/images/$(curl ${SAPI_URL}/services?name=sapi | json -Ha params.image_uuid) \
+valid_sapi=$(curl ${IMGAPI_URL}/images/$(curl ${SAPI_URL}/services?name=sapi \
+    | json -Ha params.image_uuid) \
     | json -e \
-    "var splitVersion = this.version.split('-');
-    if (splitVersion[0] === 'master') {
-        this.validSapi = splitVersion[1].substr(0, 8) >= '$MIN_VALID_SAPI_VERSION';
-    } else if (splitVersion[0] === 'release') {
-        this.validSapi = splitVersion[1] >= '$MIN_VALID_SAPI_VERSION';
+    "var splitVer = this.version.split('-');
+    if (splitVer[0] === 'master') {
+        this.validSapi = splitVer[1].substr(0, 8) >= '$MIN_VALID_SAPI_VERSION';
+    } else if (splitVer[0] === 'release') {
+        this.validSapi = splitVer[1] >= '$MIN_VALID_SAPI_VERSION';
     } else {
         this.validSapi = false;
     }
-- 
2.21.0

