commit 3c27e7bb7b086f41b42fc82fc6af1630a3f5fa75 (refs/changes/28/828/4)
Author: Yang Yong <yy1111.yang@samsung.com>
Date:   2016-11-02T09:36:18+09:00 (2 years, 11 months ago)
    
    joyent/node-triton#64 support instance renaming

diff --git a/lib/cli.js b/lib/cli.js
index 2dcf50a..63cb93c 100644
--- a/lib/cli.js
+++ b/lib/cli.js
@@ -213,6 +213,7 @@ function CLI() {
             'instance',
             'instances',
             'create',
+            'rename',
             'delete',
             'start',
             'stop',
@@ -638,6 +639,7 @@ CLI.prototype.do_instance = require('./do_instance');
 CLI.prototype.do_instances = require('./do_instances');
 CLI.prototype.do_create = require('./do_create');
 CLI.prototype.do_delete = require('./do_delete');
+CLI.prototype.do_rename = require('./do_rename');
 CLI.prototype.do_start = require('./do_start');
 CLI.prototype.do_stop = require('./do_stop');
 CLI.prototype.do_reboot = require('./do_reboot');
diff --git a/lib/cloudapi2.js b/lib/cloudapi2.js
index 6949e56..985c331 100644
--- a/lib/cloudapi2.js
+++ b/lib/cloudapi2.js
@@ -728,6 +728,31 @@ CloudApi.prototype.getMachine = function getMachine(opts, cb) {
     });
 };
 
+/**
+ * rename a machine by id.
+ *
+ * @param {Object} opts
+ *      - id {UUID} Required. The machine id.
+ *      - {String} name. The machine name
+ * @param {Function} callback of the form `function (err, res)`
+ */
+CloudApi.prototype.renameMachine = function renameMachine(opts, callback) {
+    var self = this;
+    var data = {
+        action: 'rename',
+        name: opts.name
+    };
+
+    this._request({
+        method:'POST',
+        path: format('/%s/machines/%s', self.account, opts.uuid),
+        data: data
+    }, function (err, req, res, body) {
+        callback(err, body, res);
+    });
+
+};
+
 /**
  * delete a machine by id.
  *
diff --git a/lib/do_instance/do_rename.js b/lib/do_instance/do_rename.js
new file mode 100644
index 0000000..2f921af
--- /dev/null
+++ b/lib/do_instance/do_rename.js
@@ -0,0 +1,82 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+var common = require('../common');
+var errors = require('../errors');
+
+
+function perror(err) {
+    console.error('error: %s', err.message);
+}
+
+
+function do_rename(subcmd, opts, args, callback) {
+    var self = this;
+    if (opts.help) {
+        this.do_help('help', {}, [subcmd], callback);
+        return;
+    } else if (args.length < 2) {
+        callback(new errors.UsageError('missing INST arg(s)'));
+        return;
+    }
+
+    self.top.tritonapi.getInstance(args[0], function (err, inst) {
+       if (err) {
+           perror(err);
+           return;
+        }
+
+        // check the newName same existName
+        if (args[1] === inst.name) {
+            callback(new errors.UsageError('check the newName same existName'));
+            return;
+        }
+
+        done(inst.id, args[1]);
+    });
+
+    // called when "uuid" is set
+    function done(uuid, newName) {
+        // check the newName same existName
+        var cOpts = { uuid : uuid, name : newName };
+        self.top.tritonapi.cloudapi.renameMachine(cOpts,
+            function (err, body, res) {
+                if (err) {
+                    perror(err);
+                    return;
+                }
+                if (!opts.wait) {
+                    console.log('rename instance %s (%s)',
+                    args[0], uuid);
+                    return;
+                }
+       });
+    }
+}
+
+do_rename.options = [
+        {
+            names: ['help', 'h'],
+            type: 'bool',
+            help: 'Show this help.'
+        }
+    ];
+
+
+do_rename.synopses = ['{{name}} rename [OPTIONS] INST NEWNAME'];
+do_rename.help = [
+    'rename an instance.',
+    '',
+    '{{usage}}',
+    '',
+    '{{options}}',
+    'Where "INST" is an instance name, id, or short id.'
+].join('\n');
+
+do_rename.completionArgtypes = ['tritoninstance'];
+
+
+module.exports = do_rename;
diff --git a/lib/do_instance/index.js b/lib/do_instance/index.js
index 9b0abbe..1165d22 100644
--- a/lib/do_instance/index.js
+++ b/lib/do_instance/index.js
@@ -34,6 +34,7 @@ function InstanceCLI(top) {
             'get',
             'create',
             'delete',
+            'rename',
             { group: '' },
             'start',
             'stop',
@@ -63,6 +64,7 @@ InstanceCLI.prototype.do_list = require('./do_list');
 InstanceCLI.prototype.do_get = require('./do_get');
 InstanceCLI.prototype.do_create = require('./do_create');
 InstanceCLI.prototype.do_delete = require('./do_delete');
+InstanceCLI.prototype.do_rename = require('./do_rename');
 
 InstanceCLI.prototype.do_start = require('./do_start');
 InstanceCLI.prototype.do_stop = require('./do_stop');
diff --git a/lib/do_rename.js b/lib/do_rename.js
new file mode 100644
index 0000000..020e481
--- /dev/null
+++ b/lib/do_rename.js
@@ -0,0 +1,15 @@
+var targ = require('./do_instance/do_rename');
+
+function do_rename(subcmd, opts, args, callback) {
+    this.handlerFromSubcmd('instance').dispatch({
+        subcmd: 'rename',
+        opts: opts,
+        args: args
+    }, callback);
+}
+
+do_rename.help = 'A shortcut for "triton instance rename".';
+do_rename.options = targ.options;
+do_rename.completionArgtypes = targ.completionArgtypes;
+
+module.exports = do_rename;
