From a700f02bf946066a890bce7ee80f6e73b8304add Mon Sep 17 00:00:00 2001
From: Yang Yong <yy1111@samsung.com>
Date: Tue, 1 Nov 2016 09:33:54 +0900
Subject: [PATCH] joyent/node-triton#64 support instance renaming

---
 lib/cli.js                   |  2 +
 lib/cloudapi2.js             | 22 +++++++++
 lib/do_instance/do_rename.js | 91 ++++++++++++++++++++++++++++++++++++
 lib/do_instance/index.js     |  2 +
 lib/do_rename.js             | 15 ++++++
 5 files changed, 132 insertions(+)
 create mode 100644 lib/do_instance/do_rename.js
 create mode 100644 lib/do_rename.js

diff --git a/lib/cli.js b/lib/cli.js
index 2dcf50a..e5455f3 100644
--- a/lib/cli.js
+++ b/lib/cli.js
@@ -213,6 +213,7 @@ function CLI() {
             'instance',
             'instances',
             'create',
+	    'rename',
             'delete',
             'start',
             'stop',
@@ -638,6 +639,7 @@ CLI.prototype.do_instance = require('./do_instance');
 CLI.prototype.do_instances = require('./do_instances');
 CLI.prototype.do_create = require('./do_create');
 CLI.prototype.do_delete = require('./do_delete');
+CLI.prototype.do_rename = require('./do_rename');:
 CLI.prototype.do_start = require('./do_start');
 CLI.prototype.do_stop = require('./do_stop');
 CLI.prototype.do_reboot = require('./do_reboot');
diff --git a/lib/cloudapi2.js b/lib/cloudapi2.js
index 6949e56..3716171 100644
--- a/lib/cloudapi2.js
+++ b/lib/cloudapi2.js
@@ -728,6 +728,28 @@ CloudApi.prototype.getMachine = function getMachine(opts, cb) {
     });
 };
 
+/**
+ * rename a machine by id.
+ *
+ * @param {String} id (required) The machine id.
+ * @param {Function} callback of the form `function (err, res)`
+ */
+CloudApi.prototype.renameMachine = function renameMachine(opts, callback) {
+    var self = this;
+    var opts = {
+        path: format('/%s/machines/%s', self.account, opts.uuid),
+        method: 'POST',
+        data: {
+            action: 'rename'
+           , name : opts.name
+        }
+    };
+    this._request(opts, function (err, req, res, body) {
+        callback(err, body, res);
+    });
+
+};
+
 /**
  * delete a machine by id.
  *
diff --git a/lib/do_instance/do_rename.js b/lib/do_instance/do_rename.js
new file mode 100644
index 0000000..6d22d5c
--- /dev/null
+++ b/lib/do_instance/do_rename.js
@@ -0,0 +1,91 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+var common = require('../common');
+var errors = require('../errors');
+
+
+function perror(err) {
+    console.error('error: %s', err.message);
+}
+
+
+function do_rename(subcmd, opts, args, callback) {
+    var self = this;
+    var now = Date.now();
+
+    if (opts.help) {
+        this.do_help('help', {}, [subcmd], callback);
+        return;
+    } else if (args.length < 1) {
+        callback(new errors.UsageError('missing INST arg(s)'));
+        return;
+    }
+    var alias, uuid, exitNm;
+    var newName = args[1];
+    if( newName == undefined || newName == null || newName.trim() == "" ) {
+        callback(new errors.UsageError('check the newName validation'));
+        return;
+    }
+
+    self.top.tritonapi.getInstance(args[0], function (err, inst) {
+       if (err) {
+           perror(err);
+           return;
+        }
+        alias = args[0];
+        uuid = inst.id;
+        exitNm = inst.name
+        done();
+    });
+
+    // called when "uuid" is set
+    function done() {
+    // check the newName same existName 
+        if ( newName == exitNm ) {
+            callback(new errors.UsageError('check the newName same existName '));
+            return;
+        }
+        var cOpts = { uuid : uuid, name : newName };
+        self.top.tritonapi.cloudapi.renameMachine(cOpts,
+            function (err, body, res) {
+                if (err) {
+                    perror(err);
+                    return;
+                }
+                if (!opts.wait) {
+                    console.log('rename instance %s (%s)',
+                    alias, uuid);
+                    return;
+                }
+       });
+    }
+}
+
+do_rename.options = [
+        {
+            names: ['help', 'h'],
+            type: 'bool',
+            help: 'Show this help.'
+        }
+    ];
+
+
+do_rename.synopses = ['{{name}} rename [OPTIONS] INST NEWNAME'];
+do_rename.help = [
+    'rename a instance.',
+    '',
+    '{{usage}}',
+    '',
+    '{{options}}',
+    'Where "INST" is an instance name, id, or short id.'
+].join('\n');
+
+do_rename.completionArgtypes = ['tritoninstance'];
+
+
+module.exports = do_rename;
+                               
diff --git a/lib/do_instance/index.js b/lib/do_instance/index.js
index 9b0abbe..1165d22 100644
--- a/lib/do_instance/index.js
+++ b/lib/do_instance/index.js
@@ -34,6 +34,7 @@ function InstanceCLI(top) {
             'get',
             'create',
             'delete',
+            'rename',
             { group: '' },
             'start',
             'stop',
@@ -63,6 +64,7 @@ InstanceCLI.prototype.do_list = require('./do_list');
 InstanceCLI.prototype.do_get = require('./do_get');
 InstanceCLI.prototype.do_create = require('./do_create');
 InstanceCLI.prototype.do_delete = require('./do_delete');
+InstanceCLI.prototype.do_rename = require('./do_rename');
 
 InstanceCLI.prototype.do_start = require('./do_start');
 InstanceCLI.prototype.do_stop = require('./do_stop');
diff --git a/lib/do_rename.js b/lib/do_rename.js
new file mode 100644
index 0000000..020e481
--- /dev/null
+++ b/lib/do_rename.js
@@ -0,0 +1,15 @@
+var targ = require('./do_instance/do_rename');
+
+function do_rename(subcmd, opts, args, callback) {
+    this.handlerFromSubcmd('instance').dispatch({
+        subcmd: 'rename',
+        opts: opts,
+        args: args
+    }, callback);
+}
+
+do_rename.help = 'A shortcut for "triton instance rename".';
+do_rename.options = targ.options;
+do_rename.completionArgtypes = targ.completionArgtypes;
+
+module.exports = do_rename;
-- 
2.21.0

