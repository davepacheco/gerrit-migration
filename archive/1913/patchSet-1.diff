commit 02702090fc69f22698414028582280f78fef8708 (refs/changes/13/1913/1)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2017-05-05T17:46:43+00:00 (2 years, 5 months ago)
    
    NAPI-402 Require IPv4 resources in some NIC fields

diff --git a/lib/endpoints/networks/ips.js b/lib/endpoints/networks/ips.js
index 2db4997..ed708fa 100644
--- a/lib/endpoints/networks/ips.js
+++ b/lib/endpoints/networks/ips.js
@@ -127,12 +127,15 @@ function putIP(req, res, next) {
         });
     }
 
-    // The API pretends that IPs exist when they don't actually exist in UFDS,
-    // so that consumers can do a GET on an IP to find out if it's in use.
-    // Doing a GET here first serves two purposes:
-    // 1) Determines whether we should do a create or an update in moray
-    // 2) For an update, the existing record is needed to ensure that all of
-    //    belongs_to_uuid, owner_uuid and belongs_to_type will be set
+    /*
+     * The API pretends that IPs exist when they don't actually exist in Moray,
+     * so that consumers can do a GET on an IP to find out if it's in use.
+     * Doing a GET here first serves two purposes:
+     *
+     * 1) Determines whether we should do a create or an update in Moray.
+     * 2) For an update, the existing record is needed to ensure that all of
+     *    belongs_to_uuid, owner_uuid and belongs_to_type will be set.
+     */
 
     mod_ip.get({ app: req.app, log: req.log, params: req.params },
         function (err, ip) {
diff --git a/lib/models/ip/common.js b/lib/models/ip/common.js
index be47038..08e8f3a 100644
--- a/lib/models/ip/common.js
+++ b/lib/models/ip/common.js
@@ -239,6 +239,18 @@ IP.prototype.raw = function ipRaw() {
 };
 
 
+/**
+ * Returns true if this IP is the gateway of a fabric network.
+ */
+IP.prototype.isFabricGateway = function isFabricGateway() {
+    var network = this.params.network;
+    if (!network.fabric || !network.params.gateway) {
+        return false;
+    }
+
+    return this.params.ip.compare(network.params.gateway) === 0;
+};
+
 
 // --- Exports
 
diff --git a/lib/models/network.js b/lib/models/network.js
index 10b2ef7..a0115dd 100644
--- a/lib/models/network.js
+++ b/lib/models/network.js
@@ -754,19 +754,42 @@ function validateProvisionRange(opts, _, parsedParams, callback) {
     }
 
     if (errs.length !== 0) {
-        return callback(errs);
+        callback(errs);
+        return;
     }
 
-    if (parsedParams.fabric && !util_ip.isRFC1918(subnetStart.toString())) {
-        return callback(errors.invalidParam('subnet',
+    if (parsedParams.fabric) {
+        if (subnetType === 'ipv4' && !util_ip.isRFC1918(subnetStart)) {
+            callback(errors.invalidParam('subnet',
+                constants.PRIV_RANGE_ONLY));
+            return;
+        }
+        if (subnetType === 'ipv6' && !util_ip.isUniqueLocal(subnetStart)) {
+            callback(errors.invalidParam('subnet',
                 constants.PRIV_RANGE_ONLY));
+            return;
+        }
+        if (subnetType !== 'ipv4') {
+            callback(errors.invalidParam('subnet',
+                constants.FABRIC_IPV4_ONLY));
+            return;
+        }
+    } else {
+        /**
+         * For real (non-fabric) networks, allow overlapping IPv4 RFC1918 and
+         * IPv6 Unique Local (private) networks. Unlike fabrics, where we can
+         * check if there are actual overlapping issues for the given vnet_id,
+         * a network operator could construct a number of private networks on
+         * completely separate physical networks.
+         */
+        if (util_ip.isRFC1918(subnetStart) ||
+            util_ip.isUniqueLocal(subnetStart)) {
+            callback();
+            return;
+        }
     }
 
-    // For real (non-fabric) networks, allow overlapping RFC1918 (private)
-    // networks - see NAPI-203 for details.
-    if (!opts.fabric && util_ip.isRFC1918(subnetStart.toString())) {
-        return callback();
-    }
+    // Finally, check for overlaps with existing networks.
 
     var overlapSQL = fmt('select * from %s where (' +
         // subnet starts inside another network
@@ -803,54 +826,17 @@ function validateProvisionRange(opts, _, parsedParams, callback) {
 
     req.once('error', function (err) {
         opts.log.error(err, 'validateProvisionRange: error');
-        return callback(err);
+        callback(err);
     });
 
     req.once('end', function () {
         if (overlapping.length !== 0) {
-            return callback(errors.networkOverlapParams(overlapping));
+            callback(errors.networkOverlapParams(overlapping));
+            return;
         }
-        return callback();
-    });
-
 
-    // // XXX Use of the >> operator in a moray filter is blocked on MORAY-295
-    // var overlapFilter = util.format('(|' +
-    //     // subnet starts inside another network
-    //     '(>> subnet %s)' +
-    //     // another network starts inside subnet
-    //     '(<< subnet_start %s)' +
-    //     ')', subnetStart.toString(), subnet);
-
-
-    // mod_moray.listObjs({
-    //     filter: overlapFilter,
-    //     log: opts.log,
-    //     bucket: BUCKET,
-    //     model: Network,
-    //     moray: opts.app.moray,
-    //     sort: {
-    //         attribute: 'name',
-    //         order: 'ASC'
-    //     }
-    // }, function (listErr, overlapping) {
-    //     if (listErr) {
-    //         return callback(listErr);
-    //     }
-
-    //     if (opts.uuid) {
-    //         // This is an update - filter out ourselves
-    //         overlapping = overlapping.filter(function (n) {
-    //             return n.uuid !== opts.uuid;
-    //         });
-    //     }
-
-    //     if (overlapping.length === 0) {
-    //         return callback();
-    //     }
-
-    //     return callback(errors.networkOverlapParams(overlapping));
-    // });
+        callback();
+    });
 }
 
 
@@ -1140,16 +1126,6 @@ Object.defineProperty(Network.prototype, 'gateway_provisioned', {
     set: function (val) { this.params.gateway_provisioned = val; }
 });
 
-Object.defineProperty(Network.prototype, 'gatewayAddr', {
-    get: function () {
-        if (!this.params.gateway) {
-            return null;
-        }
-
-        return this.params.gateway.toString();
-    }
-});
-
 Object.defineProperty(Network.prototype, 'nic_tag', {
     get: function () { return this.params.nic_tag; }
 });
diff --git a/lib/models/nic/common.js b/lib/models/nic/common.js
index d7fc714..a56beb7 100644
--- a/lib/models/nic/common.js
+++ b/lib/models/nic/common.js
@@ -106,7 +106,8 @@ function validateNetworkPool(app, log, name, uuid, callback) {
             network_pool: res
         };
         toReturn[name] = res.uuid;
-        return callback(null, null, toReturn);
+
+        callback(null, null, toReturn);
     });
 }
 
@@ -234,29 +235,55 @@ function validateNetwork(opts, name, uuid, callback) {
     var log = opts.log;
     validateNetworkUUID(name, uuid, function (err) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         mod_net.get({ app: app, log: log, params: { uuid: uuid } },
                 function (err2, res) {
             if (err2) {
                 if (err2.name === 'ResourceNotFoundError') {
-                    return validateNetworkPool(app, log, name, uuid, callback);
+                    validateNetworkPool(app, log, name, uuid, callback);
+                    return;
                 }
 
-                return callback(err2);
+                callback(err2);
+                return;
             }
 
             var toReturn = {
                 network: res
             };
             toReturn[name] = res.uuid;
-            return callback(null, null, toReturn);
+
+            callback(null, null, toReturn);
         });
     });
 }
 
 
+/**
+ * Validate that a parameter is an IPv4 network or pool.
+ */
+function validateIPv4Network(opts, name, uuid, callback) {
+    validateNetwork(opts, name, uuid, function (err, _, toReturn) {
+        if (err) {
+            callback(err);
+            return;
+        }
+
+        var net = toReturn.network || toReturn.network_pool;
+        if (net.family !== 'ipv4') {
+            callback(errors.invalidParam(name, util.format(
+                constants.fmt.NET_BAD_AF, 'IPv4')));
+            return;
+        }
+
+        callback(null, null, toReturn);
+    });
+}
+
+
 /**
  * Validate that the network parameters are valid
  */
@@ -457,6 +484,7 @@ module.exports = {
     BUCKET: BUCKET,
     commitBatch: commitBatch,
     listVnetCns: listVnetCns,
+    validateIPv4Network: validateIPv4Network,
     validateNicTag: validateNicTag,
     validateNetwork: validateNetwork,
     validateNetworkParams: validateNetworkParams,
diff --git a/lib/models/nic/create.js b/lib/models/nic/create.js
index b0ce442..1ec5d40 100644
--- a/lib/models/nic/create.js
+++ b/lib/models/nic/create.js
@@ -41,10 +41,10 @@ var CREATE_SCHEMA = {
         allow_unfiltered_promisc: validate.bool,
         check_owner: validate.bool,
         cn_uuid: validate.UUID,
-        ip: validate.IP,
+        ip: validate.IPv4,
         mac: validate.MAC,
         model: validate.string,
-        network_uuid: common.validateNetwork,
+        network_uuid: common.validateIPv4Network,
         nic_tag: common.validateNicTag,
         nic_tags_provided: mod_nicTag.validateExists.bind(null, false),
         primary: validate.bool,
diff --git a/lib/models/nic/obj.js b/lib/models/nic/obj.js
index 85355d9..667b9df 100644
--- a/lib/models/nic/obj.js
+++ b/lib/models/nic/obj.js
@@ -308,7 +308,7 @@ Nic.prototype.batch = function nicBatch(opts) {
         batch = batch.concat(_vl3batch);
     }
 
-    if (this.isFabricGateway()) {
+    if (this.ip !== null && this.ip.isFabricGateway()) {
         this.network.gateway_provisioned = true;
         batch.push(this.network.batch());
     }
@@ -373,7 +373,7 @@ Nic.prototype.delBatch = function nicDelBatch(opts) {
         batch = batch.concat(_vl2batch);
     }
 
-    if (this.isFabricGateway()) {
+    if (this.ip !== null && this.ip.isFabricGateway()) {
         this.network.gateway_provisioned = false;
         batch.push(this.network.batch());
     }
@@ -399,22 +399,6 @@ Nic.prototype.isFabric = function isFabric() {
 };
 
 
-/**
- * Returns true if this is the gateway nic for a fabric network
- */
-Nic.prototype.isFabricGateway = function isFabricGateway() {
-    if (!this.ip || !this.network || !this.network.fabric) {
-        return false;
-    }
-
-    if (this.ip.address.toString() === this.network.gatewayAddr) {
-        return true;
-    }
-
-    return false;
-};
-
-
 /**
  * Returns true if this is an underlay nic
  */
diff --git a/lib/models/nic/update.js b/lib/models/nic/update.js
index 63959d5..fb088e4 100644
--- a/lib/models/nic/update.js
+++ b/lib/models/nic/update.js
@@ -74,10 +74,10 @@ var UPDATE_SCHEMA = {
         belongs_to_uuid: validate.UUID,
         check_owner: validate.bool,
         cn_uuid: validate.UUID,
-        ip: validate.IP,
+        ip: validate.IPv4,
         owner_uuid: validate.UUID,
         model: validate.string,
-        network_uuid: common.validateNetwork,
+        network_uuid: common.validateIPv4Network,
         nic_tag: common.validateNicTag,
         nic_tags_provided: mod_nicTag.validateExists.bind(null, false),
         primary: validate.bool,
diff --git a/lib/util/constants.js b/lib/util/constants.js
index ff26ead..bd5884e 100644
--- a/lib/util/constants.js
+++ b/lib/util/constants.js
@@ -24,10 +24,12 @@ var MESSAGES = {
     CIDR_IP: 'Subnet IP invalid',
     CIDR_BITS: 'Subnet bits invalid',
     CIDR_INVALID: 'invalid CIDR format',
+    FABRIC_IPV4_ONLY: 'Fabric networks must be IPv4',
     INVALID_PARAMS: 'Invalid parameters',
     INVALID_UUID: 'invalid UUID',
     IP_NO_VLAN_TAG: 'required if IP specified but not network_uuid',
     IP_OUTSIDE: 'ip cannot be outside subnet',
+    IPV4_REQUIRED: 'Specified address must be IPv4',
     LIMIT: 'invalid limit, must be an integer greater than 0 or less than or ' +
         'equal to 1000',
     NET_NAME_IN_USE: 'name is in use by another network',
@@ -70,6 +72,7 @@ var FORMAT_MESSAGES = {
         'contained the IP address %s',
     IP_MULTI: 'Multiple (overlapping) networks (%s) matching this nic_tag ' +
         'and vlan_id contain the IP address %s',
+    NET_BAD_AF: 'The network UUID is valid, but its address family must be %s',
     NIC_TAGS_DIFFER: 'The nic_tag of all specified IPv4 and IPv6 networks ' +
         'must match (have "%s" and "%s")',
     VLAN_IDS_DIFFER: 'The vlan_id of all specified IPv4 and IPv6 networks ' +
diff --git a/lib/util/ip.js b/lib/util/ip.js
index 232636d..53ec4bd 100644
--- a/lib/util/ip.js
+++ b/lib/util/ip.js
@@ -125,6 +125,9 @@ var RFC1918Subnets = [
 ];
 
 
+var UniqueLocalSubnet = ipaddr.createCIDR('fc00::', 7);
+
+
 /*
  * Returns true if the IP passed in is in any of the RFC1918 private
  * address spaces
@@ -136,6 +139,14 @@ function isRFC1918(ip) {
 }
 
 
+/*
+ * Returns true if the IP passed in is an IPv6 Unique Local Address
+ */
+function isUniqueLocal(ip) {
+    return UniqueLocalSubnet.contains(ip);
+}
+
+
 /*
  * Compares two IP addresses
  */
@@ -201,6 +212,7 @@ module.exports = {
     ipAddrMinus: ipAddrMinus,
     ipAddrPlus: ipAddrPlus,
     isRFC1918: isRFC1918,
+    isUniqueLocal: isUniqueLocal,
     netmaskToBits: netmaskToBits,
     numberToAddress: numberToAddress,
     ntoa: numberToAddress,
diff --git a/lib/util/validate.js b/lib/util/validate.js
index ff933d1..b7b0131 100644
--- a/lib/util/validate.js
+++ b/lib/util/validate.js
@@ -216,6 +216,25 @@ function validateIP(_, name, addr, callback) {
 }
 
 
+/**
+ * Validates an IPv4 address
+ */
+function validateIPv4(_, name, addr, callback) {
+    var ip = util_ip.toIPAddr(addr);
+    if (!ip) {
+        callback(errors.invalidParam(name, constants.INVALID_IP_MSG));
+        return;
+    }
+
+    if (ip.kind() !== 'ipv4') {
+        callback(errors.invalidParam(name, constants.IPV4_REQUIRED));
+        return;
+    }
+
+    callback(null, ip);
+}
+
+
 /**
  * Validates a MAC address
  */
@@ -387,6 +406,7 @@ module.exports = {
     enum: validateEnum,
     fieldsArray: warden.fieldsArray,
     IP: validateIP,
+    IPv4: validateIPv4,
     ipArray: validateIParray,
     interfaceName: validateInterfaceName,
     limit: warden.limit,
diff --git a/test/unit/networks.test.js b/test/unit/networks.test.js
index 417254e..ece4727 100644
--- a/test/unit/networks.test.js
+++ b/test/unit/networks.test.js
@@ -643,32 +643,61 @@ test('Create network where mtu == nic_tag == max', function (t) {
 });
 
 
-test('Create fabric network - non-private subnet', function (t) {
-    NAPI.createNetwork(h.validNetworkParams({
-        fabric: true,
-        provision_start_ip: fmt('123.0.%d.1', h.NET_NUM),
-        provision_end_ip: fmt('123.0.%d.254', h.NET_NUM),
-        subnet: fmt('123.0.%d.0/24', h.NET_NUM)
-    }), function (err, res) {
-        t.ok(err, 'error returned');
+test('Create IPv4 fabric network - non-private subnet', function (t) {
+    mod_net.create(t, {
+        params: h.validNetworkParams({
+            fabric: true,
+            provision_start_ip: fmt('123.0.%d.1', h.NET_NUM),
+            provision_end_ip: fmt('123.0.%d.254', h.NET_NUM),
+            subnet: fmt('123.0.%d.0/24', h.NET_NUM)
+        }),
+        expCode: 422,
+        expErr: h.invalidParamErr({
+            errors: [
+                mod_err.invalidParam('subnet', constants.PRIV_RANGE_ONLY)
+            ]
+        })
+    });
+});
 
-        if (!err) {
-            return t.end();
-        }
 
-        t.equal(err.statusCode, 422, 'status code');
-        t.deepEqual(err.body, h.invalidParamErr({
+test('Create IPv6 fabric network - non-private subnet', function (t) {
+    mod_net.create(t, {
+        params: h.validIPv6NetworkParams({
+            fabric: true,
+            provision_start_ip: fmt('fe80:%d::1', h.NET_NUM),
+            provision_end_ip: fmt('fe80:%d::ffff', h.NET_NUM),
+            subnet: fmt('fe80:%d::/64', h.NET_NUM)
+        }),
+        expCode: 422,
+        expErr: h.invalidParamErr({
             errors: [
-                mod_err.invalidParam('subnet',
-                    constants.PRIV_RANGE_ONLY)
-            ],
-            message: 'Invalid parameters'
-        }), 'Error body');
+                mod_err.invalidParam('subnet', constants.PRIV_RANGE_ONLY)
+            ]
+        })
+    });
+});
 
-        return t.end();
+
+test('Create IPv6 fabric network - disallowed for now', function (t) {
+    mod_net.create(t, {
+        params: h.validIPv6NetworkParams({
+            fabric: true,
+            provision_start_ip: fmt('fc89:%d::1', h.NET_NUM),
+            provision_end_ip: fmt('fc89:%d::ffff', h.NET_NUM),
+            subnet: fmt('fc89:%d::/64', h.NET_NUM)
+        }),
+        expCode: 422,
+        expErr: h.invalidParamErr({
+            errors: [
+                mod_err.invalidParam('subnet', constants.FABRIC_IPV4_ONLY)
+            ]
+        })
     });
 });
 
+
+
 // --- Update tests
 
 
diff --git a/test/unit/nics.test.js b/test/unit/nics.test.js
index e328064..ae65745 100644
--- a/test/unit/nics.test.js
+++ b/test/unit/nics.test.js
@@ -48,6 +48,7 @@ var NET;
 var NET2;
 var NET3;
 var NET4;
+var NET5;
 var PROV_MAC_NET;
 
 
@@ -155,6 +156,23 @@ test('Initial setup', function (t) {
         });
     });
 
+    t.test('create net5', function (t2) {
+        num = h.NET_NUM;
+        var params = h.validIPv6NetworkParams({
+            gateway: util.format('fd00:%s::e40e', num),
+            vlan_id: 47
+        });
+        mod_net.create(t2, {
+            params: params,
+            partialExp: params
+        }, function (_, res) {
+            NET5 = res;
+            NET5.num = num;
+
+            t2.end();
+        });
+    });
+
     t.test('create admin net', function (t2) {
         num = h.NET_NUM;
         var params = h.validNetworkParams({ name: 'admin' });
@@ -380,6 +398,12 @@ test('Create nic - invalid params', function (t) {
                     constants.fmt.IP_OUTSIDE, fmt('10.0.%d.1', NET.num + 1),
                     NET.uuid)) ] ],
 
+        [ 'IPv6 instead of IPv4 address in "ip" field',
+            { ip: 'fd00::42', belongs_to_type: type,
+                belongs_to_uuid: uuid, owner_uuid: owner,
+                network_uuid: NET.uuid },
+                [ mod_err.invalidParam('ip', constants.IPV4_REQUIRED) ] ],
+
         [ 'IP specified, but not nic_tag or vlan_id',
             { ip: '10.0.2.2', belongs_to_type: type, belongs_to_uuid: uuid,
                 owner_uuid: owner },
@@ -387,6 +411,13 @@ test('Create nic - invalid params', function (t) {
                 h.missingParam('vlan_id', constants.msg.IP_NO_VLAN_TAG) ],
                 'Missing parameters' ],
 
+        [ 'IPv6 network in network_uuid',
+            { ip: '10.0.2.2', belongs_to_type: type,
+                belongs_to_uuid: uuid, owner_uuid: owner,
+                network_uuid: NET5.uuid },
+                [ mod_err.invalidParam('network_uuid', util.format(
+                    constants.fmt.NET_BAD_AF, 'IPv4')) ] ],
+
         [ 'Non-existent network',
             { ip: '10.0.2.2', belongs_to_type: type, belongs_to_uuid: uuid,
                 owner_uuid: owner, network_uuid: mod_uuid.v4() },
@@ -1691,7 +1722,7 @@ test('Update nic - provision IP', function (t) {
         });
     });
 
-    t.test('get IP', function (t2) {
+    t.test('get IPv4 address', function (t2) {
         mod_ip.get(t2, {
             net: NET3.uuid,
             ip: d.exp.ip,
diff --git a/test/unit/util-ip.test.js b/test/unit/util-ip.test.js
index 2eab28f..871bd5d 100644
--- a/test/unit/util-ip.test.js
+++ b/test/unit/util-ip.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2017, Joyent, Inc.
  */
 
 /*
@@ -296,6 +296,9 @@ test('isRFC1918', function (t) {
 
 
     var invalid = [
+        'fc00:5de::243',
+        'fd00::1',
+        'fd05:a:b:c::167',
         '9.255.255.255',
         '11.0.0.0',
         '172.15.255.255',
@@ -314,3 +317,46 @@ test('isRFC1918', function (t) {
         return t2.end();
     });
 });
+
+test('isUniqueLocal', function (t) {
+    var valid = [
+        'fc00:5de::243',
+        'fd00::1',
+        'fd05:a:b:c::167',
+        'fc02::a:b:c:d',
+        'fddd::40e',
+        'fcff::20'
+    ];
+
+    t.test('valid', function (t2) {
+        for (var v in valid) {
+            var val = valid[v];
+            t2.ok(IP.isUniqueLocal(val), val + ' valid');
+        }
+
+        t2.end();
+    });
+
+
+    var invalid = [
+        '2001:4860:4860::8888',
+        'fe00::1',
+        'fb00::20',
+        'a:b:c:d::20',
+        '123:456:789:0:0:987:654:321',
+        'fe80::92b8:d0ff:fe4b:c73b',
+        '::1',
+        '1.2.3.4',
+        '10.10.10.5',
+        '192.168.1.1'
+    ];
+
+    t.test('invalid', function (t2) {
+        for (var v in invalid) {
+            var val = invalid[v];
+            t2.ok(!IP.isUniqueLocal(val), val + ' invalid');
+        }
+
+        t2.end();
+    });
+});
