commit e53ca2aeb2772a527457580e8759372286b7ab50 (refs/changes/61/361/3)
Author: Todd Whiteman <todd.whiteman@joyent.com>
Date:   2016-08-29T11:39:58-07:00 (3 years, 1 month ago)
    
    DOCKER-920 Docker build shouldn't need to use chown after copying files
    Reviewed by: Josh Wilsdon <jwilsdon@joyent.com>

diff --git a/lib/build.js b/lib/build.js
index b5dbc5f..9b39026 100644
--- a/lib/build.js
+++ b/lib/build.js
@@ -15,25 +15,22 @@
  * as those parts are abstracted out through the event and task handlers.
  */
 
-var child_process = require('child_process');
 var crypto = require('crypto');
 var EventEmitter = require('events').EventEmitter;
 var fs = require('fs');
 var path = require('path');
-var net = require('net');
 var util = require('util');
 var url = require('url');
 
 var assert = require('assert-plus');
 var async = require('async');
 var bunyan = require('bunyan');
-var chownr = require('chownr');
 var dockerFileParser = require('docker-file-parser');
 var jsprim = require('jsprim');
 var lazyProperty = require('lazy-property');
 var libuuid = require('libuuid');
 var minimatch = require('minimatch');
-var once = require('once');
+var mkdirp = require('mkdirp');
 
 var magic = require('./magic');
 var shellparser = require('./shellparser');
@@ -168,10 +165,6 @@ function Builder(opts) {
     this.totalNumSteps = 0;  // Number of dockerfile commands to be run.
     this.cmdSet = false;     // If a CMD entry has been processed.
 
-    // Used to chown files to root user.
-    this.chownUid = 0;
-    this.chownGid = 0;
-
     // ARG entries, used with cliBuildArgs.
     // 'buildArgs' is what has been specified via command line.
     // 'buildArgsPlusDefaults' is 'buildArgs' plus the default args.
@@ -1374,22 +1367,6 @@ Builder.prototype.getCopyInfoFromOpts = function getCopyInfoFromOpts(opts) {
 };
 
 
-/**
- * Ensure the given directory (full realpath outside of the container) exists
- * or is created when it doesn't exist. When it is created, it will be chown'd
- * by the builder's chownUid/chownGid settings.
- */
-Builder.prototype.mkdirpChown = function doMkdirpChown(outsideDir, callback) {
-    var builder = this;
-    var opts = {
-        'uid': builder.chownUid,
-        'gid': builder.chownGid,
-        'log': builder.log
-    };
-    utils.mkdirpChown(outsideDir, opts, callback);
-};
-
-
 /**
  * Given an absolute target container path, resolves all directory symlinks to
  * and returns the real container path (i.e. no symlinks). Guarantees that the
@@ -2026,17 +2003,8 @@ Builder.prototype._doCopy = function _doCopy(ci, callback)
         parentDir = path.dirname(ci.zoneDestPath);
     }
 
-    function onExtractedCb(err, result) {
-        if (err) {
-            callback(err);
-            return;
-        }
-        chownr(ci.zoneDestPath, builder.chownUid, builder.chownGid,
-            callback);
-    }
-
     // Ensure parent directory exists, then copy the contents to it.
-    builder.mkdirpChown(parentDir, function (err) {
+    mkdirp(parentDir, function (err) {
         if (err) {
             callback(err);
             return;
@@ -2053,7 +2021,7 @@ Builder.prototype._doCopy = function _doCopy(ci, callback)
         }
 
         var event = {
-            callback: onExtractedCb,
+            callback: callback,
             compression: builder.contextFileCompressionType,
             extractDir: parentDir,
             paths: [containerRelativePath],
diff --git a/lib/utils.js b/lib/utils.js
index d395431..a7ab6c6 100644
--- a/lib/utils.js
+++ b/lib/utils.js
@@ -10,10 +10,7 @@
 
 var crypto = require('crypto');
 var fs = require('fs');
-var path = require('path');
 
-var async = require('async');
-var mkdirp = require('mkdirp');
 var once = require('once');
 
 
@@ -38,68 +35,6 @@ function escapeRegExp(string) {
     return string.replace(/([.*+?^${}()|\[\]\/\\])/g, '\\$1');
 }
 
-function fileCopy(source, target, opts, cb) {
-    // Optional opts argument.
-    if (typeof (opts) === 'function') {
-        cb = opts;
-        opts = {};
-    }
-    var cbCalled = false;
-
-    var gid = opts.gid;
-    if (typeof (gid) === 'undefined') {
-        gid = process.getgid();
-    }
-
-    var uid = opts.uid;
-    if (typeof (uid) === 'undefined') {
-        uid = process.getuid();
-    }
-
-    var rd = fs.createReadStream(source);
-    rd.on('error', function (err) {
-        done(err);
-    });
-    var wr = fs.createWriteStream(target);
-    wr.on('error', function (err) {
-        done(err);
-    });
-    wr.on('close', function (ex) {
-        done();
-    });
-    rd.pipe(wr);
-
-    function done(err) {
-        if (cbCalled) {
-            return;
-        }
-        cbCalled = true;
-
-        if (err) {
-            cb(err);
-            return;
-        }
-
-        // Maintain file properties, but not UID or GID.
-        async.waterfall([
-            function sourceStat(next) {
-                fs.stat(source, next);
-            },
-            function targetChmod(stats, next) {
-                fs.chmod(target, stats.mode, function (err2) {
-                    next(err2, stats);
-                });
-            },
-            function targetTimestamp(stats, next) {
-                fs.utimes(target, stats.atime, stats.mtime, next);
-            },
-            function targetChown(next) {
-                fs.chown(target, uid, gid, next);
-            }
-        ], cb);
-    }
-}
-
 function fileGetSha256(filepath, callback) {
     callback = once(callback);
     // the file you want to get the hash
@@ -129,54 +64,6 @@ function fileGetSha256Sync(filepath) {
 }
 
 
-function mkdirpChown(dir, opts, callback) {
-    dir = path.resolve(dir);
-    // Strip any trailing slash on directory path.
-    if (dir.length > 1 && dir.slice(-1) === '/') {
-        dir = dir.slice(0, -1);
-    }
-    if (opts.log) {
-        opts.log.debug('mkdirpChown:: dir %j', dir);
-    }
-    mkdirp(dir, function (err, firstMadeDir) {
-        if (err) {
-            callback(err);
-            return;
-        }
-        if (!firstMadeDir) {
-            callback();
-            return;
-        }
-
-        var gid = opts.gid;
-        if (typeof (gid) === 'undefined') {
-            gid = process.getgid();
-        }
-        var uid = opts.uid;
-        if (typeof (uid) === 'undefined') {
-            uid = process.getuid();
-        }
-
-        var createdDirs = [];
-        var d = dir;
-        while (d.length > firstMadeDir.length) {
-            createdDirs.push(d);
-            d = path.dirname(d);
-        }
-        createdDirs.push(firstMadeDir);
-        if (opts.log) {
-            opts.log.debug('chowning these created dirs: ', createdDirs);
-        }
-
-        function doChown(target, next) {
-            fs.chown(target, uid, gid, next);
-        }
-
-        async.eachLimit(createdDirs, 10, doChown, callback);
-    });
-}
-
-
 /**
  * Copies over all keys in `from` to `to`, or
  * to a new object if `to` is not given.
@@ -195,9 +82,7 @@ function objCopy(from, to) {
 module.exports = {
     containsWildcards: containsWildcards,
     escapeRegExp: escapeRegExp,
-    fileCopy: fileCopy,
     fileGetSha256: fileGetSha256,
     fileGetSha256Sync: fileGetSha256Sync,
-    mkdirpChown: mkdirpChown,
     objCopy: objCopy
 };
diff --git a/package.json b/package.json
index c244cac..5bd984b 100644
--- a/package.json
+++ b/package.json
@@ -33,7 +33,6 @@
     "assert-plus": "0.1.5",
     "async": "0.9.0",
     "bunyan": "1.3.4",
-    "chownr": "1.0.1",
     "docker-file-parser": "git+https://github.com/joyent/node-docker-file-parser.git#ba6b4ce0e09a1432b200a55851d2899109d68ae2",
     "jsprim": "1.2.2",
     "lazy-property": "1.0.0",
diff --git a/test/test_build.js b/test/test_build.js
index 990f404..671433f 100644
--- a/test/test_build.js
+++ b/test/test_build.js
@@ -99,8 +99,6 @@ function testBuildContext(t, fpath, opts, callback) {
     var tasks = [];
 
     var builder = new dockerbuild.Builder(buildOpts);
-    builder.chownUid = process.getuid();
-    builder.chownGid = process.getgid();
 
     builder.on('message', function (event) {
         messages.push(event);
