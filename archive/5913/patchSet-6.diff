commit 1142d5c552cd471dec2faca506945f5ca4464faf
Author: Brian Bennett <brian.bennett@joyent.com>
Date:   2019-03-21T18:08:36-07:00 (7 months ago)
    
    TRITON-599 CNS needs better handling of acme challenges for new instances

diff --git a/lib/vm-to-zones.js b/lib/vm-to-zones.js
index 3ac9507..e6c19af 100644
--- a/lib/vm-to-zones.js
+++ b/lib/vm-to-zones.js
@@ -36,17 +36,15 @@ function buildZonesFromVm(vm, config, log) {
 						network: nic.network
 					});
 				}
-				if (vm.listServices) {
-					vm.services.forEach(function (svc) {
-						entries.push({
-							type: 'service',
-							ip: ip,
-							zone: zone,
-							service: svc,
-							network: nic.network
-						});
+				vm.services.forEach(function (svc) {
+					entries.push({
+						type: 'service',
+						ip: ip,
+						zone: zone,
+						service: svc,
+						network: nic.network
 					});
-				}
+				});
 			});
 		});
 	});
@@ -276,39 +274,49 @@ function addService(zones, vm, ent, config) {
 		if (!zones[ent.zone][name])
 			zones[ent.zone][name] = [];
 		var recs = zones[ent.zone][name];
-		recs.push({
-			constructor: ent.addrType,
-			args: [ent.ip],
-			src: vm.uuid
-		});
 		var hasTxt = false;
 		for (var i = 0; i < recs.length; ++i) {
 			if (recs[i].constructor === 'TXT' &&
-			    recs[i].args[0] === vm.uuid) {
+			    recs[i].args[0].indexOf(vm.uuid) !== -1) {
 				hasTxt = true;
 				break;
 			}
 		}
-		if (!hasTxt) {
+		if (vm.listServices) {
+			recs.push({
+				constructor: ent.addrType,
+				args: [ent.ip],
+				src: vm.uuid
+			});
+			if (!hasTxt) {
+				recs.push({
+					constructor: 'TXT',
+					args: [vm.uuid],
+					src: vm.uuid
+				});
+			}
+		} else if (!hasTxt) {
 			recs.push({
 				constructor: 'TXT',
-				args: [vm.uuid],
+				args: ['verifying:' + vm.uuid],
 				src: vm.uuid
 			});
 		}
 	}
 	function addSRV(name, port) {
-		if (!zones[ent.zone])
-			zones[ent.zone] = {};
-		if (!zones[ent.zone][name])
-			zones[ent.zone][name] = [];
-		var recs = zones[ent.zone][name];
-		var target = primaryName(vm, config) + '.' + ent.zone;
-		recs.push({
-			constructor: 'SRV',
-			args: [target, port],
-			src: vm.uuid
-		});
+		if (vm.listServices) {
+			if (!zones[ent.zone])
+				zones[ent.zone] = {};
+			if (!zones[ent.zone][name])
+				zones[ent.zone][name] = [];
+			var recs = zones[ent.zone][name];
+			var target = primaryName(vm, config) + '.' + ent.zone;
+			recs.push({
+				constructor: 'SRV',
+				args: [target, port],
+				src: vm.uuid
+			});
+		}
 	}
 
 	function addACME(name) {
diff --git a/test/unit/vm-to-zones.test.js b/test/unit/vm-to-zones.test.js
index 6d99ec4..f1f8723 100644
--- a/test/unit/vm-to-zones.test.js
+++ b/test/unit/vm-to-zones.test.js
@@ -589,6 +589,67 @@ test('acme challenge support', function (t) {
 	t.end();
 });
 
+test('acme challenge on unlisted service (TRITON-599)', function (t) {
+	var config = {
+	    use_alias: true,
+	    forward_zones: {
+		'foo': { networks: ['aaaaa'] }
+	    },
+	    reverse_zones: {}
+	};
+	var challenge = 'OL92GcAcYP0DTCTVwMU46dpu73dAhu5XD6ahQiDg54M';
+	var vm = {
+	    uuid: 'abc123',
+	    alias: 'test',
+	    services: [
+	        { name: 'svc1', ports: [1234] }
+	    ],
+	    listInstance: true,
+	    listServices: false,
+	    owner: {
+		uuid: 'def432'
+	    },
+	    customer_metadata: {
+		'triton.cns.acme-challenge': challenge
+	    },
+	    nics: [
+		{
+		    ips: ['1.2.3.4'],
+		    zones: ['foo'],
+		    network: { name: 'Default-Fabric', owner_uuids: ['def432'] }
+		}
+	    ]
+	};
+	var zones = buildZonesFromVm(vm, config, log);
+	t.deepEqual(Object.keys(zones).sort(), ['3.2.1.in-addr.arpa', 'foo']);
+
+	t.deepEqual(Object.keys(zones['foo']).sort(),
+	    ['_acme-challenge.abc123.inst.def432',
+	    '_acme-challenge.svc1.svc.def432',
+	    '_acme-challenge.test.inst.def432', 'abc123.cmon',
+	    'abc123.inst.def432', 'svc1.svc.def432', 'test.inst.def432']);
+	t.deepEqual(Object.keys(zones['3.2.1.in-addr.arpa']), ['4']);
+
+	var fwd = zones['foo']['svc1.svc.def432'];
+	t.deepEqual(fwd, [
+	    {constructor: 'TXT', args: ['verifying:abc123'], src: 'abc123'}
+	]);
+	var acme = zones['foo']['_acme-challenge.test.inst.def432'];
+	t.deepEqual(acme, [
+	    {constructor: 'TXT', args: [challenge]}
+	]);
+	acme = zones['foo']['_acme-challenge.svc1.svc.def432'];
+	t.deepEqual(acme, [
+	    {constructor: 'TXT', args: [challenge], src: 'abc123'}
+	]);
+	var rev = zones['3.2.1.in-addr.arpa']['4'];
+	t.deepEqual(rev, [
+	    {constructor: 'PTR', args: ['test.inst.def432.foo']}
+	]);
+
+	t.end();
+});
+
 test('cmon everywhere', function (t) {
 	var config = {
 	    forward_zones: {
