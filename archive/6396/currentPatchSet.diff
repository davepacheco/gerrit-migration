From 5fb47ab5636295fbceb2f1fd53d07166b84cda66 Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Wed, 5 Jun 2019 11:08:39 -0700
Subject: [PATCH] joyent/node-zkstream#45 createdOrDeleted watches never fire
 after session resumption Reviewed by: Robert Mustacchi <rm@joyent.com>
 Approved by: Joshua M. Clulow <jmc@joyent.com>

---
 lib/zk-session.js  |  4 ++-
 package.json       |  2 +-
 test/basic.test.js | 71 ++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 75 insertions(+), 2 deletions(-)

diff --git a/lib/zk-session.js b/lib/zk-session.js
index 774a7b0..c087547 100644
--- a/lib/zk-session.js
+++ b/lib/zk-session.js
@@ -425,7 +425,7 @@ ZKSession.prototype.resumeWatches = function () {
 			if (!event.isInState('resuming'))
 				return;
 			var evt = event.getEvent();
-			if (evt === 'created' || evt === 'deleted') {
+			if (evt === 'createdOrDeleted') {
 				if (cod)
 					return;
 				events.createdOrDestroyed.push(path);
@@ -437,6 +437,8 @@ ZKSession.prototype.resumeWatches = function () {
 			} else if (evt === 'childrenChanged') {
 				events.childrenChanged.push(path);
 				++count;
+			} else {
+				mod_assert.ok(false, 'unknown event: ' + evt);
 			}
 			allEvts.push(event);
 		});
diff --git a/package.json b/package.json
index 5ee4dfc..3b2dabe 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "zkstream",
-  "version": "0.11.4",
+  "version": "0.11.5",
   "description": "",
   "repository": {
     "type": "git",
diff --git a/test/basic.test.js b/test/basic.test.js
index 4e6d65e..c863756 100644
--- a/test/basic.test.js
+++ b/test/basic.test.js
@@ -1242,6 +1242,77 @@ mod_tape.test('session resumption with watcher (ping timeout)', function (t) {
 	}
 });
 
+mod_tape.test('session resumption with watcher (cod)', function (t) {
+	var connected = 0;
+	var closed = 0;
+
+	var zkc1 = new mod_zkc.Client({
+		log: log,
+		address: '127.0.0.1',
+		port: 2181
+	});
+
+	var zkc2 = new mod_zkc.Client({
+		log: log,
+		address: '127.0.0.1',
+		port: 2181
+	});
+
+	var ev2 = [];
+	zkc2.on('connect', ev2.push.bind(ev2, 'connect'));
+	zkc2.on('session', ev2.push.bind(ev2, 'session'));
+	zkc2.on('expire', ev2.push.bind(ev2, 'expire'));
+	zkc2.on('disconnect', ev2.push.bind(ev2, 'disconnect'));
+
+	zkc1.on('close', function () {
+		if (++closed >= 2)
+			t.end();
+	});
+
+	zkc2.on('close', function () {
+		t.deepEqual(ev2,
+		    ['session', 'connect', 'disconnect', 'connect']);
+		if (++closed >= 2)
+			t.end();
+	});
+
+	zkc1.on('connect', function () {
+		if (++connected == 2) {
+			create();
+		}
+	});
+
+	zkc2.on('connect', function () {
+		if (++connected == 2) {
+			create();
+		}
+	});
+
+	function create() {
+		var w = zkc2.watcher('/foo4');
+		function onCreated() {
+			zkc2.close();
+		}
+		w.on('created', onCreated);
+		zkc2.sync('/foo4', function (err) {
+			t.error(err);
+			ready();
+		});
+	}
+
+	function ready() {
+		var sock = zkc2.getSession().getConnection().zcf_socket;
+		t.ok(sock.listeners('error').length > 0);
+		sock.destroy();
+
+		var data = new Buffer('hello again');
+		zkc1.create('/foo4', data, {}, function (err) {
+			t.error(err);
+			zkc1.close();
+		});
+	}
+});
+
 mod_tape.test('stop zk server', function (t) {
 	zk.on('stateChanged', function (st) {
 		if (st === 'stopped')
-- 
2.21.0

