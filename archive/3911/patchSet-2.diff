From 1a80bda40c693e49303abee735f5c2b7fb1bacd6 Mon Sep 17 00:00:00 2001
From: Nick Zivkovic <nick.zivkovic@joyent.com>
Date: Fri, 4 May 2018 20:46:15 +0000
Subject: [PATCH] TRITON-170 napi-ufds-watcher should retry when failing to
 list default VLAN

---
 lib/default-fabric-setup.js | 129 +++++++++++++++++++++++-------------
 1 file changed, 82 insertions(+), 47 deletions(-)

diff --git a/lib/default-fabric-setup.js b/lib/default-fabric-setup.js
index 8b5e4eb..4c5b7c7 100644
--- a/lib/default-fabric-setup.js
+++ b/lib/default-fabric-setup.js
@@ -53,29 +53,47 @@ function DefaultFabricSetupStream(opts) {
 
         var reqOptions = { headers: { 'x-request-id': _opts.requestId }};
 
-        self.napiClient.listFabricVLANs(_opts.uuid,
-            reqOptions,
-            function (err, vlans) {
+        function find() {
+            self.napiClient.listFabricVLANs(_opts.uuid,
+                reqOptions,
+                function (err, vlans) {
+                    var timeout = 10000;
 
-            if (err) {
-                return cb(err);
-            }
+                    if (err && err.statusCode >= 500 && err.statusCode < 600) {
+                        self.log.warn({err: err},
+                            'Server error finding vlan for user %s. ' +
+                            'Retrying in %sms',
+                            _opts.uuid, timeout);
+                        setTimeout(find, timeout);
+                        return;
+                    } else if (err) {
+                        self.log.error({err: err, user: _opts.uuid},
+                            'Error finding vlan for user %s',
+                            _opts.uuid);
+                        cb(err);
+                        return;
+                    }
 
-            var defaultVlan = vlans.reduce(function (acc, v) {
-                return acc || (v.name === opts.default_vlan.name ? v : null);
-            }, null);
+                    var defaultVlan = vlans.reduce(function (acc, v) {
+                        return acc || (v.name === opts.default_vlan.name ? v :
+                            null);
+                    }, null);
 
-            if (defaultVlan) {
-                self.log.info({ vlan: defaultVlan, user: _opts.uuid },
-                    'Default vlan exists for user');
-                _opts.defaultVlan = defaultVlan;
-                return cb();
-            }
+                    if (defaultVlan) {
+                        self.log.info({ vlan: defaultVlan, user: _opts.uuid },
+                            'Default vlan exists for user');
+                        _opts.defaultVlan = defaultVlan;
+                        cb();
+                        return;
+                    }
 
-            self.log.info({ user: _opts.uuid },
-                'Default vlan does not exist for user');
-            return cb();
-        });
+                    self.log.info({ user: _opts.uuid },
+                        'Default vlan does not exist for user');
+                    cb();
+                    return;
+                });
+        }
+        find();
     }
 
     function createDefaultVlan(_opts, cb) {
@@ -126,35 +144,52 @@ function DefaultFabricSetupStream(opts) {
 
         var reqOptions = { headers: { 'x-request-id': _opts.requestId }};
 
-        self.napiClient.listFabricNetworks(_opts.uuid,
-            opts.default_network.vlan_id,
-            {},
-            reqOptions,
-            function (err, networks) {
-            var defaultNetwork;
-            if (err) {
-                self.log.error({ err: err, user: _opts.uuid,
-                    requestId: _opts.requestId },
-                    'Error creating default fabric network for user');
-                return cb(err);
-            }
-            // XXX - this network is not necessarily the right one.
-            defaultNetwork = networks.reduce(function (acc, n) {
-                return n.name === opts.default_network.name ? n : null;
-            }, null);
-            if (defaultNetwork) {
-                self.log.info({ network: defaultNetwork, user: _opts.uuid,
-                    requestId: _opts.requestId },
-                    'Default network exists for user',
-                    defaultNetwork.uuid, _opts.uuid);
-                _opts.defaultNetwork = defaultNetwork;
-                return cb();
-            }
+        function find() {
+            self.napiClient.listFabricNetworks(_opts.uuid,
+                opts.default_network.vlan_id,
+                {},
+                reqOptions,
+                function (err, networks) {
+                    var timeout = 10000;
 
-            self.log.info({ user: _opts.uuid },
-                'Default network does not exist for user');
-            return cb();
-        });
+                    if (err && err.statusCode >= 500 && err.statusCode < 600) {
+                        self.log.warn({err: err},
+                            'Server error finding network for user %s. ' +
+                            'Retrying in %sms',
+                            _opts.uuid, timeout);
+                        setTimeout(find, timeout);
+                        return;
+                    } else if (err) {
+                        self.log.error({err: err, user: _opts.uuid},
+                            'Error finding network for user %s',
+                            _opts.uuid);
+                        cb(err);
+                        return;
+                    }
+                    // XXX - this network is not necessarily the right one.
+                    var defaultNetwork = networks.reduce(function (acc, n) {
+                        return n.name === opts.default_network.name ? n : null;
+                    }, null);
+                    if (defaultNetwork) {
+                        self.log.info({
+                            network: defaultNetwork,
+                            user: _opts.uuid,
+                            requestId: _opts.requestId
+                        },
+                        'Default network exists for user',
+                        defaultNetwork.uuid,
+                        _opts.uuid);
+                        _opts.defaultNetwork = defaultNetwork;
+                        cb();
+                        return;
+                    }
+                    self.log.info({ user: _opts.uuid },
+                        'Default network does not exist for user');
+                    cb();
+                    return;
+            });
+        }
+        find();
     }
 
     function createDefaultNetwork(_opts, cb) {
-- 
2.21.0

