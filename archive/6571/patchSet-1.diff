commit 94cb073a331e1c84aad0be72d5f8cf260ac178dc
Author: Dave Eddy <dave@daveeddy.com>
Date:   2019-07-08T15:25:44-04:00 (3 months ago)
    
    MANTA-4355 Expose pagination for bucket and object listing

diff --git a/src/bucket/list.rs b/src/bucket/list.rs
index 60489a5..68a3b82 100644
--- a/src/bucket/list.rs
+++ b/src/bucket/list.rs
@@ -27,9 +27,8 @@ pub struct ListBucketsPayload {
     pub owner      : Uuid,
     pub vnode      : u64,
     pub prefix     : String,
-    pub order_by   : String,
     pub limit      : u64,
-    pub offset     : u64,
+    pub marker     : String,
     pub request_id : Uuid
 }
 
@@ -60,11 +59,6 @@ pub fn handler(msg_id: u32,
     assert!(payload.limit > 0);
     assert!(payload.limit <= 1000);
 
-    match payload.order_by.as_ref() {
-        "created" | "name" => {},
-        _ => return Err(other_error("Unexpected value for payload.order_by"))
-    }
-
     let prefix = format!("{}%", &payload.prefix);
 
     // Make db request and form response
@@ -72,12 +66,11 @@ pub fn handler(msg_id: u32,
     let mut conn = pool.claim().unwrap();
 
     let mut txn = (*conn).transaction().unwrap();
-    let list_sql = list_sql(payload.vnode, payload.limit,
-        payload.offset, &payload.order_by);
+    let list_sql = list_sql(payload.vnode, payload.limit);
 
     for row in sql::txn_query(sql::Method::BucketList, &mut txn, list_sql.as_str(),
-                              &[&payload.owner,
-                              &prefix]).unwrap().iter() {
+                              &[&payload.owner, &prefix, &payload.marker]
+                              ).unwrap().iter() {
 
         let resp = BucketResponse {
             id: row.get(0),
@@ -94,12 +87,11 @@ pub fn handler(msg_id: u32,
     Ok(response)
 }
 
-fn list_sql(vnode: u64, limit: u64, offset: u64, order_by: &str) -> String {
+fn list_sql(vnode: u64, limit: u64) -> String {
     format!("SELECT id, owner, name, created
         FROM manta_bucket_{}.manta_bucket
-        WHERE owner = $1 AND name like $2
-        ORDER BY {} ASC
-        LIMIT {}
-        OFFSET {}",
-        vnode, order_by, limit, offset)
+        WHERE owner = $1 AND name like $2 AND name > $3
+        ORDER BY name ASC
+        LIMIT {}",
+        vnode, limit)
 }
diff --git a/src/object/list.rs b/src/object/list.rs
index fae9cea..eb993d5 100644
--- a/src/object/list.rs
+++ b/src/object/list.rs
@@ -32,9 +32,8 @@ pub struct ListObjectsPayload {
     pub bucket_id  : Uuid,
     pub vnode      : u64,
     pub prefix     : String,
-    pub order_by   : String,
     pub limit      : u64,
-    pub offset     : u64,
+    pub marker     : String,
     pub request_id : Uuid
 }
 
@@ -65,24 +64,19 @@ pub fn handler(msg_id: u32,
     assert!(payload.limit > 0);
     assert!(payload.limit <= 1000);
 
-    match payload.order_by.as_ref() {
-        "created" | "name" => {},
-        _ => return Err(other_error("Unexpected value for payload.order_by"))
-    }
-
     let prefix = format!("{}%", &payload.prefix);
 
     // Make db request and form response
     // TODO: make this call safe
     let mut conn = pool.claim().unwrap();
     let mut txn = (*conn).transaction().unwrap();
-    let list_sql = list_sql(payload.vnode, payload.limit, payload.offset,
-        &payload.order_by);
+    let list_sql = list_sql(payload.vnode, payload.limit);
 
     for row in sql::txn_query(sql::Method::ObjectList, &mut txn, list_sql.as_str(),
                               &[&payload.owner,
                               &payload.bucket_id,
-                              &prefix]).unwrap().iter() {
+                              &prefix,
+                              &payload.marker]).unwrap().iter() {
 
         let content_md5_bytes: Vec<u8> = row.get(7);
         let content_md5 = base64::encode(&content_md5_bytes);
@@ -109,14 +103,13 @@ pub fn handler(msg_id: u32,
     Ok(response)
 }
 
-fn list_sql(vnode: u64, limit: u64, offset: u64, order_by: &str) -> String {
+fn list_sql(vnode: u64, limit: u64) -> String {
     format!("SELECT id, owner, bucket_id, name, created, modified, \
         content_length, content_md5, content_type, headers, sharks, \
         properties \
         FROM manta_bucket_{}.manta_bucket_object
-        WHERE owner = $1 AND bucket_id = $2 AND name like $3
-        ORDER BY {} ASC
-        LIMIT {}
-        OFFSET {}",
-        vnode, order_by, limit, offset)
+        WHERE owner = $1 AND bucket_id = $2 AND name like $3 AND name > $4
+        ORDER BY name ASC
+        LIMIT {}",
+        vnode, limit)
 }
