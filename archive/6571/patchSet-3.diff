From d9f1b747c68a7c4ed85352340b6b2dd8abd34f8c Mon Sep 17 00:00:00 2001
From: Dave Eddy <dave@daveeddy.com>
Date: Fri, 12 Jul 2019 13:11:34 -0400
Subject: [PATCH] MANTA-4355 Expose pagination for bucket and object listing

---
 src/bucket/list.rs | 79 ++++++++++++++++++++++++++++++------------
 src/object/list.rs | 86 ++++++++++++++++++++++++++++++++++------------
 2 files changed, 121 insertions(+), 44 deletions(-)

diff --git a/src/bucket/list.rs b/src/bucket/list.rs
index 60489a5..5a7fd5c 100644
--- a/src/bucket/list.rs
+++ b/src/bucket/list.rs
@@ -15,6 +15,9 @@ use cueball_postgres_connection::PostgresConnection;
 use cueball_static_resolver::StaticIpResolver;
 use rust_fast::protocol::{FastMessage, FastMessageData};
 
+use tokio_postgres::Error as PGError;
+use tokio_postgres::Row as PGRow;
+
 use crate::bucket::BucketResponse;
 use crate::sql;
 use crate::util::{
@@ -26,10 +29,9 @@ use crate::util::{
 pub struct ListBucketsPayload {
     pub owner      : Uuid,
     pub vnode      : u64,
-    pub prefix     : String,
-    pub order_by   : String,
+    pub prefix     : Option<String>,
     pub limit      : u64,
-    pub offset     : u64,
+    pub marker     : Option<String>,
     pub request_id : Uuid
 }
 
@@ -60,25 +62,33 @@ pub fn handler(msg_id: u32,
     assert!(payload.limit > 0);
     assert!(payload.limit <= 1000);
 
-    match payload.order_by.as_ref() {
-        "created" | "name" => {},
-        _ => return Err(other_error("Unexpected value for payload.order_by"))
-    }
-
-    let prefix = format!("{}%", &payload.prefix);
-
     // Make db request and form response
     // TODO: make this call safe
     let mut conn = pool.claim().unwrap();
-
     let mut txn = (*conn).transaction().unwrap();
-    let list_sql = list_sql(payload.vnode, payload.limit,
-        payload.offset, &payload.order_by);
-
-    for row in sql::txn_query(sql::Method::BucketList, &mut txn, list_sql.as_str(),
-                              &[&payload.owner,
-                              &prefix]).unwrap().iter() {
+    let query: Result<Vec<PGRow>, PGError>;
+
+    if payload.marker.is_some() && payload.prefix.is_some() {
+        let sql = list_sql_prefix_marker(payload.vnode, payload.limit);
+        let prefix = format!("{}%", &payload.prefix.unwrap());
+        query = sql::txn_query(sql::Method::BucketList, &mut txn, sql.as_str(),
+            &[&payload.owner, &prefix, &payload.marker.unwrap()]);
+    } else if payload.marker.is_some() {
+        let sql = list_sql_marker(payload.vnode, payload.limit);
+        query = sql::txn_query(sql::Method::BucketList, &mut txn, sql.as_str(),
+            &[&payload.owner, &payload.marker.unwrap()]);
+    } else if payload.prefix.is_some() {
+        let sql = list_sql_prefix(payload.vnode, payload.limit);
+        let prefix = format!("{}%", &payload.prefix.unwrap());
+        query = sql::txn_query(sql::Method::BucketList, &mut txn, sql.as_str(),
+            &[&payload.owner, &prefix]);
+    } else {
+        let sql = list_sql(payload.vnode, payload.limit);
+        query = sql::txn_query(sql::Method::BucketList, &mut txn, sql.as_str(),
+            &[&payload.owner]);
+    }
 
+    for row in query.unwrap().iter() {
         let resp = BucketResponse {
             id: row.get(0),
             owner: row.get(1),
@@ -94,12 +104,37 @@ pub fn handler(msg_id: u32,
     Ok(response)
 }
 
-fn list_sql(vnode: u64, limit: u64, offset: u64, order_by: &str) -> String {
+fn list_sql_prefix_marker(vnode: u64, limit: u64) -> String {
+    format!("SELECT id, owner, name, created
+        FROM manta_bucket_{}.manta_bucket
+        WHERE owner = $1 AND name like $2 AND name > $3
+        ORDER BY name ASC
+        LIMIT {}",
+        vnode, limit)
+}
+
+fn list_sql_prefix(vnode: u64, limit: u64) -> String {
     format!("SELECT id, owner, name, created
         FROM manta_bucket_{}.manta_bucket
         WHERE owner = $1 AND name like $2
-        ORDER BY {} ASC
-        LIMIT {}
-        OFFSET {}",
-        vnode, order_by, limit, offset)
+        ORDER BY name ASC
+        LIMIT {}",
+        vnode, limit)
+}
+fn list_sql_marker(vnode: u64, limit: u64) -> String {
+    format!("SELECT id, owner, name, created
+        FROM manta_bucket_{}.manta_bucket
+        WHERE owner = $1 AND name > $2
+        ORDER BY name ASC
+        LIMIT {}",
+        vnode, limit)
+}
+
+fn list_sql(vnode: u64, limit: u64) -> String {
+    format!("SELECT id, owner, name, created
+        FROM manta_bucket_{}.manta_bucket
+        WHERE owner = $1
+        ORDER BY name ASC
+        LIMIT {}",
+        vnode, limit)
 }
diff --git a/src/object/list.rs b/src/object/list.rs
index fae9cea..c0f22bd 100644
--- a/src/object/list.rs
+++ b/src/object/list.rs
@@ -17,6 +17,9 @@ use cueball_static_resolver::StaticIpResolver;
 use cueball_postgres_connection::PostgresConnection;
 use rust_fast::protocol::{FastMessage, FastMessageData};
 
+use tokio_postgres::Error as PGError;
+use tokio_postgres::Row as PGRow;
+
 use crate::object::{
     ObjectResponse
 };
@@ -31,10 +34,9 @@ pub struct ListObjectsPayload {
     pub owner      : Uuid,
     pub bucket_id  : Uuid,
     pub vnode      : u64,
-    pub prefix     : String,
-    pub order_by   : String,
+    pub prefix     : Option<String>,
     pub limit      : u64,
-    pub offset     : u64,
+    pub marker     : Option<String>,
     pub request_id : Uuid
 }
 
@@ -65,25 +67,33 @@ pub fn handler(msg_id: u32,
     assert!(payload.limit > 0);
     assert!(payload.limit <= 1000);
 
-    match payload.order_by.as_ref() {
-        "created" | "name" => {},
-        _ => return Err(other_error("Unexpected value for payload.order_by"))
-    }
-
-    let prefix = format!("{}%", &payload.prefix);
-
     // Make db request and form response
     // TODO: make this call safe
     let mut conn = pool.claim().unwrap();
     let mut txn = (*conn).transaction().unwrap();
-    let list_sql = list_sql(payload.vnode, payload.limit, payload.offset,
-        &payload.order_by);
-
-    for row in sql::txn_query(sql::Method::ObjectList, &mut txn, list_sql.as_str(),
-                              &[&payload.owner,
-                              &payload.bucket_id,
-                              &prefix]).unwrap().iter() {
+    let query: Result<Vec<PGRow>, PGError>;
+
+    if payload.marker.is_some() && payload.prefix.is_some() {
+        let prefix = format!("{}%", &payload.prefix.unwrap());
+        let sql = list_sql_prefix_marker(payload.vnode, payload.limit);
+        query = sql::txn_query(sql::Method::ObjectList, &mut txn, sql.as_str(),
+            &[&payload.owner, &payload.bucket_id, &prefix, &payload.marker.unwrap()]);
+    } else if payload.marker.is_some() {
+        let sql = list_sql_marker(payload.vnode, payload.limit);
+        query = sql::txn_query(sql::Method::ObjectList, &mut txn, sql.as_str(),
+            &[&payload.owner, &payload.bucket_id, &payload.marker]);
+    } else if payload.prefix.is_some() {
+        let prefix = format!("{}%", &payload.prefix.unwrap());
+        let sql = list_sql_prefix(payload.vnode, payload.limit);
+        query = sql::txn_query(sql::Method::ObjectList, &mut txn, sql.as_str(),
+            &[&payload.owner, &payload.bucket_id, &prefix]);
+    } else {
+        let sql = list_sql(payload.vnode, payload.limit);
+        query = sql::txn_query(sql::Method::ObjectList, &mut txn, sql.as_str(),
+            &[&payload.owner, &payload.bucket_id]);
+    }
 
+    for row in query.unwrap().iter() {
         let content_md5_bytes: Vec<u8> = row.get(7);
         let content_md5 = base64::encode(&content_md5_bytes);
         let resp = ObjectResponse {
@@ -109,14 +119,46 @@ pub fn handler(msg_id: u32,
     Ok(response)
 }
 
-fn list_sql(vnode: u64, limit: u64, offset: u64, order_by: &str) -> String {
+fn list_sql_prefix_marker(vnode: u64, limit: u64) -> String {
+    format!("SELECT id, owner, bucket_id, name, created, modified, \
+        content_length, content_md5, content_type, headers, sharks, \
+        properties \
+        FROM manta_bucket_{}.manta_bucket_object
+        WHERE owner = $1 AND bucket_id = $2 AND name like $3 AND name > $4
+        ORDER BY name ASC
+        LIMIT {}",
+        vnode, limit)
+}
+
+fn list_sql_prefix(vnode: u64, limit: u64) -> String {
     format!("SELECT id, owner, bucket_id, name, created, modified, \
         content_length, content_md5, content_type, headers, sharks, \
         properties \
         FROM manta_bucket_{}.manta_bucket_object
         WHERE owner = $1 AND bucket_id = $2 AND name like $3
-        ORDER BY {} ASC
-        LIMIT {}
-        OFFSET {}",
-        vnode, order_by, limit, offset)
+        ORDER BY name ASC
+        LIMIT {}",
+        vnode, limit)
+}
+
+fn list_sql_marker(vnode: u64, limit: u64) -> String {
+    format!("SELECT id, owner, bucket_id, name, created, modified, \
+        content_length, content_md5, content_type, headers, sharks, \
+        properties \
+        FROM manta_bucket_{}.manta_bucket_object
+        WHERE owner = $1 AND bucket_id = $2 AND name > $3
+        ORDER BY name ASC
+        LIMIT {}",
+        vnode, limit)
+}
+
+fn list_sql(vnode: u64, limit: u64) -> String {
+    format!("SELECT id, owner, bucket_id, name, created, modified, \
+        content_length, content_md5, content_type, headers, sharks, \
+        properties \
+        FROM manta_bucket_{}.manta_bucket_object
+        WHERE owner = $1 AND bucket_id = $2
+        ORDER BY name ASC
+        LIMIT {}",
+        vnode, limit)
 }
-- 
2.21.0

