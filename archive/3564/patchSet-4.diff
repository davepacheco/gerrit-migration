commit 1a3e693aec94460edcc0b3897fca529ebbf7c010 (refs/changes/64/3564/4)
Author: Jeff Emershaw <me@jeffemershaw.com>
Date:   2018-06-25T17:28:08+02:00 (1 year, 3 months ago)
    
    PUBAPI-1378 Provide UpdateFabricNetwork endpoint

diff --git a/README.md b/README.md
index 2d3fc7f..878a9ae 100644
--- a/README.md
+++ b/README.md
@@ -131,7 +131,7 @@ in your local setup. Assuming you want to test RBAC in COAL, you'll need to:
         SDC_URL=https://<IP of cloudapi zone>
         SDC_TESTING=true
         SDC_ACCOUNT=account
-        SDC_KEY_ID=`ssh-keygen -l -f ~/.ssh/id_rsa.pub | awk '{print $2}' | tr -d '\n'`
+        SDC_KEY_ID=`ssh-keygen -l -E md5 -f ~/.ssh/id_rsa.pub| awk '{print $2}' | tr -d '\n'|cut -c 5-`
 
 And, in order to operate as the account user instead, you just need to add the
 ENV var:
diff --git a/docs/index.md b/docs/index.md
index 2066f55..e6319bd 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -8499,6 +8499,96 @@ ResourceNotFound | If `:login`, `:vlan_id` or `:id` does not exist
 
 
 
+## UpdateFabricNetwork (PUT /:login/fabrics/default/vlans/:vlan_id/networks/:id)
+
+### Inputs
+
+**Field**    | **Type** | **Description**
+------------ | -------- | ---------------
+name         | String   | The network name; must be unique (optional)
+description  | String   | Description of this network (optional)
+provision_start_ip| String | The first IP on the network that may be assigned (optional)
+provision_end_ip  | String | The last IP on the network that may be assigned (optional)
+resolvers    | String   | Resolver IP addresses (optional)
+routes       | Routes Object| Static routes for hosts on this network (optional)
+
+### Returns
+
+Network Object:
+
+**Field**    | **Type** | **Description**
+------------ | -------- | ---------------
+id           | UUID     | Unique id for this network
+name         | String   | The network name
+public       | Boolean  | Whether this a public or private (rfc1918) network
+fabric       | Boolean  | Whether this network is created on a fabric
+description  | String   | Description of this network (optional)
+subnet       | String   | A CIDR formatted string that describes the network
+provision_start_ip| String | The first IP on the network that may be assigned
+provision_end_ip  | String | The last IP on the network that may be assigned
+gateway      | String   | Optional Gateway IP address
+resolvers    | String   | Resolver IP addresses
+routes       | Routes Object| Optional Static routes for hosts on this network
+internet_nat | Boolean  | Provision internet NAT zone on gateway address
+
+### Errors
+
+For all possible errors, see [CloudAPI HTTP Responses](#cloudapi-http-responses).
+
+**Error Code**   | **Description**
+---------------- | ---------------
+ResourceNotFound | If `:login` does not exist
+
+### CLI Command
+
+    $sdc-fabric network update 17dbc20a-2782-4e88-90f0-4d4a1bb0501f -n "updatenet" --resolvers="8.8.4.4" --routes='{"172.16.10.1/24":"192.168.128.1"}' --description="updated description"
+
+#### Example Request
+
+    PUT /login/fabrics/default/vlans/2/networks/17dbc20a-2782-4e88-90f0-4d4a1bb0501f HTTP/1.1
+    Authorization: Basic ...
+    Host: api.example.com
+    Accept: application/json
+    Accept-version: ~7.3
+
+    {
+      "name": "updatenet",
+      "description": "updated description",
+      "resolvers": [
+        "8.8.8.8"
+      ],
+      "routes": {
+        "172.16.10.0/24": "192.16.128.1"
+      }
+    }
+
+#### Example Response
+
+    HTTP/1.1 201 Created
+    Content-Type: application/json
+    Server: Joyent Triton 7.3.0
+    Api-Version: 7.3.0
+
+    {
+      "id": "17dbc20a-2782-4e88-90f0-4d4a1bb0501f",
+      "name": "newnet",
+      "public": false,
+      "fabric": true,
+      "description": "updated description",
+      "gateway": "192.168.128.1",
+      "internet_nat": true,
+      "provision_end_ip": "192.168.131.250",
+      "provision_start_ip": "192.168.128.5",
+      "resolvers": [
+        "8.8.4.4"
+      ],
+      "routes": {
+        "172.16.10.1/24": "192.168.128.1"
+      },
+      "subnet": "192.168.128.0/22",
+      "vlan_id": 2
+    }
+
 ## DeleteFabricNetwork (DELETE /:login/fabrics/default/vlans/:vlan_id/networks/:id)
 
 Deletes the specified Network. Note that no instances may be provisioned on the
diff --git a/lib/endpoints/networks.js b/lib/endpoints/networks.js
index d55e6ea..a313a75 100644
--- a/lib/endpoints/networks.js
+++ b/lib/endpoints/networks.js
@@ -5,14 +5,15 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
 var jsprim = require('jsprim');
 var restify = require('restify');
 var schemas = require('joyent-schemas').cloudapi;
-var util = require('util');
+var util = require('util'),
+    format = util.format;
 var vasync = require('vasync');
 
 var modNetworks = require('../networks');
@@ -94,7 +95,7 @@ function schemaValidate(schema, req) {
         if (IP_FIELDS.indexOf(err.jsv_details.property) !== -1 &&
                 err.message.match(/does not match the regex pattern/)) {
             throw new InvalidArgumentError(err,
-                    util.format('property "%s": must be an IPv4 address',
+                    format('property "%s": must be an IPv4 address',
                     err.jsv_details.property));
         }
 
@@ -121,7 +122,7 @@ function translateErr(err) {
                 return bErr.message;
             }
 
-            return util.format('property "%s": %s', bErr.field, bErr.message);
+            return format('property "%s": %s', bErr.field, bErr.message);
         }).join(', ');
     }
 
@@ -299,7 +300,7 @@ function listNetworkIps(req, res, next) {
     assert.uuid(adminUuid, 'admin uuid');
 
     var networkUuid = req.params.id;
-    //validateNetwork should have already vaidated this exists
+    // validateNetwork should have already vaidated this exists
     var net = req.networks.find(function findNetwork(n) {
         return n.uuid === networkUuid;
     });
@@ -354,7 +355,7 @@ function getNetworkIp(req, res, next) {
     var networkUuid = req.params.id;
     var _ip = req.params.ip_address;
 
-    //validateNetwork should have already vaidated this exists
+    // validateNetwork should have already vaidated this exists
     var net = req.networks.find(function findNetwork(n) {
         return n.uuid === networkUuid;
     });
@@ -537,22 +538,68 @@ function createFabricVLAN(req, res, next) {
     try {
         params = schemaValidate(schemas.CreateFabricVLAN, req);
     } catch (schemaErr) {
-        return next(schemaErr);
+        next(schemaErr);
+        return;
     }
 
     params.fields = FABRIC_VLAN_FIELDS;
 
-    return req.sdc.napi.createFabricVLAN(req.account.uuid, params,
+    req.sdc.napi.createFabricVLAN(req.account.uuid, params,
             reqOpts(req), function (err, vlan) {
         if (err) {
-            return next(translateErr(err));
+            next(translateErr(err));
+            return;
         }
 
         res.send(201, vlan);
-        return next();
+        next();
     });
 }
 
+function updateFabricNetwork(req, res, next) {
+    var params;
+    var vlanID;
+    var id;
+    assert.ok(req.account);
+    assert.ok(req.sdc.napi);
+
+    if (req.body && req.body.id) {
+        next(new InvalidArgumentError(format(
+            'property "id": cannot be set')));
+        return;
+    }
+
+    try {
+        params = schemaValidate(schemas.UpdateFabricNetwork, req);
+    } catch (schemaErr) {
+        next(schemaErr);
+        return;
+    }
+
+    if (params.resolvers && params.resolvers.length > MAX_RESOLVERS) {
+        next(new InvalidArgumentError(format(
+            'property "resolvers": maximum of %d resolvers',
+            MAX_RESOLVERS)));
+        return;
+    }
+
+    vlanID = params.vlan_id;
+    delete params.vlan_id;
+    id = params.id;
+    delete params.id;
+    params.fields = FABRIC_NETWORK_FIELDS;
+
+    req.sdc.napi.updateFabricNetwork(req.account.uuid, vlanID, id,
+            params, function (err, network) {
+        if (err) {
+            next(translateErr(err));
+            return;
+        }
+
+        res.send(translateNetwork(network));
+        next();
+    });
+}
 
 function updateFabricVLAN(req, res, next) {
     var params;
@@ -564,21 +611,23 @@ function updateFabricVLAN(req, res, next) {
     try {
         params = schemaValidate(schemas.UpdateFabricVLAN, req);
     } catch (schemaErr) {
-        return next(schemaErr);
+        next(schemaErr);
+        return;
     }
 
     vlanID = params.vlan_id;
     delete params.vlan_id;
     params.fields = FABRIC_VLAN_FIELDS;
 
-    return req.sdc.napi.updateFabricVLAN(req.account.uuid, vlanID, params,
+    req.sdc.napi.updateFabricVLAN(req.account.uuid, vlanID, params,
             reqOpts(req), function (err, vlan) {
         if (err) {
-            return next(translateErr(err));
+            next(translateErr(err));
+            return;
         }
 
         res.send(202, vlan);
-        return next();
+        next();
     });
 }
 
@@ -592,18 +641,20 @@ function getFabricVLAN(req, res, next) {
     try {
         params = schemaValidate(schemas.GetFabricVLAN, req);
     } catch (schemaErr) {
-        return next(schemaErr);
+        next(schemaErr);
+        return;
     }
 
     params.fields = FABRIC_VLAN_FIELDS;
 
-    return req.sdc.napi.getFabricVLAN(req.account.uuid, params.vlan_id, params,
+    req.sdc.napi.getFabricVLAN(req.account.uuid, params.vlan_id, params,
             reqOpts(req), function (err, vlan) {
         if (err) {
-            return next(translateErr(err));
+            next(translateErr(err));
+            return;
         }
         res.send(vlan);
-        return next();
+        next();
     });
 }
 
@@ -617,16 +668,18 @@ function deleteFabricVLAN(req, res, next) {
     try {
         params = schemaValidate(schemas.DeleteFabricVLAN, req);
     } catch (schemaErr) {
-        return next(schemaErr);
+        next(schemaErr);
+        return;
     }
 
-    return req.sdc.napi.deleteFabricVLAN(req.account.uuid, params.vlan_id, {},
-            reqOpts(req), function (err, ignored) {
+    req.sdc.napi.deleteFabricVLAN(req.account.uuid, params.vlan_id, {},
+            reqOpts(req), function (err) {
         if (err) {
-            return next(translateErr(err));
+            next(translateErr(err));
+            return;
         }
         res.send(204);
-        return next();
+        next();
     });
 }
 
@@ -640,22 +693,23 @@ function listFabricNetworks(req, res, next) {
     try {
         params = schemaValidate(schemas.ListFabricNetworks, req);
     } catch (schemaErr) {
-        return next(schemaErr);
+        next(schemaErr);
+        return;
     }
 
-    return req.sdc.napi.listFabricNetworks(req.account.uuid, params.vlan_id, {},
+    req.sdc.napi.listFabricNetworks(req.account.uuid, params.vlan_id, {},
             reqOpts(req), function (err, networks) {
         if (err) {
-            return next(translateErr(err));
+            next(translateErr(err));
+            return;
         }
 
         res.send(networks.map(function _translateNetwork(network) {
             assert.object(network, 'network');
-
             return translateNetwork(network);
         }));
 
-        return next();
+        next();
     });
 }
 
@@ -669,27 +723,31 @@ function createFabricNetwork(req, res, next) {
 
     try {
         params = schemaValidate(schemas.CreateFabricNetwork, req);
-        if (params.resolvers && params.resolvers.length > MAX_RESOLVERS) {
-            throw new InvalidArgumentError(util.format(
-                    'property "resolvers": maximum of %d resolvers',
-                    MAX_RESOLVERS));
-        }
     } catch (schemaErr) {
-        return next(schemaErr);
+        next(schemaErr);
+        return;
+    }
+
+    if (params.resolvers && params.resolvers.length > MAX_RESOLVERS) {
+        next(new InvalidArgumentError(format(
+                'property "resolvers": maximum of %d resolvers',
+                MAX_RESOLVERS)));
+        return;
     }
 
     vlanID = params.vlan_id;
     delete params.vlan_id;
     params.fields = FABRIC_NETWORK_FIELDS;
 
-    return req.sdc.napi.createFabricNetwork(req.account.uuid, vlanID, params,
+    req.sdc.napi.createFabricNetwork(req.account.uuid, vlanID, params,
             reqOpts(req), function (err, network) {
         if (err) {
-            return next(translateErr(err));
+            next(translateErr(err));
+            return;
         }
 
         res.send(201, translateNetwork(network));
-        return next();
+        next();
     });
 }
 
@@ -703,18 +761,20 @@ function getFabricNetwork(req, res, next) {
     try {
         params = schemaValidate(schemas.GetFabricNetwork, req);
     } catch (schemaErr) {
-        return next(schemaErr);
+        next(schemaErr);
+        return;
     }
 
-    return req.sdc.napi.getFabricNetwork(req.account.uuid, params.vlan_id,
+    req.sdc.napi.getFabricNetwork(req.account.uuid, params.vlan_id,
             params.id, { fields: FABRIC_NETWORK_FIELDS }, reqOpts(req),
             function (err, network) {
         if (err) {
-            return next(translateErr(err));
+            next(translateErr(err));
+            return;
         }
 
         res.send(translateNetwork(network));
-        return next();
+        next();
     });
 }
 
@@ -728,20 +788,23 @@ function deleteFabricNetwork(req, res, next) {
     try {
         params = schemaValidate(schemas.DeleteFabricNetwork, req);
     } catch (schemaErr) {
-        return next(schemaErr);
+        next(schemaErr);
+        return;
     }
 
-    return modNetworks.getDefaultFabricNetworkForUser(req.sdc.ufds,
+    modNetworks.getDefaultFabricNetworkForUser(req.sdc.ufds,
         req.config.datacenter_name, req.account, {
         log: req.log
     }, function _afterGetConf(getFabricNetErr, defaultFabricNet) {
         if (getFabricNetErr) {
-            return next(getFabricNetErr);
+            next(getFabricNetErr);
+            return;
         }
 
         if (!defaultFabricNet) {
-            return next(new InternalError('Could not find default fabric ' +
+            next(new InternalError('Could not find default fabric ' +
                 'network for user'));
+            return;
         }
 
         req.log.info({
@@ -750,18 +813,19 @@ function deleteFabricNetwork(req, res, next) {
         }, 'Deleting default network?');
 
         if (params.id === defaultFabricNet.uuid) {
-            return next(new InvalidArgumentError(
-                'cannot delete default network'));
+            next(new InvalidArgumentError('cannot delete default network'));
+            return;
         }
 
-        return req.sdc.napi.deleteFabricNetwork(req.account.uuid,
-                params.vlan_id, params.id, {}, reqOpts(req), function (err) {
+        req.sdc.napi.deleteFabricNetwork(req.account.uuid, params.vlan_id,
+            params.id, {}, reqOpts(req), function (err) {
             if (err) {
-                return next(translateErr(err));
+                next(translateErr(err));
+                return;
             }
 
             res.send(204);
-            return next();
+            next();
         });
     });
 }
@@ -850,6 +914,12 @@ function mountNetworks(server, before, pre) {
         version: [ '7.3.0', '8.0.0' ]
     }, before, ensureFabricsEnabled, pre, getFabricNetwork);
 
+    server.put({
+        path: '/:account/fabrics/default/vlans/:vlan_id/networks/:id',
+        name: 'UpdateFabricNetwork',
+        version: [ '7.3.0', '8.0.0' ]
+    }, before, ensureFabricsEnabled, pre, updateFabricNetwork);
+
     server.del({
         path: '/:account/fabrics/default/vlans/:vlan_id/networks/:id',
         name: 'DeleteFabricNetwork',
diff --git a/package.json b/package.json
index e78f371..681cda4 100644
--- a/package.json
+++ b/package.json
@@ -24,7 +24,7 @@
         "cueball": "2.1.1",
         "filed": "0.0.7",
         "http-signature": "1.1.0",
-        "joyent-schemas": "git+https://github.com/joyent/schemas.git#caf3a226ed0707f5da897e1da151cc6d97fccda2",
+        "joyent-schemas": "git+https://github.com/joyent/schemas.git#dd1c3cbfae6e2aa6ceafbe003bd95fb5e579e748",
         "jsprim": "0.6.1",
         "kang": "1.1.0",
         "keyapi": "git+https://github.com/joyent/keyapi.git#e14b3d582e1d9d338b7082d61f34ba8d1bbc540a",
@@ -35,7 +35,7 @@
         "nodemailer": "0.7.1",
         "nopt": "2.0.0",
         "restify": "4.3.3",
-        "sdc-clients": "10.4.0",
+        "sdc-clients": "11.1.0",
         "semver": "5.4.1",
         "strsplit": "1.0.0",
         "triton-metrics": "0.1.0",
diff --git a/test/fabrics.test.js b/test/fabrics.test.js
index aa553d5..ef14aae 100644
--- a/test/fabrics.test.js
+++ b/test/fabrics.test.js
@@ -253,7 +253,7 @@ function findNetInList(t, params, callback) {
 
     var accountUuid = CLIENT.account.uuid;
 
-    findViewableNetworks(t, accountUuid, function (err, nets) {
+    findViewableNetworks(t, accountUuid, function (_err, nets) {
         var viewableUuids = getViewableUuids(t, nets, accountUuid);
 
         CLIENT.get('/my/networks', afterFindInList.bind(null, t,
@@ -307,7 +307,7 @@ function findViewableNetworks(t, accountUuid, cb) {
 /**
  * Find a fabric VLAN in a user's list
  */
-function findVLANinList(t, params, callback) {
+function findVLANinList(t, params) {
     assert.object(t, 't');
     assert.object(params, 'params');
     assert.number(params.vlan_id, 'params.vlan_id');
@@ -541,7 +541,7 @@ test('VLANs', TEST_OPTS, function (tt) {
 
     tt.test('delete non-existent fabric VLAN', function (t) {
         CLIENT.del('/my/fabrics/default/vlans/999',
-                function (err, req, res, body) {
+                function (err, req, res) {
             t.ok(err, 'expected error');
 
             if (err) {
@@ -577,7 +577,7 @@ test('create VLAN: invalid', TEST_OPTS, function (t) {
 
     function _createInvalidVLAN(data, cb) {
         CLIENT.post('/my/fabrics/default/vlans', data[0],
-                function (err, req, res, body) {
+                function (err, req, res) {
 
             t.ok(err, 'expected error: ' + JSON.stringify(data[0]));
             if (err) {
@@ -615,7 +615,7 @@ test('update VLAN: invalid', TEST_OPTS, function (t) {
 
     function _updateInvalidVLAN(data, cb) {
         CLIENT.put('/my/fabrics/default/vlans/' + PARAMS.vlan.vlan_id, data[0],
-                function (err, req, res, body) {
+                function (err, req, res) {
 
             t.ok(err, 'expected error: ' + JSON.stringify(data[0]));
             if (err) {
@@ -860,17 +860,92 @@ test('networks', TEST_OPTS, function (tt) {
         };
 
         OTHER.post(fmt('/my/fabrics/default/vlans/%d/networks',
-                PARAMS.vlan.vlan_id), params, function (err, req, res, body) {
-            checkNotFound(t, err, req, res, body);
-            t.end();
-        });
+            PARAMS.vlan.vlan_id), params, function (err, req, res, body) {
+                checkNotFound(t, err, req, res, body);
+                t.end();
+            });
+    });
+
+
+    tt.test('update fabric network: nets[0] - valid', function (t) {
+        var params = {
+            name: 'network_0_updated',
+            description: 'network_0_updated',
+            routes: { '172.16.0.0/16': '10.4.1.1'},
+            resolvers: [ '8.8.4.4' ],
+            provision_start_ip: '10.4.1.2',
+            provision_end_ip: '10.4.255.252'
+        };
+        CLIENT.put(fmt('/my/fabrics/default/vlans/%d/networks/%s',
+            PARAMS.vlan.vlan_id, nets[0]), params,
+            function (err, req, res) {
+                t.ifErr(err, 'update fabric networks nets[0]');
+
+                t.equal(res.statusCode, 200, 'updated nets[0]');
+                common.checkHeaders(t, res.headers);
+                common.checkReqId(t, res.headers);
+                t.end();
+            });
+
     });
 
 
+    tt.test('update fabric network: nets[0] - invalid', function (t) {
+        var params = {
+            gateway: '10.4.1.2'
+        };
+        CLIENT.put(fmt('/my/fabrics/default/vlans/%d/networks/%s',
+            PARAMS.vlan.vlan_id, nets[0]), params,
+            function (err, req, res) {
+                t.ok(err, 'expected error');
+                if (err) {
+                    t.equal(err.message,
+                        'property "gateway": unsupported property',
+                        'error message');
+                    t.equal(res.statusCode, 409, 'statusCode');
+                    t.equal(err.restCode, 'InvalidArgument', 'restCode');
+                }
+                t.end();
+            });
+    });
+
+
+    tt.test('update fabric network: nets[1] - valid', function (t) {
+        var params = {
+            name: 'network_1_updated',
+            routes: { '172.16.0.0/16': '10.5.1.1'},
+            resolvers: [ '8.8.4.4' ],
+            provision_start_ip: '10.5.1.2',
+            provision_end_ip: '10.5.255.252'
+        };
+        CLIENT.put(fmt('/my/fabrics/default/vlans/%d/networks/%s',
+            PARAMS.vlan.vlan_id, nets[1]), params,
+            function (err, req, res) {
+                t.ifErr(err, 'update fabric networks nets[1]');
+
+                t.equal(res.statusCode, 200, 'updated nets[1]');
+                common.checkHeaders(t, res.headers);
+                common.checkReqId(t, res.headers);
+                t.end();
+            });
+    });
+
+    tt.test('update fabric network: nets[1] - other', function (t) {
+        var params = {
+            name: 'network_1_other'
+        };
+        OTHER.put(fmt('/my/fabrics/default/vlans/%d/networks/%s',
+            PARAMS.vlan.vlan_id, nets[1]), params,
+            function (err, req, res) {
+                t.ok(err, 'Cannot update other vlan network');
+                t.equal(err.statusCode, 404, 'Cannot find other network');
+                t.end();
+            });
+    });
+
     tt.end();
 });
 
-
 test('create fabric network: invalid', TEST_OPTS, function (t) {
     var base = {
         name: 'invalid_network',
@@ -936,7 +1011,7 @@ test('create fabric network: invalid', TEST_OPTS, function (t) {
 
     function _createInvalidNet(data, cb) {
         CLIENT.post(fmt('/my/fabrics/default/vlans/%d/networks',
-                PARAMS.vlan.vlan_id), data[0], function (err, req, res, body) {
+                PARAMS.vlan.vlan_id), data[0], function (err, req, res) {
 
             t.ok(err, 'expected error: ' + JSON.stringify(data[0]));
             if (err) {
@@ -1060,7 +1135,7 @@ test('default fabric', TEST_OPTS, function (tt) {
         var net = CREATED.nets[0];
 
         CLIENT.del(fmt('/my/fabrics/default/vlans/%d/networks/%s',
-                net.vlan_id, net.id), function (err, req, res, body) {
+                net.vlan_id, net.id), function (err, req, res) {
             t.ok(err, 'delete network');
             common.checkHeaders(t, res.headers);
             common.checkReqId(t, res.headers);
diff --git a/tools/create-account.sh b/tools/create-account.sh
index 850f935..bdec335 100755
--- a/tools/create-account.sh
+++ b/tools/create-account.sh
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2018, Joyent, Inc.
 #
 
 #
@@ -32,7 +32,7 @@ HOST=$1
 [[ -n ${SSH} ]] || SSH=ssh
 [[ -n ${SCP} ]] || SCP=scp
 
-FINGERPRINT=`ssh-keygen -l -f ~/.ssh/id_rsa.pub | awk '{print $2}' | tr -d '\n'`
+FINGERPRINT=`ssh-keygen -l -E md5 -f ~/.ssh/id_rsa.pub| awk '{print $2}' | tr -d '\n'|cut -c 5-`
 
 cat << EOM > /tmp/account.ldif
 dn: uuid=cc71f8bb-f310-4746-8e36-afd7c6dd2895, ou=users, o=smartdc
