commit 5f4f8e6673480e89bf83c7ed55bd57726b5d1c3d (refs/changes/91/391/2)
Author: Josh Wilsdon <jwilsdon@joyent.com>
Date:   2016-08-31T13:08:36-07:00 (3 years, 1 month ago)
    
    DOCKER-848 triton bits belong in "sdc" backend

diff --git a/lib/auth.js b/lib/backends/sdc/auth.js
similarity index 99%
rename from lib/auth.js
rename to lib/backends/sdc/auth.js
index 584f5dd..ca30d78 100644
--- a/lib/auth.js
+++ b/lib/backends/sdc/auth.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
 /*
@@ -36,7 +36,7 @@ var vasync = require('vasync');
 var sshpk = require('sshpk');
 var sshpkUtils = require('sshpk/lib/utils');
 
-var errors = require('./errors');
+var errors = require('../../errors');
 
 var fmt = util.format;
 
diff --git a/lib/connwatcher.js b/lib/backends/sdc/connwatcher.js
similarity index 98%
rename from lib/connwatcher.js
rename to lib/backends/sdc/connwatcher.js
index 1e8539b..96e5dae 100644
--- a/lib/connwatcher.js
+++ b/lib/backends/sdc/connwatcher.js
@@ -10,7 +10,7 @@
 
 var assert = require('assert-plus');
 var restify = require('restify');
-var errors = require('./errors');
+var errors = require('../../errors');
 
 function ConnectionStatusWatcher(opts) {
     this.connections = {};
diff --git a/lib/backends/sdc/containers.js b/lib/backends/sdc/containers.js
index e3af48b..7ae9125 100644
--- a/lib/backends/sdc/containers.js
+++ b/lib/backends/sdc/containers.js
@@ -30,10 +30,10 @@ var vasync = require('vasync');
 var VMAPI = require('sdc-clients').VMAPI;
 
 var affinity = require('./affinity');
-var common = require('../../../lib/common');
-var errors = require('../../../lib/errors');
+var common = require('../../common');
+var errors = require('../../errors');
 var images = require('./images');
-var Link = require('../../models/link');
+var Link = require('./models/link');
 var utils = require('./utils');
 var validate = require('../../validate');
 
diff --git a/lib/backends/sdc/images.js b/lib/backends/sdc/images.js
index b266573..81d1152 100644
--- a/lib/backends/sdc/images.js
+++ b/lib/backends/sdc/images.js
@@ -48,9 +48,9 @@ var VMAPI = sdcClients.VMAPI;
 var vasync = require('vasync');
 
 var common = require('../../common');
-var Image = require('../../models/image');
-var ImageTag = require('../../models/image-tag');
-var errors = require('../../../lib/errors');
+var Image = require('./models/image');
+var ImageTag = require('./models/image-tag');
+var errors = require('../../errors');
 var utils = require('./utils');
 
 
diff --git a/lib/backends/sdc/index.js b/lib/backends/sdc/index.js
index ca536d0..6043f13 100644
--- a/lib/backends/sdc/index.js
+++ b/lib/backends/sdc/index.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
 /*
@@ -13,12 +13,28 @@
  */
 
 var assert = require('assert-plus');
+var verror = require('verror');
 
+var CNAPI = require('sdc-clients').CNAPI;
+var FWAPI = require('sdc-clients').FWAPI;
+var IMGAPI = require('sdc-clients').IMGAPI;
+var LRU = require('lru-cache');
+var moray = require('moray');
+var NAPI = require('sdc-clients').NAPI;
+var PAPI = require('sdc-clients').PAPI;
+var UFDS = require('ufds');
+var VMAPI = require('sdc-clients').VMAPI;
+var WFAPI = require('./wfapi');
+
+var auth = require('./auth');
 var build = require('./build');
 var containers = require('./containers');
-var sysinfo = require('./sysinfo');
+var ConnectionStatusWatcher = require('./connwatcher');
+var Image = require('./models/image');
 var images = require('./images');
-
+var ImageTag = require('./models/image-tag');
+var models = require('./models');
+var sysinfo = require('./sysinfo');
 
 
 function SdcBackend(opts) {
@@ -30,6 +46,272 @@ function SdcBackend(opts) {
     this.config = opts.config;
 }
 
+/*
+ * Initialize clients that we'll need to handle the other requests.
+ */
+SdcBackend.prototype.init = function sdcBackendInit(app) {
+    assert.object(app, 'app');
+
+    var opts = {};
+
+    app.connWatcher = new ConnectionStatusWatcher({
+        app: app
+    });
+
+    // Set up our dependencies
+    app.connWatcher.register({
+        name: 'cnapi',
+        init: function (cb) {
+            var cnapi = new CNAPI(app.config.cnapi);
+            cb(null, cnapi);
+        },
+        pingIntervalSecs: 10,
+        ping: function (cnapi, cb) {
+            cnapi.ping(function (err) {
+                if (err) {
+                    cb(new verror.VError(err, 'could not ping CNAPI'));
+                    return;
+                }
+                cb();
+            });
+        }
+    });
+
+    app.connWatcher.register({
+        name: 'vmapi',
+        init: function (cb) {
+            var vmapi = new VMAPI(app.config.vmapi);
+            cb(null, vmapi);
+        },
+        pingIntervalSecs: 10,
+        ping: function (vmapi, cb) {
+            vmapi.ping(function (err) {
+                if (err) {
+                    cb(new verror.VError(err, 'could not ping VMAPI'));
+                    return;
+                }
+                cb();
+            });
+        }
+    });
+
+    app.connWatcher.register({
+        name: 'imgapi',
+        init: function (cb) {
+            var imgapi = new IMGAPI(app.config.imgapi);
+            cb(null, imgapi);
+        },
+        pingIntervalSecs: 10,
+        ping: function (imgapi, cb) {
+            imgapi.ping(function (err) {
+                if (err) {
+                    cb(new verror.VError(err, 'could not ping IMGAPI'));
+                    return;
+                }
+                cb();
+            });
+        }
+    });
+
+    app.connWatcher.register({
+        name: 'wfapi',
+        init: function (cb) {
+            var wfclient = new WFAPI(app.config.wfapi, app.log);
+            wfclient.connect(function () {
+                app.log.info('wfapi is ready');
+            });
+
+            // For compatibility we still add wfapi here, but this should be
+            // removed in the future.
+            app.wfapi = wfclient;
+
+            cb(null, wfclient);
+        },
+        isAvailable: function (wfclient) {
+            return wfclient.connected;
+        }
+    });
+
+    app.connWatcher.register({
+        name: 'moray',
+        init: function (cb) {
+            var morayClient = createMorayClient(app);
+            cb(null, morayClient);
+        },
+        isAvailable: function () {
+            return app.connWatcher.connections.moray
+                && app.connWatcher.connections.moray.connection.connected;
+        }
+    });
+
+    opts = app.config.ufds;
+    opts.log = app.log;
+    createUfdsClient(app.config.ufds, function (err, ufds) {
+        if (err) {
+            app.log.error({ err: err }, 'ufds error');
+            return;
+        }
+        app.ufds = ufds;
+    });
+
+    // configure the auth caching used by the auth module (adds itself to app)
+    initAuthCache(app);
+};
+
+/**
+ * Creates a moray client, retrying as necessary
+ */
+function createMorayClient(app) {
+    assert.object(app, 'app');
+
+    var conf = {
+        connectTimeout: 1000,
+        host: app.config.moray.host,
+        noCache: true,
+        port: app.config.moray.port,
+        reconnect: true,
+        retry: {
+            retries: Infinity,
+            maxTimeout: 6000,
+            minTimeout: 100
+        }
+    };
+
+    app.log.debug(conf, 'Creating moray client');
+    conf.log = app.log.child({
+        component: 'moray',
+        level: app.config.moray.logLevel || 'info'
+    });
+    var client = moray.createClient(conf);
+
+    function onMorayConnect() {
+        client.removeListener('error', onMorayError);
+        client.log.info('moray: connected');
+        app.moray = client;
+        initMoray(app);
+
+        client.on('close', function () {
+            client.log.error('moray: closed');
+        });
+
+        client.on('connect', function () {
+            client.log.info('moray: reconnected');
+        });
+
+        client.on('error', function (err) {
+            client.log.warn(err, 'moray: error (reconnecting)');
+        });
+    }
+
+    function onMorayError(err) {
+        client.removeListener('connect', onMorayConnect);
+        client.log.error(err, 'moray: connection failed');
+    }
+
+    function onMorayConnectAttempt(number, delay) {
+        var level;
+        if (number === 0) {
+            level = 'info';
+        } else if (number < 5) {
+            level = 'warn';
+        } else {
+            level = 'error';
+        }
+        client.log[level]({
+                attempt: number,
+                delay: delay
+        }, 'moray: connection attempted');
+    }
+
+    client.once('connect', onMorayConnect);
+    client.once('error', onMorayError);
+    client.on('connectAttempt', onMorayConnectAttempt); // this we always use
+
+    return client;
+}
+
+/**
+ * Creates a UFDS client instance pointing to the UFDS server provided
+ * in options. callback will be called either with Error - cb(err) - or
+ * with the recently instantiated client object: cb(null, ufds_client)
+ */
+function createUfdsClient(options, callback) {
+    assert.object(options, 'options');
+    assert.object(options.log, 'options.log');
+    assert.func(callback, 'callback');
+
+    var ufds = new UFDS(options);
+
+    ufds.once('connect', function () {
+        ufds.removeAllListeners('error');
+        ufds.on('error', function (err) {
+            options.log.error(err, 'UFDS disconnected');
+        });
+        ufds.on('connect', function () {
+            options.log.info('UFDS reconnected');
+        });
+        callback(null, ufds);
+    });
+
+    ufds.once('error', function (err) {
+        // You are screwed. It's likely that the bind credentials were bad.
+        // Treat this as fatal and move on:
+        options.log.error({err: err}, 'UFDS connection error');
+        callback(err);
+    });
+}
+
+/**
+ * Initializes moray buckets
+ */
+function initMoray(app) {
+    var att = 1;
+    var timeout = null;
+
+    function modelInitRetry() {
+        models.init(app, function (err) {
+            if (timeout) {
+                clearTimeout(timeout);
+            }
+
+            if (!err) {
+                app.log.info('models initialized');
+                return;
+            }
+
+            app.log.error(err, 'Error initializing models (attempt=%d)', att);
+            att++;
+            timeout = setTimeout(modelInitRetry, 10000);
+        });
+    }
+
+    modelInitRetry();
+}
+
+
+/*
+ * Initializes authentication cache as a LRU cache.
+ *
+ * This cache stores mappings of login => sha512 fingerprint of the last key
+ * used by that user (as a String). If we have recently seen this user use
+ * the exact same key we avoid looking it up in UFDS again.
+ */
+function initAuthCache(app) {
+    assert.object(app, 'app');
+
+    var cacheOptions = app.config.authCache || {};
+
+    if (cacheOptions.max === undefined) {
+        cacheOptions.max = 100;
+    }
+    if (cacheOptions.maxAge === undefined) {
+        cacheOptions.maxAge = 2 * 60 * 1000;
+    }
+
+    app.authCache = LRU(cacheOptions);
+}
+
+
 // sysinfo.js
 SdcBackend.prototype.getInfo = sysinfo.getInfo;
 
@@ -79,5 +361,14 @@ SdcBackend.prototype.tagImage = images.tagImage;
 SdcBackend.prototype.buildImage = build.buildImage;
 SdcBackend.prototype.commitImage = build.commitImage;
 
+// auth.js
+SdcBackend.prototype.auth = auth.auth;
+
+// models
+SdcBackend.prototype.models = {
+    Image: Image,
+    ImageTag: ImageTag
+};
+
 
 module.exports = SdcBackend;
diff --git a/lib/models/image-tag.js b/lib/backends/sdc/models/image-tag.js
similarity index 100%
rename from lib/models/image-tag.js
rename to lib/backends/sdc/models/image-tag.js
diff --git a/lib/models/image.js b/lib/backends/sdc/models/image.js
similarity index 100%
rename from lib/models/image.js
rename to lib/backends/sdc/models/image.js
diff --git a/lib/models/index.js b/lib/backends/sdc/models/index.js
similarity index 100%
rename from lib/models/index.js
rename to lib/backends/sdc/models/index.js
diff --git a/lib/models/link.js b/lib/backends/sdc/models/link.js
similarity index 100%
rename from lib/models/link.js
rename to lib/backends/sdc/models/link.js
diff --git a/lib/moray.js b/lib/backends/sdc/moray.js
similarity index 100%
rename from lib/moray.js
rename to lib/backends/sdc/moray.js
diff --git a/lib/backends/sdc/utils.js b/lib/backends/sdc/utils.js
index 4feaa12..6a0827f 100644
--- a/lib/backends/sdc/utils.js
+++ b/lib/backends/sdc/utils.js
@@ -17,7 +17,7 @@ var triton_tags = require('triton-tags');
 
 var common = require('../../common');
 var constants = require('../../constants');
-var Link = require('../../models/link');
+var Link = require('./models/link');
 
 
 
diff --git a/lib/wfapi/index.js b/lib/backends/sdc/wfapi/index.js
similarity index 100%
rename from lib/wfapi/index.js
rename to lib/backends/sdc/wfapi/index.js
diff --git a/lib/wfapi/workflows/pull-image.js b/lib/backends/sdc/wfapi/workflows/pull-image.js
similarity index 100%
rename from lib/wfapi/workflows/pull-image.js
rename to lib/backends/sdc/wfapi/workflows/pull-image.js
diff --git a/lib/config-loader.js b/lib/config-loader.js
index f1e8be5..c54cc50 100644
--- a/lib/config-loader.js
+++ b/lib/config-loader.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -49,17 +49,19 @@ function loadConfigSync(opts) {
         }
     }
 
-    // Validation. XXX backend-specific config validation should not be here.
+    // Validation.
     assert.number(config.port, 'config.port');
     assert.number(config.defaultMemory, 'config.defaultMemory');
-    assert.string(config.packagePrefix, 'config.packagePrefix');
     assert.string(config.logLevel, 'config.logLevel');
+
+    // SDC-backend specific Validation that should be moved to backend.
     assert.object(config.cnapi, 'config.cnapi');
     assert.string(config.cnapi.url, 'config.cnapi.url');
     assert.object(config.imgapi, 'config.imgapi');
     assert.string(config.imgapi.url, 'config.imgapi.url');
     assert.object(config.napi, 'config.napi');
     assert.string(config.napi.url, 'config.papi.url');
+    assert.string(config.packagePrefix, 'config.packagePrefix');
     assert.object(config.papi, 'config.napi');
     assert.string(config.papi.url, 'config.papi.url');
     assert.object(config.vmapi, 'config.vmapi');
diff --git a/lib/docker.js b/lib/docker.js
index 2f25b34..e88c0f0 100644
--- a/lib/docker.js
+++ b/lib/docker.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
 /*
@@ -19,32 +19,22 @@ var EffluentLogger = require('effluent-logger');
 var fmt = require('util').format;
 var fs = require('fs');
 var http = require('http');
-var LRU = require('lru-cache');
-var moray = require('moray');
 var sbs = require('sdc-bunyan-serializers');
 var os = require('os');
 var path = require('path');
 var restify = require('restify');
-var UFDS = require('ufds');
+var upgrade = require('restify/lib/upgrade');
 var vasync = require('vasync');
 var verror = require('verror');
-var CNAPI = require('sdc-clients').CNAPI;
-var IMGAPI = require('sdc-clients').IMGAPI;
-var VMAPI = require('sdc-clients').VMAPI;
 
 var adminEndpoints = require('./endpoints/admin');
-var auth = require('./auth');
-var ConnectionStatusWatcher = require('./connwatcher');
 var common = require('./common');
+var configLoader = require('./config-loader');
 var constants = require('./constants');
 var endpoints = require('./endpoints');
 var errors = require('./errors');
 var hijack = require('./hijack');
-var models = require('./models');
 var SocketManager = require('./socket-manager');
-var upgrade = require('./upgrade');
-var wfapi = require('./wfapi');
-var configLoader = require('./config-loader');
 
 
 //---- globals
@@ -73,12 +63,11 @@ function App(opts) {
     var Backend = require('./backends/' + self.config.backend);
     self.backend = new Backend({log: self.log, config: self.config});
 
-    self.setupConnections();
-
-    // TODO make the other clients accessible via req.app
+    // This sets up the backend's clients and any other initialization required
+    // by the backend.
+    self.backend.init(self);
 
     self.sockets = new SocketManager({ log: self.log });
-    self.initAuthCache();
 
     if (self.config.readOnly) {
         self.log.warn(
@@ -147,7 +136,6 @@ function App(opts) {
 
         req.app = self;
         req.backend = self.backend;
-        req.wfapi = self.wfapi;
 
         next();
     });
@@ -175,111 +163,13 @@ function App(opts) {
     endpoints.register(server, self.log, [
         common.checkReadonlyMode,
         common.checkServices,
-        auth.auth(self.config, self.log),  /* sets `req.account` */
+        self.backend.auth(self.config, self.log),  /* sets `req.account` */
         common.reqClientApiVersion
     ]);
 
     self.setupAdminSever();
 }
 
-App.prototype.setupConnections = function setupConnections() {
-    var self = this;
-
-    self.connWatcher = new ConnectionStatusWatcher({
-        app: self
-    });
-
-    // Set up our dependencies
-    self.connWatcher.register({
-        name: 'cnapi',
-        init: function (cb) {
-            var cnapi = new CNAPI(self.config.cnapi);
-            cb(null, cnapi);
-        },
-        pingIntervalSecs: 10,
-        ping: function (cnapi, cb) {
-            cnapi.ping(function (err) {
-                if (err) {
-                    cb(new verror.VError(err, 'could not ping CNAPI'));
-                    return;
-                }
-                cb();
-            });
-        }
-    });
-
-    self.connWatcher.register({
-        name: 'vmapi',
-        init: function (cb) {
-            var vmapi = new VMAPI(self.config.vmapi);
-            cb(null, vmapi);
-        },
-        pingIntervalSecs: 10,
-        ping: function (vmapi, cb) {
-            vmapi.ping(function (err) {
-                if (err) {
-                    cb(new verror.VError(err, 'could not ping VMAPI'));
-                    return;
-                }
-                cb();
-            });
-        }
-    });
-
-    self.connWatcher.register({
-        name: 'imgapi',
-        init: function (cb) {
-            var imgapi = new IMGAPI(self.config.imgapi);
-            cb(null, imgapi);
-        },
-        pingIntervalSecs: 10,
-        ping: function (imgapi, cb) {
-            imgapi.ping(function (err) {
-                if (err) {
-                    cb(new verror.VError(err, 'could not ping IMGAPI'));
-                    return;
-                }
-                cb();
-            });
-        }
-    });
-
-    self.connWatcher.register({
-        name: 'wfapi',
-        init: function (cb) {
-            var wfclient = new wfapi(self.config.wfapi, self.log);
-            wfclient.connect(function () {
-                self.log.info('wfapi is ready');
-            });
-            cb(null, wfclient);
-        },
-        isAvailable: function (wfclient) {
-            return wfclient.connected;
-        }
-    });
-
-    self.connWatcher.register({
-        name: 'moray',
-        init: function (cb) {
-            var morayClient = self.createMorayClient();
-            cb(null, morayClient);
-        },
-        isAvailable: function () {
-            return self.connWatcher.connections.moray
-                && self.connWatcher.connections.moray.connection.connected;
-        }
-    });
-
-    self.createUfdsClient(self.config.ufds, function (err, ufds) {
-        if (err) {
-            self.log.error({ err: err }, 'ufds error');
-            return;
-        }
-        self.ufds = ufds;
-    });
-};
-
-
 App.prototype.setupServer = function () {
     var self = this;
 
@@ -403,105 +293,6 @@ App.prototype.close = function close(callback) {
     this.server.close();
 };
 
-/**
- * Creates a moray client, retrying as necessary
- */
-App.prototype.createMorayClient = function createMorayClient() {
-    var self = this;
-    var conf = {
-        connectTimeout: 1000,
-        host: self.config.moray.host,
-        noCache: true,
-        port: self.config.moray.port,
-        reconnect: true,
-        retry: {
-            retries: Infinity,
-            maxTimeout: 6000,
-            minTimeout: 100
-        }
-    };
-
-    self.log.debug(conf, 'Creating moray client');
-    conf.log = self.log.child({
-        component: 'moray',
-        level: self.config.moray.logLevel || 'info'
-    });
-    var client = moray.createClient(conf);
-
-    function onMorayConnect() {
-        client.removeListener('error', onMorayError);
-        client.log.info('moray: connected');
-        self.moray = client;
-        self.initMoray();
-
-        client.on('close', function () {
-            client.log.error('moray: closed');
-        });
-
-        client.on('connect', function () {
-            client.log.info('moray: reconnected');
-        });
-
-        client.on('error', function (err) {
-            client.log.warn(err, 'moray: error (reconnecting)');
-        });
-    }
-
-    function onMorayError(err) {
-        client.removeListener('connect', onMorayConnect);
-        client.log.error(err, 'moray: connection failed');
-    }
-
-    function onMorayConnectAttempt(number, delay) {
-        var level;
-        if (number === 0) {
-            level = 'info';
-        } else if (number < 5) {
-            level = 'warn';
-        } else {
-            level = 'error';
-        }
-        client.log[level]({
-                attempt: number,
-                delay: delay
-        }, 'moray: connection attempted');
-    }
-
-    client.once('connect', onMorayConnect);
-    client.once('error', onMorayError);
-    client.on('connectAttempt', onMorayConnectAttempt); // this we always use
-
-    return client;
-};
-
-/**
- * Creates a UFDS client instance pointing to the UFDS server provided
- * in options. callback will be called either with Error - cb(err) - or
- * with the recently instantiated client object: cb(null, ufds_client)
- */
-App.prototype.createUfdsClient = function (options, callback) {
-    options.log = this.log;
-    var ufds = new UFDS(options);
-
-    ufds.once('connect', function () {
-        ufds.removeAllListeners('error');
-        ufds.on('error', function (err) {
-            options.log.error(err, 'UFDS disconnected');
-        });
-        ufds.on('connect', function () {
-            options.log.info('UFDS reconnected');
-        });
-        callback(null, ufds);
-    });
-
-    ufds.once('error', function (err) {
-        // You are screwed. It's likely that the bind credentials were bad.
-        // Treat this as fatal and move on:
-        options.log.error({err: err}, 'UFDS connection error');
-        callback(err);
-    });
-};
-
 /*
  * Gets the admin IP address for the sdc-docker server
  */
@@ -522,57 +313,6 @@ App.prototype.getAdminIp = function () {
     return ip;
 };
 
-
-/**
- * Initializes moray buckets
- */
-App.prototype.initMoray = function () {
-    var self = this;
-    var att = 1;
-    var timeout = null;
-
-    function modelInitRetry() {
-        models.init(self, function (err) {
-            if (timeout) {
-                clearTimeout(timeout);
-            }
-
-            if (!err) {
-                self.log.info('models initialized');
-                return;
-            }
-
-            self.log.error(err, 'Error initializing models (attempt=%d)', att);
-            att++;
-            timeout = setTimeout(modelInitRetry, 10000);
-        });
-    }
-
-    modelInitRetry();
-};
-
-
-/*
- * Initializes authentication cache as a LRU cache.
- *
- * This cache stores mappings of login => sha512 fingerprint of the last key
- * used by that user (as a String). If we have recently seen this user use
- * the exact same key we avoid looking it up in UFDS again.
- */
-App.prototype.initAuthCache = function () {
-    var cacheOptions = this.config.authCache || {};
-
-    if (cacheOptions.max === undefined) {
-        cacheOptions.max = 100;
-    }
-    if (cacheOptions.maxAge === undefined) {
-        cacheOptions.maxAge = 2 * 60 * 1000;
-    }
-
-    this.authCache = LRU(cacheOptions);
-};
-
-
 function addFluentdHost(log, host) {
     var evtLogger = new EffluentLogger({
         filter: function _evtFilter(obj) { return (!!obj.evt); },
diff --git a/lib/endpoints/admin/image-tags.js b/lib/endpoints/admin/image-tags.js
index 2250aab..3b77e8f 100644
--- a/lib/endpoints/admin/image-tags.js
+++ b/lib/endpoints/admin/image-tags.js
@@ -5,11 +5,10 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
 var restify = require('restify');
-var ImageTag = require('../../models/image-tag');
 
 var UNSET_OWNER_UUID = '00000000-0000-0000-0000-000000000000';
 
@@ -18,7 +17,9 @@ var UNSET_OWNER_UUID = '00000000-0000-0000-0000-000000000000';
  * GET /admin/image_tags
  */
 function adminListImageTags(req, res, next) {
+    var ImageTag = req.app.backend.models.ImageTag;
     var params = {};
+
     if (req.query.owner_uuid) {
         params.owner_uuid = req.query.owner_uuid;
     }
@@ -50,7 +51,9 @@ function adminListImageTags(req, res, next) {
  * POST /admin/image_tags
  */
 function adminCreateImageTag(req, res, next) {
+    var ImageTag = req.app.backend.models.ImageTag;
     var params = req.body;
+
     if (!params.owner_uuid || params.owner_uuid === UNSET_OWNER_UUID) {
         params.owner_uuid = req.app.config.adminUuid;
     }
diff --git a/lib/endpoints/admin/images.js b/lib/endpoints/admin/images.js
index 9c2a215..a1ac2d4 100644
--- a/lib/endpoints/admin/images.js
+++ b/lib/endpoints/admin/images.js
@@ -5,11 +5,9 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
-var Image = require('../../models/image');
-
 var UNSET_OWNER_UUID = '00000000-0000-0000-0000-000000000000';
 
 
@@ -17,7 +15,9 @@ var UNSET_OWNER_UUID = '00000000-0000-0000-0000-000000000000';
  * GET /admin/images
  */
 function adminListImages(req, res, next) {
+    var Image = req.app.backend.models.Image;
     var params = {};
+
     if (req.query.owner_uuid) {
         params.owner_uuid = req.query.owner_uuid;
     }
@@ -51,6 +51,7 @@ function adminListImages(req, res, next) {
  */
 function adminCreateImage(req, res, next) {
     // XXX(trent): validate args
+    var Image = req.app.backend.models.Image;
     var params = req.body;
     if (!params.owner_uuid || params.owner_uuid === UNSET_OWNER_UUID) {
         params.owner_uuid = req.app.config.adminUuid;
diff --git a/lib/endpoints/images.js b/lib/endpoints/images.js
index 5d3f081..da914e8 100644
--- a/lib/endpoints/images.js
+++ b/lib/endpoints/images.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
 var drc = require('docker-registry-client');
@@ -112,7 +112,7 @@ function imageCreate(req, res, next) {
         req: req,
         req_id: req.getId(),
         res: res,
-        wfapi: req.wfapi,
+        wfapi: req.app.wfapi,
         account: req.account
     }, function () {
         // XXX NOTHING returned from this??? No 'err'?
diff --git a/lib/upgrade.js b/lib/upgrade.js
deleted file mode 100644
index b0c8981..0000000
--- a/lib/upgrade.js
+++ /dev/null
@@ -1,186 +0,0 @@
-// Copyright (c) 2013, Joyent, Inc. All rights reserved.
-
-/**
- * Copied from
- * https://github.com/mcavage/node-restify/blob/master/lib/upgrade.js
- */
-
-var EventEmitter = require('events').EventEmitter;
-var util = require('util');
-var assert = require('assert-plus');
-
-function InvalidUpgradeStateError(msg) {
-    if (Error.captureStackTrace)
-        Error.captureStackTrace(this, InvalidUpgradeStateError);
-
-    this.message = msg;
-    this.name = 'InvalidUpgradeStateError';
-}
-util.inherits(InvalidUpgradeStateError, Error);
-
-//
-// The Node HTTP Server will, if we handle the 'upgrade' event, swallow any
-// Request with the 'Connection: upgrade' header set.  While doing this it
-// detaches from the 'data' events on the Socket and passes the socket to
-// us, so that we may take over handling for the connection.
-//
-// Unfortunately, the API does not presently provide a http.ServerResponse
-// for us to use in the event that we do not wish to upgrade the connection.
-// This factory method provides a skeletal implementation of a
-// restify-compatible response that is sufficient to allow the existing
-// request handling path to work, while allowing us to perform _at most_ one
-// of either:
-//
-//   - Return a basic HTTP Response with a provided Status Code and
-//     close the socket.
-//   - Upgrade the connection and stop further processing.
-//
-// To determine if an upgrade is requested, a route handler would check for
-// the 'claimUpgrade' method on the Response.  The object this method
-// returns will have the 'socket' and 'head' Buffer emitted with the
-// 'upgrade' event by the http.Server.  If the upgrade is not possible, such
-// as when the HTTP head (or a full request) has already been sent by some
-// other handler, this method will throw.
-//
-function createServerUpgradeResponse(req, socket, head) {
-    return (new ServerUpgradeResponse(socket, head));
-}
-
-function ServerUpgradeResponse(socket, head) {
-    assert.object(socket, 'socket');
-    assert.buffer(head, 'head');
-
-    EventEmitter.call(this);
-
-    this.sendDate = true;
-    this.statusCode = 400;
-
-    this._upgrade = {
-        socket: socket,
-        head: head
-    };
-
-    this._headWritten = false;
-    this._upgradeClaimed = false;
-}
-util.inherits(ServerUpgradeResponse, EventEmitter);
-
-function notImplemented(method) {
-    if (!method.throws) {
-        return function () {
-            return (method.returns);
-        };
-    } else {
-        return function () {
-            throw (new Error('Method ' + method.name + ' is not '
-                + 'implemented!'));
-        };
-    }
-}
-
-var NOT_IMPLEMENTED = [
-    { name: 'writeContinue', throws: true },
-    { name: 'setHeader', throws: false, returns: null },
-    { name: 'getHeader', throws: false, returns: null },
-    { name: 'getHeaders', throws: false, returns: {} },
-    { name: 'removeHeader', throws: false, returns: null },
-    { name: 'addTrailer', throws: false, returns: null },
-    { name: 'cache', throws: false, returns: 'public' },
-    { name: 'format', throws: true },
-    { name: 'set', throws: false, returns: null },
-    { name: 'get', throws: false, returns: null },
-    { name: 'headers', throws: false, returns: {} },
-    { name: 'header', throws: false, returns: null },
-    { name: 'json', throws: false, returns: null },
-    { name: 'link', throws: false, returns: null }
-];
-NOT_IMPLEMENTED.forEach(function (method) {
-    ServerUpgradeResponse.prototype[method.name] = notImplemented(method);
-});
-
-ServerUpgradeResponse.prototype._writeHeadImpl =
-    function _writeHeadImpl(statusCode, reason) {
-        if (this._headWritten)
-            return;
-        this._headWritten = true;
-
-        if (this._upgradeClaimed)
-            throw new InvalidUpgradeStateError('Upgrade already claimed!');
-
-        var head = [
-            'HTTP/1.1 ' + statusCode + ' ' + reason,
-            'Connection: close'
-        ];
-        if (this.sendDate)
-            head.push('Date: ' + new Date().toUTCString());
-
-        this._upgrade.socket.write(head.join('\r\n') + '\r\n');
-    };
-
-ServerUpgradeResponse.prototype.status = function status(code) {
-    assert.number(code, 'code');
-    this.statusCode = code;
-    return (code);
-};
-
-ServerUpgradeResponse.prototype.send = function send(code, body) {
-    if (typeof (code) === 'number')
-        this.statusCode = code;
-    else
-        body = code;
-
-    if (typeof (body) === 'object') {
-        if (typeof (body.statusCode) === 'number')
-            this.statusCode = body.statusCode;
-        if (typeof (body.message) === 'string')
-            this.statusReason = body.message;
-    }
-
-    return (this.end());
-};
-
-ServerUpgradeResponse.prototype.end = function end() {
-    this._writeHeadImpl(this.statusCode, 'Connection Not Upgraded');
-    this._upgrade.socket.end('\r\n');
-    return (true);
-};
-
-ServerUpgradeResponse.prototype.write = function write() {
-    this._writeHeadImpl(this.statusCode, 'Connection Not Upgraded');
-    return (true);
-};
-
-ServerUpgradeResponse.prototype.writeHead =
-    function writeHead(statusCode, reason) {
-        assert.number(statusCode, 'statusCode');
-        assert.optionalString(reason, 'reason');
-
-        this.statusCode = statusCode;
-        if (!reason)
-            reason = 'Connection Not Upgraded';
-
-        if (this._headWritten)
-            throw new Error('Head already written!');
-
-        return (this._writeHeadImpl(statusCode, reason));
-    };
-
-ServerUpgradeResponse.prototype.claimUpgrade = function claimUpgrade() {
-    if (this._upgradeClaimed)
-        throw new InvalidUpgradeStateError('Upgrade already claimed!');
-
-    if (this._headWritten)
-        throw new InvalidUpgradeStateError('Upgrade already aborted!');
-
-    this._upgradeClaimed = true;
-
-    return (this._upgrade);
-};
-
-module.exports = {
-    createResponse: createServerUpgradeResponse,
-
-    InvalidUpgradeStateError: InvalidUpgradeStateError
-};
-
-// vim: set et ts=8 sts=8 sw=8:
\ No newline at end of file
