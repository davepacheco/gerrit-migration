commit 84969cd1258236d0ed0bf837bd44a33a1aa704b6 (refs/changes/99/199/4)
Author: dboldyrev <Arc3111@gmail.com>
Date:   2016-08-11T21:31:24+00:00 (3 years, 2 months ago)
    
    ADMINUI-2324 AdminUI Needs to provide a Warning when enabling/disabling Global FW Rules
    ADMINUI-2328 AdminUI delete firewall rule action should have a confirmation dialog

diff --git a/www/js/components/pages/user/firewall.jsx b/www/js/components/pages/user/firewall.jsx
index aec2c07d..f1b5ce1d 100644
--- a/www/js/components/pages/user/firewall.jsx
+++ b/www/js/components/pages/user/firewall.jsx
@@ -27,7 +27,6 @@ var UserFirewall = React.createClass({
     },
     componentWillMount: function() {
         this.fwrulesList = new FWRulesList({
-            app: adminui,
             user: this.props.user
         });
 
diff --git a/www/js/components/pages/vm/fwrules-form.hbs b/www/js/components/pages/vm/fwrules-form.hbs
index 3bbbb7c2..05ab7b3a 100644
--- a/www/js/components/pages/vm/fwrules-form.hbs
+++ b/www/js/components/pages/vm/fwrules-form.hbs
@@ -59,7 +59,7 @@
 
     <div class="form-group">
         <div class="col-sm-12">
-            <div class="checkbox">
+            <div class="checkbox enabled">
                 <label>
                     <input type="checkbox" name="enabled" value="true"> Enable this rule
                 </label>
diff --git a/www/js/components/pages/vm/fwrules-form.js b/www/js/components/pages/vm/fwrules-form.js
index be6eeb1d..73fa7a05 100644
--- a/www/js/components/pages/vm/fwrules-form.js
+++ b/www/js/components/pages/vm/fwrules-form.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
 var Backbone = require('backbone');
@@ -14,6 +14,7 @@ var adminui = require('../../../adminui');
 
 var sprintf = _.str.sprintf;
 var FWRule = require('../../../models/fwrule');
+var FWRuleWarning = require('./rule-warning');
 
 var FWRulesForm = Backbone.Marionette.ItemView.extend({
     attributes: {
@@ -23,7 +24,8 @@ var FWRulesForm = Backbone.Marionette.ItemView.extend({
     events: {
         'submit form': 'onSubmit',
         'click button[type=submit]': 'onSubmit',
-        'click button.cancel': 'onDismiss'
+        'click button.cancel': 'onDismiss',
+        'mousedown div.checkbox.enabled label': 'onRuleWarning'
     },
 
     modelEvents: {
@@ -33,7 +35,7 @@ var FWRulesForm = Backbone.Marionette.ItemView.extend({
 
     template: require('./fwrules-form.hbs'),
 
-    initialize: function(options) {
+    initialize: function (options) {
         if (!options.model) {
             this.model = new FWRule();
         }
@@ -51,7 +53,7 @@ var FWRulesForm = Backbone.Marionette.ItemView.extend({
         }
     },
 
-    onRender: function() {
+    onRender: function () {
         var data = this.model.toJSON();
         _.extend(data, this.model.tokenizeRule());
         Backbone.Syphon.deserialize(this, data);
@@ -60,7 +62,7 @@ var FWRulesForm = Backbone.Marionette.ItemView.extend({
             node.hide();
         }
     },
-    onError: function(model, xhr) {
+    onError: function (model, xhr) {
         var errors = xhr.responseData.errors;
         if (xhr.responseData.errors) {
             var messages = _.pluck(errors, 'message');
@@ -68,25 +70,40 @@ var FWRulesForm = Backbone.Marionette.ItemView.extend({
         }
     },
 
-    onShow: function() {
+    onShow: function () {
         var $el = this.$el;
-        $el.hide().slideDown(200, function() {
+        $el.hide().slideDown(200, function () {
             $el.find('input:first').focus();
         });
     },
 
-    onDismiss: function() {
+    onDismiss: function () {
         this.trigger('close');
     },
 
-    close: function() {
+    onRuleWarning: function (event) {
+        if (this.model.attributes.global) {
+            var target = event.target.control || event.target;
+            var isChecked = target.checked;
+            var action = isChecked ? 'disable' : 'enable';
+            new FWRuleWarning({
+                action: action,
+                isGlobal: true,
+                onSubmit: function () {
+                    target.checked = !isChecked;
+                }
+            }).render();
+        }
+    },
+
+    close: function () {
         var self = this;
-        this.$el.slideUp(200, function() {
+        this.$el.slideUp(200, function () {
             Backbone.Marionette.ItemView.prototype.close.call(self);
         });
     },
 
-    onSync: function(model, resp, options) {
+    onSync: function () {
         adminui.vent.trigger('notification', {
             level: 'success',
             message: "Firewall rule saved successfully."
@@ -96,7 +113,7 @@ var FWRulesForm = Backbone.Marionette.ItemView.extend({
         this.trigger('close');
     },
 
-    onSubmit: function(e) {
+    onSubmit: function (e) {
         e.preventDefault();
 
         var data = Backbone.Syphon.serialize(this);
diff --git a/www/js/components/pages/vm/fwrules-list.js b/www/js/components/pages/vm/fwrules-list.js
index 21771ecc..3521f7f4 100644
--- a/www/js/components/pages/vm/fwrules-list.js
+++ b/www/js/components/pages/vm/fwrules-list.js
@@ -5,13 +5,15 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
 var Backbone = require('backbone');
 var $ = require('jquery');
 var FWRules = require('../../../models/fwrules');
 var _ = require('underscore');
+var adminui = require('../../../adminui');
+var FWRuleWarning = require('./rule-warning');
 
 var FWRulesListItem = Backbone.Marionette.ItemView.extend({
     tagName: 'li',
@@ -22,20 +24,40 @@ var FWRulesListItem = Backbone.Marionette.ItemView.extend({
         'click .disable-rule': 'onDisableRule',
         'click .delete-rule': 'onDeleteRule'
     },
-    onEnableRule: function() {
-        this.trigger('enable:rule');
+    showRuleActionWarning: function (action) {
+        var self = this;
+        var isGlobal = this.model.attributes.global;
+        var isDeleteAction = action === 'delete';
+
+        function openWarning(doubleVerification) {
+            new FWRuleWarning({
+                action: action,
+                isGlobal: isGlobal,
+                doubleVerification: doubleVerification,
+                onSubmit: function () {
+                    doubleVerification ? openWarning(false) : self.trigger(action + ':rule');
+                }
+            }).render();
+        }
+        if (isDeleteAction || isGlobal) {
+            openWarning(isDeleteAction && isGlobal);
+            return;
+        }
+        this.trigger(action + ':rule');
     },
-    onDisableRule: function() {
-        this.trigger('disable:rule');
+    onEnableRule: function () {
+        this.showRuleActionWarning('enable');
     },
-    onDeleteRule: function() {
-        this.trigger('delete:rule');
+    onDisableRule: function () {
+        this.showRuleActionWarning('disable');
     },
-    onEditRule: function() {
+    onDeleteRule: function () {
+        this.showRuleActionWarning('delete');
+    },
+    onEditRule: function () {
         this.trigger('edit:rule');
     },
-
-    serializeData: function() {
+    serializeData: function () {
         var rule = this.model.tokenizeRule();
         var vars = this.model.toJSON();
 
@@ -55,76 +77,67 @@ var FWRulesList = require('../../../views/collection').extend({
     attributes: {
         'class': 'list-unstyled fwrules-list'
     },
-
     itemView: FWRulesListItem,
-
-    itemViewOptions: function() {
+    itemViewOptions: function () {
         return {
             emptyViewModel: this.collection
         };
     },
-
     emptyView: require('../../../views/empty').extend({
         loadingMessage: 'Loading Firewall Rules...',
         emptyMessage: 'No Firewall Rules'
     }),
-
     /**
      * Constructor
      * @param  {Object} options.vm VM object to scope fw rules
      * @param  {string} options.user User UUID to scope fw rules
      */
-    initialize: function(options) {
-        var app = this.app = options.app;
+    initialize: function (options) {
         if (options.vm) {
-            this.collection = new FWRules(null, {params: { vm_uuid: options.vm.get('uuid') }});
+            this.collection = new FWRules(null, {params: {vm_uuid: options.vm.get('uuid')}});
         } else if (options.user) {
-            this.collection = new FWRules(null, {params: { owner_uuid: options.user }});
+            this.collection = new FWRules(null, {params: {owner_uuid: options.user}});
         } else {
             this.collection = new FWRules();
         }
 
-        this.on('itemview:disable:rule', function(iv) {
-            iv.model.on('sync', function() {
-                app.vent.trigger('notification', {
-                    level: 'success',
-                    message: "Firewall rule disabled successfully."
-                });
-                this.collection.fetch({reset: true});
-            }, this);
-            iv.model.set({enabled: false});
-            iv.model.save();
-        }, this);
+        this.on('itemview:disable:rule', this.actionHandler('disable'), this);
+        this.on('itemview:enable:rule', this.actionHandler('enable'), this);
+        this.on('itemview:delete:rule', this.actionHandler('delete'), this);
+    },
+    actionHandler: function (action) {
+        var self = this;
 
-        this.on('itemview:enable:rule', function(iv) {
-            iv.model.on('sync', function() {
-                app.vent.trigger('notification', {
-                    level: 'success',
-                    message: "Firewall rule enabled successfully."
-                });
-                this.collection.fetch({reset: true});
-            }, this);
-            iv.model.set({enabled: true});
-            iv.model.save();
-        }, this);
+        var callback = function () {
+            adminui.vent.trigger('notification', {
+                level: 'success',
+                message: 'Firewall rule ' + action + 'd successfully.'
+            });
+            self.collection.fetch({reset: true});
+        };
 
-        var self = this;
-        this.on('itemview:delete:rule', function(iv) {
-            $.delete_(iv.model.url(), function(data) {
-                app.vent.trigger('notification', {
-                    level: 'success',
-                    message: "Firewall rule deleted successfully."
+        return function (rule) {
+            rule.model.on('error', function (model, res) {
+                adminui.vent.trigger('notification', {
+                    level: 'error',
+                    message: 'Failed to ' + action + ' rule: ' + res.statusText
                 });
-                self.collection.fetch({reset: true});
-            });
-        }, this);
+            }, this);
+            
+            if (action === 'delete') {
+                $.delete_(rule.model.url(), callback);
+                return;
+            }
+            rule.model.on('sync', callback, this);
+            rule.model.set({enabled: action === 'enable'});
+            rule.model.save();
+        }
     },
-
-    refresh: function() {
+    refresh: function () {
         this.collection.fetch({reset: true});
     },
 
-    onShow: function() {
+    onShow: function () {
         this.collection.fetch();
     }
 });
diff --git a/www/js/components/pages/vm/index.jsx b/www/js/components/pages/vm/index.jsx
index b62c9516..4da6618d 100644
--- a/www/js/components/pages/vm/index.jsx
+++ b/www/js/components/pages/vm/index.jsx
@@ -66,7 +66,6 @@ var VMPage = React.createClass({
     },
     componentDidMount: function () {
         this.fwrulesList = new FWRulesList({
-            app: this.props.adminui,
             vm: new VMModel({uuid: this.props.vmUuid})
         });
         this.fwrulesList.on('itemview:edit:rule', function (iv) {
diff --git a/www/js/components/pages/vm/rule-warning.hbs b/www/js/components/pages/vm/rule-warning.hbs
new file mode 100644
index 00000000..01e9a2bf
--- /dev/null
+++ b/www/js/components/pages/vm/rule-warning.hbs
@@ -0,0 +1,34 @@
+<!--
+    This Source Code Form is subject to the terms of the Mozilla Public
+    License, v. 2.0. If a copy of the MPL was not distributed with this
+    file, You can obtain one at http://mozilla.org/MPL/2.0/.
+-->
+
+<!--
+    Copyright (c) 2016, Joyent, Inc.
+-->
+
+<div class="modal-dialog">
+    <div class="modal-content">
+        <div class="modal-header">
+            <h3 class="modal-title">Warning: {{titleAction}} firewall rule</h3>
+        </div>
+        <div class="modal-body">
+            {{#if isGlobalAction}}
+                <p class="alert alert-warning">
+                    You are attempting to {{action}} a Global firewall rule.
+                    This action will immediately affect ALL VM's with firewall enabled in this data center.
+                    Are you sure you want to do this?
+                </p>
+            {{else}}
+                <p class="alert alert-warning">
+                    Are you sure you want to {{action}} this rule?
+                </p>
+            {{/if}}
+        </div>
+        <div class="modal-footer">
+            <button class="btn" data-dismiss="modal">No</button>
+            <button class="btn btn-danger" data-dismiss="modal" type="submit">Yes</button>
+        </div>
+    </div>
+</div>
diff --git a/www/js/components/pages/vm/rule-warning.js b/www/js/components/pages/vm/rule-warning.js
new file mode 100644
index 00000000..bd87a6de
--- /dev/null
+++ b/www/js/components/pages/vm/rule-warning.js
@@ -0,0 +1,48 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2016, Joyent, Inc.
+ */
+
+var Backbone = require('backbone');
+
+var firewallWarning = Backbone.Marionette.ItemView.extend({
+    template: require('./rule-warning.hbs'),
+    id: 'rule-warning',
+    attributes: {
+        'class': 'modal'
+    },
+    events: {
+        'click button[type=submit]': 'onSubmit'
+    },
+
+    initialize: function (options) {
+        this.action = options.action;
+        this.isGlobal = options.isGlobal;
+        this.doubleVerification = options.doubleVerification;
+        this.onSubmit = options.onSubmit;
+    },
+
+    serializeData: function () {
+        var titleAction = this.action[0].toUpperCase() + this.action.substr(1);
+        if (this.isGlobal) {
+            titleAction += ' global';
+        }
+        return {
+            'action': this.action,
+            'titleAction': titleAction,
+            'isGlobalAction': !this.doubleVerification && this.isGlobal
+        };
+    },
+
+    onRender: function () {
+        this.$el.modal().on('hidden', this.remove.bind(this));
+        this.$el.modal('show');
+    }
+});
+
+module.exports = firewallWarning;
