From a90606f584217dcc30a31bc175915e9ed7e8488e Mon Sep 17 00:00:00 2001
From: Kody A Kantor <kody.kantor@gmail.com>
Date: Mon, 15 May 2017 19:12:22 +0000
Subject: [PATCH] Initial commit of metric client prototype with support for
 counters.

---
 README.adoc          |   1 +
 lib/collector.js     |  98 +++++++++++++++++++++++++++
 lib/counter.js       |  71 ++++++++++++++++++++
 lib/index.js         |   8 ---
 lib/metric.js        |  38 +++++++++++
 lib/metric_vector.js | 155 +++++++++++++++++++++++++++++++++++++++++++
 lib/utils.js         |  57 ++++++++++++++++
 package.json         |   6 +-
 test/main.js         |  28 ++++++++
 9 files changed, 451 insertions(+), 11 deletions(-)
 create mode 100644 lib/collector.js
 create mode 100644 lib/counter.js
 delete mode 100644 lib/index.js
 create mode 100644 lib/metric.js
 create mode 100644 lib/metric_vector.js
 create mode 100644 lib/utils.js
 create mode 100644 test/main.js

diff --git a/README.adoc b/README.adoc
index fd0abd1..2e0d187 100644
--- a/README.adoc
+++ b/README.adoc
@@ -7,6 +7,7 @@
 # artedi
 
 ## About
+Don't use this library! It's a highly experimental prototype.
 
 `artedi` is a node.js library for measuring fish -- specifically, the fish
 being the services involved in Manta, the Triton Object Store.
diff --git a/lib/collector.js b/lib/collector.js
new file mode 100644
index 0000000..9032ac4
--- /dev/null
+++ b/lib/collector.js
@@ -0,0 +1,98 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+var assert = require('assert-plus');
+
+var utils = require('./utils');
+var mod_counter = require('./counter');
+
+/*
+ * The Collector object acts as a mostly dumb parent. It doesn't hold metrics,
+ * but it does hold a list of all child metric collectors.
+ *
+ * When the user creates child collectors from this parent collector (by
+ * calling collector.counter(), collector.gauge(), etc.), this object
+ * will create a child collector and then register it.
+ *
+ * Registration serves two purposes:
+ * 1) It gives the user the ability to call collector.collect() to retrieve
+ *      parseable metrics from ALL child collectors without explicitly
+ *      calling the collect() function on each child collector.
+ * 2) It persists child collector objects in memory. Collectors keep all of
+ *      their metrics in memory, so to avoid having collectors garbage collected
+ *      we will place them in a map. When the user creates a child collector
+ *      for the first time (a counter, for example), this object will invoke
+ *      the constructor for that collector type to create a new collector.
+ *      Now let's say that the user's program dereferences that collector. This
+ *      object will hold on to the counter so when the user tries to create
+ *      the same counter again (they re-entered the same function as when they
+ *      first created the counter), we can simply return the counter that has
+ *      already been created without having lost any important metrics.
+ *
+ */
+function Collector(options) {
+    assert.object(options, 'options');
+    assert.string(options.namespace, 'options.namespace');
+
+    this.namespace = options.namespace;
+    this.registry = {};
+}
+
+/*
+ * The user calls collector.counter(opts) to create a 'child' counter
+ * object from the 'parent' collector object.
+ *
+ */
+Collector.prototype.counter = function counter(options) {
+    var fullName = utils.createFullName(this, options);
+    var counter = this.getCollector(fullName);
+    if (counter === null) {
+        counter = new mod_counter.Counter(this, options);
+        this.register(counter);
+    }
+    return counter;
+}
+
+Collector.prototype.register = function register(collector) {
+    this.registry[collector.fullName] = collector;
+}
+
+Collector.prototype.getCollector = function getCollector(name) {
+    if (! (name in this.registry)) {
+        return null;
+    }
+    return this.registry[name];
+}
+
+/*
+ * We will tell each collector that is a child of this collector to produce
+ * machine-readable output that we can report back to whatever is scraping
+ * this process.
+ *
+ * For example, if this collector has two child collectors (a CounterVec and
+ * a Histogram), this instructs each to produce prometheus-style output and
+ * returns it to the caller.
+ */
+Collector.prototype.collect = function collect(cb) {
+    assert.func(cb, 'callback');
+
+    var str = "";
+    // TODO Use node-vasync to parallelize?
+    for (collector in this.registry) {
+        this.registry[collector].prometheus(function (metricString) {
+            str += metricString;
+        });
+    }
+    cb(str);
+}
+
+module.exports = {
+    createCollector: function createCollector(options) {
+        return new Collector(options);
+    }
+}
diff --git a/lib/counter.js b/lib/counter.js
new file mode 100644
index 0000000..7f5f5e9
--- /dev/null
+++ b/lib/counter.js
@@ -0,0 +1,71 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+var assert = require('assert-plus');
+
+var utils = require('./utils');
+var metric_vector = require('./metric_vector');
+
+/*
+ * This object is primarily a pass-through to lower layers. The value here
+ * is that we can choose what functions to expose (add()/increment()), and
+ * restrict the user from calling other functions (observe()/decrement()).
+ */
+function Counter(from, options) {
+    assert.object(options, 'options');
+    assert.string(options.name, 'options.name');
+    assert.string(options.help, 'options.help');
+//    assert.arrayOfString(options.labels, 'options.labels');
+
+    // Create a full metric name that looks
+    // like 'muskie_audit_requests_completed'.
+    this.fullName = utils.createFullName(from, options);
+    this.metricVec = new metric_vector.MetricVector({
+        name: this.fullName,
+        help: options.help,
+        type: 'counter'
+    });
+}
+
+/*
+ * Take the given metric object, and add 1 to it's value.
+ */
+Counter.prototype.increment = function increment(metric) {
+    this.add(1, metric);
+}
+
+/*
+ * Take the given metric object, and add 'value' to it.
+ */
+Counter.prototype.add = function add(value, metric) {
+    assert.object(metric, 'metric');
+    assert.number(value, 'value');
+    if (value < 1) {
+        throw new verror.VError(metric, 'adding negative values to counters' +
+                'is not allowed:', value);
+    }
+    // Call the add() on the Metric object.
+    metric.add(value);
+}
+
+// Returns a Metric type
+Counter.prototype.labels = function labels(labels) {
+    // TODO Check inputs.
+    return this.metricVec.createOrGetWithLabels(labels);
+}
+
+/*
+ * Pass through to the metric vector function
+ */
+Counter.prototype.prometheus = function prometheus(cb) {
+    this.metricVec.prometheus(cb);
+}
+
+module.exports = {
+    Counter: Counter
+};
diff --git a/lib/index.js b/lib/index.js
deleted file mode 100644
index b22916b..0000000
--- a/lib/index.js
+++ /dev/null
@@ -1,8 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- *
- * Copyright (c) 2017, Joyent, Inc.
- */
-
diff --git a/lib/metric.js b/lib/metric.js
new file mode 100644
index 0000000..79974f1
--- /dev/null
+++ b/lib/metric.js
@@ -0,0 +1,38 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+var assert = require('assert-plus');
+
+/*
+ * Basic building block for counters and gauges.
+ * This object exposes the basic functionality of metrics, like
+ * add(), subtract(), and observe(). The higher layers (counters, gauges,
+ * summaries, histograms) will wrap these functions and restrict access
+ * to only the functions that are supported by the collector type (for example,
+ * counters can only call add() while gauges can call either add() or subtract()
+ * but not observe()).
+ */
+function Metric(options) {
+    assert.object(options, 'options');
+    this.labels = options.labels || {};
+    this.value = 0;
+    this.timestamp = 0;
+}
+
+Metric.prototype.add = function add(num) {
+    assert.number(num, 'num');
+    // TODO Apparently prometheus doesnt' like this timestamp format.
+    this.timestamp = Math.floor(new Date() / 1000);
+
+    //TODO check that value >= 1
+    this.value += num;
+}
+
+module.exports = {
+    Metric: Metric
+};
diff --git a/lib/metric_vector.js b/lib/metric_vector.js
new file mode 100644
index 0000000..00c3e24
--- /dev/null
+++ b/lib/metric_vector.js
@@ -0,0 +1,155 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+var assert = require('assert-plus');
+var mod_metric = require('./metric');
+var utils = require('./utils');
+
+
+/*
+ * MetricVectors are used to keep track of multiple metrics in one object.
+ * This is useful when the collector type can handle multiple label key/value
+ * pairs. A good example of this is counting web requests, and metering them
+ * based on method, and return code. There will be many different values for
+ * both 'method' and 'return code', but they are logically the same metric, so
+ * we can use metric vectors to accomplish that abstraction.
+ *
+ */
+function MetricVector(opts) {
+    assert.string(opts.name, 'opts.name');
+    assert.string(opts.help, 'opts.help');
+
+    this.fullName = opts.name;
+    this.help = opts.help;
+    this.metrics = {};
+}
+
+MetricVector.prototype.getWithLabels = function getWithLabels(labels) {
+    var lhash = utils.hashObj(labels);
+    return this.metrics[lhash] || null;
+}
+
+// TODO Make sure something doesn't already exist before we overwrite it.
+// Possibly return an error in a callback?
+MetricVector.prototype.createWithLabels = function createWithLabels(labels) {
+    var lhash = utils.hashObj(labels);
+    this.metrics[lhash] = new mod_metric.Metric({labels: labels});
+    return this.metrics[lhash];
+}
+
+MetricVector.prototype.createOrGetWithLabels = function createOrGetWithLabels(labels) {
+    var met = this.getWithLabels(labels);
+    // TODO Is this the proper way to check here, or can we just check null?
+    if (typeof met !== 'undefined' && met !== null) {
+        return met;
+    }
+    return this.createWithLabels(labels);
+}
+
+/*
+ * Serialize this object into the format of prometheus metrics.
+ * For example:
+ *
+ * # HELP muskie_audit_requests_completed count of muskie requests completed
+ * # TYPE muskie_audit_requests_completed counter
+ * muskie_audit_requests_completed{method="getmetrics",code="200"} 505
+ * muskie_audit_requests_completed{method="getstorage",code="404"} 1
+ * muskie_audit_requests_completed{method="headstorage",code="200"} 3
+ * muskie_audit_requests_completed{method="getstorage",code="200"} 1
+ * muskie_audit_requests_completed{method="putobject",code="204"} 33
+ * muskie_audit_requests_completed{method="putdirectory",code="204"} 173
+ * muskie_audit_requests_completed{method="putdirectory",code="403"} 1
+ *
+ * TODO make this general (currently coded only for counters).
+ * TODO figure out why timestamps aren't working.
+ */
+MetricVector.prototype.prometheus = function prometheus(cb) {
+    assert.func(cb, 'callback');
+
+    var str = '';
+    str += '# HELP ' + this.fullName + ' ' + this.help + '\n';
+    str += '# TYPE ' + this.fullName + ' counter\n';
+
+    // TODO O(M*N) - make faster?
+    for (var metric in this.metrics) {
+        // Append the labels and their values.
+        str += this.fullName + '{';
+        for(label in this.metrics[metric]['labels']) {
+            str += label + '="' + this.metrics[metric]['labels'][label] +'",';
+        }
+        str = str.substring(0, str.length-1); // Chop off the dangling ','
+        str += '} ';
+        str += this.metrics[metric].value + '\n';
+        //str += this.metrics[metric].timestamp + '\n';
+    }
+    cb(str);
+}
+
+
+/*
+ * Serialize the MetricVector into a consumable JSON object.
+ * The JSON object should look something like this:
+ * {
+ *  "muskie_audit_requests_completed": [
+ *      {
+ *          "method": "getObject",
+ *          "code": 200,
+ *          "count": 3
+ *      },
+ *      {
+ *          "method": "getObject",
+ *          "code": 404,
+ *          "count": 321
+ *      }
+ *  ]
+ *  }
+ *
+ * Then you could conceivably merge multiple MetricVectors by, say, calling
+ * .json() on the parent-most Collector to get something you could stich
+ * together into this:
+ * {
+ *  "muskie_audit_requests_completed": [
+ *      {
+ *          "method": "getObject",
+ *          "code": 200,
+ *          "count": 3
+ *      },
+ *      {
+ *          "method": "getObject",
+ *          "code": 404,
+ *          "count": 321
+ *      }
+ *  ],
+ *  "muskie_cueball_errors": [
+ *      {
+ *          "error_name": "ECONNRESET",
+ *          "hostname": "1.nameservice.manta",
+ *          "count": 6021
+ *      },
+ *      {
+ *          "error_name": "ECONNRESET",
+ *          "hostname": "3.nameservice.manta",
+ *          "count": 3
+ *      }
+ *  ]
+ * }
+ *
+ */
+MetricVector.prototype.json = function json() {
+    for (var key in this.metrics) {
+        for (var key1 in this.metrics[key]) {
+            if (this.metrics[key].hasOwnProperty(key1)) {
+                console.log(key1 + ' -> ' + this.metrics[key][key1]);
+            }
+        }
+    }
+}
+
+module.exports = {
+    MetricVector: MetricVector
+};
diff --git a/lib/utils.js b/lib/utils.js
new file mode 100644
index 0000000..4252c7b
--- /dev/null
+++ b/lib/utils.js
@@ -0,0 +1,57 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+function createFullName(from, options) {
+    return from.namespace + '_' + options.subsystem + '_' + options.name;
+}
+
+// callback?
+function merge(opts1, opts2) {
+    var concat = {};
+
+    var doMerge = function (obj) {
+        var fieldNames = Object.keys(obj);
+        var name;
+        for (var i = 0; i < fieldNames.length; i++) {
+            name = fieldNames[i];
+            concat[name] = obj[name];
+        }
+    }
+
+    doMerge(opts1);
+    doMerge(opts2);
+
+    return concat;
+}
+
+/*
+ * hackey hash function (from prom-client repo)
+ * Result for input like this:
+ *  {
+ *   'method': 'getobj',
+ *   'code': 200
+ *  }
+ *  looks like this:
+ *  'method:getobj,code:200'
+ *  Do we need to add in the object's fullName field as well?
+ */
+function hashObj(obj) {
+    var keys = Object.keys(obj);
+    keys = keys.sort();
+    var elems = [];
+    for(var i = 0; i < keys.length; i++) {
+        elems.push(keys[i] + ':' + obj[keys[i]]);
+    }
+    return elems.join(',');
+}
+
+module.exports = {
+    hashObj: hashObj,
+    merge: merge,
+    createFullName: createFullName
+}
diff --git a/package.json b/package.json
index 5d1189a..e91bb5d 100644
--- a/package.json
+++ b/package.json
@@ -2,13 +2,13 @@
   "name": "artedi",
   "version": "0.1.0",
   "description": "measuring fish",
-  "main": "lib/index.js",
+  "main": "lib/collector.js",
   "dependencies": {
-    "assert-plus": ">=1.0.0 <2.0.0",
+    "assert-plus": "1.0.0",
     "bunyan": ">=1.5.1 <2.0.0",
     "mooremachine": ">=2.1.0 <3.0.0",
     "vasync": ">=1.6.3 <2.0.0",
-    "verror": ">=1.6.1 <2.0.0"
+    "verror": "1.10.0"
   },
   "optionalDependencies": {
     "dtrace-provider": "~0.8"
diff --git a/test/main.js b/test/main.js
new file mode 100644
index 0000000..517e72d
--- /dev/null
+++ b/test/main.js
@@ -0,0 +1,28 @@
+var artedi = require('..');
+
+// make a parent 'collector', then call '.counter()' on that to inherit properties
+var collector = artedi.createCollector({
+    namespace: 'muskie',
+});
+var cv = collector.counter({
+    subsystem: 'audit',
+    name: 'requests_completed',
+    help: 'count of muskie requests completed'
+});
+
+cv.increment(cv.labels({
+    'method': 'getObj',
+    'code': '200'
+}));
+
+for(var i = 0; i < 10000; i++) {
+    cv.add(3000, cv.labels({
+        'method': 'getObj',
+        'code': '200'
+    }));
+}
+
+var out = collector.collect(function (str) {
+    console.log('metrics:\n', str);
+});
+
-- 
2.21.0

