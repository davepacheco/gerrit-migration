commit 79f44afabaa4268e61f30b4aaabe671af96a3afb (refs/changes/95/4395/1)
Author: Orlando Vazquez <ovazquez@gmail.com>
Date:   2018-06-20T13:16:10-07:00 (1 year, 4 months ago)
    
    TRITON-529 CNAPI should collect and periodically batch updates recording `last_heartbeat` times

diff --git a/lib/app.js b/lib/app.js
index 3edde1c..c12b519 100644
--- a/lib/app.js
+++ b/lib/app.js
@@ -369,13 +369,14 @@ App.prototype.setupServerHeartbeatTimeouts = function () {
                 return;
             }
 
-            // For every server, set a timeout using
-            // self.onServerHeartbeatTimeoutExpired
-            async.forEach(
-                servers,
-                function (server) {
-                    self.refreshServerHeartbeatTimeout(server.uuid);
-                });
+            // Start a timer to periodically batch write server
+            // `last_heartbeat` values.
+            self.resetPeriodicLastHeartbeatTimer();
+
+            // Start a timer for each server
+            servers.forEach(function (server) {
+                self.refreshServerHeartbeatTimeout(server.uuid);
+            });
         });
     }
 };
@@ -397,6 +398,51 @@ App.prototype.refreshServerHeartbeatTimeout = function (uuid) {
 };
 
 
+App.prototype.resetPeriodicLastHeartbeatTimer =
+function AppResetPeriodicLastHeartbeatTimer() {
+    var self = this;
+    self.periodicLastHeartbeatUpdateTimer =
+        setTimeout(function () {
+            // re-schedule the timer
+            self.resetPeriodicLastHeartbeatTimer();
+
+            self.onPeriodicLastHeartbeatUpdate();
+        }, common.HEARTBEATER_PERIOD * 1000);
+};
+
+
+App.prototype.onPeriodicLastHeartbeatUpdate =
+function AppOnPeriodicLastHeartbeatUpdate() {
+    var self = this;
+    var moray = self.getMoray();
+    var uuids = Object.keys(ModelServer.heartbeatByServerUuid);
+
+    var data = uuids.map(function (uuid) {
+        return {
+            bucket: buckets.status.name,
+            key: uuid,
+            value: ModelServer.heartbeatByServerUuid[uuid]
+        };
+    });
+
+    moray.batch(data, function (err, meta) {
+        if (err) {
+            var verr = new VError(err, 'batch last_heartbeat update failed');
+            self.log.error({ err: verr,  meta: meta },
+                'failed to batch write last_heartbeat data to moray');
+            return;
+        }
+
+        ModelServer.heartbeatByServerUuid = {};
+
+        self.log.trace('batch wrote %d objects to %s',
+            data.length,
+            buckets.status.name);
+    });
+};
+
+
+
 App.prototype.setupWaitlistDirector = function () {
     var self = this;
 
diff --git a/lib/models/server.js b/lib/models/server.js
index 016fb62..935a1fd 100644
--- a/lib/models/server.js
+++ b/lib/models/server.js
@@ -1153,95 +1153,10 @@ ModelServer.prototype.onHeartbeat = function () {
         ModelServer.heartbeatByServerUuid = {};
     }
 
-    if (!ModelServer.heartbeatByServerUuid[uuid]) {
-        ModelServer.heartbeatByServerUuid[uuid] = {};
-    }
-
-    var heartbeat = {
+    ModelServer.heartbeatByServerUuid[uuid] = {
         server_uuid: uuid,
         last_heartbeat: (new Date()).toISOString()
     };
-
-    // Check if we are still processing a heartbeat for this server: When we
-    // begin processing a heartbeat we check if this value is set. If it is, we
-    // override the `next` value and return. In this way we avoid having
-    // multiple concurrent writes to moray for single server.
-
-    if (ModelServer.heartbeatByServerUuid[uuid].current) {
-        ModelServer.heartbeatByServerUuid[uuid].next = heartbeat;
-        self.log.warn('already writing heartbeat from %s @ %s', uuid,
-        ModelServer.heartbeatByServerUuid[uuid].current.last_heartbeat);
-
-        if (ModelServer.heartbeatByServerUuid[uuid].timeout) {
-            clearTimeout(ModelServer.heartbeatByServerUuid[uuid].timeout);
-            writeNext();
-        } else {
-            resetTimeout();
-        }
-
-        return;
-    } else {
-        ModelServer.heartbeatByServerUuid[uuid] = {
-            current: heartbeat
-        };
-    }
-
-    // Set a timeout to clear the `current` value. If it is not set, we set a
-    // timeout to clear it. The reason for the timeout is do not end up stuck
-    // in this state (and end up ignoring future heartbeats).
-    resetTimeout();
-
-    doPut();
-
-    function doPut() {
-        ModelServer.getMoray().putObject(
-            buckets.status.name,
-            self.uuid,
-            heartbeat,
-            function (error) {
-                if (error) {
-                    self.log.error(error, 'modifying server last_heartbeat');
-                }
-
-                // If `.next` is set for this server once we've written the
-                // value to moray, it means we have a new heartbeat staged for
-                // writing into moray. If not set, do nothing, wait for next
-                // heartbeat to come in as usual.
-                if (ModelServer.heartbeatByServerUuid[uuid].next) {
-                    writeNext();
-                    return;
-                } else {
-                    clearTimeout(
-                        ModelServer.heartbeatByServerUuid[uuid].timeout);
-                    ModelServer.heartbeatByServerUuid[uuid] = {};
-                }
-            });
-    }
-
-
-    return;
-
-    function resetTimeout() {
-        clearTimeout(ModelServer.heartbeatByServerUuid[uuid].timeout);
-        ModelServer.heartbeatByServerUuid[uuid].timeout =
-            setTimeout(function () {
-                self.log.warn('firing heartbeatByServer timeout for %s');
-                // write the "next" heartbeat
-                writeNext();
-            }, common.HEARTBEATER_PERIOD * 2 * 1000);
-    }
-
-    function writeNext() {
-        if (!ModelServer.heartbeatByServerUuid[uuid].next) {
-            self.log.warn('onHeartbeat/writeNext called but .next not set');
-            return;
-        }
-
-        var nextHb = ModelServer.heartbeatByServerUuid[uuid].next;
-        delete ModelServer.heartbeatByServerUuid[uuid].next;
-        ModelServer.heartbeatByServerUuid[uuid].current = nextHb;
-        doPut();
-    }
 };
 
 
diff --git a/package.json b/package.json
index 6b55537..905b83f 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "cnapi",
   "description": "SmartDataCenter Compute Node API",
-  "version": "1.10.0",
+  "version": "1.10.1",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
