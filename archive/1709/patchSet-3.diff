From cb0aad5ec95bf76dbc60b0beb7550d6dcdf2c348 Mon Sep 17 00:00:00 2001
From: Jason King <jason.king@joyent.com>
Date: Wed, 22 Mar 2017 17:25:00 -0500
Subject: [PATCH] NET-370 Portolan should log less verbosely Reviewed by: Cody
 Peter Mello <cody.mello@joyent.com> Approved by: Cody Peter Mello
 <cody.mello@joyent.com>

---
 lib/parser.js    |  4 ++--
 lib/serialize.js | 14 +++++++-------
 package.json     |  2 +-
 3 files changed, 10 insertions(+), 10 deletions(-)

diff --git a/lib/parser.js b/lib/parser.js
index 108700b..b2193bd 100644
--- a/lib/parser.js
+++ b/lib/parser.js
@@ -105,7 +105,7 @@ SVPparser.prototype._transform =
         payload = mod_types.parser.readData([
             { body: { type: opInfo.type } } ],
             msg.svp_buf, mod_types.sizeof.SVP_REQ);
-        log.debug({ body: payload.body }, 'message body');
+        log.trace({ body: payload.body }, 'message body');
     }
 
     var rec = {
@@ -253,7 +253,7 @@ SVPparser.prototype._transform =
             return;
     }
 
-    log.debug({ rec: rec }, 'parser: record');
+    log.trace({ rec: rec }, 'parser: record');
     this.push(rec);
     return callback();
 };
diff --git a/lib/serialize.js b/lib/serialize.js
index 1500b08..fd9387b 100644
--- a/lib/serialize.js
+++ b/lib/serialize.js
@@ -126,7 +126,7 @@ SVPserializer.prototype._transform =
 
                 var svpLogType = types.svp_log_type[datum.record.type];
 
-                log.debug({datum: datum}, 'datum to serialize');
+                log.trace({datum: datum}, 'datum to serialize');
 
                 // common initial section
                 var record = [
@@ -170,7 +170,7 @@ SVPserializer.prototype._transform =
             break;
 
         case types.svp_op.SVP_R_LOG_RM:
-            log.debug({ ids: msg.svp_msg.rr_ids }, 'LOG_RM requested');
+            log.trace({ ids: msg.svp_msg.rr_ids }, 'LOG_RM requested');
             fixedPart = [
                 msg.svp_msg.rr_count
             ];
@@ -190,7 +190,7 @@ SVPserializer.prototype._transform =
             });
             bufSize += arrPart.length * 16;
 
-            log.debug({ arrPart: arrPart }, 'log_rr ids');
+            log.trace({ arrPart: arrPart }, 'log_rr ids');
             break;
 
         case types.svp_op.SVP_R_LOG_RM_ACK:
@@ -221,7 +221,7 @@ SVPserializer.prototype._transform =
 
     buf = new Buffer(bufSize);
 
-    log.debug({ bufData: bufData, arrPart: arrPart,
+    log.trace({ bufData: bufData, arrPart: arrPart,
         bufSize: bufSize, opInfo: opInfo },
         'serialized values');
 
@@ -234,7 +234,7 @@ SVPserializer.prototype._transform =
         var element = arrPart[i];
         var offset = element.offset;
         delete element.offset; // can't be there for writeData()
-        log.debug({ element: element, offset: offset },
+        log.trace({ element: element, offset: offset },
             'writing array element');
         types.parser.writeData([element], buf, offset);
     }
@@ -248,7 +248,7 @@ SVPserializer.prototype._transform =
      * didn't have to hardcode this or even better, a partial update.
      */
     crc32 = mod_crc.crc32_calc(buf);
-    log.debug({ msg: msg, crc: crc32 }, 'serialized calculated crc');
+    log.trace({ msg: msg, crc: crc32 }, 'serialized calculated crc');
     buf[0xc] = (crc32 & 0xff000000) >>> 24;
     buf[0xd] = (crc32 & 0x00ff0000) >>> 16;
     buf[0xe] = (crc32 & 0x0000ff00) >>> 8;
@@ -256,7 +256,7 @@ SVPserializer.prototype._transform =
 
     if (msg.svp_type === types.svp_op.SVP_R_LOG_ACK
         || msg.svp_type === types.svp_op.SVP_R_LOG_RM_ACK) {
-        log.debug({ buf: buf }, 'wrote a buffer');
+        log.trace({ buf: buf }, 'wrote a buffer');
     }
 
     this.push(buf);
diff --git a/package.json b/package.json
index 19cc89b..e20c394 100644
--- a/package.json
+++ b/package.json
@@ -6,7 +6,7 @@
     "private": true,
     "dependencies": {
         "assert-plus": "0.1.5",
-        "bunyan": "1.2.3",
+        "bunyan": "1.8.9",
         "clone": "1.0.0",
         "cmdln": "3.0.1",
         "ctype": "0.5.3",
-- 
2.21.0

