commit da9f745d8aa7fa3ef07a207f86d81a2d3e09292a (refs/changes/43/3143/4)
Author: Jerry Jelinek <jerry.jelinek@joyent.com>
Date:   2017-12-29T16:55:26+00:00 (1 year, 9 months ago)
    
    OS-6538 lxbrand: most restartable syscalls not handled correctly

diff --git a/usr/src/lib/brand/lx/lx_brand/Makefile.com b/usr/src/lib/brand/lx/lx_brand/Makefile.com
index b6df493517..e57436e127 100644
--- a/usr/src/lib/brand/lx/lx_brand/Makefile.com
+++ b/usr/src/lib/brand/lx/lx_brand/Makefile.com
@@ -21,7 +21,7 @@
 #
 # Copyright 2006 Sun Microsystems, Inc.  All rights reserved.
 # Use is subject to license terms.
-# Copyright 2017 Joyent, Inc.
+# Copyright 2018 Joyent, Inc.
 #
 
 LX_CMN  =	$(SRC)/common/brand/lx
@@ -34,7 +34,6 @@ COBJS	=	capabilities.o		\
 		debug.o			\
 		dir.o			\
 		file.o			\
-		fcntl.o			\
 		fork.o			\
 		lx_brand.o		\
 		misc.o			\
diff --git a/usr/src/lib/brand/lx/lx_brand/common/fcntl.c b/usr/src/lib/brand/lx/lx_brand/common/fcntl.c
deleted file mode 100644
index 4796d68855..0000000000
--- a/usr/src/lib/brand/lx/lx_brand/common/fcntl.c
+++ /dev/null
@@ -1,88 +0,0 @@
-/*
- * CDDL HEADER START
- *
- * The contents of this file are subject to the terms of the
- * Common Development and Distribution License (the "License").
- * You may not use this file except in compliance with the License.
- *
- * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
- * or http://www.opensolaris.org/os/licensing.
- * See the License for the specific language governing permissions
- * and limitations under the License.
- *
- * When distributing Covered Code, include this CDDL HEADER in each
- * file and include the License file at usr/src/OPENSOLARIS.LICENSE.
- * If applicable, add the following below this CDDL HEADER, with the
- * fields enclosed by brackets "[]" replaced with your own identifying
- * information: Portions Copyright [yyyy] [name of copyright owner]
- *
- * CDDL HEADER END
- */
-
-/*
- * Copyright 2007 Sun Microsystems, Inc.  All rights reserved.
- * Use is subject to license terms.
- * Copyright 2016 Joyent, Inc.
- */
-
-#include <sys/types.h>
-#include <sys/filio.h>
-#include <unistd.h>
-#include <fcntl.h>
-#include <stropts.h>
-#include <libintl.h>
-#include <errno.h>
-#include <string.h>
-#include <sys/stat.h>
-
-#include <sys/lx_fcntl.h>
-#include <sys/lx_debug.h>
-#include <sys/lx_misc.h>
-#include <sys/lx_syscall.h>
-
-/*
- * flock() applies or removes an advisory lock on the file
- * associated with the file descriptor fd.
- *
- * operation is: LX_LOCK_SH, LX_LOCK_EX, LX_LOCK_UN, LX_LOCK_NB
- */
-long
-lx_flock(uintptr_t p1, uintptr_t p2)
-{
-	int			fd = (int)p1;
-	int			operation = (int)p2;
-	struct flock		fl;
-	int			cmd;
-	int			ret;
-
-	if (operation & LX_LOCK_NB) {
-		cmd = F_FLOCK;
-		operation &= ~LX_LOCK_NB; /* turn off this bit */
-	} else {
-		cmd = F_FLOCKW;
-	}
-
-	switch (operation) {
-		case LX_LOCK_UN:
-			fl.l_type = F_UNLCK;
-			break;
-		case LX_LOCK_SH:
-			fl.l_type = F_RDLCK;
-			break;
-		case LX_LOCK_EX:
-			fl.l_type = F_WRLCK;
-			break;
-		default:
-			return (-EINVAL);
-	}
-
-	fl.l_whence = 0;
-	fl.l_start = 0;
-	fl.l_len = 0;
-	fl.l_sysid = 0;
-	fl.l_pid = 0;
-
-	ret = fcntl(fd, cmd, &fl);
-
-	return ((ret == -1) ? -errno : ret);
-}
diff --git a/usr/src/lib/brand/lx/lx_brand/common/lx_brand.c b/usr/src/lib/brand/lx/lx_brand/common/lx_brand.c
index 54eebfdefc..9f065ecb1c 100644
--- a/usr/src/lib/brand/lx/lx_brand/common/lx_brand.c
+++ b/usr/src/lib/brand/lx/lx_brand/common/lx_brand.c
@@ -25,7 +25,7 @@
  */
 
 /*
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 #include <sys/types.h>
@@ -1088,7 +1088,7 @@ static lx_syscall_handler_t lx_handlers[] = {
 	lx_msgrcv,			/*  70: msgrcv */
 	lx_msgctl,			/*  71: msgctl */
 	NULL,				/*  72: fcntl */
-	lx_flock,			/*  73: flock */
+	NULL,				/*  73: flock */
 	lx_fsync,			/*  74: fsync */
 	lx_fdatasync,			/*  75: fdatasync */
 	lx_truncate,			/*  76: truncate */
@@ -1235,7 +1235,7 @@ static lx_syscall_handler_t lx_handlers[] = {
 	NULL,				/* 217: getdents64 */
 	NULL,				/* 218: set_tid_address */
 	NULL,				/* 219: restart_syscall */
-	lx_semtimedop,			/* 220: semtimedop */
+	NULL,				/* 220: semtimedop */
 	NULL,				/* 221: fadvise64 */
 	NULL,				/* 222: timer_create */
 	lx_timer_settime,		/* 223: timer_settime */
@@ -1489,7 +1489,7 @@ static lx_syscall_handler_t lx_handlers[] = {
 	NULL,				/* 140: llseek */
 	NULL,				/* 141: getdents */
 	NULL,				/* 142: select */
-	lx_flock,			/* 143: flock */
+	NULL,				/* 143: flock */
 	NULL,				/* 144: msync */
 	NULL,				/* 145: readv */
 	NULL,				/* 146: writev */
diff --git a/usr/src/lib/brand/lx/lx_brand/common/sysv_ipc.c b/usr/src/lib/brand/lx/lx_brand/common/sysv_ipc.c
index aa4f4ffb40..95bd6a1e01 100644
--- a/usr/src/lib/brand/lx/lx_brand/common/sysv_ipc.c
+++ b/usr/src/lib/brand/lx/lx_brand/common/sysv_ipc.c
@@ -21,7 +21,7 @@
 /*
  * Copyright 2006 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
- * Copyright 2017 Joyent, Inc.  All rights reserved.
+ * Copyright 2018 Joyent, Inc.  All rights reserved.
  */
 
 #include <errno.h>
@@ -140,21 +140,6 @@ lx_semop(int semid, void *p1, size_t nsops)
 	return ((r < 0) ? -errno : r);
 }
 
-long
-lx_semtimedop(int semid, void *p1, size_t nsops, struct timespec *timeout)
-{
-	int r;
-	struct sembuf *sops = (struct sembuf *)p1;
-
-	lx_debug("\nsemtimedop(%d, 0x%p, %u, 0x%p)\n", semid, sops, nsops,
-	    timeout);
-	if (nsops == 0)
-		return (-EINVAL);
-
-	r = semtimedop(semid, sops, nsops, timeout);
-	return ((r < 0) ? -errno : r);
-}
-
 static int
 lx_semctl_ipcset(int semid, void *buf)
 {
diff --git a/usr/src/lib/brand/lx/lx_brand/sys/lx_syscall.h b/usr/src/lib/brand/lx/lx_brand/sys/lx_syscall.h
index a8c6a1e961..ecf3d88bee 100644
--- a/usr/src/lib/brand/lx/lx_brand/sys/lx_syscall.h
+++ b/usr/src/lib/brand/lx/lx_brand/sys/lx_syscall.h
@@ -25,7 +25,7 @@
  */
 
 /*
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 #ifndef _SYS_LX_SYSCALL_H
@@ -57,7 +57,6 @@ extern long lx_fstat64(uintptr_t, uintptr_t);
 extern long lx_lstat64(uintptr_t, uintptr_t);
 extern long lx_fcntl(uintptr_t, uintptr_t, uintptr_t);
 extern long lx_fcntl64(uintptr_t, uintptr_t, uintptr_t);
-extern long lx_flock(uintptr_t, uintptr_t);
 extern long lx_readdir(uintptr_t, uintptr_t, uintptr_t);
 extern long lx_execve(uintptr_t, uintptr_t, uintptr_t);
 extern long lx_ioctl(uintptr_t, uintptr_t, uintptr_t);
@@ -157,7 +156,6 @@ extern long lx_msgrcv(int, void *, size_t, long, int);
 extern long lx_msgctl(int, int, void *);
 extern long lx_semget(key_t, int, int);
 extern long lx_semop(int, void *, size_t);
-extern long lx_semtimedop(int, void *, size_t, struct timespec *);
 extern long lx_semctl(int, int, int, void *);
 extern long lx_shmget(key_t, size_t, int);
 extern long lx_shmat(int, void *, int);
diff --git a/usr/src/uts/common/brand/lx/os/lx_syscall.c b/usr/src/uts/common/brand/lx/os/lx_syscall.c
index 4f11ba8e49..eadd9a24a7 100644
--- a/usr/src/uts/common/brand/lx/os/lx_syscall.c
+++ b/usr/src/uts/common/brand/lx/os/lx_syscall.c
@@ -22,7 +22,7 @@
 /*
  * Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 #include <sys/kmem.h>
@@ -662,7 +662,7 @@ lx_sysent_t lx_sysent32[] = {
 	{"llseek",	lx_llseek,		0,		5}, /* 140 */
 	{"getdents",	lx_getdents_32,		0,		3}, /* 141 */
 	{"select",	lx_select,		0,		5}, /* 142 */
-	{"flock",	NULL,			0,		2}, /* 143 */
+	{"flock",	lx_flock,		0,		2}, /* 143 */
 	{"msync",	lx_msync,		0,		3}, /* 144 */
 	{"readv",	lx_readv,		0,		3}, /* 145 */
 	{"writev",	lx_writev,		0,		3}, /* 146 */
@@ -963,7 +963,7 @@ lx_sysent_t lx_sysent64[] = {
 	{"msgrcv",	NULL,			0,		5}, /* 70 */
 	{"msgctl",	NULL,			0,		3}, /* 71 */
 	{"fcntl",	lx_fcntl64,		0,		3}, /* 72 */
-	{"flock",	NULL,			0,		2}, /* 73 */
+	{"flock",	lx_flock,		0,		2}, /* 73 */
 	{"fsync",	NULL,			0,		1}, /* 74 */
 	{"fdatasync",	NULL,			0,		1}, /* 75 */
 	{"truncate",	NULL,			0,		2}, /* 76 */
@@ -1110,7 +1110,7 @@ lx_sysent_t lx_sysent64[] = {
 	{"getdents64",	lx_getdents64,		0,		3}, /* 217 */
 	{"set_tid_address", lx_set_tid_address, 0,		1}, /* 218 */
 	{"restart_syscall", NULL,		NOSYS_NULL,	0}, /* 219 */
-	{"semtimedop",	NULL,			0,		4}, /* 220 */
+	{"semtimedop",	lx_semtimedop,		0,		4}, /* 220 */
 	{"fadvise64",	lx_fadvise64,		0,		4}, /* 221 */
 	{"timer_create", lx_timer_create,	0,		3}, /* 222 */
 	{"timer_settime", NULL,			0,		4}, /* 223 */
diff --git a/usr/src/uts/common/brand/lx/sys/lx_syscalls.h b/usr/src/uts/common/brand/lx/sys/lx_syscalls.h
index 05deeff3c4..a80b1f2f11 100644
--- a/usr/src/uts/common/brand/lx/sys/lx_syscalls.h
+++ b/usr/src/uts/common/brand/lx/sys/lx_syscalls.h
@@ -22,7 +22,7 @@
 /*
  * Copyright 2006 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 #ifndef _SYS_LINUX_SYSCALLS_H
@@ -79,6 +79,7 @@ extern long lx_fcntl();
 extern long lx_fcntl64();
 extern long lx_fgetxattr();
 extern long lx_flistxattr();
+extern long lx_flock();
 extern long lx_fremovexattr();
 extern long lx_fsetxattr();
 extern long lx_fstat32();
@@ -206,6 +207,7 @@ extern long lx_sched_setparam();
 extern long lx_sched_setscheduler();
 extern long lx_sched_yield();
 extern long lx_select();
+extern long lx_semtimedop();
 extern long lx_send();
 extern long lx_sendmsg();
 extern long lx_sendto();
diff --git a/usr/src/uts/common/brand/lx/syscall/lx_fcntl.c b/usr/src/uts/common/brand/lx/syscall/lx_fcntl.c
index 116dcbe884..a5406c0a4f 100644
--- a/usr/src/uts/common/brand/lx/syscall/lx_fcntl.c
+++ b/usr/src/uts/common/brand/lx/syscall/lx_fcntl.c
@@ -10,7 +10,7 @@
  */
 
 /*
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 #include <sys/systm.h>
@@ -27,9 +27,11 @@
 #include <sys/lx_fcntl.h>
 #include <sys/lx_misc.h>
 #include <sys/lx_socket.h>
+#include <sys/brand.h>
 #include <sys/fs/fifonode.h>
 #include <sys/strsubr.h>
 #include <sys/stream.h>
+#include <sys/flock.h>
 
 extern int fcntl(int, int, intptr_t);
 extern int flock_check(vnode_t *, flock64_t *, offset_t, offset_t);
@@ -464,8 +466,13 @@ lx_fcntl_lock(int fd, int lx_cmd, void *arg)
 			break;
 
 		if ((error = VOP_FRLOCK(vp, cmd, &bf, flag, offset, NULL,
-		    fp->f_cred, NULL)) != 0)
+		    fp->f_cred, NULL)) != 0) {
+			if (cmd == F_SETLKW && error == EINTR) {
+				ttolxlwp(curthread)->br_syscall_restart =
+				    B_TRUE;
+			}
 			break;
+		}
 
 		if (cmd != F_GETLK)
 			break;
@@ -627,3 +634,68 @@ lx_fcntl64(int fd, int cmd, intptr_t arg)
 		return (lx_fcntl_common(fd, cmd, (ulong_t)arg));
 	}
 }
+
+/*
+ * Apply or remove an advisory lock on the entire file. F_FLOCK and F_FLOCKW
+ * are OFD-style locks. For more information, see the comment on ofdlock().
+ */
+long
+lx_flock(int fd, int op)
+{
+	int cmd;
+	int error;
+	flock64_t bf;
+	file_t *fp;
+
+	if (op & LX_LOCK_NB) {
+		cmd = F_FLOCK;
+		op &= ~LX_LOCK_NB;
+	} else {
+		cmd = F_FLOCKW;
+	}
+
+	switch (op) {
+	case LX_LOCK_UN:
+		bf.l_type = F_UNLCK;
+		break;
+	case LX_LOCK_SH:
+		bf.l_type = F_RDLCK;
+		break;
+	case LX_LOCK_EX:
+		bf.l_type = F_WRLCK;
+		break;
+	default:
+		return (set_errno(EINVAL));
+	}
+
+	bf.l_whence = 0;
+	bf.l_start = 0;
+	bf.l_len = 0;
+	bf.l_sysid = 0;
+	bf.l_pid = 0;
+
+	if ((fp = getf(fd)) == NULL)
+		return (set_errno(EBADF));
+
+	/*
+	 * See the locking comment in fcntl.c. In summary, the *_frlock
+	 * functions in the various file systems basically do some validation,
+	 * then funnel everything through the fs_frlock function. For OFD-style
+	 * locks, fs_frlock will do nothing. Once control returns here, we call
+	 * the ofdlock function to do the actual locking.
+	 */
+	error = VOP_FRLOCK(fp->f_vnode, cmd, &bf, fp->f_flag, fp->f_offset,
+	    NULL, fp->f_cred, NULL);
+	if (error != 0) {
+		releasef(fd);
+		return (set_errno(error));
+	}
+	error = ofdlock(fp, cmd, &bf, fp->f_flag, fp->f_offset);
+	if (error != 0) {
+		if (cmd == F_FLOCKW && error == EINTR)
+			ttolxlwp(curthread)->br_syscall_restart = B_TRUE;
+		(void) set_errno(error);
+	}
+	releasef(fd);
+	return (error);
+}
diff --git a/usr/src/uts/common/brand/lx/syscall/lx_ioctl.c b/usr/src/uts/common/brand/lx/syscall/lx_ioctl.c
index 4a01cd7824..9d8d88d6f6 100644
--- a/usr/src/uts/common/brand/lx/syscall/lx_ioctl.c
+++ b/usr/src/uts/common/brand/lx/syscall/lx_ioctl.c
@@ -10,7 +10,7 @@
  */
 
 /*
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 #include <sys/errno.h>
@@ -32,6 +32,7 @@
 #include <sys/sysmacros.h>
 #include <sys/lx_misc.h>
 #include <sys/lx_ptm.h>
+#include <sys/brand.h>
 #include <sys/sunddi.h>
 #include <sys/thread.h>
 #include <sys/proc.h>
@@ -1749,6 +1750,29 @@ static lx_ioc_cmd_translator_t lx_ioc_xlate_blk[] = {
 	LX_IOC_CMD_TRANSLATOR_END
 };
 
+/*
+ * Linux only restarts ioctls for "slow" devices. This includes terminals,
+ * pipes, and sockets. If additional "slow" devices are discovered in the
+ * future, they can be added here as well.
+ */
+static boolean_t
+lx_ioctl_is_slow_dev(file_t *fp)
+{
+	int rv;
+	struct termio s_tio;
+	vtype_t vt = fp->f_vnode->v_type;
+
+	if (vt == VFIFO || vt == VSOCK)
+		return (B_TRUE);
+
+	/* Check if it's a terminal using the isatty() approach. */
+	if (vt == VCHR && VOP_IOCTL(fp->f_vnode, TCGETA, (intptr_t)&s_tio,
+	    FLFAKE(fp), fp->f_cred, &rv, NULL) == 0)
+		return (B_TRUE);
+
+	return (B_FALSE);
+}
+
 static void
 lx_ioctl_vsd_free(void *data)
 {
@@ -1832,6 +1856,10 @@ lx_ioctl(int fdes, int cmd, intptr_t arg)
 	}
 
 	res = ict->lict_func(fp, ict->lict_cmd, arg, ict->lict_lxcmd);
+
+	if (ttolwp(curthread)->lwp_errno == EINTR && lx_ioctl_is_slow_dev(fp))
+		ttolxlwp(curthread)->br_syscall_restart = B_TRUE;
+
 	releasef(fdes);
 	return (res);
 }
diff --git a/usr/src/uts/common/brand/lx/syscall/lx_open.c b/usr/src/uts/common/brand/lx/syscall/lx_open.c
index a6d6877326..f26f2d1fa6 100644
--- a/usr/src/uts/common/brand/lx/syscall/lx_open.c
+++ b/usr/src/uts/common/brand/lx/syscall/lx_open.c
@@ -22,7 +22,7 @@
 /*
  * Copyright 2009 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 #include <sys/systm.h>
@@ -37,6 +37,7 @@
 #include <sys/lx_types.h>
 #include <sys/lx_fcntl.h>
 #include <sys/lx_misc.h>
+#include <sys/brand.h>
 
 extern int fcntl(int, int, intptr_t);
 extern int openat(int, char *, int, int);
@@ -244,6 +245,10 @@ lx_openat(int atfd, char *path, int fmode, int cmode)
 
 			(void) set_errno(oerror);
 		}
+
+		if (ttolwp(curthread)->lwp_errno == EINTR)
+			ttolxlwp(curthread)->br_syscall_restart = B_TRUE;
+
 		return (ttolwp(curthread)->lwp_errno);
 	}
 
diff --git a/usr/src/uts/common/brand/lx/syscall/lx_socket.c b/usr/src/uts/common/brand/lx/syscall/lx_socket.c
index f44e9d0eca..18bc92433d 100644
--- a/usr/src/uts/common/brand/lx/syscall/lx_socket.c
+++ b/usr/src/uts/common/brand/lx/syscall/lx_socket.c
@@ -22,7 +22,7 @@
 /*
  * Copyright 2009 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
- * Copyright 2017 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 #include <sys/errno.h>
@@ -1370,6 +1370,23 @@ lx_convert_sock_args(int in_dom, int in_type, int in_proto, int *out_dom,
 	return (0);
 }
 
+/*
+ * For restartable socket syscall handling, the relevant syscalls are only
+ * restarted when a timeout is not set on the socket.
+ */
+static void
+lx_sock_syscall_restart(sonode_t *so, boolean_t recv)
+{
+	if (recv) {
+		if (so->so_rcvtimeo != 0)
+			return;
+	} else {
+		if (so->so_sndtimeo != 0)
+			return;
+	}
+
+	ttolxlwp(curthread)->br_syscall_restart = B_TRUE;
+}
 
 static int
 lx_socket_create(int domain, int type, int protocol, int options, file_t **fpp,
@@ -1574,6 +1591,9 @@ lx_connect(long sock, uintptr_t name, socklen_t namelen)
 	error = socket_connect(so, addr, len, fp->f_flag,
 	    _SOCONNECT_XPG4_2, CRED());
 
+	if (error == EINTR)
+		lx_sock_syscall_restart(so, B_FALSE);
+
 	/*
 	 * Linux connect(2) behavior is rather strange when using the
 	 * O_NONBLOCK flag.  The first call will return EINPROGRESS, as
@@ -1726,6 +1746,8 @@ lx_recv_common(int sock, struct nmsghdr *msg, xuio_t *xuiop, int flags,
 
 	error = lx_socket_recvmsg(so, msg, (struct uio *)xuiop, CRED());
 	if (error) {
+		if (error == EINTR)
+			lx_sock_syscall_restart(so, B_TRUE);
 		releasef(sock);
 		return (set_errno(error));
 	}
@@ -2203,6 +2225,8 @@ lx_send_common(int sock, struct nmsghdr *msg, struct uio *uiop, int flags)
 	nosig = ((flags & LX_MSG_NOSIGNAL) != 0);
 
 	error = lx_socket_sendmsg(so, msg, uiop, CRED(), nosig);
+	if (error == EINTR)
+		lx_sock_syscall_restart(so, B_FALSE);
 done:
 	if (control != NULL) {
 		kmem_free(control, controllen);
@@ -3980,6 +4004,8 @@ lx_accept_common(int sock, struct sockaddr *name, socklen_t *nlp, int flags)
 		return (set_errno(error));
 	}
 	if ((error = socket_accept(so, fp->f_flag, CRED(), &nso)) != 0) {
+		if (error == EINTR)
+			lx_sock_syscall_restart(so, B_TRUE);
 		setf(nfd, NULL);
 		unfalloc(nfp);
 		releasef(sock);
diff --git a/usr/src/uts/common/brand/lx/syscall/lx_sysv_ipc.c b/usr/src/uts/common/brand/lx/syscall/lx_sysv_ipc.c
new file mode 100644
index 0000000000..a7555da416
--- /dev/null
+++ b/usr/src/uts/common/brand/lx/syscall/lx_sysv_ipc.c
@@ -0,0 +1,39 @@
+/*
+ * This file and its contents are supplied under the terms of the
+ * Common Development and Distribution License ("CDDL"), version 1.0.
+ * You may only use this file in accordance with the terms of version
+ * 1.0 of the CDDL.
+ *
+ * A full copy of the text of the CDDL should have accompanied this
+ * source.  A copy of the CDDL is also available via the Internet at
+ * http://www.illumos.org/license/CDDL.
+ */
+
+/*
+ * Copyright 2018 Joyent, Inc.
+ */
+
+#include <sys/types.h>
+#include <sys/systm.h>
+#include <sys/errno.h>
+#include <sys/sem.h>
+#include <sys/sem_impl.h>
+#include <sys/lx_brand.h>
+#include <sys/brand.h>
+
+/* From uts/common/syscall/sem.c */
+extern int semsys(int, uintptr_t, uintptr_t, uintptr_t, uintptr_t);
+
+long
+lx_semtimedop(int semid, void *sops, size_t nsops, void *to)
+{
+	int r;
+
+	if (nsops == 0)
+		return (set_errno(EINVAL));
+
+	r = semsys(SEMTIMEDOP, semid, (uintptr_t)sops, nsops, (uintptr_t)to);
+	if (r == EINTR)
+		ttolxlwp(curthread)->br_syscall_restart = B_TRUE;
+	return (r);
+}
diff --git a/usr/src/uts/common/syscall/sem.c b/usr/src/uts/common/syscall/sem.c
index 316f806c4d..cbe765c041 100644
--- a/usr/src/uts/common/syscall/sem.c
+++ b/usr/src/uts/common/syscall/sem.c
@@ -21,6 +21,7 @@
 /*
  * Copyright 2010 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
+ * Copyright 2018 Joyent, Inc.
  */
 
 /*	Copyright (c) 1984, 1986, 1987, 1988, 1989 AT&T	*/
@@ -170,7 +171,7 @@ int seminfo_semvmx = 32767;	/* (obsolete) */
 #define	SEM_MAXUCOPS	4096	/* max # of unchecked ops per semop call */
 #define	SEM_UNDOSZ(n)	(sizeof (struct sem_undo) + (n - 1) * sizeof (int))
 
-static int semsys(int opcode, uintptr_t a0, uintptr_t a1,
+int semsys(int opcode, uintptr_t a0, uintptr_t a1,
     uintptr_t a2, uintptr_t a3);
 static void sem_dtor(kipc_perm_t *);
 static void sem_rmid(kipc_perm_t *);
@@ -755,7 +756,7 @@ semids(int *buf, uint_t nids, uint_t *pnids)
  */
 static int
 compute_timeout(timespec_t **tsp, timespec_t *ts, timespec_t *now,
-	timespec_t *timeout)
+    timespec_t *timeout)
 {
 	model_t datamodel = get_udatamodel();
 
@@ -1187,7 +1188,7 @@ semoperr_unlocked:
 /*
  * semsys - System entry point for semctl, semget, and semop system calls.
  */
-static int
+int
 semsys(int opcode, uintptr_t a1, uintptr_t a2, uintptr_t a3, uintptr_t a4)
 {
 	int error;
diff --git a/usr/src/uts/intel/Makefile.files b/usr/src/uts/intel/Makefile.files
index f118f1f157..602dacdbc0 100644
--- a/usr/src/uts/intel/Makefile.files
+++ b/usr/src/uts/intel/Makefile.files
@@ -21,7 +21,7 @@
 
 #
 # Copyright (c) 1999, 2010, Oracle and/or its affiliates. All rights reserved.
-# Copyright 2017, Joyent, Inc.
+# Copyright 2018, Joyent, Inc.
 # Copyright 2017 Nexenta Systems, Inc.
 #
 
@@ -358,6 +358,7 @@ LX_BRAND_OBJS  =		\
 	lx_sync.o		\
 	lx_syscall.o		\
 	lx_sysinfo.o		\
+	lx_sysv_ipc.o		\
 	lx_thread_area.o	\
 	lx_time.o		\
 	lx_timer.o		\
diff --git a/usr/src/uts/intel/lx_brand/Makefile b/usr/src/uts/intel/lx_brand/Makefile
index 4eff474a49..93d255874d 100644
--- a/usr/src/uts/intel/lx_brand/Makefile
+++ b/usr/src/uts/intel/lx_brand/Makefile
@@ -21,7 +21,7 @@
 #
 # Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
 # Use is subject to license terms.
-# Copyright 2017 Joyent, Inc.
+# Copyright 2018 Joyent, Inc.
 #
 #	This makefile drives the production of the kernel component of
 #	the lx brand
@@ -69,7 +69,7 @@ AS_INC_PATH	+= -I$(UTSBASE)/i86pc/genassym/$(OBJS_DIR)
 CFLAGS		+= $(CCVERBOSE)
 
 LDFLAGS		+= -dy -Nexec/elfexec -Nfs/fifofs -Nfs/sockfs -Ndrv/ip \
-		    -Nfs/zfs -Nmisc/klmmod -Nsys/sysacct
+		    -Nfs/zfs -Nmisc/klmmod -Nsys/sysacct -Nsys/semsys
 
 #
 # For now, disable these lint checks; maintainers should endeavor
