From cbcf563325b470376a7fe244bfd304763da1de87 Mon Sep 17 00:00:00 2001
From: Marsell Kukuljevic <marsell@joyent.com>
Date: Wed, 11 Jan 2017 00:09:58 +1300
Subject: [PATCH] DAPI-330: Improved over-provisioning logic to take into
 account the currently used amounts Reviewed by: Angela Fong
 <angela.fong@joyent.com>

---
 docs/index.md                                 | 12 +++-
 lib/algorithms/calculate-server-unreserved.js | 58 +++++++++++++------
 .../calculate-server-unreserved.test.js       |  7 ++-
 test/allocator.test.js                        |  4 +-
 test/common.json                              |  2 +
 5 files changed, 60 insertions(+), 23 deletions(-)

diff --git a/docs/index.md b/docs/index.md
index d7af07d..6bd6c44 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -270,16 +270,22 @@ Each overprovision ratio is optional. If a ratio is provided, DAPI will attempt
 to ensure that the ratio (or better) is kept. If a ratio is not provided, DAPI
 will assume that overprovisioning on that resource does not matter, and will
 completely disregard maintaining any ratio. This feature only works if the
-allocation chain has been set up properly -- overprovisioning is disabled by
-default.
+allocation chain has been set up properly -- by default all overprovisioning
+attributes get overridden with defaults.
 
 E.g. if you want to guarantee that CPU is not overprovisioned, provide an
 overprovision_cpu of 1.0. If you'd like to overprovision CPU by two, use
 overprovision_cpu of 2.0. If you really don't care whether it's overprovisioned
 or not, do not provide an overprovision_cpu.
 
+Memory works similarly. Disk is much more complicated, where overprovisioning is
+only applied to the free portion of the quotas of regular (not KVM) zones.
+
 By default, if a package does not provide any overprovision ratios at all,
-DAPI will default to using a single ratio: an overprivison_memory of 1.0.
+DAPI will default to using a single ratio: an overprivison_memory of 1.0. If the
+override-overprovisioning plugin is enabled, the default will be an
+overprovision_memory and overprovision_storage of 1.0, and an overprovision_cpu
+of 4.0.
 
 An example of a valid package payload:
 
diff --git a/lib/algorithms/calculate-server-unreserved.js b/lib/algorithms/calculate-server-unreserved.js
index d504ccd..efdd69a 100644
--- a/lib/algorithms/calculate-server-unreserved.js
+++ b/lib/algorithms/calculate-server-unreserved.js
@@ -131,9 +131,16 @@ numKvms(vms)
 /*
  * Calculating disk usage on a CN is a bit involved. We cannot simply look at
  * the free space on disk since much of that free space is reserved for existing
- * zones, even when that space has not yet been used.  We also need to treat
- * disk usage by regular zones and KVM zones differently: KVM doesn't typically
- * react well when its virtual disks suddenly cannot write.
+ * zones, even when that space has not yet been used.
+ *
+ * We also need to treat zone quotas and KVM quotas differently when dealing
+ * with overprovisioning. First, ZFS volumes are fundamentally different from
+ * ZFS filesystems, being opaque blobs of data which are typically
+ * unreclaimable as long as a KVM instances lives. More importantly, the OSes
+ * inside KVM usually don't react well when their virtual disks -- which appear
+ * to have free space -- suddenly cannot accept writes when the underlying
+ * volume cannot get space it was promised; this can lead to the inner OS
+ * corrupting its filesystem stored in that volume.
  *
  * The failure modes of disks (in general, not just KVM's volumes) are generally
  * more troublesome than RAM or CPU. If there isn't enough CPU, processes take
@@ -142,7 +149,7 @@ numKvms(vms)
  *
  * The following function effectively calculates the following:
  *    usable pool size - system usage - image usage - cores usage - KVM quotas -
- *    (zone quotas * disk overprovision ratio)
+ *    ((zone quotas - zone usage) * (1 - 1 / disk overprovision ratio))
  *
  * Note the important distinction between usage and quota: usage are the bytes
  * actually used in a dataset (and roughly on disk), while quota is both the
@@ -165,8 +172,6 @@ calcUnreservedDisk(server)
 	    server.disk_installed_images_used_bytes -
 	    server.disk_cores_quota_used_bytes;
 
-	var overprovisionDisk = server.overprovision_ratios.disk || 1;
-
 	/*
 	 * We have to do some hackery here.  Normally
 	 * server.disk_kvm_quota_bytes is enough (rather than the whole
@@ -176,20 +181,39 @@ calcUnreservedDisk(server)
 	 */
 	var kvmQuotaBytes = server.disk_kvm_zvol_volsize_bytes +
 	    numKvms(server.vms) * 10 * GB;
+	unreserved -= kvmQuotaBytes;
 
 	/*
-	 * We must treat zone quotas and KVM quotas differently when dealing
-	 * with overprovisioning. First, ZFS volumes are fundamentally different
-	 * from ZFS filesystems, being opaque blobs of data which are typically
-	 * unreclaimable as long as a KVM instances lives. More importantly,
-	 * the OSes inside KVM usually don't react well when their virtual
-	 * disks -- which appear to have free space -- suddenly cannot accept
-	 * writes when the underlying volume cannot get space it was promised;
-	 * this can lead to the inner OS corrupting its filesystem stored in
-	 * that volume.
+	 * Originally we used disk_zone_quota_bytes alone, but this causes some
+	 * capacity problems with overprovisioning since the actual disk used
+	 * (not just promised) isn't considered:
+	 *
+	 * - Excess spare disk capacity when overprovisioning on some CNs in a
+	 * busy DC. In typical workloads, many CNs will end up with much of the
+	 * pool unused, because zones rarely fill up their quota.
+	 * - It makes ENOSPC (no disk space) errors more likely with
+	 * overprovisioning higher than 1, since it will still blindly place
+	 * zones on a CN despite that CN's pool being almost full.
+	 *
+	 * By applying overprovisioning solely to the chunk of zone quotas that
+	 * haven't been used (i.e. we add some information about actual disk
+	 * usage by the zones), we reduce these problems. E.g. zones that have a
+	 * total quota of 1000GB, where only 600GB have been used, have 400GB
+	 * free. That 400GB portion is what we apply overprovisioning
+	 * calculations to.
+	 *
+	 * The trade-off here is that greedy consumers can more easily get away
+	 * with using their total quota. E.g. they may be paying for a class of
+	 * package that only guarantees 1/2 their quota to them (with an
+	 * overprovision_disk of 2), but by filling up their quota fast they
+	 * can usually get close to the total quota (as if they had an
+	 * overprovision_disk of 1).
 	 */
-	unreserved -= server.disk_zone_quota_bytes / overprovisionDisk +
-		kvmQuotaBytes;
+	var overprovisionDisk = server.overprovision_ratios.disk || 1;
+	var zoneQuotaFree = server.disk_zone_quota_bytes -
+		server.disk_zone_quota_used_bytes;
+	unreserved -= server.disk_zone_quota_used_bytes +
+		zoneQuotaFree/overprovisionDisk;
 
 	/*
 	 * A last sanity check: if unreserved is larger than the free space in
diff --git a/test/algorithms/calculate-server-unreserved.test.js b/test/algorithms/calculate-server-unreserved.test.js
index cd665d1..8beac5c 100644
--- a/test/algorithms/calculate-server-unreserved.test.js
+++ b/test/algorithms/calculate-server-unreserved.test.js
@@ -24,6 +24,7 @@ test('calculateServerUnreserved()', function (t) {
 			disk_system_used_bytes: 5 * GB,
 			disk_installed_images_used_bytes: 1 * GB,
 			disk_zone_quota_bytes: 0,
+			disk_zone_quota_used_bytes: 0,
 			disk_kvm_quota_bytes: (25 + 5 + 10 + 10) * GB,
 			disk_kvm_zvol_volsize_bytes: (25 + 5) * GB,
 			disk_cores_quota_used_bytes: 1 * GB,
@@ -54,6 +55,7 @@ test('calculateServerUnreserved()', function (t) {
 			disk_system_used_bytes: 2 * GB,
 			disk_installed_images_used_bytes: 2 * GB,
 			disk_zone_quota_bytes: 20 * GB,
+			disk_zone_quota_used_bytes: 10 * GB,
 			disk_kvm_quota_bytes: (10 + 10) * GB,
 			disk_kvm_zvol_volsize_bytes: 10 * GB,
 			disk_cores_quota_used_bytes: 1 * GB,
@@ -85,6 +87,7 @@ test('calculateServerUnreserved()', function (t) {
 			disk_system_used_bytes: 2 * GB,
 			disk_installed_images_used_bytes: 3 * GB,
 			disk_zone_quota_bytes: (20 + 10) * GB,
+			disk_zone_quota_used_bytes: 20 * GB,
 			disk_kvm_quota_bytes: 0,
 			disk_kvm_zvol_volsize_bytes: 0,
 			disk_cores_quota_used_bytes: 0,
@@ -116,6 +119,7 @@ test('calculateServerUnreserved()', function (t) {
 			disk_system_used_bytes: 5 * GB,
 			disk_installed_images_used_bytes: 4 * GB,
 			disk_zone_quota_bytes: (20 + 30) * GB,
+			disk_zone_quota_used_bytes: (20 + 30) * GB,
 			disk_kvm_quota_bytes: (10 + 30) * GB,
 			disk_kvm_zvol_volsize_bytes: 30 * GB,
 			disk_cores_quota_used_bytes: 1 * GB,
@@ -155,6 +159,7 @@ test('calculateServerUnreserved()', function (t) {
 			disk_system_used_bytes: 10 * GB,
 			disk_installed_images_used_bytes: 1 * GB,
 			disk_zone_quota_bytes: 0,
+			disk_zone_quota_used_bytes: 0,
 			disk_kvm_quota_bytes: (25 + 5 + 10 + 10) * GB,
 			disk_kvm_zvol_volsize_bytes: (25 + 5) * GB,
 			disk_cores_quota_used_bytes: 1 * GB,
@@ -199,7 +204,7 @@ test('calculateServerUnreserved()', function (t) {
 		t.equal(servers[2].unreserved_ram,  4331);
 		t.equal(servers[2].unreserved_cpu,  2500);
 
-		t.equal(servers[3].unreserved_disk, 3865845);
+		t.equal(servers[3].unreserved_disk, 3840245);
 		t.equal(servers[3].unreserved_ram,  2965);
 		t.equal(servers[3].unreserved_cpu,  2750);
 
diff --git a/test/allocator.test.js b/test/allocator.test.js
index 7e53d65..e4cf7ac 100644
--- a/test/allocator.test.js
+++ b/test/allocator.test.js
@@ -914,12 +914,12 @@ test('server capacity with altered overprovisioning', function (t) {
 		'00000000-0000-0000-0000-00259094373c': {
 			cpu: 6199,
 			ram: 106941,
-			disk: 3079003
+			disk: 3047003
 		},
 		'00000000-0000-0000-0000-0025909437d4': {
 			cpu: 5816,
 			ram: 109459,
-			disk: 1583360
+			disk: 777728
 		}
 	};
 
diff --git a/test/common.json b/test/common.json
index 8cf6fa3..fc94152 100644
--- a/test/common.json
+++ b/test/common.json
@@ -159,6 +159,7 @@
 			"disk_kvm_zvol_volsize_bytes": 44023414784,
 			"disk_kvm_quota_bytes": 10737418240,
 			"disk_zone_quota_bytes": 134217728000,
+			"disk_zone_quota_used_bytes": 67108864000,
 			"disk_cores_quota_bytes": 536870912000,
 			"disk_installed_images_used_bytes": 5905771008,
 			"disk_pool_size_bytes": 3582002724864,
@@ -387,6 +388,7 @@
 			"disk_kvm_zvol_volsize_bytes": 0,
 			"disk_kvm_quota_bytes": 0,
 			"disk_zone_quota_bytes": 3379065520128,
+			"disk_zone_quota_used_bytes": 1689532760064,
 			"disk_cores_quota_bytes": 27943501824000,
 			"disk_installed_images_used_bytes": 6539030016,
 			"disk_pool_size_bytes": 3582002724864,
-- 
2.21.0

