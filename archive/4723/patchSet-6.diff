commit 27112fce117c7b8fceb79568e08dbd3e49364e7f (refs/changes/23/4723/6)
Author: Dave Eddy <dave@daveeddy.com>
Date:   2018-08-24T01:20:29-04:00 (1 year, 2 months ago)
    
    joyent/node-manta#62 RFE - mls list with human readable format
    Reviewed by: Kody A Kantor <kody@kkantor.com>

diff --git a/bin/mls b/bin/mls
index 8c08c9d..8e45134 100755
--- a/bin/mls
+++ b/bin/mls
@@ -1,6 +1,6 @@
 #!/usr/bin/env node
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
 var path = require('path-platform');
@@ -9,6 +9,7 @@ var url = require('url');
 var assert = require('assert-plus');
 var bunyan = require('bunyan');
 var dashdash = require('dashdash');
+var jsprim = require('jsprim');
 var moment = require('moment');
 var once = require('once');
 var sprintf = require('extsprintf').sprintf;
@@ -26,8 +27,17 @@ var LOG = bunyan.createLogger({
     stream: process.stderr
 });
 
+var CLI_OPTIONS = jsprim.deepCopy(manta.DEFAULT_CLI_OPTIONS);
+
+// remove `-h` from the default options so we can use it
+CLI_OPTIONS.forEach(function (opt) {
+    if (opt.names && opt.names[0] === 'help') {
+        opt.names = ['help'];
+    }
+});
+
 var OPTIONS_PARSER = dashdash.createParser({
-    options: manta.DEFAULT_CLI_OPTIONS.concat([
+    options: CLI_OPTIONS.concat([
         {
             group: NAME + ' options'
         },
@@ -46,6 +56,11 @@ var OPTIONS_PARSER = dashdash.createParser({
             type: 'bool',
             help: 'use a long listing format'
         },
+        {
+            names: ['human-readable', 'h'],
+            type: 'bool',
+            help: 'Human readable output when using a long listing format'
+        },
         {
             names: ['marker', 'm'],
             type: 'string',
@@ -177,10 +192,11 @@ function printEntry(opts, obj) {
         }
 
         var owner = obj.parent.split(/\//)[1];
-        var out = sprintf('%srwxr-xr-x 1 %s %13d %s %s',
+        var size = obj.type === 'directory' ? 0 : (obj.size || 0);
+        var out = sprintf('%srwxr-xr-x 1 %s %13s %s %s',
                           (obj.type === 'directory' ? 'd' : '-'),
                           owner,
-                          (obj.type === 'directory' ? '0' : (obj.size || '0')),
+                          opts.human_readable ? manta.prettyBytes(size) : size,
                           d.format(fmt),
                           safename);
 
diff --git a/docs/man/mls.md b/docs/man/mls.md
index d40ecef..d151bf4 100644
--- a/docs/man/mls.md
+++ b/docs/man/mls.md
@@ -34,7 +34,10 @@ OPTIONS
 `-a, --account login`
   Authenticate as account (login name).
 
-`-h, --help`
+`-h, --human-readable`
+  Human readable output when using a long listing format.
+
+`--help`
   Print a help message and exit.
 
 `-i, --insecure`
diff --git a/lib/index.js b/lib/index.js
index ef4d665..f2393e8 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -40,5 +40,6 @@ module.exports = {
     path: manta.path,
     jobPath: manta.jobPath,
     escapePath: utils.escapePath,
+    prettyBytes: utils.prettyBytes,
     parseOptions: options.parseOptions
 };
diff --git a/lib/utils.js b/lib/utils.js
index f3b55a9..cfbe1f6 100644
--- a/lib/utils.js
+++ b/lib/utils.js
@@ -5,7 +5,8 @@ var manta = require('./client');
 
 module.exports = {
     assertPath: assertPath,
-    escapePath: escapePath
+    escapePath: escapePath,
+    prettyBytes: prettyBytes
 };
 
 function escapePath(s) {
@@ -25,3 +26,41 @@ function assertPath(p, noThrow) {
     }
     return (null);
 }
+
+function prettyBytes(bytes, scale) {
+    scale = scale || 1024;
+
+    assert.number(bytes);
+    assert(bytes >= 0, 'bytes >= 0');
+    assert.number(scale, 'scale');
+    assert(scale >= 1, 'scale >= 1');
+
+    var suffixes = [
+        '', // empty for bytes
+        'K',
+        'M',
+        'G',
+        'T'
+    ];
+    var suffix, num, s;
+
+    for (var i = suffixes.length; i >= 0; i--) {
+        suffix = suffixes[i];
+        num = Math.pow(1024, i);
+        if (bytes >= num) {
+            // convert bytes to human readable string
+            s = (bytes / num).toFixed(2);
+
+            /*
+             * It can be the case that 's' has 0's that can be chopped off
+             * like "5.10" or "2.00".  To handle this, we parse the number as a
+             * float and then call toString() on the result.
+             */
+            s = parseFloat(s).toString();
+            return (s + suffix);
+        }
+    }
+
+    assert.equal(bytes, 0, 'bytes == 0');
+    return ('0');
+}
diff --git a/man/man1/mls.1 b/man/man1/mls.1
index d164339..acf8ab7 100644
--- a/man/man1/mls.1
+++ b/man/man1/mls.1
@@ -27,7 +27,10 @@ tmp/
 \fB\fC\-a, \-\-account login\fR
 Authenticate as account (login name).
 .TP
-\fB\fC\-h, \-\-help\fR
+\fB\fC\-h, \-\-human\-readable\fR
+Human readable output when using a long listing format.
+.TP
+\fB\fC\-\-help\fR
 Print a help message and exit.
 .TP
 \fB\fC\-i, \-\-insecure\fR
diff --git a/test/utils.test.js b/test/utils.test.js
index 974d1d9..5cf2d77 100644
--- a/test/utils.test.js
+++ b/test/utils.test.js
@@ -1,7 +1,9 @@
 /*
- * Copyright 2015 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  */
 
+var f = require('util').format;
+
 var manta = require('..');
 
 function test(name, testfunc) {
@@ -31,3 +33,52 @@ test('escapePath encoding', function (t) {
     });
     t.done();
 });
+
+test('prettyBytes', function (t) {
+    var goodTests = [
+        [0, '0'],
+        [1, '1'],
+
+        [1024, '1K'],
+        [2048, '2K'],
+        [2058, '2.01K'],
+
+        [12345, '12.06K'],
+        [123456, '120.56K'],
+        [1234567, '1.18M'],
+        [12345678, '11.77M'],
+        [123456789, '117.74M'],
+        [1234567890, '1.15G'],
+        [12345678901, '11.5G'],
+        [123456789012, '114.98G'],
+        [1234567890123, '1.12T'],
+
+        [Math.pow(1024, 0), '1'],
+        [Math.pow(1024, 1), '1K'],
+        [Math.pow(1024, 2), '1M'],
+        [Math.pow(1024, 3), '1G'],
+        [Math.pow(1024, 4), '1T']
+    ];
+    goodTests.forEach(function (_test) {
+        var bytes = _test[0];
+        var out = _test[1];
+        t.equal(manta.prettyBytes(bytes), out,
+            f('prettyBytes(%d) == "%s"', bytes, out));
+    });
+
+    var badTests = [
+        -1,
+        NaN,
+        '',
+        true,
+        {},
+        [],
+        new Date()
+    ];
+    badTests.forEach(function (value) {
+        t.throws(function () {
+            manta.prettyBytes(value);
+        }, f('prettyBytes(%j) throws', value));
+    });
+    t.done();
+});
