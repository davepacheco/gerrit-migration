commit b3b7c79af35d41e3dee430eebff3e31b38bbbc9b
Author: Dave Eddy <dave@daveeddy.com>
Date:   2019-03-06T11:12:36-05:00 (7 months ago)
    
    joyent/electric-boray#4 fix `make check`
    Reviewed by: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
    Approved by: Kelly McLaughlin <kelly.mclaughlin@joyent.com>

diff --git a/.gitignore b/.gitignore
index f58f286..f0449ea 100644
--- a/.gitignore
+++ b/.gitignore
@@ -9,3 +9,4 @@ cscope.po.out
 cscope.out
 smf/manifests/*.xml
 sapi_manifests/registrar/template
+ring.json
diff --git a/.gitmodules b/.gitmodules
index 0cf0250..2289975 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,9 +1,9 @@
-[submodule "deps/jsstyle"]
-	path = deps/jsstyle
-	url = https://github.com/davepacheco/jsstyle.git
-[submodule "deps/javascriptlint"]
-	path = deps/javascriptlint
-	url = https://github.com/davepacheco/javascriptlint.git
 [submodule "deps/manta-scripts"]
 	path = deps/manta-scripts
 	url = https://github.com/joyent/manta-scripts.git
+[submodule "deps/javascriptlint"]
+	path = deps/javascriptlint
+	url = git://github.com/joyent/javascriptlint.git
+[submodule "deps/jsstyle"]
+	path = deps/jsstyle
+	url = git://github.com/joyent/jsstyle.git
diff --git a/deps/javascriptlint b/deps/javascriptlint
index e1bd0ab..ad52812 160000
--- a/deps/javascriptlint
+++ b/deps/javascriptlint
@@ -1 +1 @@
-Subproject commit e1bd0abfd424811af469d1ece3af131d95443924
+Subproject commit ad52812e77bdfb1e90fb71a1201adb2b665a27e6
diff --git a/deps/jsstyle b/deps/jsstyle
index da42b50..52dc973 160000
--- a/deps/jsstyle
+++ b/deps/jsstyle
@@ -1 +1 @@
-Subproject commit da42b50ceb12d431437b32efd4c411a8e2fac0c8
+Subproject commit 52dc973cf64da11834eca7cf46ebce8518e3ee88
diff --git a/lib/bucket_server.js b/lib/bucket_server.js
index 7849f83..58f0859 100644
--- a/lib/bucket_server.js
+++ b/lib/bucket_server.js
@@ -17,32 +17,17 @@ var net = require('net');
 var os = require('os');
 var restify = require('restify');
 var uuid = require('node-uuid');
-var util = require('util');
 var vasync = require('vasync');
 var verror = require('verror');
 
 var moray_client = require('./moray_client');
-var dtrace = require('./dtrace');
 var errors = require('./errors');
-var schema = require('./schema');
-var ring = require('./ring');
 var data_placement = require('./data_placement');
 
 var InvocationError = errors.InvocationError;
-var ReadOnlyError = errors.ReadOnlyError;
 
-var ALLOWED_BATCH_OPS = [
-    'put',
-    'delete'
-];
-var READ_ONLY = 'ro';
 var KANG_VERSION = '1.2.0';
 
-var B_ARGS_SCHEMA = [
-    { name: 'requests', type: 'array' },
-    { name: 'options', type: 'object' }
-];
-
 var CB_ARGS_SCHEMA = [
     { name: 'owner', type: 'string' },
     { name: 'name', type: 'string' }
@@ -53,20 +38,8 @@ var DB_ARGS_SCHEMA = [
     { name: 'name', type: 'string' }
 ];
 
-var DO_ARGS_SCHEMA = [
-    { name: 'owner', type: 'string' },
-    { name: 'bucket_id', type: 'string' },
-    { name: 'name', type: 'string' }
-];
-
-var DM_ARGS_SCHEMA = [
-    { name: 'bucket', type: 'string' },
-    { name: 'filter', type: 'string' },
-    { name: 'options', type: 'object' }
-];
-
 var LB_ARGS_SCHEMA = [
-    { name: 'owner', type: 'string' },
+    { name: 'owner', type: 'string' }
 ];
 
 var GB_ARGS_SCHEMA = [
@@ -80,10 +53,6 @@ var GO_ARGS_SCHEMA = [
     { name: 'name', type: 'string' }
 ];
 
-var GT_ARGS_SCHEMA = [
-    { name: 'options', type: 'object' }
-];
-
 var PO_ARGS_SCHEMA = [
     { name: 'owner', type: 'string' },
     { name: 'bucket_id', type: 'string' },
@@ -98,7 +67,7 @@ var PO_ARGS_SCHEMA = [
 
 var LO_ARGS_SCHEMA = [
     { name: 'owner', type: 'string' },
-    { name: 'bucket_id', type: 'string' },
+    { name: 'bucket_id', type: 'string' }
 ];
 
 function createServer(options, callback) {
@@ -166,7 +135,7 @@ function createServer(options, callback) {
                 { rpcmethod: 'getobject', rpchandler: getObject(opts) },
                 { rpcmethod: 'putobject', rpchandler: putObject(opts) },
                 { rpcmethod: 'deleteobject', rpchandler: delObject(opts) },
-                { rpcmethod: 'listobjects', rpchandler: listObjects(opts) },
+                { rpcmethod: 'listobjects', rpchandler: listObjects(opts) }
             ];
 
             methods.forEach(function (rpc) {
@@ -239,7 +208,8 @@ function invalidArgs(rpc, argv, types) {
 
     if (argv.length !== len) {
         rpc.fail(new InvocationError(
-            '%s expects %d argument%s %d', route, len, len === 1 ? '' : 's', argv.length));
+            '%s expects %d argument%s %d',
+            route, len, len === 1 ? '' : 's', argv.length));
         return true;
     }
 
@@ -286,7 +256,6 @@ function createBucket(options) {
     assert.object(options.clients, 'options.clients');
 
     function _createBucket(rpc) {
-        var msgid = rpc.requestId();
         var argv = rpc.argv();
 
         if (invalidArgs(rpc, argv, CB_ARGS_SCHEMA)) {
@@ -384,7 +353,6 @@ function getBucket(options) {
 
             var vnode = location.vnode;
             var pnode = location.pnode;
-            var client = options.clients.map[pnode];
 
             options.clients.map[pnode].getBucket(o, b, vnode,
                 function (gErr, rbucket) {
@@ -448,7 +416,6 @@ function delBucket(options) {
 
             var vnode = location.vnode;
             var pnode = location.pnode;
-            var client = options.clients.map[pnode];
 
             options.clients.map[pnode].deleteBucket(o, b, vnode,
                 function (gErr, rbucket) {
@@ -498,7 +465,7 @@ function listBuckets(options) {
         });
 
         log.debug({
-            owner: o,
+            owner: o
         }, 'listBuckets: entered');
 
         var pnodes = Object.keys(options.clients.map);
@@ -575,7 +542,6 @@ function putObject(options) {
     assert.object(options.clients, 'options.clients');
 
     function _putObject(rpc) {
-        var msgid = rpc.requestId();
         var argv = rpc.argv();
 
         if (invalidArgs(rpc, argv, PO_ARGS_SCHEMA)) {
@@ -608,7 +574,9 @@ function putObject(options) {
             key: k
         }, 'putObject: entered');
 
-        options.dataDirector.getObjectLocation(o, b, k, function (err, location) {
+        options.dataDirector.getObjectLocation(o, b, k,
+            function (err, location) {
+
             if (err) {
                 rpc.fail(err);
                 return;
@@ -618,7 +586,9 @@ function putObject(options) {
             var pnode = location.pnode;
             var client = options.clients.map[pnode];
 
-            if (props.constructor === Object && Object.keys(props).length === 0) {
+            if (props.constructor === Object &&
+                Object.keys(props).length === 0) {
+
                 props = null;
             }
 
@@ -656,7 +626,6 @@ function getObject(options) {
     assert.object(options.clients, 'options.clients');
 
     function _getObject(rpc) {
-        var msgid = rpc.requestId();
         var argv = rpc.argv();
 
         if (invalidArgs(rpc, argv, GO_ARGS_SCHEMA)) {
@@ -683,7 +652,9 @@ function getObject(options) {
             key: k
         }, 'getObject: entered');
 
-        options.dataDirector.getObjectLocation(o, b, k, function (err, location) {
+        options.dataDirector.getObjectLocation(o, b, k,
+            function (err, location) {
+
             if (err) {
                 rpc.fail(err);
                 return;
@@ -731,7 +702,6 @@ function delObject(options) {
     assert.object(options.clients, 'options.clients');
 
     function _delObject(rpc) {
-        var msgid = rpc.requestId();
         var argv = rpc.argv();
 
         if (invalidArgs(rpc, argv, GO_ARGS_SCHEMA)) {
@@ -758,7 +728,9 @@ function delObject(options) {
             key: k
         }, 'delObject: entered');
 
-        options.dataDirector.getObjectLocation(o, b, k, function (err, location) {
+        options.dataDirector.getObjectLocation(o, b, k,
+            function (err, location) {
+
             if (err) {
                 rpc.fail(err);
                 return;
@@ -805,7 +777,6 @@ function listObjects(options) {
     assert.object(options.clients, 'options.clients');
 
     function _listObjects(rpc) {
-        var msgid = rpc.requestId();
         var argv = rpc.argv();
 
         if (invalidArgs(rpc, argv, LO_ARGS_SCHEMA)) {
@@ -827,7 +798,7 @@ function listObjects(options) {
 
         log.debug({
             owner: owner,
-            bucket_id: bucket_id,
+            bucket_id: bucket_id
         }, 'listObjects: entered');
 
         var pnodes = Object.keys(options.clients.map);
diff --git a/lib/data_placement.js b/lib/data_placement.js
index e233f45..8e2be44 100644
--- a/lib/data_placement.js
+++ b/lib/data_placement.js
@@ -57,66 +57,9 @@ function getDirectorVersion(self, callback) {
 //TODO: Eventually this should call out to data placement service
 function getPlacementData(self, callback) {
     if (self.dataPlacement.version === '1.0.0') {
-        //TODO: Eventually this should call out to a separate function per version
-        var ring =  {
-            "algorithm_": {
-                "NAME": "sha256",
-                "MAX": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",
-                "VNODE_HASH_INTERVAL": "1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
-            },
-            "algorithmMax_": null,
-            "vnodeCount_": 8,
-            "vnodesBignum_": null,
-            "VNODE_HASH_INTERVAL": null,
-            "pnodes_": [
-                "tcp://10.12.26.19:2030",
-                "tcp://10.12.27.51:2030"
-            ],
-            "pnodeToVnodeMap_": {
-                "tcp://10.12.26.19:2030": {
-                    "0": 1,
-                    "2": 1,
-                    "4": 1,
-                    "6": 1
-                },
-                "tcp://10.12.27.51:2030": {
-                    "1": 1,
-                    "3": 1,
-                    "5": 1,
-                    "7": 1
-                }
-            },
-            "vnodeToPnodeMap_": {
-                "0": {
-                    "pnode": "tcp://10.12.26.19:2030"
-                },
-                "1": {
-                    "pnode": "tcp://10.12.27.51:2030"
-                },
-                "2": {
-                    "pnode": "tcp://10.12.26.19:2030"
-                },
-                "3": {
-                    "pnode": "tcp://10.12.27.51:2030"
-                },
-                "4": {
-                    "pnode": "tcp://10.12.26.19:2030"
-                },
-                "5": {
-                    "pnode": "tcp://10.12.27.51:2030"
-                },
-                "6": {
-                    "pnode": "tcp://10.12.26.19:2030"
-                },
-                "7": {
-                    "pnode": "tcp://10.12.27.51:2030"
-                }
-            },
-            "vnodeData_": [],
-            "msg": "",
-            "time": "2018-11-16T22:03:53.367Z",
-            "version": 0
-        };
+        //TODO: Eventually this should call out to a separate function per
+        // version
+        var ring =  require('../ring.json');
         self.dataPlacement.ring = ring;
 
         return callback(null, self.dataPlacement);
@@ -146,7 +89,9 @@ function getPlacementData(self, callback) {
  * @param {Function} callback The callback of the type f(err, hashedNode).
  *
  */
-DataDirector.prototype.getObjectLocation = function getObjectLocation(owner, bucket, key, callback) {
+DataDirector.prototype.getObjectLocation =
+    function getObjectLocation(owner, bucket, key, callback) {
+
     var self = this;
     var log = self.log_;
 
@@ -165,8 +110,12 @@ DataDirector.prototype.getObjectLocation = function getObjectLocation(owner, buc
     var value = crypto.createHash(this.dataPlacement.ring.algorithm_.NAME).
         update(tkey).digest('hex');
     // find the node that corresponds to this hash.
-    var vnodeHashInterval = this.dataPlacement.ring.algorithm_.VNODE_HASH_INTERVAL;
-    var vnode = parseInt(bignum(value, 16).div(bignum(vnodeHashInterval, 16)), 10);
+    var vnodeHashInterval =
+        this.dataPlacement.ring.algorithm_.VNODE_HASH_INTERVAL;
+
+    var vnode = parseInt(bignum(value, 16).div(bignum(vnodeHashInterval, 16)),
+        10);
+
     var pnode = this.dataPlacement.ring.vnodeToPnodeMap_[vnode].pnode;
     var data = this.dataPlacement.ring.pnodeToVnodeMap_[pnode][vnode];
     // dtrace._fash_probes['getnode-done'].fire(function () {
@@ -203,7 +152,9 @@ DataDirector.prototype.getObjectLocation = function getObjectLocation(owner, buc
  * @param {Function} callback The callback of the type f(err, hashedNode).
  *
  */
-DataDirector.prototype.getBucketLocation = function getBucketLocation(owner, bucket, callback) {
+DataDirector.prototype.getBucketLocation =
+    function getBucketLocation(owner, bucket, callback) {
+
     var self = this;
     var log = self.log_;
 
@@ -221,11 +172,15 @@ DataDirector.prototype.getBucketLocation = function getBucketLocation(owner, buc
     var value = crypto.createHash(this.dataPlacement.ring.algorithm_.NAME).
         update(tkey).digest('hex');
     // find the node that corresponds to this hash.
-    var vnodeHashInterval = this.dataPlacement.ring.algorithm_.VNODE_HASH_INTERVAL;
+    var vnodeHashInterval =
+        this.dataPlacement.ring.algorithm_.VNODE_HASH_INTERVAL;
     console.log('hash interval: ' + vnodeHashInterval);
     console.log('value: ' + value);
-    var vnode = parseInt(bignum(value, 16).div(bignum(vnodeHashInterval, 16)), 10);
+
+    var vnode = parseInt(bignum(value, 16).div(bignum(vnodeHashInterval, 16)),
+        10);
     console.log('Map to vnode: ' + vnode);
+
     var pnode = this.dataPlacement.ring.vnodeToPnodeMap_[vnode].pnode;
     var data = this.dataPlacement.ring.pnodeToVnodeMap_[pnode][vnode];
     // dtrace._fash_probes['getnode-done'].fire(function () {
@@ -256,77 +211,6 @@ function findVnode(options) {
         div(options.vnodeHashInterval), 10);
 }
 
-/**
- * Gets the hashed node given a series of batch operations.
- *
- * @param {Array} requests An array of {bucket,key} objects which must all
- * transform to the same key to determine which node a series of operations
- * will performed on.
- * @param {Function} callback The callback of the type f(err, hashedNode).
- */
-// Ring.prototype.getNodeBatch = function getNodeBatch(origRequests, callback) {
-//     var self = this;
-//     var log = self.log_;
-//     var requests = origRequests.slice();
-
-//     log.debug({
-//         requests: requests
-//     }, 'Ring.getNodeBatch: entered');
-
-//     var request = requests.shift();
-//     var tkey = schema.transformKey(request.bucket, request.key);
-
-//     for (var i = 0; i < requests.length; i++) {
-//         var currKey = schema.transformKey(requests[i].bucket, requests[i].key);
-//         if (tkey !== currKey) {
-//             setImmediate(callback,
-//                 new Error('all requests must transform to the same key'));
-//             return;
-//         }
-//     }
-
-//     log.debug({
-//         requests: requests,
-//         tkey: tkey
-//     }, 'Ring.getNodeBatch: key transformed');
-
-//     self.chash_.getNode(tkey, function (err, hashedNode) {
-//         log.debug({
-//             err: err,
-//             requests: requests,
-//             tkey: tkey,
-//             hashedNode: hashedNode
-//         }, 'Ring.getNodeBatch: exiting');
-
-//         callback(err, hashedNode);
-//     });
-// };
-
-// /**
-//  * Gets the hashed node given only a key. The key is not transformed in anyway.
-//  * @param {String} key The key.
-//  * @param {Function} callback The callback of the type f(err, hashedNode).
-//  *
-//  */
-// Ring.prototype.getNodeNoSchema = function getNodeNoSchema(key, callback) {
-//     var self = this;
-//     var log = self.log_;
-
-//     log.debug({
-//         key: key
-//     }, 'Ring.getNode: entered');
-
-//     self.chash_.getNode(key, function (err, hashedNode) {
-//         log.debug({
-//             err: err,
-//             key: key,
-//             hashedNode: hashedNode
-//         }, 'Ring.getNode: exiting');
-
-//         return callback(err, hashedNode);
-//     });
-// };
-
 DataDirector.prototype.getPnodes = function getPnodes() {
     var self = this;
     var log = self.log_;
diff --git a/main.js b/main.js
index dcafae7..f519c9a 100644
--- a/main.js
+++ b/main.js
@@ -189,7 +189,8 @@ function run(options) {
         // LOG.info('Serializing ring!');
         // res.ring.chash_.serialize(function (err, strring) {
         //     if (err) {
-        //         throw new verror.VError(err, 'unable to serialize hash ring');
+        //         throw new verror.VError(err,
+        //             'unable to serialize hash ring');
         //     }
         //     LOG.info('Serialized ring: ' + strring);
         //     return;
diff --git a/ring.json.dist b/ring.json.dist
new file mode 100644
index 0000000..e407e72
--- /dev/null
+++ b/ring.json.dist
@@ -0,0 +1,59 @@
+{
+    "algorithm_": {
+        "NAME": "sha256",
+        "MAX": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",
+        "VNODE_HASH_INTERVAL": "1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
+    },
+    "algorithmMax_": null,
+    "vnodeCount_": 8,
+    "vnodesBignum_": null,
+    "VNODE_HASH_INTERVAL": null,
+    "pnodes_": [
+        "tcp://10.12.26.19:2030",
+        "tcp://10.12.27.51:2030"
+    ],
+    "pnodeToVnodeMap_": {
+        "tcp://10.12.26.19:2030": {
+            "0": 1,
+            "2": 1,
+            "4": 1,
+            "6": 1
+        },
+        "tcp://10.12.27.51:2030": {
+            "1": 1,
+            "3": 1,
+            "5": 1,
+            "7": 1
+        }
+    },
+    "vnodeToPnodeMap_": {
+        "0": {
+            "pnode": "tcp://10.12.26.19:2030"
+        },
+        "1": {
+            "pnode": "tcp://10.12.27.51:2030"
+        },
+        "2": {
+            "pnode": "tcp://10.12.26.19:2030"
+        },
+        "3": {
+            "pnode": "tcp://10.12.27.51:2030"
+        },
+        "4": {
+            "pnode": "tcp://10.12.26.19:2030"
+        },
+        "5": {
+            "pnode": "tcp://10.12.27.51:2030"
+        },
+        "6": {
+            "pnode": "tcp://10.12.26.19:2030"
+        },
+        "7": {
+            "pnode": "tcp://10.12.27.51:2030"
+        }
+    },
+    "vnodeData_": [],
+    "msg": "",
+    "time": "2018-11-16T22:03:53.367Z",
+    "version": 0
+}
