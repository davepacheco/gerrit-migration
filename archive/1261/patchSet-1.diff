commit b119329330e226a7466a4b1c8fdcda2579adf8a6 (refs/changes/61/1261/1)
Author: Orlando Vazquez <ovazquez@gmail.com>
Date:   2017-01-16T14:56:33-08:00 (2 years, 9 months ago)
    
    DOCKER-944 Docker pull fails with vague error message with insecure registries

diff --git a/test/integration/cli-copy.test.js b/test/integration/cli-copy.test.js
index 7c19b48..7317af7 100644
--- a/test/integration/cli-copy.test.js
+++ b/test/integration/cli-copy.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -104,8 +104,15 @@ var state = {
 
 var nginxName = CONTAINER_PREFIX + 'nginx';
 var nginxName2 = CONTAINER_PREFIX + 'nginx2';
+var alpineName = CONTAINER_PREFIX + 'alpine';
 
 
+var toCreate = [
+    [nginxName, 'nginx'],
+    [nginxName2, 'nginx'],
+    [alpineName, 'alpine', 'sleep 1000000']
+];
+
 
 /**
  * Setup
@@ -139,14 +146,21 @@ test('setup', function (tt) {
 
 test('test initialization', function (tt) {
 
-    removeNginxTestContainers(tt);
+    removeTestContainers(tt);
 
     vasync.forEachParallel({
-        inputs: [nginxName, nginxName2],
-        func: function (name, next) {
+        inputs: toCreate,
+        func: function (create, next) {
+            var name = create[0];
+            var image = create[1];
+            var cmd = create[2];
+
             tt.test('create container ' + name, function (t) {
                 t.plan(3);
-                cli.run(t, { args: '-d --name ' + name + ' nginx' },
+
+                var args = sprintf(
+                    '-d --name %s %s %s', name, image, cmd || '');
+                cli.run(t, { args: args},
                 function (err, id) {
                     t.ifErr(err, 'docker run ' + name);
                     t.end();
@@ -162,9 +176,94 @@ test('test initialization', function (tt) {
 
 
 /**
- * Tests
+ * Tests ---------------------------------------------------------------------
  */
 
+test('copy out of container file with funky name', function (tt) {
+    /**
+     * These filenames need to be escaped as would be in a double-quoted bash
+     * string.
+     */
+
+    var remoteFilenames = [
+        'period.txt',
+        'under_score',
+        '(openparen',
+        '^caret',
+        'doyouwantobuildaâ˜ƒ',
+        '#filltheswamp',
+        'loudnoises\\!',
+        'equal=sign',
+        '\\"double-quote',
+        'has space',
+        'ast*risk'
+    ];
+
+    var remoteDir = '/var/tmp/';
+    var localFn = remoteDir + '/local.txt';
+    var contents = 'here come dat boi';
+
+    vasync.waterfall([
+        function (next) {
+            createLocalFile(next);
+        },
+        function (next) {
+            copyFilesIn(next);
+        },
+        function (next) {
+            copyFilesOutAndCheckContents(next);
+        }
+    ],
+    function (err) {
+        tt.ifErr(err, 'no errors copying files out with funky name');
+        tt.end();
+    });
+
+
+    function createLocalFile(cb) {
+        var cmd = sprintf('echo "%s" > %s', contents, localFn);
+        cli.exec(cmd, function (execErr) {
+            tt.ifErr(execErr, 'creating file to be copied');
+            cb(execErr);
+        });
+    }
+
+
+    function copyFilesIn(cb) {
+        vasync.forEachPipeline({
+            inputs: remoteFilenames,
+            func: function (filename, next) {
+                copyFileIn(tt, localFn,
+                            remoteDir + filename, alpineName, next);
+            }
+        }, function (err) {
+            tt.ifErr(err, 'no error copying test files into container');
+            cb();
+        });
+    }
+
+
+    function copyFilesOutAndCheckContents(cb) {
+        vasync.forEachPipeline({
+            inputs: remoteFilenames,
+            func: function (filename, next) {
+                copyFileOutGetContents(
+                    tt, remoteDir + filename, filename, alpineName,
+                    onCopyOut);
+
+                function onCopyOut(err, str) {
+                    tt.equal(str, contents, 'file contents matched');
+                    next();
+                }
+            }
+        }, function (err) {
+            tt.ifErr(err, 'no errors copying out and checking test files');
+            cb();
+        });
+    }
+
+});
+
 
 test('copy out of container file placement', function (tt) {
     var directoryName = 'local-dir-' + process.pid;
@@ -219,11 +318,11 @@ test('copy out of container file placement', function (tt) {
     vasync.waterfall([
         initializeFixtures,
         executeTestCases
-    ], function (err) {
+    ],
+    function (err) {
         tt.end();
     });
 
-
     function initializeFixtures(callback) {
         vasync.waterfall([
             function createDir(next) {
@@ -279,12 +378,14 @@ test('copy a file out of running container', function (tt) {
     tt.plan(7);
     var fnbase = '/var/tmp';
     var fn = 'copyout.test';
-    var ffn = fnbase + '/' + fn;
+
+    var remotefn = fnbase + '/' + fn;
+
     var hash;
 
     vasync.waterfall([
         function (next) {
-            createCopyOutFile(tt, ffn, nginxName, function (err, sha1) {
+            createCopyOutFile(tt, remotefn, nginxName, function (err, sha1) {
                 tt.ifErr(err, 'creating copy out file');
                 hash = sha1;
                 tt.comment('hash was ' + hash);
@@ -292,13 +393,13 @@ test('copy a file out of running container', function (tt) {
             });
         },
         function (next) {
-            copyFileOut(tt, ffn, fn, nginxName, function (err) {
+            copyFileOut(tt, remotefn, fn, nginxName, function (err) {
                 tt.ifErr(err, 'copying file out');
                 next();
             });
         },
         function (next) {
-            checkFileCopiedOut(tt, ffn, nginxName, hash, function (err) {
+            checkFileCopiedOut(tt, remotefn, hash, nginxName, function (err) {
                 tt.ifErr(err, 'copying file out');
                 next();
             });
@@ -314,12 +415,14 @@ test('copy a file out of stopped container', function (tt) {
 
     var fnbase = '/var/tmp';
     var fn = 'copyout.test';
-    var ffn = fnbase + '/' + fn;
+
+    var remotefn = fnbase + '/' + fn;
+
     var hash;
 
     vasync.waterfall([
         function (next) {
-            createCopyOutFile(tt, ffn, nginxName2, function (err, sha1) {
+            createCopyOutFile(tt, remotefn, nginxName2, function (err, sha1) {
                 tt.ifErr(err, 'creating copy out file');
                 hash = sha1;
                 next();
@@ -332,7 +435,7 @@ test('copy a file out of stopped container', function (tt) {
             });
         },
         function (next) {
-            copyFileOut(tt, ffn, fn, nginxName2, function (err, sha1) {
+            copyFileOut(tt, remotefn, fn, nginxName2, function (err, sha1) {
                 tt.ifErr(err, 'copying file out');
                 tt.equal(sha1, hash);
                 next();
@@ -343,6 +446,7 @@ test('copy a file out of stopped container', function (tt) {
     });
 });
 
+
 test('copy a file into running container', function (tt) {
     var cliVer = process.env.DOCKER_CLI_VERSION;
     if (cliVer && semver.lt(cliVer, '1.8.0')) {
@@ -355,13 +459,15 @@ test('copy a file into running container', function (tt) {
 
     var fnbase = '/var/tmp';
     var fn = 'copy-in.test';
-    var ffn = fnbase + '/' + fn;
+
+    var remotefn = fnbase + '/' + fn;
+    var localfn = fnbase + '/' + fn;
 
     var hash;
 
     vasync.waterfall([
         function (next) {
-            createCopyInFile(tt, ffn, function (err, sha1) {
+            createCopyInFile(tt, localfn, function (err, sha1) {
                 tt.ifErr(err, 'creating copy in file (running container)');
                 hash = sha1;
                 tt.comment('running container file sha1 ' + sha1);
@@ -369,13 +475,13 @@ test('copy a file into running container', function (tt) {
             });
         },
         function (next) {
-            copyFileIn(tt, ffn, fn, nginxName, function (err) {
+            copyFileIn(tt, localfn, remotefn, nginxName, function (err) {
                 tt.ifErr(err, 'copying file in');
                 next();
             });
         },
         function (next) {
-            checkFileCopiedIn(tt, ffn, fn, nginxName, hash, function (err) {
+            checkFileCopiedIn(tt, remotefn, nginxName, hash, function (err) {
                 tt.ifErr(err, 'checking file copied in');
                 next();
             });
@@ -398,13 +504,15 @@ test('copy a file into stopped container', function (tt) {
 
     var fnbase = '/var/tmp';
     var fn = 'copy-in.test';
-    var ffn = fnbase + '/' + fn;
+
+    var localfn = fnbase + '/' + fn;
+    var remotefn = fnbase + '/' + fn;
 
     var hash;
 
     vasync.waterfall([
         function (next) {
-            createCopyInFile(tt, ffn, function (err, sha1) {
+            createCopyInFile(tt, localfn, function (err, sha1) {
                 tt.ifErr(err, 'creating copy in file (stopped container)');
                 hash = sha1;
                 next();
@@ -417,7 +525,7 @@ test('copy a file into stopped container', function (tt) {
             });
         },
         function (next) {
-            copyFileIn(tt, ffn, fn, nginxName2, function (err) {
+            copyFileIn(tt, localfn, remotefn, nginxName2, function (err) {
                 tt.ifErr(err, 'copying file in');
                 next();
             });
@@ -429,7 +537,7 @@ test('copy a file into stopped container', function (tt) {
             });
         },
         function (next) {
-            checkFileCopiedIn(tt, ffn, fn, nginxName2, hash, function (err) {
+            checkFileCopiedIn(tt, remotefn, nginxName2, hash, function (err) {
                 tt.ifErr(err, 'checking file copied in');
                 next();
             });
@@ -444,7 +552,7 @@ test('copy a file into stopped container', function (tt) {
  * Cleanup.
  */
 test('copy container cleanup', function (tt) {
-    removeNginxTestContainers(tt);
+    removeTestContainers(tt);
 });
 
 
@@ -469,7 +577,7 @@ function startContainer(tt, containerName, callback) {
 }
 
 
-function removeNginxTestContainers(tt) {
+function removeTestContainers(tt) {
     tt.test('remove old containers', function (t) {
         cli.ps(t, {args: '-a'}, function (err, entries) {
             t.ifErr(err, 'docker ps');
@@ -501,11 +609,11 @@ function removeNginxTestContainers(tt) {
  * Copy out test auxillary support functions
  */
 
-function createCopyOutFile(tt, ffn, containerName, callback) {
+function createCopyOutFile(tt, remotefn, containerName, callback) {
     // Create a file and get a checksum of it
     var inside = [
         'dd if=/dev/urandom count=1024 bs=1024',
-        'tee ' + ffn,
+        'tee ' + remotefn,
         '/native/usr/bin/sum -x sha1'
     ].join('| \\\n');
     var args = sprintf('exec %s bash -c "%s"', containerName, inside);
@@ -518,10 +626,10 @@ function createCopyOutFile(tt, ffn, containerName, callback) {
 }
 
 
-function copyFileOut(tt, ffn, fn, containerName, callback) {
+function copyFileOut(tt, remotefn, localfn, containerName, callback) {
     var args = sprintf(
-        'cp %s:%s - | tar xOf - %s',
-        containerName, ffn, fn);
+        'cp "%s:%s" - | tar xOf - "%s"',
+        containerName, remotefn, localfn);
     var execOpts = { maxBuffer: 1024*1024+1, encoding: 'binary' };
     cli.docker(args, { execOpts: execOpts }, onDocker);
     function onDocker(err, stdout, stderr) {
@@ -533,9 +641,9 @@ function copyFileOut(tt, ffn, fn, containerName, callback) {
     }
 }
 
-function checkFileCopiedOut(tt, ffn, containerName, hash, callback) {
+function checkFileCopiedOut(tt, remotefn, hash, containerName, callback) {
     var args = sprintf('exec %s /native/usr/bin/sum -x sha1 %s',
-        containerName, ffn);
+                        containerName, remotefn);
     cli.docker(args, onDocker);
     function onDocker(err, stdout, stderr) {
         tt.ifErr(err);
@@ -546,13 +654,13 @@ function checkFileCopiedOut(tt, ffn, containerName, hash, callback) {
 }
 
 
-function createCopyInFile(tt, ffn, callback) {
+function createCopyInFile(tt, localfn, callback) {
     var hash;
     var cmd = sprintf(
         'dd if=/dev/urandom of=%s '
         + 'count=1024 bs=1024 >/dev/null && '
         + '/native/usr/bin/sum -x sha1 %s | awk "{ print $1 }"',
-        ffn, ffn);
+        localfn, localfn);
     cli.exec(cmd, function (err, stdout, stderr) {
         tt.ifErr(err);
         hash = stdout.toString();
@@ -561,8 +669,8 @@ function createCopyInFile(tt, ffn, callback) {
 }
 
 
-function copyFileIn(tt, ffn, fn, containerName, callback) {
-    var args = sprintf('cp %s %s:%s', ffn, containerName, ffn);
+function copyFileIn(tt, localfn, remotefn, containerName, callback) {
+    var args = sprintf('cp %s "%s:%s"', localfn, containerName, remotefn);
     var execOpts = { maxBuffer: 1024*1024*2, encoding: 'binary' };
     cli.docker(args, { execOpts: execOpts }, onDocker);
     function onDocker(err, stdout, stderr) {
@@ -571,15 +679,30 @@ function copyFileIn(tt, ffn, fn, containerName, callback) {
     }
 }
 
-function checkFileCopiedIn(tt, ffn, fn, containerName, hash, callback) {
+function checkFileCopiedIn(tt, remotefn, containerName, hash, callback) {
     var args =
-        sprintf('exec %s /native/usr/bin/sum -x sha1 %s', containerName, ffn);
+        sprintf('exec %s /native/usr/bin/sum -x sha1 %s',
+                containerName, remotefn);
     cli.docker(args, onDocker);
     function onDocker(err, stdout, stderr) {
         tt.ifErr(err);
         tt.comment('sha1 before ' + hash);
         tt.comment('sha1 after ' + stdout.toString());
-        tt.equal(stdout.toString(), hash);
+        tt.equal(stdout.toString().split(' ')[0], hash.split(' ')[0]);
         callback(err);
     }
 }
+
+function
+copyFileOutGetContents(tt, remotefn, extractfn, containerName, callback) {
+    var args = sprintf('cp "%s:%s" - | tar xOf - "%s"',
+        containerName, remotefn, extractfn);
+    var execOpts = { maxBuffer: 1024*1024+1, encoding: 'binary' };
+    cli.docker(args, { execOpts: execOpts }, onDocker);
+    function onDocker(err, stdout, stderr) {
+        tt.ifErr(err);
+        var str = stdout.toString().trim();
+
+        callback(err, str);
+    }
+}
