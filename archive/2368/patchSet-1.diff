From cb95174845d153f8ff32326851389f481b69a5be Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Wed, 9 Aug 2017 23:20:41 -0700
Subject: [PATCH] joyent/node-sshpk-agent#11 Uncaught, unspecified "error"
 event

---
 lib/client-fsm.js  | 16 ++++++++++------
 package.json       |  5 +++--
 test/basic.test.js | 16 ++++++++++++++++
 3 files changed, 29 insertions(+), 8 deletions(-)

diff --git a/lib/client-fsm.js b/lib/client-fsm.js
index f1095b3..b203980 100644
--- a/lib/client-fsm.js
+++ b/lib/client-fsm.js
@@ -9,6 +9,7 @@ var util = require('util');
 var EventEmitter = require('events').EventEmitter;
 var net = require('net');
 var errs = require('./errors');
+var VError = require('verror');
 var AgentProtocolError = errs.AgentProtocolError;
 
 var protoStreams = require('./protocol-streams');
@@ -279,14 +280,16 @@ ClientFSM.prototype.state_connecting = function (S) {
 	this.c_socket = net.connect(this.c_sockPath);
 
 	S.timeout(this.c_timeout, function () {
-		self.c_connectError = new Error('Timed out while ' +
-		    'connecting to socket: ' + self.c_sockPath + ' (' +
-		    self.c_timeout + ' ms)');
+		var err = new VError('connect() timed out (%d ms)',
+		    self.c_timeout);
+		self.c_connectError = new VError(err,
+		    'Error while connecting to socket: %s', self.c_sockPath);
 		S.gotoState('connectError');
 	});
 
 	S.on(this.c_socket, 'error', function (err) {
-		self.c_connectError = err;
+		self.c_connectError = new VError(err,
+		    'Error while connecting to socket: %s', self.c_sockPath);
 		S.gotoState('connectError');
 	});
 
@@ -310,7 +313,7 @@ ClientFSM.prototype.state_connectError = function (S) {
 	} else {
 		this.c_wantConnect = false;
 		setImmediate(function () {
-			self.emit('error', this.c_connectError);
+			self.emit('error', self.c_connectError);
 		});
 		S.gotoState('disconnected');
 	}
@@ -334,7 +337,8 @@ ClientFSM.prototype.state_connected = function (S) {
 	this.c_encodeStream.pipe(this.c_socket);
 
 	var errHandler = function (err) {
-		self.c_lastError = err;
+		self.c_lastError = new VError(err, 'Error emitted while ' +
+		    'connected to socket: %s', self.c_sockPath);
 		self.emit('error', err);
 		S.gotoState('disconnecting');
 	};
diff --git a/package.json b/package.json
index 4e17c1c..ecded1f 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "sshpk-agent",
-  "version": "1.6.0",
+  "version": "1.6.1",
   "description": "ssh-agent client for use with sshpk",
   "main": "lib/index.js",
   "scripts": {
@@ -29,7 +29,8 @@
     "assert-plus": "^1.0.0",
     "mooremachine": "^2.0.1",
     "readable-stream": "^2.1.4",
-    "sshpk": ">=1.13.0 < 1.14.0"
+    "sshpk": ">=1.13.0 < 1.14.0",
+    "verror": "^1.10.0"
   },
   "devDependencies": {
     "tape": "^3.5.0",
diff --git a/test/basic.test.js b/test/basic.test.js
index 12b1990..f4d83eb 100644
--- a/test/basic.test.js
+++ b/test/basic.test.js
@@ -66,6 +66,22 @@ test('Client takes path to socket from environment', function (t) {
 	t.end();
 });
 
+test('Client throws error containing socket path', function (t) {
+	var c = new sshpkAgent.Client({
+		socketPath: '/tmp/this.path.does.not.exist'
+	});
+	t.ok(c);
+	c.on('error', function (err) {
+		t.ok(err);
+		t.notStrictEqual(-1,
+		    err.toString().indexOf('this.path.does.not.exist'));
+		t.notStrictEqual(-1,
+		    err.toString().indexOf('ENOENT'));
+		t.end();
+	});
+	c.connect();
+});
+
 test('Client can connect', function (t) {
 	var c = new sshpkAgent.Client();
 	c.ref();
-- 
2.21.0

