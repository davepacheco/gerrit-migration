commit 37ba61c8e0b24f03fcfaa4d56d54d52e22718791
Author: Mike Gerdts <mike.gerdts@joyent.com>
Date:   2019-07-04T03:29:30+00:00 (3 months ago)
    
    OS-7864 test-vm bhyve quota checks failing on "zvol refreseration matches expected"

diff --git a/src/vm/common/vmtest.js b/src/vm/common/vmtest.js
index ba7ff4d4..6b672e24 100644
--- a/src/vm/common/vmtest.js
+++ b/src/vm/common/vmtest.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  *
  */
 
@@ -222,29 +222,3 @@ function checkDefaultZfsProperties(t, dataset, message, callback) {
         callback();
     });
 };
-
-/*
- * Adapted from usr/src/lib/libzfs/common/libzfs_dataset.c and related headers.
- */
-var SPA_BLKPTRSHIFT = 7;        /* blkptr_t is 128 bytes */
-var SPA_DVAS_PER_BP = 3;        /* Number of DVAs in a bp */
-var DN_MAX_INDBLKSHIFT = 17;    /* 128k */
-var DNODES_PER_LEVEL_SHIFT = DN_MAX_INDBLKSHIFT - SPA_BLKPTRSHIFT;
-var DNODES_PER_LEVEL = 1 << DNODES_PER_LEVEL_SHIFT;
-
-exports.zvol_volsize_to_reservation =
-function zvol_volsize_to_reservation(volsize, volblocksize, copies) {
-    var blocks = volsize / volblocksize;
-    var numdb = 7;
-
-    while (blocks > 1) {
-        blocks = Math.floor((blocks + DNODES_PER_LEVEL - 1) / DNODES_PER_LEVEL);
-        numdb += blocks;
-    }
-
-    numdb *= Math.min(SPA_DVAS_PER_BP, copies + 1);
-    volsize *= copies;
-
-    numdb *= 1 << DN_MAX_INDBLKSHIFT;
-    return (volsize + numdb);
-}
diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index 49129a8e..7d48bbd5 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -2359,7 +2359,7 @@ function createVolume(volume, opts, callback)
             }
 
             props.volsize = newsize;
-            volsizeToRefreservation(volume.zfs_filesystem, props, log,
+            VM.volsizeToRefreservation(volume.zfs_filesystem, props, log,
                 function newCloneRefres(_err, res) {
 
                 if (_err) {
@@ -2386,7 +2386,7 @@ function createVolume(volume, opts, callback)
             return;
         }
 
-        volsizeToRefreservation(volume.zfs_filesystem, {
+        VM.volsizeToRefreservation(volume.zfs_filesystem, {
             volsize: newsize,
             volblocksize: vbs,
             copies: 1
@@ -4256,7 +4256,8 @@ function zfsGet(dataset, props, log, callback)
  * Calculate the zfs refreservation based on the volsize, volblocksize, and
  * copies.  All values are in bytes.
  */
-function volsizeToRefreservation(vol, props, log, callback)
+exports.volsizeToRefreservation
+    = function volsizeToRefreservation(vol, props, log, callback)
 {
     assert.string(vol);
     assert.object(props, 'props');
@@ -4294,7 +4295,7 @@ function volsizeToRefreservation(vol, props, log, callback)
         }
         callback(new Error('failed to obtain new refreservation'));
     });
-}
+};
 
 exports.getSysinfo = function (args, options, callback)
 {
@@ -14887,7 +14888,7 @@ function resizeDisks(vmobj, updates, log, callback)
                     }, 'getRefresDelta: before changes');
 
                 props.volsize = newsize * 1024 * 1024;
-                volsizeToRefreservation(opts.volname, props, log,
+                VM.volsizeToRefreservation(opts.volname, props, log,
                     function calcDelta(_err, newRefres) {
 
                     if (_err) {
diff --git a/src/vm/tests/test-quota.js b/src/vm/tests/test-quota.js
index b1fbbb15..b29c2db7 100644
--- a/src/vm/tests/test-quota.js
+++ b/src/vm/tests/test-quota.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  *
  */
 
@@ -391,52 +391,57 @@ function checkZfs(opts, callback) {
             case 'bhyve':
                 zvol = zoneroot + '/disk0';
 
-                var expReservationsSize =
-                    vmtest.zvol_volsize_to_reservation(
-                        datasetValues[zvol].volsize,
-                        datasetValues[zvol].volblocksize,
-                        datasetValues[zvol].copies);
-
-                var zvRefreservation =
-                    datasetValues[zvol].refreservation;
-
-                var expQuota;
-                if (opts.payload.hasOwnProperty('flexible_disk_size')) {
-                    var flexsize = opts.payload.flexible_disk_size;
-                    t.ok(vmobj.flexible_disk_size === flexsize,
-                        'vmobj.flexible_disk_size is ' + flexsize);
-                    expQuota = flexsize * 1024 * 1024 + zrRefreservation
-                        + datasetValues[zvol].refreservation
-                        - datasetValues[zvol].volsize;
-                } else {
-                    t.ok(!vmobj.hasOwnProperty('flexible_disk_size'),
-                        'vmobj does not have flexible_disk_size');
-                    expQuota = zvRefreservation + zrRefquota;
-                }
+                VM.volsizeToRefreservation(zvol, datasetValues[zvol],
+                    createLogger(),
+                    function gotRefres(err2, expReservationsSize) {
 
-                t.equal(
-                    zrRefquota / 1024 / 1024 / 1024,
-                    expected.quota, 'bhyve quota uses refquota');
+                    if (err2) {
+                        t.ok(false, 'error getting refreservation: ' + err2);
+                        callback(err2);
+                        return;
+                    }
 
-                t.equal(
-                    zrRefreservation / 1024 / 1024 / 1024,
-                    expected.quota, 'no refreservation set');
+                    var zvRefreservation = datasetValues[zvol].refreservation;
 
-                t.equal(
-                    zvRefreservation,
-                    expReservationsSize,
-                    'zvol refreseration matches expected');
+                    var expQuota;
+                    if (opts.payload.hasOwnProperty('flexible_disk_size')) {
+                        var flexsize = opts.payload.flexible_disk_size;
+                        t.ok(vmobj.flexible_disk_size === flexsize,
+                            'vmobj.flexible_disk_size is ' + flexsize);
+                        expQuota = flexsize * 1024 * 1024 + zrRefreservation
+                            + datasetValues[zvol].refreservation
+                            - datasetValues[zvol].volsize;
+                    } else {
+                        t.ok(!vmobj.hasOwnProperty('flexible_disk_size'),
+                            'vmobj does not have flexible_disk_size');
+                        expQuota = zvRefreservation + zrRefquota;
+                    }
+
+                    t.equal(
+                        zrRefquota / 1024 / 1024 / 1024,
+                        expected.quota, 'bhyve quota uses refquota');
+
+                    t.equal(
+                        zrRefreservation / 1024 / 1024 / 1024,
+                        expected.quota, 'no refreservation set');
 
-                t.equal(zrQuota, expQuota, 'bhyve zone root quota value');
+                    t.equal(
+                        zvRefreservation,
+                        expReservationsSize,
+                        'zvol refreseration matches expected');
+
+                    t.equal(zrQuota, expQuota, 'bhyve zone root quota value');
+                    callback();
+                });
                 break;
 
             default:
                 t.equal(
                     zrQuota / 1024 / 1024 / 1024,
                     expected.quota, 'quota should match');
+                callback();
                 break;
         }
-        callback();
     });
 }
 
