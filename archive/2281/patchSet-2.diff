From fa5ef64a6fc4034f9223b8461ea26b02f9b6b961 Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Tue, 25 Jul 2017 16:09:19 -0700
Subject: [PATCH] CNS-209 GetSuffixesForVM is broken handling network pools

---
 lib/api-server.js          | 72 +++++++++++++++++++++++++++++---------
 lib/cn-filter.js           |  1 +
 lib/napi-legacy-filter.js  |  1 +
 lib/network-info-filter.js |  1 +
 4 files changed, 59 insertions(+), 16 deletions(-)

diff --git a/lib/api-server.js b/lib/api-server.js
index 08554f3..1619fb6 100644
--- a/lib/api-server.js
+++ b/lib/api-server.js
@@ -154,6 +154,12 @@ function APIServer(opts) {
 		ev.emit('error', new Error('Failed to retrieve owner from ' +
 		    'UFDS'));
 	});
+	this.pipeline.nif.on('drop', function (obj) {
+		var ev = reqs[obj.id];
+		delete (reqs[obj.id]);
+		ev.emit('error', new Error('Failed to retrieve information ' +
+		    'about networks from NAPI'));
+	});
 
 	this.pipeline.push = function (obj) {
 		obj.id = crypto.randomBytes(8).toString('base64');
@@ -164,6 +170,11 @@ function APIServer(opts) {
 		};
 		return (ev);
 	};
+
+	this.napiClient = restify.createJsonClient({
+		url: 'http://' + this.config.napi_opts.address,
+		agent: agent
+	});
 }
 
 function tryLookup(addr, retries, timeout) {
@@ -576,29 +587,58 @@ function getAllowedPeers_v1(req, res, next) {
 	next();
 }
 
+function getNapiPools(cb) {
+	this.napiClient.get('/network_pools', function (err, req, res, objs) {
+		if (err) {
+			cb(err);
+			return;
+		}
+		var map = {};
+		objs.forEach(function (obj) {
+			map[obj.uuid] = obj.networks;
+		});
+		cb(null, map);
+	});
+}
+
 function postSuffixesForVM_v1(req, res, next) {
+	var self = this;
 	var body = req.body;
 	assert.object(body, 'body');
 	assert.arrayOfString(body.networks, 'body.networks');
 	assert.string(body.owner_uuid, 'body.owner_uuid');
 
-	var vm = {};
-	vm.nics = [];
-	body.networks.forEach(function (netuuid) {
-		vm.nics.push({
-			network_uuid: netuuid
+	getNapiPools.call(this, function (err, pools) {
+		if (err) {
+			res.send(500, err);
+			next();
+		}
+
+		var vm = {};
+		vm.nics = [];
+		body.networks.forEach(function (netuuid) {
+			if (pools[netuuid] !== undefined) {
+				vm.nics.push({
+					network_uuid: pools[netuuid][0],
+					network_pools: [netuuid]
+				});
+			} else {
+				vm.nics.push({
+					network_uuid: netuuid
+				});
+			}
 		});
-	});
-	vm.owner_uuid = body.owner_uuid;
+		vm.owner_uuid = body.owner_uuid;
 
-	var ev = this.pipeline.push(vm);
-	ev.once('error', function (err) {
-		res.send(500, err);
-		next();
-	});
-	ev.once('processed', function (outVm) {
-		res.send({ suffixes: outVm.suffixes });
-		next();
+		var ev = self.pipeline.push(vm);
+		ev.once('error', function (perr) {
+			res.send(500, perr);
+			next();
+		});
+		ev.once('processed', function (outVm) {
+			res.send({ suffixes: outVm.suffixes });
+			next();
+		});
+		ev.send();
 	});
-	ev.send();
 }
diff --git a/lib/cn-filter.js b/lib/cn-filter.js
index 88f4258..04da12a 100644
--- a/lib/cn-filter.js
+++ b/lib/cn-filter.js
@@ -119,6 +119,7 @@ CNFilter.prototype._transform = function (vm, enc, cb) {
 			vm: vm.uuid,
 			server: vm.server_uuid
 		}, 'failed to find server, dropping VM');
+		this.emit('drop', vm);
 		cb();
 		return;
 	}
diff --git a/lib/napi-legacy-filter.js b/lib/napi-legacy-filter.js
index a4bd7a3..19764e5 100644
--- a/lib/napi-legacy-filter.js
+++ b/lib/napi-legacy-filter.js
@@ -85,6 +85,7 @@ NAPILegacyFilter.prototype._transform = function (vm, enc, cb) {
 				return (n.mac);
 			    })
 			}, 'got error retrieving NAPI records, dropping');
+			self.emit('drop', vm);
 			cb();
 			return;
 		}
diff --git a/lib/network-info-filter.js b/lib/network-info-filter.js
index d704d00..4a9e8de 100644
--- a/lib/network-info-filter.js
+++ b/lib/network-info-filter.js
@@ -72,6 +72,7 @@ NetworkInfoFilter.prototype._transform = function (vm, enc, cb) {
 				return (n.network_uuid);
 			    })
 			}, 'got error retrieving NAPI records, dropping');
+			self.emit('drop', vm);
 			cb();
 			return;
 		}
-- 
2.21.0

