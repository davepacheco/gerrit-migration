From e355b2fbbea257ec86e35609e2bda5dba52cbd66 Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Mon, 30 Jan 2017 16:18:18 -0800
Subject: [PATCH] joyent/node-sshpk#24 want a table of contents in the readme

---
 README.md => README.adoc | 417 +++++++++++++++++++++++++--------------
 1 file changed, 268 insertions(+), 149 deletions(-)
 rename README.md => README.adoc (58%)

diff --git a/README.md b/README.adoc
similarity index 58%
rename from README.md
rename to README.adoc
index 00a4055..921f841 100644
--- a/README.md
+++ b/README.adoc
@@ -1,29 +1,31 @@
-sshpk
-=========
+:toc: macro
+:numbered:
+
+# sshpk
 
 Parse, convert, fingerprint and use SSH keys (both public and private) in pure
 node -- no `ssh-keygen` or other external dependencies.
 
-Supports RSA, DSA, ECDSA (nistp-\*) and ED25519 key types, in PEM (PKCS#1, 
+Supports RSA, DSA, ECDSA (nistp-*) and ED25519 key types, in PEM (PKCS#1,
 PKCS#8) and OpenSSH formats.
 
 This library has been extracted from
-[`node-http-signature`](https://github.com/joyent/node-http-signature)
-(work by [Mark Cavage](https://github.com/mcavage) and
-[Dave Eddy](https://github.com/bahamas10)) and
-[`node-ssh-fingerprint`](https://github.com/bahamas10/node-ssh-fingerprint)
+https://github.com/joyent/node-http-signature[`node-http-signature`]
+(work by https://github.com/mcavage[Mark Cavage] and
+https://github.com/bahamas10[Dave Eddy]) and
+https://github.com/bahamas10/node-ssh-fingerprint[`node-ssh-fingerprint`]
 (work by Dave Eddy), with additions (including ECDSA support) by
-[Alex Wilson](https://github.com/arekinath).
+https://github.com/arekinath[Alex Wilson].
+
+toc::[]
 
-Install
--------
+## Installing
 
 ```
 npm install sshpk
 ```
 
-Examples
---------
+## Examples
 
 ```js
 var sshpk = require('sshpk');
@@ -106,12 +108,32 @@ keys.forEach(function (key) {
 });
 ```
 
-Usage
------
+## License
+
+`sshpk` is licensed under the MIT license.
+
+Note that some *optional* dependencies of the library are not as permissively
+licensed. These are under the `optionalDependencies` section in `package.json`.
+
+Sadly, `npm` gives no good way to manually exclude such dependencies, but
+`sshpk` itself never calls `require()` on any of them without a `try/catch`
+block so that you can remove them from your distribution as you wish.
+Relevant features of `sshpk` that use these dependencies will simply be
+disabled.
+
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
 
-## Public keys
+[[key]]
+## `Key` -- public keys
 
-### `parseKey(data[, format = 'auto'[, options]])`
+Represents a public key. The class allows metadata about the public key to
+be retrieved, as well as conversion between various storage formats. Public
+keys can also be used to verify signatures or perform Diffie-Hellman exchange.
+
+### Parsing
+
+[[key-parsekey]]
+#### `parseKey(data[, format = 'auto'[, options]])`
 
 Parses a key from a given data format and returns a new `Key` object.
 
@@ -119,21 +141,23 @@ Parameters
 
 - `data` -- Either a Buffer or String, containing the key
 - `format` -- String name of format to use, valid options are:
-  - `auto`: choose automatically from all below
-  - `pem`: supports both PKCS#1 and PKCS#8
-  - `ssh`: standard OpenSSH format,
-  - `pkcs1`, `pkcs8`: variants of `pem`
-  - `rfc4253`: raw OpenSSH wire format
-  - `openssh`: new post-OpenSSH 6.5 internal format, produced by 
+  * `auto`: choose automatically from all below
+  * `pem`: supports both PKCS#1 and PKCS#8
+  * `ssh`: standard OpenSSH format,
+  * `pkcs1`, `pkcs8`: variants of `pem`
+  * `rfc4253`: raw OpenSSH wire format
+  * `openssh`: new post-OpenSSH 6.5 internal format, produced by
                `ssh-keygen -o`
 - `options` -- Optional Object, extra options, with keys:
-  - `filename` -- Optional String, name for the key being parsed 
+  * `filename` -- Optional String, name for the key being parsed
                   (eg. the filename that was opened). Used to generate
                   Error messages
-  - `passphrase` -- Optional String, encryption passphrase used to decrypt an
+  * `passphrase` -- Optional String, encryption passphrase used to decrypt an
                     encrypted PEM file
 
-### `Key.isKey(obj)`
+### Class methods
+
+#### `Key.isKey(obj)`
 
 Returns `true` if the given object is a valid `Key` object created by a version
 of `sshpk` compatible with this one.
@@ -142,48 +166,56 @@ Parameters
 
 - `obj` -- Object to identify
 
-### `Key#type`
+### Properties
+
+#### `Key#type`
 
 String, the type of key. Valid options are `rsa`, `dsa`, `ecdsa`.
 
-### `Key#size`
+#### `Key#size`
 
 Integer, "size" of the key in bits. For RSA/DSA this is the size of the modulus;
 for ECDSA this is the bit size of the curve in use.
 
-### `Key#comment`
+#### `Key#comment`
 
 Optional string, a key comment used by some formats (eg the `ssh` format).
 
-### `Key#curve`
+#### `Key#curve`
 
 Only present if `this.type === 'ecdsa'`, string containing the name of the
 named curve used with this key. Possible values include `nistp256`, `nistp384`
 and `nistp521`.
 
-### `Key#toBuffer([format = 'ssh'])`
+### Methods
+
+#### `Key#toBuffer([format = 'ssh'])`
 
 Convert the key into a given data format and return the serialized key as
 a Buffer.
 
 Parameters
 
-- `format` -- String name of format to use, for valid options see `parseKey()`
+- `format` -- String name of format to use, for valid options see
+<<key-parsekey,`parseKey()`>>
 
-### `Key#toString([format = 'ssh])`
+#### `Key#toString([format = 'ssh])`
 
 Same as `this.toBuffer(format).toString()`.
 
-### `Key#fingerprint([algorithm = 'sha256'])`
+[[key-fingerprint]]
+#### `Key#fingerprint([algorithm = 'sha256'])`
 
-Creates a new `Fingerprint` object representing this Key's fingerprint.
+Creates a new <<fingerprint,`Fingerprint`>> object representing this Key's
+fingerprint.
 
 Parameters
 
 - `algorithm` -- String name of hash algorithm to use, valid options are `md5`,
                  `sha1`, `sha256`, `sha384`, `sha512`
 
-### `Key#createVerify([hashAlgorithm])`
+[[key-createverify]]
+#### `Key#createVerify([hashAlgorithm])`
 
 Creates a `crypto.Verifier` specialized to use this Key (and the correct public
 key algorithm to match it). The returned Verifier has the same API as a regular
@@ -198,25 +230,35 @@ Parameters
 
 `v.verify(signature[, format])` Parameters
 
-- `signature` -- either a Signature object, or a Buffer or String
+- `signature` -- either a <<signature,`Signature`>> object, or a Buffer or String
 - `format` -- optional String, name of format to interpret given String with.
               Not valid if `signature` is a Signature or Buffer.
 
-### `Key#createDiffieHellman()`
-### `Key#createDH()`
+#### `Key#createDiffieHellman()`
+#### `Key#createDH()`
 
 Creates a Diffie-Hellman key exchange object initialized with this key and all
 necessary parameters. This has the same API as a `crypto.DiffieHellman`
-instance, except that functions take `Key` and `PrivateKey` objects as
-arguments, and return them where indicated for.
+instance, except that functions take <<key,Key>> and
+<<private-key,PrivateKey>> objects as arguments, and return them where
+indicated for.
 
 This is only valid for keys belonging to a cryptosystem that supports DHE
 or a close analogue (i.e. `dsa`, `ecdsa` and `curve25519` keys). An attempt
 to call this function on other keys will yield an `Error`.
 
-## Private keys
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
 
-### `parsePrivateKey(data[, format = 'auto'[, options]])`
+[[private-key]]
+## `PrivateKey` -- private keys
+
+A subclass of <<key,`Key`>>, provides additional methods for working with entire
+private-public key pairs, including signing data as well as verifying.
+
+### Parsing
+
+#### `parsePrivateKey(data[, format = 'auto'[, options]])`
 
 Parses a private key from a given data format and returns a new
 `PrivateKey` object.
@@ -225,20 +267,22 @@ Parameters
 
 - `data` -- Either a Buffer or String, containing the key
 - `format` -- String name of format to use, valid options are:
-  - `auto`: choose automatically from all below
-  - `pem`: supports both PKCS#1 and PKCS#8
-  - `ssh`, `openssh`: new post-OpenSSH 6.5 internal format, produced by 
+  * `auto`: choose automatically from all below
+  * `pem`: supports both PKCS#1 and PKCS#8
+  * `ssh`, `openssh`: new post-OpenSSH 6.5 internal format, produced by
                       `ssh-keygen -o`
-  - `pkcs1`, `pkcs8`: variants of `pem`
-  - `rfc4253`: raw OpenSSH wire format
+  * `pkcs1`, `pkcs8`: variants of `pem`
+  * `rfc4253`: raw OpenSSH wire format
 - `options` -- Optional Object, extra options, with keys:
-  - `filename` -- Optional String, name for the key being parsed 
+  * `filename` -- Optional String, name for the key being parsed
                   (eg. the filename that was opened). Used to generate
                   Error messages
-  - `passphrase` -- Optional String, encryption passphrase used to decrypt an
+  * `passphrase` -- Optional String, encryption passphrase used to decrypt an
                     encrypted PEM file
 
-### `PrivateKey.isPrivateKey(obj)`
+### Class methods
+
+#### `PrivateKey.isPrivateKey(obj)`
 
 Returns `true` if the given object is a valid `PrivateKey` object created by a
 version of `sshpk` compatible with this one.
@@ -247,55 +291,60 @@ Parameters
 
 - `obj` -- Object to identify
 
-### `PrivateKey#type`
+### Properties
+
+#### `PrivateKey#type`
 
 String, the type of key. Valid options are `rsa`, `dsa`, `ecdsa`.
 
-### `PrivateKey#size`
+#### `PrivateKey#size`
 
 Integer, "size" of the key in bits. For RSA/DSA this is the size of the modulus;
 for ECDSA this is the bit size of the curve in use.
 
-### `PrivateKey#curve`
+#### `PrivateKey#curve`
 
 Only present if `this.type === 'ecdsa'`, string containing the name of the
 named curve used with this key. Possible values include `nistp256`, `nistp384`
 and `nistp521`.
 
-### `PrivateKey#toBuffer([format = 'pkcs1'])`
+### Methods
+
+#### `PrivateKey#toBuffer([format = 'pkcs1'])`
 
 Convert the key into a given data format and return the serialized key as
 a Buffer.
 
 Parameters
 
-- `format` -- String name of format to use, valid options are listed under 
+- `format` -- String name of format to use, valid options are listed under
               `parsePrivateKey`. Note that ED25519 keys default to `openssh`
               format instead (as they have no `pkcs1` representation).
 
-### `PrivateKey#toString([format = 'pkcs1'])`
+#### `PrivateKey#toString([format = 'pkcs1'])`
 
 Same as `this.toBuffer(format).toString()`.
 
-### `PrivateKey#toPublic()`
+#### `PrivateKey#toPublic()`
 
-Extract just the public part of this private key, and return it as a `Key`
-object.
+Extract just the public part of this private key, and return it as a
+<<key,`Key`>> object.
 
-### `PrivateKey#fingerprint([algorithm = 'sha256'])`
+#### `PrivateKey#fingerprint([algorithm = 'sha256'])`
 
 Same as `this.toPublic().fingerprint()`.
 
-### `PrivateKey#createVerify([hashAlgorithm])`
+#### `PrivateKey#createVerify([hashAlgorithm])`
 
 Same as `this.toPublic().createVerify()`.
 
-### `PrivateKey#createSign([hashAlgorithm])`
+[[privatekey-createsign]]
+#### `PrivateKey#createSign([hashAlgorithm])`
 
 Creates a `crypto.Sign` specialized to use this PrivateKey (and the correct
 key algorithm to match it). The returned Signer has the same API as a regular
 one, except that the `sign()` function takes no arguments, and returns a
-`Signature` object.
+<<signature,`Signature`>> object.
 
 Parameters
 
@@ -307,7 +356,7 @@ Parameters
 
 - none
 
-### `PrivateKey#derive(newType)`
+#### `PrivateKey#derive(newType)`
 
 Derives a related key of type `newType` from this key. Currently this is
 only supported to change between `ed25519` and `curve25519` keys which are
@@ -318,9 +367,22 @@ Parameters
 
 - `newType` -- String, type of key to derive, either `ed25519` or `curve25519`
 
-## Fingerprints
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
 
-### `parseFingerprint(fingerprint[, algorithms])`
+[[fingerprint]]
+## `Fingerprint` -- key and certificate fingerprints
+
+A fingerprint is a cryptographic hash of a key, used to check its integrity.
+They are generally presented in a textual format, either using hexadecimal
+or Base-64 notation.
+
+This class provides utilities for parsing and converting fingerprints, as well
+as using them to verify the integrity of a given key in constant time.
+
+### Parsing
+
+[[parsefingerprint]]
+#### `parseFingerprint(fingerprint[, algorithms])`
 
 Pre-parses a fingerprint, creating a `Fingerprint` object that can be used to
 quickly locate a key by using the `Fingerprint#matches` function.
@@ -332,7 +394,9 @@ Parameters
                   support to. If `fingerprint` uses a hash algorithm not on
                   this list, throws `InvalidAlgorithmError`.
 
-### `Fingerprint.isFingerprint(obj)`
+### Class methods
+
+#### `Fingerprint.isFingerprint(obj)`
 
 Returns `true` if the given object is a valid `Fingerprint` object created by a
 version of `sshpk` compatible with this one.
@@ -341,7 +405,10 @@ Parameters
 
 - `obj` -- Object to identify
 
-### `Fingerprint#toString([format])`
+### Methods
+
+[[fingerprint-tostring]]
+#### `Fingerprint#toString([format])`
 
 Returns a fingerprint as a string, in the given format.
 
@@ -351,26 +418,41 @@ Parameters
               `base64`. If this `Fingerprint` uses the `md5` algorithm, the
               default format is `hex`. Otherwise, the default is `base64`.
 
-### `Fingerprint#matches(key)`
+#### `Fingerprint#matches(key)`
 
-Verifies whether or not this `Fingerprint` matches a given `Key`. This function
-uses double-hashing to avoid leaking timing information. Returns a boolean.
+Verifies whether or not this `Fingerprint` matches a given <<key,`Key`>>. This
+function uses double-hashing to avoid leaking timing information. Returns a
+boolean.
 
 Parameters
 
-- `key` -- a `Key` object, the key to match this fingerprint against
+- `key` -- a <<key,`Key`>> object, the key to match this fingerprint against
 
-## Signatures
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
 
-### `parseSignature(signature, algorithm, format)`
+[[signature]]
+## `Signature` -- cryptographic signatures
+
+A Signature is the result of a cryptographic signing operation. A private key
+signs some data, and then the matching public key can be used to verify that
+it has not been altered.
+
+This class provides functions to convert Signatures between different storage
+formats, and instances of it can be used as arguments to functions on
+<<key,Keys>> in order to perform verification.
+
+### Parsing
+
+#### `parseSignature(signature, algorithm, format)`
 
 Parses a signature in a given format, creating a `Signature` object. Useful
 for converting between the SSH and ASN.1 (PKCS/OpenSSL) signature formats, and
-also returned as output from `PrivateKey#createSign().sign()`.
+also returned as output from
+<<privatekey-createsign,`PrivateKey#createSign().sign()`>>.
 
 A Signature object can also be passed to a verifier produced by
-`Key#createVerify()` and it will automatically be converted internally into the
-correct format for verification.
+<<key-createverify,`Key#createVerify()`>> and it will automatically be
+converted internally into the correct format for verification.
 
 Parameters
 
@@ -380,7 +462,9 @@ Parameters
                  are `rsa`, `dsa`, `ecdsa`
 - `format` -- a String, either `asn1` or `ssh`
 
-### `Signature.isSignature(obj)`
+### Class methods
+
+#### `Signature.isSignature(obj)`
 
 Returns `true` if the given object is a valid `Signature` object created by a
 version of `sshpk` compatible with this one.
@@ -389,7 +473,7 @@ Parameters
 
 - `obj` -- Object to identify
 
-### `Signature#toBuffer([format = 'asn1'])`
+#### `Signature#toBuffer([format = 'asn1'])`
 
 Converts a Signature to the given format and returns it as a Buffer.
 
@@ -397,11 +481,14 @@ Parameters
 
 - `format` -- a String, either `asn1` or `ssh`
 
-### `Signature#toString([format = 'asn1'])`
+#### `Signature#toString([format = 'asn1'])`
 
 Same as `this.toBuffer(format).toString('base64')`.
 
-## Certificates
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+[[certificate]]
+## `Certificate` -- X.509 and SSH identity certificates
 
 `sshpk` includes basic support for parsing certificates in X.509 (PEM) format
 and the OpenSSH certificate format. This feature is intended to be used mainly
@@ -413,7 +500,10 @@ support for key usage restrictions (or other kinds of restrictions). Please do
 the security world a favour, and DO NOT use this code for certificate
 verification in the traditional X.509 CA chain style.
 
-### `parseCertificate(data, format)`
+### Parsing
+
+[[parsecertificate]]
+#### `parseCertificate(data, format)`
 
 Parameters
 
@@ -421,88 +511,97 @@ Parameters
  - `format` -- a String, format to use, one of `'openssh'`, `'pem'` (X.509 in a
                PEM wrapper), or `'x509'` (raw DER encoded)
 
-### `createSelfSignedCertificate(subject, privateKey[, options])`
+### Creating
+
+#### `createSelfSignedCertificate(subject, privateKey[, options])`
 
 Parameters
 
- - `subject` -- an Identity, the subject of the certificate
- - `privateKey` -- a PrivateKey, the key of the subject: will be used both to be
-                   placed in the certificate and also to sign it (since this is
-                   a self-signed certificate)
+ - `subject` -- an <<identity,`Identity`>>, the subject of the certificate
+ - `privateKey` -- a <<private-key,`PrivateKey`>>, the key of the subject:
+                   will be used both to be placed in the certificate and also
+                   to sign it (since this is a self-signed certificate)
  - `options` -- optional Object, with keys:
-   - `lifetime` -- optional Number, lifetime of the certificate from now in
+   * `lifetime` -- optional Number, lifetime of the certificate from now in
                    seconds
-   - `validFrom`, `validUntil` -- optional Dates, beginning and end of
+   * `validFrom`, `validUntil` -- optional Dates, beginning and end of
                                   certificate validity period. If given
                                   `lifetime` will be ignored
-   - `serial` -- optional Buffer, the serial number of the certificate
+   * `serial` -- optional Buffer, the serial number of the certificate
 
-### `createCertificate(subject, key, issuer, issuerKey[, options])`
+#### `createCertificate(subject, key, issuer, issuerKey[, options])`
 
 Parameters
 
- - `subject` -- an Identity, the subject of the certificate
- - `key` -- a Key, the public key of the subject
- - `issuer` -- an Identity, the issuer of the certificate who will sign it
- - `issuerKey` -- a PrivateKey, the issuer's private key for signing
+ - `subject` -- an <<identity,`Identity`>>, the subject of the certificate
+ - `key` -- a <<key,`Key`>>, the public key of the subject
+ - `issuer` -- an <<identity,`Identity`>>, the issuer of the certificate who
+               will sign it
+ - `issuerKey` -- a <<private-key,`PrivateKey`>>, the issuer's private key for
+                  signing
  - `options` -- optional Object, with keys:
-   - `lifetime` -- optional Number, lifetime of the certificate from now in
+   * `lifetime` -- optional Number, lifetime of the certificate from now in
                    seconds
-   - `validFrom`, `validUntil` -- optional Dates, beginning and end of
+   * `validFrom`, `validUntil` -- optional Dates, beginning and end of
                                   certificate validity period. If given
                                   `lifetime` will be ignored
-   - `serial` -- optional Buffer, the serial number of the certificate
+   * `serial` -- optional Buffer, the serial number of the certificate
+
+### Properties
 
-### `Certificate#subjects`
+#### `Certificate#subjects`
 
 Array of `Identity` instances describing the subject of this certificate.
 
-### `Certificate#issuer`
+#### `Certificate#issuer`
 
 The `Identity` of the Certificate's issuer (signer).
 
-### `Certificate#subjectKey`
+#### `Certificate#subjectKey`
 
-The public key of the subject of the certificate, as a `Key` instance.
+The public key of the subject of the certificate, as a <<key,`Key`>> instance.
 
-### `Certificate#issuerKey`
+#### `Certificate#issuerKey`
 
-The public key of the signing issuer of this certificate, as a `Key` instance.
-May be `undefined` if the issuer's key is unknown (e.g. on an X509 certificate).
+The public key of the signing issuer of this certificate, as a <<key,`Key`>>
+instance. May be `undefined` if the issuer's key is unknown (e.g. on an X509
+certificate).
 
-### `Certificate#serial`
+#### `Certificate#serial`
 
 The serial number of the certificate. As this is normally a 64-bit or wider
 integer, it is returned as a Buffer.
 
-### `Certificate#isExpired([when])`
+### Methods
 
-Tests whether the Certificate is currently expired (i.e. the `validFrom` and
+#### `Certificate#isExpired([when])`
+
+Tests whether the `Certificate` is currently expired (i.e. the `validFrom` and
 `validUntil` dates specify a range of time that does not include the current
 time).
 
 Parameters
 
- - `when` -- optional Date, if specified, tests whether the Certificate was or
+ - `when` -- optional Date, if specified, tests whether the `Certificate` was or
              will be expired at the specified time instead of now
 
 Returns a Boolean.
 
-### `Certificate#isSignedByKey(key)`
+#### `Certificate#isSignedByKey(key)`
 
-Tests whether the Certificate was validly signed by the given (public) Key.
+Tests whether the `Certificate` was validly signed by the given (public) Key.
 
 Parameters
 
- - `key` -- a Key instance
+ - `key` -- a <<key,`Key`>> instance
 
 Returns a Boolean.
 
-### `Certificate#isSignedBy(certificate)`
+#### `Certificate#isSignedBy(certificate)`
 
-Tests whether this Certificate was validly signed by the subject of the given
-certificate. Also tests that the issuer Identity of this Certificate and the
-subject Identity of the other Certificate are equivalent.
+Tests whether this `Certificate` was validly signed by the subject of the given
+certificate. Also tests that the issuer `Identity` of this `Certificate` and the
+subject `Identity` of the other `Certificate` are equivalent.
 
 Parameters
 
@@ -510,18 +609,18 @@ Parameters
 
 Returns a Boolean.
 
-### `Certificate#fingerprint([hashAlgo])`
+#### `Certificate#fingerprint([hashAlgo])`
 
-Returns the X509-style fingerprint of the entire certificate (as a Fingerprint
-instance). This matches what a web-browser or similar would display as the
-certificate fingerprint and should not be confused with the fingerprint of the
-subject's public key.
+Returns the X509-style fingerprint of the entire certificate (as a
+<<fingerprint,`Fingerprint`>> instance). This matches what a web-browser or
+similar would display as the certificate fingerprint and should not be confused
+with the fingerprint of the subject's public key.
 
 Parameters
 
  - `hashAlgo` -- an optional String, any hash function name
 
-### `Certificate#toBuffer([format])`
+#### `Certificate#toBuffer([format])`
 
 Serializes the Certificate to a Buffer and returns it.
 
@@ -532,16 +631,25 @@ Parameters
 
 Returns a Buffer.
 
-### `Certificate#toString([format])`
+#### `Certificate#toString([format])`
 
  - `format` -- an optional String, output format, one of `'openssh'`, `'pem'` or
                `'x509'`. Defaults to `'pem'`.
 
 Returns a String.
 
-## Certificate identities
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+[[identity]]
+## `Identity` -- certificate subject/issuer identities
+
+Used to represent the identity of an entity that is the subject or issuer of a
+<<certificate,`Certificate`>>. This can be a `host` or a `user`, or some
+arbitrary X.509 distinguished name (DN).
 
-### `identityForHost(hostname)`
+### Constructors
+
+#### `identityForHost(hostname)`
 
 Constructs a host-type Identity for a given hostname.
 
@@ -551,7 +659,7 @@ Parameters
 
 Returns an Identity instance.
 
-### `identityForUser(uid)`
+#### `identityForUser(uid)`
 
 Constructs a user-type Identity for a given UID.
 
@@ -561,7 +669,7 @@ Parameters
 
 Returns an Identity instance.
 
-### `identityForEmail(email)`
+#### `identityForEmail(email)`
 
 Constructs an email-type Identity for a given email address.
 
@@ -571,7 +679,7 @@ Parameters
 
 Returns an Identity instance.
 
-### `identityFromDN(dn)`
+#### `identityFromDN(dn)`
 
 Parses an LDAP-style DN string (e.g. `'CN=foo, C=US'`) and turns it into an
 Identity instance.
@@ -582,34 +690,41 @@ Parameters
 
 Returns an Identity instance.
 
-### `Identity#toString()`
-
-Returns the identity as an LDAP-style DN string.
-e.g. `'CN=foo, O=bar corp, C=us'`
+### Properties
 
-### `Identity#type`
+#### `Identity#type`
 
 The type of identity. One of `'host'`, `'user'`, `'email'` or `'unknown'`
 
-### `Identity#hostname`
-### `Identity#uid`
-### `Identity#email`
+#### `Identity#hostname`
+#### `Identity#uid`
+#### `Identity#email`
 
 Set when `type` is `'host'`, `'user'`, or `'email'`, respectively. Strings.
 
-### `Identity#cn`
+#### `Identity#cn`
 
 The value of the first `CN=` in the DN, if any.
 
-Errors
-------
+### Methods
+
+#### `Identity#toString()`
+
+Returns the identity as an LDAP-style DN string.
+e.g. `'CN=foo, O=bar corp, C=us'`
+
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+
+## Errors
 
 ### `InvalidAlgorithmError`
 
 The specified algorithm is not valid, either because it is not supported, or
 because it was not included on a list of allowed algorithms.
 
-Thrown by `Fingerprint.parse`, `Key#fingerprint`.
+Thrown by <<parsefingerprint,`parseFingerprint`>>,
+<<key-fingerprint,`Key#fingerprint`>>.
 
 Properties
 
@@ -620,7 +735,8 @@ Properties
 The fingerprint string given could not be parsed as a supported fingerprint
 format, or the specified fingerprint format is invalid.
 
-Thrown by `Fingerprint.parse`, `Fingerprint#toString`.
+Thrown by <<parsefingerprint,`parseFingerprint`>>,
+<<fingerprint-tostring,`Fingerprint#toString`>>.
 
 Properties
 
@@ -633,8 +749,9 @@ The key data given could not be parsed as a valid key.
 
 Properties
 
-- `keyName` -- `filename` that was given to `parseKey`
-- `format` -- the `format` that was trying to parse the key (see `parseKey`)
+- `keyName` -- `filename` that was given to <<key-parsekey,`parseKey`>>
+- `format` -- the `format` that was trying to parse the key (see
+              <<key-parsekey,`parseKey`>>)
 - `innerErr` -- the inner Error thrown by the format parser
 
 ### `KeyEncryptedError`
@@ -644,7 +761,7 @@ parsing operation would succeed if it was given the `passphrase` option.
 
 Properties
 
-- `keyName` -- `filename` that was given to `parseKey`
+- `keyName` -- `filename` that was given to <<key-parsekey,`parseKey`>>
 - `format` -- the `format` that was trying to parse the key (currently can only
               be `"pem"`)
 
@@ -654,13 +771,15 @@ The certificate data given could not be parsed as a valid certificate.
 
 Properties
 
-- `certName` -- `filename` that was given to `parseCertificate`
+- `certName` -- `filename` that was given to
+                 <<parsecertificate,`parseCertificate`>>
 - `format` -- the `format` that was trying to parse the key
-              (see `parseCertificate`)
+              (see <<parsecertificate,`parseCertificate`>>)
 - `innerErr` -- the inner Error thrown by the format parser
 
-Friends of sshpk
-----------------
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+## Friends of sshpk
 
- * [`sshpk-agent`](https://github.com/arekinath/node-sshpk-agent) is a library
+ * https://github.com/arekinath/node-sshpk-agent[`sshpk-agent`] is a library
    for speaking the `ssh-agent` protocol from node.js, which uses `sshpk`
-- 
2.21.0

