From 10a29e09b03cb51c8e826b23db03a7e25786d548 Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Fri, 28 Sep 2018 16:17:51 -0700
Subject: [PATCH] joyent/gerritbot#7 websocket connection failures lead to
 double-connections and sadness joyent/gerritbot#6 want status display

---
 agent.js        | 120 +++++++++++++++++++++++++++++++-----------------
 package.json    |   1 +
 server.js       |  88 +++++++++++++++++++++++++++++++++--
 status.html.tpl |  65 ++++++++++++++++++++++++++
 4 files changed, 228 insertions(+), 46 deletions(-)
 create mode 100644 status.html.tpl

diff --git a/agent.js b/agent.js
index eb1c5cb..36c515d 100644
--- a/agent.js
+++ b/agent.js
@@ -10,6 +10,8 @@
 const mod_fs = require('fs');
 const mod_ws = require('ws');
 const mod_cp = require('child_process');
+const mod_fsm = require('mooremachine');
+const mod_util = require('util');
 
 var SERVER = process.argv[2];
 var PORT = parseInt(process.argv[3], 10);
@@ -25,51 +27,86 @@ process.env.TERM = 'vt100';
 
 var UUID = mod_cp.spawnSync('zonename').stdout.toString('ascii').trim();
 
-var retries = 3;
-var timeout = 5000;
-var delay = 5000;
+function AgentFSM() {
+	this.af_retries = 5;
+	this.af_timeout = 5000;
+	this.af_delay = 3000;
+	this.af_lastError = undefined;
+	this.af_client = undefined;
+	mod_fsm.FSM.call(this, 'init');
+}
+mod_util.inherits(AgentFSM, mod_fsm.FSM);
 
-function connect() {
-	var client;
+AgentFSM.prototype.connect = function () {
+	this.emit('connectAsserted');
+};
 
-	var timer = setTimeout(function () {
-		timer = undefined;
-		client.close();
-		client.terminate();
-		onClose();
-	}, timeout);
-	timeout *= 2;
+AgentFSM.prototype.state_init = function (S) {
+	S.on(this, 'connectAsserted', function () {
+		S.gotoState('connecting');
+	});
+};
 
-	client = new mod_ws('ws://' + SERVER + ':' + PORT + '/');
-	client.on('open', function onOpen() {
-		clearTimeout(timer);
-		client.send(JSON.stringify({
-			cookie: COOKIE,
-			uuid: UUID
-		}));
+AgentFSM.prototype.state_connecting = function (S) {
+	var self = this;
+
+	this.af_client = new mod_ws('ws://' + SERVER + ':' + PORT + '/');
+
+	S.on(this.af_client, 'open', function () {
+		S.gotoState('connected');
 	});
-	client.on('message', onMessage.bind(null, client));
-	client.on('error', onError);
-	client.on('close', onClose);
-	function onClose() {
-		if (timer === undefined)
-			clearTimeout(timer);
-		client.removeListener('message', onMessage);
-		client.removeListener('error', onError);
-		client.removeListener('close', onClose);
-		if (--retries > 0) {
-			setTimeout(connect, delay);
-			delay *= 2;
-		} else {
-			process.exit(1);
-		}
-	}
-	function onError(err) {
-		console.error(err.stack);
-		client.terminate();
-		onClose();
+	S.on(this.af_client, 'error', function (err) {
+		self.af_lastError = err;
+		S.gotoState('error');
+	});
+	S.on(this.af_client, 'close', function () {
+		self.af_lastError = new Error('"close" emitted before connect');
+		S.gotoState('error');
+	});
+	S.timeout(this.af_timeout, function () {
+		self.af_lastError = new Error('Connect timeout');
+		S.gotoState('error');
+	});
+};
+
+AgentFSM.prototype.state_error = function (S) {
+	console.error(this.af_lastError.stack);
+
+	if (--this.af_retries <= 0) {
+		console.error('Ran out of retries, giving up');
+		process.exit(1);
+		return;
 	}
-}
+
+	this.af_client.on('error', function () { });
+	this.af_client.terminate();
+	this.af_client = undefined;
+
+	S.timeout(this.af_delay, function () {
+		S.gotoState('connecting');
+	});
+	this.af_timeout *= 2;
+};
+
+AgentFSM.prototype.state_connected = function (S) {
+	var self = this;
+
+	S.on(this.af_client, 'message', function (msg) {
+		onMessage(self.af_client, msg);
+	});
+	S.on(this.af_client, 'error', function (err) {
+		self.af_lastError = err;
+		S.gotoState('error');
+	});
+	S.on(this.af_client, 'close', function () {
+		self.af_lastError = new Error('Websocket closed unexpectedly');
+		S.gotoState('error');
+	});
+	this.af_client.send(JSON.stringify({
+		cookie: COOKIE,
+		uuid: UUID
+	}));
+};
 
 function onMessage(client, msg) {
 	msg = JSON.parse(msg);
@@ -213,4 +250,5 @@ function onMessage(client, msg) {
 	}
 }
 
-connect();
+var fsm = new AgentFSM();
+fsm.connect();
diff --git a/package.json b/package.json
index 593173e..0415470 100644
--- a/package.json
+++ b/package.json
@@ -12,6 +12,7 @@
     "assert-plus": "^1.0.0",
     "bunyan": "^1.8.1",
     "gerritbot": "^1.0.0",
+    "jade": "^1.11.0",
     "lstream": "0.0.4",
     "mooremachine": "^2.0.0",
     "restify-clients": "^1.3.0",
diff --git a/server.js b/server.js
index 86f2bc9..de1097c 100644
--- a/server.js
+++ b/server.js
@@ -20,6 +20,8 @@ const mod_events = require('events');
 const mod_http = require('http');
 const mod_vasync = require('vasync');
 const mod_gbot = require('gerritbot');
+const mod_jade = require('jade');
+const mod_qs = require('querystring');
 
 var config = JSON.parse(
     mod_fs.readFileSync('etc/config.json').toString('utf-8'));
@@ -65,10 +67,11 @@ var docker = mod_restify.createJsonClient({
 const COOKIE = mod_crypto.randomBytes(8).toString('base64');
 
 var spawning = {};
+var queue = [];
 
 function spawnWorker() {
 	var spawnCookie = mod_crypto.randomBytes(8).toString('base64');
-	spawning[spawnCookie] = true;
+	spawning[spawnCookie] = 'provisioning';
 	var agentUrl =
 	    'http://' + config.my_name + ':' + config.port + '/agent.js';
 	var payload = {
@@ -90,7 +93,7 @@ function spawnWorker() {
 			'pkgin -y up && ' +
 			'pkgin -y in nodejs && ' +
 			'curl -O ' + agentUrl + ' && ' +
-			'npm install ws && ' +
+			'npm install ws mooremachine && ' +
 			'/usr/lib/pfexecd && ' +
 			'exec su - build -c "' +
 				'exec node /tmp/agent.js ' + config.my_name +
@@ -122,6 +125,7 @@ function spawnWorker() {
 		} else {
 			var cid = obj.Id.slice(0, 12);
 			log.info('created docker container %s', cid);
+			spawning[spawnCookie] = 'booting';
 			docker.post('/containers/' + cid + '/start', {},
 			    function (err2) {
 				if (err2) {
@@ -131,7 +135,7 @@ function spawnWorker() {
 					    cid);
 				} else {
 					delete (spawning[spawnCookie]);
-					spawning[cid] = true;
+					spawning[cid] = 'booting';
 					log.info('started docker container %s',
 					    cid);
 				}
@@ -141,9 +145,32 @@ function spawnWorker() {
 }
 
 var slaves = [];
+var evs;
 var httpServer = mod_http.createServer();
 var server = new mod_ws.Server({ server: httpServer });
 
+var tplCache = {};
+function getTpl(fn) {
+	var stat = mod_fs.statSync(fn);
+	var cache = tplCache[fn];
+	if (cache && stat.mtime.getTime() <= cache.mtime.getTime())
+		return (cache.func);
+
+	var tpl = mod_fs.readFileSync(fn, 'utf-8');
+	var func;
+	try {
+		func = mod_jade.compile(tpl, {
+			filename: fn,
+			pretty: true
+		});
+	} catch (e) {
+		log.error(e, 'failed to compile template');
+		func = function () { return ('Error'); };
+	}
+	tplCache[fn] = { mtime: stat.mtime, func: func };
+	return (func);
+}
+
 server.on('connection', function onConnection(ws) {
 	var conn = new SlaveConnection({
 		config: config,
@@ -157,6 +184,49 @@ httpServer.on('request', function (req, res) {
 	if (req.url === '/agent.js') {
 		res.writeHead(200);
 		mod_fs.createReadStream('./agent.js').pipe(res);
+	} else if (req.url === '/status') {
+		var tpl = getTpl('./status.html.tpl');
+		var vars = {
+			slaves: slaves,
+			overrides: repoHasMakeCheck,
+			queue: queue,
+			spawning: spawning
+		};
+		var html;
+		try {
+			html = tpl(vars);
+		} catch (e) {
+			html = e.stack;
+		}
+		res.writeHead(200, {
+			'content-type': 'text/html'
+		});
+		res.write(html);
+		res.end();
+	} else if (req.url === '/override' && req.method === 'POST') {
+		var formdata = '';
+		req.on('readable', function () {
+			var chunk;
+			while ((chunk = req.read()) !== null) {
+				formdata += chunk.toString('utf-8');
+			}
+		});
+		req.on('end', function () {
+			var args = mod_qs.parse(formdata);
+			if (args && args.repo &&
+			    repoHasMakeCheck[args.repo] !== undefined) {
+				delete (repoHasMakeCheck[args.repo]);
+				res.writeHead(303, { 'location': '/status' });
+				res.end();
+			} else {
+				res.writeHead(500);
+				res.end();
+			}
+		});
+	} else if (req.url === '/bootstrap' && req.method === 'POST') {
+		evs.emit('bootstrap');
+		res.writeHead(303, { 'location': '/status' });
+		res.end();
 	} else {
 		res.writeHead(404);
 		res.end();
@@ -201,6 +271,15 @@ SlaveConnection.prototype.state_idle = function (S) {
 
 SlaveConnection.prototype.state_auth = function (S) {
 	var self = this;
+	var others = slaves.filter(function (sc) {
+		return (!(sc.isInState('closed') || sc.isInState('closing')) &&
+		    sc.sc_uuid === self.sc_uuid && sc !== self);
+	});
+	if (others.length > 0) {
+		self.sc_log.error('duplicate client');
+		S.gotoState('closing');
+		return;
+	}
 	S.timeout(5000, function () {
 		S.gotoState('closing');
 	});
@@ -977,7 +1056,7 @@ SlaveConnection.prototype.addPath = function (post, pre) {
 for (var i = 0; i < config.spares; ++i)
 	spawnWorker();
 
-var evs = gerrit.eventStream();
+evs = gerrit.eventStream();
 evs.on('bootstrap', function () {
 	var q = 'status:open AND NOT label:CI-Testing>=-1';
 	var incl = ['patch-sets'];
@@ -1007,7 +1086,6 @@ evs.stream.on('readable', function () {
 	}
 });
 
-var queue = [];
 function handleNewPatchset(change, ps) {
 	if (repoHasMakeCheck[change.project] === false)
 		return;
diff --git a/status.html.tpl b/status.html.tpl
new file mode 100644
index 0000000..34c30d4
--- /dev/null
+++ b/status.html.tpl
@@ -0,0 +1,65 @@
+html(lang="en")
+  head
+    title Gerrit bot status
+    style(type="text/css").
+      body { font-family: Sans-serif; }
+      table { text-align: left; padding: 1px; }
+      tr:nth-child(even) { background: #eee; }
+      th { padding: 0.25em; }
+      td { padding: 0.5em; }
+      form { padding: 0; margin: 0; }
+      .section { float: left; margin: 2em; }
+  body
+    h2 Gerrit bot status
+    .section
+      h3 Queue
+      table
+        tr
+          th Repo
+          th Change num
+          th Patch set
+        each a in queue
+          tr
+            td= a[0].project
+            td= a[0].number
+            td= a[1].number
+    .section
+      h3 Overrides
+      table
+        tr
+          th Repo
+          th Status
+          th
+        each repo in Object.keys(overrides)
+          tr
+            td= repo
+            if overrides[repo] === true
+              td Always build
+            else
+              td(style="color: #500") Never build
+            td
+              form(action="/override", method="post")
+                input(type="hidden", name="repo", value=repo)
+                button(type="submit") Clear
+      form(action="/bootstrap", method="post")
+        button(type="submit") Re-query all changes
+    .section
+      h3 Workers
+      table
+        tr
+          th UUID
+          th State
+          th Assignment
+        each uuid in Object.keys(spawning)
+          tr
+            td= uuid
+            td= spawning[uuid]
+            td none
+        each slave in slaves
+          tr
+            td= slave.sc_uuid
+            td= slave.getState()
+            if slave.sc_change !== undefined
+              td #{slave.sc_change.project}: #{slave.sc_change.number}/#{slave.sc_patchset.number}
+            else
+              td none
-- 
2.21.0

