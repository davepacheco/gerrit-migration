From 764f6647e94a0cc417e74e1437dbc9b1a0e55d08 Mon Sep 17 00:00:00 2001
From: Marsell Kukuljevic <marsell@joyent.com>
Date: Mon, 11 Mar 2019 16:16:32 +0100
Subject: [PATCH] TRITON-9 affinity is racy

---
 config/test.json              |  2 +-
 lib/designation.js            | 47 +++++++++++++++++----------------
 lib/endpoints/allocations.js  | 12 +++------
 lib/models/vm.js              | 49 +++++++++++++++++++++++------------
 package.json                  |  6 ++---
 sapi_manifests/cnapi/template |  4 +--
 6 files changed, 65 insertions(+), 55 deletions(-)

diff --git a/config/test.json b/config/test.json
index a17cf26..d40db48 100644
--- a/config/test.json
+++ b/config/test.json
@@ -34,7 +34,6 @@
     "host": "10.99.99.19"
   },
   "dapi": {
-      "useVmapi": true,
       "changeDefaults": {
           "server_spread": "",
           "filter_headnode": "false",
@@ -77,6 +76,7 @@
           "hard-filter-min-ram",
           "hard-filter-min-cpu",
           "hard-filter-min-disk",
+          "calculate-locality-hints",
           "hard-filter-locality-hints",
           "hard-filter-owners-servers",
           ["or", "hard-filter-reservoir",
diff --git a/lib/designation.js b/lib/designation.js
index cfd1121..1eef55b 100644
--- a/lib/designation.js
+++ b/lib/designation.js
@@ -58,30 +58,32 @@ Designation.init = function init(app) {
         log: app.log
     };
 
-    if (config.useVmapi) {
-        opts.getVm = function getVm(vmUuid, cb) {
-            ModelVm.getVmViaVmapi({ uuid: vmUuid }, cb);
-        };
+    opts.getVm = function getVm(params, cb) {
+        ModelVm.getVmViaVmapi(params, cb);
+    };
+
+    opts.listVms = function listVms(params, extras, cb) {
+        ModelVm.listVmsViaVmapi(params, cb);
+    };
 
-        opts.getServerVms = function getServerVms(serverUuid, cb) {
-            var vmOpts = {
-                server_uuid: serverUuid,
-                predicate: {
-                    and: [
-                        { ne: ['state', 'destroyed'] },
-                        { ne: ['state', 'failed'] },
-                        // We include this one since vmapi sometimes provides
-                        // nulls in some of the attributes here, which dapi
-                        // is not expecting. Waitlist tickets still cover
-                        // the existence of these VMs, without this problem.
-                        { ne: ['state', 'provisioning'] }
-                    ]
-                }
-            };
-
-            ModelVm.listVmsViaVmapi(vmOpts, cb);
+    opts.getServerVms = function getServerVms(serverUuid, cb) {
+        var vmOpts = {
+            server_uuid: serverUuid,
+            predicate: {
+                and: [
+                    { ne: ['state', 'destroyed'] },
+                    { ne: ['state', 'failed'] },
+                    // We include this one since vmapi sometimes provides
+                    // nulls in some of the attributes here, which dapi
+                    // is not expecting. Waitlist tickets still cover
+                    // the existence of these VMs, without this problem.
+                    { ne: ['state', 'provisioning'] }
+                ]
+            }
         };
-    }
+
+        ModelVm.listVmsViaVmapi(vmOpts, cb);
+    };
 
     Designation.allocator = new dapiAlloc(opts, config.allocationDescription,
                                           Designation.defaults);
@@ -95,7 +97,6 @@ Designation.init = function init(app) {
     }, config.allocationDescription, Designation.defaults);
 
     Designation.filterHeadnode = Designation.defaults.filter_headnode;
-    Designation.useVmapi = config.useVmapi;
 };
 
 
diff --git a/lib/endpoints/allocations.js b/lib/endpoints/allocations.js
index 0654fd8..b9bcad8 100644
--- a/lib/endpoints/allocations.js
+++ b/lib/endpoints/allocations.js
@@ -154,7 +154,7 @@ Allocations.allocate = function handlerAllocationsAllocate(req, res, next) {
     async.series([
         function getAllUnreservedServers(cb) {
             getServers(log, servers, false, allocator.filterHeadnode,
-                       allocator.useVmapi, function (err2, _details) {
+                       function serversCb(err2, _details) {
                 if (err2) {
                     cb(new restify.InternalError(err2.message));
                     return;
@@ -299,8 +299,8 @@ Allocations.capacity = function handlerAllocationsCapacity(req, res, next) {
         }
     }
 
-    getServers(log, servers, null, null, Designation.useVmapi,
-               function (err, serverDetails) {
+    getServers(log, servers, null, null,
+               function serverCb(err, serverDetails) {
         if (err) {
             next(new restify.InternalError(err.message));
             return;
@@ -333,7 +333,7 @@ Allocations.capacity = function handlerAllocationsCapacity(req, res, next) {
 };
 
 
-function getServers(log, serverUuids, reserved, filterHeadnode, useVmapi, cb) {
+function getServers(log, serverUuids, reserved, filterHeadnode, cb) {
     var options = {
         uuid: serverUuids,
         default: false,
@@ -355,10 +355,6 @@ function getServers(log, serverUuids, reserved, filterHeadnode, useVmapi, cb) {
         options.headnode = false;
     }
 
-    if (!useVmapi) {
-        options.extras.vms = true;
-    }
-
     log.debug(options, 'Searching for servers');
 
     var start = new Date();
diff --git a/lib/models/vm.js b/lib/models/vm.js
index e1683ba..f7df789 100644
--- a/lib/models/vm.js
+++ b/lib/models/vm.js
@@ -250,10 +250,14 @@ function (task, checkExists, req, res, next, synccb) {
  */
 
 ModelVM.listVmsViaVmapi =
-function (opts, callback) {
+function listVmsViaVmapi(opts, callback) {
     var self = this;
 
-    assert.string(opts.server_uuid, 'opts.server_uuid');
+    assert.optionalUuid(opts.server_uuid, 'opts.server_uuid');
+    assert.optionalUuid(opts.owner_uuid, 'opts.owner_uuid');
+    assert.optionalString(opts.fields, 'opts.fields');
+    assert.optionalString(opts.state, 'opts.state');
+    assert.optionalObject(opts.predicate, 'opts.predicate');
 
     var vmapi = new sdcClients.VMAPI({
         url: self.app.config.vmapi.url,
@@ -261,11 +265,22 @@ function (opts, callback) {
     });
 
     var args = {
-        server_uuid: opts.server_uuid,
-        fields: 'uuid,owner_uuid,quota,max_physical_memory,zone_state,state,' +
-            'brand,cpu_cap,last_modified'
+        fields: opts.fields || 'uuid,owner_uuid,quota,max_physical_memory,' +
+            'zone_state,state,brand,cpu_cap,last_modified'
     };
 
+    if (opts.server_uuid) {
+        args.server_uuid = opts.server_uuid;
+    }
+
+    if (opts.owner_uuid) {
+        args.owner_uuid = opts.owner_uuid;
+    }
+
+    if (opts.state) {
+        args.state = opts.state;
+    }
+
     if (opts.predicate) {
         args.predicate = JSON.stringify(opts.predicate);
     }
@@ -279,25 +294,25 @@ function (opts, callback) {
  */
 
 ModelVM.getVmViaVmapi =
-function (opts, callback) {
+function getVmViaVmapi(opts, callback) {
     var self = this;
 
-    assert.string(opts.uuid, 'opts.uuid');
+    assert.uuid(opts.uuid, 'opts.uuid');
+    assert.optionalUuid(opts.owner_uuid, 'opts.owner_uuid');
+    assert.optionalString(opts.fields, 'opts.fields');
 
     var vmapi = new sdcClients.VMAPI({
         url: self.app.config.vmapi.url,
         connectTimeout: 5000
     });
-    vmapi.getVm({
-        uuid: opts.uuid
-    }, function (err, vm) {
-        if (err) {
-            callback(err);
-            return;
-        }
-        callback(null, vm);
-        return;
-    });
+
+    var args = {
+        uuid: opts.uuid,
+        owner_uuid: opts.owner_uuid,
+        fields: opts.fields
+    };
+
+    vmapi.getVm(args, callback);
 };
 
 
diff --git a/package.json b/package.json
index 6684f38..766b462 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "cnapi",
-  "description": "SmartDataCenter Compute Node API",
-  "version": "1.21.2",
+  "description": "Triton Compute Node API",
+  "version": "1.22.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
@@ -10,7 +10,7 @@
     "async": "1.5.2",
     "backoff": "2.5.0",
     "bunyan": "1.8.5",
-    "dapi": "git+https://github.com/joyent/sdc-designation.git#296a786be98c325c9f30eff4dce16ed04047c9b5",
+    "dapi": "git+https://github.com/joyent/sdc-designation.git#af1d89b64f06ff8a7cdf7cc7d6f0325956990c2e",
     "deep-object-diff": "1.1.0",
     "dox": "0.9.0",
     "gc-stats": "1.2.0",
diff --git a/sapi_manifests/cnapi/template b/sapi_manifests/cnapi/template
index 2dc3f6b..b66e03f 100644
--- a/sapi_manifests/cnapi/template
+++ b/sapi_manifests/cnapi/template
@@ -49,9 +49,6 @@
 		"url": "http://{{{IMGAPI_SERVICE}}}"
 	},
 	"dapi": {
-{{^ALLOC_USE_CNAPI_VMS}}
-		"useVmapi": true,
-{{/ALLOC_USE_CNAPI_VMS}}
 		"changeDefaults": {
 			"server_spread": "{{{ALLOC_SERVER_SPREAD}}}",
 			"filter_headnode": "{{{ALLOC_FILTER_HEADNODE}}}",
@@ -103,6 +100,7 @@
 {{#ALLOC_FILTER_MIN_DISK}}
 			        "hard-filter-min-disk",
 {{/ALLOC_FILTER_MIN_DISK}}
+			        "calculate-locality-hints",
 			        "hard-filter-locality-hints",
 			        "hard-filter-owners-servers",
 			        ["or", "hard-filter-reservoir",
-- 
2.21.0

