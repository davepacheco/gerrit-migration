From 2b0853f7ad2f5bdf7105f69977639d2354417b08 Mon Sep 17 00:00:00 2001
From: Marsell Kukuljevic <marsell@joyent.com>
Date: Wed, 6 Dec 2017 17:07:26 +1300
Subject: [PATCH] TRITON-19 Triton equivalent to AWS' termination protection

---
 docs/index.md                        | 146 +++++++++++++++++++++++++--
 lib/audit.js                         |  10 +-
 lib/errors.js                        |  11 +-
 lib/machines.js                      |  95 ++++++++++++++++-
 test/machines.80.test.js             |  10 +-
 test/machines.test.js                |  55 +++++++++-
 test/machines/deletion_protection.js | 122 ++++++++++++++++++++++
 7 files changed, 431 insertions(+), 18 deletions(-)
 create mode 100644 test/machines/deletion_protection.js

diff --git a/docs/index.md b/docs/index.md
index ba0d7fd..a84111d 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -908,11 +908,16 @@ The set of supported *API versions* is given in the ping endpoint:
 
 The section describes API changes in CloudAPI versions.
 
+<<<<<<< HEAD
 ### 8.6.0
 
 - CreateMachine now accepts the `brand` field for specifying the brand of the
   instance to create. This is currently only useful when provisioning a
   virtualmachine in a datacenter that supports both kvm (default) and bhyve.
+- Added [Deletion Protection](#deletion-protection). Setting
+  deletion\_protection to true when creating or updating an instances will stop
+  stop both [DeleteMachine](#DeleteMachine) and SDC Docker from destroying an
+  instance. This remains true until that attribute is set to false.
 
 ## 8.5.0
 
@@ -4952,7 +4957,7 @@ For all possible errors, see [CloudAPI HTTP Responses](#cloudapi-http-responses)
 **Error Code**   | **Description**
 ---------------- | ---------------
 ResourceNotFound | If `:login` or `:id` does not exist
-InvalidState     | The instance is the wrong state to enable firewall
+InvalidState     | The instance is in the wrong state to enable firewall
 InvalidArgument  | If `action` was invalid
 MissingParameter | If `action` wasn't provided
 
@@ -5013,7 +5018,7 @@ For all possible errors, see [CloudAPI HTTP Responses](#cloudapi-http-responses)
 **Error Code**   | **Description**
 ---------------- | ---------------
 ResourceNotFound | If `:login` or `:id` does not exist
-InvalidState     | The instance is the wrong state to disable firewall
+InvalidState     | The instance is in the wrong state to disable firewall
 InvalidArgument  | If `action` was invalid
 MissingParameter | If `action` wasn't provided
 
@@ -5053,6 +5058,115 @@ or
     Transfer-Encoding: chunked
 
 
+
+## EnableDeletionProtection (POST /:login/machines/:id?action=enable_deletion_protection)
+
+Enable [Deletion Protection](#deletion-protection) on an instance. An instance
+can no longer be destroyed until the protection is disabled.
+
+### Inputs
+
+**Field** | **Type** | **Description**
+--------- |--------- | ---------------
+action    | String   | Use the exact string "enable_deletion_protection"
+
+### Returns
+
+* None
+
+### Errors
+
+For all possible errors, see [CloudAPI HTTP Responses](#cloudapi-http-responses).
+
+**Error Code**   | **Description**
+---------------- | ---------------
+ResourceNotFound | If `:login` or `:id` does not exist
+InvalidState     | The instance is in the wrong state to enable firewall
+InvalidArgument  | If `action` was invalid
+MissingParameter | If `action` wasn't provided
+
+### Example Request
+
+    POST /my/machines/c2855c3a-a91d-46b8-9da6-6d7ab1bc6962 HTTP/1.1
+    Host: api.example.com
+    Authorization: ...
+    Accept: application/json
+    Content-Length: 12
+    Content-Type: application/x-www-form-urlencoded
+    Api-Version: ~8
+
+    action=enable_deletion_protection
+
+### Example Response
+
+    HTTP/1.1 202 Accepted
+    Access-Control-Allow-Origin: *
+    Access-Control-Allow-Headers: Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, Api-Version, Response-Time
+    Access-Control-Allow-Methods: POST, GET, HEAD, DELETE, PUT
+    Access-Control-Expose-Headers: Api-Version, Request-Id, Response-Time
+    Connection: Keep-Alive
+    Date: Thu, 21 Jan 2017 13:16:00 GMT
+    Server: Joyent Triton 8.0.0
+    Api-Version: 8.0.0
+    Request-Id: 1b1e83a0-c041-11e5-b1b7-65fab9169f0e
+    Response-Time: 3594
+    Transfer-Encoding: chunked
+
+
+## DisableDeletionProtection (POST /:login/machines/:id?action=disable_deletion_protection)
+
+Disable [Deletion Protection](#deletion-protection) on an instance. An instance
+can be destroyed after it is disabled.
+
+### Inputs
+
+**Field** | **Type** | **Description**
+--------- | -------- | ---------------
+action    | String   | Use the exact string "disable_deletion_protection"
+
+### Returns
+
+* None
+
+### Errors
+
+For all possible errors, see [CloudAPI HTTP Responses](#cloudapi-http-responses).
+
+**Error Code**   | **Description**
+---------------- | ---------------
+ResourceNotFound | If `:login` or `:id` does not exist
+InvalidState     | The instance is in the wrong state to disable firewall
+InvalidArgument  | If `action` was invalid
+MissingParameter | If `action` wasn't provided
+
+### Example Request
+
+    POST /my/machines/c2855c3a-a91d-46b8-9da6-6d7ab1bc6962 HTTP/1.1
+    Host: api.example.com
+    Authorization: ...
+    Accept: application/json
+    Content-Length: 12
+    Content-Type: application/x-www-form-urlencoded
+    Api-Version: ~8
+
+    action=disable_deletion_protection
+
+### Example Response
+
+    HTTP/1.1 202 Accepted
+    Access-Control-Allow-Origin: *
+    Access-Control-Allow-Headers: Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, Api-Version, Response-Time
+    Access-Control-Allow-Methods: POST, GET, HEAD, DELETE, PUT
+    Access-Control-Expose-Headers: Api-Version, Request-Id, Response-Time
+    Connection: Keep-Alive
+    Date: Thu, 21 Jan 2016 13:23:39 GMT
+    Server: Joyent Triton 8.0.0
+    Api-Version: 8.0.0
+    Request-Id: 2c74e120-c042-11e5-9100-a95edd60134e
+    Response-Time: 4178
+    Transfer-Encoding: chunked
+
+
 ## CreateMachineSnapshot (POST /:login/machines/:id/snapshots)
 
 Allows you to take a snapshot of an instance.  Once you have one or more
@@ -6021,6 +6135,9 @@ Using node-smartdc:
 
 Allows you to completely destroy an instance.
 
+An instance cannot be destroyed so long as [Instance
+Protection](#instance-protection) is enabled on that instance.
+
 ### Inputs
 
 * None
@@ -6033,10 +6150,11 @@ Allows you to completely destroy an instance.
 
 For all possible errors, see [CloudAPI HTTP Responses](#cloudapi-http-responses).
 
-**Error Code**   | **Description**
----------------- | ---------------
-ResourceNotFound | If `:login` or `:id` does not exist
-InvalidState     | The instance is the wrong state to be deleted
+**Error Code**       | **Description**
+-------------------- | ---------------
+ResourceNotFound     | If `:login` or `:id` does not exist
+InvalidState         | The instance is in the wrong state to be deleted
+CannotDestroyMachine | [Deletion Protection](#deletion-protection) is enabled on this instance
 
 ### CLI Command
 
@@ -6155,6 +6273,22 @@ or
       }, ...]
 
 
+## Deletion Protection
+
+If you want to decrease the risk of accidental instance destruction, it is
+possible to make instance destruction (e.g. through
+[DeleteMachine](#DeleteMachine)) a two-step process.
+
+Instances that have the attribute `deletion_protection` set to boolean `true`
+cannot be deleted, either through CloudAPI or SDC Docker. In order to delete
+such an instance, the above attribute needs to be set to false first.
+
+The attribute can be set during instance creation (see
+[CreateMachine](#CreateMachine)), or added later (see
+[EnableDeletionProtection](#EnableDeletionProtection)). The instance then cannot
+be destroyed until the attribute is set to false, although all other operations
+will still work. To destroy the instance, first call
+[DisableDeletionProtection](#DisableDeletionProtection)) on the instance.
 
 
 # Analytics
diff --git a/lib/audit.js b/lib/audit.js
index 637bd43..09d534e 100644
--- a/lib/audit.js
+++ b/lib/audit.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -42,6 +42,14 @@ function translateAction(job) {
         return 'replace_metadata';
     }
 
+    if (payload.indestructible_zoneroot === true) {
+        return 'enable_deletion_protection';
+    }
+
+    if (payload.indestructible_zoneroot === false) {
+        return 'disable_deletion_protection';
+    }
+
     if (payload.remove_tags && payload.set_tags) {
         return 'replace_tags';
     }
diff --git a/lib/errors.js b/lib/errors.js
index e74be82..63f1f75 100644
--- a/lib/errors.js
+++ b/lib/errors.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -240,6 +240,14 @@ CloudApiError.prototype.description = 'Encountered an internal error.';
  */
 
 
+function CannotDestroyMachineError() {
+    _FriendlySigRestError.apply(this, arguments);
+}
+util.inherits(CannotDestroyMachineError, _FriendlySigRestError);
+CannotDestroyMachineError.prototype.restCode = 'MachineUndeletableError';
+CannotDestroyMachineError.prototype.statusCode = 409;
+CannotDestroyMachineError.prototype.description = 'Machine cannot be destroyed';
+
 
 // ---- wrappers for API responses
 
@@ -460,6 +468,7 @@ module.exports = {
     // Custom error classes.
     CloudApiError: CloudApiError,
 
+    CannotDestroyMachineError: CannotDestroyMachineError,
     DefaultFabricNetworkNotConfiguredError:
         DefaultFabricNetworkNotConfiguredError,
     VolumesNotReachableError: VolumesNotReachableError,
diff --git a/lib/machines.js b/lib/machines.js
index 1ae8960..638c244 100644
--- a/lib/machines.js
+++ b/lib/machines.js
@@ -164,6 +164,10 @@ function translate(machine, req)  {
         msg.disk = Number(machine.disks[1].size);
     }
 
+    if (machine.indestructible_zoneroot) {
+        msg.deletion_protection = true;
+    }
+
     if (machine.nics && machine.nics.length) {
         machine.nics.forEach(function (nic) {
             msg.ips.push(nic.ip);
@@ -407,6 +411,10 @@ function getCreateOptions(req) {
         }
     }
 
+    if (params.deletion_protection === true) {
+        opts.indestructible_zoneroot = true;
+    }
+
     var networkUuids = [];
 
     // Starting in version 7.3, CloudAPI supports what we call interface-
@@ -2014,6 +2022,80 @@ function rename(req, res, next) {
 }
 
 
+function enable_deletion_protection(req, res, next) {
+    var params = req.params;
+
+    if (params.action !== 'enable_deletion_protection') {
+        next();
+        return;
+    }
+
+    // No need to queue a job if it's already enabled
+    if (req.machine.deletion_protection === true) {
+        res.send(202);
+        next(false);
+        return;
+    }
+
+    req.sdc.vmapi.updateVm({
+        uuid: params.machine,
+        owner_uuid: req.account.uuid,
+        origin: params.origin || 'cloudapi',
+        creator_uuid: req.account.uuid,
+        // Audit:
+        context: {
+            caller: req._auditCtx,
+            params: params
+        },
+        payload: {
+            indestructible_zoneroot: true
+        }
+    }, {
+        log: req.log,
+        headers: {
+            'x-request-id': req.getId()
+        }
+    }, updateCallback(req, res, next));
+}
+
+
+function disable_deletion_protection(req, res, next) {
+    var params = req.params;
+
+    if (params.action !== 'disable_deletion_protection') {
+        next();
+        return;
+    }
+
+    // No need to queue a job if it's already disabled
+    if (!req.machine.deletion_protection) {
+        res.send(202);
+        next(false);
+        return;
+    }
+
+    req.sdc.vmapi.updateVm({
+        uuid: params.machine,
+        owner_uuid: req.account.uuid,
+        origin: params.origin || 'cloudapi',
+        creator_uuid: req.account.uuid,
+        // Audit:
+        context: {
+            caller: req._auditCtx,
+            params: params
+        },
+        payload: {
+            indestructible_zoneroot: false
+        }
+    }, {
+        log: req.log,
+        headers: {
+            'x-request-id': req.getId()
+        }
+    }, updateCallback(req, res, next));
+}
+
+
 function enable_firewall(req, res, next) {
     if (req.params.action !== 'enable_firewall') {
         return next();
@@ -2102,6 +2184,13 @@ function del(req, res, next) {
     var log = req.log;
     var vmapi = req.sdc.vmapi;
 
+    // vmapi does this check too, but checking here lets us avoid the listJobs()
+    // call below
+    if (req.machine.deletion_protection) {
+        return next(new errors.CannotDestroyMachineError(
+            'Instance has "deletion_protection" enabled, preventing deletion'));
+    }
+
     return vmapi.listJobs({
         vm_uuid: machine,
         owner_uuid: customer,
@@ -2153,10 +2242,6 @@ function del(req, res, next) {
             return next();
         });
     });
-
-
-
-
 }
 
 
@@ -2242,6 +2327,8 @@ function mount(server, before, pre, post) {
         stop,
         reboot,
         resize,
+        enable_deletion_protection,
+        disable_deletion_protection,
         enable_firewall,
         disable_firewall,
         function invalidAction7(req, res, next) {
diff --git a/test/machines.80.test.js b/test/machines.80.test.js
index 2c9b626..d1f8c03 100644
--- a/test/machines.80.test.js
+++ b/test/machines.80.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var util = require('util');
@@ -134,6 +134,14 @@ test('ListMachines (filter by joyent brand) - other', function (t) {
 });
 
 
+test('Deletion Protection tests', function (t) {
+    var deletionProtectionTest = require('./machines/deletion_protection');
+    deletionProtectionTest(t, CLIENT, OTHER, MACHINE_UUID, function () {
+        t.end();
+    });
+});
+
+
 test('Delete tests', function (t) {
     var deleteTest = require('./machines/delete');
     deleteTest(t, CLIENT, OTHER, MACHINE_UUID, function () {
diff --git a/test/machines.test.js b/test/machines.test.js
index 967ac3c..f5eba9a 100644
--- a/test/machines.test.js
+++ b/test/machines.test.js
@@ -743,6 +743,7 @@ test('CreateMachine', function (t) {
             strict: true
         },
         server_uuid: SERVER_UUID,
+        deletion_protection: true,
         firewall_enabled: true
     };
 
@@ -963,6 +964,8 @@ test('Get Machine', function (t) {
         tags[machinesCommon.TAG_KEY] = machinesCommon.TAG_VAL;
         t.deepEqual(machine.tags, tags, 'Machine tags');
 
+        t.equal(machine.deletion_protection, true, 'deletion protection');
+
         t.end();
     });
 });
@@ -1073,6 +1076,48 @@ test('Firewall Rules tests', function (t) {
 });
 
 
+test('Check cannot delete machine with deletion_protection set',
+function (t) {
+    CLIENT.del('/my/machines/' + MACHINE_UUID,
+        function delCb(err, req, res, body) {
+
+        t.ok(err, 'delete error expected');
+        t.equal(res.statusCode, 409, 'http code');
+        t.deepEqual(body, {
+            code: 'MachineUndeletableError',
+            message: 'Instance has "deletion_protection" enabled, ' +
+                'preventing deletion'
+        }, 'check error message');
+
+        t.end();
+    });
+});
+
+
+test('Remove deletion_protection', function (t) {
+    CLIENT.post('/my/machines/' + MACHINE_UUID, {
+        action: 'disable_deletion_protection'
+    }, function removeProtectionCb(err, req, res) {
+        t.ifError(err, 'disable_deletion_protection error');
+        t.equal(res.statusCode, 202, 'http code');
+
+        CLIENT.vmapi.listJobs({
+            vm_uuid: MACHINE_UUID,
+            task: 'update'
+        }, function listCb(err2, jobs) {
+            t.ifError(err2, 'list jobs error');
+
+            machinesCommon.waitForJob(CLIENT, jobs[0].uuid,
+                function waitCb(err3) {
+
+                t.ifError(err3, 'wait for job error');
+                t.end();
+            });
+        });
+    });
+});
+
+
 test('Delete tests', function (t) {
     var deleteTest = require('./machines/delete');
     deleteTest(t, CLIENT, OTHER, MACHINE_UUID, function () {
@@ -1101,11 +1146,11 @@ test('machine audit', function (t) {
         t.ok(f.caller.keyId, 'f.caller.keyId: ' + f.caller.keyId);
 
         var expectedJobs = [
-            'destroy', 'delete_snapshot', 'rollback_snapshot',
-            'create_snapshot', 'replace_metadata', 'remove_metadata',
-            'set_metadata', 'remove_tags', 'replace_tags', 'remove_tags',
-            'set_tags', 'resize', 'resize', 'reboot', 'start', 'stop',
-            'provision'
+            'destroy', 'disable_deletion_protection', 'delete_snapshot',
+            'rollback_snapshot', 'create_snapshot', 'replace_metadata',
+            'remove_metadata', 'set_metadata', 'remove_tags', 'replace_tags',
+            'remove_tags', 'set_tags', 'resize', 'resize', 'reboot', 'start',
+            'stop', 'provision'
         ];
 
         for (var i = 0; i !== expectedJobs.length; i++) {
diff --git a/test/machines/deletion_protection.js b/test/machines/deletion_protection.js
new file mode 100644
index 0000000..7ea71cd
--- /dev/null
+++ b/test/machines/deletion_protection.js
@@ -0,0 +1,122 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+var checkNotFound = require('../common').checkNotFound;
+var waitForJob = require('./common').waitForJob;
+
+
+// --- Tests
+
+
+module.exports =
+function deletionProtectionTests(suite, client, other, machineUuid, cb) {
+    if (!machineUuid) {
+        cb();
+        return;
+    }
+
+
+    function waitForDeletionProtectionJob(t) {
+        client.vmapi.listJobs({
+            vm_uuid: machineUuid,
+            task: 'update'
+        }, function listJobsCb(err, jobs) {
+            t.ifError(err, 'list jobs error');
+            t.ok(jobs, 'list jobs OK');
+            t.ok(jobs.length, 'update jobs is array');
+
+            var protectionJobs = jobs.filter(function filterCb(job) {
+                return (job.params.payload.indestructible_zoneroot !==
+                    undefined);
+            });
+
+            t.ok(protectionJobs.length, 'protectionJobs is an array');
+            waitForJob(client, protectionJobs[0].uuid, function waitCb(err2) {
+                t.ifError(err2, 'Check state error');
+                t.end();
+            });
+        });
+    }
+
+
+    suite.test('Enable deletion_protection - other', function (t) {
+        other.post('/my/machines/' + machineUuid, {
+            action: 'enable_deletion_protection'
+        }, function otherEnableCb(err, req, res, body) {
+            checkNotFound(t, err, req, res, body);
+            t.end();
+        });
+    });
+
+
+    suite.test('Disable deletion_protection - other', function (t) {
+        other.post('/my/machines/' + machineUuid, {
+            action: 'disable_deletion_protection'
+        }, function otherDisableCb(err, req, res, body) {
+            checkNotFound(t, err, req, res, body);
+            t.end();
+        });
+    });
+
+
+    suite.test('Enable deletion_protection', function (t) {
+        client.post('/my/machines/' + machineUuid, {
+            action: 'enable_deletion_protection'
+        }, function enableCb(err) {
+            t.ifError(err, 'Enable deletion_protection error');
+            t.end();
+        });
+    });
+
+
+    suite.test('Wait For deletion_protection enabled job',
+        waitForDeletionProtectionJob);
+
+
+    suite.test('Check deletion_protection enabled', function (t) {
+        client.get('/my/machines/' + machineUuid,
+            function getCb(err, req, res, body) {
+
+            t.ifError(err, 'GetMachine error');
+            t.equal(body.deletion_protection, true, 'deletion_protection');
+
+            t.end();
+        });
+    });
+
+
+    suite.test('Disable deletion_protection', function (t) {
+        client.post('/my/machines/' + machineUuid, {
+            action: 'disable_deletion_protection'
+        }, function disableCb(err) {
+            t.ifError(err, 'Disable deletion_protection error');
+            t.end();
+        });
+    });
+
+
+    suite.test('Wait For deletion_protection disabled job',
+        waitForDeletionProtectionJob);
+
+
+    suite.test('Check deletion_protection disabled', function (t) {
+        client.get('/my/machines/' + machineUuid,
+            function getCb(err, req, res, body) {
+
+            t.ifError(err, 'GetMachine error');
+            t.equal(body.deletion_protection, undefined, 'deletion_protection');
+
+            t.end();
+        });
+    });
+
+
+    cb();
+};
-- 
2.21.0

