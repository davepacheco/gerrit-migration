From 2f0b2399c6c7528c355651df86a1f7d5bc1fb9f8 Mon Sep 17 00:00:00 2001
From: Julien Gilli <julien.gilli@joyent.com>
Date: Tue, 13 Mar 2018 10:32:14 -0700
Subject: [PATCH] TRITON-171 Ambiguous error message when creating a triton
 volume

---
 lib/errors.js                                |   3 +-
 test/volumes-invalid-default-network.test.js | 170 +++++++++++++++++++
 2 files changed, 172 insertions(+), 1 deletion(-)
 create mode 100644 test/volumes-invalid-default-network.test.js

diff --git a/lib/errors.js b/lib/errors.js
index 7db1cc5..7494b7f 100644
--- a/lib/errors.js
+++ b/lib/errors.js
@@ -379,11 +379,12 @@ function volapiErrorWrap(cause, message) {
     assert.string(message, 'message');
 
     switch (cause.restCode) {
+        case 'InvalidNetworks':
+        case 'ValidationError':
         case 'VolumeAlreadyExists':
         case 'VolumeInUse':
         case 'VolumeNotFound':
         case 'VolumeSizeNotAvailable':
-        case 'ValidationError':
             return new ExposedSDCError(cause, message);
 
         /* By default don't expose internal error message details. */
diff --git a/test/volumes-invalid-default-network.test.js b/test/volumes-invalid-default-network.test.js
new file mode 100644
index 0000000..b1a05ee
--- /dev/null
+++ b/test/volumes-invalid-default-network.test.js
@@ -0,0 +1,170 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+var assert = require('assert-plus');
+var libuuid = require('libuuid');
+var test = require('tape').test;
+var util = require('util');
+
+var common = require('./common');
+var mod_config = require('../lib/config.js');
+var mod_testConfig = require('./lib/config');
+var mod_testNetworks = require('./lib/networks');
+var mod_testVolumes = require('./lib/volumes');
+
+var CONFIG = mod_config.configure();
+
+if (CONFIG.experimental_cloudapi_nfs_shared_volumes !== true) {
+    console.log('experimental_cloudapi_nfs_shared_volumes setting not ' +
+        'enabled, skipping tests');
+    process.exitCode = 0;
+} else {
+    var CLIENTS;
+    var CLIENT;
+    var NAPI_CLIENT;
+    var OTHER;
+    var SERVER;
+    var UFDS_CLIENT;
+
+    var externalNetwork;
+    var testVolumeName = 'test-volumes-basic';
+    var testVolume;
+    var testVolumeStorageVmUuid;
+
+    test('setup', function (t) {
+        common.setup({clientApiVersion: '~8.0'}, function (_, clients, server) {
+            CLIENTS = clients;
+            CLIENT = clients.user;
+            OTHER = clients.other;
+            SERVER = server;
+
+            NAPI_CLIENT = CLIENT.napi;
+            UFDS_CLIENT = CLIENT.ufds;
+
+            t.end();
+        });
+    });
+
+    /*
+     * This is necessary so that we proceed with the rest of the tests suite
+     * only after the entry for the newly added user (including its default
+     * fabric network used to provision volumes) is present in UFDS.
+     */
+    test('getting config from ufds', function (t) {
+        mod_testConfig.waitForAccountConfigReady(CLIENT,
+            function onConfigReady(configReadyErr) {
+                t.ifErr(configReadyErr, 'newly created user\'s config should ' +
+                    'eventually be created');
+                t.end();
+            });
+    });
+
+    test('setting default network to non-existing network', function (t) {
+        UFDS_CLIENT.updateDcLocalConfig(CLIENT.account.uuid,
+            CONFIG.datacenter_name, {
+            dclocalconfig: CONFIG.datacenter_name,
+            defaultFabricSetup: 'false',
+            defaultNetwork: libuuid.create()
+        }, function onDcLocalConfigUpdated(updateErr) {
+            t.ifErr(updateErr, 'updating dclocalconfig should not error');
+            t.end();
+        });
+    });
+
+    test('creating volume with default net === non-existing net should fail',
+        function (t) {
+        CLIENT.post('/my/volumes', {
+            name: testVolumeName,
+            type: 'tritonnfs'
+        }, function onVolumeCreated(volumeCreationErr, req, res, volume) {
+            var expectedErrName = 'InvalidNetworksError';
+            var expectedRestCode = 'InvalidNetworks';
+            var expectedStatusCode = 409;
+
+            t.ok(volumeCreationErr,
+                'creating a volume with default parameters should fail');
+
+            if (volumeCreationErr) {
+                t.equal(volumeCreationErr.statusCode, expectedStatusCode,
+                    'status code should be: ' + expectedStatusCode + ', got: ' +
+                        volumeCreationErr.statusCode);
+                t.equal(volumeCreationErr.restCode, expectedRestCode,
+                    'rest code should be: ' + expectedRestCode + ', got: ' +
+                        volumeCreationErr.restCode);
+                t.equal(volumeCreationErr.name, expectedErrName,
+                    'error name should be: ' + expectedErrName + ', got: ' +
+                        volumeCreationErr.name);
+            }
+
+            t.end();
+        });
+    });
+
+    test('getting external network should succeed', function (t) {
+        NAPI_CLIENT.listNetworks({name: 'external'},
+            function onListNets(listNetsErr, nets) {
+                t.ifErr(listNetsErr, 'listing networks should not error');
+                if (nets) {
+                    t.equal(nets.length, 1,
+                        'there should be one and only one external network');
+                    externalNetwork = nets[0];
+                }
+                t.end();
+            });
+    });
+
+    test('setting default network to non-fabric network', function (t) {
+        UFDS_CLIENT.updateDcLocalConfig(CLIENT.account.uuid,
+            CONFIG.datacenter_name, {
+            dclocalconfig: CONFIG.datacenter_name,
+            defaultFabricSetup: 'false',
+            defaultNetwork: externalNetwork.uuid
+        }, function onDcLocalConfigUpdated(updateErr) {
+            t.ifErr(updateErr, 'updating dclocalconfig should not error');
+            t.end();
+        });
+    });
+
+    test('creating volume with default net === external should fail',
+        function (t) {
+        CLIENT.post('/my/volumes', {
+            name: testVolumeName,
+            type: 'tritonnfs'
+        }, function onVolumeCreated(volumeCreationErr, req, res, volume) {
+            var expectedErrName = 'InvalidNetworksError';
+            var expectedRestCode = 'InvalidNetworks';
+            var expectedStatusCode = 409;
+
+            t.ok(volumeCreationErr,
+                'creating a volume with default parameters should fail');
+
+            if (volumeCreationErr) {
+                t.equal(volumeCreationErr.statusCode, expectedStatusCode,
+                    'status code should be: ' + expectedStatusCode + ', got: ' +
+                        volumeCreationErr.statusCode);
+                t.equal(volumeCreationErr.restCode, expectedRestCode,
+                    'rest code should be: ' + expectedRestCode + ', got: ' +
+                        volumeCreationErr.restCode);
+                t.equal(volumeCreationErr.name, expectedErrName,
+                    'error name should be: ' + expectedErrName + ', got: ' +
+                        volumeCreationErr.name);
+            }
+
+            t.end();
+        });
+    });
+
+    test('teardown', function (t) {
+        common.teardown(CLIENTS, SERVER, function onTeardown(err) {
+            t.ifErr(err, 'teardown should be successful, got: ' + err);
+            t.end();
+        });
+    });
+}
\ No newline at end of file
-- 
2.21.0

