From 298b15dc99c4d963d7792df2653d7d874406a90c Mon Sep 17 00:00:00 2001
From: Robert Mustacchi <rm@joyent.com>
Date: Sat, 14 Jan 2017 03:59:59 +0000
Subject: [PATCH] MANTA-3114 mako MPU commit support MANTA-3117 nginx should
 link against libumem MANTA-3118 mako worker count should be a sapi property
 MANTA-3119 mako needs CONTRIBUTING.md MANTA-3120 make clean should actually
 clean everything

---
 .gitmodules                  |   2 +-
 CONTRIBUTING.md              |   5 +
 Makefile                     |  27 +-
 README.md                    |  50 ++--
 deps/nginx                   |   2 +-
 package.json                 |   7 +-
 sapi_manifests/mako/template |  32 +++
 test/api.test.js             |  19 ++
 test/common.js               | 113 ++++++++
 test/mpu-large.test.js       | 115 ++++++++
 test/mpu-validation.test.js  | 534 +++++++++++++++++++++++++++++++++++
 test/mpu.test.js             | 281 ++++++++++++++++++
 tools/mk/Makefile.nginx.defs |  64 +----
 tools/mk/Makefile.nginx.targ |  10 +-
 tools/ngx_symcheck           |  67 +++++
 15 files changed, 1239 insertions(+), 89 deletions(-)
 create mode 100644 CONTRIBUTING.md
 create mode 100644 test/common.js
 create mode 100644 test/mpu-large.test.js
 create mode 100644 test/mpu-validation.test.js
 create mode 100644 test/mpu.test.js
 create mode 100755 tools/ngx_symcheck

diff --git a/.gitmodules b/.gitmodules
index 43e866f..87d5b56 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -3,7 +3,7 @@
 	url = https://github.com/trentm/restdown.git
 [submodule "deps/nginx"]
 	path = deps/nginx
-	url = https://github.com/joyent/nginx.git
+	url = file:///home/rm/src/nginx
 [submodule "deps/manta-scripts"]
 	path = deps/manta-scripts
 	url = https://github.com/joyent/manta-scripts.git
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
new file mode 100644
index 0000000..208d435
--- /dev/null
+++ b/CONTRIBUTING.md
@@ -0,0 +1,5 @@
+# Contributing
+
+This repository is part of the Joyent Manta project.  See the [contribution
+guidelines for the Manta
+project](https://github.com/joyent/manta/blob/master/CONTRIBUTING.md).
diff --git a/Makefile b/Makefile
index 0d4ca54..bf30736 100644
--- a/Makefile
+++ b/Makefile
@@ -5,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2015, Joyent, Inc.
+# Copyright 2017 Joyent, Inc.
 #
 
 #
@@ -26,14 +26,15 @@
 # Tools
 #
 BASHSTYLE	 = $(NODE) tools/bashstyle
-TAP		:= ./node_modules/.bin/tap
+TAPE		:= ./node_modules/.bin/tape
 NPM		:= npm
+NGXSYMCHECK	= tools/ngx_symcheck
 
 #
 # Files
 #
 DOC_FILES	=
-BASH_FILES	= bin/manta-mako-adm
+BASH_FILES	= bin/manta-mako-adm $(NGXSYMCHECK)
 JS_FILES	:= $(shell find lib test bin -name '*.js')
 JSL_CONF_NODE	= tools/jsl.node.conf
 JSL_FILES_NODE	= $(JS_FILES)
@@ -75,26 +76,34 @@ NPM_ENV          = MAKE_OVERRIDES="CTFCONVERT=/bin/true CTFMERGE=/bin/true"
 # Repo-specific targets
 #
 .PHONY: all
-all: $(NODE_EXEC) $(NGINX_EXEC) $(TAP) $(REPO_DEPS) scripts
+all: $(NODE_EXEC) $(NGINX_EXEC) $(TAPE) $(REPO_DEPS) scripts
 	$(NPM) install
-$(TAP): | $(NPM_EXEC)
+$(TAPE): | $(NPM_EXEC)
 	$(NPM) install
 
-CLEAN_FILES += $(TAP) ./node_modules/tap
+CLEAN_FILES += $(TAPE) ./node_modules/ build
 
 check-bash: $(NODE_EXEC)
 
 .PHONY: test
-test: $(TAP)
-	TAP=1 $(TAP) test/*.test.js
+test: $(TAPE)
+	@for f in test/*.test.js; do	\
+		echo "# $$f";	\
+		$(TAPE) $$f || exit 1; \
+	done
 
 .PHONY: scripts
 scripts: deps/manta-scripts/.git
 	mkdir -p $(BUILD)/scripts
 	cp deps/manta-scripts/*.sh $(BUILD)/scripts
 
+.PHONY: check-nginx
+check-nginx: $(NGINX_EXEC)
+	$(NGXSYMCHECK) $(NGINX_EXEC)
+prepush: check-nginx
+
 .PHONY: release
-release: all deps docs $(SMF_MANIFESTS)
+release: all deps docs $(SMF_MANIFESTS) check-nginx
 	@echo "Building $(RELEASE_TARBALL)"
 	@mkdir -p $(RELSTAGEDIR)/root/opt/smartdc/mako
 	@mkdir -p $(RELSTAGEDIR)/root/opt/smartdc/boot
diff --git a/README.md b/README.md
index 9899fe4..332e138 100644
--- a/README.md
+++ b/README.md
@@ -39,24 +39,34 @@ to/from disk.
 
 # Working with the nginx git submodule
 
-To update nginx, first checkout out and make changes to the mako branch of the
-github Joyent nginx fork located at https://github.com/joyent/nginx/tree/mako
+mako uses [Joyent's fork of nginx](https://github.com/joyent/nginx)
+which has been modified to support some additional features:
 
-Once your changes have been committed to that repo, grab the git SHA for your
-changes and:
+* Calculating the md5 checksum of the streamed body and reporting it.
+* Ensuring that all renames are atomic in the filesystem (proper use of
+  fsync(2)).
+* Support for the multipart upload commit operation.
 
-    $ git clone git@github.com:joyent/manta-mako.git
-    $ cd mako/
-    $ git submodule init
-    $ git submodule update
-    $ cd deps/nginx/
-    $ git checkout -b mako
-    $ git checkout [Latest joyent/nginx#mako git SHA]
-    $ cd ../..
-    $ git add deps/nginx
-    $ git diff --cached #to check the submodule git SHA
+To understand how the nginx repository is managed and how we cut
+releases for use in mako, please read the
+[README](https://github.com/joyent/nginx).  When updating the nginx
+submodule in mako, the first step is to identify the release tag that
+you should use. Once that's been identified, you can update the
+submodule using something like the following flow:
 
-Then you can commit and push like any other change.
+```
+$ git clone git@github.com:joyent/manta-mako.git
+$ cd mako/
+$ git submodule init
+$ git submodule update
+$ cd deps/nginx/
+$ git checkout <tag>
+$ cd ../..
+$ git add deps/nginx
+$ git diff --cached #to check the submodule git SHA
+```
+
+Then you can commit, test, and push like any other change.
 
 ## Testing
 
@@ -69,7 +79,13 @@ use pfexec as the primary administrator):
 2. `mkdir /manta`
 3. `chmod 770 /manta`
 4. `chown nobody:staff /manta`
-5. Manually start nginx, by running `build/nginx/objs/nginx`
+5. Manually start nginx, by running `build/nginx/sbin/nginx`
 6. Run the test suite by running `gmake test`
 7. When finished, kill the nginx processes with something like `pkill -9 nginx`
-7. When finished, clean out any left over temporary data via `rm -rf /manta/*`
+8. When finished, clean out any left over temporary data via `rm -rf /manta/*`
+
+Note, that the tests default to looking for nginx on
+`http://localhost:80/`. This can be overriden by setting the `MAKO_HOST`
+and `MAKO_PORT` environment variables. For example if you set
+`MAKO_PORT=8080` and `MAKO_HOST=1.2.3.4`, we would instead look for a
+server at `http://1.2.3.4:8080/`.
diff --git a/deps/nginx b/deps/nginx
index 359c570..cdef893 160000
--- a/deps/nginx
+++ b/deps/nginx
@@ -1 +1 @@
-Subproject commit 359c570f4b24fe832c361efa5ff3f97341f42000
+Subproject commit cdef893b0bea30ae909b954dfc55b8cca2469104
diff --git a/package.json b/package.json
index be36bb1..65b3b71 100644
--- a/package.json
+++ b/package.json
@@ -12,12 +12,15 @@
                 "manta": "2.0.7",
                 "moray": "git+https://github.com/joyent/node-moray.git#fd5781bc25a9bfe2ba82167664639753fb9f0ca5",
                 "posix-getopt": "1.0.0",
-                "vasync": "1.3.3"
+                "vasync": "1.6.4"
         },
         "devDependencies": {
                 "async": "0.1.x",
                 "tap": "0.4.0",
-                "node-uuid": "1.4.0"
+                "tape": "4.6.3",
+                "node-uuid": "1.4.0",
+                "extsprintf": "1.3.0",
+                "jsprim": "1.3.1"
         },
         "sdcDependencies": {
                 "config-agent": ">=1.2.0"
diff --git a/sapi_manifests/mako/template b/sapi_manifests/mako/template
index f7957f2..c5775c7 100644
--- a/sapi_manifests/mako/template
+++ b/sapi_manifests/mako/template
@@ -1,9 +1,23 @@
+{{#MAKO_WORKER_PROCESSES}}
+worker_processes {{MAKO_WORKER_PROCESSES}};
+{{/MAKO_WORKER_PROCESSES}}
+{{^MAKO_WORKER_PROCESSES}}
 worker_processes  8;
+{{/MAKO_WORKER_PROCESSES}}
+
+{{#MAKO_THREAD_POOL_SIZE}}
+thread_pool mpu threads={{MAKO_THREAD_POOL_SIZE}};
+{{/MAKO_THREAD_POOL_SIZE}}
+{{^MAKO_THREAD_POOL_SIZE}}
+thread_pool mpu threads=8;
+{{/MAKO_THREAD_POOL_SIZE}}
+
 
 error_log /var/log/mako-error.log info;
 
 events {
 	worker_connections  1024;
+	use eventport;
 }
 
 http {
@@ -54,6 +68,24 @@ http {
 			content_md5_fail_status	469;
 		}
 
+		location /mpu/v1/commit
+		{
+			client_body_temp_path	/manta/nginx_temp;
+			mpu_enabled		on;
+			mpu_pool		mpu;
+			mpu_root		/manta;
+			#
+			# Because we currently allow for up to 10k parts
+			# in an MPU and each part is nominally a UUID,
+			# so 36 bytes of string or so, that quickly gets
+			# to around 360k. By the time you add all the
+			# other characters, that gets us pretty close to
+			# a 512k upper bound. However, we still end up
+			# opting to limit it.
+			#
+			client_max_body_size 	512K;
+		}
+
 		error_page 500 502 503 504 /50x.html;
 
 		location = /50x.html {
diff --git a/test/api.test.js b/test/api.test.js
index acbf24d..3a25a1b 100644
--- a/test/api.test.js
+++ b/test/api.test.js
@@ -18,6 +18,8 @@ var fs = require('fs');
 var http = require('http');
 var path = require('path');
 var uuid = require('node-uuid');
+var extsprintf = require('extsprintf');
+var sprintf = extsprintf.sprintf;
 
 var TEST_DIR = '/var/tmp/test.mako.' + process.pid;
 var filename = uuid.v4();
@@ -68,6 +70,23 @@ var getNonexistentObject = function (t) {
 };
 
 test('setup', function (t) {
+        var port;
+        if (process.env['MAKO_HOST']) {
+                options.host = process.env['MAKO_HOST'];
+        }
+
+        if (process.env['MAKO_PORT']) {
+                port = parseInt(process.env['MAKO_PORT'], 10);
+                if (isNaN(port)) {
+                        process.stderr.write(sprintf('failed to parse port: ' +
+                            '%d: using default: %d\n', process.env['MAKO_PORT'],
+                            options.port));
+                } else {
+                        options.port = port;
+                }
+        }
+
+
         fs.mkdirSync(TEST_DIR);
         createFile(file, 10 * 1024 * 1024, function () {
                 t.end();
diff --git a/test/common.js b/test/common.js
new file mode 100644
index 0000000..3c4be83
--- /dev/null
+++ b/test/common.js
@@ -0,0 +1,113 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2017 Joyent, Inc.
+ */
+
+/*
+ * Functionality common to all tests.
+ */
+
+var mod_assert = require('assert-plus');
+var mod_extsprintf = require('extsprintf');
+var sprintf = mod_extsprintf.sprintf;
+var mod_stream = require('stream');
+var mod_util = require('util');
+var mod_crypto = require('crypto');
+
+var MPU_HOST = 'localhost';
+var MPU_PORT = 80;
+var MPU_URL = '/mpu/v1/commit';
+
+/*
+ * Construct the basic mpu request options that are required for MPU.
+ */
+function mpu_default_opts()
+{
+        var options = {};
+        options['host'] = MPU_HOST;
+        options['port'] = MPU_PORT;
+        options['path'] = MPU_URL;
+        options['method'] = 'POST';
+        return (options);
+}
+
+function mako_default_opts()
+{
+        var options = {};
+        options['host'] = MPU_HOST;
+        options['port'] = MPU_PORT;
+        return (options);
+}
+
+/*
+ * Set up the common environment variables, etc.
+ */
+function mpu_setup()
+{
+        var port;
+
+        if (process.env['MAKO_HOST']) {
+                MPU_HOST = process.env['MAKO_HOST'];
+        }
+
+        if (process.env['MAKO_PORT']) {
+                port = parseInt(process.env['MAKO_PORT'], 10);
+                if (isNaN(port)) {
+                        process.stderr.write(sprintf('failed to parse port: ' +
+                            '%d: using default: %d\n', process.env['MAKO_PORT'],
+                            MPU_PORT));
+                } else {
+                        MPU_PORT = port;
+                }
+        }
+
+        if (process.env['MPU_URL']) {
+                MPU_URL = process.env['MPU_URL'];
+        }
+}
+
+/*
+ * Generates a stream of random data and updates an md5 instance with its data.
+ */
+function MPUSource(opts)
+{
+        mod_assert.number(opts.length, 'amount of data is required');
+        mod_assert.object(opts.md5, 'a crypto md5 object is required');
+
+        this.mpus_remaining = opts.length;
+        this.mpus_chunksize = 4 * 1024 * 1024;
+        this.mpus_md5 = opts.md5;
+        this.mpus_finished = false;
+
+        mod_stream.Readable.call(this);
+}
+
+mod_util.inherits(MPUSource, mod_stream.Readable);
+
+MPUSource.prototype._read = function () {
+        var toWrite, buf;
+
+        toWrite = Math.min(this.mpus_remaining, this.mpus_chunksize);
+        if (toWrite === 0) {
+                if (!(this.mpus_finished)) {
+                        this.mpus_finished = true;
+                        this.push(null);
+                }
+                return;
+        }
+
+        this.mpus_remaining -= toWrite;
+        buf = mod_crypto.randomBytes(toWrite);
+        this.mpus_md5.update(buf);
+        this.push(buf);
+};
+
+exports.MPUSource = MPUSource;
+exports.mpu_setup = mpu_setup;
+exports.mpu_default_opts = mpu_default_opts;
+exports.mako_default_opts = mako_default_opts;
diff --git a/test/mpu-large.test.js b/test/mpu-large.test.js
new file mode 100644
index 0000000..5cca6f5
--- /dev/null
+++ b/test/mpu-large.test.js
@@ -0,0 +1,115 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2017 Joyent, Inc.
+ */
+
+/*
+ * Test MPU work that requires data that is larger than 4 GiB in size. To that
+ * end what we do is create three streams of random data, one that's over 4 GiB,
+ * and two that are some number of bytes. The reason for large file sizes is to
+ * make sure that we can properly handle the 64-bit offsets in nginx (which it
+ * should if built correctly).
+ */
+
+var mod_test = require('tape');
+var test = mod_test.test;
+var mod_extsprintf = require('extsprintf');
+var sprintf = mod_extsprintf.sprintf;
+var mod_http = require('http');
+var mod_crypto = require('crypto');
+var mod_vasync = require('vasync');
+var mod_uuid = require('node-uuid');
+var mod_jsprim = require('jsprim');
+
+var mod_common = require('./common.js');
+
+var LMPU_LARGE_SIZE = 4294967808;        /* 4 GiB + 512 bytes */
+var LMPU_SMALL_SIZE = 42;
+var LMPU_COMMIT = {};
+var LMPU_MD5_OBJ;
+
+function lmpu_generate_file(t, size)
+{
+        var req, opts, mpustream, name;
+
+        name = mod_uuid.v4();
+        LMPU_COMMIT.parts.push(name);
+        opts = mod_common.mako_default_opts();
+        opts.method = 'PUT';
+        opts.path = sprintf('/%s/%s', LMPU_COMMIT['account'], name);
+        console.log(sprintf('# putting file at %s', opts.path));
+        mpustream = new mod_common.MPUSource({ length: size,
+            md5: LMPU_MD5_OBJ });
+
+        req = mod_http.request(opts, function (res) {
+                t.ok(res.statusCode, 201);
+                res.resume();
+                t.end();
+        });
+
+        req.on('error', function (err) {
+                t.fail(sprintf('received error: %r', err));
+                t.end();
+        });
+
+        mpustream.pipe(req);
+}
+
+test('setup', function (t) {
+        t.plan(0);
+        mod_common.mpu_setup();
+
+        LMPU_COMMIT['version'] = 1;
+        LMPU_COMMIT['nbytes'] = LMPU_LARGE_SIZE + 2 * LMPU_SMALL_SIZE;
+        LMPU_COMMIT['account'] = mod_uuid.v4();
+        LMPU_COMMIT['objectId'] = mod_uuid.v4();
+        LMPU_COMMIT['parts'] = [];
+        console.log(sprintf('# account: %s, object: %s', LMPU_COMMIT['account'],
+            LMPU_COMMIT['objectId']));
+        LMPU_MD5_OBJ = mod_crypto.createHash('md5');
+        t.end();
+});
+
+test('generating large file', function (t) {
+        lmpu_generate_file(t, LMPU_LARGE_SIZE);
+});
+
+test('generating small file 1', function (t) {
+        lmpu_generate_file(t, LMPU_SMALL_SIZE);
+});
+
+test('generating small file 2', function (t) {
+        lmpu_generate_file(t, LMPU_SMALL_SIZE);
+});
+
+test('calculate md5', function (t) {
+        LMPU_COMMIT.md5 = LMPU_MD5_OBJ.digest('base64');
+        t.ok(LMPU_COMMIT.md5);
+        t.end();
+});
+
+test('commit', function (t) {
+        var req, opts;
+
+        opts = mod_common.mpu_default_opts();
+        req = mod_http.request(opts, function (res) {
+                t.equal(res.statusCode, 204);
+                t.equal(res.headers['x-joyent-computed-content-md5'],
+                    LMPU_COMMIT.md5);
+                res.resume();
+                t.end();
+        });
+
+        req.on('error', function (err) {
+                t.fail(sprintf('received error: %r', err));
+                t.end();
+        });
+
+        req.write(JSON.stringify(LMPU_COMMIT));
+        req.end();
+});
diff --git a/test/mpu-validation.test.js b/test/mpu-validation.test.js
new file mode 100644
index 0000000..c04ba97
--- /dev/null
+++ b/test/mpu-validation.test.js
@@ -0,0 +1,534 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2017 Joyent, Inc.
+ */
+
+/*
+ * Test basic MPU validation (generally error cases)
+ */
+
+var mod_test = require('tape');
+var test = mod_test.test;
+var mod_extsprintf = require('extsprintf');
+var sprintf = mod_extsprintf.sprintf;
+var mod_vasync = require('vasync');
+var mod_http = require('http');
+var mod_crypto = require('crypto');
+var mod_jsprim = require('jsprim');
+var mod_common = require('./common.js');
+
+/*
+ * Almost all errors, with the exception of memory errors, should have a
+ * non-zero content-length and an encoding of JSON.
+ */
+function mpu_correct_error_headers(t, res) {
+        t.equal(res.headers['content-type'], 'application/json');
+        t.ok(res.headers['content-length'] > 0, 'non-zero content length');
+}
+
+/*
+ * Constructs a basic MPU commit payload whose types and values are roughly
+ * correct, but doesn't correspond to real files.
+ */
+function mpu_basic_bad_payload()
+{
+        var payload = {};
+        payload['version'] = 1;
+        payload['nbytes'] = 3;
+        payload['account'] = 'kefka';
+        payload['objectId'] = 'gestahl';
+        payload['parts'] = [ 'maduin' ];
+
+        return (payload);
+}
+
+/*
+ * Given a payload, verifies that it returns a 400.
+ */
+function mpu_bad_payload(payload, t)
+{
+        var req;
+
+        req = mod_http.request(mod_common.mpu_default_opts(), function (res) {
+                t.equal(res.statusCode, 400);
+                mpu_correct_error_headers(t, res);
+                res.resume();
+                t.end();
+        });
+
+        req.on('error', function (err) {
+                t.fail(sprintf('received error: %r', err));
+                t.end();
+        });
+        req.write(JSON.stringify(payload));
+
+        req.end();
+}
+
+test('setup', function (t) {
+        mod_common.mpu_setup();
+        t.end();
+});
+
+/*
+ * Verify that the following methods aren't permitted on the MPU endpoint.
+ */
+test('bad methods on commit API', function (t) {
+        mod_vasync.forEachParallel({
+            'func': function (arg, callback) {
+                var req;
+                var opts;
+                opts = mod_common.mpu_default_opts();
+                opts['method'] = arg;
+
+                req = mod_http.request(opts, function (res) {
+                        t.equal(res.statusCode, 405);
+                        res.resume();
+                        callback(null);
+                });
+
+                req.on('error', function (err) {
+                        t.fail(sprintf('received error: %r', err));
+                        callback(err);
+                });
+
+                req.end();
+            },
+            inputs: [ 'GET', 'PUT', 'DELETE' ]
+        }, function (err, results) {
+                t.end();
+        });
+});
+
+/*
+ * Verify that a 1 MiB chunk of data is rejected, we should have a limit around
+ * 512 KiB.
+ */
+test('large body is rejected', function (t) {
+        var req;
+        req = mod_http.request(mod_common.mpu_default_opts(), function (res) {
+                t.equal(res.statusCode, 413);
+                res.resume();
+                t.end();
+        });
+
+        req.on('error', function (err) {
+                t.fail(sprintf('received error: %r', err));
+                t.end();
+        });
+
+        req.write(mod_crypto.randomBytes(1024 * 1024));
+        req.end();
+});
+
+/*
+ * Verify that if we send random data, it does not crash the server and does not
+ * end up parsing as JSON.
+ */
+test('invalid json, random data', function (t) {
+        mod_vasync.forEachParallel({
+            'func': function (arg, callback) {
+                var req, data, opts;
+
+                data = mod_crypto.randomBytes(arg);
+                opts = mod_common.mpu_default_opts();
+                req = mod_http.request(opts, function (res) {
+                        t.equal(res.statusCode, 400);
+                        mpu_correct_error_headers(t, res);
+                        res.resume();
+                        callback(null);
+                });
+
+                req.on('error', function (err) {
+                        t.fail(sprintf('received error: %r', err));
+                        callback(err);
+                });
+                req.write(data);
+
+                req.end();
+            },
+            inputs: [ 16, 160, 1600, 16000 ]
+        }, function (err, results) {
+                t.end();
+        });
+});
+
+test('invalid json', function (t) {
+        mod_vasync.forEachParallel({
+            'func': function (arg, callback) {
+                var req, opts;
+
+                opts = mod_common.mpu_default_opts();
+                req = mod_http.request(opts, function (res) {
+                        t.equal(res.statusCode, 400);
+                        mpu_correct_error_headers(t, res);
+                        res.resume();
+                        callback(null);
+                });
+
+                req.on('error', function (err) {
+                        t.fail(sprintf('received error: %r', err));
+                        callback(err);
+                });
+                req.write(arg);
+
+                req.end();
+            },
+            inputs: [ '{', '{ "hello"', '{ "foo": bar }', '{ hello: "foo" }',
+                '{ "foo": "bar" "baz": false }']
+        }, function (err, results) {
+                t.end();
+        });
+});
+
+test('bad payload, no members', function (t) {
+        var req;
+        req = mod_http.request(mod_common.mpu_default_opts(), function (res) {
+                t.equal(res.statusCode, 400);
+                mpu_correct_error_headers(t, res);
+                res.resume();
+                t.end();
+        });
+
+        req.on('error', function (err) {
+                t.fail(sprintf('received error: %r', err));
+                t.end();
+        });
+
+        req.write('{}');
+        req.end();
+});
+
+/*
+ * Verify that if we're missing each of the required fields, that it fails.
+ */
+test('bad payload, missing members', function (t) {
+        var payload, obj, key;
+        var tests = [];
+
+        payload = {};
+        payload['version'] = 1;
+        payload['nbytes'] = 3;
+        payload['account'] = 'kefka';
+        payload['objectId'] = 'gestahl';
+        payload['parts'] = [ 'maduin' ];
+
+        for (key in payload) {
+                obj = mod_jsprim.deepCopy(payload);
+                delete obj[key];
+                tests.push(obj);
+        }
+
+        mod_vasync.forEachParallel({
+            'func': function (arg, callback) {
+                var req, opts;
+
+                opts = mod_common.mpu_default_opts();
+                req = mod_http.request(opts, function (res) {
+                        t.equal(res.statusCode, 400);
+                        mpu_correct_error_headers(t, res);
+                        res.resume();
+                        callback(null);
+                });
+
+                req.on('error', function (err) {
+                        t.fail(sprintf('received error: %r', err));
+                        callback(err);
+                });
+                req.write(JSON.stringify(arg));
+
+                req.end();
+            },
+            inputs: tests
+        }, function (err, results) {
+                t.end();
+        });
+});
+
+test('bad payload, invalid version (string)', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['version'] = 'foobar';
+
+        mpu_bad_payload(payload, t);
+
+});
+
+test('bad payload, invalid version (num)', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['version'] = -1;
+
+        mpu_bad_payload(payload, t);
+});
+
+test('bad payload, invalid version (num)', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['version'] = 5;
+
+        mpu_bad_payload(payload, t);
+});
+
+test('bad payload, invalid version (array)', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['version'] = [ 3 ];
+
+        mpu_bad_payload(payload, t);
+});
+
+test('bad payload, invalid version (obj)', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['version'] = { foo: true };
+
+        mpu_bad_payload(payload, t);
+});
+
+test('bad payload, invalid nbytes (string)', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['nbytes'] = 'foobar';
+
+        mpu_bad_payload(payload, t);
+});
+
+test('bad payload, invalid nbytes (num)', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['nbytes'] = -1;
+
+        mpu_bad_payload(payload, t);
+});
+
+test('bad payload, invalid nbytes (array)', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['nbytes'] = [ 3 ];
+
+        mpu_bad_payload(payload, t);
+});
+
+test('bad payload, invalid nbytes (obj)', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['nbytes'] = { foo: true };
+
+        mpu_bad_payload(payload, t);
+});
+
+test('bad payload, invalid account (num)', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['account'] = 34;
+
+        mpu_bad_payload(payload, t);
+});
+
+test('bad payload, invalid account (array)', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['account'] = [ 3 ];
+
+        mpu_bad_payload(payload, t);
+});
+
+test('bad payload, invalid account (obj)', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['account'] = { foo: true };
+
+        mpu_bad_payload(payload, t);
+});
+
+test('bad payload, invalid objectId (num)', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['objectId'] = 34;
+
+        mpu_bad_payload(payload, t);
+});
+
+test('bad payload, invalid objectId (array)', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['objectId'] = [ 3 ];
+
+        mpu_bad_payload(payload, t);
+});
+
+test('bad payload, invalid objectId (obj)', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['objectId'] = { foo: true };
+
+        mpu_bad_payload(payload, t);
+});
+
+test('bad payload, invalid parts (num)', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['parts'] = 34;
+
+        mpu_bad_payload(payload, t);
+});
+
+test('bad payload, invalid parts (string)', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['parts'] = 'foobar';
+
+        mpu_bad_payload(payload, t);
+});
+
+test('bad payload, invalid parts (array)', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['parts'] = [ 3 ];
+
+        mpu_bad_payload(payload, t);
+});
+
+test('bad payload, invalid parts (obj)', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['parts'] = { foo: true };
+
+        mpu_bad_payload(payload, t);
+});
+
+test('bad payload, invalid md5 (num)', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['md5'] = 34;
+
+        mpu_bad_payload(payload, t);
+});
+
+test('bad payload, invalid md5 (array)', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['md5'] = [ 3 ];
+
+        mpu_bad_payload(payload, t);
+});
+
+test('bad payload, invalid md5 (obj)', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['md5'] = { foo: true };
+
+        mpu_bad_payload(payload, t);
+});
+
+test('bad payload, invalid md5 (wrong len)', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['md5'] = 'foobar';
+
+        mpu_bad_payload(payload, t);
+});
+
+test('bad payload, bad b64 (wrong len)', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['md5'] = 'kQyLxzEQsM0bxdK8rnglEQ*=';
+
+        mpu_bad_payload(payload, t);
+});
+
+test('bad pyaload, too many parts', function (t) {
+        var payload, i;
+
+        payload = mpu_basic_bad_payload();
+        payload['parts'] = [];
+        for (i = 0; i < 20000; i++) {
+                payload['parts'].push(i.toString());
+        }
+
+        mpu_bad_payload(payload, t);
+});
+
+test('bad payload, invalid account (\'.\')', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['account'] = 'foo.bar';
+
+        mpu_bad_payload(payload, t);
+});
+
+test('bad payload, invalid account (\'/\')', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['account'] = 'foo/bar';
+
+        mpu_bad_payload(payload, t);
+});
+
+test('bad payload, invalid objectId (\'.\')', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['objectId'] = 'foo.bar';
+
+        mpu_bad_payload(payload, t);
+});
+
+test('bad payload, invalid objectId (\'/\')', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['objectId'] = 'foo/bar';
+
+        mpu_bad_payload(payload, t);
+});
+
+test('bad payload, invalid parts (\'.\')', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['parts'] = [ 'foo.bar' ];
+
+        mpu_bad_payload(payload, t);
+});
+
+test('bad payload, invalid parts (\'/\')', function (t) {
+        var payload;
+
+        payload = mpu_basic_bad_payload();
+        payload['parts'] = [ 'foo/bar' ];
+
+        mpu_bad_payload(payload, t);
+});
diff --git a/test/mpu.test.js b/test/mpu.test.js
new file mode 100644
index 0000000..cf223ae
--- /dev/null
+++ b/test/mpu.test.js
@@ -0,0 +1,281 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2017 Joyent, Inc.
+ */
+
+/*
+ * Test basic MPU construction.
+ */
+
+var mod_test = require('tape');
+var test = mod_test.test;
+var mod_extsprintf = require('extsprintf');
+var sprintf = mod_extsprintf.sprintf;
+var mod_http = require('http');
+var mod_crypto = require('crypto');
+var mod_vasync = require('vasync');
+var mod_uuid = require('node-uuid');
+var mod_jsprim = require('jsprim');
+
+var mod_common = require('./common.js');
+
+var MPU_NFILES = 5;
+var MPU_MAX_SIZE = 256;
+var MPU_COMMIT = {};
+var MPU_MD5;
+
+/*
+ * Submit a garbage value for the body length
+ */
+function mpu_send_bad_length(t)
+{
+        var req, opts, body;
+
+        body = mod_jsprim.deepCopy(MPU_COMMIT);
+        body.nbytes--;
+        opts = mod_common.mpu_default_opts();
+        req = mod_http.request(opts, function (res) {
+                t.equal(res.statusCode, 409);
+                t.equal(res.headers['content-type'], 'application/json');
+                t.ok(res.headers['content-length'] > 0,
+                    'non-zero content length');
+                res.resume();
+                t.end();
+        });
+
+        req.on('error', function (err) {
+                t.fail(sprintf('received error: %r', err));
+                t.end();
+        });
+
+        req.write(JSON.stringify(body));
+        req.end();
+
+}
+
+/*
+ * Run a test which generates a bad md5 sum
+ */
+function mpu_send_bad_md5(t)
+{
+        var req, opts, body, md5;
+
+        body = mod_jsprim.deepCopy(MPU_COMMIT);
+        md5 = mod_crypto.createHash('md5');
+        md5.update('Son of a Submariner');
+        body.md5 = md5.digest('base64');
+        t.notEqual(body.md5, MPU_MD5);
+        opts = mod_common.mpu_default_opts();
+        req = mod_http.request(opts, function (res) {
+                t.equal(res.statusCode, 469);
+                t.equal(res.headers['content-type'], 'application/json');
+                t.ok(res.headers['content-length'] > 0,
+                    'non-zero content length');
+                res.resume();
+                t.end();
+        });
+
+        req.on('error', function (err) {
+                t.fail(sprintf('received error: %r', err));
+                t.end();
+        });
+
+        req.write(JSON.stringify(body));
+        req.end();
+
+}
+
+test('setup', function (t) {
+        t.plan(0);
+        mod_common.mpu_setup();
+
+        MPU_COMMIT['version'] = 1;
+        MPU_COMMIT['nbytes'] = 0;
+        MPU_COMMIT['account'] = mod_uuid.v4();
+        MPU_COMMIT['objectId'] = mod_uuid.v4();
+        MPU_COMMIT['parts'] = [];
+        console.log(sprintf('# account: %s, object: %s', MPU_COMMIT['account'],
+            MPU_COMMIT['objectId']));
+        t.end();
+});
+
+test('stream temporary files', function (t) {
+        var i, data, size, parts, indexes, md5, buf;
+
+        data = [];
+        parts = [];
+        indexes = [];
+        md5 = mod_crypto.createHash('md5');
+        for (i = 0; i < MPU_NFILES; i++) {
+                size = Math.ceil(Math.random() * MPU_MAX_SIZE);
+                MPU_COMMIT.nbytes += size;
+                buf = mod_crypto.randomBytes(size);
+                data.push(buf);
+                md5.update(buf);
+                indexes.push(i);
+                parts.push(mod_uuid.v4());
+        }
+        MPU_COMMIT.parts = parts;
+        MPU_MD5 = md5.digest('base64');
+
+        mod_vasync.forEachParallel({
+            func: function (arg, callback) {
+                var req, opts, defopts;
+
+                defopts = mod_common.mpu_default_opts();
+                opts = {};
+                opts.host = defopts.host;
+                opts.port = defopts.port;
+                opts.method = 'PUT';
+                opts.path = sprintf('/%s/%s', MPU_COMMIT.account, parts[arg]);
+                req = mod_http.request(opts, function (res) {
+                        t.equal(res.statusCode, 201);
+                        res.resume();
+                        callback(null);
+                });
+
+                req.on('error', function (err) {
+                        t.fail(sprintf('received error: %r', err));
+                        callback(err);
+                });
+                req.write(data[arg]);
+                req.end();
+
+            }, inputs: indexes
+        }, function (err, results) {
+                t.end();
+        });
+});
+
+test('send mpu commit with bad size', mpu_send_bad_length);
+
+test('send mpu commit with bad md5', mpu_send_bad_md5);
+
+test('send mpu commit', function (t) {
+        var req, opts;
+
+        opts = mod_common.mpu_default_opts();
+        req = mod_http.request(opts, function (res) {
+                t.equal(res.statusCode, 204);
+                t.equal(res.headers['x-joyent-computed-content-md5'], MPU_MD5);
+                res.resume();
+                t.end();
+        });
+
+        req.on('error', function (err) {
+                t.fail(sprintf('received error: %r', err));
+                t.end();
+        });
+
+        req.write(JSON.stringify(MPU_COMMIT));
+        req.end();
+});
+
+test('verify temporary files are removed', function (t) {
+        mod_vasync.forEachParallel({
+            func: function (arg, callback) {
+                var req, opts;
+
+                opts = mod_common.mako_default_opts();
+                opts.method = 'GET';
+                opts.path = sprintf('/%s/%s', MPU_COMMIT['account'], arg);
+                req = mod_http.request(opts, function (res) {
+                        t.ok(res.statusCode, 404);
+                        res.resume();
+                        callback(null);
+                });
+
+                req.on('error', function (err) {
+                        t.fail(sprintf('received error: %r', err));
+                        callback(err);
+                });
+                req.end();
+            }, inputs: MPU_COMMIT['parts']
+        }, function (err, results) {
+                t.end();
+        });
+});
+
+test('send second mpu commit', function (t) {
+        var req, opts;
+
+        opts = mod_common.mpu_default_opts();
+        req = mod_http.request(opts, function (res) {
+                t.equal(res.statusCode, 204);
+                t.equal(res.headers['x-joyent-computed-content-md5'], MPU_MD5);
+                res.resume();
+                t.end();
+        });
+
+        req.on('error', function (err) {
+                t.fail(sprintf('received error: %r', err));
+                t.end();
+        });
+
+        req.write(JSON.stringify(MPU_COMMIT));
+        req.end();
+});
+
+test('send second mpu commit with md5', function (t) {
+        var req, opts, body;
+
+        body = mod_jsprim.deepCopy(MPU_COMMIT);
+        body.md5 = MPU_MD5;
+        opts = mod_common.mpu_default_opts();
+        req = mod_http.request(opts, function (res) {
+                t.equal(res.statusCode, 204);
+                t.equal(res.headers['x-joyent-computed-content-md5'], MPU_MD5);
+                res.resume();
+                t.end();
+        });
+
+        req.on('error', function (err) {
+                t.fail(sprintf('received error: %r', err));
+                t.end();
+        });
+
+        req.write(JSON.stringify(body));
+        req.end();
+});
+
+test('send second mpu commit with bad size', mpu_send_bad_length);
+
+test('send second mpu commit with bad md5', mpu_send_bad_md5);
+
+test('verify md5 on GET', function (t) {
+        var req, opts;
+        opts = mod_common.mako_default_opts();
+        opts.method = 'GET';
+        opts.path = sprintf('/%s/%s', MPU_COMMIT['account'],
+            MPU_COMMIT['objectId']);
+
+        req = mod_http.request(opts, function (res) {
+                var md5;
+                t.ok(res.statusCode, 200);
+                if (res.statusCode != 200) {
+                        t.end();
+                        return;
+                }
+
+                md5 = mod_crypto.createHash('md5');
+                res.on('data', function (buf) {
+                        md5.update(buf);
+                });
+
+                res.on('end', function () {
+                        t.equal(md5.digest('base64'), MPU_MD5);
+                        t.end();
+                });
+        });
+
+        req.on('error', function (err) {
+                t.fail(sprintf('received error: %r', err));
+                t.end();
+        });
+        req.end();
+});
diff --git a/tools/mk/Makefile.nginx.defs b/tools/mk/Makefile.nginx.defs
index 8a8e238..e5f69df 100644
--- a/tools/mk/Makefile.nginx.defs
+++ b/tools/mk/Makefile.nginx.defs
@@ -6,63 +6,11 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright 2017, Joyent, Inc.
 #
 
 #
-# Makefile.nginx.defs: Makefile for building and bundling your own Node.js.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-#
-# This Makefile facilitates building and bundling your own copy of Node.js in
-# your repo.  All it does is define variables for nginx, nginx-waf, and npm for
-# you to use elsewhere in your Makefile and rules to build these tools when
-# needed.
-#
-# To use this facility, include "Makefile.nginx.defs", use the variables as
-# described below to define targets, and then include "Makefile.nginx.targ".
-#
-# There are two use cases addressed here:
-#
-# (1) Invoking nginx, nginx-waf, or npm as part of the build process, as in "npm
-#     install" and "nginx-waf configure build".  To facilitate this, this
-#     Makefile defines Make variables NGINX, NGINX_WAF, and NPM that you can use
-#     to invoke these commands during the build process.  You MUST NOT assume
-#     that these variables just evaluate to the filenames themselves, as they
-#     may have environment variable definitions and other things that prevent
-#     you from using them directly as a filename.  If you want that, see (2).
-#
-#     Wherever you use one of these variables, you MUST include a dependency on
-#     the corresponding *_EXEC variable as well, like so:
-#
-#	nginx_modules/restify: deps/restify $(NPM_EXEC)
-#		$(NPM) install deps/restify
-#
-#     or better, use an order-only dependency to avoid spurious rebuilds:
-#
-#	nginx_modules/restify: deps/restify | $(NPM_EXEC)
-#		$(NPM) install deps/restify
-#
-#     Otherwise, the underlying file will not get built.  We don't
-#     automatically build them as part of "all" because that approach is
-#     brittle.
-#
-# When including this Makefile, you MAY also specify:
-#
-#	BUILD			top-level directory for built binaries
-#				(default: "build")
-#
-#	NGINX_INSTALL		where nginx should install its built items
-#				(default: "$BUILD/nginx")
-#
-#	NGINX_CONFIG_FLAGS	extra flags to pass to Nginx's "configure"
-#				(default: --prefix directive and
-#				 --with-http_dav_module)
+# Makefile.nginx.defs: Makefile for building nginx
 #
 
 TOP ?= $(error You must include Makefile.defs before this makefile)
@@ -75,10 +23,12 @@ NGINX_CONFIG_FLAGS += \
 	--prefix=$(TOP)/$(NGINX_INSTALL) \
 	--with-http_dav_module \
 	--with-http_stub_status_module \
-	--with-cc-opt="-I/opt/local/include" \
-	--with-ld-opt="-L/opt/local/lib -R/opt/local/lib"
+	--with-threads \
+	--with-http_mpu_commit \
+	--with-cc-opt="-std=gnu99 -I/opt/local/include" \
+	--with-ld-opt="-L/opt/local/lib -R/opt/local/lib -lumem"
 
-NGINX_EXEC	= $(NGINX_INSTALL)/bin/nginx
+NGINX_EXEC	= $(NGINX_INSTALL)/sbin/nginx
 
 # Ensure these use absolute paths to the executables to allow running
 # from a dir other than the project top.
diff --git a/tools/mk/Makefile.nginx.targ b/tools/mk/Makefile.nginx.targ
index 754d57c..9c7e113 100644
--- a/tools/mk/Makefile.nginx.targ
+++ b/tools/mk/Makefile.nginx.targ
@@ -18,8 +18,14 @@
 # eng.git and then update your repo to use the new version.
 #
 
-$(NGINX_EXEC): | deps/nginx/.git
-	(cd deps/nginx; ./auto/configure $(NGINX_CONFIG_FLAGS) && $(MAKE) && $(MAKE) install)
+deps/nginx/auto/configure: | deps/nginx/.git
+
+deps/nginx/Makefile: deps/nginx/auto/configure
+	cd deps/nginx && ./auto/configure $(NGINX_CONFIG_FLAGS)
+
+.PHONY: $(NGINX_EXEC)
+$(NGINX_EXEC): | deps/nginx/Makefile
+	(cd deps/nginx && $(MAKE) && $(MAKE) install)
 	cp $(ROOT)/sapi_manifests/mako/template $(NGINX_INSTALL)/conf/nginx.conf
 
 
diff --git a/tools/ngx_symcheck b/tools/ngx_symcheck
new file mode 100755
index 0000000..0ae5bb4
--- /dev/null
+++ b/tools/ngx_symcheck
@@ -0,0 +1,67 @@
+#!/bin/bash
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright 2017 Joyent, Inc.
+#
+
+#
+# This file checks the generated nginx symbol to ensure that we don't
+# see certain symbols and we do see others. This is mainly to ensure
+# that we have properly built a LFS-aware program.
+#
+
+PRESENT_SYMS="fstat64 open64 pread64 pwrite64"
+MISSING_SYMS="preadv pwritev preadv64 pwritev64 pread pwrite open fstat"
+NWRONG=
+
+function warn
+{
+        local msg="$*"
+        echo "$msg" >&2
+}
+
+function fatal
+{
+        local msg="$*"
+        [[ -z "$msg" ]] && msg="failed"
+        echo "$msg" >&2
+        exit 1
+}
+
+function check_one
+{
+	local bin sym exp
+	bin=$1
+	sym=$2
+	exp=$3
+
+	/usr/bin/nm -P $bin | awk \
+	    "{ if (\$1 == \"$sym\") { seen = 1 } } END{ exit (seen != 1) }"
+	if [[ $? -ne $exp ]]; then
+		echo -n "failed on checking $sym: " >&2
+		if [[ $exp -eq 0 ]]; then
+			echo "symbol missing, but expected it to be present"
+		else
+			echo "symbol present, but expected it to be missing"
+		fi
+		((NWRONG++))
+	fi
+}
+
+[[ $# -ne 1 ]] && fatal "ngx_symcheck: <binary>"
+[[ ! -f $1 ]] && fatal "cannot find file: $1"
+
+for s in $PRESENT_SYMS; do
+	check_one $1 $s 0
+done
+
+for s in $MISSING_SYMS; do
+	check_one $1 $s 1
+done
+
+[[ "$NWRONG" -eq 0 ]]
-- 
2.21.0

