commit caf130ff472b35d80ec404e4f405ec4c2750005d (refs/changes/63/2863/1)
Author: Trent Mick <trentm@gmail.com>
Date:   2017-10-25T12:01:04-07:00 (1 year, 11 months ago)
    
    PUBAPI-1454 cloudapi test suite improvements for multiple headnodes

diff --git a/test/common.js b/test/common.js
index ac03b25..93e9b76 100644
--- a/test/common.js
+++ b/test/common.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017 Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -856,17 +856,30 @@ function deleteResources(client, cb) {
 }
 
 
-function getHeadnode(client, cb) {
-    client.cnapi.listServers({ extras: 'sysinfo' }, function (err, servers) {
+/*
+ * Find a server to use for test provisions. We'll just use a running headnode
+ * (the simple case that works for COAL). Limitation: This assumes headnode
+ * provisioning is enabled (e.g. via 'sdcadm post-setup dev-headnode-prov').
+ */
+function getTestServer(client, cb) {
+    client.cnapi.listServers({
+        headnode: true,
+        extras: 'sysinfo'
+    }, function (err, servers) {
         if (err) {
-            return err;
+            cb(err);
+            return;
         }
 
-        var headnode = servers.filter(function (s) {
-            return s.headnode;
-        })[0];
+        var runningHeadnodes = servers.filter(function (s) {
+            return s.status === 'running';
+        });
 
-        return cb(null, headnode);
+        if (runningHeadnodes.length === 0) {
+            cb(new Error('could not find a test server'));
+        } else {
+            cb(null, runningHeadnodes[0]);
+        }
     });
 }
 
@@ -1027,7 +1040,7 @@ module.exports = {
     uuid: uuid,
     addPackage: addPackage,
     deletePackage: deletePackage,
-    getHeadnode: getHeadnode,
+    getTestServer: getTestServer,
     getTestImage: getTestImage,
 
     deleteResources: deleteResources,
diff --git a/test/machines.70.test.js b/test/machines.70.test.js
index 3ca64cf..5e9e8f6 100644
--- a/test/machines.70.test.js
+++ b/test/machines.70.test.js
@@ -21,7 +21,7 @@ var checkMachine = machinesCommon.checkMachine;
 
 var SDC_128 = common.sdc_128_package;
 
-var HEADNODE_UUID;
+var SERVER_UUID;
 var IMAGE_UUID;
 var MACHINE_UUID;
 
@@ -49,10 +49,10 @@ test('setup', function (t) {
 });
 
 
-test('Get Headnode', function (t) {
-    common.getHeadnode(CLIENT, function (err, headnode) {
+test('Get test server', function (t) {
+    common.getTestServer(CLIENT, function (err, testServer) {
         t.ifError(err);
-        HEADNODE_UUID = headnode.uuid;
+        SERVER_UUID = testServer.uuid;
         t.end();
     });
 });
@@ -74,7 +74,7 @@ test('Create machine with invalid package', function (t) {
         dataset: IMAGE_UUID,
         package: uuid().substr(0, 7),
         name: 'a' + uuid().substr(0, 7),
-        server_uuid: HEADNODE_UUID
+        server_uuid: SERVER_UUID
     };
 
     CLIENT.post('/my/machines', obj, function (err, req, res, body) {
@@ -90,7 +90,7 @@ test('CreateMachine w/o dataset fails', function (t) {
     var obj = {
         package: SDC_128.name,
         name: 'a' + uuid().substr(0, 7),
-        server_uuid: HEADNODE_UUID
+        server_uuid: SERVER_UUID
     };
 
     CLIENT.post('/my/machines', obj, function (err, req, res, body) {
@@ -107,7 +107,7 @@ test('Create machine with invalid network', function (t) {
         dataset: IMAGE_UUID,
         package: SDC_128.name,
         name: 'a' + uuid().substr(0, 7),
-        server_uuid: HEADNODE_UUID,
+        server_uuid: SERVER_UUID,
         networks: [uuid()]
     };
 
@@ -126,7 +126,7 @@ test('CreateMachine', function (t) {
         image: IMAGE_UUID,
         package: SDC_128.name,
         name: 'a' + uuid().substr(0, 7),
-        server_uuid: HEADNODE_UUID,
+        server_uuid: SERVER_UUID,
         firewall_enabled: true
     };
 
@@ -231,7 +231,7 @@ test('Create KVM machine', function (t) {
             image: LINUX_IMAGE_UUID,
             package: SDC_128.name,
             name: 'a' + uuid().substr(0, 7),
-            server_uuid: HEADNODE_UUID
+            server_uuid: SERVER_UUID
         };
 
         CLIENT.post('/my/machines', obj, function (err, req, res, body) {
diff --git a/test/machines.71.test.js b/test/machines.71.test.js
index c62de34..277c914 100644
--- a/test/machines.71.test.js
+++ b/test/machines.71.test.js
@@ -22,7 +22,7 @@ var checkNotFound = common.checkNotFound;
 
 var SDC_128 = common.sdc_128_package;
 
-var HEADNODE_UUID;
+var SERVER_UUID;
 var MACHINE_UUID;
 var IMAGE_UUID;
 var IMAGE_JOB_UUID;
@@ -48,10 +48,10 @@ test('setup', function (t) {
 });
 
 
-test('Get Headnode', function (t) {
-    common.getHeadnode(CLIENT, function (err, headnode) {
+test('Get test server', function (t) {
+    common.getTestServer(CLIENT, function (err, testServer) {
         t.ifError(err);
-        HEADNODE_UUID = headnode.uuid;
+        SERVER_UUID = testServer.uuid;
         t.end();
     });
 });
@@ -73,7 +73,7 @@ test('Create machine with invalid package', function (t) {
         dataset: IMAGE_UUID,
         'package': uuid().substr(0, 7),
         name: 'a' + uuid().substr(0, 7),
-        server_uuid: HEADNODE_UUID
+        server_uuid: SERVER_UUID
     };
 
     CLIENT.post('/my/machines', obj, function (err, req, res, body) {
@@ -89,7 +89,7 @@ test('CreateMachine w/o dataset fails', function (t) {
     var obj = {
         package: SDC_128.name,
         name: 'a' + uuid().substr(0, 7),
-        server_uuid: HEADNODE_UUID
+        server_uuid: SERVER_UUID
     };
 
     CLIENT.post('/my/machines', obj, function (err, req, res, body) {
@@ -106,7 +106,7 @@ test('Create machine with invalid network', function (t) {
         dataset: IMAGE_UUID,
         package: SDC_128.name,
         name: 'a' + uuid().substr(0, 7),
-        server_uuid: HEADNODE_UUID,
+        server_uuid: SERVER_UUID,
         networks: [uuid()]
     };
 
@@ -125,7 +125,7 @@ test('CreateMachine', function (t) {
         image: IMAGE_UUID,
         package: SDC_128.name,
         name: 'a' + uuid().substr(0, 7),
-        server_uuid: HEADNODE_UUID,
+        server_uuid: SERVER_UUID,
         firewall_enabled: true
     };
 
diff --git a/test/machines.72.test.js b/test/machines.72.test.js
index 175d420..7c6342e 100644
--- a/test/machines.72.test.js
+++ b/test/machines.72.test.js
@@ -25,7 +25,7 @@ var checkMachine = machinesCommon.checkMachine;
 var SDC_128 = common.sdc_128_package;
 
 var PROVISIONABLE_NET_UUID;
-var HEADNODE_UUID;
+var SERVER_UUID;
 var IMAGE_UUID;
 
 var ROLE_NAME;
@@ -64,10 +64,10 @@ test('setup', function (t) {
 });
 
 
-test('Get Headnode', function (t) {
-    common.getHeadnode(CLIENT, function (err, headnode) {
+test('Get test server', function (t) {
+    common.getTestServer(CLIENT, function (err, testServer) {
         t.ifError(err);
-        HEADNODE_UUID = headnode.uuid;
+        SERVER_UUID = testServer.uuid;
         t.end();
     });
 });
@@ -103,7 +103,7 @@ test('CreateMachine', function (t) {
         image: IMAGE_UUID,
         package: SDC_128.name,
         name: 'a' + uuid().substr(0, 7),
-        server_uuid: HEADNODE_UUID,
+        server_uuid: SERVER_UUID,
         firewall_enabled: true
     };
 
@@ -189,7 +189,7 @@ test('7.3 networks format should fail', function (t) {
         package: SDC_128.name,
         name: 'a' + uuid().substr(0, 7),
         networks: [ { ipv4_uuid: PROVISIONABLE_NET_UUID, ipv4_count: 1 } ],
-        server_uuid: HEADNODE_UUID
+        server_uuid: SERVER_UUID
     };
 
     CLIENT.post({
@@ -304,7 +304,7 @@ test('sub-user tests', function (t) {
                 image: IMAGE_UUID,
                 package: SDC_128.name,
                 name: 'a' + uuid().substr(0, 7),
-                server_uuid: HEADNODE_UUID,
+                server_uuid: SERVER_UUID,
                 firewall_enabled: true
             };
 
diff --git a/test/machines.73.test.js b/test/machines.73.test.js
index 7978aa2..e38a404 100644
--- a/test/machines.73.test.js
+++ b/test/machines.73.test.js
@@ -22,7 +22,7 @@ var checkMachine = machinesCommon.checkMachine;
 var SDC_128 = common.sdc_128_package;
 
 var IMAGE_UUID;
-var HEADNODE_UUID;
+var SERVER_UUID;
 var PROVISIONABLE_NET_UUID;
 var MACHINE_UUID;
 
@@ -44,7 +44,7 @@ function provisionWithInvalidNetwork(t, networks, errMessage) {
         package: SDC_128.name,
         name: 'a' + uuid().substr(0, 7),
         networks: networks,
-        server_uuid: HEADNODE_UUID
+        server_uuid: SERVER_UUID
     };
 
     CLIENT.post({
@@ -75,10 +75,10 @@ test('setup', function (t) {
 });
 
 
-test('Get Headnode', function (t) {
-    common.getHeadnode(CLIENT, function (err, headnode) {
+test('Get test server', function (t) {
+    common.getTestServer(CLIENT, function (err, testServer) {
         t.ifError(err);
-        HEADNODE_UUID = headnode.uuid;
+        SERVER_UUID = testServer.uuid;
         t.end();
     });
 });
@@ -116,7 +116,7 @@ test('CreateMachine: new networks format', function (t) {
         networks: [ {
             ipv4_uuid: PROVISIONABLE_NET_UUID
         } ],
-        server_uuid: HEADNODE_UUID
+        server_uuid: SERVER_UUID
     };
 
     machinesCommon.createMachine(t, CLIENT, obj, function (_, machineUuid) {
diff --git a/test/machines.80.test.js b/test/machines.80.test.js
index 0c9287b..2c9b626 100644
--- a/test/machines.80.test.js
+++ b/test/machines.80.test.js
@@ -22,7 +22,7 @@ var checkMachine = machinesCommon.checkMachine;
 var SDC_128 = common.sdc_128_package;
 
 var IMAGE_UUID;
-var HEADNODE_UUID;
+var SERVER_UUID;
 var PROVISIONABLE_NET_UUID;
 var MACHINE_UUID;
 
@@ -47,10 +47,10 @@ test('setup', function (t) {
 });
 
 
-test('Get Headnode', function (t) {
-    common.getHeadnode(CLIENT, function (err, headnode) {
+test('Get test server', function (t) {
+    common.getTestServer(CLIENT, function (err, testServer) {
         t.ifError(err);
-        HEADNODE_UUID = headnode.uuid;
+        SERVER_UUID = testServer.uuid;
         t.end();
     });
 });
@@ -71,7 +71,7 @@ test('CreateMachine', function (t) {
         image: IMAGE_UUID,
         package: SDC_128.name,
         name: 'a' + uuid().substr(0, 7),
-        server_uuid: HEADNODE_UUID,
+        server_uuid: SERVER_UUID,
         firewall_enabled: true
     };
 
diff --git a/test/machines.test.js b/test/machines.test.js
index 5d488c7..6c60b29 100644
--- a/test/machines.test.js
+++ b/test/machines.test.js
@@ -86,7 +86,7 @@ var SDC_512 = {
     active: true
 };
 
-var HEADNODE_UUID;
+var SERVER_UUID;
 var IMAGE_UUID;
 var MACHINE_UUID;
 
@@ -142,10 +142,10 @@ test('setup', function (t) {
 });
 
 
-test('Get Headnode', function (t) {
-    common.getHeadnode(CLIENT, function (err, headnode) {
+test('Get test server', function (t) {
+    common.getTestServer(CLIENT, function (err, testServer) {
         t.ifError(err);
-        HEADNODE_UUID = headnode.uuid;
+        SERVER_UUID = testServer.uuid;
         t.end();
     });
 });
@@ -178,7 +178,7 @@ test('Create machine with inactive package', function (t) {
         image: IMAGE_UUID,
         package: SDC_256_INACTIVE.name,
         name: 'a' + uuid().substr(0, 7),
-        server_uuid: HEADNODE_UUID
+        server_uuid: SERVER_UUID
     };
 
     CLIENT.post('/my/machines', obj, function (err, req, res, body) {
@@ -202,7 +202,7 @@ test('Create machine with os mismatch', function (t) {
         image: IMAGE_UUID,
         package: SDC_128_LINUX.name,
         name: 'a' + uuid().substr(0, 7),
-        server_uuid: HEADNODE_UUID,
+        server_uuid: SERVER_UUID,
         firewall_enabled: true
     };
 
@@ -236,7 +236,7 @@ test('Create machine with too many public networks', function (t) {
             image: IMAGE_UUID,
             package: SDC_256.name,
             name: 'a' + uuid().substr(0, 7),
-            server_uuid: HEADNODE_UUID,
+            server_uuid: SERVER_UUID,
             firewall_enabled: true,
             networks: networkUuids
         };
@@ -293,7 +293,7 @@ test('CreateMachine using invalid networks', function (t) {
     var obj = {
         image: IMAGE_UUID,
         package: SDC_256.name,
-        server_uuid: HEADNODE_UUID,
+        server_uuid: SERVER_UUID,
         networks: ['8180ef72-40fa-4b86-915b-803bcf96b442'] // invalid
     };
 
@@ -324,7 +324,7 @@ test('CreateMachine using network without permissions', function (t) {
     var vmDetails = {
         image: IMAGE_UUID,
         package: SDC_256.name,
-        server_uuid: HEADNODE_UUID
+        server_uuid: SERVER_UUID
     };
 
     CLIENT.napi.createNetwork(netDetails, function (err, net) {
@@ -374,7 +374,7 @@ test('Create machine with invalid locality', function (t) {
         image: IMAGE_UUID,
         package: SDC_256.name,
         name: 'a' + uuid().substr(0, 7),
-        server_uuid: HEADNODE_UUID,
+        server_uuid: SERVER_UUID,
         locality: { near: 'asdasd' }
     };
 
@@ -411,7 +411,7 @@ test('CreateMachine using image without permission', function (t) {
         var obj = {
             image: inaccessibleImage.uuid,
             package: SDC_256.name,
-            server_uuid: HEADNODE_UUID
+            server_uuid: SERVER_UUID
         };
 
         return CLIENT.post('/my/machines', obj, function (er2, req, res, body) {
@@ -447,7 +447,7 @@ test('CreateMachine without approved_for_provisioning', function (t) {
         var obj = {
             image: IMAGE_UUID,
             package: SDC_256.name,
-            server_uuid: HEADNODE_UUID
+            server_uuid: SERVER_UUID
         };
 
         httpClient.post('/my/machines', obj, function (err2, req, res, body) {
@@ -486,7 +486,7 @@ test('CreateMachine', function (t) {
             far: 'af4167f0-beda-4af9-9ae4-99d544499c14', // fake UUID
             strict: true
         },
-        server_uuid: HEADNODE_UUID,
+        server_uuid: SERVER_UUID,
         firewall_enabled: true
     };
 
@@ -942,7 +942,7 @@ test('ListMachines destroyed', function (t) {
 test('CreateMachine using query args', function (t) {
     var query = '/my/machines?image=' + IMAGE_UUID +
                 '&package=' + SDC_128.name +
-                '&server_uuid=' + HEADNODE_UUID;
+                '&server_uuid=' + SERVER_UUID;
 
     CLIENT.post(query, {}, function (err, req, res, body) {
         t.ifError(err, 'POST /my/machines error');
@@ -978,7 +978,7 @@ test('CreateMachine using multiple same networks', function (t) {
         var obj = {
             image: IMAGE_UUID,
             package: SDC_128.name,
-            server_uuid: HEADNODE_UUID,
+            server_uuid: SERVER_UUID,
             networks: [networkUuid, networkUuid, networkUuid]
         };
 
@@ -1206,7 +1206,7 @@ test('CreateMachine with {{shortId}} in alias', function (t) {
         image: IMAGE_UUID,
         package: SDC_256.name,
         name: 'db-{{shortId}}-1.0',
-        server_uuid: HEADNODE_UUID,
+        server_uuid: SERVER_UUID,
         firewall_enabled: true
     };
 
@@ -1326,7 +1326,7 @@ test('Delete packageless/nicless machine', deleteMachine);
 test('Affinity tests', function (t) {
     var affinityTest = require('./machines/affinity');
 
-    affinityTest(t, CLIENT, OTHER, IMAGE_UUID, SDC_128.uuid, HEADNODE_UUID,
+    affinityTest(t, CLIENT, OTHER, IMAGE_UUID, SDC_128.uuid, SERVER_UUID,
         function () {
         t.end();
     });
diff --git a/test/nics.test.js b/test/nics.test.js
index b40b970..5e8d9c7 100644
--- a/test/nics.test.js
+++ b/test/nics.test.js
@@ -180,16 +180,15 @@ function deleteFixtures(t, fixtures, cb) {
             });
         },
 
-        function getHeadnode(ctx, next) {
+        function getATestServer(ctx, next) {
             if (fixtures) {
-                ctx.headnode = fixtures.headnode;
+                ctx.server = fixtures.server;
                 next();
                 return;
-
             }
-            common.getHeadnode(CLIENT, function (err, headnode) {
-                t.ifError(err, 'getHeadnode');
-                ctx.headnode = headnode;
+            common.getTestServer(CLIENT, function (err, testServer) {
+                t.ifError(err, 'getATestServer');
+                ctx.server = testServer;
                 next();
             });
         },
@@ -207,8 +206,8 @@ function deleteFixtures(t, fixtures, cb) {
                 nicTags.push(fixtures.internal.nicTag.name);
             }
 
-            removeTagsFromServer(t, nicTags, ctx.headnode, function (err, job) {
-                t.ifError(err, 'remove NIC tags from headnode server: '
+            removeTagsFromServer(t, nicTags, ctx.server, function (err, job) {
+                t.ifError(err, 'remove NIC tags from server: '
                     + nicTags);
 
                 waitForJob(CLIENT, job.job_uuid, function (err2) {
@@ -287,10 +286,10 @@ function createFixtures(t, cb) {
             });
         },
 
-        function getHeadnode(_, next) {
-            common.getHeadnode(CLIENT, function (err, headnode) {
-                t.ifError(err, 'getHeadnode');
-                fixtures.headnode = headnode;
+        function getATestServer(_, next) {
+            common.getTestServer(CLIENT, function (err, testServer) {
+                t.ifError(err, 'getTestServer');
+                fixtures.server = testServer;
                 next();
             });
         },
@@ -300,14 +299,13 @@ function createFixtures(t, cb) {
 
             /*
              * If we created an 'internal' network above, we'll need to add
-             * that NIC tag to the server to which we will provision
-             * (i.e. the headnode)
+             * that NIC tag to the server to which we will provision.
              */
             if (fixtures.internal) {
                 nicTags.push(fixtures.internal.nicTag.name);
             }
 
-            addNicTagsToServer(t, nicTags, fixtures.headnode,
+            addNicTagsToServer(t, nicTags, fixtures.server,
                     function (err, job) {
                 t.ifError(err);
                 waitForJob(CLIENT, job.job_uuid, function (err2) {
@@ -329,7 +327,7 @@ function createFixtures(t, cb) {
                     image: image.id,
                     package: SDC_128.name,
                     name: FIXTURE_DATA.inst.name,
-                    server_uuid: fixtures.headnode.uuid,
+                    server_uuid: fixtures.server.uuid,
                     firewall_enabled: true
                 };
                 machinesCommon.createMachine(t, CLIENT, obj,
