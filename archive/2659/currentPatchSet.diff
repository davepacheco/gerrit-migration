From ca2d98812a35f9213b224de4c2d4ff55d6c9b5bd Mon Sep 17 00:00:00 2001
From: Kody A Kantor <kody.kantor@gmail.com>
Date: Fri, 6 Oct 2017 18:37:10 +0000
Subject: [PATCH] MORAY-421 Moray could expose metrics Reviewed by: David
 Pacheco <dap@joyent.com> Reviewed by: Cody Peter Mello
 <cody.mello@joyent.com> Approved by: Cody Peter Mello <cody.mello@joyent.com>

---
 README.md                         | 62 +++++++++++++++++++++++++++
 etc/config.coal.json              |  4 +-
 etc/config.coal.manta.json        |  4 +-
 etc/config.lab.json               |  4 +-
 etc/config.local.json             |  4 +-
 etc/config.standalone.json        |  5 ++-
 lib/manatee.js                    | 16 ++++++-
 lib/pg.js                         | 53 +++++++++++++++++++----
 lib/server.js                     | 71 +++++++++++++++++++++++++------
 lib/standalone.js                 | 20 ++++++++-
 main.js                           |  6 +--
 package.json                      |  4 +-
 sapi_manifests/moray/template     |  4 +-
 sdc/sapi_manifests/moray/template |  4 +-
 14 files changed, 226 insertions(+), 35 deletions(-)

diff --git a/README.md b/README.md
index 95a2ec7..41929a7 100644
--- a/README.md
+++ b/README.md
@@ -180,6 +180,8 @@ Postgres database without using Manatee. A single function is exported,
 - `audit`, a boolean indicating whether to log the result and duration of all
   requests
 - `kangPort`, the port the Kang server should listen on
+- `collector`, an [artedi](https://github.com/joyent/node-artedi) metric
+  collector
 - `standalone`, an object specifying the standalone server's configuration:
     * `pg`, an object which specifies the Postgres client pool confguration:
         - `queryTimeout`, how long (in milliseconds) before a query is timed out
@@ -192,6 +194,66 @@ Postgres database without using Manatee. A single function is exported,
 `createServer` returns a server object with a `listen()` method to start the
 server. The server will emit a `ready` event once it's started up.
 
+## Monitoring
+
+Moray exposes metric and Kang internal state information accessible through a
+REST API. The port used for the monitoring server is provided as the `-k`
+argument when starting the Moray server.
+
+### Kang
+
+[Kang](https://github.com/davepacheco/kang) data can be retrieved from Moray
+by issuing `GET /kang/snapshot` on the Kang port.
+
+For example, a `curl` command assuming the monitoring server is running on
+port 3020 of the local host:
+
+```
+$ curl http://localhost:3020/kang/snapshot
+```
+
+Kang also offers a command-line interactive debugger, which ships in Moray
+zones. This can be used to combine Kang data from multiple Moray processes.
+
+For example, if we have four Moray processes inside a Moray zone we can use this
+command to view their state simultaneously:
+
+```
+$ kang -h localhost:3021,localhost:3022,localhost:3023,localhost:3024
+
+```
+
+### Metrics
+
+Application metrics can be retrieved from the route `GET /metrics`, also on the
+Kang port. The metrics are returned in the [Prometheus](https://prometheus.io/)
+v0.0.4 text format.
+
+For example, a `curl` command can be used to scrape metrics:
+
+```
+$ curl http://localhost:3020/metrics
+```
+
+The following metrics are always collected:
+
+- Open Postgres connections
+- Available Postgres connections
+- Pending Postgres connections
+- Backend request queue length
+- End-to-end latency for all requests
+- Count of requests completed
+
+Each of the metrics returned include the following metadata labels:
+
+- Datacenter name (i.e. us-east-1)
+- CN UUID
+- Zone UUID
+- PID
+
+The metric collection functionality is intended to be consumed by a monitoring
+service like a Prometheus or InfluxDB server.
+
 ## License
 
 This Source Code Form is subject to the terms of the Mozilla Public License, v.
diff --git a/etc/config.coal.json b/etc/config.coal.json
index fe0af01..d3f65a8 100644
--- a/etc/config.coal.json
+++ b/etc/config.coal.json
@@ -26,5 +26,7 @@
     "cache": {
         "size": 1000,
         "expiry": 60
-    }
+    },
+    "server_uuid": "fake-coal-server-uuid",
+    "datacenter": "coal"
 }
diff --git a/etc/config.coal.manta.json b/etc/config.coal.manta.json
index 7973d66..5320d54 100644
--- a/etc/config.coal.manta.json
+++ b/etc/config.coal.manta.json
@@ -32,5 +32,7 @@
   "cache": {
     "size": 5000,
     "expiry": 60
-  }
+  },
+  "server_uuid": "fake-manta-coal-server-uuid",
+  "datacenter": "coal"
 }
diff --git a/etc/config.lab.json b/etc/config.lab.json
index b9e8f49..3bf9fcc 100644
--- a/etc/config.lab.json
+++ b/etc/config.lab.json
@@ -28,5 +28,7 @@
         "cache": {
                 "size": 1000,
                 "expiry": 60
-        }
+        },
+        "server_uuid": "fake-lab-server-uuid",
+        "datacenter": "lab"
 }
diff --git a/etc/config.local.json b/etc/config.local.json
index b48db65..653949a 100644
--- a/etc/config.local.json
+++ b/etc/config.local.json
@@ -25,5 +25,7 @@
         "cache": {
                 "size": 1000,
                 "expiry": 60
-        }
+        },
+        "server_uuid": "fake-localhost-uuid",
+        "datacenter": "local"
 }
diff --git a/etc/config.standalone.json b/etc/config.standalone.json
index 5d838fa..3909f2f 100644
--- a/etc/config.standalone.json
+++ b/etc/config.standalone.json
@@ -16,5 +16,8 @@
     "cache": {
         "size": 1000,
         "expiry": 60
-    }
+    },
+    "server_uuid": "fake-standalone-uuid",
+    "datacenter": "standalone"
+
 }
diff --git a/lib/manatee.js b/lib/manatee.js
index a7263b3..649e3ca 100644
--- a/lib/manatee.js
+++ b/lib/manatee.js
@@ -84,6 +84,7 @@ function Manatee(options) {
     assert.object(options.pg, 'options.pg');
     assert.string(options.pg.user, 'options.pg.user');
     assert.object(options.manatee, 'options.manatee');
+    assert.object(options.collector, 'options.collector');
 
     var self = this;
     EventEmitter.call(this);
@@ -99,6 +100,17 @@ function Manatee(options) {
     this._manatee = null;
     this._database = null;
     this._pgUser = options.pg.user;
+    this._collector = options.collector;
+
+    /*
+     * Collect connection pool information when metrics are scraped.
+     */
+    self._collector.addTriggerFunction(function (_, cb) {
+        if (self._database) {
+            self._database.getPoolStats();
+        }
+        setImmediate(cb);
+    });
 
     self._manatee = manatee.createClient(self._manateeCfg);
     self._manatee.on('ready', function () {
@@ -253,7 +265,8 @@ Manatee.prototype._refresh = function _refresh(topology) {
             maxIdleTime: opts.pgConfig.maxIdleTime,
             role: 'primary',
             queryTimeout: opts.pgConfig.queryTimeout,
-            url: opts.url
+            url: opts.url,
+            collector: opts.collector
         });
 
         return (pool);
@@ -299,6 +312,7 @@ Manatee.prototype._refresh = function _refresh(topology) {
         self._database = createPGPool({
             log: log,
             pgConfig: self._pgConfig,
+            collector: self._collector,
             url: newPrimary
         });
     }
diff --git a/lib/pg.js b/lib/pg.js
index 2f2f2ef..27f4b79 100644
--- a/lib/pg.js
+++ b/lib/pg.js
@@ -524,6 +524,7 @@ function PGPool(options) {
     assert.number(options.maxConnections, 'options.maxConnections');
     assert.number(options.maxIdleTime, 'options.maxIdleTime');
     assert.number(options.queryTimeout, 'options.queryTimeout');
+    assert.object(options.collector, 'options.collector');
 
     var self = this;
 
@@ -540,6 +541,28 @@ function PGPool(options) {
     this.maxConnections = options.maxConnections;
     this.maxIdleTime = options.maxIdleTime;
     this.queryTimeout = options.queryTimeout;
+    this.collector = options.collector;
+
+    /*
+     * Create various metric collectors for measuring connections and
+     * queue depth.
+     */
+    this.openGauge = this.collector.gauge({
+        name: 'postgres_connections_open',
+        help: 'count of open postgres connections'
+    });
+    this.pendingGauge = this.collector.gauge({
+        name: 'postgres_connections_pending',
+        help: 'count of pending postgres connections'
+    });
+    this.availableGauge = this.collector.gauge({
+        name: 'postgres_connections_available',
+        help: 'count of available postgres connections'
+    });
+    this.queueDepthGauge = this.collector.gauge({
+        name: 'request_queue_depth',
+        help: 'number of queued requests'
+    });
 
     var pgOpts = {
         connectTimeout: self.connectTimeout,
@@ -640,6 +663,25 @@ PGPool.prototype.toString = function toString() {
     return (str);
 };
 
+/*
+ * Record the connection counts and request queue length.
+ */
+PGPool.prototype.getPoolStats = function getPoolStats() {
+    var poolState = this.state();
+
+    this.openGauge.set(poolState.resources);
+    this.pendingGauge.set(poolState.pending);
+    this.availableGauge.set(poolState.available);
+    this.queueDepthGauge.set(poolState.queue);
+};
+
+/*
+ * Retrieve the underlying pool's connection state information.
+ */
+PGPool.prototype.state = function state() {
+    return this.pool._state();
+};
+
 
 function pgError(e) {
     var err;
@@ -685,15 +727,8 @@ function typeToPg(type) {
 
 module.exports = {
 
-    createPool: function createPool(options) {
-        assert.object(options, 'options');
-        var l = options.log;
-        if (options.log)
-            delete options.log;
-
-        var opts = clone(options);
-        options.log = l;
-        opts.log = l;
+    createPool: function createPool(opts) {
+        assert.object(opts, 'opts');
 
         function number(param, def) {
             if (opts[param] === undefined) {
diff --git a/lib/server.js b/lib/server.js
index ba8e49c..ff11000 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -15,8 +15,10 @@ var assert = require('assert-plus');
 var libuuid = require('libuuid');
 var mod_fast = require('fast');
 var mod_kang = require('kang');
+var mod_artedi = require('artedi');
 var mod_net = require('net');
 var mod_os = require('os');
+var mod_restify = require('restify');
 var VError = require('verror').VError;
 var LRU = require('lru-cache');
 var vasync = require('vasync');
@@ -57,12 +59,27 @@ function MorayServer(options) {
     EventEmitter.call(this);
 
     var log = options.log;
+
+    // Configure the metric collector.
+    var labels = {
+        datacenter: options.datacenter,
+        server: options.server_uuid,
+        zonename: mod_os.hostname(),
+        pid: process.pid
+    };
+
+    var collector = mod_artedi.createCollector({
+        labels: labels
+    });
+
     var db;
     if (options.standalone) {
         options.standalone.log = log;
+        options.standalone.collector = collector;
         db = require('./standalone').createClient(options.standalone);
     } else {
         options.manatee.log = log;
+        options.manatee.collector = collector;
         db = require('./manatee').createClient(options.manatee);
     }
 
@@ -76,6 +93,7 @@ function MorayServer(options) {
         max: 1000,
         maxAge: (30 * 1000)
     });
+
     var opts = {
         log: options.log,
         manatee: db,
@@ -86,6 +104,7 @@ function MorayServer(options) {
     var socket = mod_net.createServer({ 'allowHalfOpen': true });
     var server = new mod_fast.FastServer({
         log: log.child({ component: 'fast' }),
+        collector: collector,
         server: socket
     });
 
@@ -118,28 +137,56 @@ function MorayServer(options) {
 
     this.fast_socket = socket;
     this.fast_server = server;
-    this.kang_server = null;
+    this.monitor_server = null;
     this.db_conn = db;
     this.log = options.log;
 
-    if (options.kangPort) {
-        mod_kang.knStartServer({
-            port: options.kangPort,
-            host: options.bindip,
-            uri_base: '/kang',
+    if (options.monitorPort) {
+        /*
+         * Set up the monitoring server. This exposes a kang monitoring listener
+         * and an artedi-based metric collector. Both are exposed on the
+         * `monitorPort` port on the `bindip` network.
+         *
+         * Since we are using the same restify server for both kang and artedi,
+         * we will not be using the kang.knStartServer() convenience function.
+         */
+        this.monitor_server = mod_restify.createServer({
+            name: 'Monitor'
+        });
+
+        var kangOpts = {
             service_name: 'moray',
             version: KANG_VERSION,
+            uri_base: '/kang',
             ident: mod_os.hostname() + '/' + process.pid,
             list_types: server.kangListTypes.bind(server),
             list_objects: server.kangListObjects.bind(server),
             get: server.kangGetObject.bind(server),
             stats: server.kangStats.bind(server)
-        }, function (err, kang) {
-            if (err) {
-                self.log.error(err, 'failed to start Kang');
-            } else {
-                self.kang_server = kang;
-            }
+        };
+
+        this.monitor_server.get('/kang/.*',
+                mod_kang.knRestifyHandler(kangOpts));
+        this.monitor_server.get('/metrics',
+            function getMetricsHandler(req, res, next) {
+            req.on('end', function () {
+                collector.collect(mod_artedi.FMT_PROM, function (err, metrics) {
+                    if (err) {
+                        next(new VError(err));
+                        return;
+                    }
+                    res.setHeader('Content-Type', 'text/plain; version=0.0.4');
+                    res.send(metrics);
+                });
+                next();
+            });
+            req.resume();
+        });
+
+        this.monitor_server.listen(options.monitorPort, options.bindip,
+            function () {
+            self.log.info('monitoring server started on port %d',
+                options.monitorPort);
         });
     }
 
diff --git a/lib/standalone.js b/lib/standalone.js
index 0e9e080..e9bb9b2 100644
--- a/lib/standalone.js
+++ b/lib/standalone.js
@@ -63,6 +63,7 @@ function createPGPool(opts) {
     assert.object(opts, 'options');
     assert.object(opts.log, 'options.log');
     assert.object(opts.pgConfig, 'options.pgConfig');
+    assert.object(opts.collector, 'options.collector');
     assert.string(opts.url, 'options.url');
 
     var pool = postgresPool.createPool({
@@ -73,7 +74,8 @@ function createPGPool(opts) {
         maxIdleTime: opts.pgConfig.maxIdleTime,
         role: opts.role,
         queryTimeout: opts.pgConfig.queryTimeout,
-        url: opts.url
+        url: opts.url,
+        collector: opts.collector
     });
 
     return (pool);
@@ -88,6 +90,7 @@ function Standalone(options) {
     assert.object(options.log, 'options.log');
     assert.object(options.pg, 'options.pg');
     assert.string(options.url, 'options.url');
+    assert.object(options.collector, 'options.collector');
 
     var self = this;
     EventEmitter.call(this);
@@ -101,6 +104,18 @@ function Standalone(options) {
     this._whatami = 'Standalone';
     this.pgUser = options.pg.user;
     this.url = options.url;
+    this.collector = options.collector;
+
+    /*
+     * Collect connection pool information when metrics are scraped.
+     */
+    this.collector.addTriggerFunction(function (_, cb) {
+        if (self.database && self.database.primary) {
+            self.database.primary.getPoolStats();
+        }
+        setImmediate(cb);
+    });
+
 
     setImmediate(function () {
         self._init();
@@ -211,7 +226,8 @@ Standalone.prototype._refresh = function _refresh() {
             log: self.log,
             pgConfig: self.pgConfig,
             role: 'primary',
-            url: self.url
+            url: self.url,
+            collector: self.collector
         })
     };
 };
diff --git a/main.js b/main.js
index c9a0314..985d47f 100644
--- a/main.js
+++ b/main.js
@@ -28,7 +28,7 @@ var app = require('./lib');
 
 var DEFAULTS = {
     file: process.cwd() + '/etc/config.json',
-    kangPort: 3020,
+    monitorPort: 3020,
     port: 2020,
     bindip: '0.0.0.0'
 };
@@ -116,8 +116,8 @@ function parseOptions() {
             break;
 
         case 'k':
-            opts.kangPort = parseInt(option.optarg, 10);
-            if (isNaN(opts.kangPort)) {
+            opts.monitorPort = parseInt(option.optarg, 10);
+            if (isNaN(opts.monitorPort)) {
                 LOG.fatal({ port: option.optarg }, 'Invalid port');
                 throw new Error('Invalid port: ' + option.optarg);
             }
diff --git a/package.json b/package.json
index c14e125..9fb4ca2 100644
--- a/package.json
+++ b/package.json
@@ -7,6 +7,7 @@
     "main": "lib/index.js",
     "dependencies": {
         "ajv": "4.11.4",
+        "artedi": "1.1.0",
         "assert-plus": "1.0.0",
         "bunyan": "1.8.10",
         "bunyan-syslog": "0.2.2",
@@ -14,7 +15,7 @@
         "crc": "0.2.1",
         "dtrace-provider": "~0.8",
         "deep-equal": "0.0.0",
-        "fast": "2.2.4",
+        "fast": "2.3.0",
         "ip6addr": "0.1.1",
         "jsprim": "1.4.0",
         "kang": "1.2.0",
@@ -31,6 +32,7 @@
         "pooling": "0.4.5",
         "posix-getopt": "1.0.0",
         "vasync": "1.6.4",
+        "restify": "5.2.0",
         "verror": "1.3.7",
         "xtend": "2.1.2"
     },
diff --git a/sapi_manifests/moray/template b/sapi_manifests/moray/template
index 939d73c..de32380 100644
--- a/sapi_manifests/moray/template
+++ b/sapi_manifests/moray/template
@@ -30,5 +30,7 @@
   "cache": {
     "size": 5000,
     "expiry": 60
-  }
+  },
+  "server_uuid": "{{auto.SERVER_UUID}}",
+  "datacenter": "{{DATACENTER}}"
 }
diff --git a/sdc/sapi_manifests/moray/template b/sdc/sapi_manifests/moray/template
index 89ee0eb..6172f91 100644
--- a/sdc/sapi_manifests/moray/template
+++ b/sdc/sapi_manifests/moray/template
@@ -30,5 +30,7 @@
   "cache": {
     "size": 5000,
     "expiry": 60
-  }
+  },
+  "server_uuid": "{{auto.SERVER_UUID}}",
+  "datacenter": "{{datacenter_name}}"
 }
-- 
2.21.0

