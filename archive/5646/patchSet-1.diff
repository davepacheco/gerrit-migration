From b3688be192a190811a5eff9d9af6fa95c39ec374 Mon Sep 17 00:00:00 2001
From: Marsell Kukuljevic <marsell@joyent.com>
Date: Wed, 27 Feb 2019 16:52:18 +0100
Subject: [PATCH] TRITON-1266 vmapi does not store disk UUID upon create

---
 docs/index.md          |  12 +++--
 lib/endpoints/vms.js   |  28 ++++++++++-
 test/vms.disks.test.js | 102 ++++++++++++++++++++++++++++++++++++++---
 3 files changed, 129 insertions(+), 13 deletions(-)

diff --git a/docs/index.md b/docs/index.md
index 52c60d3..4a5cff9 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -1463,15 +1463,19 @@ For removing NICs from a VM, a macs list parameter must be specified. This param
 Create a virtual disk and attach it to a bhyve VM. VM must be currently stopped,
 and have flexible_disk_size set.
 
-| Param    | Type         | Description                                                                                                         |
-| -------- | ------------ | ------------------------------------------------------------------------------------------------------------------- |
-| pci_slot | String       | Optional. Free PCI slot of disk to create. This is typically in the 0:4:[0-7] and 0:5:[0-7] range.                  |
-| size     | Number (MiB) | Size of new virtual disk. Can also use string "remaining" to use up all remaining free space in flexible_disk_size. |
+| Param     | Type         | Description                                                                                                         |
+| --------- | ------------ | ------------------------------------------------------------------------------------------------------------------- |
+| pci_slot  | String       | Optional. Free PCI slot of disk to create. This is typically in the 0:4:[0-7] and 0:5:[0-7] range.                  |
+| disk_uuid | String       | Optional. UUID to uniquely identify disk to create.  Useful for client apps.                                        |
+| size      | Number (MiB) | Size of new virtual disk. Can also use string "remaining" to use up all remaining free space in flexible_disk_size. |
 
 If `pci_slot` is not provided when creating the disk, a slot will be
 automatically assigned. See [Disk PCI Slot](#disk-pci-slot) for more
 information about proper assignment of PCI slots.
 
+Likewise with `disk_uuid` -- if not provided, one will be automatically
+assigned.
+
 ### Example of creating a new 5GiB virtual disk using a JSON payload
 
     POST /vms/e9bd0ed1-7de3-4c66-a649-d675dbce6e83?action=create_disk -d '{
diff --git a/lib/endpoints/vms.js b/lib/endpoints/vms.js
index fa08e60..050c22d 100644
--- a/lib/endpoints/vms.js
+++ b/lib/endpoints/vms.js
@@ -849,12 +849,35 @@ function createDisk(req, res, next) {
     var params = req.params;
     var slot = params.pci_slot;
     var size = params.size;
+    var diskUuid = params.disk_uuid;
     var vm = req.vm;
     var paramErr;
+    var found;
 
     req.log.trace({ vm_uuid: vm.uuid }, 'CreateDisk start');
 
-    if (params.pci_slot !== undefined) {
+    if (diskUuid !== undefined) {
+        if (!common.validUUID(diskUuid)) {
+            var msg = diskUuid + ' is not a UUID';
+            paramErr = [ errors.invalidUuidErr('disk_uuid', msg) ];
+            return next(new errors.ValidationFailedError(
+                        'Invalid disk_uuid', paramErr));
+        }
+
+        found = vm.disks.filter(function matchUuid(disk) {
+            return disk.uuid === diskUuid;
+        })[0];
+
+        if (found) {
+            paramErr = [ errors.invalidParamErr('disk_uuid',
+                'Already in use') ];
+            next(new errors.ValidationFailedError('Invalid Parameters',
+                 paramErr));
+            return;
+        }
+    }
+
+    if (slot !== undefined) {
         try {
             common.validatePciSlot(params);
         } catch (e) {
@@ -862,7 +885,7 @@ function createDisk(req, res, next) {
             return;
         }
 
-        var found = vm.disks.filter(function matchSlot(disk) {
+        found = vm.disks.filter(function matchSlot(disk) {
             return disk.pci_slot === slot;
         })[0];
 
@@ -903,6 +926,7 @@ function createDisk(req, res, next) {
     var args = {
         subtask: 'create_disk',
         add_disks: [ {
+            uuid: diskUuid,
             pci_slot: slot,
             size: size,
             model: 'virtio'
diff --git a/test/vms.disks.test.js b/test/vms.disks.test.js
index 80e9786..6587f2a 100644
--- a/test/vms.disks.test.js
+++ b/test/vms.disks.test.js
@@ -24,6 +24,7 @@ var VM_UUID;
 var PCI_SLOTS = [];
 
 var CUSTOMER_UUID = common.config.ufdsAdminUuid;
+var DISK_UUID = '2de262f8-3aa1-11e9-b79e-d712c1fb6cee';
 var VM_ALIAS_BASE = 'vmapitest-disk';
 var VM_OPTS = {
     autoboot: false,
@@ -172,7 +173,7 @@ exports.add_disk = function add_disk(t) {
     var opts = { size: 1024 };
 
     CLIENT.post(path, opts, function postCb(err, req, res, job) {
-        t.ok(!err, 'err');
+        common.ifError(t, err, 'err');
 
         assert.object(job, 'job');
         assert.uuid(job.job_uuid, 'job.job_uuid');
@@ -246,7 +247,7 @@ exports.resize_disk_down_with_flag = function resize_disk_down_with_flag(t) {
     };
 
     CLIENT.post(path, opts, function postCb(err, req, res, job) {
-        t.ok(!err, 'err');
+        common.ifError(t, err, 'err');
 
         assert.object(job, 'job');
         assert.uuid(job.job_uuid, 'job.job_uuid');
@@ -284,7 +285,7 @@ exports.resize_disk_up = function resize_disk_up(t) {
     };
 
     CLIENT.post(path, opts, function postCb(err, req, res, job) {
-        t.ok(!err, 'err');
+        common.ifError(t, err, 'err');
 
         assert.object(job, 'job');
         assert.uuid(job.job_uuid, 'job.job_uuid');
@@ -334,7 +335,7 @@ exports.delete_disk = function delete_disk(t) {
     var opts = { pci_slot: PCI_SLOTS[1] };
 
     CLIENT.post(path, opts, function postCb(err, req, res, job) {
-        t.ok(!err, 'err');
+        common.ifError(t, err, 'err');
 
         assert.object(job, 'job');
         assert.uuid(job.job_uuid, 'job.job_uuid');
@@ -367,11 +368,11 @@ exports.add_disk_with_pci_slot = function add_disk_with_pci_slot(t) {
     var path = '/vms/' + VM_UUID + '?action=create_disk';
     var opts = {
         pci_slot: '0:4:5',
-        size: 1024
+        size: 512
     };
 
     CLIENT.post(path, opts, function postCb(err, req, res, job) {
-        t.ok(!err, 'err');
+        common.ifError(t, err, 'err');
 
         assert.object(job, 'job');
         assert.uuid(job.job_uuid, 'job.job_uuid');
@@ -398,7 +399,94 @@ function check_added_disk_with_pci_slot(t) {
         t.equal(disks[0].pci_slot, '0:4:0', '[0].pci_slot');
         t.equal(disks[0].size, 10240, '[0].size');
         t.equal(disks[1].pci_slot, '0:4:5', '[1].pci_slot');
-        t.equal(disks[1].size, 1024, '[1].size');
+        t.equal(disks[1].size, 512, '[1].size');
+
+        t.done();
+    });
+};
+
+
+exports.add_disk_with_existing_pci_slot =
+function add_disk_with_existing_pci_slot(t) {
+    var path = '/vms/' + VM_UUID + '?action=create_disk';
+    var opts = {
+        pci_slot: '0:4:5',
+        size: 256
+    };
+
+    CLIENT.post(path, opts, function postCb(err, req, res, body) {
+        t.ok(err, 'err');
+
+        t.equal(err.name, 'ValidationFailedError', 'err.name');
+        t.equal(body.errors[0].field, 'pci_slot', 'field');
+        t.equal(body.errors[0].message, 'Already in use', 'message');
+
+        t.done();
+    });
+};
+
+
+exports.add_disk_with_uuid = function add_disk_with_uuid(t) {
+    var path = '/vms/' + VM_UUID + '?action=create_disk';
+    var opts = {
+        disk_uuid: DISK_UUID,
+        size: 256
+    };
+
+    CLIENT.post(path, opts, function postCb(err, req, res, job) {
+        common.ifError(t, err, 'err');
+
+        assert.object(job, 'job');
+        assert.uuid(job.job_uuid, 'job.job_uuid');
+
+        var jobPath = '/jobs/' + job.job_uuid;
+        waitForValue(jobPath, 'execution', 'succeeded', {
+            client: CLIENT
+        }, function waitForValueCb(err2) {
+            common.ifError(t, err2, 'err2');
+            t.done();
+        });
+    });
+};
+
+
+exports.check_added_disk_with_uuid =
+function check_added_disk_with_uuid(t) {
+    var path = '/vms/' + VM_UUID;
+    CLIENT.get(path, function getCb(err, req, res, vm) {
+        common.ifError(t, err, 'err');
+
+        var disks = vm.disks;
+        t.equal(disks.length, 3);
+        t.equal(disks[0].pci_slot, '0:4:0', '[0].pci_slot');
+        t.equal(disks[0].size, 10240, '[0].size');
+
+        t.equal(disks[1].pci_slot, '0:4:5', '[1].pci_slot');
+        t.equal(disks[1].size, 512, '[1].size');
+
+        t.equal(disks[2].uuid, DISK_UUID, '[1].uuid');
+        t.equal(disks[2].pci_slot, '0:4:1', '[1].pci_slot');
+        t.equal(disks[2].size, 256, '[1].size');
+
+        t.done();
+    });
+};
+
+
+exports.add_disk_with_existing_uuid =
+function add_disk_with_existing_uuid(t) {
+    var path = '/vms/' + VM_UUID + '?action=create_disk';
+    var opts = {
+        disk_uuid: DISK_UUID,
+        size: 128
+    };
+
+    CLIENT.post(path, opts, function postCb(err, req, res, body) {
+        t.ok(err, 'err');
+
+        t.equal(err.name, 'ValidationFailedError', 'err.name');
+        t.equal(body.errors[0].field, 'disk_uuid', 'field');
+        t.equal(body.errors[0].message, 'Already in use', 'message');
 
         t.done();
     });
-- 
2.21.0

