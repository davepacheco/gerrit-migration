commit 8de7a5d6e9204c592589de96cf128066a576c4fc
Author: Alex Wilson <alex@uq.edu.au>
Date:   2019-08-21T17:15:32+10:00 (7 weeks ago)
    
    joyent/node-triton#264 `triton rbac role[s]` should support new role API

diff --git a/lib/do_rbac/do_role.js b/lib/do_rbac/do_role.js
index f7ea2cc..6f0218a 100644
--- a/lib/do_rbac/do_role.js
+++ b/lib/do_rbac/do_role.js
@@ -19,23 +19,32 @@ var vasync = require('vasync');
 var common = require('../common');
 var errors = require('../errors');
 
+var POLICY_FIELDS = [
+    {key: 'id', hidden: true},
+    {key: 'name', required: true}
+];
+
+var MEMBER_FIELDS = [
+    {key: 'type', required: true, hint: 'subuser/account'},
+    {key: 'default', boolean: true, default: true},
+    {key: 'id', hidden: true},
+    {key: 'login', required: true}
+];
 
 var UPDATABLE_ROLE_FIELDS = [
     {key: 'name', required: true},
-    {key: 'default_members', array: true},
-    {key: 'members', array: true},
-    {key: 'policies', array: true}
+    {key: 'members', array: true, schema: MEMBER_FIELDS},
+    {key: 'policies', array: true, schema: POLICY_FIELDS}
 ];
 
 var CREATE_ROLE_FIELDS = [
     {key: 'name', required: true},
-    {key: 'default_members', array: true},
-    {key: 'members', array: true},
-    {key: 'policies', array: true}
+    {key: 'members', array: true, schema: MEMBER_FIELDS},
+    {key: 'policies', array: true, schema: POLICY_FIELDS}
 ];
 
 var SHOW_ORDER_FIELDS = [
-    'id', 'name', 'default_members', 'members', 'policies'
+    'id', 'name', 'members', 'policies'
 ];
 
 var _isArrayFromKey = {};
@@ -49,7 +58,6 @@ function _arrayFromCSV(csv) {
     return csv.split(/\s*,\s*/g).filter(function (v) { return v; });
 }
 
-
 function _showRole(opts, cb) {
     assert.object(opts.cli, 'opts.cli');
     assert.string(opts.id, 'opts.id');
@@ -66,76 +74,212 @@ function _showRole(opts, cb) {
             if (opts.json) {
                 console.log(JSON.stringify(role));
             } else {
-                var keys = Object.keys(role);
-                keys.sort(function cmpKeys(a, b) {
-                    var idxA = SHOW_ORDER_FIELDS.indexOf(a);
-                    var idxB = SHOW_ORDER_FIELDS.indexOf(b);
-                    if (idxA === -1 && idxB === -1) {
-                        return 0;
-                    } else if (idxA === -1) {
-                        return -1;
-                    } else if (idxB === -1) {
-                        return 1;
-                    } else if (idxA < idxB) {
-                        return -1;
-                    } else if (idxA > idxB) {
-                        return 1;
-                    }
-                });
-
-                keys.forEach(function (key) {
-                    var val = role[key];
-                    if (Array.isArray(val)) {
-                        val = val.join(', ');
-                    }
-                    console.log('%s: %s', key, val);
-                });
+                console.log(_yamlishFromRole(role));
             }
             cb();
         });
     });
 }
 
-function _yamlishFromRole(role) {
-    assert.object(role, 'role');
+function _yamlishTpl(schema, indent) {
+    if (indent === undefined)
+        indent = '';
+    assert.object(schema, 'schema');
+    assert.string(indent, 'indent level');
 
     var lines = [];
-    UPDATABLE_ROLE_FIELDS.forEach(function (field) {
+    schema.forEach(function (field) {
         var key = field.key;
-        var val = role[key];
-        if (!val) {
+        var val = '', comment;
+        if (field.hidden)
+            return;
+        if (field.default !== undefined)
+            val = field.default;
+        if (field.hint)
+            comment = field.hint;
+        if (field.boolean) {
+            if (val === undefined)
+                val = false;
+            comment = 'true/false';
+        }
+        if (field.array) {
+            val = [];
+            comment = 'val1, val2, ...';
+        }
+        if (!field.required) {
+            if (comment === undefined)
+                comment = '';
+            comment += ' (optional)';
+        }
+        if (field.schema) {
+            if (!field.array)
+                val = [val];
+            lines.push(format('%s%s:', indent, key));
+            var kidIndent = indent + '  - ';
+            lines = lines.concat(_yamlishTpl(field.schema, kidIndent));
+        } else {
+            if (comment !== undefined)
+                lines.push(format('%s%s: %s\t# %s', indent, key, val, comment));
+            else
+                lines.push(format('%s%s: %s', indent, key, val));
+        }
+        indent = indent.replace(/-/g, ' ');
+    });
+    return lines;
+}
+
+function _yamlish(schema, obj, indent) {
+    if (indent === undefined)
+        indent = '';
+    assert.object(schema, 'schema');
+    assert.object(obj, 'object');
+    assert.string(indent, 'indent level');
+
+    var maxKeyLen = 8;
+    schema.forEach(function (field) {
+        if (field.key.length > maxKeyLen)
+            maxKeyLen = field.key.length;
+    });
+
+    var lines = [];
+    schema.forEach(function (field) {
+        var key = field.key;
+        var postColonSpaces = ' ';
+        while (key.length + postColonSpaces.length < maxKeyLen)
+            postColonSpaces += ' ';
+        var val = obj[key];
+        if (val === undefined && field.boolean)
+            val = false;
+        if (val === undefined && field.default !== undefined)
+            val = field.default;
+        if (val === undefined && field.array)
+            val = [];
+        if ((val === undefined || val === null) && field.hidden)
+            return;
+        if (val === undefined || val === null)
             val = '';
-        } else if (Array.isArray(val)) {
-            val = val.join(', ');
+        if (field.schema) {
+            if (!field.array)
+                val = [val];
+            lines.push(format('%s%s:', indent, key));
+            var kidIndent = indent + '  - ';
+            val.forEach(function (kid) {
+                lines = lines.concat(_yamlish(field.schema, kid, kidIndent));
+            });
+        } else {
+            if (field.array) {
+                assert.array(obj, field.key);
+                val = val.join(', ');
+            }
+            lines.push(format('%s%s:%s%s', indent, key, postColonSpaces, val));
         }
-        lines.push(format('%s: %s', key, val));
+        indent = indent.replace(/-/g, ' ');
     });
+    return lines;
+}
+
+function _yamlishFromRole(role) {
+    assert.object(role, 'role');
+
+    var lines = _yamlish(UPDATABLE_ROLE_FIELDS, role);
     return lines.join('\n') + '\n';
 }
 
-function _roleFromYamlish(yamlish) {
-    assert.string(yamlish, 'yamlish');
+function _unyamlish(schema, lines, indent) {
+    if (indent === undefined)
+        indent = '';
+    assert.object(schema, 'schema');
+    assert.arrayOfString(lines, 'lines');
+    assert.string(indent, 'indent level');
 
-    var role = {};
-    var lines = yamlish.split(/\n/g);
-    lines.forEach(function (line) {
+    var fieldIdx = {};
+    schema.forEach(function (f) {
+        fieldIdx[f.key] = f;
+    });
+
+    var obj = {};
+    while (true) {
+        var line = lines.shift();
+        if (line === undefined)
+            break;
+        if (/^\s*#/.test(line))
+            continue;
         var commentIdx = line.indexOf('#');
         if (commentIdx !== -1) {
             line = line.slice(0, commentIdx);
         }
-        line = line.trim();
-        if (!line) {
-            return;
+        if (line.slice(0, indent.length) !== indent) {
+            lines.unshift(line);
+            break;
+        }
+        line = line.slice(indent.length).trim();
+        if (line === '') {
+            continue;
         }
-        var parts = strsplit(line, ':', 2);
-        var key = parts[0].trim();
-        var value = parts[1].trim();
-        if (_isArrayFromKey[key]) {
-            value = _arrayFromCSV(value);
+        if (line.indexOf(':') === -1) {
+            throw (new Error('yamlish syntax error: expected <key>:, got ' +
+                line));
+        }
+        var key = line.slice(0, line.indexOf(':'));
+        var val = line.slice(key.length + 1).trim();
+        var field = fieldIdx[key];
+        if (!field) {
+            throw (new Error('yamlish error: unknown field "' + key + '"'));
+        }
+        if (field.schema) {
+            if (field.array) {
+                val = [];
+                var innerIndent = indent + '  - ';
+                while (true) {
+                    line = lines[0];
+                    if (line.slice(0, innerIndent.length) !== innerIndent)
+                        break;
+                    val.push(_unyamlish(field.schema, lines, innerIndent));
+                }
+            } else {
+                val = _unyamlish(field.schema, lines, indent + '  ');
+            }
+            obj[key] = val;
+        } else {
+            if (field.array) {
+                /*JSSTYLED*/
+                val = val.split(/,[ ]*/g);
+            } else {
+                val = [val];
+            }
+            if (field.boolean) {
+                val = val.map(function (v) {
+                    return (v.toLowerCase() === 'true');
+                });
+            }
+            if (!field.array) {
+                val = val[0];
+            }
+            obj[key] = val;
+        }
+        indent = indent.replace(/-/g, ' ');
+    }
+
+    schema.forEach(function (f) {
+        if (obj[f.key] === undefined && f.boolean) {
+            obj[f.key] = false;
+        }
+        if (obj[f.key] === undefined && f.default !== undefined) {
+            obj[f.key] = f.default;
+        }
+        if (obj[f.key] === undefined && f.required) {
+            throw (new Error('yamlish error: missing required field "' +
+                f.key + '"'));
         }
-        role[key] = value;
     });
 
+    return (obj);
+}
+
+function _roleFromYamlish(yamlish) {
+    assert.string(yamlish, 'yamlish');
+    var lines = yamlish.split('\n');
+    var role = _unyamlish(UPDATABLE_ROLE_FIELDS, lines);
     return role;
 }
 
@@ -189,6 +333,17 @@ function _editRole(opts, cb) {
                 return;
             }
 
+            /* Administrator role isn't allowed with policies. */
+            if (editedRole.name === 'administrator') {
+                if (editedRole.policies && editedRole.policies.length > 0) {
+                    console.error('Error: administrator role must not ' +
+                        'contain any policies');
+                    offerRetry(afterText);
+                    return;
+                }
+                delete (editedRole.policies);
+            }
+
             // Save changes.
             cli.tritonapi.cloudapi.updateRole(editedRole, function (uErr, ur) {
                 if (uErr) {
@@ -286,6 +441,8 @@ function _addRole(opts, cb) {
     var log = cli.log;
 
     var data;
+    var filename;
+    var tplText;
 
     vasync.pipeline({arg: {cli: opts.cli}, funcs: [
         common.cliSetupTritonApi,
@@ -321,41 +478,37 @@ function _addRole(opts, cb) {
         function gatherDataInteractive(_, next) {
             if (opts.file) {
                 return next();
-            } else if (!process.stdin.isTTY) {
-                return next(new errors.UsageError('cannot interactively ' +
-                    'create a role: stdin is not a TTY'));
-            } else if (!process.stdout.isTTY) {
-                return next(new errors.UsageError('cannot interactively ' +
-                    'create a role: stdout is not a TTY'));
             }
 
-            // TODO: retries on failure
-            // TODO: on failure write out to a tmp file with cmd to add it
-            data = {};
-            vasync.forEachPipeline({
-                inputs: CREATE_ROLE_FIELDS,
-                func: function getField(field_, nextField) {
-                    var field = common.objCopy(field_);
-
-                    // 'members' needs to hold all default_members, so default
-                    // that.
-                    if (field.key === 'members') {
-                        field['default'] = data['default_members'].join(', ');
-                    }
+            tplText = _yamlishTpl(CREATE_ROLE_FIELDS).join('\n') + '\n';
+            filename = format('%s-new-role.txt', cli.tritonapi.profile.account);
+            common.editInEditor({
+                text: tplText,
+                filename: filename
+            }, function (err, afterText, changed) {
+                if (err) {
+                    return next(new errors.TritonError(err));
+                }
 
-                    common.promptField(field, function (err, value) {
-                        if (value) {
-                            if (_isArrayFromKey[field.key]) {
-                                value = _arrayFromCSV(value);
-                            }
-                            data[field.key] = value;
-                        }
-                        nextField(err);
-                    });
+                try {
+                    var role = _roleFromYamlish(afterText);
+                } catch (textErr) {
+                    return next(textErr);
                 }
-            }, function (err) {
-                console.log();
-                next(err);
+                delete (role.id);
+
+                /* Administrator role isn't allowed with policies. */
+                if (role.name === 'administrator') {
+                    if (role.policies && role.policies.length > 0) {
+                        next(new Error('administrator role must not ' +
+                            'contain any policies'));
+                        return;
+                    }
+                    delete (role.policies);
+                }
+
+                data = role;
+                return next();
             });
         },
         function validateData(_, next) {
diff --git a/lib/do_rbac/do_roles.js b/lib/do_rbac/do_roles.js
index 1355b1c..3710935 100644
--- a/lib/do_rbac/do_roles.js
+++ b/lib/do_rbac/do_roles.js
@@ -17,8 +17,8 @@ var errors = require('../errors');
 
 
 
-var columnsDefault = 'name,policies,members,default_members';
-var columnsDefaultLong = 'id,name,policies,members,default_members';
+var columnsDefault = 'name,policies,members';
+var columnsDefaultLong = 'id,name,policies,members';
 var sortDefault = 'name';
 
 
@@ -51,32 +51,33 @@ function do_roles(subcmd, opts, args, cb) {
             if (opts.json) {
                 common.jsonStream(roles);
             } else {
-                var i, j;
+                var i;
                 // Add some convenience fields
                 for (i = 0; i < roles.length; i++) {
                     var role = roles[i];
-                    role.policies = role.policies.sort().join(',');
-                    var defaultMap = {};
-                    for (j = 0; j < role.default_members.length; j++) {
-                        defaultMap[role.default_members[j]] = true;
-                    }
-                    role.default_members =
-                        role.default_members.sort().join(',');
-                    var sortedRawMembers = role.members.sort();
-                    var defaultMembers = [];
+                    var policies = [];
+                    role.policies.forEach(function (policy) {
+                        policies.push(policy.name);
+                    });
+                    role.policies = policies.join(',');
                     var members = [];
-                    for (j = 0; j < sortedRawMembers.length; j++) {
-                        var m = sortedRawMembers[j];
-                        if (defaultMap[m]) {
-                            defaultMembers.push(m);
-                        // TODO: formal envvar with a --no-color top-level opt
-                        } else if (process.env.TRITON_NO_COLOR) {
-                            members.push(m);
+                    role.members.forEach(function (member) {
+                        var text;
+                        if (member.type === 'subuser') {
+                            text = tritonapi.cloudapi.account + '/' +
+                                member.login;
                         } else {
-                            members.push(common.ansiStylize(m, 'magenta'));
+                            text = member.login;
+                        }
+                        if (member.default !== true) {
+                            text += '*';
                         }
+                        members.push(text);
+                    });
+                    role.members = members.sort().join(',');
+                    if (role.name === 'administrator') {
+                        role.policies = '*';
                     }
-                    role.members = defaultMembers.concat(members).join(',');
                 }
 
                 tabula(roles, {
