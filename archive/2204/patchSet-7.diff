commit b99c20021999f6e0633016d08349df29829768fd (refs/changes/04/2204/7)
Author: Joshua M. Clulow <jmc@joyent.com>
Date:   2017-07-14T21:44:59+00:00 (2 years, 3 months ago)
    
    TOOLS-1810 common Makefile infrastructure for NPM public registry use
    TOOLS-1813 eng.git Makefile should actually work
    TOOLS-1814 retire "node_deps" Makefile from eng.git

diff --git a/.gitignore b/.gitignore
index 8dbff13..8b5009a 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,6 +1,7 @@
 /node_modules
 /tmp
 build
+/make_stamps
 docs/*.json
 docs/*.html
 cscope.in.out
diff --git a/Makefile b/Makefile
index 1394830..054427b 100644
--- a/Makefile
+++ b/Makefile
@@ -5,7 +5,7 @@
 #
 
 #
-# Copyright 2016 Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -73,7 +73,7 @@
 #
 # Tools
 #
-TAP		:= ./node_modules/.bin/tap
+TAPE :=			./node_modules/.bin/tape
 
 #
 # Makefile.defs defines variables used as part of the build process.
@@ -81,34 +81,25 @@ TAP		:= ./node_modules/.bin/tap
 include ./tools/mk/Makefile.defs
 
 #
-# Configuration used by Makefile.defs and Makefile.targ to generate 
+# Configuration used by Makefile.defs and Makefile.targ to generate
 # "check" and "docs" targets.
 #
-DOC_FILES	 = index.md boilerplateapi.md
-JSON_FILES	 = package.json
-JS_FILES	:= $(shell find lib test -name '*.js') tools/bashstyle
-JSL_FILES_NODE	 = $(JS_FILES)
-JSSTYLE_FILES	 = $(JS_FILES)
+DOC_FILES =		index.md boilerplateapi.md
+JSON_FILES =		package.json
+JS_FILES :=		$(shell find lib test -name '*.js') tools/bashstyle
+JSL_FILES_NODE =	$(JS_FILES)
+JSSTYLE_FILES =		$(JS_FILES)
 
-JSL_CONF_NODE	 = tools/jsl.node.conf
-JSSTYLE_FLAGS	 = -f tools/jsstyle.conf
-
-#
-# Configuration used by Makefile.node_deps.defs to generate targets for
-# installing Node modules contained within this repo (in this case, the
-# "node-dummy" module).
-#
-REPO_MODULES	 = src/node-dummy
-include ./tools/mk/Makefile.node_deps.defs
+JSL_CONF_NODE =		tools/jsl.node.conf
+JSSTYLE_FLAGS =		-f tools/jsstyle.conf
 
 #
 # Configuration used by Makefile.smf.defs to generate "check" and "all" targets
 # for SMF manifest files.
 #
-SMF_MANIFESTS_IN = smf/manifests/bapi.xml.in
+SMF_MANIFESTS_IN =	smf/manifests/bapi.xml.in
 include ./tools/mk/Makefile.smf.defs
 
-
 #
 # Historically, Node packages that make use of binary add-ons must ship their
 # own Node built with the same compiler, compiler options, and Node version that
@@ -117,27 +108,35 @@ include ./tools/mk/Makefile.smf.defs
 # binary as part of the build process.  Other options are possible -- it depends
 # on the need of your repository.
 #
-NODE_PREBUILT_VERSION=v0.12.14
+NODE_PREBUILT_VERSION =	v4.8.4
 ifeq ($(shell uname -s),SunOS)
-	NODE_PREBUILT_TAG=zone
+	NODE_PREBUILT_TAG = zone
 	include ./tools/mk/Makefile.node_prebuilt.defs
 else
 	include ./tools/mk/Makefile.node.defs
 endif
 
+#
+# Makefile.node_modules.defs provides a common target for installing modules
+# with NPM from a dependency specification in a "package.json" file.  By
+# including this Makefile, we can depend on $(STAMP_NODE_MODULES) to drive "npm
+# install" correctly.
+#
+include ./tools/mk/Makefile.node_modules.defs
+
 #
 # Configuration used by Makefile.manpages.defs to generate manual pages.
 # See that Makefile for details.  MAN_SECTION must be eagerly defined (with
 # ":="), but the Makefile can be used multiple times to build manual pages for
 # different sections.
 #
-MAN_INROOT	 = docs/man
-MAN_OUTROOT	 = man
-CLEAN_FILES 	+= $(MAN_OUTROOT)
+MAN_INROOT =		docs/man
+MAN_OUTROOT =		man
+CLEAN_FILES +=		$(MAN_OUTROOT)
 
-MAN_SECTION	:= 1
+MAN_SECTION :=		1
 include tools/mk/Makefile.manpages.defs
-MAN_SECTION	:= 3bapi
+MAN_SECTION :=		3bapi
 include tools/mk/Makefile.manpages.defs
 
 
@@ -145,8 +144,7 @@ include tools/mk/Makefile.manpages.defs
 # Repo-specific targets
 #
 .PHONY: all
-all: $(SMF_MANIFESTS) | $(TAP) $(REPO_DEPS)
-	$(NPM) rebuild
+all: $(SMF_MANIFESTS) $(STAMP_NODE_MODULES) | $(REPO_DEPS)
 
 #
 # This example Makefile defines a special target for building manual pages.  You
@@ -155,14 +153,9 @@ all: $(SMF_MANIFESTS) | $(TAP) $(REPO_DEPS)
 .PHONY: manpages
 manpages: $(MAN_OUTPUTS)
 
-$(TAP): | $(NPM_EXEC)
-	$(NPM) install
-
-CLEAN_FILES += $(TAP) ./node_modules/tap
-
 .PHONY: test
-test: $(TAP)
-	TAP=1 $(TAP) test/*.test.js
+test: $(STAMP_NODE_MODULES)
+	$(NODE) $(TAPE) test/*.test.js
 
 
 #
@@ -178,11 +171,11 @@ else
 	include ./tools/mk/Makefile.node.targ
 endif
 
-MAN_SECTION	:= 1
+MAN_SECTION :=		1
 include tools/mk/Makefile.manpages.targ
-MAN_SECTION	:= 3bapi
+MAN_SECTION :=		3bapi
 include tools/mk/Makefile.manpages.targ
 
 include ./tools/mk/Makefile.smf.targ
-include ./tools/mk/Makefile.node_deps.targ
+include ./tools/mk/Makefile.node_modules.targ
 include ./tools/mk/Makefile.targ
diff --git a/lib/index.js b/lib/index.js
index 81111d7..8075aa8 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -5,11 +5,38 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
  * A brief overview of this source file: what is its purpose.
+ *
+ * This file makes available the answer to the ultimate question -- of life,
+ * the universe, and everything.
  */
 
-// TODO: put stuff here
+var mod_assert = require('assert-plus');
+var mod_jsprim = require('jsprim');
+var mod_verror = require('verror');
+
+var THE_ANSWER = '42';
+var THE_WRONG_ANSWER = 'SIX TIMES NINE';
+
+function
+answer(correct)
+{
+	mod_assert.bool(correct, 'correct');
+
+	var out = mod_jsprim.parseInteger(correct ? THE_ANSWER :
+	    THE_WRONG_ANSWER);
+
+	if (out instanceof Error) {
+		return (new mod_verror.VError(out, 'wrong answer'));
+	}
+
+	return (out);
+}
+
+module.exports = {
+	answer: answer
+};
diff --git a/package.json b/package.json
index fec77ef..b87b637 100644
--- a/package.json
+++ b/package.json
@@ -1,21 +1,16 @@
 {
-  "name": "boilerplateapi",
-  "description": "SmartDataCenter Boilerplate API",
+  "name": "triton-component",
+  "description": "Triton Component Example",
   "version": "1.0.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
-    "restify": "2.2.1",
-    "node-uuid": "^1.4.0",
-    "bunyan": "^1.8.0",
-    "git-example": "git+https://github.com/joyent/node-git-example.git#a3216ae18f384717b7be7148cc151ef743de45d5"
+    "assert-plus": "^1.0.0",
+    "jsprim": "^1.4.0",
+    "verror": "git+https://github.com/joyent/node-verror.git#ecddeda07827742bd2c598033a02f4c42a6fdc26"
   },
   "devDependencies": {
     "tape": "^4.6.0"
   },
-  "scripts": {
-    "start": "node ./server.js",
-    "test": "./node_modules/.bin/tape test/*.test.js"
-  },
   "license": "MPL-2.0"
 }
diff --git a/src/node-dummy/package.json b/src/node-dummy/package.json
deleted file mode 100644
index 4d7bd70..0000000
--- a/src/node-dummy/package.json
+++ /dev/null
@@ -1,9 +0,0 @@
-{
-	"name":		"dummy",
-	"version":	"0.0.1",
-	"description":	"Example package",
-	"private":	true,
-	"author":	"Joyent (joyent.com)",
-	"engines":	{ "node": ">=0.6" },
-	"license":      "MPL-2.0"
-}
diff --git a/test/api.test.js b/test/api.test.js
index c1228a0..6d99662 100644
--- a/test/api.test.js
+++ b/test/api.test.js
@@ -5,15 +5,43 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
-/* Test the Boilerplate API endpoints */
+/*
+ * Test the sample code.
+ */
+
+var lib = require('../lib/index');
 
 var test = require('tape').test;
 
+test('"correct" argument is required', function (t) {
+	t.throws(function () {
+		lib.answer();
+	}, /correct \(bool\) is required/);
+	t.end();
+});
+
+test('"correct" argument must be boolean', function (t) {
+	t.throws(function () {
+		lib.answer('true');
+	}, /correct \(bool\) is required/);
+	t.end();
+});
+
+test('corrupted earth', function (t) {
+	var res = lib.answer(false);
+
+	t.ok(res instanceof Error, 'must return an error');
+	t.equal(res.message, 'wrong answer: invalid number: "SIX TIMES NINE"',
+	    'expected error message');
+	t.end();
+});
 
 test('douglas adams', function (t) {
-    t.ok(42, 'the answer to life the universe and everything');
-    t.end();
+	var res = lib.answer(true);
+
+	t.equal(res, 42, 'the answer to life the universe and everything');
+	t.end();
 });
diff --git a/tools/jsstyle.conf b/tools/jsstyle.conf
index 0fcd409..2d13d5d 100644
--- a/tools/jsstyle.conf
+++ b/tools/jsstyle.conf
@@ -5,9 +5,10 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
-doxygen
-unparenthesized-return=0
-blank-after-start-comment=0
+unparenthesized-return=1
+indent=tab
+line-length=80
+literal-string-quote=single
diff --git a/tools/mk/Makefile.defs b/tools/mk/Makefile.defs
index 85139d7..8c6be90 100644
--- a/tools/mk/Makefile.defs
+++ b/tools/mk/Makefile.defs
@@ -1,4 +1,3 @@
-# -*- mode: makefile -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -28,6 +27,9 @@
 #			the TIMESTAMP envvar (used by MG-based builds).
 #	STAMP		A build stamp to use in built package names.
 #
+#	MAKE_STAMPS_DIR	The directory in which make stamp files are to be
+#			created.  See comments below on expensive targets.
+#
 
 TOP := $(shell pwd)
 
@@ -49,3 +51,47 @@ STAMP := $(BRANCH)-$(TIMESTAMP)-$(_GITDESCRIBE)
 
 # node-gyp will print build info useful for debugging with V=1
 export V=1
+
+#
+# EXPENSIVE TARGETS AND MAKE STAMP FILES
+#
+# Targets which are expensive to run and lack a single file that marks
+# completion are difficult to track with make; e.g., "npm install".  One
+# solution to this problem is to create "stamp" files with symbolic names which
+# are created as the final step in a complex make rule in order to mark
+# completion.
+#
+# In order to make these more uniform, and easier to target with "make clean",
+# we will attempt to store them under a single directory.  Note that these
+# files are never targets for shipping in build artefacts.
+#
+# Stamp-backed targets come in several parts.  First, a macro should be defined
+# which names a file in the MAKE_STAMPS_DIR directory.  Then, a target which
+# creates this stamp file must be provided.  The recipe for this target should
+# use MAKE_STAMP_REMOVE and MAKE_STAMP_CREATE to perform the appropriate stamp
+# management.
+#
+# For example:
+#
+# --- Makefile.*.defs:
+#
+#	$(STAMP_EXPENSIVE_RESULT) := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# --- Makefile.*.targ:
+#
+#	$(STAMP_EXPENSIVE_RESULT): input/file another/input/file
+#		$(MAKE_STAMP_REMOVE)
+#		rm -rf output_tree/  # <--- ensure a clean slate
+#		expensive_program -o output_tree/ $^
+#		$(MAKE_STAMP_CREATE)
+#
+# NOTE: Every stamp file is exposed as an implicit "stamp-$STAMP_NAME" target.
+# The example above could be built manually by invoking:
+#
+#	make stamp-expensive-result
+#
+MAKE_STAMPS_DIR ?=	make_stamps
+CLEAN_FILES +=		$(MAKE_STAMPS_DIR)
+
+MAKE_STAMP_REMOVE =	mkdir -p $(@D); rm -f $(@)
+MAKE_STAMP_CREATE =	mkdir -p $(@D); touch $(@)
diff --git a/tools/mk/Makefile.node.defs b/tools/mk/Makefile.node.defs
index 9376841..487824d 100644
--- a/tools/mk/Makefile.node.defs
+++ b/tools/mk/Makefile.node.defs
@@ -1,4 +1,3 @@
-# -*- mode: makefile -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -97,8 +96,15 @@ NODE_EXEC	= $(NODE_INSTALL)/bin/node
 NODE_WAF_EXEC	= $(NODE_INSTALL)/bin/node-waf
 NPM_EXEC	= $(NODE_INSTALL)/bin/npm
 
-# Ensure these use absolute paths to the executables to allow running
-# from a dir other than the project top.
+#
+# These paths should be used during the build process to invoke Node and
+# Node-related build tools like NPM.  All paths are fully qualified so that
+# they work regardless of the current working directory at the point of
+# invocation.
+#
+# Note that where PATH is overridden, the value chosen must cause execution of
+# "node" to find the same binary to which the NODE macro refers.
+#
 NODE		:= $(TOP)/$(NODE_EXEC)
 NODE_WAF	:= $(TOP)/$(NODE_WAF_EXEC)
-NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) node $(TOP)/$(NPM_EXEC)
+NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) $(NODE) $(TOP)/$(NPM_EXEC)
diff --git a/tools/mk/Makefile.node_deps.defs b/tools/mk/Makefile.node_deps.defs
deleted file mode 100644
index 29a83f7..0000000
--- a/tools/mk/Makefile.node_deps.defs
+++ /dev/null
@@ -1,43 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.node_deps.defs: Makefile for including npm modules whose sources
-# reside inside the repo.  This should NOT be used for modules in the npm
-# public repo or modules that could be specified with git SHAs.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-#
-# This Makefile takes as input the following make variable:
-#
-#    REPO_MODULES	List of relative paths to node modules (i.e., npm
-#    			packages) inside this repo.  For example:
-#    			src/node-canative, where there's a binary npm package
-#    			in src/node-canative.
-#
-# Based on the above, this Makefile defines the following new variables:
-#
-#    REPO_DEPS		List of relative paths to the installed modules.  For
-#    			example: "node_modules/canative".
-#
-# The accompanying Makefile.node_deps.targ defines a target that will install
-# each of REPO_MODULES into REPO_DEPS and remove REPO_DEPS with "make clean".
-# The top-level Makefile is responsible for depending on REPO_DEPS where
-# appropriate (usually the "deps" or "all" target).
-#
-
-REPO_DEPS    = $(REPO_MODULES:src/node-%=node_modules/%)
-CLEAN_FILES += $(REPO_DEPS)
diff --git a/tools/mk/Makefile.node_modules.defs b/tools/mk/Makefile.node_modules.defs
new file mode 100644
index 0000000..ec8cc8e
--- /dev/null
+++ b/tools/mk/Makefile.node_modules.defs
@@ -0,0 +1,68 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.node_modules.defs: Makefile for using NPM modules.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile provides a target for building NPM modules from the dependency
+# information in the "package.json" file.  The "npm install" operation is
+# expensive and produces a complex (multi-file) result which is difficult for
+# make to use in dependency analysis.  As such, we use a "stamp" file to track
+# successful completion of module installation.
+#
+# This variable allows the consumer to influence the environment used to run
+# NPM commands.
+#
+#	NPM_ENV			This string should be set to a list of
+#				environment variables in the syntax used
+#				by bash; e.g.,
+#
+#					NPM_ENV =	TESTING=yes V=1
+#
+# Consumers should, for targets which depend on the installation of NPM
+# modules, depend on the stamp file using the $(STAMP_NODE_MODULES) variable,
+# e.g.:
+#
+#	.PHONY: all
+#	all: $(STAMP_NODE_MODULES)
+#
+# A phony target, "make stamp-node-modules", is also provided to allow the
+# engineer to manually perform NPM module installation without invoking other
+# targets.  Note that this target should _not_ be used as a dependency for
+# other targets in consuming Makefiles; using phony targets to represent
+# intermediate build stages can inhibit the ability of make to determine
+# when no additional actions are required.
+#
+
+TOP ?= $(error You must include Makefile.defs before this makefile)
+NPM ?= $(error You must include either Makefile.node.defs or \
+    Makefile.node_prebuilt.defs before this makefile)
+
+BUILD ?=		build
+
+#
+# Invoking "npm install" at the top-level will create a "node_modules"
+# directory into which NPM modules will be installed.
+#
+CLEAN_FILES +=		node_modules
+
+#
+# To avoid repeatedly reinstalling from NPM, we create a "stamp" file to track
+# successful runs of "npm install".  Note that MAKE_STAMPS_DIR is included
+# in CLEAN_FILES already.
+#
+STAMP_NODE_MODULES ?=	$(MAKE_STAMPS_DIR)/node-modules
diff --git a/tools/mk/Makefile.node_deps.targ b/tools/mk/Makefile.node_modules.targ
similarity index 52%
rename from tools/mk/Makefile.node_deps.targ
rename to tools/mk/Makefile.node_modules.targ
index bb2ab4f..0156bce 100644
--- a/tools/mk/Makefile.node_deps.targ
+++ b/tools/mk/Makefile.node_modules.targ
@@ -1,4 +1,3 @@
-# -*- mode: makefile -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,11 +5,11 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
-# Makefile.node_deps.targ: targets for Makefile.node_deps.defs.
+# Makefile.node_modules.targ: See comments in Makefile.node_modules.defs.
 #
 # NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
 # into other repos as-is without requiring any modifications. If you find
@@ -18,7 +17,15 @@
 # eng.git and then update your repo to use the new version.
 #
 
-NPM_EXEC  ?= $(error NPM_EXEC must be defined for Makefile.node_deps.targ)
+STAMP_NODE_MODULES ?= $(error You must include Makefile.node_modules.defs \
+    before this file)
 
-node_modules/%: src/node-% | $(NPM_EXEC)
-	$(NPM) install $<
+#
+# If the "package.json" file changes, we need to rebuild the contents of
+# the "node_modules" directory.
+#
+$(STAMP_NODE_MODULES): package.json | $(NPM_EXEC)
+	$(MAKE_STAMP_REMOVE)
+	rm -rf node_modules
+	$(NPM_ENV) $(NPM) install
+	$(MAKE_STAMP_CREATE)
diff --git a/tools/mk/Makefile.node_prebuilt.defs b/tools/mk/Makefile.node_prebuilt.defs
index 5744489..2129742 100644
--- a/tools/mk/Makefile.node_prebuilt.defs
+++ b/tools/mk/Makefile.node_prebuilt.defs
@@ -1,4 +1,3 @@
-# -*- mode: makefile -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -146,8 +145,15 @@ NODE_EXEC	:= $(BUILD)/prebuilt-node-$(NODE_PREBUILT_NAME)
 NODE_WAF_EXEC	:= $(BUILD)/prebuilt-node-waf-$(NODE_PREBUILT_NAME)
 NPM_EXEC	:= $(BUILD)/prebuilt-npm-$(NODE_PREBUILT_NAME)
 
-# Ensure these use absolute paths to the executables to allow running
-# from a dir other than the project top.
+#
+# These paths should be used during the build process to invoke Node and
+# Node-related build tools like NPM.  All paths are fully qualified so that
+# they work regardless of the current working directory at the point of
+# invocation.
+#
+# Note that where PATH is overridden, the value chosen must cause execution of
+# "node" to find the same binary to which the NODE macro refers.
+#
 NODE		:= $(TOP)/$(NODE_INSTALL)/bin/node
 NODE_WAF	:= $(TOP)/$(NODE_INSTALL)/bin/node-waf
-NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) node $(TOP)/$(NODE_INSTALL)/bin/npm
+NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) $(NODE) $(TOP)/$(NODE_INSTALL)/bin/npm
diff --git a/tools/mk/Makefile.targ b/tools/mk/Makefile.targ
index ee7688a..54edf0e 100644
--- a/tools/mk/Makefile.targ
+++ b/tools/mk/Makefile.targ
@@ -1,4 +1,3 @@
-# -*- mode: makefile -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -317,3 +316,19 @@ test:
 
 .PHONY: prepush
 prepush: check test
+
+#
+# This rule automatically exposes every "stamp" file as a target that can be
+# invoked manually as "stamp-$STAMP_NAME".  For example, if a stamp has been
+# defined thus:
+#
+#	STAMP_EXPENSIVE_RESULT := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# ... this can be invoked manually as "make stamp-expensive-result".  Note that
+# these phony targets are essentially just for interactive usage.  Targets
+# should be specified to depend on the macro containing the stamp file name.
+#
+# See also the comments in "Makefile.defs".
+#
+stamp-%: $(MAKE_STAMPS_DIR)/%
+	@:
