commit 8d8d975964317d2022888df5e507cb9d58df7adf (refs/changes/34/5234/1)
Author: Josh Wilsdon <josh@wilsdon.ca>
Date:   2018-12-12T12:59:18-08:00 (10 months ago)
    
    TRITON-936 want cn-agent task for installing agents shar

diff --git a/lib/app.js b/lib/app.js
index 63aa210..ed99d04 100644
--- a/lib/app.js
+++ b/lib/app.js
@@ -18,6 +18,7 @@ var assert = require('assert-plus');
 var async = require('async');
 var backo2 = require('backo2');
 var jsprim = require('jsprim');
+var mockcloud_common = require('triton-mockcloud-common');
 var restify = require('restify');
 var vasync = require('vasync');
 var verror = require('verror');
@@ -423,7 +424,19 @@ App.prototype.start = function () {
 
     vasync.pipeline({
         funcs: [
-            function _createCnapiConnection(_, cb) {
+            function _getInstanceId(_, cb) {
+                var opts = {};
+
+                opts.serverUuid = self.sysinfo.UUID;
+                opts.agentName = 'cn-agent';
+                mockcloud_common.getAgentInstanceId(opts,
+                    function _onInstanceId(err, instId) {
+                        if (!err) {
+                            self.instanceId = instId;
+                        }
+                        cb(err);
+                    });
+            }, function _createCnapiConnection(_, cb) {
                 self.createCnapiConnection(cb);
             }, function _registerServer(_, cb) {
                 // We only call cb() once the 'sysinfo' has been handled by
diff --git a/lib/backends/common.js b/lib/backends/common.js
index eb744c7..29a52fd 100644
--- a/lib/backends/common.js
+++ b/lib/backends/common.js
@@ -24,6 +24,73 @@ var vasync = require('vasync');
 var CURL_CMD = '/usr/bin/curl';
 
 
+//
+// Download a file from a given `url` to outputFilename.
+//
+// Inputs:
+//
+//  url            -- http(s) URL of the file to download
+//  outputFilename -- the absolue path in which to write the output (dir must
+//                    exist)
+//  opts           -- a configuration object with:
+//  opts.log       -- a bunyan logger
+//
+// Note that url must currently start with 'http(s)://'.
+//
+// On completion callback will be called:
+//
+//   callback(err);
+//
+// where err will either be `undefined` (success) or an Error object indicating
+// the reason for failure.
+//
+function downloadFile(url, outputFilename, opts, callback) {
+    assert.string(url, 'url');
+    assert.ok(url.match(/^http.*$/), 'url must start with ^http');
+    assert.string(outputFilename, 'outputFilename');
+    assert.ok(path.isAbsolute(outputFilename),
+        'outputFilename must be absolute path');
+    assert.object(opts, 'opts');
+    assert.object(opts.log, 'opts.log');
+    assert.func(callback, 'callback');
+
+    var args = [
+        '-f', '-sS',
+        '-o', outputFilename,
+        url
+    ];
+
+    opts.log.debug({
+        cmdline: CURL_CMD + ' ' + args.join(' ')
+    }, 'executing');
+
+    execFile(CURL_CMD, args, function _onCurl(err, stdout, stderr) {
+        if (err) {
+            opts.log.error({
+                err: err,
+                stdout: stdout,
+                stderr: stderr,
+                url: url
+            }, 'failed to download file');
+
+            if (err.message.match(/404 Not Found/)) {
+                callback(new Error('File not found at ' + url));
+            } else {
+                callback(err);
+            }
+            return;
+        }
+
+        opts.log.debug({
+            filename: outputFilename,
+            url: url
+        }, 'downloaded file');
+
+        callback();
+    });
+}
+
+
 //
 // Download an agent image (<uuid>) to <output_prefix>.file and then rename to
 // .tar.gz or .tar.bz2 depending on compression from manifest.
@@ -106,34 +173,9 @@ function getAgentImage(imageUuid, opts, callback) {
                 cb();
             });
         }, function getImgapiFile(_, cb) {
-            var args = [
-                '-f', '-sS',
-                '-o', outputFullBasename + '.file',
-                fileUrl
-            ];
-
-            log.debug({cmdline: CURL_CMD + ' ' + args.join(' ')}, 'executing');
-            execFile(CURL_CMD, args, function (err, stdout, stderr) {
-                if (err) {
-                    log.error({
-                        err: err,
-                        stdout: stdout,
-                        stderr: stderr,
-                        url: fileUrl
-                    }, 'failed to download file');
-                    if (err.message.match(/404 Not Found/)) {
-                        cb(new Error('Image not found at ' + fileUrl));
-                    } else {
-                        cb(err);
-                    }
-                    return;
-                }
-                log.debug({
-                    filename: outputFullBasename + '.file',
-                    url: fileUrl
-                }, 'got imgapi file');
-                cb();
-            });
+            downloadFile(fileUrl, outputFullBasename + '.file', {
+                log: log
+            }, cb);
         }, function checkSize(_, cb) {
             var expected_size = manifest.files[0].size;
             var filename = outputFullBasename + '.file';
@@ -490,5 +532,6 @@ function adoptInstanceInSapi(opts, callback) {
 
 module.exports = {
     adoptInstanceInSapi: adoptInstanceInSapi,
+    downloadFile: downloadFile,
     getAgentImage: getAgentImage
 };
diff --git a/lib/backends/dummy/index.js b/lib/backends/dummy/index.js
index 6d5a790..dbc697b 100644
--- a/lib/backends/dummy/index.js
+++ b/lib/backends/dummy/index.js
@@ -66,6 +66,7 @@ var queueDefns = [
         maxConcurrent: 1,
         tasks: [
             'agent_install',
+            'agentsshar_install',
             'refresh_agents'
         ]
     },
diff --git a/lib/backends/dummy/tasks/agent_install.js b/lib/backends/dummy/tasks/agent_install.js
index a7104b6..1d32c7d 100644
--- a/lib/backends/dummy/tasks/agent_install.js
+++ b/lib/backends/dummy/tasks/agent_install.js
@@ -54,7 +54,6 @@ var common = require('../common');
 var shared = require('./shared');
 var Task = require('../../../task_agent/task');
 
-var CURL_CMD = '/usr/bin/curl';
 var SERVER_ROOT = common.SERVER_ROOT;
 
 
diff --git a/lib/backends/dummy/tasks/agentsshar_install.js b/lib/backends/dummy/tasks/agentsshar_install.js
new file mode 100644
index 0000000..ea72f80
--- /dev/null
+++ b/lib/backends/dummy/tasks/agentsshar_install.js
@@ -0,0 +1,123 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2018 Joyent, Inc.
+ */
+
+/*
+ *
+ */
+
+var fs = require('fs');
+var path = require('path');
+
+var assert = require('assert-plus');
+var vasync = require('vasync');
+
+var backendCommon = require('../../common');
+var shared = require('./shared');
+var Task = require('../../../task_agent/task');
+
+
+function AgentsSharInstallTask(req) {
+    Task.call(this);
+    this.req = req;
+}
+
+Task.createTask(AgentsSharInstallTask);
+
+
+function start() {
+    var self = this;
+
+    assert.object(self.log, 'self.log');
+    assert.object(self.req, 'self.req');
+    assert.string(self.req.req_id, 'self.req.req_id');
+    assert.object(self.req.params, 'self.req.params');
+    assert.string(self.req.params.url, 'self.req.params.url');
+    assert.object(self.sysinfo, 'self.sysinfo');
+    assert.uuid(self.sysinfo.UUID, 'self.sysinfo.UUID');
+
+    self.log.debug({
+        server_uuid: self.sysinfo.UUID,
+        url: self.req.params.url
+    }, 'attempting to install agentshar');
+
+    vasync.pipeline({arg: {}, funcs: [
+        function _downloadShar(ctx, cb) {
+            ctx.sharFile = path.join('/var/tmp/',
+                'agentsshar.download.' + self.sysinfo.UUID + '.' +
+                path.basename(self.req.params.url));
+
+            backendCommon.downloadFile(
+                self.req.params.url,
+                ctx.sharFile,
+                { log: self.log },
+                function _onDownloaded(err) {
+                    self.progress(50);
+                    cb(err);
+                });
+        }, function _installShar(ctx, cb) {
+            shared.installAgentsShar({
+                log: self.log,
+                serverUuid: self.sysinfo.UUID,
+                sharFile: ctx.sharFile
+            }, function _onInstallAgentsShar(err) {
+                self.progress(75);
+
+                if (err) {
+                    self.log.error({
+                        agentsShar: ctx.agentsShar,
+                        err: err,
+                        sharFile: ctx.sharFile,
+                        serverUuid: self.sysinfo.UUID
+                    }, 'failed to install agentsshar');
+                }
+
+                cb(err);
+            });
+        }, function _deleteTmpShar(ctx, cb) {
+            fs.unlink(ctx.sharFile, function _onUnlink(err) {
+                var logLevel = 'debug';
+                var logMsg;
+
+                if (err) {
+                    logLevel = 'error';
+                    logMsg = 'failed to delete temporary agentsshar';
+                } else {
+                    logMsg = 'deleted temporary agentsshar';
+                }
+
+                self.log[logLevel]({
+                    agentsShar: ctx.agentsShar,
+                    err: err,
+                    filename: ctx.sharFile,
+                    serverUuid: self.sysinfo.UUID
+                }, logMsg);
+
+                // We don't fail the whole update if we just couldn't delete the
+                // temp file, since in fact we've already installed the agents
+                // successfully. So we just log an error here and move on hoping
+                // someone is looking at the logs for errors.
+                cb();
+            });
+        }
+    ]}, function _onInstallPipelineComplete(err) {
+        self.progress(100);
+
+        if (err) {
+            self.fatal('Failed to install agentsshar: ' + err.message);
+            return;
+        }
+
+        self.finish();
+    });
+}
+
+AgentsSharInstallTask.setStart(start);
+
+module.exports = AgentsSharInstallTask;
diff --git a/lib/backends/dummy/tasks/shared.js b/lib/backends/dummy/tasks/shared.js
index eed1e9a..2f19753 100644
--- a/lib/backends/dummy/tasks/shared.js
+++ b/lib/backends/dummy/tasks/shared.js
@@ -496,18 +496,26 @@ function installAgentsShar(opts, callback) {
             var logLevel = 'debug';
 
             fs.mkdir(tmpServerDir, function onMkdir(err) {
+                var mkdirErr;
+
                 if (err) {
-                    logLevel = 'error';
+                    if (err.code !== 'EEXIST') {
+                        logLevel = 'error';
+                        mkdirErr = err;
+                    }
                 }
                 opts.log[logLevel]({
                     err: err
                 }, 'ran "fs.mkdir(%s)"', tmpServerDir);
-                cb(err);
+
+                cb(mkdirErr);
             });
         },
         function makeTmpDir(_, cb) {
             var logLevel = 'debug';
 
+            // We don't make an exception for EEXIST here, because we should
+            // have removed the existing dir in removePreviousTmpDir().
             fs.mkdir(tmpDir, function onMkdir(err) {
                 if (err) {
                     logLevel = 'error';
diff --git a/lib/backends/dummy/tools/create-server.js b/lib/backends/dummy/tools/create-server.js
index b5abeca..643437e 100644
--- a/lib/backends/dummy/tools/create-server.js
+++ b/lib/backends/dummy/tools/create-server.js
@@ -22,6 +22,8 @@
 //  * This runs as root
 //  * The DC we're attaching to is the same as `mdata-get sdc:datacenter_name`
 //  * NAPI is at napi.<datacenterName>.<dnsDomain>
+//  * If /var/tmp/latest-agentsshar.sh exists, install those agents for this new
+//    CN.
 //
 // TODO:
 //
@@ -299,11 +301,11 @@ function writeSysinfo(ctx, callback) {
     });
 }
 
-
 function installAgents(ctx, callback) {
     assert.object(ctx, 'ctx');
     assert.object(ctx.serverObj, 'ctx.serverObj');
     assert.uuid(ctx.serverObj.UUID, 'ctx.serverObj.UUID');
+    assert.func(callback, 'callback');
 
     var agentsShar = '/var/tmp/agentsshar-latest.sh';
     var serverUuid = ctx.serverObj.UUID;
@@ -341,7 +343,6 @@ function installAgents(ctx, callback) {
     });
 }
 
-
 function createServer(callback) {
     var ctx = {};
 
diff --git a/lib/backends/smartos/index.js b/lib/backends/smartos/index.js
index cc622de..ff0f314 100644
--- a/lib/backends/smartos/index.js
+++ b/lib/backends/smartos/index.js
@@ -88,6 +88,7 @@ var queueDefns = [
         maxConcurrent: 1,
         tasks: [
             'agent_install',
+            'agentsshar_install',
             'shutdown_cn_agent_update',
             'refresh_agents'
         ]
diff --git a/lib/backends/smartos/tasks/agentsshar_install.js b/lib/backends/smartos/tasks/agentsshar_install.js
new file mode 100644
index 0000000..73212b4
--- /dev/null
+++ b/lib/backends/smartos/tasks/agentsshar_install.js
@@ -0,0 +1,50 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2018 Joyent, Inc.
+ */
+
+/*
+ *
+ */
+
+var assert = require('assert-plus');
+
+var refreshAgents = require('./shared').refreshAgents;
+var smartdc_config = require('../smartdc-config');
+var Task = require('../../../task_agent/task');
+
+function AgentsSharInstallTask(req) {
+    Task.call(this);
+    this.req = req;
+}
+
+Task.createTask(AgentsSharInstallTask);
+
+function start() {
+    var self = this;
+
+    assert.object(self.log, 'self.log');
+    assert.object(self.req, 'self.req');
+    assert.string(self.req.req_id, 'self.req.req_id');
+    assert.object(self.req.params, 'self.req.params');
+    assert.string(self.req.params.shar, 'self.req.params.shar');
+    assert.object(self.sysinfo, 'self.sysinfo');
+    assert.uuid(self.sysinfo.UUID, 'self.sysinfo.UUID');
+
+    self.log.warn({
+        server_uuid: self.sysinfo.UUID,
+        shar: self.req.params.shar
+    }, 'would try to install agentsshar');
+
+    self.progress(100);
+    return self.finish();
+}
+
+AgentsSharInstallTask.setStart(start);
+
+module.exports = AgentsSharInstallTask;
diff --git a/package.json b/package.json
index e72951a..1abb251 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "cn-agent",
   "description": "Triton Compute Node Agent",
-  "version": "2.5.1",
+  "version": "2.6.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
@@ -29,6 +29,7 @@
     "semver": "5.4.1",
     "sprintf": "0.1.5",
     "trace-event": "git+https://github.com/joyent/node-trace-event.git#9f7d00b8c3594def9ef534f68c16c215c3dba9f2",
+    "triton-mockcloud-common": "git+http://github.com/joyent/triton-mockcloud-common.git#master",
     "uuid": "3.0.1",
     "vasync": "1.6.4",
     "verror": "1.9.0",
