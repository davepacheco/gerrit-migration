From fdf3247a3963384f2104e88e9169b0e90f188ad0 Mon Sep 17 00:00:00 2001
From: Kody Kantor <kody@kkantor.com>
Date: Wed, 3 Apr 2019 19:08:25 +0000
Subject: [PATCH] joyent/pgstatsmon#23 Negative byte lag calculated from
 pgstatsmon metrics after shard rebuild

---
 CHANGES.md           |  7 ++++
 bin/dtrace/walstat.d | 58 ++++++++++++++++++++++++++-------
 docs/migrating.md    | 76 ++++++++++++++++++++++++++++++++++++++++++++
 lib/pgstatsmon.js    |  4 +--
 lib/queries.js       | 13 ++++----
 package.json         |  2 +-
 6 files changed, 139 insertions(+), 21 deletions(-)
 create mode 100644 docs/migrating.md

diff --git a/CHANGES.md b/CHANGES.md
index e9821ae..30a24ea 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -3,6 +3,13 @@
 ## Not yet released
 * #24 track vacuum start time
 
+## 2.0.0
+* #23 Negative byte lag calculated from pgstatsmon metrics after shard rebuild
+  - This is a breaking change since pgstatsmon now returns gauges instead of
+    counters for the pg_stat_replication table data. This also moves pgstatsmon
+    to node-artedi 2.0.0, which includes a breaking histogram bucket change.
+    See [docs/migrating.md](./docs/migrating.md) for more information.
+
 ## 1.1.0
 * #18 pgstatsmon shouldn't try to create functions that depend on missing functions
 * #17 pgstatsmon should support discovering backend IPs via nic_tag regex
diff --git a/bin/dtrace/walstat.d b/bin/dtrace/walstat.d
index 69d8f60..63798ec 100755
--- a/bin/dtrace/walstat.d
+++ b/bin/dtrace/walstat.d
@@ -5,7 +5,7 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/.
  *
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -44,11 +44,15 @@
 
 BEGIN
 {
+	do_print = 0;
+	self->prev["unused", "val"] = 10; /* Initialize an associative array. */
 	printf("waiting for tick...\n");
 }
 
-artedi*:::counter-add
-/copyinstr(arg0) == "pg_stat_replication_wal_sent_bytes"/
+artedi*:::gauge-set
+/
+copyinstr(arg0) == "pg_stat_replication_wal_sent_bytes"
+/
 {
 	labels = copyinstr(arg2);
 	backend = json(labels, "backend");
@@ -56,11 +60,16 @@ artedi*:::counter-add
 	sync_state = json(labels, "sync_state");
 	zone = substr(backend, strlen(backend) - 8);
 
-	@sent[shard, zone, sync_state] = sum(arg1);
+	diff = arg1 - self->prev[zone, "sent"];
+
+	@sent[shard, zone, sync_state] = sum(diff);
+	self->prev[zone, "sent"] = arg1;
 }
 
-artedi*:::counter-add
-/copyinstr(arg0) == "pg_stat_replication_replica_wal_written_bytes"/
+artedi*:::gauge-set
+/
+copyinstr(arg0) == "pg_stat_replication_replica_wal_written_bytes"
+/
 {
 	labels = copyinstr(arg2);
 	backend = json(labels, "backend");
@@ -68,11 +77,16 @@ artedi*:::counter-add
 	sync_state = json(labels, "sync_state");
 	zone = substr(backend, strlen(backend) - 8);
 
-	@written[shard, zone, sync_state] = sum(arg1);
+	diff = arg1 - self->prev[zone, "write"];
+
+	@written[shard, zone, sync_state] = sum(diff);
+	self->prev[zone, "write"] = arg1;
 }
 
-artedi*:::counter-add
-/copyinstr(arg0) == "pg_stat_replication_replica_wal_flushed_bytes"/
+artedi*:::gauge-set
+/
+copyinstr(arg0) == "pg_stat_replication_replica_wal_flushed_bytes"
+/
 {
 	labels = copyinstr(arg2);
 	backend = json(labels, "backend");
@@ -80,10 +94,13 @@ artedi*:::counter-add
 	sync_state = json(labels, "sync_state");
 	zone = substr(backend, strlen(backend) - 8);
 
-	@flushed[shard, zone, sync_state] = sum(arg1);
+	diff = arg1 - self->prev[zone, "flush"];
+
+	@flushed[shard, zone, sync_state] = sum(diff);
+	self->prev[zone, "flush"] = arg1;
 }
 
-artedi*:::counter-add
+artedi*:::gauge-set
 /copyinstr(arg0) == "pg_stat_replication_replica_wal_replayed_bytes"/
 {
 	labels = copyinstr(arg2);
@@ -92,10 +109,15 @@ artedi*:::counter-add
 	sync_state = json(labels, "sync_state");
 	zone = substr(backend, strlen(backend) - 8);
 
-	@replayed[shard, zone, sync_state] = sum(arg1);
+	diff = arg1 - self->prev[zone, "replayed"];
+
+	@replayed[shard, zone, sync_state] = sum(diff);
+	self->prev[zone, "replayed"] = arg1;
 }
 
+
 pgstatsmon*:::tick-done
+/do_print/
 {
 	/* headers */
 	printf("%30s %40s\n", "----- CLUSTER STATE -----",
@@ -115,3 +137,15 @@ pgstatsmon*:::tick-done
 	clear(@flushed);
 	clear(@replayed);
 }
+
+/* Enable printing after the first tick. */
+pgstatsmon*:::tick-done
+/do_print == 0/
+{
+	do_print = 1;
+
+	clear(@sent);
+	clear(@written);
+	clear(@flushed);
+	clear(@replayed);
+}
diff --git a/docs/migrating.md b/docs/migrating.md
new file mode 100644
index 0000000..03cbd11
--- /dev/null
+++ b/docs/migrating.md
@@ -0,0 +1,76 @@
+# Migrating from pgstatsmon v1.x to v2.x
+
+pgstatsmon#23 intoduced a pair of breaking changes:
+- Data retrieved from pg_stat_replication is now intepreted as a set of gauges
+  rather than counters.
+- Updated the node-artedi dependency from v1.4.0 to v2.0.0.
+
+We'll cover below how to overcome these two breaking changes.
+
+## pg_stat_replication change
+
+In short, this change modifies the pg_stat_replication data from representing
+the number of WAL bytes written since the backend was discovered to representing
+the number of WAL bytes written since the beginning of the backend's existence.
+
+How this change affects your systems depends on how you're using the
+pg_stat_replication data. If your monitoring system is currently measuring these
+data points in relation to other data points within the pg_stat_replication data
+it is likely no change is necessary for your monitoring system. For example, if
+you are trying to monitor a downstream peer's apply lag in bytes, today you
+might use a query like this:
+
+```
+pg_stat_replication_wal_sent_bytes - pg_stat_replication_replica_wal_replayed_bytes
+```
+
+Good news! Queries like that will now be more accurate and no change is
+necessary to get the benefits of the #23 bug fix.
+
+However, if your monitoring system measures pg_stat_replication values against
+non-pg_stat_replication data, the result of the query will likely be drastically
+different in pgstatsmon v2. Take this example which is a query for trying to
+track WAL receive lag between the upstream and downstream peers in a Postgres
+deployment:
+
+```
+pg_stat_replication_wal_sent_bytes - pg_recovery_wal_received_bytes
+```
+
+In this example we are comparing two different data types, which is a problem.
+The first is a gauge type and the second is a counter type. In pgstatsmon v1
+both were counter types, so this was valid (though the data probably wasn't
+accurate).
+
+## node-artedi update
+
+The node-artedi change only affects histogram types. Currently the histogram
+type is only used by the 'querytime' set of metrics. These metrics measure the
+amount of time it took to execute each statistics gathering query against each
+backend. If you aren't consuming the querytime metrics then this breaking
+change does not apply.
+
+If your monitoring system consumes the querytime metrics, note that two changes
+were made:
+- query times are now reported in seconds rather than milliseconds.
+- the buckets used are now the 'standard' Prometheus histogram buckets instead
+  of a snowflake set of node-artedi buckets.
+
+This document is a good place to start to read about the breaking node-artedi
+change:
+https://github.com/joyent/node-artedi/blob/54b21b7631fbd6ea3f0ce48490f00c649596022e/docs/migrating.md
+
+To reduce the technical debt carried by pgstatsmon we've decided to shift the
+load of this change from pgstatsmon to the monitoring system. We recommend you
+do the following if you want to continue consuming the querytime metrics:
+
+- duplicate your querytime queries and graphs to consume both the
+  millisecond- and second-based querytime stats in your monitoring system.
+  - to fully avoid a breaking change each of the second-based statistics will
+    need to be multiplied by 1000 to convert them back into milliseconds.
+- update all pgstatsmon instances.
+- the (old) millisecond- and (new) second-based querytime stats should appear in
+  sequence together.
+- you can choose to keep both versions of the querytime queries in your
+  monitoring system, or drop the millisecond-based queries after the data has
+  passed through your metric data retention policy period.
diff --git a/lib/pgstatsmon.js b/lib/pgstatsmon.js
index 95d506f..ee78831 100644
--- a/lib/pgstatsmon.js
+++ b/lib/pgstatsmon.js
@@ -927,10 +927,10 @@ PgMon.prototype.tickPgQuery = function (pi, qi, cb)
 		timer = {
 			'attr': 'querytime',
 			'help': 'time to run stat query',
-			'unit': 'ms'
+			'unit': 'seconds'
 		};
 		mon.emitTimer(mon.qstatname(pi, qi, null, timer),
-		    mod_jsprim.hrtimeMillisec(time));
+		    mod_jsprim.hrtimeMillisec(time) / 1000);
 		mon.pm_state[pi][qi] = null;
 		setImmediate(cb);
 	});
diff --git a/lib/queries.js b/lib/queries.js
index 52e5187..535b5f4 100644
--- a/lib/queries.js
+++ b/lib/queries.js
@@ -131,16 +131,17 @@ function getQueries(config) {
 	     'sql': [ /* this only works on Postgres 9.4+ */
 	         'SELECT ',
 	         'sync_state, ',
-	         'sent_location - CAST (\'0/0\' AS pg_lsn) AS wal_sent, ',
-	         'write_location - CAST (\'0/0\' AS pg_lsn) ',
+	         '(sent_location - CAST (\'0/0\' AS pg_lsn))::bigint ',
+	         'AS wal_sent, ',
+	         '(write_location - CAST (\'0/0\' AS pg_lsn))::bigint ',
 	         'AS replica_wal_written, ',
-	         'flush_location - CAST (\'0/0\' AS pg_lsn) ',
+	         '(flush_location - CAST (\'0/0\' AS pg_lsn))::bigint ',
 	         'AS replica_wal_flushed, ',
-	         'replay_location - CAST (\'0/0\' AS pg_lsn) AS ',
-	         'replica_wal_replayed ',
+	         '(replay_location - CAST (\'0/0\' AS pg_lsn))::bigint ',
+	         'AS replica_wal_replayed ',
 	         'FROM get_stat_replication();'
 	     ].join('\n'),
-	     'counters': [
+	     'gauges': [
 	         { 'attr': 'wal_sent',
 	           'help': 'wal bytes sent to replica', 'unit': 'bytes' },
 	         { 'attr': 'replica_wal_written',
diff --git a/package.json b/package.json
index 64be016..8b21643 100644
--- a/package.json
+++ b/package.json
@@ -7,7 +7,7 @@
 	},
 	"dependencies": {
 		"ajv": "5.5.1",
-		"artedi": "1.4.0",
+		"artedi": "2.0.0",
 		"assert-plus": "1.0.0",
 		"backoff": "2.5.0",
 		"bunyan": "1.8.10",
-- 
2.21.0

