From c4410463df5667f6d79cb078ce917e1185bcd5ab Mon Sep 17 00:00:00 2001
From: Tim Foster <tim.foster@joyent.com>
Date: Thu, 28 Feb 2019 17:27:20 +0000
Subject: [PATCH] MANTA-4086 convert manta-reshard to engbld framework

---
 .gitignore                           |   4 +-
 .gitmodules                          |   3 +
 Makefile                             |  57 ++---
 deps/eng                             |   1 +
 tools/download_sdcnode               |  77 ------
 tools/mk/Makefile.defs               | 105 ---------
 tools/mk/Makefile.deps               |  54 -----
 tools/mk/Makefile.node_modules.defs  |  68 ------
 tools/mk/Makefile.node_modules.targ  |  31 ---
 tools/mk/Makefile.node_prebuilt.defs |  96 --------
 tools/mk/Makefile.node_prebuilt.targ |  48 ----
 tools/mk/Makefile.targ               | 334 ---------------------------
 12 files changed, 37 insertions(+), 841 deletions(-)
 create mode 160000 deps/eng
 delete mode 100755 tools/download_sdcnode
 delete mode 100644 tools/mk/Makefile.defs
 delete mode 100644 tools/mk/Makefile.deps
 delete mode 100644 tools/mk/Makefile.node_modules.defs
 delete mode 100644 tools/mk/Makefile.node_modules.targ
 delete mode 100644 tools/mk/Makefile.node_prebuilt.defs
 delete mode 100644 tools/mk/Makefile.node_prebuilt.targ
 delete mode 100644 tools/mk/Makefile.targ

diff --git a/.gitignore b/.gitignore
index b5df517..43b87fd 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,6 +1,8 @@
+/bits
+/build
 cache/
 make_stamps/
 node
 node_modules/
 proto/
-*-pkg-*.tar.bz2
+*-pkg-*.tar.gz
diff --git a/.gitmodules b/.gitmodules
index ccc2c67..fe1dc77 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,3 +1,6 @@
 [submodule "deps/manta-scripts"]
 	path = deps/manta-scripts
 	url = https://github.com/joyent/manta-scripts.git
+[submodule "deps/eng"]
+	path = deps/eng
+	url = https://github.com/joyent/eng.git
diff --git a/Makefile b/Makefile
index 9dc3092..26cb7b1 100644
--- a/Makefile
+++ b/Makefile
@@ -5,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2017, Joyent, Inc.
+# Copyright (c) 2019, Joyent, Inc.
 #
 
 #
@@ -25,12 +25,22 @@ PREFIX =			/opt/smartdc/$(NAME)
 
 CLEAN_FILES +=			$(PROTO)
 
-RELEASE_TARBALL =		$(NAME)-pkg-$(STAMP).tar.bz2
+RELEASE_TARBALL =		$(NAME)-pkg-$(STAMP).tar.gz
 
+BASE_IMAGE_UUID = 18b094b0-eb01-11e5-80c1-175dac7ddf02
+BUILDIMAGE_NAME = manta-reshard
+BUILDIMAGE_DESC	= Manta Resharding System
+BUILDIMAGE_PKGSRC = coreutils-8.23nb2
+AGENTS		= amon config registrar
 
-include ./tools/mk/Makefile.defs
-include ./tools/mk/Makefile.node_prebuilt.defs
-include ./tools/mk/Makefile.node_modules.defs
+ENGBLD_USE_BUILDIMAGE	= true
+ENGBLD_REQUIRE		:= $(shell git submodule update --init deps/eng)
+include ./deps/eng/tools/mk/Makefile.defs
+TOP ?= $(error Unable to access eng.git submodule Makefiles.)
+
+include ./deps/eng/tools/mk/Makefile.node_prebuilt.defs
+include ./deps/eng/tools/mk/Makefile.agent_prebuilt.defs
+include ./deps/eng/tools/mk/Makefile.node_modules.defs
 
 .PHONY: all
 all: $(STAMP_NODE_PREBUILT) $(STAMP_NODE_MODULES)
@@ -101,9 +111,10 @@ INSTALL_DIRS =			$(addprefix $(PROTO), \
 INSTALL_EXEC =			rm -f $@ && cp $< $@ && chmod 755 $@
 INSTALL_FILE =			rm -f $@ && cp $< $@ && chmod 644 $@
 
-
 .PHONY: install
-install: $(INSTALL_FILES)
+install: all $(INSTALL_FILES)
+
+$(SCRIPTS:%=$(PROTO)$(SCRIPTS_DIR)/%): deps/manta-scripts/.git
 
 $(INSTALL_DIRS):
 	mkdir -p $@
@@ -124,10 +135,10 @@ $(PROTO)$(PREFIX)/templates/%: templates/% | $(INSTALL_DIRS)
 	$(INSTALL_FILE)
 
 $(PROTO)$(PREFIX)/node/bin/%: $(STAMP_NODE_PREBUILT) | $(INSTALL_DIRS)
-	rm -f $@ && cp $(NODE_INSTALL)/node/bin/$(@F) $@ && chmod 755 $@
+	rm -f $@ && cp $(NODE_INSTALL)/bin/$(@F) $@ && chmod 755 $@
 
 $(PROTO)$(PREFIX)/node/lib/%: $(STAMP_NODE_PREBUILT) | $(INSTALL_DIRS)
-	rm -f $@ && cp $(NODE_INSTALL)/node/lib/$(@F) $@ && chmod 755 $@
+	rm -f $@ && cp $(NODE_INSTALL)/lib/$(@F) $@ && chmod 755 $@
 
 $(PROTO)$(PREFIX)/cmd/%.js: cmd/%.js | $(INSTALL_DIRS)
 	$(INSTALL_FILE)
@@ -155,29 +166,21 @@ $(PROTO)$(PREFIX)/sapi_manifests/%: sapi_manifests/% | $(INSTALL_DIRS)
 $(PROTO)$(PREFIX)/smf/manifests/%.xml: smf/manifests/%.xml | $(INSTALL_DIRS)
 	$(INSTALL_FILE)
 
-#
-# Mountain Gorilla targets:
-#
-
 .PHONY: release
-release: install
+release: all install
 	@echo "==> Building $(RELEASE_TARBALL)"
-	cd $(PROTO) && gtar -jcf $(TOP)/$(RELEASE_TARBALL) \
+	cd $(PROTO) && gtar -I pigz -cf $(TOP)/$(RELEASE_TARBALL) \
 	    --transform='s,^[^.],root/&,' \
 	    --owner=0 --group=0 \
 	    opt
 
 .PHONY: publish
 publish: release
-	@if [[ -z "$(BITS_DIR)" ]]; then \
-		echo "error: 'BITS_DIR' must be set for 'publish' target"; \
-		exit 1; \
-	fi
-	mkdir -p $(BITS_DIR)/$(NAME)
-	cp $(RELEASE_TARBALL) $(BITS_DIR)/$(NAME)/$(RELEASE_TARBALL)
-
-
-include ./tools/mk/Makefile.deps
-include ./tools/mk/Makefile.targ
-include ./tools/mk/Makefile.node_prebuilt.targ
-include ./tools/mk/Makefile.node_modules.targ
+	mkdir -p $(ENGBLD_BITS_DIR)/$(NAME)
+	cp $(RELEASE_TARBALL) $(ENGBLD_BITS_DIR)/$(NAME)/$(RELEASE_TARBALL)
+
+include ./deps/eng/tools/mk/Makefile.deps
+include ./deps/eng/tools/mk/Makefile.targ
+include ./deps/eng/tools/mk/Makefile.node_prebuilt.targ
+include ./deps/eng/tools/mk/Makefile.agent_prebuilt.targ
+include ./deps/eng/tools/mk/Makefile.node_modules.targ
diff --git a/deps/eng b/deps/eng
new file mode 160000
index 0000000..cfd827a
--- /dev/null
+++ b/deps/eng
@@ -0,0 +1 @@
+Subproject commit cfd827a5029c249624efd6fcdee128db2a9d727e
diff --git a/tools/download_sdcnode b/tools/download_sdcnode
deleted file mode 100755
index 214c2e1..0000000
--- a/tools/download_sdcnode
+++ /dev/null
@@ -1,77 +0,0 @@
-#!/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2017, Joyent, Inc.
-#
-
-BASEURL='https://download.joyent.com/pub/build/sdcnode'
-BRANCH='master'
-IMAGE=$1
-VARIANT=$2
-OUTDIR=$3
-
-if [[ -z $IMAGE || -z $VARIANT || -z $OUTDIR ]]; then
-	printf 'ERROR: usage: download_sdcnode IMAGE VARIANT OUTDIR\n' 2>&1
-	exit 1
-fi
-
-FULLURL="$BASEURL/$IMAGE/$BRANCH-latest/sdcnode/"
-TARGET="sdcnode-$VARIANT-$IMAGE.tar.gz"
-
-#
-# Download the index page which lists the current set of available sdcnode
-# builds:
-#
-if ! list=$(curl -sSfL "$FULLURL") || [[ -z "$list" ]]; then
-	printf 'ERROR: could not download index page\n' >&2
-	exit 1
-fi
-
-#
-# Using only commonly found household items, extract the full name of the
-# sdcnode tar archive we need.
-#
-# One word to describe this process might be "brittle".
-#
-if ! name=$(awk -v "v=$VARIANT" -v "b=$BRANCH" -v "i=$IMAGE" -F\" '
-    BEGIN { pattern = "^sdcnode-"v"-"i"-"b"-.*.tgz$"; }
-    $1 == "<a href=" && $2 ~ pattern { print $2 }' <<< "$list") ||
-    [[ -z "$name" ]]; then
-	printf 'ERROR: could not locate file name in index page\n' >&2
-	exit 1
-fi
-
-if [[ ! -f $OUTDIR/$name ]]; then
-	#
-	# If the full file name of the latest sdcnode build does not exist,
-	# download it now to a temporary file.  If it succeeds, move it into
-	# place.
-	#
-	if ! curl -sSf -o "$OUTDIR/.tmp.$name" "$FULLURL$name"; then
-		printf 'ERROR: could not download sdcnode' >&2
-		rm -f "$OUTPUT.tmp"
-		exit 1
-	fi
-
-	if ! mv "$OUTDIR/.tmp.$name" "$OUTDIR/$name"; then
-		exit 1
-	fi
-fi
-
-#
-# Make sure the target link points at the correct file:
-#
-rm -f "$OUTDIR/$TARGET"
-if ! ln -s "$name" "$OUTDIR/$TARGET"; then
-	printf 'ERROR: could not create target link\n' >&2
-	exit 1
-fi
-
-exit 0
-
-# vim: set ts=8 sts=8 sw=8 noet:
diff --git a/tools/mk/Makefile.defs b/tools/mk/Makefile.defs
deleted file mode 100644
index f6e9042..0000000
--- a/tools/mk/Makefile.defs
+++ /dev/null
@@ -1,105 +0,0 @@
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2017, Joyent, Inc.
-#
-
-#
-# Makefile.defs: common defines.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-# This makefile defines some useful defines. Include it at the top of
-# your Makefile.
-#
-# Definitions in this Makefile:
-#
-#	TOP 		The absolute path to the project directory. The top dir.
-#	BRANCH 		The current git branch.
-#	TIMESTAMP	The timestamp for the build. This can be set via
-#			the TIMESTAMP envvar (used by MG-based builds).
-#	STAMP		A build stamp to use in built package names.
-#
-#	MAKE_STAMPS_DIR	The directory in which make stamp files are to be
-#			created.  See comments below on expensive targets.
-#
-#	CACHE_DIR	A directory tree in which temporary files may be
-#			collected by download, tarball extraction, etc.  This
-#			directory is completely removed by "make distclean".
-#			Files in this directory are not intended to be shipped.
-#
-
-TOP := $(shell pwd)
-
-#
-# Mountain Gorilla-spec'd versioning.
-# See "Package Versioning" in MG's README.md:
-# <https://mo.joyent.com/mountain-gorilla/blob/master/README.md#L139-200>
-#
-# Need GNU awk for multi-char arg to "-F".
-_AWK := $(shell (which gawk >/dev/null && echo gawk) \
-	|| (which nawk >/dev/null && echo nawk) \
-	|| echo awk)
-BRANCH := $(shell git symbolic-ref HEAD | $(_AWK) -F/ '{print $$3}')
-ifeq ($(TIMESTAMP),)
-	TIMESTAMP := $(shell date -u "+%Y%m%dT%H%M%SZ")
-endif
-_GITDESCRIBE := g$(shell git describe --all --long --dirty | $(_AWK) -F'-g' '{print $$NF}')
-STAMP := $(BRANCH)-$(TIMESTAMP)-$(_GITDESCRIBE)
-
-# node-gyp will print build info useful for debugging with V=1
-export V=1
-
-CACHE_DIR ?=		cache
-DISTCLEAN_FILES +=	$(CACHE_DIR)
-
-#
-# EXPENSIVE TARGETS AND MAKE STAMP FILES
-#
-# Targets which are expensive to run and lack a single file that marks
-# completion are difficult to track with make; e.g., "npm install".  One
-# solution to this problem is to create "stamp" files with symbolic names which
-# are created as the final step in a complex make rule in order to mark
-# completion.
-#
-# In order to make these more uniform, and easier to target with "make clean",
-# we will attempt to store them under a single directory.  Note that these
-# files are never targets for shipping in build artefacts.
-#
-# Stamp-backed targets come in several parts.  First, a macro should be defined
-# which names a file in the MAKE_STAMPS_DIR directory.  Then, a target which
-# creates this stamp file must be provided.  The recipe for this target should
-# use MAKE_STAMP_REMOVE and MAKE_STAMP_CREATE to perform the appropriate stamp
-# management.
-#
-# For example:
-#
-# --- Makefile.*.defs:
-#
-#	$(STAMP_EXPENSIVE_RESULT) := $(MAKE_STAMPS_DIR)/expensive-result
-#
-# --- Makefile.*.targ:
-#
-#	$(STAMP_EXPENSIVE_RESULT): input/file another/input/file
-#		$(MAKE_STAMP_REMOVE)
-#		rm -rf output_tree/  # <--- ensure a clean slate
-#		expensive_program -o output_tree/ $^
-#		$(MAKE_STAMP_CREATE)
-#
-# NOTE: Every stamp file is exposed as an implicit "stamp-$STAMP_NAME" target.
-# The example above could be built manually by invoking:
-#
-#	make stamp-expensive-result
-#
-MAKE_STAMPS_DIR ?=	make_stamps
-CLEAN_FILES +=		$(MAKE_STAMPS_DIR)
-
-MAKE_STAMP_REMOVE =	mkdir -p $(@D); rm -f $(@)
-MAKE_STAMP_CREATE =	mkdir -p $(@D); touch $(@)
diff --git a/tools/mk/Makefile.deps b/tools/mk/Makefile.deps
deleted file mode 100644
index 1cffbe7..0000000
--- a/tools/mk/Makefile.deps
+++ /dev/null
@@ -1,54 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.deps: Makefile for including common tools as dependencies
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-# This file is separate from Makefile.targ so that teams can choose
-# independently whether to use the common targets in Makefile.targ and the
-# common tools here.
-#
-
-#
-# javascriptlint
-#
-JSL_EXEC	?= deps/javascriptlint/build/install/jsl
-JSL		?= $(JSL_EXEC)
-
-$(JSL_EXEC): | deps/javascriptlint/.git
-	cd deps/javascriptlint && make install
-
-distclean::
-	if [[ -f deps/javascriptlint/Makefile ]]; then \
-		cd deps/javascriptlint && make clean; \
-	fi
-
-#
-# jsstyle
-#
-JSSTYLE_EXEC	?= deps/jsstyle/jsstyle
-JSSTYLE		?= $(JSSTYLE_EXEC)
-
-$(JSSTYLE_EXEC): | deps/jsstyle/.git
-
-#
-# restdown
-#
-RESTDOWN_EXEC	?= deps/restdown/bin/restdown
-RESTDOWN	?= python $(RESTDOWN_EXEC)
-$(RESTDOWN_EXEC): | deps/restdown/.git
-
-EXTRA_DOC_DEPS	?=
diff --git a/tools/mk/Makefile.node_modules.defs b/tools/mk/Makefile.node_modules.defs
deleted file mode 100644
index ec8cc8e..0000000
--- a/tools/mk/Makefile.node_modules.defs
+++ /dev/null
@@ -1,68 +0,0 @@
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2017, Joyent, Inc.
-#
-
-#
-# Makefile.node_modules.defs: Makefile for using NPM modules.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-#
-# This Makefile provides a target for building NPM modules from the dependency
-# information in the "package.json" file.  The "npm install" operation is
-# expensive and produces a complex (multi-file) result which is difficult for
-# make to use in dependency analysis.  As such, we use a "stamp" file to track
-# successful completion of module installation.
-#
-# This variable allows the consumer to influence the environment used to run
-# NPM commands.
-#
-#	NPM_ENV			This string should be set to a list of
-#				environment variables in the syntax used
-#				by bash; e.g.,
-#
-#					NPM_ENV =	TESTING=yes V=1
-#
-# Consumers should, for targets which depend on the installation of NPM
-# modules, depend on the stamp file using the $(STAMP_NODE_MODULES) variable,
-# e.g.:
-#
-#	.PHONY: all
-#	all: $(STAMP_NODE_MODULES)
-#
-# A phony target, "make stamp-node-modules", is also provided to allow the
-# engineer to manually perform NPM module installation without invoking other
-# targets.  Note that this target should _not_ be used as a dependency for
-# other targets in consuming Makefiles; using phony targets to represent
-# intermediate build stages can inhibit the ability of make to determine
-# when no additional actions are required.
-#
-
-TOP ?= $(error You must include Makefile.defs before this makefile)
-NPM ?= $(error You must include either Makefile.node.defs or \
-    Makefile.node_prebuilt.defs before this makefile)
-
-BUILD ?=		build
-
-#
-# Invoking "npm install" at the top-level will create a "node_modules"
-# directory into which NPM modules will be installed.
-#
-CLEAN_FILES +=		node_modules
-
-#
-# To avoid repeatedly reinstalling from NPM, we create a "stamp" file to track
-# successful runs of "npm install".  Note that MAKE_STAMPS_DIR is included
-# in CLEAN_FILES already.
-#
-STAMP_NODE_MODULES ?=	$(MAKE_STAMPS_DIR)/node-modules
diff --git a/tools/mk/Makefile.node_modules.targ b/tools/mk/Makefile.node_modules.targ
deleted file mode 100644
index 8091a9b..0000000
--- a/tools/mk/Makefile.node_modules.targ
+++ /dev/null
@@ -1,31 +0,0 @@
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2017, Joyent, Inc.
-#
-
-#
-# Makefile.node_modules.targ: See comments in Makefile.node_modules.defs.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-STAMP_NODE_MODULES ?= $(error You must include Makefile.node_modules.defs \
-    before this file)
-
-#
-# If the "package.json" file changes, we need to rebuild the contents of
-# the "node_modules" directory.
-#
-$(STAMP_NODE_MODULES): package.json $(STAMP_NODE_PREBUILT) | $(NPM_EXEC)
-	$(MAKE_STAMP_REMOVE)
-	rm -rf node_modules
-	$(NPM_ENV) $(NPM) install
-	$(MAKE_STAMP_CREATE)
diff --git a/tools/mk/Makefile.node_prebuilt.defs b/tools/mk/Makefile.node_prebuilt.defs
deleted file mode 100644
index e1306ca..0000000
--- a/tools/mk/Makefile.node_prebuilt.defs
+++ /dev/null
@@ -1,96 +0,0 @@
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2017, Joyent, Inc.
-#
-
-#
-# Makefile.node_prebuilt.defs: Makefile for obtaining a prebuilt Node toolchain.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-#
-# This Makefile aids in the download and operation of a Node toolchain when
-# building software written in the Node language.  It provides as much isolation
-# from the broader build host as possible.
-#
-# This Makefile is intended to be used along with "Makefile.node_prebuilt.targ".
-#
-# When using this Makefile, you MUST define these variables before the include
-# directive:
-#
-#	NODE_PREBUILT_VERSION	The version of the Node toolchain to download
-#				and use.  For example, "v4.8.5".
-#
-#	NODE_PREBUILT_TAG	The type of Node toolchain build to download.
-#				For example, "gz", "zone", or "zone64".
-#
-#	NODE_PREBUILT_IMAGE	The UUID of the image in which the Node
-#				toolchain is to have been built.
-#
-# This Makefile provides definitions for the following variables:
-#
-#	NODE_INSTALL		The location of the Node toolchain, relative
-#				to $(TOP).
-#
-
-ifndef TOP
-$(error You must include Makefile.defs before this makefile.)
-endif
-
-ifndef CACHE_DIR
-$(error You must include Makefile.defs before this makefile.)
-endif
-
-ifndef NODE_PREBUILT_VERSION
-$(error NODE_PREBUILT_VERSION must be set before including this makefile.)
-endif
-
-#
-# Use a trick to create a variable that contains a single space:
-#
-EMPTY :=
-SPACE :=			$(EMPTY) $(EMPTY)
-
-NODE_VERSION =			$(NODE_PREBUILT_VERSION)
-
-NODE_ID =			$(subst $(SPACE),-,$(NODE_PREBUILT_VERSION) \
-				$(NODE_PREBUILT_TAG) $(NODE_PREBUILT_IMAGE))
-
-#
-# The "tools/download_go" script will obtain a Node toolchain tar archive, which
-# we will store in the $(CACHE_DIR).  This directory is be removed entirely by
-# "make distclean".
-#
-NODE_TARBALL =			$(CACHE_DIR)/sdcnode-$(NODE_ID).tar.gz
-
-#
-# The downloaded Go toolchain will be extracted into a directory under
-# $(CACHE_DIR) by the $(STAMP_GO_TOOLCHAIN) target.  This directory becomes
-# the value of $GOROOT for toolchain invocations.
-#
-NODE_INSTALL =			$(CACHE_DIR)/sdcnode-$(NODE_ID)
-NODE_BIN_DIR =			$(NODE_INSTALL)/node/bin
-
-#
-# If the version of Go is changed in the Makefile, or interactively, we need
-# to make sure the new version is downloaded and installed.  As such, the
-# stamp name needs to include the version.
-#
-STAMP_NODE_PREBUILT =		$(MAKE_STAMPS_DIR)/sdcnode-$(NODE_ID)
-
-CLEAN_FILES +=			$(NODE_INSTALL)
-CLEAN_FILES +=			$(NODE_DEV_SYMLINK)
-
-NODE =				$(TOP)/$(NODE_BIN_DIR)/node
-NODE_WAF =			$(TOP)/$(NODE_BIN_DIR)/node-waf
-NPM =				PATH=$(TOP)/$(NODE_BIN_DIR):$(PATH) \
-				    $(NODE) $(TOP)/$(NODE_BIN_DIR)/npm
diff --git a/tools/mk/Makefile.node_prebuilt.targ b/tools/mk/Makefile.node_prebuilt.targ
deleted file mode 100644
index 72caf68..0000000
--- a/tools/mk/Makefile.node_prebuilt.targ
+++ /dev/null
@@ -1,48 +0,0 @@
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2017, Joyent, Inc.
-#
-
-#
-# Makefile.node_prebuilt.targ: Makefile for obtaining a prebuilt Node toolchain.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-#
-# For usage documentation, see the comments in "Makefile.node_prebuilt.defs".
-#
-
-ifndef NODE_TARBALL
-$(error You must include Makefile.node_prebuilt.defs first.)
-endif
-
-#
-# Download a prebuilt copy of the Node toolchain.
-#
-$(NODE_TARBALL):
-	rm -f $@
-	mkdir -p $(@D)
-	tools/download_sdcnode $(NODE_PREBUILT_IMAGE) \
-	    $(NODE_PREBUILT_VERSION)-$(NODE_PREBUILT_TAG) $(@D)
-
-#
-# Extract the Node toolchain.  This stamp includes the version number of the
-# Node toolchain, ensuring a new download and extraction if the version changes.
-#
-$(STAMP_NODE_PREBUILT): $(NODE_TARBALL)
-	$(MAKE_STAMP_REMOVE)
-	rm -rf $(NODE_INSTALL)
-	mkdir $(NODE_INSTALL)
-	cd $(NODE_INSTALL) && tar xfz $(TOP)/$(NODE_TARBALL)
-	if [[ -n "$(NODE_DEV_SYMLINK)" ]]; then rm -f $(NODE_DEV_SYMLINK); \
-	    ln -s $(NODE_INSTALL)/node $(NODE_DEV_SYMLINK); fi
-	$(MAKE_STAMP_CREATE)
diff --git a/tools/mk/Makefile.targ b/tools/mk/Makefile.targ
deleted file mode 100644
index 54edf0e..0000000
--- a/tools/mk/Makefile.targ
+++ /dev/null
@@ -1,334 +0,0 @@
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2017, Joyent, Inc.
-#
-
-#
-# Makefile.targ: common targets.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-# This Makefile defines several useful targets and rules. You can use it by
-# including it from a Makefile that specifies some of the variables below.
-#
-# Targets defined in this Makefile:
-#
-#	check	Checks JavaScript files for lint and style
-#		Checks bash scripts for syntax
-#		Checks SMF manifests for validity against the SMF DTD
-#
-#	clean	Removes built files
-#
-#	docs	Builds restdown documentation in docs/
-#
-#	prepush	Depends on "check" and "test"
-#
-#	test	Does nothing (you should override this)
-#
-#	xref	Generates cscope (source cross-reference index)
-#
-# For details on what these targets are supposed to do, see the Joyent
-# Engineering Guide.
-#
-# To make use of these targets, you'll need to set some of these variables. Any
-# variables left unset will simply not be used.
-#
-#	BASH_FILES	Bash scripts to check for syntax
-#			(paths relative to top-level Makefile)
-#
-#	CLEAN_FILES	Files to remove as part of the "clean" target.  Note
-#			that files generated by targets in this Makefile are
-#			automatically included in CLEAN_FILES.  These include
-#			restdown-generated HTML and JSON files.
-#
-#	DOC_FILES	Restdown (documentation source) files. These are
-#			assumed to be contained in "docs/", and must NOT
-#			contain the "docs/" prefix.
-#
-#	JSL_CONF_NODE	Specify JavaScriptLint configuration files
-#	JSL_CONF_WEB	(paths relative to top-level Makefile)
-#
-#			Node.js and Web configuration files are separate
-#			because you'll usually want different global variable
-#			configurations.  If no file is specified, none is given
-#			to jsl, which causes it to use a default configuration,
-#			which probably isn't what you want.
-#
-#	JSL_FILES_NODE	JavaScript files to check with Node config file.
-#	JSL_FILES_WEB	JavaScript files to check with Web config file.
-#
-#	JSON_FILES	JSON files to be validated
-#
-#	JSSTYLE_FILES	JavaScript files to be style-checked
-#
-# You can also override these variables:
-#
-#	BASH		Path to bash (default: "bash")
-#
-#	CSCOPE_DIRS	Directories to search for source files for the cscope
-#			index. (default: ".")
-#
-#	JSL		Path to JavaScriptLint (default: "jsl")
-#
-#	JSL_FLAGS_NODE	Additional flags to pass through to JSL
-#	JSL_FLAGS_WEB
-#	JSL_FLAGS
-#
-#	JSON		Path to json tool (default: "json")
-#
-#	JSSTYLE		Path to jsstyle (default: "jsstyle")
-#
-#	JSSTYLE_FLAGS	Additional flags to pass through to jsstyle
-#
-#	RESTDOWN_EXT	By default '.md' is required for DOC_FILES (see above).
-#			If you want to use, say, '.restdown' instead, then set
-#			'RESTDOWN_EXT=.restdown' in your Makefile.
-#
-
-#
-# Defaults for the various tools we use.
-#
-BASH		?= bash
-BASHSTYLE	?= tools/bashstyle
-CP		?= cp
-CSCOPE		?= cscope
-CSCOPE_DIRS	?= .
-JSL		?= jsl
-JSON		?= json
-JSSTYLE		?= jsstyle
-MKDIR		?= mkdir -p
-MV		?= mv
-RESTDOWN_FLAGS	?=
-RESTDOWN_EXT	?= .md
-RMTREE		?= rm -rf
-JSL_FLAGS  	?= --nologo --nosummary
-
-ifeq ($(shell uname -s),SunOS)
-	TAR	?= gtar
-else
-	TAR	?= tar
-endif
-
-
-#
-# Defaults for other fixed values.
-#
-BUILD		= build
-DISTCLEAN_FILES += $(BUILD)
-DOC_BUILD	= $(BUILD)/docs/public
-
-#
-# Configure JSL_FLAGS_{NODE,WEB} based on JSL_CONF_{NODE,WEB}.
-#
-ifneq ($(origin JSL_CONF_NODE), undefined)
-	JSL_FLAGS_NODE += --conf=$(JSL_CONF_NODE)
-endif
-
-ifneq ($(origin JSL_CONF_WEB), undefined)
-	JSL_FLAGS_WEB += --conf=$(JSL_CONF_WEB)
-endif
-
-#
-# Targets. For descriptions on what these are supposed to do, see the
-# Joyent Engineering Guide.
-#
-
-#
-# Instruct make to keep around temporary files. We have rules below that
-# automatically update git submodules as needed, but they employ a deps/*/.git
-# temporary file. Without this directive, make tries to remove these .git
-# directories after the build has completed.
-#
-.SECONDARY: $($(wildcard deps/*):%=%/.git)
-
-#
-# This rule enables other rules that use files from a git submodule to have
-# those files depend on deps/module/.git and have "make" automatically check
-# out the submodule as needed.
-#
-deps/%/.git:
-	git submodule update --init deps/$*
-
-#
-# These recipes make heavy use of dynamically-created phony targets. The parent
-# Makefile defines a list of input files like BASH_FILES. We then say that each
-# of these files depends on a fake target called filename.bashchk, and then we
-# define a pattern rule for those targets that runs bash in check-syntax-only
-# mode. This mechanism has the nice properties that if you specify zero files,
-# the rule becomes a noop (unlike a single rule to check all bash files, which
-# would invoke bash with zero files), and you can check individual files from
-# the command line with "make filename.bashchk".
-#
-.PHONY: check-bash
-check-bash: $(BASH_FILES:%=%.bashchk) $(BASH_FILES:%=%.bashstyle)
-
-%.bashchk: %
-	$(BASH) -n $^
-
-%.bashstyle: %
-	$(BASHSTYLE) $^
-
-.PHONY: check-json
-check-json: $(JSON_FILES:%=%.jsonchk)
-
-%.jsonchk: %
-	$(JSON) --validate -f $^
-
-#
-# The above approach can be slow when there are many files to check because it
-# requires that "make" invoke the check tool once for each file, rather than
-# passing in several files at once.  For the JavaScript check targets, we define
-# a variable for the target itself *only if* the list of input files is
-# non-empty.  This avoids invoking the tool if there are no files to check.
-#
-JSL_NODE_TARGET = $(if $(JSL_FILES_NODE), check-jsl-node)
-.PHONY: check-jsl-node
-check-jsl-node: $(JSL_EXEC)
-	$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_NODE) $(JSL_FILES_NODE)
-
-JSL_WEB_TARGET = $(if $(JSL_FILES_WEB), check-jsl-web)
-.PHONY: check-jsl-web
-check-jsl-web: $(JSL_EXEC)
-	$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_WEB) $(JSL_FILES_WEB)
-
-.PHONY: check-jsl
-check-jsl: $(JSL_NODE_TARGET) $(JSL_WEB_TARGET)
-
-JSSTYLE_TARGET = $(if $(JSSTYLE_FILES), check-jsstyle)
-.PHONY: check-jsstyle
-check-jsstyle:  $(JSSTYLE_EXEC)
-	$(JSSTYLE) $(JSSTYLE_FLAGS) $(JSSTYLE_FILES)
-
-.PHONY: check
-check:: check-jsl check-json $(JSSTYLE_TARGET) check-bash
-	@echo check ok
-
-.PHONY: clean
-clean::
-	-$(RMTREE) $(CLEAN_FILES)
-
-.PHONY: distclean
-distclean:: clean
-	-$(RMTREE) $(DISTCLEAN_FILES)
-
-CSCOPE_FILES = cscope.in.out cscope.out cscope.po.out
-CLEAN_FILES += $(CSCOPE_FILES)
-
-.PHONY: xref
-xref: cscope.files
-	$(CSCOPE) -bqR
-
-.PHONY: cscope.files
-cscope.files:
-	find $(CSCOPE_DIRS) -name '*.c' -o -name '*.h' -o -name '*.cc' \
-	    -o -name '*.js' -o -name '*.s' -o -name '*.cpp' > $@
-
-#
-# The "docs" target is complicated because we do several things here:
-#
-#    (1) Use restdown to build HTML and JSON files from each of DOC_FILES.
-#
-#    (2) Copy these files into $(DOC_BUILD) (build/docs/public), which
-#        functions as a complete copy of the documentation that could be
-#        mirrored or served over HTTP.
-#
-#    (3) Then copy any directories and media from docs/media into
-#        $(DOC_BUILD)/media. This allows projects to include their own media,
-#        including files that will override same-named files provided by
-#        restdown.
-#
-# Step (3) is the surprisingly complex part: in order to do this, we need to
-# identify the subdirectories in docs/media, recreate them in
-# $(DOC_BUILD)/media, then do the same with the files.
-#
-DOC_MEDIA_DIRS := $(shell find docs/media -type d 2>/dev/null | grep -v "^docs/media$$")
-DOC_MEDIA_DIRS := $(DOC_MEDIA_DIRS:docs/media/%=%)
-DOC_MEDIA_DIRS_BUILD := $(DOC_MEDIA_DIRS:%=$(DOC_BUILD)/media/%)
-
-DOC_MEDIA_FILES := $(shell find docs/media -type f 2>/dev/null)
-DOC_MEDIA_FILES := $(DOC_MEDIA_FILES:docs/media/%=%)
-DOC_MEDIA_FILES_BUILD := $(DOC_MEDIA_FILES:%=$(DOC_BUILD)/media/%)
-
-#
-# Like the other targets, "docs" just depends on the final files we want to
-# create in $(DOC_BUILD), leveraging other targets and recipes to define how
-# to get there.
-#
-.PHONY: docs
-docs::							\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.html)		\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.json)		\
-	$(DOC_MEDIA_FILES_BUILD)
-
-#
-# We keep the intermediate files so that the next build can see whether the
-# files in DOC_BUILD are up to date.
-#
-.PRECIOUS:					\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.html)		\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%json)
-
-#
-# We do clean those intermediate files, as well as all of DOC_BUILD.
-#
-CLEAN_FILES +=					\
-	$(DOC_BUILD)				\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.html)		\
-	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.json)
-
-#
-# Before installing the files, we must make sure the directories exist. The |
-# syntax tells make that the dependency need only exist, not be up to date.
-# Otherwise, it might try to rebuild spuriously because the directory itself
-# appears out of date.
-#
-$(DOC_MEDIA_FILES_BUILD): | $(DOC_MEDIA_DIRS_BUILD)
-
-$(DOC_BUILD)/%: docs/% | $(DOC_BUILD)
-	$(MKDIR) $(shell dirname $@)
-	$(CP) $< $@
-
-docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC) \
-    $(EXTRA_DOC_DEPS)
-	$(RESTDOWN) $(RESTDOWN_FLAGS) -m $(DOC_BUILD) $<
-
-$(DOC_BUILD):
-	$(MKDIR) $@
-
-$(DOC_MEDIA_DIRS_BUILD):
-	$(MKDIR) $@
-
-#
-# The default "test" target does nothing. This should usually be overridden by
-# the parent Makefile. It's included here so we can define "prepush" without
-# requiring the repo to define "test".
-#
-.PHONY: test
-test:
-
-.PHONY: prepush
-prepush: check test
-
-#
-# This rule automatically exposes every "stamp" file as a target that can be
-# invoked manually as "stamp-$STAMP_NAME".  For example, if a stamp has been
-# defined thus:
-#
-#	STAMP_EXPENSIVE_RESULT := $(MAKE_STAMPS_DIR)/expensive-result
-#
-# ... this can be invoked manually as "make stamp-expensive-result".  Note that
-# these phony targets are essentially just for interactive usage.  Targets
-# should be specified to depend on the macro containing the stamp file name.
-#
-# See also the comments in "Makefile.defs".
-#
-stamp-%: $(MAKE_STAMPS_DIR)/%
-	@:
-- 
2.21.0

