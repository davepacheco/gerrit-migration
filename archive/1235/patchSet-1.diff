commit c68cbcd54d6d2ee0e88c304329133e66cf02d241 (refs/changes/35/1235/1)
Author: Julien Gilli <julien.gilli@joyent.com>
Date:   2017-01-10T17:47:18-08:00 (2 years, 9 months ago)
    
    ZAPI_757 VMAPI should dump core when an uncaught error is thrown

diff --git a/lib/SaferJsonClient.js b/lib/SaferJsonClient.js
index 48da580..4631db0 100644
--- a/lib/SaferJsonClient.js
+++ b/lib/SaferJsonClient.js
@@ -95,9 +95,9 @@ SaferJsonClient.prototype.parse = function parse(req, callback) {
         var resErr = err;
 
         function finish() {
-            var body = Buffer.concat(chunks, len);
+            var bodyStr = Buffer.concat(chunks, len).toString('utf8');
             if (res.log.trace()) {
-                res.log.trace({body: body.toString(), len: len},
+                res.log.trace({body: bodyStr, len: len},
                     'body received');
             }
 
@@ -125,9 +125,9 @@ SaferJsonClient.prototype.parse = function parse(req, callback) {
             // Parse the body as JSON, if we can.
             // Note: This regex-based trim works on a buffer. `trim()` doesn't.
             var obj;
-            if (len && !/^\s*$/.test(body)) {  // Skip all-whitespace body.
+            if (len && !/^\s*$/.test(bodyStr)) {  // Skip all-whitespace body.
                 try {
-                    obj = JSON.parse(body);
+                    obj = JSON.parse(bodyStr);
                 } catch (jsonErr) {
                     res.log.trace(jsonErr, 'Invalid JSON in response');
                     if (!resErr) {
@@ -138,15 +138,19 @@ SaferJsonClient.prototype.parse = function parse(req, callback) {
                 }
             }
 
-            // Special error handling.
-            if (resErr) {
-                resErr.message = body.toString('utf8');
+            // If the body sent with the error represents an empty body, don't
+            // use it as the error mesage. Otherwise, it can be useful to
+            // provide clearer error messages if there's no specific error
+            // message.
+            if (resErr && bodyStr !== '{}') {
+                resErr.message = bodyStr;
             }
             if (res && res.statusCode >= 400) {
                 // Upcast error to a RestError (if we can)
                 // Be nice and handle errors like
                 // { error: { code: '', message: '' } }
                 // in addition to { code: '', message: '' }.
+
                 if (obj && (obj.code || (obj.error && obj.error.code))) {
                     var _c = obj.code ||
                         (obj.error ? obj.error.code : '') ||
@@ -167,14 +171,14 @@ SaferJsonClient.prototype.parse = function parse(req, callback) {
                     }
                 } else if (!resErr) {
                     resErr = codeToHttpError(res.statusCode,
-                        obj.message || '', body);
+                        obj.message || '', bodyStr);
                 }
             }
             if (resErr) {
                 resErr.body = obj;
             }
 
-            callback(resErr, req, res, obj, body);
+            callback(resErr, req, res, obj, bodyStr);
         }
 
 
diff --git a/lib/cli.js b/lib/cli.js
index 7373186..9bdde50 100644
--- a/lib/cli.js
+++ b/lib/cli.js
@@ -692,12 +692,13 @@ function main(argv) {
     cli.main(argv, function (err) {
         var exitStatus = (err ? err.exitStatus || 1 : 0);
         var showErr = (cli.showErr !== undefined ? cli.showErr : true);
+        var errHelp;
 
         if (err && showErr) {
             var code = (err.body ? err.body.code : err.code) || err.restCode;
             if (code === 'NoCommand') {
                 /* jsl:pass */
-            } else if (err.message !== undefined) {
+            } else if (err.message !== undefined && err.message !== '') {
                 /*
                  * If the err has `body.errors`, as some Triton/SDC APIs do per
                  *      // JSSTYLED
@@ -719,10 +720,22 @@ function main(argv) {
                     (code ? format(' (%s)', code) : ''),
                     (cli.showErrStack ? err.stack : err.message),
                     bodyErrors);
-                var errHelp = cmdln.errHelpFromErr(err);
-                if (errHelp) {
-                    console.error(errHelp);
-                }
+            } else if (err.name === 'InternalServerError') {
+                /*
+                 * Internal server error, we want to provide a useful error
+                 * message without exposing internals.
+                 */
+                console.error('%s: internal error. Please try again later, ' +
+                    'and contact support in case the error persists.',
+                    cmdln.nameFromErr(err));
+            } else {
+                console.error('%s: error: %s', cmdln.nameFromErr(err),
+                    err.name);
+            }
+
+            errHelp = cmdln.errHelpFromErr(err);
+            if (errHelp) {
+                console.error(errHelp);
             }
         }
 
