commit 524e07aabc9e93e908327d87bda471fdd6698600 (refs/changes/33/2133/2)
Author: Josh Wilsdon <jwilsdon@joyent.com>
Date:   2017-06-22T17:12:21-07:00 (2 years, 4 months ago)
    
    DOCKER-1023 local volumes input parameter is not properly validated

diff --git a/lib/validate.js b/lib/validate.js
index 396c76b..33b3b9a 100644
--- a/lib/validate.js
+++ b/lib/validate.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -413,6 +413,8 @@ function assertString(arg, name) {
 function validateCreateContainer(req, res, next) {
     var config = req.app.config;
     var container = req.body;
+    var volumeNames = [];
+
 
     try {
         // -- Required --
@@ -446,6 +448,21 @@ function validateCreateContainer(req, res, next) {
                 'HostConfig.NetworkMode');
         }
 
+        if (container.Volumes) {
+            volumeNames = Object.keys(container.Volumes);
+
+            // Per DOCKER-1023, require volumes to be absolute paths and have at
+            // least one non-'/', non-'\0' character after the initial '/'
+            volumeNames.forEach(function checkVolumeName(vol) {
+                assert.ok(vol.length > 0 && vol[0] === '/',
+                    'Invalid volume name "' + vol + '" must start with "/"');
+                assert.ok(vol.indexOf('\0') === -1, 'Invalid volume name: '
+                    + 'cannot contain \\0');
+                assert.ok(vol.search(/[^\/]/) !== -1, 'Invalid volume name: '
+                    + 'must contain at least one non-/ character');
+            });
+        }
+
         // ensures mutually-compatible networking params.
         assertNetworkingParams(container.HostConfig);
 
diff --git a/test/integration/cli-local-volumes.test.js b/test/integration/cli-local-volumes.test.js
index 7c43f22..f12414a 100644
--- a/test/integration/cli-local-volumes.test.js
+++ b/test/integration/cli-local-volumes.test.js
@@ -55,6 +55,45 @@ test('docker local volumes', function (tt) {
     var mountingContainerName =
         common.makeContainerName('local-volume-test-mounting-container');
 
+    tt.test('creating container with non-absolute mount should fail',
+        function (t) {
+            cli.create(t, {
+                args: '--name ' + containerWithLocalVolName + '0 -v data '
+                    + 'nginx:latest /bin/sh',
+                expectedErr: 'Error response from daemon: Invalid volume name '
+                    + '"data" must start with "/"'
+            }, function onContainerCreate(err, output) {
+                t.ok(err, 'expected error creating container');
+                t.end();
+            });
+    });
+
+    tt.test('creating container with volume starting with \':\' should fail',
+        function (t) {
+            cli.create(t, {
+                args: '--name ' + containerWithLocalVolName + '0 -v :/mnt '
+                    + 'nginx:latest /bin/sh',
+                expectedErr: 'Error response from daemon: Invalid volume name '
+                    + '":/mnt" must start with "/"'
+            }, function onContainerCreate(err, output) {
+                t.ok(err, 'expected error creating container');
+                t.end();
+            });
+    });
+
+    tt.test('creating container with volume target \'/\' should fail',
+        function (t) {
+            cli.create(t, {
+                args: '--name ' + containerWithLocalVolName + '0 -v / '
+                    + 'nginx:latest /bin/sh',
+                expectedErr: 'Error response from daemon: Invalid volume name: '
+                    + 'must contain at least one non-/ character'
+            }, function onContainerCreate(err, output) {
+                t.ok(err, 'expected error creating container');
+                t.end();
+            });
+    });
+
     tt.test('creating container with local volume should succeed',
         function (t) {
             cli.run(t, {
@@ -104,4 +143,4 @@ test('docker local volumes', function (tt) {
                     t.end();
                 });
         });
-});
\ No newline at end of file
+});
