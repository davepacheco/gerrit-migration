commit 3998c72a5970c6f2f860e1e1a42046df6d52ef7a (refs/changes/29/2829/1)
Author: Richard Bradley <richard.bradley@joyent.com>
Date:   2017-10-20T09:16:53+00:00 (2 years ago)
    
    MANATEE-359 manatee reports primary to sync replication as async

diff --git a/lib/manatee-peer.js b/lib/manatee-peer.js
index c47a007..b6d242f 100644
--- a/lib/manatee-peer.js
+++ b/lib/manatee-peer.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -20,7 +20,7 @@ var mod_vasync = require('vasync');
 var VError = require('verror');
 
 var mod_validation = require('./validation');
-var mod_xlog = require('./xlog');
+var mod_lsn = require('pg-lsn');
 var EventEmitter = mod_events.EventEmitter;
 
 /* Public interface */
@@ -828,7 +828,7 @@ ManateePeer.prototype.startTakeoverWithPeer = function (reason, minwal, roles)
 		var error;
 
 		if (minwal !== undefined &&
-		    mod_xlog.xlogCompare(wal, minwal) < 0) {
+		    mod_lsn.xlogCompare(wal, minwal) < 0) {
 			var err = new VError('would attempt takeover, but ' +
 			    'not caught up to primary yet (want "%s", ' +
 			    'found "%s"', minwal, wal);
@@ -941,7 +941,7 @@ ManateePeer.prototype.startInitialSetup = function ()
 	this.mp_updating_state = {
 	    'generation': 1,
 	    'primary': this.mp_ident,
-	    'initWal': mod_xlog.initialXlog,
+	    'initWal': mod_lsn.initialXlog,
 	    'deposed': []
 	};
 
diff --git a/lib/sim-pg.js b/lib/sim-pg.js
index 0253149..92c392c 100644
--- a/lib/sim-pg.js
+++ b/lib/sim-pg.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -18,7 +18,7 @@ var mod_jsprim = require('jsprim');
 var mod_util = require('util');
 var EventEmitter = mod_events.EventEmitter;
 var VError = require('verror');
-var mod_xlog = require('./xlog');
+var mod_lsn = require('pg-lsn');
 
 /* Public interface */
 module.exports = createSimPgState;
@@ -75,7 +75,7 @@ function SimPgClient(pgstate, ident, log)
 	this.spg_config_next = null;
 	this.spg_online = false;
 	this.spg_transitioning = false;
-	this.spg_xlog = mod_xlog.initialXlog;
+	this.spg_xlog = mod_lsn.initialXlog;
 	this.spg_xlog_waiting = null;
 
 	EventEmitter.call(this);
@@ -266,10 +266,10 @@ SimPgClient.prototype.updateXlog = function (zkstate)
 	 * immediately and bump the transaction log position.
 	 */
 	if (role == 'primary') {
-		mod_assertplus.ok(mod_xlog.xlogCompare(
+		mod_assertplus.ok(mod_lsn.xlogCompare(
 		    genxlog, this.spg_xlog) <= 0,
 		    'primary is behind the generation\'s initial xlog');
-		this.spg_xlog = mod_xlog.xlogIncrementSim(this.spg_xlog, 10);
+		this.spg_xlog = mod_lsn.xlogIncrementSim(this.spg_xlog, 10);
 		return;
 	}
 
@@ -278,7 +278,7 @@ SimPgClient.prototype.updateXlog = function (zkstate)
 	 * the wal position to catch up to the primary's.
 	 */
 	mod_assertplus.equal(role, 'sync');
-	mod_assertplus.ok(mod_xlog.xlogCompare(genxlog, this.spg_xlog) >= 0,
+	mod_assertplus.ok(mod_lsn.xlogCompare(genxlog, this.spg_xlog) >= 0,
 	    'sync is ahead of the primary!');
 	this.spg_xlog_waiting = genxlog;
 };
@@ -307,7 +307,7 @@ SimPgClient.prototype.catchUp = function ()
 	 * Act like not only did we catch up, but we received additional
 	 * writes from the primary.
 	 */
-	this.spg_xlog = mod_xlog.xlogIncrementSim(this.spg_xlog_waiting, 10);
+	this.spg_xlog = mod_lsn.xlogIncrementSim(this.spg_xlog_waiting, 10);
 	this.spg_xlog_waiting = null;
 	return (null);
 };
diff --git a/lib/sim.js b/lib/sim.js
index b8f0c7d..b8d9586 100644
--- a/lib/sim.js
+++ b/lib/sim.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -21,7 +21,7 @@ var mod_repl = require('repl');
 var mod_util = require('util');
 
 var mod_validation = require('./validation');
-var mod_xlog = require('./xlog');
+var mod_lsn = require('pg-lsn');
 
 var createBunyanPrettyPrinter = require('./stream-bunyan-prettyprint');
 var createManateePeer = require('./manatee-peer');
@@ -442,7 +442,7 @@ Simulator.prototype.cmdBootstrap = function (primarywanted, syncwanted)
 	    'sync': peers[sync],
 	    'async': asyncs,
 	    'deposed': [],
-	    'initWal': mod_xlog.initialXlog
+	    'initWal': mod_lsn.initialXlog
 	};
 
 	this.ms_zk.setClusterState(newclusterstate);
@@ -478,7 +478,7 @@ Simulator.prototype.cmdDepose = function (force)
 	    'primary': zkstate.sync,
 	    'sync': zkstate.async[0],
 	    'async': zkstate.async.slice(1),
-	    'initWal': mod_xlog.xlogIncrementSim(zkstate.initWal, 10)
+	    'initWal': mod_lsn.xlogIncrementSim(zkstate.initWal, 10)
 	};
 
 	this.ms_zk.setClusterState(newstate);
diff --git a/lib/validation.js b/lib/validation.js
index bbf79eb..e73b015 100644
--- a/lib/validation.js
+++ b/lib/validation.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -15,7 +15,7 @@
 var mod_jsprim = require('jsprim');
 var VError = require('verror');
 
-var mod_xlog = require('./xlog');
+var mod_lsn = require('pg-lsn');
 var schemas = require('./schemas');
 
 
@@ -60,7 +60,7 @@ function validateZkState(clusterState)
 		    'one-node-write mode'));
 	}
 
-	error = mod_xlog.xlogValidate(clusterState.initWal);
+	error = mod_lsn.xlogValidate(clusterState.initWal);
 	return (error instanceof Error ? error : copy);
 }
 
diff --git a/lib/xlog.js b/lib/xlog.js
deleted file mode 100644
index f56ce80..0000000
--- a/lib/xlog.js
+++ /dev/null
@@ -1,111 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2014, Joyent, Inc.
- */
-
-/*
- * xlog.js: constants and functions for working with postgres xlog positions.
- * This file makes a number of assumptions about the format of xlog positions.
- * It's not totally clear that this is a committed Postgres interface, but it
- * seems to be true.
- *
- * We assume that postgres xlog positions are represented as strings of the
- * form:
- *
- *     filepart/offset		e.g., "0/17BB660"
- *
- * where both "filepart" and "offset" are hexadecimal numbers.  xlog position
- * F1/O1 is at least as new as F2/O2 if (F1 > F2) or (F1 == F2 and O1 >= O2).
- * We try to avoid assuming that they're zero-padded (i.e., that a simple string
- * comparison might do the right thing).  We also don't make any assumptions
- * about the size of each file, which means we can't compute the actual
- * difference between two positions.
- */
-
-var sprintf = require('extsprintf').sprintf;
-var VError = require('verror');
-
-exports.initialXlog = xlogMakePosition(0, 0);
-exports.xlogIncrementSim = xlogIncrementSim;
-exports.xlogCompare = xlogCompare;
-exports.xlogValidate = xlogValidate;
-
-/*
- * Given a numeric file part and offset, construct the xlog position.
- */
-function xlogMakePosition(filepart, offset)
-{
-	return (sprintf('%x/%08x', filepart, offset));
-}
-
-/*
- * Given an xlog position, increment it by the given number.  This is used for
- * simulation only, and it's illegal for the xlog to be invalid.
- */
-function xlogIncrementSim(xlog, increment)
-{
-	var parts = xlogParse(xlog);
-	if (parts instanceof Error)
-		throw (parts);
-
-	return (xlogMakePosition(parts[0], parts[1] + increment));
-}
-
-/*
- * Compare two xlog positions, returning -1 if xlog1 < xlog2, 0 if xlog1 ==
- * xlog2, and 1 if xlog1 > xlog2.  It's illegal to attempt to compare malformed
- * xlog positions.
- */
-function xlogCompare(xlog1, xlog2)
-{
-	var p1, p2;
-
-	p1 = xlogParse(xlog1);
-	p2 = xlogParse(xlog2);
-	if (p1 instanceof Error || p2 instanceof Error)
-		throw (new VError('cannot compare "%s" to "%s"', xlog1, xlog2));
-
-	return ((p1[0] > p2[0] || (p1[0] == p2[0] && p1[1] > p2[1])) ? 1 :
-	    (p1[0] < p2[0] || (p1[0] == p2[0] && p1[1] < p2[1])) ? -1 : 0);
-}
-
-/*
- * Given a string xlog position as emitted by postgres, return an array of two
- * integers representing the two components of the xlog position.  This is an
- * internal representation and should not be exposed outside this file.  Returns
- * an error if the position cannot be parsed, though some callers consider that
- * an unrecoverable error.
- */
-function xlogParse(xlog)
-{
-	var parts = xlog.split('/');
-
-	if (parts.length != 2)
-		return (new VError('malformed xlog position: "%s"', xlog));
-
-	parts[0] = parseInt(parts[0], 16);
-	if (isNaN(parts[0]))
-		return (new VError('expected hex integer in first part ' +
-		    'of xlog position: "%s"', xlog));
-
-	parts[1] = parseInt(parts[1], 16);
-	if (isNaN(parts[1]))
-		return (new VError('expected hex integer in second part ' +
-		    'of xlog position: "%s"', xlog));
-
-	return (parts);
-}
-
-/*
- * Public version of xlogParse that just validates that the xlog is valid.
- */
-function xlogValidate(xlog)
-{
-	var error = xlogParse(xlog);
-	return (error instanceof Error ? error : null);
-}
diff --git a/package.json b/package.json
index 6dbea7e..f83eafe 100644
--- a/package.json
+++ b/package.json
@@ -10,6 +10,7 @@
 		"bunyan": "0.20.0",
 		"extsprintf": "1.2.0",
 		"jsprim": "0.6.1",
+		"pg-lsn": "1.0.0",
 		"vasync": "1.6.1",
 		"verror": "1.4.0"
 	}
