From 2469a7a8f693e68a547bc99d76b3b52c3d258d7a Mon Sep 17 00:00:00 2001
From: Rui Loura <rui@joyent.com>
Date: Thu, 26 Apr 2018 14:49:43 +0000
Subject: [PATCH] TRITON-607 cn-agent should be aware of alternate admin
 nictags

---
 .gitignore                                   |  1 +
 README.md                                    |  2 +-
 bin/cn-agent.js                              | 42 ++++--------
 lib/backends/dummy/index.js                  | 40 +++++++++++
 lib/backends/dummy/tools/run-servers.js      |  1 +
 lib/backends/smartos/index.js                | 31 ++++-----
 lib/backends/smartos/smartdc-config.js       | 71 +++++++++++++++-----
 lib/backends/smartos/tasks/docker_exec.js    | 69 +++++++++----------
 lib/backends/smartos/tasks/machine_create.js | 25 +------
 test/http-task.test.js                       | 30 +--------
 10 files changed, 161 insertions(+), 151 deletions(-)

diff --git a/.gitignore b/.gitignore
index 654742a..822ac37 100644
--- a/.gitignore
+++ b/.gitignore
@@ -14,3 +14,4 @@ cscope.out
 *.vim
 cn-agent-*.tgz
 cn-agent-*.manifest
+.*.swp
diff --git a/README.md b/README.md
index f117f1c..2ea9d9f 100644
--- a/README.md
+++ b/README.md
@@ -20,7 +20,7 @@ compute node. It acts as an externally visible interface to subsystems within
 the server. 
 
 It is responsible for executing "tasks", scripts which break down some
-unit of work into a number of steps to be completed.  This may be may range
+unit of work into a number of steps to be completed.  This may range
 from creating a virtual machine to something as simple as creating or listing
 ZFS datasets.
 
diff --git a/bin/cn-agent.js b/bin/cn-agent.js
index 2c62e20..d0021aa 100755
--- a/bin/cn-agent.js
+++ b/bin/cn-agent.js
@@ -65,6 +65,7 @@ function main() {
 
     var agentConfig;
     var backend;
+    var admin_ip;
 
     log = bunyan.createLogger({
         level: process.env.CN_AGENT_LOG_LEVEL,
@@ -126,22 +127,28 @@ function main() {
                     sdc_config = config;
                     cb();
                 });
+            }, function getAdminIp(_, cb) {
+                backend.getFirstAdminIp({}, sysinfo, function (err, ip) {
+                    if (err) {
+                        cb(new verror.VError(err, 'fetching admin IP'));
+                        return;
+                    }
+                    admin_ip = ip;
+                    cb();
+                });
             }
         ]
     }, function onPipelineComplete(err) {
         var agentServer;
         var app;
-        var ip;
         var options;
 
         if (err) {
             throw err;
         }
 
-        ip = firstAdminIp(sysinfo);
-
         agentServer = new AgentHttpServer({
-            bindip: ip,
+            bindip: admin_ip,
             log: log,
             uuid: sysinfo.UUID
         });
@@ -170,31 +177,6 @@ function main() {
         }
 
         app.start();
-    });
-}
-
 
-function firstAdminIp(sysinfo) {
-    var iface;
-    var interfaces;
-    var ip;
-    var isAdmin;
-    var nic;
-
-    interfaces = sysinfo['Network Interfaces'];
-
-    for (iface in interfaces) {
-        if (!interfaces.hasOwnProperty(iface)) {
-            continue;
-        }
-
-        nic = interfaces[iface]['NIC Names'];
-        isAdmin = nic.indexOf('admin') !== -1;
-        if (isAdmin) {
-            ip = interfaces[iface].ip4addr;
-            return ip;
-        }
-    }
-
-    throw new Error('No NICs with name "admin" detected.');
+    });
 }
diff --git a/lib/backends/dummy/index.js b/lib/backends/dummy/index.js
index 0276ff9..5601081 100644
--- a/lib/backends/dummy/index.js
+++ b/lib/backends/dummy/index.js
@@ -10,6 +10,7 @@
 
 var execFile = require('child_process').execFile;
 var fs = require('fs');
+var fmt = require('util').format;
 var os = require('os');
 var path = require('path');
 
@@ -137,6 +138,45 @@ DummyBackend.prototype.getSysinfo = function getSysinfo(opts, callback) {
     });
 };
 
+function _getAdminIpSysinfo(sysinfo_object, callback) {
+    var admin_tag = 'admin';
+    var interfaces = sysinfo_object['Network Interfaces'];
+    var adminifaces;
+
+    if (sysinfo_object['Admin NIC Tag']) {
+        admin_tag = sysinfo_object['Admin NIC Tag'];
+    }
+
+    adminifaces = Object.keys(interfaces).filter(function (iface) {
+        return interfaces[iface]['NIC Names'].indexOf(admin_tag) !== -1;
+    });
+
+    if (adminifaces && adminifaces.length) {
+        callback(null, interfaces[adminifaces[0]]['ip4addr']);
+        return;
+    }
+
+    callback(new Error(fmt('No admin NIC found with tag "%s" in config.json ' +
+        'or compute node sysinfo', admin_tag)));
+}
+
+DummyBackend.prototype.getFirstAdminIp = function getFirstAdminIp(opts, sysinfo,
+    callback) {
+
+    if (!callback) {
+        callback = sysinfo;
+        this.getSysinfo(opts, function (err, sysinfoObj) {
+            if (err) {
+                callback(err);
+                return;
+            }
+
+            _getAdminIpSysinfo(sysinfoObj, callback);
+        });
+        return;
+    }
+    _getAdminIpSysinfo(sysinfo, callback);
+};
 
 DummyBackend.prototype.getMemoryInfo = function getMemoryInfo(opts, callback) {
     // TODO: implement something here
diff --git a/lib/backends/dummy/tools/run-servers.js b/lib/backends/dummy/tools/run-servers.js
index b90fdb6..7b8639a 100644
--- a/lib/backends/dummy/tools/run-servers.js
+++ b/lib/backends/dummy/tools/run-servers.js
@@ -46,6 +46,7 @@ function loadSysinfo(ctx, callback) {
     });
 }
 
+// TODO: should use common method in backends to get rackaware admin IP.
 function findZoneAdminIp(ctx, callback) {
     common.mdataGet('sdc:nics', function _onMdata(err, nicsData) {
         var idx;
diff --git a/lib/backends/smartos/index.js b/lib/backends/smartos/index.js
index 770b688..b5f27c1 100644
--- a/lib/backends/smartos/index.js
+++ b/lib/backends/smartos/index.js
@@ -633,25 +633,22 @@ SmartosBackend.prototype.getMemoryInfo = function getMemoryInfo(_, callback) {
 };
 
 
+/*
+ * We rely on the presence of this file to detect if we are intending to run
+ * the agent, which is why no_rabbit is false by default.
+ */
 SmartosBackend.prototype.getAgentConfig = function getAgentConfig(_, callback) {
     var self = this;
 
-    // The plan is to migrate to using this file as the entire configuration
-    // needed for the cn-agent. For now we rely on the presence of this file
-    // to detect if we are intending to run the agent, which is why no_rabbit
-    // is false by default
-    var agentConfig;
-    var agentConfigPath = '/opt/smartdc/agents/etc/cn-agent.config.json';
-
-    try {
-        agentConfig = JSON.parse(fs.readFileSync(agentConfigPath, 'utf-8'));
-    } catch (e) {
-        self.log.error(e, 'Could not parse agent config: "%s", '
-            + 'setting no_rabbit flag to false', e.message);
-        agentConfig = { no_rabbit: false };
-    }
+    smartdc_config.agentConfig(function (err, conf) {
+        if (err) {
+            self.log.error('Could not parse agent config: "%s", '
+                + 'setting no_rabbit flag to false', err);
+            conf = { no_rabbit: false };
+        }
 
-    callback(null, agentConfig);
+        callback(null, conf);
+    });
 };
 
 
@@ -662,7 +659,11 @@ SmartosBackend.prototype.getSdcConfig = function getSdcConfig(_, callback) {
 SmartosBackend.prototype.getSysinfo = function getSysinfo(_, callback) {
     return smartdc_config.sysinfo(callback);
 };
+SmartosBackend.prototype.getFirstAdminIp = function getFirstAdminIp(_, sysinfo,
+    callback) {
 
+    return smartdc_config.getFirstAdminIp(sysinfo, callback);
+};
 
 SmartosBackend.prototype.getBootTime = function getBootTime(_, callback) {
     // sysinfo will have the 'Boot Time' cached, so we use that
diff --git a/lib/backends/smartos/smartdc-config.js b/lib/backends/smartos/smartdc-config.js
index 9966b51..f7541db 100644
--- a/lib/backends/smartos/smartdc-config.js
+++ b/lib/backends/smartos/smartdc-config.js
@@ -8,8 +8,26 @@
  * Copyright (c) 2018, Joyent, Inc.
  */
 
+var fs = require('fs');
+var VError = require('verror').VError;
 var execFile = require('child_process').execFile;
 
+
+function agentConfig(callback) {
+    var config;
+    var agentConfigPath = '/opt/smartdc/agents/etc/cn-agent.config.json';
+    var err = null;
+
+    try {
+        config = JSON.parse(fs.readFileSync(agentConfigPath, 'utf-8'));
+    } catch (e) {
+        err = new VError(e, 'Could not parse agent config');
+    }
+
+    callback(err, config);
+}
+
+
 function execFileParseJSON(bin, args, callback) {
     execFile(bin, args, function (error, stdout, stderr) {
         if (error) {
@@ -43,29 +61,50 @@ function sdcConfig(callback) {
     });
 }
 
-function getFirstAdminIp(callback) {
-    sysinfo(function (err, sysinfoObj) {
-        if (err) {
-            callback(err);
-            return;
-        }
+function _getAdminIpSysinfo(sysinfo_object, callback) {
+    var admin_tag = 'admin';
+    var interfaces = sysinfo_object['Network Interfaces'];
+    var adminifaces;
 
-        var interfaces = sysinfoObj['Network Interfaces'];
-
-        var adminifaces = Object.keys(interfaces).filter(function (iface) {
-            return interfaces[iface]['NIC Names'].indexOf('admin') !== -1;
-        });
+    if (sysinfo_object['Admin NIC Tag']) {
+        admin_tag = sysinfo_object['Admin NIC Tag'];
+    }
 
-        if (adminifaces && adminifaces.length) {
-            callback(null, interfaces[adminifaces[0]]['ip4addr']);
-        } else {
-            callback(new Error('No admin NIC found in compute node sysinfo'));
-        }
+    adminifaces = Object.keys(interfaces).filter(function (iface) {
+        return interfaces[iface]['NIC Names'].indexOf(admin_tag) !== -1;
     });
+
+    if (adminifaces && adminifaces.length !== 0) {
+        callback(null, interfaces[adminifaces[0]]['ip4addr']);
+        return;
+    }
+
+    callback(new VError('No admin NIC found with tag "%s" in compute node ' +
+        'sysinfo', admin_tag));
+}
+
+/*
+ * Also, allow callers to pass in their own sysinfo object.
+ */
+function getFirstAdminIp(sysinfo_object, callback) {
+    if (!callback) {
+        callback = sysinfo_object;
+        sysinfo(function (err, sysinfoObj) {
+            if (err) {
+                callback(err);
+                return;
+            }
+
+            _getAdminIpSysinfo(sysinfoObj, callback);
+        });
+        return;
+    }
+    _getAdminIpSysinfo(sysinfo_object, callback);
 }
 
 module.exports = {
     getFirstAdminIp: getFirstAdminIp,
     sdcConfig: sdcConfig,
+    agentConfig: agentConfig,
     sysinfo: sysinfo
 };
diff --git a/lib/backends/smartos/tasks/docker_exec.js b/lib/backends/smartos/tasks/docker_exec.js
index 6cb26d7..806b584 100644
--- a/lib/backends/smartos/tasks/docker_exec.js
+++ b/lib/backends/smartos/tasks/docker_exec.js
@@ -10,6 +10,7 @@
 
 var Task = require('../../../task_agent/task');
 var sysinfo = require('../smartdc-config').sysinfo;
+var getFirstAdminIp = require('../smartdc-config').getFirstAdminIp;
 var vmadm = require('vmadm');
 var async = require('async');
 var fork = require('child_process').fork;
@@ -154,35 +155,39 @@ function start(callback) {
                 return;
             }
 
-            var adminIp = firstAdminIp(sysinfoObj);
+            /*
+             * smartdc-config.getFirstAdminIp() can optionally take a sysinfo
+             * object as the first arg.
+             */
+            getFirstAdminIp(sysinfoObj, function (aip_err, adminIp) {
+                if (aip_err) {
+                    self.fatal({
+                        error: 'No admin NIC found in compute node sysinfo'
+                    });
+                    return;
+                }
 
-            if (!adminIp) {
-                self.fatal({
-                    error: 'No admin NIC found in compute node sysinfo'
+                dockerExec.send({
+                    req_id: self.req.req_id,
+                    brand: brand,
+                    command: command,
+                    platform: sysinfoObj['Live Image'],
+                    uuid: uuid
                 });
-                return;
-            }
 
-            dockerExec.send({
-                req_id: self.req.req_id,
-                brand: brand,
-                command: command,
-                platform: sysinfoObj['Live Image'],
-                uuid: uuid
+                dockerExec.on('message', once(function (message) {
+                    if (command.Detach) {
+                        self.finish();
+                        return;
+                    } else {
+                        self.finish({
+                            host: adminIp,
+                            port: message.port
+                        });
+                        return;
+                    }
+                }));
             });
-
-            dockerExec.on('message', once(function (message) {
-                if (command.Detach) {
-                    self.finish();
-                    return;
-                } else {
-                    self.finish({
-                        host: adminIp,
-                        port: message.port
-                    });
-                    return;
-                }
-            }));
         });
     }
 
@@ -209,17 +214,3 @@ function start(callback) {
         execWhenRunning(uuid, command, self.log, _spawnExec);
     }
 }
-
-function firstAdminIp(sysinfoObj) {
-    var interfaces = sysinfoObj['Network Interfaces'];
-
-    var adminifaces = Object.keys(interfaces).filter(function (iface) {
-        return interfaces[iface]['NIC Names'].indexOf('admin') !== -1;
-    });
-
-    if (adminifaces && adminifaces.length) {
-        return interfaces[adminifaces[0]]['ip4addr'];
-    } else {
-        return null;
-    }
-}
diff --git a/lib/backends/smartos/tasks/machine_create.js b/lib/backends/smartos/tasks/machine_create.js
index 3621a91..4542765 100644
--- a/lib/backends/smartos/tasks/machine_create.js
+++ b/lib/backends/smartos/tasks/machine_create.js
@@ -50,13 +50,13 @@ function start(callback) {
             });
         },
         function (cb) {
-            smartdcconfig.sysinfo(function (err, sysinfo) {
+            smartdcconfig.getFirstAdminIp(function onGetIp(err, admin_ip) {
                 if (err) {
                     cb(err);
                     return;
                 }
 
-                self.adminip = firstAdminIp(sysinfo);
+                self.adminip = admin_ip;
                 cb();
             });
         },
@@ -316,27 +316,6 @@ function create_machine(callback) {
     });
 }
 
-function firstAdminIp(sysinfo) {
-    var interfaces;
-
-    interfaces = sysinfo['Network Interfaces'];
-
-    for (var iface in interfaces) {
-        if (!interfaces.hasOwnProperty(iface)) {
-            continue;
-        }
-
-        var nic = interfaces[iface]['NIC Names'];
-        var isAdmin = nic.indexOf('admin') !== -1;
-        if (isAdmin) {
-            var ip = interfaces[iface].ip4addr;
-            return ip;
-        }
-    }
-
-    throw new Error('No NICs with name "admin" detected.');
-}
-
 MachineCreateTask.setStart(start);
 
 MachineCreateTask.createSteps({
diff --git a/test/http-task.test.js b/test/http-task.test.js
index df92fd0..ef014fa 100644
--- a/test/http-task.test.js
+++ b/test/http-task.test.js
@@ -18,44 +18,20 @@ var smartdcconfig = require('../lib/backends/smartos/smartdc-config');
 var PROVISIONER_PORT = 5309;
 var client;
 
-function firstAdminIp(sysinfo) {
-    var interfaces;
-
-    interfaces = sysinfo['Network Interfaces'];
-
-    for (var iface in interfaces) {
-        if (!interfaces.hasOwnProperty(iface)) {
-            continue;
-        }
-
-        var nic = interfaces[iface]['NIC Names'];
-        var isAdmin = nic.indexOf('admin') !== -1;
-        if (isAdmin) {
-            var ip = interfaces[iface].ip4addr;
-            return ip;
-        }
-    }
-
-    throw new Error('No NICs with name "admin" detected.');
-}
-
 function setup(cb) {
-    smartdcconfig.sysinfo(function (err, sysinfo) {
-        var adminip;
-
+    smartdcconfig.getFirstAdminIp(function (err, adminIp) {
         if (err) {
             cb(err);
             return;
         }
 
-        adminip = firstAdminIp(sysinfo);
-        if (!adminip) {
+        if (!adminIp) {
             throw new Error('failed to find admin IP');
         }
 
         client = restify.createJsonClient({
             agent: false,
-            url: 'http://' + adminip + ':' + PROVISIONER_PORT
+            url: 'http://' + adminIp + ':' + PROVISIONER_PORT
         });
 
         cb();
-- 
2.21.0

