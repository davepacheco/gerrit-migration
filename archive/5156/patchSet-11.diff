From 8217c31828be9b45be959a726a0c291ffe83a426 Mon Sep 17 00:00:00 2001
From: Hans Rosenfeld <hans.rosenfeld@joyent.com>
Date: Fri, 14 Dec 2018 14:51:07 +0100
Subject: [PATCH] OS-6969 review from patrick

---
 usr/src/cmd/mdb/Makefile.mdb             |   2 +-
 usr/src/cmd/mdb/intel/amd64/mdb/Makefile |   1 -
 usr/src/cmd/mdb/intel/mdb/mdb_bhyve.c    | 159 +++++++++++++----------
 3 files changed, 90 insertions(+), 72 deletions(-)

diff --git a/usr/src/cmd/mdb/Makefile.mdb b/usr/src/cmd/mdb/Makefile.mdb
index 504e92bfa7..529f3a9a12 100644
--- a/usr/src/cmd/mdb/Makefile.mdb
+++ b/usr/src/cmd/mdb/Makefile.mdb
@@ -26,8 +26,8 @@
 #
 # Copyright 2011 Nexenta Systems, Inc.  All rights reserved.
 # Copyright (c) 2012 by Delphix. All rights reserved.
+# Copyright (c) 2012 Joyent, Inc. All rights reserved.
 # Copyright 2018 Jason King
-# Copyright (c) 2018 Joyent, Inc. All rights reserved.
 #
 
 .KEEP_STATE:
diff --git a/usr/src/cmd/mdb/intel/amd64/mdb/Makefile b/usr/src/cmd/mdb/intel/amd64/mdb/Makefile
index d8acc10226..bc4c1fc64f 100644
--- a/usr/src/cmd/mdb/intel/amd64/mdb/Makefile
+++ b/usr/src/cmd/mdb/intel/amd64/mdb/Makefile
@@ -29,7 +29,6 @@ SRCS =	kvm_amd64dep.c \
 	kvm_isadep.c \
 	mdb_amd64util.c \
 	mdb_ia32util.c \
-	mdb_ia16util.c \
 	mdb_bhyve.c \
 	proc_amd64dep.c
 
diff --git a/usr/src/cmd/mdb/intel/mdb/mdb_bhyve.c b/usr/src/cmd/mdb/intel/mdb/mdb_bhyve.c
index 1831f7afb6..f6201a95ec 100644
--- a/usr/src/cmd/mdb/intel/mdb/mdb_bhyve.c
+++ b/usr/src/cmd/mdb/intel/mdb/mdb_bhyve.c
@@ -888,6 +888,25 @@ bhyve_switch_dcmd(uintptr_t addr, uint_t flags, int argc, const mdb_arg_t *argv)
 
 }
 
+static int
+bhyve_seg2reg(char *seg)
+{
+	if (strcasecmp(seg, "cs") == 0)
+		return(VMM_DESC_CS);
+	else if (strcasecmp(seg, "ds") == 0)
+		return(VMM_DESC_DS);
+	else if (strcasecmp(seg, "es") == 0)
+		return(VMM_DESC_ES);
+	else if (strcasecmp(seg, "fs") == 0)
+		return(VMM_DESC_FS);
+	else if (strcasecmp(seg, "gs") == 0)
+		return (VMM_DESC_GS);
+	else if (strcasecmp(seg, "ss") == 0)
+		return (VMM_DESC_SS);
+	else
+		return (-1);
+}
+
 static int
 bhyve_vtol_dcmd(uintptr_t addr, uint_t flags, int argc, const mdb_arg_t *argv)
 {
@@ -909,19 +928,8 @@ bhyve_vtol_dcmd(uintptr_t addr, uint_t flags, int argc, const mdb_arg_t *argv)
 		if (argc != 0)
 			return (DCMD_USAGE);
 
-		if (strcmp(seg, "cs") == 0)
-			segreg = VMM_DESC_CS;
-		else if (strcasecmp(seg, "ds") == 0)
-			segreg = VMM_DESC_DS;
-		else if (strcasecmp(seg, "es") == 0)
-			segreg = VMM_DESC_ES;
-		else if (strcasecmp(seg, "fs") == 0)
-			segreg = VMM_DESC_FS;
-		else if (strcasecmp(seg, "gs") == 0)
-			segreg = VMM_DESC_GS;
-		else if (strcasecmp(seg, "ss") == 0)
-			segreg = VMM_DESC_SS;
-		else
+		segreg = bhyve_seg2reg(seg);
+		if (segreg == -1)
 			return (DCMD_USAGE);
 	}
 
@@ -957,19 +965,8 @@ bhyve_vtop_dcmd(uintptr_t addr, uint_t flags, int argc, const mdb_arg_t *argv)
 	argv += i;
 
 	if (i != 0) {
-		if (strcasecmp(seg, "cs") == 0)
-			segreg = VMM_DESC_CS;
-		else if (strcasecmp(seg, "ds") == 0)
-			segreg = VMM_DESC_DS;
-		else if (strcasecmp(seg, "es") == 0)
-			segreg = VMM_DESC_ES;
-		else if (strcasecmp(seg, "fs") == 0)
-			segreg = VMM_DESC_FS;
-		else if (strcasecmp(seg, "gs") == 0)
-			segreg = VMM_DESC_GS;
-		else if (strcasecmp(seg, "ss") == 0)
-			segreg = VMM_DESC_SS;
-		else
+		segreg = bhyve_seg2reg(seg);
+		if (segreg == -1)
 			return (DCMD_USAGE);
 	}
 
@@ -1005,19 +1002,8 @@ bhyve_defseg_dcmd(uintptr_t addr, uint_t flags, int argc, const mdb_arg_t *argv)
 		if (argc != 0)
 			return (DCMD_USAGE);
 
-		if (strcasecmp(seg, "cs") == 0)
-			segreg = VMM_DESC_CS;
-		else if (strcasecmp(seg, "ds") == 0)
-			segreg = VMM_DESC_DS;
-		else if (strcasecmp(seg, "es") == 0)
-			segreg = VMM_DESC_ES;
-		else if (strcasecmp(seg, "fs") == 0)
-			segreg = VMM_DESC_FS;
-		else if (strcasecmp(seg, "gs") == 0)
-			segreg = VMM_DESC_GS;
-		else if (strcasecmp(seg, "ss") == 0)
-			segreg = VMM_DESC_SS;
-		else
+		segreg = bhyve_seg2reg(seg);
+		if (segreg == -1)
 			return (DCMD_USAGE);
 
 		bd->bd_defseg = segreg;
@@ -1061,40 +1047,28 @@ static const mdb_dcmd_t bhyve_dcmds[] = {
 
 
 /*
- * t_status: get target status
+ * t_setflags: change target flags
  */
 static int
-bhyve_status(mdb_tgt_t *tgt, mdb_tgt_status_t *tsp)
+bhyve_setflags(mdb_tgt_t *tgt, int flags)
 {
 	bhyve_data_t *bd = tgt->t_data;
-	mdb_tgt_reg_t rip;
-	vmm_desc_t cs;
-	int ret;
 
-	bzero(tsp, sizeof (mdb_tgt_status_t));
+	if (((tgt->t_flags ^ flags) & MDB_TGT_F_RDWR) != 0) {
+		boolean_t writable = B_FALSE;
 
-	ret = vmm_getreg(bd->bd_vmm, bd->bd_curcpu, KREG_RIP, &rip);
-	if (ret != 0) {
-		tsp->st_state = MDB_TGT_UNDEAD;
-	} else {
-		tsp->st_state = MDB_TGT_STOPPED;
-		tsp->st_pc = rip;
-	}
+		if ((flags & MDB_TGT_F_RDWR) != 0)
+			writable = B_TRUE;
 
-	switch (vmm_vcpu_isa(bd->bd_vmm, bd->bd_curcpu)) {
-	case VMM_ISA_16:
-		mdb_dis_select("ia16");
-		break;
-	case VMM_ISA_32:
-		mdb_dis_select("ia32");
-		break;
-	case VMM_ISA_64:
-		mdb_dis_select("amd64");
-		break;
-	default:
-		break;
+		vmm_unmap(bd->bd_vmm);
+		if (vmm_map(bd->bd_vmm, writable) != 0) {
+			mdb_warn("failed to map guest memory");
+			return (set_errno(EMDB_TGT));
+		}
 	}
 
+	tgt->t_flags = flags;
+
 	return (0);
 }
 
@@ -1116,7 +1090,7 @@ bhyve_activate(mdb_tgt_t *tgt)
 
 	vmm_stop(bd->bd_vmm);
 
-	if (bhyve_status(tgt, &tsp) != 0)
+	if (mdb_tgt_status(tgt, &tsp) != 0)
 		return;
 
 	if (tsp.st_pc != 0) {
@@ -1401,6 +1375,44 @@ bhyve_vtop(mdb_tgt_t *tgt, mdb_tgt_as_t as, uintptr_t va, physaddr_t *pa)
 	return (0);
 }
 
+/*
+ * t_status: get target status
+ */
+static int
+bhyve_status(mdb_tgt_t *tgt, mdb_tgt_status_t *tsp)
+{
+	bhyve_data_t *bd = tgt->t_data;
+	mdb_tgt_reg_t rip;
+	vmm_desc_t cs;
+	int ret;
+
+	bzero(tsp, sizeof (mdb_tgt_status_t));
+
+	ret = vmm_getreg(bd->bd_vmm, bd->bd_curcpu, KREG_RIP, &rip);
+	if (ret != 0) {
+		tsp->st_state = MDB_TGT_UNDEAD;
+	} else {
+		tsp->st_state = MDB_TGT_STOPPED;
+		tsp->st_pc = rip;
+	}
+
+	switch (vmm_vcpu_isa(bd->bd_vmm, bd->bd_curcpu)) {
+	case VMM_ISA_16:
+		mdb_dis_select("ia16");
+		break;
+	case VMM_ISA_32:
+		mdb_dis_select("ia32");
+		break;
+	case VMM_ISA_64:
+		mdb_dis_select("amd64");
+		break;
+	default:
+		break;
+	}
+
+	return (0);
+}
+
 static void
 bhyve_sighdl(int sig, siginfo_t *sip, ucontext_t *ucp, mdb_tgt_t *tgt)
 {
@@ -1423,7 +1435,7 @@ bhyve_step(mdb_tgt_t *tgt, mdb_tgt_status_t *tsp)
 	int ret;
 
 	ret = vmm_step(bd->bd_vmm, bd->bd_curcpu);
-	(void) bhyve_status(tgt, tsp);
+	(void) mdb_tgt_status(tgt, tsp);
 
 	return (ret);
 }
@@ -1450,7 +1462,7 @@ bhyve_cont(mdb_tgt_t *tgt, mdb_tgt_status_t *tsp)
 	pause();
 
 	(void) mdb_signal_sethandler(SIGINT, intf, intd);
-	(void) bhyve_status(tgt, tsp);
+	(void) mdb_tgt_status(tgt, tsp);
 
 	return (ret);
 }
@@ -1500,6 +1512,9 @@ bhyve_putareg(mdb_tgt_t *tgt, mdb_tgt_tid_t tid, const char *rname,
 	int reg = bhyve_lookup_reg(tgt, rname);
 	int ret;
 
+	if ((tgt->t_flags & MDB_TGT_F_RDWR) == 0)
+		return (set_errno(EMDB_TGTRDONLY));
+
 	if (reg == -1)
 		return (set_errno(EMDB_BADREG));
 
@@ -1511,7 +1526,7 @@ bhyve_putareg(mdb_tgt_t *tgt, mdb_tgt_tid_t tid, const char *rname,
 }
 
 static const mdb_tgt_ops_t bhyve_ops = {
-	.t_setflags =		(int (*)()) mdb_tgt_notsup,
+	.t_setflags =		bhyve_setflags,
 	.t_setcontext =		(int (*)()) mdb_tgt_notsup,
 	.t_activate =		bhyve_activate,
 	.t_deactivate =		bhyve_deactivate,
@@ -1569,17 +1584,21 @@ mdb_bhyve_tgt_create(mdb_tgt_t *tgt, int argc, const char *argv[])
 {
 	bhyve_data_t *bd;
 	vmm_t *vmm = NULL;
+	boolean_t writable = B_FALSE;
 
 	if (argc != 1)
 		return (set_errno(EINVAL));
 
+	if (tgt->t_flags & MDB_TGT_F_RDWR)
+		writable = B_TRUE;
+
 	vmm = vmm_open_vm(argv[0]);
 	if (vmm == NULL) {
 		mdb_warn("failed to open %s", argv[0]);
 		return (set_errno(EMDB_TGT));
 	}
 
-	if (vmm_map(vmm) != 0) {
+	if (vmm_map(vmm, writable) != 0) {
 		mdb_warn("failed to map %s", argv[0]);
 		vmm_close_vm(vmm);
 		return (set_errno(EMDB_TGT));
@@ -1593,7 +1612,7 @@ mdb_bhyve_tgt_create(mdb_tgt_t *tgt, int argc, const char *argv[])
 
 	tgt->t_ops = &bhyve_ops;
 	tgt->t_data = bd;
-	tgt->t_flags = MDB_TGT_F_RDWR | MDB_TGT_F_ASIO;
+	tgt->t_flags |= MDB_TGT_F_ASIO;
 
 	(void) mdb_nv_insert(&mdb.m_nv, "cpuid", &bhyve_cpuid_disc, 0,
 	    MDB_NV_PERSIST | MDB_NV_RDONLY);
-- 
2.21.0

