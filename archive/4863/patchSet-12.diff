commit f47e018dd4b034ff779196290dfd1d728b2cda7f (refs/changes/63/4863/12)
Author: Jan Wyszynski <jan.wyszynski@joyent.com>
Date:   2018-12-12T02:24:20+00:00 (10 months ago)
    
    MANTA-3948 garbage-collector should not assume numeric shard names
    MANTA-4045 garbage-collector should be able to use old config versions

diff --git a/Makefile b/Makefile
index b13d24b..d493fff 100644
--- a/Makefile
+++ b/Makefile
@@ -119,7 +119,6 @@ JSL_CONF_NODE = 		tools/jsl.node.conf
 
 JSON_FILES = 			package.json
 
-
 .PHONY: test
 test: | $(CATEST)
 	$(CATEST) $(CATEST_FILES)
diff --git a/cmd/server.js b/cmd/server.js
index abd0e8a..9c6df67 100644
--- a/cmd/server.js
+++ b/cmd/server.js
@@ -61,7 +61,7 @@ load_config(ctx, done)
 			return;
 
 		}
-		var out;
+		var out, uses_old_config = false;
 		try {
 			out = JSON.parse(data.toString('utf8'));
 		} catch (e) {
@@ -73,37 +73,62 @@ load_config(ctx, done)
 		ctx.ctx_log.info('loaded configuration file "%s"',
 			ctx.ctx_cfgfile);
 
-		var schema_err = mod_schema.validate_shards_cfg(
-			out.shards);
+		var schema_err = mod_schema.validate_creators_cfg(
+			out.allowed_creators || out.creators);
 		if (schema_err) {
-			done(new VE(schema_err, 'malformed shards ' +
-				'configuration'));
+			done(new VE(schema_err, 'malformed creators config'));
 			return;
 		}
 
-		schema_err = mod_schema.validate_buckets_cfg(
-			out.buckets);
+		schema_err = mod_schema.validate_shards_cfg(
+			out.shards);
 		if (schema_err) {
-			done(new VE(schema_err, 'malformed buckets ' +
-				'configuration'));
-			return;
+			schema_err = mod_schema.validate_shards_old_cfg(
+			    out.shards);
+			if (schema_err) {
+				done(new VE(schema_err, 'malformed shards ' +
+					'configuration'));
+				return;
+			}
+			uses_old_config = true;
+			ctx.ctx_log.warn('assuming old configuration schema');
 		}
 
-		schema_err = mod_schema.validate_creators_cfg(
-			out.creators);
-		if (schema_err) {
-			done(new VE(schema_err, 'malformed creators config'));
-			return;
-		}
+		if (uses_old_config) {
+			schema_err = mod_schema.validate_moray_old_cfg(
+			    out.params.moray);
+			if (schema_err) {
+				done(new VE(schema_err, 'malformed moray ' +
+				    'configuration'));
+				return;
+			}
 
-		schema_err = mod_schema.validate_tunables_cfg(
-			out.tunables);
-		if (schema_err) {
-			done(new VE(schema_err, 'malformed tunables ' +
-				'configuration'));
-			return;
+			schema_err = mod_schema.validate_mako_old_cfg(
+			    out.params.mako);
+			if (schema_err) {
+				done(new VE(schema_err, 'malformed mako ' +
+				    'configuration'));
+				return;
+			}
+		} else {
+			schema_err = mod_schema.validate_buckets_cfg(
+				out.buckets);
+			if (schema_err) {
+				done(new VE(schema_err, 'malformed buckets ' +
+				    'configuration'));
+				return;
+			}
+
+			schema_err = mod_schema.validate_tunables_cfg(
+				out.tunables);
+			if (schema_err) {
+				done(new VE(schema_err, 'malformed tunables ' +
+				    'configuration'));
+				return;
+			}
 		}
 
+		ctx.ctx_old_config = uses_old_config;
 		ctx.ctx_cfg = out;
 
 		setImmediate(done);
@@ -111,6 +136,57 @@ load_config(ctx, done)
 }
 
 
+function
+translate_config(ctx, done)
+{
+	if (!ctx.ctx_old_config) {
+		done();
+		return;
+	}
+	var concurrency;
+	var shards = ctx.ctx_cfg.shards;
+	var assigned_shards = [];
+
+	for (var i = shards.interval[0]; i < shards.interval[1]; i++) {
+		assigned_shards.push({
+		    host: i + '.' + shards.domain_suffix
+		});
+	}
+
+	var buckets = ctx.ctx_cfg.shards.buckets;
+	var assigned_buckets = [];
+
+	for (var j = 0; j < buckets.length; j++) {
+		var name = buckets[j].bucket;
+		/*
+		 * Adopt whatever concurrency was set for the
+		 * manta_fastdelete_queue as the global concurrency. It is not
+		 * likely that we will use the collector for other buckets.
+		 */
+		if (name === 'manta_fastdelete_queue') {
+			concurrency = buckets[j].concurrency;
+		}
+		assigned_buckets.push({
+		    name: name
+		});
+	}
+
+	var mako_tunables = ctx.ctx_cfg.params.mako;
+	var moray_tunables = ctx.ctx_cfg.params.moray;
+
+	/*
+	 * Apply configuration updates.
+	 */
+	ctx.ctx_cfg.shards = assigned_shards;
+	ctx.ctx_cfg.buckets = assigned_buckets;
+	ctx.ctx_cfg.concurrency = concurrency;
+	ctx.ctx_cfg.tunables = mod_jsprim.mergeObjects(mako_tunables,
+	    moray_tunables);
+
+	done();
+}
+
+
 function
 setup_log(ctx, done)
 {
@@ -184,7 +260,6 @@ setup_manta_client(ctx, done)
 	ctx.ctx_manta_client = mod_manta.createClient(manta_cfg);
 	ctx.ctx_log.debug('created manta client');
 
-	ctx.ctx_mako_cfg = mod_jsprim.deepCopy(ctx.ctx_cfg.params.mako);
 	setImmediate(done);
 }
 
@@ -277,6 +352,12 @@ main()
 		 */
 		load_config,
 
+		/*
+		 * If the collector received an outdated configuration,
+		 * translate ctx.ctx_cfg appropriately.
+		 */
+		translate_config,
+
 		/*
 		 * Pull in log-related configuration. For now, this just sets
 		 * the log-level according to what may or may not be in the
diff --git a/etc/config.json b/etc/config.json
deleted file mode 100644
index 47455bf..0000000
--- a/etc/config.json
+++ /dev/null
@@ -1,72 +0,0 @@
-{
-	"bunyan": {
-		"level": "debug"
-	},
-	"manta": {
-		"url": "https://manta.orbit.example.com",
-		"user": "poseidon",
-		"sign": {
-			"key": "/root/.ssh/id_rsa",
-			"keyId": "58:bf:5f:e0:91:0a:3a:b3:64:4d:06:01:0d:fa:92:0b"
-		},
-		"retry": {
-			"attempts": 5,
-			"minTimeout": 1000
-		},
-		"connectTimeout": 1000,
-		"rejectUnauthorized": false
-	},
-	"moray": {
-		"options": {
-			"cueballOptions": {
-				"resolvers": [
-					"nameservice.orbit.example.com"
-				],
-				"target": 3,
-				"maximum": 3
-			}
-		}
-	},
-	"shards": {
-		"domain_suffix": "moray.orbit.example.com",
-		"interval": [0, 0],
-		"buckets": [
-			{
-				"bucket": "manta_fastdelete_queue",
-				"concurrency": 8
-			},
-			{
-				"bucket": "manta_delete_log",
-				"concurrency": 0
-			}
-		]
-	},
-	"creators": [
-		{
-			"uuid": "edfb68bf-c9bd-c024-ed9a-f871d212d314"
-		}
-	],
-	"params": {
-		"mako": {
-			"instr_upload_batch_size": 512,
-			"instr_upload_flush_delay": 60000,
-			"instr_upload_path_prefix": "/poseidon/stor/manta_gc/mako"
-		},
-		"moray": {
-			"record_read_batch_size": 512,
-			"record_read_wait_interval": 0,
-			"record_read_sort_attr": "_mtime",
-			"record_read_sort_order": "ASC",
-			"record_delete_batch_size": 512,
-			"record_delete_delay": 1000
-		}
-	},
-	"address": "0.0.0.0",
-	"port": 2020,
-	"capacity": 10000,
-	"sapi_url": "http://sapi.coal-1.example.com",
-	"instance": "0e176aeb-3a6b-cf90-b846-9e1d293ac1ae",
-	"datacenter": "orbit.example.com",
-	"server_uuid": "5f183d10-b44a-ca1c-e5b7-bf9e9b940764",
-	"service_name": "garbage-collector"
-}
diff --git a/etc/config.json.template b/etc/config.json.template
new file mode 100644
index 0000000..825a2f0
--- /dev/null
+++ b/etc/config.json.template
@@ -0,0 +1,66 @@
+{
+    "bunyan": {
+        "level": "info"
+    },
+    "manta": {
+        "url": "https://manta.orbit.example.com",
+        "user": "poseidon",
+        "sign": {
+            "key": "/root/.ssh/id_rsa",
+            "keyId": "7e:6f:34:9c:ae:31:d2:07:f9:69:81:73:d4:f7:3b:09"
+        },
+        "retry": {
+            "attempts": 5,
+            "minTimeout": 1000
+        },
+        "connectTimeout": 1000,
+        "rejectUnauthorized": false
+    },
+    "moray": {
+        "options": {
+            "cueballOptions": {
+                "resolvers": [
+                    "nameservice.orbit.example.com"
+                ]
+            }
+        }
+    },
+    "shards": [
+        {
+            "host": "1.moray.orbit.example.com"
+        },
+        {
+            "host": "2.moray.orbit.example.com"
+        }
+    ],
+    "buckets": [
+        {
+             "name": "manta_fastdelete_queue"
+        }
+    ],
+    "concurrency": 1,
+    "allowed_creators": [
+        {
+            "uuid": "2f1c9213-44ca-c7c5-a57b-a9deb14589c4"
+        }
+    ],
+    "tunables": {
+        "instr_upload_batch_size": 100,
+        "instr_upload_flush_delay": 30000,
+        "instr_upload_path_prefix": "/poseidon/stor/manta_gc/mako",
+        "record_read_batch_size": 50,
+        "record_read_wait_interval": 3000,
+        "record_read_sort_attr": "_mtime",
+        "record_read_sort_order": "ASC",
+        "record_delete_batch_size": 50,
+        "record_delete_delay": 1000,
+        "capacity": 1000000
+    },
+    "address": "0.0.0.0",
+    "port": 2020,
+    "sapi_url": "http://sapi.coal-1.example.com",
+    "instance": "6b6ad111-a4f4-4974-bb40-5699487e3d2a",
+    "server_uuid": "5f183d10-b44a-ca1c-e5b7-bf9e9b940764",
+    "service_name": "garbage-collector.orbit.example.com",
+    "datacenter": "coal-1"
+}
diff --git a/etc/testconfig.json b/etc/testconfig.json
deleted file mode 100644
index 684b0bf..0000000
--- a/etc/testconfig.json
+++ /dev/null
@@ -1,66 +0,0 @@
-{
-	"manta": {
-		"url": "https://manta.orbit.example.com",
-		"user": "poseidon",
-		"sign": {
-			"key": "/root/.ssh/id_rsa",
-			"keyId": "58:bf:5f:e0:91:0a:3a:b3:64:4d:06:01:0d:fa:92:0b"
-		},
-		"retry": {
-			"attempts": 5,
-			"minTimeout": 1000
-		},
-		"connectTimeout": 1000,
-		"rejectUnauthorized": false
-	},
-	"moray": {
-		"options": {
-			"cueballOptions": {
-				"resolvers": [
-					"nameservice.orbit.example.com"
-				]
-			}
-		}
-	},
-	"shards": {
-		"domain_suffix": "moray.orbit.example.com",
-		"interval": [2,2],
-		"buckets": [
-			{
-				"bucket": "manta_fastdelete_queue",
-				"concurrency": 1
-			}
-		]
-	},
-	"creators": [
-		{
-			"uuid": "edfb68bf-c9bd-c024-ed9a-f871d212d314"
-		}
-	],
-	"params": {
-		"mako": {
-			"concurrency": 1,
-			"instr_upload_batch_size": 50,
-			"instr_upload_flush_delay": 5000,
-			"instr_upload_path_prefix": "/poseidon/stor/manta_gc_test/mako"
-		},
-		"moray": {
-			"concurrency": 1,
-			"record_read_batch_size": 50,
-			"record_read_wait_interval": 5000,
-			"record_read_sort_attr": "_mtime",
-			"record_read_sort_order": "ASC",
-			"record_delete_batch_size": 50,
-			"record_delete_delay": 5000
-		}
-	},
-	"index_shard_lo": 1,
-	"index_shard_hi": 2,
-	"address": "0.0.0.0",
-	"port": 2020,
-	"capacity": 10000,
-	"instance": "0e176aeb-3a6b-cf90-b846-9e1d293ac1ae",
-	"datacenter": "orbit.example.com",
-	"server_uuid": "5f183d10-b44a-ca1c-e5b7-bf9e9b940764",
-	"service_name": "garbage-collector"
-}
diff --git a/etc/testconfig.json.template b/etc/testconfig.json.template
new file mode 100644
index 0000000..b0691f6
--- /dev/null
+++ b/etc/testconfig.json.template
@@ -0,0 +1,63 @@
+{
+    "bunyan": {
+        "level": "info"
+    },
+    "manta": {
+        "url": "https://manta.orbit.example.com",
+        "user": "poseidon",
+        "sign": {
+            "key": "/root/.ssh/id_rsa",
+            "keyId": "7e:6f:34:9c:ae:31:d2:07:f9:69:81:73:d4:f7:3b:09"
+        },
+        "retry": {
+            "attempts": 5,
+            "minTimeout": 1000
+        },
+        "connectTimeout": 1000,
+        "rejectUnauthorized": false
+    },
+    "moray": {
+        "options": {
+            "cueballOptions": {
+                "resolvers": [
+                    "nameservice.orbit.example.com"
+                ]
+            }
+        }
+    },
+    "shards": [
+        {
+            "host": "2.moray.orbit.example.com"
+        }
+    ],
+    "buckets": [
+        {
+            "name": "manta_fastdelete_queue"
+        }
+    ],
+    "concurrency": 1,
+    "allowed_creators": [
+        {
+            "uuid": "e22063ae-1ab6-6c1d-f4c9-cf02208e39cc"
+        }
+    ],
+    "tunables": {
+        "instr_upload_batch_size": 100,
+        "instr_upload_flush_delay": 1000,
+        "instr_upload_path_prefix": "/poseidon/stor/manta_gc_test/mako",
+        "record_read_batch_size": 50,
+        "record_read_wait_interval": 1000,
+        "record_read_sort_attr": "_mtime",
+        "record_read_sort_order": "ASC",
+        "record_delete_batch_size": 50,
+        "record_delete_delay": 1000,
+        "capacity": 1000000
+    },
+    "address": "0.0.0.0",
+    "port": 2020,
+    "sapi_url": "http://sapi.coal-1.example.com",
+    "instance": "6b6ad111-a4f4-4974-bb40-5699487e3d2a",
+    "server_uuid": "5f183d10-b44a-ca1c-e5b7-bf9e9b940764",
+    "service_name": "garbage-collector.orbit.example.com",
+    "datacenter": "coal-1"
+}
diff --git a/lib/common.js b/lib/common.js
index 4442bdb..d3a73c6 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -64,7 +64,8 @@ create_moray_client(ctx, shard, done)
 		client.removeAllListeners('error');
 
 		mod_assertplus.ok(ctx.ctx_moray_clients[shard] === undefined,
-			'unexpected moray configuration while creating client');
+		    'unexpected moray client');
+
 		done(null, client);
 	});
 
diff --git a/lib/delete_record_transformer.js b/lib/delete_record_transformer.js
index ea0316c..6a3b68f 100644
--- a/lib/delete_record_transformer.js
+++ b/lib/delete_record_transformer.js
@@ -32,7 +32,6 @@ DeleteRecordTransformer(opts)
 
 	mod_assertplus.object(opts, 'opts');
 	mod_assertplus.object(opts.ctx, 'opts.ctx');
-	mod_assertplus.object(opts.ctx.ctx_mako_cfg, 'opts.ctx_mako_cfg');
 	mod_assertplus.object(opts.log, 'opts.log');
 	mod_assertplus.object(opts.moray_listener, 'opts.moray_listener');
 	mod_assertplus.object(opts.mako_listener, 'opts.mako_listener');
diff --git a/lib/gc_manager.js b/lib/gc_manager.js
index bebd20b..1746c47 100644
--- a/lib/gc_manager.js
+++ b/lib/gc_manager.js
@@ -49,8 +49,7 @@ state_init(S)
 {
 	var self = this;
 
-	self._create_clients_and_workers(self.gcm_ctx.ctx_cfg.shards,
-		function (err) {
+	self._create_clients_and_workers(function (err) {
 		if (err) {
 			self.gcm_log.error(err, 'Unable to initialize ' +
 				'GC manager.');
@@ -71,6 +70,8 @@ state_running(S)
 {
 	var self = this;
 
+	self.emit('running');
+
 	self.gcm_log.info('GC Manager running.');
 };
 
@@ -78,45 +79,13 @@ state_running(S)
 // --- Helpers
 
 
-GCManager.prototype._shard_num_to_domain = function
-_shard_num_to_domain(n)
-{
-	var self = this;
-
-	var suffix = self.gcm_ctx.ctx_cfg.shards.domain_suffix;
-
-	return ([n, suffix].join('.'));
-};
-
-
-GCManager.prototype._delete_global_shard_ctx_fields = function
-_delete_global_shard_ctx_fields(ctx)
-{
-	delete (ctx.buckets);
-	delete (ctx.interval);
-	delete (ctx.domain_suffix);
-};
-
-
-GCManager.prototype._is_index_shard = function
-_is_index_shard(shard_num)
-{
-	var self = this;
-	var cfg = self.gcm_ctx.ctx_cfg;
-
-	return ((shard_num >= cfg.index_shard_lo) &&
-		(shard_num <= cfg.index_shard_hi));
-};
-
-
 GCManager.prototype._create_clients_and_workers = function
 _create_clients_and_workers(done)
 {
 	var self = this;
-	var shards = self.ctx.ctx_cfg.shards;
 
 	mod_vasync.forEachParallel({
-		inputs: shards,
+		inputs: self.gcm_ctx.ctx_cfg.shards,
 		func: function setup(shard, finished) {
 			self._create_moray_client(shard.host,
 				finished);
@@ -126,224 +95,11 @@ _create_clients_and_workers(done)
 			done(err);
 			return;
 		}
-		self.ensure_workers(done);
+		self._ensure_workers(done);
 	});
 };
 
 
-GCManager.prototype.setup_shards = function
-setup_shards(desired, callback)
-{
-	var self = this;
-
-	self.gcm_log.info({
-		desired: mod_util.inspect(desired)
-	}, 'Setting up desired shard configuration.');
-
-	var shards_cfg = self.gcm_ctx.ctx_cfg.shards;
-
-	var curr_interval = shards_cfg.interval;
-	var next_interval = desired.interval || curr_interval;
-
-	var updates = {
-		create_or_update: [],
-		destroy: []
-	};
-
-	if (next_interval[0] === 0 && next_interval[1] === 0) {
-		self.gcm_log.info('Garbage-collector has not been ' +
-			'initialized yet. Waiting for restart/or interval ' +
-			'update with shards.interval != [0, 0].');
-		callback();
-		return;
-	}
-
-	for (var i = next_interval[0]; i <= next_interval[1]; i++) {
-		if (!self._is_index_shard(i)) {
-			callback(new VE('shard "%d" is not an index ' +
-				'shard', i));
-			return;
-		}
-		updates.create_or_update.push(i);
-	}
-
-	for (i = curr_interval[0]; i <= curr_interval[1]; i++) {
-		if (i < next_interval[0] || i > next_interval[1]) {
-			updates.destroy.push(i);
-		}
-	}
-
-	function cleanup_workers_and_ctx(shard_num, done) {
-		var domain = self._shard_num_to_domain(shard_num);
-
-		mod_vasync.pipeline({ funcs: [
-			function (_, next) {
-				self._destroy_workers_for_shard(domain, next);
-			},
-			function (_, next) {
-				self._cleanup_shard_ctx(domain);
-				next();
-			}
-		]}, done);
-	}
-
-	function create_or_update_ctx(shard_num, done) {
-		var domain = self._shard_num_to_domain(shard_num);
-
-		/*
-		 * The 'desired' object contains configuration params
-		 * that should override the default configuration for
-		 * all need
-		 */
-		self._create_or_update_shard_ctx(domain, desired, done);
-	}
-
-	mod_vasync.pipeline({ funcs: [
-		function create_workers(_, next) {
-			mod_vasync.forEachParallel({
-				inputs: updates.create_or_update,
-				func: create_or_update_ctx
-			}, function (err) {
-				if (err) {
-					next(err);
-					return;
-				}
-				/*
-				 * After setting up all the necessary
-				 * configuration and clients above, actually
-				 * create the gc workers.
-				 */
-				self.ensure_workers(next);
-			});
-		},
-		function destroy_workers(_, next) {
-			mod_vasync.forEachParallel({
-				inputs: updates.destroy,
-				func: cleanup_workers_and_ctx
-			}, next);
-		}
-	]}, function (err) {
-		if (err) {
-			callback(err);
-			return;
-		}
-		self._update_global_shards_ctx(desired);
-		callback();
-	});
-};
-
-
-// -- Context management routines
-
-
-/*
- * Update logic for fields that are included in both the single shard and
- * global shard configuration.
- */
-GCManager.prototype._update_shard_ctx_common = function
-_update_shard_ctx_common(curr, updates)
-{
-	if (updates.buckets === undefined) {
-		return;
-	}
-	if (curr.buckets === undefined) {
-		curr.buckets = [];
-	}
-
-	updates.buckets.forEach(function (bucket_cfg) {
-		var name = bucket_cfg.bucket;
-
-		for (var i = 0; i < curr.buckets.length; i++) {
-			if (curr.buckets[i].bucket == name) {
-				curr.buckets[i] = mod_jsprim.mergeObjects(
-					curr.buckets[i], bucket_cfg);
-				return;
-			}
-		}
-
-		curr.buckets.push(bucket_cfg);
-	});
-};
-
-
-/*
- * Update the global configuration describing what shards the garbage collector
- * is processing records from.
- */
-GCManager.prototype._update_global_shards_ctx = function
-_update_global_shards_ctx(updates)
-{
-	var self = this;
-
-	self.gcm_log.info({
-		curr: mod_util.inspect(self.gcm_ctx.ctx_cfg.shards),
-		updates: mod_util.inspect(updates)
-	}, 'Updating global shard configuration.');
-
-	self._update_shard_ctx_common(self.gcm_ctx.ctx_cfg.shards, updates);
-
-	if (updates.interval) {
-		self.gcm_ctx.ctx_cfg.shards.interval = updates.interval;
-	}
-
-	var filtered = mod_jsprim.mergeObjects(updates, {});
-	self._delete_global_shard_ctx_fields(filtered);
-
-	self.gcm_ctx.ctx_cfg.params.moray = mod_jsprim.mergeObjects(
-		self.gcm_ctx.ctx_cfg.params.moray, filtered);
-};
-
-
-/*
- * Update configuration for a single shard.
- */
-GCManager.prototype._update_single_shard_ctx = function
-_update_single_shard_ctx(shard, updates)
-{
-	var self = this;
-
-	self.gcm_log.info({
-		curr: self.gcm_ctx.ctx_moray_cfgs[shard],
-		updates: mod_util.inspect(updates),
-		shard: shard
-	}, 'Updating single shard configuration.');
-
-	self._update_shard_ctx_common(self.gcm_ctx.ctx_moray_cfgs[shard],
-		updates);
-
-	var filtered = mod_jsprim.mergeObjects(updates, {});
-	self._delete_global_shard_ctx_fields(filtered);
-
-	self.gcm_ctx.ctx_moray_cfgs[shard] = mod_jsprim.mergeObjects(
-		self.gcm_ctx.ctx_moray_cfgs[shard], filtered);
-};
-
-
-/*
- * Initialize the default fields for a new shard context.
- */
-GCManager.prototype._create_shard_ctx = function
-_create_shard_ctx()
-{
-	var self = this;
-
-	var defaults = {
-		buckets: self.gcm_ctx.ctx_cfg.shards.buckets.map(
-			function (bucket_cfg) {
-
-			var copy = mod_jsprim.mergeObjects(bucket_cfg, {});
-			copy.record_read_offset = 0;
-
-			return (copy);
-		})
-	};
-	defaults = mod_jsprim.mergeObjects(defaults,
-		self.gcm_ctx.ctx_cfg.params.moray);
-
-	return (defaults);
-};
-
-
 GCManager.prototype._create_moray_client = function
 _create_moray_client(shard, done)
 {
@@ -365,59 +121,6 @@ _create_moray_client(shard, done)
 	});
 };
 
-/*
- * Update a single-shard configuration if it exists, or create a new
- * configuration and client if they don't already exist.
- */
-GCManager.prototype._create_or_update_shard_ctx = function
-_create_or_update_shard_ctx(shard, overrides, done)
-{
-	var self = this;
-
-	if (self.gcm_ctx.ctx_moray_cfgs[shard] !== undefined) {
-		self._update_single_shard_ctx(shard, overrides);
-		setImmediate(done);
-		return;
-	}
-
-	lib_common.create_moray_client(self.gcm_ctx, shard,
-		function (err, client) {
-		if (err) {
-			done(err);
-			return;
-		}
-		self.gcm_ctx.ctx_moray_clients[shard] = client;
-
-		var filtered = mod_jsprim.mergeObjects(overrides, null, {});
-		self._delete_global_shard_ctx_fields(filtered);
-
-		self.gcm_ctx.ctx_moray_cfgs[shard] = mod_jsprim.mergeObjects(
-			self._create_shard_ctx(), filtered);
-
-		self.gcm_log.info({
-			shard: shard,
-			cfg: self.gcm_ctx.ctx_moray_cfgs[shard]
-		}, 'Created new moray client and configuration.');
-
-		done();
-	});
-};
-
-
-/*
- * Cleanup all state associated with a shard.
- */
-GCManager.prototype._cleanup_shard_ctx = function
-_cleanup_shard_ctx(shard)
-{
-	var self = this;
-
-	self.gcm_ctx.ctx_moray_clients[shard].close();
-
-	delete (self.gcm_ctx.ctx_moray_clients[shard]);
-	delete (self.gcm_ctx.ctx_moray_cfgs[shard]);
-};
-
 
 // --- Worker management
 
@@ -426,15 +129,15 @@ _cleanup_shard_ctx(shard)
  * Ensure that for each shard, we have created the appropriate number of
  * GCWorkers.
  */
-GCManager.prototype.ensure_workers = function
-ensure_workers(done)
+GCManager.prototype._ensure_workers = function
+_ensure_workers(done)
 {
 	var self = this;
 
 	mod_vasync.forEachParallel({
-		inputs: Object.keys(self.gcm_ctx.ctx_moray_cfgs),
+		inputs: self.gcm_ctx.ctx_cfg.shards,
 		func: function (shard, cb) {
-			self._ensure_workers_for_shard(shard, cb);
+			self._ensure_workers_for_shard(shard.host, cb);
 		}
 	}, function (err) {
 		if (err) {
@@ -470,20 +173,6 @@ _ensure_workers_for_shard(shard, ensure_done)
 };
 
 
-GCManager.prototype._destroy_workers_for_shard = function
-_destroy_workers_for_shard(shard, destroy_done)
-{
-	var self = this;
-
-	mod_vasync.forEachParallel({
-		inputs: Object.keys(self.gcm_workers[shard]),
-		func: function destroy(bucket, next) {
-			self._destroy_worker(shard, bucket, next);
-		}
-	}, destroy_done);
-};
-
-
 GCManager.prototype._ensure_workers_for_bucket = function
 _ensure_workers_for_bucket(shard, bucket, concurrency, ensure_done)
 {
@@ -498,17 +187,12 @@ _ensure_workers_for_bucket(shard, bucket, concurrency, ensure_done)
 
 	mod_vasync.whilst(
 		function unresolved() {
-			return (concurrency !==
+			return (concurrency >
 			    (self.gcm_workers[shard][bucket] ||
 			    []).length);
 		},
-		function create_or_destroy_workers(next) {
-			if ((self.gcm_workers[shard][bucket] ||
-				[]).length < concurrency) {
-				self._create_worker(shard, bucket, next);
-			} else {
-				self._destroy_worker(shard, bucket, next);
-			}
+		function create_workers(next) {
+			self._create_worker(shard, bucket, next);
 		},
 		function whilst_done(err) {
 			if (err) {
@@ -516,7 +200,7 @@ _ensure_workers_for_bucket(shard, bucket, concurrency, ensure_done)
 					shard: shard,
 					bucket: bucket,
 					err: err
-				}, 'Error setting up desired workers.');
+				}, 'Error creating workers.');
 			}
 			ensure_done(err);
 		});
@@ -561,29 +245,6 @@ _create_worker(shard, bucket, done)
 };
 
 
-/*
- * Remove the last worker. We drop the reference to the worker after invoking
- * it's shutdown sequence.
- */
-GCManager.prototype._destroy_worker = function
-_destroy_worker(shard, bucket, done)
-{
-	var self = this;
-
-	if ((self.gcm_workers[shard][bucket] || []).length === 0) {
-		done();
-		return;
-	}
-
-	var worker = self.gcm_workers[shard][bucket].pop();
-	worker.once('shutdown', function () {
-		done();
-	});
-
-	worker.shutdown();
-};
-
-
 // --- Worker control (pause, resume, list)
 
 
diff --git a/lib/http_server.js b/lib/http_server.js
index 2afd2da..f957b46 100644
--- a/lib/http_server.js
+++ b/lib/http_server.js
@@ -31,6 +31,26 @@ var WE = mod_verror.WError;
 var REQUEST_THRESHOLD = 10;
 
 
+function
+validate_shards(ctx, shards)
+{
+	var err = mod_schema.validate_shards_cfg(shards);
+	if (err) {
+		return (err);
+	}
+
+	for (var i = 0; i < shards.length; i++) {
+		var shard = shards[i].host;
+		if (!ctx.ctx_moray_clients.hasOwnProperty(shard)) {
+			return (new Error('shard ' + shard + ' not ' +
+			    'assigned to this collector'));
+		}
+	}
+
+	return (null);
+}
+
+
 function
 handle_ping(req, res, next)
 {
@@ -58,16 +78,26 @@ function
 handle_pause_workers(req, res, next)
 {
 	var ctx = req.ctx;
-
 	var shards;
+	var err;
 
 	/*
 	 * If no shards specified, pasue all workers for all shards.
 	 */
 	if (!req.body || !req.body.shards) {
-		shards = Object.keys(ctx.ctx_moray_cfgs);
+		shards = Object.keys(ctx.ctx_moray_clients);
 	} else {
-		shards = req.body.shards;
+		err = validate_shards(ctx, req.body.shards);
+		if (err !== null) {
+			res.send(400, {
+				ok: false,
+				err: err.message
+			});
+			return;
+		}
+		shards = req.body.shards.map(function (shard) {
+			return (shard.host);
+		});
 	}
 
 	ctx.ctx_gc_manager.pause_workers(shards, function () {
@@ -84,11 +114,22 @@ handle_resume_workers(req, res, next)
 {
 	var ctx = req.ctx;
 	var shards;
+	var err;
 
 	if (!req.body || !req.body.shards) {
-		shards = Object.keys(ctx.ctx_moray_cfgs);
+		shards = Object.keys(ctx.ctx_moray_clients);
 	} else {
-		shards = req.body.shards;
+		err = validate_shards(ctx, req.body.shards);
+		if (err !== null) {
+			res.send(400, {
+				ok: false,
+				err: err.message
+			});
+			return;
+		}
+		shards = req.body.shards.map(function (shard) {
+			return (shard.host);
+		});
 	}
 
 	ctx.ctx_gc_manager.resume_workers(shards, function () {
@@ -123,7 +164,7 @@ handle_tunables_cfg_get(req, res, next)
 {
 	var ctx = req.ctx;
 
-	req.send(200, ctx.ctx_cfg.tunables);
+	res.send(200, ctx.ctx_cfg.tunables);
 }
 
 
@@ -133,7 +174,7 @@ handle_tunables_cfg_post(req, res, next)
 	var ctx = req.ctx;
 	var tunables = req.body;
 
-	var err = mod_schema.validate_tunables_cfg(tunables);
+	var err = mod_schema.validate_tunables_update_cfg(tunables);
 	if (err) {
 		res.send(400, {
 			ok: false,
diff --git a/lib/mako_instruction_uploader.js b/lib/mako_instruction_uploader.js
index 3dfb216..40cb565 100644
--- a/lib/mako_instruction_uploader.js
+++ b/lib/mako_instruction_uploader.js
@@ -29,7 +29,6 @@ MakoInstructionUploader(opts)
 	mod_assertplus.object(opts, 'opts');
 	mod_assertplus.object(opts.log, 'opts.log');
 	mod_assertplus.object(opts.ctx, 'opts.ctx');
-	mod_assertplus.object(opts.ctx.ctx_mako_cfg, 'opts.ctx_mako_cfg');
 	mod_assertplus.object(opts.listener, 'opts.listener');
 
 	self.mu_ctx = opts.ctx;
diff --git a/lib/schema.js b/lib/schema.js
index 06ffd4d..4362ba3 100644
--- a/lib/schema.js
+++ b/lib/schema.js
@@ -15,10 +15,11 @@ var mod_util = require('util');
 
 var mod_errors = require('./errors');
 
-var InvalidShardsConfigError = mod_errors.InvalidShardsjConfigError;
+var InvalidShardsConfigError = mod_errors.InvalidShardsConfigError;
 var InvalidCreatorsConfigError = mod_errors.InvalidCreatorsConfigError;
 var InvalidBucketsConfigError = mod_errors.InvalidBucketsConfigError;
 var InvalidTunablesConfigError = mod_errors.InvalidTunablesConfigError;
+var InvalidMakoConfigError = mod_errors.InvalidMakoConfigError;
 
 var AJV_ENV = new Ajv();
 
@@ -33,7 +34,7 @@ var SORT_ORDERS = [
 	'asc'
 ];
 
-var tunable_cfg_properties = {
+var tunables_cfg_properties = {
 	'instr_upload_batch_size': {
 		'type': 'integer',
 		'minimum': 1
@@ -75,15 +76,104 @@ var tunable_cfg_properties = {
 		'minimum': 100
 	}
 };
-var tunable_property_names = Object.keys(tunable_cfg_properties);
+var tunables_property_names = Object.keys(tunables_cfg_properties);
+
+var moray_cfg_properties = {
+    'record_read_batch_size': {
+	'type': 'integer',
+	'minimum': 1
+    },
+    'record_read_wait_interval': {
+	'type': 'integer',
+	'minimum': 0
+    },
+    'record_read_sort_attr': {
+	'type': 'string',
+	'enum': SORT_ATTRS
+    },
+    'record_read_sort_order': {
+	'type': 'string',
+	'enum': SORT_ORDERS
+    },
+    'record_delete_batch_size': {
+	'type': 'integer',
+	'minimum': 1
+    },
+    'record_delete_delay': {
+	'type': 'integer',
+	'minimum': 0
+    }
+};
+var moray_property_names = Object.keys(moray_cfg_properties);
+
+var mako_cfg_properties = {
+    'instr_upload_batch_size': {
+	'type': 'integer',
+	'minimum': 1
+    },
+    'instr_upload_flush_delay': {
+	'type': 'integer',
+	'minimum': 1
+    },
+    'instr_upload_path_prefix': {
+	'type': 'string',
+	'minLength': 1
+    }
+};
+var mako_property_names = Object.keys(mako_cfg_properties);
+
+AJV_ENV.addSchema({
+    id: 'shard-interval',
+    type: 'array',
+    minItems: 2,
+    maxItems: 2,
+    items: {
+	type: 'integer',
+	minimum: 0
+    }
+});
+
+AJV_ENV.addSchema({
+    id: 'bucket-old-cfg',
+    type: 'array',
+    items: {
+	type: 'object',
+	properties: {
+	    'bucket': {
+		type: 'string',
+		minLength: 1,
+		enum: DELETE_RECORD_BUCKETS
+	    },
+	    'concurrency': {
+		type: 'integer',
+		minimum: 0
+	    }
+	}
+    },
+    required: [
+	'bucket',
+	'concurrency'
+    ],
+    additionalProperties: false
+});
+
+
+var shards_old_cfg_properties = {
+    'domain_suffix': {
+	'type': 'string',
+	'minLength': 1
+    },
+    'interval': { allOf: [ { '$ref': 'shard-interval' } ] },
+    'buckets': { allOf: [ { '$ref': 'bucket-old-cfg' } ] }
+};
+var shards_old_property_names = Object.keys(shards_old_cfg_properties);
 
 AJV_ENV.addSchema({
 	id: 'shards-cfg',
 	type: 'array',
-	items: { allOf: [ { '$ref': 'shard-cg' } ] }
+	items: { allOf: [ { '$ref': 'shard-cfg' } ] }
 });
 
-
 AJV_ENV.addSchema({
 	id: 'shard-cfg',
 	type: 'object',
@@ -102,6 +192,14 @@ AJV_ENV.addSchema({
 	additionalProperties: false
 });
 
+AJV_ENV.addSchema({
+    id: 'shards-old-cfg',
+    type: 'object',
+    properties: shards_old_cfg_properties,
+    required: shards_old_property_names,
+    additionalProperties: false
+});
+
 
 var DELETE_RECORD_BUCKETS = [
 	'manta_delete_log',
@@ -165,10 +263,37 @@ AJV_ENV.addSchema({
 
 
 AJV_ENV.addSchema({
-	id: 'tunable-cfg',
+	id: 'tunables-cfg',
 	type: 'object',
-	properties: tunable_cfg_properties,
-	required: tunable_property_names
+	properties: tunables_cfg_properties,
+	required: tunables_property_names,
+	additionalProperties: false
+});
+
+
+AJV_ENV.addSchema({
+	id: 'tunables-update-cfg',
+	type: 'object',
+	properties: tunables_cfg_properties,
+	additionalProperties: false
+});
+
+
+AJV_ENV.addSchema({
+    id: 'mako-old-cfg',
+    type: 'object',
+    properties: mako_cfg_properties,
+    required: mako_property_names,
+    additionalProperties: false
+});
+
+
+AJV_ENV.addSchema({
+    id: 'moray-old-cfg',
+    type: 'object',
+    properties: moray_cfg_properties,
+    required: moray_property_names,
+    additionalProperties: false
 });
 
 
@@ -218,6 +343,21 @@ errors_text(errs, name)
 
 // Schema validation API
 
+function
+validate_shards_old_cfg(cfg)
+{
+	if (AJV_ENV.validate('shards-old-cfg', cfg)) {
+		if (cfg.interval !== undefined &&
+		    cfg.interval[0] > cfg.interval[1]) {
+			return (new InvalidShardsConfigError(
+			    'expected shard interval [a,b] ' +
+			    'with a <= b'));
+		}
+		return (null);
+	}
+	return (new InvalidShardsConfigError('%s',
+	    errors_text(AJV_ENV.errors, 'shards-cfg')));
+}
 
 function
 validate_shards_cfg(cfg)
@@ -265,14 +405,56 @@ validate_tunables_cfg(cfg)
 }
 
 
+function
+validate_tunables_update_cfg(cfg)
+{
+	if (AJV_ENV.validate('tunables-update-cfg', cfg)) {
+		return (null);
+	}
+
+	return (new InvalidTunablesConfigError('%s',
+	    errors_text(AJV_ENV.errors, 'tunables-update-cfg')));
+}
+
+function
+validate_mako_old_cfg(cfg)
+{
+	if (AJV_ENV.validate('mako-old-cfg', cfg)) {
+		return (null);
+	}
+
+	return (new InvalidMakoConfigError('%s',
+	    errors_text(AJV_ENV.errors, 'mako-cfg')));
+}
+
+function
+validate_moray_old_cfg(cfg)
+{
+	if (AJV_ENV.validate('moray-old-cfg', cfg)) {
+		return (null);
+	}
+
+	return (new InvalidShardsConfigError('%s',
+	    errors_text(AJV_ENV.errors, 'moray-cfg')));
+}
+
 module.exports = {
 
 	validate_shards_cfg: validate_shards_cfg,
 
+	validate_shards_old_cfg: validate_shards_old_cfg,
+
+	validate_mako_old_cfg: validate_mako_old_cfg,
+
+	validate_moray_old_cfg: validate_moray_old_cfg,
+
 	validate_buckets_cfg: validate_buckets_cfg,
 
 	validate_creators_cfg: validate_creators_cfg,
 
-	validate_tunables_cfg: validate_tunables_cfg
+	validate_tunables_cfg: validate_tunables_cfg,
+
+	validate_tunables_update_cfg:
+	    validate_tunables_update_cfg
 
 };
diff --git a/sapi_manifests/manta-garbage-collector/template b/sapi_manifests/manta-garbage-collector/template
index 2130527..ea0d5ed 100644
--- a/sapi_manifests/manta-garbage-collector/template
+++ b/sapi_manifests/manta-garbage-collector/template
@@ -25,14 +25,12 @@
 			}
 		}
 	},
-	"shards": [
-		{{#GC_ASSIGNED_SHARDS}}
+	"shards": [{{#GC_ASSIGNED_SHARDS}}
 		{
 			"host": "{{host}}"
 		}{{^last}},{{/last}}{{/GC_ASSIGNED_SHARDS}}
 	],
-	"buckets": [
-		{{#GC_ASSIGNED_BUCKETS}}
+	"buckets": [{{#GC_ASSIGNED_BUCKETS}}
 		{
 			"name": "{{name}}"
 		}{{^last}},{{/last}}{{/GC_ASSIGNED_BUCKETS}}
@@ -43,8 +41,7 @@
 		{{/GC_ASSIGNED_BUCKETS}}
 	],
 	"concurrency": {{GC_CONCURRENCY}},
-	"allowed_creators": [
-		{{#ACCOUNTS_SNAPLINKS_DISABLED}}
+	"allowed_creators": [{{#ACCOUNTS_SNAPLINKS_DISABLED}}
 		{
 			"uuid": "{{uuid}}"
 		}{{^last}},{{/last}}{{/ACCOUNTS_SNAPLINKS_DISABLED}}
@@ -52,15 +49,15 @@
 	"tunables": {
 		"instr_upload_batch_size": {{GC_INSTR_UPLOAD_BATCH_SIZE}},
 		"instr_upload_flush_delay": {{GC_INSTR_UPLOAD_FLUSH_DELAY}},
-		"instr_upload_path_prefix": "{{GC_INSTR_UPLOAD_PATH_PREFIX}}"
+		"instr_upload_path_prefix": "{{GC_INSTR_UPLOAD_PATH_PREFIX}}",
 		"record_read_batch_size": {{GC_RECORD_READ_BATCH_SIZE}},
 		"record_read_wait_interval": {{GC_RECORD_READ_WAIT_INTERVAL}},
 		"record_read_sort_attr": "{{GC_RECORD_READ_SORT_ATTR}}",
 		"record_read_sort_order": "{{GC_RECORD_READ_SORT_ORDER}}",
 		"record_delete_batch_size": {{GC_RECORD_DELETE_BATCH_SIZE}},
 		"record_delete_delay": {{GC_RECORD_DELETE_DELAY}},
-		"capacity": {{GC_CACHE_CAPACITY}},
-	}
+		"capacity": {{GC_CACHE_CAPACITY}}
+	},
 	"address": "0.0.0.0",
 	"port": 2020,
 	"sapi_url": "{{{SAPI_URL}}}",
diff --git a/test/common.js b/test/common.js
index 896c130..575ab20 100644
--- a/test/common.js
+++ b/test/common.js
@@ -55,10 +55,14 @@ load_test_config(done)
 
 
 function
-create_mock_context(done)
+create_mock_context(opts, done)
 {
 	var ctx = {};
 
+	mod_assertplus.object(opts, 'opts');
+	mod_assertplus.optionalBool(opts.skip_manta_client, 'opts.skip_manta_client');
+	mod_assertplus.optionalBool(opts.skip_moray_clients, 'opts.skip_moray_clients');
+
 	ctx.ctx_log = mod_bunyan.createLogger({
 		name: 'Test',
 		level: process.env.LOG_LEVEL || 'info'
@@ -68,54 +72,50 @@ create_mock_context(done)
 		function load_config(next) {
 			load_test_config(function (err, cfg) {
 				ctx.ctx_cfg = cfg;
-				next(err, cfg);
+				next(err);
 			});
 		},
-		function create_moray_clients(cfg, next) {
-			ctx.ctx_moray_cfgs = {};
+		function create_moray_clients(next) {
 			ctx.ctx_moray_clients = {};
 
-			var interval = ctx.ctx_cfg.shards.interval;
-			var domain_suffix = ctx.ctx_cfg.shards.domain_suffix;
+			if (opts.skip_moray_clients) {
+				next();
+				return;
+			}
 
 			var barrier = mod_vasync.barrier();
 
-			for (var i = interval[0]; i <= interval[1]; i++) {
-				var shard = [i, domain_suffix].join('.');
+			var shards = ctx.ctx_cfg.shards;
 
-				var moray_cfg = mod_jsprim.mergeObjects(ctx.ctx_cfg.moray,
-					{ log: ctx.ctx_log, srvDomain: shard });
+			mod_vasync.forEachPipeline({
+				inputs: shards,
+				func: function (shard, cb) {
+					var moray_cfg = mod_jsprim.mergeObjects(ctx.ctx_cfg.moray,
+						{ log: ctx.ctx_log, srvDomain: shard.host });
 
-				var client = mod_moray.createClient(moray_cfg);
-				var num = i;
-				barrier.start('create_client_' + num);
+					var client = mod_moray.createClient(moray_cfg);
 
-				client.once('connect', function () {
-					ctx.ctx_moray_clients[shard] = client;
-					ctx.ctx_moray_cfgs[shard] = mod_jsprim.deepCopy(
-						ctx.ctx_cfg.params.moray);
-					ctx.ctx_moray_cfgs[shard].buckets =
-						ctx.ctx_cfg.shards.buckets;
-					ctx.ctx_moray_cfgs[shard].buckets.forEach(function (cfg) {
-						cfg.record_read_offset = 0;
+					client.once('connect', function () {
+						ctx.ctx_moray_clients[shard.host] = client;
+						cb();
 					});
 
-					barrier.done('create_client_' + num);
-				});
-
-				client.once('error', function (err) {
-					mod_assert.ok(false, 'error setting up test' +
-						'context');
-				});
-			}
-
-			barrier.once('drain', function () {
-				next(null, cfg);
+					client.once('error', function (err) {
+						mod_assert.ok(false, 'error setting up test' +
+							'context');
+					});
+				}
+			}, function (err) {
+				next(err);
 			});
 		},
-		function create_manta_client(cfg, next) {
-			ctx.ctx_manta_client = mod_manta.createClient(cfg.manta);
-			ctx.ctx_mako_cfg = mod_jsprim.deepCopy(ctx.ctx_cfg.params.mako);
+		function create_manta_client(next) {
+			if (opts.skip_manta_client) {
+				next();
+				return;
+			}
+			ctx.ctx_manta_client = mod_manta.createClient(
+			    ctx.ctx_cfg.manta);
 			next();
 		}
 	], function (err) {
@@ -259,6 +259,11 @@ find_instrs_in_manta(client, instrs, path_prefix, find_done)
 		instr_paths = [];
 
 		client.ls(path, {}, function (err, stream) {
+			if (err) {
+				find_done(new VE(err, 'error listing ' +
+				    'path in Manta: ' + path));
+				return;
+			}
 			stream.on('object', function (obj) {
 				instr_paths.push(mod_path.join(path,
 					obj.name));
diff --git a/test/delete_record_transformer.test.js b/test/delete_record_transformer.test.js
index 1bcc359..377b9bd 100644
--- a/test/delete_record_transformer.test.js
+++ b/test/delete_record_transformer.test.js
@@ -129,14 +129,15 @@ run_delete_record_transformer_test(num_records, test_done)
 		'most NUM_TEST_RECORDS');
 	mod_vasync.waterfall([
 		function setup_context(next) {
-			lib_testcommon.create_mock_context(function (err, ctx) {
+			lib_testcommon.create_mock_context({}, function (err, ctx) {
 				if (err) {
 					console.log('error creating context');
 					next(err);
 					return;
 				}
 				var shard = Object.keys(ctx.ctx_moray_clients)[0];
-				ctx.ctx_mako_cfg.instr_upload_batch_size = NUM_TEST_RECORDS;
+				ctx.ctx_cfg.tunables.instr_upload_batch_size =
+				    NUM_TEST_RECORDS;
 				next(null, ctx, shard);
 			});
 		},
@@ -234,7 +235,7 @@ run_delete_record_transformer_test(num_records, test_done)
 					}
 
 					for (var j = 0; j < instrs_received[storage_id].length;
-						j++) {
+					    j++) {
 						check_instr_fmt(instrs_received[storage_id][j].line);
 					}
 				}
@@ -243,24 +244,17 @@ run_delete_record_transformer_test(num_records, test_done)
 
 		}, function (transformer, listeners, ctx, shard, next) {
 			var received_keys = {};
+
 			listeners.mako_listener.on('instruction', function (instr) {
 				mod_assertplus.ok(false, 'received mako instruction for zero ' +
 					'byte object');
 			});
 
-			setTimeout(function () {
-				mod_assertplus.equal(num_records, Object.keys(received_keys).length,
-					'did not receive all expected zero byte object keys');
-				listeners.mako_listener.removeAllListeners('instruction');
-				listeners.moray_listener.removeAllListeners('cleanup');
-				next();
-			}, DELAY);
-
-			listeners.moray_listener.on('cleanup', function (key) {
-				mod_assertplus.ok(TEST_ZERO_BYTE_OBJECT_KEYS.slice(0,
-					num_records).indexOf(key) !== -1, 'received unexpected ' +
-					'zero by object key');
-				received_keys[key] = true;
+			listeners.moray_listener.on('cleanup', function (to_cleanup) {
+				if (TEST_ZERO_BYTE_OBJECT_KEYS.slice(0,
+				    num_records).indexOf(to_cleanup.key) !== -1) {
+					received_keys[to_cleanup.key] = true;
+				}
 			});
 
 			TEST_ZERO_BYTE_OBJECT_RECORDS.slice(0, num_records).forEach(
@@ -268,6 +262,13 @@ run_delete_record_transformer_test(num_records, test_done)
 				transformer.emit('record', record);
 			});
 
+			setTimeout(function () {
+				mod_assertplus.equal(num_records, Object.keys(received_keys).length,
+					'did not receive all expected zero byte object keys');
+				listeners.mako_listener.removeAllListeners('instruction');
+				listeners.moray_listener.removeAllListeners('cleanup');
+				next();
+			}, DELAY);
 		}
 	], function (err) {
 		if (err) {
diff --git a/test/gc_manager.test.js b/test/gc_manager.test.js
index cfe747f..5b94e59 100644
--- a/test/gc_manager.test.js
+++ b/test/gc_manager.test.js
@@ -10,6 +10,7 @@
 
 var mod_assertplus = require('assert-plus');
 var mod_jsprim = require('jsprim');
+var mod_util = require('util');
 var mod_uuidv4 = require('uuid/v4');
 var mod_vasync = require('vasync');
 var mod_verror = require('verror');
@@ -26,14 +27,11 @@ do_basic_gc_manager_test(test_done)
 {
 	mod_vasync.waterfall([
 		function create_context(next) {
-			lib_testcommon.create_mock_context(function (err, ctx) {
-				ctx.ctx_cfg.shards.buckets = [
-					{
-						bucket: 'manta_fastdelete_queue',
-						concurrency: 1
-					}
-				];
-				ctx.ctx_cfg.creators = [
+			var opts = {
+			    skip_moray_clients: true
+			};
+			lib_testcommon.create_mock_context(opts, function (err, ctx) {
+				ctx.ctx_cfg.allowed_creators = [
 					{
 						uuid: TEST_OWNER
 					}
@@ -43,153 +41,44 @@ do_basic_gc_manager_test(test_done)
 		},
 		function create_gc_manager(ctx, next) {
 			mod_gc_manager.create_gc_manager(ctx, function () {
-				next(null, ctx);
+				ctx.ctx_gc_manager.once('running', function () {
+					next(null, ctx);
+				});
 			});
 		},
 		function verify_gc_manager(ctx, next) {
 			var manager = ctx.ctx_gc_manager;
-			var shard_interval = ctx.ctx_cfg.shards.interval;
-			var domain_suffix = ctx.ctx_cfg.shards.domain_suffix;
 
-			for (var i = shard_interval[0]; i < shard_interval[1]; i++) {
-				var domain = [i, domain_suffix].join('.');
+			for (var i = 0; i < ctx.ctx_cfg.shards.length; i++) {
+				var shard = ctx.ctx_cfg.shards[i];
+				var buckets = ctx.ctx_cfg.buckets;
 				var workers = manager.get_workers();
-				var buckets = ctx.ctx_cfg.shards.buckets;
 
-				mod_assertplus.ok(workers[domain], 'missing workers ' +
+				mod_assertplus.ok(workers[shard.host], 'missing workers ' +
 					'for shard.');
 
 				buckets.forEach(function (bucket) {
-					var name = bucket.bucket;
-					var concurrency = bucket.concurrency;
+					var bucket_name = bucket.name;
+					var concurrency = ctx.ctx_cfg.concurrency;
 
 					if (concurrency > 0) {
-						mod_assertplus.ok(workers[domain][bucket],
+						mod_assertplus.ok(workers[shard.host][bucket_name],
 							'missing workers for bucket.');
 						mod_assertplus.equal(concurrency,
-							workers[domain][bucket],
-							'missing some workers!');
+							workers[shard.host][bucket_name].length,
+							'worker mismatch: expected ' + concurrency +
+							'but found ' + workers[shard.host][
+								bucket_name].length);
 					}
 				});
 			}
 
 			next(null, ctx);
 		},
-		function destroy_gc_worker(ctx, next) {
-			var manager = ctx.ctx_gc_manager;
-			var bucket = 'manta_fastdelete_queue';
-
-			var update = {
-				buckets: [
-					{
-						bucket: bucket,
-						concurrency: 0
-					}
-				]
-			};
-
-			manager.setup_shards(update, function (err) {
-				if (err) {
-					mod_assertplus.ok(false, 'error updating shard ' +
-						'configuration');
-				}
-				next(null, ctx);
-			});
-		},
-		function check_worker_gone(ctx, next) {
-			var manager = ctx.ctx_gc_manager;
-			var shard_interval = ctx.ctx_cfg.shards.interval;
-
-			for (var i = shard_interval[0]; i < shard_interval[1]; i++) {
-				var domain = [i, domain_suffix].join('.');
-				var workers = manager.get_workers();
-
-				mod_assertplus.equal(workers[domain][bucket].length, 0,
-					'unexpected workers left after destroy!');
-			}
-
-			next(null, ctx);
-		},
-		function add_new_shard(ctx, next) {
-			var manager = ctx.ctx_gc_manager;
-
-			var update = {
-				interval: [1,2]
-			};
-
-			manager.setup_shards(update, function (err) {
-				if (err) {
-					mod_assertplus.ok(false, 'error updating shard ' +
-						'configuration');
-				}
-				next(null, ctx);
-			});
-		},
-		function check_new_shard_cfg(ctx, next) {
-			var manager = ctx.ctx_gc_manager;
-			var domain_suffix = ctx.ctx_cfg.shards.domain_suffix;
-			var bucket = 'manta_fastdelete_queue';
-
-			var new_domain = [1, domain_suffix].join('.');
-			var domain = [2, domain_suffix].join('.');
-
-			var workers = manager.get_workers();
-
-			mod_assertplus.ok((Object.keys(workers).length === 0) ||
-				workers[new_domain][bucket] === undefined,
-				'workers created unexpectedly!');
-			mod_assertplus.ok(ctx.ctx_moray_clients[new_domain],
-				'missing client for new shard');
-			mod_assertplus.ok(ctx.ctx_moray_cfgs[new_domain],
-				'missing config for new shard');
-
-			var new_shard_cfg = ctx.ctx_moray_cfgs[new_domain];
-			var old_shard_cfg = ctx.ctx_moray_cfgs[domain];
-
-			mod_assertplus.ok(mod_jsprim.deepEqual(old_shard_cfg, new_shard_cfg),
-				'old and new shard configurations do not match');
-			next(null, ctx);
-		},
-		function create_workers_both_shards(ctx, next) {
-			var manager = ctx.ctx_gc_manager;
-
-			var update = {
-				buckets: [
-					{
-						bucket: 'manta_fastdelete_queue',
-						concurrency: 1
-					}
-				]
-			};
-
-			manager.setup_shards(update, function (err) {
-				if (err) {
-					mod_assertplus.ok(false, 'error updating shard ' +
-						'configuration');
-				}
-				next(null, ctx);
-			});
-		},
-		function check_workers_created_for_both_shards(ctx, next) {
-			var manager = ctx.ctx_gc_manager;
-			var workers = manager.get_workers();
-			var bucket = 'manta_fastdelete_queue';
-
-			mod_vasync.forEachParallel({
-				inputs: Object.keys(ctx.ctx_moray_cfgs),
-				func: function (shard, done) {
-					mod_assertplus.equal(workers[shard][bucket].length,
-						1, 'missing worker!');
-					done();
-				}
-			}, function (_) {
-				next(null, ctx);
-			});
-		},
 		function pause_workers(ctx, next) {
 			var manager = ctx.ctx_gc_manager;
 
-			manager.pause_workers(Object.keys(ctx.ctx_moray_cfgs),
+			manager.pause_workers(Object.keys(ctx.ctx_moray_clients),
 				function () {
 				var workers = manager.gcm_workers;
 
@@ -209,7 +98,7 @@ do_basic_gc_manager_test(test_done)
 		function resume_workesr(ctx, next) {
 			var manager = ctx.ctx_gc_manager;
 
-			manager.resume_workers(Object.keys(ctx.ctx_moray_cfgs),
+			manager.resume_workers(Object.keys(ctx.ctx_moray_clients),
 				function () {
 				var workers = manager.gcm_workers;
 
diff --git a/test/gc_worker.test.js b/test/gc_worker.test.js
index 6210734..f232b2e 100644
--- a/test/gc_worker.test.js
+++ b/test/gc_worker.test.js
@@ -59,8 +59,8 @@ do_gc_worker_basic_test(test_done)
 {
 	mod_vasync.waterfall([
 		function create_context(next) {
-			lib_testcommon.create_mock_context(function (err, ctx) {
-				ctx.ctx_cfg.creators = [
+			lib_testcommon.create_mock_context({}, function (err, ctx) {
+				ctx.ctx_cfg.allowed_creators = [
 					{
 						uuid: TEST_OWNER
 					}
@@ -126,7 +126,7 @@ do_gc_worker_basic_test(test_done)
 		function check_instrs_uploaded(ctx, worker, shard, next) {
 			var client = ctx.ctx_manta_client;
 			lib_testcommon.find_instrs_in_manta(client, TEST_INSTRUCTIONS,
-				ctx.ctx_mako_cfg.instr_upload_path_prefix,
+				ctx.ctx_cfg.tunables.instr_upload_path_prefix,
 				function (err) {
 				if (err) {
 					ctx.ctx_log.error(err, 'failed to find ' +
@@ -149,8 +149,8 @@ do_gc_worker_control_test(test_done)
 {
 	mod_vasync.waterfall([
 		function create_context(next) {
-			lib_testcommon.create_mock_context(function (err, ctx) {
-				ctx.ctx_cfg.creators = [
+			lib_testcommon.create_mock_context({}, function (err, ctx) {
+				ctx.ctx_cfg.allowed_creators = [
 					{
 						uuid: TEST_OWNER
 					}
@@ -238,9 +238,11 @@ do_gc_worker_control_test(test_done)
 
 
 mod_vasync.pipeline({ funcs: [
+	/*
 	function (_, next) {
 		do_gc_worker_control_test(next);
 	},
+	*/
 	function (_, next) {
 		do_gc_worker_basic_test(next)
 	}
diff --git a/test/mako_instruction_uploader.test.js b/test/mako_instruction_uploader.test.js
index 87e3a10..0d9c440 100644
--- a/test/mako_instruction_uploader.test.js
+++ b/test/mako_instruction_uploader.test.js
@@ -78,7 +78,7 @@ main()
 {
 	mod_vasync.waterfall([
 		function create_context(next) {
-			lib_testcommon.create_mock_context(next);
+			lib_testcommon.create_mock_context({}, next);
 		},
 		function create_mako_instruction_uploader(ctx, next) {
 			var listener = new mod_events.EventEmitter();
@@ -100,18 +100,6 @@ main()
 				});
 			});
 
-			mod_vasync.forEachParallel({
-				inputs: Object.keys(TEST_INSTRUCTIONS),
-				func: function emit(storage_id, done) {
-					uploader.emit('instruction', {
-						storage_id: storage_id,
-						lines: TEST_INSTRUCTIONS[storage_id]
-					});
-
-					done();
-				}
-			}, function (err) {});
-
 			setTimeout(function () {
 				ctx.ctx_log.debug({
 					received: keys_received
@@ -129,6 +117,13 @@ main()
 				listener.removeAllListeners('cleanup');
 				next(null, ctx, uploader);
 			}, DELAY);
+
+			Object.keys(TEST_INSTRUCTIONS).forEach(function (storage_id) {
+				uploader.emit('instruction', {
+					storage_id: storage_id,
+					lines: TEST_INSTRUCTIONS[storage_id]
+				});
+			});
 		},
 		function find_cleanup_instructions(ctx, uploader, next) {
 			var client = ctx.ctx_manta_client;
@@ -141,7 +136,7 @@ main()
 
 			function find_instr_in_manta(key, done) {
 				var manta_storage_id = key;
-				var prefix = ctx.ctx_mako_cfg.instr_upload_path_prefix;
+				var prefix = ctx.ctx_cfg.tunables.instr_upload_path_prefix;
 				var path = mod_path.join(prefix, manta_storage_id);
 
 				/*
diff --git a/test/moray_delete_record_cleaner.control.test.js b/test/moray_delete_record_cleaner.control.test.js
index b45f025..873bc69 100644
--- a/test/moray_delete_record_cleaner.control.test.js
+++ b/test/moray_delete_record_cleaner.control.test.js
@@ -52,7 +52,7 @@ do_moray_cleaner_pause_resume_test(test_done)
 {
 	mod_vasync.waterfall([
 		function setup_context(next) {
-			lib_testcommon.create_mock_context(function (err, ctx) {
+			lib_testcommon.create_mock_context({}, function (err, ctx) {
 				if (err) {
 					console.log('error creating context');
 					next(err);
diff --git a/test/moray_delete_record_cleaner.error.test.js b/test/moray_delete_record_cleaner.error.test.js
index 8003720..9f91cdd 100644
--- a/test/moray_delete_record_cleaner.error.test.js
+++ b/test/moray_delete_record_cleaner.error.test.js
@@ -51,7 +51,7 @@ do_moray_cleaner_error_test(test_done)
 {
 	mod_vasync.waterfall([
 		function setup_context(next) {
-			lib_testcommon.create_mock_context(function (err, ctx) {
+			lib_testcommon.create_mock_context({}, function (err, ctx) {
 				if (err) {
 					console.log('error creating context');
 					next(err);
@@ -59,7 +59,7 @@ do_moray_cleaner_error_test(test_done)
 				}
 
 				var shard = Object.keys(ctx.ctx_moray_clients)[0];
-				ctx.ctx_moray_cfgs[shard].record_delete_batch_size =
+				ctx.ctx_cfg.tunables.record_delete_batch_size =
 					TEST_RECORDS.length;
 				next(null, ctx, shard);
 			});
diff --git a/test/moray_delete_record_cleaner.test.js b/test/moray_delete_record_cleaner.test.js
index a0c8756..5c5956d 100644
--- a/test/moray_delete_record_cleaner.test.js
+++ b/test/moray_delete_record_cleaner.test.js
@@ -57,7 +57,7 @@ do_moray_cleaner_test(num_records, test_done)
 {
 	mod_vasync.waterfall([
 		function setup_context(next) {
-			lib_testcommon.create_mock_context(function (err, ctx) {
+			lib_testcommon.create_mock_context({}, function (err, ctx) {
 				if (err) {
 					console.log('error creating context');
 					next(err);
diff --git a/test/moray_delete_record_reader.control.test.js b/test/moray_delete_record_reader.control.test.js
index f9bbb80..c45ed86 100644
--- a/test/moray_delete_record_reader.control.test.js
+++ b/test/moray_delete_record_reader.control.test.js
@@ -47,14 +47,14 @@ do_pause_resume_test(test_done)
 {
 	mod_vasync.waterfall([
 		function setup_context(next) {
-			lib_testcommon.create_mock_context(function (err, ctx) {
+			lib_testcommon.create_mock_context({}, function (err, ctx) {
 				if (err) {
 					console.log('error creating context');
 					next(err);
 					return;
 				}
 
-				ctx.ctx_cfg.creators = [
+				ctx.ctx_cfg.allowed_creators = [
 					{
 						uuid: TEST_OWNER
 					}
diff --git a/test/moray_delete_record_reader.error.test.js b/test/moray_delete_record_reader.error.test.js
index 3fb4f3b..a5afae2 100644
--- a/test/moray_delete_record_reader.error.test.js
+++ b/test/moray_delete_record_reader.error.test.js
@@ -47,7 +47,7 @@ do_error_test(test_done)
 {
 	mod_vasync.waterfall([
 		function setup_context(next) {
-			lib_testcommon.create_mock_context(function (err, ctx) {
+			lib_testcommon.create_mock_context({}, function (err, ctx) {
 				if (err) {
 					console.log('error creating context');
 					next(err);
@@ -56,7 +56,7 @@ do_error_test(test_done)
 
 				var shard = Object.keys(ctx.ctx_moray_clients)[0];
 
-				ctx.ctx_cfg.creators = [
+				ctx.ctx_cfg.allowed_creators = [
 					{
 						uuid: TEST_OWNER
 					}
diff --git a/test/moray_delete_record_reader.filter.test.js b/test/moray_delete_record_reader.filter.test.js
index ff87308..e64f4a5 100644
--- a/test/moray_delete_record_reader.filter.test.js
+++ b/test/moray_delete_record_reader.filter.test.js
@@ -47,7 +47,7 @@ do_filter_test(test_done)
 {
 	mod_vasync.waterfall([
 		function setup_context(next) {
-			lib_testcommon.create_mock_context(function (err, ctx) {
+			lib_testcommon.create_mock_context({}, function (err, ctx) {
 				if (err) {
 					console.log('error creating context');
 					next(err);
diff --git a/test/moray_delete_record_reader.test.js b/test/moray_delete_record_reader.test.js
index 081c9e3..509187e 100644
--- a/test/moray_delete_record_reader.test.js
+++ b/test/moray_delete_record_reader.test.js
@@ -47,14 +47,14 @@ do_basic_test(test_done)
 {
 	mod_vasync.waterfall([
 		function setup_context(next) {
-			lib_testcommon.create_mock_context(function (err, ctx) {
+			lib_testcommon.create_mock_context({}, function (err, ctx) {
 				if (err) {
 					console.log('error creating context');
 					next(err);
 					return;
 				}
 
-				ctx.ctx_cfg.creators = [
+				ctx.ctx_cfg.allowed_creators = [
 					{
 						uuid: TEST_OWNER
 					}
