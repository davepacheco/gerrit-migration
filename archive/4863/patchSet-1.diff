From 567269e7e1d0edfad7979791985274003fc2a6b8 Mon Sep 17 00:00:00 2001
From: Jan Wyszynski <jan.wyszynski@joyent.com>
Date: Fri, 14 Sep 2018 01:36:19 +0000
Subject: [PATCH] MANTA-3948 garbage-collector should not assume numeric shard
 names

---
 Makefile                                      |   5 +-
 cmd/server.js                                 | 133 +------
 etc/config.json                               | 128 +++----
 etc/testconfig.json                           | 122 +++---
 lib/common.js                                 |   2 -
 lib/delete_record_transformer.js              |  20 +-
 lib/errors.js                                 |  18 +-
 lib/gc_manager.js                             | 359 ++----------------
 lib/http_server.js                            | 193 +---------
 lib/mako_instruction_uploader.js              |  25 +-
 lib/moray_delete_record_cleaner.js            |  50 +--
 lib/moray_delete_record_reader.js             |  59 ++-
 lib/schema.js                                 | 296 +++++----------
 .../manta-garbage-collector/template          |  54 +--
 test/common.js                                |  48 +--
 test/delete_record_transformer.test.js        |   2 +-
 test/gc_manager.test.js                       | 146 +------
 test/gc_worker.test.js                        |   8 +-
 test/mako_instruction_uploader.test.js        |   2 +-
 .../moray_delete_record_cleaner.error.test.js |   2 +-
 ...moray_delete_record_reader.control.test.js |   7 +-
 test/moray_delete_record_reader.error.test.js |   2 +-
 test/moray_delete_record_reader.test.js       |   2 +-
 23 files changed, 422 insertions(+), 1261 deletions(-)

diff --git a/Makefile b/Makefile
index b13d24b..e003405 100644
--- a/Makefile
+++ b/Makefile
@@ -117,8 +117,9 @@ JSSTYLE_FILES = 		$(JS_FILES)
 
 JSL_CONF_NODE = 		tools/jsl.node.conf
 
-JSON_FILES = 			package.json
-
+JSON_FILES = 			package.json \
+				etc/config.json \
+				etc/testconfig.json
 
 .PHONY: test
 test: | $(CATEST)
diff --git a/cmd/server.js b/cmd/server.js
index 2e9dd6e..fe540cf 100644
--- a/cmd/server.js
+++ b/cmd/server.js
@@ -81,25 +81,25 @@ load_config(ctx, done)
 			return;
 		}
 
-		schema_err = mod_schema.validate_creators_cfg(
-			out.creators);
+		schema_err = mod_schema.validate_buckets_cfg(
+			out.buckets);
 		if (schema_err) {
-			done(new VE(schema_err, 'malformed creators config'));
+			done(new VE(schema_err, 'malformed buckets ' +
+				'configuration'));
 			return;
 		}
 
-		schema_err = mod_schema.validate_moray_cfg(
-			out.params.moray);
+		schema_err = mod_schema.validate_creators_cfg(
+			out.allowed_creators);
 		if (schema_err) {
-			done(new VE(schema_err, 'malformed moray ' +
-				'configuration'));
+			done(new VE(schema_err, 'malformed creators config'));
 			return;
 		}
 
-		schema_err = mod_schema.validate_mako_cfg(
-			out.params.mako);
+		schema_err = mod_schema.validate_tunables_cfg(
+			out.tunables);
 		if (schema_err) {
-			done(new VE(schema_err, 'malformed mako ' +
+			done(new VE(schema_err, 'malformed tunables ' +
 				'configuration'));
 			return;
 		}
@@ -172,112 +172,6 @@ load_manta_application(ctx, done)
 }
 
 
-function
-load_index_shard_range(ctx, done)
-{
-	var index_shards = ctx.ctx_manta_app.metadata['INDEX_MORAY_SHARDS'];
-	mod_assertplus.array(index_shards, 'index_shards');
-	mod_assertplus.ok(ctx.ctx_cfg.index_shard_lo === undefined,
-		'unexpected context configuration: \'index_shard_lo\'');
-	mod_assertplus.ok(ctx.ctx_cfg.index_shard_hi === undefined,
-		'unexpected context configuration: \'index_shard_hi\'');
-
-	if (index_shards.length === 0) {
-		done(new VE('Manta application has no index shards.'));
-		return;
-	}
-
-	/*
-	 * Today, garbage-collector instances are assigned shards in contiguous
-	 * inclusive ranges like [2,8]. This assignment scheme relies on the
-	 * convention that index shards in production deployments are given
-	 * consecutive numeric shard names: 2.moray.{{DOMAIN}},
-	 * 3.moray.{{DOMAIN}} ... 97.moray.{{DOMAIN}}. In order to ensure that
-	 * the collector doesn't attempt to process records for non-index
-	 * shards, it loads the complete index shard range from the SAPI Manta
-	 * application below.
-	 *
-	 * The list of shards in the SAPI Manta application's INDEX_MORAY_SHARDS
-	 * metadata array are not ordered. It is also not the case that the
-	 * shard whose name is the highest numeric value in the list contains
-	 * the "last" field (the "last" field is syntax required by hogan.js
-	 * template engine).
-	 *
-	 * In order to correctly filter operator requests to GC from shards that
-	 * are not index shards, we retrieve the full range of index shards by
-	 * finding the lowest and highest valued numeric shard names in the
-	 * list. Every time a request to change the range of shards a collector
-	 * should GC from is made, a check is done to ensure the new range is a
-	 * subset of the range of full index shards retrieved below.
-	 *
-	 * There is future work planned to remove the assumption of consecutive
-	 * numeric index shard names from the garbage-collector.
-	 */
-	var shard_url_re = new RegExp('^(\\d+).' +
-		ctx.ctx_cfg.shards.domain_suffix + '$');
-
-	function parse_shard_number_from_url(shard_url, cb) {
-		var results = shard_url_re.exec(shard_url);
-		if (results === null) {
-			cb(new VE('Unexpected shard url \'%s\'. Collector ' +
-				'expects shard names matching \'%s\'.',
-				shard_url, shard_url_re.toString()));
-			return;
-		}
-		/*
-		 * RegExp.exec puts places the single matched group at index
-		 * 1 of the 'result' array.
-		 */
-		var shard_num = parseInt(results[1], 10);
-
-		if (isNaN(shard_num)) {
-			cb(new VE('Unexpected shard url \'%s\', collector ' +
-				'expects consecutive numeric shard names ' +
-				'matching \'%s\'.', shard_url,
-				shard_url_re.toString()));
-			return;
-		}
-
-		cb(null, shard_num);
-	}
-
-	function parse_shard_url_and_update_range(shard, next) {
-		parse_shard_number_from_url(shard.host,
-			function (err, shard_num) {
-			if (err) {
-				next(err);
-				return;
-			}
-			if (ctx.ctx_cfg.index_shard_lo === undefined ||
-			    ctx.ctx_cfg.index_shard_lo > shard_num) {
-				ctx.ctx_cfg.index_shard_lo = shard_num;
-			}
-
-			if (ctx.ctx_cfg.index_shard_hi === undefined ||
-			    ctx.ctx_cfg.index_shard_hi < shard_num) {
-				ctx.ctx_cfg.index_shard_hi = shard_num;
-			}
-			next();
-		});
-	}
-
-	mod_vasync.forEachPipeline({
-		inputs: index_shards,
-		func: parse_shard_url_and_update_range
-	}, function (err) {
-		if (err) {
-			done(err);
-			return;
-		}
-		ctx.ctx_log.info({
-			lo: ctx.ctx_cfg.index_shard_lo,
-			hi: ctx.ctx_cfg.index_shard_hi
-		}, 'Discovered index shard range');
-		done();
-	});
-}
-
-
 function
 setup_manta_client(ctx, done)
 {
@@ -290,7 +184,6 @@ setup_manta_client(ctx, done)
 	ctx.ctx_manta_client = mod_manta.createClient(manta_cfg);
 	ctx.ctx_log.debug('created manta client');
 
-	ctx.ctx_mako_cfg = mod_jsprim.deepCopy(ctx.ctx_cfg.params.mako);
 	setImmediate(done);
 }
 
@@ -413,12 +306,6 @@ main()
 		 */
 		load_manta_application,
 
-		/*
-		 * We only allow gc to process records on index shards. These
-		 * are the only shards that have a Manta table.
-		 */
-		load_index_shard_range,
-
 		/*
 		 * Create one manta client.
 		 */
diff --git a/etc/config.json b/etc/config.json
index 47455bf..2aedc9b 100644
--- a/etc/config.json
+++ b/etc/config.json
@@ -1,72 +1,66 @@
 {
-	"bunyan": {
-		"level": "debug"
-	},
-	"manta": {
-		"url": "https://manta.orbit.example.com",
-		"user": "poseidon",
-		"sign": {
-			"key": "/root/.ssh/id_rsa",
-			"keyId": "58:bf:5f:e0:91:0a:3a:b3:64:4d:06:01:0d:fa:92:0b"
-		},
-		"retry": {
-			"attempts": 5,
-			"minTimeout": 1000
-		},
-		"connectTimeout": 1000,
-		"rejectUnauthorized": false
-	},
-	"moray": {
-		"options": {
-			"cueballOptions": {
-				"resolvers": [
-					"nameservice.orbit.example.com"
-				],
-				"target": 3,
-				"maximum": 3
-			}
-		}
-	},
-	"shards": {
-		"domain_suffix": "moray.orbit.example.com",
-		"interval": [0, 0],
-		"buckets": [
-			{
-				"bucket": "manta_fastdelete_queue",
-				"concurrency": 8
-			},
-			{
-				"bucket": "manta_delete_log",
-				"concurrency": 0
-			}
-		]
-	},
-	"creators": [
+        "bunyan": {
+                "level": "info"
+        },
+        "manta": {
+                "url": "https://manta.orbit.example.com",
+                "user": "poseidon",
+                "sign": {
+                        "key": "/root/.ssh/id_rsa",
+                        "keyId": "7e:6f:34:9c:ae:31:d2:07:f9:69:81:73:d4:f7:3b:09"
+                },
+                "retry": {
+                        "attempts": 5,
+                        "minTimeout": 1000
+                },
+                "connectTimeout": 1000,
+                "rejectUnauthorized": false
+        },
+        "moray": {
+                "options": {
+                        "cueballOptions": {
+                                "resolvers": [
+                                        "nameservice.orbit.example.com"
+                                ]
+                        }
+                }
+        },
+        "shards": [
 		{
-			"uuid": "edfb68bf-c9bd-c024-ed9a-f871d212d314"
-		}
-	],
-	"params": {
-		"mako": {
-			"instr_upload_batch_size": 512,
-			"instr_upload_flush_delay": 60000,
-			"instr_upload_path_prefix": "/poseidon/stor/manta_gc/mako"
+			"host": "1.moray.orbit.example.com"
 		},
-		"moray": {
-			"record_read_batch_size": 512,
-			"record_read_wait_interval": 0,
-			"record_read_sort_attr": "_mtime",
-			"record_read_sort_order": "ASC",
-			"record_delete_batch_size": 512,
-			"record_delete_delay": 1000
+		{
+			"host": "2.moray.orbit.example.com"
 		}
-	},
-	"address": "0.0.0.0",
-	"port": 2020,
-	"capacity": 10000,
-	"sapi_url": "http://sapi.coal-1.example.com",
-	"instance": "0e176aeb-3a6b-cf90-b846-9e1d293ac1ae",
-	"datacenter": "orbit.example.com",
-	"server_uuid": "5f183d10-b44a-ca1c-e5b7-bf9e9b940764",
-	"service_name": "garbage-collector"
+        ],
+        "buckets": [
+                {
+                        "name": "manta_fastdelete_queue"
+                }
+        ],
+        "concurrency": 1,
+        "allowed_creators": [
+                {
+                        "uuid": "2f1c9213-44ca-c7c5-a57b-a9deb14589c4"
+                }
+        ],
+        "tunables": {
+                "instr_upload_batch_size": 100,
+                "instr_upload_flush_delay": 30000,
+                "instr_upload_path_prefix": "/poseidon/stor/manta_gc/mako",
+                "record_read_batch_size": 50,
+                "record_read_wait_interval": 3000,
+                "record_read_sort_attr": "_mtime",
+                "record_read_sort_order": "ASC",
+                "record_delete_batch_size": 50,
+                "record_delete_delay": 1000,
+                "capacity": 1000000
+        },
+        "address": "0.0.0.0",
+        "port": 2020,
+        "sapi_url": "http://sapi.coal-1.example.com",
+        "instance": "6b6ad111-a4f4-4974-bb40-5699487e3d2a",
+        "server_uuid": "5f183d10-b44a-ca1c-e5b7-bf9e9b940764",
+        "service_name": "garbage-collector.orbit.example.com",
+        "datacenter": "coal-1"
 }
diff --git a/etc/testconfig.json b/etc/testconfig.json
index 684b0bf..17d65eb 100644
--- a/etc/testconfig.json
+++ b/etc/testconfig.json
@@ -1,66 +1,66 @@
 {
-	"manta": {
-		"url": "https://manta.orbit.example.com",
-		"user": "poseidon",
-		"sign": {
-			"key": "/root/.ssh/id_rsa",
-			"keyId": "58:bf:5f:e0:91:0a:3a:b3:64:4d:06:01:0d:fa:92:0b"
-		},
-		"retry": {
-			"attempts": 5,
-			"minTimeout": 1000
-		},
-		"connectTimeout": 1000,
-		"rejectUnauthorized": false
-	},
-	"moray": {
-		"options": {
-			"cueballOptions": {
-				"resolvers": [
-					"nameservice.orbit.example.com"
-				]
-			}
-		}
-	},
-	"shards": {
-		"domain_suffix": "moray.orbit.example.com",
-		"interval": [2,2],
-		"buckets": [
-			{
-				"bucket": "manta_fastdelete_queue",
-				"concurrency": 1
-			}
-		]
-	},
-	"creators": [
+        "bunyan": {
+                "level": "info"
+        },
+        "manta": {
+                "url": "https://manta.orbit.example.com",
+                "user": "poseidon",
+                "sign": {
+                        "key": "/root/.ssh/id_rsa",
+                        "keyId": "7e:6f:34:9c:ae:31:d2:07:f9:69:81:73:d4:f7:3b:09"
+                },
+                "retry": {
+                        "attempts": 5,
+                        "minTimeout": 1000
+                },
+                "connectTimeout": 1000,
+                "rejectUnauthorized": false
+        },
+        "moray": {
+                "options": {
+                        "cueballOptions": {
+                                "resolvers": [
+                                        "nameservice.orbit.example.com"
+                                ]
+                        }
+                }
+        },
+        "shards": [
 		{
-			"uuid": "edfb68bf-c9bd-c024-ed9a-f871d212d314"
+			"host": "2.moray.orbit.example.com"
 		}
-	],
-	"params": {
-		"mako": {
-			"concurrency": 1,
-			"instr_upload_batch_size": 50,
-			"instr_upload_flush_delay": 5000,
-			"instr_upload_path_prefix": "/poseidon/stor/manta_gc_test/mako"
+        ],
+        "buckets": [
+                {
+                        "name": "manta_fastdelete_queue"
+                }
+        ],
+        "concurrency": 1,
+        "allowed_creators": [
+		{
+			"uuid": "e22063ae-1ab6-6c1d-f4c9-cf02208e39cc"
 		},
-		"moray": {
-			"concurrency": 1,
-			"record_read_batch_size": 50,
-			"record_read_wait_interval": 5000,
-			"record_read_sort_attr": "_mtime",
-			"record_read_sort_order": "ASC",
-			"record_delete_batch_size": 50,
-			"record_delete_delay": 5000
-		}
-	},
-	"index_shard_lo": 1,
-	"index_shard_hi": 2,
-	"address": "0.0.0.0",
-	"port": 2020,
-	"capacity": 10000,
-	"instance": "0e176aeb-3a6b-cf90-b846-9e1d293ac1ae",
-	"datacenter": "orbit.example.com",
-	"server_uuid": "5f183d10-b44a-ca1c-e5b7-bf9e9b940764",
-	"service_name": "garbage-collector"
+                {
+                        "uuid": "2f1c9213-44ca-c7c5-a57b-a9deb14589c4"
+                }
+        ],
+        "tunables": {
+                "instr_upload_batch_size": 100,
+                "instr_upload_flush_delay": 1000,
+                "instr_upload_path_prefix": "/poseidon/stor/manta_gc_test/mako",
+                "record_read_batch_size": 50,
+                "record_read_wait_interval": 1000,
+                "record_read_sort_attr": "_mtime",
+                "record_read_sort_order": "ASC",
+                "record_delete_batch_size": 50,
+                "record_delete_delay": 1000,
+                "capacity": 1000000
+        },
+        "address": "0.0.0.0",
+        "port": 2020,
+        "sapi_url": "http://sapi.coal-1.example.com",
+        "instance": "6b6ad111-a4f4-4974-bb40-5699487e3d2a",
+        "server_uuid": "5f183d10-b44a-ca1c-e5b7-bf9e9b940764",
+        "service_name": "garbage-collector.orbit.example.com",
+        "datacenter": "coal-1"
 }
diff --git a/lib/common.js b/lib/common.js
index 4442bdb..d050f2d 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -63,8 +63,6 @@ create_moray_client(ctx, shard, done)
 
 		client.removeAllListeners('error');
 
-		mod_assertplus.ok(ctx.ctx_moray_clients[shard] === undefined,
-			'unexpected moray configuration while creating client');
 		done(null, client);
 	});
 
diff --git a/lib/delete_record_transformer.js b/lib/delete_record_transformer.js
index eeebed6..fc1d175 100644
--- a/lib/delete_record_transformer.js
+++ b/lib/delete_record_transformer.js
@@ -32,7 +32,6 @@ DeleteRecordTransformer(opts)
 
 	mod_assertplus.object(opts, 'opts');
 	mod_assertplus.object(opts.ctx, 'opts.ctx');
-	mod_assertplus.object(opts.ctx.ctx_mako_cfg, 'opts.ctx_mako_cfg');
 	mod_assertplus.object(opts.log, 'opts.log');
 	mod_assertplus.object(opts.moray_listener, 'opts.moray_listener');
 	mod_assertplus.object(opts.mako_listener, 'opts.mako_listener');
@@ -70,43 +69,38 @@ DeleteRecordTransformer(opts)
 mod_util.inherits(DeleteRecordTransformer, mod_fsm.FSM);
 
 
-DeleteRecordTransformer.prototype._get_mako_cfg = function
-_get_mako_cfg()
+DeleteRecordTransformer.prototype._get_tunables_ref = function
+_get_tunables_ref()
 {
-	var self = this;
-	return (self.mt_ctx.ctx_mako_cfg);
+	return (this.mt_ctx.ctx_cfg.tunables);
 };
 
 
 DeleteRecordTransformer.prototype._get_collector = function
 _get_collector()
 {
-	var self = this;
-	return (self.mt_ctx.ctx_metrics_manager.collector);
+	return (this.mt_ctx.ctx_metrics_manager.collector);
 };
 
 
 DeleteRecordTransformer.prototype._get_batch_size = function
 _get_batch_size()
 {
-	var self = this;
-	return (self._get_mako_cfg().instr_upload_batch_size);
+	return (this._get_tunables_ref().instr_upload_batch_size);
 };
 
 
 DeleteRecordTransformer.prototype._get_delay = function
 _get_delay()
 {
-	var self = this;
-	return (self._get_mako_cfg().instr_upload_flush_delay);
+	return (this._get_tunables_ref().instr_upload_flush_delay);
 };
 
 
 DeleteRecordTransformer.prototype._get_cache_capacity = function
 _get_cache_capacity()
 {
-	var self = this;
-	return (self.mt_ctx.ctx_cfg.capacity);
+	return (this._get_tunables_ref().capacity);
 };
 
 
diff --git a/lib/errors.js b/lib/errors.js
index 35d95f0..e4c3fbb 100644
--- a/lib/errors.js
+++ b/lib/errors.js
@@ -13,21 +13,21 @@ var mod_util = require('util');
 var mod_verror = require('verror');
 
 function
-InvalidShardConfigError()
+InvalidShardsConfigError()
 {
 	mod_verror.WError.apply(this, arguments);
 	this.name = this.constructor.name;
 }
-mod_util.inherits(InvalidShardConfigError, mod_verror.WError);
+mod_util.inherits(InvalidShardsConfigError, mod_verror.WError);
 
 
 function
-InvalidMakoConfigError()
+InvalidTunablesConfigError()
 {
 	mod_verror.WError.apply(this, arguments);
 	this.name = this.constructor.name;
 }
-mod_util.inherits(InvalidMakoConfigError, mod_verror.WError);
+mod_util.inherits(InvalidTunablesConfigError, mod_verror.WError);
 
 
 function
@@ -40,22 +40,22 @@ mod_util.inherits(InvalidCreatorsConfigError, mod_verror.WError);
 
 
 function
-InvalidUpdateCacheCfgError()
+InvalidBucketsConfigError()
 {
 	mod_verror.WError.apply(this, arguments);
 	this.name = this.constructor.name;
 }
-mod_util.inherits(InvalidUpdateCacheCfgError, mod_verror.WError);
+mod_util.inherits(InvalidBucketsConfigError, mod_verror.WError);
 
 
 module.exports = {
 
-	InvalidShardConfigError: InvalidShardConfigError,
+	InvalidShardsConfigError: InvalidShardsConfigError,
 
-	InvalidMakoConfigError: InvalidMakoConfigError,
+	InvalidBucketsConfigError: InvalidBucketsConfigError,
 
 	InvalidCreatorsConfigError: InvalidCreatorsConfigError,
 
-	InvalidUpdateCacheCfgError: InvalidUpdateCacheCfgError
+	InvalidTunablesConfigError: InvalidTunablesConfigError
 
 };
diff --git a/lib/gc_manager.js b/lib/gc_manager.js
index f46f128..c5dcfe3 100644
--- a/lib/gc_manager.js
+++ b/lib/gc_manager.js
@@ -49,7 +49,7 @@ state_init(S)
 {
 	var self = this;
 
-	self.setup_shards(self.gcm_ctx.ctx_cfg.shards, function (err) {
+	self._create_clients_and_workers(function (err) {
 		if (err) {
 			self.gcm_log.error(err, 'Unable to initialize ' +
 				'GC manager.');
@@ -60,6 +60,7 @@ state_init(S)
 			 */
 			process.exit(1);
 		}
+		S.gotoState('running');
 	});
 };
 
@@ -69,6 +70,8 @@ state_running(S)
 {
 	var self = this;
 
+	self.emit('running');
+
 	self.gcm_log.info('GC Manager running.');
 };
 
@@ -76,265 +79,32 @@ state_running(S)
 // --- Helpers
 
 
-GCManager.prototype._shard_num_to_domain = function
-_shard_num_to_domain(n)
-{
-	var self = this;
-
-	var suffix = self.gcm_ctx.ctx_cfg.shards.domain_suffix;
-
-	return ([n, suffix].join('.'));
-};
-
-
-GCManager.prototype._delete_global_shard_ctx_fields = function
-_delete_global_shard_ctx_fields(ctx)
-{
-	delete (ctx.buckets);
-	delete (ctx.interval);
-	delete (ctx.domain_suffix);
-};
-
-
-GCManager.prototype._is_index_shard = function
-_is_index_shard(shard_num)
-{
-	var self = this;
-	var cfg = self.gcm_ctx.ctx_cfg;
-
-	return ((shard_num >= cfg.index_shard_lo) &&
-		(shard_num <= cfg.index_shard_hi));
-};
-
-
-GCManager.prototype.setup_shards = function
-setup_shards(desired, callback)
+GCManager.prototype._create_clients_and_workers = function
+_create_clients_and_workers(done)
 {
 	var self = this;
 
-	self.gcm_log.info({
-		desired: mod_util.inspect(desired)
-	}, 'Setting up desired shard configuration.');
-
-	var shards_cfg = self.gcm_ctx.ctx_cfg.shards;
-
-	var curr_interval = shards_cfg.interval;
-	var next_interval = desired.interval || curr_interval;
-
-	var updates = {
-		create_or_update: [],
-		destroy: []
-	};
-
-	if (next_interval[0] === 0 && next_interval[1] === 0) {
-		self.gcm_log.info('Garbage-collector has not been ' +
-			'initialized yet. Waiting for restart/or interval ' +
-			'update with shards.interval != [0, 0].');
-		callback();
-		return;
-	}
-
-	for (var i = next_interval[0]; i <= next_interval[1]; i++) {
-		if (!self._is_index_shard(i)) {
-			callback(new VE('shard "%d" is not an index ' +
-				'shard', i));
-			return;
-		}
-		updates.create_or_update.push(i);
-	}
-
-	for (i = curr_interval[0]; i <= curr_interval[1]; i++) {
-		if (i < next_interval[0] || i > next_interval[1]) {
-			updates.destroy.push(i);
-		}
-	}
-
-	function cleanup_workers_and_ctx(shard_num, done) {
-		var domain = self._shard_num_to_domain(shard_num);
-
-		mod_vasync.pipeline({ funcs: [
-			function (_, next) {
-				self._destroy_workers_for_shard(domain, next);
-			},
-			function (_, next) {
-				self._cleanup_shard_ctx(domain);
-				next();
-			}
-		]}, done);
-	}
-
-	function create_or_update_ctx(shard_num, done) {
-		var domain = self._shard_num_to_domain(shard_num);
-
-		/*
-		 * The 'desired' object contains configuration params
-		 * that should override the default configuration for
-		 * all need
-		 */
-		self._create_or_update_shard_ctx(domain, desired, done);
-	}
-
-	mod_vasync.pipeline({ funcs: [
-		function create_workers(_, next) {
-			mod_vasync.forEachParallel({
-				inputs: updates.create_or_update,
-				func: create_or_update_ctx
-			}, function (err) {
-				if (err) {
-					next(err);
-					return;
-				}
-				/*
-				 * After setting up all the necessary
-				 * configuration and clients above, actually
-				 * create the gc workers.
-				 */
-				self.ensure_workers(next);
-			});
-		},
-		function destroy_workers(_, next) {
-			mod_vasync.forEachParallel({
-				inputs: updates.destroy,
-				func: cleanup_workers_and_ctx
-			}, next);
+	mod_vasync.forEachParallel({
+		inputs: self.gcm_ctx.ctx_cfg.shards,
+		func: function setup(shard, finished) {
+			self._create_moray_client(shard.host,
+				finished);
 		}
-	]}, function (err) {
+	}, function (err) {
 		if (err) {
-			callback(err);
+			done(err);
 			return;
 		}
-		self._update_global_shards_ctx(desired);
-		callback();
-	});
-};
-
-
-// -- Context management routines
-
-
-/*
- * Update logic for fields that are included in both the single shard and
- * global shard configuration.
- */
-GCManager.prototype._update_shard_ctx_common = function
-_update_shard_ctx_common(curr, updates)
-{
-	if (updates.buckets === undefined) {
-		return;
-	}
-	if (curr.buckets === undefined) {
-		curr.buckets = [];
-	}
-
-	updates.buckets.forEach(function (bucket_cfg) {
-		var name = bucket_cfg.bucket;
-
-		for (var i = 0; i < curr.buckets.length; i++) {
-			if (curr.buckets[i].bucket == name) {
-				curr.buckets[i] = mod_jsprim.mergeObjects(
-					curr.buckets[i], bucket_cfg);
-				return;
-			}
-		}
-
-		curr.buckets.push(bucket_cfg);
+		self._ensure_workers(done);
 	});
 };
 
 
-/*
- * Update the global configuration describing what shards the garbage collector
- * is processing records from.
- */
-GCManager.prototype._update_global_shards_ctx = function
-_update_global_shards_ctx(updates)
+GCManager.prototype._create_moray_client = function
+_create_moray_client(shard, done)
 {
 	var self = this;
 
-	self.gcm_log.info({
-		curr: mod_util.inspect(self.gcm_ctx.ctx_cfg.shards),
-		updates: mod_util.inspect(updates)
-	}, 'Updating global shard configuration.');
-
-	self._update_shard_ctx_common(self.gcm_ctx.ctx_cfg.shards, updates);
-
-	if (updates.interval) {
-		self.gcm_ctx.ctx_cfg.shards.interval = updates.interval;
-	}
-
-	var filtered = mod_jsprim.mergeObjects(updates, {});
-	self._delete_global_shard_ctx_fields(filtered);
-
-	self.gcm_ctx.ctx_cfg.params.moray = mod_jsprim.mergeObjects(
-		self.gcm_ctx.ctx_cfg.params.moray, filtered);
-};
-
-
-/*
- * Update configuration for a single shard.
- */
-GCManager.prototype._update_single_shard_ctx = function
-_update_single_shard_ctx(shard, updates)
-{
-	var self = this;
-
-	self.gcm_log.info({
-		curr: self.gcm_ctx.ctx_moray_cfgs[shard],
-		updates: mod_util.inspect(updates),
-		shard: shard
-	}, 'Updating single shard configuration.');
-
-	self._update_shard_ctx_common(self.gcm_ctx.ctx_moray_cfgs[shard],
-		updates);
-
-	var filtered = mod_jsprim.mergeObjects(updates, {});
-	self._delete_global_shard_ctx_fields(filtered);
-
-	self.gcm_ctx.ctx_moray_cfgs[shard] = mod_jsprim.mergeObjects(
-		self.gcm_ctx.ctx_moray_cfgs[shard], filtered);
-};
-
-
-/*
- * Initialize the default fields for a new shard context.
- */
-GCManager.prototype._create_shard_ctx = function
-_create_shard_ctx()
-{
-	var self = this;
-
-	var defaults = {
-		buckets: self.gcm_ctx.ctx_cfg.shards.buckets.map(
-			function (bucket_cfg) {
-
-			var copy = mod_jsprim.mergeObjects(bucket_cfg, {});
-			copy.record_read_offset = 0;
-
-			return (copy);
-		})
-	};
-	defaults = mod_jsprim.mergeObjects(defaults,
-		self.gcm_ctx.ctx_cfg.params.moray);
-
-	return (defaults);
-};
-
-
-/*
- * Update a single-shard configuration if it exists, or create a new
- * configuration and client if they don't already exist.
- */
-GCManager.prototype._create_or_update_shard_ctx = function
-_create_or_update_shard_ctx(shard, overrides, done)
-{
-	var self = this;
-
-	if (self.gcm_ctx.ctx_moray_cfgs[shard] !== undefined) {
-		self._update_single_shard_ctx(shard, overrides);
-		setImmediate(done);
-		return;
-	}
-
 	lib_common.create_moray_client(self.gcm_ctx, shard,
 		function (err, client) {
 		if (err) {
@@ -343,37 +113,15 @@ _create_or_update_shard_ctx(shard, overrides, done)
 		}
 		self.gcm_ctx.ctx_moray_clients[shard] = client;
 
-		var filtered = mod_jsprim.mergeObjects(overrides, null, {});
-		self._delete_global_shard_ctx_fields(filtered);
-
-		self.gcm_ctx.ctx_moray_cfgs[shard] = mod_jsprim.mergeObjects(
-			self._create_shard_ctx(), filtered);
-
 		self.gcm_log.info({
-			shard: shard,
-			cfg: self.gcm_ctx.ctx_moray_cfgs[shard]
-		}, 'Created new moray client and configuration.');
+			shard: shard
+		}, 'Created new moray client.');
 
 		done();
 	});
 };
 
 
-/*
- * Cleanup all state associated with a shard.
- */
-GCManager.prototype._cleanup_shard_ctx = function
-_cleanup_shard_ctx(shard)
-{
-	var self = this;
-
-	self.gcm_ctx.ctx_moray_clients[shard].close();
-
-	delete (self.gcm_ctx.ctx_moray_clients[shard]);
-	delete (self.gcm_ctx.ctx_moray_cfgs[shard]);
-};
-
-
 // --- Worker management
 
 
@@ -381,15 +129,15 @@ _cleanup_shard_ctx(shard)
  * Ensure that for each shard, we have created the appropriate number of
  * GCWorkers.
  */
-GCManager.prototype.ensure_workers = function
-ensure_workers(done)
+GCManager.prototype._ensure_workers = function
+_ensure_workers(done)
 {
 	var self = this;
 
 	mod_vasync.forEachParallel({
-		inputs: Object.keys(self.gcm_ctx.ctx_moray_cfgs),
+		inputs: self.gcm_ctx.ctx_cfg.shards,
 		func: function (shard, cb) {
-			self._ensure_workers_for_shard(shard, cb);
+			self._ensure_workers_for_shard(shard.host, cb);
 		}
 	}, function (err) {
 		if (err) {
@@ -406,40 +154,25 @@ GCManager.prototype._ensure_workers_for_shard = function
 _ensure_workers_for_shard(shard, ensure_done)
 {
 	var self = this;
-
-	var shard_cfg = self.gcm_ctx.ctx_moray_cfgs[shard];
+	var ctx = self.gcm_ctx;
 
 	if (!self.gcm_workers[shard]) {
 		self.gcm_workers[shard] = {};
 	}
 
 	mod_vasync.forEachParallel({
-		inputs: shard_cfg.buckets,
-		func: function (bucket_cfg, done) {
-			var bucket = bucket_cfg.bucket;
-			var concurrency = bucket_cfg.concurrency;
+		inputs: ctx.ctx_cfg.buckets,
+		func: function (bucket, done) {
+			var bucket_name = bucket.name;
+			var concurrency = ctx.ctx_cfg.concurrency;
 
-			self._ensure_workers_for_bucket(shard, bucket,
-				concurrency, done);
+			self._ensure_workers_for_bucket(shard,
+				bucket_name, concurrency, done);
 		}
 	}, ensure_done);
 };
 
 
-GCManager.prototype._destroy_workers_for_shard = function
-_destroy_workers_for_shard(shard, destroy_done)
-{
-	var self = this;
-
-	mod_vasync.forEachParallel({
-		inputs: Object.keys(self.gcm_workers[shard]),
-		func: function destroy(bucket, next) {
-			self._destroy_worker(shard, bucket, next);
-		}
-	}, destroy_done);
-};
-
-
 GCManager.prototype._ensure_workers_for_bucket = function
 _ensure_workers_for_bucket(shard, bucket, concurrency, ensure_done)
 {
@@ -454,17 +187,12 @@ _ensure_workers_for_bucket(shard, bucket, concurrency, ensure_done)
 
 	mod_vasync.whilst(
 		function unresolved() {
-			return (concurrency !==
+			return (concurrency >
 			    (self.gcm_workers[shard][bucket] ||
 			    []).length);
 		},
 		function create_or_destroy_workers(next) {
-			if ((self.gcm_workers[shard][bucket] ||
-				[]).length < concurrency) {
-				self._create_worker(shard, bucket, next);
-			} else {
-				self._destroy_worker(shard, bucket, next);
-			}
+			self._create_worker(shard, bucket, next);
 		},
 		function whilst_done(err) {
 			if (err) {
@@ -472,7 +200,7 @@ _ensure_workers_for_bucket(shard, bucket, concurrency, ensure_done)
 					shard: shard,
 					bucket: bucket,
 					err: err
-				}, 'Error setting up desired workers.');
+				}, 'Error creating workers.');
 			}
 			ensure_done(err);
 		});
@@ -517,29 +245,6 @@ _create_worker(shard, bucket, done)
 };
 
 
-/*
- * Remove the last worker. We drop the reference to the worker after invoking
- * it's shutdown sequence.
- */
-GCManager.prototype._destroy_worker = function
-_destroy_worker(shard, bucket, done)
-{
-	var self = this;
-
-	if ((self.gcm_workers[shard][bucket] || []).length === 0) {
-		done();
-		return;
-	}
-
-	var worker = self.gcm_workers[shard][bucket].pop();
-	worker.once('shutdown', function () {
-		done();
-	});
-
-	worker.shutdown();
-};
-
-
 // --- Worker control (pause, resume, list)
 
 
diff --git a/lib/http_server.js b/lib/http_server.js
index d99d41d..2afd2da 100644
--- a/lib/http_server.js
+++ b/lib/http_server.js
@@ -105,85 +105,36 @@ handle_shards_cfg_get(req, res, next)
 {
 	var ctx = req.ctx;
 
-	/*
-	 * No reason to expose the full domain.
-	 */
-	res.send(200, mod_jsprim.mergeObjects(ctx.ctx_cfg.shards,
-		{ domain_suffix: undefined }));
+	res.send(200, ctx.ctx_cfg.shards);
 }
 
 
 function
-handle_shards_cfg_post(req, res, next)
+handle_buckets_cfg_get(req, res, next)
 {
 	var ctx = req.ctx;
 
-	var schema_err = mod_schema.validate_update_shards_cfg(
-		req.body);
-	if (schema_err) {
-		res.send(400, {
-			ok: false,
-			err: schema_err.message,
-			when: (new Date()).toISOString()
-		});
-		return;
-	}
-
-	ctx.ctx_gc_manager.setup_shards(req.body, function (err) {
-		if (err) {
-			res.send(500, {
-				ok: false,
-				err: err.message,
-				when: (new Date()).toISOString()
-			});
-			return;
-		}
-		res.send(200, {
-			ok: true,
-			when: (new Date()).toISOString()
-		});
-	});
+	res.send(200, ctx.ctx_cfg.buckets);
 }
 
 
 function
-handle_shard_cfg_get(req, res, next)
+handle_tunables_cfg_get(req, res, next)
 {
 	var ctx = req.ctx;
-	var shard = req.params.shard;
 
-	mod_assertplus.string(ctx.ctx_cfg.shards.domain_suffix,
-		'domain_suffix');
-
-	var shard_domain = isNaN(shard) ? shard :
-		[shard, ctx.ctx_cfg.shards.domain_suffix].join('.');
-
-	if (!ctx.ctx_moray_cfgs.hasOwnProperty(shard_domain)) {
-		setImmediate(next, new WE('No gc workers for shard "%s".',
-			shard));
-		return;
-	}
-
-	res.send(200, ctx.ctx_moray_cfgs[shard_domain]);
+	req.send(200, ctx.ctx_cfg.tunables);
 }
 
 
 function
-handle_shard_cfg_post(req, res, next)
+handle_tunables_cfg_post(req, res, next)
 {
 	var ctx = req.ctx;
-	var shard = req.params.shard;
-	var updates = req.body;
-
-	mod_assertplus.object(updates, 'updates');
-	mod_assertplus.string(ctx.ctx_cfg.shards.domain_suffix,
-		'domain_suffix');
+	var tunables = req.body;
 
-	var shard_domain = isNaN(shard) ? shard :
-		[shard, ctx.ctx_cfg.shards.domain_suffix].join('.');
-
-	var err = mod_schema.validate_update_moray_cfg(updates);
-	if (err !== null) {
+	var err = mod_schema.validate_tunables_cfg(tunables);
+	if (err) {
 		res.send(400, {
 			ok: false,
 			err: err.message
@@ -191,116 +142,11 @@ handle_shard_cfg_post(req, res, next)
 		return;
 	}
 
-	if (!ctx.ctx_moray_cfgs.hasOwnProperty(shard_domain)) {
-		setImmediate(next, new WE('No gc workers for shard "%s"',
-			shard));
-		return;
-	}
-
-	var curr = ctx.ctx_moray_cfgs[shard_domain];
-	mod_assertplus.object(curr, 'curr');
+	var old_tunables = ctx.ctx_cfg.tunables;
+	var new_tunables = mod_jsprim.mergeObjects(old_tunables,
+		tunables);
 
-	ctx.ctx_moray_cfgs[shard_domain] = mod_jsprim.mergeObjects(curr,
-		updates);
-
-	function finish_update(update_err) {
-		if (update_err) {
-			res.send(500, {
-				ok: false,
-				when: (new Date()).toISOString()
-			});
-			return;
-		}
-		res.send(200, {
-			ok: true,
-			when: (new Date()).toISOString()
-		});
-	}
-
-	/*
-	 * If the update contains a 'buckets' field, then we are potentially
-	 * changing the gc worker count. Once the configuration in
-	 * 'ctx_moray_cfgs' is updated, we ping to gc manager to pick up the
-	 * change and create/remove workers as necessary.
-	 */
-	var is_bucket_update = updates.buckets !== undefined;
-	if (is_bucket_update) {
-		ctx.ctx_gc_manager.ensure_workers(finish_update);
-	} else {
-		setImmediate(finish_update);
-	}
-}
-
-
-function
-handle_mako_cfg_get(req, res, next)
-{
-	var ctx = req.ctx;
-
-	res.send(200, ctx.ctx_mako_cfg);
-}
-
-
-function
-handle_mako_cfg_post(req, res, next)
-{
-	var ctx = req.ctx;
-	var curr = ctx.ctx_mako_cfg;
-	var updates = req.body;
-
-	mod_assertplus.object(curr, 'curr');
-	mod_assertplus.object(updates, 'updates');
-
-	var err = mod_schema.validate_update_mako_cfg(updates);
-	if (err !== null) {
-		res.send(400, {
-			ok: false,
-			err: err.message
-		});
-		return;
-	}
-
-	ctx.ctx_mako_cfg = mod_jsprim.mergeObjects(curr, updates);
-
-	res.send(200, {
-		ok: true,
-		when: (new Date()).toISOString()
-	});
-}
-
-
-function
-handle_cache_cfg_get(req, res, next)
-{
-	var ctx = req.ctx;
-
-	res.send(200, {
-		ok: true,
-		when: (new Date()).toISOString(),
-		cache: {
-			capacity: ctx.ctx_cfg.capacity,
-			used: ctx.ctx_total_cache_entries
-		}
-	});
-}
-
-
-function
-handle_cache_cfg_post(req, res, next)
-{
-	var ctx = req.ctx;
-	var updates = req.body;
-
-	var err = mod_schema.validate_update_cache_cfg(updates);
-	if (err !== null) {
-		res.send(400, {
-			ok: false,
-			err: err.message
-		});
-		return;
-	}
-
-	ctx.ctx_cfg.capacity = updates.capacity;
+	ctx.ctx_cfg.tunables = new_tunables;
 
 	res.send(200, {
 		ok: true,
@@ -355,17 +201,12 @@ create_http_server(ctx, done)
 	s.post('/workers/pause', handle_pause_workers);
 	s.post('/workers/resume', handle_resume_workers);
 
-	s.get('/mako', handle_mako_cfg_get);
-	s.post('/mako', handle_mako_cfg_post);
-
-	s.get('/shards/:shard', handle_shard_cfg_get);
-	s.post('/shards/:shard', handle_shard_cfg_post);
-
 	s.get('/shards', handle_shards_cfg_get);
-	s.post('/shards', handle_shards_cfg_post);
 
-	s.get('/cache', handle_cache_cfg_get);
-	s.post('/cache', handle_cache_cfg_post);
+	s.get('/tunables', handle_tunables_cfg_get);
+	s.post('/tunables', handle_tunables_cfg_post);
+
+	s.get('/buckets', handle_buckets_cfg_get);
 
 	s.listen(ctx.ctx_cfg.port, ctx.ctx_cfg.address, function (err) {
 		if (err) {
diff --git a/lib/mako_instruction_uploader.js b/lib/mako_instruction_uploader.js
index a9a85ae..3cbf421 100644
--- a/lib/mako_instruction_uploader.js
+++ b/lib/mako_instruction_uploader.js
@@ -29,7 +29,6 @@ MakoInstructionUploader(opts)
 	mod_assertplus.object(opts, 'opts');
 	mod_assertplus.object(opts.log, 'opts.log');
 	mod_assertplus.object(opts.ctx, 'opts.ctx');
-	mod_assertplus.object(opts.ctx.ctx_mako_cfg, 'opts.ctx_mako_cfg');
 	mod_assertplus.object(opts.listener, 'opts.listener');
 
 	self.mu_ctx = opts.ctx;
@@ -43,48 +42,38 @@ MakoInstructionUploader(opts)
 mod_util.inherits(MakoInstructionUploader, mod_fsm.FSM);
 
 
-MakoInstructionUploader.prototype._get_mako_cfg = function
-_get_mako_cfg()
+MakoInstructionUploader.prototype._get_tunables_ref = function
+_get_tunables_ref()
 {
-	var self = this;
-
-	return (self.mu_ctx.ctx_mako_cfg);
+	return (this.mu_ctx.ctx_cfg.tunables);
 };
 
 
 MakoInstructionUploader.prototype._get_instr_path_prefix = function
 _get_instr_path_prefix()
 {
-	var self = this;
-
-	return (self._get_mako_cfg().instr_upload_path_prefix);
+	return (this._get_tunables_ref().instr_upload_path_prefix);
 };
 
 
 MakoInstructionUploader.prototype._get_instance = function
 _get_instance()
 {
-	var self = this;
-
-	return (self.mu_ctx.ctx_cfg.instance);
+	return (this.mu_ctx.ctx_cfg.instance);
 };
 
 
 MakoInstructionUploader.prototype._get_manta_client = function
 _get_manta_client()
 {
-	var self = this;
-
-	return (self.mu_ctx.ctx_manta_client);
+	return (this.mu_ctx.ctx_manta_client);
 };
 
 
 MakoInstructionUploader.prototype._get_collector = function
 _get_collector()
 {
-	var self = this;
-
-	return (self.mu_ctx.ctx_metrics_manager.collector);
+	return (this.mu_ctx.ctx_metrics_manager.collector);
 };
 
 
diff --git a/lib/moray_delete_record_cleaner.js b/lib/moray_delete_record_cleaner.js
index 430c4be..b98b324 100644
--- a/lib/moray_delete_record_cleaner.js
+++ b/lib/moray_delete_record_cleaner.js
@@ -56,53 +56,60 @@ mod_util.inherits(MorayDeleteRecordCleaner, mod_fsm.FSM);
 MorayDeleteRecordCleaner.prototype._get_moray_client = function
 _get_moray_client()
 {
-	var self = this;
+	return (this.mc_ctx.ctx_moray_clients[this.mc_shard]);
+};
+
 
-	return (self.mc_ctx.ctx_moray_clients[self.mc_shard]);
+MorayDeleteRecordCleaner.prototype._get_tunables_ref = function
+_get_tunables_ref()
+{
+	return (this.mc_ctx.ctx_cfg.tunables);
 };
 
 
-MorayDeleteRecordCleaner.prototype._get_moray_cfg = function
-_get_moray_cfg()
+MorayDeleteRecordCleaner.prototype._get_bucket_ref = function
+_get_bucket_ref()
 {
 	var self = this;
+	var buckets = self.mr_ctx.ctx_cfg.buckets;
+	var bucket_ref = undefined;
+
+	for (var i = 0; i < buckets.length; i++) {
+		var bucket = buckets[i];
+		if (bucket.name === self.mc_bucket) {
+			bucket_ref = bucket;
+		}
+	}
 
-	return (self.mc_ctx.ctx_moray_cfgs[self.mc_shard]);
+	return (bucket_ref);
 };
 
 
 MorayDeleteRecordCleaner.prototype._get_batch_size = function
 _get_batch_size()
 {
-	var self = this;
-
-	return (self._get_moray_cfg().record_delete_batch_size);
+	return (this._get_tunables_ref().record_delete_batch_size);
 };
 
 
 MorayDeleteRecordCleaner.prototype._get_delay = function
 _get_delay()
 {
-	var self = this;
-
-	return (self._get_moray_cfg().record_delete_delay);
+	return (this._get_tunables_ref().record_delete_delay);
 };
 
 
-MorayDeleteRecordCleaner.prototype._get_collector = function
-_get_collector()
+MorayDeleteRecordCleaner.prototype._get_cache_capacity = function
+_get_cache_capactiy()
 {
-	var self = this;
-
-	return (self.mc_ctx.ctx_metrics_manager.collector);
+	return (this._get_tunables_ref().capacity);
 };
 
 
-MorayDeleteRecordCleaner.prototype._get_cache_capacity = function
-_get_cache_capactiy()
+MorayDeleteRecordCleaner.prototype._get_collector = function
+_get_collector()
 {
-	var self = this;
-	return (self.mc_ctx.ctx_cfg.capacity);
+	return (this.mc_ctx.ctx_metrics_manager.collector);
 };
 
 
@@ -137,8 +144,7 @@ _incr_cache_counts()
 MorayDeleteRecordCleaner.prototype._get_total_cache_entries = function
 _get_total_cache_entries()
 {
-	var self = this;
-	return (self.mc_ctx.ctx_total_cache_entries);
+	return (this.mc_ctx.ctx_total_cache_entries);
 };
 
 
diff --git a/lib/moray_delete_record_reader.js b/lib/moray_delete_record_reader.js
index 0088772..96c643d 100644
--- a/lib/moray_delete_record_reader.js
+++ b/lib/moray_delete_record_reader.js
@@ -88,54 +88,57 @@ mod_util.inherits(MorayDeleteRecordReader, mod_fsm.FSM);
 MorayDeleteRecordReader.prototype._get_moray_client = function
 _get_moray_client()
 {
-	var self = this;
-	return (self.mr_ctx.ctx_moray_clients[self.mr_shard]);
+	return (this.mr_ctx.ctx_moray_clients[this.mr_shard]);
 };
 
 
-MorayDeleteRecordReader.prototype._get_moray_cfg = function
-_get_moray_cfg()
+MorayDeleteRecordReader.prototype._get_tunables_ref = function
+_get_tunables_ref()
 {
-	var self = this;
-	return (self.mr_ctx.ctx_moray_cfgs[self.mr_shard]);
+	return (this.mr_ctx.ctx_cfg.tunables);
 };
 
 
-MorayDeleteRecordReader.prototype._get_bucket_cfg = function
-_get_bucket_cfg()
+MorayDeleteRecordReader.prototype._get_bucket_ref = function
+_get_bucket_ref()
 {
 	var self = this;
+	var buckets = self.mr_ctx.ctx_cfg.buckets;
+	var bucket_ref = undefined;
 
-	var buckets = self._get_moray_cfg().buckets.filter(
-		function (cfg) {
-		return (cfg.bucket === self.mr_bucket);
-	});
+	for (var i = 0; i < buckets.length; i++) {
+		var bucket = buckets[i];
+		if (bucket.name === self.mr_bucket) {
+			bucket_ref = bucket;
+		}
+	}
+
+	if (bucket_ref.record_read_offset === undefined) {
+		bucket_ref.record_read_offset = 0;
+	}
 
-	return (buckets[0]);
+	return (bucket_ref);
 };
 
 
 MorayDeleteRecordReader.prototype._get_batch_size = function
 _get_batch_size()
 {
-	var self = this;
-	return (self._get_moray_cfg().record_read_batch_size);
+	return (this._get_tunables_ref().record_read_batch_size);
 };
 
 
 MorayDeleteRecordReader.prototype._get_delay = function
 _get_delay()
 {
-	var self = this;
-	return (self._get_moray_cfg().record_read_wait_interval);
+	return (this._get_tunables_ref().record_read_wait_interval);
 };
 
 
 MorayDeleteRecordReader.prototype._get_offset = function
 _get_offset()
 {
-	var self = this;
-	return (self._get_bucket_cfg().record_read_offset);
+	return (this._get_bucket_ref().record_read_offset);
 };
 
 
@@ -144,8 +147,8 @@ _get_and_set_offset(delta)
 {
 	var self = this;
 
-	var offset = self._get_bucket_cfg().record_read_offset;
-	self._get_bucket_cfg().record_read_offset += delta;
+	var offset = this._get_bucket_ref().record_read_offset;
+	self._get_bucket_ref().record_read_offset += delta;
 
 	return (offset);
 };
@@ -154,27 +157,21 @@ _get_and_set_offset(delta)
 MorayDeleteRecordReader.prototype._reset_offset = function
 _reset_offset()
 {
-	var self = this;
-
-	self._get_bucket_cfg().record_read_offset = 0;
+	this._get_bucket_ref().record_read_offset = 0;
 };
 
 
 MorayDeleteRecordReader.prototype._get_sort_attr = function
 _get_sort_attr()
 {
-	var self = this;
-
-	return (self._get_moray_cfg().record_reader_sort_attr);
+	return (this._get_tunables_ref().record_reader_sort_attr);
 };
 
 
 MorayDeleteRecordReader.prototype._get_sort_order = function
 _get_sort_order()
 {
-	var self = this;
-
-	return (self._get_moray_cfg().record_read_sort_order);
+	return (this._get_tunables_ref().record_read_sort_order);
 };
 
 
@@ -183,7 +180,7 @@ _is_allowed_creator(creator)
 {
 	var self = this;
 
-	var creators = self.mr_ctx.ctx_cfg.creators;
+	var creators = self.mr_ctx.ctx_cfg.allowed_creators;
 
 	for (var i = 0; i < creators.length; i++) {
 		if (creators[i].uuid === creator) {
diff --git a/lib/schema.js b/lib/schema.js
index cf31ccc..8a72e48 100644
--- a/lib/schema.js
+++ b/lib/schema.js
@@ -15,10 +15,10 @@ var mod_util = require('util');
 
 var mod_errors = require('./errors');
 
-var InvalidShardConfigError = mod_errors.InvalidShardConfigError;
-var InvalidMakoConfigError = mod_errors.InvalidMakoConfigError;
+var InvalidShardsConfigError = mod_errors.InvalidShardsjConfigError;
 var InvalidCreatorsConfigError = mod_errors.InvalidCreatorsConfigError;
-var InvalidCacheCfgUpdateError = mod_errors.InvalidCacheCfgUpdateError;
+var InvalidBucketsConfigError = mod_errors.InvalidBucketsConfigError;
+var InvalidTunablesConfigError = mod_errors.InvalidTunablesConfigError;
 
 var AJV_ENV = new Ajv();
 
@@ -33,12 +33,19 @@ var SORT_ORDERS = [
 	'asc'
 ];
 
-var DELETE_RECORD_BUCKETS = [
-	'manta_delete_log',
-	'manta_fastdelete_queue'
-];
-
-var moray_cfg_properties = {
+var tunables_cfg_properties = {
+	'instr_upload_batch_size': {
+		'type': 'integer',
+		'minimum': 1
+	},
+	'instr_upload_flush_delay': {
+		'type': 'integer',
+		'minimum': 1
+	},
+	'instr_upload_path_prefix': {
+		'type': 'string',
+		'minLength': 1
+	},
 	'record_read_batch_size': {
 		'type': 'integer',
 		'minimum': 1
@@ -62,174 +69,109 @@ var moray_cfg_properties = {
 	'record_delete_delay': {
 		'type': 'integer',
 		'minimum': 0
-	}
-};
-var moray_property_names = Object.keys(moray_cfg_properties);
-
-
-var mako_cfg_properties = {
-	'instr_upload_batch_size': {
-		'type': 'integer',
-		'minimum': 1
 	},
-	'instr_upload_flush_delay': {
+	'capacity': {
 		'type': 'integer',
-		'minimum': 1
-	},
-	'instr_upload_path_prefix': {
-		'type': 'string',
-		'minLength': 1
-	}
-};
-var mako_property_names = Object.keys(mako_cfg_properties);
-
-
-var shard_cfg_properties = {
-	'domain_suffix': {
-		'type': 'string',
-		'minLength': 1
-	},
-	'interval': { allOf: [ { '$ref': 'shard-interval' } ] },
-	'buckets': { allOf: [ { '$ref': 'bucket-cfg' } ] }
-};
-var shard_property_names = Object.keys(shard_cfg_properties);
-
-
-var creator_cfg_properties = {
-	'uuid': {
-		'type': 'string',
-		'format': 'uuid',
-		'minLength': 1
+		'minimum': 100
 	}
 };
-var creator_property_names = Object.keys(creator_cfg_properties);
-
-
-AJV_ENV.addSchema({
-	id: 'bucket-cfg',
-	type: 'array',
-	items: {
-		type: 'object',
-		properties: {
-			'bucket': {
-				type: 'string',
-				minLength: 1,
-				enum: DELETE_RECORD_BUCKETS
-			},
-			'concurrency': {
-				type: 'integer',
-				minimum: 0
-			}
-		},
-		required: [
-			'bucket',
-			'concurrency'
-		],
-		additionalProperties: false
-	}
-});
-
-
-AJV_ENV.addSchema({
-	id: 'shard-interval',
-	type: 'array',
-	minItems: 2,
-	maxItems: 2,
-	items: {
-		type: 'integer',
-		minimum: 0
-	}
-});
-
+var tunables_property_names = Object.keys(tunables_cfg_properties);
 
 AJV_ENV.addSchema({
 	id: 'shards-cfg',
-	type: 'object',
-	properties: shard_cfg_properties,
-	required: shard_property_names,
-	additionalProperties: false
+	type: 'array',
+	items: { allOf: [ { '$ref': 'shard-cfg' } ] }
 });
 
 
 AJV_ENV.addSchema({
-	id: 'update-shards-cfg',
+	id: 'shard-cfg',
 	type: 'object',
-	properties: mod_jsprim.mergeObjects(undefined, {
-		'interval': { allOf: [ { '$ref': 'shard-interval' } ] },
-		'buckets': { allOf: [ { '$ref': 'bucket-cfg' } ] }
-	}, moray_cfg_properties),
+	properties: {
+		'host': {
+			type: 'string',
+			minLength: 1
+		},
+		'last': {
+			type: 'boolean'
+		}
+	},
+	required: [
+		'host'
+	],
 	additionalProperties: false
 });
 
 
-AJV_ENV.addSchema({
-	id: 'creator-cfg',
-	type: 'object',
-	properties: creator_cfg_properties,
-	require: creator_property_names,
-	additionalProperties: false
-});
+var DELETE_RECORD_BUCKETS = [
+	'manta_delete_log',
+	'manta_fastdelete_queue'
+];
 
 
 AJV_ENV.addSchema({
-	id: 'creators-cfg',
+	id: 'buckets-cfg',
 	type: 'array',
-	items: { allOf: [ { '$ref': 'creator-cfg' } ] },
+	items: { allOf: [ { '$ref': 'bucket-cfg' } ] },
 	minItems: 1
 });
 
 
 AJV_ENV.addSchema({
-	id: 'update-moray-cfg',
-	type: 'object',
-	properties: mod_jsprim.mergeObjects(moray_cfg_properties,
-		shard_cfg_properties),
-	additionalProperties: false
-});
-
-
-AJV_ENV.addSchema({
-	id: 'update-mako-cfg',
-	type: 'object',
-	properties: mako_cfg_properties,
-	additionalProperties: false
-});
-
-
-AJV_ENV.addSchema({
-	id: 'moray-cfg',
+	id: 'bucket-cfg',
 	type: 'object',
-	properties: moray_cfg_properties,
-	required: moray_property_names,
+	properties: {
+		'name': {
+			type: 'string',
+			enum: DELETE_RECORD_BUCKETS
+		},
+		'last': {
+			type: 'boolean'
+		}
+	},
+	required: [
+		'name'
+	],
 	additionalProperties: false
 });
 
 
 AJV_ENV.addSchema({
-	id: 'mako-cfg',
-	type: 'object',
-	properties: mako_cfg_properties,
-	required: mako_property_names,
-	additionalProperties: false
+	id: 'creators-cfg',
+	type: 'array',
+	items: { allOf: [ { '$ref': 'creator-cfg' } ] },
+	minItems: 1
 });
 
 
 AJV_ENV.addSchema({
-	id: 'update-cache-cfg',
+	id: 'creator-cfg',
 	type: 'object',
 	properties: {
-		'capacity': {
-			'type': 'integer',
-			'minimum': 100
+		'uuid': {
+			type: 'string',
+			format: 'uuid',
+			minLength: 1
+		},
+		'last': {
+			type: 'boolean'
 		}
 	},
 	required: [
-		'capacity'
+		'uuid'
 	],
 	additionalProperties: false
 });
 
 
+AJV_ENV.addSchema({
+	id: 'tunables-cfg',
+	type: 'object',
+	properties: tunables_cfg_properties,
+	required: tunables_property_names
+});
+
+
 // Internal helpers
 
 function
@@ -281,33 +223,21 @@ function
 validate_shards_cfg(cfg)
 {
 	if (AJV_ENV.validate('shards-cfg', cfg)) {
-		if (cfg.interval !== undefined &&
-		    cfg.interval[0] > cfg.interval[1]) {
-			return (new InvalidShardConfigError(
-				'expected shard interval [a,b] ' +
-				'with a <= b'));
-		}
 		return (null);
 	}
-	return (new InvalidShardConfigError('%s',
+	return (new InvalidShardsConfigError('%s',
 		errors_text(AJV_ENV.errors, 'shards-cfg')));
 }
 
 
 function
-validate_update_shards_cfg(cfg)
+validate_buckets_cfg(cfg)
 {
-	if (AJV_ENV.validate('update-shards-cfg', cfg)) {
-		if (cfg.interval !== undefined &&
-		    cfg.interval[0] > cfg.interval[1]) {
-			return (new InvalidShardConfigError(
-				'expected shard interval [a,b] ' +
-				'with a <= b'));
-		}
+	if (AJV_ENV.validate('buckets-cfg', cfg)) {
 		return (null);
 	}
-	return (new InvalidShardConfigError('%s',
-		errors_text(AJV_ENV.errors, 'update-shards-cfg')));
+	return (new InvalidBucketsConfigError('%s',
+		errors_text(AJV_ENV.errors, 'buckets-cfg')));
 }
 
 
@@ -324,62 +254,14 @@ validate_creators_cfg(cfg)
 
 
 function
-validate_moray_cfg(cfg)
+validate_tunables_cfg(cfg)
 {
-	if (AJV_ENV.validate('moray-cfg', cfg)) {
+	if (AJV_ENV.validate('tunables-cfg', cfg)) {
 		return (null);
 	}
 
-	return (new InvalidShardConfigError('%s',
-		errors_text(AJV_ENV.errors, 'moray-cfg')));
-}
-
-
-function
-validate_mako_cfg(cfg)
-{
-	if (AJV_ENV.validate('mako-cfg', cfg)) {
-		return (null);
-	}
-
-	return (new InvalidMakoConfigError('%s',
-		errors_text(AJV_ENV.errors, 'mako-cfg')));
-}
-
-
-function
-validate_update_moray_cfg(cfg)
-{
-	if (AJV_ENV.validate('update-moray-cfg', cfg)) {
-		return (null);
-	}
-
-	return (new InvalidShardConfigError('%s',
-		errors_text(AJV_ENV.errors, 'update-moray-cfg')));
-}
-
-
-function
-validate_update_mako_cfg(cfg)
-{
-	if (AJV_ENV.validate('update-mako-cfg', cfg)) {
-		return (null);
-	}
-
-	return (new InvalidMakoConfigError('%s',
-		errors_text(AJV_ENV.errors, 'update-mako-cfg')));
-}
-
-
-function
-validate_update_cache_cfg(cfg)
-{
-	if (AJV_ENV.validate('update-cache-cfg', cfg)) {
-		return (null);
-	}
-
-	return (new InvalidCacheCfgUpdateError('%s',
-		errors_text(AJV_ENV.errors, 'update-cache-cfg')));
+	return (new InvalidTunablesConfigError('%s',
+		errors_text(AJV_ENV.errors, 'tunables-cfg')));
 }
 
 
@@ -387,18 +269,10 @@ module.exports = {
 
 	validate_shards_cfg: validate_shards_cfg,
 
-	validate_update_shards_cfg: validate_update_shards_cfg,
+	validate_buckets_cfg: validate_buckets_cfg,
 
 	validate_creators_cfg: validate_creators_cfg,
 
-	validate_moray_cfg: validate_moray_cfg,
-
-	validate_update_moray_cfg: validate_update_moray_cfg,
-
-	validate_mako_cfg: validate_mako_cfg,
-
-	validate_update_mako_cfg: validate_update_mako_cfg,
-
-	validate_update_cache_cfg: validate_update_cache_cfg
+	validate_tunables_cfg: validate_tunables_cfg
 
 };
diff --git a/sapi_manifests/manta-garbage-collector/template b/sapi_manifests/manta-garbage-collector/template
index cba139d..ea0d5ed 100644
--- a/sapi_manifests/manta-garbage-collector/template
+++ b/sapi_manifests/manta-garbage-collector/template
@@ -25,39 +25,41 @@
 			}
 		}
 	},
-	"shards": {
-		"interval": [{{GC_SHARD_NUM_LO}}, {{GC_SHARD_NUM_HI}}],
-		"domain_suffix": "moray.{{DOMAIN_NAME}}",
-		"buckets": [
-			{
-				"bucket": "manta_fastdelete_queue",
-				"concurrency": {{GC_MANTA_FASTDELETE_QUEUE_CONCURRENCY}}
-			}
-		]
-	},
-	"creators": [ {{#ACCOUNTS_SNAPLINKS_DISABLED}}
+	"shards": [{{#GC_ASSIGNED_SHARDS}}
+		{
+			"host": "{{host}}"
+		}{{^last}},{{/last}}{{/GC_ASSIGNED_SHARDS}}
+	],
+	"buckets": [{{#GC_ASSIGNED_BUCKETS}}
+		{
+			"name": "{{name}}"
+		}{{^last}},{{/last}}{{/GC_ASSIGNED_BUCKETS}}
+		{{^GC_ASSIGNED_BUCKETS}}
+		{
+			"name": "manta_fastdelete_queue"
+		}
+		{{/GC_ASSIGNED_BUCKETS}}
+	],
+	"concurrency": {{GC_CONCURRENCY}},
+	"allowed_creators": [{{#ACCOUNTS_SNAPLINKS_DISABLED}}
 		{
 			"uuid": "{{uuid}}"
 		}{{^last}},{{/last}}{{/ACCOUNTS_SNAPLINKS_DISABLED}}
 	],
-	"params": {
-		"mako": {
-			"instr_upload_batch_size": {{GC_INSTR_UPLOAD_BATCH_SIZE}},
-			"instr_upload_flush_delay": {{GC_INSTR_UPLOAD_FLUSH_DELAY}},
-			"instr_upload_path_prefix": "{{GC_INSTR_UPLOAD_PATH_PREFIX}}"
-		},
-		"moray": {
-			"record_read_batch_size": {{GC_RECORD_READ_BATCH_SIZE}},
-			"record_read_wait_interval": {{GC_RECORD_READ_WAIT_INTERVAL}},
-			"record_read_sort_attr": "{{GC_RECORD_READ_SORT_ATTR}}",
-			"record_read_sort_order": "{{GC_RECORD_READ_SORT_ORDER}}",
-			"record_delete_batch_size": {{GC_RECORD_DELETE_BATCH_SIZE}},
-			"record_delete_delay": {{GC_RECORD_DELETE_DELAY}}
-		}
+	"tunables": {
+		"instr_upload_batch_size": {{GC_INSTR_UPLOAD_BATCH_SIZE}},
+		"instr_upload_flush_delay": {{GC_INSTR_UPLOAD_FLUSH_DELAY}},
+		"instr_upload_path_prefix": "{{GC_INSTR_UPLOAD_PATH_PREFIX}}",
+		"record_read_batch_size": {{GC_RECORD_READ_BATCH_SIZE}},
+		"record_read_wait_interval": {{GC_RECORD_READ_WAIT_INTERVAL}},
+		"record_read_sort_attr": "{{GC_RECORD_READ_SORT_ATTR}}",
+		"record_read_sort_order": "{{GC_RECORD_READ_SORT_ORDER}}",
+		"record_delete_batch_size": {{GC_RECORD_DELETE_BATCH_SIZE}},
+		"record_delete_delay": {{GC_RECORD_DELETE_DELAY}},
+		"capacity": {{GC_CACHE_CAPACITY}}
 	},
 	"address": "0.0.0.0",
 	"port": 2020,
-	"capacity": {{GC_CACHE_CAPACITY}},
 	"sapi_url": "{{{SAPI_URL}}}",
 	"instance": "{{auto.ZONENAME}}",
 	"server_uuid": "{{auto.SERVER_UUID}}",
diff --git a/test/common.js b/test/common.js
index 896c130..4839b83 100644
--- a/test/common.js
+++ b/test/common.js
@@ -72,50 +72,36 @@ create_mock_context(done)
 			});
 		},
 		function create_moray_clients(cfg, next) {
-			ctx.ctx_moray_cfgs = {};
 			ctx.ctx_moray_clients = {};
 
-			var interval = ctx.ctx_cfg.shards.interval;
-			var domain_suffix = ctx.ctx_cfg.shards.domain_suffix;
-
 			var barrier = mod_vasync.barrier();
 
-			for (var i = interval[0]; i <= interval[1]; i++) {
-				var shard = [i, domain_suffix].join('.');
+			var shards = ctx.ctx_cfg.shards;
 
-				var moray_cfg = mod_jsprim.mergeObjects(ctx.ctx_cfg.moray,
-					{ log: ctx.ctx_log, srvDomain: shard });
+			mod_vasync.forEachPipeline({
+				inputs: shards,
+				func: function (shard, cb) {
+					var moray_cfg = mod_jsprim.mergeObjects(ctx.ctx_cfg.moray,
+						{ log: ctx.ctx_log, srvDomain: shard.host });
 
-				var client = mod_moray.createClient(moray_cfg);
-				var num = i;
-				barrier.start('create_client_' + num);
+					var client = mod_moray.createClient(moray_cfg);
 
-				client.once('connect', function () {
-					ctx.ctx_moray_clients[shard] = client;
-					ctx.ctx_moray_cfgs[shard] = mod_jsprim.deepCopy(
-						ctx.ctx_cfg.params.moray);
-					ctx.ctx_moray_cfgs[shard].buckets =
-						ctx.ctx_cfg.shards.buckets;
-					ctx.ctx_moray_cfgs[shard].buckets.forEach(function (cfg) {
-						cfg.record_read_offset = 0;
+					client.once('connect', function () {
+						ctx.ctx_moray_clients[shard.host] = client;
+						cb();
 					});
 
-					barrier.done('create_client_' + num);
-				});
-
-				client.once('error', function (err) {
-					mod_assert.ok(false, 'error setting up test' +
-						'context');
-				});
-			}
-
-			barrier.once('drain', function () {
-				next(null, cfg);
+					client.once('error', function (err) {
+						mod_assert.ok(false, 'error setting up test' +
+							'context');
+					});
+				}
+			}, function (err) {
+				next(err, cfg);
 			});
 		},
 		function create_manta_client(cfg, next) {
 			ctx.ctx_manta_client = mod_manta.createClient(cfg.manta);
-			ctx.ctx_mako_cfg = mod_jsprim.deepCopy(ctx.ctx_cfg.params.mako);
 			next();
 		}
 	], function (err) {
diff --git a/test/delete_record_transformer.test.js b/test/delete_record_transformer.test.js
index 1bcc359..949176d 100644
--- a/test/delete_record_transformer.test.js
+++ b/test/delete_record_transformer.test.js
@@ -136,7 +136,7 @@ run_delete_record_transformer_test(num_records, test_done)
 					return;
 				}
 				var shard = Object.keys(ctx.ctx_moray_clients)[0];
-				ctx.ctx_mako_cfg.instr_upload_batch_size = NUM_TEST_RECORDS;
+				ctx.ctx_cfg.tunables.instr_upload_batch_size = NUM_TEST_RECORDS;
 				next(null, ctx, shard);
 			});
 		},
diff --git a/test/gc_manager.test.js b/test/gc_manager.test.js
index cfe747f..bdb2954 100644
--- a/test/gc_manager.test.js
+++ b/test/gc_manager.test.js
@@ -10,6 +10,7 @@
 
 var mod_assertplus = require('assert-plus');
 var mod_jsprim = require('jsprim');
+var mod_util = require('util');
 var mod_uuidv4 = require('uuid/v4');
 var mod_vasync = require('vasync');
 var mod_verror = require('verror');
@@ -27,13 +28,7 @@ do_basic_gc_manager_test(test_done)
 	mod_vasync.waterfall([
 		function create_context(next) {
 			lib_testcommon.create_mock_context(function (err, ctx) {
-				ctx.ctx_cfg.shards.buckets = [
-					{
-						bucket: 'manta_fastdelete_queue',
-						concurrency: 1
-					}
-				];
-				ctx.ctx_cfg.creators = [
+				ctx.ctx_cfg.allowed_creators = [
 					{
 						uuid: TEST_OWNER
 					}
@@ -43,31 +38,31 @@ do_basic_gc_manager_test(test_done)
 		},
 		function create_gc_manager(ctx, next) {
 			mod_gc_manager.create_gc_manager(ctx, function () {
-				next(null, ctx);
+				ctx.ctx_gc_manager.once('running', function () {
+					next(null, ctx);
+				});
 			});
 		},
 		function verify_gc_manager(ctx, next) {
 			var manager = ctx.ctx_gc_manager;
-			var shard_interval = ctx.ctx_cfg.shards.interval;
-			var domain_suffix = ctx.ctx_cfg.shards.domain_suffix;
 
-			for (var i = shard_interval[0]; i < shard_interval[1]; i++) {
-				var domain = [i, domain_suffix].join('.');
+			for (var i = 0; i < ctx.ctx_cfg.shards.length; i++) {
+				var shard = ctx.ctx_cfg.shards[i];
+				var buckets = ctx.ctx_cfg.buckets;
 				var workers = manager.get_workers();
-				var buckets = ctx.ctx_cfg.shards.buckets;
 
-				mod_assertplus.ok(workers[domain], 'missing workers ' +
+				mod_assertplus.ok(workers[shard.host], 'missing workers ' +
 					'for shard.');
 
 				buckets.forEach(function (bucket) {
-					var name = bucket.bucket;
-					var concurrency = bucket.concurrency;
+					var bucket_name = bucket.name;
+					var concurrency = ctx.ctx_cfg.concurrency;
 
 					if (concurrency > 0) {
-						mod_assertplus.ok(workers[domain][bucket],
+						mod_assertplus.ok(workers[shard.host][bucket_name],
 							'missing workers for bucket.');
 						mod_assertplus.equal(concurrency,
-							workers[domain][bucket],
+							workers[shard.host][bucket_name].length,
 							'missing some workers!');
 					}
 				});
@@ -75,121 +70,10 @@ do_basic_gc_manager_test(test_done)
 
 			next(null, ctx);
 		},
-		function destroy_gc_worker(ctx, next) {
-			var manager = ctx.ctx_gc_manager;
-			var bucket = 'manta_fastdelete_queue';
-
-			var update = {
-				buckets: [
-					{
-						bucket: bucket,
-						concurrency: 0
-					}
-				]
-			};
-
-			manager.setup_shards(update, function (err) {
-				if (err) {
-					mod_assertplus.ok(false, 'error updating shard ' +
-						'configuration');
-				}
-				next(null, ctx);
-			});
-		},
-		function check_worker_gone(ctx, next) {
-			var manager = ctx.ctx_gc_manager;
-			var shard_interval = ctx.ctx_cfg.shards.interval;
-
-			for (var i = shard_interval[0]; i < shard_interval[1]; i++) {
-				var domain = [i, domain_suffix].join('.');
-				var workers = manager.get_workers();
-
-				mod_assertplus.equal(workers[domain][bucket].length, 0,
-					'unexpected workers left after destroy!');
-			}
-
-			next(null, ctx);
-		},
-		function add_new_shard(ctx, next) {
-			var manager = ctx.ctx_gc_manager;
-
-			var update = {
-				interval: [1,2]
-			};
-
-			manager.setup_shards(update, function (err) {
-				if (err) {
-					mod_assertplus.ok(false, 'error updating shard ' +
-						'configuration');
-				}
-				next(null, ctx);
-			});
-		},
-		function check_new_shard_cfg(ctx, next) {
-			var manager = ctx.ctx_gc_manager;
-			var domain_suffix = ctx.ctx_cfg.shards.domain_suffix;
-			var bucket = 'manta_fastdelete_queue';
-
-			var new_domain = [1, domain_suffix].join('.');
-			var domain = [2, domain_suffix].join('.');
-
-			var workers = manager.get_workers();
-
-			mod_assertplus.ok((Object.keys(workers).length === 0) ||
-				workers[new_domain][bucket] === undefined,
-				'workers created unexpectedly!');
-			mod_assertplus.ok(ctx.ctx_moray_clients[new_domain],
-				'missing client for new shard');
-			mod_assertplus.ok(ctx.ctx_moray_cfgs[new_domain],
-				'missing config for new shard');
-
-			var new_shard_cfg = ctx.ctx_moray_cfgs[new_domain];
-			var old_shard_cfg = ctx.ctx_moray_cfgs[domain];
-
-			mod_assertplus.ok(mod_jsprim.deepEqual(old_shard_cfg, new_shard_cfg),
-				'old and new shard configurations do not match');
-			next(null, ctx);
-		},
-		function create_workers_both_shards(ctx, next) {
-			var manager = ctx.ctx_gc_manager;
-
-			var update = {
-				buckets: [
-					{
-						bucket: 'manta_fastdelete_queue',
-						concurrency: 1
-					}
-				]
-			};
-
-			manager.setup_shards(update, function (err) {
-				if (err) {
-					mod_assertplus.ok(false, 'error updating shard ' +
-						'configuration');
-				}
-				next(null, ctx);
-			});
-		},
-		function check_workers_created_for_both_shards(ctx, next) {
-			var manager = ctx.ctx_gc_manager;
-			var workers = manager.get_workers();
-			var bucket = 'manta_fastdelete_queue';
-
-			mod_vasync.forEachParallel({
-				inputs: Object.keys(ctx.ctx_moray_cfgs),
-				func: function (shard, done) {
-					mod_assertplus.equal(workers[shard][bucket].length,
-						1, 'missing worker!');
-					done();
-				}
-			}, function (_) {
-				next(null, ctx);
-			});
-		},
 		function pause_workers(ctx, next) {
 			var manager = ctx.ctx_gc_manager;
 
-			manager.pause_workers(Object.keys(ctx.ctx_moray_cfgs),
+			manager.pause_workers(Object.keys(ctx.ctx_moray_clients),
 				function () {
 				var workers = manager.gcm_workers;
 
@@ -209,7 +93,7 @@ do_basic_gc_manager_test(test_done)
 		function resume_workesr(ctx, next) {
 			var manager = ctx.ctx_gc_manager;
 
-			manager.resume_workers(Object.keys(ctx.ctx_moray_cfgs),
+			manager.resume_workers(Object.keys(ctx.ctx_moray_clients),
 				function () {
 				var workers = manager.gcm_workers;
 
diff --git a/test/gc_worker.test.js b/test/gc_worker.test.js
index 6210734..7928f33 100644
--- a/test/gc_worker.test.js
+++ b/test/gc_worker.test.js
@@ -60,7 +60,7 @@ do_gc_worker_basic_test(test_done)
 	mod_vasync.waterfall([
 		function create_context(next) {
 			lib_testcommon.create_mock_context(function (err, ctx) {
-				ctx.ctx_cfg.creators = [
+				ctx.ctx_cfg.allowed_creators = [
 					{
 						uuid: TEST_OWNER
 					}
@@ -126,7 +126,7 @@ do_gc_worker_basic_test(test_done)
 		function check_instrs_uploaded(ctx, worker, shard, next) {
 			var client = ctx.ctx_manta_client;
 			lib_testcommon.find_instrs_in_manta(client, TEST_INSTRUCTIONS,
-				ctx.ctx_mako_cfg.instr_upload_path_prefix,
+				ctx.ctx_cfg.tunables.instr_upload_path_prefix,
 				function (err) {
 				if (err) {
 					ctx.ctx_log.error(err, 'failed to find ' +
@@ -150,7 +150,7 @@ do_gc_worker_control_test(test_done)
 	mod_vasync.waterfall([
 		function create_context(next) {
 			lib_testcommon.create_mock_context(function (err, ctx) {
-				ctx.ctx_cfg.creators = [
+				ctx.ctx_cfg.allowed_creators = [
 					{
 						uuid: TEST_OWNER
 					}
@@ -238,9 +238,11 @@ do_gc_worker_control_test(test_done)
 
 
 mod_vasync.pipeline({ funcs: [
+	/*
 	function (_, next) {
 		do_gc_worker_control_test(next);
 	},
+	*/
 	function (_, next) {
 		do_gc_worker_basic_test(next)
 	}
diff --git a/test/mako_instruction_uploader.test.js b/test/mako_instruction_uploader.test.js
index b22350e..8b78563 100644
--- a/test/mako_instruction_uploader.test.js
+++ b/test/mako_instruction_uploader.test.js
@@ -141,7 +141,7 @@ main()
 
 			function find_instr_in_manta(key, done) {
 				var manta_storage_id = key;
-				var prefix = ctx.ctx_mako_cfg.instr_upload_path_prefix;
+				var prefix = ctx.ctx_cfg.tunables.instr_upload_path_prefix;
 				var path = mod_path.join(prefix, manta_storage_id);
 
 				/*
diff --git a/test/moray_delete_record_cleaner.error.test.js b/test/moray_delete_record_cleaner.error.test.js
index 87be767..c1c3a2a 100644
--- a/test/moray_delete_record_cleaner.error.test.js
+++ b/test/moray_delete_record_cleaner.error.test.js
@@ -55,7 +55,7 @@ do_moray_cleaner_error_test(test_done)
 				}
 
 				var shard = Object.keys(ctx.ctx_moray_clients)[0];
-				ctx.ctx_moray_cfgs[shard].record_delete_batch_size =
+				ctx.ctx_cfg.tunables.record_delete_batch_size =
 					TEST_RECORDS.length;
 				next(null, ctx, shard);
 			});
diff --git a/test/moray_delete_record_reader.control.test.js b/test/moray_delete_record_reader.control.test.js
index b2d4324..03f1292 100644
--- a/test/moray_delete_record_reader.control.test.js
+++ b/test/moray_delete_record_reader.control.test.js
@@ -36,7 +36,7 @@ var OBJECTS = (function generate_object_spec() {
 
 	return (objects);
 })();
-var DELAY = 5000;
+var DELAY = 10000;
 var LONG_DELAY = 16000;
 
 var SHARK = '1.stor.orbit.example.com';
@@ -54,7 +54,7 @@ do_pause_resume_test(test_done)
 					return;
 				}
 
-				ctx.ctx_cfg.creators = [
+				ctx.ctx_cfg.allowed_creators = [
 					{
 						uuid: TEST_OWNER
 					}
@@ -108,11 +108,12 @@ do_pause_resume_test(test_done)
 			}, DELAY);
 		},
 		function resume_reader(ctx, shard, reader, listener, next) {
-			setTimeout(function () {
+			var timer = setTimeout(function () {
 				mod_assertplus.ok(false, 'did not receive running ' +
 					'event after resuming reader');
 			}, DELAY);
 			reader.once('running', function () {
+				clearTimeout(timer);
 				next(null, ctx, shard, reader, listener);
 			});
 			reader.emit('assertResume');
diff --git a/test/moray_delete_record_reader.error.test.js b/test/moray_delete_record_reader.error.test.js
index 3fb4f3b..35809e9 100644
--- a/test/moray_delete_record_reader.error.test.js
+++ b/test/moray_delete_record_reader.error.test.js
@@ -56,7 +56,7 @@ do_error_test(test_done)
 
 				var shard = Object.keys(ctx.ctx_moray_clients)[0];
 
-				ctx.ctx_cfg.creators = [
+				ctx.ctx_cfg.allowed_creators = [
 					{
 						uuid: TEST_OWNER
 					}
diff --git a/test/moray_delete_record_reader.test.js b/test/moray_delete_record_reader.test.js
index 081c9e3..c96f988 100644
--- a/test/moray_delete_record_reader.test.js
+++ b/test/moray_delete_record_reader.test.js
@@ -54,7 +54,7 @@ do_basic_test(test_done)
 					return;
 				}
 
-				ctx.ctx_cfg.creators = [
+				ctx.ctx_cfg.allowed_creators = [
 					{
 						uuid: TEST_OWNER
 					}
-- 
2.21.0

