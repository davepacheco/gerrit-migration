From 130bcdee3359db727c2e3c60e2212432d71a3d85 Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Wed, 25 Jan 2017 02:06:41 +0000
Subject: [PATCH] MORAY-368 Status information isn't logged when a query
 finishes

---
 lib/pg.js | 43 +++++++++++++++++++------------------------
 1 file changed, 19 insertions(+), 24 deletions(-)

diff --git a/lib/pg.js b/lib/pg.js
index a85d674..0971e34 100644
--- a/lib/pg.js
+++ b/lib/pg.js
@@ -85,22 +85,9 @@ function query(sql, args) {
     var res = new EventEmitter();
     var self = this;
     var timer;
-    var reqid;
+    var reqid = libuuid.create();
 
     done = once(function endOrError(event, arg) {
-        if (log.debug()) {
-            var lprops = {
-                client: self,
-                event: event
-            };
-            if (arg instanceof Error) {
-                lprops.err = arg;
-            } else {
-                lprops.res = arg;
-            }
-            log.debug('query: done');
-        }
-
         res.emit(event, arg);
 
         clearTimeout(timer);
@@ -110,34 +97,42 @@ function query(sql, args) {
     req = this._query.apply(this, arguments);
 
     req.on('row', function onRow(row) {
-        if (reqid === undefined)
-            reqid = libuuid.create();
         dtrace['query-row'].fire(function () {
             return ([reqid, sql, row]);
         });
-        log.debug({client: self, row: row}, 'query: row');
+
+        log.debug({
+            req_id: reqid,
+            row: row
+        }, 'query: row');
 
         clearTimeout(timer);
         res.emit('row', row);
     });
 
     req.on('end', function onQueryEnd(arg) {
-        if (reqid === undefined)
-            reqid = libuuid.create();
         dtrace['query-done'].fire(function () {
             return ([reqid, sql, arg]);
         });
 
+        log.debug({
+            req_id: reqid,
+            res: arg
+        }, 'query: done');
+
         done('end', arg);
     });
 
     req.on('error', function onQueryError(err) {
-        if (reqid === undefined)
-            reqid = libuuid.create();
         dtrace['query-error'].fire(function () {
             return ([reqid, sql, err.toString()]);
         });
 
+        log.debug({
+            req_id: reqid,
+            err: arg
+        }, 'query: failed');
+
         done('error', err);
     });
 
@@ -153,12 +148,11 @@ function query(sql, args) {
     }
 
     dtrace['query-start'].fire(function () {
-        if (reqid === undefined)
-        	reqid = libuuid.create();
         return ([reqid, sql]);
     });
+
     log.debug({
-        client: self,
+        req_id: reqid,
         sql: sql,
         args: args
     }, 'pg.query: started');
@@ -193,6 +187,7 @@ function pgSetup(options) {
     client.connection.stream.setKeepAlive(true);
     client.log = log.child({
         component: 'PGClient',
+        client: client,
         moray_id: client._moray_id
     }, true);
     client.release = pool.release.bind(pool, client);
-- 
2.21.0

