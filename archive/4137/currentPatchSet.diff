commit db868f356fb206c9725653c2ab8419510a18f1c5 (refs/changes/37/4137/3)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2018-06-12T23:05:10+00:00 (1 year, 4 months ago)
    
    joyent/node-cueball#140 CueBallConnectionPool#getStats() returns incorrect "totalConnections" value
    Reviewed by: Alex Wilson <alex.wilson@joyent.com>
    Approved by: Alex Wilson <alex.wilson@joyent.com>

diff --git a/CHANGES.adoc b/CHANGES.adoc
index 0b8d612..ae2b08c 100644
--- a/CHANGES.adoc
+++ b/CHANGES.adoc
@@ -6,6 +6,14 @@ toc::[]
 
 ## v2.x
 
+### v2.5.2
+
+Maintenance release.
+
+Bugs fixed:
+
+ - #140 Fix bug in pool statistics gathering
+
 ### v2.5.1
 
 Urgent maintenance release: node-moray, a notable consumer, was broken
diff --git a/lib/pool.js b/lib/pool.js
index b6bd6e1..7d4206f 100644
--- a/lib/pool.js
+++ b/lib/pool.js
@@ -761,9 +761,14 @@ CueBallConnectionPool.prototype.getStats = function () {
 		counters[k] = self.p_counters[k];
 	});
 
+	var tconns = 0;
+	Object.keys(self.p_connections).forEach(function (k) {
+		tconns += self.p_connections[k].length;
+	});
+
 	var stats = {
 		'counters': counters,
-		'totalConnections': Object.keys(self.p_connections).length,
+		'totalConnections': tconns,
 		'idleConnections': self.p_idleq.length,
 		'pendingConnections': self.p_initq.length,
 		'waiterCount': self.p_waiters.length
diff --git a/package.json b/package.json
index 2dea6df..39d78f9 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "cueball",
-  "version": "2.5.1",
+  "version": "2.5.2",
   "description": "manage a pool of connections to a multi-node service where nodes are listed in DNS",
   "main": "lib/index.js",
   "dependencies": {
diff --git a/test/pool.test.js b/test/pool.test.js
index bda065d..d743234 100644
--- a/test/pool.test.js
+++ b/test/pool.test.js
@@ -900,6 +900,8 @@ mod_tape.test('cueball#111', function (t) {
 });
 
 mod_tape.test('cueball#132 getStats()', function (t) {
+	var s = null;
+
 	connections = [];
 	resolver = undefined;
 
@@ -914,7 +916,16 @@ mod_tape.test('cueball#132 getStats()', function (t) {
 		},
 		recovery: recovery
 	});
-	var s = pool.getStats();
+	t.ok(resolver);
+
+	pool.on('stateChanged', function (st) {
+		if (st === 'stopped') {
+			t.end();
+		}
+	});
+
+	s = pool.getStats();
+
 	t.equal(typeof (s), 'object');
 	t.equal(Object.keys(s).length, 5);
 	t.equal(typeof (s['counters']), 'object');
@@ -922,7 +933,36 @@ mod_tape.test('cueball#132 getStats()', function (t) {
 	t.equal(s['idleConnections'], 0);
 	t.equal(s['pendingConnections'], 0);
 	t.equal(s['waiterCount'], 0);
-	t.end();
+
+	resolver.emit('added', 'b1', {});
+	setImmediate(function () {
+		t.equal(connections.length, 2);
+		summarize();
+		t.deepEqual(counts, { 'b1': 2 });
+
+		index.b1[0].connect();
+		index.b1[1].connect();
+
+		setTimeout(function () {
+			t.ok(pool.isInState('running'));
+
+			t.equal(connections.length, 2);
+			summarize();
+			t.deepEqual(counts, { 'b1': 2 });
+
+			s = pool.getStats();
+
+			t.equal(typeof (s), 'object');
+			t.equal(Object.keys(s).length, 5);
+			t.equal(typeof (s['counters']), 'object');
+			t.equal(s['totalConnections'], 2);
+			t.equal(s['idleConnections'], 2);
+			t.equal(s['pendingConnections'], 0);
+			t.equal(s['waiterCount'], 0);
+
+			pool.stop();
+		}, 100);
+	});
 });
 
 mod_tape.test('cleanup sandbox', function (t) {
