From f97c1ec085a0c668891a161b3b7e0debee8efda2 Mon Sep 17 00:00:00 2001
From: Julien Gilli <julien.gilli@joyent.com>
Date: Mon, 15 Jan 2018 13:42:55 -0800
Subject: [PATCH] VOLAPI-82 volume names should be limited in size

---
 lib/validate.js                               | 28 ++++++-
 .../api-create-invalid-names.test.js          | 73 +++++++++++++++++++
 test/lib/volumes-api.js                       |  2 +-
 3 files changed, 99 insertions(+), 4 deletions(-)
 create mode 100644 test/integration/api-create-invalid-names.test.js

diff --git a/lib/validate.js b/lib/validate.js
index 25770aa..d7e863b 100644
--- a/lib/validate.js
+++ b/lib/validate.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -581,7 +581,7 @@ function isSupportedVolumeDriver(driver) {
 function isValidVolumeName(name) {
     assert.string(name, 'name');
 
-    return name.match(VALID_VOLUME_NAME_REGEXP);
+    return VALID_VOLUME_NAME_REGEXP.test(name);
 }
 
 function validateCreateVolume(req, res, next) {
@@ -590,6 +590,23 @@ function validateCreateVolume(req, res, next) {
     assert.func(next, 'next');
     assert.object(req.params, 'req.params');
 
+    /*
+     * The limit was chosen so that:
+     *
+     * 1. it's reasonably close to the limit that docker uses for named volumes
+     *    (it seems like it uses the maximum file path length, which according
+     *    to POSIX at
+     *    http://pubs.opengroup.org/onlinepubs/009695399/basedefs/limits.h.html
+     *    is 256)
+     *
+     * 2. it's long enough to allow volume names generated by tools such as
+     *    docker-compose (which include a "project name" as a way to namespace
+     *    resources) to work
+     *
+     * 3. It's short enough to constraint the amount of resources used when
+     *    processing and storing volume names
+     */
+    var MAX_VOLUME_NAME_LENGTH = 256;
     var validVolumeSize = false;
     var volumeDriver = req.params.Driver;
     var volumeName = req.params.Name;
@@ -617,12 +634,17 @@ function validateCreateVolume(req, res, next) {
         return;
     }
 
-    if (volumeName !== '' && !isValidVolumeName(volumeName)) {
+    if (!isValidVolumeName(volumeName)) {
         next(new errors.ValidationError(volumeName
             + ' is not a valid volume name'));
         return;
     }
 
+    if (volumeName.length > MAX_VOLUME_NAME_LENGTH) {
+        next(new errors.ValidationError('volume name is too long'));
+        return;
+    }
+
     if (volumeSize !== undefined) {
         if (typeof (volumeSize) === 'string') {
             try {
diff --git a/test/integration/api-create-invalid-names.test.js b/test/integration/api-create-invalid-names.test.js
new file mode 100644
index 0000000..1dbe23f
--- /dev/null
+++ b/test/integration/api-create-invalid-names.test.js
@@ -0,0 +1,73 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2018, Joyent, Inc.
+ */
+
+var test = require('tape');
+var vasync = require('vasync');
+
+var testHelpers = require('./helpers');
+var volumesApi = require('../lib/volumes-api');
+
+var ALICE;
+var DOCKER_ALICE;
+var STATE = {
+    log: require('../lib/log')
+};
+
+test('setup', function (tt) {
+
+    tt.test('docker env', function (t) {
+        testHelpers.initDockerEnv(t, STATE, {}, function (err, accounts) {
+            t.ifErr(err);
+
+            ALICE = accounts.alice;
+
+            t.end();
+        });
+    });
+
+    tt.test('docker client init', function (t) {
+        testHelpers.createDockerRemoteClient({
+            user: ALICE
+        }, function (err, client) {
+            t.ifErr(err, 'docker client init for alice');
+
+            DOCKER_ALICE = client;
+
+            t.end();
+        });
+    });
+});
+
+test('api: create volumes with invalid name', function (tt) {
+
+    tt.test('docker volume create with invalid name should fail', function (t) {
+        /*
+         * 'x'.repeat(257) generates a volume name that is one character too
+         * long, as the max length for volume names is 256 characters.
+         */
+        var INVALID_VOLUME_NAMES = ['', '-foo', '.foo', 'x'.repeat(257)];
+
+        vasync.forEachParallel({
+            func: function createVolume(volumeName, done) {
+                volumesApi.createDockerVolume({
+                    name: volumeName,
+                    dockerClient: DOCKER_ALICE
+                }, function onVolCreated(volCreateErr) {
+                    t.ok(volCreateErr, 'volume creation with name '
+                        + volumeName + ' should fail');
+                    done();
+                });
+            },
+            inputs: INVALID_VOLUME_NAMES
+        }, function onAllVolsCreated(err) {
+            t.end();
+        });
+    });
+});
\ No newline at end of file
diff --git a/test/lib/volumes-api.js b/test/lib/volumes-api.js
index 2532864..94083e7 100644
--- a/test/lib/volumes-api.js
+++ b/test/lib/volumes-api.js
@@ -51,7 +51,7 @@ function createDockerVolume(opts, callback) {
             var volumeName = opts.name;
             var volumeType = testVolumes.getNfsSharedVolumesDriverName();
 
-            if (!volumeName) {
+            if (volumeName === undefined) {
                 volumeName = common.makeResourceName(volumeNamesPrefix);
             }
 
-- 
2.21.0

