commit 69fba44f07d715d1f8ee35d8a8e7b464f14f24a6 (refs/changes/27/4027/4)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2018-05-31T17:58:55+00:00 (1 year, 4 months ago)
    
    MORAY-473 Validate Moray configuration at startup

diff --git a/lib/errors.js b/lib/errors.js
index e12c51d..6a19279 100644
--- a/lib/errors.js
+++ b/lib/errors.js
@@ -132,6 +132,13 @@ function InternalError() {
 util.inherits(InternalError, WError);
 
 
+function InvalidMorayConfigError() {
+    WError.apply(this, arguments);
+    this.name = this.constructor.name;
+}
+util.inherits(InvalidMorayConfigError, WError);
+
+
 function InvalidBucketConfigError() {
     WError.apply(this, arguments);
     this.name = this.constructor.name;
@@ -361,6 +368,7 @@ module.exports = {
     EtagConflictError: EtagConflictError,
     FieldUpdateError: FieldUpdateError,
     InternalError: InternalError,
+    InvalidMorayConfigError: InvalidMorayConfigError,
     InvalidBucketConfigError: InvalidBucketConfigError,
     InvalidBucketNameError: InvalidBucketNameError,
     InvalidIndexDefinitionError: InvalidIndexDefinitionError,
diff --git a/lib/schema.js b/lib/schema.js
index 58bf4de..6b93dde 100644
--- a/lib/schema.js
+++ b/lib/schema.js
@@ -24,6 +24,7 @@ var mod_types = require('./types');
 
 var InvocationError = mod_errors.InvocationError;
 var InvalidBucketConfigError = mod_errors.InvalidBucketConfigError;
+var InvalidMorayConfigError = mod_errors.InvalidMorayConfigError;
 
 // --- Globals
 
@@ -323,6 +324,70 @@ AJV_ENV.addSchema({
     }
 });
 
+AJV_ENV.addSchema({
+    id: 'pg',
+    type: 'object',
+    allOf: [ { '$ref': 'object' } ],
+    additionalProperties: false,
+    properties: {
+        'connectTimeout': { allOf: [ { '$ref': 'integer' } ] },
+        'checkInterval': { allOf: [ { '$ref': 'integer' } ] },
+        'maxConnections': { allOf: [ { '$ref': 'integer' } ] },
+        'maxQueueLength': { allOf: [ { '$ref': 'integer' } ] },
+        'targetClaimDelay': { allOf: [ { '$ref': 'integer' } ] },
+        'maxIdleTime': { allOf: [ { '$ref': 'integer' } ] },
+        'user': { allOf: [ { '$ref': 'string' } ] }
+    }
+});
+
+AJV_ENV.addSchema({
+    id: 'config',
+    type: 'object',
+    allOf: [
+        { '$ref': 'object' },
+        {
+            'if': { 'properties': { 'standalone': { type: 'object' } } },
+            'then': { 'required': [ 'standalone' ] },
+            'else': { 'required': [ 'manatee' ] }
+        }
+    ],
+    required: [
+        'log',
+        'server_uuid',
+        'datacenter'
+    ],
+    additionalProperties: false,
+    properties: {
+        'log': { allOf: [ { '$ref': 'object' } ] },
+        'bunyan': { allOf: [ { '$ref': 'object' } ] },
+        'name': { allOf: [ { '$ref': 'string' } ] },
+        'file': { allOf: [ { '$ref': 'string' } ] },
+        'bindip': { allOf: [ { '$ref': 'string' } ] },
+        'port': { allOf: [ { '$ref': 'integer' } ] },
+        'monitorPort': { allOf: [ { '$ref': 'integer' } ] },
+        'manatee': {
+            allOf: [ { '$ref': 'object' } ],
+            required: [ 'pg', 'manatee' ],
+            additionalProperties: false,
+            properties: {
+                'manatee': { allOf: [ { '$ref': 'object' } ] },
+                'pg': { allOf: [ { '$ref': 'pg' } ] }
+            }
+        },
+        'standalone': {
+            allOf: [ { '$ref': 'object' } ],
+            required: [ 'pg', 'url' ],
+            additionalProperties: false,
+            properties: {
+                'url': { allOf: [ { '$ref': 'string' } ] },
+                'pg': { allOf: [ { '$ref': 'pg' } ] }
+            }
+        },
+        'server_uuid': { allOf: [ { '$ref': 'string' } ] },
+        'datacenter': { allOf: [ { '$ref': 'string' } ] },
+        'service_name': { allOf: [ { '$ref': 'string' } ] }
+    }
+});
 
 // --- Exported functions
 
@@ -345,3 +410,12 @@ exports.validateBucket = function validateBucket(bucket) {
     return new InvalidBucketConfigError('%s',
         errorsText(AJV_ENV.errors, 'bucket'));
 };
+
+exports.validateConfig = function validateConfig(config) {
+    if (AJV_ENV.validate('config', config)) {
+        return null;
+    }
+
+    throw new InvalidMorayConfigError('%s',
+        errorsText(AJV_ENV.errors, 'config'));
+};
diff --git a/lib/server.js b/lib/server.js
index 6ea20c7..78d7d58 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -19,6 +19,7 @@ var mod_artedi = require('artedi');
 var mod_net = require('net');
 var mod_os = require('os');
 var mod_restify = require('restify');
+var mod_schema = require('./schema');
 var VError = require('verror').VError;
 var LRU = require('lru-cache');
 var vasync = require('vasync');
@@ -54,6 +55,7 @@ var KANG_VERSION = '1.0.0';
 
 
 function MorayServer(options) {
+    mod_schema.validateConfig(options);
     var self = this;
 
     EventEmitter.call(this);
diff --git a/sapi_manifests/moray/template b/sapi_manifests/moray/template
index ea0fc5e..ceeb427 100644
--- a/sapi_manifests/moray/template
+++ b/sapi_manifests/moray/template
@@ -29,10 +29,6 @@
       "user": "moray"
     }
   },
-  "cache": {
-    "size": 5000,
-    "expiry": 60
-  },
   "server_uuid": "{{auto.SERVER_UUID}}",
   "datacenter": "{{DATACENTER}}",
   "service_name": "{{SERVICE_NAME}}"
diff --git a/sdc/sapi_manifests/moray/template b/sdc/sapi_manifests/moray/template
index 28349ce..b979bc7 100644
--- a/sdc/sapi_manifests/moray/template
+++ b/sdc/sapi_manifests/moray/template
@@ -29,10 +29,6 @@
       "user": "moray"
     }
   },
-  "cache": {
-    "size": 5000,
-    "expiry": 60
-  },
   "server_uuid": "{{auto.SERVER_UUID}}",
   "datacenter": "{{datacenter_name}}"
 }
