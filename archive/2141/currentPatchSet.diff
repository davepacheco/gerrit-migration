From 16d1a54ce8901bd60aed9a1ec2217832ed696481 Mon Sep 17 00:00:00 2001
From: Jerry Jelinek <jerry.jelinek@joyent.com>
Date: Fri, 23 Jun 2017 13:56:58 +0000
Subject: [PATCH] OS-6202 fdisk -l core dumps in CentOS 7 Reviewed by: Patrick
 Mooney <patrick.mooney@joyent.com> Approved by: Patrick Mooney
 <patrick.mooney@joyent.com>

---
 .../uts/common/brand/lx/syscall/lx_ioctl.c    | 76 ++++++++++++++-----
 1 file changed, 55 insertions(+), 21 deletions(-)

diff --git a/usr/src/uts/common/brand/lx/syscall/lx_ioctl.c b/usr/src/uts/common/brand/lx/syscall/lx_ioctl.c
index 88b025643f..eea22a7d6d 100644
--- a/usr/src/uts/common/brand/lx/syscall/lx_ioctl.c
+++ b/usr/src/uts/common/brand/lx/syscall/lx_ioctl.c
@@ -579,19 +579,57 @@ typedef struct lx_hd_geom {
 	unsigned long start;
 } lx_hd_geom_t;
 
-static lx_virt_disk_t *
-lx_lookup_zvol(lx_zone_data_t *lxzd, dev_t dev)
+/*
+ * Return the volsize and blksize for the correct virtual "disk" for the zone.
+ * Only these two values are returned in 'vdp' within this code.
+ *
+ * A virtual "disk" can be a zvol visible within the zone, but most zones are
+ * not configured with a delegated dataset necessary to make zvols visible.
+ *
+ * To make various applications happy, lx also pretends that our root filesystem
+ * (normally within the zone's dataset) lives on a virtual disk. We have a
+ * /dev/zfsds0 symlink which points at /dev/zfs. This appears in various places
+ * to give the illusion of root's disk. For example, see:
+ *    /proc/partitions
+ *    /sys/block/zfsds0
+ *    /sys/devices/zfs/zfsds0
+ * If an application issues the various LX_HDIO_GETGEO, LX_BLKGETSIZE*, or
+ * LX_BLKSSZGET ioctls on /dev/zfs (that is, minor number 0), we want to return
+ * something sane. In this case, we return the total size (which is normally
+ * limited by a quota) of the dataset that the zone root lives on.
+ */
+static int
+lx_lookup_zdsk_info(lx_zone_data_t *lxzd, dev_t dev, lx_virt_disk_t *vdp)
 {
 	lx_virt_disk_t *vd;
 
+	/* Handle /dev/zfs */
+	if (getminor(dev) == 0) {
+		struct statvfs64 sv;
+
+		if (VFS_STATVFS(curzone->zone_rootvp->v_vfsp, &sv) == 0) {
+			vdp->lxvd_volsize = sv.f_blocks * sv.f_frsize;
+			vdp->lxvd_blksize = sv.f_frsize;
+		} else {
+			vdp->lxvd_volsize = 0;
+			/* always set to prevent potential divide-by-zero */
+			vdp->lxvd_blksize = 512;
+		}
+
+		return (0);
+	}
+
 	vd = list_head(lxzd->lxzd_vdisks);
 	while (vd != NULL) {
-		if (vd->lxvd_type == LXVD_ZVOL && vd->lxvd_real_dev == dev)
-			return (vd);
+		if (vd->lxvd_type == LXVD_ZVOL && vd->lxvd_real_dev == dev) {
+			vdp->lxvd_volsize = vd->lxvd_volsize;
+			vdp->lxvd_blksize = vd->lxvd_blksize;
+			return (0);
+		}
 		vd = list_next(lxzd->lxzd_vdisks, vd);
 	}
 
-	return (NULL);
+	return (-1);
 }
 
 /*
@@ -613,16 +651,15 @@ ict_hdgetgeo(file_t *fp, int cmd, intptr_t arg, int lxcmd)
 	ASSERT(lxzd->lxzd_vdisks != NULL);
 
 	if (getmajor(fp->f_vnode->v_rdev) == getmajor(lxzd->lxzd_zfs_dev)) {
-		lx_virt_disk_t *vd;
+		lx_virt_disk_t vd;
 
-		vd = lx_lookup_zvol(lxzd, fp->f_vnode->v_rdev);
-		if (vd == NULL) {
+		if (lx_lookup_zdsk_info(lxzd, fp->f_vnode->v_rdev, &vd) != 0) {
 			/* should only happen if new zvol */
 			bzero(&lx_geom, sizeof (lx_geom));
 		} else {
 			diskaddr_t tot;
 
-			tot = vd->lxvd_volsize / vd->lxvd_blksize;
+			tot = vd.lxvd_volsize / vd.lxvd_blksize;
 
 			/*
 			 * Since the 'sectors' value is only one byte we make
@@ -673,14 +710,13 @@ ict_blkgetsize(file_t *fp, int cmd, intptr_t arg, int lxcmd)
 	ASSERT(lxzd->lxzd_vdisks != NULL);
 
 	if (getmajor(fp->f_vnode->v_rdev) == getmajor(lxzd->lxzd_zfs_dev)) {
-		lx_virt_disk_t *vd;
+		lx_virt_disk_t vd;
 
-		vd = lx_lookup_zvol(lxzd, fp->f_vnode->v_rdev);
-		if (vd == NULL) {
+		if (lx_lookup_zdsk_info(lxzd, fp->f_vnode->v_rdev, &vd) != 0) {
 			/* should only happen if new zvol */
 			tot = 0;
 		} else {
-			tot = vd->lxvd_volsize / 512;
+			tot = vd.lxvd_volsize / 512;
 		}
 	} else {
 		int res, rv;
@@ -722,14 +758,13 @@ ict_blkgetssize(file_t *fp, int cmd, intptr_t arg, int lxcmd)
 	ASSERT(lxzd->lxzd_vdisks != NULL);
 
 	if (getmajor(fp->f_vnode->v_rdev) == getmajor(lxzd->lxzd_zfs_dev)) {
-		lx_virt_disk_t *vd;
+		lx_virt_disk_t vd;
 
-		vd = lx_lookup_zvol(lxzd, fp->f_vnode->v_rdev);
-		if (vd == NULL) {
+		if (lx_lookup_zdsk_info(lxzd, fp->f_vnode->v_rdev, &vd) != 0) {
 			/* should only happen if new zvol */
 			bsize = 0;
 		} else {
-			bsize = (uint_t)vd->lxvd_blksize;
+			bsize = (uint_t)vd.lxvd_blksize;
 		}
 	} else {
 		int res, rv;
@@ -766,14 +801,13 @@ ict_blkgetsize64(file_t *fp, int cmd, intptr_t arg, int lxcmd)
 	ASSERT(lxzd->lxzd_vdisks != NULL);
 
 	if (getmajor(fp->f_vnode->v_rdev) == getmajor(lxzd->lxzd_zfs_dev)) {
-		lx_virt_disk_t *vd;
+		lx_virt_disk_t vd;
 
-		vd = lx_lookup_zvol(lxzd, fp->f_vnode->v_rdev);
-		if (vd == NULL) {
+		if (lx_lookup_zdsk_info(lxzd, fp->f_vnode->v_rdev, &vd) != 0) {
 			/* should only happen if new zvol */
 			tot = 0;
 		} else {
-			tot = vd->lxvd_volsize;
+			tot = vd.lxvd_volsize;
 		}
 	} else {
 		int res, rv;
-- 
2.21.0

