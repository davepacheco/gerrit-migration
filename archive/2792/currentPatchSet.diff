commit 355734de9f222430d4621ec6a8efe398a439054d (refs/changes/92/2792/2)
Author: Mike Zeller <mike.zeller@joyent.com>
Date:   2017-10-23T09:06:37-07:00 (2 years ago)
    
    TOOLS-1867 sdc-clients: add paging to napi.listIPs

diff --git a/CHANGES.md b/CHANGES.md
index 18e3185..1c7d550 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -10,6 +10,11 @@
 
 (nothing yet)
 
+## 10.4.0
+
+- TOOLS-1867: Update `NAPI.listIPs` to use limit/offset to return all
+  servers.
+
 ## 10.3.0
 
 - TOOLS-1854: Update `CNAPI.listServers` to use limit/offset to return all
diff --git a/lib/napi.js b/lib/napi.js
index 6fca6a5..b144b56 100644
--- a/lib/napi.js
+++ b/lib/napi.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 /*
@@ -16,6 +16,7 @@ var assert = require('assert-plus');
 var util = require('util');
 var format = util.format;
 var RestifyClient = require('./restifyclient');
+var async = require('async');
 
 
 // --- Exported Client
@@ -505,6 +506,10 @@ NAPI.prototype.deleteNetwork = function (uuid, params, options, callback) {
 /**
  * Lists the IPs for the given logical network
  *
+ * By default this will page through results to list all ips. If
+ * `params.limit` and/or `params.offset` is provided, then paging is *not*
+ * done. I.e. it is assumed the caller is attempting to manually do so.
+ *
  * @param {String} network : the logical network to list IPs on
  * @param {Object} params : the parameters to pass
  * @param {Object} options : Request options.
@@ -521,12 +526,62 @@ NAPI.prototype.listIPs = function (network, params, options, callback) {
         options = undefined;
     }
 
-    var opts = { path: format('/networks/%s/ips', network), query: params };
+    var self = this;
+
+    var reqOpts = { path: format('/networks/%s/ips', network), query: params };
     if (options && options.headers) {
-        opts.headers = options.headers;
+        reqOpts.headers = options.headers;
     }
 
-    return this.get(opts, callback);
+    if (params.limit || params.offset) {
+        self.get(reqOpts, callback);
+    } else {
+        listAllIPs(callback);
+    }
+
+    function listAllIPs(cb) {
+        var limit = 1000;
+        var offset = 0;
+        var allIps = [];
+        var stop = false;
+
+        // TODO Once vasync.whilst is merged in we should swap it in.
+        async.whilst(
+            function testAllIpsFetched() {
+                return !stop;
+            },
+            listIps,
+            function doneFetching(fetchErr) {
+                return cb(fetchErr, allIps);
+            });
+
+        function listIps(whilstNext) {
+            reqOpts.query.limit = limit;
+            reqOpts.query.offset = offset;
+
+            self.get(reqOpts, function napiGetIps(listErr, someIps) {
+                if (listErr) {
+                    stop = true;
+                    return whilstNext(listErr);
+                }
+
+                if (someIps.length === 0) {
+                    stop = true;
+                    return whilstNext();
+                }
+
+                allIps = allIps.concat(someIps);
+
+                if (someIps.length < limit) {
+                    stop = true;
+                    return whilstNext();
+                }
+
+                offset += someIps.length;
+                return whilstNext();
+            });
+        }
+    }
 };
 
 
diff --git a/package.json b/package.json
index 350aaeb..66b54ac 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "sdc-clients",
   "description": "node.js client libraries for Triton core REST APIs.",
-  "version": "10.3.0",
+  "version": "10.4.0",
   "homepage": "http://www.joyent.com",
   "repository": {
     "type": "git",
diff --git a/test/napi.test.js b/test/napi.test.js
index bf3d9e8..63b9dfc 100644
--- a/test/napi.test.js
+++ b/test/napi.test.js
@@ -136,13 +136,38 @@ test('napi', function (tt) {
     });
 
 
-    tt.test(' list network ips', function (t) {
+    /*
+     * We assume that the admin network will have multipe IPs
+     * provisioned for the following tests
+     */
+    tt.test(' list all network ips', function (t) {
         napi.listIPs(ADMIN.uuid, {}, function (err, ips) {
             t.ifError(err);
             t.ok(ips);
             t.ok(Array.isArray(ips));
-            t.ok(ips.length > 0);
-            if (ips.length > 0) {
+            /*
+             * Explicitly check for multiple ips being returned
+             * since other tests are issuing a {limit: 1}
+             */
+            t.ok(ips.length > 1);
+            if (ips.length > 1) {
+                IP = ips[0];
+                t.ok(IP.ip);
+                t.ok(IP.owner_uuid);
+                t.ok(IP.belongs_to_uuid);
+                t.ok(IP.belongs_to_type);
+            }
+            t.end();
+        });
+    });
+
+    tt.test(' list single network ip', function (t) {
+        napi.listIPs(ADMIN.uuid, {limit: 1}, function (err, ips) {
+            t.ifError(err);
+            t.ok(ips);
+            t.ok(Array.isArray(ips));
+            t.equal(ips.length, 1, 'single ip returned');
+            if (ips.length === 1) {
                 IP = ips[0];
                 t.ok(IP.ip);
                 t.ok(IP.owner_uuid);
@@ -153,6 +178,18 @@ test('napi', function (tt) {
         });
     });
 
+    tt.test(' list 2 network ips with offset 1', function (t) {
+        napi.listIPs(ADMIN.uuid, {limit: 2, offset: 1}, function (err, ips) {
+            t.ifError(err);
+            t.ok(ips);
+            t.ok(Array.isArray(ips));
+            t.equal(ips.length, 2, '2 ips are returned');
+            if (ips.length === 2) {
+                t.notEqual(ips[0], IP, 'offset ip not equal to previous ip');
+            }
+            t.end();
+        });
+    });
 
     tt.test(' get ip', function (t) {
         napi.getIP(ADMIN.uuid, IP.ip, function (err, ip) {
@@ -276,4 +313,4 @@ test('napi', function (tt) {
         napi.close();
         t.end();
     });
-});
\ No newline at end of file
+});
