From a04bb06099b11a80a3be15da533f8fbaa11984a2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?K=C3=A9vin=20Berthommier?= <kevin.bertho@gmail.com>
Date: Tue, 3 Jul 2018 23:28:16 +0200
Subject: [PATCH] lint

---
 lib/verror.js | 39 ++++++++++-----------------------------
 1 file changed, 10 insertions(+), 29 deletions(-)

diff --git a/lib/verror.js b/lib/verror.js
index bd9e015..ad4f4eb 100644
--- a/lib/verror.js
+++ b/lib/verror.js
@@ -52,10 +52,10 @@ function parseConstructorArguments(args)
 {
 	var argv, options, sprintf_args, shortmessage, k;
 
-	if (!isObject(args)) {
+	if (typeof args !== 'object' || args === null) {
 		throw new mod_AssertionError('args (object) is required');
 	}
-	if (!isBoolean(args.strict)) {
+	if (typeof args.strict !== 'boolean') {
 		throw new mod_AssertionError('args.strict (bool) is required');
 	}
 	if (!Array.isArray(args.argv)) {
@@ -79,7 +79,7 @@ function parseConstructorArguments(args)
 		}
 		sprintf_args = argv.slice(1);
 	} else {
-		if (!isString(argv[0])) {
+		if (typeof argv[0] !== 'string') {
 			throw new mod_AssertionError(
 				'first argument to VError, SError, or WError ' +
 				'constructor must be a string, object, or Error');
@@ -114,7 +114,7 @@ function parseConstructorArguments(args)
 	 * desiring the strict behavior can use the SError class or pass the
 	 * "strict" option to the VError constructor.
 	 */
-	if (!isObject(options)) {
+	if (typeof options !== 'object' || options === null) {
 		throw new mod_AssertionError('options (object) is required');
 	}
 	if (!options.strict && !args.strict) {
@@ -169,7 +169,7 @@ function VError()
 	 * If we've been given a name, apply it now.
 	 */
 	if (parsed.options.name) {
-		if (!isString(parsed.options.name)) {
+		if (typeof parsed.options.name !== 'string') {
 			throw new mod_AssertionError(
 				'error\'s "name" must be a string');
 		}
@@ -295,7 +295,7 @@ VError.findCauseByName = function (err, name)
 	if (!isError(err)) {
 		throw new mod_AssertionError('err must be an Error');
 	}
-	if (!isString(name)) {
+	if (typeof name !== 'string') {
 		throw new mod_AssertionError('name (string) is required');
 	}
 	if (name.length <= 0) {
@@ -338,7 +338,7 @@ VError.errorFromList = function (errors)
 		throw new mod_AssertionError('errors ([object]) is required');
 	}
 	errors.forEach(function (e) {
-		if (!isObject(e)) {
+		if (typeof e !== 'object' || e === null) {
 			throw new mod_AssertionError('errors ([object]) is required');
 	}
 	});
@@ -365,7 +365,7 @@ VError.errorForEach = function (err, func)
 	if (!isError(err)) {
 		throw new mod_AssertionError('err must be an Error');
 	}
-	if (!isFunc(func)) {
+	if (typeof arg !== 'function') {
 		throw new mod_AssertionError('func (func) is required');
 	}
 
@@ -496,26 +496,7 @@ WError.prototype.cause = function we_cause(c)
 
 // Assertion test functions
 
-function isBoolean(arg) {
-	return (typeof arg === 'boolean');
-}
-
-function isString(arg) {
-	return (typeof arg === 'string');
-}
-
-function isObject(arg) {
-	return (typeof arg === 'object' && arg !== null);
-}
-
 function isError(arg) {
-	return (
-		isObject(arg)
-		&& (Object.prototype.toString.call(arg) === '[object Error]'
-			|| arg instanceof Error)
-	);
-}
-
-function isFunc(arg) {
-	return (typeof arg === 'function');
+	return Object.prototype.toString.call(arg) === '[object Error]'
+			|| arg instanceof Error;
 }
-- 
2.21.0

