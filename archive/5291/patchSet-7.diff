commit 6b83c49a03251e3ae19575b74ea0d3d1e6292228 (refs/changes/91/5291/7)
Author: Marsell Kukuljevic <marsell@joyent.com>
Date:   2019-02-28T19:22:19+01:00 (7 months ago)
    
    TRITON-966 Add `CreateMachineDisk`, `ResizeMachineDisk` and `DeleteMachineDisk` end-points to CloudAPI

diff --git a/docs/index.md b/docs/index.md
index bfb5f2e..f567b74 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -922,6 +922,15 @@ Note that a `Triton-Datacenter-Name` response header was added in 9.2.0.
 
 The section describes API changes in CloudAPI versions.
 
+## 9.4.1
+
+- Added support for [CreateMachineDisk](#CreateMachineDisk),
+  [ResizeMachineDisk](#ResizeMachineDisk) and
+  [DeleteMachineDisk](#DeleteMachineDisk) for bhyve VMs; this only applies to
+  bhyve VMs that have flexible disk space enabled.
+  [GetMachineDisk](#GetMachineDisk) and [ListMachineDisks](#ListMachineDisks)
+  are also provided.
+
 ## 9.4.0
 - [CreateMachine](#CreateMachine) may pass disk quantity and size for bhyve
   instances. [GetMachine](#GetMachine) and [ListMachines](#ListMachcines)
@@ -4433,7 +4442,7 @@ firewall_enabled | Boolean  | Whether firewall rules are enforced on this instan
 deletion_protection | Boolean | Whether an instance is destroyable. See [Deletion Protection](#deletion-protection)
 compute_node | String  | UUID of the server on which the instance is located
 package     | String   | The id or name of the package used to create this instance
-flexible    | Boolean | Whether this instance uses the flexible_disk_space feature (bhyve)
+flexible    | Boolean | Whether this instance uses the flexible disk space feature (bhyve)
 free_space  | Number | The amount of space (MiB) that is not allocated to disks nor in use by snapshots of those disks. If snapshots are present, writes to disks may reduce this value (bhyve)
 
 ### Errors
@@ -4592,10 +4601,9 @@ firewall_enabled | Boolean  | Whether firewall rules are enforced on this instan
 compute_node | String  | UUID of the server on which the instance is located
 package     | String   | The id or name of the package used to create this instance
 dns_names   | Array[String] | DNS names of the instance (if the instance is using [CNS](https://docs.joyent.com/public-cloud/network/cns))
-flexible    | Boolean | Whether this instance uses the flexible_disk_space feature (bhyve)
+flexible    | Boolean | Whether this instance uses the flexible disk space feature (bhyve)
 free_space  | Number | The amount of space (MiB) that is not allocated to disks nor in use by snapshots of those disks. If snapshots are present, writes to disks may reduce this value (bhyve)
 
-
 Be aware that in the case of instances created with vmadm directly (i.e. not
 through CloudAPI), ips, networks, primaryIp and package may be in a different
 format than expected. The `ips` array can contain the value "dhcp", not just
@@ -4839,6 +4847,8 @@ metadata    | Object[String => String] | Any additional metadata this instance h
 package     | String   | The id or name of the package used to create this instance
 image       | String   | The image id this instance was provisioned with
 docker      | Boolean  | Whether this instance is a Docker container, if present
+flexible    | Boolean  | Whether this instance uses the flexible disk space feature (bhyve)
+free_space  | Number   | The amount of space (MiB) that is not allocated to disks nor in use by snapshots of those disks. If snapshots are present, writes to disks may reduce this value (bhyve)
 created     | ISO8601 date | When this instance was created
 updated     | ISO8601 date | When this instance's details was last updated
 
@@ -5914,6 +5924,369 @@ or
     Content-Length: 0
 
 
+## CreateMachineDisk (POST /:login/machines/:id/disks)
+
+**Interface is experimental; details may change in the future**
+
+Create a new disk for a bhyve VM.
+
+The sum of all disk sizes on a VM is limited by flexible disk space. This
+operation only applies for VMs that are currently stopped.
+
+### Inputs
+
+**Field** | **Type** | **Description**
+--------- | -------- | ---------------
+pci_slot  | String   | Optional, PCI slot that the disk will fill
+size      | Number   | Size in MiB, or the string "remaining" to use up all remaining available space
+
+### Returns
+
+If no `pci_slot` argument was provided, then only a 202 (and no object) will
+be returned. You will need to poll [ListMachineDisks](#list-machine-disks)
+until a new disk appears (if successful). `pci_slot` will be automatically
+assigned in this case.
+
+If a `pci_slot` argument was provided, the `Location` header will be set, and
+200 (with object) will be returned:
+
+**Field** | **Type** | **Description**
+--------- | -------- | ---------------
+id        | String   | This disk's UUID
+pci_slot  | String   | This disk's PCI slot
+size      | Number   | Size in MiB (before resize)
+boot      | Boolean  | If this is the VM's boot disk
+state     | String   | Current state of disk (i.e. 'creating')
+
+### Errors
+
+For all possible errors, see [CloudAPI HTTP Responses](#cloudapi-http-responses).
+
+**Error Code**   | **Description**
+---------------- | ---------------
+ResourceNotFound | If `:login` or `:id`  does not exist
+InvalidArgument  | If `size` or `pci_slot` was invalid
+
+### CLI Command
+
+    $ triton cloudapi /my/machines/5e42cd1e-34bb-402f-8796-bf5a2cae47db/disks \
+      -X POST -d '{"pci_slot":"0:4:1", "size": 1024}'
+
+### Example Request
+
+    POST /my/machines/5e42cd1e-34bb-402f-8796-bf5a2cae47db/disks HTTP/1.1
+    Authorization: ...
+    Host: api.example.com
+    Accept: application/json
+    Content-Length: 12
+    Content-Type: application/x-www-form-urlencoded
+    Api-Version: ~9
+
+    pci_slot=0:4:1
+    size=1024
+
+### Example Response
+
+    HTTP/1.1 200 OK
+    Access-Control-Allow-Origin: *
+    Access-Control-Allow-Methods: GET, POST
+    Connection: close
+    Date: Tue, 05 Dec 2018 17:19:26 GMT
+    Server: Joyent Triton 9.4.0
+    Api-Version: 9.0.0
+    Request-Id: 4bcf467e-4b88-4ab4-b7ab-65fad7464de9
+    Response-Time: 754
+    Content-Type: application/json
+    Content-Length: 0
+
+    {
+      "id": "21f04764-1db8-47dc-acfd-2215f2b842e9",
+      "pci_slot": "0:4:1",
+      "size": 1024,
+      "boot": false,
+      "state": "creating"
+    }
+
+
+
+## ResizeMachineDisk (POST /:login/machines/:id/disks/:disk_id)
+
+**Interface is experimental; details may change in the future**
+
+Asynchronously resize an existing disk on a bhyve VM.
+
+The sum of all disk sizes on a VM is limited by flexible disk space. This
+operation only applies for VMs that are currently stopped.
+
+When resizing down, `dangerous_allow_shrink` must be set to `true` otherwise
+the resize will be rejected. Since shrinking a disk truncates any data within
+that disk, it can cause filesystem corruption and data loss if the guest
+operating system does not handle it appropriately and data on the disk hasn't
+been prepared properly beforehand.
+
+Since this is an asynchronous operation, resizing may take several seconds.
+Check the disk's state using [GetMachineDisk](#GetMachineDisk).
+
+### Inputs
+
+**Field**              | **Type** | **Description**
+---------------------- | -------- | ---------------
+size                   | Number   | Size in MiB
+dangerous_allow_shrink | Boolean  | Optional, whether a disk can reduce size
+
+### Returns
+
+**Field** | **Type** | **Description**
+--------- | -------- | ---------------
+id        | String   | This disk's UUID
+pci_slot  | String   | This disk's PCI slot
+size      | Number   | Size in MiB (before resize)
+boot      | Boolean  | If this is the VM's boot disk
+state     | String   | Current state of disk (i.e. 'resizing')
+
+### Errors
+
+For all possible errors, see [CloudAPI HTTP Responses](#cloudapi-http-responses).
+
+**Error Code**   | **Description**
+---------------- | ---------------
+ResourceNotFound | If `:login`, `:id`, or `:disk_id` does not exist
+InvalidArgument  | If `size` or `dangerous_allow_shrink` was invalid
+
+### CLI Command
+
+    $ triton cloudapi /my/machines/5e42cd1e-34bb-402f-8796-bf5a2cae47db/disks/21f04764-1db8-47dc-acfd-2215f2b842e9 \
+      -X POST -d '{"size": 2048}'
+
+### Example Request
+
+    POST /my/machines/5e42cd1e-34bb-402f-8796-bf5a2cae47db/disks/21f04764-1db8-47dc-acfd-2215f2b842e9 HTTP/1.1
+    Authorization: ...
+    Host: api.example.com
+    Accept: application/json
+    Content-Length: 12
+    Content-Type: application/x-www-form-urlencoded
+    Api-Version: ~9
+
+    size=2048
+
+### Example Response
+
+    HTTP/1.1 200 OK
+    Access-Control-Allow-Origin: *
+    Access-Control-Allow-Methods: GET, POST
+    Connection: close
+    Date: Tue, 05 Dec 2018 17:19:26 GMT
+    Server: Joyent Triton 9.4.0
+    Api-Version: 9.0.0
+    Request-Id: 4bcf467e-4b88-4ab4-b7ab-65fad7464de9
+    Response-Time: 754
+    Content-Type: application/json
+    Content-MD5: qKVbfrhXVqh7Oni6Pub9Pw==
+    Content-Length: 70
+
+    {
+      "id": "21f04764-1db8-47dc-acfd-2215f2b842e9",
+      "pci_slot": "0:4:1",
+      "size": 1024,
+      "boot": false,
+      "state": "resizing"
+    }
+
+
+## GetMachineDisk (GET /:login/machines/:id/disks/:disk_id)
+
+**Interface is experimental; details may change in the future**
+
+Fetch a specific disk on a bhyve VM.
+
+### Inputs
+
+* None
+
+### Returns
+
+**Field** | **Type** | **Description**
+--------- | -------- | ---------------
+id        | String   | This disk's UUID
+pci_slot  | String   | This disk's PCI slot
+size      | Number   | Size in MiB
+boot      | Boolean  | If this is the VM's boot disk
+state     | String   | Current state of disk
+
+### Errors
+
+For all possible errors, see [CloudAPI HTTP Responses](#cloudapi-http-responses).
+
+**Error Code**   | **Description**
+---------------- | ---------------
+ResourceNotFound | If `:login`, `:id`, or `:disk_id` does not exist
+
+### CLI Command
+
+    $ triton cloudapi /my/machines/5e42cd1e-34bb-402f-8796-bf5a2cae47db/disks/21f04764-1db8-47dc-acfd-2215f2b842e9
+
+### Example Request
+
+    GET /my/machines/5e42cd1e-34bb-402f-8796-bf5a2cae47db/disks/21f04764-1db8-47dc-acfd-2215f2b842e9 HTTP/1.1
+    Authorization: ...
+    Host: api.example.com
+    Accept: application/json
+    Content-Length: 12
+    Content-Type: application/x-www-form-urlencoded
+    Api-Version: ~9
+
+### Example Response
+
+    HTTP/1.1 200 OK
+    Access-Control-Allow-Origin: *
+    Access-Control-Allow-Methods: GET, POST
+    Connection: close
+    Date: Tue, 05 Dec 2018 17:19:26 GMT
+    Server: Joyent Triton 9.4.0
+    Api-Version: 9.0.0
+    Request-Id: 4bcf467e-4b88-4ab4-b7ab-65fad7464de9
+    Response-Time: 754
+    Content-Type: application/json
+    Content-MD5: qKVbfrhXVqh7Oni6Pub9Pw==
+    Content-Length: 74
+
+    {
+      "id": "21f04764-1db8-47dc-acfd-2215f2b842e9",
+      "pci_slot": "0:4:1",
+      "size": 2048,
+      "boot": false,
+      "state": "running",
+    }
+
+
+## ListMachineDisks (GET /:login/machines/:id/disks)
+
+**Interface is experimental; details may change in the future**
+
+List all disk on a bhyve VM.
+
+### Inputs
+
+* None
+
+### Returns
+
+**Field** | **Type** | **Description**
+--------- | -------- | ---------------
+id        | String   | This disk's UUID
+pci_slot  | String   | This disk's PCI slot
+size      | Number   | Size in MiB
+boot      | Boolean  | If this is the VM's boot disk
+state     | String   | Current state of disk
+
+### Errors
+
+For all possible errors, see [CloudAPI HTTP Responses](#cloudapi-http-responses).
+
+**Error Code**   | **Description**
+---------------- | ---------------
+ResourceNotFound | If `:login` or `:id` does not exist
+
+### CLI Command
+
+    $ triton cloudapi /my/machines/5e42cd1e-34bb-402f-8796-bf5a2cae47db/disks
+
+### Example Request
+
+    GET /my/machines/5e42cd1e-34bb-402f-8796-bf5a2cae47db/disks HTTP/1.1
+    Authorization: ...
+    Host: api.example.com
+    Accept: application/json
+    Content-Length: 12
+    Content-Type: application/x-www-form-urlencoded
+    Api-Version: ~9
+
+### Example Response
+
+    HTTP/1.1 200 OK
+    Access-Control-Allow-Origin: *
+    Access-Control-Allow-Methods: GET, POST
+    Connection: close
+    Date: Tue, 05 Dec 2018 17:19:26 GMT
+    Server: Joyent Triton 9.4.0
+    Api-Version: 9.0.0
+    Request-Id: 4bcf467e-4b88-4ab4-b7ab-65fad7464de9
+    Response-Time: 754
+    Content-Type: application/json
+    Content-MD5: qKVbfrhXVqh7Oni6Pub9Pw==
+    Content-Length: 74
+
+    [
+      {
+        "id": "2bb08ea6-1da0-11e9-adaa-23f0e1aab5d7",
+        "pci_slot": "0:4:0",
+        "size": 10240,
+        "boot": true,
+        "state": "running",
+      },
+      {
+        "id": "21f04764-1db8-47dc-acfd-2215f2b842e9",
+        "pci_slot": "0:4:1",
+        "size": 2048,
+        "boot": false,
+        "state": "running",
+      }
+    ]
+
+
+## DeleteMachineDisk (DELETE /:login/machines/:id/disks/:disk_id)
+
+**Interface is experimental; details may change in the future**
+
+Asynchronously delete a disk off a bhyve VM.
+
+Since this is an asynchronous operation, deletion may take several seconds.
+You can check the disk's state using [GetMachineDisk](#GetMachineDisk).
+
+### Inputs
+
+* None
+
+### Returns
+
+* None
+
+### Errors
+
+For all possible errors, see [CloudAPI HTTP Responses](#cloudapi-http-responses).
+
+**Error Code**   | **Description**
+---------------- | ---------------
+ResourceNotFound | If `:login`, `:id` or `:disk_id` does not exist
+
+### CLI Command
+
+    $ triton cloudapi /my/machines/5e42cd1e-34bb-402f-8796-bf5a2cae47db/disks/21f04764-1db8-47dc-acfd-2215f2b842e9 -X DELETE
+
+### Example Request
+
+    DELETE /my/machines/5e42cd1e-34bb-402f-8796-bf5a2cae47db/disks/21f04764-1db8-47dc-acfd-2215f2b842e9 HTTP/1.1
+    Authorization: ...
+    Host: api.example.com
+    Accept: application/json
+    Content-Length: 12
+    Content-Type: application/x-www-form-urlencoded
+    Api-Version: ~9
+
+### Example Response
+
+    HTTP/1.1 204 No Content
+    Access-Control-Allow-Origin: *
+    Access-Control-Allow-Methods: GET, POST
+    Connection: close
+    Date: Tue, 05 Dec 2018 17:19:26 GMT
+    Server: Joyent Triton 9.4.0
+    Api-Version: 9.0.0
+    Request-Id: 4bcf467e-4b88-4ab4-b7ab-65fad7464de9
+    Response-Time: 754
+
+
 ## UpdateMachineMetadata (POST /:login/machines/:id/metadata)
 
 Allows you to update the metadata for a given instance.  Note that updating the
diff --git a/lib/app.js b/lib/app.js
index e53f42a..da9a7c6 100644
--- a/lib/app.js
+++ b/lib/app.js
@@ -41,6 +41,7 @@ var configEndpoints = require('./endpoints/config');
 var datacenters = require('./datacenters');
 var datasets = require('./datasets');
 var docs = require('./docs');
+var disks = require('./endpoints/disks');
 var keys = require('./keys');
 var machines = require('./machines');
 var metadata = require('./metadata');
@@ -548,6 +549,7 @@ module.exports = {
             machines.mount(server, machineThrottle);
             metadata.mount(server, machineThrottle);
             snapshots.mount(server, machineThrottle);
+            disks.mount(server, machineThrottle);
             tags.mount(server, machineThrottle);
             audit.mount(server, machineThrottle);
             rules.mount(server, machineThrottle);
diff --git a/lib/endpoints/disks.js b/lib/endpoints/disks.js
new file mode 100644
index 0000000..f24c535
--- /dev/null
+++ b/lib/endpoints/disks.js
@@ -0,0 +1,612 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2019, Joyent, Inc.
+ */
+
+/*
+ * These endpoints allow the creation/listing/resizing/deletion of disks on
+ * bhyve VMs.
+ */
+
+
+
+var assert  = require('assert-plus');
+var restify = require('restify');
+var string2uuid = require('uuid-by-string');
+var vasync  = require('vasync');
+
+
+
+// --- Globals
+
+
+
+var InvalidArgumentError  = restify.InvalidArgumentError;
+var MissingParameterError = restify.MissingParameterError;
+var ResourceNotFoundError = restify.ResourceNotFoundError;
+
+var UUID_RE = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
+var PCI_SLOT_RE = /^[0-9]{1,3}\:[0-9]{1,2}\:[0-7]$/;
+
+
+
+// --- Handlers
+
+
+
+/*
+ * Given a size in MiB and PCI slot, kick off a disk-creation job to add a new
+ * disk to a VM.
+ */
+function createDisk(req, res, next) {
+    assert.ok(req.sdc);
+
+    var log       = req.log;
+    var headers   = { 'x-request-id': req.getId() };
+    var context   = { caller: req._auditCtx };
+    var origin    = req.params.origin || 'cloudapi';
+    var vmUuid    = req.vm.uuid;
+    var ownerUuid = req.account.uuid;
+    var size      = req.params.size;
+    var pciSlot   = req.params.pci_slot;
+
+    if (req.vm.state !== 'stopped') {
+        next(new InvalidArgumentError('VM must be stopped'));
+        return;
+    }
+
+    if (!size) {
+        next(new MissingParameterError('size must be specified'));
+        return;
+    }
+
+    if (isNaN(+size)) {
+        next(new InvalidArgumentError('size must be a number'));
+        return;
+    }
+
+    if (pciSlot !== undefined && !PCI_SLOT_RE.test(pciSlot)) {
+        next(new InvalidArgumentError('pci_slot has wrong format'));
+        return;
+    }
+
+    if (pciSlot) {
+        var diskId = getDiskUuid(vmUuid, pciSlot);
+    }
+
+    req.sdc.vmapi.createDisk({
+        uuid: vmUuid,
+        owner_uuid: ownerUuid,
+        disk_uuid: diskId,
+        pci_slot: pciSlot,
+        size: size,
+        origin: origin,
+        context: context
+    }, {
+        log: log,
+        headers: headers
+    }, function createDiskCb(err, job) {
+        if (err) {
+            next(err);
+            return;
+        }
+
+        var login = req.account.login;
+        log.debug('POST /%s/machines/%s/disks -> ok', login, vmUuid);
+
+        if (!pciSlot) {
+            res.send(202);
+            next();
+            return;
+        }
+
+        var location = '/' + login + '/machines/' + vmUuid + '/' + diskId;
+        res.header('Location', location);
+
+        var disk = {
+            uuid: diskId,
+            pci_slot: pciSlot,
+            size: size,
+            boot: false,
+            state: 'creating'
+        };
+
+        res.send(translate(disk));
+
+        next();
+    });
+}
+
+
+
+/*
+ * Resize a VM's disk by starting a resize job. Resizing down will only be
+ * allowed if dangerous_allow_shrink is set, since shrinking a disk will likely
+ * lead to corruption and data loss within the disk when it is truncated.
+ */
+function resizeDisk(req, res, next) {
+    assert.ok(req.sdc);
+
+    var log       = req.log;
+    var headers   = { 'x-request-id': req.getId() };
+    var context   = { caller: req._auditCtx };
+    var origin    = req.params.origin || 'cloudapi';
+    var vmUuid    = req.vm.uuid;
+    var ownerUuid = req.account.uuid;
+    var size      = req.params.size;
+    var canShrink = req.params.dangerous_allow_shrink;
+
+    if (req.vm.state !== 'stopped') {
+        next(new InvalidArgumentError('VM must be stopped'));
+        return;
+    }
+
+    if (!size) {
+        next(new MissingParameterError('size must be specified'));
+        return;
+    }
+
+    if (isNaN(+size)) {
+        next(new InvalidArgumentError('size must be a number'));
+        return;
+    }
+
+    var shrinkType = typeof (canShrink);
+    if (shrinkType !== 'undefined' && shrinkType !== 'boolean') {
+        var errMsg = 'dangerous_allow_shrink must be a boolean';
+        next(new InvalidArgumentError(errMsg));
+        return;
+    }
+
+    req.sdc.vmapi.resizeDisk({
+        uuid: vmUuid,
+        owner_uuid: ownerUuid,
+        pci_slot: req.disk.pci_slot,
+        size: size,
+        dangerous_allow_shrink: canShrink,
+        origin: origin,
+        context: context
+    }, {
+        log: log,
+        headers: headers
+    }, function resizeDiskCb(err, _job) {
+        if (err) {
+            next(err);
+            return;
+        }
+
+        log.debug('POST /%s/machines/%s/disks/%s -> ok',
+                    req.account.login, vmUuid, req.disk.uuid);
+
+        req.disk.state = 'resizing';
+
+        res.send(translate(req.disk));
+        next();
+    });
+}
+
+
+
+/*
+ * Delete a disk from a VM by starting a deletion job.
+ */
+function deleteDisk(req, res, next) {
+    assert.ok(req.sdc);
+
+    var log       = req.log;
+    var headers   = { 'x-request-id': req.getId() };
+    var context   = { caller: req._auditCtx };
+    var origin    = req.params.origin || 'cloudapi';
+    var vmUuid    = req.vm.uuid;
+    var ownerUuid = req.account.uuid;
+
+    if (req.vm.state !== 'stopped') {
+        next(new InvalidArgumentError('VM must be stopped'));
+        return;
+    }
+
+    req.sdc.vmapi.deleteDisk({
+        uuid: vmUuid,
+        owner_uuid: ownerUuid,
+        pci_slot: req.disk.pci_slot,
+        origin: origin,
+        context: context
+    }, {
+        log: log,
+        headers: headers
+    }, function deleteDiskCb(err, job) {
+        if (err) {
+            next(err);
+            return;
+        }
+
+        log.debug('DELETE /%s/machines/%s/disks/%s -> ok',
+                    req.account.login, vmUuid, req.disk.uuid);
+        res.send(204);
+        next();
+    });
+}
+
+
+
+/*
+ * Return a single specific disk object. In order for consumers to have a
+ * more accurate idea about the state of the disk (e.g. resizing), we fake
+ * a disk state by drawing from the current VM's state and any queued or running
+ * disk jobs for this VM.
+ */
+function getDisk(req, res, next) {
+    loadDiskJobs(req, function jobCb(err, jobs) {
+        if (err) {
+            next(err);
+            return;
+        }
+
+        var disk = req.disk;
+
+        for (var i = 0; i !== jobs.length; i++) {
+            var job = jobs[i];
+            if (disk.path === job.path) {
+                disk.state = job.task;
+                break;
+            }
+        }
+
+        disk.state = disk.state || req.vm.state;
+
+        res.send(translate(disk));
+        next();
+    });
+}
+
+
+
+/*
+ * Return a list of disk object for a given VM. In order for consumers to have a
+ * more accurate idea about the state of the disks (e.g. resizing), we fake
+ * disk states by drawing from the current VM's state and any queued or running
+ * disk jobs for this VM and disk.
+ */
+function listDisks(req, res, next) {
+    var vmUuid = req.vm.uuid;
+    var disks = req.vm.disks || [];
+
+    if (disks.length === 0) {
+        res.header('x-resource-count', disks.length);
+        res.send(disks);
+        next();
+        return;
+    }
+
+    loadDiskJobs(req, function jobCb(err, jobs) {
+        if (err) {
+            next(err);
+            return;
+        }
+
+        // since create jobs have no path, they're ignored here
+        disks.forEach(function addDiskStatus(disk) {
+            for (var i = 0; i !== jobs.length; i++) {
+                var job = jobs[i];
+                if (job.path === disk.path) {
+                    disk.state = job.task;
+                    return;
+                }
+            }
+
+            disk.state = disk.state || req.vm.state;
+            disk.uuid = disk.uuid || getDiskUuid(vmUuid, disk.pci_slot);
+        });
+
+        // and here we add faux disk objects for disks currently being created
+        // which have a pci_slot
+        jobs.forEach(function addDiskObject(job) {
+            if (job.task !== 'creating' || !job.pci_slot) {
+                return;
+            }
+
+            var existing = disks.filter(function checkSlotPresent(disk) {
+                return disk.pci_slot === job.pci_slot;
+            })[0];
+
+            if (!existing) {
+                disks.push({
+                    uuid: getDiskUuid(vmUuid, job.pci_slot),
+                    pci_slot: job.pci_slot,
+                    size: job.size,
+                    boot: false,
+                    state: job.task
+                });
+            }
+        });
+
+        res.header('x-resource-count', disks.length);
+        res.send(disks.map(translate));
+        next();
+    });
+}
+
+
+
+// --- Helpers
+
+
+
+/*
+ * Find the VM associated with the machine param (and current account). Assign
+ * to req.vm.
+ */
+function getMachine(req, res, next) {
+    assert.ok(req.sdc);
+
+    var vmUuid    = req.params.machine;
+    var ownerUuid = req.account.uuid;
+    assert.ok(ownerUuid, 'ownerUuid');
+
+    req.log.debug({ vm: vmUuid, owner: ownerUuid }, 'Machine check for disks');
+
+    if (!UUID_RE.test(vmUuid)) {
+        next(new InvalidArgumentError('VM has invalid format'));
+        return;
+    }
+
+    req.sdc.vmapi.getVm({
+        uuid: vmUuid,
+        owner_uuid: ownerUuid
+    }, {
+        log: req.log,
+        headers: { 'x-request-id': req.getId() }
+    }, function getVmCb(err, vm) {
+        if (err) {
+            next(err);
+            return;
+        }
+
+        req.vm = vm;
+
+        next();
+    });
+}
+
+
+
+/*
+ * Given a :disk param, find the associated disk in req.vm.disks.
+ *
+ * If a disk has no UUID, we generate a stable one on the fly. If the disk
+ * already has a UUID (i.e. vmadm has one stored), we use that instead.
+ */
+function getMachineDisk(req, res, next) {
+    var id = req.params.disk;
+    var vm = req.vm;
+
+    var disks = (vm.disks || []).filter(function matchUuid(disk) {
+        return disk.uuid === id || getDiskUuid(vm.uuid, disk.pci_slot) === id;
+    });
+
+    req.disk = disks[0];
+
+    if (!req.disk) {
+        next(new ResourceNotFoundError('disk not found'));
+        return;
+    }
+
+    req.disk.uuid = req.disk.uuid || id;
+
+    next();
+}
+
+
+
+/*
+ * Convert a disk object into the representation used by clients.
+ */
+function translate(disk) {
+    return {
+        id: disk.uuid,
+        pci_slot: disk.pci_slot,
+        size: disk.size,
+        boot: disk.boot || false,
+        state: disk.state
+    };
+}
+
+
+
+/*
+ * Fetch any queued or running disk jobs for resize or deletion. Return a
+ * simplified representation of the job type and associated path.
+ */
+function loadDiskJobs(req, cb) {
+    req.sdc.vmapi.listJobs({
+        vm_uuid: req.vm.uuid,
+        task: 'update',
+        execution: 'queued'
+    }, {
+        headers: {
+            'x-request-id': req.getId()
+        }
+    }, function loadQueuedJobsCb(err, queuedJobs) {
+        if (err) {
+            cb(err);
+            return;
+        }
+
+        req.sdc.vmapi.listJobs({
+            vm_uuid: req.vm.uuid,
+            task: 'update',
+            execution: 'running'
+        }, {
+            headers: {
+                'x-request-id': req.getId()
+            }
+        }, function loadRunningJobsCb(err2, runningJobs) {
+            if (err2) {
+                cb(err2);
+                return;
+            }
+
+            var jobs = queuedJobs.concat(runningJobs);
+            var subtasks = ['create_disk', 'resize_disk', 'delete_disk'];
+
+            var subtaskJobs = jobs.filter(function matchSubtask(job) {
+                return subtasks.indexOf(job.params.subtask) !== -1;
+            });
+
+            var simplifiedJobs = subtaskJobs.map(function simplify(job) {
+                var payload = job.params.payload;
+                var task = job.params.subtask;
+                var sJobs;
+
+                if (task === 'create_disk') {
+                    sJobs = payload.add_disks.map(function createJob(disk) {
+                        return {
+                            pci_slot: disk.pci_slot,
+                            size: disk.size,
+                            task: 'creating'
+                        };
+                    });
+                } else if (task === 'resize_disk') {
+                    sJobs = payload.update_disks.map(function resizeJob(disk) {
+                        return {
+                            path: disk.path,
+                            task: 'resizing'
+                        };
+                    });
+                } else if (task === 'delete_disk') {
+                    sJobs = payload.remove_disks.map(function deleteJob(path) {
+                        return {
+                            path: path,
+                            task: 'deleting'
+                        };
+                    });
+                } else {
+                    assert.ok(false, 'unexpected value');
+                }
+
+                return sJobs;
+            });
+
+            var flattenedJobs = [].concat.apply([], simplifiedJobs);
+
+            cb(null, flattenedJobs);
+        });
+    });
+}
+
+
+
+/*
+ * We generate an apparently-persistent UUID for each disk based on the VM's
+ * UUID and the PCI slot, since these two attributes don't change. Although
+ * we don't store the UUID, since VM UUID and PCI slot don't change, the
+ * resulting UUID for a specific disk is always the same.
+ */
+function getDiskUuid(vmUuid, pciSlot) {
+    return string2uuid(vmUuid + '/' + pciSlot).toLowerCase();
+}
+
+
+
+/*
+ * Add endpoints to cloudapi which customers can call.
+ */
+function mount(server, before, pre, post) {
+    assert.object(server);
+    assert.ok(before);
+
+    server.post({
+            path: '/:account/machines/:machine/disks',
+            name: 'CreateMachineDisk',
+            version: ['7.2.0', '7.3.0', '8.0.0', '9.0.0']
+        },
+        before,
+        pre || [],
+        getMachine,
+        createDisk,
+        post || []);
+
+    server.get({
+            path: '/:account/machines/:machine/disks',
+            name: 'ListMachineDisks',
+            version: ['7.2.0', '7.3.0', '8.0.0', '9.0.0']
+        },
+        before,
+        pre || [],
+        getMachine,
+        listDisks,
+        post || []);
+
+    server.head({
+            path: '/:account/machines/:machine/disks',
+            name: 'ListMachineDisks',
+            version: ['7.2.0', '7.3.0', '8.0.0', '9.0.0']
+        },
+        before,
+        pre || [],
+        getMachine,
+        listDisks,
+        post || []);
+
+    server.get({
+            path: '/:account/machines/:machine/disks/:disk',
+            name: 'GetMachineDisk',
+            version: ['7.2.0', '7.3.0', '8.0.0', '9.0.0']
+        },
+        before,
+        pre || [],
+        getMachine,
+        getMachineDisk,
+        getDisk,
+        post || []);
+
+    server.head({
+            path: '/:account/machines/:machine/disks/:disk',
+            name: 'GetMachineDisk',
+            version: ['7.2.0', '7.3.0', '8.0.0', '9.0.0']
+        },
+        before,
+        pre || [],
+        getMachine,
+        getMachineDisk,
+        getDisk,
+        post || []);
+
+    server.post({
+            path: '/:account/machines/:machine/disks/:disk',
+            name: 'ResizeMachineDisk',
+            version: ['7.2.0', '7.3.0', '8.0.0', '9.0.0']
+        },
+        before,
+        pre || [],
+        getMachine,
+        getMachineDisk,
+        resizeDisk,
+        post || []);
+
+
+    server.del({
+            path: '/:account/machines/:machine/disks/:disk',
+            name: 'DeleteMachineDisk',
+            version: ['7.2.0', '7.3.0', '8.0.0', '9.0.0']
+        },
+        before,
+        pre || [],
+        getMachine,
+        getMachineDisk,
+        deleteDisk,
+        post || []);
+
+    return server;
+}
+
+
+
+module.exports = {
+    mount: mount
+};
diff --git a/lib/machines.js b/lib/machines.js
index 2596514..0017b57 100644
--- a/lib/machines.js
+++ b/lib/machines.js
@@ -234,7 +234,7 @@ function translate(machine, req)  {
         msg.package = packages[0] ? packages[0].name : '';
 
         if (machine.brand === 'bhyve') {
-            msg.flexible = packages[0] && packages[0].flexible_disk;
+            msg.flexible = machine.flexible_disk_size !== undefined;
         }
     } else {
         msg.package = '';
diff --git a/package.json b/package.json
index 065de4e..4ae4a50 100644
--- a/package.json
+++ b/package.json
@@ -35,12 +35,13 @@
         "nodemailer": "0.7.1",
         "nopt": "2.0.0",
         "restify": "4.3.3",
-        "sdc-clients": "11.3.1",
+        "sdc-clients": "git+https://github.com/joyent/node-sdc-clients.git#01b9136799e4c76e26c59dd266cd5435cccde534",
         "semver": "5.4.1",
         "strsplit": "1.0.0",
         "triton-metrics": "0.1.0",
         "triton-netconfig": "1.3.0",
         "ufds": "1.5.0",
+        "uuid-by-string": "0.6.0",
         "vasync": "2.2.0",
         "verror": "1.10.0",
         "xregexp": "3.1.0"
diff --git a/test/machines.94.test.js b/test/machines.94.test.js
index 3fb29e4..cd9e120 100644
--- a/test/machines.94.test.js
+++ b/test/machines.94.test.js
@@ -60,6 +60,7 @@ var CUSTOM_BHYVE_PACKAGES = [
 var BHYVE_IMAGE;
 var BHYVE_IMAGE_UUID;
 var BHYVE_MACHINE_UUID;
+var DISK_UUID;
 var CLIENT;
 var CLIENTS;
 var OTHER;
@@ -357,6 +358,187 @@ test('GetMachine has disks - no disks/inflexible disk package',
     });
 });
 
+test('ListMachineDisks has disks - no disks/inflexible disk package',
+    function listMachineDisksTest(t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var expectedDisks = [
+        {
+            boot: true,
+            pci_slot: '0:4:0',
+            size: BHYVE_IMAGE.image_size,
+            state: 'running'
+        },
+        {
+            boot: false,
+            pci_slot: '0:4:1',
+            size: BHYVE_128_INFLEXIBLE.quota,
+            state: 'running'
+        }
+    ];
+
+    CLIENT.get('/my/machines/' + BHYVE_MACHINE_UUID + '/disks',
+        function gotDisks(err, req, res, disks) {
+            t.ifError(err);
+
+            checkDisks(t, expectedDisks, disks);
+            t.ok(disks[0].id, 'disks[0].id');
+            t.ok(disks[1].id, 'disks[1].id');
+
+            DISK_UUID = disks[1].id;
+
+            t.end();
+    });
+});
+
+test('ListMachineDisks OTHER - no access',
+    function listMachineDisksOtherTest(t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    OTHER.get('/my/machines/' + BHYVE_MACHINE_UUID + '/disks',
+        function gotDisks(err, req, res, disks) {
+            t.ok(err, 'err');
+            t.equal(err.statusCode, 404, 'statusCode');
+            t.end();
+    });
+});
+
+test('GetMachineDisk has disk - no disks/inflexible disk package',
+    function getMachineDiskTest(t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    CLIENT.get('/my/machines/' + BHYVE_MACHINE_UUID + '/disks/' + DISK_UUID,
+        function gotDisk(err, req, res, disk) {
+            t.ifError(err);
+
+            t.deepEqual(disk, {
+                id: DISK_UUID,
+                boot: false,
+                pci_slot: '0:4:1',
+                size: BHYVE_128_INFLEXIBLE.quota,
+                state: 'running'
+            });
+
+            t.end();
+    });
+});
+
+test('GetMachineDisks OTHER - no access',
+    function getMachineDisksOtherTest(t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    OTHER.get('/my/machines/' + BHYVE_MACHINE_UUID + '/disks/' + DISK_UUID,
+        function gotDisk(err, req, res, disks) {
+            t.ok(err, 'err');
+            t.equal(err.statusCode, 404, 'statusCode');
+            t.end();
+    });
+});
+
+function stopMachine(t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    CLIENT.post('/my/machines/' + BHYVE_MACHINE_UUID, {
+        action: 'stop'
+    }, function onStop(err) {
+        t.ifError(err, 'err');
+
+        CLIENT.vmapi.listJobs({
+            vm_uuid: BHYVE_MACHINE_UUID,
+            task: 'stop'
+        }, function listJobsCb(err2, jobs) {
+            t.ifError(err2, 'list jobs error');
+
+            var jobUuid = jobs[0].uuid;
+            machinesCommon.waitForJob(CLIENT, jobUuid, function onWaitCb(err3) {
+                t.ifError(err3, 'Check state error');
+                t.end();
+            });
+        });
+    });
+}
+
+test('Stop machine 1', stopMachine);
+
+test('CreateMachineDisk cannot create disk - no disks/inflexible disk package',
+    function createMachineDiskCannotCreateTest(t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    CLIENT.post('/my/machines/' + BHYVE_MACHINE_UUID + '/disks', {
+        size: 128
+    }, function createDisk(err, req, res, disk) {
+        t.ok(err);
+
+        t.equal(err.name, 'VmWithoutFlexibleDiskSizeError', 'disk.name');
+        t.equal(disk.code, 'VmWithoutFlexibleDiskSize', 'disk.code');
+
+        t.end();
+    });
+});
+
+test('ResizeMachineDisk cannot resize disk - no disks/inflexible disk package',
+    function resizeMachineDiskTest(t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    CLIENT.post('/my/machines/' + BHYVE_MACHINE_UUID + '/disks/' + DISK_UUID, {
+        size: BHYVE_128_INFLEXIBLE.quota - 128
+    }, function resizeDisk(err, req, res, disk) {
+        t.ok(err);
+
+        t.equal(err.name, 'VmWithoutFlexibleDiskSizeError', 'disk.name');
+        t.equal(disk.code, 'VmWithoutFlexibleDiskSize', 'disk.code');
+
+        t.end();
+    });
+});
+
+test('DeleteMachineDisk cannot delete disk - no disks/inflexible disk package',
+    function deleteMachineDisk(t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    CLIENT.del('/my/machines/' + BHYVE_MACHINE_UUID + '/disks/' + DISK_UUID,
+        function gotDisk(err, req, res, disk) {
+            t.ok(err);
+
+            t.equal(err.name, 'VmWithoutFlexibleDiskSizeError', 'disk.name');
+            t.equal(disk.code, 'VmWithoutFlexibleDiskSize', 'disk.code');
+
+            t.end();
+    });
+});
+
 test('Delete bhyve test vm - no disks/inflexible disk package',
     function (t) {
     if (!BHYVE_MACHINE_UUID) {
@@ -477,10 +659,12 @@ test('CreateMachine - Disks/flexible disk package', function (t) {
         return;
     }
 
+    DISK_UUID = 'dea91a7f-5fe3-4408-b25a-994c97a7975e';
+
     var obj = {
         disks: [
             { uuid: 'eea4e223-dee6-44dc-a7e1-71f996e534f0' },
-            { uuid: 'dea91a7f-5fe3-4408-b25a-994c97a7975e', size: 512},
+            { uuid: DISK_UUID, size: 512},
             { uuid: 'c41ce11e-bed2-45d2-bdb8-8dc889ed8ced', size: 'remaining' }
         ],
         image: BHYVE_IMAGE_UUID,
@@ -546,7 +730,7 @@ test('GetMachine has disks - Disks/flexible disk package', function (t) {
         },
         {
             size: 512,
-            uuid: 'dea91a7f-5fe3-4408-b25a-994c97a7975e'
+            uuid: DISK_UUID
         },
         {
             size: BHYVE_128_FLEXIBLE.quota - BHYVE_IMAGE.image_size - 512,
@@ -565,6 +749,244 @@ test('GetMachine has disks - Disks/flexible disk package', function (t) {
     });
 });
 
+test('Stop machine 2', stopMachine);
+
+test('ResizeMachineDisk OTHER - no access',
+    function resizeMachineDiskOtherTest(t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    OTHER.post('/my/machines/' + BHYVE_MACHINE_UUID + '/disks/' + DISK_UUID, {
+        size: 128
+    }, function resizeDisk(err, req, res, disk) {
+        t.ok(err, 'err');
+
+        t.equal(err.statusCode, 404, 'statusCode');
+        t.equal(err.name, 'ResourceNotFoundError');
+
+        t.end();
+    });
+});
+
+test('ResizeMachineDisk resize disk down - Disks/flexible disk package',
+    function resizeMachineDiskDownTest(t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    CLIENT.post('/my/machines/' + BHYVE_MACHINE_UUID + '/disks/' + DISK_UUID, {
+        size: 128
+    }, function resizeDisk(err, req, res, disk) {
+        t.ok(err, 'err');
+
+        t.equal(err.name, 'ValidationFailedError', 'err.name');
+        t.equal(disk.errors[0].field, 'size', 'size');
+        t.equal(disk.errors[0].message,
+            'Reducing disk size is a dangerous operation');
+
+        t.end();
+    });
+});
+
+test('ResizeMachineDisk resize disk down 2 - Disks/flexible disk package',
+    function resizeMachineDisk2Test(t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var path = '/my/machines/' + BHYVE_MACHINE_UUID + '/disks/' + DISK_UUID;
+
+    CLIENT.post(path, {
+        size: 128,
+        dangerous_allow_shrink: true
+    }, function resizeDisk(err, req, res, disk) {
+        t.ifError(err, 'err');
+
+        t.deepEqual(disk, {
+            id: DISK_UUID,
+            pci_slot: '0:4:1',
+            size: 512,
+            boot: false,
+            state: 'resizing'
+        }, 'disk');
+
+        poll();
+    });
+
+    var count = 0;
+    function poll() {
+        if (count > 10) {
+            t.fail('Failed to resize disk in time');
+            t.end();
+            return;
+        }
+
+        count += 1;
+
+        CLIENT.get(path, function getCb(err, req, res, disk) {
+            t.ifError(err, 'err');
+
+            if (disk.state !== 'stopped') {
+                setTimeout(poll, 2000);
+                return;
+            }
+
+            t.deepEqual(disk, {
+                id: DISK_UUID,
+                pci_slot: '0:4:1',
+                size: 128,
+                boot: false,
+                state: 'stopped'
+            }, 'disk');
+
+            t.end();
+        });
+    }
+});
+
+test('DeleteMachineDisk OTHER - no access',
+    function deleteMachineDiskOtherTest(t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    OTHER.del('/my/machines/' + BHYVE_MACHINE_UUID + '/disks/' + DISK_UUID,
+        function deleteDisk(err, req, res, disk) {
+        t.ok(err, 'err');
+
+        t.equal(err.statusCode, 404, 'statusCode');
+        t.equal(err.name, 'ResourceNotFoundError');
+
+        t.end();
+    });
+});
+
+test('DeleteMachineDisk delete disk - Disks/flexible disk package',
+    function deleteMachineDisk2(t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    var path = '/my/machines/' + BHYVE_MACHINE_UUID + '/disks/' + DISK_UUID;
+
+    CLIENT.del(path, function gotDisk(err, req, res, disk) {
+        t.ifError(err);
+        t.equal(res.statusCode, 204, 'statusCode');
+        poll();
+    });
+
+    var count = 0;
+    function poll() {
+        if (count > 10) {
+            t.fail('Failed to delete disk in time');
+            t.end();
+            return;
+        }
+
+        count += 1;
+
+        CLIENT.get(path, function getCb(err, req, res, disk) {
+            if (err && res.statusCode === 404) {
+                t.end();
+                return;
+            }
+
+            t.ifError(err, 'err');
+            t.deepEqual(disk, {
+                id: DISK_UUID,
+                pci_slot: '0:4:1',
+                size: 128,
+                boot: false,
+                state: 'deleting'
+            }, 'disk');
+
+            setTimeout(poll, 2000);
+        });
+    }
+});
+
+test('CreateMachineDisk OTHER - no access',
+    function createMachineDiskOtherTest(t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    OTHER.post('/my/machines/' + BHYVE_MACHINE_UUID + '/disks', {
+        pci_slot: '0:4:9',
+        size: 128
+    }, function createDisk(err, req, res, disk) {
+        t.ok(err);
+        t.equal(res.statusCode, 404, 'statusCode');
+        t.equal(err.name, 'ResourceNotFoundError', 'err.name');
+        t.end();
+    });
+});
+
+test('CreateMachineDisk - Disks/flexible disk package',
+    function createMachineDiskTest(t) {
+    if (!BHYVE_IMAGE_UUID) {
+        t.ok(true, 'No bhyve images. Test skipped');
+        t.end();
+        return;
+    }
+
+    CLIENT.post('/my/machines/' + BHYVE_MACHINE_UUID + '/disks', {
+        pci_slot: '0:4:4',
+        size: 256
+    }, function createDisk(err, req, res, disk) {
+        t.ifError(err, 'err');
+
+        DISK_UUID = disk.id;
+
+        poll();
+    });
+
+    var count = 0;
+    function poll() {
+        if (count > 10) {
+            t.fail('Failed to create disk in time');
+            t.end();
+            return;
+        }
+
+        count += 1;
+
+        var path = '/my/machines/' + BHYVE_MACHINE_UUID + '/disks/' + DISK_UUID;
+
+        CLIENT.get(path, function getCb(err, req, res, disk) {
+            if (res.statusCode === 404) {
+                setTimeout(poll, 2000);
+                return;
+            }
+
+            t.ifError(err, 'err');
+
+            t.deepEqual(disk, {
+                id: DISK_UUID,
+                pci_slot: '0:4:4',
+                size: 256,
+                boot: false,
+                state: 'stopped'
+            }, 'disk');
+
+            t.end();
+        });
+    }
+});
+
 test('Delete bhyve test vm - Disks/flexible disk package', function (t) {
     if (!BHYVE_MACHINE_UUID) {
         t.end();
