From 92b0f825ba1a12d1d7cf34859dedf4a453b7d5c5 Mon Sep 17 00:00:00 2001
From: Marsell Kukuljevic <marsell@joyent.com>
Date: Tue, 11 Dec 2018 19:33:53 +1300
Subject: [PATCH] TRITON-966 Add `CreateMachineDisk`, `ResizeMachineDisk` and
 `DeleteMachineDisk` end-points to CloudAPI

---
 docs/index.md          | 348 ++++++++++++++++++++++++
 lib/app.js             |   2 +
 lib/endpoints/disks.js | 588 +++++++++++++++++++++++++++++++++++++++++
 lib/machines.js        |   1 +
 package.json           |   4 +-
 5 files changed, 941 insertions(+), 2 deletions(-)
 create mode 100644 lib/endpoints/disks.js

diff --git a/docs/index.md b/docs/index.md
index 0f6964c..77bbf62 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -922,6 +922,15 @@ Note that a `Triton-Datacenter-Name` response header was added in 9.2.0.
 
 The section describes API changes in CloudAPI versions.
 
+## 9.4.0
+
+- Added support for [CreateMachineDisk](#CreateMachineDisk),
+  [ResizeMachineDisk](#ResizeMachineDisk) and
+  [DeleteMachineDisk](#DeleteMachineDisk) for bhyve VMs; this only applies to
+  bhyve VMs that have flexible disk sizing enabled.
+  [GetMachineDisk](#GetMachineDisk) and [ListMachineDisk](#ListMachineDisk) are
+  also provided.
+
 ## 9.2.0
 
 - Added new ImportImageFromDatacenter API method to allow an image to be copied
@@ -4386,6 +4395,7 @@ limit       | Number   | Return a max of N instances; default is 1000 (which is
 offset      | Number   | Get a `limit` number of instances starting at this `offset`
 tag.$name   | String   | An arbitrary set of tags can be used for querying, assuming they are prefixed with "tag."
 docker      | Boolean  | Whether to only list Docker instances, or only non-Docker instances, if present. Defaults to showing all instances.
+flexible_disk_size | Number | (optional) Maximum space all disks can take in MiB
 credentials | Boolean  | Whether to include the generated credentials for instances, if present. Defaults to false
 
 Note that if the special input `tags=*` is provided, any other input will be
@@ -4582,6 +4592,7 @@ firewall_enabled | Boolean  | Whether firewall rules are enforced on this instan
 compute_node | String  | UUID of the server on which the instance is located
 package     | String   | The id or name of the package used to create this instance
 dns_names   | Array[String] | DNS names of the instance (if the instance is using [CNS](https://docs.joyent.com/public-cloud/network/cns))
+flexible_disk_size | Number | (optional) Maximum space all disks can take
 
 Be aware that in the case of instances created with vmadm directly (i.e. not
 through CloudAPI), ips, networks, primaryIp and package may be in a different
@@ -4795,6 +4806,7 @@ metadata    | Object[String => String] | Any additional metadata this instance h
 package     | String   | The id or name of the package used to create this instance
 image       | String   | The image id this instance was provisioned with
 docker      | Boolean  | Whether this instance is a Docker container, if present
+flexible_disk_size | Number | (optional) Maximum space all disks can take in MiB
 created     | ISO8601 date | When this instance was created
 updated     | ISO8601 date | When this instance's details was last updated
 
@@ -5868,6 +5880,342 @@ or
     Content-Length: 0
 
 
+## CreateMachineDisk (POST /:login/machines/:id/disks)
+
+Create a new disk for a bhyve VM.
+
+The sum of all disk sizes on a VM is limited by flexible_disk_size. This
+operation only applies for VMs that are currently stopped.
+
+### Inputs
+
+**Field** | **Type** | **Description**
+--------- | -------- | ---------------
+id        | String   | PCI slot that the disk will fill
+size      | Number   | Size in MiB, or the string "remaining" to use up all remaining available space
+
+### Returns
+
+**Field** | **Type** | **Description**
+--------- | -------- | ---------------
+id        | String   | This disk's PCI slot
+size      | Number   | Size in MiB (before resize)
+boot      | Boolean  | If this is the VM's boot disk
+state     | String   | Current state of disk (i.e. 'creating')
+
+### Errors
+
+For all possible errors, see [CloudAPI HTTP Responses](#cloudapi-http-responses).
+
+**Error Code**   | **Description**
+---------------- | ---------------
+ResourceNotFound | If `:login` or `:id`  does not exist
+InvalidArgument  | If `size` was invalid
+
+### CLI Command
+
+    $ triton cloudapi /my/machines/5e42cd1e-34bb-402f-8796-bf5a2cae47db/disks \
+      -X POST -d '{"id":"0:4:1", "size": 1024}'
+
+### Example Request
+
+    POST /my/machines/5e42cd1e-34bb-402f-8796-bf5a2cae47db/disks HTTP/1.1
+    Authorization: ...
+    Host: api.example.com
+    Accept: application/json
+    Content-Length: 12
+    Content-Type: application/x-www-form-urlencoded
+    Api-Version: ~9
+
+    id=0:4:1
+    size=1024
+
+### Example Response
+
+    HTTP/1.1 200 OK
+    Access-Control-Allow-Origin: *
+    Access-Control-Allow-Methods: GET, POST
+    Connection: close
+    Date: Tue, 05 Dec 2018 17:19:26 GMT
+    Server: Joyent Triton 9.4.0
+    Api-Version: 9.0.0
+    Request-Id: 4bcf467e-4b88-4ab4-b7ab-65fad7464de9
+    Response-Time: 754
+    Content-Type: application/json
+    Content-Length: 0
+
+    {
+      "id": "0:4:1",
+      "size": 1024,
+      "boot": false,
+      "state": "creating"
+    }
+
+
+
+## ResizeMachineDisk (POST /:login/machines/:id/disks/:slot)
+
+Asynchronously resize an existing disk on a bhyve VM.
+
+The sum of all disk sizes on a VM is limited by flexible_disk_size. This
+operation only applies for VMs that are currently stopped.
+
+When resizing down, `dangerous_allow_shrink` must be set to `true` otherwise
+the resize will be rejected. Since shrinking a disk truncates any data within
+that disk, it can cause filesystem corruption and data loss if the guest
+operating system does not handle it appropriately and data on the disk hasn't
+been prepared properly beforehand.
+
+Since this is an asynchronous operation, resizing may take several seconds.
+Check the disk's state using [GetMachineDisk](#GetMachineDisk).
+
+### Inputs
+
+**Field**              | **Type** | **Description**
+---------------------- | -------- | ---------------
+size                   | Number   | Size in MiB
+dangerous_allow_shrink | Boolean  | Optional, whether a disk can reduce size
+
+### Returns
+
+**Field** | **Type** | **Description**
+--------- | -------- | ---------------
+id        | String   | This disk's PCI slot
+size      | Number   | Size in MiB (before resize)
+boot      | Boolean  | If this is the VM's boot disk
+state     | String   | Current state of disk (i.e. 'resizing')
+
+### Errors
+
+For all possible errors, see [CloudAPI HTTP Responses](#cloudapi-http-responses).
+
+**Error Code**   | **Description**
+---------------- | ---------------
+ResourceNotFound | If `:login`, `:id`, or `:slot` does not exist
+InvalidArgument  | If `size` or `dangerous_allow_shrink` was invalid
+
+### CLI Command
+
+    $ triton cloudapi /my/machines/5e42cd1e-34bb-402f-8796-bf5a2cae47db/disks/0:4:1 \
+      -X POST -d '{"size": 2048}'
+
+### Example Request
+
+    POST /my/machines/5e42cd1e-34bb-402f-8796-bf5a2cae47db/disks/0:4:1 HTTP/1.1
+    Authorization: ...
+    Host: api.example.com
+    Accept: application/json
+    Content-Length: 12
+    Content-Type: application/x-www-form-urlencoded
+    Api-Version: ~9
+
+    size=2048
+
+### Example Response
+
+    HTTP/1.1 200 OK
+    Access-Control-Allow-Origin: *
+    Access-Control-Allow-Methods: GET, POST
+    Connection: close
+    Date: Tue, 05 Dec 2018 17:19:26 GMT
+    Server: Joyent Triton 9.4.0
+    Api-Version: 9.0.0
+    Request-Id: 4bcf467e-4b88-4ab4-b7ab-65fad7464de9
+    Response-Time: 754
+    Content-Type: application/json
+    Content-MD5: qKVbfrhXVqh7Oni6Pub9Pw==
+    Content-Length: 70
+
+    {
+      "id": "0:4:1",
+      "size": 1024,
+      "boot": false,
+      "state": "resizing"
+    }
+
+
+## GetMachineDisk (GET /:login/machines/:id/disks/:slot)
+
+Fetch a specific disk on a bhyve VM.
+
+### Inputs
+
+* None
+
+### Returns
+
+**Field** | **Type** | **Description**
+--------- | -------- | ---------------
+id        | String   | This disk's PCI slot
+size      | Number   | Size in MiB
+boot      | Boolean  | If this is the VM's boot disk
+state     | String   | Current state of disk
+
+### Errors
+
+For all possible errors, see [CloudAPI HTTP Responses](#cloudapi-http-responses).
+
+**Error Code**   | **Description**
+---------------- | ---------------
+ResourceNotFound | If `:login`, `:id`, or `:slot` does not exist
+
+### CLI Command
+
+    $ triton cloudapi /my/machines/5e42cd1e-34bb-402f-8796-bf5a2cae47db/disks/0:4:1
+
+### Example Request
+
+    GET /my/machines/5e42cd1e-34bb-402f-8796-bf5a2cae47db/disks/0:4:1 HTTP/1.1
+    Authorization: ...
+    Host: api.example.com
+    Accept: application/json
+    Content-Length: 12
+    Content-Type: application/x-www-form-urlencoded
+    Api-Version: ~9
+
+### Example Response
+
+    HTTP/1.1 200 OK
+    Access-Control-Allow-Origin: *
+    Access-Control-Allow-Methods: GET, POST
+    Connection: close
+    Date: Tue, 05 Dec 2018 17:19:26 GMT
+    Server: Joyent Triton 9.4.0
+    Api-Version: 9.0.0
+    Request-Id: 4bcf467e-4b88-4ab4-b7ab-65fad7464de9
+    Response-Time: 754
+    Content-Type: application/json
+    Content-MD5: qKVbfrhXVqh7Oni6Pub9Pw==
+    Content-Length: 74
+
+    {
+      "id": "0:4:1",
+      "size": 2048,
+      "boot": false,
+      "state": "running",
+    }
+
+
+## ListMachineDisks (GET /:login/machines/:id/disks)
+
+List all disk on a bhyve VM.
+
+### Inputs
+
+* None
+
+### Returns
+
+**Field** | **Type** | **Description**
+--------- | -------- | ---------------
+id        | String   | This disk's PCI slot
+size      | Number   | Size in MiB
+boot      | Boolean  | If this is the VM's boot disk
+state     | String   | Current state of disk
+
+### Errors
+
+For all possible errors, see [CloudAPI HTTP Responses](#cloudapi-http-responses).
+
+**Error Code**   | **Description**
+---------------- | ---------------
+ResourceNotFound | If `:login` or `:id` does not exist
+
+### CLI Command
+
+    $ triton cloudapi /my/machines/5e42cd1e-34bb-402f-8796-bf5a2cae47db/disks
+
+### Example Request
+
+    GET /my/machines/5e42cd1e-34bb-402f-8796-bf5a2cae47db/disks HTTP/1.1
+    Authorization: ...
+    Host: api.example.com
+    Accept: application/json
+    Content-Length: 12
+    Content-Type: application/x-www-form-urlencoded
+    Api-Version: ~9
+
+### Example Response
+
+    HTTP/1.1 200 OK
+    Access-Control-Allow-Origin: *
+    Access-Control-Allow-Methods: GET, POST
+    Connection: close
+    Date: Tue, 05 Dec 2018 17:19:26 GMT
+    Server: Joyent Triton 9.4.0
+    Api-Version: 9.0.0
+    Request-Id: 4bcf467e-4b88-4ab4-b7ab-65fad7464de9
+    Response-Time: 754
+    Content-Type: application/json
+    Content-MD5: qKVbfrhXVqh7Oni6Pub9Pw==
+    Content-Length: 74
+
+    [
+      {
+        "id": "0:4:0",
+        "size": 10240,
+        "boot": true,
+        "state": "running",
+      },
+      {
+        "id": "0:4:1",
+        "size": 2048,
+        "boot": false,
+        "state": "running",
+      }
+    ]
+
+
+## DeleteMachineDisk (DELETE /:login/machines/:id/disks/:slot)
+
+Asynchronously delete a disk off a bhyve VM.
+
+Since this is an asynchronous operation, deletion may take several seconds.
+You can check the disk's state using [GetMachineDisk](#GetMachineDisk).
+
+### Inputs
+
+* None
+
+### Returns
+
+* None
+
+### Errors
+
+For all possible errors, see [CloudAPI HTTP Responses](#cloudapi-http-responses).
+
+**Error Code**   | **Description**
+---------------- | ---------------
+ResourceNotFound | If `:login`, `:id` or `:slot` does not exist
+
+### CLI Command
+
+    $ triton cloudapi /my/machines/5e42cd1e-34bb-402f-8796-bf5a2cae47db/disks/0:4:1 -X DELETE
+
+### Example Request
+
+    DELETE /my/machines/5e42cd1e-34bb-402f-8796-bf5a2cae47db/disks/0:4:1 HTTP/1.1
+    Authorization: ...
+    Host: api.example.com
+    Accept: application/json
+    Content-Length: 12
+    Content-Type: application/x-www-form-urlencoded
+    Api-Version: ~9
+
+### Example Response
+
+    HTTP/1.1 204 No Content
+    Access-Control-Allow-Origin: *
+    Access-Control-Allow-Methods: GET, POST
+    Connection: close
+    Date: Tue, 05 Dec 2018 17:19:26 GMT
+    Server: Joyent Triton 9.4.0
+    Api-Version: 9.0.0
+    Request-Id: 4bcf467e-4b88-4ab4-b7ab-65fad7464de9
+    Response-Time: 754
+
+
 ## UpdateMachineMetadata (POST /:login/machines/:id/metadata)
 
 Allows you to update the metadata for a given instance.  Note that updating the
diff --git a/lib/app.js b/lib/app.js
index e53f42a..da9a7c6 100644
--- a/lib/app.js
+++ b/lib/app.js
@@ -41,6 +41,7 @@ var configEndpoints = require('./endpoints/config');
 var datacenters = require('./datacenters');
 var datasets = require('./datasets');
 var docs = require('./docs');
+var disks = require('./endpoints/disks');
 var keys = require('./keys');
 var machines = require('./machines');
 var metadata = require('./metadata');
@@ -548,6 +549,7 @@ module.exports = {
             machines.mount(server, machineThrottle);
             metadata.mount(server, machineThrottle);
             snapshots.mount(server, machineThrottle);
+            disks.mount(server, machineThrottle);
             tags.mount(server, machineThrottle);
             audit.mount(server, machineThrottle);
             rules.mount(server, machineThrottle);
diff --git a/lib/endpoints/disks.js b/lib/endpoints/disks.js
new file mode 100644
index 0000000..ac5bc29
--- /dev/null
+++ b/lib/endpoints/disks.js
@@ -0,0 +1,588 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+/*
+ * These endpoints allow the creation/listing/resizing/deletion of disks on
+ * bhyve VMs.
+ */
+
+
+
+var assert  = require('assert-plus');
+var restify = require('restify');
+var vasync  = require('vasync');
+
+
+
+// --- Globals
+
+
+
+var InvalidArgumentError  = restify.InvalidArgumentError;
+var MissingParameterError = restify.MissingParameterError;
+var ResourceNotFoundError = restify.ResourceNotFoundError;
+
+var UUID_RE = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
+var PCI_SLOT_RE = /^[0-9]{1,3}\:[0-9]{1,2}\:[0-7]$/;
+
+
+
+// --- Handlers
+
+
+
+/*
+ * Given a size in MiB and PCI slot, kick off a disk-creation job to add a new
+ * disk to a VM.
+ */
+function createDisk(req, res, next) {
+    assert.ok(req.sdc);
+
+    var log       = req.log;
+    var headers   = { 'x-request-id': req.getId() };
+    var context   = { caller: req._auditCtx };
+    var origin    = req.params.origin || 'cloudapi';
+    var vmUuid    = req.vm.uuid;
+    var ownerUuid = req.account.uuid;
+    var size      = req.params.size;
+    var slot      = req.params.id;
+
+    if (req.vm.state !== 'stopped') {
+        next(new InvalidArgumentError('VM must be stopped'));
+        return;
+    }
+
+    if (!size) {
+        next(new MissingParameterError('size must be specified'));
+        return;
+    }
+
+    if (isNaN(+size)) {
+        next(new InvalidArgumentError('size must be a number'));
+        return;
+    }
+
+    if (!slot) {
+        next(new MissingParameterError('id must be specified'));
+        return;
+    }
+
+    if (typeof (slot) !== 'string') {
+        next(new InvalidArgumentError('id must be a string'));
+        return;
+    }
+
+    req.sdc.vmapi.createDisk({
+        uuid: vmUuid,
+        owner_uuid: ownerUuid,
+        pci_slot: slot,
+        size: size,
+        origin: origin,
+        context: context
+    }, {
+        log: log,
+        headers: headers
+    }, function createDiskCb(err, job) {
+        if (err) {
+            next(err);
+            return;
+        }
+
+        var login = req.account.login;
+        log.debug('POST /%s/machines/%s/disks -> ok', login, vmUuid);
+
+        var location = '/' + login + '/machines/' + vmUuid + '/' + slot;
+        res.header('Location', location);
+
+        var disk = {
+            id: slot,
+            size: size,
+            boot: false,
+            state: 'creating'
+        };
+
+        res.send(disk);
+
+        next();
+    });
+}
+
+
+
+/*
+ * Resize a VM's disk by starting a resize job. Resizing down will only be
+ * allowed if dangerous_allow_shrink is set, since shrinking a disk will likely
+ * lead to corruption and data loss within the disk when it is truncated.
+ */
+function resizeDisk(req, res, next) {
+    assert.ok(req.sdc);
+
+    var log       = req.log;
+    var headers   = { 'x-request-id': req.getId() };
+    var context   = { caller: req._auditCtx };
+    var origin    = req.params.origin || 'cloudapi';
+    var vmUuid    = req.vm.uuid;
+    var ownerUuid = req.account.uuid;
+    var slot      = req.params.slot;
+    var size      = req.params.size;
+    var canShrink = req.params.dangerous_allow_shrink;
+
+    if (req.vm.state !== 'stopped') {
+        next(new InvalidArgumentError('VM must be stopped'));
+        return;
+    }
+
+    if (!size) {
+        next(new MissingParameterError('size must be specified'));
+        return;
+    }
+
+    if (isNaN(+size)) {
+        next(new InvalidArgumentError('size must be a number'));
+        return;
+    }
+
+    var shrinkType = typeof (canShrink);
+    if (shrinkType !== 'undefined' && shrinkType !== 'boolean') {
+        var errMsg = 'dangerous_allow_shrink must be a boolean';
+        next(new InvalidArgumentError(errMsg));
+        return;
+    }
+
+    req.sdc.vmapi.resizeDisk({
+        uuid: vmUuid,
+        owner_uuid: ownerUuid,
+        pci_slot: slot,
+        size: size,
+        dangerous_allow_shrink: canShrink,
+        origin: origin,
+        context: context
+    }, {
+        log: log,
+        headers: headers
+    }, function resizeDiskCb(err, _job) {
+        if (err) {
+            next(err);
+            return;
+        }
+
+        log.debug('POST /%s/machines/%s/disks/%s -> ok',
+                    req.account.login, vmUuid, slot);
+
+        req.disk.state = 'resizing';
+
+        res.send(translate(req.disk));
+        next();
+    });
+}
+
+
+
+/*
+ * Delete a disk from a VM by starting a deletion job.
+ */
+function deleteDisk(req, res, next) {
+    assert.ok(req.sdc);
+
+    var log       = req.log;
+    var headers   = { 'x-request-id': req.getId() };
+    var context   = { caller: req._auditCtx };
+    var origin    = req.params.origin || 'cloudapi';
+    var vmUuid    = req.vm.uuid;
+    var ownerUuid = req.account.uuid;
+    var slot      = req.params.slot;
+
+    if (req.vm.state !== 'stopped') {
+        next(new InvalidArgumentError('VM must be stopped'));
+        return;
+    }
+
+    req.sdc.vmapi.deleteDisk({
+        uuid: vmUuid,
+        owner_uuid: ownerUuid,
+        pci_slot: slot,
+        origin: origin,
+        context: context
+    }, {
+        log: log,
+        headers: headers
+    }, function deleteDiskCb(err, job) {
+        if (err) {
+            next(err);
+            return;
+        }
+
+        log.debug('DELETE /%s/machines/%s/disks/%s -> ok',
+                    req.account.login, vmUuid, slot);
+        res.send(204);
+        next();
+    });
+}
+
+
+
+/*
+ * Return a single specific disk object. In order for consumers to have a
+ * more accurate idea about the state of the disk (e.g. resizing), we fake
+ * a disk state by drawing from the current VM's state and any queued or running
+ * disk jobs for this VM.
+ */
+function getDisk(req, res, next) {
+    loadDiskJobs(req, function jobCb(err, jobs) {
+        if (err) {
+            next(err);
+            return;
+        }
+
+        var disk = req.disk;
+
+        for (var i = 0; i !== jobs.length; i++) {
+            var job = jobs[i];
+            if (disk.path === job.path) {
+                disk.state = job.task;
+                break;
+            }
+        }
+
+        disk.state = disk.state || req.vm.state;
+
+        res.send(translate(disk));
+        next();
+    });
+}
+
+
+
+/*
+ * Return a list of disk object for a given VM. In order for consumers to have a
+ * more accurate idea about the state of the disks (e.g. resizing), we fake
+ * disk states by drawing from the current VM's state and any queued or running
+ * disk jobs for this VM and disk.
+ */
+function listDisks(req, res, next) {
+    var disks = req.vm.disks || [];
+    if (disks.length === 0) {
+        res.header('x-resource-count', disks.length);
+        res.send(disks);
+        next();
+        return;
+    }
+
+    loadDiskJobs(req, function jobCb(err, jobs) {
+        if (err) {
+            next(err);
+            return;
+        }
+
+        // since create jobs have no path, they're ignored here
+        disks.forEach(function addDiskStatus(disk) {
+            for (var i = 0; i !== jobs.length; i++) {
+                var job = jobs[i];
+                if (job.path === disk.path) {
+                    disk.state = job.task;
+                    return;
+                }
+            }
+
+            disk.state = disk.state || req.vm.state;
+        });
+
+        // and here we add faux disk objects for disks currently being created
+        jobs.forEach(function addDiskObject(job) {
+            if (job.task !== 'creating') {
+                return;
+            }
+
+            var existing = disks.filter(function checkSlotPresent(disk) {
+                return disk.pci_slot === job.pci_slot;
+            })[0];
+
+            if (!existing) {
+                disks.push({
+                    pci_slot: job.pci_slot,
+                    size: job.size,
+                    boot: false,
+                    state: job.task
+                });
+            }
+        });
+
+        res.header('x-resource-count', disks.length);
+        res.send(disks.map(translate));
+        next();
+    });
+}
+
+
+
+// --- Helpers
+
+
+
+/*
+ * Find the VM associated with the machine param (and current account). Assign
+ * to req.vm.
+ */
+function getMachine(req, res, next) {
+    assert.ok(req.sdc);
+
+    var vmUuid    = req.params.machine;
+    var ownerUuid = req.account.uuid;
+    assert.ok(ownerUuid, 'ownerUuid');
+
+    req.log.debug({ vm: vmUuid, owner: ownerUuid }, 'Machine check for disks');
+
+    if (!UUID_RE.test(vmUuid)) {
+        next(new InvalidArgumentError('VM has invalid format'));
+        return;
+    }
+
+    req.sdc.vmapi.getVm({
+        uuid: vmUuid,
+        owner_uuid: ownerUuid
+    }, {
+        log: req.log,
+        headers: { 'x-request-id': req.getId() }
+    }, function getVmCb(err, vm) {
+        if (err) {
+            next(err);
+            return;
+        }
+
+        req.vm = vm;
+
+        next();
+    });
+}
+
+
+
+/*
+ * Given a slot param, find the associated disk in req.vm.disks.
+ */
+function getMachineDisk(req, res, next) {
+    var slot = req.params.slot;
+    var vm = req.vm;
+
+    if (!PCI_SLOT_RE.test(slot)) {
+        next(new InvalidArgumentError('slot has invalid format'));
+        return;
+    }
+
+    var disks = (vm.disks || []).filter(function matchPath(disk) {
+        return disk.pci_slot === slot;
+    });
+
+    req.disk = disks[0];
+
+    if (!req.disk) {
+        next(new ResourceNotFoundError('disk not found'));
+        return;
+    }
+
+    next();
+}
+
+
+
+/*
+ * Convert a disk object into the representation used by clients.
+ */
+function translate(disk) {
+    return {
+        id: disk.pci_slot,
+        size: disk.size,
+        boot: disk.boot,
+        state: disk.state
+    };
+}
+
+
+
+/*
+ * Fetch any queued or running disk jobs for resize or deletion. Return a
+ * simplified representation of the job type and associated path.
+ */
+function loadDiskJobs(req, cb) {
+    req.sdc.vmapi.listJobs({
+        vm_uuid: req.vm.uuid,
+        task: 'update',
+        execution: 'queued'
+    }, {
+        headers: {
+            'x-request-id': req.getId()
+        }
+    }, function loadQueuedJobsCb(err, queuedJobs) {
+        if (err) {
+            cb(err);
+            return;
+        }
+
+        req.sdc.vmapi.listJobs({
+            vm_uuid: req.vm.uuid,
+            task: 'update',
+            execution: 'running'
+        }, {
+            headers: {
+                'x-request-id': req.getId()
+            }
+        }, function loadRunningJobsCb(err2, runningJobs) {
+            if (err2) {
+                cb(err2);
+                return;
+            }
+
+            var jobs = queuedJobs.concat(runningJobs);
+            var subtasks = ['create_disk', 'resize_disk', 'delete_disk'];
+
+            var subtaskJobs = jobs.filter(function matchSubtask(job) {
+                return subtasks.indexOf(job.params.subtask) !== -1;
+            });
+
+            var simplifiedJobs = subtaskJobs.map(function simplify(job) {
+                var payload = job.params.payload;
+                var task = job.params.subtask;
+                var sJobs;
+
+                if (task === 'create_disk') {
+                    sJobs = payload.add_disks.map(function createJob(disk) {
+                        return {
+                            pci_slot: disk.pci_slot,
+                            size: disk.size,
+                            task: 'creating'
+                        };
+                    });
+                } else if (task === 'resize_disk') {
+                    sJobs = payload.update_disks.map(function resizeJob(disk) {
+                        return {
+                            path: disk.path,
+                            task: 'resizing'
+                        };
+                    });
+                } else if (task === 'delete_disk') {
+                    sJobs = payload.remove_disks.map(function deleteJob(path) {
+                        return {
+                            path: path,
+                            task: 'deleting'
+                        };
+                    });
+                } else {
+                    assert.ok(false, 'unexpected value');
+                }
+
+                return sJobs;
+            });
+
+            var flattenedJobs = [].concat.apply([], simplifiedJobs);
+
+            cb(null, flattenedJobs);
+        });
+    });
+}
+
+
+
+/*
+ * Add endpoints to cloudapi which customers can call.
+ */
+function mount(server, before, pre, post) {
+    assert.object(server);
+    assert.ok(before);
+
+    server.post({
+            path: '/:account/machines/:machine/disks',
+            name: 'CreateMachineDisk',
+            version: ['7.2.0', '7.3.0', '8.0.0', '9.0.0']
+        },
+        before,
+        pre || [],
+        getMachine,
+        createDisk,
+        post || []);
+
+    server.get({
+            path: '/:account/machines/:machine/disks',
+            name: 'ListMachineDisks',
+            version: ['7.2.0', '7.3.0', '8.0.0', '9.0.0']
+        },
+        before,
+        pre || [],
+        getMachine,
+        listDisks,
+        post || []);
+
+    server.head({
+            path: '/:account/machines/:machine/disks',
+            name: 'ListMachineDisks',
+            version: ['7.2.0', '7.3.0', '8.0.0', '9.0.0']
+        },
+        before,
+        pre || [],
+        getMachine,
+        listDisks,
+        post || []);
+
+    server.get({
+            path: '/:account/machines/:machine/disks/:slot',
+            name: 'GetMachineDisk',
+            version: ['7.2.0', '7.3.0', '8.0.0', '9.0.0']
+        },
+        before,
+        pre || [],
+        getMachine,
+        getMachineDisk,
+        getDisk,
+        post || []);
+
+    server.head({
+            path: '/:account/machines/:machine/disks/:slot',
+            name: 'GetMachineDisk',
+            version: ['7.2.0', '7.3.0', '8.0.0', '9.0.0']
+        },
+        before,
+        pre || [],
+        getMachine,
+        getMachineDisk,
+        getDisk,
+        post || []);
+
+    server.post({
+            path: '/:account/machines/:machine/disks/:slot',
+            name: 'ResizeMachineDisk',
+            version: ['7.2.0', '7.3.0', '8.0.0', '9.0.0']
+        },
+        before,
+        pre || [],
+        getMachine,
+        getMachineDisk,
+        resizeDisk,
+        post || []);
+
+
+    server.del({
+            path: '/:account/machines/:machine/disks/:slot',
+            name: 'DeleteMachineDisk',
+            version: ['7.2.0', '7.3.0', '8.0.0', '9.0.0']
+        },
+        before,
+        pre || [],
+        getMachine,
+        getMachineDisk,
+        deleteDisk,
+        post || []);
+
+    return server;
+}
+
+
+
+module.exports = {
+    mount: mount
+};
diff --git a/lib/machines.js b/lib/machines.js
index 153afd1..b07157e 100644
--- a/lib/machines.js
+++ b/lib/machines.js
@@ -149,6 +149,7 @@ function translate(machine, req)  {
         ips: [],
         memory: Number(machine.ram),
         disk: (Number(machine.quota) * 1024) || 0,
+        flexible_disk_size: machine.flexible_disk_size,
         deletion_protection: !!machine.indestructible_zoneroot,
         metadata: machine.customer_metadata || {},
         tags: machine.tags,
diff --git a/package.json b/package.json
index be3362f..0781a8f 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
     "name": "cloudapi",
     "description": "SmartDataCenter CloudAPI",
-    "version": "9.3.1",
+    "version": "9.4.0",
     "author": "Joyent (joyent.com)",
     "private": true,
     "engines": {
@@ -35,7 +35,7 @@
         "nodemailer": "0.7.1",
         "nopt": "2.0.0",
         "restify": "4.3.3",
-        "sdc-clients": "11.3.1",
+        "sdc-clients": "git+https://github.com/joyent/node-sdc-clients.git#4eed3525377ca6727f6eedc1d8c85b69025e7014",
         "semver": "5.4.1",
         "strsplit": "1.0.0",
         "triton-metrics": "0.1.0",
-- 
2.21.0

