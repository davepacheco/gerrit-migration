From 9c09c86dd48e925527f89ea0eef9324586477181 Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Wed, 15 Feb 2017 18:39:17 +0100
Subject: [PATCH] TOOLS-1679 resolve where sdcadm docs live

---
 README.md          | 206 +++------------------------------------------
 docs/post-setup.md | 142 +++++++++++++++++++++++++++++++
 docs/update.md     |  81 +++++++++++++++---
 3 files changed, 224 insertions(+), 205 deletions(-)
 create mode 100644 docs/post-setup.md

diff --git a/README.md b/README.md
index 85cdbef..b7d85ec 100644
--- a/README.md
+++ b/README.md
@@ -5,7 +5,7 @@
 -->
 
 <!--
-    Copyright (c) 2017, Joyent, Inc.
+    Copyright 2017 Joyent, Inc.
 -->
 
 # sdcadm
@@ -30,206 +30,22 @@ it is currently the recommended way to update SDC. Signs of incompleteness are
 that sub-commands of `sdcadm experimental ...` are required as part of the upgrade
 process.
 
-Read on for the current recommended SDC post-setup and upgrade procedures.
+# Triton post-setup with sdcadm
 
+The document [docs/post-setup] details the required steps in order to
+configure Triton DataCenter for practical usage, like HA setup and the
+addition of services not installed by default.
 
---
-
-# sdcadm self-update
-
-It's always recommended to run `sdcadm self-update --latest` before performing
-any sdcadm upgrade operations, especially because there could be critical
-bugfixes published since the last time sdcadm itself was updated.
-
-You can get the exact version of sdcadm running in your SDC setup using:
-
-        sdcadm --version
-
-The output of this command will include both the semver version, and the usual
-image version (referencing git branch, date and git SHA). For example:
-
-        [root@headnode (coal) ~]# sdcadm --version
-        sdcadm 1.3.9 (master-20141114T063621Z-g995ee7e)
-
---
-
-# SDC post-setup with sdcadm
-
-The default setup of a SmartDataCenter is somewhat minimal. There are several
-post-setup steps required in order to get it configured for practical usage.
-
-## Add external nics to imgapi and adminui
-
-These are required in order to be able to access remote update sources, and in
-order to be able to access AdminUI using a browser:
-
-    sdcadm post-setup common-external-nics
-
-Please note that this command didn't wait for the "add nics" jobs to be
-completed, just submitted, so you might need to give it some extra time after
-the command exits until these jobs really finish.
-
-## Create CloudAPI VM
-
-If non-administrator access to the SDC setup is planned, the CloudAPI zone must
-be created:
-
-    sdcadm post-setup cloudapi
-
-
-## Add Binder/Zookeeper service cluster to be used by SDC services
-
-By default, an SDC setup runs with a single zookeeper service running in the
-`binder` instance. This is not the recommended setup for a production
-environment; instead, it's recommended to create a *"cluster"* of 3 or 5
-binder service instances.
-
-In case this is a setup already being used by non-administrator users, it's a
-good idea to put the DC in maintenance first
-(`sdcadm dc-maint start`). Then:
-
-    sdcadm post-setup ha-binder \
-        --servers=`CN1_UUID` \
-        --servers=`CN2_UUID`
-
-This command will create 2 more binder instances, one placed on the CN
-identified by CN1\_UUID, and the other CN identified by CN2\_UUID.
-
-If you need to create a cluster of 5 instances, you just need to pass a couple
-additional CN UUIDs to this command together with the `--members=4` argument.
-
-Once the binder instances have been configured, and all of them have joined
-the *"cluster"*, manatee and moray will be restarted to begin using this
-setup immediately.
-
-If you put the DC into maintenance, remember to recover it from such state
-by using `sdcadm dc-maint stop`, unless you want to proceed
-with ha-manatee too.
-
-
-## Create the required manatee instances for HA
-
-When you have one manatee initially, you're in ONE\_NODE\_WRITE\_MODE,
-which is a special mode that exists just for bootstrapping. To go
-from this mode to a HA setup you'll need at least one more manatee.
-However, switching modes is not quite as simple as just provisioning a
-second manatee. It involves the following steps:
-
-- create a second manatee instance for you (with manatee-sitter disabled)
-- disable the ONE\_NODE\_WRITE\_MODE on the first instance
-- reboot the first manatee into multi-node mode
-- re-enable the sitter and reboot the second instance
-- wait for manatee to return that it's synchronized
-
-After we've gone through this, it'll create a 3rd manatee instance on the
-second server you specified to complete manatee HA setup.
-
-Aside all these details, all you need to run is:
-
-        sdcadm post-setup ha-manatee \
-        --servers=`CN1_UUID` \
-        --servers=`CN2_UUID`
-
-It's always a good idea to run `sdcadm check-health` and `sdc-healthcheck`
-once this command has been completed, in order to review that everything
-reconnected to manatee/moray successfully.
-
-## Create the desired number of moray instances for HA
-
-Finally, it's desirable to have more than the default single moray instance
-for HA. Creation of additional moray instances don't require any special
-command, just the standard `sdcadm create` used to create any additional
-instance of any service (see docs/index.md for the details).
-
-A recommended setup includes two additional moray instances created on the same
-CNs we added the manatees on the previous step:
-
-    sdcadm create moray --server=CN1_UUID
-    sdcadm create moray --server=CN2_UUID
-
-And that's it. With this, we should have a setup with multiple binder,
-manatee and moray instances, ready to operate with HA. As an additional step,
-if you plan to give access to non-administrator customers to your SDC setup
-(i.e. if you've installed CloudAPI), it would be handy to also have several
-mahi instances for HA. You can create them, and in general any additional
-instances for services "HA Ready", using the same procedure as for moray:
-
-    sdcadm create mahi --server=CN1_UUID
-    sdcadm create mahi --server=CN2_UUID
-
-## Setup fabrics
-
-You can setup "fabrics" (Triton's network virtualization system) using the
-command:
-
-    sdcadm post-setup fabrics -c /path/to/config.file
-
-where `conf` is a required configuration file. In order to understand the
-format of this configuration file there is detailed information about
-[fabrics setup in CoaL](https://github.com/joyent/triton/blob/master/docs/developer-guide/coal-post-setup-fabrics.md) and general purpose information on fabrics from the
-[Triton networking and fabric operations guide](https://docs.joyent.com/private-cloud/networks/sdn).
-
-### Create portolan HA instances
-
-Once `fabrics` setup has finished and the first `portolan0` instance
-has been created into the Headnode, additional HA instances can be
-created using `sdcadm create` subcommand:
-
-    sdcadm create portolan --server=CN1_UUID
-    sdcadm create portolan --server=CN2_UUID
-
-
-# Manage SDC upgrades with sdcadm
+# Manage Triton upgrades with sdcadm
 
 The document [docs/update.md] provides a detailed description on how to
-proceed with the update of a given SDC standup. The following are a set
-of tips you should consider reading before proceeding with such update
-process.
-
-## Verify that we can perform the updates using sdcadm
-
-Any SDC setup must fulfil some requirements in order to be updateable using
-`sdcadm`: the VMs for the different SDC services must be past the **minimal
-versions** detailed at `etc/defaults.json` under `svcMinImages`. Additionally,
-each one of these images imposes a constraint over the minimal platform version
-required for the images to work.
-
-The easier way to check if we're past these requirements is to invoke `sdcadm`.
-In the case that `sdcadm` finds any issue with any of the services VMs, it will
-notify you about the problem. Otherwise, you can continue onto the next step.
-
-
-## Download everything before running the upgrades
-
-It's a good idea to pre-download all the bits required for an upgrade before
-actually going through it. That's the reason we can run the
-`sdcadm update` commands with `--just-images` option.
-
-It's also possible to pre-download some images for other SDC components, like
-agents or gz-tools, using `sdcadm`. Just proceed as follows:
-
-      sdcadm experimental update-gz-tools --latest --just-download
-      sdcadm experimental update-agents --latest --just-download --all
-
-Or, if you want to upgrade to a specific image version instead of the latest
-available image:
-
-      sdcadm experimental update-gz-tools <IMG_UUID> --just-download
-      sdcadm experimental update-agents <IMG_UUID> --just-download --all
-
-
-Either way, the `sdcadm experimental` subcommands we mention below should be
-able to download and install the required images, or to proceed with the path
-given to an image file as documented in `docs/index.md`.
-
-You can download and *"install"* the OS platform for later assignation to
-the CNs you want to upgrade by running:
-
-      sdcadm platform install --latest
+proceed with the update of a given Triton DataCenter (just "Triton" for
+short) standup.
 
-This will only download and make the platform available for later usage, but
-will not assign it to any server.
+# Man page
 
+The [sdcadm man page](man/man1/sdcadm.1.ronn) provides reference for every
+sdcadm subcommand.
 
 # Developer notes
 
diff --git a/docs/post-setup.md b/docs/post-setup.md
new file mode 100644
index 0000000..a743e32
--- /dev/null
+++ b/docs/post-setup.md
@@ -0,0 +1,142 @@
+---
+title: Triton post-setup with sdcadm
+markdown2extras: tables, code-friendly, cuddled-lists, link-patterns
+markdown2linkpatternsfile: link-patterns.txt
+apisections: 
+---
+<!--
+    This Source Code Form is subject to the terms of the Mozilla Public
+    License, v. 2.0. If a copy of the MPL was not distributed with this
+    file, You can obtain one at http://mozilla.org/MPL/2.0/.
+-->
+
+<!--
+    Copyright 2017 Joyent, Inc.
+-->
+
+# Triton post-setup with sdcadm
+
+The default setup of a Triton DataCenter is somewhat minimal. There are several
+post-setup steps required in order to get it configured for practical usage.
+
+## Add external nics to imgapi and adminui
+
+These are required in order to be able to access remote update sources, and in
+order to be able to access AdminUI using a browser:
+
+    sdcadm post-setup common-external-nics
+
+Please note that this command didn't wait for the "add nics" jobs to be
+completed, just submitted, so you might need to give it some extra time after
+the command exits until these jobs really finish.
+
+## Create CloudAPI VM
+
+If non-administrator access to the Triton setup is planned, the CloudAPI zone
+must be created:
+
+    sdcadm post-setup cloudapi
+
+
+## Add Binder/Zookeeper service cluster to be used by Triton services
+
+By default, a Triton setup runs with a single zookeeper service running in the
+`binder` instance. This is not the recommended setup for a production
+environment; instead, it's recommended to create a *"cluster"* of 3 or 5
+binder service instances.
+
+In case this is a setup already being used by non-administrator users, it's a
+good idea to put the DC in maintenance first
+(`sdcadm dc-maint start`). Then:
+
+    sdcadm post-setup ha-binder \
+        --servers=`CN1_UUID` \
+        --servers=`CN2_UUID`
+
+This command will create 2 more binder instances, one placed on the CN
+identified by CN1\_UUID, and the other CN identified by CN2\_UUID.
+
+If you need to create a cluster of 5 instances, you just need to pass a couple
+additional CN UUIDs to this command together with the `--members=4` argument.
+
+Once the binder instances have been configured, and all of them have joined
+the *"cluster"*, manatee and moray will be restarted to begin using this
+setup immediately.
+
+If you put the DC into maintenance, remember to recover it from such state
+by using `sdcadm dc-maint stop`, unless you want to proceed
+with ha-manatee too.
+
+
+## Create the required manatee instances for HA
+
+When you have one manatee initially, you're in ONE\_NODE\_WRITE\_MODE,
+which is a special mode that exists just for bootstrapping. To go
+from this mode to a HA setup you'll need at least one more manatee.
+However, switching modes is not quite as simple as just provisioning a
+second manatee. It involves the following steps:
+
+- create a second manatee instance for you (with manatee-sitter disabled)
+- disable the ONE\_NODE\_WRITE\_MODE on the first instance
+- reboot the first manatee into multi-node mode
+- re-enable the sitter and reboot the second instance
+- wait for manatee to return that it's synchronized
+
+After we've gone through this, it'll create a 3rd manatee instance on the
+second server you specified to complete manatee HA setup.
+
+Aside all these details, all you need to run is:
+
+        sdcadm post-setup ha-manatee \
+        --servers=`CN1_UUID` \
+        --servers=`CN2_UUID`
+
+It's always a good idea to run `sdcadm check-health` and `sdc-healthcheck`
+once this command has been completed, in order to review that everything
+reconnected to manatee/moray successfully.
+
+## Create the desired number of moray instances for HA
+
+Finally, it's desirable to have more than the default single moray instance
+for HA. Creation of additional moray instances don't require any special
+command, just the standard `sdcadm create` used to create any additional
+instance of any service (see docs/index.md for the details).
+
+A recommended setup includes two additional moray instances created on the same
+CNs we added the manatees on the previous step:
+
+    sdcadm create moray --server=CN1_UUID
+    sdcadm create moray --server=CN2_UUID
+
+And that's it. With this, we should have a setup with multiple binder,
+manatee and moray instances, ready to operate with HA. As an additional step,
+if you plan to give access to non-administrator customers to your Triton setup
+(i.e. if you've installed CloudAPI), it would be handy to also have several
+mahi instances for HA. You can create them, and in general any additional
+instances for services "HA Ready", using the same procedure as for moray:
+
+    sdcadm create mahi --server=CN1_UUID
+    sdcadm create mahi --server=CN2_UUID
+
+## Setup fabrics
+
+You can setup "fabrics" (Triton's network virtualization system) using the
+command:
+
+    sdcadm post-setup fabrics -c /path/to/config.file
+
+where `conf` is a required configuration file. In order to understand the
+format of this configuration file there is detailed information about
+[fabrics setup in CoaL](https://github.com/joyent/triton/blob/master/docs/developer-guide/coal-post-setup-fabrics.md) and general purpose information on fabrics from the
+[Triton networking and fabric operations guide](https://docs.joyent.com/private-cloud/networks/sdn).
+
+### Create portolan HA instances
+
+Once `fabrics` setup has finished and the first `portolan0` instance
+has been created into the Headnode, additional HA instances can be
+created using `sdcadm create` subcommand:
+
+    sdcadm create portolan --server=CN1_UUID
+    sdcadm create portolan --server=CN2_UUID
+
+
diff --git a/docs/update.md b/docs/update.md
index 785b42b..57caa6d 100644
--- a/docs/update.md
+++ b/docs/update.md
@@ -2,7 +2,7 @@
 title: Update a SDC standup using sdcadm
 markdown2extras: tables, code-friendly, cuddled-lists, link-patterns
 markdown2linkpatternsfile: link-patterns.txt
-apisections: Updating SDC components, Update of Servers' Platform
+apisections: Pre-requisites for updates, Updating SDC components, Update of Servers' Platform
 ---
 <!--
     This Source Code Form is subject to the terms of the Mozilla Public
@@ -11,21 +11,70 @@ apisections: Updating SDC components, Update of Servers' Platform
 -->
 
 <!--
-    Copyright (c) 2016, Joyent, Inc.
+    Copyright 2017 Joyent, Inc.
 -->
 
 
-# Update a SDC standup using sdcadm
+# Update a Triton standup using sdcadm
 
 This document is intended to be used as an example guide of the suggested
-procedure to update a SDC DC using `sdcadm`.
+procedure to update a Triton DC using `sdcadm`.
 
 The document is divided in two parts:
 
-1. Update of SDC components
+1. Update of Triton components
 2. Update of Servers' Platform
 
-## Section 1: Updating SDC components
+## Section 0: Pre-requisites for updates
+
+The following are a set of tips you should consider reading before proceeding
+with the update process.
+
+### Verify that we can perform the updates using sdcadm
+
+Any Triton setup must fulfil some requirements in order to be updateable using
+`sdcadm`: the VMs for the different Triton services must be past the **minimal
+versions** detailed at `etc/defaults.json` under `svcMinImages`. Additionally,
+each one of these images imposes a constraint over the minimal platform version
+required for the images to work.
+
+The easier way to check if we're past these requirements is to invoke `sdcadm`.
+In the case that `sdcadm` finds any issue with any of the services VMs, it will
+notify you about the problem. Otherwise, you can continue onto the next step.
+
+
+### Download everything before running the upgrades
+
+It's a good idea to pre-download all the bits required for an upgrade before
+actually going through it. That's the reason we can run the
+`sdcadm update` commands with `--just-images` option.
+
+It's also possible to pre-download some images for other Triton components, like
+agents or gz-tools, using `sdcadm`. Just proceed as follows:
+
+      sdcadm experimental update-gz-tools --latest --just-download
+      sdcadm experimental update-agents --latest --just-download --all
+
+Or, if you want to upgrade to a specific image version instead of the latest
+available image:
+
+      sdcadm experimental update-gz-tools <IMG_UUID> --just-download
+      sdcadm experimental update-agents <IMG_UUID> --just-download --all
+
+
+Either way, the `sdcadm experimental` subcommands we mention below should be
+able to download and install the required images, or to proceed with the path
+given to an image file as documented in `docs/index.md`.
+
+You can download and *"install"* the OS platform for later assignation to
+the CNs you want to upgrade by running:
+
+      sdcadm platform install --latest
+
+This will only download and make the platform available for later usage, but
+will not assign it to any server.
+
+## Section 1: Updating Triton components
 
 ### Step 0: available updates
 
@@ -46,7 +95,19 @@ available update images for the different agents:
 
 ### Step 1: self-update sdcadm
 
-    sdcadm self-update --latest
+It's always recommended to run `sdcadm self-update --latest` before performing
+any sdcadm upgrade operations, especially because there could be critical
+bugfixes published since the last time sdcadm itself was updated.
+
+You can get the exact version of sdcadm running in your Triton setup using:
+
+        sdcadm --version
+
+The output of this command will include both the semver version, and the usual
+image version (referencing git branch, date and git SHA). For example:
+
+        [root@headnode (coal) ~]# sdcadm --version
+        sdcadm 1.3.9 (master-20141114T063621Z-g995ee7e)
 
 ### Step 2: put the DC in maint
 
@@ -78,9 +139,9 @@ If there is a new shar, the grep will find nothing, and you'll need to run the f
 
 Note that there is no need to run `update-other` if we haven't updated `sdcadm` itself.
 
-### Step 5: Update all other SDC VMs
+### Step 5: Update all other Triton VMs
 
-It's possible to upgrade of every SDC service running in VMS at once by running:
+It's possible to upgrade of every Triton service running in VMS at once by running:
 
     sdcadm up -y --all --force-data-path
 
@@ -89,7 +150,7 @@ It's also known that the update of some components may experience issues which
 may cause the system upgrade to fail in the middle of the process, leaving some
 services untouched or into an unexpcted state as a result of the update failures.
 
-An alternate approach to upgrading SDC services _all at once_ is to postpone the
+An alternate approach to upgrading Triton services _all at once_ is to postpone the
 update of some key services until everything else has been updated. These key
 services are, in turn: `SAPI`, `moray`, `binder` and `manatee`.
 
-- 
2.21.0

