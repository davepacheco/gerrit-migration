commit 9d50ea5882b56122791daf336ac6dbbb2cb85b38
Author: Rui Loura <rui@joyent.com>
Date:   2019-09-19T12:13:46-04:00 (3 weeks ago)
    
    MANTA-4560 rust-sharkspotter should return etag

diff --git a/Cargo.toml b/Cargo.toml
index 0067872..8c0bea9 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "sharkspotter"
-version = "0.1.0"
+version = "0.2.0"
 authors = ["Rui Loura <rui@joyent.com>", "Jon Anderson <jon.anderson@joyent.com>"]
 edition = "2018"
 
diff --git a/src/lib.rs b/src/lib.rs
index 21a9929..c15726c 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -67,22 +67,26 @@ fn query_handler<F>(
     handler: &mut F,
 ) -> Result<(), Error>
 where
-    F: FnMut(MantaObject, u32) -> Result<(), Error>,
+    F: FnMut(MantaObject, u32, String) -> Result<(), Error>,
 {
     // TODO:
     // - are we sure this is always only 1 element?
     // - Handle an object that doesn't have a '_value' without panicking?
-    let manta_str: String =
-        serde_json::from_value(val[0]["_value"].clone()).unwrap();
+
+    let etag: String =
+        serde_json::from_value(val[0]["_etag"].clone()).expect("etag");
+
+    let manta_str: String = serde_json::from_value(val[0]["_value"].clone())
+        .expect("manta object string");
     let manta_obj: MantaObject =
-        serde_json::from_str(manta_str.as_str()).unwrap();
+        serde_json::from_str(manta_str.as_str()).expect("manta object value");
 
     // Filter on shark
     if !manta_obj.sharks.iter().any(|s| s.manta_storage_id == shark) {
         return Ok(());
     }
 
-    handler(manta_obj, shard_num)?;
+    handler(manta_obj, shard_num, etag)?;
 
     Ok(())
 }
@@ -103,7 +107,7 @@ fn read_chunk<F>(
     handler: &mut F,
 ) -> Result<(), Error>
 where
-    F: FnMut(MantaObject, u32) -> Result<(), Error>,
+    F: FnMut(MantaObject, u32, String) -> Result<(), Error>,
 {
     match mclient.sql(query, vec![], r#"{"timeout": 10000}"#, |a| {
         query_handler(a, shard_num, shark, handler)
@@ -125,7 +129,7 @@ fn iter_ids<F>(
     mut handler: F,
 ) -> Result<(), Error>
 where
-    F: FnMut(MantaObject, u32) -> Result<(), Error>,
+    F: FnMut(MantaObject, u32, String) -> Result<(), Error>,
 {
     let mut mclient = MorayClient::from_str(moray_socket, log.clone(), None)?;
 
@@ -228,7 +232,7 @@ pub fn run<F>(
     mut handler: F,
 ) -> Result<(), Error>
 where
-    F: FnMut(MantaObject, u32) -> Result<(), Error>,
+    F: FnMut(MantaObject, u32, String) -> Result<(), Error>,
 {
     if !conf.shark.contains(conf.domain.as_str()) {
         let new_shark = format!("{}.{}", conf.shark, conf.domain);
diff --git a/src/main.rs b/src/main.rs
index bacceac..8fb0de4 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -41,8 +41,9 @@ fn main() -> Result<(), Error> {
 
         file_map.insert(i, file);
     }
-    sharkspotter::run(conf, log, |mobj, shard| {
-        println!("{} | {}", shard, mobj.object_id);
+    sharkspotter::run(conf, log, |mobj, shard, etag| {
+        println!("{} | {} | {}", shard, mobj.object_id, etag);
+
         let file = file_map.get_mut(&shard).unwrap();
         let buf = serde_json::to_string(&mobj)?;
         file.write_all(buf.as_bytes())?; // TODO: match
