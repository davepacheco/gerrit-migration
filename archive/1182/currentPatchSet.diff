commit 4a673514f96ccf4a37f059c8dc82205c3e59ce2f (refs/changes/82/1182/3)
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2017-02-21T12:51:26+01:00 (2 years, 8 months ago)
    
    WORKFLOW-216 Cleanup wf-client.createJob method
    Reviewed by: Trent Mick <trent.mick@joyent.com>

diff --git a/CHANGES.md b/CHANGES.md
index a90d75b..47291ad 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -1,6 +1,23 @@
 # sdc-wf-client changelog
 
-## not yet released
+## 0.3.0
+
+- Cleaned up createJob signature and made WfClient constructor to use
+  assert module instead of custom assertions.
+
+  The `createJob` method signature can be one of the following:
+
+      createJob(wf, params, options, cb)
+      createJob(wf, params, cb)
+
+  The following options have been removed:
+
+      createJob(params, options, cb)
+      createJob(params, cb)
+
+  Both of these cases assumed that there would be a `params.workflow` member
+  containing the workflow name, it's to say, exactly the value we expect for
+  `wf` on the supported methods.
 
 ## 0.2.1
 
diff --git a/lib/wf-client.js b/lib/wf-client.js
index 857c3e3..df96536 100644
--- a/lib/wf-client.js
+++ b/lib/wf-client.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -20,14 +20,10 @@ var restifyClients = require('restify-clients');
  * WfClient Constructor
  */
 function WfClient(options) {
-    if (!options || typeof (options) !== 'object')
-        throw new TypeError('options is required (object)');
-    if (!options.url)
-        throw new TypeError('url is required (string)');
-    if (!options.path)
-        throw new TypeError('path is required (string)');
-    if (!options.log)
-        throw new TypeError('log is required (bunyan Logger instance)');
+    assert.object(options, 'options');
+    assert.string(options.url, 'options.url');
+    assert.string(options.path, 'options.path');
+    assert.object(options.log, 'options.log');
 
     var restifyOptions = {
         url: options.url,
@@ -362,70 +358,38 @@ WfClient.prototype.serializeWorkflow = function (wf) {
 
 
 /*
- * Queues a new job. This function takes two forms:
+ * Queues a new job. This function takes the form:
  *
  * - createJob(wf, params, options, cb)
- * - createJob(params, options, cb)
  *
- * Options is an optional arg in both cases so the functions would normally
- * (at the moment) take this form:
+ * Where options argument is optional, so it can be called as:
  *
  * - createJob(wf, params, cb)
- * - createJob(params, cb)
  *
  * @param wf {String} The workflow name.
  * @param params {Object} The job parameters.
- * @param params.workflow {String} The workflow name when passed in the params.
+ * @param params.target {String} The workflow target. Required.
  * @param options {Object} Optional. Additional options to pass.
  * @param options.headers {Object} Optional. Additional request headers to pass.
  * @param cb {Function} Callback of the form fb(err, job).
  */
-WfClient.prototype.createJob = function () {
-    var wf, params, options, cb, opts;
-
-    switch (arguments.length) {
-        case 2:
-            params = arguments[0];
-            cb = arguments[1];
-            break;
-        case 3:
-            if (typeof (arguments[0]) === 'string') {
-                wf = arguments[0];
-                params = arguments[1];
-                cb = arguments[2];
-            } else {
-                params = arguments[0];
-                options = arguments[1];
-                cb = arguments[2];
-            }
-            break;
-        case 4:
-            wf = arguments[0];
-            params = arguments[1];
-            options = arguments[2];
-            cb = arguments[3];
-            break;
-        default:
-            throw new Error('Invalid number of arguments');
+WfClient.prototype.createJob = function (wf, params, options, cb) {
+    assert.string(wf, 'wf');
+    assert.object(params, 'params');
+    if (typeof (options) === 'function') {
+        cb = options;
+        options = {};
     }
+    assert.object(options, 'options');
+    assert.func(cb, 'cb');
 
-    if (!params || typeof (params) !== 'object')
-        throw new TypeError('params is required (object)');
-    if (!wf && !params.workflow) {
-        throw new TypeError('workflow name \'wf\' or uuid \'params.workflow\'' +
-            ' is required (string)');
-    }
-    if (!params.target)
-        throw new TypeError('job target is required (string)');
-
-    // Options is optional
-    assert.optionalObject(options, 'options');
+    assert.string(params.target, 'params.target');
     if (options) {
         assert.optionalObject(options.headers, 'options.headers');
     }
 
     var self = this;
-    params.workflow = params.workflow || self.uuids[wf];
+    params.workflow = self.uuids[wf];
 
     // If the workflow is missing at this point, we will fail here without
     // hitting wf-api:
@@ -438,12 +402,11 @@ WfClient.prototype.createJob = function () {
         return cb(new Error('workflow uuid is not specified and cannot be ' +
             'loaded from wfapi client uuids'));
     }
-
-    opts = { path: '/jobs' };
-    if (options && options.headers) {
-        opts.headers = options.headers;
+    var postOpts = {path: '/jobs'};
+    if (options.headers) {
+        postOpts.headers = options.headers;
     }
-    return this.client.post(opts, params, function (err, req, res, job) {
+    return this.client.post(postOpts, params, function (err, req, res, job) {
         if (err) {
             return cb(err);
         }
diff --git a/package.json b/package.json
index 32d403a..fbe13d0 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "wf-client",
   "description": "a node.js client for the Triton core Workflow API service",
-  "version": "0.2.1",
+  "version": "0.3.0",
   "author": "Joyent (joyent.com)",
   "main": "./lib/wf-client.js",
   "dependencies": {
diff --git a/test/wf-client.test.js b/test/wf-client.test.js
index 7fc6b59..7e85b8d 100644
--- a/test/wf-client.test.js
+++ b/test/wf-client.test.js
@@ -100,35 +100,16 @@ exports.testCreateJob = function (t) {
 };
 
 
-exports.testCreateJobUUID = function (t) {
-    var params = {
-        name: 'Tester',
-        target: 'say2',
-        task: 'say',
-        workflow: wfUuid
-    };
-
-    wfapi.createJob(params, function (err, job) {
-        assert.ifError(err);
-        t.ok(job);
-        t.ok(job.uuid);
-        t.done();
-    });
-};
-
-
 exports.testCreateJobWithRequestId = function (t) {
     var params = {
-        name: 'Tester',
         target: 'say-req-id',
-        task: 'say',
-        workflow: wfUuid
+        task: 'say'
     };
     var options = {
         headers: { 'x-request-id': 'f923df69-0e55-4c1a-b31b-0da8183a5f81' }
     };
 
-    wfapi.createJob(params, options, function (err, job) {
+    wfapi.createJob('say', params, options, function (err, job) {
         assert.ifError(err);
         t.ok(job);
         t.ok(job.uuid);
