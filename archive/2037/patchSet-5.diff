commit 9e6001517d151021b4e1b66f09d559f953ddd99f (refs/changes/37/2037/5)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2017-06-06T22:45:23+00:00 (2 years, 4 months ago)
    
    FWAPI-282 FWAPI should dump core when an uncaught error is thrown
    FWAPI-284 Update bunyan, fast-messages, and eslint-plugin-joyent dependencies
    FWAPI-285 Turn on jsstyle's "strict-indent"
    Reviewed by: Alex Wilson <alex.wilson@joyent.com>
    Approved by: Alex Wilson <alex.wilson@joyent.com>

diff --git a/Makefile b/Makefile
index 4f9a6f1..ab2c976 100644
--- a/Makefile
+++ b/Makefile
@@ -36,7 +36,7 @@ ESLINT_CONF	= tools/eslint.node.conf
 ESLINT_FILES	= $(JS_FILES)
 JSON_FILES	:= config.json.sample package.json
 JSSTYLE_FILES	 = $(JS_FILES)
-JSSTYLE_FLAGS    = -o indent=4,doxygen,unparenthesized-return=0
+JSSTYLE_FLAGS    = -o indent=2,doxygen,unparenthesized-return=0,strict-indent=true
 SMF_MANIFESTS_IN = smf/manifests/fwapi.xml.in
 
 
diff --git a/lib/app.js b/lib/app.js
index 8c89297..8de2746 100644
--- a/lib/app.js
+++ b/lib/app.js
@@ -113,6 +113,7 @@ function FWAPI(opts) {
     var server = this.server = restify.createServer({
         log: opts.log,
         name: 'SmartDC Firewall API',
+        handleUncaughtExceptions: false,
         version: VERSION
     });
     server.use(restify.acceptParser(server.acceptable));
diff --git a/lib/moray.js b/lib/moray.js
index 36ac4e7..cf8e942 100644
--- a/lib/moray.js
+++ b/lib/moray.js
@@ -34,7 +34,6 @@
 'use strict';
 
 var assert = require('assert-plus');
-var async = require('async');
 var clone = require('clone');
 var constants = require('./util/constants');
 var mod_moray = require('moray');
@@ -524,16 +523,17 @@ function listObjs(opts, callback) {
 
     req.on('end', function _endList() {
         if (opts.model) {
-            async.map(results, function (rec, cb) {
-                try {
-                    cb(null, new opts.model(rec, opts.app));
-                } catch (e) {
-                    cb(e);
-                }
-            }, callback);
-        } else {
-            callback(null, results);
+            try {
+                results = results.map(function (rec) {
+                    return new opts.model(rec, opts.app);
+                });
+            } catch (e) {
+                callback(e);
+                return;
+            }
         }
+
+        callback(null, results);
     });
 }
 
diff --git a/lib/persist.js b/lib/persist.js
index a7bab33..5534cdd 100644
--- a/lib/persist.js
+++ b/lib/persist.js
@@ -38,11 +38,16 @@ function notFoundErr(Model, uuid) {
 }
 
 function mkRule(data, app, cb) {
+    var rule;
+
     try {
-        return cb(null, new Rule(data, app));
+        rule = new Rule(data, app);
     } catch (e) {
-        return cb(e);
+        cb(e);
+        return;
     }
+
+    cb(null, rule);
 }
 
 /*
@@ -88,18 +93,20 @@ function createRule(app, log, params, callback) {
     if (app.config.fwrule_version > 2) {
         try {
             raw = (new Rule(params, app)).rawMoray();
-            app.moray.putObject(fw.BUCKET.name, raw.uuid, raw, {
-                etag: null
-            }, function (err) {
-                if (err && VError.hasCauseWithName(err, 'EtagConflictError')) {
-                    callback(mod_err.createExistsErr('Rule', 'uuid'));
-                } else {
-                    callback(err, new Rule({ value: raw }, app));
-                }
-            });
         } catch (e) {
             callback(e);
+            return;
         }
+
+        app.moray.putObject(fw.BUCKET.name, raw.uuid, raw, {
+            etag: null
+        }, function (err) {
+            if (err && VError.hasCauseWithName(err, 'EtagConflictError')) {
+                callback(mod_err.createExistsErr('Rule', 'uuid'));
+            } else {
+                callback(err, new Rule({ value: raw }, app));
+            }
+        });
     } else {
         ufdsmodel.modelPost(app, Rule, params, log, callback);
     }
diff --git a/lib/update.js b/lib/update.js
index 5ef72ac..92ea130 100644
--- a/lib/update.js
+++ b/lib/update.js
@@ -15,7 +15,7 @@
 'use strict';
 
 var assert = require('assert-plus');
-var stream = require('fast-stream');
+var stream = require('fast-messages');
 var util = require('util');
 var uuid = require('node-uuid');
 
diff --git a/package.json b/package.json
index bd5dd63..a238d2c 100644
--- a/package.json
+++ b/package.json
@@ -9,18 +9,17 @@
     "faucet": "0.0.1",
     "istanbul": "0.4.5",
     "eslint": "2.13.1",
-    "eslint-plugin-joyent": "1.0.1",
+    "eslint-plugin-joyent": "1.1.0",
     "mockery": "1.4.0"
   },
   "dependencies": {
     "assert-plus": "1.0.0",
-    "async": "0.1",
-    "bunyan": "1.2.3",
+    "bunyan": "1.8.10",
     "clone": "0.1",
     "cmdln": "1.1.1",
     "effluent-logger": "git+https://github.com/joshwilsdon/effluent-logger.git#d662f161a07f94045ad2afb45442931511c40e51",
     "extsprintf": "1.0.2",
-    "fast-stream": "git+https://github.com/joyent/sdc-fast-stream.git#893d59d",
+    "fast-messages": "1.0.1",
     "fwrule": "1.4.0",
     "jsprim": "1.3.1",
     "moray": "2.0.1",
@@ -29,7 +28,7 @@
     "node-uuid": "1.2.0",
     "sdc-clients": "9.5.0",
     "ufds": "1.2.0",
-    "restify": "git+https://github.com/mcavage/node-restify.git#0d7b4ba",
+    "restify": "4.3.0",
     "trace-event": "1.3.0",
     "vasync": "1.6.4",
     "verror": "1.9.0",
diff --git a/test/integration/invalid.test.js b/test/integration/invalid.test.js
index 27872fa..16f3444 100644
--- a/test/integration/invalid.test.js
+++ b/test/integration/invalid.test.js
@@ -100,7 +100,7 @@ function createPayload(ruleTxt) {
 
     [ 'rule: bad ICMP type',
       createPayload('FROM all vms TO ip 192.168.5.4 BLOCK ICMP TYPE 260'),
-      [ mod_err.invalidParam('rule', 'ICMP type \"260\" is invalid') ] ]
+      [ mod_err.invalidParam('rule', 'ICMP type "260" is invalid') ] ]
 ].forEach(function (cfg) {
     test('Invalid rule: ' + cfg[0], function (t) {
         mod_rule.create(t, {
diff --git a/test/integration/update.test.js b/test/integration/update.test.js
index 9649f03..f382d00 100644
--- a/test/integration/update.test.js
+++ b/test/integration/update.test.js
@@ -15,9 +15,9 @@
 'use strict';
 
 var test = require('tape');
-var async = require('async');
 var mod_rule = require('../lib/rule');
 var mod_uuid = require('node-uuid');
+var vasync = require('vasync');
 
 
 
@@ -120,15 +120,21 @@ test('Update rule', function (t) {
     ]
     ];
 
-    async.forEachSeries(exp, function (data, cb) {
+    function doUpdate(data, cb) {
         t.ok(data[0], '# ' + data[0]);
         mod_rule.updateAndGet(t, {
             uuid: RULES[0].uuid,
             params: data[1],
             partialExp: data[1]
         }, cb);
-    }, function () {
-        return t.end();
+    }
+
+    vasync.forEachPipeline({
+        inputs: exp,
+        func: doUpdate
+    }, function (err) {
+        t.ifError(err, 'doUpdate() error');
+        t.end();
     });
 });
 
diff --git a/test/lib/rule.js b/test/lib/rule.js
index 4b9c742..9c01dfe 100644
--- a/test/lib/rule.js
+++ b/test/lib/rule.js
@@ -15,7 +15,6 @@
 'use strict';
 
 var assert = require('assert-plus');
-var async = require('async');
 var clone = require('clone');
 var common = require('./common');
 var done = common.done;
@@ -237,15 +236,18 @@ function delAllCreated(t, callback) {
 
     LOG.debug({ toDel: toDel }, 'deleting all created rules');
 
-    async.forEachSeries(toDel, function (uuid, cb) {
-        delAndGet(t, {
-            uuid: uuid
-        }, function () {
-            // Ignore the error and plow on
-            return cb();
-        });
+    mod_vasync.forEachPipeline({
+        inputs: toDel,
+        func: function doDel(uuid, cb) {
+            delAndGet(t, {
+                uuid: uuid
+            }, function (_) {
+                // Ignore the error and plow on
+                cb(null);
+            });
+        }
     }, function (err) {
-        return done(err, toDel, t, callback);
+        done(err, toDel, t, callback);
     });
 }
 
diff --git a/test/lib/vm.js b/test/lib/vm.js
index 0554ac8..421e072 100644
--- a/test/lib/vm.js
+++ b/test/lib/vm.js
@@ -15,7 +15,6 @@
 'use strict';
 
 var assert = require('assert-plus');
-var async = require('async');
 var clone = require('clone');
 var common = require('./common');
 var config = require('./config');
@@ -278,7 +277,7 @@ function provision(t, opts, callback) {
         opts.vms[v].vmNum = v;
     }
 
-    async.map(opts.vms, function (vmParams, cb) {
+    function doProvision(vmParams, cb) {
         var newOpts = clone(opts);
         newOpts.vm = vmParams;
 
@@ -291,7 +290,12 @@ function provision(t, opts, callback) {
 
             cb(err);
         });
-    }, function (err, res) {
+    }
+
+    vasync.forEachPipeline({
+        inputs: opts.vms,
+        func: doProvision
+    }, function (err) {
         if (err) {
             done(err, null, t, callback);
             return;
