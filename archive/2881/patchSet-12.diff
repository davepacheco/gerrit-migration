From 6e5a0a4c8e3ade014f77f1d9992a216b83ed7424 Mon Sep 17 00:00:00 2001
From: Russell Brown <russell.brown@joyent.com>
Date: Thu, 26 Oct 2017 20:14:03 +0000
Subject: [PATCH] MANTA-2412 Allow addition of content-disposition header to
 manta objects

Add external dep for validating/cleaning content-disposition header
Add util fun for validiting content-disposition
Add tests for content-disposition
---
 lib/common.js           |  12 ++
 lib/obj.js              |   2 +
 lib/server.js           |   4 +-
 lib/uploads/create.js   |  15 ++-
 lib/utils.js            |  42 ++++++-
 package.json            |   3 +-
 test/dir.test.js        | 251 +++++++++++++++++++++++++++++++++++++++-
 test/helper.js          |  10 +-
 test/mpu/create.test.js |  47 +++++++-
 test/obj.test.js        | 145 ++++++++++++++++++++++-
 10 files changed, 513 insertions(+), 18 deletions(-)

diff --git a/lib/common.js b/lib/common.js
index 4d99268..809c262 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -22,6 +22,8 @@ var vasync = require('vasync');
 var restify = require('restify');
 var VError = require('verror');
 
+var muskieUtils = require('./utils');
+
 require('./errors');
 
 
@@ -229,6 +231,15 @@ function createMetadata(req, type, cb) {
         break;
 
     case 'object':
+        muskieUtils.validateContentDisposition(
+            req.headers, function cdcb(err, _h) {
+                if (err) {
+                    req.log.debug('malformed content-disposition: %s', err.msg);
+                    cb(new restify.errors.BadRequestError());
+                }
+            });
+
+        md.contentDisposition = req.header('content-disposition');
         md.contentLength = req._size !== undefined ?
             req._size : prev.contentLength;
         md.contentMD5 = req._contentMD5 || prev.contentMD5;
@@ -851,6 +862,7 @@ function readdir(dir, req, opts) {
                 size: r.value.contentLength,
                 type: r.value.type,
                 contentType: r.value.contentType,
+                contentDisposition: r.value.contentDisposition,
                 contentMD5: r.value.contentMD5,
                 mtime: new Date(r.value.mtime).toISOString()
             };
diff --git a/lib/obj.js b/lib/obj.js
index f32b1f7..b1e48ee 100644
--- a/lib/obj.js
+++ b/lib/obj.js
@@ -727,6 +727,7 @@ function streamFromSharks(req, res, next) {
     if (md.contentLength === 0 || req.method === 'HEAD') {
         log.debug('streamFromSharks: HEAD || zero-byte object');
         res.header('Durability-Level', req.metadata.sharks.length);
+        res.header('Content-Disposition', req.metadata.contentDisposition);
         res.header('Content-Length', md.contentLength);
         res.header('Content-MD5', md.contentMD5);
         res.header('Content-Type', md.contentType);
@@ -750,6 +751,7 @@ function streamFromSharks(req, res, next) {
             res.header('Content-MD5', md.contentMD5);
         }
 
+        res.header('Content-Disposition', req.metadata.contentDisposition);
         res.header('Content-Length', sh['content-length']);
         res.header('Durability-Level', req.metadata.sharks.length);
 
diff --git a/lib/server.js b/lib/server.js
index c23229d..e0f3c31 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 var crypto = require('crypto');
@@ -32,6 +32,8 @@ var picker = require('./picker');
 var uploads = require('./uploads');
 var throttle = require('./throttle');
 
+var muskieUtils = require('./utils');
+
 // injects into the global namespace
 require('./errors');
 
diff --git a/lib/uploads/create.js b/lib/uploads/create.js
index 9f7b46c..b1b1cc5 100644
--- a/lib/uploads/create.js
+++ b/lib/uploads/create.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -30,6 +30,7 @@ var auth = require('../auth');
 var common = require('../common');
 var obj = require('../obj');
 var uploadsCommon = require('./common');
+var muskieUtils = require('../utils');
 require('../errors');
 
 
@@ -178,6 +179,7 @@ function validateSchema(req, res, next) {
  *   - durability-level
  *   - content-length
  *   - content-md5
+ *   - content-disposition
  *
  * This handler is expected to set the following state on the upload object:
  * - objectPath
@@ -243,6 +245,17 @@ function validateParams(req, res, next) {
                 return;
             }
 
+            // validate the content-disposition header
+            muskieUtils.validateContentDisposition(
+                headers, function cb(cdErr, _h) {
+                    if (cdErr) {
+                        req.log.debug('malformed content-disposition: %s',
+                                      cdErr.msg);
+                        res.send(400);
+                        next(false);
+                    }
+                });
+
             assert.string(p);
             assert.object(headers);
             assert.number(size);
diff --git a/lib/utils.js b/lib/utils.js
index 7802230..2ef67a1 100644
--- a/lib/utils.js
+++ b/lib/utils.js
@@ -5,9 +5,12 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
+var assert = require('assert-plus');
+var contentDisposition = require('content-disposition');
+
 //
 // Given a list of lists, this function will interleave each element
 // from each list into a new flat list.
@@ -66,10 +69,45 @@ function shuffle(array) {
 }
 
 
+/**
+ * validates, and sets a content-disposition header, if present
+ *
+ * If a content-dispositon key is present in the passed headers
+ * object, it is validated and canonicalised. The canonical, valid
+ * value is saved against the headers 'content-disposition' key and
+ * callback called with headers. If the value is invalid, an error is
+ * passed to the callback, the error.msg will be the invalid
+ * content-disposition string.
+ */
+function validateContentDisposition(headers, cb) {
+    assert.object(headers, 'headers');
+    assert.func(cb, 'callback');
+
+    if (headers['content-disposition'] !== undefined) {
+        var cd = headers['content-disposition'];
+
+        try {
+            // use a round trip of parse and write to set a valid
+            // value that can be used when reading the object.
+            var cdp = contentDisposition.parse(cd);
+            var cdStr = contentDisposition(cdp.parameters.filename,
+                                           cdp.type);
+            headers['content-disposition'] = cdStr;
+            cb(null, headers);
+        } catch (err) {
+            err.msg = cd;
+            cb(err, headers);
+        }
+    } else {
+        cb(null, headers);
+    }
+}
+
 ///--- Exports
 
 module.exports = {
     interleave: interleave,
     shallowCopy: shallowCopy,
-    shuffle: shuffle
+    shuffle: shuffle,
+    validateContentDisposition: validateContentDisposition
 };
diff --git a/package.json b/package.json
index b7b01e1..8910d23 100644
--- a/package.json
+++ b/package.json
@@ -18,6 +18,7 @@
         "bunyan": "0.22.1",
         "bunyan-syslog": "0.2.2",
         "cmdln": "4.3.0",
+        "content-disposition": "0.5.3",
         "cueball": "2.2.9",
         "dashdash": "1.3.2",
         "deep-equal": "0.0.0",
@@ -27,7 +28,7 @@
         "kang": "1.1.0",
         "keep-alive-agent": "0.0.1",
         "keyapi": "git+https://github.com/joyent/keyapi.git#e14b3d58",
-        "libmanta": "git+https://github.com/joyent/node-libmanta.git#v1.2.0",
+        "libmanta": "file:../node-libmanta",
         "libuuid": "0.1.2",
         "lru-cache": "4.1.5",
         "lstream": "0.0.4",
diff --git a/test/dir.test.js b/test/dir.test.js
index 85b28d6..c0ad790 100644
--- a/test/dir.test.js
+++ b/test/dir.test.js
@@ -27,22 +27,40 @@ var test = helper.test;
 
 
 ///--- Helpers
+function writeObject(client, key, opts, cb) {
+    if (typeof (opts) === 'function') {
+        cb = opts;
+        opts = {};
+    }
 
-function writeObject(client, key, cb) {
     var stream = new MemoryStream();
     var text = 'The lazy brown fox \nsomething \nsomething foo';
     var size = Buffer.byteLength(text);
 
-    client.put(key, stream, {size: size}, cb);
+    var _opts = {
+        headers: opts.headers,
+        size: size
+    };
+
+    client.put(key, stream, _opts, cb);
     process.nextTick(stream.end.bind(stream, text));
 }
 
-function writeStreamingObject(client, key, cb) {
+function writeStreamingObject(client, key, opts, cb) {
+    if (typeof (opts) === 'function') {
+        cb = opts;
+        opts = {};
+    }
+
     var stream = new MemoryStream();
     var text = 'The lazy brown fox \nsomething \nsomething foo';
 
+    var _opts = {
+        headers: opts.headers
+    };
+
     process.nextTick(stream.end.bind(stream, text));
-    client.put(key, stream, function (err, res) {
+    client.put(key, stream, _opts, function (err, res) {
         if (err) {
             cb(err);
         } else if (res.statusCode != 204) {
@@ -107,8 +125,8 @@ function testParamsAllowed(t, isOperator, expectOk, path, params) {
             if (expectOk) {
                 t.ifError(get_err);
             } else {
-                t.ok(get_err);
-                t.equal(get_err.statusCode, 403);
+                t.ok(get_err, 'expected error');
+                t.equal(get_err.statusCode, 403, 'expected statuscode of 403');
                 t.equal(get_err.restCode, 'QueryParameterForbidden');
             }
             t.end();
@@ -893,3 +911,224 @@ test('rmdir not empty', function (t) {
         });
     });
 });
+
+test('mkdir with Content-Disposition ignored', function (t) {
+    var cd = 'attachment; filename="my-file.txt"';
+    var opts = {
+        headers: {
+            'content-disposition': cd
+        }
+    };
+
+    var self = this;
+
+    self.client.mkdir(self.key, opts, function (err, res) {
+        t.ifError(err);
+        t.ok(res);
+        t.checkResponse(res, 204);
+        t.end();
+
+        self.client.info(self.key, function (err2, info) {
+                t.ifError(err2);
+                t.ok(info);
+                if (info) {
+                    t.ok(!('content-disposition' in info.headers),
+                         'content-dispostion should not be in headers');
+                }
+                t.end();
+            });
+    });
+});
+
+test('mkdir with bad Content-Disposition ignored', function (t) {
+    var cd = 'attachment;"';
+    var opts = {
+        headers: {
+            'content-disposition': cd
+        }
+    };
+
+    var self = this;
+
+    self.client.mkdir(self.key, opts, function (err, res) {
+        t.ifError(err);
+        t.ok(res);
+        t.checkResponse(res, 204);
+        t.end();
+
+        self.client.info(self.key, function (err2, info) {
+            t.ifError(err2);
+            t.ok(info);
+            t.ok(!('content-disposition' in info.headers),
+                 'content-dispostion should not be in headers');
+            t.end();
+        });
+    });
+});
+
+test('mkdir, chattr: content-disposition (ignore)', function (t) {
+    var k = this.key;
+    var cd = 'attachment"';
+    var opts = {
+        headers: {
+            'content-disposition': cd
+        }
+    };
+    var self = this;
+
+    this.client.mkdir(k, function (err) {
+        t.ifError(err);
+
+        self.client.chattr(k, opts, function (err2) {
+            t.ifError(err2);
+
+            self.client.info(k, function (err3, info) {
+                t.ifError(err3);
+                 t.ok(info);
+                t.ok(!('content-disposition' in info.headers),
+                     'content-dispostion should not be in headers');
+                t.equal(info.extension, 'directory');
+                t.end();
+            });
+        });
+    });
+});
+
+test('mkdir, chattr: bad content-disposition (ignore)', function (t) {
+    var k = this.key;
+    var cd = 'attachment;"';
+    var opts = {
+        headers: {
+            'content-disposition': cd
+        }
+    };
+    var self = this;
+
+    this.client.mkdir(k, function (err) {
+        t.ifError(err);
+
+        self.client.chattr(k, opts, function (err2) {
+            t.ifError(err2);
+
+            self.client.info(k, function (err3, info) {
+                t.ifError(err3);
+                 t.ok(info);
+                t.ok(!('content-disposition' in info.headers),
+                     'content-dispostion should not be in headers');
+                t.equal(info.extension, 'directory');
+                t.end();
+            });
+        });
+    });
+});
+
+test('ls returns content-disposition for non-streaming objects', function (t) {
+    var self = this;
+    var cd = 'attachment; filename="my-file.txt"';
+    var opts = {
+        headers: {
+            'content-disposition': cd
+        }
+    };
+
+    writeObject(self.client, self.key, opts, function (put_err) {
+        t.ifError(put_err);
+        self.client.ls(self.dir, function (err, res) {
+            t.ifError(err);
+            t.ok(res);
+
+            var objs = [];
+
+            res.on('object', function (obj) {
+                t.ok(obj, 'fail, no obj!');
+                objs.push(obj);
+            });
+
+            res.once('error', function (err2) {
+                t.ifError(err2);
+                t.end();
+            });
+
+            res.once('end', function (http_res) {
+                t.ok(http_res);
+                t.checkResponse(http_res, 200);
+                t.equal(objs.length, 1);
+                t.ok(objs[0].contentDisposition);
+                t.equal(objs[0].contentDisposition, cd);
+                t.end();
+            });
+        });
+    });
+});
+
+test('ls returns content-disposition for streaming objects', function (t) {
+    var self = this;
+    var cd = 'attachment; filename="my-file.txt"';
+    var opts = {
+        headers: {
+            'content-disposition': cd
+        }
+    };
+
+    writeStreamingObject(self.client, self.key, opts, function (put_err) {
+        t.ifError(put_err);
+        self.client.ls(self.dir, function (err, res) {
+            t.ifError(err);
+            t.ok(res);
+
+            var objs = [];
+
+            res.on('object', function (obj) {
+                t.ok(obj, 'fail, no obj!');
+                objs.push(obj);
+            });
+
+            res.once('error', function (err2) {
+                t.ifError(err2);
+                t.end();
+            });
+
+            res.once('end', function (http_res) {
+                t.ok(http_res);
+                t.checkResponse(http_res, 200);
+                t.equal(objs.length, 1);
+                t.ok(objs[0].contentDisposition);
+                t.equal(objs[0].contentDisposition, cd);
+                t.end();
+            });
+        });
+    });
+});
+
+test('ls returns no content-disposition when not set', function (t) {
+    var self = this;
+
+    writeObject(self.client, self.key, function (put_err) {
+        t.ifError(put_err);
+        self.client.ls(self.dir, function (err, res) {
+            t.ifError(err);
+            t.ok(res);
+
+            var objs = [];
+
+            res.on('object', function (obj) {
+                t.ok(obj, 'fail, no obj!');
+                objs.push(obj);
+            });
+
+            res.once('error', function (err2) {
+                t.ifError(err2);
+                t.end();
+            });
+
+            res.once('end', function (http_res) {
+                t.ok(http_res, 'http response exists');
+                t.checkResponse(http_res, 200);
+                t.equal(objs.length, 1, 'one object in list');
+                t.ok(!(objs[0].contentDisposition),
+                     'no content disposition field');
+                t.end();
+            });
+        });
+    });
+});
diff --git a/test/helper.js b/test/helper.js
index 1f183ee..1ea15d8 100644
--- a/test/helper.js
+++ b/test/helper.js
@@ -249,11 +249,11 @@ function checkResponse(t, res, code) {
     if (!res)
         return;
     t.equal(res.statusCode, code, 'HTTP status code mismatch');
-    t.ok(res.headers);
-    t.ok(res.headers.date);
-    t.equal(res.headers.server, 'Manta');
-    t.ok(res.headers['x-request-id']);
-    t.ok(res.headers['x-server-name']);
+    t.ok(res.headers, 'has headers');
+    t.ok(res.headers.date, 'headers have date');
+    t.equal(res.headers.server, 'Manta', 'server header is Manta');
+    t.ok(res.headers['x-request-id'], 'headers have x-req-id');
+    t.ok(res.headers['x-server-name'], 'headers have x-server-name');
 
     if (code === 200 || code === 201 || code === 202) {
         t.ok(res.headers['content-type']);
diff --git a/test/mpu/create.test.js b/test/mpu/create.test.js
index a1d752b..c1b50e0 100644
--- a/test/mpu/create.test.js
+++ b/test/mpu/create.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 var path = require('path');
@@ -464,3 +464,48 @@ test('create upload: x-durability-level less than allowed', function (t) {
         t.end();
     });
 });
+
+// content-disposition
+test('create upload: content-disposition header', function (t) {
+    var self = this;
+    var cd = 'attachment; filename="my-file.txt"';
+    var h = {
+        'content-disposition': cd
+    };
+
+    self.createUpload(self.path, h, function (err, o) {
+        if (ifErr(t, err, 'created upload')) {
+            t.end();
+            return;
+        }
+
+        self.getUpload(self.uploadId, function (err2, upload) {
+            if (ifErr(t, err2, 'got upload')) {
+                t.end();
+                return;
+            }
+
+            t.deepEqual(upload.headers, h, 'created headers match');
+            t.ok(upload.state, 'created');
+            t.end();
+        });
+    });
+});
+
+
+test('create upload: invalid content-disposition', function (t) {
+    var self = this;
+    var h = {
+        'content-disposition': 'attachment;'
+    };
+
+    self.createUpload(self.path, h, function (err, o) {
+        t.ok(err, 'Expect error');
+        if (!err) {
+            return (t.end());
+        }
+        t.ok(verror.hasCauseWithName(err,
+            'BadRequestError'), 'Expected 400');
+        t.end();
+    });
+});
diff --git a/test/obj.test.js b/test/obj.test.js
index c4863a1..c8ae95a 100644
--- a/test/obj.test.js
+++ b/test/obj.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 var crypto = require('crypto');
@@ -1058,3 +1058,146 @@ test('put timeout', function (t) {
         stream.write(TEXT.substr(0, 1));
     });
 });
+
+// content-disposition tests
+
+test('Put-Get no content-disposition', function (t) {
+    var self = this;
+    var opts = {};
+    this.putObject(t, opts, function (_, headers) {
+        self.client.get(self.key, opts, function (err, stream, res) {
+            t.ifError(err);
+            t.checkResponse(res, 200);
+            t.ok(!('content-disposition' in res.headers),
+                 'No content disposition expected');
+            t.end();
+        });
+    });
+});
+
+test('Put-Get content-disposition', function (t) {
+    var self = this;
+    var cd = 'attachment; filename="my-file.txt"';
+    var opts = {
+        headers: {
+            'content-disposition': cd
+        }
+    };
+
+    this.putObject(t, opts, function (_, headers) {
+        self.client.get(self.key, opts, function (err, stream, res) {
+            t.ifError(err);
+            t.checkResponse(res, 200);
+            t.equal(res.headers['content-disposition'], cd,
+                    'Content-Disposition should match written value');
+            t.end();
+        });
+    });
+});
+
+test('Put-Get content-disposition cleaned', function (t) {
+    var self = this;
+    var cd = 'attachment; filename="/root/my-file.txt"';
+    var opts = {
+        headers: {
+            'content-disposition': cd
+        }
+    };
+
+    this.putObject(t, opts, function (_, headers) {
+        self.client.get(self.key, opts, function (err, stream, res) {
+            t.ifError(err);
+            t.checkResponse(res, 200);
+            t.equal(res.headers['content-disposition'],
+                    'attachment; filename="my-file.txt"',
+                    'Content-Disposition should be clean');
+            t.end();
+        });
+    });
+});
+
+
+test('streaming object valid content-disposition',
+     function (t) {
+         var stream = new MemoryStream();
+         var text = 'The lazy brown fox \nsomething \nsomething foo';
+
+         process.nextTick(stream.end.bind(stream, text));
+         var opts = {
+             headers: {
+                 'content-disposition': 'attachment; filename="my-file.txt"'
+             }
+         };
+
+         this.client.put(this.key, stream, opts, function (err, res) {
+             t.ifError(err);
+             t.checkResponse(res, 204);
+             t.end();
+         });
+     });
+
+
+test('streaming object invalid content-disposition',
+     function (t) {
+         var stream = new MemoryStream();
+         var text = 'The lazy brown fox \nsomething \nsomething foo';
+
+         process.nextTick(stream.end.bind(stream, text));
+         var opts = {
+             headers: {
+                 'content-disposition': 'attachment;'
+             }
+         };
+         this.client.put(this.key, stream, opts, function (err, res) {
+             t.equal(res.statusCode, 400, 'Expected 400');
+             t.equal(err.name, 'BadRequestError', 'Expected a BadRequestError');
+             t.end();
+         });
+     });
+
+test('chattr: valid content-disposition', function (t) {
+    var cd = 'attachment; filename="my-file.txt"';
+    var opts = {
+        headers: {
+            'content-disposition': cd
+        }
+    };
+
+    var self = this;
+
+    this.putObject(t, function () {
+        self.client.chattr(self.key, opts, function (err) {
+            t.ifError(err);
+
+            self.client.info(self.key, function (err2, info) {
+                t.ifError(err2);
+                t.ok(info);
+                if (info) {
+                    var h = info.headers || {};
+                    t.equal(h['content-disposition'], cd,
+                            'Content-Disposition should match written value');
+                }
+                t.end();
+            });
+        });
+    });
+});
+
+test('chattr invalid content-disposition',
+     function (t) {
+         var opts = {
+             headers: {
+                 'content-disposition': 'attachment;'
+             }
+         };
+         var self = this;
+
+         this.putObject(t, function () {
+             self.client.chattr(self.key, opts, function (err, res) {
+                 t.equal(res.statusCode, 400, 'Expected 400');
+                 t.equal(err.name, 'BadRequestError',
+                         'Expected a BadRequestError');
+                 t.end();
+             });
+         });
+     });
-- 
2.21.0

