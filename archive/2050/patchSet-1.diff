From 6d4fac24b2fc80e1288ba1668ecf4c9dbfb72e0e Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Mon, 5 Jun 2017 22:58:34 +0000
Subject: [PATCH] NAPI-418 Integration tests use unit test configuration
 instead of NAPI's actual configuration NAPI-419 NAPI tests fail on non-COAL
 DC when fabric networks are enabled

---
 package.json                       |  2 +-
 test/integration/fabrics.test.js   |  8 +++++++-
 test/integration/provision.test.js |  7 ++++---
 test/lib/config.js                 | 29 +++++++++++++++++++++--------
 4 files changed, 33 insertions(+), 13 deletions(-)

diff --git a/package.json b/package.json
index d8b87dd..295ab56 100644
--- a/package.json
+++ b/package.json
@@ -12,7 +12,7 @@
     "dashdash": "1.7.3",
     "effluent-logger": "git+https://github.com/joshwilsdon/effluent-logger.git#d662f161a07f94045ad2afb45442931511c40e51",
     "ip6addr": "0.2.2",
-    "jsprim": "1.2.2",
+    "jsprim": "1.4.0",
     "lomstream": "1.1.0",
     "moray": "2.0.1",
     "node-uuid": "1.4.7",
diff --git a/test/integration/fabrics.test.js b/test/integration/fabrics.test.js
index 887ed9e..a75110a 100644
--- a/test/integration/fabrics.test.js
+++ b/test/integration/fabrics.test.js
@@ -45,6 +45,7 @@ var OWNERS = [
     mod_uuid.v4(),
     mod_uuid.v4()
 ];
+
 var OVERLAY_MTU = config.server.overlay.defaultOverlayMTU;
 var OVERLAY_NIC_TAG = config.server.overlay.overlayNicTag;
 var UNDERLAY_MTU = config.server.overlay.defaultUnderlayMTU;
@@ -252,7 +253,12 @@ test('overlay / underlay nic tags', function (t) {
                 name: OVERLAY_NIC_TAG
             },
             partialExp: {
-                mtu: UNDERLAY_MTU,
+                /*
+                 * MTUs can't be set below 1500 on a nic_tag, so
+                 * we clamp it during its creation and here in
+                 * case it's set to 1400 (i.e., COAL).
+                 */
+                mtu: Math.max(OVERLAY_MTU, 1500),
                 name: OVERLAY_NIC_TAG
             }
         });
diff --git a/test/integration/provision.test.js b/test/integration/provision.test.js
index 1b77cc1..33a3377 100644
--- a/test/integration/provision.test.js
+++ b/test/integration/provision.test.js
@@ -72,7 +72,7 @@ function ipSort(a, b) {
 /**
  * Checks to make sure the error matches the network pool full error
  */
-function expPoolFull(t, err) {
+function expPoolFull(t, uuid, err) {
     t.ok(err, 'error returned');
     if (!err) {
         return;
@@ -81,7 +81,8 @@ function expPoolFull(t, err) {
     t.equal(err.statusCode, 422, 'status code');
     t.deepEqual(err.body, h.invalidParamErr({
         errors: [
-            mod_err.invalidParam('network_uuid', constants.POOL_FULL_MSG)
+            mod_err.invalidParam('network_uuid',
+                util.format(constants.fmt.POOL_FULL_MSG, uuid))
         ]
     }), 'error');
 }
@@ -118,7 +119,7 @@ function expProvisionFail(t, opts) {
     log.debug({ mac: mac, params: params }, 'expProvisionFail');
     napi.createNic(mac, params, function (err, res) {
         if (opts.pool) {
-            expPoolFull(t, err);
+            expPoolFull(t, opts.network_uuid, err);
         } else {
             expSubnetFull(t, opts.network_uuid, err);
         }
diff --git a/test/lib/config.js b/test/lib/config.js
index bd187bc..e4b448f 100644
--- a/test/lib/config.js
+++ b/test/lib/config.js
@@ -14,9 +14,9 @@
 
 'use strict';
 
-var clone = require('clone');
 var fmt = require('util').format;
 var fs = require('fs');
+var jsprim = require('jsprim');
 
 
 
@@ -27,6 +27,16 @@ var fs = require('fs');
 var NAPI_HOST = process.env.NAPI_HOST || 'localhost';
 var NAPI_PORT = process.env.NAPI_PORT || 80;
 
+var CONFIG_PATH_INTEGRATION = __dirname + '/../../config.json';
+var CONFIG_PATH_UNIT = __dirname + '/../config.json';
+
+/*
+ * If there is a configuration file two levels up, then it's been generated by
+ * config-agent and we should use that. Otherwise, we're running unit tests,
+ * and can just load the simple version.
+ */
+var CONFIG_PATH = fs.existsSync(CONFIG_PATH_INTEGRATION) ?
+    CONFIG_PATH_INTEGRATION : CONFIG_PATH_UNIT;
 
 
 // --- Exports
@@ -39,18 +49,21 @@ var CONFIG = {
         // NIC tags max out at 31 chars.
         nic_tag_name: 'sdcnapitest_' + process.pid
     },
-    moray: {
-        host: process.env.MORAY_HOST || '10.99.99.17',
-        logLevel: process.env.LOG_LEVEL || 'fatal',
-        port: process.env.MORAY_PORT || 2020
-    },
     napi: {
         host: fmt('http://%s:%d', NAPI_HOST, NAPI_PORT)
     },
-    server: JSON.parse(fs.readFileSync(__dirname + '/../config.json'))
+    server: JSON.parse(fs.readFileSync(CONFIG_PATH))
 };
 
-CONFIG.server.moray = clone(CONFIG.moray);
+if (!jsprim.hasKey(CONFIG.server, 'moray')) {
+    CONFIG.server.moray = {
+        host: process.env.MORAY_HOST || '10.99.99.17',
+        logLevel: process.env.LOG_LEVEL || 'fatal',
+        port: process.env.MORAY_PORT || 2020
+    };
+}
+
+CONFIG.moray = jsprim.deepCopy(CONFIG.server.moray);
 
 
 module.exports = CONFIG;
-- 
2.21.0

