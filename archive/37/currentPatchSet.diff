From 03224b5d693848f17331840871969b120a65857c Mon Sep 17 00:00:00 2001
From: Trent Mick <trentm@gmail.com>
Date: Tue, 21 Jun 2016 23:32:46 +0000
Subject: [PATCH] standalong IMGAPI new 'triton'-style log rotation naming, log
 upload to manta

---
 tools/standalone/tritonlogupload.sh     | 173 ++++++++++++++++++++++++
 tools/standalone/tritonpostlogrotate.sh | 135 ++++++++++++++++++
 2 files changed, 308 insertions(+)
 create mode 100755 tools/standalone/tritonlogupload.sh
 create mode 100755 tools/standalone/tritonpostlogrotate.sh

diff --git a/tools/standalone/tritonlogupload.sh b/tools/standalone/tritonlogupload.sh
new file mode 100755
index 0000000..e54fbe6
--- /dev/null
+++ b/tools/standalone/tritonlogupload.sh
@@ -0,0 +1,173 @@
+#!/bin/bash
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright 2016 Joyent, Inc.
+#
+
+#
+# Upload Triton log files in /var/log/triton/upload/ to Manta.
+#
+# Typically this script is setup to run after logadm does it rotations.
+# This will make *5* upload attempts with 60s gaps. This is to allow
+# log rotation to complete. 
+#
+#       0 * * * * /usr/sbin/logadm -v >>/var/log/logadm.log 2>&1
+#       1 * * * * /.../tritonlogupload.sh -a 5 >>/var/log/tritonlogupload.log 2>&1
+#
+# Currently this is hardcoded for standalone IMGAPI usage, getting
+# manta config info from $CONFIG. TODO: generalize this.
+#
+# Based on https://github.com/joyent/manta-scripts/blob/master/backup.sh
+#
+
+if [[ -n "$TRACE" ]]; then
+    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
+    set -o xtrace
+fi
+set -o errexit
+set -o pipefail
+
+
+export PATH=/opt/local/bin:/opt/smartdc/imgapi/node_modules/.bin:$PATH
+
+SRCDIR=/var/log/triton/upload
+CONFIG=/data/imgapi/etc/imgapi.config.json
+DATE=/opt/local/bin/date
+
+
+#---- support functions
+
+function fatal() {
+    echo "$0: error: $*" >&2
+    exit 1
+}
+
+function errexit
+{
+    [[ $1 -ne 0 ]] || exit 0
+    fatal "error exit status $1"
+}
+
+function usage () {
+    echo "Upload Triton log files in /var/log/triton/upload to Manta."
+    echo ""
+    echo "Requirements:"
+    echo "1. The log files are expected to be of the form:"
+    echo "       $logname_$nodename_YYYYMMDDTHH0000.log"
+    echo "2. The '$logname' cannot contain an underscore."
+    echo ""
+    echo "The files are uploaded to:"
+    echo "    /$account/stor/$baseDir/logs/$logname/YYYY/MM/DD/HH/$nodename.log"
+    echo "where the hour dir is an hour *previous*."
+    echo ""
+    echo "Usage:"
+    echo "    tritonlogupload.sh [-h]"
+    echo ""
+    echo "Options:"
+    echo "     -h       Print this help and exit."
+    echo "     -n       Dry-run."
+    echo "     -a N     Number of attempts (with 60s gap between attempts)."
+    echo "              Multiple attempts can be useful to run this once but"
+    echo "              give time to logadm to finish rotating logs."
+}
+
+function upload_files() {
+    local dryrun
+    dryrun=$1
+
+    # Looking for $logname_$nodename_YYYYMMDDTHHMMSS.log files.
+    files=$(ls -1 $SRCDIR/ | (egrep '.*_.*_........T......\.log' || true))
+    if [[ -z "$files" ]]; then
+        echo "no files to upload"
+        return
+    fi
+        
+    nfiles=$(echo "$files" | wc -l)
+    echo "upload $nfiles file(s) from $SRCDIR to $dstMdir"
+    for f in $files
+    do
+        base=$(basename $f)
+        logname=$(echo $base | cut -d _ -f 1)
+        # Assume no '_' in nodename for now.
+        nodename=$(echo $base | cut -d _ -f 2)
+        datestr=$(echo $base | awk '{ FS="_"; print $NF }' | cut -d. -f1)
+        isotime=$(echo $datestr | strptime -i '%Y%m%dT%H%M%S' -f '%Y-%m-%dT%H:%M:%S')
+        # Note: GZ /usr/bin/date doesn't support -d.
+        hourdir=$($DATE -d \@$(( $($DATE -d $isotime "+%s") - 3600 )) "+%Y/%m/%d/%H")
+        targ="$dstMdir/$logname/$hourdir/$nodename.log"
+
+        upload_file $f $targ $dryrun
+        echo "rm $f"
+        if [[ $dryrun == "no" ]]; then
+            rm $f
+        fi
+    done
+}
+
+function upload_file() {
+    local src dst dryrun
+    src=$1
+    dst=$2
+    dryrun=$3
+    echo "upload $src to $dst"
+    if [[ $dryrun == "no" ]]; then
+        mput -q -p -H "Content-Type: text/plain" -f $src $dst
+    fi
+}
+
+
+#---- mainline
+
+trap 'errexit $?' EXIT
+
+# Options.
+opt_dryrun=no
+opt_numattempts=1
+while getopts "hna:" opt
+do
+    case "$opt" in
+        h)
+            usage
+            exit 0
+            ;;
+        n)
+            opt_dryrun=yes
+            ;;
+        a)
+            opt_numattempts=$OPTARG
+            ;;
+        *)
+            usage
+            exit 1
+            ;;
+    esac
+done
+shift $((OPTIND - 1))
+
+
+export MANTA_URL=$(json -f $CONFIG storage.manta.url)
+export MANTA_USER=$(json -f $CONFIG storage.manta.user)
+export MANTA_KEY_ID=$(json -f $CONFIG storage.manta.keyId)
+if [[ "$(json -f $CONFIG storage.manta.insecure)" == "true" ]]; then
+    export MANTA_TLS_INSECURE=1
+fi
+dstMdir=/$MANTA_USER/stor/$(json -f $CONFIG storage.manta.baseDir)/logs
+
+echo ""
+n=1
+while true; do
+    echo "[$(date '+%Y%m%dT%H%M%S')] upload_files attempt $n (dryrun=$opt_dryrun)"
+    upload_files $opt_dryrun
+    echo "[$(date '+%Y%m%dT%H%M%S')] done upload_files attempt $n"
+    n=$(( $n + 1 ))
+    if [[ $n -gt $opt_numattempts ]]; then
+        break
+    fi
+    sleep 60
+done
+
diff --git a/tools/standalone/tritonpostlogrotate.sh b/tools/standalone/tritonpostlogrotate.sh
new file mode 100755
index 0000000..5049341
--- /dev/null
+++ b/tools/standalone/tritonpostlogrotate.sh
@@ -0,0 +1,135 @@
+#!/usr/bin/bash
+# vi: sw=4 ts=4 et
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright 2016 Joyent, Inc.
+#
+
+if [[ -n "$TRACE" ]]; then
+    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
+    set -o xtrace
+fi
+set -o errexit
+set -o pipefail
+
+
+export PATH=/opt/local/bin:$PATH
+
+SRCDIR=/var/log/triton
+DSTDIR=/var/log/triton/upload
+DATE=/opt/local/bin/date
+
+
+#---- support functions
+
+function fatal() {
+    echo "$0: error: $*" >&2
+    exit 1
+}
+
+function errexit
+{
+    [[ $1 -ne 0 ]] || exit 0
+    fatal "error exit status $1"
+}
+
+
+function usage () {
+    echo "Update a just rotated Triton log file from /var/log/triton to"
+    echo "/var/log/triton/upload."
+    echo ""
+    echo "Requirements:"
+    echo "1. The 'just rotated' log file is expected to be of the form:"
+    echo "       \$logname_\$nodename_YYYYMMDDTHHMMSS.log"
+    echo "2. The '\$logname' cannot contain an underscore."
+    echo ""
+    echo "Usage:"
+    echo "    tritonpostrotatelog.sh [-q] [-f] [-m] LOGNAME"
+    echo ""
+    echo "Options:"
+    echo "     -h   Print this help and exit."
+    echo "     -q   Quiet output."
+    echo "     -m   Move ('mv') rotated files from /var/log/triton/*.log"
+    echo "          to /var/log/triton/upload/*.log, rather than the default"
+    echo "          to hardlink ('ln'). This allows one to delete logs as"
+    echo "          as soon as they are uploaded, e.g. if you never want to"
+    echo "          look at them locally and size is a potential constraint."
+    echo "     -f   Roll the latest rotated log file *forward* to the next"
+    echo "          hour. E.g., '...T091234.log' will be rolled to"
+    echo "          '...T100000.log'. This is to support more-than-once-per-hour"
+    echo "          rotations ending up as one correct hourly log file in"
+    echo "          Manta -- which is needed to not lose log data through a"
+    echo "          'vmadm reprovision'."
+    echo ""
+    echo "Example: 'tritonpostrotatelog.sh imgapi' might rotate this:"
+    echo "    /var/log/triton/imgapi_imagesjo0_20151225T110003.log"
+    echo "to this:"
+    echo "    /var/log/triton/upload/imgapi_imagesjo0_20151225T110000.log"
+}
+
+#---- mainline
+
+trap 'errexit $?' EXIT
+
+# Options.
+opt_verbose=yes
+opt_action=ln
+opt_rolldir=bwd
+while getopts "hqfm" opt
+do
+    case "$opt" in
+        h)
+            usage
+            exit 0
+            ;;
+        q)
+            opt_verbose=
+            ;;
+        f)
+            opt_rolldir=fwd
+            ;;
+        m)
+            opt_action=mv
+            ;;
+        *)
+            usage
+            exit 1
+            ;;
+    esac
+done
+shift $((OPTIND - 1))
+
+logname=$1
+[[ -z "$logname" ]] && fatal "LOGNAME argument not given"
+if [[ -n "$(echo "$logname" | (grep _ || true))" ]]; then
+    fatal "a logname may not contain an underscore: $logname"
+fi
+
+
+lastlog=$(ls -1t /var/log/triton/${logname}_*_????????T??????.log | head -1)
+if [[ "$opt_rolldir" == "bwd" ]]; then
+    base=$(echo $lastlog | cut -d: -f1)   # '/var/log/sdc/upload/$logname...T23'
+    targ=$DSTDIR/$(basename $lastlog | sed -E 's/[0-9][0-9]\.log$/00.log/')
+else
+    # Roll forward.
+    base=$(basename $lastlog | sed -E 's/_[0-9T]+\.log$//')
+    datestr=$(echo $lastlog | awk '{ FS="_"; print $NF }' | cut -d. -f1)
+    isotime=$(echo $datestr | strptime -i '%Y%m%dT%H%M%S' -f '%Y-%m-%dT%H:%M:%S')
+    # Note: GZ /usr/bin/date doesn't support -d.
+    hourfwd=$($DATE -d \@$(( $($DATE -d $isotime "+%s") + 3600 )) "+%Y%m%dT%H0000")
+    targ="$DSTDIR/${base}_${hourfwd}.log"
+fi
+
+[[ -z "$opt_verbose" ]] || echo "$opt_action $lastlog $targ"
+if [[ "$opt_action" == "mv" ]]; then
+    mv $lastlog $targ
+elif [[ "$opt_action" == "ln" ]]; then
+    ln $lastlog $targ
+else
+    fatal "unknown action: $opt_action"
+fi
-- 
2.21.0

