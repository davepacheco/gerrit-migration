From 5642a0cfc298c3024a578d4a9a08bad55e35bda7 Mon Sep 17 00:00:00 2001
From: Trent Mick <trentm@gmail.com>
Date: Fri, 15 Feb 2019 14:27:51 -0800
Subject: [PATCH] TRITON-1236 sdcadm: steps.servers.selectServers for
 convenient -s/-S opt handling, add to 'sdcadm ex update-gz-tools'

---
 CHANGES.md                    |   5 +
 lib/cli/do_update_gz_tools.js | 125 ++++++++++++-------
 lib/steps/servers.js          | 229 +++++++++++++++++++++++++++++++---
 package.json                  |   2 +-
 4 files changed, 295 insertions(+), 66 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index 7e19bbd..3c1196d 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -10,6 +10,11 @@
 
 # sdcadm Changelog
 
+## 1.24.6
+
+- TRITON-1236 steps.servers.selectServers for convenient -s/-S opt handling,
+  add to 'sdcadm ex update-gz-tools'
+
 ## 1.24.5
 
 - TRITON-954 sdcadm post-setup common-external-nics should be rack aware
diff --git a/lib/cli/do_update_gz_tools.js b/lib/cli/do_update_gz_tools.js
index bf93bd4..8baee6f 100644
--- a/lib/cli/do_update_gz_tools.js
+++ b/lib/cli/do_update_gz_tools.js
@@ -5,8 +5,9 @@
  */
 
 /*
- * Copyright 2018 Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
+
 var child_process = require('child_process');
 var exec = child_process.exec;
 var fs = require('fs');
@@ -16,7 +17,6 @@ var format = util.format;
 
 var assert = require('assert-plus');
 var ProgressBar = require('progbar').ProgressBar;
-
 var vasync = require('vasync');
 
 var common = require('../common');
@@ -26,17 +26,21 @@ var ur = require('../ur');
 
 function UpdateGzTools(opts) {
     assert.object(opts, 'opts');
-    assert.object(opts.cli, 'opts.cli');
     assert.object(opts.log, 'opts.log');
     assert.object(opts.sdcadm, 'opts.sdcadm');
     assert.func(opts.progress, 'opts.progress');
     assert.string(opts.uuid, 'opts.uuid');
+    assert.optionalArrayOfString(opts.includeServerNames,
+        'opts.includeServerNames');
+    assert.optionalArrayOfString(opts.excludeServerNames,
+        'opts.excludeServerNames');
 
     this.log = opts.log;
     this.sdcadm = opts.sdcadm;
     this.progress = opts.progress;
     this.uuid = opts.uuid;
-    this.cli = opts.cli;
+    this.includeServerNames = opts.includeServerNames;
+    this.excludeServerNames = opts.excludeServerNames;
 }
 
 UpdateGzTools.prototype.name = 'update-gz-tools';
@@ -64,6 +68,7 @@ UpdateGzTools.prototype.execute = function cExecute(opts, args, callback) {
 
     var self = this;
     var localdir = '/var/tmp';
+    var log = self.log;
     var deleteOnFinish = true;
     var filepath;
     var image;
@@ -393,7 +398,7 @@ UpdateGzTools.prototype.execute = function cExecute(opts, args, callback) {
 
     var context = {
         urconn: null,
-        serversToUpdate: null
+        servers: null
     };
 
     vasync.pipeline({arg: context, funcs: [
@@ -478,6 +483,34 @@ UpdateGzTools.prototype.execute = function cExecute(opts, args, callback) {
             });
         },
 
+        /*
+         * Server selection: Default to all setup servers, then error on
+         * those that are not running. It is up to the operator to explicitly
+         * skip setup servers that aren't running. This means it is more
+         * difficult to accidentally not update part of the fleet of
+         * servers if one happens to be down at the time.
+         */
+        function findServersToUpdate(ctx, next) {
+            if (justDownload) {
+                next();
+                return;
+            }
+            progress('Finding servers to update');
+
+            steps.servers.selectServers({
+                log: log,
+                sdcadm: sdcadm,
+                includeServerNames: self.includeServerNames,
+                excludeServerNames: self.excludeServerNames,
+                // Allow not running servers. We error on them below.
+                allowNotRunning: true
+            }, function selectedServers(err, servers) {
+                ctx.servers = servers;
+                next(err);
+            });
+        },
+        steps.servers.ensureServersRunning,
+
         function downloadTarball(_, next) {
             if (filepath) {
                 progress('Using gz-tools tarball file %s', filepath);
@@ -571,31 +604,6 @@ UpdateGzTools.prototype.execute = function cExecute(opts, args, callback) {
             });
         },
 
-        function findServersToUpdate(ctx, next) {
-            if (justDownload) {
-                next();
-                return;
-            }
-            progress('Finding servers to update');
-            /*
-             * The compute node tools are installed into the ZFS pool, which is
-             * created during compute node setup.  As such, this process does
-             * not currently apply to compute nodes that have not yet been set
-             * up.
-             */
-            sdcadm.cnapi.listServers({
-                setup: true
-            }, function (err, servers) {
-                if (err) {
-                    next(new errors.SDCClientError(err, 'cnapi'));
-                    return;
-                }
-
-                ctx.serversToUpdate = ctx.serversToUpdate || servers;
-                next();
-            });
-        },
-
         function urDiscovery(ctx, next) {
             if (justDownload) {
                 next();
@@ -605,7 +613,7 @@ UpdateGzTools.prototype.execute = function cExecute(opts, args, callback) {
             common.urDiscovery({
                 sdcadm: sdcadm,
                 progress: progress,
-                nodes: ctx.serversToUpdate.map(
+                nodes: ctx.servers.map(
                     function (s) {
                         return s.uuid;
                     }),
@@ -788,12 +796,6 @@ UpdateGzTools.prototype.execute = function cExecute(opts, args, callback) {
 /*
  * The 'sdcadm experimental update-gz-tools' CLI subcommand.
  */
-
-/**
- * This is the temporary quick replacement for incr-upgrade's
- * "upgrade-tools.sh".
- */
-
 function do_update_gz_tools(subcmd, opts, args, cb) {
     var self = this;
     var progress = self.progress;
@@ -837,7 +839,8 @@ function do_update_gz_tools(subcmd, opts, args, cb) {
                 log: self.log,
                 uuid: self.top.uuid,
                 progress: self.progress,
-                cli: self
+                includeServerNames: opts.servers,
+                excludeServerNames: opts.exclude_servers
             });
 
             proc.execute({
@@ -857,6 +860,24 @@ do_update_gz_tools.options = [
         type: 'bool',
         help: 'Show this help.'
     },
+    {
+        names: ['concurrency', 'j'],
+        type: 'integer',
+        'default': 5,
+        help: 'Number of concurrent servers downloading cn_tools file or ' +
+            'being updated simultaneously. Default: 5',
+        helpArg: 'CONCURRENCY'
+    },
+    {
+        group: 'Image options:'
+    },
+    {
+        names: ['channel', 'C'],
+        type: 'string',
+        helpArg: 'CHAN',
+        help: 'Use the given channel to fetch the image, even if it is not ' +
+            'the default one.'
+    },
     {
         names: ['latest'],
         type: 'bool',
@@ -873,20 +894,24 @@ do_update_gz_tools.options = [
         help: 'Download the GZ Tools installer for later usage.'
     },
     {
-        names: ['concurrency', 'j'],
-        type: 'integer',
-        'default': 5,
-        help: 'Number of concurrent servers downloading cn_tools file or ' +
-            'being updated simultaneously. Default: 5',
-        helpArg: 'CONCURRENCY'
+        group: 'Server selection (by default all setup servers are updated)'
     },
     {
-        names: ['channel', 'C'],
-        type: 'string',
-        help: 'Use the given channel to fetch the image, even if it is not ' +
-            'the default one.'
+        names: ['servers', 's'],
+        type: 'arrayOfCommaSepString',
+        helpArg: 'NAMES',
+        help: 'Comma-separated list of servers (either hostnames or uuids) ' +
+            'on which to update cn_tools.'
+    },
+    {
+        names: ['exclude-servers', 'S'],
+        type: 'arrayOfCommaSepString',
+        helpArg: 'NAMES',
+        help: 'Comma-separated list of servers (either hostnames or uuids) ' +
+            'to exclude from cn_tools update.'
     }
 ];
+
 do_update_gz_tools.help = (
     'Temporary grabbag for updating the SDC global zone tools.\n' +
     'The eventual goal is to integrate all of this into "sdcadm update".\n' +
@@ -899,6 +924,10 @@ do_update_gz_tools.help = (
     '{{options}}'
 );
 
+do_update_gz_tools.helpOpts = {
+    maxHelpCol: 25
+};
+
 do_update_gz_tools.logToFile = true;
 
 
diff --git a/lib/steps/servers.js b/lib/steps/servers.js
index 1ff673d..01c745d 100644
--- a/lib/steps/servers.js
+++ b/lib/steps/servers.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  *
  * Steps for doing some things with CNAPI server objects.
  */
@@ -25,8 +25,10 @@ function _cnapiServerFromName(args, cb) {
     assert.object(args.log, 'args.log');
     assert.object(args.sdcadm, 'args.sdcadm');
     assert.string(args.serverName, 'args.serverName');
+    assert.optionalArrayOfString(args.serverExtras, 'args.serverExtras');
     assert.func(cb, 'cb');
 
+
     if (common.UUID_RE.test(args.serverName)) {
         args.sdcadm.cnapi.getServer(args.serverName, function (err, server) {
             if (err) {
@@ -36,9 +38,12 @@ function _cnapiServerFromName(args, cb) {
             }
         });
     } else {
-        args.sdcadm.cnapi.listServers({
-            hostname: args.serverName
-        }, function (err, servers) {
+        var listOpts = {hostname: args.serverName};
+        if (args.serverExtras) {
+            listOpts.extras = args.serverExtras.join(',');
+        }
+
+        args.sdcadm.cnapi.listServers(listOpts, function (err, servers) {
             if (err) {
                 cb(err);
             } else if (servers.length === 0) {
@@ -126,18 +131,19 @@ function serversFromServerNames(args, cb) {
  */
 function ensureServersSetup(args, cb) {
     assert.object(args, 'args');
-    assert.object(args.log, 'args.log');
     assert.arrayOfObject(args.servers, 'args.servers');
     assert.func(cb, 'cb');
 
-    var unsetup = args.servers.filter(function (s) {
-        return (!s.setup);
-    });
+    var unsetup = args.servers
+        .filter(function (s) { return (!s.setup); })
+        .map(function (s) {
+            return util.format('%s (%s)', s.uuid, s.hostname);
+        });
 
     if (unsetup.length) {
         cb(new errors.UsageError(util.format(
-            'The following servers are not setup:\n%s\n' +
-            unsetup.join(', '))));
+            'The following servers are not setup:\n    %s',
+            unsetup.join('\n    '))));
     } else {
         cb();
     }
@@ -150,31 +156,220 @@ function ensureServersSetup(args, cb) {
  */
 function ensureServersRunning(args, cb) {
     assert.object(args, 'args');
-    assert.object(args.log, 'args.log');
     assert.arrayOfObject(args.servers, 'args.servers');
     assert.func(cb, 'cb');
 
-    var notRunning = args.servers.filter(function (s) {
-        return (s.status !== 'running' || s.transitional_status !== '');
-    });
+    var notRunning = args.servers
+        .filter(function (s) {
+            return (s.status !== 'running' || s.transitional_status !== '');
+        })
+        .map(function (s) {
+            return util.format('%s (%s)', s.uuid, s.hostname);
+        });
 
     if (notRunning.length) {
         cb(new errors.UsageError(util.format(
-            'The following servers are not running:\n%s\n' +
-            notRunning.join(', '))));
+            'The following servers are not running:\n    %s',
+            notRunning.join('\n    '))));
     } else {
         cb();
     }
 }
 
 
+/**
+ * Select a set of servers and return an array of the selected CNAPI server
+ * objects.
+ *
+ * Dev Note: This isn't in the "step" form where it sets its response on
+ * the given `args` object. Because it takes so many (optional) arguments,
+ * I feel that is messy. Granted it is also slightly messy to have a non-step
+ * export in "lib/steps/$name.js".
+ *
+ * If called without arguments, this will return all running and setup
+ * servers in CNAPI (i.e. in the datacenter). The optional args can be used
+ * to tweak that. If after `includeServerNames` and `excludeServerNames`
+ * are used to determine a server set, it is an error if any of those
+ * servers are not setup (unless `allowNotSetup=true`) or not running (unless
+ * `allowNotRunning`).
+ *
+ * @param {Bunyan Logger} args.log: Required.
+ * @param {SdcAdm} args.sdcadm: Required.
+ * @param {Array} args.includeServerNames: An array of server names (UUID or
+ *      hostname) to include in the results. Commonly this is associated with
+ *      a `-s=NAMES, --servers=NAMES` CLI option.
+ * @param {Array} args.excludeServerNames: An array of server names (UUID or
+ *      hostname) to exclude from the results. Commonly this is associated with
+ *      a `-S=NAMES, --exclude-servers=NAMES` CLI option.
+ * @param {Boolean} args.allowNotSetup: If true, allow inclusion of servers
+ *      that are not yet setup.
+ * @param {Boolean} args.allowNotRunning: If true, allow inclusion of servers
+ *      that are not running.
+ * @param {Boolean} args.allowEmpty: If true, allow the resulting set of
+ *      servers to be empty. If false or not given, it is an error if no
+ *      servers meet the criteria.
+ * @param {Array} args.serverExtras: Strings to pass to any CNAPI ServerList
+ *      calls as the 'extras' param to ensure those fields are included on the
+ *      returned server objects.
+ * @param {Function} cb: `function (err)`. Required. If successful,
+ *      `args.servers` is set an array of CNAPI server objects for the
+ *      selected servers.
+ */
+function selectServers(args, cb) {
+    assert.object(args, 'args');
+    assert.object(args.log, 'args.log');
+    assert.object(args.sdcadm, 'args.sdcadm');
+    assert.optionalArrayOfString(args.includeServerNames,
+        'args.includeServerNames');
+    assert.optionalArrayOfString(args.excludeServerNames,
+        'args.excludeServerNames');
+    assert.optionalBool(args.allowNotSetup, 'args.allowNotSetup');
+    assert.optionalBool(args.allowNotRunning, 'args.allowNotRunning');
+    assert.optionalBool(args.allowEmpty, 'args.allowEmpty');
+    assert.optionalArrayOfString(args.serverExtras, 'args.serverExtras');
+    assert.func(cb, 'cb');
+
+    var servers;
+
+    vasync.pipeline({funcs: [
+        // If no includeServerNames, then list all servers (per setup and
+        // running settings).
+        function getAllServersIfNecessary(_, next) {
+            if (args.includeServerNames) {
+                next();
+                return;
+            }
+
+            var listOpts = {};
+            if (args.serverExtras) {
+                listOpts.extras = args.serverExtras.join(',');
+            }
+            if (!args.allowNotSetup) {
+                listOpts.setup = true;
+            }
+            args.sdcadm.cnapi.listServers(listOpts, function (err, svrs, res) {
+                if (err) {
+                    next(new errors.SDCClientError(err, 'cnapi'));
+                    return;
+                }
+
+                if (!args.allowNotRunning) {
+                    svrs = svrs.filter(
+                        function oneS(s) { return s.status === 'running'; });
+                }
+
+                servers = svrs;
+                next();
+            });
+        },
+
+        // Otherwise, GetServer for each included server name.
+        function resolveIncludedServerNames(_, next) {
+            if (!args.includeServerNames) {
+                next();
+                return;
+            }
+
+            servers = [];
+
+            // Note: We are assuming the number in parallel here isn't huge.
+            vasync.forEachParallel({
+                inputs: args.includeServerNames,
+                func: function resolveOneServer(serverName, nextServer) {
+                    _cnapiServerFromName({
+                        log: args.log,
+                        sdcadm: args.sdcadm,
+                        serverName: serverName,
+                        serverExtras: args.serverExtras
+                    }, function (err, server) {
+                        if (server) {
+                            servers.push(server);
+                        }
+                        nextServer(err);
+                    });
+                }
+            }, function (err) {
+                next(err);
+            });
+        },
+
+        function filterOutExcludeServerNames(_, next) {
+            if (!args.excludeServerNames) {
+                next();
+                return;
+            }
+
+            var names = {};
+            for (let name of args.excludeServerNames) {
+                names[name] = true;
+            }
+
+            var filteredServers = [];
+            for (let server of servers) {
+                if (!names[server.uuid] && !names[server.hostname]) {
+                    filteredServers.push(server);
+                }
+            }
+
+            servers = filteredServers;
+            next();
+        },
+
+        // Check setup and running status per allowNotRunning & allowNotSetup
+        function checkSetupIfNecessary(_, next) {
+            if (args.allowNotSetup) {
+                next();
+            } else {
+                ensureServersSetup({servers: servers}, next);
+            }
+        },
+        function checkRunningIfNecessary(_, next) {
+            if (args.allowNotRunning) {
+                next();
+            } else {
+                ensureServersRunning({servers: servers}, next);
+            }
+        },
+
+        // Check not empty.
+        function checkNotEmptyIfNecessary(_, next) {
+            if (args.allowEmpty || servers.length > 0) {
+                next();
+            } else {
+                var details = [];
+                if (!args.allowNotSetup) {
+                    details.push('setup');
+                }
+                if (!args.allowNotRunning) {
+                    details.push('running');
+                }
+                if (args.includeServerNames) {
+                    details.push('including ' +
+                        args.includeServerNames.join(','));
+                }
+                if (args.excludeServerNames) {
+                    details.push('excluding ' +
+                        args.excludeServerNames.join(','));
+                }
+                next(new errors.UsageError(
+                    'No servers matching criteria were found: ' +
+                    details.join('; ')));
+            }
+        }
+    ]}, function finish(err) {
+        cb(err, servers);
+    });
+}
+
+
 // --- exports
 
 module.exports = {
     serverFromServerName: serverFromServerName,
     serversFromServerNames: serversFromServerNames,
     ensureServersSetup: ensureServersSetup,
-    ensureServersRunning: ensureServersRunning
+    ensureServersRunning: ensureServersRunning,
+    selectServers: selectServers
 };
 
 // vim: set softtabstop=4 shiftwidth=4:
diff --git a/package.json b/package.json
index e8ee531..523b192 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "sdcadm",
   "description": "Administer a SmartDataCenter (SDC) standup",
-  "version": "1.24.5",
+  "version": "1.24.6",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
-- 
2.21.0

