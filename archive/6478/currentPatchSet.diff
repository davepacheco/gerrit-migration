commit f5cbe45da8d4cb4585596cd8c2321a343340fc29
Author: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
Date:   2019-06-20T08:57:22-06:00 (4 months ago)
    
    MANTA-4363 Add object update function to electric-boray

diff --git a/lib/dtrace.js b/lib/dtrace.js
index f9d449c..f804ade 100644
--- a/lib/dtrace.js
+++ b/lib/dtrace.js
@@ -51,6 +51,12 @@ var PROBES = {
     // msgid
     'createobject-done': ['int'],
 
+    // msgid, req_id, owner, bucket, key
+    'updateobject-start': ['int', 'char *', 'char *', 'char *', 'char *'],
+
+    // msgid
+    'updateobject-done': ['int'],
+
     // msgid, req_id, owner, bucket, key
     'getobject-start': ['int', 'char *', 'char *', 'char *', 'char *'],
 
diff --git a/lib/server.js b/lib/server.js
index 41792ba..01b9ec3 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -74,6 +74,16 @@ var CO_ARGS_SCHEMA = [
     { name: 'properties', type: 'object' }
 ];
 
+var UO_ARGS_SCHEMA = [
+    { name: 'owner', type: 'string' },
+    { name: 'bucket_id', type: 'string' },
+    { name: 'name', type: 'string' },
+    { name: 'object_id', type: 'string' },
+    { name: 'content_type', type: 'string' },
+    { name: 'headers', type: 'object' },
+    { name: 'properties', type: 'object' }
+];
+
 var LO_ARGS_SCHEMA = [
     { name: 'owner', type: 'string' },
     { name: 'bucket_id', type: 'string' },
@@ -305,6 +315,7 @@ function createServer(options, callback) {
                 { rpcmethod: 'listbuckets', rpchandler: listBuckets(opts) },
                 { rpcmethod: 'getobject', rpchandler: getObject(opts) },
                 { rpcmethod: 'createobject', rpchandler: createObject(opts) },
+                { rpcmethod: 'updateobject', rpchandler: updateObject(opts) },
                 { rpcmethod: 'deleteobject', rpchandler: deleteObject(opts) },
                 { rpcmethod: 'listobjects', rpchandler: listObjects(opts) }
             ];
@@ -855,6 +866,90 @@ function createObject(options) {
 }
 
 
+function updateObject(options) {
+    assert.object(options, 'options');
+    assert.object(options.log, 'options.log');
+    assert.object(options.clients, 'options.clients');
+
+    function _updateObject(rpc) {
+        var msgid = rpc.requestId();
+        var argv = rpc.argv();
+
+        if (invalidArgs(rpc, argv, UO_ARGS_SCHEMA)) {
+            return;
+        }
+
+        var owner = argv[0];
+        var bucket = argv[1];
+        var key = argv[2];
+        var object_id = argv[3];
+        var content_type = argv[4];
+        var headers = argv[5];
+        var props = argv[6];
+
+        var id = options.req_id || uuid.v1();
+
+        dtrace['updateobject-start'].fire(function () {
+            return ([msgid, id, owner, bucket, key]);
+        });
+
+        var log = options.log.child({
+            req_id: id
+        });
+
+        log.debug({
+            owner: owner,
+            bucket: bucket,
+            key: key,
+            id: object_id
+        }, 'updateObject: entered');
+
+        options.dataDirector.getObjectLocation(owner, bucket, key,
+            function (err, location) {
+            if (err) {
+                rpc.fail(err);
+                return;
+            }
+
+            var vnode = location.vnode;
+            var pnode = location.pnode;
+            var client = options.clients.map[pnode];
+
+            if (props.constructor === Object &&
+                Object.keys(props).length === 0) {
+
+                props = null;
+            }
+
+            client.updateObject(owner, bucket, key, object_id, content_type,
+                headers, props, vnode, function (pErr, obj) {
+
+                log.debug({
+                    err: pErr,
+                    obj: obj
+                }, 'updateObject: returned');
+
+                dtrace['updateobject-done'].fire(function () {
+                    return ([msgid]);
+                });
+
+                if (pErr) {
+                    rpc.fail(pErr);
+                } else {
+                    // Add shard information to the response.
+                    obj._node = location;
+
+                    rpc.write(obj);
+                    rpc.end();
+                }
+            });
+        });
+    }
+
+    return _updateObject;
+}
+
+
 function getObject(options) {
     assert.object(options, 'options');
     assert.object(options.log, 'options.log');
