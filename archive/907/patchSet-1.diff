From 5292c202f0b98e461e824f82a479ece9ea7dfb05 Mon Sep 17 00:00:00 2001
From: David Pacheco <dap@joyent.com>
Date: Wed, 16 Nov 2016 09:56:53 -0800
Subject: [PATCH] joyent/node-verror#47 could use VError.hasCauseWithName()

---
 CHANGES.md            |   4 ++
 README.md             |  10 ++++
 lib/verror.js         |   7 ++-
 package.json          |   2 +-
 test/tst.findcause.js | 105 ++++++++++++++++++++++++++++++++++++++++++
 5 files changed, 126 insertions(+), 2 deletions(-)
 create mode 100644 test/tst.findcause.js

diff --git a/CHANGES.md b/CHANGES.md
index 4243832..4eb3d6d 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -4,6 +4,10 @@
 
 None yet.
 
+## v1.9.0
+
+* #47 could use VError.hasCauseWithName()
+
 ## v1.8.1
 
 * #39 captureStackTrace lost when inheriting from WError
diff --git a/README.md b/README.md
index fdf87e2..d27603b 100644
--- a/README.md
+++ b/README.md
@@ -325,10 +325,20 @@ The `findCauseByName()` function traverses the cause chain for `err`, looking
 for an error whose `name` property matches the passed in `name` value. If no
 match is found, `null` is returned.
 
+If all you want is to know _whether_ there's a cause (and you don't care what it
+is), you can use `VError.hasCauseWithName(err, name)`.
+
 If a vanilla error or a non-VError error is passed in, then there is no cause
 chain to traverse. In this scenario, the function will check the `name`
 property of only `err`.
 
+### `VError.hasCauseWithName(err, name)`
+
+Returns true if and only if `VError.findCauseByName(err, name)` would return
+a non-null value.  This essentially determines whether `err` has any cause in
+its cause chain that has name `name`.
+
+
 ## Examples
 
 The "Demo" section above covers several basic cases.  Here's a more advanced
diff --git a/lib/verror.js b/lib/verror.js
index 702f2fe..4e93e55 100644
--- a/lib/verror.js
+++ b/lib/verror.js
@@ -275,7 +275,7 @@ VError.findCauseByName = function (err, name)
 	var cause;
 
 	mod_assertplus.ok(mod_isError(err), 'err must be an Error');
-	mod_assertplus.string(name);
+	mod_assertplus.string(name, 'name');
 	mod_assertplus.ok(name.length > 0, 'name cannot be empty');
 
 	for (cause = err; cause !== null; cause = VError.cause(cause)) {
@@ -288,6 +288,11 @@ VError.findCauseByName = function (err, name)
 	return (null);
 };
 
+VError.hasCauseWithName = function (err, name)
+{
+	return (VError.findCauseByName(err, name) !== null);
+};
+
 VError.fullStack = function (err)
 {
 	mod_assertplus.ok(mod_isError(err), 'err must be an Error');
diff --git a/package.json b/package.json
index 89a539e..ba3d961 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
 	"name": "verror",
-	"version": "1.8.1",
+	"version": "1.9.0",
 	"description": "richer JavaScript errors",
 	"main": "./lib/verror.js",
 	"repository": {
diff --git a/test/tst.findcause.js b/test/tst.findcause.js
new file mode 100644
index 0000000..e3c1369
--- /dev/null
+++ b/test/tst.findcause.js
@@ -0,0 +1,105 @@
+/*
+ * tst.findcause.js: tests findCauseByName()/hasCauseWithName().
+ */
+
+var mod_assert = require('assert');
+var mod_util = require('util');
+var mod_verror = require('../lib/verror');
+
+var SError = mod_verror.SError;
+var VError = mod_verror.VError;
+var WError = mod_verror.WError;
+
+var findCauseByName = VError.findCauseByName;
+var hasCauseWithName = VError.hasCauseWithName;
+
+/*
+ * This class deliberately doesn't inherit from our error classes.
+ */
+function MyError()
+{
+	Error.call(this, 'here is my error');
+}
+
+mod_util.inherits(MyError, Error);
+MyError.prototype.name = 'MyError';
+
+
+function main()
+{
+	/*
+	 * We'll build up a cause chain using each of our classes and make sure
+	 * that findCauseByName() traverses all the way to the bottom.  This
+	 * ends up testing that findCauseByName() works with each of these
+	 * classes.
+	 */
+	var err1, err2, err3, err4;
+
+	err1 = new MyError();
+	err2 = new VError({
+	    'name': 'ErrorTwo',
+	    'cause': err1
+	}, 'basic verror (number two)');
+	err3 = new SError({
+	    'name': 'ErrorThree',
+	    'cause': err2
+	}, 'strict error (number three)');
+	err4 = new WError({
+	    'name': 'ErrorFour',
+	    'cause': err3
+	}, 'werror (number four)');
+
+	/*
+	 * Our top-level error should have all of the causes in its chain.
+	 */
+	mod_assert.strictEqual(err4, findCauseByName(err4, 'ErrorFour'));
+	mod_assert.strictEqual(true, hasCauseWithName(err4, 'ErrorFour'));
+	mod_assert.strictEqual(err3, findCauseByName(err4, 'ErrorThree'));
+	mod_assert.strictEqual(true, hasCauseWithName(err4, 'ErrorThree'));
+	mod_assert.strictEqual(err2, findCauseByName(err4, 'ErrorTwo'));
+	mod_assert.strictEqual(true, hasCauseWithName(err4, 'ErrorTwo'));
+	mod_assert.strictEqual(err1, findCauseByName(err4, 'MyError'));
+	mod_assert.strictEqual(true, hasCauseWithName(err4, 'MyError'));
+
+	/*
+	 * By contrast, the second-level error should have only its own causes.
+	 */
+	mod_assert.strictEqual(null, findCauseByName(err2, 'ErrorFour'));
+	mod_assert.strictEqual(false, hasCauseWithName(err2, 'ErrorFour'));
+	mod_assert.strictEqual(null, findCauseByName(err2, 'ErrorThree'));
+	mod_assert.strictEqual(false, hasCauseWithName(err2, 'ErrorThree'));
+	mod_assert.strictEqual(err2, findCauseByName(err2, 'ErrorTwo'));
+	mod_assert.strictEqual(true, hasCauseWithName(err2, 'ErrorTwo'));
+	mod_assert.strictEqual(err1, findCauseByName(err2, 'MyError'));
+	mod_assert.strictEqual(true, hasCauseWithName(err2, 'MyError'));
+
+	/*
+	 * These functions must work on non-VError errors.
+	 */
+	mod_assert.strictEqual(err1, findCauseByName(err1, 'MyError'));
+	mod_assert.strictEqual(true, hasCauseWithName(err1, 'MyError'));
+	mod_assert.strictEqual(null, findCauseByName(err1, 'ErrorTwo'));
+	mod_assert.strictEqual(false, hasCauseWithName(err1, 'ErrorTwo'));
+
+	err1 = new Error('a very basic error');
+	mod_assert.strictEqual(err1, findCauseByName(err1, 'Error'));
+	mod_assert.strictEqual(true, hasCauseWithName(err1, 'Error'));
+	mod_assert.strictEqual(null, findCauseByName(err1, 'MyError'));
+	mod_assert.strictEqual(false, hasCauseWithName(err1, 'MyError'));
+
+	/*
+	 * These functions should throw an Error when given bad argument types.
+	 */
+	mod_assert.throws(function () { findCauseByName(null, 'AnError'); },
+	    /err must be an Error/);
+	mod_assert.throws(function () { hasCauseWithName(null, 'AnError'); },
+	    /err must be an Error/);
+	mod_assert.throws(function () { findCauseByName(err1, null); },
+	    /string.*is required/);
+	mod_assert.throws(function () { hasCauseWithName(err1, null); },
+	    /string.*is required/);
+
+	console.error('test passed');
+}
+
+main();
-- 
2.21.0

