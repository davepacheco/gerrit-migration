From 23726707c96d8370bff013960563e8ac33dbe8ba Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Tue, 24 Jul 2018 17:29:41 -0700
Subject: [PATCH] joyent/node-cueball#144 slot failure immediately after
 removal from resolver leads to sadness Reviewed by: Cody Peter Mello
 <cody.mello@joyent.com> Reviewed by: Nick Zivkovic <nick.zivkovic@joyent.com>
 Approved by: Cody Peter Mello <cody.mello@joyent.com>

---
 CHANGES.adoc      |  8 +++++
 lib/pool.js       |  7 ++++-
 package.json      |  2 +-
 test/pool.test.js | 74 +++++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 89 insertions(+), 2 deletions(-)

diff --git a/CHANGES.adoc b/CHANGES.adoc
index 47caba2..5fa31c6 100644
--- a/CHANGES.adoc
+++ b/CHANGES.adoc
@@ -6,6 +6,14 @@ toc::[]
 
 ## v2.x
 
+### v2.7.1
+
+Maintenance release.
+
+Bugs fixed:
+
+ - #144 slot failure immediately after removal from resolver leads to sadness
+
 ### v2.7.0
 
 New minor release, due to addition of new API. The v2.6.0 release was
diff --git a/lib/pool.js b/lib/pool.js
index 86e5f77..b024514 100644
--- a/lib/pool.js
+++ b/lib/pool.js
@@ -705,7 +705,12 @@ CueBallConnectionPool.prototype.addConnection = function (key) {
 		}
 
 		if (newState === 'failed') {
-			self.p_dead[key] = true;
+			/*
+			 * Don't add a "dead" marking if the backend has
+			 * been removed from the resolver.
+			 */
+			if (self.p_backends[key] !== undefined)
+				self.p_dead[key] = true;
 
 			var err = fsm.getSocketMgr().getLastError();
 			if (err !== undefined)
diff --git a/package.json b/package.json
index c5de4bb..74112d5 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "cueball",
-  "version": "2.7.0",
+  "version": "2.7.1",
   "description": "manage a pool of connections to a multi-node service where nodes are listed in DNS",
   "main": "lib/index.js",
   "dependencies": {
diff --git a/test/pool.test.js b/test/pool.test.js
index d743234..b110706 100644
--- a/test/pool.test.js
+++ b/test/pool.test.js
@@ -965,6 +965,80 @@ mod_tape.test('cueball#132 getStats()', function (t) {
 	});
 });
 
+mod_tape.test('backend failure/removal race (#144)', function (t) {
+	connections = [];
+	resolver = undefined;
+
+	var timer;
+	recovery.default.retries = 2;
+	var pool = new mod_pool.ConnectionPool({
+		log: log,
+		domain: 'foobar',
+		spares: 2,
+		maximum: 2,
+		constructor: function (backend) {
+			return (new DummyConnection(backend));
+		},
+		recovery: recovery
+	});
+	t.ok(resolver);
+
+	pool.on('stateChanged', function (st) {
+		if (st === 'stopped') {
+			if (timer !== undefined)
+				clearTimeout(timer);
+			t.end();
+		}
+	});
+
+	resolver.emit('added', 'b1', {});
+	resolver.emit('added', 'b2', {});
+	setImmediate(function () {
+		t.equal(connections.length, 2);
+		summarize();
+		t.deepEqual(counts, { 'b1': 1, 'b2': 1 });
+
+		index.b1[0].connect();
+		index.b2[0].connect();
+
+		setTimeout(function () {
+			t.ok(pool.isInState('running'));
+
+			t.equal(connections.length, 2);
+			summarize();
+			index.b1[0].emit('error', new Error('test'));
+			index.b2[0].emit('error', new Error('test'));
+
+			setTimeout(function () {
+				t.ok(pool.isInState('running'));
+				t.strictEqual(pool.getLastError(), undefined);
+
+				t.equal(connections.length, 2);
+				summarize();
+
+				resolver.emit('removed', 'b2');
+
+				index.b1[0].emit('error', new Error('test2'));
+				index.b2[0].emit('error', new Error('test2'));
+
+				setTimeout(function () {
+					t.ok(pool.isInState('failed'));
+
+					t.deepEqual(pool.p_keys, ['b1']);
+					t.deepEqual(pool.p_dead,
+					    { 'b1': true });
+
+					pool.stop();
+					/* Stop tape from giving up. */
+					timer = setTimeout(function () {},
+					    5000);
+				}, 100);
+			}, 100);
+		}, 100);
+	});
+});
+
+
 mod_tape.test('cleanup sandbox', function (t) {
 	sandbox.restore();
 	t.end();
-- 
2.21.0

