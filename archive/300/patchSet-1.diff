From 04f201ee0088bb214e94294cd649f7db28255788 Mon Sep 17 00:00:00 2001
From: David Pacheco <dap@joyent.com>
Date: Tue, 16 Aug 2016 14:11:54 -0700
Subject: [PATCH] joyent/node-verror#41 fullStack() test for werror fails on
 Node 0.10 joyent/node-verror#39 captureStackTrace lost when inheriting from
 WError

---
 CHANGES.md          |  1 +
 lib/verror.js       | 13 ++-----------
 test/tst.inherit.js | 29 ++++++++++++++++++++++++++---
 test/tst.werror.js  | 13 ++++++++++---
 4 files changed, 39 insertions(+), 17 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index c2a1c4f..d324220 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -3,6 +3,7 @@
 ## Not yet released
 
 * #23 Preserve original stack trace(s)
+* #39 captureStackTrace lost when inheriting from WError
 
 ## v1.7.0
 
diff --git a/lib/verror.js b/lib/verror.js
index 013ca26..702f2fe 100644
--- a/lib/verror.js
+++ b/lib/verror.js
@@ -203,7 +203,7 @@ function VError()
 	Error.call(this, message);
 
 	if (Error.captureStackTrace) {
-		ctor = parsed.options.constructorOpt || arguments.callee;
+		ctor = parsed.options.constructorOpt || this.constructor;
 		Error.captureStackTrace(this, ctor);
 	}
 
@@ -323,10 +323,6 @@ function SError()
 	});
 
 	options = parsed.options;
-	if (!options.hasOwnProperty('constructorOpt')) {
-		options['constructorOpt'] = SError;
-	}
-
 	VError.call(this, options, '%s', parsed.shortmessage);
 
 	return (this);
@@ -352,8 +348,7 @@ function MultiError(errors)
 	this.ase_errors = errors;
 
 	VError.call(this, {
-	    'cause': errors[0],
-	    'constructorOpt': MultiError
+	    'cause': errors[0]
 	}, 'first of %d error%s', errors.length, errors.length == 1 ? '' : 's');
 }
 
@@ -387,10 +382,6 @@ function WError()
 
 	options = parsed.options;
 	options['skipCauseMessage'] = true;
-	if (!options.hasOwnProperty('constructorOpt')) {
-		options['constructorOpt'] = WError;
-	}
-
 	VError.call(this, options, '%s', parsed.shortmessage);
 
 	return (this);
diff --git a/test/tst.inherit.js b/test/tst.inherit.js
index 999936a..d955ce3 100644
--- a/test/tst.inherit.js
+++ b/test/tst.inherit.js
@@ -8,7 +8,7 @@ var mod_testcommon = require('./common');
 
 var VError = require('../lib/verror');
 var WError = VError.WError;
-var err, suberr;
+var err, suberr, stack, nodestack;
 
 function VErrorChild()
 {
@@ -27,6 +27,14 @@ function WErrorChild()
 mod_util.inherits(WErrorChild, WError);
 WErrorChild.prototype.name = 'WErrorChild';
 
+/*
+ * Save the generic parts of all stack traces so we can avoid hardcoding
+ * Node-specific implementation details in our testing of stack traces.
+ * The stack trace limit has to be large enough to capture all of Node's frames,
+ * which are more than the default (10 frames) in Node v6.x.
+ */
+Error.stackTraceLimit = 20;
+nodestack = new Error().stack.split('\n').slice(2).join('\n');
 
 suberr = new Error('root cause');
 err = new VErrorChild(suberr, 'top');
@@ -36,7 +44,12 @@ mod_assert.ok(err instanceof VErrorChild);
 mod_assert.equal(err.cause(), suberr);
 mod_assert.equal(err.message, 'top: root cause');
 mod_assert.equal(err.toString(), 'VErrorChild: top: root cause');
-mod_assert.equal(err.stack.split('\n')[0], 'VErrorChild: top: root cause');
+stack = mod_testcommon.cleanStack(err.stack);
+mod_assert.equal(stack, [
+    'VErrorChild: top: root cause',
+    '    at Object.<anonymous> (dummy filename)',
+    nodestack
+].join('\n'));
 
 suberr = new Error('root cause');
 err = new WErrorChild(suberr, 'top');
@@ -47,6 +60,7 @@ mod_assert.equal(err.cause(), suberr);
 mod_assert.equal(err.message, 'top');
 mod_assert.equal(err.toString(),
 	'WErrorChild: top; caused by Error: root cause');
+stack = mod_testcommon.cleanStack(err.stack);
 
 /*
  * On Node 0.10 and earlier, the 'stack' property appears to use the error's
@@ -59,9 +73,18 @@ mod_assert.equal(err.toString(),
 if (mod_testcommon.oldNode()) {
 	mod_assert.equal(err.stack.split('\n')[0],
 	    'WErrorChild: top; caused by Error: root cause');
+	mod_assert.equal(stack, [
+	    'WErrorChild: top; caused by Error: root cause',
+	    '    at Object.<anonymous> (dummy filename)',
+	    nodestack
+	].join('\n'));
 } else {
 	mod_assert.equal(err.stack.split('\n')[0], 'WErrorChild: top');
-
+	mod_assert.equal(stack, [
+	    'WErrorChild: top',
+	    '    at Object.<anonymous> (dummy filename)',
+	    nodestack
+	].join('\n'));
 }
 
 /*
diff --git a/test/tst.werror.js b/test/tst.werror.js
index 9d7f208..fdba685 100644
--- a/test/tst.werror.js
+++ b/test/tst.werror.js
@@ -20,7 +20,7 @@ var nodestack = new Error().stack.split('\n').slice(2).join('\n');
 
 function main()
 {
-	var err, suberr, stack, stackmessage;
+	var err, suberr, stack, stackmessage, stackmessage2;
 
 	/*
 	 * Most of the test cases here have analogs in tst.common.js.  In this
@@ -127,12 +127,19 @@ function main()
 	suberr = new WError(new Error('root cause'), 'mid');
 	err = new WError(suberr, 'top');
 	stack = mod_testcommon.cleanStack(VError.fullStack(err));
+	/* See the comment in tst.inherit.js. */
+	stackmessage2 = mod_testcommon.oldNode() ?
+	    'WError: mid; caused by Error: root cause' :
+	    'WError: mid';
+	stackmessage = mod_testcommon.oldNode() ?
+	    'WError: top; caused by ' + stackmessage2 :
+	    'WError: top';
 	mod_assert.equal(stack, [
-		'WError: top',
+		stackmessage,
 		'    at main (dummy filename)',
 		'    at Object.<anonymous> (dummy filename)'
 	].join('\n') + '\n' + nodestack + '\n' + [
-		'caused by: WError: mid',
+		'caused by: ' + stackmessage2,
 		'    at main (dummy filename)',
 		'    at Object.<anonymous> (dummy filename)'
 	].join('\n') + '\n' + nodestack + '\n' + [
-- 
2.21.0

