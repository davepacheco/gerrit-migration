From 72935a818ddf223034a967b525b0a233e15d7474 Mon Sep 17 00:00:00 2001
From: Jenkins Agent <jenkins-agent@joyent.com>
Date: Tue, 18 Jun 2019 16:47:36 +0100
Subject: [PATCH] MANTA-3525 Muppet should handle haproxy config changes
 without restarting haproxy

---
 .gitmodules                    |   8 +--
 README.md                      |   6 +-
 deps/haproxy-1.5               |   1 -
 deps/haproxy-1.8               |   1 +
 docs/index.md                  |  32 ++++-----
 etc/haproxy.cfg.default        |   6 +-
 etc/haproxy.cfg.in             |   6 +-
 lib/index.js                   |   2 +-
 lib/lb_manager.js              | 117 +++++++++++++++------------------
 muppet.js                      |   8 +--
 smf/manifests/haproxy.xml.in   |   2 +
 test/config.test.js            |  36 +++++-----
 tools/mk/Makefile.haproxy.defs |   4 +-
 13 files changed, 115 insertions(+), 114 deletions(-)
 delete mode 160000 deps/haproxy-1.5
 create mode 160000 deps/haproxy-1.8

diff --git a/.gitmodules b/.gitmodules
index 61d8a53..198ac31 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -10,10 +10,10 @@
 [submodule "deps/manta-scripts"]
 	path = deps/manta-scripts
 	url = https://github.com/joyent/manta-scripts.git
-[submodule "deps/haproxy-1.5"]
-	path = deps/haproxy-1.5
-	url = https://github.com/joyent/haproxy-1.5.git
-	branch = joyent/v1.5.19
+[submodule "deps/haproxy-1.8"]
+	path = deps/haproxy-1.8
+	url = https://github.com/joyent/haproxy-1.8.git
+	branch = joyent/dev-v1.8.8
 [submodule "deps/eng"]
 	path = deps/eng
 	url = https://github.com/joyent/eng.git
diff --git a/README.md b/README.md
index e31fb65..92c61bb 100644
--- a/README.md
+++ b/README.md
@@ -5,7 +5,7 @@
 -->
 
 <!--
-    Copyright (c) 2014, Joyent, Inc.
+    Copyright 2019, Joyent, Inc.
 -->
 
 # muppet
@@ -34,9 +34,9 @@ pkgsrc:
 - haproxy
 
 Though the version of haproxy might differ from the running `loadbalancer` zone,
-it is simply used to check that haproxy can properly parse the resulting
+it is used to check that haproxy can properly parse the resulting
 `haproxy.cfg` files generated in the tests.
 
 ## Running the Tests
 
-Then to run the tests, simply run `make test`
+Then to run the tests, run `make test`
diff --git a/deps/haproxy-1.5 b/deps/haproxy-1.5
deleted file mode 160000
index 836df3b..0000000
--- a/deps/haproxy-1.5
+++ /dev/null
@@ -1 +0,0 @@
-Subproject commit 836df3bc832e572c42e2618fcb1a10a81d63df3c
diff --git a/deps/haproxy-1.8 b/deps/haproxy-1.8
new file mode 160000
index 0000000..7c46751
--- /dev/null
+++ b/deps/haproxy-1.8
@@ -0,0 +1 @@
+Subproject commit 7c46751ac9ccc41610c35680bf4bd541981fb1aa
diff --git a/docs/index.md b/docs/index.md
index 86a7876..17b1cff 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -10,7 +10,7 @@ apisections:
 -->
 
 <!--
-    Copyright (c) 2014, Joyent, Inc.
+    Copyright 2019, Joyent, Inc.
 -->
 
 # tl;dr
@@ -27,9 +27,9 @@ can create a loadbalancer configuration (see below) that fronts your backend
 servers.
 
 In manta at least, all configuration of the load balancer is automatically
-managed by the muppet service, which watches for registrar changes in
-ZooKeeper.  This simply updates the upstream server list of IP addresses
-and restarts the loadbalancer service (not gracefully...).
+managed by the muppet service, which watches for registrar changes in ZooKeeper.
+This updates the upstream server list of IP addresses and refreshes the haproxy
+loadbalancer service.
 
 # Configuration
 
@@ -170,18 +170,18 @@ Run this command:
 
 ## Load Balancer
 
-The loadbalancer used is just [HAProxy](http://haproxy.1wt.eu/), but with a
-[patch from openwrt](https://dev.openwrt.org/) that lets us get the "real"
-client IP address into the `x-forwarded-for` header.  There is an
-`haproxy.cfg.in` file that is templated with a sparse number of `%s`; this
-file is used to generate a new haproxy.cfg each time the topology of online
-loadbalancers changes.
-
-*Important:* Checked into this repo is a "blank" haproxy.cfg - *DO NOT EDIT
-THIS FILE!*.  That file is used as a syntactically correct, but empty
-haproxy.cfg file that we use to bootstrap haproxy _before_ muppet is running.
-Any changes you want to see made to haproxy.cfg must be made in the template
-file, as that's what you really care about.
+The loadbalancer used is [HAProxy](http://www.haproxy.org/), but a [fork
+maintained by Joyent](https://github.com/joyent/haproxy-1.8), with a patch to
+use Event Ports. There is an `haproxy.cfg.in` file that is templated with a
+sparse number of `%s`; this file is used to generate a new haproxy.cfg each time
+the topology of online loadbalancers changes.
+
+*Important:* Checked into this repo is a "blank" haproxy.cfg.default - *DO NOT
+EDIT THIS FILE!*, except in the case you need the default behaviour to change.
+That file is used as a syntactically correct, but empty haproxy.cfg file that we
+use to bootstrap haproxy _before_ muppet is running.  Any changes you want to
+see made to haproxy.cfg must be made in the template file, as that's what you
+really care about.
 
 ## Muppet
 
diff --git a/etc/haproxy.cfg.default b/etc/haproxy.cfg.default
index 531309a..494a958 100644
--- a/etc/haproxy.cfg.default
+++ b/etc/haproxy.cfg.default
@@ -1,11 +1,15 @@
 global
+        # have haproxy launch a worker process, SMF monitors the master, part of
+        # seamless config reload (via SMF refresh method)
+        master-worker
         log 127.0.0.1 local0
         user nobody
         group nobody
         daemon
         maxconn 65535
         pidfile /var/run/haproxy.pid
-        stats socket /tmp/haproxy mode 0600 level admin
+        # expose-fd listeners also required for seamless config reload
+        stats socket /tmp/haproxy mode 0600 level admin expose-fd listeners
 
 defaults
         balance leastconn
diff --git a/etc/haproxy.cfg.in b/etc/haproxy.cfg.in
index 879c30f..3eb5e2b 100644
--- a/etc/haproxy.cfg.in
+++ b/etc/haproxy.cfg.in
@@ -1,4 +1,7 @@
 global
+        # have haproxy launch a worker process, SMF monitors the master, part of
+        # seamless config reload (via SMF refresh method)
+        master-worker
         log 127.0.0.1 local0
         user nobody
         group nobody
@@ -6,7 +9,8 @@ global
         maxconn 65535
         pidfile /var/run/haproxy.pid
         log-send-hostname %s
-        stats socket /tmp/haproxy mode 0600 level admin
+        # expose-fd listeners also required for seamless config reload
+        stats socket /tmp/haproxy mode 0600 level admin expose-fd listeners
 
 
 defaults
diff --git a/lib/index.js b/lib/index.js
index 16dcc09..a60353c 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -19,5 +19,5 @@ module.exports = {
         return (new Watch(options));
     },
     createZKClient: zkm.createZKClient,
-    restartLB: lbm.restart
+    reloadLB: lbm.reload
 };
diff --git a/lib/lb_manager.js b/lib/lb_manager.js
index f3f855b..8f74630 100644
--- a/lib/lb_manager.js
+++ b/lib/lb_manager.js
@@ -21,19 +21,16 @@ const sprintf = require('util').format;
 
 const assert = require('assert-plus');
 const once = require('once');
-const backoff = require('backoff');
 const vasync = require('vasync');
 const jsprim = require('jsprim');
 
-
-
 ///--- Globals
 
 const CFG_FILE = path.resolve(__dirname, '../etc/haproxy.cfg');
 const CFG_FILE_TMP = path.resolve(__dirname, '../etc/haproxy.cfg.tmp');
 const CFG_IN = fs.readFileSync(path.resolve(__dirname, '../etc/haproxy.cfg.in'),
                              'utf8');
-const RESTART = '/usr/sbin/svcadm restart haproxy';
+const RELOAD = '/usr/sbin/svcadm refresh haproxy';
 /* JSSTYLED */
 const CLEAR_SERVER_LINE = '        server be%d %s:81 check inter 30s slowstart 10s\n';
 /* JSSTYLED */
@@ -43,12 +40,13 @@ const INSECURE_FRONTEND =
 const INSECURE_BIND_LINE = '        bind %s:80\n';
 
 // Locks for single reset run
-var RESTART_RUNNING = false;
-var RESTART_NEEDS_RUN = false;
+var RELOAD_RUNNING = false;
+var RELOAD_NEEDS_RUN = false;
 
 // Storage for objects we might lose if we block on a restart lock
-var RESTART_OPTS = {};
-var RESTART_CB = null;
+var RELOAD_OPTS = {};
+var RELOAD_CB = null;
+
 
 /*
  * Generate a haproxy configuration file using the provided parameters
@@ -106,27 +104,20 @@ function writeHaproxyConfig(opts, cb) {
     return (fs.writeFile(configOut, str, 'utf8', cb));
 }
 
-
-function restartHaproxy(opts, cb) {
+/*
+ * Note: is just "fire and forget" of the opts.reload command (default
+ * is `svcadm refresh`). Assumes that the full config validation code
+ * has been run first, i.e. expected to be called as part of the
+ * exported reload/0 function
+ */
+function reloadHaproxy(opts, cb) {
     assert.object(opts.log, 'options.log');
-    assert.optionalString(opts.restart, 'options.restart');
-
-    const _restart = opts.restart || RESTART;
-    opts.log.debug('Restarting haproxy with: %s...', _restart);
-
-    const retry = backoff.call(exec, _restart, cb);
-    retry.failAfter(3);
-    retry.setStrategy(new backoff.ExponentialStrategy({
-        initialDelay: 1000
-    }));
-    retry.on('backoff', function (number, delay, err) {
-        opts.log.debug({
-            attempt: number,
-            delay: delay,
-            err: err
-        }, 'Haproxy restart attempted');
-    });
-    retry.start();
+    assert.optionalString(opts.reload, 'options.reload');
+
+    const _reload = opts.reload || RELOAD;
+    opts.log.debug('Reloading haproxy config with: %s...', _reload);
+
+    exec(_reload, cb);
 }
 
 /*
@@ -139,7 +130,7 @@ function getHaproxyExec(opts, cb) {
     assert.func(cb, 'callback');
     // svcprop returns something like:
     //    /opt/local/sbin/haproxy\ -f\ %{config_file}\ -D
-    execFile('/usr/bin/svcprop', ['-p', 'start/exec', 'haproxy' ],
+    execFile('/usr/bin/svcprop', ['-p', 'start/exec', 'manta/haproxy' ],
         function (error, stdout, _stderr) {
             var haproxy_exec = null;
             if (error !== null) {
@@ -147,9 +138,9 @@ function getHaproxyExec(opts, cb) {
                 return (cb(error));
             } else {
                 // svccfg line returned, parse out the haproxy path
-                const m = stdout.match(/[\w/]+haproxy/);
+                const m = stdout.match(/(^.*?\/haproxy)\\{1}/);
                 if (m !== null) {
-                    haproxy_exec = m[0];
+                    haproxy_exec = m[1];
                 } else {
                     opts.log.error('Error finding haproxy exec path in %s',
                                    stdout);
@@ -227,16 +218,16 @@ function checkHaproxyConfig(opts, cb) {
 
 /*
  * Regenerate the configuration file using the provided parameters, and then
- * restart HAProxy so that it picks it up.
+ * reload HAProxy configuration.
  *
  * Options:
  * - trustedIP, an address on the Manta network that is considered preauthorized
  * - untrustedIPs, an array of addresses that untrusted traffic comes in over
  * - hosts, an array of Muskie backends to forward requests to
- * - restart (optional), the command to run to restart HAProxy
+ * - reload (optional), the command to run to reload HAProxy config
  * - log, a Bunyan logger
  */
-function restart(opts, cb) {
+function reload(opts, cb) {
     assert.object(opts, 'options');
     assert.string(opts.trustedIP, 'options.trustedIP');
     assert.arrayOfString(opts.untrustedIPs, 'options.untrustedIPs');
@@ -244,45 +235,45 @@ function restart(opts, cb) {
     assert.object(opts.log, 'options.log');
     assert.func(cb, 'callback');
     // For testing
-    assert.optionalString(opts.restart, 'options.restart');
+    assert.optionalString(opts.reload, 'options.reload');
     assert.optionalString(opts.configFileIn, 'options.configFileIn');
 
     /*
-     * Wrap restart logic in a cheap & simple lock to ensure we are not writing
-     * a new temp config file while renaming the temp config file in a previous
-     * restart cycle. In addition, save the options from the queued restart().
-     * If the most diabolical timing issue happened where multiple restart()'s
-     * got queued, we'd only care about at most two (the current,
-     * and the last one queued).
+     * Wrap config reload logic in a cheap & simple lock to ensure we are not
+     * writing a new temp config file while renaming the temp config file in a
+     * previous cycle. In addition, save the options from the queued reload().
+     * If the most diabolical timing issue happened where multiple reload()'s
+     * got queued, we'd only care about at most two (the current, and the last
+     * one queued).
      */
     /*
-     * TODO: If a third restart() call happened, and a delay
+     * TODO: If a third reload() call happened, and a delay
      * happened to the first and second call, the second call's
      * callback would get lost since we only save/restore the
-     * one queued restart. This will be filed in a separate
+     * one queued reload. This will be filed in a separate
      * issue. This issue however is an extremely unlikely event
      * considering the speed in which we get ZK notifications.
      */
-    if (RESTART_RUNNING) {
-        opts.log.debug('Restart is already running, queueing restart...');
-        opts.log.debug('Hosts we are saving for queued restart: %s',
+    if (RELOAD_RUNNING) {
+        opts.log.debug('Config reload is already running, queueing reload...');
+        opts.log.debug('Hosts we are saving for queued reload: %s',
             opts.hosts);
-        RESTART_OPTS = jsprim.deepCopy(opts);
-        RESTART_CB = jsprim.deepCopy(cb);
-        RESTART_NEEDS_RUN = true;
+        RELOAD_OPTS = jsprim.deepCopy(opts);
+        RELOAD_CB = jsprim.deepCopy(cb);
+        RELOAD_NEEDS_RUN = true;
         return;
     }
-    RESTART_RUNNING = true;
+    RELOAD_RUNNING = true;
 
     cb = once(cb);
 
     /*
      * Kick off the checkConfig -> writeHaproxyConfig ->
-     *   restartHaproxy pipeline
+     *   reloadHaproxy pipeline
      * - Generate a temporary config file with writeHaproxyConfig.
      * - Check the temporary config with checkHaproxyConfig
      * - Rename temporary file to final file once check passes
-     * - Restart haproxy with a known-good config file
+     * - Tell haproxy to reload with a known-good config file
      */
     var tmpOpts = jsprim.deepCopy(opts);
     tmpOpts.configFileOut = CFG_FILE_TMP;
@@ -292,8 +283,8 @@ function restart(opts, cb) {
         checkHaproxyConfig,
         function finalRenameConfig(_, callback) {
             renameHaproxyConfig({log: opts.log}, callback); },
-        function finalRestart(_, callback) {
-            restartHaproxy(opts, callback); }
+        function finalReload(_, callback) {
+            reloadHaproxy(opts, callback); }
     ]}, function (err) {
         if (err) {
             opts.log.error(err, 'Error reconfiguring haproxy');
@@ -303,23 +294,21 @@ function restart(opts, cb) {
         }
 
         // Clear the lock now that we are finished
-        RESTART_RUNNING = false;
-        // Call a restart if one is pending
-        if (RESTART_NEEDS_RUN) {
-            RESTART_NEEDS_RUN = false;
-            opts.log.debug('Calling queued restart, using saved hosts: %s',
-                          RESTART_OPTS.hosts);
-            restart(RESTART_OPTS, RESTART_CB);
+        RELOAD_RUNNING = false;
+        // Call a reload if one is pending
+        if (RELOAD_NEEDS_RUN) {
+            RELOAD_NEEDS_RUN = false;
+            opts.log.debug('Calling queued reload, using saved hosts: %s',
+                          RELOAD_OPTS.hosts);
+            reload(RELOAD_OPTS, RELOAD_CB);
         }
     });
 }
 
-
-
 ///--- Exports
 
 module.exports = {
-    restart: restart,
+    reload: reload,
     // Below only exported for testing
     checkHaproxyConfig: checkHaproxyConfig,
     writeHaproxyConfig: writeHaproxyConfig,
diff --git a/muppet.js b/muppet.js
index 63ac128..112dc06 100644
--- a/muppet.js
+++ b/muppet.js
@@ -222,20 +222,20 @@ function startWatch(opts, cb) {
                     untrustedIPs: cfg.untrustedIPs,
                     hosts: hosts || [],
                     log: cfg.log.child({component: 'lb_manager'}),
-                    restart: cfg.restart
+                    reload: cfg.reload
                 };
-                core.restartLB(_opts, function (err) {
+                core.reloadLB(_opts, function (err) {
                     if (err) {
                         cfg.log.error({
                             hosts: hosts,
                             err: err
-                        }, 'lb restart failed');
+                        }, 'lb config reload failed');
                         return;
                     }
 
                     cfg.log.info({
                         hosts: hosts
-                    }, 'lb restarted');
+                    }, 'lb config reloaded');
                 });
             });
 
diff --git a/smf/manifests/haproxy.xml.in b/smf/manifests/haproxy.xml.in
index 7a98423..d9648a5 100644
--- a/smf/manifests/haproxy.xml.in
+++ b/smf/manifests/haproxy.xml.in
@@ -51,6 +51,8 @@
 	    </method_context>
 	</exec_method>
 
+        <exec_method name='refresh' type='method' exec='/usr/bin/pkill -USR2 -z $(zonename) -u root haproxy' timeout_seconds='30'/>
+
 	<exec_method type="method"
 		     name="stop"
 		     exec=":kill"
diff --git a/test/config.test.js b/test/config.test.js
index 6d50618..546a8b0 100644
--- a/test/config.test.js
+++ b/test/config.test.js
@@ -27,7 +27,7 @@ var haproxy_empty_error = path.resolve(__dirname, 'haproxy.cfg.empty');
 var haproxy_parse_error = path.resolve(__dirname, 'haproxy.cfg.parse-error');
 var haproxy_no_frontend = path.resolve(__dirname, 'haproxy.cfg.no-frontend');
 
-// Input file to use for writeHaproxyConfig and restart
+// Input file to use for writeHaproxyConfig and reload
 var haproxy_config_in = fs.readFileSync(path.resolve(__dirname,
                                                      'haproxy.cfg.in'),
                                         'utf8');
@@ -37,7 +37,7 @@ var updConfig_out = path.resolve(__dirname, 'haproxy.cfg.out');
 // File for the above to check against
 var updConfig_out_chk = path.resolve(__dirname, 'haproxy.cfg.out-check');
 
-// Files that the successful restart test will write out
+// Files that the successful reload test will write out
 var haproxy_file = path.resolve(__dirname, '../etc/haproxy.cfg');
 var haproxy_file_tmp = path.resolve(__dirname, '../etc/haproxy.cfg.tmp');
 
@@ -120,7 +120,9 @@ test('test writeHaproxyConfig', function (t) {
                     t.equal(null, part.value);
                 }
             } else if (part.removed) {
-                if (! part.value.includes('log-send-hostname')) {
+                if ((! part.value.includes('log-send-hostname')) &&
+                    // the input cfg is commented
+                    (! part.value.startsWith('#'))) {
                     t.equal(null, part.value);
                 }
             }
@@ -150,24 +152,24 @@ test('test writeHaproxyConfig bad config (should error)', function (t) {
     });
 });
 
-test('test restart', function (t) {
+test('test reload', function (t) {
     var opts = {
         trustedIP: '127.0.0.1',
         untrustedIPs: ['::1', '255.255.255.255'],
         // This must resolve, so pick something public
         hosts: ['google.com'],
-        restart: '/bin/true',
+        reload: '/bin/true',
         configFileIn: haproxy_config_in,
         log: helper.createLogger()
     };
 
-    lbm.restart(opts, function (err, data) {
+    lbm.reload(opts, function (err, data) {
         t.equal(null, err);
         t.doesNotThrow(function () {
-            // Check if restart created the proper file
+            // Check if reload created the proper file
             // this will throw if the file doesn't exist
             fs.statSync(haproxy_file);
-            // remove files that a successful restart
+            // remove files that a successful reload
             // would have created
             fs.unlinkSync(haproxy_file);
         });
@@ -175,28 +177,28 @@ test('test restart', function (t) {
     });
 });
 
-test('test restart bad config (should error)', function (t) {
+test('test reload bad config (should error)', function (t) {
     var opts = {
         trustedIP: '127.0.0.1',
         untrustedIPs: ['::1', '255.255.255.255'],
         hosts: [],
-        restart: '/bin/true',
+        reload: '/bin/true',
         configFileIn: haproxy_config_in,
         log: helper.createLogger()
     };
 
-    lbm.restart(opts, function (err, data) {
+    lbm.reload(opts, function (err, data) {
         t.notEqual(null, err);
         t.done();
     });
 });
 
-test('test dueling restarts', function (t) {
+test('test dueling reloads', function (t) {
     var opts = {
         trustedIP: '127.0.0.1',
         untrustedIPs: ['::1', '255.255.255.255'],
         hosts: ['google.com', 'joyent.com'],
-        restart: '/bin/sleep 2',
+        reload: '/bin/sleep 2',
         configFileIn: haproxy_config_in,
         log: helper.createLogger()
     };
@@ -206,19 +208,19 @@ test('test dueling restarts', function (t) {
         untrustedIPs: ['::1', '255.255.255.255'],
         // This must resolve, so pick something public
         hosts: ['google.com'],
-        restart: '/bin/true',
+        reload: '/bin/true',
         configFileIn: haproxy_config_in,
         log: helper.createLogger()
     };
 
-    // Restart twice, calling the functions as fast as possible
+    // Reload twice, calling the functions as fast as possible
     // Using a /bin/sleep call to make sure the first one is still
     // busy for the second call.
-    lbm.restart(opts, function (err, data) {
+    lbm.reload(opts, function (err, data) {
         t.equal(null, err);
     });
 
-    lbm.restart(opts2, function (err, data) {
+    lbm.reload(opts2, function (err, data) {
         t.equal(null, err);
         t.done();
     });
diff --git a/tools/mk/Makefile.haproxy.defs b/tools/mk/Makefile.haproxy.defs
index 83a2dfb..1383e66 100644
--- a/tools/mk/Makefile.haproxy.defs
+++ b/tools/mk/Makefile.haproxy.defs
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright (c) 2017, Joyent, Inc.
+# Copyright 2019, Joyent, Inc.
 #
 
 #
@@ -20,7 +20,7 @@ HAPROXY_INSTALL ?= $(BUILD)/haproxy
 DISTCLEAN_FILES	+= $(HAPROXY_INSTALL)
 
 HAPROXY_EXEC	= $(HAPROXY_INSTALL)/sbin/haproxy
-HAPROXY_SRC	:= deps/haproxy-1.5
+HAPROXY_SRC	:= deps/haproxy-1.8
 
 # Ensure these use absolute paths to the executables to allow running
 # from a dir other than the project top.
-- 
2.21.0

