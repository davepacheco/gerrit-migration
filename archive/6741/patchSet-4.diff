commit 579a84c7c917e8501568d80937ff0fc7f1d9e021
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2019-09-13T16:37:03+02:00 (3 weeks ago)
    
    TRITON-1841 Updating NICs in VMAPI should call out to NAPI where appropriate
    Reviewed by: Pedro Palaz√≥n Candel <pedro@joyent.com>

diff --git a/deps/eng b/deps/eng
index d25b8fc..9058562 160000
--- a/deps/eng
+++ b/deps/eng
@@ -1 +1 @@
-Subproject commit d25b8fc60fb8c649559924870fe3aaf75e7421d5
+Subproject commit 9058562f2f59892795e470ce25443ff636c90478
diff --git a/lib/workflows/migrate-abort.js b/lib/workflows/migrate-abort.js
index 3c80bd1..e657ec8 100644
--- a/lib/workflows/migrate-abort.js
+++ b/lib/workflows/migrate-abort.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2019, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
diff --git a/lib/workflows/migrate-begin.js b/lib/workflows/migrate-begin.js
index d770557..8986c63 100644
--- a/lib/workflows/migrate-begin.js
+++ b/lib/workflows/migrate-begin.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2019, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -68,6 +68,10 @@ var workflow = module.exports = {
         migrationCommon.tasks.removeTargetZfsQuota,
         common.tasks.waitTask,
 
+        common.tasks.setupForWaitTask,
+        migrationCommon.tasks.removeSourceZfsQuota,
+        common.tasks.waitTask,
+
         migrationCommon.tasks.storeSuccess,
 
         migrationBegin.tasks.startSyncWhenAutomatic
diff --git a/lib/workflows/migrate-sync.js b/lib/workflows/migrate-sync.js
index c04b1c2..5025a19 100644
--- a/lib/workflows/migrate-sync.js
+++ b/lib/workflows/migrate-sync.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2019, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -42,10 +42,6 @@ var workflow = module.exports = {
         /* Other vm actions are allowed now. */
         common.tasks.releaseVMTicket,
 
-        common.tasks.setupForWaitTask,
-        migrationCommon.tasks.removeSourceZfsQuota,
-        common.tasks.waitTask,
-
         /* Start source migration listener process. */
         common.tasks.setupForWaitTask,
         migrationCommon.tasks.setupCnapiSource,
@@ -61,10 +57,6 @@ var workflow = module.exports = {
         /* Do the sync */
         migrationSync.tasks.sync,
 
-        common.tasks.setupForWaitTask,
-        migrationCommon.tasks.restoreSourceZfsQuota,
-        common.tasks.waitTask,
-
         migrationCommon.tasks.storeSuccess,
 
         migrationSync.tasks.startSyncOrSwitchWhenAutomatic
@@ -73,7 +65,6 @@ var workflow = module.exports = {
     onerror: [
         cleanupSource,
         cleanupTarget,
-        migrationCommon.tasks.restoreSourceZfsQuota,
         migrationCommon.tasks.storeFailure,
         common.tasks.releaseVMTicketIgnoringErr
     ],
@@ -81,7 +72,6 @@ var workflow = module.exports = {
     oncancel: [
         cleanupSource,
         cleanupTarget,
-        migrationCommon.tasks.restoreSourceZfsQuota,
         migrationCommon.tasks.storeFailure,
         common.tasks.releaseVMTicketIgnoringErr
     ]
diff --git a/lib/workflows/update-nics.js b/lib/workflows/update-nics.js
index a89b3b5..dbbf6e5 100644
--- a/lib/workflows/update-nics.js
+++ b/lib/workflows/update-nics.js
@@ -5,14 +5,14 @@
  */
 
 /*
- * Copyright (c) 2019, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
  * A brief overview of this source file: what is its purpose.
  */
 
-var async = require('async');
+var vasync = require('vasync');
 var common = require('./job-common');
 var VERSION = '7.0.4';
 
@@ -38,6 +38,33 @@ function setupRequest(job, cb) {
 }
 
 
+/*
+ * This handles updating the NICs in NAPI. It's important to do this before
+ * updating the VM on the Compute Node so that net-agent has a chance to see
+ * the values, and won't try reverting them back to match NAPI.
+ */
+function updateNics(job, cb) {
+    var napi = new sdcClients.NAPI({
+        url: napiUrl,
+        headers: { 'x-request-id': job.params['x-request-id'] }
+    });
+
+    function updateNic(nic, done) {
+        napi.updateNic(nic.mac, nic, done);
+    }
+
+    vasync.forEachPipeline({
+        inputs: job.params.update_nics,
+        func: updateNic
+    }, function (err) {
+        if (err) {
+            cb(err);
+            return;
+        }
+
+        cb(null, 'Updated NAPI NICs');
+    });
+}
 
 var workflow = module.exports = {
     name: 'update-nics-' + VERSION,
@@ -66,6 +93,16 @@ var workflow = module.exports = {
         retry: 1,
         body: common.waitOnVMTicket,
         modules: { sdcClients: 'sdc-clients' }
+    }, {
+        name: 'napi.update_nics',
+        timeout: 10,
+        retry: 1,
+        body: updateNics,
+        modules: {
+            restify: 'restify',
+            sdcClients: 'sdc-clients',
+            vasync: 'vasync'
+        }
     }, {
         name: 'cnapi.update_vm',
         timeout: 10,
diff --git a/lib/workflows/vm-migration/rollback.js b/lib/workflows/vm-migration/rollback.js
index a9f59b7..864fe47 100644
--- a/lib/workflows/vm-migration/rollback.js
+++ b/lib/workflows/vm-migration/rollback.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2019, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 
@@ -50,8 +50,6 @@ function stopTargetVm(job, cb) {
 
     assert.uuid(record.target_server_uuid, 'record.target_server_uuid');
     assert.uuid(record.target_vm_uuid, 'record.target_vm_uuid');
-    assert.equal(job.params.vm_uuid, record.target_vm_uuid,
-        'job.params.vm_uuid should be the same as record.target_vm_uuid');
 
     job.workflow_job_uuid = null;
 
@@ -126,7 +124,7 @@ function stopTargetVm(job, cb) {
                 headers: {'x-request-id': job.params['x-request-id']},
                 url: vmapiUrl
             });
-            vmapi.stopVm({uuid: job.params.vm_uuid}, function (err, body) {
+            vmapi.stopVm({uuid: record.target_vm_uuid}, function (err, body) {
                 if (err) {
                     next(err);
                     return;
diff --git a/package.json b/package.json
index edc6f64..d5d1ec1 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "vmapi",
   "description": "VMs API",
-  "version": "9.8.14",
+  "version": "9.8.16",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
diff --git a/test/lib/migration.js b/test/lib/migration.js
index cfc414c..9cfd90f 100644
--- a/test/lib/migration.js
+++ b/test/lib/migration.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2019, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 var stream = require('stream');
@@ -14,6 +14,7 @@ var util = require('util');
 var assert = require('assert-plus');
 var byline = require('byline');
 var jsprim = require('jsprim');
+var libuuid = require('libuuid');
 var restify = require('restify');
 var vasync = require('vasync');
 
@@ -488,9 +489,10 @@ function TestMigrationCfg(test, cfg) {
 
         if (migrationUuidOverride) {
             // Change the uuid to allow on the same CN.
+            var uuidEnd = '-ab0' + libuuid.create().slice(-9);
             params = {
-                override_uuid: sourceVm.uuid.slice(0, -6) + 'ab0ab0',
-                override_alias: cfg.vm.alias + '-abort'
+                override_uuid: sourceVm.uuid.slice(0, -13) + uuidEnd,
+                override_alias: cfg.vm.alias + uuidEnd
             };
         }
 
@@ -611,9 +613,10 @@ function TestMigrationCfg(test, cfg) {
 
         if (migrationUuidOverride) {
             // Change the uuid to allow on the same CN.
+            var uuidEnd = '-abc' + libuuid.create().slice(-9);
             params = {
-                override_uuid: sourceVm.uuid.slice(0, -6) + 'aaaaaa',
-                override_alias: cfg.vm.alias + '-aaaaaa'
+                override_uuid: sourceVm.uuid.slice(0, -13) + uuidEnd,
+                override_alias: cfg.vm.alias + uuidEnd
             };
         }
 
@@ -1275,7 +1278,7 @@ function TestMigrationCfg(test, cfg) {
         // migration is finalized.
         client.post({
             path: format('/vms/%s?action=migrate&migration_action=begin',
-                targetVm.uuid)
+                sourceVm.uuid)
         }, function onMigrateBeginFromStateSuccessCb(err) {
             t.ok(err,
                 'expect an error for migration begin when a previous ' +
@@ -1297,7 +1300,7 @@ function TestMigrationCfg(test, cfg) {
 
         client.post({
             path: format('/vms/%s?action=migrate&migration_action=finalize',
-                targetVm.uuid)
+                sourceVm.uuid)
         }, function onMigrateFinalizeCb(err, req, res) {
             common.ifError(t, err, 'no error from migration finalize call');
             if (!err) {
@@ -1330,8 +1333,9 @@ function TestMigrationCfg(test, cfg) {
 
         if (migrationUuidOverride) {
             // Change the uuid to allow on the same CN.
-            params.override_uuid = sourceVm.uuid.slice(0, -6) + 'bbbbbb';
-            params.override_alias = sourceVm.uuid.slice(0, -6) + 'bbbbbb';
+            var uuidEnd = '-bbb' + libuuid.create().slice(-9);
+            params.override_uuid = sourceVm.uuid.slice(0, -13) + uuidEnd;
+            params.override_alias = cfg.vm.alias + uuidEnd;
         }
 
         client.post({path: format('/vms/%s', sourceVm.uuid)},
@@ -1565,7 +1569,7 @@ function TestMigrationCfg(test, cfg) {
 
         client.post({
             path: format('/vms/%s?action=migrate&migration_action=rollback',
-                targetVm.uuid)
+                sourceVm.uuid)
         }, function onMigrateRollbackCb(err, req, res, body) {
             common.ifError(t, err, 'no error from migration rollback call');
             if (!err) {
