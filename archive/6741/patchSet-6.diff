commit fd01e8460a4665514dd2445e059c7c7c00841b0b
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2019-09-16T21:00:37+02:00 (3 weeks ago)
    
    TRITON-1841 Updating NICs in VMAPI should call out to NAPI where appropriate
    Reviewed by: Pedro Palaz√≥n Candel <pedro@joyent.com>

diff --git a/lib/workflows/migrate-abort.js b/lib/workflows/migrate-abort.js
index 3c80bd1..e657ec8 100644
--- a/lib/workflows/migrate-abort.js
+++ b/lib/workflows/migrate-abort.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2019, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
diff --git a/lib/workflows/migrate-begin.js b/lib/workflows/migrate-begin.js
index a9f6057..8986c63 100644
--- a/lib/workflows/migrate-begin.js
+++ b/lib/workflows/migrate-begin.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2019, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
diff --git a/lib/workflows/migrate-sync.js b/lib/workflows/migrate-sync.js
index 795b66f..5025a19 100644
--- a/lib/workflows/migrate-sync.js
+++ b/lib/workflows/migrate-sync.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2019, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
diff --git a/lib/workflows/update-nics.js b/lib/workflows/update-nics.js
index a89b3b5..6517294 100644
--- a/lib/workflows/update-nics.js
+++ b/lib/workflows/update-nics.js
@@ -5,16 +5,16 @@
  */
 
 /*
- * Copyright (c) 2019, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
  * A brief overview of this source file: what is its purpose.
  */
 
-var async = require('async');
+var vasync = require('vasync');
 var common = require('./job-common');
-var VERSION = '7.0.4';
+var VERSION = '7.0.5';
 
 
 /*
@@ -38,6 +38,33 @@ function setupRequest(job, cb) {
 }
 
 
+/*
+ * This handles updating the NICs in NAPI. It's important to do this before
+ * updating the VM on the Compute Node so that net-agent has a chance to see
+ * the values, and won't try reverting them back to match NAPI.
+ */
+function updateNics(job, cb) {
+    var napi = new sdcClients.NAPI({
+        url: napiUrl,
+        headers: { 'x-request-id': job.params['x-request-id'] }
+    });
+
+    function updateNic(nic, done) {
+        napi.updateNic(nic.mac, nic, done);
+    }
+
+    vasync.forEachPipeline({
+        inputs: job.params.update_nics,
+        func: updateNic
+    }, function (err) {
+        if (err) {
+            cb(err);
+            return;
+        }
+
+        cb(null, 'Updated NAPI NICs');
+    });
+}
 
 var workflow = module.exports = {
     name: 'update-nics-' + VERSION,
@@ -66,6 +93,15 @@ var workflow = module.exports = {
         retry: 1,
         body: common.waitOnVMTicket,
         modules: { sdcClients: 'sdc-clients' }
+    }, {
+        name: 'napi.update_nics',
+        timeout: 120,
+        retry: 1,
+        body: updateNics,
+        modules: {
+            sdcClients: 'sdc-clients',
+            vasync: 'vasync'
+        }
     }, {
         name: 'cnapi.update_vm',
         timeout: 10,
diff --git a/test/vms.full.test.js b/test/vms.full.test.js
index 9e59b26..4a13cac 100644
--- a/test/vms.full.test.js
+++ b/test/vms.full.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2019, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 // var test = require('tap').test;
@@ -31,7 +31,6 @@ var newUuid;
 var jobLocation;
 var vmLocation;
 var vmCount;
-var nicCount;
 var pkgId;
 var nicMac;
 
@@ -1294,6 +1293,85 @@ exports.check_add_nics_with_network_nics_running = function (t) {
     });
 };
 
+exports.verify_add_nics_with_networks = function (t) {
+    client.napi.get({
+        path: '/nics',
+        query: {
+            belongs_to_uuid: newUuid,
+            belongs_to_type: 'zone',
+            nic_tag: EXTERNAL_NETWORK.nic_tag
+        }
+    }, function (err, req, res, nics) {
+        common.ifError(t, err);
+        nicMac = nics[0].mac;
+        t.done();
+    });
+};
+
+exports.update_nics = function (t) {
+    var params = {
+        action: 'update_nics',
+        nics: [ {
+            mac: nicMac,
+            allow_ip_spoofing: true
+        }]
+    };
+
+    var opts = createOpts(vmLocation, params);
+
+    client.post(opts, params, function (err, req, res, body) {
+        common.ifError(t, err);
+        t.equal(res.statusCode, 202, '202 Accepted');
+        common.checkHeaders(t, res.headers);
+        t.ok(body, 'body is set');
+        t.ok(body.job_uuid, 'job_uuid: ' + body.job_uuid);
+        jobLocation = '/jobs/' + body.job_uuid;
+        t.ok(true, 'jobLocation: ' + jobLocation);
+        t.done();
+    });
+};
+
+
+exports.wait_update_nics = function (t) {
+    waitForValue(jobLocation, 'execution', 'succeeded', {
+        client: client
+    }, function (err) {
+        common.ifError(t, err);
+        t.done();
+    });
+};
+
+
+exports.check_update_nics = function (t) {
+    var query = {
+        belongs_to_uuid: newUuid,
+        belongs_to_type: 'zone',
+        nic_tag: EXTERNAL_NETWORK.nic_tag
+    };
+
+    waitForNicState(t, query, 'running', function (err) {
+        common.ifError(t, err);
+        t.done();
+    });
+};
+
+
+exports.verify_update_nics = function (t) {
+    client.napi.get({
+        path: '/nics',
+        query: {
+            belongs_to_uuid: newUuid,
+            belongs_to_type: 'zone'
+        }
+    }, function (err, req, res, nics) {
+        common.ifError(t, err);
+        t.ok(nics.filter(function (nic) {
+            return nic.nic_tag === 'external';
+        })[0].allow_ip_spoofing, 'IP spoofing is true');
+        // console.log(util.inspect(nics, false, 8, true));
+        t.done();
+    });
+};
 
 exports.add_nics_with_macs = function (t) {
     var params = {
@@ -2878,7 +2956,6 @@ exports.destroy_test_vms_final = function (t) {
  * test that a NAT zone was provisioned as part of the vm provisioning process.
  * Destroy the vm, then check back to ensure the NAT zone was also destroyed.
  */
-
 exports.find_fabric_network = function (t) {
     assert.arrayOfObject(NETWORKS, 'NETWORKS');
 
@@ -2917,9 +2994,7 @@ exports.ensure_no_fabric_nat_provisioned = function (t) {
     };
 
     client.get(opts, function (err, req, res, vms) {
-        /**
-         * We exect that vms is an empty array.
-         */
+        // We expect that vms is an empty array.
         common.ifError(t, err);
         t.equal(res.statusCode, 200, 'expected a 200 status');
         t.equal(vms.length, 0, 'should be no NAT vm found');
@@ -2991,9 +3066,7 @@ exports.ensure_fabric_nat_provisioned = function (t) {
     client.get(opts, function (err, req, res, vms) {
         var vm;
 
-        /**
-         * We expect to get back an array containing one running vm.
-         */
+         // We expect to get back an array containing one running vm.
         common.ifError(t, err);
         t.equal(res.statusCode, 200, 'expected a 200 status');
 
@@ -3075,9 +3148,7 @@ exports.ensure_fabric_nat_destroyed = function (t) {
     var opts = createOpts('/vms/' + natZoneUuid);
 
     client.get(opts, function (err, req, res, vm) {
-        /**
-         * We expect to get back a destroyed vm.
-         */
+         // We expect to get back a destroyed vm.
         common.ifError(t, err);
         t.equal(res.statusCode, 200, 'expected a 200 status');
         t.ok(vm, 'expected a vm');
@@ -3104,9 +3175,7 @@ exports.ensure_no_fabric_nat_zone = function (t) {
     };
 
     client.get(opts, function (err, req, res, vms) {
-        /**
-         * There should get no vms returned.
-         */
+        // There should get no vms returned.
         common.ifError(t, err);
         t.equal(res.statusCode, 200, 'expected a 200 status');
         t.equal(vms.length, 0, 'should be no NAT vm found');
