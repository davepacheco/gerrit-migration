From 6d505f11e350b9aafb9fd00e95d0db0083c1e302 Mon Sep 17 00:00:00 2001
From: Rui Loura <rui@joyent.com>
Date: Wed, 16 May 2018 15:56:10 +0000
Subject: [PATCH] TRITON-592 when provisioning vmapi should check for network
 pools before networks

---
 README.md                   |  10 +++-
 lib/endpoints/vms.js        | 107 ++++++++++++++++++------------------
 lib/workflows/job-common.js |   4 ++
 test/vms.full.test.js       |  12 ++--
 4 files changed, 76 insertions(+), 57 deletions(-)

diff --git a/README.md b/README.md
index 1f7e3b4..060b125 100644
--- a/README.md
+++ b/README.md
@@ -52,7 +52,15 @@ Typically VMAPI development is done by:
 
 # Testing
 
-To sync local changes to a running COAL and run the test suite there try:
+* Prerequisites:
+    * Provision at least one fabric network.
+    * Ensure there are no existing NAT zones provisioned.
+    * Execute `sdcadm post-setup dev-headnode-prov`
+
+* To sync local changes to a running COAL and run the test suite there use:
 
     make test-coal
 
+* To run tests while logged into a running VMAPI instance:
+
+    /opt/smartdc/vmapi/test/runtests
diff --git a/lib/endpoints/vms.js b/lib/endpoints/vms.js
index 7437dcb..8a1a1ab 100644
--- a/lib/endpoints/vms.js
+++ b/lib/endpoints/vms.js
@@ -966,68 +966,71 @@ function preFilterNetworks(req, res, next) {
 
         assert.string(netId, 'netId');
 
-        findNetwork(netId, function (err, nets) {
-            // If network is not found then it might be a network pool
-            if (err && !VError.hasCauseWithName(err, 'ResourceNotFoundError')) {
-                callback(new VError(err, 'Failed to find network "%s"', netId));
-                return;
+        findNetworkPool(netId, function (err2, pools) {
+            if (err2) {
+                if (!VError.hasCauseWithName(err2,
+                    'ResourceNotFoundError')) {
+                        callback(new VError(err2,
+                            'Failed to find network pool "%s"', netId));
+                    return;
+                }
             }
 
-            // Did we get the network from list or get?
-            var net = (Array.isArray(nets) ? nets[0] : nets);
-
-            // No net if NAPI returns an empty array or if we got a 404
-            if (net) {
-                if (net.fabric) {
-                    filteredNetworks.fabrics.push(net.uuid);
+            /*
+             * Prior to NAPI-121, using a "name" filter for a network pool
+             * would either be silently ignored (or rejected post NAPI-343).
+             * In case we're talking to a NAPI that's ignored our parameter,
+             * we filter the results to avoid using an incorrect pool.
+             */
+            if (Array.isArray(pools)) {
+                pools = pools.filter(function (pool) {
+                    return pool.name === netId;
+                });
+                if (pools.length === 0) {
+                    req.log.info('No pools with name %s found, will try '
+                        + 'networks', netId);
+                } else if (pools.length === 1) {
+                    filteredNetworks.pools.push(pools[0].uuid);
+                    filteredNetworks.netInfo.push(pools[0]);
+                    callback(null, pools[0].uuid);
+                    return;
+                } else {
+                    callback(new restify.UnprocessableEntityError(
+                        'Multiple Network Pools with name: ' + netId));
+                    return;
                 }
-                filteredNetworks.netInfo.push(net);
-                callback(null, net.uuid);
+            } else if (pools && Object.keys(pools).length !== 0) {
+                filteredNetworks.pools.push(pools.uuid);
+                filteredNetworks.netInfo.push(pools);
+                callback(null, pools.uuid);
                 return;
             }
 
-            // We might be trying to provision on a network pool, so
-            // try that instead
-            findNetworkPool(netId, function (err2, pools) {
-                if (err2) {
-                    if (!VError.hasCauseWithName(err2,
-                        'ResourceNotFoundError')) {
-                            callback(new VError(err,
-                                'Failed to find network pool "%s"', netId));
-                        return;
-                    }
-                    callback(new restify.UnprocessableEntityError('No such'
-                        + ' Network/Pool with id: "%s"',
+            // couldn't find a pool with that name, look for a network istead.
+            findNetwork(netId, function (err, nets) {
+                if (err && !VError.hasCauseWithName(err,
+                    'ResourceNotFoundError')) {
+
+                    callback(new VError(err, 'Failed to find network "%s"',
                         netId));
                     return;
                 }
 
-                /*
-                 * Prior to NAPI-121, using a "name" filter for a network pool
-                 * would either be silently ignored (or rejected post NAPI-343).
-                 * In case we're talking to a NAPI that's ignored our parameter,
-                 * we filter the results to avoid using an incorrect pool.
-                 */
-                if (Array.isArray(pools)) {
-                    pools = pools.filter(function (pool) {
-                        return pool.name === netId;
-                    });
-                    if (pools.length === 0) {
-                        callback(new restify.UnprocessableEntityError(
-                            'No such Network or Pool with name: ' + netId));
-                    } else if (pools.length === 1) {
-                        filteredNetworks.pools.push(pools[0].uuid);
-                        filteredNetworks.netInfo.push(pools[0]);
-                        callback(null, pools[0].uuid);
-                    } else {
-                        callback(new restify.UnprocessableEntityError(
-                            'Multiple Network Pools with name: ' + netId));
-                    }
-                } else {
-                    filteredNetworks.pools.push(pools.uuid);
-                    filteredNetworks.netInfo.push(pools);
-                    callback(null, pools.uuid);
+                // Did we get the network from list or get?
+                var net = (Array.isArray(nets) ? nets[0] : nets);
+
+                // No net if NAPI returns an empty array or if we got a 404
+                if (!net) {
+                    callback(new restify.UnprocessableEntityError(
+                        'No such Network/Pool with id/name: "' + netId + '"'));
+                    return;
                 }
+
+                if (net.fabric) {
+                    filteredNetworks.fabrics.push(net.uuid);
+                }
+                filteredNetworks.netInfo.push(net);
+                callback(null, net.uuid);
             });
         });
     }
@@ -1053,7 +1056,7 @@ function preFilterNetworks(req, res, next) {
             next(err);
             return;
         }
-        req.log.info({filterdNetworks: filteredNetworks},
+        req.log.info({filteredNetworks: filteredNetworks},
             'filteredNetworks complete');
 
         next();
diff --git a/lib/workflows/job-common.js b/lib/workflows/job-common.js
index c07aefa..0a91129 100644
--- a/lib/workflows/job-common.js
+++ b/lib/workflows/job-common.js
@@ -822,6 +822,10 @@ function provisionNics(job, cb) {
 
     job.params.nics = nics;
 
+    /*
+     * We only provision NICs for network_pools below.  The NICs for networks
+     * are provisioned in createVm()->preProvisionNics().
+     */
     async.series([
         function provisionPoolNicss(callback) {
             async.mapSeries(poolNetworks, function (network, next) {
diff --git a/test/vms.full.test.js b/test/vms.full.test.js
index 243fb6e..689d513 100644
--- a/test/vms.full.test.js
+++ b/test/vms.full.test.js
@@ -781,7 +781,8 @@ exports.create_vm_with_unknown_network = function (t) {
 
         t.deepEqual(body, {
             code: 'UnprocessableEntityError',
-            message: 'No such Network/Pool with id: "' + FAKE_NETWORK_UUID + '"'
+            message: 'No such Network/Pool with id/name: "' +
+                FAKE_NETWORK_UUID + '"'
         });
 
         t.done();
@@ -811,7 +812,8 @@ exports.create_vm_with_unknown_network_name = function (t) {
 
         t.deepEqual(body, {
             code: 'UnprocessableEntityError',
-            message: 'No such Network or Pool with name: ' + FAKE_NETWORK_NAME
+            message: 'No such Network/Pool with id/name: "' +
+                FAKE_NETWORK_NAME + '"'
         });
 
         t.done();
@@ -1123,7 +1125,8 @@ exports.add_nics_with_unknown_network = function (t) {
 
         t.deepEqual(body, {
             code: 'UnprocessableEntityError',
-            message: 'No such Network/Pool with id: "' + FAKE_NETWORK_UUID + '"'
+            message: 'No such Network/Pool with id/name: "' +
+                FAKE_NETWORK_UUID + '"'
         });
 
         t.done();
@@ -1146,7 +1149,8 @@ exports.add_nics_with_unknown_network_name = function (t) {
 
         t.deepEqual(body, {
             code: 'UnprocessableEntityError',
-            message: 'No such Network or Pool with name: ' + FAKE_NETWORK_NAME
+            message: 'No such Network/Pool with id/name: "' +
+                FAKE_NETWORK_NAME + '"'
         });
 
         t.done();
-- 
2.21.0

