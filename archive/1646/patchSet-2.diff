commit b935bdf5d59a333531b5d5c265051120acf85669 (refs/changes/46/1646/2)
Author: Orlando Vazquez <ovazquez@gmail.com>
Date:   2017-03-13T16:37:09-07:00 (2 years, 7 months ago)
    
    CNAPI-696 CNAPI crashes when an non-existent route is called

diff --git a/lib/server.js b/lib/server.js
index a6137c9..332911c 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -79,19 +79,24 @@ function createServer(options) {
         'vmdockerbuild': true
     };
 
-    cnapi.on('after', function (req, res, route, err) {
-        if (req.route && AUDIT_SKIP_ROUTES[req.route.name]) {
-            return;
-        }
+    cnapi.on('after', function _onAfter(req, res, route, err) {
+        var HTTP_STATUS_DIVISOR = 100;
+        var HTTP_STATUS_CLASS_SUCCESS = 2;
+        var HTTP_CODE_MISSING = 404;
 
         // Successful GET res bodies are uninteresting and *big*.
-        var isOmitBodyRoute = (jsprim.hasKey(AUDIT_OMIT_BODY_ROUTES,
-                                         req.route.name) &&
-                                 AUDIT_OMIT_BODY_ROUTES[req.route.name]);
+        var isOmitBodyRoute = (req.route &&
+            jsprim.hasKey(AUDIT_OMIT_BODY_ROUTES, req.route.name) &&
+            AUDIT_OMIT_BODY_ROUTES[req.route.name]);
+
+        var includeBody = (!isOmitBodyRoute && req.method !== 'GET' &&
+            res.statusCode !== HTTP_CODE_MISSING &
+            Math.floor(res.statusCode / HTTP_STATUS_DIVISOR)
+                !== HTTP_STATUS_CLASS_SUCCESS);
 
-        var includeBody = !isOmitBodyRoute && (req.method !== 'GET' &&
-                        res.statusCode !== 404 &&
-                        Math.floor(res.statusCode/100) !== 2);
+        if (req.route && AUDIT_SKIP_ROUTES[req.route.name]) {
+            return;
+        }
 
         restify.auditLogger({
             log: req.log.child({ route: route && route.name }, true),
diff --git a/test/test-non-existent-route.js b/test/test-non-existent-route.js
new file mode 100644
index 0000000..21c27b8
--- /dev/null
+++ b/test/test-non-existent-route.js
@@ -0,0 +1,92 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+/*
+ * Test that non-existent routes do not crash CNAPI.
+ */
+
+var restify = require('restify');
+var vasync = require('vasync');
+
+var HTTP_OK = 200;
+var HTTP_MISSING = 404;
+
+var CNAPI_URL = 'http://' + (process.env.CNAPI_IP || '10.99.99.22');
+var client;
+
+function setup(callback) {
+    client = restify.createJsonClient({
+        agent: false,
+        url: CNAPI_URL
+    });
+    callback();
+}
+
+
+function teardown(callback) {
+    callback();
+}
+
+
+function testNonExistentRoute(test) {
+    var expected = 9;
+    var startTimestamp;
+
+    test.expect(expected);
+
+    vasync.waterfall([
+        function _getDiagnostics(next) {
+            client.get('/diagnostics', _onGet);
+
+            function _onGet(err, req, res, diagnostics) {
+                test.ifError(err);
+                test.equal(res.statusCode, HTTP_OK,
+                        'GET /servers returned 200');
+                test.ok(diagnostics.start_timestamp, 'got a date');
+
+                startTimestamp = diagnostics.start_timestamp;
+                next();
+            }
+        },
+        function _hitBadRoute(next) {
+            client.get('/doesnotexist', _onGet);
+            function _onGet(err, _req, _res, _diagnostics) {
+                test.ok(err, 'should get an error');
+                test.equal(err.statusCode, HTTP_MISSING,
+                    'error should be a 404');
+                next();
+            }
+        },
+        function _checkStartTimestampValue(next) {
+            client.get('/diagnostics', _onGet);
+
+            function _onGet(err, req, res, diagnostics) {
+                test.ifError(err);
+                test.equal(res.statusCode, HTTP_OK,
+                        'GET /diagnostics returned 200');
+                test.equal(diagnostics.start_timestamp, startTimestamp,
+                        'start timestamp has not changed');
+
+                startTimestamp = diagnostics.start_timestamp;
+                next();
+            }
+        }
+    ], function _finish(err) {
+        test.ifError(err, 'no errors');
+        test.done();
+    });
+}
+
+
+module.exports = {
+    setUp: setup,
+    tearDown: teardown,
+    'test-non-existent-route': testNonExistentRoute
+};
