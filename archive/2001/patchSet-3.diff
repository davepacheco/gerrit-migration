commit 5180da983e9acaaef74f9feca2147adbe717a94d (refs/changes/01/2001/3)
Author: Trent Mick <trentm@gmail.com>
Date:   2017-05-29T16:51:00-07:00 (2 years, 4 months ago)
    
    IMGAPI-627 switch standalone IMGAPI to using ECDSA keys
    Reviewed by: Josh Wilsdon <josh@wilsdon.ca>

diff --git a/CHANGES.md b/CHANGES.md
index 8445b24..a0260b4 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -1,7 +1,30 @@
 # IMGAPI changelog
 
+## 3.3.0
+
+- IMGAPI-627 With this change, a standalone IMGAPI will use an ECDSA key for
+  auth to its Manta storage (if any). Before this a 4k RSA key was used, which,
+  for node at least, is slow so put a significant limit on req/s.
+
+## 3.2.2
+
+- IMGAPI-621 handling of query params with '.' broken since IMGAPI-587
+
+## 3.2.1
+
+- DOCKER-984 'docker pull some-unreachable-ip/name:tag' takes a LONG time to fail
+- DOCKER-983 'docker --tls pull nope.example.com/nope' is way too slow
+
+## 3.2.0
+
+- IMGAPI-601 IMGAPI should allow '+' in a manifest version
+
 ## 3.1.3
 
+- DOCKER-959 Unable to pull from registry when registry response sends multiple
+  Docker-Distribution-Api-Version headers
+- IMGAPI-600 AdminImportDockerImage 'error' progress message should use
+  restify-errors err.name as a fallback code
 
 ## 3.1.2
 
diff --git a/bin/imgapi-external-manta-setup b/bin/imgapi-external-manta-setup
index fad5875..1e6bd42 100755
--- a/bin/imgapi-external-manta-setup
+++ b/bin/imgapi-external-manta-setup
@@ -6,7 +6,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -20,7 +20,7 @@
  *
  * This script will:
  *
- * - Take the given url, user, and ssh-rsa key and set the following metadata
+ * - Take the given url, user, and SSH key and set the following metadata
  *   on the 'imgapi' service in SAPI:
  *
  *      IMGAPI_MANTA_URL
diff --git a/bin/imgapi-manta-setup b/bin/imgapi-manta-setup
index cf4f5b6..affb62f 100755
--- a/bin/imgapi-manta-setup
+++ b/bin/imgapi-manta-setup
@@ -6,7 +6,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -21,7 +21,7 @@
  *
  * This script will:
  *
- * - Generate a new passphrase-less ssh-rsa "imgapi key", if necessary.
+ * - Generate a new passphrase-less ECDSA "imgapi key", if necessary.
  * - Add this key to the admin ($ufds_admin_login) user.
  * - Set the following metadata on the 'imgapi' service in SAPI:
  *
@@ -229,7 +229,7 @@ function getUfdsClient(master, sdcApp, callback) {
 function generateKey(keyName, callback) {
     assert.func(callback, 'callback');
 
-    var privPath = format('/var/tmp/imgapi.%s.id_rsa', process.pid);
+    var privPath = format('/var/tmp/imgapi.%s.key', process.pid);
     var pubPath = privPath + '.pub';
     var key = {
         name: keyName
@@ -237,7 +237,8 @@ function generateKey(keyName, callback) {
 
     async.series([
         function (next) {
-            var cmd = format('/usr/bin/ssh-keygen -t rsa -f %s -N "" -C "%s"',
+            var cmd = format(
+                '/usr/bin/ssh-keygen -t ecdsa -b 256 -f %s -N "" -C "%s"',
                 privPath, key.name);
             log.info({cmd: cmd}, 'generating SSH key');
             exec(cmd, function (err, stdout, stderr) {
diff --git a/bin/imgapi-standalone-create b/bin/imgapi-standalone-create
index e6f3b49..0021ef7 100755
--- a/bin/imgapi-standalone-create
+++ b/bin/imgapi-standalone-create
@@ -4,7 +4,7 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 #
-# Copyright 2016 Joyent, Inc.
+# Copyright 2017 Joyent, Inc.
 #
 
 #
@@ -245,9 +245,9 @@ if [[ -n "$mantaUser" ]]; then
     echo "used is part of this Triton cloud, then this should work:"
     echo ""
     echo "    sdc-vmadm get $vmUuid \\"
-    echo "        | json customer_metadata.instPubKey > /tmp/imgapi.id_rsa.pub"
-    echo "    keyname=\$(cat /tmp/imgapi.id_rsa.pub | head -1 | awk '{print \$3}')"
-    echo "    sdc-useradm add-key -n \$keyname $mantaUser /tmp/imgapi.id_rsa.pub"
+    echo "        | json customer_metadata.instPubKey > /tmp/imgapi.id_ecdsa.pub"
+    echo "    keyname=\$(cat /tmp/imgapi.id_ecdsa.pub | head -1 | awk '{print \$3}')"
+    echo "    sdc-useradm add-key -n \$keyname $mantaUser /tmp/imgapi.id_ecdsa.pub"
     echo ""
     echo "If the Manta is part of a separate cloud then, for an appropriate"
     echo "Triton CLI profile, the following might work:"
diff --git a/bin/imgapi-standalone-gen-setup-config b/bin/imgapi-standalone-gen-setup-config
index 7fe57d9..3145310 100755
--- a/bin/imgapi-standalone-gen-setup-config
+++ b/bin/imgapi-standalone-gen-setup-config
@@ -7,7 +7,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -47,6 +47,7 @@ var templatePath = path.resolve(topDir, 'etc', 'standalone',
 
 var setupConfigVars = [
     'mode',
+    'channels',
     'serverName',
     'mantaUrl',
     'mantaUser',
@@ -167,7 +168,8 @@ function main() {
             arg.setupConfig.mantaKeyId
                 = pubKey.fingerprint('sha256').toString();
 
-            var privKeyPath = '/data/imgapi/etc/' + pubKey.comment + '.id_rsa';
+            var privKeyPath = '/data/imgapi/etc/' + pubKey.comment
+                + '.id_ecdsa';
             fs.exists(privKeyPath, function (exists) {
                 if (!exists) {
                     next(new VError('expected IMGAPI instance private key '
@@ -179,6 +181,33 @@ function main() {
             });
         },
 
+        /*
+         * "channels" may be the special value "standard", which is
+         * transformed to .../etc/standalone/standard-channels.json. These are
+         * the channels used by updates.joyent.com.
+         */
+        function handleChannelsStandard(arg, next) {
+            if (!arg.setupConfig.channels
+                || arg.setupConfig.channels !== 'standard')
+            {
+                next();
+                return;
+            }
+
+            var stdChansFile = path.resolve(topDir, 'etc', 'standalone',
+                'standard-channels.json');
+            fs.readFile(stdChansFile, {
+                encoding: 'utf8'
+            }, function (readErr, text) {
+                if (readErr) {
+                    next(readErr);
+                    return;
+                }
+                arg.setupConfig.channels = text;
+                next();
+            });
+        },
+
         function render(arg, next) {
             var compiled = handlebars.compile(arg.template);
             arg.rendered = compiled(arg.setupConfig);
diff --git a/bin/imgapi-standalone-reprovision b/bin/imgapi-standalone-reprovision
index 2e5c0df..39ba938 100755
--- a/bin/imgapi-standalone-reprovision
+++ b/bin/imgapi-standalone-reprovision
@@ -4,7 +4,7 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 #
-# Copyright 2016 Joyent, Inc.
+# Copyright 2017 Joyent, Inc.
 #
 
 #
@@ -28,29 +28,24 @@ PATH=/usr/bin:/usr/sbin:/smartdc/bin:/opt/smartdc/bin:/opt/local/bin:/opt/local/
 
 function usage () {
     echo "Usage:"
-    echo "  imgapi-standalone-reprovision [OPTIONS] INSTANCE IMAGE"
+    echo "    imgapi-standalone-reprovision [OPTIONS] INSTANCE IMAGE"
     echo ""
     echo "Options:"
-    echo "  -h          Show this help and exit."
-    echo "  -y          Skip the confirmation before reprovisioning."
-    echo "  -I          Allow reprovision with same image."
-    echo "  -C CHANNEL  Updates channel in which to look for the given IMAGE."
+    echo "    -h          Show this help and exit."
+    echo "    -y          Skip the confirmation before reprovisioning."
+    echo "    -I          Allow reprovision with the current image."
+    echo "    -C CHANNEL  Updates channel in which to look for the given IMAGE."
     echo ""
-    echo "Where INSTANCE is an existing standalone IMGAPI instance UUID, and"
-    echo "IMAGE is an 'imgapi' image UUID or 'latest' to get the latest from"
-    echo "the current (or given) channel of updates.joyent.com."
+    echo "Where INSTANCE is an existing standalone IMGAPI instance UUID,"
+    echo "and IMAGE is an 'imgapi' image UUID or 'latest' to get the latest"
+    echo "from the current (or given) channel of updates.joyent.com."
     echo ""
     echo "Examples:"
     echo ""
-    echo "- First you'll need to get the create script to your headnode GZ:"
-    echo "    cd /var/tmp && curl -O https://raw.githubusercontent.com/joyent/sdc-imgapi/IMGAPI-567/bin/imgapi-standalone-reprovision"
-    echo ""
     echo "- Reprovision an images.joyent.com inst with the latest experimental"
     echo "  'imgapi' image:"
-    echo "    /var/tmp/imgapi-standalone-reprovision -C experimental \\"
-    echo "        205c49c8-715e-11e6-9134-239a750f414c latest"
-    echo ""
-
+    echo "      ./imgapi-standalone-reprovision -C experimental \\"
+    echo "          205c49c8-715e-11e6-9134-239a750f414c latest"
 }
 
 function fatal {
@@ -118,7 +113,7 @@ ownerJson=$(sdc-useradm get $ownerUuid)
 ownerLogin=$(echo "$ownerJson" | json login)
 ownerCompany=$(echo "$ownerJson" | json company)
 
-# Guard against a possible accidental reprovisioning a *core* IMGAPI zone
+# Guard against a possible accidental reprovisioning of a *core* IMGAPI zone
 # for this DC (which will be owned by 'admin').
 if [[ $ownerLogin == "admin" ]]; then
     fatal "instance $INSTANCE ($instAlias) is owned by 'admin': are you accidentally trying to reprovision a core DC IMGAPI?"
diff --git a/bin/imgapi-standalone-restore b/bin/imgapi-standalone-restore
index ba960e4..ad13726 100755
--- a/bin/imgapi-standalone-restore
+++ b/bin/imgapi-standalone-restore
@@ -4,7 +4,7 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 #
-# Copyright 2016 Joyent, Inc.
+# Copyright 2017 Joyent, Inc.
 #
 
 #
@@ -26,8 +26,8 @@
 # be unnecessary.
 #
 
+export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
 if [[ -n "$TRACE" ]]; then
-    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
     set -o xtrace
 fi
 set -o errexit
@@ -52,6 +52,7 @@ function usage () {
     echo "Options:"
     echo "  -h          Show this help and exit."
     echo "  -y          Skip the confirmation before restoring."
+    echo "  -v          Trace output (mostly equivalent to TRACE=1)."
 }
 
 function fatal {
@@ -64,13 +65,36 @@ function errexit {
     fatal "error exit status $1"
 }
 
+function imgapi_wait_until_running {
+    local imgapi_url
+    imgapi_url=http://$(echo "$config" | json address):$(echo "$config" | json port)
+    for i in 1 2 3 4 5 6 7 8 9; do
+        sleep 0.5
+        if imgapi_is_running $imgapi_url; then
+            break
+        fi
+    done
+    imgapi_is_running $imgapi_url || fatal 'imgapi did not start'
+}
+
+function imgapi_is_running {
+    local imgapi_url=$1
+    local response=$(curl -iSs -H accept:application/json \
+        localhost:8080/ping?caller=imgapi-standalone-restore 2>/dev/null)
+    if [[ $(echo "$response" | json -qH ping) == "pong" ]]; then
+        return 0
+    else
+        return 1
+    fi
+}
+
 
 #---- mainline
 
 trap 'errexit $?' EXIT
 
 optYes=no
-while getopts "hy" opt
+while getopts "hyv" opt
 do
     case "$opt" in
         h)
@@ -80,6 +104,9 @@ do
         y)
             optYes=yes
             ;;
+        v)
+            set -o xtrace
+            ;;
         *)
             usage
             exit 1
@@ -152,7 +179,7 @@ if [[ $infoStatus == "404" ]]; then
     echo "This means either (a) all image files for this IMGAPI are stored in "
     echo "Manta, which is a good thing; or (b) this is a brand new IMGAPI repo."
 elif [[ $infoStatus != "200" ]]; then
-    fatal "unexpected status code getting `minfo $bakDir/images`: $infoStatus"
+    fatal "unexpected status code getting 'minfo $bakDir/images': $infoStatus"
 else
     echo "Restore /data/imgapi/images"
     $MANTASYNC -r $bakDir/images /data/imgapi/images
@@ -165,7 +192,7 @@ if [[ $infoStatus == "404" ]]; then
     echo "Nothing in $bakDir/manifests to restore."
     echo "This means either that this is a brand new IMGAPI repo."
 elif [[ $infoStatus != "200" ]]; then
-    fatal "unexpected status code getting `minfo $bakDir/manifests`: $infoStatus"
+    fatal "unexpected status code getting 'minfo $bakDir/manifests': $infoStatus"
 else
     echo "Restore /data/imgapi/manifests"
     $MANTASYNC -r $bakDir/manifests /data/imgapi/manifests
@@ -182,5 +209,7 @@ mkdir -p $(dirname $RESTORED_MARKER)
 echo "restored at $restoredTimestamp" >>$RESTORED_MARKER
 
 echo ""
-echo "Restarting imgapi service"
-svcadm restart imgapi
+echo "Restarting imgapi service (and wait until it is running)"
+svcadm disable -s imgapi
+svcadm enable -s imgapi
+imgapi_wait_until_running
diff --git a/boot/standalone/setup.sh b/boot/standalone/setup.sh
index 8ff28aa..41a8680 100755
--- a/boot/standalone/setup.sh
+++ b/boot/standalone/setup.sh
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright 2016 Joyent, Inc.
+# Copyright 2017 Joyent, Inc.
 #
 
 #
@@ -60,13 +60,13 @@ echo 'if [ "$PS1" ]; then eval $(/opt/smartdc/imgapi/bin/manta-env 2>/dev/null |
 if [[ ! -d /data/imgapi ]]; then
     # etc/ and instance ssh key
     mkdir -p /data/imgapi/etc
-    [[ ! -f /data/imgapi/etc/imgapi-*.id_rsa ]] \
-        || fatal "unexpected existing IMGAPI instance key files: /data/imgapi/etc/imgapi-*.id_rsa"
+    [[ ! -f /data/imgapi/etc/imgapi-*.id_ecdsa ]] \
+        || fatal "unexpected existing IMGAPI instance key files: /data/imgapi/etc/imgapi-*.id_ecdsa"
     keyName=$NODENAME-$(date -u '+%Y%m%d')
-    ssh-keygen -t rsa -b 4096 -N "" \
-        -C "$keyName" -f /data/imgapi/etc/$keyName.id_rsa
+    ssh-keygen -t ecdsa -b 256 -N "" \
+        -C "$keyName" -f /data/imgapi/etc/$keyName.id_ecdsa
     # Write pubkey to mdata so outside tooling can use it for setup.
-    mdata-put instPubKey < /data/imgapi/etc/$keyName.id_rsa.pub
+    mdata-put instPubKey < /data/imgapi/etc/$keyName.id_ecdsa.pub
 
     # Self-signed cert
     /opt/local/bin/openssl req -x509 -nodes -subj '/CN=*' -newkey rsa:2048 \
@@ -85,7 +85,7 @@ if [[ ! -d /data/imgapi ]]; then
     # imgapi SMF service runs as 'nobody'
     chown nobody:nobody /data/imgapi
     chown nobody:nobody /data/imgapi/etc
-    chown nobody:nobody /data/imgapi/etc/$keyName.id_rsa{,.pub}
+    chown nobody:nobody /data/imgapi/etc/$keyName.id_ecdsa{,.pub}
     chown nobody:nobody /data/imgapi/etc/cert.pem
     chown nobody:nobody /data/imgapi/etc/imgapi.config.json
     chown nobody:nobody /data/imgapi/etc/authkeys
@@ -95,8 +95,8 @@ else
 fi
 
 # Manta CLI tools require that key be in ~/.ssh
-ln -s /data/imgapi/etc/$keyName.id_rsa ~/.ssh/
-ln -s /data/imgapi/etc/$keyName.id_rsa.pub ~/.ssh/
+ln -s /data/imgapi/etc/$keyName.id_ecdsa ~/.ssh/
+ln -s /data/imgapi/etc/$keyName.id_ecdsa.pub ~/.ssh/
 
 # Log rotation
 mkdir -p /var/log/triton/upload
diff --git a/docs/operator-guide.md b/docs/operator-guide.md
index cd5c78f..6530fc7 100644
--- a/docs/operator-guide.md
+++ b/docs/operator-guide.md
@@ -20,7 +20,7 @@ There are two main types of IMGAPI:
 2. `standalone`: A standalone IMGAPI, that runs independent of a Triton
    DataCenter. These are configured with `mode === "public"` (for public images,
    example "images.joyent.com") or `mode === "private"` (for repos with private
-   images, example "updates.joyent.com"). These server HTTPS over a public
+   images, example "updates.joyent.com"). These serve HTTPS over a public
    network (via stud for SSL termination, to HAproxy for possible load
    balancing, to one or more node.js IMGAPI processes). They are typically
    configured to use HTTP Signature auth (like Triton's CloudAPI and Manta's web
@@ -125,18 +125,21 @@ For example:
 
     cd /var/tmp
     curl -kO https://raw.githubusercontent.com/joyent/sdc-imgapi/master/bin/imgapi-standalone-create
+    chmod +x imgapi-standalone-create
 
     # A play IMGAPI in COAL using a local 'trentm' COAL account and
     # /trent.mick/stor/tmp/images in Manta:
-    bash ./imgapi-standalone-create \
+    ./imgapi-standalone-create \
         -m mantaUrl=https://us-east.manta.joyent.com \
-        -m mantaUser=trent.mick -m mantaBaseDir=tmp/images \
+        -m mantaUser=trent.mick \
+        -m mantaBaseDir=tmp/images \
         trentm latest sample-2G myimages0
 
     # An deployment of images.joyent.com might look like this:
-    bash ./imgapi-standalone-create \
+    ./imgapi-standalone-create \
         -m mantaUrl=https://us-east.manta.joyent.com \
-        -m mantaUser=joyops -m mantaBaseDir=images.joyent.com \
+        -m mantaUser=joyops \
+        -m mantaBaseDir=images.joyent.com \
         -t triton.cns.services=imagesjo \
         joyops latest g4-highcpu-2G imagesjo0
 
@@ -148,7 +151,7 @@ below). The `-t` option adds an instance tag -- in this case to use
 
 ## Standalone Setup Step 2: edit config
 
-After creation one may edit the generated config file at
+After creation, one may edit the generated config file at
 "/data/imgapi/etc/imgapi.config.json" manually. Afterwards, remember to
 restart the imgapi service:
 
@@ -282,6 +285,15 @@ isn't yet a part of CloudAPI).
 
     imgapi-standalone-reprovision [OPTIONS] INSTANCE IMAGE
 
+For example:
+
+    cd /var/tmp
+    curl -kO https://raw.githubusercontent.com/joyent/sdc-imgapi/master/bin/imgapi-standalone-reprovision
+    chmod +x imgapi-standalone-reprovision
+
+    ./imgapi-standalone-reprovision 98cf10d4-7550-11e6-8930-ef291247b988 latest
+
+
 This will handle importing the identified 'imgapi' image to the DC, tweaking
 its permissions, and reprovisioning the instance to the new image.
 
@@ -383,7 +395,7 @@ For example: if providing `manta`, one must provide the whole `manta` object.
 | ---------------------------- | ------------- | ----------------- | ----------- |
 | port                         | Number        | 8080              | Port number on which to listen. |
 | address                      | String        | 127.0.0.1         | Address on which to listen. |
-| serverName                   | String        | IMGAPI/$version   | Name of the HTTP server. This value is present on every HTTP response in the 'server' header. |
+| serverName                   | String        | imgapi/$version   | Name of the HTTP server. This value is present on every HTTP response in the 'Server' header. |
 | logLevel                     | String/Number | debug             | Level at which to log. One of the supported Bunyan log levels. This is overridden by the `-d,--debug` switch. |
 | maxSockets                   | Number        | 100               | Maximum number of sockets for external API calls |
 | mode                         | String        | public            | One of 'public' (default, running as a public server e.g. images.joyent.com), 'private' (a ironically "public" server that only houses images marked `public=false`), or 'dc' (running as the IMGAPI in a Triton DataCenter). |
@@ -467,6 +479,7 @@ These are called "setup config vars". At time of writing they are (see
 | mantaUrl     | manta.url |
 | mantaUser    | manta.user |
 | mantaBaseDir | manta.baseDir |
+| channels     | channels; This may also by the special value `standard`, which will be substituted by the "standard" channels (a set of channels used by updates.joyent.com). |
 
 
 # Storage
@@ -481,7 +494,7 @@ the `storageTypes` config var. For example:
     "manta": {
         "url": "https://us-east.manta.joyent.com",
         "user": "alice",
-        "key": "/data/imgapi/etc/imgapi-img7-37591570-20160831.id_rsa",
+        "key": "/data/imgapi/etc/imgapi-img7-37591570-20160831.id_ecdsa",
         "keyId": "SHA256:UlGQ8CXT0BIvJXq2IoPllUHUOTJUCwNLhsKMzdc8/30",
         "baseDir": "imgapi",
         "insecure": false,
diff --git a/etc/standalone/imgapi.config.json.handlebars b/etc/standalone/imgapi.config.json.handlebars
index 80f5d80..4418119 100644
--- a/etc/standalone/imgapi.config.json.handlebars
+++ b/etc/standalone/imgapi.config.json.handlebars
@@ -12,6 +12,10 @@
     },
     {{/if}}
 
+    {{#if channels}}
+    "channels": {{{channels}}},
+    {{/if}}
+
     "authType": "signature",
     "databaseType": "local",
     "storageTypes": [
diff --git a/etc/standalone/standard-channels.json b/etc/standalone/standard-channels.json
new file mode 100644
index 0000000..0c3b29c
--- /dev/null
+++ b/etc/standalone/standard-channels.json
@@ -0,0 +1,7 @@
+[
+    {"name": "experimental", "description": "feature-branch builds (warning: 'latest' isn't meaningful)"},
+    {"name": "dev", "description": "main development branch builds", "default": true},
+    {"name": "staging", "description": "staging for release branch builds before a full release"},
+    {"name": "release", "description": "release bits"},
+    {"name": "support", "description": "Joyent-supported release bits"}
+]
\ No newline at end of file
diff --git a/package.json b/package.json
index a00ca10..f5bd79f 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "imgapi",
   "description": "Image API to manage images for SDC 7",
-  "version": "3.2.2",
+  "version": "3.3.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
@@ -23,7 +23,7 @@
     "uuid": "2.0.2",
     "manta": "3.1.2",
     "manta-dir-watcher": "1.1.0",
-    "manta-sync": "0.4.0",
+    "manta-sync": "0.4.2",
     "memorystream": "0.2.0",
     "mkdirp": "0.3.5",
     "moray": "git+https://github.com/joyent/node-moray.git#fd5781bc25a9bfe2ba82167664639753fb9f0ca5",
@@ -36,7 +36,7 @@
     "rimraf": "2.2.6",
     "sdc-clients": "10.0.4",
     "semver": "3.0.1",
-    "sshpk": "1.10.0",
+    "sshpk": "1.13.0",
     "trace-event": "1.2.0",
     "ufds": "1.2.0",
     "vasync": "1.6.3",
diff --git a/sapi_manifests/imgapi/template b/sapi_manifests/imgapi/template
index d720b38..e54da9e 100644
--- a/sapi_manifests/imgapi/template
+++ b/sapi_manifests/imgapi/template
@@ -31,7 +31,7 @@
     "manta": {
         "url": "{{IMGAPI_MANTA_URL}}",
         "user": "{{IMGAPI_MANTA_USER}}",
-        "key": "/root/.ssh/imgapi.id_rsa",
+        "key": "/root/.ssh/imgapi.key",
         "keyId": "{{IMGAPI_KEY_ID}}",
         "insecure": {{IMGAPI_MANTA_INSECURE}},
         "remote": {{IMGAPI_MANTA_REMOTE}},
diff --git a/sapi_manifests/imgapi_private_key/manifest.json b/sapi_manifests/imgapi_private_key/manifest.json
index 4c4f95e..efe5ada 100644
--- a/sapi_manifests/imgapi_private_key/manifest.json
+++ b/sapi_manifests/imgapi_private_key/manifest.json
@@ -1,5 +1,5 @@
 {
     "name": "imgapi_private_key",
-    "path": "/root/.ssh/imgapi.id_rsa",
-    "post_cmd": "chmod 600 /root/.ssh/imgapi.id_rsa; chown nobody:nobody /root/.ssh/imgapi.id_rsa"
+    "path": "/root/.ssh/imgapi.key",
+    "post_cmd": "chmod 600 /root/.ssh/imgapi.key; chown nobody:nobody /root/.ssh/imgapi.key"
 }
diff --git a/sapi_manifests/imgapi_public_key/manifest.json b/sapi_manifests/imgapi_public_key/manifest.json
index 759f722..617233d 100644
--- a/sapi_manifests/imgapi_public_key/manifest.json
+++ b/sapi_manifests/imgapi_public_key/manifest.json
@@ -1,5 +1,5 @@
 {
     "name": "imgapi_public_key",
-    "path": "/root/.ssh/imgapi.id_rsa.pub",
-    "post_cmd": "chown nobody:nobody /root/.ssh/imgapi.id_rsa.pub"
+    "path": "/root/.ssh/imgapi.key.pub",
+    "post_cmd": "chown nobody:nobody /root/.ssh/imgapi.key.pub"
 }
diff --git a/tools/redeploy-staging-updatesjo.sh b/tools/redeploy-staging-updatesjo.sh
new file mode 100755
index 0000000..80e5bfe
--- /dev/null
+++ b/tools/redeploy-staging-updatesjo.sh
@@ -0,0 +1,215 @@
+#!/bin/bash
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# (Re-)deploy a staging version of updates.joyent.com to Joyent Engineering's
+# staging DC. This will use the latest "imgapi" image in the updates.joyent.com
+# *experimental* channel.
+#
+# Usage (from any machine with SSH access to the staging-1 DC):
+#
+#       ./tools/redeploy-staging-updatesjo.sh [OPTIONS]
+#
+# Note: Currently this is hardcoded to work for *trent's* setup.
+#
+
+if [ "$TRACE" != "" ]; then
+    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
+    set -o xtrace
+fi
+set -o errexit
+set -o pipefail
+
+
+# ---- config
+
+# Staging updates.jo config:
+SVC_NAME=stagingupdatesjo
+ALIAS=${SVC_NAME}0
+MBASEDIR=imgapi/${SVC_NAME}
+PACKAGE=t4-standard-2G
+
+# Use the Manta in Eng's staging
+export MANTA_URL=https://manta.staging.joyent.us
+export MANTA_USER=trent
+
+## Use Trent's *staging-1* Triton account.
+#export TRITON_PROFILE=env
+#export TRITON_ACCOUNT=trent
+#export TRITON_KEY_ID=SHA256:j2WoSeOWhFy69BQ0uCR3FAySp9qCZTSCEyT2vRKcL+s
+#export TRITON_URL=https://cloudapi.1.staging.joyent.us
+#unset TRITON_INSECURE
+
+SSH_OPTIONS="-q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
+if [[ -n "$TRACE" ]]; then
+    TRACE_OPT="-v"
+else
+    TRACE_OPT=""
+fi
+
+
+#---- support stuff
+
+function fatal
+{
+    echo "$0: fatal error: $*"
+    exit 1
+}
+
+function errexit
+{
+    [[ $1 -ne 0 ]] || exit 0
+    fatal "error exit status $1"
+}
+
+function usage
+{
+    echo "Usage:"
+    echo "    redeploy-staging-updatesjo.sh [OPTIONS...] HEADNODE TRITON-CLI-PROFILE"
+    echo ""
+    echo "Options:"
+    echo "    -h            Print this help and exit."
+    echo "    -C CHANNEL    Update.jo channel from which to pull latest image."
+    echo "                  Default is 'dev'."
+    echo ""
+    echo "where TRITON-CLI-PROFILE is a triton CLI profile name, which is"
+    echo "configured to talk to one of the engineering staging DCs."
+}
+
+
+# ---- mainline
+
+trap 'errexit $?' EXIT
+
+optChannel=dev
+while getopts "hC:" opt
+do
+    case "$opt" in
+        h)
+            usage
+            exit 0
+            ;;
+        C)
+            optChannel=$OPTARG
+            ;;
+        *)
+            usage
+            exit 1
+            ;;
+    esac
+done
+shift $((OPTIND - 1))
+
+export HEADNODE=$1
+[[ -n "$HEADNODE" ]] || fatal "missing HEADNODE arg"
+export TRITON_PROFILE=$2
+[[ -n "$TRITON_PROFILE" ]] || fatal "missing TRITON-CLI-PROFILE arg"
+
+profileUrl=$(triton profile get -j | json url)
+[[ "$profileUrl" == "https://cloudapi.1.staging.joyent.us" \
+    || "$profileUrl" == "https://cloudapi.2.staging.joyent.us" \
+    || "$profileUrl" == "https://cloudapi.3.staging.joyent.us" ]] \
+    || fatal "triton profile '$TRITON_PROFILE' is not for Joyent staging: url=$profileUrl"
+profileAccount=$(triton profile get -j | json account)
+profileKeyId=$(triton profile get -j | json keyId)
+
+
+echo "# Redeploying Staging updates.jo ($SVC_NAME)"
+
+echo ""
+echo "# Remove existing IMGAPI inst keys"
+triton keys -H -o name \
+    | (grep "^imgapi-$ALIAS-" || true) \
+    | xargs triton key rm -y
+
+# Ensure authkeys are in place ahead of the instance creation so they are
+# picked up on first startup.
+echo ""
+echo "# Deploy authkeys"
+mmkdir -p ~~/stor/$MBASEDIR/authkeys
+triton keys -A | mput ~~/stor/$MBASEDIR/authkeys/${profileAccount}.keys
+
+# Find and delete an existing instance.
+echo ""
+echo "# Delete existing deployment"
+triton ls name=$ALIAS -Ho id | xargs triton rm -w
+
+# Create the instance.
+echo ""
+echo "# Create new instance"
+ssh -T $SSH_OPTIONS $HEADNODE <<SCRIPT
+    if [[ -n "$TRACE" ]]; then
+        export PS4='\${BASH_SOURCE}:\${LINENO}: \${FUNCNAME[0]:+\${FUNCNAME[0]}(): }'
+        set -o xtrace
+    fi
+    set -o errexit
+    set -o pipefail
+
+    cd /var/tmp
+    curl -kOsS https://raw.githubusercontent.com/joyent/sdc-imgapi/master/bin/imgapi-standalone-create
+    chmod +x imgapi-standalone-create
+
+    ./imgapi-standalone-create \
+        -m mode=private \
+        -m channels=standard \
+        -m mantaUrl=$MANTA_URL \
+        -m mantaUser=$MANTA_USER \
+        -m mantaBaseDir=$MBASEDIR \
+        -t triton.cns.services=$SVC_NAME \
+        -C $optChannel \
+        $profileAccount latest $PACKAGE $ALIAS
+SCRIPT
+
+# Remove any old keys for this service, and add the new one.
+echo ""
+echo "# Add new deployed instance key to Manta account"
+triton inst get $ALIAS | json metadata.instPubKey | triton key add -
+
+# There currently isn't a good way to wait for a new key to make it through
+# Manta. Polling to check for a successful auth can pass on one request
+# and then fail later on another request if one hits separate Manta webapis.
+echo "Waiting for 2 minutes in hopes that Manta takes up the new key by then..."
+sleep 120
+
+# Step 4 (from IMGAPI Operator Guide): imgapi-standalone-restore
+echo ""
+echo "# Restore backups to new instance"
+triton ssh $ALIAS $SSH_OPTIONS <<SCRIPT2
+    if [[ -n "$TRACE" ]]; then
+        export PS4='\${BASH_SOURCE}:\${LINENO}: \${FUNCNAME[0]:+\${FUNCNAME[0]}(): }'
+        set -o xtrace
+    fi
+    set -o errexit
+    set -o pipefail
+
+    if [[ -f /data/imgapi/run/restored.marker ]]; then
+        exit 0
+    fi
+
+    /opt/smartdc/imgapi/bin/imgapi-standalone-restore -y $TRACE_OPT
+    exit 0
+SCRIPT2
+
+# Test it.
+echo ""
+echo "# Sanity test the deployment"
+export UPDATES_IMGADM_URL=https://$(triton inst get $ALIAS | json dns_names | json -a | grep svc.trent)
+export UPDATES_IMGADM_USER=$profileAccount
+export UPDATES_IMGADM_IDENTITY=$profileKeyId
+export UPDATES_IMGADM_INSECURE=1
+updates-imgadm ping
+# Don't die on images without "channels" support in setup config.
+updates-imgadm channels || true
+
+echo ""
+echo "# Staging updates.jo has been successfully deployed"
+echo "# 'updates-imgadm' environment for staging updates.jo"
+env | grep UPDATES_IMGADM | sed -e 's/^/export /'
diff --git a/tools/standalone/tritonlogupload.sh b/tools/standalone/tritonlogupload.sh
index 39e4e11..ff694aa 100755
--- a/tools/standalone/tritonlogupload.sh
+++ b/tools/standalone/tritonlogupload.sh
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright 2016 Joyent, Inc.
+# Copyright 2017 Joyent, Inc.
 #
 
 #
@@ -17,7 +17,7 @@
 # This is to allow log rotation to complete.
 #
 #       0 * * * * /usr/sbin/logadm -v >>/var/log/logadm.log 2>&1
-#       1 * * * * /.../tritonlogupload.sh -a 5 >>/var/log/tritonlogupload.log 2>&1
+#       1 * * * * /opt/smartdc/imgapi/bin/tritonlogupload.sh -a 5 >>/var/log/tritonlogupload.log 2>&1
 #
 # Currently this is hardcoded for standalone IMGAPI usage, getting
 # manta config info from $CONFIG. TODO: generalize this.
