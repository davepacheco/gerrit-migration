commit d88c5714cfffed874e77e1186d0f0fffb92f7d09 (refs/changes/40/1340/2)
Author: Julien Gilli <julien.gilli@joyent.com>
Date:   2017-01-27T18:00:26+00:00 (2 years, 8 months ago)
    
    joyent/mdb_v8#77 Node v6.6.0 issues
    Reviewed by: David Pacheco <dap@joyent.com>
    Approved by: Julien Gilli <julien.gilli@joyent.com>

diff --git a/CHANGES.md b/CHANGES.md
index 169e238..ce71ca7 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -12,6 +12,7 @@
 
 ## Unreleased changes
 
+* #77 Node v6.6.0 issues
 * #72: tests cannot run on non-release versions of node
 
 ## v1.1.3 (2016-06-03)
diff --git a/src/mdb_v8.c b/src/mdb_v8.c
index 1227c85..9790adb 100644
--- a/src/mdb_v8.c
+++ b/src/mdb_v8.c
@@ -95,6 +95,7 @@ static ssize_t	V8_OFF_FP_CONTEXT;
 static ssize_t	V8_OFF_FP_MARKER;
 static ssize_t	V8_OFF_FP_FUNCTION;
 static ssize_t	V8_OFF_FP_ARGS;
+static ssize_t	V8_OFF_FP_CONTEXT_OR_FRAME_TYPE;
 
 /*
  * The following constants are used by macros defined in heap-dbg-common.h to
@@ -221,6 +222,7 @@ ssize_t V8_OFF_SHAREDFUNCTIONINFO_SCOPE_INFO;
 ssize_t V8_OFF_SHAREDFUNCTIONINFO_END_POSITION;
 ssize_t V8_OFF_SHAREDFUNCTIONINFO_FUNCTION_TOKEN_POSITION;
 ssize_t V8_OFF_SHAREDFUNCTIONINFO_INFERRED_NAME;
+ssize_t V8_OFF_SHAREDFUNCTIONINFO_IDENTIFIER;
 ssize_t V8_OFF_SHAREDFUNCTIONINFO_LENGTH;
 ssize_t V8_OFF_SHAREDFUNCTIONINFO_SCRIPT;
 ssize_t V8_OFF_SHAREDFUNCTIONINFO_NAME;
@@ -270,9 +272,17 @@ typedef struct v8_constant {
 } v8_constant_t;
 
 static v8_constant_t v8_constants[] = {
+	{ &V8_OFF_FP_CONTEXT_OR_FRAME_TYPE,
+		"v8dbg_off_fp_context_or_frame_type",
+#ifdef _LP64
+		V8_CONSTANT_FALLBACK(5, 1), -0x8 },
+#else
+		V8_CONSTANT_FALLBACK(5, 1), -0x4 },
+#endif
 	{ &V8_OFF_FP_CONTEXT,		"v8dbg_off_fp_context"		},
 	{ &V8_OFF_FP_FUNCTION,		"v8dbg_off_fp_function"		},
-	{ &V8_OFF_FP_MARKER,		"v8dbg_off_fp_marker"		},
+	{ &V8_OFF_FP_MARKER,		"v8dbg_off_fp_marker",
+	    V8_CONSTANT_REMOVED_SINCE(5, 1)		},
 	{ &V8_OFF_FP_ARGS,		"v8dbg_off_fp_args"		},
 
 	{ &V8_FirstNonstringType,	"v8dbg_FirstNonstringType"	},
@@ -489,7 +499,17 @@ static v8_offset_t v8_offsets[] = {
 	{ &V8_OFF_SHAREDFUNCTIONINFO_FUNCTION_TOKEN_POSITION,
 	    "SharedFunctionInfo", "function_token_position" },
 	{ &V8_OFF_SHAREDFUNCTIONINFO_INFERRED_NAME,
-	    "SharedFunctionInfo", "inferred_name" },
+	    "SharedFunctionInfo", "inferred_name",
+		V8_CONSTANT_REMOVED_SINCE(5, 1) },
+#ifdef _LP64
+	{ &V8_OFF_SHAREDFUNCTIONINFO_IDENTIFIER,
+	    "SharedFunctionInfo", "function_identifier",
+		V8_CONSTANT_FALLBACK(5, 1), 79},
+#else
+	{ &V8_OFF_SHAREDFUNCTIONINFO_IDENTIFIER,
+	    "SharedFunctionInfo", "function_identifier",
+		V8_CONSTANT_FALLBACK(5, 1), 39},
+#endif
 	{ &V8_OFF_SHAREDFUNCTIONINFO_LENGTH,
 	    "SharedFunctionInfo", "length" },
 	{ &V8_OFF_SHAREDFUNCTIONINFO_NAME,
@@ -1021,6 +1041,32 @@ again:
 		V8_OFF_JSOBJECT_PROPERTIES = V8_OFF_JSRECEIVER_PROPERTIES;
 	}
 
+	/*
+	 * Starting with V8 5.1.71 (and node v6.5.0), the value that identifies
+	 * the type of an internal frame is stored at offset
+	 * V8_OFF_FP_CONTEXT_OR_FRAME_TYPE. See
+	 * https://codereview.chromium.org/1696043002. If the value of that
+	 * offset is -1, it means we're in the presence of an older version of
+	 * V8, and we fall back to the previous offset used to retrieve that
+	 * value, which is V8_OFF_FP_MARKER.
+	 */
+	if (V8_OFF_FP_CONTEXT_OR_FRAME_TYPE == -1) {
+		V8_OFF_FP_CONTEXT_OR_FRAME_TYPE = V8_OFF_FP_MARKER;
+	}
+
+	/*
+	 * Starting with V8 5.1.162 (and node v6.5.0), the SharedFunctionInfo's
+	 * "inferred_name"" field was renamed to "function_identifier" (See
+	 * https://codereview.chromium.org/1801023002). If the value of
+	 * V8_OFF_SHAREDFUNCTIONINFO_IDENTIFIER is -1, it means we're in the
+	 * presence of an older V8 version, and we should use the original
+	 * offset.
+	 */
+	if (V8_OFF_SHAREDFUNCTIONINFO_IDENTIFIER == -1) {
+		V8_OFF_SHAREDFUNCTIONINFO_IDENTIFIER =
+		    V8_OFF_SHAREDFUNCTIONINFO_INFERRED_NAME;
+	}
+
 	return (failed ? -1 : 0);
 }
 
@@ -4227,6 +4273,7 @@ do_jsframe_special(uintptr_t fptr, uintptr_t raddr, jsframe_t *jsf)
 	uintptr_t ftype;
 	const char *ftypename;
 	char *prop = jsf->jsf_prop;
+	uintptr_t internal_frametype_addr;
 
 	/*
 	 * First see if this looks like a native frame rather than a JavaScript
@@ -4253,10 +4300,21 @@ do_jsframe_special(uintptr_t fptr, uintptr_t raddr, jsframe_t *jsf)
 	}
 
 	/*
-	 * Figure out what kind of frame this is using the same algorithm as
-	 * V8's ComputeType function.  First, look for an ArgumentsAdaptorFrame.
+	 * Figure out what kind of internal frame this is using the same
+	 * algorithm as V8's ComputeType function.
+	 */
+
+	/*
+	 * With versions of V8 < 5.1.71 (and node < v6.5.0), an ArgumentsAdaptor
+	 * frame was marked by a specific SMI value at an address equivalent to
+	 * the frame pointer + context offset, which is a different offset than
+	 * the one used to determine the type of other internal frames. For
+	 * later versions of V8, all internal (special) frames are identified
+	 * by a value at the same offset, so there's no need to special case
+	 * ArgumentsAdaptor frames.
 	 */
-	if (mdb_vread(&ftype, sizeof (ftype), fptr + V8_OFF_FP_CONTEXT) != -1 &&
+	if (v8_version_current_older(5, 1, 0, 0) &&
+	    mdb_vread(&ftype, sizeof (ftype), fptr + V8_OFF_FP_CONTEXT) != -1 &&
 	    V8_IS_SMI(ftype) &&
 	    (ftypename = enum_lookup_str(v8_frametypes, V8_SMI_VALUE(ftype),
 	    NULL)) != NULL && strstr(ftypename, "ArgumentsAdaptor") != NULL) {
@@ -4265,17 +4323,16 @@ do_jsframe_special(uintptr_t fptr, uintptr_t raddr, jsframe_t *jsf)
 
 		if (jsf->jsf_showall) {
 			jsframe_print_skipped(jsf);
-			mdb_printf("%p %a <%s>\n", fptr, raddr, ftypename);
+			mdb_printf("%p %a <%s>\n", fptr, raddr,
+			    ftypename);
 		} else {
 			jsframe_skip(jsf);
 		}
 		return (0);
 	}
 
-	/*
-	 * Other special frame types are indicated by a marker.
-	 */
-	if (mdb_vread(&ftype, sizeof (ftype), fptr + V8_OFF_FP_MARKER) != -1 &&
+	internal_frametype_addr = fptr + V8_OFF_FP_CONTEXT_OR_FRAME_TYPE;
+	if (mdb_vread(&ftype, sizeof (ftype), internal_frametype_addr) != -1 &&
 	    V8_IS_SMI(ftype)) {
 		if (prop != NULL)
 			return (0);
diff --git a/src/mdb_v8_function.c b/src/mdb_v8_function.c
index 995d04b..a6da0f1 100644
--- a/src/mdb_v8_function.c
+++ b/src/mdb_v8_function.c
@@ -270,7 +270,7 @@ v8funcinfo_load(uintptr_t funcinfo, int memflags)
 	}
 
 	if (read_heap_ptr(&inferred_name, funcinfo,
-	    V8_OFF_SHAREDFUNCTIONINFO_INFERRED_NAME) != 0) {
+	    V8_OFF_SHAREDFUNCTIONINFO_IDENTIFIER) != 0) {
 		inferred_name = 0;
 	}
 
diff --git a/src/mdb_v8_impl.h b/src/mdb_v8_impl.h
index eba7235..b57528e 100644
--- a/src/mdb_v8_impl.h
+++ b/src/mdb_v8_impl.h
@@ -84,6 +84,7 @@ extern ssize_t V8_OFF_SEQTWOBYTESTR_CHARS;
 extern ssize_t V8_OFF_SHAREDFUNCTIONINFO_CODE;
 extern ssize_t V8_OFF_SHAREDFUNCTIONINFO_SCOPE_INFO;
 extern ssize_t V8_OFF_SHAREDFUNCTIONINFO_INFERRED_NAME;
+extern ssize_t V8_OFF_SHAREDFUNCTIONINFO_IDENTIFIER;
 extern ssize_t V8_OFF_SHAREDFUNCTIONINFO_FUNCTION_TOKEN_POSITION;
 extern ssize_t V8_OFF_SHAREDFUNCTIONINFO_NAME;
 extern ssize_t V8_OFF_SHAREDFUNCTIONINFO_SCRIPT;
diff --git a/test/standalone/tst.postmortem_jsstack.js b/test/standalone/tst.postmortem_jsstack.js
index cc0f22d..59de5c6 100644
--- a/test/standalone/tst.postmortem_jsstack.js
+++ b/test/standalone/tst.postmortem_jsstack.js
@@ -14,6 +14,11 @@ var os = require('os');
 var path = require('path');
 var util = require('util');
 
+var getRuntimeVersions = require('../lib/runtime-versions').getRuntimeVersions;
+
+var RUNTIME_VERSIONS = getRuntimeVersions();
+var V8_VERSION = RUNTIME_VERSIONS.V8;
+
 /*
  * Some functions to create a recognizable stack.
  */
@@ -85,7 +90,22 @@ dtrace.on('exit', function (code) {
 			process.exit(code2);
 		}
 
-		var sentinel = '<anonymous> (as ';
+		var sentinel = 'js:     ';
+		/*
+		 * Starting with https://codereview.chromium.org/1749353004 and
+		 * V8 5.1.39, function definitions of the following form:
+		 *
+		 * var foo = function () {}
+		 *
+		 * don't only have an inferred name, but also an actual name.
+		 * As a result, their representation by mdb_v8's ::jsstack
+		 * command doesn't include the "<anonymous> as " prefix.
+		 */
+		if (V8_VERSION.major < 5 ||
+		    (V8_VERSION.major === 5 && V8_VERSION.minor < 1)) {
+			sentinel += '<anonymous> (as ';
+		}
+
 		var arg1 = '          arg1: ';
 		var lines = output.split('\n');
 		var matched = 0;
diff --git a/tools/runtests_node b/tools/runtests_node
index 9616882..c502fda 100755
--- a/tools/runtests_node
+++ b/tools/runtests_node
@@ -10,7 +10,7 @@ set -o pipefail
 #
 # Static configuration: Node versions to setup and test.
 #
-rn_versions="0.10.43 0.12.12 4.4.0 5.9.0 6.0.0"
+rn_versions="0.10.43 0.12.12 4.4.0 5.9.0 6.0.0 6.6.0 6.9.4 7.4.0"
 rn_platform="sunos"
 rn_arches="x86 x64"
 rn_nodebase="https://nodejs.org/dist"
