commit d0876b9032fb68008907c862680a4c6c5b1786f9 (refs/changes/05/4805/5)
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2018-09-25T16:33:06+02:00 (1 year ago)
    
    TRITON-759 CloudAPI configuration to support bhyve VM snapshots
    Reviewed by: Mike Gerdts <mike.gerdts@joyent.com>

diff --git a/.gitignore b/.gitignore
index 8cd521a..958712f 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,3 +16,4 @@ etc/cloudapi.cfg
 smf/manifests/*.xml
 npm-shrinkwrap.json.old
 /tmp
+*.vim
diff --git a/lib/snapshots.js b/lib/snapshots.js
index 587757b..2206047 100644
--- a/lib/snapshots.js
+++ b/lib/snapshots.js
@@ -107,6 +107,14 @@ function create(req, res, next) {
     var vmUuid = params.machine;
     var name = params.name || snapshotName();
 
+    if (req.machine.brand === 'bhyve') {
+        if (!req.config.experimental_cloudapi_bhyve_snapshots) {
+            next(new restify.InvalidArgumentError(
+                'Snapshots of bhyve VMs are not allowed'));
+            return;
+        }
+    }
+
     vmapi.snapshotVm({
         uuid: vmUuid,
         name: name,
diff --git a/sapi_manifests/cloudapi/template b/sapi_manifests/cloudapi/template
index fc09b6d..1bac06e 100644
--- a/sapi_manifests/cloudapi/template
+++ b/sapi_manifests/cloudapi/template
@@ -77,6 +77,9 @@
         "url": "http://volapi.{{{datacenter_name}}}.{{{dns_domain}}}"
     },
 {{/experimental_cloudapi_nfs_shared_volumes}}
+{{#experimental_cloudapi_bhyve_snapshots}}
+    "experimental_cloudapi_bhyve_snapshots": {{{experimental_cloudapi_bhyve_snapshots}}},
+{{/experimental_cloudapi_bhyve_snapshots}}
     "cueballHttpAgent": {
         "resolvers": ["{{{BINDER_SERVICE}}}"],
         "initialDomains": [
diff --git a/test/common.js b/test/common.js
index 6697db3..1617ab0 100644
--- a/test/common.js
+++ b/test/common.js
@@ -54,6 +54,18 @@ var SDC_128_PACKAGE = {
     active: true
 };
 
+var KVM_128_PACKAGE = Object.assign({}, SDC_128_PACKAGE, {
+    uuid: 'e70c5264-b7e5-11e8-90a4-6b259cf00b80',
+    brand: 'kvm',
+    name: 'sdc_128_kvm'
+});
+
+var BHYVE_128_PACKAGE = Object.assign({}, SDC_128_PACKAGE, {
+    uuid: 'e83d57d2-b7e5-11e8-84bb-7be61e455e35',
+    brand: 'bhyve',
+    name: 'sdc_128_bhyve'
+});
+
 var PASSWD = 'secret123';
 var DEFAULT_CFG = path.join(__dirname, '..', '/etc/cloudapi.cfg');
 
@@ -1242,6 +1254,8 @@ module.exports = {
     removeTagsFromServer: removeTagsFromServer,
 
     sdc_128_package: SDC_128_PACKAGE,
+    kvm_128_package: KVM_128_PACKAGE,
+    bhyve_128_package: BHYVE_128_PACKAGE,
 
     getCfg: function () {
         return CONFIG;
diff --git a/test/machines.70.test.js b/test/machines.70.test.js
index f2a9fa6..5879f66 100644
--- a/test/machines.70.test.js
+++ b/test/machines.70.test.js
@@ -8,13 +8,15 @@
  * Copyright (c) 2018, Joyent, Inc.
  */
 
+
 var util = require('util');
 var test = require('@smaller/tap').test;
 var common = require('./common');
 var uuid = common.uuid;
+var addPackage = common.addPackage;
 var machinesCommon = require('./machines/common');
 var checkMachine = machinesCommon.checkMachine;
-
+var mod_config = require('../lib/config.js');
 
 // --- Globals
 
@@ -25,14 +27,17 @@ var SERVER_UUID;
 var IMAGE_UUID;
 var MACHINE_UUID;
 
-var LINUX_IMAGE_UUID;
+var KVM_IMAGE_UUID;
+var BHYVE_IMAGE_UUID;
 var KVM_MACHINE_UUID;
+var BHYVE_MACHINE_UUID;
 
 var CLIENTS;
 var CLIENT;
 var OTHER;
 var SERVER;
 
+var CONFIG = mod_config.configure();
 
 // --- Tests
 
@@ -77,7 +82,7 @@ test('Create machine with invalid package', function (t) {
         server_uuid: SERVER_UUID
     };
 
-    CLIENT.post('/my/machines', obj, function (err, req, res, body) {
+    CLIENT.post('/my/machines', obj, function (err, req, res, _body) {
         t.ok(err, 'POST /my/machines with invalid package error');
         console.log('Status Code: ' + res.statusCode);
         t.equal(res.statusCode, 409);
@@ -93,7 +98,7 @@ test('CreateMachine w/o dataset fails', function (t) {
         server_uuid: SERVER_UUID
     };
 
-    CLIENT.post('/my/machines', obj, function (err, req, res, body) {
+    CLIENT.post('/my/machines', obj, function (err, req, res, _body) {
         t.ok(err, 'create machine w/o dataset error');
         t.equal(res.statusCode, 409, 'create machine w/o dataset status');
         t.ok(/image/.test(err.message));
@@ -111,7 +116,7 @@ test('Create machine with invalid network', function (t) {
         networks: [uuid()]
     };
 
-    CLIENT.post('/my/machines', obj, function (err, req, res, body) {
+    CLIENT.post('/my/machines', obj, function (err, req, res, _body) {
         t.ok(err, 'POST /my/machines with invalid network error');
         console.log('Status Code: ' + res.statusCode);
         t.equal(res.statusCode, 409);
@@ -208,30 +213,57 @@ test('Delete tests', function (t) {
 
 
 test('KVM image', function (t) {
-    CLIENT.get('/my/images?os=linux', function (er1, req1, res1, body1) {
-        t.ifError(er1, 'GET /my/images error');
-        t.equal(res1.statusCode, 200, 'GET /my/images status');
-        common.checkHeaders(t, res1.headers);
-        t.ok(body1, 'GET /my/images body');
-        t.ok(Array.isArray(body1), 'GET /my/images body is an array');
+    // Make sure we're not getting an lx-branded image instead
+    // of a KVM/bhyve one. Note that starting with images built
+    // after 20180819 the same images can be used for both of them;
+    // therefore we're trying to pick latest available image, instead
+    // of first one.
+    CLIENT.get('/my/images?os=linux', function (err, req, res, body) {
+        t.ifError(err, 'GET /my/images error');
+        t.equal(res.statusCode, 200, 'GET /my/images status');
+        common.checkHeaders(t, res.headers);
+        t.ok(body, 'GET /my/images body');
+        t.ok(Array.isArray(body), 'GET /my/images body is an array');
         // Do nothing if we haven't got a Linux image already imported
-        if (body1.length === 0) {
+        if (body.length === 0) {
             console.log('No KVM images imported, skipping KVM provisioning');
         } else {
-            LINUX_IMAGE_UUID = body1[0].id;
+            var nonLxImages = body.filter(function avoidLx(img) {
+                return (img.type !== 'smartmachine');
+            });
+            const kvmImage = nonLxImages.pop();
+            KVM_IMAGE_UUID = kvmImage.id;
+            if (kvmImage.published_at >= '2018-08-19T00:00:00Z') {
+                BHYVE_IMAGE_UUID = KVM_IMAGE_UUID;
+            }
         }
         t.end();
     });
 });
 
+test('Create KVM & bhyve packages', function (t) {
+    if (KVM_IMAGE_UUID) {
+        addPackage(CLIENT, common.kvm_128_package, function addPkgCb(err) {
+            t.ifError(err, 'Add package error');
+            addPackage(CLIENT, common.bhyve_128_package,
+                function addBhyvePkgCb(bhyveErr) {
+                t.ifError(bhyveErr, 'Add package error');
+                t.end();
+            });
+        });
+    } else {
+        t.end();
+    }
+});
 
 test('Create KVM machine', function (t) {
-    if (LINUX_IMAGE_UUID) {
+    if (KVM_IMAGE_UUID) {
         var obj = {
-            image: LINUX_IMAGE_UUID,
-            package: SDC_128.name,
+            image: KVM_IMAGE_UUID,
+            package: common.kvm_128_package.name,
             name: 'a' + uuid().substr(0, 7),
-            server_uuid: SERVER_UUID
+            server_uuid: SERVER_UUID,
+            brand: 'kvm'
         };
 
         CLIENT.post('/my/machines', obj, function (err, req, res, body) {
@@ -287,6 +319,98 @@ test('Delete KVM tests', function (t) {
 });
 
 
+test('Create bhyve machine', function (t) {
+    if (BHYVE_IMAGE_UUID) {
+        var obj = {
+            image: BHYVE_IMAGE_UUID,
+            package: common.bhyve_128_package.name,
+            name: 'a' + uuid().substr(0, 7),
+            server_uuid: SERVER_UUID,
+            brand: 'bhyve'
+        };
+
+        CLIENT.post('/my/machines', obj, function (err, req, res, body) {
+            t.ifError(err, 'POST /my/machines error');
+            t.equal(res.statusCode, 201, 'POST /my/machines status');
+            common.checkHeaders(t, res.headers);
+            t.equal(res.headers.location,
+                util.format('/%s/machines/%s', CLIENT.login, body.id));
+            t.ok(body, 'POST /my/machines body');
+            checkMachine(t, body);
+
+            BHYVE_MACHINE_UUID = body.id;
+
+            // Handy to output this to stdout in order to poke around COAL:
+            console.log('Requested provision of bhyve machine: %s',
+                        BHYVE_MACHINE_UUID);
+            t.end();
+        });
+    } else {
+        t.end();
+    }
+});
+
+
+test('Wait For bhyve machine Running', function (t) {
+    if (!BHYVE_MACHINE_UUID) {
+        t.end();
+        return;
+    }
+    machinesCommon.waitForRunningMachine(
+        CLIENT,
+        BHYVE_MACHINE_UUID,
+        function (err) {
+            t.ifError(err);
+            if (err) {
+                // Skip machine tests when machine creation fails
+                BHYVE_MACHINE_UUID = false;
+            }
+            t.end();
+        });
+});
+
+// FIXME: To be removed once bhyve snapshots are enabled by default
+test('Bhyve machine snapshots', function (t) {
+    if (!BHYVE_MACHINE_UUID) {
+        t.end();
+        return;
+    }
+    CLIENT.post('/my/machines/' + BHYVE_MACHINE_UUID + '/snapshots', {
+        name: 'test-bhyve-snapshot'
+    }, function (err, req, res, _body) {
+        if (CONFIG.experimental_cloudapi_bhyve_snapshots) {
+            // TODO: Modify to test the proper snapshot output, wait for it
+            // to complete and remove the snapshot once we have everything
+            // ready to go
+            t.ok(err);
+            t.equal(err.restCode, 'BrandNotSupported');
+            t.equal(err.message,
+                'snapshots are not supported for VMs of brand "bhyve"');
+            t.equal(res.statusCode, 409);
+            t.end();
+        } else {
+            t.ok(err);
+            t.equal(err.restCode, 'InvalidArgument');
+            t.equal(err.message, 'Snapshots of bhyve VMs are not allowed');
+            t.equal(res.statusCode, 409);
+            t.end();
+        }
+    });
+});
+
+
+test('Delete bhyve test vm', function (t) {
+    if (BHYVE_MACHINE_UUID) {
+        var deleteTest = require('./machines/delete');
+        deleteTest(t, CLIENT, OTHER, BHYVE_MACHINE_UUID, function () {
+            t.end();
+        });
+    } else {
+        t.end();
+    }
+});
+
+
 test('teardown', function (t) {
     common.teardown(CLIENTS, SERVER, function (err) {
         t.ifError(err, 'teardown success');
