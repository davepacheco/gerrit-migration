From b0e5cb51a2ce1e1ca67482e7ef27e68dc3309645 Mon Sep 17 00:00:00 2001
From: Dave Eddy <dave@daveeddy.com>
Date: Mon, 13 Mar 2017 12:34:56 -0400
Subject: [PATCH] OS-6005 VM.update should wait for zones' metadata service to
 restart

---
 src/vm/man/vmadm.1m.md      |  4 +++
 src/vm/node_modules/VM.js   | 61 +++++++++++++++++++++++++++++++------
 src/vm/tests/test-routes.js |  9 ++++--
 src/vm/tests/test-tmpfs.js  |  6 ++--
 4 files changed, 65 insertions(+), 15 deletions(-)

diff --git a/src/vm/man/vmadm.1m.md b/src/vm/man/vmadm.1m.md
index 80e69174..9e5470b4 100644
--- a/src/vm/man/vmadm.1m.md
+++ b/src/vm/man/vmadm.1m.md
@@ -438,6 +438,10 @@ tab-complete UUIDs rather than having to type them out for every command.
         restarted. Other properties will require a reboot in order to take
         effect.
 
+        If the VM is running when an update is made, the 'mdata:fetch' service
+        inside the zone will be restarted - the service will be enabled
+        regardless of its prior state during the update.
+
      validate create [-f <filename>]
      validate update <brand> [-f <filename>]
 
diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index 78f50f7c..90a1d472 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -142,6 +142,7 @@ var MAX_SNAPNAME_LENGTH = 64;
 var MINIMUM_MAX_SWAP = 256;
 var PROVISION_TIMEOUT = 300;
 var STOP_TIMEOUT = 60;
+var SERVICE_RESTART_TIMEOUT = 60;
 var VM = this;
 
 
@@ -12609,7 +12610,6 @@ function updateFirewallData(payload, vmobj, vmlog, callback)
 }
 
 function restartMetadataService(vmobj, payload, log, callback) {
-    var args;
     var tracers_obj;
 
     assert(log, 'no logger passed to restartMetadataService()');
@@ -12644,16 +12644,59 @@ function restartMetadataService(vmobj, payload, log, callback) {
 
     log.debug('restarting metadata service for: ' + vmobj.uuid);
 
-    args = [vmobj.zonename, '/usr/sbin/svcadm', 'restart',
-        'svc:/smartdc/mdata:fetch'];
-    traceExecFile('/usr/sbin/zlogin', args, log, 'svcadm-restart-metadata',
-        function (err, svc_stdout, svc_stderr) {
+    // until `svcadm restart` supports -s, we stop and start the service
+    // manually to ensure the service is up (or has failed) before moving
+    // on.
+    vasync.pipeline({funcs: [
+        function (_, cb) {
+            // disable metadata only temporarily
+            var args = [
+                vmobj.zonename,
+                '/usr/sbin/svcadm',
+                'disable',
+                '-st',
+                'svc:/smartdc/mdata:fetch'
+            ];
+            var opts = {
+                timeout: SERVICE_RESTART_TIMEOUT * 1000
+            };
+            traceExecFile('/usr/sbin/zlogin', args, opts, log,
+                'svcadm-disable-metadata', function (err, stdout, stderr) {
+
+                if (err) {
+                    err.stdout = stdout;
+                    err.stderr = stderr;
+                }
+                cb(err);
+            });
+        }, function (_, cb) {
+            // (re)enable metadata
+            var args = [
+                vmobj.zonename,
+                '/usr/sbin/svcadm',
+                'enable',
+                '-s',
+                'svc:/smartdc/mdata:fetch'
+            ];
+            var opts = {
+                timeout: SERVICE_RESTART_TIMEOUT * 1000
+            };
+            traceExecFile('/usr/sbin/zlogin', args, opts, log,
+                'svcadm-enable-metadata', function (err, stdout, stderr) {
 
+                if (err) {
+                    err.stdout = stdout;
+                    err.stderr = stderr;
+                }
+                cb(err);
+            });
+        }
+    ]}, function (err) {
+        // errors here are not fatal, as they will be fixed on reboot
         if (err) {
-            log.error({'err': err, 'stdout': svc_stdout,
-                'stderr': svc_stderr}, 'zlogin for ' + vmobj.zonename
-                + ' exited with code' + err.code + err.message);
-            // error here is not fatal as this should be fixed on reboot
+            log.error({err: err, stdout: err.stdout, stderr: err.stderr},
+            'zlogin for %s exited with code %d: %s',
+            vmobj.zonename, err.code, err.message);
         }
 
         callback();
diff --git a/src/vm/tests/test-routes.js b/src/vm/tests/test-routes.js
index 172a939b..3fa231c2 100644
--- a/src/vm/tests/test-routes.js
+++ b/src/vm/tests/test-routes.js
@@ -1,4 +1,4 @@
-// Copyright 2015 Joyent, Inc.  All rights reserved.
+// Copyright 2017 Joyent, Inc.
 //
 // Tests for specifying static routes
 //
@@ -157,6 +157,8 @@ function validateZoneData(t, vm, opts, callback) {
     var vmadmRoutes = opts.vmadmRoutes;
     var zoneRoutes = opts.inZoneRoutes;
     var routingTable = opts.routingTable;
+    var waitForServiceRestart = opts.hasOwnProperty('waitForServiceRestart')
+        ? opts.waitForServiceRestart : true;
     var i = 0;
     var interval = 1000;
     var timeout;
@@ -185,7 +187,7 @@ function validateZoneData(t, vm, opts, callback) {
                 return;
             }
 
-            if (time != LAST_METADATA_RESTART_TIME) {
+            if (!waitForServiceRestart || time !== LAST_METADATA_RESTART_TIME) {
                 // Service has restarted: wait a little longer for it to
                 // finish
                 timeout = setTimeout(function () {
@@ -806,7 +808,8 @@ test('update routes and resolvers', function(t) {
                 resolvers: resolvers,
                 vmadmRoutes: vmadmRoutes,
                 inZoneRoutes: inZoneRoutes,
-                routingTable: routingTable
+                routingTable: routingTable,
+                waitForServiceRestart: false
             }, cb);
         },
 
diff --git a/src/vm/tests/test-tmpfs.js b/src/vm/tests/test-tmpfs.js
index 20531dba..449f5073 100644
--- a/src/vm/tests/test-tmpfs.js
+++ b/src/vm/tests/test-tmpfs.js
@@ -191,6 +191,9 @@ test('test with tmpfs=0', function (t) {
 
     vmtest.on_new_vm(t, image_uuid, payload, state, [
         function (cb) {
+            // wait for mdata:fetch
+            waitForSvc(t, state.uuid, 'svc:/smartdc/mdata:fetch', 'online', cb);
+        }, function (cb) {
             checkTmpfs(0, 'check that tmpfs === 0', cb);
         }, function (cb) {
             checkZoneState({}, 'zone files/mounts have no tmpfs', cb);
@@ -199,9 +202,6 @@ test('test with tmpfs=0', function (t) {
                 t.ok(!err, 'updated VM with tmpfs=256');
                 cb(err);
             });
-        }, function (cb) {
-            // wait for mdata:fetch
-            waitForSvc(t, state.uuid, 'svc:/smartdc/mdata:fetch', 'online', cb);
         }, function (cb) {
             // Should be 256 value in the object
             checkTmpfs(256, 'check that tmpfs === 256 after update', cb);
-- 
2.21.0

