commit 730c1a545ebfcd13640901c00d3368009f25ff6c (refs/changes/28/2128/3)
Author: Nick Zivkovic <nick.zivkovic@joyent.com>
Date:   2017-06-29T22:06:18+00:00 (2 years, 3 months ago)
    
    TOOLS-1796 Warden should have string validation functions
    Reviewed by: Cody Peter Mello <cody.mello@joyent.com>
    Approved by: Cody Peter Mello <cody.mello@joyent.com>

diff --git a/lib/constants.js b/lib/constants.js
index d2c7a63..28240f2 100644
--- a/lib/constants.js
+++ b/lib/constants.js
@@ -19,6 +19,7 @@ var MESSAGES = {
     ARRAY_OF_STR: 'must be an array of strings',
     ARRAY_EMPTY: 'must not be an empty array',
     STR: 'must be a string',
+    STR_EMPTY: 'must not be empty',
     INVALID_UUID: 'invalid UUID',
     UNKNOWN_PARAMS: 'Unknown parameters',
     PARAMETERS_ARE_OBJECTS: 'Parameters must be objects',
diff --git a/lib/validate.js b/lib/validate.js
index af51327..e8ef55b 100644
--- a/lib/validate.js
+++ b/lib/validate.js
@@ -239,6 +239,9 @@ module.exports = {
     fieldsArray: validators.fieldsArray,
     IParray: validators.IParray,
     IP: validators.IP,
+    string: validators.string,
+    stringArray: validators.stringArray,
+    stringOrArray: validators.stringOrArray,
     subnet: validators.subnet,
     subnetArray: validators.subnetArray,
     UUID: validators.UUID,
diff --git a/lib/validators.js b/lib/validators.js
index 85f3eec..d02ca36 100644
--- a/lib/validators.js
+++ b/lib/validators.js
@@ -41,6 +41,7 @@ var ipaddr = require('ip6addr');
  */
 
 var UUID_RE = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
+var STR_RE = /\s/g;
 
 /*
  * Validates an array of (one or more) IP addresses
@@ -332,6 +333,74 @@ function validateLimit(_, name, val, callback) {
     callback(null, id);
 }
 
+/*
+ * Validates a string: ensures it's not empty
+ */
+function validateString(_, name, str, callback) {
+    if (typeof (str) !== 'string') {
+        callback(new errors.invalidParam(name, constants.msg.STR));
+        return;
+    }
+
+    if (str.length > constants.MAX_STR_LEN) {
+        callback(new errors.invalidParam(name,
+            fmt('must not be longer than %d characters',
+                constants.MAX_STR_LEN)));
+        return;
+    }
+
+    if (str.replace(STR_RE, '') === '') {
+        callback(new errors.invalidParam(name, constants.msg.STR_EMPTY));
+        return;
+    }
+
+    callback(null, str);
+}
+
+/*
+ * Validates something is either a string or an array of strings.
+ */
+function validateStringOrArray(_, name, val, callback) {
+    validateString(null, name, val, function (err, vals) {
+        if (err) {
+            validateStringArray(null, name, val, callback);
+            return;
+        } else {
+            callback(null, vals);
+            return;
+        }
+    });
+}
+
+function validateStringArray(_, name, vals, callback) {
+    if (!Array.isArray(vals)) {
+        callback(new errors.invalidParam(name,
+            constants.msg.ARRAY_OF_STR));
+        return;
+    }
+
+    if (vals.length === 0) {
+        callback(new errors.invalidParam(name,
+            constants.msg.ARRAY_EMPTY));
+        return;
+    }
+
+    for (var i = 0; i < vals.length; i++) {
+        var v = vals[i];
+        if (typeof (v) !== 'string') {
+            callback(new errors.invalidParam(name,
+                constants.msg.ARRAY_OF_STR));
+            return;
+        }
+        if (v.replace(STR_RE, '') === '') {
+            callback(new errors.invalidParam(name, constants.msg.STR_EMPTY));
+            return;
+        }
+    }
+
+    callback(null, vals);
+}
+
 /*
  * Validates a "fields" array - an array of strings specifying which of an
  * object's fields to return in a response.  `fields` is the list of allowed
@@ -398,6 +467,9 @@ module.exports = {
     IP: validateIP,
     subnet: validateSubnet,
     subnetArray: validateSubnetArray,
+    stringArray: validateStringArray,
+    string: validateString,
+    stringOrArray: validateStringOrArray,
     UUID: validateUUID,
     isUUID: isValidUUID,
     UUIDarray: validateUUIDarray,
diff --git a/tests/run.js b/tests/run.js
index 4bb84ad..bad3160 100644
--- a/tests/run.js
+++ b/tests/run.js
@@ -1312,6 +1312,252 @@ test('isUUID', function (t) {
     t.end();
 });
 
+test('String-S-KV', function (t) {
+    var opts = {
+        strict: true,
+        required: {
+            str: validate.string
+        }
+    };
+    var params = { str: 'MyString' };
+    validate.params(opts, null, params, function (err, res) {
+        t.ifErr(err, 'Expecting success');
+        t.deepEqual(params, res);
+        t.end();
+    });
+});
+
+test('String-S-KI-empty', function (t) {
+    var opts = {
+        strict: true,
+        required: {
+            str: validate.string
+        }
+    };
+    var params = { str: '' };
+    validate.params(opts, null, params, function (err, res) {
+        t.ok(err, 'Expecting error');
+        var msg = util_const.msg.INVALID_PARAMS;
+        var errors = [ util_err.invalidParam('str',
+            util_const.msg.STR_EMPTY) ];
+        expErr(msg, errors, err, t);
+        t.end();
+    });
+});
+
+test('String-S-KI-type', function (t) {
+    var opts = {
+        strict: true,
+        required: {
+            str: validate.string
+        }
+    };
+    var params = { str: 42 };
+    validate.params(opts, null, params, function (err, res) {
+        t.ok(err, 'Expecting error');
+        var msg = util_const.msg.INVALID_PARAMS;
+        var errors = [ util_err.invalidParam('str',
+            util_const.msg.STR) ];
+        expErr(msg, errors, err, t);
+        t.end();
+    });
+});
+
+test('String-S-U', function (t) {
+    var opts = {
+        strict: true,
+        required: {
+            str: validate.string
+        }
+    };
+    var params = { junk: 'MyString' };
+    validate.params(opts, null, params, function (err, res) {
+        t.ok(err, 'Expecting error');
+        var msg = util_const.msg.INVALID_PARAMS;
+        var errors = [ util_err.unknownParams([ 'junk' ]),
+            util_err.missingParam('str') ];
+        expErr(msg, errors, err, t);
+        t.end();
+    });
+});
+
+test('String-S-KI-U', function (t) {
+    var opts = {
+        strict: true,
+        required: {
+            str: validate.string
+        }
+    };
+    var params = { junk: 'SomeJunk', str: '' };
+    validate.params(opts, null, params, function (err, res) {
+        t.ok(err, 'Expecting error');
+        var msg = util_const.msg.INVALID_PARAMS;
+        var errors = [ util_err.invalidParam('str',
+            util_const.msg.STR_EMPTY),
+            util_err.unknownParams([ 'junk' ]) ];
+        expErr(msg, errors, err, t);
+        t.end();
+    });
+});
+
+test('StringArray-S-KV', function (t) {
+    var opts = {
+        strict: true,
+        required: {
+            strs: validate.stringArray
+        }
+    };
+    var params = { strs: ['String', 'String', 'String'] };
+    validate.params(opts, null, params, function (err, res) {
+        t.ifErr(err, 'Expecting success');
+        t.deepEqual(params, res);
+        t.end();
+    });
+});
+
+test('StringArray-S-KI-one-empty', function (t) {
+    var opts = {
+        strict: true,
+        required: {
+            strs: validate.stringArray
+        }
+    };
+    var params = { strs: ['String', 'String', ''] };
+    validate.params(opts, null, params, function (err, res) {
+        t.ok(err, 'Expecting error');
+        var msg = util_const.msg.INVALID_PARAMS;
+        var errors = [ util_err.invalidParam('strs',
+            util_const.msg.STR_EMPTY) ];
+        expErr(msg, errors, err, t);
+        t.end();
+    });
+});
+
+test('StringArray-S-KI-not-array', function (t) {
+    var opts = {
+        strict: true,
+        required: {
+            strs: validate.stringArray
+        }
+    };
+    var params = { strs: 'String,With,Commas' };
+    validate.params(opts, null, params, function (err, res) {
+        t.ok(err, 'Expecting error');
+        var msg = util_const.msg.INVALID_PARAMS;
+        var errors = [ util_err.invalidParam('strs',
+            util_const.msg.ARRAY_OF_STR) ];
+        expErr(msg, errors, err, t);
+        t.end();
+    });
+});
+
+test('StringArray-S-U', function (t) {
+    var opts = {
+        strict: true,
+        required: {
+            strs: validate.stringArray
+        }
+    };
+    var params = { trash: ['MyString'] };
+    validate.params(opts, null, params, function (err, res) {
+        t.ok(err, 'Expecting error');
+        var msg = util_const.msg.INVALID_PARAMS;
+        var errors = [ util_err.unknownParams([ 'trash' ]),
+                       util_err.missingParam('strs') ];
+        expErr(msg, errors, err, t);
+        t.end();
+    });
+});
+
+test('StringArray-S-KI-U', function (t) {
+    var opts = {
+        strict: true,
+        required: {
+            strs: validate.stringArray
+        }
+    };
+    var params = { trash: ['MyString'], strs: [''] };
+    validate.params(opts, null, params, function (err, res) {
+        t.ok(err, 'Expecting error');
+        var msg = util_const.msg.INVALID_PARAMS;
+        var errors = [ util_err.invalidParam('strs',
+            util_const.msg.STR_EMPTY),
+            util_err.unknownParams([ 'trash' ]) ];
+        expErr(msg, errors, err, t);
+        t.end();
+    });
+});
+
+test('StringOrArray-S-KV', function (t) {
+    var opts = {
+        strict: true,
+        required: {
+            strs: validate.stringOrArray
+        }
+    };
+    var params = { strs: ['MyString'] };
+    validate.params(opts, null, params, function (err, res) {
+        t.ifErr(err, 'Expecting success');
+        t.deepEqual(params, res);
+        t.end();
+    });
+});
+
+test('StringOrArray-S-KI', function (t) {
+    var opts = {
+        strict: true,
+        required: {
+            strs: validate.stringOrArray
+        }
+    };
+    var params = { strs: [''] };
+    validate.params(opts, null, params, function (err, res) {
+        t.ok(err, 'Expecting error');
+        var msg = util_const.msg.INVALID_PARAMS;
+        var errors = [ util_err.invalidParam('strs',
+            util_const.msg.STR_EMPTY) ];
+        expErr(msg, errors, err, t);
+        t.end();
+    });
+});
+
+test('StringOrArray-S-U', function (t) {
+    var opts = {
+        strict: true,
+        required: {
+            strs: validate.stringOrArray
+        }
+    };
+    var params = { trash: ['SomeThing'] };
+    validate.params(opts, null, params, function (err, res) {
+        t.ok(err, 'Expecting error');
+        var msg = util_const.msg.INVALID_PARAMS;
+        var errors = [ util_err.unknownParams([ 'trash' ]),
+                       util_err.missingParam('strs') ];
+        expErr(msg, errors, err, t);
+        t.end();
+    });
+});
+
+test('StringOrArray-S-KI-U', function (t) {
+    var opts = {
+        strict: true,
+        required: {
+            strs: validate.stringOrArray
+        }
+    };
+    var params = { trash: ['SomeThing'], strs: '' };
+    validate.params(opts, null, params, function (err, res) {
+        t.ok(err, 'Expecting error');
+        var msg = util_const.msg.INVALID_PARAMS;
+        var errors = [ util_err.invalidParam('strs',
+            util_const.msg.ARRAY_OF_STR),
+            util_err.unknownParams([ 'trash' ]) ];
+        expErr(msg, errors, err, t);
+        t.end();
+    });
+});
+
 test('isNotInteger', function (t) {
     var val = '';
     var id = 'str';
