From a6d0f43e074053de46c679b1edc8d9291109e082 Mon Sep 17 00:00:00 2001
From: Josh Wilsdon <josh@wilsdon.ca>
Date: Mon, 12 Mar 2018 17:33:01 -0700
Subject: [PATCH] OS-6753 HVM disk quotas insufficient on larger zvols

---
 src/vm/node_modules/VM.js        | 64 ++++++++++++++++++++++++++------
 src/vm/node_modules/expander.js  |  2 +
 src/vm/node_modules/proptable.js |  5 +++
 3 files changed, 59 insertions(+), 12 deletions(-)

diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index d5e4f00e..f3492e7b 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -102,6 +102,7 @@ var zonecfg = require('/usr/vm/node_modules/zonecfg');
 
 // pull in stuff from generated props (originating in proptable.js)
 var BRAND_OPTIONS = properties.BRAND_OPTIONS;
+var BHYVE_DISK_MULTIPLIER = properties.BHYVE_DISK_MULTIPLIER;
 var BHYVE_MEM_OVERHEAD = properties.BHYVE_MEM_OVERHEAD;
 var PAYLOAD_PROPERTIES = properties.PAYLOAD_PROPERTIES;
 var FLATTENABLE_ARRAYS = properties.FLATTENABLE_ARRAYS;
@@ -113,6 +114,7 @@ var UPDATABLE_DISK_PROPS = properties.UPDATABLE_DISK_PROPS;
 var UPDATABLE_NIC_PROPS = properties.UPDATABLE_NIC_PROPS;
 
 // re-export these
+exports.BHYVE_DISK_MULTIPLIER = BHYVE_DISK_MULTIPLIER;
 exports.BHYVE_MEM_OVERHEAD = BHYVE_MEM_OVERHEAD;
 exports.FLATTENABLE_ARRAYS = FLATTENABLE_ARRAYS;
 exports.FLATTENABLE_ARRAY_HASH_KEYS = FLATTENABLE_ARRAY_HASH_KEYS;
@@ -1959,15 +1961,19 @@ function destroyVolume(volume, log, callback)
 }
 
 // create a new zvol for a VM
-function createVolume(volume, log, callback)
+function createVolume(volume, opts, callback)
 {
+    assert.object(opts, 'opts');
+    assert.string(opts.brand, 'opts.brand');
+    assert.object(opts.log, 'opts.log');
+
+    var brand = opts.brand;
+    var log = opts.log;
     var refreserv;
     var size;
     var snapshot;
     var tracers_obj;
 
-    assert(log, 'no logger passed for createVolume()');
-
     if (process.env.EXPERIMENTAL_VMJS_TRACING) {
         tracers_obj = traceUntilCallback('create-volume', log, callback);
         callback = tracers_obj.callback;
@@ -1988,9 +1994,25 @@ function createVolume(volume, log, callback)
 
     if (volume.hasOwnProperty('refreservation')) {
         refreserv = volume.refreservation;
-    } else {
-        log.debug('defaulting to refreservation = ' + size);
+    } else if (volume.hasOwnProperty('image_uuid')) {
+        // We can't set refreserv > volsize when making a clone, so set it
+        // to volsize instead.
+        refreserv = size;
+        log.debug({
+            size: size
+        }, 'refreservation unset, setting refreserv=size for cloned disk');
+    } else if (brand === 'kvm') {
+        // For KVM we keep the pre-OS-6753 for now to not break compatibility
+        // but could change this to match bhyve (default case below) in the
+        // future.
         refreserv = size;
+        log.debug({
+            size: size
+        }, 'refreservation unset for kvm, setting refreserv=size for new disk');
+    } else {
+        // We default to letting SmartOS set refreservation for bhyve: OS-6753
+        log.debug('refreservation unset, letting system determine');
+        refreserv = 'auto';
     }
 
     async.series([
@@ -2042,7 +2064,9 @@ function createVolume(volume, log, callback)
                     args.push('-o', 'volblocksize='
                         + volume.block_size);
                 }
-                args.push('-o', 'refreservation=' + refreserv + 'M');
+                if (refreserv !== 'auto') {
+                    args.push('-o', 'refreservation=' + refreserv + 'M');
+                }
                 args.push(snapshot, target);
                 zfs(args, log, function (e) {
                     if (e) {
@@ -2064,8 +2088,10 @@ function createVolume(volume, log, callback)
                     args.push('-o', 'volblocksize='
                         + volume.block_size);
                 }
-                args.push('-o', 'refreservation=' + refreserv + 'M', '-V',
-                    size + 'M', target);
+                if (refreserv !== 'auto') {
+                    args.push('-o', 'refreservation=' + refreserv + 'M');
+                }
+                args.push('-V', size + 'M', target);
                 zfs(args, log, function (err, fds) {
                     if (err) {
                         cb(err);
@@ -2646,7 +2672,10 @@ function createVolumes(payload, log, callback)
     }
 
     function _loggedCreateVolume(volume, cb) {
-        return createVolume(volume, log, cb);
+        return createVolume(volume, {
+            brand: payload.brand,
+            log: log
+        }, cb);
     }
 
     function _loggedDeleteVolume(volume, cb) {
@@ -4549,6 +4578,14 @@ function checkPayloadProperties(payload, vmobj, log, callback)
             if (payload.update_disks.hasOwnProperty(disk)) {
                 zvol = payload.update_disks[disk];
 
+                // Disks cannot have refreservation=auto on update.
+                // Only create.
+                if (zvol.refreservation === 'auto') {
+                    callback(new Error('cannot change refreservation to '
+                        + 'auto on existing disk'));
+                    return;
+                }
+
                 if (zvol.hasOwnProperty('compression')) {
                     if (VM.COMPRESSION_TYPES.indexOf(zvol.compression) === -1) {
                         callback(new Error('invalid compression type for '
@@ -9892,9 +9929,12 @@ exports.create = function (payload, options, callback)
 
                 if (disk.image_size) {
                     // image_size is MiB, quota is GiB
-                    payload.quota += Math.ceil(Number(disk.image_size) / 1024);
+                    payload.quota +=
+                        Math.ceil((Number(disk.image_size) / 1024) *
+                        BHYVE_DISK_MULTIPLIER);
                 } else if (disk.size) {
-                    payload.quota += Math.ceil(Number(disk.size) / 1024);
+                    payload.quota += Math.ceil((Number(disk.size) / 1024) *
+                        BHYVE_DISK_MULTIPLIER);
                 }
             }
 
@@ -13449,7 +13489,7 @@ exports.update = function (uuid, payload, options, callback)
             }
 
             // add the bits of payload createVolumes() needs.
-            p = {'add_disks': disks};
+            p = {add_disks: disks, brand: vmobj.brand};
             p.uuid = uuid;
             if (vmobj.hasOwnProperty('zpool')) {
                 p.zpool = vmobj.zpool;
diff --git a/src/vm/node_modules/expander.js b/src/vm/node_modules/expander.js
index 4598029e..6f0387d3 100644
--- a/src/vm/node_modules/expander.js
+++ b/src/vm/node_modules/expander.js
@@ -294,6 +294,8 @@ output = 'exports.ZFS_FIELDS = '
     + JSON.stringify(zfs_types, null, 2) + ';\n';
 console.log(output);
 
+console.log('exports.BHYVE_DISK_MULTIPLIER = ' + proptable.BHYVE_DISK_MULTIPLIER
+    + ';\n');
 console.log('exports.BHYVE_MEM_OVERHEAD = ' + proptable.BHYVE_MEM_OVERHEAD
     + ';\n');
 console.log('exports.KVM_MEM_OVERHEAD = ' + proptable.KVM_MEM_OVERHEAD + ';\n');
diff --git a/src/vm/node_modules/proptable.js b/src/vm/node_modules/proptable.js
index 7b3b134c..14e19459 100644
--- a/src/vm/node_modules/proptable.js
+++ b/src/vm/node_modules/proptable.js
@@ -36,10 +36,15 @@
  */
 
 // values used in feature table for bhyve
+var BHYVE_DISK_MULTIPLIER = 1.2;
 // This can likely be lowered once we use large pages.
 var BHYVE_MEM_OVERHEAD = 1024 + 256;
 var BHYVE_MIN_MEM_OVERHEAD = 256;
 
+exports.BHYVE_DISK_MULTIPLIER = BHYVE_DISK_MULTIPLIER;
+exports.BHYVE_MEM_OVERHEAD = BHYVE_MEM_OVERHEAD;
+exports.BHYVE_MIN_MEM_OVERHEAD = BHYVE_MIN_MEM_OVERHEAD;
+
 // values used in feature table for KVM
 var KVM_MEM_OVERHEAD = 1024;
 var KVM_MIN_MEM_OVERHEAD = 256;
-- 
2.21.0

