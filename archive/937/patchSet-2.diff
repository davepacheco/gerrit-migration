commit ff7f4bab678d8155a981e9ebe872e999d970c309 (refs/changes/37/937/2)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2016-11-22T18:47:25+00:00 (2 years, 11 months ago)
    
    MORAY-378 Bucket cache isn't cleared on bucket update or delete

diff --git a/test/buckets.test.js b/test/buckets.test.js
index 735a6db..c01ca5c 100644
--- a/test/buckets.test.js
+++ b/test/buckets.test.js
@@ -11,6 +11,7 @@
 var jsprim = require('jsprim');
 var tape = require('tape');
 var uuid = require('libuuid').create;
+var vasync = require('vasync');
 var VError = require('verror');
 
 var helper = require('./helper.js');
@@ -407,3 +408,56 @@ test('delete missing bucket', function (t) {
         t.end();
     });
 });
+
+
+test('MORAY-378 - Bucket cache cleared on bucket delete', function (t) {
+    vasync.pipeline({ funcs: [
+        function (_, cb) { c.createBucket(b, {}, cb); },
+        function (_, cb) {
+            c.updateBucket(b, {
+                index: { field: { type: 'number' } },
+                options: { version: 2 }
+            }, cb);
+        },
+        function (_, cb) { c.putObject(b, 'key', { field: 5 }, cb); },
+        function (_, cb) { c.delBucket(b, cb); },
+        function (_, cb) { c.createBucket(b, {}, cb); },
+        function (_, cb) { c.putObject(b, 'key', { field: 5 }, cb); }
+    ]}, function (err) {
+        t.error(err, 'Finish without error');
+        t.end();
+    });
+});
+
+
+test('MORAY-378 - Bucket cache cleared on bucket update', function (t) {
+    var schema = {
+        index: { field: { type: 'string' } },
+        options: { version: 2 }
+    };
+
+    vasync.pipeline({ funcs: [
+        function (_, cb) { c.createBucket(b, {}, cb); },
+        function (_, cb) { c.putObject(b, 'key1', {}, cb); },
+        function (_, cb) { c.updateBucket(b, schema, cb); },
+        function (_, cb) { c.putObject(b, 'key2', { field: 'foo' }, cb); },
+        function (_, cb) {
+            var count = 0;
+            var res =
+                c.sql('SELECT * FROM ' + b + ' WHERE _key = $1;', ['key2']);
+            res.on('record', function (r) {
+                t.equal(r._key, 'key2', 'correct object returned for key');
+                t.equal(r.field, 'foo', '"field" column had value inserted');
+                count += 1;
+            });
+            res.on('error', cb);
+            res.on('end', function () {
+                t.equal(count, 1, 'one row returned');
+                cb();
+            });
+        }
+    ]}, function (err) {
+        t.error(err, 'Finish without error');
+        t.end();
+    });
+});
