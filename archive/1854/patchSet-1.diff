commit af33f11269e4673eb6866eed3cfe311c0c619427 (refs/changes/54/1854/1)
Author: Jason Schmidt <jason.schmidt@joyent.com>
Date:   2017-04-26T19:20:50-04:00 (2 years, 5 months ago)
    
    Added new storage node section

diff --git a/docs/operator-guide/index.md b/docs/operator-guide/index.md
index a5f1004..c21f4e2 100644
--- a/docs/operator-guide/index.md
+++ b/docs/operator-guide/index.md
@@ -1721,6 +1721,341 @@ reports indicate. Storage reports also count cross-account links once for each
 account, even though there is only a single set of copies of the objects.
 Metering also rounds up small objects to a minimum object size.
 
+# Common Operational Procedures
+## Adding a New Storage Node
+
+This procedure provides steps needed to add a new Manta storage node (also
+sometimes called a "shrimp" or "mantis shrimp" in reference to the hardware
+spec used by Joyent for these nodes) to an existing manta deployment.
+
+### Prerequisites
+Prior to following the steps in this document, the server needs to be added to
+Triton using the standard compute node installation process as outlined in our
+external documentation.
+
+Notes:
+- If link aggregation is being used, the aggregation must be setup prior to
+  continuing the installation process.
+- Do not install VXLan to any manta nodes.
+- The following tags must be present on the CN:
+	- admin
+	- external
+	- manta
+	- mantanat
+
+### Traiting the New Storage Node
+Once the server is setup, you'll want to add a trait to the CN to ensure that
+no other instances provision to the newly setup shrimp. This tag is not read or
+validated by manta, so you can use a tag that is descriptive for your
+environment. For example, any of the following would work:
+
+- {"internal": "Manta Node"}
+- {"internal": "Manta Storage"}
+- {"manta": "Storage"}
+
+Adding the above trait can be done via adminUI (operator's portal), or via the
+use of sdc-cnapi:
+
+```
+headnode# sdc-cnapi /servers/:uuid -X POST -d '{"internal": "Manta Node"}'
+```
+
+### Initial Data Gathering
+Once server setup has been completed, you will need to gather the following
+information. This information will be used to build the necessary configuration
+files to complete the installation of the new manta storage node.
+
+**Note** that some manta installations can span multiple data centers /
+availability zones. For example, the manta deployment in US-EAST uses US-EAST-1,
+US-EAST-2, and US-EAST-3. Be sure that you have identified all datacenters that
+are taking part in your manta deployment.
+
+#### Current System Configuration
+
+```
+headnode# manta-adm show -s -j > currentconfig.json
+New CN Details
+headnode# sdc-cnapi /servers/715020ea-11e1-11e4-bb8a-002590e4edcc | \
+json -Ha hostname traits \
+sysinfo."Link Aggregations" \
+sysinfo."Virtual Network Interfaces" \
+sysinfo."Network Interfaces"
+```
+
+#### Network Details
+
+```
+headnode# for NETWRK in admin manta mantanat ; do
+sdc-napi /networks?name=$NETWRK | json -H
+done
+```
+
+#### Datacenter Details
+
+```
+headnode# egrep -i "^datacenter_name|^region_name" /usbkey/config
+```
+
+### Steps to Add New Storage Node
+Every step outlined below may not be needed, but is included for completeness.
+The steps required will fully depend upon the results of the data you've
+gathered.
+
+#### Step 1: Ensure that you are running the latest supported version of the
+manta deployment zone
+
+```
+headnode# sdcadm update manta
+```
+
+#### Step 2: Run the `setup_manta_zone.sh` command on the headnode
+
+This setup updates the GZ level tooling for manta, and includes links to
+commands such as:
+- `manta-oneach`
+- `manta-login`
+- `manta-adm`
+
+```
+headnode# /usbkey/scripts/setup_manta_zone.sh
+```
+
+#### Step 3: Build out the Network File
+This is a json blob that contains information on the network as well as the
+storage node that is being added. This file is populated with the data that was
+collected in the information gathering phase above. The example file below shows
+the data that should be added to the file.
+
+**Notes:**
+- If Link Aggregation is being used one MAC address from the LACP bundle should
+  be used in the file below.
+- This sample file is for a single-AZ deployment.
+
+
+```
+{
+  "this_az": "DC-REGION", <---- Update with datacenter_name collected from config file
+  "manta_nodes": [
+    "UUID_OF_NEW_SHRIMP" <---- Update with UUID of new shrimp
+  ],
+  "marlin_nodes": [
+    "UUID_OF_NEW_SHRIMP" <---- Update with UUID of new shrimp
+  ],
+  "azs": [
+    "DC-REGION" <---- Update with datacenter_name collected from config file
+  ],
+  "admin": {
+    "nic_tag": "admin",
+    "network": "admin",
+    "DC-NAME": { <---- update with datacenter_name collected from config file
+      "subnet": "10.2.56.0/22", <---- update with admin subnet
+      "gateway": "10.2.56.1"    <---- update with admin gateway
+    }
+  },
+  "manta": {
+    "nic_tag": "manta",
+    "network": "manta",
+    "DC-NAME": { <---- update with datacenter_name collected from config file
+      "vlan_id": 928, <---- update with vlan id for manta network
+      "subnet": "192.168.128.0/20", <---- update with manta subnet
+      "start": "192.168.128.10", <---- update with manta start IP
+      "end": "192.168.143.254", <---- update with manta end IP
+      "gateway": "192.168.128.1" <---- update with manta gateway
+    }
+  },
+  "marlin": {
+    "nic_tag": "mantanat",
+    "network": "mantanat",
+    "DC-NAME": { <---- update with datacenter_name collected from config file
+      "vlan_id": 348, <---- update with vlan id for mantanat network
+      "subnet": "10.3.48.0/20", <---- update with mantanat subnet
+      "start": "10.3.48.10", <---- update with mantanat start IP
+      "end": "10.3.63.254", <---- update with mantanat end IP
+      "gateway": "10.3.48.1" <---- update with mantanat gateway
+    }
+  },
+  "mac_mappings": {
+    ""UUID_OF_NEW_SHRIMP": { <---- Update with UUID of new shrimp
+      "manta": "90:e2:ba:d1:fc:d5", <---- Update with mac of manta network
+      "mantanat": "90:e2:ba:d1:fc:d5" <---- Update with mac of mantanat network
+    }
+  }
+}
+```
+
+#### Step 4: Verify the Syntax
+Run the completed file through json to make sure that there are no syntax
+errors.
+
+```
+$ cat newstorage.json | json
+```
+
+#### Step 5: Verify the Networking Directory
+There should already be a `/var/tmp/networking` link created on the headnode
+from the original manta installation; this link is a convenience path to the
+tooling located in the manta deployment zone. This is necesary as the commands
+needed to manage the network are run from the global zone of the headnode.
+
+If the link does not exist, you can create it via the following:
+
+```
+headnode# ln -s /zones/$(sdc-vmname manta)/root/opt/smartdc/manta-deployment/networking \
+/var/tmp/networking
+```
+
+#### Step 6: Copy the Network File into the Networking Directory
+Copy the file you created above into the networking directory.
+
+#### Step 7: Run the manta-net.sh Command
+The command takes the json file you created above as an argument. This script
+must complete successfully before you move on - if you encounter any failure
+modes, you will need to determine why the process failed and take steps to
+correct it.
+
+```
+headnode# cd /var/tmp/networking
+headnode# ./manta-net.sh newstorage.json
+```
+
+#### Step 8:  Verify the New Server has a manta vnic Synced into CNAPI
+Force the server to refresh it's sysinfo.
+
+```
+headnode# sdc-oneachnode -n $SERVER_UUID "sysinfo -fu"
+headnode# sdc-cnapi /servers/$SERVER_UUID/sysinfo-refresh -X POST
+```
+
+Check the NIC
+
+```
+headnode# sdc-cnapi /servers/$SERVER_UUID | json -Ha -o json-2 hostname traits \
+   sysinfo."Link Aggregations" \
+   sysinfo."Virtual Network Interfaces"
+```
+
+#### Step 9: Add Blocks for New Storage Node to the Configuration File
+This step will be run from the manta deployment zone, which you can log into via
+sdc-login -l manta from the GZ on the headnode.
+
+```
+manta# manta-adm show -sj > /var/tmp/newstorage.json
+```
+
+Edit the `newstorage.json` file to add a new block for each of the new servers;
+for example, here is a stanza from a demo environment:
+
+
+```
+{
+  "532abfa0-11df-11e4-94d3-002590e4f150": {
+    "storage": {
+      "3554bca8-42d4-11e4-90be-0b874336d056": 4
+    },
+    "marlin": {
+      "05726737-917f-43d2-97a7-8b55d85cddf9": 10
+    }
+  }
+}
+```
+
+For your new storage node you will need to edit the server UUID:
+
+```
+{
+  "NEW-SERVER-UUID": {
+    "storage": {
+      "3554bca8-42d4-11e4-90be-0b874336d056": 4
+    },
+    "marlin": {
+      "05726737-917f-43d2-97a7-8b55d85cddf9": 10
+    }
+  }
+}
+```
+
+Each storage node should have one and only one mako. The number of marlin nodes
+is highly dependent on the amount of memory in the server, as well as the
+intended balance of storage versus compute. Provided that the new storage
+hardware is the same as the hardware already in use, you should be able to use
+the same number of marlins. If not, you will need to review the server resources
+in order to determine the number of marlins to deploy.
+
+#### Step 10: Deploy the New Zones
+
+Once the configuration file is complete, you can run it with the following
+command:
+
+```
+manta# manta-adm update /var/tmp/newstorage.json
+```
+
+This command will call the necessasry utilities to ensure that the zones are
+created and configured appropriately. If you encounter any errors, you will need
+to resolve them prior to moving on.
+
+#### Step 11: Deploy the marlin agent
+This step - run from the manta deployment zone - will ensure the marlin agent is
+enabled on the new storage node.
+
+```
+manta# manta-marlin -s [server_uuid]
+```
+
+The marlin agent is deployed via the normal agent process in Triton (ie, the
+"sdcadm experimental update-agents"). At some point this should be decoupled
+from the normal agent install process, but for now it's rolled into the mainline
+agents. So to update agents in Manta, you are actually updating it from Triton.
+
+#### Step 12: Update the marlin dashboard
+
+```
+headnode#  manta-login marlin-dashboard
+marlin-dashboard$ /opt/smartdc/marlin-dashboard/bin/generate-config.js | bunyan
+marlin-dashboard$ svcadm restart marlin-dashboard
+```
+
+If you encounter any errors at this point, you will need to remediate them.
+
+#### Step 13: Update madtom
+
+```
+headnode# manta-login madtom
+madtom$ /opt/smartdc/madtom/bin/generate_hosts_config.js | bunyan
+madtom$ svcadm restart madtom
+```
+
+If you encounter any errors at this point, you will need to remediate them.
+
+#### Step 14: Clear any Open Manta Alarms
+This is done from inside the manta deployment zone.
+
+```
+manta# mantamon alarms
+manta# mantamon clear <alarm id>
+```
+
+#### Step 15: Update Alarms
+This is done within the manta deployment zone. Note that you will need to re-run
+the `mantamon drop` until the count reaches 0 prior to running the
+`mantamon add`.
+
+```
+manta# mantamon drop
+manta# mantamon add
+```
+
+#### Step 16: Verification
+At this point you want to confirm the following:
+
+- Check marlin dashboard to confirm you see the new storage node and the
+  appropriate number of marlins.
+- Check madtom to verify all services are green.
+- Monitor for next 24 hours to confirm new shrimp is receiving jobs and data
+- One way to help push this process along is to kick off a run of
+  [manta-mlive](https://github.com/joyent/manta-mlive), which should result in
+  objects being written / removed from the new servers. You should see data being
+  written inside the new mako zones under `/manta`.
 
 # Debugging: general tasks
 
