commit 51e1fe9cb6931e42ddfab2197076bff01739c6e3
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2018-12-07T17:04:55-08:00 (10 months ago)
    
    joyent/node-cueball#137 Want error counters for DNSResolver
    joyent/node-cueball#151 DNSResolver should retry at TTL if it's seen it

diff --git a/bin/cbresolve b/bin/cbresolve
index 8f355be..ffd53f8 100755
--- a/bin/cbresolve
+++ b/bin/cbresolve
@@ -16,6 +16,8 @@ const mod_getopt = require('posix-getopt');
 const mod_net = require('net');
 const mod_verror = require('verror');
 const mod_util = require('util');
+const mod_restify = require('restify');
+const mod_kang = require('kang');
 
 const VError = mod_verror.VError;
 const printf = mod_extsprintf.printf;
@@ -233,6 +235,23 @@ function main()
 		 */
 		setInterval(function () {}, Math.pow(2, 31) - 1);
 	}
+
+	var kangOpts = mod_cueball.poolMonitor.toKangOptions();
+	kangOpts.log = cbrLog;
+	kangOpts.port = 9090;
+
+	kangServer = mod_restify.createServer({
+		serverName: 'Kang',
+		handleUncaughtExceptions: false
+	});
+	kangServer.get(new RegExp('.*'), mod_kang.knRestifyHandler(kangOpts));
+	kangServer.listen(kangOpts.port, '127.0.0.1', function () {
+		cbrLog.info('cueball kang monitor started on port %d',
+		    kangOpts.port);
+	});
+	kangServer.on('after', mod_restify.auditLogger({
+		log: cbrLog
+	}));
 }
 
 /*
diff --git a/lib/pool-monitor.js b/lib/pool-monitor.js
index 1c59607..0f194e6 100644
--- a/lib/pool-monitor.js
+++ b/lib/pool-monitor.js
@@ -16,10 +16,12 @@ const mod_assert = require('assert-plus');
 const mod_pool = require('./pool');
 const mod_cset = require('./set');
 const mod_os = require('os');
+const mod_resolver = require('./resolver');
 
 function CueBallPoolMonitor() {
 	this.pm_pools = {};
 	this.pm_sets = {};
+	this.pm_dnsRes = {};
 }
 
 CueBallPoolMonitor.prototype.registerPool = function (pool) {
@@ -44,11 +46,22 @@ CueBallPoolMonitor.prototype.unregisterSet = function (set) {
 	delete (this.pm_sets[set.cs_uuid]);
 };
 
+CueBallPoolMonitor.prototype.registerDnsResolver = function (res) {
+	mod_assert.ok(res instanceof mod_resolver.DNSResolver);
+	this.pm_dnsRes[res.r_uuid] = res;
+};
+
+CueBallPoolMonitor.prototype.unregisterDnsResolver = function (res) {
+	mod_assert.ok(res instanceof mod_resolver.DNSResolver);
+	mod_assert.ok(this.pm_dnsRes[res.r_uuid]);
+	delete (this.pm_dnsRes[res.r_uuid]);
+};
+
 CueBallPoolMonitor.prototype.toKangOptions = function () {
 	var self = this;
 
 	function listTypes() {
-		return (['pool', 'set']);
+		return (['pool', 'set', 'dns_res']);
 	}
 
 	function listObjects(type) {
@@ -56,6 +69,8 @@ CueBallPoolMonitor.prototype.toKangOptions = function () {
 			return (Object.keys(self.pm_pools));
 		} else if (type === 'set') {
 			return (Object.keys(self.pm_sets));
+		} else if (type === 'dns_res') {
+			return (Object.keys(self.pm_dnsRes));
 		} else {
 			throw (new Error('Invalid type "' + type + '"'));
 		}
@@ -66,6 +81,8 @@ CueBallPoolMonitor.prototype.toKangOptions = function () {
 			return (getPool(id));
 		} else if (type === 'set') {
 			return (getSet(id));
+		} else if (type === 'dns_res') {
+			return (getDnsResolver(id));
 		} else {
 			throw (new Error('Invalid type "' + type + '"'));
 		}
@@ -160,6 +177,28 @@ CueBallPoolMonitor.prototype.toKangOptions = function () {
 		return (obj);
 	}
 
+	function getDnsResolver(id) {
+		var res = self.pm_dnsRes[id];
+		mod_assert.object(res);
+
+		var obj = {};
+		obj.domain = res.r_domain;
+		obj.service = res.r_service;
+		obj.resolvers = res.r_resolvers;
+		obj.defaultPort = res.r_defport;
+		obj.state = res.getState();
+		obj.next = {};
+		if (res.r_nextService)
+			obj.next.srv = res.r_nextService.toISOString();
+		if (res.r_nextV6)
+			obj.next.v6 = res.r_nextV6.toISOString();
+		if (res.r_nextV4)
+			obj.next.v4 = res.r_nextV4.toISOString();
+		obj.backends = res.r_backends;
+		obj.counters = res.r_counters;
+		return (obj);
+	}
+
 	function stats() {
 		return ({});
 	}
diff --git a/lib/resolver.js b/lib/resolver.js
index aaf13ec..c864afb 100644
--- a/lib/resolver.js
+++ b/lib/resolver.js
@@ -35,6 +35,8 @@ const mod_fs = require('fs');
 const mod_crypto = require('crypto');
 const mod_verror = require('verror');
 const mod_os = require('os');
+const mod_uuid = require('uuid');
+const mod_monitor = require('./pool-monitor');
 
 const FSM = mod_mooremachine.FSM;
 const EventEmitter = mod_events.EventEmitter;
@@ -249,6 +251,7 @@ function CueBallDNSResolver(options) {
 
 	mod_assert.optionalBool(options._isBootstrap, 'options._isBootstrap');
 
+	this.r_uuid = mod_uuid.v4();
 	this.r_resolvers = options.resolvers || [];
 	this.r_domain = options.domain;
 	this.r_service = options.service || '_http._tcp';
@@ -338,6 +341,11 @@ function CueBallDNSResolver(options) {
 	 * down, as our retry timeout.
 	 */
 	this.r_lastSrvTtl = 60;
+	/*
+	 * And last TTL we saw at all -- we'll use this as an effective
+	 * max delay if we exhaust our retry policy.
+	 */
+	this.r_lastTtl = 60;
 
 	this.r_lastError = undefined;
 
@@ -390,6 +398,8 @@ function CueBallDNSResolver(options) {
 	this.r_haveSeenSRV = false;
 	this.r_haveSeenAddr = false;
 
+	this.r_counters = {};
+
 	FSM.call(this, 'init');
 
 	return (new CueBallResolver(this, options));
@@ -400,6 +410,21 @@ CueBallDNSResolver.bootstrapResolvers = {};
 
 CueBallDNSResolver.globalNSClients = {};
 
+CueBallDNSResolver.prototype._incrCounter = function (counter) {
+	if (this.r_counters[counter] === undefined)
+		this.r_counters[counter] = 0;
+	++this.r_counters[counter];
+};
+
+CueBallDNSResolver.prototype._hwmCounter = function (counter, val) {
+	if (this.r_counters[counter] === undefined) {
+		this.r_counters[counter] = val;
+		return;
+	}
+	if (this.r_counters[counter] < val)
+		this.r_counters[counter] = val;
+};
+
 CueBallDNSResolver.prototype.start = function () {
 	this.emit('startAsserted');
 };
@@ -424,6 +449,7 @@ CueBallDNSResolver.prototype.list = function () {
 
 CueBallDNSResolver.prototype.state_init = function (S) {
 	this.r_stopping = false;
+	mod_monitor.monitor.registerDnsResolver(this);
 	if (this.r_bootstrap !== undefined) {
 		if (--this.r_bootstrap.r_refCount <= 0)
 			this.r_bootstrap.stop();
@@ -528,6 +554,7 @@ CueBallDNSResolver.prototype.state_srv_try = function (S) {
 		d.setTime(d.getTime() + 1000*ttl);
 		self.r_nextService = d;
 		self.r_lastSrvTtl = ttl;
+		self.r_lastTtl = ttl;
 		self.r_haveSeenSRV = true;
 
 		var oldLookup = {};
@@ -556,6 +583,7 @@ CueBallDNSResolver.prototype.state_srv_try = function (S) {
 	S.on(req, 'error', function (err) {
 		self.r_lastError = new mod_verror.VError(err,
 		    'SRV lookup for "%s" failed', name);
+		self._incrCounter('srv-failure');
 
 		if (NoRecordsError.isInstance(err) ||
 		    NoNameError.isInstance(err) || err.code === 'NOTIMP') {
@@ -596,6 +624,8 @@ CueBallDNSResolver.prototype.state_srv_try = function (S) {
 			self.r_log.info('no SRV records found for service ' +
 			    '%s, trying as a plain name', self.r_service);
 
+			self._incrCounter('srv-skipped');
+
 			S.gotoState('aaaa');
 
 		} else if (err.code === 'REFUSED') {
@@ -774,6 +804,7 @@ CueBallDNSResolver.prototype.state_aaaa_try = function (S) {
 		    d.getTime() <= self.r_nextV6.getTime()) {
 			self.r_nextV6 = d;
 		}
+		self.r_lastTtl = ttl;
 
 		self.r_haveSeenAddr = true;
 
@@ -895,6 +926,7 @@ CueBallDNSResolver.prototype.state_a_try = function (S) {
 		d.setTime(d.getTime() + 1000*ttl);
 		if (self.r_nextV4 === undefined || d <= self.r_nextV4)
 			self.r_nextV4 = d;
+		self.r_lastTtl = ttl;
 
 		self.r_haveSeenAddr = true;
 
@@ -964,7 +996,7 @@ CueBallDNSResolver.prototype.state_a_error = function (S) {
 		 * a SOA record in NXDOMAIN responses (not urgent, binder
 		 * doesn't send these)
 		 */
-		d.setTime(d.getTime() + 1000*60);
+		d.setTime(d.getTime() + 1000*self.r_lastTtl);
 		if (self.r_nextV4 === undefined || d <= self.r_nextV4)
 			self.r_nextV4 = d;
 
@@ -1003,6 +1035,7 @@ CueBallDNSResolver.prototype.state_process = function (S) {
 		var err = new mod_verror.VError(this.r_lastError,
 		    'failed to find any DNS records for (%s.)%s',
 		    this.r_service, this.r_domain);
+		this._incrCounter('empty-set');
 		this.r_log.warn(err, 'finished processing');
 		this.emit('updated', err);
 		S.gotoState('sleep');
@@ -1028,10 +1061,12 @@ CueBallDNSResolver.prototype.state_process = function (S) {
 	removed.forEach(function (k) {
 		self.r_log.trace('host removed: %s', k);
 		self.emit('removed', k);
+		self._incrCounter('backend-removed');
 	});
 	added.forEach(function (k) {
 		self.r_log.trace('host added: %s', k);
 		self.emit('added', k, newBackends[k]);
+		self._incrCounter('backend-added');
 	});
 
 	if (this.r_isBootstrap) {
@@ -1076,6 +1111,8 @@ CueBallDNSResolver.prototype.state_sleep = function (S) {
 		state = 'a';
 	}
 
+	this._hwmCounter('max-sleep', minDelay);
+
 	if (minDelay < 0) {
 		S.gotoState(state);
 	} else {
@@ -1171,11 +1208,17 @@ CueBallDNSResolver.prototype.resolve = function (domain, type, timeout) {
 			var errs = err.errors();
 			var codes = {};
 			errs.forEach(function (e) {
+				if (e.name === 'TimeoutError') {
+					self._incrCounter('timeout');
+					return;
+				}
 				if (e.code === undefined)
 					return;
 				if (codes[e.code] === undefined)
 					codes[e.code] = 0;
 				++codes[e.code];
+				self._incrCounter('rcode-' +
+				    e.code.toLowerCase());
 			});
 			var sorted = Object.keys(codes).sort(function (a, b) {
 				if (codes[a] > codes[b])
@@ -1192,19 +1235,27 @@ CueBallDNSResolver.prototype.resolve = function (domain, type, timeout) {
 			err = new NoRecordsError(domain, type);
 
 		if (err) {
+			if (err.code) {
+				self._incrCounter('rcode-' +
+				    err.code.toLowerCase());
+			}
 			em.emit('error', err);
 			return;
 		}
 		var ans;
 		var answers = msg.getAnswers();
 		var minTTL = undefined;
+		self._incrCounter('rcode-ok');
 		if (type === 'A' || type === 'AAAA') {
 			ans = [];
 			answers.forEach(function (a) {
 				if (a.type !== type) {
 					if (a.type === 'CNAME' ||
-					    a.type === 'DNAME')
+					    a.type === 'DNAME') {
+						self._incrCounter('cname');
 						return;
+					}
+					self._incrCounter('unknown-rrtype');
 					self.r_log.warn('got unsupported ' +
 					    'answer rrtype: %s', a.type);
 					return;
@@ -1228,6 +1279,7 @@ CueBallDNSResolver.prototype.resolve = function (domain, type, timeout) {
 					    rr.type === 'DNAME' ||
 					    rr.type === 'OPT')
 						return;
+					self._incrCounter('unknown-rrtype');
 					self.r_log.warn('got unsupported ' +
 					    'additional rrtype: %s', rr.type);
 					return;
@@ -1246,8 +1298,11 @@ CueBallDNSResolver.prototype.resolve = function (domain, type, timeout) {
 			answers.forEach(function (a) {
 				if (a.type !== type) {
 					if (a.type === 'CNAME' ||
-					    a.type === 'DNAME')
+					    a.type === 'DNAME') {
+						self._incrCounter('cname');
 						return;
+					}
+					self._incrCounter('unknown-rrtype');
 					self.r_log.warn('got unsupported ' +
 					    'answer rrtype: %s', a.type);
 					return;
@@ -1257,8 +1312,10 @@ CueBallDNSResolver.prototype.resolve = function (domain, type, timeout) {
 					minTTL = a.ttl;
 				}
 				var obj = { name: a.target, port: a.port };
-				if (cache[a.target])
+				if (cache[a.target]) {
+					self._incrCounter('additionals-used');
 					obj.additionals = cache[a.target];
+				}
 				ans.push(obj);
 			});
 
diff --git a/test/monitor.test.js b/test/monitor.test.js
index 5fd0f69..9fa0ed2 100644
--- a/test/monitor.test.js
+++ b/test/monitor.test.js
@@ -146,9 +146,10 @@ mod_tape.test('empty kang info', function (t) {
 	client.get('/kang/snapshot', function (err, req, res, obj) {
 		t.ifError(err);
 		t.strictEqual(obj.service.name, 'cueball');
-		t.deepEqual(obj.types, ['pool', 'set']);
+		t.deepEqual(obj.types, ['pool', 'set', 'dns_res']);
 		t.deepEqual(Object.keys(obj.pool), []);
 		t.deepEqual(Object.keys(obj.set), []);
+		t.deepEqual(Object.keys(obj.dns_res), []);
 		t.end();
 	});
 });
