commit 0cd139c9352b2426f0f93a529d6e5b7436f6a9fe (HEAD -> master)
Author: John Levon <john.levon@joyent.com>
Date:   2019-08-22T16:26:16+00:00 (7 weeks ago)
    
    OS-7960 need fixes for NULL as a pointer
    Reviewed by: Joshua M. Clulow <jmc@joyent.com>
    Reviewed by: Mike Gerdts <mike.gerdts@joyent.com>
    Approved by: Mike Gerdts <mike.gerdts@joyent.com>

diff --git a/CHANGES.md b/CHANGES.md
index 9a7bac3..4b62d4b 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -5,11 +5,16 @@
 -->
 
 <!--
-    Copyright (c) 2019, Joyent, Inc.
+    Copyright 2019 Joyent, Inc.
 -->
 
 # mdb_v8 changelog
 
+## v1.4.1 (2019-08)
+
+* OS-7960 need fixes for NULL as a pointer
+* #114 error: left shift of negative value
+
 ## v1.4.0 (2019-04)
 
 * #107 would like dcmd for heuristically finding back references
diff --git a/README.md b/README.md
index 2866dd0..21b1c14 100644
--- a/README.md
+++ b/README.md
@@ -5,7 +5,7 @@
 -->
 
 <!--
-    Copyright (c) 2019, Joyent, Inc.
+    Copyright 2019 Joyent, Inc.
 -->
 
 # mdb_v8: postmortem debugging for Node.js
@@ -44,17 +44,17 @@ https://us-east.manta.joyent.com/Joyent_Dev/public/mdb_v8.  If you have the
 can list the latest binaries with:
 
     $ mfind -t o $(mget -q /Joyent_Dev/public/mdb_v8/latest)
-    /Joyent_Dev/public/mdb_v8/v1.4.0/mdb_v8_amd64.so
-    /Joyent_Dev/public/mdb_v8/v1.4.0/mdb_v8_ia32.so
+    /Joyent_Dev/public/mdb_v8/v1.4.1/mdb_v8_amd64.so
+    /Joyent_Dev/public/mdb_v8/v1.4.1/mdb_v8_ia32.so
 
 You can fetch a specific binary like this (in this case, the 32-bit version
-1.4.0 binary):
+1.4.1 binary):
 
-    $ mget -O /Joyent_Dev/public/mdb_v8/v1.4.0/mdb_v8_ia32.so
+    $ mget -O /Joyent_Dev/public/mdb_v8/v1.4.1/mdb_v8_ia32.so
 
 or using curl:
 
-    $ curl -O https://us-east.manta.joyent.com/Joyent_Dev/public/mdb_v8/v1.4.0/mdb_v8_ia32.so
+    $ curl -O https://us-east.manta.joyent.com/Joyent_Dev/public/mdb_v8/v1.4.1/mdb_v8_ia32.so
 
 This one-liner will get you the latest 32-bit binary:
 
diff --git a/src/mdb_v8.c b/src/mdb_v8.c
index 45892da..bda3707 100644
--- a/src/mdb_v8.c
+++ b/src/mdb_v8.c
@@ -3453,19 +3453,19 @@ jsobj_print_value(v8propvalue_t *valp, jsobj_print_t *jsop)
 		{ NULL }
 	}, *ent;
 
-	if (jsop->jsop_baseaddr != NULL && jsop->jsop_member == NULL)
+	if (jsop->jsop_baseaddr != (uintptr_t)NULL && jsop->jsop_member == NULL)
 		(void) bsnprintf(bufp, lenp, "%p: ", jsop->jsop_baseaddr);
 
 	if (jsop->jsop_printaddr && jsop->jsop_member == NULL)
 		(void) bsnprintf(bufp, lenp, "%p: ",
-		    valp == NULL ? NULL : valp->v8v_u.v8vu_addr);
+		    valp == NULL ? (uintptr_t)NULL : valp->v8v_u.v8vu_addr);
 
 	if (valp != NULL && valp->v8v_isboxeddouble) {
 		jsobj_print_double(bufp, lenp, valp->v8v_u.v8vu_double);
 		return (0);
 	}
 
-	addr = valp == NULL ? NULL : valp->v8v_u.v8vu_addr;
+	addr = valp == NULL ? (uintptr_t)NULL : valp->v8v_u.v8vu_addr;
 	if (V8_IS_SMI(addr)) {
 		(void) bsnprintf(bufp, lenp, "%d", V8_SMI_VALUE(addr));
 		return (0);
@@ -4632,7 +4632,7 @@ do_jsframe(uintptr_t fptr, uintptr_t raddr, jsframe_t *jsf)
 
 		if (mdb_vread(&argptr, sizeof (argptr),
 		    fptr + V8_OFF_FP_ARGS + nargs * sizeof (uintptr_t)) != -1 &&
-		    argptr != NULL) {
+		    argptr != (uintptr_t)NULL) {
 			(void) snprintf(arg, sizeof (arg), "this");
 			if (prop != NULL && strcmp(arg, prop) == 0) {
 				mdb_printf("%p\n", argptr);
@@ -5155,7 +5155,8 @@ findjsobjects_mapping(findjsobjects_state_t *fjs, const prmap_t *pmp,
 	if (name != NULL && !(fjs->fjs_brk && (pmp->pr_mflags & MA_BREAK)))
 		return (0);
 
-	if (fjs->fjs_addr != NULL && (fjs->fjs_addr < pmp->pr_vaddr ||
+	if (fjs->fjs_addr != (uintptr_t)NULL &&
+	    (fjs->fjs_addr < pmp->pr_vaddr ||
 	    fjs->fjs_addr >= pmp->pr_vaddr + pmp->pr_size))
 		return (0);
 
@@ -5309,7 +5310,7 @@ findjsobjects_references(findjsobjects_state_t *fjs)
 	}
 
 	v8_silent--;
-	fjs->fjs_addr = NULL;
+	fjs->fjs_addr = (uintptr_t)NULL;
 
 	/*
 	 * Now go over our referent(s), reporting any references that we have
@@ -6355,7 +6356,7 @@ dcmd_jsframe(uintptr_t addr, uint_t flags, int argc, const mdb_arg_t *argv)
 		return (DCMD_ERR);
 	}
 
-	if (fptr == NULL)
+	if (fptr == (uintptr_t)NULL)
 		return (DCMD_OK);
 
 	rv = do_jsframe(fptr, raddr, &jsf);
@@ -6478,7 +6479,7 @@ dcmd_jsprint(uintptr_t addr, uint_t flags, int argc, const mdb_arg_t *argv)
 
 		mdb_free(buf, bufsz);
 		jsop.jsop_found = B_FALSE;
-		jsop.jsop_baseaddr = NULL;
+		jsop.jsop_baseaddr = (uintptr_t)NULL;
 	} while (i < argc);
 
 	mdb_printf("\n");
@@ -7106,7 +7107,7 @@ walk_jselement_init(mdb_walk_state_t *wsp)
 	int memflags = UM_GC | UM_SLEEP;
 	jselement_walk_data_t *jsew;
 
-	if ((addr = wsp->walk_addr) == NULL) {
+	if ((addr = wsp->walk_addr) == (uintptr_t)NULL) {
 		mdb_warn("'jselement' does not support global walks\n");
 		return (WALK_ERR);
 	}
@@ -7172,7 +7173,7 @@ walk_jselement_fini(mdb_walk_state_t *wsp)
 static int
 walk_jsframes_init(mdb_walk_state_t *wsp)
 {
-	if (wsp->walk_addr != NULL)
+	if (wsp->walk_addr != (uintptr_t)NULL)
 		return (WALK_NEXT);
 
 	if (load_current_context(&wsp->walk_addr, NULL) != 0)
@@ -7196,7 +7197,7 @@ walk_jsframes_step(mdb_walk_state_t *wsp)
 	if (mdb_vread(&next, sizeof (next), addr) == -1)
 		return (WALK_ERR);
 
-	if (next == NULL)
+	if (next == (uintptr_t)NULL)
 		return (WALK_DONE);
 
 	wsp->walk_addr = next;
@@ -7249,7 +7250,7 @@ walk_jsprop_init(mdb_walk_state_t *wsp)
 	uintptr_t addr;
 	uint8_t type;
 
-	if ((addr = wsp->walk_addr) == NULL) {
+	if ((addr = wsp->walk_addr) == (uintptr_t)NULL) {
 		mdb_warn("'jsprop' does not support global walks\n");
 		return (WALK_ERR);
 	}
diff --git a/src/mdb_v8_function.c b/src/mdb_v8_function.c
index 8e34588..86c59d0 100644
--- a/src/mdb_v8_function.c
+++ b/src/mdb_v8_function.c
@@ -327,7 +327,8 @@ v8funcinfo_load(uintptr_t funcinfo, int memflags)
 	fip->v8fi_script = script;
 	fip->v8fi_scriptpath = scriptpath;
 	fip->v8fi_tokenpos = tokenpos;
-	fip->v8fi_line_endings = jsobj_is_undefined(lineends) ? NULL : lineends;
+	fip->v8fi_line_endings = jsobj_is_undefined(lineends) ?
+	    (uintptr_t)NULL : lineends;
 	fip->v8fi_code = code;
 	return (fip);
 }
@@ -379,7 +380,7 @@ v8funcinfo_funcname(v8funcinfo_t *fip, mdbv8_strbuf_t *strb,
 	 * If that failed or was empty, then we printed a generic name, but try
 	 * now to append the inferred name.
 	 */
-	if (fip->v8fi_inferred_name != NULL) {
+	if (fip->v8fi_inferred_name != (uintptr_t)NULL) {
 		strp = v8string_load(fip->v8fi_inferred_name, UM_SLEEP);
 		if (strp != NULL) {
 			mdbv8_strbuf_sprintf(strb, " (as ");
@@ -452,7 +453,7 @@ v8funcinfo_definition_location(v8funcinfo_t *fip, mdbv8_strbuf_t *strb,
 	 * print out the position itself (which is basically a character offset
 	 * into the script).
 	 */
-	if (fip->v8fi_line_endings == NULL) {
+	if (fip->v8fi_line_endings == (uintptr_t)NULL) {
 		if (tokpos == V8_VALUE_SMI((uintptr_t)-1)) {
 			mdbv8_strbuf_sprintf(strb, "unknown position");
 		} else {
diff --git a/version b/version
index a5f99e5..5e41ccc 100644
--- a/version
+++ b/version
@@ -8,4 +8,4 @@
 #
 # This value is also used by the "publish" target in the build process.
 #
-1.4.0
+1.4.1
