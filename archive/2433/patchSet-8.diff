commit b3ee75ae92096cd68e95175c7d2ef8a874e6c4f9 (refs/changes/33/2433/8)
Author: Nick Zivkovic <nick.zivkovic@joyent.com>
Date:   2017-09-07T18:12:34+00:00 (2 years, 1 month ago)
    
    DOCKER-1047 Allow network pools as arguments for --network and --label triton.network.public

diff --git a/lib/backends/sdc/containers.js b/lib/backends/sdc/containers.js
index 516d192..2f32825 100644
--- a/lib/backends/sdc/containers.js
+++ b/lib/backends/sdc/containers.js
@@ -209,16 +209,6 @@ function generateExposeRange(account, vm, proto, ports, cb) {
 }
 
 
-/**
- * List networks in NAPI, filtering by params
- */
-function listNetworks(opts, params, callback) {
-    var napi = getNapiClient(opts.config.napi);
-
-    napi.listNetworks(params, {headers: {'x-request-id': opts.req_id}},
-        callback);
-}
-
 /**
  * Add the "EXPOSE" firewall rules to the payload.  Note that we open up all
  * ports between docker hosts right now, since this is what other inter-host
@@ -457,7 +447,8 @@ function addPublishFirewallRules(opts, container, img, payload, callback) {
             var ports = exposedPorts[portProto];
 
             if (ports.length === 0) {
-                return cb(null, []);
+                cb(null, []);
+                return;
             }
 
             // Generate firewall rules. If port ranges are available, use them
@@ -587,7 +578,7 @@ function addNetworksToPayload(opts, container, payload, callback) {
                     || networkMode === 'default') {
                 defaultFabricNetwork(opts, payload, next);
             } else {
-                mod_networks.findNetworkByNameOrId(networkMode, opts,
+                mod_networks.findNetworkOrPoolByNameOrId(networkMode, opts,
                     function (findErr, network)
                 {
                     if (findErr) {
@@ -672,7 +663,6 @@ function externalNetworkByName(opts, container, payload, callback) {
     // Find the external network using the given (or default) network name.
     var listParams = {
         name: externalNetworkName || opts.config.externalNetwork || 'external',
-        fabric: false,
         provisionable_by: opts.account.uuid
     };
 
@@ -680,9 +670,10 @@ function externalNetworkByName(opts, container, payload, callback) {
         format('Networks: fabrics not configured, using network %s',
         listParams.name));
 
-    listNetworks(opts, listParams, function (err, networks) {
+    mod_networks.getNetworksOrPools(listParams, opts, function (err, networks) {
         log.debug({ err: err, res: networks },
-            format('Networks: listNetworks result for %s', listParams.name));
+            format('Networks/Pools: getNetworksOrPools result for %s',
+                listParams.name));
 
         if (err) {
             callback(errors.napiErrorWrap(err,
@@ -2876,7 +2867,8 @@ function createContainer(opts, callback) {
             clientApiVersion: opts.clientApiVersion
         }, container, function (err, _vm_payload) {
             if (err) {
-                return cb(err);
+                cb(err);
+                return;
             }
             vm_payload = _vm_payload;
             if (vm_payload.internal_metadata['docker:entrypoint'] === '[]'
diff --git a/lib/backends/sdc/networks.js b/lib/backends/sdc/networks.js
index 409f59a..bad5e6b 100644
--- a/lib/backends/sdc/networks.js
+++ b/lib/backends/sdc/networks.js
@@ -271,6 +271,122 @@ function inspectNetwork(opts, callback) {
     napiNetworkToDockerNetwork(opts.req.network, {}, callback);
 }
 
+function getNetworksOrPools(params, opts, callback) {
+    assert.object(opts, 'opts');
+    assert.object(params, 'params');
+    assert.ok(params.name || params.uuid, 'params name or uuid');
+    assert.object(opts.config, 'opts.config');
+    var napi = getNapiClient(opts.config.napi);
+    var headers = {headers: {'x-request-id': opts.req_id}};
+
+    vasync.tryEach([
+        function listNets(cb) {
+            napi.listNetworks(params, headers, function (err, res) {
+                if (res && res.length === 0) {
+                    cb(new Error('Empty List'));
+                } else {
+                    if (err && err.statusCode !== 404) {
+                        cb(null, {err: err});
+                    } else {
+                        cb(err, {res: res});
+                    }
+                }
+            });
+        },
+        function listFiltNets(cb) {
+            /*
+             * This is our fallback in case we are talking to an older version
+             * of NAPI that does not support matching UUIDs by prefix.
+             */
+            if (params.name) {
+                /* Can't prefix search names */
+                cb(new Error('Net name not found'));
+                return;
+            }
+            var uuid = params.uuid;
+            var uuidPref = uuid.substring(0, (uuid.length - 1));
+            var sz = uuidPref.length;
+            if (uuid[(uuid.length - 1)] !== '*') {
+                cb(new Error('Must be prefix'));
+                return;
+            }
+            var newParams = {provisionable_by: params.provisionable_by};
+            napi.listNetworks(newParams, headers, function (err, res) {
+                if (res && res.length === 0) {
+                    cb(new Error('Empty List'));
+                } else {
+                    if (err && err.statusCode !== 404) {
+                        cb(null, {err: err});
+                        return;
+                    }
+                    var filtered = res.filter(function (p) {
+                        return (uuidPref === p.uuid.substring(0, sz));
+                    });
+                    if (filtered.length > 0) {
+                        cb(null, {res: filtered});
+                    } else {
+                        cb(new Error('Network not found'));
+                    }
+                }
+            });
+        },
+        function listNetPools(cb) {
+            napi.listNetworkPools(params, headers, function (err, res) {
+                if (res && res.length === 0) {
+                    cb(new Error('Empty List'));
+                } else {
+                    if (err && err.statusCode !== 404) {
+                        cb(null, {err: err});
+                    } else {
+                        cb(err, {res: res});
+                    }
+                }
+            });
+        },
+        function listFiltNetPools(cb) {
+            /*
+             * This is our fallback in case we are talking to an older version
+             * of NAPI that does not support matching UUIDs by prefix.
+             */
+            if (params.name) {
+                /* Can't prefix search names */
+                cb(new Error('Net name not found'));
+                return;
+            }
+            var uuid = params.uuid;
+            var uuidPref = uuid.substring(0, (uuid.length - 1));
+            var sz = uuidPref.length;
+            if (uuid[(uuid.length - 1)] !== '*') {
+                cb(new Error('Must be prefix'));
+                return;
+            }
+            var newParams = {provisionable_by: params.provisionable_by};
+            napi.listNetworkPools(newParams, headers, function (err, res) {
+                if (res && res.length === 0) {
+                    cb(new Error('Empty List'));
+                } else {
+                    if (err && err.statusCode !== 404) {
+                        cb(null, {err: err});
+                        return;
+                    }
+                    var filtered = res.filter(function (p) {
+                        return (uuidPref === p.uuid.substring(0, sz));
+                    });
+                    if (filtered.length > 0) {
+                        cb(null, {res: filtered});
+                    } else {
+                        cb(new Error('Network pool not found'));
+                    }
+                }
+            });
+        },
+        function final(cb) {
+            cb(null, {res: []});
+        }
+    ], function (err, res) {
+        callback(res.err, res.res);
+    });
+}
 
 /**
  * Find the NAPI network from the given name or id.
@@ -279,7 +395,7 @@ function inspectNetwork(opts, callback) {
  * @param {Object} opts Accont and config options.
  * @param {Function} callback (err, network) Called with the found network.
  */
-function findNetworkByNameOrId(name, opts, callback) {
+function findNetworkOrPoolByNameOrId(name, opts, callback) {
     assert.object(opts, 'opts');
     assert.object(opts.account, 'opts.account');
     assert.string(opts.account.uuid, 'opts.account.uuid');
@@ -291,7 +407,6 @@ function findNetworkByNameOrId(name, opts, callback) {
 
     // need to search on networks by: name, fabric-true, owner_uuid
     var log = opts.log;
-    var napi = getNapiClient(opts.config.napi);
 
     // NOTE: the order of the functions in this parallel() call is significant;
     // they are ordered by how docker prefers to resolve IDs:
@@ -317,8 +432,7 @@ function findNetworkByNameOrId(name, opts, callback) {
                     provisionable_by: opts.account.uuid
                 };
 
-                napi.listNetworks(listParams,
-                    { headers: { 'x-request-id': opts.req_id }}, cb);
+                getNetworksOrPools(listParams, opts, cb);
             },
             function byName(cb) {
                 var listParams = {
@@ -330,8 +444,7 @@ function findNetworkByNameOrId(name, opts, callback) {
                     util.format('Networks: searching for network %s',
                         listParams.name));
 
-                napi.listNetworks(listParams,
-                    { headers: {'x-request-id': opts.req_id }}, cb);
+                getNetworksOrPools(listParams, opts, cb);
             },
             function byDockerId(cb) {
                 // we assume the 'double uuid' convention for networks here,
@@ -371,8 +484,7 @@ function findNetworkByNameOrId(name, opts, callback) {
                     util.format('Networks: searching for network %s',
                         listParams.uuid));
 
-                napi.listNetworks(listParams,
-                    { headers: {'x-request-id': opts.req_id }}, cb);
+                getNetworksOrPools(listParams, opts, cb);
             }
         ]
     }, function _listedNetworks(err, results) {
@@ -436,7 +548,8 @@ function findNetworkByNameOrId(name, opts, callback) {
 
 
 module.exports = {
-    findNetworkByNameOrId: findNetworkByNameOrId,
+    findNetworkOrPoolByNameOrId: findNetworkOrPoolByNameOrId,
     inspectNetwork: inspectNetwork,
+    getNetworksOrPools: getNetworksOrPools,
     listNetworks: listNetworks
 };
diff --git a/lib/endpoints/networks.js b/lib/endpoints/networks.js
index cd71323..cc75abf 100644
--- a/lib/endpoints/networks.js
+++ b/lib/endpoints/networks.js
@@ -120,7 +120,7 @@ function register(http, before) {
             log: req.log,
             req_id: req.getId()
         };
-        req.backend.findNetworkByNameOrId(req.params.id, opts,
+        req.backend.findNetworkOrPoolByNameOrId(req.params.id, opts,
             function onFindNetwork(err, network)
         {
             if (err) {
diff --git a/package.json b/package.json
index aab7552..e9fdf92 100644
--- a/package.json
+++ b/package.json
@@ -29,7 +29,7 @@
     "trace-event": "1.2.0",
     "triton-tags": "1.1.4",
     "ufds": "1.2.0",
-    "vasync": "1.6.3",
+    "vasync": "git+https://cr.joyent.us/p/joyent/node-vasync.git#4932adf889e5c2fb5594e539da6a2d9bfcd21aa2",
     "verror": "1.9.0",
     "wf-client": "0.2.1",
     "xregexp": "3.1.0"
diff --git a/test/integration/api-create.test.js b/test/integration/api-create.test.js
index 6b40d75..60aeb45 100644
--- a/test/integration/api-create.test.js
+++ b/test/integration/api-create.test.js
@@ -488,6 +488,15 @@ test('create with NetworkMode (docker run --net=)', function (tt) {
             fNetwork3 = results.operations[2].result;
             nonFabricNetwork = results.operations[3].result;
 
+            t.test('create pool', function (t2) {
+                h.getOrCreateNetworkPool(NAPI, 'sdcdockertest_apicreate_netp', {
+                    networks: [ nonFabricNetwork.uuid ]
+                }, function (err2) {
+                    t2.ifErr(err2, 'create pool failed');
+                    t2.end();
+                });
+            });
+
             t.end();
         });
     });
@@ -515,6 +524,30 @@ test('create with NetworkMode (docker run --net=)', function (tt) {
         }
     });
 
+    // create with networkPool name
+    tt.test('create with a networkPool name', function (t) {
+        h.createDockerContainer({
+            vmapiClient: VMAPI,
+            dockerClient: DOCKER_ALICE,
+            test: t,
+            extra: { 'HostConfig.NetworkMode': 'sdcdockertest_apicreate_netp' },
+            start: true
+        }, oncreate);
+
+        function oncreate(err, result) {
+            t.ifErr(err, 'create NetworkPool: networkName');
+            var nics = result.vm.nics;
+            t.equal(nics[0].network_uuid, nonFabricNetwork.uuid,
+                'correct network');
+            DOCKER_ALICE.del('/containers/' + result.id + '?force=1', ondelete);
+        }
+
+        function ondelete(err) {
+            t.ifErr(err, 'delete network testing container');
+            t.end();
+        }
+    });
+
     tt.test('create with a complete network id', function (t) {
         var fullId = (fNetwork1.uuid + fNetwork1.uuid).replace(/-/g, '');
 
@@ -527,6 +560,7 @@ test('create with NetworkMode (docker run --net=)', function (tt) {
         }, oncreate);
 
         function oncreate(err, result) {
+            t.ifErr(err, 'create network testing container');
             var nics = result.vm.nics;
             t.equal(nics.length, 1, 'only one nic');
             t.equal(nics[0].network_uuid, fNetwork1.uuid, 'correct network');
@@ -552,6 +586,7 @@ test('create with NetworkMode (docker run --net=)', function (tt) {
         }, oncreate);
 
         function oncreate(err, result) {
+            t.ifErr(err, 'create network testing container');
             var nics = result.vm.nics;
             t.equal(nics.length, 1, 'only one nic');
             t.equal(nics[0].network_uuid, fNetwork1.uuid, 'correct network');
diff --git a/test/integration/helpers.js b/test/integration/helpers.js
index ff7faaa..7e4ab7e 100644
--- a/test/integration/helpers.js
+++ b/test/integration/helpers.js
@@ -1881,6 +1881,28 @@ function getOrCreateFabricNetwork(client, userUuid, vlan_id, params, callback) {
     );
 }
 
+/*
+ * Gets or creates a network pool for use in testing; based on the
+ * network *name*.
+ */
+function getOrCreateNetworkPool(client, name, params, callback) {
+    assert.object(client, 'napi client');
+    assert.object(params, 'network params');
+
+    var listParams = {
+        name: name
+    };
+    client.listNetworkPools(listParams, function (err, networks) {
+        if (err) {
+            return callback(err);
+        }
+        if (networks.length !== 0) {
+            return callback(null, networks[0]);
+        }
+        client.createNetworkPool(name, params, callback);
+    });
+}
+
 function getNetwork(client, params, callback) {
     assert.object(client, 'napi client');
     assert.object(params, 'network params');
@@ -2062,6 +2084,7 @@ module.exports = {
     getOrCreateExternalNetwork: getOrCreateExternalNetwork,
     getOrCreateFabricVLAN: getOrCreateFabricVLAN,
     getOrCreateFabricNetwork: getOrCreateFabricNetwork,
+    getOrCreateNetworkPool: getOrCreateNetworkPool,
     getNetwork: getNetwork,
     getNicsByVm: getNicsByVm,
     isFabricNetworkingEnabled: isFabricNetworkingEnabled,
