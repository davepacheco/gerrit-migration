From fce2ba8721634bbb05723f187dbeef3d305ea435 Mon Sep 17 00:00:00 2001
From: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
Date: Wed, 7 Aug 2019 11:21:26 -0600
Subject: [PATCH] MANTA-4444 Expose a function in electric-boray to request the
 vnode assignments for a particular pnode

---
 lib/data_placement.js | 10 +++++----
 lib/dtrace.js         |  8 ++++++-
 lib/server.js         | 52 +++++++++++++++++++++++++++++++++++++++++--
 3 files changed, 63 insertions(+), 7 deletions(-)

diff --git a/lib/data_placement.js b/lib/data_placement.js
index ae161d9..60d5cc4 100644
--- a/lib/data_placement.js
+++ b/lib/data_placement.js
@@ -190,7 +190,6 @@ DataDirector.prototype.getPnodes = function getPnodes() {
     }
 };
 
-// TODO add error checking
 DataDirector.prototype.getVnodes = function getVnodes(pnode) {
     var self = this;
     var log = self.log_;
@@ -198,10 +197,13 @@ DataDirector.prototype.getVnodes = function getVnodes(pnode) {
     log.debug('DataDirectory.getVnodes (%s): entered', pnode);
 
     if (self.dataPlacement.version === '1.0.0') {
-        return (Object.keys(self.dataPlacement.ring.pnodeToVnodeMap[pnode]));
-    } else {
-        return ([]);
+        var vnodeDataForPnode = self.dataPlacement.ring.pnodeToVnodeMap[pnode];
+        if (vnodeDataForPnode) {
+            return (Object.keys(vnodeDataForPnode));
+        }
     }
+
+    return ([]);
 };
 
 DataDirector.prototype.getAllNodes = function getAllNodes() {
diff --git a/lib/dtrace.js b/lib/dtrace.js
index f804ade..cd5dd22 100644
--- a/lib/dtrace.js
+++ b/lib/dtrace.js
@@ -77,7 +77,13 @@ var PROBES = {
     'listobjects-record': ['int'],
 
     // msgid, num_records
-    'listobjects-done': ['int']
+    'listobjects-done': ['int'],
+
+    // msgid, pnode
+    'getvnodes-start': ['int', 'char *'],
+
+    // msgid
+    'getvnodes-done': ['int']
 };
 var PROVIDER;
 
diff --git a/lib/server.js b/lib/server.js
index 64ab062..2454f13 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -102,6 +102,10 @@ var LO_ARGS_SCHEMA = [
     { name: 'request_id', type: 'string' }
 ];
 
+var GV_ARGS_SCHEMA = [
+    { name: 'pnode', type: 'string' }
+];
+
 util.inherits(LimitMarkerStream, events.EventEmitter);
 function LimitMarkerStream(opts) {
     var self = this;
@@ -408,7 +412,8 @@ function createServer(options, callback) {
                 { rpcmethod: 'createobject', rpchandler: createObject(opts) },
                 { rpcmethod: 'updateobject', rpchandler: updateObject(opts) },
                 { rpcmethod: 'deleteobject', rpchandler: deleteObject(opts) },
-                { rpcmethod: 'listobjects', rpchandler: listObjects(opts) }
+                { rpcmethod: 'listobjects', rpchandler: listObjects(opts) },
+                { rpcmethod: 'getvnodes', rpchandler: getVnodes(opts) }
             ];
 
             methods.forEach(function (rpc) {
@@ -659,7 +664,7 @@ function getBucket(options) {
                 }, 'getBucket: returned');
 
                 dtrace['getbucket-done'].fire(function () {
-                    return ([msgid]);
+                    return ([msgid, rbucket]);
                 });
 
                 /*
@@ -1566,6 +1571,49 @@ function paginationStream(opts, onRecord, done) {
     }
 }
 
+function getVnodes(options) {
+    assert.object(options, 'options');
+    assert.object(options.log, 'options.log');
+    assert.object(options.clients, 'options.clients');
+
+    function _getVnodes(rpc) {
+        var msgid = rpc.requestId();
+        var argv = rpc.argv();
+
+        if (invalidArgs(rpc, argv, GV_ARGS_SCHEMA)) {
+            return;
+        }
+
+        var pnode = argv[0];
+
+        dtrace['getvnodes-start'].fire(function () {
+            return ([msgid, pnode]);
+        });
+
+        var log = options.log;
+
+        log.debug({
+            pnode: pnode
+        }, 'getVnodes: entered');
+
+        var vnodes = options.dataDirector.getVnodes(pnode);
+
+        dtrace['getvnodes-done'].fire(function () {
+            return ([msgid]);
+        });
+
+        log.debug({
+            pnode: pnode
+        }, 'getVnodes: done');
+
+
+        rpc.write(vnodes);
+        rpc.end();
+    }
+
+    return _getVnodes;
+}
+
 module.exports = {
     createServer: createServer
 };
-- 
2.21.0

