commit 00fee5fc724ec48b0bf82e045aaf5159f8423274
Author: Todd Whiteman <todd.whiteman@joyent.com>
Date:   2019-04-24T14:39:27-07:00 (6 months ago)
    
    TRITON-1633 vmapi migration test must define a network for vm provision

diff --git a/test/lib/migration.js b/test/lib/migration.js
index a90c1c2..0998b2d 100644
--- a/test/lib/migration.js
+++ b/test/lib/migration.js
@@ -293,7 +293,7 @@ function TestMigrationCfg(test, cfg) {
                         return;
                     }
                     if (!body || !body[0] || !body[0].uuid) {
-                        t.ok(false, 'no nat zone found');
+                        t.ok(true, 'SKIP - no nat zone found');
                         next(true);
                         return;
                     }
diff --git a/test/vms.migrate.test.js b/test/vms.migrate.test.js
index e71d383..69ef28f 100644
--- a/test/vms.migrate.test.js
+++ b/test/vms.migrate.test.js
@@ -136,7 +136,7 @@ exports.setUp = function (callback) {
 
 /* Tests */
 
-exports.get_admin_fabric_network = function (t) {
+exports.get_provision_network = function test_get_provision_network(t) {
     client.napi.get('/fabrics/' + ADMIN_USER_UUID + '/vlans',
             function (err, req, res, vlans) {
         if (err) {
@@ -147,7 +147,7 @@ exports.get_admin_fabric_network = function (t) {
                 t.ok(false, 'Error listing fabric vlans: ' + err);
             }
 
-            t.done();
+            lookupExternalNetwork();
             return;
         }
 
@@ -166,6 +166,28 @@ exports.get_admin_fabric_network = function (t) {
             t.ok(networks.length === 1, '1 network found');
 
             t.ok(networks[0], 'Admin fabric network should be found');
+            if (Array.isArray(networks) && networks.length >= 1) {
+                PROVISION_NETWORKS = [ {uuid: networks[0].uuid} ];
+                t.done();
+                return;
+            }
+
+            lookupExternalNetwork();
+        });
+    }
+
+    function lookupExternalNetwork() {
+        assert.equal(PROVISION_NETWORKS.length, 0,
+            'Should be no provision networks set');
+
+        client.napi.get('/networks?nic_tag=external',
+                function _getExternalNetworks(err, req, res, networks) {
+            common.ifError(t, err);
+            t.equal(res.statusCode, 200, '200 OK');
+            t.ok(networks, 'networks is set');
+            t.ok(Array.isArray(networks), 'networks is Array');
+            t.ok(networks.length >= 1, 'at least 1 external network found');
+
             if (Array.isArray(networks) && networks.length >= 1) {
                 PROVISION_NETWORKS = [ {uuid: networks[0].uuid} ];
             }
