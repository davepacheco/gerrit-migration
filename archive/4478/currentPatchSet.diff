From d5e8a3a3e1e4740d05a05d80fb2587f98364c259 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?K=C3=A9vin=20Berthommier?= <kevin.bertho@gmail.com>
Date: Tue, 3 Jul 2018 23:10:29 +0200
Subject: [PATCH] lint

---
 lib/verror.js | 21 ++++++++++++++-------
 1 file changed, 14 insertions(+), 7 deletions(-)

diff --git a/lib/verror.js b/lib/verror.js
index 9a68afe..bd9e015 100644
--- a/lib/verror.js
+++ b/lib/verror.js
@@ -82,8 +82,7 @@ function parseConstructorArguments(args)
 		if (!isString(argv[0])) {
 			throw new mod_AssertionError(
 				'first argument to VError, SError, or WError ' +
-				'constructor must be a string, object, or Error'
-			);
+				'constructor must be a string, object, or Error');
 		}
 		options = {};
 		sprintf_args = argv;
@@ -171,7 +170,8 @@ function VError()
 	 */
 	if (parsed.options.name) {
 		if (!isString(parsed.options.name)) {
-			throw new mod_AssertionError('error\'s "name" must be a string');
+			throw new mod_AssertionError(
+				'error\'s "name" must be a string');
 		}
 		this.name = parsed.options.name;
 	}
@@ -303,7 +303,9 @@ VError.findCauseByName = function (err, name)
 	}
 
 	for (cause = err; cause !== null; cause = VError.cause(cause)) {
-		if (!isError(cause)) throw new mod_AssertionError('cause must be an Error');
+		if (!isError(cause)) {
+			throw new mod_AssertionError('cause must be an Error');
+		}
 		if (cause.name == name) {
 			return (cause);
 		}
@@ -332,9 +334,13 @@ VError.fullStack = function (err)
 
 VError.errorFromList = function (errors)
 {
-	if (!Array.isArray(errors)) throw new mod_AssertionError('errors ([object]) is required');
+	if (!Array.isArray(errors)) {
+		throw new mod_AssertionError('errors ([object]) is required');
+	}
 	errors.forEach(function (e) {
-		if (!isObject(e)) throw new mod_AssertionError('errors ([object]) is required');
+		if (!isObject(e)) {
+			throw new mod_AssertionError('errors ([object]) is required');
+	}
 	});
 
 	if (errors.length === 0) {
@@ -413,7 +419,8 @@ mod_util.inherits(SError, VError);
 function MultiError(errors)
 {
 	if (!Array.isArray(errors)) {
-		throw new mod_AssertionError('list of errors (array) is required');
+		throw new mod_AssertionError(
+			'list of errors (array) is required');
 	}
 	if (!(errors.length > 0)) {
 		throw new mod_AssertionError('must be at least one error');
-- 
2.21.0

