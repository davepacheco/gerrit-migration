commit e25b79a16bf622b3b023a916562ca5fd9e825ea7 (refs/changes/94/2394/1)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2017-08-15T00:10:01+00:00 (2 years, 2 months ago)
    
    NAPI-416 Accept MAC addresses without leading zeros
    NAPI-428 Creating an aggregation with an unknown MAC address returns InternalError
    NAPI-429 MAC provisioning calculates an incorrect maximum address for an OUI

diff --git a/lib/models/aggregation.js b/lib/models/aggregation.js
index c478a91..0b9a7b5 100644
--- a/lib/models/aggregation.js
+++ b/lib/models/aggregation.js
@@ -17,12 +17,12 @@
 var constants = require('../util/constants');
 var errors = require('../util/errors');
 var jsprim = require('jsprim');
+var mod_mac = require('macaddr');
 var mod_moray = require('../apis/moray');
 var mod_nic = require('./nic');
 var mod_nicTag = require('./nic-tag');
 var util = require('util');
 var util_common = require('../util/common');
-var util_mac = require('../util/mac');
 var validate = require('../util/validate');
 var vasync = require('vasync');
 var VError = require('verror');
@@ -46,7 +46,6 @@ var BUCKET = {
         }
     }
 };
-var MAX_MACS = 16;
 
 
 // --- Schema validation objects
@@ -133,6 +132,8 @@ function validateMACs(opts, name, list, callback) {
     }
 
     util_common.arrayify(list).forEach(function (m) {
+        var mac, macNum;
+
         if (typeof (m) !== 'string') {
             if (typeof (m) === 'object') {
                 invalid['object'] = 1;
@@ -143,84 +144,106 @@ function validateMACs(opts, name, list, callback) {
             return;
         }
 
-        var macNum = util_mac.aton(m);
-        if (macNum) {
+        try {
+            mac = mod_mac.parse(m);
+            macNum = mac.toLong();
             if (macs.indexOf(macNum) === -1) {
                 macs.push(macNum);
-                macAddrs.push(m);
+                macAddrs.push(mac);
             }
-        } else {
+        } catch (_) {
             invalid[m] = 1;
         }
     });
 
     if (!jsprim.isEmpty(invalid)) {
-        var mErr = new errors.invalidParam(name, 'invalid MAC addresses',
-            { invalid: Object.keys(invalid).sort() });
-        return callback(mErr);
+        callback(errors.invalidParam(name, 'invalid MAC addresses',
+            { invalid: Object.keys(invalid).sort() }));
+        return;
     }
 
-    if (macs.length > MAX_MACS) {
-        return callback(new errors.invalidParam(name,
-            util.format('maximum of %d MAC addresses supported', MAX_MACS)));
+    if (macs.length > constants.MAX_AGGR_MACS) {
+        callback(errors.invalidParam(name,
+            util.format('maximum of %d MAC addresses supported',
+                constants.MAX_AGGR_MACS)));
+        return;
     }
 
     if (macs.length === 0) {
-        return callback(new errors.invalidParam(name,
+        callback(errors.invalidParam(name,
             'must specify at least one MAC address'));
+        return;
     }
 
     var nicObjs = [];
     var toReturn = {};
     toReturn[name] = macs;
-    toReturn['_nics'] = {};
 
     vasync.forEachParallel({
         inputs: macAddrs,
         func: function (mac, cb) {
-            mod_nic.get({ app: opts.app, log: opts.log, params: { mac: mac } },
-                function (gErr, res) {
-                if (res) {
-                    toReturn._nics[mac] = res;
+            mod_nic.get({
+                app: opts.app,
+                log: opts.log,
+                params: {
+                    mac: mac.toLong()
+                }
+            }, function (gErr, res) {
+                if (gErr) {
+                    if (!VError.hasCauseWithName(gErr, 'ObjectNotFoundError')) {
+                        cb(gErr);
+                        return;
+                    }
+
+                    invalid[mac.toString()] = 1;
+                } else {
                     nicObjs.push(res);
                 }
 
-                return cb(gErr);
+                cb();
             });
         }
     }, function (err, res) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
+        }
+
+        if (!jsprim.isEmpty(invalid)) {
+            callback(errors.invalidParam(name, 'unknown MAC addresses',
+                { invalid: Object.keys(invalid).sort() }));
+            return;
         }
 
         var invalidMACs = [];
-        var n;
 
-        // Make sure all nics' belongs_to_uuid match
-        for (n in nicObjs) {
-            if (nicObjs[n].params.belongs_to_uuid
+        for (var i = 0; i < nicObjs.length; i++) {
+            // Make sure all NICs have the same belongs_to_uuid
+            if (nicObjs[i].params.belongs_to_uuid
                 !== nicObjs[0].params.belongs_to_uuid) {
-                return callback(new errors.invalidParam(name,
+                callback(errors.invalidParam(name,
                     constants.msg.AGGR_MATCH));
-           }
-        }
+                return;
+            }
 
-        // Make sure all nics belong to a server
-        for (n in nicObjs) {
-            if (nicObjs[n].params.belongs_to_type !== 'server') {
-                invalidMACs.push(util_mac.ntoa(nicObjs[n].mac));
-           }
+            // Make sure all NICs belong to a server
+            if (nicObjs[i].params.belongs_to_type !== 'server') {
+                invalidMACs.push(nicObjs[i].mac.toString());
+            }
         }
 
+
         if (invalidMACs.length !== 0) {
-            var serverErr = new errors.invalidParam(name,
+            var serverErr = errors.invalidParam(name,
                 constants.msg.AGGR_BELONGS);
             serverErr.invalid = invalidMACs.sort();
-            return callback(serverErr);
+            callback(serverErr);
+            return;
         }
 
         toReturn.belongs_to_uuid = nicObjs[0].params.belongs_to_uuid;
-        return callback(null, null, toReturn);
+
+        callback(null, null, toReturn);
     });
 }
 
@@ -304,7 +327,7 @@ Aggr.prototype.serialize = function aggrSerialize() {
         lacp_mode: this.params.lacp_mode,
         name: this.params.name,
         macs: this.params.macs.map(function (m) {
-            return util_mac.ntoa(m);
+            return mod_mac.parse(m).toString();
         })
     };
 
@@ -366,7 +389,8 @@ function getAggr(opts, callback) {
 
     validate.params(GET_SCHEMA, null, opts.params, function (err, validated) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         mod_moray.getObj(opts.app.moray, BUCKET, validated.id,
diff --git a/lib/models/network.js b/lib/models/network.js
index 4f6e65b..b2fa213 100644
--- a/lib/models/network.js
+++ b/lib/models/network.js
@@ -27,7 +27,6 @@ var restify = require('restify');
 var util = require('util');
 var util_common = require('../util/common');
 var util_ip = require('../util/ip');
-var util_mac = require('../util/mac');
 var util_subnet = require('../util/subnet');
 var UUID = require('node-uuid');
 var validate = require('../util/validate');
@@ -254,7 +253,7 @@ var GET_SCHEMA = {
  * suitable for an InUseError.
  */
 function nicUsedByError(nic) {
-    return errors.usedBy('nic', util_mac.ntoa(nic.mac));
+    return errors.usedBy('nic', nic.mac.toString());
 }
 
 
diff --git a/lib/models/nic/obj.js b/lib/models/nic/obj.js
index fc9a44d..ac8b39b 100644
--- a/lib/models/nic/obj.js
+++ b/lib/models/nic/obj.js
@@ -19,12 +19,12 @@ var BUCKET = require('./bucket').BUCKET;
 var constants = require('../../util/constants');
 var errors = require('../../util/errors');
 var fmt = require('util').format;
+var mod_mac = require('macaddr');
 var mod_moray = require('../../apis/moray');
 var mod_portolan_moray = require('portolan-moray');
 var mod_net = require('../network');
 var mod_ip = require('../ip');
 var util_ip = require('../../util/ip');
-var util_mac = require('../../util/mac');
 var vasync = require('vasync');
 var VError = require('verror').VError;
 
@@ -179,15 +179,16 @@ function Nic(params) {
 
     params.state = params.state || constants.DEFAULT_NIC_STATE;
 
-    // Allow mac to be passed in as a number or address, but the internal
-    // representation is always a number
-    var mac = params.mac;
-    // XXX - isNaN() is not safe here '' coerces to 0, which we don't want.
-    if (isNaN(mac)) {
-        mac = util_mac.macAddressToNumber(params.mac);
+    try {
+        /*
+         * We allow "mac" to be passed in as a number or address string, but
+         * represent it internally in NAPI as a MAC object. When storing it
+         * in Moray, we then always store it as a number.
+         */
+        this.mac = mod_mac.parse(params.mac);
+    } catch (e) {
+        throw new VError(e, 'invalid MAC address %j', params.mac);
     }
-    assert.ok(mac, fmt('invalid MAC address "%s"', params.mac));
-    params.mac = mac;
 
     if (params.hasOwnProperty('nic_tags_provided_arr')) {
         params.nic_tags_provided = params.nic_tags_provided_arr;
@@ -233,11 +234,6 @@ function Nic(params) {
     Object.seal(this);
 }
 
-Object.defineProperty(Nic.prototype, 'mac', {
-    get: function () { return this.params.mac; },
-    set: function (val) { this.params.mac = val; }
-});
-
 
 /**
  * Returns an object suitable for passing to a moray batch
@@ -246,7 +242,7 @@ Nic.prototype.batch = function nicBatch(opts) {
     var batch = [
         {
             bucket: BUCKET.name,
-            key: this.mac.toString(),
+            key: this.mac.toLong().toString(),
             operation: 'put',
             value: this.raw(),
             options: {
@@ -270,7 +266,7 @@ Nic.prototype.batch = function nicBatch(opts) {
                 primary_flag: 'false'
             },
             filter: fmt('(&(belongs_to_uuid=%s)(!(mac=%d)))',
-                this.params.belongs_to_uuid, this.mac),
+                this.params.belongs_to_uuid, this.mac.toLong()),
             operation: 'update'
         });
     }
@@ -294,7 +290,7 @@ Nic.prototype.batch = function nicBatch(opts) {
             cn_uuid: this.params.cn_uuid,
             deleted: false,
             ip: this.ip.v6address,
-            mac: this.mac,
+            mac: this.mac.toLong(),
             vnet_id: this.network.vnet_id
         }));
 
@@ -302,14 +298,14 @@ Nic.prototype.batch = function nicBatch(opts) {
             vnetCns: opts.vnetCns,
             vnet_id: this.network.vnet_id,
             ip: this.ip.v6address,
-            mac: this.mac,
+            mac: this.mac.toLong(),
             vlan_id: this.network.params.vlan_id
         });
 
         opts.log.debug({
             vnet_id: this.network.vnet_id,
             ip: this.ip.v6address,
-            mac: this.mac,
+            mac: this.mac.toLong(),
             vlan: this.network.params.vlan_id,
             key: _vl3batch.uuid,
             batch: _vl3batch
@@ -334,7 +330,7 @@ Nic.prototype.delBatch = function nicDelBatch(opts) {
     var batch = [
         {
             bucket: BUCKET.name,
-            key: this.mac.toString(),
+            key: this.mac.toLong().toString(),
             operation: 'delete'
         }
     ];
@@ -357,7 +353,7 @@ Nic.prototype.delBatch = function nicDelBatch(opts) {
             cn_uuid: this.params.cn_uuid,
             deleted: true,
             ip: this.ip.v6address,
-            mac: this.mac,
+            mac: this.mac.toLong(),
             vnet_id: this.network.vnet_id
         }));
 
@@ -368,13 +364,13 @@ Nic.prototype.delBatch = function nicDelBatch(opts) {
         var _vl2batch = mod_portolan_moray.vl2CnEventBatch({
             vnetCns: opts.vnetCns,
             vnet_id: this.network.vnet_id,
-            mac: this.mac,
+            mac: this.mac.toLong(),
             existingNic: opts.existingNic
         });
 
         opts.log.debug({
             key: _vl2batch.uuid,
-            mac: this.mac,
+            mac: this.mac.toLong(),
             vnet_id: this.network.vnet_id,
             batch: batch,
             logBatch: _vl2batch
@@ -433,7 +429,7 @@ Nic.prototype.isUnderlay = function isUnderlay() {
  */
 Nic.prototype.serialize = function nicSerialize() {
     var self = this;
-    var macAddr = util_mac.ntoa(this.params.mac);
+    var macAddr = this.mac.toString();
     var serialized = {
         belongs_to_type: this.params.belongs_to_type,
         belongs_to_uuid: this.params.belongs_to_uuid,
@@ -500,7 +496,7 @@ Nic.prototype.serialize = function nicSerialize() {
 Nic.prototype.raw = function nicRaw() {
     var self = this;
     var raw = {
-        mac: this.params.mac,
+        mac: this.mac.toLong(),
         owner_uuid: this.params.owner_uuid,
         belongs_to_uuid: this.params.belongs_to_uuid,
         belongs_to_type: this.params.belongs_to_type,
diff --git a/lib/models/nic/provision.js b/lib/models/nic/provision.js
index c211812..35e2685 100644
--- a/lib/models/nic/provision.js
+++ b/lib/models/nic/provision.js
@@ -24,7 +24,7 @@ var Nic = require('./obj').Nic;
 var restify = require('restify');
 var util = require('util');
 var util_common = require('../../util/common');
-var util_mac = require('../../util/mac');
+var util_oui = require('../../util/oui');
 var vasync = require('vasync');
 var VError = require('verror');
 
@@ -49,7 +49,7 @@ function freeOldIPs(opts, callback) {
 
     assert.object(opts.existingNic, 'opts.existingNic');
 
-    var mac = opts.existingNic.mac;
+    var mac = opts.existingNic.mac.toLong();
     var cn_uuid = opts.existingNic.params.cn_uuid;
 
     opts._removeIPs.forEach(function addUnassignToBatch(oldIP) {
@@ -433,11 +433,11 @@ function randomMAC(opts, callback) {
     opts.macTries++;
 
     if (!opts.maxMac) {
-        opts.maxMac = util_mac.maxOUInum(opts.app.config.macOUI);
+        opts.maxMac = util_oui.maxOUInum(opts.app.config.macOUI);
     }
 
     if (!validated.mac) {
-        validated.mac = util_mac.randomNum(opts.app.config.macOUI);
+        validated.mac = util_oui.randomNum(opts.app.config.macOUI);
         opts.startMac = validated.mac;
     } else {
         validated.mac++;
@@ -446,7 +446,7 @@ function randomMAC(opts, callback) {
     if (validated.mac > opts.maxMac) {
         // We've gone over the maximum MAC number - start from a different
         // random number
-        validated.mac = util_mac.randomNum(opts.app.config.macOUI);
+        validated.mac = util_oui.randomNum(opts.app.config.macOUI);
     }
 
     opts.nic = new Nic(validated);
@@ -505,7 +505,7 @@ function nicBatch(opts, callback) {
             log: opts.log,
             vnetCns: opts.vnetCns,
             vnet_id: opts.existingNic.network.vnet_id,
-            mac: opts.existingNic.mac
+            mac: opts.existingNic.mac.toLong()
         }));
     }
 
diff --git a/lib/util/constants.js b/lib/util/constants.js
index 2b891fe..537439e 100644
--- a/lib/util/constants.js
+++ b/lib/util/constants.js
@@ -145,6 +145,7 @@ module.exports = {
     IP_PROVISION_RETRIES: 20,
     msg: MESSAGES,
     MAC_RETRIES: 50,
+    MAX_AGGR_MACS: 16,
     MAX_INTERFACE_LEN: 31,
     MAX_LIMIT: 1000,
     MAX_STR_LEN: 64,
diff --git a/lib/util/mac.js b/lib/util/mac.js
deleted file mode 100644
index 0d800de..0000000
--- a/lib/util/mac.js
+++ /dev/null
@@ -1,136 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2014, Joyent, Inc.
- */
-
-/*
- * MAC address-related utilities
- */
-
-'use strict';
-
-var NON_HEX_RE = /[^a-fA-F0-9]/g;
-
-
-/*
- * Convert a colon-separated MAC address to an integer
- */
-function macAddressToNumber(addr) {
-    if (!addr) {
-        return null;
-    }
-
-    var num = addr.replace(/[-:]/g, '');
-    if (num.length !== 12) {
-        return null;
-    }
-    if (NON_HEX_RE.test(num)) {
-        return null;
-    }
-
-    num = parseInt(num, 16);
-    if (isNaN(num)) {
-        return null;
-    }
-    return num;
-}
-
-
-/*
- * Converts a MAC OUI (eg: '90b8d0') to an integer
- */
-function macOUItoNumber(oui) {
-    return macAddressToNumber(oui + '000000');
-}
-
-
-/*
- * Converts a MAC integer into a colon-separated MAC address, or returns null
- * if the number can't be converted
- */
-function macNumberToAddress(num) {
-    // TODO: validate number range here
-    if (isNaN(num)) {
-        return null;
-    }
-
-    // 2^40 = 1099511627776
-    var a = Math.floor(num / 1099511627776);
-    var aR = num - (a * 1099511627776);
-    var aStr = a.toString(16);
-    if (aStr.length === 1) {
-        aStr = '0' + aStr;
-    }
-
-    var b = Math.floor(aR / 4294967296);
-    var bR = aR - (b * 4294967296);
-    var bStr = b.toString(16);
-    if (bStr.length === 1) {
-        bStr = '0' + bStr;
-    }
-
-    var c = Math.floor(bR / 16777216);
-    var cR = bR - (c * 16777216);
-    var cStr = c.toString(16);
-    if (cStr.length === 1) {
-        cStr = '0' + cStr;
-    }
-
-    var d = Math.floor(cR / 65536);
-    var dR = cR - (d * 65536);
-    var dStr = d.toString(16);
-    if (dStr.length === 1) {
-        dStr = '0' + dStr;
-    }
-
-    var e = Math.floor(dR / 256);
-    var eR = dR - (e * 256);
-    var eStr = e.toString(16);
-    if (eStr.length === 1) {
-        eStr = '0' + eStr;
-    }
-    var fStr = eR.toString(16);
-    if (fStr.length === 1) {
-        fStr = '0' + fStr;
-    }
-
-    return aStr + ':' + bStr + ':' + cStr + ':' +
-        dStr + ':' + eStr + ':' + fStr;
-}
-
-
-/*
- * Returns the maximum MAC number for the given OUI
- */
-function maxOUInumber(oui) {
-    var ouiNum = macOUItoNumber(oui);
-    return 16777216 + ouiNum;
-}
-
-
-/*
- * Generates a random MAC number with the given OUI as a prefix
- */
-function randomMACnumber(oui) {
-    var ouiNum = macOUItoNumber(oui);
-    // Create a random number between 000000 and ffffff, and add the OUI
-    // number to it
-    return Math.floor(Math.random() * 16777216) + ouiNum;
-}
-
-
-
-module.exports = {
-    aton: macAddressToNumber,
-    macAddressToNumber: macAddressToNumber,
-    macOUItoNumber: macOUItoNumber,
-    macNumberToAddress: macNumberToAddress,
-    maxOUInum: maxOUInumber,
-    ntoa: macNumberToAddress,
-    randomNum: randomMACnumber
-};
diff --git a/lib/util/oui.js b/lib/util/oui.js
new file mode 100644
index 0000000..796e553
--- /dev/null
+++ b/lib/util/oui.js
@@ -0,0 +1,56 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+/*
+ * OUI/MAC address-related utilities
+ */
+
+'use strict';
+
+var mod_mac = require('macaddr');
+
+
+/*
+ * Converts a MAC OUI (eg: '90b8d0') to an integer
+ */
+function macOUItoNumber(oui) {
+    return mod_mac.parse(oui + '000000').toLong();
+}
+
+
+/*
+ * Returns the maximum MAC number for the given OUI
+ */
+function maxOUInumber(oui) {
+    var ouiNum = macOUItoNumber(oui);
+    return 0xffffff + ouiNum;
+}
+
+
+/*
+ * Generates a random MAC number with the given OUI as a prefix.
+ */
+function randomMACnumber(oui) {
+    /*
+     * Create a random number between 000000 and ffffff, and add the OUI
+     * number to it.
+     */
+    var ouiNum = macOUItoNumber(oui);
+    var random = Math.floor(Math.random() * 0xffffff);
+    return ouiNum + random;
+}
+
+
+
+module.exports = {
+    macOUItoNumber: macOUItoNumber,
+    maxOUInum: maxOUInumber,
+    randomNum: randomMACnumber
+};
diff --git a/lib/util/validate.js b/lib/util/validate.js
index e65d94a..1d00a3e 100644
--- a/lib/util/validate.js
+++ b/lib/util/validate.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016, Joyent, Inc.
+ * Copyright 2017, Joyent, Inc.
  */
 
 /*
@@ -19,10 +19,10 @@ var constants = require('../util/constants');
 var errors = require('./errors');
 var fmt = require('util').format;
 var ipaddr = require('ip6addr');
+var macaddr = require('macaddr');
 var util = require('util');
 var util_common = require('./common');
 var util_ip = require('./ip');
-var util_mac = require('./mac');
 var warden = require('restify-warden');
 
 
@@ -195,14 +195,17 @@ function validateIPv4(_, name, addr, callback) {
  * Validates a MAC address
  */
 function validateMAC(_, name, addr, callback) {
-    var macNum = util_mac.aton(addr);
+    var macNum;
 
-    if (!macNum) {
-        return callback(errors.invalidParam(name,
+    try {
+        macNum = macaddr.parse(addr).toLong();
+    } catch (_e) {
+        callback(errors.invalidParam(name,
             'invalid MAC address'));
+        return;
     }
 
-    return callback(null, macNum);
+    callback(null, macNum);
 }
 
 
@@ -215,23 +218,24 @@ function validateMACarray(_, name, val, callback) {
     var macs = [];
 
     for (var m in arr) {
-        var macNum = util_mac.aton(arr[m]);
-        if (macNum) {
-            macs.push(macNum);
-        } else {
+        try {
+            macs.push(macaddr.parse(arr[m]).toLong());
+        } catch (_e) {
             errs.push(arr[m]);
         }
     }
 
-    if (errs.length !== 0) {
-        var macErr = errors.invalidParam(name,
-            fmt('invalid MAC address%s',
-                errs.length === 1 ? '' : 'es'));
-        macErr.invalid = errs;
-        return callback(macErr);
+    if (errs.length === 0) {
+        callback(null, macs);
+        return;
     }
 
-    return callback(null, macs);
+    var macErr = errors.invalidParam(name,
+        fmt('invalid MAC address%s',
+        errs.length === 1 ? '' : 'es'));
+    macErr.invalid = errs;
+
+    callback(macErr);
 }
 
 
diff --git a/package.json b/package.json
index 48867e1..96fbdeb 100644
--- a/package.json
+++ b/package.json
@@ -14,6 +14,7 @@
     "ip6addr": "0.2.2",
     "jsprim": "1.4.0",
     "lomstream": "1.1.0",
+    "macaddr": "0.0.1",
     "moray": "2.0.1",
     "node-uuid": "1.4.7",
     "portolan-moray": "git+https://github.com/joyent/sdc-portolan-moray.git#7e2c4ca",
diff --git a/test/config.json b/test/config.json
index 55f60b5..d78242c 100644
--- a/test/config.json
+++ b/test/config.json
@@ -1,6 +1,7 @@
 {
   "//": "minimal NAPI config needed for unit tests",
 
+  "macOUI": "010203",
   "overlay": {
       "enabled": true,
       "defaultOverlayMTU": 1400,
diff --git a/test/lib/common.js b/test/lib/common.js
index eff72a2..eedda6e 100644
--- a/test/lib/common.js
+++ b/test/lib/common.js
@@ -559,6 +559,11 @@ function clearCreated(type) {
 }
 
 
+function resetCreated() {
+    CREATED = {};
+}
+
+
 /**
  * Assert the arguments to one of the helper functions are correct
  */
@@ -764,6 +769,7 @@ module.exports = {
     assertArgsList: assertArgsList,
     badLimitOffTests: badLimitOffTests,
     clearCreated: clearCreated,
+    resetCreated: resetCreated,
     commonErrors: commonErrors,
     createClient: createClient,
     doneErr: doneErr,
diff --git a/test/lib/moray.js b/test/lib/moray.js
index ff74b5e..b64c38d 100644
--- a/test/lib/moray.js
+++ b/test/lib/moray.js
@@ -16,7 +16,7 @@
 
 var assert = require('assert-plus');
 var mod_ip = require('../../lib/models/ip');
-var util_mac = require('../../lib/util/mac');
+var mod_mac = require('macaddr');
 
 
 // --- Internals
@@ -68,9 +68,8 @@ function getIPs(moray, network, callback) {
  * Gets a NIC record from Moray.
  */
 function getNic(moray, mac, callback) {
-    var macNum = util_mac.aton(mac);
-    assert.number(macNum, 'Not a valid MAC address');
-    moray.getObject('napi_nics', macNum.toString(), extractValue(callback));
+    moray.getObject('napi_nics', mod_mac.parse(mac).toLong().toString(),
+        extractValue(callback));
 }
 
 
diff --git a/test/lib/nic.js b/test/lib/nic.js
index 1436922..da46b70 100644
--- a/test/lib/nic.js
+++ b/test/lib/nic.js
@@ -261,6 +261,7 @@ function listNics(t, opts, callback) {
  */
 function provisionNic(t, opts, callback) {
     common.assertArgs(t, opts, callback);
+    assert.uuid(opts.net, 'opts.net');
 
     var client = opts.client || mod_client.get();
     log.debug({ params: opts.params }, 'provisioning nic');
diff --git a/test/lib/portolan.js b/test/lib/portolan.js
index 79557a5..46bdc97 100644
--- a/test/lib/portolan.js
+++ b/test/lib/portolan.js
@@ -19,10 +19,10 @@ var clone = require('clone');
 var config = require('./config');
 var common = require('./common');
 var log = require('./log');
+var mod_mac = require('macaddr');
 var mod_moray = require('moray');
 var mod_portolan_moray = require('portolan-moray');
 var util_ip = require('../../lib/util/ip');
-var util_mac = require('../../lib/util/mac');
 var vasync = require('vasync');
 
 var doneErr = common.doneErr;
@@ -45,7 +45,7 @@ function toMorayObj(exp) {
 
     // Convert colon-delimited MAC addresses to numeric form
     if (exp.mac) {
-        exp.mac = util_mac.aton(exp.mac);
+        exp.mac = mod_mac.parse(exp.mac).toLong();
     }
 
     // Ensure IP addresses are in v6 notation
@@ -237,7 +237,7 @@ function overlayMapping(t, opts, callback) {
             log: log,
             moray: client,
             noCache: true,
-            vl2_mac: util_mac.aton(nic.mac),
+            vl2_mac: mod_mac.parse(nic.mac).toLong(),
             vl2_vnet_id: vnetID
         };
 
diff --git a/test/unit/aggregations.test.js b/test/unit/aggregations.test.js
index bf925df..e4a49aa 100644
--- a/test/unit/aggregations.test.js
+++ b/test/unit/aggregations.test.js
@@ -20,13 +20,13 @@ var clone = require('clone');
 var constants = require('../../lib/util/constants');
 var mod_aggr = require('../lib/aggr');
 var mod_err = require('../../lib/util/errors');
+var mod_mac = require('macaddr');
 var mod_nic = require('../lib/nic');
 var mod_nic_tag = require('../lib/nic-tag');
 var mod_server = require('../lib/server');
 var mod_uuid = require('node-uuid');
 var test = require('tape');
 var util = require('util');
-var util_mac = require('../../lib/util/mac');
 var vasync = require('vasync');
 
 
@@ -47,6 +47,10 @@ var uuids = [
     mod_uuid.v4()
 ];
 
+var MANY_NICS = [];
+for (var j = 0; j <= constants.MAX_AGGR_MACS; j++) {
+    MANY_NICS.push('1:2:3:4:5:' + j);
+}
 
 
 // --- Variables for invalid tests
@@ -65,6 +69,11 @@ var INVALID = {
     ],
 
     macs: [
+        [ MANY_NICS, util.format('maximum of %d MAC addresses supported',
+            constants.MAX_AGGR_MACS) ],
+        [ 'foobar', 'invalid MAC addresses', [ 'foobar' ] ],
+        [ '1:2:c:g:e:f', 'invalid MAC addresses', [ '1:2:c:g:e:f' ] ],
+        [ '1:2:c:b:e:f', 'unknown MAC addresses', [ '01:02:0c:0b:0e:0f' ] ],
         [ 5, macMsg ],
         [ {}, macMsg ],
         [ '', 'must specify at least one MAC address' ],
@@ -265,7 +274,7 @@ test('create', function (t) {
                 t2.ifError(err2, 'Getting aggregation should succeed');
                 t2.ok(morayObj, 'Got Moray object');
                 res.macs = params.macs.map(function (m) {
-                    return util_mac.aton(m);
+                    return mod_mac.parse(m).toLong();
                 });
 
                 t2.deepEqual(morayObj.value, res, 'Raw Moray object');
@@ -497,7 +506,7 @@ test('get', function (t) {
 
 
 test('list', function (t) {
-    t.plan(3 + common.badLimitOffTests.length);
+    t.plan(6 + common.badLimitOffTests.length);
 
     t.test('all', function (t2) {
         mod_aggr.list(t2, {}, function (err, list) {
@@ -561,8 +570,47 @@ test('list', function (t) {
         });
     });
 
-    for (var i = 0; i < common.badLimitOffTests.length; i++) {
-        var blot = common.badLimitOffTests[i];
+    t.test('macs filter: aggrs[0].macs[0]', function (t2) {
+        mod_aggr.list(t2, {
+            params: {
+                macs: state.aggrs[0].macs[0]
+            },
+            deepEqual: true,
+            present: [ state.aggrs[0] ]
+        });
+    });
+
+    t.test('macs filter: invalid mac address', function (t2) {
+        var invalid = [ '0:1:003:3:4:5' ];
+        var err = mod_err.invalidParam('macs', 'invalid MAC address');
+        err.invalid = invalid;
+        mod_aggr.list(t2, {
+            params: {
+                macs: invalid
+            },
+            expCode: 422,
+            expErr: h.invalidParamErr({
+                errors: [ err ]
+            })
+        });
+    });
+
+    t.test('macs filter: several invalid mac addresses', function (t2) {
+        var invalid = [ '0:1:003:3:4:5', 'foobar' ];
+        var err = mod_err.invalidParam('macs', 'invalid MAC addresses');
+        err.invalid = invalid;
+        mod_aggr.list(t2, {
+            params: {
+                macs: invalid
+            },
+            expCode: 422,
+            expErr: h.invalidParamErr({
+                errors: [ err ]
+            })
+        });
+    });
+
+    common.badLimitOffTests.forEach(function (blot) {
         t.test(blot.bc_name, function (t2) {
             mod_aggr.list(t2, {
                 params: blot.bc_params,
@@ -570,7 +618,7 @@ test('list', function (t) {
                 expErr: blot.bc_experr
             });
         });
-    }
+    });
 
     // XXX: filter by nic_tags_provided
 });
diff --git a/test/unit/helpers.js b/test/unit/helpers.js
index 03df11c..794393f 100644
--- a/test/unit/helpers.js
+++ b/test/unit/helpers.js
@@ -44,6 +44,7 @@ var NON_OBJECT_PARAMS = [
 function reset() {
     NET_NUM = 2;
     NET_IPS = {};
+    common.resetCreated();
 }
 
 
diff --git a/test/unit/networks.test.js b/test/unit/networks.test.js
index 36cc567..3869a5f 100644
--- a/test/unit/networks.test.js
+++ b/test/unit/networks.test.js
@@ -1641,6 +1641,6 @@ test('Listing Network failures', function (t) {
 
 // --- Teardown
 
-
+test('delete networks', mod_net.delAllCreated);
 
 test('Stop server', mod_server.close);
diff --git a/test/unit/nics.test.js b/test/unit/nics.test.js
index 3057cd7..a28692b 100644
--- a/test/unit/nics.test.js
+++ b/test/unit/nics.test.js
@@ -22,6 +22,7 @@ var ip_common = require('../../lib/models/ip/common');
 var mod_err = require('../../lib/util/errors');
 var mod_ip = require('../lib/ip');
 var mod_jsprim = require('jsprim');
+var mod_mac = require('macaddr');
 var mod_moray = require('../lib/moray');
 var mod_net = require('../lib/net');
 var mod_nic = require('../lib/nic');
@@ -31,7 +32,6 @@ var mod_uuid = require('node-uuid');
 var test = require('tape');
 var util = require('util');
 var util_ip = require('../../lib/util/ip');
-var util_mac = require('../../lib/util/mac');
 var vasync = require('vasync');
 
 var extend = mod_jsprim.mergeObjects;
@@ -1034,7 +1034,7 @@ test('Provision nic: MAC retry', function (t) {
                 t2.ifError(err2, 'Should get NIC successfully');
                 t2.ok(morayObj, 'found moray object');
                 if (morayObj) {
-                    t2.equal(morayObj.mac, util_mac.aton(res.mac),
+                    t2.equal(morayObj.mac, mod_mac.parse(res.mac).toLong(),
                         'correct mac in moray object');
                 }
 
@@ -1152,7 +1152,7 @@ test('Provision nic: IP retry', function (t) {
                 t2.ifError(err2, 'Get should succeed');
                 t2.ok(morayObj, 'found moray object');
                 if (morayObj) {
-                    t2.equal(morayObj.mac, util_mac.aton(res.mac),
+                    t2.equal(morayObj.mac, mod_mac.parse(res.mac).toLong(),
                         'correct mac in moray object');
                 }
 
@@ -1221,7 +1221,7 @@ test('Provision nic: IP retry', function (t) {
                 t2.ifError(err2, 'Get should succeed');
                 t2.ok(morayObj, 'found moray object');
                 if (morayObj) {
-                    t2.equal(morayObj.mac, util_mac.aton(res.mac),
+                    t2.equal(morayObj.mac, mod_mac.parse(res.mac).toLong(),
                         'correct mac in moray object');
                 }
 
@@ -1566,6 +1566,66 @@ test('Get NIC with bad MAC address', function (t) {
 });
 
 
+test('Get NIC with different ways of writing MAC address', function (t) {
+    var exp;
+
+    t.plan(5);
+
+    t.test('Create NIC without leading zeros', function (t2) {
+        var params = {
+            belongs_to_type: 'zone',
+            belongs_to_uuid: mod_uuid.v4(),
+            owner_uuid: mod_uuid.v4()
+        };
+
+        mod_nic.create(t2, {
+            mac: 'a:b:c:d:e:f',
+            params: params,
+            partialExp: params
+        }, function (_, res) {
+            if (res) {
+                t2.equal(res.mac, '0a:0b:0c:0d:0e:0f',
+                    'normalized MAC address');
+                exp = res;
+            }
+
+            t2.end();
+        });
+    });
+
+    t.test('Get NIC with no separators', function (t2) {
+        NAPI.get({ path: '/nics/0a0b0c0d0e0f' }, function (err, res) {
+            t2.ifError(err, 'get NIC with colons in MAC address');
+            t2.deepEqual(res, exp, 'get result');
+            t2.end();
+        });
+    });
+
+    t.test('Get NIC with ":" separator', function (t2) {
+        NAPI.get({ path: '/nics/0a:0b:0c:0d:0e:0f' }, function (err, res) {
+            t2.ifError(err, 'get NIC with colons in MAC address');
+            t2.deepEqual(res, exp, 'get result');
+            t2.end();
+        });
+    });
+
+    t.test('Get NIC with "-" separator', function (t2) {
+        NAPI.get({ path: '/nics/0a-0b-0c-0d-0e-0f' }, function (err, res) {
+            t2.ifError(err, 'get NIC with colons in MAC address');
+            t2.deepEqual(res, exp, 'get result');
+            t2.end();
+        });
+    });
+
+    t.test('Get NIC with no leading zeros', function (t2) {
+        NAPI.get({ path: '/nics/a:b:c:d:e:f' }, function (err, res) {
+            t2.ifError(err, 'get NIC with colons in MAC address');
+            t2.deepEqual(res, exp, 'get result');
+            t2.end();
+        });
+    });
+});
+
 
 // --- Delete tests
 
@@ -1719,6 +1779,50 @@ test('Delete a NIC w/ an address on it', function (t) {
 });
 
 
+test('NAPI-267: Networks referenced by NICs cannot be deleted', function (t) {
+    var net, nic;
+
+    t.test('Create network', function (t2) {
+        var params = h.validNetworkParams();
+
+        mod_net.create(t2, {
+            params: params,
+            partialExp: params
+        }, function (_, res) {
+            net = res;
+            t2.end();
+        });
+    });
+
+    t.test('Create NIC', function (t2) {
+        var params = {
+            belongs_to_type: 'zone',
+            belongs_to_uuid: mod_uuid.v4(),
+            owner_uuid: mod_uuid.v4()
+        };
+
+        mod_nic.provision(t2, {
+            net: net.uuid,
+            params: params,
+            partialExp: params
+        }, function (_, res) {
+            nic = res;
+            t2.end();
+        });
+    });
+
+    t.test('Attempt to delete network', function (t2) {
+        var err = new mod_err.InUseError(constants.msg.NIC_ON_NET,
+            [ mod_err.usedBy('nic', nic.mac) ]);
+
+        mod_net.del(t2, {
+            uuid: net.uuid,
+            expCode: 422,
+            expErr: err.body
+        });
+    });
+});
+
 
 // --- Update tests
 
diff --git a/test/unit/util-mac.test.js b/test/unit/util-mac.test.js
deleted file mode 100644
index 688257e..0000000
--- a/test/unit/util-mac.test.js
+++ /dev/null
@@ -1,74 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2015, Joyent, Inc.
- */
-
-/*
- * MAC address utility unit tests
- */
-
-'use strict';
-
-var MAC = require('../../lib/util/mac');
-var test = require('tape');
-
-
-test('macOUItoNumber - valid', function (t) {
-    var macs = [
-        ['90b8d0', 159123438043136, '90:b8:d0:00:00:00'],
-        ['ffffff', 281474959933440, 'ff:ff:ff:00:00:00']
-    ];
-
-    for (var m in macs) {
-        t.equal(MAC.macOUItoNumber(macs[m][0]), macs[m][1],
-            'MAC number for "' + macs[m][0] + '" is valid');
-        t.equal(MAC.macNumberToAddress(macs[m][1]), macs[m][2],
-            'MAC address "' + macs[m][2] + '" is valid');
-    }
-
-    return t.end();
-});
-
-
-test('macNumberToAddress - valid', function (t) {
-    var macs = {
-        '281474976710655': 'ff:ff:ff:ff:ff:ff',
-        '345052807169': '00:50:56:c0:00:01',
-        '2233935667156': '02:08:20:f1:1f:d4',
-        '45459793942': '00:0a:95:9d:68:16',
-        '6805088278': '00:01:95:9d:68:16'
-    };
-
-    for (var m in macs) {
-        t.equal(MAC.macNumberToAddress(m), macs[m],
-            'MAC address "' + macs[m] + '" is valid');
-        t.equal(MAC.macAddressToNumber(macs[m]), Number(m),
-            'MAC number "' + m + '" is valid');
-        t.equal(MAC.macAddressToNumber(macs[m].replace(/:/g, '')), Number(m),
-            'MAC number "' + m + '" is valid (without colons)');
-        t.equal(MAC.macAddressToNumber(macs[m].replace(/:/g, '-')), Number(m),
-            'MAC number "' + m + '" is valid (with dashes)');
-    }
-
-    return t.end();
-});
-
-
-test('macAddressToNumber - invalid', function (t) {
-    var macs = [
-        'asdf', 'ff:ff:ff:ff:ff:fg', 'ff:ff:ff:ff:ff:ff1',
-        'ff:ff:ff:ff:ff:ff:11'
-    ];
-
-    for (var m in macs) {
-        t.equal(MAC.macAddressToNumber(macs[m]), null,
-            'MAC address "' + macs[m] + '" is invalid');
-    }
-
-    return t.end();
-});
diff --git a/test/unit/util-oui.test.js b/test/unit/util-oui.test.js
new file mode 100644
index 0000000..22a88ef
--- /dev/null
+++ b/test/unit/util-oui.test.js
@@ -0,0 +1,65 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+/*
+ * OUI/MAC address utility unit tests
+ */
+
+'use strict';
+
+var util_oui = require('../../lib/util/oui');
+var test = require('tape');
+
+var OUIS = [
+    [ '005056', 345040224256, 345057001471 ],
+    [ '90b8d0', 159123438043136, 159123454820351 ],
+    [ 'ffffff', 281474959933440, 281474976710655 ]
+];
+
+test('macOUItoNumber - valid', function (t) {
+    OUIS.forEach(function (ex) {
+        t.equal(util_oui.macOUItoNumber(ex[0]), ex[1],
+            'MAC number for "' + ex[0] + '" is valid');
+    });
+
+    t.end();
+});
+
+
+test('maxOUInum - valid', function (t) {
+    OUIS.forEach(function (ex) {
+        t.equal(util_oui.maxOUInum(ex[0]), ex[2],
+            'Max MAC value for "' + ex[0] + '" is valid');
+    });
+
+    t.end();
+});
+
+
+test('randomNum - valid', function (t) {
+    var seen = {};
+
+    function generateNumber(ex) {
+        var random = util_oui.randomNum(ex[0]);
+        t.ok(random >= ex[1] && random <= ex[2],
+            'Random MAC value for OUI "' + ex[0] +
+            '" is within bounds (generated ' + random + ')');
+        t.ok(!seen.hasOwnProperty(random), 'Number is unique');
+        seen[random] = 1;
+    }
+
+    OUIS.forEach(function (ex) {
+        for (var i = 0; i < 10; i++) {
+            generateNumber(ex);
+        }
+    });
+
+    t.end();
+});
