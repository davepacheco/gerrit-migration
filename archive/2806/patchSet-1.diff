commit bee657e8a7a5ac76f40a34017bc9be49aa83cb29 (refs/changes/06/2806/1)
Author: Jordan Hendricks <jordan.hendricks@joyent.com>
Date:   2017-10-08T16:00:45+00:00 (2 years ago)
    
    Garbage collector tests added; converted Sun Oct  8 16:00:45 UTC 2017 field on records to be a date instead of a string; Only use MULRS types in mulrs code

diff --git a/lib/mpu/common.js b/lib/mpu/common.js
index 85825f6..3101bcd 100644
--- a/lib/mpu/common.js
+++ b/lib/mpu/common.js
@@ -13,19 +13,38 @@ var util = require('util');
 
 var assert = require('assert-plus');
 
+
+///--- Globals
+
 var sprintf = util.format;
 
 var MPU_MORAY_BUCKET = 'manta_uploads';
 
+/*
+ * Internal constants used to differentiate between parts and upload records, as
+ * they are often used in the same context.
+ */
+var MPU_PART = 'partRecord';
+var MPU_UPLOADDIR = 'uploadRecord';
+
+/*
+ * MPU object values used by the record transformation step of the GC job
+ * (bin/mpu_gc_pg_transform.js). They are prepended with a numeral to ensure
+ * they sort in a given order: namely, that the finalizing record will be listed
+ * first in a sorted list.
+ */
 var MPUOBJ_PART = '2_partRecord';
 var MPUOBJ_UPLOADDIR = '1_uploadRecord';
 var MPUOBJ_FINALIZINGRECORD = '0_finalizingRecord';
 
+/*
+ * Types of finalizing records. The type doesn't make a difference with regard
+ * to garbage collection, but it is good to have these recorded in the state of
+ * MPUs for debugging purposes.
+ */
 var MPU_FR_TYPE_COMMIT = 'commit';
 var MPU_FR_TYPE_ABORT = 'abort';
 
-var MPU_PART = 'partRecord';
-var MPU_UPLOADDIR = 'uploadDirectory';
 
 var MPU_RECORD_ATTR_UPLOADID = 'uploadId';
 var MPU_RECORD_ATTR_MPUOBJ = 'mpuObject';
@@ -51,9 +70,11 @@ function recordToObject(record) {
 
         var uploadId = split[0];
         var mpuObject = split[1];
-        var date = split[2];
+        var date = new Date(split[2]);
         var key;
 
+        assert.object(date, sprintf('unable to parse date: %s', split[2]));
+        assert.ok(date instanceof Date, 'invalid date');
         assert.ok(mpuObject === MPUOBJ_PART ||
                 mpuObject === MPUOBJ_UPLOADDIR ||
                 mpuObject === MPUOBJ_FINALIZINGRECORD,
@@ -119,7 +140,8 @@ function FinalizingRecord(opts) {
         assert.string(opts.uploadId, 'opts.uploadId');
         assert.string(opts.key, 'opts.key');
         assert.string(opts.shard, 'opts.shard');
-        assert.string(opts.date, 'opts.date');
+        assert.object(opts.date, 'opts.date');
+        assert.ok(opts.date instanceof Date, 'invalid date');
         assert.string(opts.type, 'opts.type');
 
         this.uploadId = opts.uploadId;
@@ -132,7 +154,7 @@ function FinalizingRecord(opts) {
 FinalizingRecord.prototype.toString = function frToString() {
         return (this.uploadId + '\t' +
                 MPUOBJ_FINALIZINGRECORD + '\t' +
-                this.date + '\t' +
+                this.date.toISOString() + '\t' +
                 this.shard + '\t' +
                 this.type + '\t' +
                 this.key);
@@ -154,7 +176,8 @@ FinalizingRecord.prototype.toString = function frToString() {
 function LiveRecord(opts) {
         assert.string(opts.uploadId, 'opts.uploadId');
         assert.string(opts.key, 'opts.key');
-        assert.string(opts.date, 'opts.date');
+        assert.object(opts.date, 'opts.date');
+        assert.ok(opts.date instanceof Date, 'invalid date');
         assert.string(opts.type, 'opts.type');
         assert.ok(opts.type === MPU_PART ||
                   opts.type === MPU_UPLOADDIR,
@@ -176,7 +199,7 @@ LiveRecord.prototype.toString = function lrToString() {
 
         return (this.uploadId + '\t' +
                 mpuObj + '\t' +
-                this.date + '\t' +
+                this.date.toISOString() + '\t' +
                 this.key);
 };
 
diff --git a/lib/mpu/mpuMorayCleanerStream.js b/lib/mpu/mpuMorayCleanerStream.js
index b28532f..4df7a6b 100644
--- a/lib/mpu/mpuMorayCleanerStream.js
+++ b/lib/mpu/mpuMorayCleanerStream.js
@@ -73,7 +73,8 @@ MpuMorayCleanerStream.prototype._write = function mmcsWrite(batch, _, cb) {
                 'record does not match batch uploadId');
         assert.string(fr.key, 'fr.key');
         assert.string(fr.shard, 'fr.shard');
-        assert.string(fr.date, 'fr.date');
+        assert.object(fr.date, 'fr.date');
+        assert.ok(fr.date instanceof Date, 'invalid date');
 
         var self = this;
         if (self.verbose) {
diff --git a/lib/mpu/mpuUnlinkLiveRecordStream.js b/lib/mpu/mpuUnlinkLiveRecordStream.js
index 4020bf8..9a918c0 100644
--- a/lib/mpu/mpuUnlinkLiveRecordStream.js
+++ b/lib/mpu/mpuUnlinkLiveRecordStream.js
@@ -43,7 +43,8 @@ function MpuUnlinkLiveRecordStream(args) {
         assert.object(args, 'args');
         assert.object(args.log, 'args.log');
         assert.string(args.type, 'args.type');
-        assert.ok(args.type === 'partRecords' || args.type === 'uploadRecord');
+        assert.ok(args.type === MULRS_TYPE_PART ||
+                args.type === MULRS_TYPE_UPLOADDIR);
         assert.object(args.mantaClient, 'args.mantaClient');
         assert.object(args.mahiClient, 'args.mahiClient');
         assert.optionalBool(args.dryRun, 'args.dryRun');
diff --git a/lib/mpu/mpuVerifyStream.js b/lib/mpu/mpuVerifyStream.js
index b52978a..148cba5 100644
--- a/lib/mpu/mpuVerifyStream.js
+++ b/lib/mpu/mpuVerifyStream.js
@@ -77,9 +77,10 @@ MpuVerifyStream.prototype.validateMPU = function validateMPU(id, records, cb) {
                 if (r instanceof mpuCommon.FinalizingRecord) {
                         mpuObject = mpuCommon.MPUOBJ_FINALIZINGRECORD;
                 } else {
-                        if (r.type === MULRS_TYPE_PART) {
+                        if (r.type === mpuCommon.MPU_PART) {
                                 mpuObject = mpuCommon.MPUOBJ_PART;
                         } else {
+                                assert.ok(r.type === mpuCommon.MPU_UPLOADDIR);
                                 mpuObject = mpuCommon.MPUOBJ_UPLOADDIR;
                         }
                 }
diff --git a/lib/mpu_garbage_collector.js b/lib/mpu_garbage_collector.js
index 8a25c37..11c2c0e 100644
--- a/lib/mpu_garbage_collector.js
+++ b/lib/mpu_garbage_collector.js
@@ -8,18 +8,19 @@
  * Copyright (c) 2017, Joyent, Inc.
  */
 
+var assert = require('assert-plus');
 var util = require('util');
 var events = require('events');
 var carrier = require('carrier');
 
-var assert = require('assert-plus');
-
 var mpuCommon = require('./mpu/common');
 
 
 ///--- Globals
 var DEFAULT_GRACE_PERIOD_MILLIS = 1000 * 60 * 60 * 24 * 2;  // 2 days
 
+var sprintf = util.format;
+
 ///--- API
 
 /**
@@ -40,8 +41,14 @@ function MpuGarbageCollector(opts, listener) {
         assert.object(opts, 'opts');
         assert.object(opts.reader, 'opts.reader');
         assert.optionalObject(opts.listener, 'opts.listener');
+        assert.optionalObject(opts.gcDate, 'opts.gcDate');
 
         var self = this;
+        if (opts.gcDate) {
+                self.gcDate = opts.gcDate;
+        } else  {
+                self.gcDate = Date.now();
+        }
 
         var prev, curr, currFR;
         self.gracePeriodMillis = opts.gracePeriodMillis ||
@@ -65,14 +72,22 @@ function MpuGarbageCollector(opts, listener) {
                 self.emit('end');
         });
 }
-
 util.inherits(MpuGarbageCollector, events.EventEmitter);
 module.exports = MpuGarbageCollector;
 
+MpuGarbageCollector.prototype.withinGracePeriod =
+function withinGracePeriod(date) {
+        assert.object(date, 'date');
+        assert.ok(date instanceof Date, 'invalid date');
 
-///--- Helpers
+        var self = this;
+
+        return ((self.gcDate - date) > self.gracePeriodMillis);
+};
 
 
+///--- Helpers
+
 /*
  * TODO comment this
  */
@@ -92,7 +107,7 @@ function takeAction(gc, prev, curr, currFR) {
                 // We've seen all records related to the previous upload ID,
                 // so we know it's safe to delete the finalizing record of the
                 // upload, if the record exists.
-                if (currFR) {
+                if (currFR && gc.withinGracePeriod(currFR.date)) {
                         gc.emit('moray', currFR);
                         currFR = null;
                 }
@@ -104,7 +119,7 @@ function takeAction(gc, prev, curr, currFR) {
                 } else {
                         // Don't garbage collect any records for uploads that
                         // don't have an associated finalizing record.
-                        if (currFR) {
+                        if (currFR && gc.withinGracePeriod(currFR.date)) {
                                 gc.emit('moray', curr);
                         }
                 }
diff --git a/lib/mpu_gc_pg_row_transformer.js b/lib/mpu_gc_pg_row_transformer.js
index 10854f2..3d08108 100644
--- a/lib/mpu_gc_pg_row_transformer.js
+++ b/lib/mpu_gc_pg_row_transformer.js
@@ -54,6 +54,7 @@ function MpuGcPgRowTransformer(opts, listener) {
         assert.object(opts, 'opts');
         assert.object(opts.reader, 'opts.reader');
         assert.ok(opts.dumpDate, 'opts.dumpDate');
+        assert.ok(date instanceof Date, 'invalid date');
         assert.string(opts.morayHostname, 'opts.morayHostname');
 
         var self = this;
@@ -114,7 +115,7 @@ module.exports = MpuGcPgRowTransformer;
 function transformFinalizingRecord(obj, dumpDate, morayHostname) {
         assert.string(obj['__table'], PG_MANTA_UPLOADS_TABLE_NAME);
         var value = obj['_value'];
-        var date = new Date(parseInt(obj['_mtime'], 10)).toISOString();
+        var date = new Date(parseInt(obj['_mtime'], 10));
 
         return new mpuCommon.FinalizingRecord({
                 uploadId: value.uploadId,
@@ -146,14 +147,11 @@ function transformMpuRecord(obj, dumpDate, morayHostname) {
         if (!obj._key.match(UPLOADS_ROOT_PATH)) {
                 return (null);
         }
-
-        var date = dumpDate.toISOString();
-        assert.string(date, 'date');
         assert.string(mpuObject);
 
         var record = new mpuCommon.LiveRecord({
                 key: obj._key,
-                date: date,
+                date: dumpDate,
                 type: mpuObject,
                 uploadId: uploadId
         });
diff --git a/test/mpu/mpuUnlinkLiveRecordStream.test.js b/test/mpu/mpuUnlinkLiveRecordStream.test.js
index 592e824..d294e7f 100644
--- a/test/mpu/mpuUnlinkLiveRecordStream.test.js
+++ b/test/mpu/mpuUnlinkLiveRecordStream.test.js
@@ -18,6 +18,7 @@ var stream = require('stream');
 var helper = require('../helper');
 var inputs = require('./testInputs');
 var mpu = require('../../lib/mpu');
+var mulrs = require('../../lib/mpu/mpuUnlinkLiveRecordStream');
 var test = helper.test;
 
 var LOG = helper.createLogger('mpuUnlinkStream test');
@@ -30,7 +31,8 @@ function testMpuUnlinkLiveRecordStream(args) {
         assert.arrayOfObject(args.output, 'args.output');
         assert.func(args.testCb, 'args.testCb');
         assert.string(args.type, 'args.type');
-        assert.ok(args.type === 'partRecords' || args.type === 'uploadRecord');
+        assert.ok(args.type === mulrs.MULRS_TYPE_PART ||
+                args.type === mulrs.MULRS_TYPE_UPLOADDIR);
         assert.func(args.unlinkFunc, 'args.unlinkFunc');
         assert.func(args.getAccountByIdFunc, 'args.getAccountByIdFunc');
         assert.optionalBool(args.dryRun, 'args.dryRun');
@@ -124,7 +126,7 @@ test('upload directory: one batch (no parts)', function (t) {
                 },
                 unlinkFunc: unlink,
                 getAccountByIdFunc: getAccountById,
-                type: 'uploadRecord'
+                type: mulrs.MULRS_TYPE_UPLOADDIR
         };
 
         testMpuUnlinkLiveRecordStream(args);
@@ -186,7 +188,7 @@ test('upload directory: one batch (3 parts)', function (t) {
                 },
                 unlinkFunc: unlink,
                 getAccountByIdFunc: getAccountById,
-                type: 'uploadRecord'
+                type: mulrs.MULRS_TYPE_UPLOADDIR
         };
 
         testMpuUnlinkLiveRecordStream(args);
@@ -273,7 +275,7 @@ test('upload directory: multiple batches', function (t) {
                 },
                 unlinkFunc: unlink,
                 getAccountByIdFunc: getAccountById,
-                type: 'uploadRecord'
+                type: mulrs.MULRS_TYPE_UPLOADDIR
         };
 
         testMpuUnlinkLiveRecordStream(args);
@@ -350,7 +352,7 @@ test('upload directory: multiple batches (one with no UR)', function (t) {
                 },
                 unlinkFunc: unlink,
                 getAccountByIdFunc: getAccountById,
-                type: 'uploadRecord'
+                type: mulrs.MULRS_TYPE_UPLOADDIR
         };
 
         testMpuUnlinkLiveRecordStream(args);
@@ -443,7 +445,7 @@ test('upload directory: 404 returned during unlink', function (t) {
                 },
                 unlinkFunc: unlink,
                 getAccountByIdFunc: getAccountById,
-                type: 'uploadRecord'
+                type: mulrs.MULRS_TYPE_UPLOADDIR
         };
 
         testMpuUnlinkLiveRecordStream(args);
@@ -541,7 +543,7 @@ test('upload directory: error returned during unlink', function (t) {
                 },
                 unlinkFunc: unlink,
                 getAccountByIdFunc: getAccountById,
-                type: 'uploadRecord'
+                type: mulrs.MULRS_TYPE_UPLOADDIR
         };
 
         testMpuUnlinkLiveRecordStream(args);
@@ -632,7 +634,7 @@ test('upload directory: error returned during getAccountById', function (t) {
                 },
                 unlinkFunc: unlink,
                 getAccountByIdFunc: getAccountById,
-                type: 'uploadRecord'
+                type: mulrs.MULRS_TYPE_UPLOADDIR
         };
 
         testMpuUnlinkLiveRecordStream(args);
@@ -696,7 +698,7 @@ test('parts: one batch (1 part)', function (t) {
                 },
                 unlinkFunc: unlink,
                 getAccountByIdFunc: getAccountById,
-                type: 'partRecords'
+                type: mulrs.MULRS_TYPE_PART
         };
 
         testMpuUnlinkLiveRecordStream(args);
@@ -760,7 +762,7 @@ test('parts: one batch (3 parts)', function (t) {
                 },
                 unlinkFunc: unlink,
                 getAccountByIdFunc: getAccountById,
-                type: 'partRecords'
+                type: mulrs.MULRS_TYPE_PART
         };
 
         testMpuUnlinkLiveRecordStream(args);
@@ -848,7 +850,7 @@ test('parts: multiple batches (1 part, 3 parts, 0 parts)', function (t) {
                 },
                 unlinkFunc: unlink,
                 getAccountByIdFunc: getAccountById,
-                type: 'partRecords'
+                type: mulrs.MULRS_TYPE_PART
         };
 
         testMpuUnlinkLiveRecordStream(args);
@@ -946,7 +948,7 @@ test('parts: 404 returned during unlink', function (t) {
                 },
                 unlinkFunc: unlink,
                 getAccountByIdFunc: getAccountById,
-                type: 'partRecords'
+                type: mulrs.MULRS_TYPE_PART
         };
 
         testMpuUnlinkLiveRecordStream(args);
@@ -1048,7 +1050,7 @@ test('parts: error returned during unlink', function (t) {
                 },
                 unlinkFunc: unlink,
                 getAccountByIdFunc: getAccountById,
-                type: 'partRecords'
+                type: mulrs.MULRS_TYPE_PART
         };
 
         testMpuUnlinkLiveRecordStream(args);
@@ -1137,13 +1139,12 @@ test('parts: error returned during getAccountById', function (t) {
                         if (!ok) {
                                 console.error('invalid output', actual);
                         }
-                debugger;
                         t.ok(jsprim.deepEqual(paths, expected));
                         t.done();
                 },
                 unlinkFunc: unlink,
                 getAccountByIdFunc: getAccountById,
-                type: 'partRecords'
+                type: mulrs.MULRS_TYPE_PART
         };
 
         testMpuUnlinkLiveRecordStream(args);
diff --git a/test/mpu/testInputs.js b/test/mpu/testInputs.js
index 37288d7..bf4d820 100644
--- a/test/mpu/testInputs.js
+++ b/test/mpu/testInputs.js
@@ -24,14 +24,14 @@ var MORAY_2 = '2.moray.coal.joyent.us';
 
 // Batch 0: Committed MPU with finalizing record, upload record, 1 part records
 var ID_0 = '07cff761-33c7-c9ad-a9a0-d3303afa1490';
-var DATE_0 =  new Date(Date.now()).toISOString(); // TODO is this right
+var DATE_0 =  new Date();
 var SHARD_0 =  MORAY_1;
 /* BEGIN JSSTYLED */
 var KEY_FR0 = '07cff761-33c7-c9ad-a9a0-d3303afa1490:/4204a7f8-3d97-ec27-c16d-f2f49366cc3c/stor/batch0';
 var KEY_UR0 = '/4204a7f8-3d97-ec27-c16d-f2f49366cc3c/uploads/0/07cff761-33c7-c9ad-a9a0-d3303afa1490';
 var KEY_PR0_0 = '/4204a7f8-3d97-ec27-c16d-f2f49366cc3c/uploads/0/07cff761-33c7-c9ad-a9a0-d3303afa1490/0';
 /* END JSSTYLED */
-var FR_0 = [ ID_0, '0_finalizingRecord', DATE_0, SHARD_0, KEY_FR0, 'commit' ]
+var FR_0 = [ ID_0, '0_finalizingRecord', DATE_0, SHARD_0, 'commit', KEY_FR0 ]
         .join('\t');
 var UR_0 = [ ID_0, '1_uploadRecord', DATE_0, KEY_UR0 ].join('\t');
 var PR_0 = [ [ ID_0, '2_partRecord', DATE_0, KEY_PR0_0 ].join('\t') ];
@@ -55,7 +55,7 @@ var OBJ_PR0 = [
                 uploadId: ID_0,
                 key: KEY_PR0_0,
                 date: DATE_0,
-                type: 'partRecords'
+                type: 'partRecord'
         })
 ];
 OBJ_PR0.forEach(function (o) {
@@ -85,7 +85,7 @@ var PATH_PR1 = [
 ];
 
 var ID_1 = 'c46e3e66-4311-6a11-8cf9-8d3fa69aaf0a';
-var DATE_1 =  new Date(Date.now()).toISOString(); // TODO is this right
+var DATE_1 =  new Date();
 var SHARD_1 =  MORAY_1;
 /* BEGIN JSSTYLED */
 var KEY_FR1 = 'c46e3e66-4311-6a11-8cf9-8d3fa69aaf0a:/fdfe27dc-64bc-11e6-90f8-47c1ceb05dd8/stor/batch1';
@@ -94,7 +94,7 @@ var KEY_PR1_0 = '/fdfe27dc-64bc-11e6-90f8-47c1ceb05dd8/uploads/c/c46e3e66-4311-6
 var KEY_PR1_1 = '/fdfe27dc-64bc-11e6-90f8-47c1ceb05dd8/uploads/c/c46e3e66-4311-6a11-8cf9-8d3fa69aaf0a/1';
 var KEY_PR1_2 = '/fdfe27dc-64bc-11e6-90f8-47c1ceb05dd8/uploads/c/c46e3e66-4311-6a11-8cf9-8d3fa69aaf0a/2';
 /* END JSSTYLED */
-var FR_1 = [ ID_1, '0_finalizingRecord', DATE_1, SHARD_1, KEY_FR1, 'abort' ]
+var FR_1 = [ ID_1, '0_finalizingRecord', DATE_1, SHARD_1, 'abort', KEY_FR1 ]
         .join('\t');
 var UR_1 = [ ID_1, '1_uploadRecord', DATE_1, KEY_UR1 ].join('\t');
 var PR_1 = [ [ ID_1, '2_partRecord', DATE_1, KEY_PR1_0 ].join('\t'),
@@ -121,19 +121,19 @@ var OBJ_PR1 = [
                 uploadId: ID_1,
                 key: KEY_PR1_0,
                 date: DATE_1,
-                type: 'partRecords'
+                type: 'partRecord'
         }),
         new mpuCommon.LiveRecord({
                 uploadId: ID_1,
                 key: KEY_PR1_1,
                 date: DATE_1,
-                type: 'partRecords'
+                type: 'partRecord'
         }),
         new mpuCommon.LiveRecord({
                 uploadId: ID_1,
                 key: KEY_PR1_2,
                 date: DATE_1,
-                type: 'partRecords'
+                type: 'partRecord'
         })
 ];
 OBJ_PR1.forEach(function (o) {
@@ -148,13 +148,13 @@ var PATH_UR2 = '/' + ACCT_LOGIN_2 +
         '/uploads/3/38aecc30-9a8c-63a4-f906-e512f02f5915';
 
 var ID_2 = '38aecc30-9a8c-63a4-f906-e512f02f5915';
-var DATE_2 =  new Date(Date.now()).toISOString(); // TODO is this right
+var DATE_2 =  new Date();
 var SHARD_2 =  MORAY_2;
 /* BEGIN JSSTYLED */
 var KEY_FR2 = '38aecc30-9a8c-63a4-f906-e512f02f5915:/88af09d7-4845-e09a-8998-d7d04a88b879/stor/batch2';
 var KEY_UR2 = '/88af09d7-4845-e09a-8998-d7d04a88b879/uploads/3/38aecc30-9a8c-63a4-f906-e512f02f5915';
 /* END JSSTYLED */
-var FR_2 = [ ID_2, '0_finalizingRecord', DATE_2, SHARD_2, KEY_FR2, 'abort' ]
+var FR_2 = [ ID_2, '0_finalizingRecord', DATE_2, SHARD_2, 'abort', KEY_FR2 ]
         .join('\t');
 var UR_2 = [ ID_2, '1_uploadRecord', DATE_2, KEY_UR2 ].join('\t');
 var OBJ_FR2 = new mpuCommon.FinalizingRecord({
diff --git a/test/mpu_garbage_collector.test.js b/test/mpu_garbage_collector.test.js
index 06b5772..9deebb3 100644
--- a/test/mpu_garbage_collector.test.js
+++ b/test/mpu_garbage_collector.test.js
@@ -20,19 +20,24 @@ var mpuCommon = require('../lib/mpu/common');
 var MemoryStream = require('memorystream');
 
 
-// test cases:
-// committed: no parts, some parts
-// aborted: no parts, some parts
-// not finalized: no parts, some parts
-// grace period?
-
 ///--- Globals
 
-var GRACE_PERIOD_MILLIS = 60 * 60 * 24 * 2 * 1000; //2 days
+var DEF_GRACE_PERIOD_MILLIS = 60 * 60 * 24 * 2 * 1000; // 2 days
 var MORAY_1 = '1.moray.coal.joyent.us';
 var MORAY_2 = '2.moray.coal.joyent.us';
-var test = helper.test;
 
+var OWNER_0 = libuuid.create();
+var OWNER_1 = libuuid.create();
+var ID_0 = libuuid.create();
+var ID_1 = libuuid.create();
+var ID_2 = libuuid.create();
+var ID_3 = libuuid.create();
+
+var DATE_GC = new Date('2017-08-30T00:00:00');
+var DATE_OUTSIDE_GP = new Date('2017-08-27T00:00:00');
+var DATE_WITHIN_GP = new Date('2017-08-29T00:00:00');
+
+var test = helper.test;
 
 
 ///--- Helpers
@@ -105,21 +110,22 @@ function finalizingRecordKey(id, owner) {
         return (id + ':' + uploadRecordKey(id, owner));
 }
 
-///--- Tests
+///--- Tests: all within grace period
 
 test('single batch: finalizing record only', function (t) {
-        var date = new Date().toISOString();
-
-        var owner0 = libuuid.create();
-        var id0 = libuuid.create();
+        var date = DATE_OUTSIDE_GP.toISOString();
 
         var inputs = [
-                commitRecord(id0, date, owner0, MORAY_1),
+                // finalized
+                commitRecord(ID_0, date, OWNER_0, MORAY_1),
                 ''
         ];
 
         var stream = new MemoryStream(inputs.join('\n'));
-        var gc = lib.createMpuGarbageCollector({ reader: stream });
+        var gc = lib.createMpuGarbageCollector({
+                reader: stream,
+                gcDate: DATE_GC
+        });
         var expect = [];
         expect.push(mpuCommon.recordToObject(inputs[0]));
 
@@ -140,18 +146,19 @@ test('single batch: finalizing record only', function (t) {
 });
 
 test('single batch: upload record only', function (t) {
-        var date = new Date().toISOString();
-
-        var owner0 = libuuid.create();
-        var id0 = libuuid.create();
+        var date = DATE_OUTSIDE_GP.toISOString();
 
         var inputs = [
-                uploadRecord(id0, date, uploadRecordKey(id0, owner0)),
+                // not finalized
+                uploadRecord(ID_0, date, uploadRecordKey(ID_0, OWNER_0)),
                 ''
         ];
 
         var stream = new MemoryStream(inputs.join('\n'));
-        var gc = lib.createMpuGarbageCollector({ reader: stream });
+        var gc = lib.createMpuGarbageCollector({
+                reader: stream,
+                gcDate: DATE_GC
+        });
         var expect = [];
 
         var output = [];
@@ -171,18 +178,19 @@ test('single batch: upload record only', function (t) {
 });
 
 test('single batch: part record only', function (t) {
-        var date = new Date().toISOString();
-
-        var owner0 = libuuid.create();
-        var id0 = libuuid.create();
+        var date = DATE_OUTSIDE_GP.toISOString();
 
         var inputs = [
-                partRecord(id0, date, partRecordKey(id0, owner0, 0)),
+                // not finalized
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 0)),
                 ''
         ];
 
         var stream = new MemoryStream(inputs.join('\n'));
-        var gc = lib.createMpuGarbageCollector({ reader: stream });
+        var gc = lib.createMpuGarbageCollector({
+                reader: stream,
+                gcDate: DATE_GC
+        });
         var expect = [];
 
         var output = [];
@@ -202,21 +210,22 @@ test('single batch: part record only', function (t) {
 });
 
 test('single batch: upload and part records', function (t) {
-        var date = new Date().toISOString();
-
-        var owner0 = libuuid.create();
-        var id0 = libuuid.create();
+        var date = DATE_OUTSIDE_GP.toISOString();
 
         var inputs = [
-                uploadRecord(id0, date, uploadRecordKey(id0, owner0)),
-                partRecord(id0, date, partRecordKey(id0, owner0, 0)),
-                partRecord(id0, date, partRecordKey(id0, owner0, 1)),
-                partRecord(id0, date, partRecordKey(id0, owner0, 2)),
+                // not finalized
+                uploadRecord(ID_0, date, uploadRecordKey(ID_0, OWNER_0)),
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 0)),
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 1)),
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 2)),
                 ''
         ];
 
         var stream = new MemoryStream(inputs.join('\n'));
-        var gc = lib.createMpuGarbageCollector({ reader: stream });
+        var gc = lib.createMpuGarbageCollector({
+                reader: stream,
+                gcDate: DATE_GC
+        });
         var expect = [];
 
         var output = [];
@@ -236,19 +245,20 @@ test('single batch: upload and part records', function (t) {
 });
 
 test('single batch: finalizing record and upload record', function (t) {
-        var date = new Date().toISOString();
-
-        var owner0 = libuuid.create();
-        var id0 = libuuid.create();
+        var date = DATE_OUTSIDE_GP.toISOString();
 
         var inputs = [
-                commitRecord(id0, date, owner0, MORAY_1),
-                uploadRecord(id0, date, uploadRecordKey(id0, owner0)),
+                // finalized
+                commitRecord(ID_0, date, OWNER_0, MORAY_1),
+                uploadRecord(ID_0, date, uploadRecordKey(ID_0, OWNER_0)),
                 ''
         ];
 
         var stream = new MemoryStream(inputs.join('\n'));
-        var gc = lib.createMpuGarbageCollector({ reader: stream });
+        var gc = lib.createMpuGarbageCollector({
+                reader: stream,
+                gcDate: DATE_GC
+        });
         var expect = [];
         expect.push(mpuCommon.recordToObject(inputs[1]));
         expect.push(mpuCommon.recordToObject(inputs[0]));
@@ -269,24 +279,26 @@ test('single batch: finalizing record and upload record', function (t) {
         });
 });
 
-test('single batch: finalizing record, uplaod record, part records',
+test('single batch: finalizing record, upload record, part records',
 function (t) {
-        var date = new Date().toISOString();
-
-        var owner0 = libuuid.create();
-        var id0 = libuuid.create();
+        var date = DATE_OUTSIDE_GP.toISOString();
 
         var inputs = [
-                abortRecord(id0, date, owner0, MORAY_1),
-                uploadRecord(id0, date, uploadRecordKey(id0, owner0)),
-                partRecord(id0, date, partRecordKey(id0, owner0, 0)),
-                partRecord(id0, date, partRecordKey(id0, owner0, 1)),
-                partRecord(id0, date, partRecordKey(id0, owner0, 2)),
+                // finalized
+                abortRecord(ID_0, date, OWNER_0, MORAY_1),
+                uploadRecord(ID_0, date, uploadRecordKey(ID_0, OWNER_0)),
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 0)),
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 1)),
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 2)),
+
                 ''
         ];
 
         var stream = new MemoryStream(inputs.join('\n'));
-        var gc = lib.createMpuGarbageCollector({ reader: stream });
+        var gc = lib.createMpuGarbageCollector({
+                reader: stream,
+                gcDate: DATE_GC
+        });
         var expect = [];
 
         expect.push(mpuCommon.recordToObject(inputs[1]));
@@ -312,25 +324,29 @@ function (t) {
 });
 
 test('finalizing records only', function (t) {
-        var date = new Date().toISOString();
-
-        var owner0 = libuuid.create();
-        var owner1 = libuuid.create();
-        var id0 = libuuid.create();
-        var id1 = libuuid.create();
-        var id2 = libuuid.create();
-        var id3 = libuuid.create();
+        var date = DATE_OUTSIDE_GP.toISOString();
 
         var inputs = [
-                commitRecord(id0, date, owner0, MORAY_1),
-                commitRecord(id1, date, owner0, MORAY_2),
-                abortRecord(id2, date, owner1, MORAY_1),
-                abortRecord(id3, date, owner1, MORAY_2),
+                // finalized
+                commitRecord(ID_0, date, OWNER_0, MORAY_1),
+
+                // finalized
+                commitRecord(ID_1, date, OWNER_0, MORAY_2),
+
+                // finalized
+                abortRecord(ID_2, date, OWNER_1, MORAY_1),
+
+                // finalized
+                abortRecord(ID_3, date, OWNER_1, MORAY_2),
+
                 ''
         ];
 
         var stream = new MemoryStream(inputs.join('\n'));
-        var gc = lib.createMpuGarbageCollector({ reader: stream });
+        var gc = lib.createMpuGarbageCollector({
+                reader: stream,
+                gcDate: DATE_GC
+        });
         var expect = [];
         inputs.forEach(function (r) {
                 if (r !== '') {
@@ -355,25 +371,29 @@ test('finalizing records only', function (t) {
 });
 
 test('all upload records', function (t) {
-        var date = new Date().toISOString();
-
-        var owner0 = libuuid.create();
-        var owner1 = libuuid.create();
-        var id0 = libuuid.create();
-        var id1 = libuuid.create();
-        var id2 = libuuid.create();
-        var id3 = libuuid.create();
+        var date = DATE_OUTSIDE_GP.toISOString();
 
         var inputs = [
-                uploadRecord(id0, date, uploadRecordKey(id0, owner0)),
-                uploadRecord(id1, date, uploadRecordKey(id1, owner1)),
-                uploadRecord(id2, date, uploadRecordKey(id2, owner1)),
-                uploadRecord(id3, date, uploadRecordKey(id3, owner0)),
+                // not finalized
+                uploadRecord(ID_0, date, uploadRecordKey(ID_0, OWNER_0)),
+
+                // not finalized
+                uploadRecord(ID_1, date, uploadRecordKey(ID_1, OWNER_1)),
+
+                // not finalized
+                uploadRecord(ID_2, date, uploadRecordKey(ID_2, OWNER_1)),
+
+                // not finalized
+                uploadRecord(ID_3, date, uploadRecordKey(ID_3, OWNER_0)),
+
                 ''
         ];
 
         var stream = new MemoryStream(inputs.join('\n'));
-        var gc = lib.createMpuGarbageCollector({ reader: stream });
+        var gc = lib.createMpuGarbageCollector({
+                reader: stream,
+                gcDate: DATE_GC
+        });
         var expect = [];
         var output = [];
 
@@ -392,29 +412,34 @@ test('all upload records', function (t) {
 });
 
 test('all part records', function (t) {
-        var date = new Date().toISOString();
-
-        var owner0 = libuuid.create();
-        var owner1 = libuuid.create();
-        var id0 = libuuid.create();
-        var id1 = libuuid.create();
-        var id2 = libuuid.create();
-        var id3 = libuuid.create();
+        var date = DATE_OUTSIDE_GP.toISOString();
 
         var inputs = [
-                partRecord(id0, date, partRecordKey(id0, owner0, 0)),
-                partRecord(id0, date, partRecordKey(id0, owner0, 1)),
-                partRecord(id0, date, partRecordKey(id0, owner0, 2)),
-                partRecord(id0, date, partRecordKey(id0, owner0, 3)),
-                partRecord(id1, date, partRecordKey(id1, owner1, 0)),
-                partRecord(id2, date, partRecordKey(id2, owner1, 1)),
-                partRecord(id2, date, partRecordKey(id2, owner1, 2)),
-                partRecord(id3, date, partRecordKey(id3, owner0, 0)),
+                // not finalized
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 0)),
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 1)),
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 2)),
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 3)),
+
+                // not finalized
+                partRecord(ID_1, date, partRecordKey(ID_1, OWNER_1, 0)),
+
+                // not finalized
+                partRecord(ID_2, date, partRecordKey(ID_2, OWNER_1, 0)),
+                partRecord(ID_2, date, partRecordKey(ID_2, OWNER_1, 1)),
+                partRecord(ID_2, date, partRecordKey(ID_2, OWNER_1, 2)),
+
+                // not finalized
+                partRecord(ID_3, date, partRecordKey(ID_3, OWNER_0, 0)),
+
                 ''
         ];
 
         var stream = new MemoryStream(inputs.join('\n'));
-        var gc = lib.createMpuGarbageCollector({ reader: stream });
+        var gc = lib.createMpuGarbageCollector({
+                reader: stream,
+                gcDate: DATE_GC
+        });
         var expect = [];
         var output = [];
 
@@ -433,38 +458,38 @@ test('all part records', function (t) {
 });
 
 test('no finalizing records', function (t) {
-        var date = new Date().toISOString();
-
-        var owner0 = libuuid.create();
-        var owner1 = libuuid.create();
-        var id0 = libuuid.create();
-        var id1 = libuuid.create();
-        var id2 = libuuid.create();
-        var id3 = libuuid.create();
+        var date = DATE_OUTSIDE_GP.toISOString();
 
         var inputs = [
-                uploadRecord(id0, date, uploadRecordKey(id0, owner0)),
-                partRecord(id0, date, partRecordKey(id0, owner0, 0)),
-                partRecord(id0, date, partRecordKey(id0, owner0, 1)),
-                partRecord(id0, date, partRecordKey(id0, owner0, 2)),
-                partRecord(id0, date, partRecordKey(id0, owner0, 3)),
-
-                uploadRecord(id1, date, uploadRecordKey(id1, owner1)),
-                partRecord(id1, date, partRecordKey(id1, owner1, 0)),
-
-                uploadRecord(id2, date, uploadRecordKey(id2, owner1)),
-                partRecord(id2, date, partRecordKey(id2, owner1, 0)),
-                partRecord(id2, date, partRecordKey(id2, owner1, 1)),
-                partRecord(id2, date, partRecordKey(id2, owner1, 2)),
-
-                uploadRecord(id3, date, uploadRecordKey(id3, owner0)),
-                partRecord(id3, date, partRecordKey(id3, owner0, 0)),
+                // not finalized
+                uploadRecord(ID_0, date, uploadRecordKey(ID_0, OWNER_0)),
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 0)),
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 1)),
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 2)),
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 3)),
+
+                // not finalized
+                uploadRecord(ID_1, date, uploadRecordKey(ID_1, OWNER_1)),
+                partRecord(ID_1, date, partRecordKey(ID_1, OWNER_1, 0)),
+
+                // not finalized
+                uploadRecord(ID_2, date, uploadRecordKey(ID_2, OWNER_1)),
+                partRecord(ID_2, date, partRecordKey(ID_2, OWNER_1, 0)),
+                partRecord(ID_2, date, partRecordKey(ID_2, OWNER_1, 1)),
+                partRecord(ID_2, date, partRecordKey(ID_2, OWNER_1, 2)),
+
+                // not finalized
+                uploadRecord(ID_3, date, uploadRecordKey(ID_3, OWNER_0)),
+                partRecord(ID_3, date, partRecordKey(ID_3, OWNER_0, 0)),
 
                 ''
         ];
 
         var stream = new MemoryStream(inputs.join('\n'));
-        var gc = lib.createMpuGarbageCollector({ reader: stream });
+        var gc = lib.createMpuGarbageCollector({
+                reader: stream,
+                gcDate: DATE_GC
+        });
         var expect = [];
         var output = [];
 
@@ -483,41 +508,41 @@ test('no finalizing records', function (t) {
 });
 
 test('all finalized', function (t) {
-        var date = new Date().toISOString();
-
-        var owner0 = libuuid.create();
-        var owner1 = libuuid.create();
-        var id0 = libuuid.create();
-        var id1 = libuuid.create();
-        var id2 = libuuid.create();
-        var id3 = libuuid.create();
+        var date = DATE_OUTSIDE_GP.toISOString();
 
         var inputs = [
-                commitRecord(id0, date, owner0, MORAY_1),
-                uploadRecord(id0, date, uploadRecordKey(id0, owner0)),
-                partRecord(id0, date, partRecordKey(id0, owner0, 0)),
-                partRecord(id0, date, partRecordKey(id0, owner0, 1)),
-                partRecord(id0, date, partRecordKey(id0, owner0, 2)),
-                partRecord(id0, date, partRecordKey(id0, owner0, 3)),
-
-                commitRecord(id1, date, owner1, MORAY_2),
-                uploadRecord(id1, date, uploadRecordKey(id1, owner1)),
-
-                abortRecord(id2, date, owner1, MORAY_2),
-                uploadRecord(id2, date, uploadRecordKey(id2, owner1)),
-                partRecord(id2, date, partRecordKey(id2, owner1, 0)),
-                partRecord(id2, date, partRecordKey(id2, owner1, 1)),
-                partRecord(id2, date, partRecordKey(id2, owner1, 2)),
-
-                abortRecord(id3, date, owner0, MORAY_2),
-                uploadRecord(id3, date, uploadRecordKey(id3, owner0)),
-                partRecord(id3, date, partRecordKey(id3, owner0, 0)),
+                // finalized
+                commitRecord(ID_0, date, OWNER_0, MORAY_1),
+                uploadRecord(ID_0, date, uploadRecordKey(ID_0, OWNER_0)),
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 0)),
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 1)),
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 2)),
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 3)),
+
+                // finalized
+                commitRecord(ID_1, date, OWNER_1, MORAY_2),
+                uploadRecord(ID_1, date, uploadRecordKey(ID_1, OWNER_1)),
+
+                // finalized
+                abortRecord(ID_2, date, OWNER_1, MORAY_2),
+                uploadRecord(ID_2, date, uploadRecordKey(ID_2, OWNER_1)),
+                partRecord(ID_2, date, partRecordKey(ID_2, OWNER_1, 0)),
+                partRecord(ID_2, date, partRecordKey(ID_2, OWNER_1, 1)),
+                partRecord(ID_2, date, partRecordKey(ID_2, OWNER_1, 2)),
+
+                // finalized
+                abortRecord(ID_3, date, OWNER_0, MORAY_2),
+                uploadRecord(ID_3, date, uploadRecordKey(ID_3, OWNER_0)),
+                partRecord(ID_3, date, partRecordKey(ID_3, OWNER_0, 0)),
 
                 ''
         ];
 
         var stream = new MemoryStream(inputs.join('\n'));
-        var gc = lib.createMpuGarbageCollector({ reader: stream });
+        var gc = lib.createMpuGarbageCollector({
+                reader: stream,
+                gcDate: DATE_GC
+        });
         var expect = [];
 
         expect.push(mpuCommon.recordToObject(inputs[1]));
@@ -557,33 +582,33 @@ test('all finalized', function (t) {
 });
 
 test('finalizing record only batch at beginning', function (t) {
-        var date = new Date().toISOString();
-
-        var owner0 = libuuid.create();
-        var owner1 = libuuid.create();
-        var id0 = libuuid.create();
-        var id1 = libuuid.create();
-        var id2 = libuuid.create();
-        var id3 = libuuid.create();
+        var date = DATE_OUTSIDE_GP.toISOString();
 
         var inputs = [
-                commitRecord(id0, date, owner0, MORAY_1),
+                // finalized
+                commitRecord(ID_0, date, OWNER_0, MORAY_1),
 
-                uploadRecord(id1, date, uploadRecordKey(id1, owner1)),
+                // not finalized
+                uploadRecord(ID_1, date, uploadRecordKey(ID_1, OWNER_1)),
 
-                uploadRecord(id2, date, uploadRecordKey(id2, owner1)),
-                partRecord(id2, date, partRecordKey(id2, owner1, 0)),
-                partRecord(id2, date, partRecordKey(id2, owner1, 1)),
-                partRecord(id2, date, partRecordKey(id2, owner1, 2)),
+                // not finalized
+                uploadRecord(ID_2, date, uploadRecordKey(ID_2, OWNER_1)),
+                partRecord(ID_2, date, partRecordKey(ID_2, OWNER_1, 0)),
+                partRecord(ID_2, date, partRecordKey(ID_2, OWNER_1, 1)),
+                partRecord(ID_2, date, partRecordKey(ID_2, OWNER_1, 2)),
 
-                uploadRecord(id3, date, uploadRecordKey(id3, owner0)),
-                partRecord(id3, date, partRecordKey(id3, owner0, 0)),
+                // not finalized
+                uploadRecord(ID_3, date, uploadRecordKey(ID_3, OWNER_0)),
+                partRecord(ID_3, date, partRecordKey(ID_3, OWNER_0, 0)),
 
                 ''
         ];
 
         var stream = new MemoryStream(inputs.join('\n'));
-        var gc = lib.createMpuGarbageCollector({ reader: stream });
+        var gc = lib.createMpuGarbageCollector({
+                reader: stream,
+                gcDate: DATE_GC
+        });
         var expect = [];
         expect.push(mpuCommon.recordToObject(inputs[0]));
 
@@ -604,33 +629,33 @@ test('finalizing record only batch at beginning', function (t) {
 });
 
 test('finalizing record only batch at end', function (t) {
-        var date = new Date().toISOString();
-
-        var owner0 = libuuid.create();
-        var owner1 = libuuid.create();
-        var id0 = libuuid.create();
-        var id1 = libuuid.create();
-        var id2 = libuuid.create();
-        var id3 = libuuid.create();
+        var date = DATE_OUTSIDE_GP.toISOString();
 
         var inputs = [
-                uploadRecord(id1, date, uploadRecordKey(id1, owner1)),
+                // not finalized
+                uploadRecord(ID_1, date, uploadRecordKey(ID_1, OWNER_1)),
 
-                uploadRecord(id2, date, uploadRecordKey(id2, owner1)),
-                partRecord(id2, date, partRecordKey(id2, owner1, 0)),
-                partRecord(id2, date, partRecordKey(id2, owner1, 1)),
-                partRecord(id2, date, partRecordKey(id2, owner1, 2)),
+                // not finalized
+                uploadRecord(ID_2, date, uploadRecordKey(ID_2, OWNER_1)),
+                partRecord(ID_2, date, partRecordKey(ID_2, OWNER_1, 0)),
+                partRecord(ID_2, date, partRecordKey(ID_2, OWNER_1, 1)),
+                partRecord(ID_2, date, partRecordKey(ID_2, OWNER_1, 2)),
 
-                uploadRecord(id3, date, uploadRecordKey(id3, owner0)),
-                partRecord(id3, date, partRecordKey(id3, owner0, 0)),
+                // not finalized
+                uploadRecord(ID_3, date, uploadRecordKey(ID_3, OWNER_0)),
+                partRecord(ID_3, date, partRecordKey(ID_3, OWNER_0, 0)),
 
-                commitRecord(id0, date, owner0, MORAY_1),
+                // finalized
+                commitRecord(ID_0, date, OWNER_0, MORAY_1),
 
                 ''
         ];
 
         var stream = new MemoryStream(inputs.join('\n'));
-        var gc = lib.createMpuGarbageCollector({ reader: stream });
+        var gc = lib.createMpuGarbageCollector({
+                reader: stream,
+                gcDate: DATE_GC
+        });
         var expect = [];
         expect.push(mpuCommon.recordToObject(inputs[7]));
 
@@ -651,35 +676,35 @@ test('finalizing record only batch at end', function (t) {
 });
 
 test('upload record only batch at beginning', function (t) {
-        var date = new Date().toISOString();
-
-        var owner0 = libuuid.create();
-        var owner1 = libuuid.create();
-        var id0 = libuuid.create();
-        var id1 = libuuid.create();
-        var id2 = libuuid.create();
-        var id3 = libuuid.create();
+        var date = DATE_OUTSIDE_GP.toISOString();
 
         var inputs = [
-                uploadRecord(id0, date, uploadRecordKey(id0, owner0)),
+                // not finalized
+                uploadRecord(ID_0, date, uploadRecordKey(ID_0, OWNER_0)),
 
-                commitRecord(id1, date, owner1, MORAY_2),
-                uploadRecord(id1, date, uploadRecordKey(id1, owner1)),
+                // finalized
+                commitRecord(ID_1, date, OWNER_1, MORAY_2),
+                uploadRecord(ID_1, date, uploadRecordKey(ID_1, OWNER_1)),
 
-                abortRecord(id2, date, owner1, MORAY_2),
-                uploadRecord(id2, date, uploadRecordKey(id2, owner1)),
-                partRecord(id2, date, partRecordKey(id2, owner1, 0)),
-                partRecord(id2, date, partRecordKey(id2, owner1, 1)),
-                partRecord(id2, date, partRecordKey(id2, owner1, 2)),
+                // finalized
+                abortRecord(ID_2, date, OWNER_1, MORAY_2),
+                uploadRecord(ID_2, date, uploadRecordKey(ID_2, OWNER_1)),
+                partRecord(ID_2, date, partRecordKey(ID_2, OWNER_1, 0)),
+                partRecord(ID_2, date, partRecordKey(ID_2, OWNER_1, 1)),
+                partRecord(ID_2, date, partRecordKey(ID_2, OWNER_1, 2)),
 
-                abortRecord(id3, date, owner0, MORAY_2),
-                uploadRecord(id3, date, uploadRecordKey(id3, owner0)),
+                // finalized
+                abortRecord(ID_3, date, OWNER_0, MORAY_2),
+                uploadRecord(ID_3, date, uploadRecordKey(ID_3, OWNER_0)),
 
                 ''
         ];
 
         var stream = new MemoryStream(inputs.join('\n'));
-        var gc = lib.createMpuGarbageCollector({ reader: stream });
+        var gc = lib.createMpuGarbageCollector({
+                reader: stream,
+                gcDate: DATE_GC
+        });
         var expect = [];
 
         expect.push(mpuCommon.recordToObject(inputs[2]));
@@ -711,35 +736,35 @@ test('upload record only batch at beginning', function (t) {
 });
 
 test('upload record only batch at end', function (t) {
-        var date = new Date().toISOString();
-
-        var owner0 = libuuid.create();
-        var owner1 = libuuid.create();
-        var id0 = libuuid.create();
-        var id1 = libuuid.create();
-        var id2 = libuuid.create();
-        var id3 = libuuid.create();
+        var date = DATE_OUTSIDE_GP.toISOString();
 
         var inputs = [
-                commitRecord(id0, date, owner0, MORAY_2),
-                uploadRecord(id0, date, uploadRecordKey(id0, owner0)),
+                // finalized
+                commitRecord(ID_0, date, OWNER_0, MORAY_2),
+                uploadRecord(ID_0, date, uploadRecordKey(ID_0, OWNER_0)),
 
-                commitRecord(id1, date, owner1, MORAY_2),
-                uploadRecord(id1, date, uploadRecordKey(id1, owner1)),
+                // finalized
+                commitRecord(ID_1, date, OWNER_1, MORAY_2),
+                uploadRecord(ID_1, date, uploadRecordKey(ID_1, OWNER_1)),
 
-                abortRecord(id2, date, owner1, MORAY_2),
-                uploadRecord(id2, date, uploadRecordKey(id2, owner1)),
-                partRecord(id2, date, partRecordKey(id2, owner1, 0)),
-                partRecord(id2, date, partRecordKey(id2, owner1, 1)),
-                partRecord(id2, date, partRecordKey(id2, owner1, 2)),
+                // finalized
+                abortRecord(ID_2, date, OWNER_1, MORAY_2),
+                uploadRecord(ID_2, date, uploadRecordKey(ID_2, OWNER_1)),
+                partRecord(ID_2, date, partRecordKey(ID_2, OWNER_1, 0)),
+                partRecord(ID_2, date, partRecordKey(ID_2, OWNER_1, 1)),
+                partRecord(ID_2, date, partRecordKey(ID_2, OWNER_1, 2)),
 
-                uploadRecord(id3, date, uploadRecordKey(id3, owner0)),
+                // not finalized
+                uploadRecord(ID_3, date, uploadRecordKey(ID_3, OWNER_0)),
 
                 ''
         ];
 
         var stream = new MemoryStream(inputs.join('\n'));
-        var gc = lib.createMpuGarbageCollector({ reader: stream });
+        var gc = lib.createMpuGarbageCollector({
+                reader: stream,
+                gcDate: DATE_GC
+        });
         var expect = [];
 
         expect.push(mpuCommon.recordToObject(inputs[1]));
@@ -771,35 +796,35 @@ test('upload record only batch at end', function (t) {
 });
 
 test('part record only batch at beginning', function (t) {
-        var date = new Date().toISOString();
-
-        var owner0 = libuuid.create();
-        var owner1 = libuuid.create();
-        var id0 = libuuid.create();
-        var id1 = libuuid.create();
-        var id2 = libuuid.create();
-        var id3 = libuuid.create();
+        var date = DATE_OUTSIDE_GP.toISOString();
 
         var inputs = [
-                partRecord(id0, date, partRecordKey(id0, owner0, 0)),
+                // not finalized
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 0)),
 
-                commitRecord(id1, date, owner1, MORAY_2),
-                uploadRecord(id1, date, uploadRecordKey(id1, owner1)),
+                // finalized
+                commitRecord(ID_1, date, OWNER_1, MORAY_2),
+                uploadRecord(ID_1, date, uploadRecordKey(ID_1, OWNER_1)),
 
-                abortRecord(id2, date, owner1, MORAY_2),
-                uploadRecord(id2, date, uploadRecordKey(id2, owner1)),
-                partRecord(id2, date, partRecordKey(id2, owner1, 0)),
-                partRecord(id2, date, partRecordKey(id2, owner1, 1)),
-                partRecord(id2, date, partRecordKey(id2, owner1, 2)),
+                // finalized
+                abortRecord(ID_2, date, OWNER_1, MORAY_2),
+                uploadRecord(ID_2, date, uploadRecordKey(ID_2, OWNER_1)),
+                partRecord(ID_2, date, partRecordKey(ID_2, OWNER_1, 0)),
+                partRecord(ID_2, date, partRecordKey(ID_2, OWNER_1, 1)),
+                partRecord(ID_2, date, partRecordKey(ID_2, OWNER_1, 2)),
 
-                commitRecord(id3, date, owner0, MORAY_2),
-                uploadRecord(id3, date, uploadRecordKey(id3, owner0)),
+                // finalized
+                commitRecord(ID_3, date, OWNER_0, MORAY_2),
+                uploadRecord(ID_3, date, uploadRecordKey(ID_3, OWNER_0)),
 
                 ''
         ];
 
         var stream = new MemoryStream(inputs.join('\n'));
-        var gc = lib.createMpuGarbageCollector({ reader: stream });
+        var gc = lib.createMpuGarbageCollector({
+                reader: stream,
+                gcDate: DATE_GC
+        });
         var expect = [];
 
         expect.push(mpuCommon.recordToObject(inputs[2]));
@@ -832,35 +857,35 @@ test('part record only batch at beginning', function (t) {
 });
 
 test('part record at end', function (t) {
-        var date = new Date().toISOString();
-
-        var owner0 = libuuid.create();
-        var owner1 = libuuid.create();
-        var id0 = libuuid.create();
-        var id1 = libuuid.create();
-        var id2 = libuuid.create();
-        var id3 = libuuid.create();
+        var date = DATE_OUTSIDE_GP.toISOString();
 
         var inputs = [
-                commitRecord(id1, date, owner1, MORAY_2),
-                uploadRecord(id1, date, uploadRecordKey(id1, owner1)),
+                // finalized
+                commitRecord(ID_1, date, OWNER_1, MORAY_2),
+                uploadRecord(ID_1, date, uploadRecordKey(ID_1, OWNER_1)),
 
-                abortRecord(id2, date, owner1, MORAY_2),
-                uploadRecord(id2, date, uploadRecordKey(id2, owner1)),
-                partRecord(id2, date, partRecordKey(id2, owner1, 0)),
-                partRecord(id2, date, partRecordKey(id2, owner1, 1)),
-                partRecord(id2, date, partRecordKey(id2, owner1, 2)),
+                // finalized
+                abortRecord(ID_2, date, OWNER_1, MORAY_2),
+                uploadRecord(ID_2, date, uploadRecordKey(ID_2, OWNER_1)),
+                partRecord(ID_2, date, partRecordKey(ID_2, OWNER_1, 0)),
+                partRecord(ID_2, date, partRecordKey(ID_2, OWNER_1, 1)),
+                partRecord(ID_2, date, partRecordKey(ID_2, OWNER_1, 2)),
 
-                commitRecord(id3, date, owner0, MORAY_2),
-                uploadRecord(id3, date, uploadRecordKey(id3, owner0)),
+                // finalized
+                commitRecord(ID_3, date, OWNER_0, MORAY_2),
+                uploadRecord(ID_3, date, uploadRecordKey(ID_3, OWNER_0)),
 
-                partRecord(id0, date, partRecordKey(id0, owner0, 0)),
+                // not finalized
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 0)),
 
                 ''
         ];
 
         var stream = new MemoryStream(inputs.join('\n'));
-        var gc = lib.createMpuGarbageCollector({ reader: stream });
+        var gc = lib.createMpuGarbageCollector({
+                reader: stream,
+                gcDate: DATE_GC
+        });
         var expect = [];
 
         expect.push(mpuCommon.recordToObject(inputs[1]));
@@ -890,3 +915,293 @@ test('part record at end', function (t) {
                 stream.end();
         });
 });
+
+
+///--- Tests: testing grace period
+
+test('single batch: finalizing record only, within grace period',
+function (t) {
+        var date = DATE_WITHIN_GP.toISOString();
+
+        var inputs = [
+                // finalized, within grace period
+                commitRecord(ID_0, date, OWNER_0, MORAY_1),
+
+                ''
+        ];
+
+        var stream = new MemoryStream(inputs.join('\n'));
+        var gc = lib.createMpuGarbageCollector({
+                reader: stream,
+                gcDate: DATE_GC
+        });
+        var expect = [];
+
+        var output = [];
+
+        gc.on('moray', function (action) {
+                output.push(action);
+        });
+
+        gc.on('end', function () {
+                t.ok(jsprim.deepEqual(expect, output));
+                t.done();
+        });
+
+        process.nextTick(function () {
+                stream.end();
+        });
+});
+
+test('single batch: multiple records, within grace period', function (t) {
+        var date = DATE_WITHIN_GP.toISOString();
+
+        var inputs = [
+                // finalized, within grace period
+                abortRecord(ID_0, date, OWNER_0, MORAY_1),
+                uploadRecord(ID_0, date, uploadRecordKey(ID_0, OWNER_0)),
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 0)),
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 1)),
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 2)),
+
+                ''
+        ];
+
+        var stream = new MemoryStream(inputs.join('\n'));
+        var gc = lib.createMpuGarbageCollector({
+                reader: stream,
+                gcDate: DATE_GC
+        });
+        var expect = [];
+
+        var output = [];
+
+        gc.on('moray', function (action) {
+                output.push(action);
+        });
+
+        gc.on('end', function () {
+                t.ok(jsprim.deepEqual(expect, output));
+                t.done();
+        });
+
+        process.nextTick(function () {
+                stream.end();
+        });
+});
+
+test('single batch: finalized, barely within grace period',
+function (t) {
+        var ms = DATE_GC.valueOf() - DEF_GRACE_PERIOD_MILLIS + 1000;
+        var date = new Date(ms).toISOString();
+
+        var inputs = [
+                // finalized, within grace period
+                abortRecord(ID_0, date, OWNER_0, MORAY_1),
+                uploadRecord(ID_0, date, uploadRecordKey(ID_0, OWNER_0)),
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 0)),
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 1)),
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 2)),
+
+                ''
+        ];
+
+        var stream = new MemoryStream(inputs.join('\n'));
+        var gc = lib.createMpuGarbageCollector({
+                reader: stream,
+                gcDate: DATE_GC
+        });
+        var expect = [];
+
+        var output = [];
+
+        gc.on('moray', function (action) {
+                output.push(action);
+        });
+
+        gc.on('end', function () {
+                t.ok(jsprim.deepEqual(expect, output));
+                t.done();
+        });
+
+        process.nextTick(function () {
+                stream.end();
+        });
+});
+
+test('single batch: finalized, barely outside grace period',
+function (t) {
+        var ms = DATE_GC.valueOf() - DEF_GRACE_PERIOD_MILLIS - 1000;
+        var date = new Date(ms).toISOString();
+
+        var inputs = [
+                // finalized, outside grace period
+                abortRecord(ID_0, date, OWNER_0, MORAY_1),
+                uploadRecord(ID_0, date, uploadRecordKey(ID_0, OWNER_0)),
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 0)),
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 1)),
+                partRecord(ID_0, date, partRecordKey(ID_0, OWNER_0, 2)),
+
+                ''
+        ];
+
+        var stream = new MemoryStream(inputs.join('\n'));
+        var gc = lib.createMpuGarbageCollector({
+                reader: stream,
+                gcDate: DATE_GC
+        });
+        var expect = [];
+        expect.push(mpuCommon.recordToObject(inputs[1]));
+        expect.push(mpuCommon.recordToObject(inputs[2]));
+        expect.push(mpuCommon.recordToObject(inputs[3]));
+        expect.push(mpuCommon.recordToObject(inputs[4]));
+        expect.push(mpuCommon.recordToObject(inputs[0]));
+
+        var output = [];
+
+        gc.on('moray', function (action) {
+                output.push(action);
+        });
+
+        gc.on('end', function () {
+                t.ok(jsprim.deepEqual(expect, output));
+                t.done();
+        });
+
+        process.nextTick(function () {
+                stream.end();
+        });
+});
+
+test('all finalized, some within grace period', function (t) {
+        var outsideGpMs = DATE_GC.valueOf() - DEF_GRACE_PERIOD_MILLIS - 1000;
+        var outsideGp = new Date(outsideGpMs).toISOString();
+
+        var withinGpMs = DATE_GC.valueOf() - DEF_GRACE_PERIOD_MILLIS + 1000;
+        var withinGp = new Date(withinGpMs).toISOString();
+
+        var inputs = [
+                // finalized, within grace period
+                commitRecord(ID_0, withinGp, OWNER_0, MORAY_1),
+                uploadRecord(ID_0, withinGp, uploadRecordKey(ID_0, OWNER_0)),
+                partRecord(ID_0, withinGp, partRecordKey(ID_0, OWNER_0, 0)),
+                partRecord(ID_0, withinGp, partRecordKey(ID_0, OWNER_0, 1)),
+                partRecord(ID_0, withinGp, partRecordKey(ID_0, OWNER_0, 2)),
+                partRecord(ID_0, withinGp, partRecordKey(ID_0, OWNER_0, 3)),
+
+                // finalized, outside grace period
+                commitRecord(ID_1, outsideGp, OWNER_1, MORAY_2),
+                uploadRecord(ID_1, outsideGp, uploadRecordKey(ID_1, OWNER_1)),
+
+                // finalized, within grace period
+                abortRecord(ID_2, withinGp, OWNER_1, MORAY_2),
+                uploadRecord(ID_2, withinGp, uploadRecordKey(ID_2, OWNER_1)),
+                partRecord(ID_2, withinGp, partRecordKey(ID_2, OWNER_1, 0)),
+                partRecord(ID_2, withinGp, partRecordKey(ID_2, OWNER_1, 1)),
+                partRecord(ID_2, withinGp, partRecordKey(ID_2, OWNER_1, 2)),
+
+                // finalized, outside grace period
+                abortRecord(ID_3, outsideGp, OWNER_0, MORAY_2),
+                uploadRecord(ID_3, outsideGp, uploadRecordKey(ID_3, OWNER_0)),
+                partRecord(ID_3, outsideGp, partRecordKey(ID_3, OWNER_0, 0)),
+
+                ''
+        ];
+
+        var stream = new MemoryStream(inputs.join('\n'));
+        var gc = lib.createMpuGarbageCollector({
+                reader: stream,
+                gcDate: DATE_GC
+        });
+        var expect = [];
+
+        expect.push(mpuCommon.recordToObject(inputs[7]));
+        expect.push(mpuCommon.recordToObject(inputs[6]));
+
+        expect.push(mpuCommon.recordToObject(inputs[14]));
+        expect.push(mpuCommon.recordToObject(inputs[15]));
+        expect.push(mpuCommon.recordToObject(inputs[13]));
+
+        var output = [];
+
+        gc.on('moray', function (action) {
+                output.push(action);
+        });
+
+        gc.on('end', function () {
+                t.ok(jsprim.deepEqual(expect, output));
+                t.done();
+        });
+
+        process.nextTick(function () {
+                stream.end();
+        });
+});
+
+test('all finalized, some within custom grace period', function (t) {
+        var gracePeriod = 1000;
+
+        var outsideGpMs = DATE_GC.valueOf() - gracePeriod - 1000;
+        var outsideGp = new Date(outsideGpMs).toISOString();
+
+        var withinGpMs = DATE_GC.valueOf() - gracePeriod + 1000;
+        var withinGp = new Date(withinGpMs).toISOString();
+
+        var inputs = [
+                // finalized, within grace period
+                commitRecord(ID_0, withinGp, OWNER_0, MORAY_1),
+                uploadRecord(ID_0, withinGp, uploadRecordKey(ID_0, OWNER_0)),
+                partRecord(ID_0, withinGp, partRecordKey(ID_0, OWNER_0, 0)),
+                partRecord(ID_0, withinGp, partRecordKey(ID_0, OWNER_0, 1)),
+                partRecord(ID_0, withinGp, partRecordKey(ID_0, OWNER_0, 2)),
+                partRecord(ID_0, withinGp, partRecordKey(ID_0, OWNER_0, 3)),
+
+                // finalized, outside grace period
+                commitRecord(ID_1, outsideGp, OWNER_1, MORAY_2),
+                uploadRecord(ID_1, outsideGp, uploadRecordKey(ID_1, OWNER_1)),
+
+                // finalized, within grace period
+                abortRecord(ID_2, withinGp, OWNER_1, MORAY_2),
+                uploadRecord(ID_2, withinGp, uploadRecordKey(ID_2, OWNER_1)),
+                partRecord(ID_2, withinGp, partRecordKey(ID_2, OWNER_1, 0)),
+                partRecord(ID_2, withinGp, partRecordKey(ID_2, OWNER_1, 1)),
+                partRecord(ID_2, withinGp, partRecordKey(ID_2, OWNER_1, 2)),
+
+                // finalized, outside grace period
+                abortRecord(ID_3, outsideGp, OWNER_0, MORAY_2),
+                uploadRecord(ID_3, outsideGp, uploadRecordKey(ID_3, OWNER_0)),
+                partRecord(ID_3, outsideGp, partRecordKey(ID_3, OWNER_0, 0)),
+
+                ''
+        ];
+
+        var stream = new MemoryStream(inputs.join('\n'));
+        var gc = lib.createMpuGarbageCollector({
+                reader: stream,
+                gcDate: DATE_GC,
+                gracePeriodMillis: gracePeriod
+        });
+        var expect = [];
+
+        expect.push(mpuCommon.recordToObject(inputs[7]));
+        expect.push(mpuCommon.recordToObject(inputs[6]));
+
+        expect.push(mpuCommon.recordToObject(inputs[14]));
+        expect.push(mpuCommon.recordToObject(inputs[15]));
+        expect.push(mpuCommon.recordToObject(inputs[13]));
+
+        var output = [];
+
+        gc.on('moray', function (action) {
+                output.push(action);
+        });
+
+        gc.on('end', function () {
+                t.ok(jsprim.deepEqual(expect, output));
+                t.done();
+        });
+
+        process.nextTick(function () {
+                stream.end();
+        });
+});
