From 5838d435e6f84a03d457e2809991212c4a0132c8 Mon Sep 17 00:00:00 2001
From: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
Date: Fri, 3 May 2019 08:40:37 -0600
Subject: [PATCH] MANTA-4246 Make boray use rust-cueball

---
 Cargo.lock                          | 597 +++++++++++++++++++++-------
 Cargo.toml                          |  13 +-
 etc/postgres/create-ephemeral-db.sh |  24 ++
 etc/postgres/schema.sql             | 119 ++++++
 src/bucket.rs                       | 225 ++++++-----
 src/lib.rs                          |  59 +++
 src/main.rs                         |  99 +++--
 src/object.rs                       | 265 ++++++------
 src/opts.rs                         |  19 +-
 tests/rpc_handlers.rs               | 416 +++++++++++++++++++
 10 files changed, 1406 insertions(+), 430 deletions(-)
 create mode 100755 etc/postgres/create-ephemeral-db.sh
 create mode 100644 etc/postgres/schema.sql
 create mode 100644 src/lib.rs
 create mode 100644 tests/rpc_handlers.rs

diff --git a/Cargo.lock b/Cargo.lock
index 2918f5a..d22f9f6 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -22,9 +22,13 @@ version = "1.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
-name = "arrayref"
-version = "0.3.5"
+name = "argon2rs"
+version = "0.2.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "blake2-rfc 0.2.18 (registry+https://github.com/rust-lang/crates.io-index)",
+ "scoped_threadpool 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)",
+]
 
 [[package]]
 name = "arrayvec"
@@ -50,12 +54,25 @@ version = "0.1.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
-name = "base64"
-version = "0.6.0"
+name = "backtrace"
+version = "0.3.15"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
- "byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "safemem 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "autocfg 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "backtrace-sys 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)",
+ "cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
+ "rustc-demangle 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)",
+ "winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "backtrace-sys"
+version = "0.1.28"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "cc 1.0.29 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
 [[package]]
@@ -71,13 +88,32 @@ name = "bitflags"
 version = "1.0.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
+[[package]]
+name = "blake2-rfc"
+version = "0.2.18"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "arrayvec 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)",
+ "constant_time_eq 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "block-buffer"
-version = "0.3.3"
+version = "0.7.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "block-padding 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)",
+ "byte-tools 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)",
+ "byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)",
+ "generic-array 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "block-padding"
+version = "0.1.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
- "arrayref 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)",
- "byte-tools 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "byte-tools 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
 [[package]]
@@ -87,26 +123,29 @@ dependencies = [
  "base64 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)",
  "chrono 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)",
  "clap 2.32.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "cueball 0.1.0 (git+https://github.com/joyent/rust-cueball)",
+ "cueball-postgres-connection 0.1.0 (git+https://github.com/joyent/rust-cueball-postgres-connection)",
+ "cueball-static-resolver 0.1.0 (git+https://github.com/joyent/rust-cueball-static-resolver)",
  "hyper 0.12.25 (registry+https://github.com/rust-lang/crates.io-index)",
  "lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "md5 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "postgres 0.15.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "postgres 0.16.0-rc.1 (registry+https://github.com/rust-lang/crates.io-index)",
  "prometheus 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "r2d2 0.8.3 (registry+https://github.com/rust-lang/crates.io-index)",
- "r2d2_postgres 0.14.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "rust_fast 0.1.0 (git+https://github.com/joyent/rust-fast)",
  "serde 1.0.88 (registry+https://github.com/rust-lang/crates.io-index)",
  "serde_derive 1.0.88 (registry+https://github.com/rust-lang/crates.io-index)",
  "serde_json 1.0.38 (registry+https://github.com/rust-lang/crates.io-index)",
  "slog 2.4.1 (registry+https://github.com/rust-lang/crates.io-index)",
  "slog-bunyan 2.1.1-pre (git+https://github.com/kellymclaughlin/bunyan?branch=build-on-smartos)",
+ "slog-term 2.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "tokio 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)",
- "uuid 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)",
+ "url 1.7.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "uuid 0.7.4 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
 [[package]]
 name = "byte-tools"
-version = "0.2.0"
+version = "0.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
@@ -242,19 +281,112 @@ dependencies = [
 
 [[package]]
 name = "crypto-mac"
-version = "0.5.2"
+version = "0.7.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
- "constant_time_eq 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)",
- "generic-array 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "generic-array 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "subtle 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "cueball"
+version = "0.1.0"
+source = "git+https://github.com/joyent/rust-cueball#ad0f410ef889bea296fc5b51aae8177da0edc3e2"
+dependencies = [
+ "base64 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)",
+ "derive_more 0.14.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "sha1 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "slog 2.4.1 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "cueball-postgres-connection"
+version = "0.1.0"
+source = "git+https://github.com/joyent/rust-cueball-postgres-connection#6ae53a04579e1e688a2df5cb3e8aae9a4a1e9ddb"
+dependencies = [
+ "cueball 0.1.0 (git+https://github.com/joyent/rust-cueball)",
+ "postgres 0.16.0-rc.1 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "cueball-static-resolver"
+version = "0.1.0"
+source = "git+https://github.com/joyent/rust-cueball-static-resolver#ea35cfe1656c3c2d9812c485cc99e11f48321205"
+dependencies = [
+ "cueball 0.1.0 (git+https://github.com/joyent/rust-cueball)",
+]
+
+[[package]]
+name = "darling"
+version = "0.8.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "darling_core 0.8.6 (registry+https://github.com/rust-lang/crates.io-index)",
+ "darling_macro 0.8.6 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "darling_core"
+version = "0.8.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)",
+ "ident_case 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)",
+ "proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)",
+ "quote 0.6.11 (registry+https://github.com/rust-lang/crates.io-index)",
+ "syn 0.15.26 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "darling_macro"
+version = "0.8.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "darling_core 0.8.6 (registry+https://github.com/rust-lang/crates.io-index)",
+ "quote 0.6.11 (registry+https://github.com/rust-lang/crates.io-index)",
+ "syn 0.15.26 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "derive_more"
+version = "0.14.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)",
+ "quote 0.6.11 (registry+https://github.com/rust-lang/crates.io-index)",
+ "rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)",
+ "syn 0.15.26 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "derive_state_machine_future"
+version = "0.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "darling 0.8.6 (registry+https://github.com/rust-lang/crates.io-index)",
+ "heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)",
+ "petgraph 0.4.13 (registry+https://github.com/rust-lang/crates.io-index)",
+ "proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)",
+ "quote 0.6.11 (registry+https://github.com/rust-lang/crates.io-index)",
+ "syn 0.15.26 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
 [[package]]
 name = "digest"
-version = "0.7.6"
+version = "0.8.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "generic-array 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "dirs"
+version = "1.0.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
- "generic-array 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
+ "redox_users 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
 [[package]]
@@ -266,6 +398,26 @@ dependencies = [
  "regex 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "failure"
+version = "0.1.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "backtrace 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)",
+ "failure_derive 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "failure_derive"
+version = "0.1.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)",
+ "quote 0.6.11 (registry+https://github.com/rust-lang/crates.io-index)",
+ "syn 0.15.26 (registry+https://github.com/rust-lang/crates.io-index)",
+ "synstructure 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "fake-simd"
 version = "0.1.2"
@@ -276,6 +428,16 @@ name = "fallible-iterator"
 version = "0.1.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
+[[package]]
+name = "fallible-iterator"
+version = "0.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
+[[package]]
+name = "fixedbitset"
+version = "0.1.9"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
 [[package]]
 name = "fnv"
 version = "1.0.6"
@@ -316,7 +478,7 @@ dependencies = [
 
 [[package]]
 name = "generic-array"
-version = "0.9.0"
+version = "0.12.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
  "typenum 1.10.0 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -340,17 +502,20 @@ dependencies = [
 ]
 
 [[package]]
-name = "hex"
-version = "0.2.0"
+name = "heck"
+version = "0.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "unicode-segmentation 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)",
+]
 
 [[package]]
 name = "hmac"
-version = "0.5.0"
+version = "0.7.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
- "crypto-mac 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "digest 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)",
+ "crypto-mac 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "digest 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
 [[package]]
@@ -395,6 +560,21 @@ dependencies = [
  "want 0.0.6 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "ident_case"
+version = "1.0.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
+[[package]]
+name = "idna"
+version = "0.1.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)",
+ "unicode-bidi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)",
+ "unicode-normalization 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "indexmap"
 version = "1.0.2"
@@ -409,6 +589,17 @@ dependencies = [
  "winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "isatty"
+version = "0.1.9"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
+ "redox_syscall 0.1.51 (registry+https://github.com/rust-lang/crates.io-index)",
+ "winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "itoa"
 version = "0.4.3"
@@ -460,23 +651,15 @@ name = "matches"
 version = "0.1.8"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
-[[package]]
-name = "md5"
-version = "0.3.8"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-
 [[package]]
 name = "md5"
 version = "0.5.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
-name = "memchr"
-version = "1.0.2"
+name = "md5"
+version = "0.6.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-dependencies = [
- "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
-]
 
 [[package]]
 name = "memchr"
@@ -644,6 +827,16 @@ dependencies = [
  "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "opaque-debug"
+version = "0.2.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
+[[package]]
+name = "ordermap"
+version = "0.3.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
 [[package]]
 name = "owning_ref"
 version = "0.4.0"
@@ -673,6 +866,20 @@ dependencies = [
  "winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "percent-encoding"
+version = "1.0.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
+[[package]]
+name = "petgraph"
+version = "0.4.13"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "fixedbitset 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)",
+ "ordermap 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "phf"
 version = "0.7.24"
@@ -691,49 +898,36 @@ dependencies = [
 
 [[package]]
 name = "postgres"
-version = "0.15.2"
+version = "0.16.0-rc.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
  "bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)",
- "fallible-iterator 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)",
+ "fallible-iterator 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "futures 0.1.25 (registry+https://github.com/rust-lang/crates.io-index)",
+ "lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)",
- "postgres-protocol 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "postgres-shared 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "socket2 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)",
+ "tokio 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)",
+ "tokio-postgres 0.4.0-rc.2 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
 [[package]]
 name = "postgres-protocol"
-version = "0.3.2"
+version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
- "base64 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "base64 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)",
  "byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)",
  "bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)",
  "fallible-iterator 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)",
- "generic-array 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "hmac 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "md5 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)",
- "memchr 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "rand 0.3.23 (registry+https://github.com/rust-lang/crates.io-index)",
- "sha2 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)",
+ "generic-array 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "hmac 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "md5 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)",
+ "memchr 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "rand 0.6.5 (git+https://github.com/rust-random/rand)",
+ "sha2 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "stringprep 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
-[[package]]
-name = "postgres-shared"
-version = "0.4.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-dependencies = [
- "chrono 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)",
- "fallible-iterator 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)",
- "hex 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "phf 0.7.24 (registry+https://github.com/rust-lang/crates.io-index)",
- "postgres-protocol 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "serde_json 1.0.38 (registry+https://github.com/rust-lang/crates.io-index)",
- "uuid 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)",
-]
-
 [[package]]
 name = "proc-macro2"
 version = "0.4.27"
@@ -784,47 +978,6 @@ dependencies = [
  "proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
-[[package]]
-name = "r2d2"
-version = "0.8.3"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-dependencies = [
- "antidote 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)",
- "scheduled-thread-pool 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)",
-]
-
-[[package]]
-name = "r2d2_postgres"
-version = "0.14.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-dependencies = [
- "postgres 0.15.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "postgres-shared 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "r2d2 0.8.3 (registry+https://github.com/rust-lang/crates.io-index)",
-]
-
-[[package]]
-name = "rand"
-version = "0.3.23"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-dependencies = [
- "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
- "rand 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)",
-]
-
-[[package]]
-name = "rand"
-version = "0.4.6"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-dependencies = [
- "fuchsia-cprng 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
- "rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "rdrand 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)",
-]
-
 [[package]]
 name = "rand"
 version = "0.6.5"
@@ -908,6 +1061,19 @@ dependencies = [
  "winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "rand_os"
+version = "0.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)",
+ "fuchsia-cprng 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
+ "rand_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "rdrand 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "rand_pcg"
 version = "0.1.2"
@@ -954,6 +1120,17 @@ dependencies = [
  "redox_syscall 0.1.51 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "redox_users"
+version = "0.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "argon2rs 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)",
+ "failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)",
+ "rand_os 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)",
+ "redox_syscall 0.1.51 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "regex"
 version = "1.1.0"
@@ -974,10 +1151,15 @@ dependencies = [
  "ucd-util 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "rent_to_own"
+version = "0.1.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
 [[package]]
 name = "rust_fast"
 version = "0.1.0"
-source = "git+https://github.com/joyent/rust-fast#35c2f9de8712c857bcdf58beeedcda08636042c8"
+source = "git+https://github.com/joyent/rust-fast#547a754390a8c59fada3ddfff9d55a3ea77387d6"
 dependencies = [
  "byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)",
  "bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -998,6 +1180,11 @@ dependencies = [
  "tokio-uds 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "rustc-demangle"
+version = "0.1.14"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
 [[package]]
 name = "rustc_version"
 version = "0.2.3"
@@ -1012,17 +1199,9 @@ version = "0.2.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
-name = "safemem"
-version = "0.2.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-
-[[package]]
-name = "scheduled-thread-pool"
-version = "0.2.0"
+name = "scoped_threadpool"
+version = "0.1.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-dependencies = [
- "antidote 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)",
-]
 
 [[package]]
 name = "scopeguard"
@@ -1067,15 +1246,20 @@ dependencies = [
  "serde 1.0.88 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "sha1"
+version = "0.6.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
 [[package]]
 name = "sha2"
-version = "0.7.1"
+version = "0.8.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
- "block-buffer 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)",
- "byte-tools 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "digest 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)",
+ "block-buffer 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)",
+ "digest 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "fake-simd 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "opaque-debug 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
 [[package]]
@@ -1117,20 +1301,21 @@ dependencies = [
 ]
 
 [[package]]
-name = "smallvec"
-version = "0.6.9"
+name = "slog-term"
+version = "2.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "chrono 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)",
+ "isatty 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)",
+ "slog 2.4.1 (registry+https://github.com/rust-lang/crates.io-index)",
+ "term 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)",
+]
 
 [[package]]
-name = "socket2"
-version = "0.3.8"
+name = "smallvec"
+version = "0.6.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-dependencies = [
- "cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)",
- "libc 0.2.48 (registry+https://github.com/rust-lang/crates.io-index)",
- "redox_syscall 0.1.51 (registry+https://github.com/rust-lang/crates.io-index)",
- "winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)",
-]
 
 [[package]]
 name = "spin"
@@ -1142,6 +1327,16 @@ name = "stable_deref_trait"
 version = "1.1.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
+[[package]]
+name = "state_machine_future"
+version = "0.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "derive_state_machine_future 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "futures 0.1.25 (registry+https://github.com/rust-lang/crates.io-index)",
+ "rent_to_own 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "string"
 version = "0.1.3"
@@ -1161,6 +1356,11 @@ name = "strsim"
 version = "0.7.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
+[[package]]
+name = "subtle"
+version = "1.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
 [[package]]
 name = "syn"
 version = "0.15.26"
@@ -1171,6 +1371,27 @@ dependencies = [
  "unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "synstructure"
+version = "0.10.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)",
+ "quote 0.6.11 (registry+https://github.com/rust-lang/crates.io-index)",
+ "syn 0.15.26 (registry+https://github.com/rust-lang/crates.io-index)",
+ "unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "term"
+version = "0.5.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)",
+ "dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)",
+ "winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "termion"
 version = "1.5.1"
@@ -1278,6 +1499,33 @@ dependencies = [
  "log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "tokio-postgres"
+version = "0.4.0-rc.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "antidote 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)",
+ "chrono 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)",
+ "fallible-iterator 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)",
+ "futures 0.1.25 (registry+https://github.com/rust-lang/crates.io-index)",
+ "futures-cpupool 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)",
+ "lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)",
+ "percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)",
+ "phf 0.7.24 (registry+https://github.com/rust-lang/crates.io-index)",
+ "postgres-protocol 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "serde 1.0.88 (registry+https://github.com/rust-lang/crates.io-index)",
+ "serde_json 1.0.38 (registry+https://github.com/rust-lang/crates.io-index)",
+ "state_machine_future 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "tokio-codec 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)",
+ "tokio-io 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)",
+ "tokio-tcp 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)",
+ "tokio-timer 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)",
+ "tokio-uds 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)",
+ "uuid 0.7.4 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "tokio-reactor"
 version = "0.1.8"
@@ -1406,6 +1654,11 @@ dependencies = [
  "smallvec 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "unicode-segmentation"
+version = "1.2.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
 [[package]]
 name = "unicode-width"
 version = "0.1.5"
@@ -1416,6 +1669,16 @@ name = "unicode-xid"
 version = "0.1.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
+[[package]]
+name = "url"
+version = "1.7.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "idna 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)",
+ "matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)",
+ "percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "utf8-ranges"
 version = "1.0.2"
@@ -1423,10 +1686,10 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
 name = "uuid"
-version = "0.5.1"
+version = "0.7.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
- "rand 0.3.23 (registry+https://github.com/rust-lang/crates.io-index)",
+ "rand 0.6.5 (git+https://github.com/rust-random/rand)",
  "serde 1.0.88 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
@@ -1492,15 +1755,18 @@ dependencies = [
 "checksum aho-corasick 0.6.10 (registry+https://github.com/rust-lang/crates.io-index)" = "81ce3d38065e618af2d7b77e10c5ad9a069859b4be3c2250f674af3840d9c8a5"
 "checksum ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)" = "ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b"
 "checksum antidote 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)" = "34fde25430d87a9388dadbe6e34d7f72a462c8b43ac8d309b42b0a8505d7e2a5"
-"checksum arrayref 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)" = "0d382e583f07208808f6b1249e60848879ba3543f57c32277bf52d69c2f0f0ee"
+"checksum argon2rs 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)" = "3f67b0b6a86dae6e67ff4ca2b6201396074996379fba2b92ff649126f37cb392"
 "checksum arrayvec 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)" = "92c7fb76bc8826a8b33b4ee5bb07a247a81e76764ab4d55e8f73e3a4d8808c71"
 "checksum atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)" = "9a7d5b8723950951411ee34d271d99dddcc2035a16ab25310ea2c8cfd4369652"
 "checksum autocfg 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)" = "a6d640bee2da49f60a4068a7fae53acde8982514ab7bae8b8cea9e88cbcfd799"
+"checksum backtrace 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)" = "f106c02a3604afcdc0df5d36cc47b44b55917dbaf3d808f71c163a0ddba64637"
+"checksum backtrace-sys 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)" = "797c830ac25ccc92a7f8a7b9862bde440715531514594a6154e3d4a54dd769b6"
 "checksum base64 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)" = "0b25d992356d2eb0ed82172f5248873db5560c4721f564b13cb5193bda5e668e"
-"checksum base64 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)" = "96434f987501f0ed4eb336a411e0631ecd1afa11574fe148587adc4ff96143c9"
 "checksum bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)" = "228047a76f468627ca71776ecdebd732a3423081fcf5125585bcd7c49886ce12"
-"checksum block-buffer 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)" = "a076c298b9ecdb530ed9d967e74a6027d6a7478924520acddcddc24c1c8ab3ab"
-"checksum byte-tools 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)" = "560c32574a12a89ecd91f5e742165893f86e3ab98d21f8ea548658eb9eef5f40"
+"checksum blake2-rfc 0.2.18 (registry+https://github.com/rust-lang/crates.io-index)" = "5d6d530bdd2d52966a6d03b7a964add7ae1a288d25214066fd4b600f0f796400"
+"checksum block-buffer 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)" = "c0940dc441f31689269e10ac70eb1002a3a1d3ad1390e030043662eb7fe4688b"
+"checksum block-padding 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)" = "6d4dc3af3ee2e12f3e5d224e5e1e3d73668abbeb69e566d361f7d5563a4fdf09"
+"checksum byte-tools 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)" = "e3b5ca7a04898ad4bcd41c90c5285445ff5b791899bb1b0abdd2a2aa791211d7"
 "checksum byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)" = "a019b10a2a7cdeb292db131fc8113e57ea2a908f6e7894b0c3c671893b65dbeb"
 "checksum bytes 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)" = "206fdffcfa2df7cbe15601ef46c813fce0965eb3286db6b56c583b814b51c81c"
 "checksum cc 1.0.29 (registry+https://github.com/rust-lang/crates.io-index)" = "4390a3b5f4f6bce9c1d0c00128379df433e53777fdd30e92f16a529332baec4e"
@@ -1516,26 +1782,42 @@ dependencies = [
 "checksum crossbeam-deque 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)" = "05e44b8cf3e1a625844d1750e1f7820da46044ff6d28f4d43e455ba3e5bb2c13"
 "checksum crossbeam-epoch 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)" = "04c9e3102cc2d69cd681412141b390abd55a362afc1540965dad0ad4d34280b4"
 "checksum crossbeam-utils 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)" = "f8306fcef4a7b563b76b7dd949ca48f52bc1141aa067d2ea09565f3e2652aa5c"
-"checksum crypto-mac 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)" = "0999b4ff4d3446d4ddb19a63e9e00c1876e75cd7000d20e57a693b4b3f08d958"
-"checksum digest 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)" = "03b072242a8cbaf9c145665af9d250c59af3b958f83ed6824e13533cf76d5b90"
+"checksum crypto-mac 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)" = "4434400df11d95d556bac068ddfedd482915eb18fe8bea89bc80b6e4b1c179e5"
+"checksum cueball 0.1.0 (git+https://github.com/joyent/rust-cueball)" = "<none>"
+"checksum cueball-postgres-connection 0.1.0 (git+https://github.com/joyent/rust-cueball-postgres-connection)" = "<none>"
+"checksum cueball-static-resolver 0.1.0 (git+https://github.com/joyent/rust-cueball-static-resolver)" = "<none>"
+"checksum darling 0.8.6 (registry+https://github.com/rust-lang/crates.io-index)" = "9158d690bc62a3a57c3e45b85e4d50de2008b39345592c64efd79345c7e24be0"
+"checksum darling_core 0.8.6 (registry+https://github.com/rust-lang/crates.io-index)" = "d2a368589465391e127e10c9e3a08efc8df66fd49b87dc8524c764bbe7f2ef82"
+"checksum darling_macro 0.8.6 (registry+https://github.com/rust-lang/crates.io-index)" = "244e8987bd4e174385240cde20a3657f607fb0797563c28255c353b5819a07b1"
+"checksum derive_more 0.14.0 (registry+https://github.com/rust-lang/crates.io-index)" = "fbe9f11be34f800b3ecaaed0ec9ec2e015d1d0ba0c8644c1310f73d6e8994615"
+"checksum derive_state_machine_future 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)" = "1220ad071cb8996454c20adf547a34ba3ac793759dab793d9dc04996a373ac83"
+"checksum digest 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)" = "05f47366984d3ad862010e22c7ce81a7dbcaebbdfb37241a620f8b6596ee135c"
+"checksum dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)" = "3fd78930633bd1c6e35c4b42b1df7b0cbc6bc191146e512bb3bedf243fcc3901"
 "checksum env_logger 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)" = "afb070faf94c85d17d50ca44f6ad076bce18ae92f0037d350947240a36e9d42e"
+"checksum failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)" = "795bd83d3abeb9220f257e597aa0080a508b27533824adf336529648f6abf7e2"
+"checksum failure_derive 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)" = "ea1063915fd7ef4309e222a5a07cf9c319fb9c7836b1f89b85458672dbb127e1"
 "checksum fake-simd 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)" = "e88a8acf291dafb59c2d96e8f59828f3838bb1a70398823ade51a84de6a6deed"
 "checksum fallible-iterator 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)" = "eb7217124812dc5672b7476d0c2d20cfe9f7c0f1ba0904b674a9762a0212f72e"
+"checksum fallible-iterator 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)" = "4443176a9f2c162692bd3d352d745ef9413eec5782a80d8fd6f8a1ac692a07f7"
+"checksum fixedbitset 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)" = "86d4de0081402f5e88cdac65c8dcdcc73118c1a7a465e2a05f0da05843a8ea33"
 "checksum fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)" = "2fad85553e09a6f881f739c29f0b00b0f01357c743266d478b68951ce23285f3"
 "checksum fuchsia-cprng 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)" = "a06f77d526c1a601b7c4cdd98f54b5eaabffc14d5f2f0296febdc7f357c6d3ba"
 "checksum fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)" = "2e9763c69ebaae630ba35f74888db465e49e259ba1bc0eda7d06f4a067615d82"
 "checksum fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)" = "3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7"
 "checksum futures 0.1.25 (registry+https://github.com/rust-lang/crates.io-index)" = "49e7653e374fe0d0c12de4250f0bdb60680b8c80eed558c5c7538eec9c89e21b"
 "checksum futures-cpupool 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)" = "ab90cde24b3319636588d0c35fe03b1333857621051837ed769faefb4c2162e4"
-"checksum generic-array 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)" = "ef25c5683767570c2bbd7deba372926a55eaae9982d7726ee2a1050239d45b9d"
+"checksum generic-array 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)" = "3c0f28c2f5bfb5960175af447a2da7c18900693738343dc896ffbcabd9839592"
 "checksum h2 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)" = "ddb2b25a33e231484694267af28fec74ac63b5ccf51ee2065a5e313b834d836e"
-"checksum hex 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)" = "d6a22814455d41612f41161581c2883c0c6a1c41852729b17d5ed88f01e153aa"
-"checksum hmac 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)" = "44f3bdb08579d99d7dc761c0e266f13b5f2ab8c8c703b9fc9ef333cd8f48f55e"
+"checksum heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)" = "20564e78d53d2bb135c343b3f47714a56af2061f1c928fdb541dc7b9fdd94205"
+"checksum hmac 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)" = "f127a908633569f208325f86f71255d3363c79721d7f9fe31cd5569908819771"
 "checksum http 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)" = "fe67e3678f2827030e89cc4b9e7ecd16d52f132c0b940ab5005f88e821500f6a"
 "checksum httparse 1.3.3 (registry+https://github.com/rust-lang/crates.io-index)" = "e8734b0cfd3bc3e101ec59100e101c2eecd19282202e87808b3037b442777a83"
 "checksum hyper 0.12.25 (registry+https://github.com/rust-lang/crates.io-index)" = "7d5b6658b016965ae301fa995306db965c93677880ea70765a84235a96eae896"
+"checksum ident_case 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)" = "b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39"
+"checksum idna 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)" = "38f09e0f0b1fb55fdee1f17470ad800da77af5186a1a76c026b679358b7e844e"
 "checksum indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)" = "7e81a7c05f79578dbc15793d8b619db9ba32b4577003ef3af1a91c416798c58d"
 "checksum iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)" = "dbe6e417e7d0975db6512b90796e8ce223145ac4e33c377e4a42882a0e88bb08"
+"checksum isatty 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)" = "e31a8281fc93ec9693494da65fbf28c0c2aa60a2eaec25dc58e2f31952e95edc"
 "checksum itoa 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)" = "1306f3464951f30e30d12373d31c79fbd52d236e5e896fd92f96ec7babbbe60b"
 "checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)" = "7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d"
 "checksum lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)" = "bc5729f27f159ddd61f4df6228e827e86643d4d3e7c32183cb30a1c08f604a14"
@@ -1544,9 +1826,8 @@ dependencies = [
 "checksum lock_api 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)" = "62ebf1391f6acad60e5c8b43706dde4582df75c06698ab44511d15016bc2442c"
 "checksum log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)" = "c84ec4b527950aa83a329754b01dbe3f58361d1c5efacd1f6d68c494d08a17c6"
 "checksum matches 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)" = "7ffc5c5338469d4d3ea17d269fa8ea3512ad247247c30bd2df69e68309ed0a08"
-"checksum md5 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)" = "79c56d6a0b07f9e19282511c83fc5b086364cbae4ba8c7d5f190c3d9b0425a48"
 "checksum md5 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)" = "c1ad8b18d0b6ae54e03c9fe1f7dea2ee5f8e0115a87611316794be1bc51537f7"
-"checksum memchr 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)" = "148fab2e51b4f1cfc66da2a7c32981d1d3c083a803978268bb11fe4b86925e7a"
+"checksum md5 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)" = "7e6bcd6433cff03a4bfc3d9834d504467db1f1cf6d0ea765d37d330249ed629d"
 "checksum memchr 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)" = "2efc7bc57c883d4a4d6e3246905283d8dae951bb3bd32f49d6ef297f546e1c39"
 "checksum memoffset 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)" = "0f9dc261e2b62d7a622bf416ea3c5245cdd5d9a7fcc428c0d06804dfce1775b3"
 "checksum mio 0.6.16 (registry+https://github.com/rust-lang/crates.io-index)" = "71646331f2619b1026cc302f87a2b8b648d5c6dd6937846a16cc8ce0f347f432"
@@ -1565,24 +1846,23 @@ dependencies = [
 "checksum num-rational 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)" = "4e96f040177bb3da242b5b1ecf3f54b5d5af3efbbfb18608977a5d2767b22f10"
 "checksum num-traits 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)" = "0b3a5d7cc97d6d30d8b9bc8fa19bf45349ffe46241e8816f50f62f6d6aaabee1"
 "checksum num_cpus 1.10.0 (registry+https://github.com/rust-lang/crates.io-index)" = "1a23f0ed30a54abaa0c7e83b1d2d87ada7c3c23078d1d87815af3e3b6385fbba"
+"checksum opaque-debug 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)" = "93f5bb2e8e8dec81642920ccff6b61f1eb94fa3020c5a325c9851ff604152409"
+"checksum ordermap 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)" = "a86ed3f5f244b372d6b1a00b72ef7f8876d0bc6a78a4c9985c53614041512063"
 "checksum owning_ref 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)" = "49a4b8ea2179e6a2e27411d3bca09ca6dd630821cf6894c6c7c8467a8ee7ef13"
 "checksum parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)" = "ab41b4aed082705d1056416ae4468b6ea99d52599ecf3169b00088d43113e337"
 "checksum parking_lot_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)" = "94c8c7923936b28d546dfd14d4472eaf34c99b14e1c973a32b3e6d4eb04298c9"
+"checksum percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)" = "31010dd2e1ac33d5b46a5b413495239882813e0369f8ed8a5e266f173602f831"
+"checksum petgraph 0.4.13 (registry+https://github.com/rust-lang/crates.io-index)" = "9c3659d1ee90221741f65dd128d9998311b0e40c5d3c23a62445938214abce4f"
 "checksum phf 0.7.24 (registry+https://github.com/rust-lang/crates.io-index)" = "b3da44b85f8e8dfaec21adae67f95d93244b2ecf6ad2a692320598dcc8e6dd18"
 "checksum phf_shared 0.7.24 (registry+https://github.com/rust-lang/crates.io-index)" = "234f71a15de2288bcb7e3b6515828d22af7ec8598ee6d24c3b526fa0a80b67a0"
-"checksum postgres 0.15.2 (registry+https://github.com/rust-lang/crates.io-index)" = "115dde90ef51af573580c035857badbece2aa5cde3de1dfb3c932969ca92a6c5"
-"checksum postgres-protocol 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)" = "2487e66455bf88a1b247bf08a3ce7fe5197ac6d67228d920b0ee6a0e97fd7312"
-"checksum postgres-shared 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)" = "ffac35b3e0029b404c24a3b82149b4e904f293e8ca4a327eefa24d3ca50df36f"
+"checksum postgres 0.16.0-rc.1 (registry+https://github.com/rust-lang/crates.io-index)" = "ecd478ee3885e956071eeb6462e477c93c2438ad8a7052388644f8fe7db9d276"
+"checksum postgres-protocol 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)" = "7f8a9ca2034ea1677ffc0ba134234e4beb383a0c6b5d2eda51b7f6951af30058"
 "checksum proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)" = "4d317f9caece796be1980837fd5cb3dfec5613ebdb04ad0956deea83ce168915"
 "checksum prometheus 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)" = "48e3f33ff50a88c73ad8458fa6c22931aa7a6e19bb4a95d62816618c153b3f02"
 "checksum protobuf 2.4.0 (registry+https://github.com/rust-lang/crates.io-index)" = "24d5d73d2b88fddb8b8141f2730d950d88772c940ac4f8f3e93230b9a99d92df"
 "checksum quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)" = "9274b940887ce9addde99c4eee6b5c44cc494b182b97e73dc8ffdcb3397fd3f0"
 "checksum quickcheck 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)" = "3568ae5409428feef71bf062778bf5acfadc3d496b7696afa829f9eef70e17dc"
 "checksum quote 0.6.11 (registry+https://github.com/rust-lang/crates.io-index)" = "cdd8e04bd9c52e0342b406469d494fcb033be4bdbe5c606016defbb1681411e1"
-"checksum r2d2 0.8.3 (registry+https://github.com/rust-lang/crates.io-index)" = "5d746fc8a0dab19ccea7ff73ad535854e90ddb3b4b8cdce953dd5cd0b2e7bd22"
-"checksum r2d2_postgres 0.14.0 (registry+https://github.com/rust-lang/crates.io-index)" = "78c7fe9c0c3d2c298cf262bc3ce4b89cdf0eab620fd9fe759f65b34a1a00fb93"
-"checksum rand 0.3.23 (registry+https://github.com/rust-lang/crates.io-index)" = "64ac302d8f83c0c1974bf758f6b041c6c8ada916fbb44a609158ca8b064cc76c"
-"checksum rand 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)" = "552840b97013b1a26992c11eac34bdd778e464601a4c2054b5f0bff7c6761293"
 "checksum rand 0.6.5 (git+https://github.com/rust-random/rand)" = "<none>"
 "checksum rand_chacha 0.1.1 (git+https://github.com/rust-random/rand)" = "<none>"
 "checksum rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)" = "7a6fdeb83b075e8266dcc8762c22776f6877a63111121f5f8c7411e5be7eed4b"
@@ -1592,39 +1872,47 @@ dependencies = [
 "checksum rand_isaac 0.1.1 (git+https://github.com/rust-random/rand)" = "<none>"
 "checksum rand_jitter 0.1.3 (git+https://github.com/rust-random/rand)" = "<none>"
 "checksum rand_os 0.1.3 (git+https://github.com/rust-random/rand)" = "<none>"
+"checksum rand_os 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)" = "7b75f676a1e053fc562eafbb47838d67c84801e38fc1ba459e8f180deabd5071"
 "checksum rand_pcg 0.1.2 (git+https://github.com/rust-random/rand)" = "<none>"
 "checksum rand_xorshift 0.1.1 (git+https://github.com/rust-random/rand)" = "<none>"
 "checksum rdrand 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)" = "678054eb77286b51581ba43620cc911abf02758c91f93f479767aed0f90458b2"
 "checksum rdrand 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)" = "832945f4b827049315af3c5ce9a8c81f46fe1ffc9680a6748a72bcf9ae5d382e"
 "checksum redox_syscall 0.1.51 (registry+https://github.com/rust-lang/crates.io-index)" = "423e376fffca3dfa06c9e9790a9ccd282fafb3cc6e6397d01dbf64f9bacc6b85"
 "checksum redox_termios 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)" = "7e891cfe48e9100a70a3b6eb652fef28920c117d366339687bd5576160db0f76"
+"checksum redox_users 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)" = "3fe5204c3a17e97dde73f285d49be585df59ed84b50a872baf416e73b62c3828"
 "checksum regex 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)" = "37e7cbbd370869ce2e8dff25c7018702d10b21a20ef7135316f8daecd6c25b7f"
 "checksum regex-syntax 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)" = "8c2f35eedad5295fdf00a63d7d4b238135723f92b434ec06774dad15c7ab0861"
+"checksum rent_to_own 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)" = "05a51ad2b1c5c710fa89e6b1631068dab84ed687bc6a5fe061ad65da3d0c25b2"
 "checksum rust_fast 0.1.0 (git+https://github.com/joyent/rust-fast)" = "<none>"
+"checksum rustc-demangle 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)" = "ccc78bfd5acd7bf3e89cffcf899e5cb1a52d6fafa8dec2739ad70c9577a57288"
 "checksum rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)" = "138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a"
 "checksum ryu 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)" = "eb9e9b8cde282a9fe6a42dd4681319bfb63f121b8a8ee9439c6f4107e58a46f7"
-"checksum safemem 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)" = "e27a8b19b835f7aea908818e871f5cc3a5a186550c30773be987e155e8163d8f"
-"checksum scheduled-thread-pool 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)" = "1a2ff3fc5223829be817806c6441279c676e454cc7da608faf03b0ccc09d3889"
+"checksum scoped_threadpool 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)" = "1d51f5df5af43ab3f1360b429fa5e0152ac5ce8c0bd6485cae490332e96846a8"
 "checksum scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)" = "94258f53601af11e6a49f722422f6e3425c52b06245a5cf9bc09908b174f5e27"
 "checksum semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)" = "1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403"
 "checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)" = "388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3"
 "checksum serde 1.0.88 (registry+https://github.com/rust-lang/crates.io-index)" = "9f301d728f2b94c9a7691c90f07b0b4e8a4517181d9461be94c04bddeb4bd850"
 "checksum serde_derive 1.0.88 (registry+https://github.com/rust-lang/crates.io-index)" = "beed18e6f5175aef3ba670e57c60ef3b1b74d250d962a26604bff4c80e970dd4"
 "checksum serde_json 1.0.38 (registry+https://github.com/rust-lang/crates.io-index)" = "27dce848e7467aa0e2fcaf0a413641499c0b745452aaca1194d24dedde9e13c9"
-"checksum sha2 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)" = "9eb6be24e4c23a84d7184280d2722f7f2731fcdd4a9d886efbfe4413e4847ea0"
+"checksum sha1 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)" = "2579985fda508104f7587689507983eadd6a6e84dd35d6d115361f530916fa0d"
+"checksum sha2 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)" = "7b4d8bfd0e469f417657573d8451fb33d16cfe0989359b93baf3a1ffc639543d"
 "checksum siphasher 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)" = "0b8de496cf83d4ed58b6be86c3a275b8602f6ffe98d3024a869e124147a9a3ac"
 "checksum slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)" = "c111b5bd5695e56cffe5129854aa230b39c93a305372fdbb2668ca2394eea9f8"
 "checksum slog 2.4.1 (registry+https://github.com/rust-lang/crates.io-index)" = "1e1a2eec401952cd7b12a84ea120e2d57281329940c3f93c2bf04f462539508e"
 "checksum slog-bunyan 2.1.1-pre (git+https://github.com/kellymclaughlin/bunyan?branch=build-on-smartos)" = "<none>"
 "checksum slog-json 2.3.0 (registry+https://github.com/rust-lang/crates.io-index)" = "ddc0d2aff1f8f325ef660d9a0eb6e6dcd20b30b3f581a5897f58bf42d061c37a"
+"checksum slog-term 2.4.0 (registry+https://github.com/rust-lang/crates.io-index)" = "5951a808c40f419922ee014c15b6ae1cd34d963538b57d8a4778b9ca3fff1e0b"
 "checksum smallvec 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)" = "c4488ae950c49d403731982257768f48fada354a5203fe81f9bb6f43ca9002be"
-"checksum socket2 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)" = "c4d11a52082057d87cb5caa31ad812f4504b97ab44732cd8359df2e9ff9f48e7"
 "checksum spin 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)" = "ceac490aa12c567115b40b7b7fceca03a6c9d53d5defea066123debc83c5dc1f"
 "checksum stable_deref_trait 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)" = "dba1a27d3efae4351c8051072d619e3ade2820635c3958d826bfea39d59b54c8"
+"checksum state_machine_future 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)" = "530e1d624baae485bce12e6647acb76aafa253346ee8a16751974eed5a24b13d"
 "checksum string 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)" = "b639411d0b9c738748b5397d5ceba08e648f4f1992231aa859af1a017f31f60b"
 "checksum stringprep 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)" = "8ee348cb74b87454fff4b551cbf727025810a004f88aeacae7f85b87f4e9a1c1"
 "checksum strsim 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)" = "bb4f380125926a99e52bc279241539c018323fab05ad6368b56f93d9369ff550"
+"checksum subtle 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)" = "2d67a5a62ba6e01cb2192ff309324cb4875d0c451d55fe2319433abe7a05a8ee"
 "checksum syn 0.15.26 (registry+https://github.com/rust-lang/crates.io-index)" = "f92e629aa1d9c827b2bb8297046c1ccffc57c99b947a680d3ccff1f136a3bee9"
+"checksum synstructure 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)" = "73687139bf99285483c96ac0add482c3776528beac1d97d444f6e91f203a2015"
+"checksum term 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)" = "edd106a334b7657c10b7c540a0106114feadeb4dc314513e97df481d5d966f42"
 "checksum termion 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)" = "689a3bdfaab439fd92bc87df5c4c78417d3cbe537487274e9b0b2dce76e92096"
 "checksum textwrap 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)" = "307686869c93e71f94da64286f9a9524c0f308a9e1c87a583de8e9c9039ad3f6"
 "checksum thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)" = "c6b53e329000edc2b34dbe8545fd20e55a333362d0a321909685a19bd28c3f1b"
@@ -1635,6 +1923,7 @@ dependencies = [
 "checksum tokio-executor 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)" = "30c6dbf2d1ad1de300b393910e8a3aa272b724a400b6531da03eed99e329fbf0"
 "checksum tokio-fs 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)" = "0e9cbbc8a3698b7ab652340f46633364f9eaa928ddaaee79d8b8f356dd79a09d"
 "checksum tokio-io 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)" = "b53aeb9d3f5ccf2ebb29e19788f96987fa1355f8fe45ea193928eaaaf3ae820f"
+"checksum tokio-postgres 0.4.0-rc.2 (registry+https://github.com/rust-lang/crates.io-index)" = "8e256cd39279dcf12a3154f234641ce71127ec9e710f3a0a3587581990f55a2a"
 "checksum tokio-reactor 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)" = "afbcdb0f0d2a1e4c440af82d7bbf0bf91a8a8c0575bcd20c05d15be7e9d3a02f"
 "checksum tokio-sync 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)" = "3742b64166c1ee9121f1921aea5a726098458926a6b732d906ef23b1f3ef6f4f"
 "checksum tokio-tcp 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)" = "1d14b10654be682ac43efee27401d792507e30fd8d26389e1da3b185de2e4119"
@@ -1647,10 +1936,12 @@ dependencies = [
 "checksum ucd-util 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)" = "535c204ee4d8434478593480b8f86ab45ec9aae0e83c568ca81abf0fd0e88f86"
 "checksum unicode-bidi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)" = "49f2bd0c6468a8230e1db229cff8029217cf623c767ea5d60bfbd42729ea54d5"
 "checksum unicode-normalization 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)" = "141339a08b982d942be2ca06ff8b076563cbe223d1befd5450716790d44e2426"
+"checksum unicode-segmentation 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)" = "aa6024fc12ddfd1c6dbc14a80fa2324d4568849869b779f6bd37e5e4c03344d1"
 "checksum unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)" = "882386231c45df4700b275c7ff55b6f3698780a650026380e72dabe76fa46526"
 "checksum unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)" = "fc72304796d0818e357ead4e000d19c9c174ab23dc11093ac919054d20a6a7fc"
+"checksum url 1.7.2 (registry+https://github.com/rust-lang/crates.io-index)" = "dd4e7c0d531266369519a4aa4f399d748bd37043b00bde1e4ff1f60a120b355a"
 "checksum utf8-ranges 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)" = "796f7e48bef87609f7ade7e06495a87d5cd06c7866e6a5cbfceffc558a243737"
-"checksum uuid 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)" = "bcc7e3b898aa6f6c08e5295b6c89258d1331e9ac578cc992fb818759951bdc22"
+"checksum uuid 0.7.4 (registry+https://github.com/rust-lang/crates.io-index)" = "90dbc611eb48397705a6b0f6e917da23ae517e4d127123d2cf7674206627d32a"
 "checksum vec_map 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)" = "05c78687fb1a80548ae3250346c3db86a80a7cdd77bda190189f2d0a0987c81a"
 "checksum void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)" = "6a02e4885ed3bc0f2de90ea6dd45ebcbb66dacffe03547fadbb0eeae2770887d"
 "checksum want 0.0.6 (registry+https://github.com/rust-lang/crates.io-index)" = "797464475f30ddb8830cc529aaaae648d581f99e2036a928877dfde027ddf6b3"
diff --git a/Cargo.toml b/Cargo.toml
index 3e75fe1..f59f9a4 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -12,10 +12,11 @@ clap = "2.32"
 hyper = {version = "0.12.25"}
 lazy_static = "1.3.0"
 md5 = "0.5.0"
-postgres = {version = "0.15.2", features=["with-chrono", "with-serde_json", "with-uuid"]}
+postgres = {version = "0.16.0-rc.1", features=["with-chrono-0_4", "with-serde_json-1", "with-uuid-0_7"]}
 prometheus = "0.5.0"
-r2d2 = "0.8.3"
-r2d2_postgres = "0.14.0"
+cueball = { git = "https://github.com/joyent/rust-cueball" }
+cueball-postgres-connection = { git = "https://github.com/joyent/rust-cueball-postgres-connection" }
+cueball-static-resolver = { git = "https://github.com/joyent/rust-cueball-static-resolver" }
 rust_fast = { git = "https://github.com/joyent/rust-fast" }
 serde = "1.0.84"
 serde_derive = "1.0.84"
@@ -23,7 +24,11 @@ serde_json = "1.0.36"
 slog = { version = "2.4.1", features = [ "max_level_trace" ] }
 slog-bunyan = { git = "https://github.com/kellymclaughlin/bunyan", branch = "build-on-smartos" }
 tokio = "0.1.14"
-uuid = { version = "0.5", features = ["serde", "v4"] }
+uuid = { version = "0.7", features = ["serde", "v4"] }
 
 [patch.crates-io]
 rand = { git = 'https://github.com/rust-random/rand' }
+
+[dev-dependencies]
+slog-term = "2.4.0"
+url = "1.7.2"
\ No newline at end of file
diff --git a/etc/postgres/create-ephemeral-db.sh b/etc/postgres/create-ephemeral-db.sh
new file mode 100755
index 0000000..de1e9b3
--- /dev/null
+++ b/etc/postgres/create-ephemeral-db.sh
@@ -0,0 +1,24 @@
+#!/usr/bin/env bash
+
+set -e
+
+export PG_TMP=$(pg_tmp -w 5 -t -o "--client-min-messages=warning \
+    --log-min-duration-statement=500 --log-connections=off --log-disconnections=off")
+export BASEDIR=$(cd `dirname "$0"` && pwd)
+
+setup_database() {
+    psql $PG_TMP -c 'CREATE ROLE postgres SUPERUSER LOGIN;'
+    psql -U postgres $PG_TMP -c 'CREATE EXTENSION "pgcrypto"; CREATE EXTENSION "uuid-ossp"; CREATE EXTENSION "hstore"'
+    psql -U postgres $PG_TMP -f $BASEDIR/schema.sql 2>&1
+    psql -U postgres $PG_TMP -c 'ALTER DATABASE test SET timezone TO "UTC";'
+
+}
+
+main() {
+
+    output=`setup_database` \
+        || echo $output 1>&2
+}
+
+main
+echo $PG_TMP
diff --git a/etc/postgres/schema.sql b/etc/postgres/schema.sql
new file mode 100644
index 0000000..513207a
--- /dev/null
+++ b/etc/postgres/schema.sql
@@ -0,0 +1,119 @@
+BEGIN;
+
+CREATE SCHEMA manta_bucket_0;
+CREATE SCHEMA manta_bucket_1;
+
+
+CREATE TABLE manta_bucket_0.manta_bucket (
+    id uuid NOT NULL,
+    name text NOT NULL,
+    owner uuid NOT NULL,
+    created timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
+
+    PRIMARY KEY (owner, name)
+);
+
+CREATE TABLE manta_bucket_0.manta_bucket_deleted_bucket (
+    id uuid NOT NULL,
+    name text NOT NULL,
+    owner uuid NOT NULL,
+    created timestamp with time zone NOT NULL,
+    deleted_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
+);
+
+CREATE TABLE manta_bucket_0.manta_bucket_deleted_object (
+    id uuid NOT NULL,
+    name text NOT NULL,
+    owner uuid NOT NULL,
+    bucket_id uuid NOT NULL,
+    created timestamp with time zone NOT NULL,
+    modified timestamp with time zone NOT NULL,
+    creator uuid,
+    content_length bigint,
+    content_md5 bytea,
+    content_type text,
+    headers hstore,
+    sharks hstore,
+    properties jsonb,
+    deleted_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
+);
+
+CREATE TABLE manta_bucket_0.manta_bucket_object (
+    id uuid NOT NULL,
+    name text NOT NULL,
+    owner uuid NOT NULL,
+    bucket_id uuid NOT NULL,
+    created timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
+    modified timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
+    creator uuid,
+    content_length bigint,
+    content_md5 bytea,
+    content_type text,
+    headers hstore,
+    sharks hstore,
+    properties jsonb,
+
+    PRIMARY KEY (owner, bucket_id, name)
+);
+
+CREATE INDEX ON manta_bucket_0.manta_bucket_deleted_object USING btree (deleted_at);
+
+CREATE INDEX ON manta_bucket_0.manta_bucket_deleted_object USING btree (id);
+
+CREATE TABLE manta_bucket_1.manta_bucket (
+    id uuid NOT NULL,
+    name text NOT NULL,
+    owner uuid NOT NULL,
+    created timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
+
+    PRIMARY KEY (owner, name)
+);
+
+CREATE TABLE manta_bucket_1.manta_bucket_deleted_bucket (
+    id uuid NOT NULL,
+    name text NOT NULL,
+    owner uuid NOT NULL,
+    created timestamp with time zone NOT NULL,
+    deleted_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
+);
+
+CREATE TABLE manta_bucket_1.manta_bucket_deleted_object (
+    id uuid NOT NULL,
+    name text NOT NULL,
+    owner uuid NOT NULL,
+    bucket_id uuid NOT NULL,
+    created timestamp with time zone NOT NULL,
+    modified timestamp with time zone NOT NULL,
+    creator uuid,
+    content_length bigint,
+    content_md5 bytea,
+    content_type text,
+    headers hstore,
+    sharks hstore,
+    properties jsonb,
+    deleted_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
+);
+
+CREATE TABLE manta_bucket_1.manta_bucket_object (
+    id uuid NOT NULL,
+    name text NOT NULL,
+    owner uuid NOT NULL,
+    bucket_id uuid NOT NULL,
+    created timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
+    modified timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
+    creator uuid,
+    content_length bigint,
+    content_md5 bytea,
+    content_type text,
+    headers hstore,
+    sharks hstore,
+    properties jsonb,
+
+    PRIMARY KEY (owner, bucket_id, name)
+);
+
+CREATE INDEX ON manta_bucket_1.manta_bucket_deleted_object USING btree (deleted_at);
+
+CREATE INDEX ON manta_bucket_1.manta_bucket_deleted_object USING btree (id);
+
+COMMIT;
diff --git a/src/bucket.rs b/src/bucket.rs
index fa6f753..1ccffaa 100644
--- a/src/bucket.rs
+++ b/src/bucket.rs
@@ -6,61 +6,106 @@ use std::io::Error as IOError;
 use std::io::ErrorKind as IOErrorKind;
 
 use chrono;
-use r2d2::Pool;
-use postgres::Result as PostgresResult;
-use postgres::rows::Rows;
-use r2d2_postgres::PostgresConnectionManager;
+use cueball::connection_pool::ConnectionPool;
+use cueball::backend::Backend;
+use cueball_static_resolver::StaticIpResolver;
+use cueball_postgres_connection::PostgresConnection;
+use rust_fast::protocol::{FastMessage, FastMessageData};
 use serde_derive::{Deserialize, Serialize};
 use serde_json::{json, Value};
 use slog::{Logger, debug};
 use uuid::Uuid;
 
-use rust_fast::protocol::{FastMessage, FastMessageData};
+use crate::util::Rows;
 
 type Timestamptz = chrono::DateTime<chrono::Utc>;
 
 #[derive(Serialize, Deserialize)]
 pub struct GetBucketPayload {
-    owner     : Uuid,
-    name      : String,
-    vnode     : u64
+    pub owner     : Uuid,
+    pub name      : String,
+    pub vnode     : u64
 }
 
 type DeleteBucketPayload = GetBucketPayload;
 
 #[derive(Serialize, Deserialize, Debug)]
 pub struct BucketResponse {
-    id      : Uuid,
-    owner   : Uuid,
-    name    : String ,
-    created : Timestamptz
+    pub id      : Uuid,
+    pub owner   : Uuid,
+    pub name    : String ,
+    pub created : Timestamptz
 }
 
 #[derive(Serialize, Deserialize)]
 pub struct PutBucketPayload {
-    owner : Uuid,
-    name  : String,
-    vnode : u64
+    pub owner : Uuid,
+    pub name  : String,
+    pub vnode : u64
 }
 
 #[derive(Serialize, Deserialize)]
 pub struct ListBucketsPayload {
-    owner    : Uuid,
-    vnode    : u64,
-    prefix   : String,
-    order_by : String,
-    limit    : u64,
-    offset   : u64
+    pub owner    : Uuid,
+    pub vnode    : u64,
+    pub prefix   : String,
+    pub order_by : String,
+    pub limit    : u64,
+    pub offset   : u64
+}
+
+#[derive(Debug, Default, Serialize, Deserialize, PartialEq)]
+pub struct BucketNotFoundError {
+    pub name    : String,
+    pub message : String
+}
+
+impl BucketNotFoundError {
+    pub fn new() -> Self {
+        BucketNotFoundError {
+            name: "BucketNotFoundError".into(),
+            message: "requested bucket not found".into()
+        }
+    }
+}
+
+#[derive(Debug, Default, Serialize, Deserialize, PartialEq)]
+pub struct BucketAlreadyExistsError {
+    pub name    : String,
+    pub message : String
+}
+
+impl BucketAlreadyExistsError {
+    pub fn new() -> Self {
+        BucketAlreadyExistsError {
+            name: "BucketAlreadyExistsError".into(),
+            message: "requested bucket already exists".into()
+        }
+    }
 }
 
 fn array_wrap(v: Value) -> Value {
     Value::Array(vec![v])
 }
 
+pub fn bucket_not_found() -> Value {
+    // The data for this JSON conversion is locally controlled
+    // so unwrapping the result is ok here.
+    serde_json::to_value(BucketNotFoundError::new())
+        .expect("failed to encode a BucketNotFoundError")
+}
+
+pub fn bucket_already_exists() -> Value {
+    // The data for this JSON conversion is locally controlled
+    // so unwrapping the result is ok here.
+    serde_json::to_value(BucketAlreadyExistsError::new())
+        .expect("failed to encode a BucketAlreadyExistsError")
+}
+
 pub fn get_handler(msg_id: u32,
-                   args: &Vec<Value>,
+                   args: &[Value],
                    mut response: Vec<FastMessage>,
-                   pool: &Pool<PostgresConnectionManager>,
+                   pool: &ConnectionPool<PostgresConnection, StaticIpResolver, impl FnMut(&Backend) -> PostgresConnection + Send + 'static>,
                    log: &Logger) -> Result<Vec<FastMessage>, IOError> {
     debug!(log, "handling getbucket function request");
 
@@ -90,11 +135,8 @@ pub fn get_handler(msg_id: u32,
                     Ok(response)
                 },
                 None => {
-                    let value = json!({
-                        "name": "BucketNotFoundError",
-                        "message": "requested bucket not found"
-                    });
-                    let err_msg = FastMessage::error(msg_id, FastMessageData::new(method, value));
+
+                    let err_msg = FastMessage::error(msg_id, FastMessageData::new(method, bucket_not_found()));
                     response.push(err_msg);
                     Ok(response)
                 }
@@ -108,9 +150,9 @@ pub fn get_handler(msg_id: u32,
 }
 
 pub fn list_handler(msg_id: u32,
-                    args: &Vec<Value>,
+                    args: &[Value],
                     mut response: Vec<FastMessage>,
-                    pool: &Pool<PostgresConnectionManager>,
+                    pool: &ConnectionPool<PostgresConnection, StaticIpResolver, impl FnMut(&Backend) -> PostgresConnection + Send + 'static>,
                     log: &Logger) -> Result<Vec<FastMessage>, IOError> {
     debug!(log, "handling listbuckets function request");
 
@@ -141,12 +183,13 @@ pub fn list_handler(msg_id: u32,
 
     // Make db request and form response
     // TODO: make this call safe
-    let conn = pool.get().unwrap();
-    let txn = conn.transaction().unwrap();
-    let list_sql = list_sql(&payload.vnode, &payload.limit,
-        &payload.offset, &payload.order_by);
+    let mut conn = pool.claim().unwrap();
 
-    for row in txn.query(&list_sql, &[&payload.owner, &prefix]).unwrap().iter() {
+    let mut txn = (*conn).transaction().unwrap();
+    let list_sql = list_sql(payload.vnode, payload.limit,
+        payload.offset, &payload.order_by);
+
+    for row in txn.query(list_sql.as_str(), &[&payload.owner, &prefix]).unwrap().iter() {
         let resp = BucketResponse {
             id: row.get(0),
             owner: row.get(1),
@@ -163,9 +206,9 @@ pub fn list_handler(msg_id: u32,
 }
 
 pub fn put_handler(msg_id: u32,
-                   args: &Vec<Value>,
+                   args: &[Value],
                    mut response: Vec<FastMessage>,
-                   pool: &Pool<PostgresConnectionManager>,
+                   pool: &ConnectionPool<PostgresConnection, StaticIpResolver, impl FnMut(&Backend) -> PostgresConnection + Send + 'static>,
                    log: &Logger) -> Result<Vec<FastMessage>, IOError> {
     debug!(log, "handling putbucket function request");
 
@@ -195,11 +238,7 @@ pub fn put_handler(msg_id: u32,
                     Ok(response)
                 },
                 None => {
-                    let value = json!({
-                        "name": "BucketAlreadyExistsError",
-                        "message": "requested bucket already exists"
-                    });
-                    let err_msg = FastMessage::error(msg_id, FastMessageData::new(method, value));
+                    let err_msg = FastMessage::error(msg_id, FastMessageData::new(method, bucket_already_exists()));
                     response.push(err_msg);
                     Ok(response)
                 }
@@ -210,9 +249,9 @@ pub fn put_handler(msg_id: u32,
 }
 
 pub fn delete_handler(msg_id: u32,
-                      args: &Vec<Value>,
+                      args: &[Value],
                       mut response: Vec<FastMessage>,
-                      pool: &Pool<PostgresConnectionManager>,
+                      pool: &ConnectionPool<PostgresConnection, StaticIpResolver, impl FnMut(&Backend) -> PostgresConnection + Send + 'static>,
                       log: &Logger) -> Result<Vec<FastMessage>, IOError> {
     debug!(log, "handling putbucket function request");
 
@@ -241,11 +280,7 @@ pub fn delete_handler(msg_id: u32,
                 let msg = FastMessage::data(msg_id, FastMessageData::new(method, value));
                 Ok(msg)
             } else {
-                let value = json!({
-                    "name": "BucketNotFoundError",
-                    "message": "requested bucket not found"
-                });
-                let err_msg = FastMessage::error(msg_id, FastMessageData::new(method, value));
+                let err_msg = FastMessage::error(msg_id, FastMessageData::new(method, bucket_not_found()));
                 Ok(err_msg)
             }
         })
@@ -274,11 +309,12 @@ fn other_error(msg: &str) -> IOError {
 }
 
 
-fn response(rows: Rows) -> PostgresResult<Option<BucketResponse>> {
-    if rows.len() == 0 {
+fn response(rows: Rows) -> Result<Option<BucketResponse>, IOError> {
+    if rows.is_empty() {
         Ok(None)
     } else if rows.len() == 1 {
-        let row = rows.get(0);
+        let row = &rows[0];
+
         //TODO: Valdate # of cols
         let resp = BucketResponse {
             id             : row.get(0),
@@ -290,11 +326,11 @@ fn response(rows: Rows) -> PostgresResult<Option<BucketResponse>> {
     } else {
         let err = format!("Get query found {} results, but expected only 1.",
                           rows.len());
-        Err(IOError::new(IOErrorKind::Other, err).into())
+        Err(IOError::new(IOErrorKind::Other, err))
     }
 }
 
-fn get_sql(vnode: &u64) -> String {
+fn get_sql(vnode: u64) -> String {
     ["SELECT id, owner, name, created \
       FROM manta_bucket_",
      &vnode.to_string(),
@@ -302,7 +338,7 @@ fn get_sql(vnode: &u64) -> String {
        AND name = $2"].concat()
 }
 
-fn put_sql(vnode: &u64) -> String {
+fn put_sql(vnode: u64) -> String {
     ["INSERT INTO manta_bucket_",
      &vnode.to_string(),
      &".manta_bucket \
@@ -312,7 +348,7 @@ fn put_sql(vnode: &u64) -> String {
        RETURNING id, owner, name, created"].concat()
 }
 
-fn list_sql(vnode: &u64, limit: &u64, offset: &u64, order_by: &str) -> String {
+fn list_sql(vnode: u64, limit: u64, offset: u64, order_by: &str) -> String {
     format!("SELECT id, owner, name, created
         FROM manta_bucket_{}.manta_bucket
         WHERE owner = $1 AND name like $2
@@ -322,41 +358,46 @@ fn list_sql(vnode: &u64, limit: &u64, offset: &u64, order_by: &str) -> String {
         vnode, order_by, limit, offset)
 }
 
-fn get(payload: GetBucketPayload, pool: &Pool<PostgresConnectionManager>)
-           -> PostgresResult<Option<BucketResponse>>
+fn get(payload: GetBucketPayload,
+       pool: &ConnectionPool<PostgresConnection, StaticIpResolver, impl FnMut(&Backend) -> PostgresConnection + Send + 'static>)
+       -> Result<Option<BucketResponse>, IOError>
 {
-    let conn = pool.get().unwrap();
-    let sql = get_sql(&payload.vnode);
-    conn.query(&sql, &[&payload.owner,
-                       &payload.name])
-        .and_then(|rows| response(rows))
-        .map_err(|e| e)
+    let mut conn = pool.claim().unwrap();
+    let sql = get_sql(payload.vnode);
+    (*conn).query(sql.as_str(), &[&payload.owner,
+                                  &payload.name])
+        .map_err(|e| {
+           let pg_err = format!("{}", e);
+            IOError::new(IOErrorKind::Other, pg_err)
+        })
+        .and_then(response)
 }
 
 
-fn put(payload: PutBucketPayload, pool: &Pool<PostgresConnectionManager>)
-           -> PostgresResult<Option<BucketResponse>>
+fn put(payload: PutBucketPayload,
+       pool: &ConnectionPool<PostgresConnection, StaticIpResolver, impl FnMut(&Backend) -> PostgresConnection + Send + 'static>)
+       -> Result<Option<BucketResponse>, IOError>
 {
-    let conn = pool.get().unwrap();
-    let txn = conn.transaction().unwrap();
-    let put_sql = put_sql(&payload.vnode);
+    let mut conn = pool.claim().unwrap();
+    let mut txn = (*conn).transaction().unwrap();
+    let put_sql = put_sql(payload.vnode);
 
     let insert_result =
-        txn.query(&put_sql, &[&Uuid::new_v4(),
-                              &payload.owner,
-                              &payload.name])
-        .and_then(|rows| response(rows))
+        txn.query(put_sql.as_str(), &[&Uuid::new_v4(),
+                                      &payload.owner,
+                                      &payload.name])
         .map_err(|e| {
            let pg_err = format!("{}", e);
-            IOError::new(IOErrorKind::Other, pg_err).into()
-        });
+            IOError::new(IOErrorKind::Other, pg_err)
+        })
+        .and_then(response);
 
-    let _commit_result = txn.commit().unwrap();
+    txn.commit().unwrap();
 
     insert_result
 }
 
-fn insert_delete_table_sql(vnode: &u64) -> String {
+fn insert_delete_table_sql(vnode: u64) -> String {
     let vnode_str = vnode.to_string();
     ["INSERT INTO manta_bucket_",
      &vnode_str,
@@ -370,7 +411,7 @@ fn insert_delete_table_sql(vnode: &u64) -> String {
        AND name = $2"].concat()
 }
 
-fn delete_sql(vnode: &u64) -> String {
+fn delete_sql(vnode: u64) -> String {
     ["DELETE FROM manta_bucket_",
      &vnode.to_string(),
      &".manta_bucket \
@@ -378,26 +419,26 @@ fn delete_sql(vnode: &u64) -> String {
        AND name = $2"].concat()
 }
 
-fn delete(payload: DeleteBucketPayload, pool: &Pool<PostgresConnectionManager>)
-          -> PostgresResult<u64>
+fn delete(payload: DeleteBucketPayload,
+          pool: &ConnectionPool<PostgresConnection, StaticIpResolver, impl FnMut(&Backend) -> PostgresConnection + Send + 'static>)
+          -> Result<u64, IOError>
 {
-    let conn = pool.get().unwrap();
-    let txn = conn.transaction().unwrap();
-    let move_sql = insert_delete_table_sql(&payload.vnode);
-    let delete_sql = delete_sql(&payload.vnode);
-    let result = txn.execute(&move_sql, &[&payload.owner,
-                                          &payload.name])
+    let mut conn = pool.claim().unwrap();
+    let mut txn = (*conn).transaction().unwrap();
+    let move_sql = insert_delete_table_sql(payload.vnode);
+    let delete_sql = delete_sql(payload.vnode);
+    txn.execute(move_sql.as_str(), &[&payload.owner,
+                                     &payload.name])
         .and_then(|_moved_rows| {
-            txn.execute(&delete_sql, &[&payload.owner,
-                                       &payload.name])
+            txn.execute(delete_sql.as_str(), &[&payload.owner,
+                                               &payload.name])
         })
         .and_then(|row_count| {
-            let _commit_result = txn.commit().unwrap();
+            txn.commit().unwrap();
             Ok(row_count)
         })
         .map_err(|e| {
             let pg_err = format!("{}", e);
-            IOError::new(IOErrorKind::Other, pg_err).into()
-        });
-    result
+            IOError::new(IOErrorKind::Other, pg_err)
+        })
 }
diff --git a/src/lib.rs b/src/lib.rs
new file mode 100644
index 0000000..03f333e
--- /dev/null
+++ b/src/lib.rs
@@ -0,0 +1,59 @@
+/*
+ * Copyright 2019 Joyent, Inc.
+ */
+
+pub mod bucket;
+pub mod metrics;
+pub mod object;
+pub mod opts;
+
+pub mod util {
+    use std::io::{Error, ErrorKind};
+
+    use cueball::connection_pool::ConnectionPool;
+    use cueball::backend::Backend;
+    use cueball_postgres_connection::PostgresConnection;
+    use cueball_static_resolver::StaticIpResolver;
+    use postgres::error::Error as PGError;
+    use postgres::row::Row;
+    use rust_fast::protocol::FastMessage;
+    use serde_json::Value;
+    use slog::Logger;
+
+    use crate::bucket;
+    use crate::metrics;
+    use crate::object;
+
+    pub type Rows = Vec<Row>;
+    pub type PostgresResult<T> = Result<T, PGError>;
+
+    pub fn other_error(msg: &str) -> Error {
+        Error::new(ErrorKind::Other, String::from(msg))
+    }
+
+    pub fn msg_handler(msg: &FastMessage,
+                       pool: &ConnectionPool<PostgresConnection, StaticIpResolver, impl FnMut(&Backend) -> PostgresConnection + Send + 'static>,
+                       log: &Logger) -> Result<Vec<FastMessage>, Error>
+    {
+        let response: Vec<FastMessage> = vec![];
+
+        metrics::INCOMING_REQUEST_COUNTER.inc();
+
+        match msg.data.d {
+            Value::Array(ref args) => {
+                match msg.data.m.name.as_str() {
+                    "getobject"    => object::get_handler(msg.id, &args, response, &pool, &log),
+                    "putobject"    => object::put_handler(msg.id, &args, response, &pool, &log),
+                    "deleteobject" => object::delete_handler(msg.id, &args, response, &pool, &log),
+                    "listobjects"  => object::list_handler(msg.id, &args, response, &pool, &log),
+                    "getbucket"    => bucket::get_handler(msg.id, &args, response, &pool, &log),
+                    "putbucket"    => bucket::put_handler(msg.id, &args, response, &pool, &log),
+                    "deletebucket" => bucket::delete_handler(msg.id, &args, response, &pool, &log),
+                    "listbuckets"  => bucket::list_handler(msg.id, &args, response, &pool, &log),
+                    _ => Err(Error::new(ErrorKind::Other, format!("Unsupported functon: {}", msg.data.m.name)))
+                }
+            }
+            _ => Err(other_error("Expected JSON array"))
+        }
+    }
+}
diff --git a/src/main.rs b/src/main.rs
index c59924b..cb77b26 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -2,61 +2,30 @@
  * Copyright 2019 Joyent, Inc.
  */
 
-mod bucket;
-mod metrics;
-mod object;
-mod opts;
-
-use std::io::{Error, ErrorKind};
-use std::net::SocketAddr;
+use std::net::{IpAddr, Ipv4Addr, SocketAddr};
 use std::sync::Mutex;
 use std::thread;
 
 use clap::{crate_version, crate_name, value_t};
-use r2d2::Pool;
-use r2d2_postgres::{TlsMode, PostgresConnectionManager};
-use serde_json::Value;
+use cueball::connection_pool::ConnectionPool;
+use cueball::connection_pool::types::ConnectionPoolOptions;
+use cueball_static_resolver::StaticIpResolver;
+use cueball_postgres_connection::{PostgresConnection, PostgresConnectionConfig};
 use slog::{Drain, Level, LevelFilter, Logger, o};
 use tokio::net::TcpListener;
 use tokio::prelude::*;
-use rust_fast::protocol::FastMessage;
 use rust_fast::server;
-use slog::{error, info, trace};
-
-fn other_error(msg: &str) -> Error {
-    Error::new(ErrorKind::Other, String::from(msg))
-}
-
-fn msg_handler(msg: &FastMessage,
-               pool: &Pool<PostgresConnectionManager>,
-               log: &Logger) -> Result<Vec<FastMessage>, Error> {
-    let response: Vec<FastMessage> = vec![];
-
-    metrics::INCOMING_REQUEST_COUNTER.inc();
-
-    match msg.data.d {
-        Value::Array(ref args) => {
-            match msg.data.m.name.as_str() {
-                "getobject"    => object::get_handler(msg.id, &args, response, &pool, &log),
-                "putobject"    => object::put_handler(msg.id, &args, response, &pool, &log),
-                "deleteobject" => object::delete_handler(msg.id, &args, response, &pool, &log),
-                "listobjects"  => object::list_handler(msg.id, &args, response, &pool, &log),
-                "getbucket"    => bucket::get_handler(msg.id, &args, response, &pool, &log),
-                "putbucket"    => bucket::put_handler(msg.id, &args, response, &pool, &log),
-                "deletebucket" => bucket::delete_handler(msg.id, &args, response, &pool, &log),
-                "listbuckets"  => bucket::list_handler(msg.id, &args, response, &pool, &log),
-                _ => Err(Error::new(ErrorKind::Other, format!("Unsupported functon: {}", msg.data.m.name)))
-            }
-        }
-        _ => Err(other_error("Expected JSON array"))
-    }
-}
+use slog::{error, info};
 
 fn main() {
-    let matches = opts::parse(crate_name!());
-
-    let pg_url = matches.value_of("pg_url")
-        .unwrap_or("postgresql://postgres@localhost:5432/test");
+    let matches = boray::opts::parse(crate_name!());
+
+    let pg_ip = value_t!(matches, "pg ip", IpAddr)
+        .unwrap_or_else(|_| IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)));
+    let pg_port = value_t!(matches, "pg port", u16)
+        .unwrap_or(5432);
+    let pg_db = matches.value_of("pg database")
+        .unwrap_or("moray");
     let listen_address = matches.value_of("address")
         .unwrap_or("127.0.0.1");
     let listen_port = value_t!(matches, "port", u32)
@@ -89,15 +58,39 @@ fn main() {
     // Configure and start metrics server
     let metrics_log = root_log.clone();
     let metrics_address = metrics_address_str.to_owned();
-    thread::spawn(move || metrics::start_server(metrics_address,
-                                                metrics_port,
-                                                metrics_log));
+    thread::spawn(move || boray::metrics::start_server(metrics_address,
+                                                       metrics_port,
+                                                       metrics_log));
 
-    trace!(root_log, "postgres connection pool url: {}", pg_url);
     info!(root_log, "establishing postgres connection pool");
-    let manager = PostgresConnectionManager::new(pg_url, TlsMode::None)
-        .expect("Failed to create pg connection manager");
-    let pool = Pool::new(manager).expect("Failed to create pg connection pool");
+    let user = "postgres";
+    let application_name = "boray";
+    let pg_config = PostgresConnectionConfig {
+        user: Some(user.into()),
+        password: None,
+        host: None,
+        port: None,
+        database: Some(pg_db.into()),
+        application_name: Some(application_name.into())
+    };
+
+    let connection_creator = PostgresConnection::connection_creator(pg_config);
+    let pool_opts = ConnectionPoolOptions {
+        maximum: 5,
+        claim_timeout: None,
+        log: root_log.clone(),
+        rebalancer_action_delay: None
+    };
+
+    let primary_backend = (pg_ip, pg_port);
+    let resolver = StaticIpResolver::new(vec![primary_backend]);
+
+    let pool = ConnectionPool::new(
+        pool_opts,
+        resolver,
+        connection_creator
+    );
+
     info!(root_log, "established postgres connection pool");
 
     let addr = [listen_address, &":", &listen_port.to_string()].concat();
@@ -118,7 +111,7 @@ fn main() {
                     let pool_clone = pool.clone();
                     let task = server::make_task(
                         socket,
-                        move |a, c| msg_handler(a, &pool_clone, c),
+                        move |a, c| boray::util::msg_handler(a, &pool_clone, c),
                         &process_log,
                     );
                     tokio::spawn(task);
diff --git a/src/object.rs b/src/object.rs
index be80eca..9f6ccee 100644
--- a/src/object.rs
+++ b/src/object.rs
@@ -8,75 +8,98 @@ use std::io::ErrorKind as IOErrorKind;
 
 use base64;
 use chrono;
-use postgres::Result as PostgresResult;
-use postgres::rows::Rows;
-use r2d2::Pool;
-use r2d2_postgres::PostgresConnectionManager;
+use cueball::connection_pool::ConnectionPool;
+use cueball::backend::Backend;
+use cueball_static_resolver::StaticIpResolver;
+use cueball_postgres_connection::PostgresConnection;
+use rust_fast::protocol::{FastMessage, FastMessageData};
 use serde_derive::{Deserialize, Serialize};
 use serde_json::{Value, json};
 use slog::{Logger, debug};
 use uuid::Uuid;
 
-use rust_fast::protocol::{FastMessage, FastMessageData};
+use crate::util::Rows;
 
 type Hstore = HashMap<String, Option<String>>;
 type Timestamptz = chrono::DateTime<chrono::Utc>;
 
 #[derive(Debug, Serialize, Deserialize)]
 pub struct GetObjectPayload {
-    owner     : Uuid,
-    bucket_id : Uuid,
-    name      : String,
-    vnode     : u64
+    pub owner     : Uuid,
+    pub bucket_id : Uuid,
+    pub name      : String,
+    pub vnode     : u64
 }
 
 type DeleteObjectPayload = GetObjectPayload;
 
 #[derive(Debug, Serialize, Deserialize)]
 pub struct ObjectResponse {
-    id             : Uuid,
-    owner          : Uuid,
-    bucket_id      : Uuid,
-    name           : String,
-    created        : Timestamptz,
-    modified       : Timestamptz,
-    content_length : i64,
-    content_md5    : String,
-    content_type   : String,
-    headers        : Hstore,
-    sharks         : Hstore,
-    properties     : Option<Value>
+    pub id             : Uuid,
+    pub owner          : Uuid,
+    pub bucket_id      : Uuid,
+    pub name           : String,
+    pub created        : Timestamptz,
+    pub modified       : Timestamptz,
+    pub content_length : i64,
+    pub content_md5    : String,
+    pub content_type   : String,
+    pub headers        : Hstore,
+    pub sharks         : Hstore,
+    pub properties     : Option<Value>
 }
 
 #[derive(Debug, Serialize, Deserialize)]
 pub struct PutObjectPayload {
-    owner          : Uuid,
-    bucket_id      : Uuid,
-    name           : String,
-    vnode          : u64,
-    content_length : i64,
-    content_md5    : String,
-    content_type   : String,
-    headers        : Hstore,
-    sharks         : Hstore,
-    properties     : Option<Value>
+    pub owner          : Uuid,
+    pub bucket_id      : Uuid,
+    pub name           : String,
+    pub vnode          : u64,
+    pub content_length : i64,
+    pub content_md5    : String,
+    pub content_type   : String,
+    pub headers        : Hstore,
+    pub sharks         : Hstore,
+    pub properties     : Option<Value>
 }
 
 #[derive(Debug, Serialize, Deserialize)]
 pub struct ListObjectsPayload {
-    owner     : Uuid,
-    bucket_id : Uuid,
-    vnode     : u64,
-    prefix    : String,
-    order_by  : String,
-    limit     : u64,
-    offset    : u64
+    pub owner     : Uuid,
+    pub bucket_id : Uuid,
+    pub vnode     : u64,
+    pub prefix    : String,
+    pub order_by  : String,
+    pub limit     : u64,
+    pub offset    : u64
+}
+
+#[derive(Debug, Default, Serialize, Deserialize, PartialEq)]
+pub struct ObjectNotFoundError {
+    pub name    : String,
+    pub message : String
+}
+
+impl ObjectNotFoundError {
+    pub fn new() -> Self {
+        ObjectNotFoundError {
+            name: "ObjectNotFoundError".into(),
+            message: "requested object not found".into()
+        }
+    }
+}
+
+fn object_not_found() -> Value {
+    // The data for this JSON conversion is locally controlled
+    // so unwrapping the result is ok here.
+    serde_json::to_value(ObjectNotFoundError::new())
+        .expect("failed to encode a BucketNotFound Error")
 }
 
 pub fn get_handler(msg_id: u32,
-                      args: &Vec<Value>,
-                      mut response: Vec<FastMessage>,
-                      pool: &Pool<PostgresConnectionManager>,
+                   args: &[Value],
+                   mut response: Vec<FastMessage>,
+                   pool: &ConnectionPool<PostgresConnection, StaticIpResolver, impl FnMut(&Backend) -> PostgresConnection + Send + 'static>,
                       log: &Logger) -> Result<Vec<FastMessage>, IOError> {
     debug!(log, "handling getobject function request");
 
@@ -105,11 +128,7 @@ pub fn get_handler(msg_id: u32,
                     Ok(response)
                 },
                 None => {
-                    let value = json!({
-                        "name": "ObjectNotFoundError",
-                        "message": "requested object not found"
-                    });
-                    let err_msg = FastMessage::error(msg_id, FastMessageData::new(method, value));
+                    let err_msg = FastMessage::error(msg_id, FastMessageData::new(method, object_not_found()));
                     response.push(err_msg);
                     Ok(response)
                 }
@@ -123,9 +142,9 @@ pub fn get_handler(msg_id: u32,
 }
 
 pub fn list_handler(msg_id: u32,
-                    args: &Vec<Value>,
+                    args: &[Value],
                     mut response: Vec<FastMessage>,
-                    pool: &Pool<PostgresConnectionManager>,
+                    pool: &ConnectionPool<PostgresConnection, StaticIpResolver, impl FnMut(&Backend) -> PostgresConnection + Send + 'static>,
                     log: &Logger) -> Result<Vec<FastMessage>, IOError> {
     debug!(log, "handling listobjects function request");
 
@@ -156,12 +175,12 @@ pub fn list_handler(msg_id: u32,
 
     // Make db request and form response
     // TODO: make this call safe
-    let conn = pool.get().unwrap();
-    let txn = conn.transaction().unwrap();
-    let list_sql = list_sql(&payload.vnode, &payload.limit, &payload.offset,
+    let mut conn = pool.claim().unwrap();
+    let mut txn = (*conn).transaction().unwrap();
+    let list_sql = list_sql(payload.vnode, payload.limit, payload.offset,
         &payload.order_by);
 
-    for row in txn.query(&list_sql, &[&payload.owner, &payload.bucket_id, &prefix]).unwrap().iter() {
+    for row in txn.query(list_sql.as_str(), &[&payload.owner, &payload.bucket_id, &prefix]).unwrap().iter() {
         let content_md5_bytes: Vec<u8> = row.get(7);
         let content_md5 = base64::encode(&content_md5_bytes);
         let resp = ObjectResponse {
@@ -172,7 +191,7 @@ pub fn list_handler(msg_id: u32,
             created        : row.get(4),
             modified       : row.get(5),
             content_length : row.get(6),
-            content_md5    : content_md5,
+            content_md5,
             content_type   : row.get(8),
             headers        : row.get(9),
             sharks         : row.get(10),
@@ -188,9 +207,9 @@ pub fn list_handler(msg_id: u32,
 }
 
 pub fn put_handler(msg_id: u32,
-                   args: &Vec<Value>,
+                   args: &[Value],
                    mut response: Vec<FastMessage>,
-                   pool: &Pool<PostgresConnectionManager>,
+                   pool: &ConnectionPool<PostgresConnection, StaticIpResolver, impl FnMut(&Backend) -> PostgresConnection + Send + 'static>,
                    log: &Logger) -> Result<Vec<FastMessage>, IOError> {
     debug!(log, "handling putobject function request");
 
@@ -222,9 +241,9 @@ pub fn put_handler(msg_id: u32,
 }
 
 pub fn delete_handler(msg_id: u32,
-                      args: &Vec<Value>,
+                      args: &[Value],
                       mut response: Vec<FastMessage>,
-                      pool: &Pool<PostgresConnectionManager>,
+                      pool: &ConnectionPool<PostgresConnection, StaticIpResolver, impl FnMut(&Backend) -> PostgresConnection + Send + 'static>,
                       log: &Logger) -> Result<Vec<FastMessage>, IOError> {
     debug!(log, "handling deleteobject function request");
 
@@ -253,11 +272,7 @@ pub fn delete_handler(msg_id: u32,
                 let msg = FastMessage::data(msg_id, FastMessageData::new(method, value));
                 Ok(msg)
             } else {
-                let value = json!({
-                    "name": "ObjectNotFoundError",
-                    "message": "requested object not found"
-                });
-                let err_msg = FastMessage::error(msg_id, FastMessageData::new(method, value));
+                let err_msg = FastMessage::error(msg_id, FastMessageData::new(method, object_not_found()));
                 Ok(err_msg)
             }
         })
@@ -288,23 +303,27 @@ fn other_error(msg: &str) -> IOError {
     IOError::new(IOErrorKind::Other, String::from(msg))
 }
 
-fn get(payload: GetObjectPayload, pool: &Pool<PostgresConnectionManager>)
-                     -> PostgresResult<Option<ObjectResponse>>
+fn get(payload: GetObjectPayload,
+       pool: &ConnectionPool<PostgresConnection, StaticIpResolver, impl FnMut(&Backend) -> PostgresConnection + Send + 'static>)
+       -> Result<Option<ObjectResponse>, IOError>
 {
-    let conn = pool.get().unwrap();
-    let sql = get_sql(&payload.vnode);
-    conn.query(&sql, &[&payload.owner,
-                       &payload.bucket_id,
-                       &payload.name])
-        .and_then(|rows| response(rows))
-        .map_err(|e| e)
+    let mut conn = pool.claim().unwrap();
+    let sql = get_sql(payload.vnode);
+    (*conn).query(sql.as_str(), &[&payload.owner,
+                                  &payload.bucket_id,
+                                  &payload.name])
+        .map_err(|e| {
+            let pg_err = format!("{}", e);
+            IOError::new(IOErrorKind::Other, pg_err)
+        })
+        .and_then(response)
 }
 
-fn response(rows: Rows) -> PostgresResult<Option<ObjectResponse>> {
-    if rows.len() == 0 {
+fn response(rows: Rows) -> Result<Option<ObjectResponse>, IOError> {
+    if rows.is_empty() {
         Ok(None)
     } else if rows.len() == 1 {
-        let row = rows.get(0);
+        let row = &rows[0];
         let content_md5_bytes: Vec<u8> = row.get(7);
         let content_md5 = base64::encode(&content_md5_bytes);
         //TODO: Valdate # of cols
@@ -316,7 +335,7 @@ fn response(rows: Rows) -> PostgresResult<Option<ObjectResponse>> {
             created        : row.get(4),
             modified       : row.get(5),
             content_length : row.get(6),
-            content_md5    : content_md5,
+            content_md5,
             content_type   : row.get(8),
             headers        : row.get(9),
             sharks         : row.get(10),
@@ -326,11 +345,11 @@ fn response(rows: Rows) -> PostgresResult<Option<ObjectResponse>> {
     } else {
         let err = format!("Get query found {} results, but expected only 1.",
                           rows.len());
-        Err(IOError::new(IOErrorKind::Other, err).into())
+        Err(IOError::new(IOErrorKind::Other, err))
     }
 }
 
-fn get_sql(vnode: &u64) -> String {
+fn get_sql(vnode: u64) -> String {
     ["SELECT id, owner, bucket_id, name, created, modified, content_length, \
       content_md5, content_type, headers, sharks, properties \
       FROM manta_bucket_",
@@ -340,7 +359,7 @@ fn get_sql(vnode: &u64) -> String {
        AND name = $3"].concat()
 }
 
-fn list_sql(vnode: &u64, limit: &u64, offset: &u64, order_by: &str) -> String {
+fn list_sql(vnode: u64, limit: u64, offset: u64, order_by: &str) -> String {
     format!("SELECT id, owner, bucket_id, name, created, modified, \
         content_length, content_md5, content_type, headers, sharks, \
         properties \
@@ -352,42 +371,42 @@ fn list_sql(vnode: &u64, limit: &u64, offset: &u64, order_by: &str) -> String {
         vnode, order_by, limit, offset)
 }
 
-fn put(payload: PutObjectPayload, pool: &Pool<PostgresConnectionManager>)
-       -> PostgresResult<Option<ObjectResponse>>
+fn put(payload: PutObjectPayload,
+       pool: &ConnectionPool<PostgresConnection, StaticIpResolver, impl FnMut(&Backend) -> PostgresConnection + Send + 'static>)
+       -> Result<Option<ObjectResponse>, IOError>
 {
-    let conn = pool.get().unwrap();
-    let txn = conn.transaction().unwrap();
-    let put_sql = put_sql(&payload.vnode);
-    let move_sql = insert_delete_table_sql(&payload.vnode);
+    let mut conn = pool.claim().unwrap();
+    let mut txn = (*conn).transaction().unwrap();
+    let put_sql = put_sql(payload.vnode);
+    let move_sql = insert_delete_table_sql(payload.vnode);
     let content_md5_bytes = base64::decode(&payload.content_md5).unwrap();
-    let result = txn.execute(&move_sql, &[&payload.owner,
-                                          &payload.bucket_id,
-                                          &payload.name])
+    txn.execute(move_sql.as_str(), &[&payload.owner,
+                                     &payload.bucket_id,
+                                     &payload.name])
         .and_then(|_moved_rows| {
-            txn.query(&put_sql, &[&Uuid::new_v4(),
-                                  &payload.owner,
-                                  &payload.bucket_id,
-                                  &payload.name,
-                                  &payload.content_length,
-                                  &content_md5_bytes,
-                                  &payload.content_type,
-                                  &payload.headers,
-                                  &payload.sharks,
-                                  &payload.properties])
+            txn.query(put_sql.as_str(), &[&Uuid::new_v4(),
+                                          &payload.owner,
+                                          &payload.bucket_id,
+                                          &payload.name,
+                                          &payload.content_length,
+                                          &content_md5_bytes,
+                                          &payload.content_type,
+                                          &payload.headers,
+                                          &payload.sharks,
+                                          &payload.properties])
+        })
+        .map_err(|e| {
+            let pg_err = format!("{}", e);
+            IOError::new(IOErrorKind::Other, pg_err)
         })
-        .and_then(|rows| response(rows))
+        .and_then(response)
         .and_then(|response| {
-            let _commit_result = txn.commit().unwrap();
+            txn.commit().unwrap();
             Ok(response)
         })
-        .map_err(|e| {
-            let pg_err = format!("{}", e);
-            IOError::new(IOErrorKind::Other, pg_err).into()
-        });
-    result
 }
 
-fn insert_delete_table_sql(vnode: &u64) -> String {
+fn insert_delete_table_sql(vnode: u64) -> String {
     let vnode_str = vnode.to_string();
     ["INSERT INTO manta_bucket_",
      &vnode_str,
@@ -406,7 +425,7 @@ fn insert_delete_table_sql(vnode: &u64) -> String {
        AND name = $3"].concat()
 }
 
-fn put_sql(vnode: &u64) -> String {
+fn put_sql(vnode: u64) -> String {
     ["INSERT INTO manta_bucket_",
      &vnode.to_string(),
      &".manta_bucket_object ( \
@@ -428,7 +447,7 @@ fn put_sql(vnode: &u64) -> String {
        sharks, properties"].concat()
 }
 
-fn delete_sql(vnode: &u64) -> String {
+fn delete_sql(vnode: u64) -> String {
     ["DELETE FROM manta_bucket_",
      &vnode.to_string(),
      &".manta_bucket_object \
@@ -437,28 +456,28 @@ fn delete_sql(vnode: &u64) -> String {
        AND name = $3"].concat()
 }
 
-fn delete(payload: DeleteObjectPayload, pool: &Pool<PostgresConnectionManager>)
-          -> PostgresResult<u64>
+fn delete(payload: DeleteObjectPayload,
+          pool: &ConnectionPool<PostgresConnection, StaticIpResolver, impl FnMut(&Backend) -> PostgresConnection + Send + 'static>)
+          -> Result<u64, IOError>
 {
-    let conn = pool.get().unwrap();
-    let txn = conn.transaction().unwrap();
-    let move_sql = insert_delete_table_sql(&payload.vnode);
-    let delete_sql = delete_sql(&payload.vnode);
-    let result = txn.execute(&move_sql, &[&payload.owner,
-                                          &payload.bucket_id,
-                                          &payload.name])
+    let mut conn = pool.claim().unwrap();
+    let mut txn = (*conn).transaction().unwrap();
+    let move_sql = insert_delete_table_sql(payload.vnode);
+    let delete_sql = delete_sql(payload.vnode);
+    txn.execute(move_sql.as_str(), &[&payload.owner,
+                                     &payload.bucket_id,
+                                     &payload.name])
         .and_then(|_moved_rows| {
-            txn.execute(&delete_sql, &[&payload.owner,
-                                       &payload.bucket_id,
-                                       &payload.name])
+            txn.execute(delete_sql.as_str(), &[&payload.owner,
+                                               &payload.bucket_id,
+                                               &payload.name])
         })
         .and_then(|row_count| {
-            let _commit_result = txn.commit().unwrap();
+            txn.commit().unwrap();
             Ok(row_count)
         })
         .map_err(|e| {
             let pg_err = format!("{}", e);
-            IOError::new(IOErrorKind::Other, pg_err).into()
-        });
-    result
+            IOError::new(IOErrorKind::Other, pg_err)
+        })
 }
diff --git a/src/opts.rs b/src/opts.rs
index e377526..9c5ef0f 100644
--- a/src/opts.rs
+++ b/src/opts.rs
@@ -4,14 +4,23 @@
 
 use clap::{App, Arg, ArgMatches, crate_version};
 
-pub fn parse<'a, 'b>(app: &str) -> ArgMatches<'a> {
+pub fn parse<'a>(app: &str) -> ArgMatches<'a> {
     App::new(app)
         .about("Tool to test different hierarchy options offered by PostgreSQL")
         .version(crate_version!())
-        .arg(Arg::with_name("pg_url")
-             .help("Postgres URL")
-             .short("u")
-             .long("pg-url")
+        .arg(Arg::with_name("pg ip")
+             .help("Postgres IP address")
+             .long("pg-ip")
+             .takes_value(true)
+             .required(false))
+        .arg(Arg::with_name("pg port")
+             .help("Postgres port")
+             .long("pg-port")
+             .takes_value(true)
+             .required(false))
+        .arg(Arg::with_name("pg database")
+             .help("Postgres database name")
+             .long("pg-db")
              .takes_value(true)
              .required(false))
         .arg(Arg::with_name("address")
diff --git a/tests/rpc_handlers.rs b/tests/rpc_handlers.rs
new file mode 100644
index 0000000..19e482a
--- /dev/null
+++ b/tests/rpc_handlers.rs
@@ -0,0 +1,416 @@
+/*
+ * Copyright 2019 Joyent, Inc.
+ */
+
+use std::collections::HashMap;
+use std::net::{IpAddr, Ipv4Addr};
+use std::process::Command;
+use std::sync::Mutex;
+
+use slog::{error, info, o, Drain, Logger};
+use url::Url;
+use uuid::Uuid;
+
+use cueball::connection_pool::ConnectionPool;
+use cueball::connection_pool::types::ConnectionPoolOptions;
+use cueball_static_resolver::StaticIpResolver;
+use cueball_postgres_connection::{PostgresConnection, PostgresConnectionConfig};
+
+use boray::bucket;
+use boray::object;
+
+// This test suite requres PostgreSQL and pg_tmp
+// (http://eradman.com/ephemeralpg/) to be installed on the test system.
+#[test]
+
+fn verify_rpc_handlers() {
+    let plain = slog_term::PlainSyncDecorator::new(std::io::stdout());
+    let log = Logger::root(
+        Mutex::new(slog_term::FullFormat::new(plain).build()).fuse(),
+        o!("build-id" => "0.1.0"),
+    );
+    ////////////////////////////////////////////////////////////////////////////
+    // Check for pg_tmp on the system
+    ////////////////////////////////////////////////////////////////////////////
+    let pg_tmp_check_output = Command::new("which")
+        .arg("pg_tmp")
+        .output()
+        .expect("failed to execute process");
+
+    if !pg_tmp_check_output.status.success() {
+        error!(log, "pg_tmp is required to run this test");
+    }
+    assert!(pg_tmp_check_output.status.success());
+
+    ////////////////////////////////////////////////////////////////////////////
+    // Create pg_tmp database. This requires that pg_tmp be installed on the
+    // system running the test. The create-ephemeral-db.sh script sets up two
+    // vnode schemas (vnodes 0 and 1) for use in testing. This is controlled by
+    // the schema.sql file in ./etc/postgres.
+    ////////////////////////////////////////////////////////////////////////////
+    let create_db_output = Command::new("./etc/postgres/create-ephemeral-db.sh")
+        .output()
+        .expect("failed to execute process");
+
+    assert!(create_db_output.status.success());
+
+    let pg_connect_str = String::from_utf8_lossy(&create_db_output.stdout);
+
+    info!(log, "pg url: {}", pg_connect_str);
+
+    let pg_url = Url::parse(&pg_connect_str)
+        .expect("failed to parse postgres connection string");
+
+    ////////////////////////////////////////////////////////////////////////////
+    // Create connection pool
+    ////////////////////////////////////////////////////////////////////////////
+    let user = "postgres";
+    let pg_port = pg_url.port().expect("failed to parse postgres port");
+    let pg_db = "test";
+    let application_name = "boray-test";
+
+    let pg_config = PostgresConnectionConfig {
+        user: Some(user.into()),
+        password: None,
+        host: None,
+        port: Some(pg_port),
+        database: Some(pg_db.into()),
+        application_name: Some(application_name.into())
+    };
+
+    let connection_creator = PostgresConnection::connection_creator(pg_config);
+    let pool_opts = ConnectionPoolOptions {
+        maximum: 5,
+        claim_timeout: None,
+        log: log.clone(),
+        rebalancer_action_delay: None
+    };
+
+    let primary_backend = (IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)), pg_port);
+    let resolver = StaticIpResolver::new(vec![primary_backend]);
+
+    let pool = ConnectionPool::new(
+        pool_opts,
+        resolver,
+        connection_creator
+    );
+
+    ////////////////////////////////////////////////////////////////////////////
+    // Exercise RPC handlers
+    ////////////////////////////////////////////////////////////////////////////
+    let msg_id: u32 = 0x1;
+    let owner_id = Uuid::new_v4();
+    let bucket: String = "testbucket".into();
+
+
+    // Try to read a bucket
+    let get_bucket_payload = bucket::GetBucketPayload {
+        owner: owner_id,
+        name: bucket.clone(),
+        vnode: 0
+    };
+
+    let get_bucket_json = serde_json::to_value(get_bucket_payload).unwrap();
+    let get_bucket_args = vec![get_bucket_json];
+    let mut get_bucket_result =
+        bucket::get_handler(msg_id, &get_bucket_args, vec![], &pool, &log);
+
+    assert!(get_bucket_result.is_ok());
+    let get_bucket_response = get_bucket_result.unwrap();
+    assert_eq!(get_bucket_response.len(), 1);
+
+    let get_bucket_response_result: Result<bucket::BucketNotFoundError, _> =
+        serde_json::from_value(get_bucket_response[0].data.d.clone());
+    assert!(get_bucket_response_result.is_ok());
+    assert_eq!(get_bucket_response_result.unwrap(), bucket::BucketNotFoundError::new());
+
+
+    // Create a bucket
+    let put_bucket_payload = bucket::PutBucketPayload {
+        owner: owner_id,
+        name: bucket.clone(),
+        vnode: 0
+    };
+
+    let put_bucket_json = serde_json::to_value(put_bucket_payload).unwrap();
+    let put_bucket_args = vec![put_bucket_json];
+    let mut put_bucket_result =
+        bucket::put_handler(msg_id, &put_bucket_args, vec![], &pool, &log);
+
+    assert!(put_bucket_result.is_ok());
+    let put_bucket_response = put_bucket_result.unwrap();
+    assert_eq!(put_bucket_response.len(), 1);
+
+    let put_bucket_response_result: Result<bucket::BucketResponse, _> =
+        serde_json::from_value(put_bucket_response[0].data.d[0].clone());
+    assert!(put_bucket_response_result.is_ok());
+    assert_eq!(put_bucket_response_result.unwrap().name, bucket);
+
+
+    // Read bucket again and make sure the resonse is returned successfully
+    get_bucket_result =
+        bucket::get_handler(msg_id, &get_bucket_args, vec![], &pool, &log);
+
+    assert!(get_bucket_result.is_ok());
+    let get_bucket_response = get_bucket_result.unwrap();
+    assert_eq!(get_bucket_response.len(), 1);
+
+    let get_bucket_response_result: Result<bucket::BucketResponse, _> =
+        serde_json::from_value(get_bucket_response[0].data.d[0].clone());
+    assert!(get_bucket_response_result.is_ok());
+    assert_eq!(get_bucket_response_result.unwrap().name, bucket);
+
+
+    // Try to create same bucket again and verify a BucketAlreadyExists error is
+    // returned
+    put_bucket_result =
+        bucket::put_handler(msg_id, &put_bucket_args, vec![], &pool, &log);
+
+    assert!(put_bucket_result.is_ok());
+    let put_bucket_response = put_bucket_result.unwrap();
+    assert_eq!(put_bucket_response.len(), 1);
+
+    let put_bucket_response_result: Result<bucket::BucketAlreadyExistsError, _> =
+        serde_json::from_value(put_bucket_response[0].data.d.clone());
+    assert!(put_bucket_response_result.is_ok());
+    assert_eq!(put_bucket_response_result.unwrap(),
+               bucket::BucketAlreadyExistsError::new());
+
+    // Delete bucket
+
+    // The get and delete bucket args are the same so we can reuse
+    // get_bucket_args here.
+    let mut delete_bucket_result =
+        bucket::delete_handler(msg_id, &get_bucket_args, vec![], &pool, &log);
+
+    assert!(delete_bucket_result.is_ok());
+    let delete_bucket_response = delete_bucket_result.unwrap();
+    assert_eq!(delete_bucket_response.len(), 1);
+
+    let delete_bucket_response_result: Result<u64, _> =
+        serde_json::from_value(delete_bucket_response[0].data.d[0].clone());
+    assert!(delete_bucket_response_result.is_ok());
+    assert_eq!(delete_bucket_response_result.unwrap(), 1);
+
+    // Read bucket again and verify it's gone
+    get_bucket_result =
+        bucket::get_handler(msg_id, &get_bucket_args, vec![], &pool, &log);
+
+    assert!(get_bucket_result.is_ok());
+    let get_bucket_response = get_bucket_result.unwrap();
+    assert_eq!(get_bucket_response.len(), 1);
+
+    let get_bucket_response_result: Result<bucket::BucketNotFoundError, _> =
+        serde_json::from_value(get_bucket_response[0].data.d.clone());
+    assert!(get_bucket_response_result.is_ok());
+    assert_eq!(get_bucket_response_result.unwrap(), bucket::BucketNotFoundError::new());
+
+
+    // Attempt to delete a nonexistent bucket and verify an error is returned
+    delete_bucket_result =
+        bucket::delete_handler(msg_id, &get_bucket_args, vec![], &pool, &log);
+
+    assert!(delete_bucket_result.is_ok());
+    let delete_bucket_response = delete_bucket_result.unwrap();
+    assert_eq!(delete_bucket_response.len(), 1);
+
+    let delete_bucket_response_result: Result<bucket::BucketNotFoundError, _> =
+        serde_json::from_value(delete_bucket_response[0].data.d.clone());
+    assert!(delete_bucket_response_result.is_ok());
+    assert_eq!(delete_bucket_response_result.unwrap(), bucket::BucketNotFoundError::new());
+
+
+    // Try to read an object
+    let bucket_id = Uuid::new_v4();
+    let object: String = "testobject".into();
+    let get_object_payload = object::GetObjectPayload {
+        owner: owner_id,
+        bucket_id,
+        name: object.clone(),
+        vnode: 1
+    };
+
+    let get_object_json = serde_json::to_value(get_object_payload).unwrap();
+    let get_object_args = vec![get_object_json];
+    let mut get_object_result =
+        object::get_handler(msg_id, &get_object_args, vec![], &pool, &log);
+
+    assert!(get_object_result.is_ok());
+    let get_object_response = get_object_result.unwrap();
+    assert_eq!(get_object_response.len(), 1);
+
+    let get_object_response_result: Result<object::ObjectNotFoundError, _> =
+        serde_json::from_value(get_object_response[0].data.d.clone());
+    assert!(get_object_response_result.is_ok());
+    assert_eq!(get_object_response_result.unwrap(), object::ObjectNotFoundError::new());
+
+
+    // Create an object
+    let put_object_payload = object::PutObjectPayload {
+        owner: owner_id,
+        bucket_id,
+        name: object.clone(),
+        vnode: 1,
+        content_length: 5,
+        content_md5: "xzY5jJbR9rcrMRhlcmi/8g==".into(),
+        content_type: "text/plain".into(),
+        headers: HashMap::new(),
+        sharks: HashMap::new(),
+        properties: None
+    };
+
+    let put_object_json = serde_json::to_value(put_object_payload).unwrap();
+    let put_object_args = vec![put_object_json];
+    let mut put_object_result =
+        object::put_handler(msg_id, &put_object_args, vec![], &pool, &log);
+
+    assert!(put_object_result.is_ok());
+    let put_object_response = put_object_result.unwrap();
+    assert_eq!(put_object_response.len(), 1);
+
+    let put_object_response_result: Result<object::ObjectResponse, _> =
+        serde_json::from_value(put_object_response[0].data.d[0].clone());
+    assert!(put_object_response_result.is_ok());
+    assert_eq!(put_object_response_result.unwrap().name, object);
+
+
+    // Read object again and verify a successful response is returned
+    get_object_result =
+        object::get_handler(msg_id, &get_object_args, vec![], &pool, &log);
+
+    assert!(get_object_result.is_ok());
+    let get_object_response = get_object_result.unwrap();
+    assert_eq!(get_object_response.len(), 1);
+
+    let get_object_response_result: Result<object::ObjectResponse, _> =
+        serde_json::from_value(get_object_response[0].data.d[0].clone());
+    assert!(get_object_response_result.is_ok());
+    assert_eq!(get_object_response_result.unwrap().name, object);
+
+
+    // Delete object
+
+    // The get and delete object args are the same so we can reuse
+    // get_object_args here.
+    let mut delete_object_result =
+        object::delete_handler(msg_id, &get_object_args, vec![], &pool, &log);
+
+    assert!(delete_object_result.is_ok());
+    let delete_object_response = delete_object_result.unwrap();
+    assert_eq!(delete_object_response.len(), 1);
+
+    let delete_object_response_result: Result<u64, _> =
+        serde_json::from_value(delete_object_response[0].data.d[0].clone());
+    assert!(delete_object_response_result.is_ok());
+    assert_eq!(delete_object_response_result.unwrap(), 1);
+
+
+    // Read object again and verify it is not found
+    get_object_result =
+        object::get_handler(msg_id, &get_object_args, vec![], &pool, &log);
+
+    assert!(get_object_result.is_ok());
+    let get_object_response = get_object_result.unwrap();
+    assert_eq!(get_object_response.len(), 1);
+
+    let get_object_response_result: Result<object::ObjectNotFoundError, _> =
+        serde_json::from_value(get_object_response[0].data.d.clone());
+    assert!(get_object_response_result.is_ok());
+    assert_eq!(get_object_response_result.unwrap(), object::ObjectNotFoundError::new());
+
+    // Delete the object again and verify it is not found
+    delete_object_result =
+        object::delete_handler(msg_id, &get_object_args, vec![], &pool, &log);
+
+    assert!(delete_object_result.is_ok());
+    let delete_object_response = delete_object_result.unwrap();
+    assert_eq!(delete_object_response.len(), 1);
+
+    let delete_object_response_result: Result<object::ObjectNotFoundError, _> =
+        serde_json::from_value(delete_object_response[0].data.d.clone());
+    assert!(delete_object_response_result.is_ok());
+    assert_eq!(delete_object_response_result.unwrap(), object::ObjectNotFoundError::new());
+
+    // List buckets and confirm none are found
+
+    let list_buckets_payload = bucket::ListBucketsPayload {
+        owner: owner_id,
+        vnode: 0,
+        prefix: "testbucket".into(),
+        order_by: "created".into(),
+        limit: 1000,
+        offset: 0
+    };
+
+    let list_buckets_json = serde_json::to_value(list_buckets_payload).unwrap();
+    let list_buckets_args = vec![list_buckets_json];
+    let mut list_buckets_result =
+        bucket::list_handler(msg_id, &list_buckets_args, vec![], &pool, &log);
+
+    assert!(list_buckets_result.is_ok());
+    let list_buckets_response = list_buckets_result.unwrap();
+    assert_eq!(list_buckets_response.len(), 0);
+
+    // Create a bucket and list buckets again
+    put_bucket_result =
+        bucket::put_handler(msg_id, &put_bucket_args, vec![], &pool, &log);
+
+    assert!(put_bucket_result.is_ok());
+    let put_bucket_response = put_bucket_result.unwrap();
+    assert_eq!(put_bucket_response.len(), 1);
+
+    let put_bucket_response_result: Result<bucket::BucketResponse, _> =
+        serde_json::from_value(put_bucket_response[0].data.d[0].clone());
+    assert!(put_bucket_response_result.is_ok());
+    assert_eq!(put_bucket_response_result.unwrap().name, bucket);
+
+    list_buckets_result =
+        bucket::list_handler(msg_id, &list_buckets_args, vec![], &pool, &log);
+
+    assert!(list_buckets_result.is_ok());
+    let list_buckets_response = list_buckets_result.unwrap();
+    assert_eq!(list_buckets_response.len(), 1);
+
+
+    // List objects and confirm none are found
+
+    let list_objects_payload = object::ListObjectsPayload {
+        owner: owner_id,
+        bucket_id,
+        vnode: 1,
+        prefix: "testobject".into(),
+        order_by: "created".into(),
+        limit: 1000,
+        offset: 0
+    };
+
+    let list_objects_json = serde_json::to_value(list_objects_payload).unwrap();
+    let list_objects_args = vec![list_objects_json];
+    let mut list_objects_result =
+        object::list_handler(msg_id, &list_objects_args, vec![], &pool, &log);
+
+    assert!(list_objects_result.is_ok());
+    let list_objects_response = list_objects_result.unwrap();
+    assert_eq!(list_objects_response.len(), 0);
+
+    // Create an object and list objects again
+    put_object_result =
+        object::put_handler(msg_id, &put_object_args, vec![], &pool, &log);
+
+    assert!(put_object_result.is_ok());
+    let put_object_response = put_object_result.unwrap();
+    assert_eq!(put_object_response.len(), 1);
+
+    let put_object_response_result: Result<object::ObjectResponse, _> =
+        serde_json::from_value(put_object_response[0].data.d[0].clone());
+    assert!(put_object_response_result.is_ok());
+    assert_eq!(put_object_response_result.unwrap().name, object);
+
+    list_objects_result =
+        object::list_handler(msg_id, &list_objects_args, vec![], &pool, &log);
+
+    assert!(list_objects_result.is_ok());
+    let list_objects_response = list_objects_result.unwrap();
+    assert_eq!(list_objects_response.len(), 1);
+
+}
-- 
2.21.0

