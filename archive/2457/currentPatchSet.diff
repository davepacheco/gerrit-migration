commit 171148a46b41b003203ce829856c4128b47d6bb4 (refs/changes/57/2457/2)
Author: Todd Whiteman <todd.whiteman@joyent.com>
Date:   2017-08-30T16:56:43-07:00 (2 years, 1 month ago)
    
    DOCKER-1093 docker build should not try and build from old v1 images
    Reviewed by: Trent Mick <trentm@gmail.com>
    Approved by: Trent Mick <trentm@gmail.com>

diff --git a/lib/backends/sdc/build.js b/lib/backends/sdc/build.js
index 3f58a65..37f525a 100644
--- a/lib/backends/sdc/build.js
+++ b/lib/backends/sdc/build.js
@@ -651,6 +651,14 @@ function pullAndReprovisionImage(opts, callback) {
             return;
         }
 
+        if (images.isV1Image(img)) {
+            callback(new errors.DockerError(
+                format('%s is a deprecated image which cannot be used by '
+                + 'docker build - please repull or rebuild the image',
+                opts.imageName)));
+            return;
+        }
+
         reprovisionFromImageUuid(img.image_uuid, opts, function (rerr) {
             if (rerr) {
                 callback(rerr);
@@ -868,8 +876,8 @@ function commitImage(req, opts, callback) {
 
     // Find the Image model for running container.
     function findContainerImage(_, cb) {
-        var config_digest = vm.internal_metadata['docker:imageid'];
-        if (!config_digest) {
+        var imageId = vm.internal_metadata['docker:imageid'];
+        if (!imageId) {
             cb(new errors.DockerError(
                 'No docker:imageid in vm internal metadata'));
             return;
@@ -877,13 +885,24 @@ function commitImage(req, opts, callback) {
         var dockerImageOpts = {
             account: req.account,
             app: req.app,
-            config_digest: config_digest,
-            log: log
+            log: log,
+            name: imageId,
+            includeSmartos: false
         };
-        images.imgFromConfigDigest(dockerImageOpts,
-            function _imgFromDigestCb(err, imgModel) {
+        req.backend.imgFromName(dockerImageOpts,
+            function _imgFromNameCb(err, imgModel) {
+                if (err) {
+                    cb(err);
+                    return;
+                }
+                if (images.isV1Image(imgModel)) {
+                    cb(new errors.DockerError(
+                        'This container uses a deprecated image which cannot '
+                        + 'be committed - please repull or rebuild the image'));
+                    return;
+                }
                 baseImg = imgModel;
-                cb(err);
+                cb();
             }
         );
     }
diff --git a/test/integration/api-build.test.js b/test/integration/api-build.test.js
index 37241c0..5e43e1a 100644
--- a/test/integration/api-build.test.js
+++ b/test/integration/api-build.test.js
@@ -20,10 +20,10 @@ var format = require('util').format;
 var path = require('path');
 
 var assert = require('assert-plus');
-var tar = require('tar-stream');
 var test = require('tape');
 var vasync = require('vasync');
 
+var createTarStream = require('../lib/common').createTarStream;
 var h = require('./helpers');
 var imageV2 = require('../../lib/models/image-v2');
 
@@ -38,19 +38,6 @@ var imgapiClient;
 var morayClient;
 
 
-function createTarStream(fileAndContents) {
-    var pack = tar.pack();
-
-    Object.keys(fileAndContents).forEach(function (name) {
-        pack.entry({ name: name }, fileAndContents[name]);
-    });
-
-    pack.finalize();
-
-    return pack;
-}
-
-
 test('setup', function (tt) {
 
     tt.test('docker env', function (t) {
diff --git a/test/integration/api-images-v1-v2.test.js b/test/integration/api-images-v1-v2.test.js
index 280ac89..119673c 100644
--- a/test/integration/api-images-v1-v2.test.js
+++ b/test/integration/api-images-v1-v2.test.js
@@ -22,6 +22,7 @@ var libuuid = require('libuuid');
 var test = require('tape');
 var vasync = require('vasync');
 
+var createTarStream = require('../lib/common').createTarStream;
 var h = require('./helpers');
 var imageV1Model = require('../../lib/models/image');
 var imageV2Model = require('../../lib/models/image-v2');
@@ -33,6 +34,7 @@ var log = require('../lib/log');
 
 var ALICE;
 var DOCKER_ALICE;
+var DOCKER_ALICE_HTTP;
 var gInitSuccessful = false;
 var gV1Image;
 var gV1ImageName = 'joyentunsupported/busybox_with_label_test_v1';
@@ -66,6 +68,16 @@ test('setup', function (tt) {
         });
     });
 
+    tt.test('docker client http init', function (t) {
+        h.createDockerRemoteClient({user: ALICE, clientType: 'http'},
+            function (err, client) {
+                t.ifErr(err, 'docker client init for alice/http');
+                DOCKER_ALICE_HTTP = client;
+                t.end();
+            }
+        );
+    });
+
     tt.test('imgapi client init', function (t) {
         h.createImgapiClient(function (err, client) {
             t.ifErr(err, 'imgapi client init');
@@ -328,6 +340,95 @@ test('init docker images', function (tt) {
 });
 
 
+// Ensure no use of v1 images for docker tag.
+test('test for error on docker v1 image tag', function (tt) {
+    if (gInitSuccessful === false) {
+        tt.skip('image init failed');
+        tt.end();
+        return;
+    }
+
+    tt.test('tag v1 image', function (t) {
+        var url = util.format('/images/%s/tag?repo=tagfail&tag=latest',
+            gV1ImageName);
+
+        DOCKER_ALICE.post(url, function onpost(err) {
+            t.ok(err, 'should get an error when tagging a v1 image');
+            if (err) {
+                t.ok(String(err).indexOf('image which cannot be tagged') >= 0,
+                    'check error has correct message');
+            }
+            t.end();
+        });
+    });
+});
+
+// Ensure no use of v1 images for docker build.
+test('test for error on docker v1 image build', function (tt) {
+    if (gInitSuccessful === false) {
+        tt.skip('image init failed');
+        tt.end();
+        return;
+    }
+
+    tt.test('build from v1 image', function (t) {
+        vasync.pipeline({arg: {}, funcs: [
+
+            function createTar(ctx, next) {
+                var fileAndContents = {
+                    Dockerfile: util.format('FROM %s\n'
+                                    + 'LABEL sdcdockertest=true\n',
+                                    gV1ImageName)
+                };
+                ctx.tarStream = createTarStream(fileAndContents);
+                next();
+            },
+
+            function buildContainer(ctx, next) {
+                h.buildDockerContainer({
+                    dockerClient: DOCKER_ALICE_HTTP,
+                    params: {
+                        'rm': 'true'  // Remove container after it's built.
+                    },
+                    test: t,
+                    tarball: ctx.tarStream
+                }, onbuild);
+
+                function onbuild(err, result) {
+                    t.ifErr(err, 'ensure build request worked');
+                    ctx.buildResult = result;
+                    next(err);
+                }
+            },
+
+            function checkResults(ctx, next) {
+                var result = ctx.buildResult;
+                if (!result || !result.body) {
+                    next(new Error('build generated no output!?'));
+                    return;
+                }
+
+                var output = result.body;
+                var wantedErrorMsg = 'deprecated image which cannot be used '
+                    + 'by docker build - please repull or rebuild the image';
+                var hasV1ImageError = output.indexOf(wantedErrorMsg) >= 0;
+                t.ok(hasV1ImageError, 'build has v1 image error message');
+                if (!hasV1ImageError) {
+                    t.ok(hasV1ImageError, util.format(
+                        'build received v1 image error: output=%j', output));
+                }
+
+                next();
+            }
+
+        ]}, function allDone(err) {
+            t.ifErr(err);
+            t.end();
+        });
+    });
+});
+
+
 // Ensure we can successful create and run a container that uses a v1 image.
 test('test docker v1/v2 images', function (tt) {
     if (gInitSuccessful === false) {
@@ -336,6 +437,8 @@ test('test docker v1/v2 images', function (tt) {
         return;
     }
 
+    var containerId;
+
     tt.test('create and run v1 image', function (t) {
         assert.object(STATE.vmapi, 'STATE.vmapi');
         log.debug('runV1Image');
@@ -354,7 +457,37 @@ test('test docker v1/v2 images', function (tt) {
             t.ifErr(err, 'Check for create/run container error');
             t.ok(result.id, 'container should have an id');
             t.equal(result.vm.state, 'running', 'Check container running');
-            DOCKER_ALICE.del('/containers/' + result.id + '?force=1', ondelete);
+
+            if (!result.id) {
+                t.end();
+                return;
+            }
+
+            containerId = result.id;
+            // Try and commit the container with the v1 image - it should fail.
+            var commitUrl = util.format(
+                '/commit?container=%s&repo=myv1image&tag=latest',
+                containerId);
+
+            DOCKER_ALICE.post(commitUrl, oncommit);
+        }
+
+        function oncommit(err) {
+            t.ok(err, 'Got a docker commit error for v1 image');
+            if (err) {
+                var wantedErrorMsg = 'This container uses a deprecated '
+                    + 'image which cannot be committed - please repull '
+                    + 'or rebuild the image';
+                var hasError = String(err).indexOf(wantedErrorMsg) >= 0;
+                t.ok(hasError, 'commit has v1 image error message');
+                if (!hasError) {
+                    t.ok(hasError, util.format(
+                        'commit error: %s', err));
+                }
+            }
+
+            DOCKER_ALICE.del('/containers/' + containerId + '?force=1',
+                ondelete);
         }
 
         function ondelete(err) {
diff --git a/test/lib/common.js b/test/lib/common.js
index c3be651..0c347f4 100644
--- a/test/lib/common.js
+++ b/test/lib/common.js
@@ -18,6 +18,7 @@ var difflet = require('difflet');
 var exec = require('child_process').exec;
 var fmt = require('util').format;
 var libuuid = require('libuuid');
+var tar = require('tar-stream');
 var VError = require('verror').VError;
 
 
@@ -422,8 +423,22 @@ function dockerClientVersionCmp(versionA, versionB) {
     return 0;
 }
 
+function createTarStream(fileAndContents) {
+    var pack = tar.pack();
+
+    Object.keys(fileAndContents).forEach(function (name) {
+        pack.entry({name: name}, fileAndContents[name]);
+    });
+
+    pack.finalize();
+
+    return pack;
+}
+
+
 module.exports = {
     constants: constants,
+    createTarStream: createTarStream,
     dockerClientVersionCmp: dockerClientVersionCmp,
     done: done,
     execPlus: execPlus,
