From 1ec428f81e40103db3e99feb1a30bc35d39655dd Mon Sep 17 00:00:00 2001
From: Orlando Vazquez <ovazquez@gmail.com>
Date: Mon, 18 Sep 2017 22:27:24 -0700
Subject: [PATCH] DOCKER-1106 Docker connection watcher functionality is
 causing user operations to fail when VMAPI is slow to respond to ping
 requests Reviewed by: Trent Mick <trentm@gmail.com> Approved by: Trent Mick
 <trentm@gmail.com>

---
 lib/common.js                  | 14 ++++++----
 lib/docker.js                  | 51 ++++++++++++++++++++++++----------
 package.json                   |  2 +-
 sapi_manifests/docker/template |  3 ++
 4 files changed, 50 insertions(+), 20 deletions(-)

diff --git a/lib/common.js b/lib/common.js
index 4a24015..da6f812 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -400,12 +400,16 @@ function uncaughtHandler(req, res, route, err) {
  * any request
  */
 function checkServices(req, res, next) {
-    req.app.connWatcher.checkAvailability(function (err) {
-        if (err) {
-            return next(err);
-        }
+    if (req.app.config.useConnectionStatusWatcher) {
+        req.app.connWatcher.checkAvailability(function (err) {
+            if (err) {
+                return next(err);
+            }
+            next();
+        });
+    } else {
         next();
-    });
+    }
 }
 
 
diff --git a/lib/docker.js b/lib/docker.js
index d1d05f7..2ee0fd0 100644
--- a/lib/docker.js
+++ b/lib/docker.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -73,7 +73,11 @@ function App(opts) {
     var Backend = require('./backends/' + self.config.backend);
     self.backend = new Backend({log: self.log, config: self.config});
 
-    self.setupConnections();
+    if (self.config.useConnectionStatusWatcher) {
+        self.setupConnectionsWatcher();
+    } else {
+        self.setupConnections();
+    }
 
     // TODO make the other clients accessible via req.app
 
@@ -152,9 +156,33 @@ function App(opts) {
     self.setupAdminSever();
 }
 
+
 App.prototype.setupConnections = function setupConnections() {
     var self = this;
 
+    self.moray = self.createMorayClient();
+    self.ufds = self.createUfdsClient(self.config.ufds);
+    self.wfapi =  self.createWorkflowClient(self.config.wfapi);
+
+    self.cnapi = new CNAPI(self.config.cnapi);
+    self.vmapi = new VMAPI(self.config.vmapi);
+    self.imgapi = new IMGAPI(self.config.imgapi);
+};
+
+
+App.prototype.createWorkflowClient = function createWorkflowClient() {
+    var self = this;
+    var wfclient = new wfapi(self.config.wfapi, self.log);
+    wfclient.connect(function () {
+        self.log.info('wfapi is ready');
+    });
+    return wfclient;
+};
+
+
+App.prototype.setupConnectionsWatcher = function setupConnectionsWatcher() {
+    var self = this;
+
     self.connWatcher = new ConnectionStatusWatcher({
         app: self
     });
@@ -240,13 +268,7 @@ App.prototype.setupConnections = function setupConnections() {
         }
     });
 
-    self.createUfdsClient(self.config.ufds, function (err, ufds) {
-        if (err) {
-            self.log.error({ err: err }, 'ufds error');
-            return;
-        }
-        self.ufds = ufds;
-    });
+    self.ufds = self.createUfdsClient(self.config.ufds);
 };
 
 
@@ -426,12 +448,13 @@ App.prototype.createMorayClient = function createMorayClient() {
     return client;
 };
 
+
 /**
  * Creates a UFDS client instance pointing to the UFDS server provided
- * in options. callback will be called either with Error - cb(err) - or
- * with the recently instantiated client object: cb(null, ufds_client)
+ * in options.
  */
-App.prototype.createUfdsClient = function (options, callback) {
+
+App.prototype.createUfdsClient = function (options) {
     options.log = this.log;
     var ufds = new UFDS(options);
 
@@ -443,15 +466,15 @@ App.prototype.createUfdsClient = function (options, callback) {
         ufds.on('connect', function () {
             options.log.info('UFDS reconnected');
         });
-        callback(null, ufds);
     });
 
     ufds.once('error', function (err) {
         // You are screwed. It's likely that the bind credentials were bad.
         // Treat this as fatal and move on:
         options.log.error({err: err}, 'UFDS connection error');
-        callback(err);
     });
+
+    return ufds;
 };
 
 /*
diff --git a/package.json b/package.json
index 6903cf0..89362c0 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "sdc-docker",
-  "version": "0.4.3",
+  "version": "0.4.4",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
diff --git a/sapi_manifests/docker/template b/sapi_manifests/docker/template
index 652cf95..dc78d0a 100644
--- a/sapi_manifests/docker/template
+++ b/sapi_manifests/docker/template
@@ -61,6 +61,9 @@
     "httpProxy": "{{{http_proxy}}}",
     "dockerRegistryInsecure": {{^docker_registry_insecure}}false{{/docker_registry_insecure}}{{#docker_registry_insecure}}{{{docker_registry_insecure}}}{{/docker_registry_insecure}},
 
+    {{#DOCKER_USE_CONN_WATCHER}}
+    "useConnectionStatusWatcher": true,
+    {{/DOCKER_USE_CONN_WATCHER}}
     "useTls": {{^USE_TLS}}false{{/USE_TLS}}{{#USE_TLS}}{{{USE_TLS}}}{{/USE_TLS}},
     "tls": {
         "requestCert": true,
-- 
2.21.0

