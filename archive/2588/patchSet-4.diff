From 2b9c596a277bf6d665358e3dc39834361b7a6c14 Mon Sep 17 00:00:00 2001
From: Orlando Vazquez <ovazquez@gmail.com>
Date: Mon, 18 Sep 2017 17:00:45 -0700
Subject: [PATCH] DOCKER-1106 Docker connection watcher functionality is
 causing user operations to fail when VMAPI is slow to respond to ping
 requests

---
 lib/backends/sdc/build.js      |  2 +-
 lib/common.js                  | 14 +++++----
 lib/docker.js                  | 52 ++++++++++++++++++++++++----------
 lib/endpoints/build.js         |  4 +--
 lib/endpoints/images.js        |  2 +-
 sapi_manifests/docker/template |  3 +-
 6 files changed, 52 insertions(+), 25 deletions(-)

diff --git a/lib/backends/sdc/build.js b/lib/backends/sdc/build.js
index 37f525a..ec28ee5 100644
--- a/lib/backends/sdc/build.js
+++ b/lib/backends/sdc/build.js
@@ -596,7 +596,7 @@ function pullImage(opts, callback) {
             req: req,
             req_id: opts.req_id,
             res: pullStream,
-            wfapi: req.wfapi,
+            wfapi: req.app.wfapi,
             account: req.account
         }, function (perr) {
             // Cleanup the socket used.
diff --git a/lib/common.js b/lib/common.js
index 4a24015..da6f812 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -400,12 +400,16 @@ function uncaughtHandler(req, res, route, err) {
  * any request
  */
 function checkServices(req, res, next) {
-    req.app.connWatcher.checkAvailability(function (err) {
-        if (err) {
-            return next(err);
-        }
+    if (req.app.config.useConnectionStatusWatcher) {
+        req.app.connWatcher.checkAvailability(function (err) {
+            if (err) {
+                return next(err);
+            }
+            next();
+        });
+    } else {
         next();
-    });
+    }
 }
 
 
diff --git a/lib/docker.js b/lib/docker.js
index d1d05f7..f5268d0 100644
--- a/lib/docker.js
+++ b/lib/docker.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -73,7 +73,11 @@ function App(opts) {
     var Backend = require('./backends/' + self.config.backend);
     self.backend = new Backend({log: self.log, config: self.config});
 
-    self.setupConnections();
+    if (self.config.useConnectionStatusWatcher) {
+        self.setupConnectionsWatcher();
+    } else {
+        self.setupConnections();
+    }
 
     // TODO make the other clients accessible via req.app
 
@@ -117,7 +121,6 @@ function App(opts) {
 
         req.app = self;
         req.backend = self.backend;
-        req.wfapi = self.wfapi;
 
         next();
     });
@@ -152,9 +155,33 @@ function App(opts) {
     self.setupAdminSever();
 }
 
+
 App.prototype.setupConnections = function setupConnections() {
     var self = this;
 
+    self.moray = self.createMorayClient();
+    self.ufds = self.createUfdsClient(self.config.ufds);
+    self.wfapi =  self.createWorkflowClient(self.config.wfapi);
+
+    self.cnapi = new CNAPI(self.config.cnapi);
+    self.vmapi = new VMAPI(self.config.vmapi);
+    self.imgapi = new IMGAPI(self.config.imgapi);
+};
+
+
+App.prototype.createWorkflowClient = function createWorkflowClient() {
+    var self = this;
+    var wfclient = new wfapi(self.config.wfapi, self.log);
+    wfclient.connect(function () {
+        self.log.info('wfapi is ready');
+    });
+    return wfclient;
+};
+
+
+App.prototype.setupConnectionsWatcher = function setupConnectionsWatcher() {
+    var self = this;
+
     self.connWatcher = new ConnectionStatusWatcher({
         app: self
     });
@@ -240,13 +267,7 @@ App.prototype.setupConnections = function setupConnections() {
         }
     });
 
-    self.createUfdsClient(self.config.ufds, function (err, ufds) {
-        if (err) {
-            self.log.error({ err: err }, 'ufds error');
-            return;
-        }
-        self.ufds = ufds;
-    });
+    self.ufds = self.createUfdsClient(self.config.ufds);
 };
 
 
@@ -426,12 +447,13 @@ App.prototype.createMorayClient = function createMorayClient() {
     return client;
 };
 
+
 /**
  * Creates a UFDS client instance pointing to the UFDS server provided
- * in options. callback will be called either with Error - cb(err) - or
- * with the recently instantiated client object: cb(null, ufds_client)
+ * in options.
  */
-App.prototype.createUfdsClient = function (options, callback) {
+
+App.prototype.createUfdsClient = function (options) {
     options.log = this.log;
     var ufds = new UFDS(options);
 
@@ -443,15 +465,15 @@ App.prototype.createUfdsClient = function (options, callback) {
         ufds.on('connect', function () {
             options.log.info('UFDS reconnected');
         });
-        callback(null, ufds);
     });
 
     ufds.once('error', function (err) {
         // You are screwed. It's likely that the bind credentials were bad.
         // Treat this as fatal and move on:
         options.log.error({err: err}, 'UFDS connection error');
-        callback(err);
     });
+
+    return ufds;
 };
 
 /*
diff --git a/lib/endpoints/build.js b/lib/endpoints/build.js
index a5ad4b2..4b0f9f6 100644
--- a/lib/endpoints/build.js
+++ b/lib/endpoints/build.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var path = require('path');
@@ -93,7 +93,7 @@ function build(req, res, next) {
         req: req,
         req_id: req.getId(),
         res: res,
-        wfapi: req.wfapi
+        wfapi: req.app.wfapi
     }, function (err) {
         if (err) {
             log.error('docker build error', err);
diff --git a/lib/endpoints/images.js b/lib/endpoints/images.js
index e553ea3..1acb511 100644
--- a/lib/endpoints/images.js
+++ b/lib/endpoints/images.js
@@ -120,7 +120,7 @@ function imageCreate(req, res, next) {
         req: req,
         req_id: req.getId(),
         res: res,
-        wfapi: req.wfapi,
+        wfapi: req.app.wfapi,
         account: req.account
     }, function () {
         // XXX NOTHING returned from this??? No 'err'?
diff --git a/sapi_manifests/docker/template b/sapi_manifests/docker/template
index 652cf95..0b8e384 100644
--- a/sapi_manifests/docker/template
+++ b/sapi_manifests/docker/template
@@ -95,5 +95,6 @@
             "initialDelay": 1000
         },
         "clientTimeout": 120000
-    }
+    },
+    "useConnectionStatusWatcher": false
 }
-- 
2.21.0

