From 61fe7effa7a871f135b4920d5ded507b8e6cfeff Mon Sep 17 00:00:00 2001
From: Bryan Cantrill <bryan@joyent.com>
Date: Thu, 21 Feb 2019 19:07:09 +0000
Subject: [PATCH] OS-7605 add mdb format character for jazzed-up binary output

---
 usr/src/cmd/mdb/common/mdb/mdb_fmt.c | 78 +++++++++++++++++++++++++++-
 usr/src/man/man1/mdb.1               |  7 +--
 2 files changed, 80 insertions(+), 5 deletions(-)

diff --git a/usr/src/cmd/mdb/common/mdb/mdb_fmt.c b/usr/src/cmd/mdb/common/mdb/mdb_fmt.c
index 471d918ca5..00ea7bb240 100644
--- a/usr/src/cmd/mdb/common/mdb/mdb_fmt.c
+++ b/usr/src/cmd/mdb/common/mdb/mdb_fmt.c
@@ -21,7 +21,7 @@
 /*
  * Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
- * Copyright 2018 Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  * Copyright (c) 2017 by Delphix. All rights reserved.
  */
 
@@ -120,6 +120,7 @@ static const char help_match64[] = "long long";
 static const char help_match16[] = "short";
 static const char help_uintptr[] = "hexadecimal uintptr_t";
 static const char help_ctf[] = "whose size is inferred by CTF info";
+static const char help_jazzed[] = "jazzed-up binary unsigned long long";
 
 /*ARGSUSED*/
 static mdb_tgt_addr_t
@@ -470,6 +471,79 @@ fmt_binary(mdb_tgt_t *t, mdb_tgt_as_t as, mdb_tgt_addr_t addr, size_t cnt)
 	return (addr);
 }
 
+static mdb_tgt_addr_t
+fmt_jazzed(mdb_tgt_t *t, mdb_tgt_as_t as, mdb_tgt_addr_t addr, size_t cnt)
+{
+	uint64_t x;
+	char buf[256];
+
+	while (cnt-- != 0) {
+		boolean_t header = B_TRUE;
+
+		if (mdb_tgt_aread(t, as, &x, sizeof (x), addr) != sizeof (x)) {
+			warn("failed to read data from target");
+			break;
+		}
+
+		mdb_nv_set_value(mdb.m_rvalue, x);
+		addr += sizeof (x);
+
+		mdb_iob_printf(mdb.m_out, "%s\n",
+		    numtostr(x, 2, NTOS_UNSIGNED));
+
+		while (x != 0) {
+			int b = 63, forearm;
+			int i = 0;
+
+			/*
+			 * Find the high bit...
+			 */
+			while (!(x & (1ULL << b)))
+				b--;
+
+			/*
+			 * ...and iterate over the remaining bits, putting
+			 * the upper arm in our buffer for any set bit (and
+			 * a space otherwise).
+			 */
+			while (x & ((1ULL << b) - 1)) {
+				buf[i++] = x & (1ULL << b) ? '|' : ' ';
+				b--;
+			}
+
+			/*
+			 * If this is the header line, print the upper arm
+			 * for the lowest set bit and continue...
+			 */
+			if (header) {
+				header = B_FALSE;
+				buf[i] = '\0';
+				mdb_iob_printf(mdb.m_out, "%s|\n", buf);
+				continue;
+			}
+
+			/*
+			 * ...otherwise, put the elbow and forearm into our
+			 * buffer, and print it.
+			 */
+			buf[i++] = '+';
+
+			for (forearm = b; forearm > -2; forearm--)
+				buf[i++] = '-';
+
+			buf[i] = '\0';
+			mdb_iob_printf(mdb.m_out, "%s bit %d\n", buf, b);
+
+			/*
+			 * Finally, clear the lowest set bit and continue.
+			 */
+			x &= ~(1ULL << b);
+		}
+	}
+
+	return (addr);
+}
+
 static mdb_tgt_addr_t
 fmt_hex64(mdb_tgt_t *t, mdb_tgt_as_t as, mdb_tgt_addr_t addr, size_t cnt)
 {
@@ -610,7 +684,7 @@ static const mdb_fmt_desc_t fmttab[] = {
 	{ FMT_PRINTF, "%-16llq", NULL, 8 },			/* 103 = g */
 	{ FMT_FUNC, FUNCP(fmt_swapshort), help_swapshort, 2 },	/* 104 = h */
 	{ FMT_FUNC, FUNCP(fmt_instr), help_instr, 0 },		/* 105 = i */
-	{ FMT_NONE, NULL, NULL, 0 },				/* 106 = j */
+	{ FMT_FUNC, FUNCP(fmt_jazzed), help_jazzed, 8 },	/* 106 = j */
 	{ FMT_NONE, NULL, NULL, 0 },				/* 107 = k */
 	{ FMT_MATCH, NULL, help_match16, 2 },			/* 108 = l */
 	{ FMT_NONE, NULL, NULL, 0 },				/* 109 = m */
diff --git a/usr/src/man/man1/mdb.1 b/usr/src/man/man1/mdb.1
index e93f822a81..e197836a1c 100644
--- a/usr/src/man/man1/mdb.1
+++ b/usr/src/man/man1/mdb.1
@@ -1,11 +1,11 @@
 '\" te
 .\" Copyright (c) 2005, Sun Microsystems, Inc. All Rights Reserved.
-.\" Copyright (c) 2017, Joyent, Inc. All Rights Reserved.
+.\" Copyright (c) 2019, Joyent, Inc. All Rights Reserved.
 .\" Copyright (c) 2014, 2017 by Delphix. All rights reserved.
 .\" The contents of this file are subject to the terms of the Common Development and Distribution License (the "License").  You may not use this file except in compliance with the License.
 .\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE or http://www.opensolaris.org/os/licensing.  See the License for the specific language governing permissions and limitations under the License.
 .\" When distributing Covered Code, include this CDDL HEADER in each file and include the License file at usr/src/OPENSOLARIS.LICENSE.  If applicable, add the following below this CDDL HEADER, with the fields enclosed by brackets "[]" replaced with your own identifying information: Portions Copyright [yyyy] [name of copyright owner]
-.TH MDB 1 "Dec 9, 2017"
+.TH MDB 1 "Feb 21, 2019"
 .SH NAME
 mdb \- modular debugger
 .SH SYNOPSIS
@@ -1346,7 +1346,7 @@ N	newline
 O	octal unsigned int (4 bytes)
 P	symbol (4 or 8 bytes)
 Q	octal signed int (4 bytes)
-R	binary int (8 bytes)
+R	binary unsigned long long (8 bytes)
 S	T{
 string using C string notation (variable size)
 T}
@@ -1369,6 +1369,7 @@ f	float (4 bytes)
 g	octal signed long long (8 bytes)
 h	swap bytes (2 bytes)
 i	disassembled instruction (variable size)
+j	jazzed-up binary unsigned long long (8 bytes)
 n	newline
 o	octal unsigned short (2 bytes)
 p	symbol (4 or 8 bytes)
-- 
2.21.0

