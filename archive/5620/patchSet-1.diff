commit d4ce97e8ec0816d61d8e18db44b788b034d299bc (refs/changes/20/5620/1)
Author: Bryan Cantrill <bryan@joyent.com>
Date:   2019-02-21T19:07:09+00:00 (8 months ago)
    
    OS-7605 add mdb format character for jazzed-up binary output

diff --git a/usr/src/cmd/mdb/common/mdb/mdb_fmt.c b/usr/src/cmd/mdb/common/mdb/mdb_fmt.c
index 471d918ca5..883a60f636 100644
--- a/usr/src/cmd/mdb/common/mdb/mdb_fmt.c
+++ b/usr/src/cmd/mdb/common/mdb/mdb_fmt.c
@@ -21,7 +21,7 @@
 /*
  * Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
- * Copyright 2018 Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  * Copyright (c) 2017 by Delphix. All rights reserved.
  */
 
@@ -120,6 +120,7 @@ static const char help_match64[] = "long long";
 static const char help_match16[] = "short";
 static const char help_uintptr[] = "hexadecimal uintptr_t";
 static const char help_ctf[] = "whose size is inferred by CTF info";
+static const char help_jazzed[] = "jazzed-up binary unsigned long long";
 
 /*ARGSUSED*/
 static mdb_tgt_addr_t
@@ -470,6 +471,79 @@ fmt_binary(mdb_tgt_t *t, mdb_tgt_as_t as, mdb_tgt_addr_t addr, size_t cnt)
 	return (addr);
 }
 
+static mdb_tgt_addr_t
+fmt_jazzed(mdb_tgt_t *t, mdb_tgt_as_t as, mdb_tgt_addr_t addr, size_t cnt)
+{
+	uint64_t x;
+	char buf[256];
+
+	while (cnt-- != 0) {
+		boolean_t header = B_TRUE;
+
+		if (mdb_tgt_aread(t, as, &x, sizeof (x), addr) != sizeof (x)) {
+			warn("failed to read data from target");
+			break;
+		}
+
+		mdb_nv_set_value(mdb.m_rvalue, x);
+		addr += sizeof (x);
+
+		mdb_iob_printf(mdb.m_out, "%s\n",
+		    numtostr(x, 2, NTOS_UNSIGNED));
+
+		while (x) {
+			int b = 63, forearm;
+			int i = 0;
+
+			/*
+			 * Find the high bit...
+			 */
+			while (!(x & (1ULL << b)))
+				b--;
+
+			/*
+			 * ...and iterate over the remaining bits, putting
+			 * the upper arm in our buffer for any set bit (and
+			 * a space otherwise).
+			 */
+			while (x & ((1ULL << b) - 1)) {
+				buf[i++] = x & (1ULL << b) ? '|' : ' ';
+				b--;
+			}
+
+			/*
+			 * If this is the header line, print the upper arm
+			 * for the lowest set bit and continue...
+			 */
+			if (header) {
+				header = B_FALSE;
+				buf[i] = '\0';
+				mdb_iob_printf(mdb.m_out, "%s|\n", buf);
+				continue;
+			}
+
+			/*
+			 * ...otherwise, put the elbow and forearm into our
+			 * buffer, and print it.
+			 */
+			buf[i++] = '+';
+
+			for (forearm = b; forearm > -2; forearm--)
+				buf[i++] = '-';
+
+			buf[i] = '\0';
+			mdb_iob_printf(mdb.m_out, "%s bit %lld\n", buf, b);
+
+			/*
+			 * Finally, clear the lowest set bit and continue.
+			 */
+			x &= ~(1ULL << b);
+		}
+	}
+
+	return (addr);
+}
+
 static mdb_tgt_addr_t
 fmt_hex64(mdb_tgt_t *t, mdb_tgt_as_t as, mdb_tgt_addr_t addr, size_t cnt)
 {
@@ -610,7 +684,7 @@ static const mdb_fmt_desc_t fmttab[] = {
 	{ FMT_PRINTF, "%-16llq", NULL, 8 },			/* 103 = g */
 	{ FMT_FUNC, FUNCP(fmt_swapshort), help_swapshort, 2 },	/* 104 = h */
 	{ FMT_FUNC, FUNCP(fmt_instr), help_instr, 0 },		/* 105 = i */
-	{ FMT_NONE, NULL, NULL, 0 },				/* 106 = j */
+	{ FMT_FUNC, FUNCP(fmt_jazzed), help_jazzed, 8 },	/* 106 = j */
 	{ FMT_NONE, NULL, NULL, 0 },				/* 107 = k */
 	{ FMT_MATCH, NULL, help_match16, 2 },			/* 108 = l */
 	{ FMT_NONE, NULL, NULL, 0 },				/* 109 = m */
diff --git a/usr/src/man/man1/mdb.1 b/usr/src/man/man1/mdb.1
index e93f822a81..855d1c1874 100644
--- a/usr/src/man/man1/mdb.1
+++ b/usr/src/man/man1/mdb.1
@@ -1346,7 +1346,7 @@ N	newline
 O	octal unsigned int (4 bytes)
 P	symbol (4 or 8 bytes)
 Q	octal signed int (4 bytes)
-R	binary int (8 bytes)
+R	binary unsigned long long (8 bytes)
 S	T{
 string using C string notation (variable size)
 T}
@@ -1369,6 +1369,7 @@ f	float (4 bytes)
 g	octal signed long long (8 bytes)
 h	swap bytes (2 bytes)
 i	disassembled instruction (variable size)
+j	jazzed-up binary unsigned long long (8 bytes)
 n	newline
 o	octal unsigned short (2 bytes)
 p	symbol (4 or 8 bytes)
