From 5c1a99649cf9779e734e183d01625e9aaab91e7f Mon Sep 17 00:00:00 2001
From: "Joshua M. Clulow" <jmc@joyent.com>
Date: Thu, 27 Oct 2016 23:42:07 -0700
Subject: [PATCH] TOOLS-1586 v8plus support for node 0.12.X and 4.X

---
 v8plus_csup.c        |   4 ++
 v8plus_impl.h        |  98 +++++++++++++++++++++++++----
 v8plus_objectwrap.cc |  57 ++++++++---------
 v8plus_subr.cc       | 142 +++++++++++++++++++++++++++++--------------
 4 files changed, 214 insertions(+), 87 deletions(-)

diff --git a/v8plus_csup.c b/v8plus_csup.c
index 5859e15..37b73c2 100644
--- a/v8plus_csup.c
+++ b/v8plus_csup.c
@@ -100,7 +100,11 @@ v8plus_in_event_thread(void)
 }
 
 static void
+#if NODE_VERSION_AT_LEAST(0, 12, 0)
+v8plus_async_callback(uv_async_t *async __UNUSED)
+#else
 v8plus_async_callback(uv_async_t *async __UNUSED, int status __UNUSED)
+#endif
 {
 	if (v8plus_in_event_thread() != B_TRUE)
 		v8plus_panic("async callback called outside of event loop");
diff --git a/v8plus_impl.h b/v8plus_impl.h
index dbd2e12..0c284ca 100644
--- a/v8plus_impl.h
+++ b/v8plus_impl.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2014 Joyent, Inc.  All rights reserved.
+ * Copyright 2016 Joyent, Inc.
  */
 
 #ifndef	_V8PLUS_IMPL_H
@@ -25,8 +25,75 @@
  * included from C code and contains nothing usable by consumers.
  */
 
-#define	V8PLUS_THROW_PENDING()		\
-    v8::ThrowException(v8plus::exception(_v8plus_pending_exception))
+#if NODE_VERSION_AT_LEAST(0, 12, 0)
+#define	V8PLUS_THROW_PENDING()						\
+	v8::Isolate::GetCurrent()->ThrowException(v8plus::exception(	\
+	    _v8plus_pending_exception))
+#else
+#define	V8PLUS_THROW_PENDING()						\
+	v8::ThrowException(v8plus::exception(_v8plus_pending_exception))
+#endif
+
+/*
+ * As of Node 0.12, the included V8 version requires the consumer to be aware
+ * of which "Isolate" is in use.  A variety of functions now require an isolate
+ * argument.  These definitions allow us to locate the correct isolate in Node
+ * versions that require one.
+ */
+#if NODE_VERSION_AT_LEAST(0, 12, 0)
+#define	DECLARE_ISOLATE_FROM_OBJECT(vname, obj)				\
+	v8::Isolate *vname = obj->CreationContext()->GetIsolate()
+#define	DECLARE_ISOLATE_FROM_ARGS(vname, args)				\
+	v8::Isolate *vname = args.GetIsolate()
+#define	DECLARE_ISOLATE_FROM_CURRENT(vname)				\
+	v8::Isolate *vname = v8::Isolate::GetCurrent()
+#define	USE_ISOLATE(i)			i,
+#define	USE_ISOLATE_ONLY(i)		i
+#define	ISOLATE_OR_UNUSED(argname)	v8::Isolate *argname
+#define	ISOLATE_OR_NULL(i)		i
+#define	V8_GET_GLOBAL(iso)		iso->GetCurrentContext()->Global()
+
+#else	/* pre 0.12 */
+#define	DECLARE_ISOLATE_FROM_OBJECT(vname, obj)
+#define	DECLARE_ISOLATE_FROM_ARGS(vname, args)
+#define	DECLARE_ISOLATE_FROM_CURRENT(vname)
+#define	USE_ISOLATE(i)
+#define	USE_ISOLATE_ONLY(i)
+#define	ISOLATE_OR_UNUSED(argname)	void *argname __UNUSED
+#define	ISOLATE_OR_NULL(i)		NULL
+#define	V8_GET_GLOBAL(iso)		v8::Context::GetCurrent()->Global()
+
+#endif
+
+/*
+ * Node 0.12 changed the allocation of strings to be more explicit about the
+ * encoding, and to require the consumer to pass the isolate.
+ */
+#if NODE_VERSION_AT_LEAST(0, 12, 0)
+#define	V8_STRING_NEW(isolate, cstr)					\
+	v8::String::NewFromUtf8(isolate, cstr)
+#define	V8_SYMBOL_NEW(isolate, cstr)					\
+	v8::String::NewFromUtf8(isolate, cstr, v8::String::kInternalizedString)
+#else
+#define	V8_STRING_NEW(isolate, cstr)	v8::String::New(cstr)
+#define	V8_SYMBOL_NEW(isolate, cstr)	v8::String::NewSymbol(cstr)
+#endif
+
+#define	V8_EXTERNAL_NEW(isolate, ptr)					\
+	v8::External::New(USE_ISOLATE(isolate) reinterpret_cast<void*>(ptr))
+#define	V8_FUNCTMPL_NEW(isolate, funcp, externalp)			\
+	v8::FunctionTemplate::New(USE_ISOLATE(isolate) funcp, externalp)
+#define	V8_UNDEFINED(isolate)						\
+	v8::Undefined(USE_ISOLATE_ONLY(isolate))
+#define	V8_NULL(isolate)						\
+	v8::Null(USE_ISOLATE_ONLY(isolate))
+#define	V8_ARRAY_NEW(isolate)						\
+	v8::Array::New(USE_ISOLATE_ONLY(isolate))
+#define	V8_OBJECT_NEW(isolate)						\
+	v8::Object::New(USE_ISOLATE_ONLY(isolate))
+
+#define	V8PLUS_NVPAIR_TO_V8_VALUE(isolate, nvpair)			\
+	v8plus::nvpair_to_v8_Value(ISOLATE_OR_NULL(isolate), nvpair)
 
 /*
  * This is all very gross.  V8 has a lot of pointless churn in the form of
@@ -38,20 +105,26 @@
  *
  * Way to go, Google.
  */
-#if NODE_VERSION_AT_LEAST(0, 11, 3)
-#define	RETURN_NODE_MAKECALLBACK(_f, _c, _v)	\
-do {						\
+#if NODE_VERSION_AT_LEAST(0, 12, 0)
+#define	RETURN_NODE_MAKECALLBACK(_i, _f, _c, _v)	\
+do {							\
+	node::MakeCallback(_i, handle(), _f, _c, _v);	\
+	return (V8_UNDEFINED(_i));			\
+} while (0)
+#elif NODE_VERSION_AT_LEAST(0, 11, 3)
+#define	RETURN_NODE_MAKECALLBACK(_i, _f, _c, _v)	\
+do {							\
 	node::MakeCallback(handle(), _f, _c, _v);	\
-	return (v8::Undefined());		\
+	return (V8_UNDEFINED(_i));			\
 } while (0)
 #elif NODE_VERSION_AT_LEAST(0, 8, 0)
-#define	RETURN_NODE_MAKECALLBACK(_f, _c, _v)	\
+#define	RETURN_NODE_MAKECALLBACK(_i, _f, _c, _v)	\
     return (node::MakeCallback(handle_, _f, _c, _v))
 #else
-#define	RETURN_NODE_MAKECALLBACK(_f, _c, _v)	\
-do {						\
+#define	RETURN_NODE_MAKECALLBACK(_i, _f, _c, _v)	\
+do {							\
 	node::MakeCallback(handle_, _f, _c, _v);	\
-	return (v8::Undefined());		\
+	return (V8_UNDEFINED(_i));			\
 } while (0)
 #endif
 
@@ -216,7 +289,8 @@ private:
 };
 
 extern nvlist_t *v8_Arguments_to_nvlist(const V8_ARGUMENTS &);
-extern v8::Handle<v8::Value> nvpair_to_v8_Value(const nvpair_t *);
+extern v8::Handle<v8::Value> nvpair_to_v8_Value(ISOLATE_OR_UNUSED(_),
+    const nvpair_t *);
 extern v8::Handle<v8::Value> exception(const nvlist_t *);
 
 }; /* namespace v8plus */
diff --git a/v8plus_objectwrap.cc b/v8plus_objectwrap.cc
index 4af3d6c..eadd345 100644
--- a/v8plus_objectwrap.cc
+++ b/v8plus_objectwrap.cc
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2014 Joyent, Inc.  All rights reserved.
+ * Copyright 2016 Joyent, Inc.
  */
 
 #include <sys/types.h>
@@ -99,6 +99,7 @@ v8plus::ObjectWrap::init(v8::Handle<v8::Object> target,
 	uint_t i;
 	const char *name;
 	v8plus_func_ctx_t *fcp;
+	DECLARE_ISOLATE_FROM_OBJECT(iso, target);
 	v8plus_module_defn_t *mdp =
 #if NODE_MODULE_VERSION - 13 > 0
 	    reinterpret_cast<v8plus_module_defn_t *>(priv);
@@ -120,14 +121,13 @@ v8plus::ObjectWrap::init(v8::Handle<v8::Object> target,
 		fcp->vfc_static = &mdp->vmd_static_methods[i];
 		fcp->vfc_method = NULL;
 
-		v8::Local<v8::External> ext =
-		    v8::External::New(reinterpret_cast<void*>(fcp));
-		v8::Local<v8::FunctionTemplate> fth =
-			    v8::FunctionTemplate::New(_static_entry, ext);
+		v8::Local<v8::External> ext = V8_EXTERNAL_NEW(iso, fcp);
+		v8::Local<v8::FunctionTemplate> fth = V8_FUNCTMPL_NEW(iso,
+		    _static_entry, ext);
 		v8::Local<v8::Function> fh = fth->GetFunction();
 
-		fh->SetName(v8::String::New(name));
-		target->Set(v8::String::NewSymbol(name), fh);
+		fh->SetName(V8_STRING_NEW(iso, name));
+		target->Set(V8_SYMBOL_NEW(iso, name), fh);
 	}
 
 	if (mdp->vmd_method_count > 0) {
@@ -142,14 +142,12 @@ v8plus::ObjectWrap::init(v8::Handle<v8::Object> target,
 		fcp->vfc_static = NULL;
 		fcp->vfc_method = NULL;
 
-		v8::Local<v8::External> ext =
-		    v8::External::New(reinterpret_cast<void *>(fcp));
+		v8::Local<v8::External> ext = V8_EXTERNAL_NEW(iso, fcp);
 
-		v8::Local<v8::FunctionTemplate> tpl =
-		    v8::FunctionTemplate::New(_new, ext);
+		v8::Local<v8::FunctionTemplate> tpl = V8_FUNCTMPL_NEW(iso,
+		    _new, ext);
 
-		tpl->SetClassName(v8::String::NewSymbol(
-		    mdp->vmd_js_class_name));
+		tpl->SetClassName(V8_SYMBOL_NEW(iso, mdp->vmd_js_class_name));
 		tpl->InstanceTemplate()->SetInternalFieldCount(
 		    mdp->vmd_method_count);
 
@@ -168,24 +166,24 @@ v8plus::ObjectWrap::init(v8::Handle<v8::Object> target,
 			mfcp->vfc_static = NULL;
 			mfcp->vfc_method = &mdp->vmd_methods[i];
 
-			v8::Local<v8::External> fext =
-			    v8::External::New(reinterpret_cast<void *>(mfcp));
+			v8::Local<v8::External> fext = V8_EXTERNAL_NEW(iso,
+			    mfcp);
 
-			v8::Local<v8::FunctionTemplate> fth =
-			    v8::FunctionTemplate::New(_entry, fext);
+			v8::Local<v8::FunctionTemplate> fth = V8_FUNCTMPL_NEW(
+			    iso, _entry, fext);
 			v8::Local<v8::Function> fh = fth->GetFunction();
 
-			fh->SetName(v8::String::New(name));
+			fh->SetName(V8_STRING_NEW(iso, name));
 
-			tpl->PrototypeTemplate()->Set(
-			    v8::String::NewSymbol(name), fh);
+			tpl->PrototypeTemplate()->Set(V8_SYMBOL_NEW(iso, name),
+			    fh);
 		}
 
 		V8_PF_ASSIGN(fcp->vfc_ctor, tpl->GetFunction());
 
-		target->Set(v8::String::NewSymbol(mdp->vmd_js_factory_name),
-		    v8::FunctionTemplate::New(
-		    v8plus::ObjectWrap::cons, ext)->GetFunction());
+		target->Set(V8_SYMBOL_NEW(iso, mdp->vmd_js_factory_name),
+		    V8_FUNCTMPL_NEW(iso, v8plus::ObjectWrap::cons, ext)->
+		    GetFunction());
 	}
 
 	v8plus_crossthread_init();
@@ -291,6 +289,7 @@ V8_JS_FUNC_DEFN(v8plus::ObjectWrap::_entry, args)
 	v8::String::Utf8Value selfsv(self);
 	const char *fn = *selfsv;
 	v8plus_c_method_f c_method = fcp->vfc_method->md_c_func;
+	DECLARE_ISOLATE_FROM_ARGS(iso, args);
 
 	if (c_method == NULL)
 		v8plus_panic("impossible method name %s\n", fn);
@@ -313,7 +312,7 @@ V8_JS_FUNC_DEFN(v8plus::ObjectWrap::_entry, args)
 			v8plus_panic("bad encoded value in return");
 		} else {
 			v8::Handle<v8::Value> r =
-			    v8plus::nvpair_to_v8_Value(rpp);
+			    V8PLUS_NVPAIR_TO_V8_VALUE(iso, rpp);
 			nvlist_free(c_out);
 			V8_JS_FUNC_RETURN_CLOSE(args, scope, r);
 		}
@@ -338,6 +337,7 @@ V8_JS_FUNC_DEFN(v8plus::ObjectWrap::_static_entry, args)
 	v8::String::Utf8Value selfsv(self);
 	const char *fn = *selfsv;
 	v8plus_c_static_f c_static = fcp->vfc_static->sd_c_func;
+	DECLARE_ISOLATE_FROM_ARGS(iso, args);
 
 	if (c_static == NULL)
 		v8plus_panic("impossible static method name %s\n", fn);
@@ -360,7 +360,7 @@ V8_JS_FUNC_DEFN(v8plus::ObjectWrap::_static_entry, args)
 			v8plus_panic("bad encoded value in return");
 		} else {
 			v8::Handle<v8::Value> r =
-			    v8plus::nvpair_to_v8_Value(rpp);
+			    V8PLUS_NVPAIR_TO_V8_VALUE(iso, rpp);
 			nvlist_free(c_out);
 			V8_JS_FUNC_RETURN_CLOSE(args, scope, r);
 		}
@@ -374,16 +374,17 @@ v8::Handle<v8::Value>
 v8plus::ObjectWrap::call(const char *name,
     int argc, v8::Handle<v8::Value> argv[])
 {
-	v8::Local<v8::Value> f = handle_->Get(v8::String::NewSymbol(name));
+	DECLARE_ISOLATE_FROM_CURRENT(iso);
+	v8::Local<v8::Value> f = handle_->Get(V8_SYMBOL_NEW(iso, name));
 
 	/*
  	 * XXX - we'd like to throw here, but for some reason our TryCatch
  	 * block doesn't seem to handle the exception.
  	 */
 	if (!f->IsFunction())
-		return (v8::Undefined());
+		return (V8_UNDEFINED(iso));
 
-	RETURN_NODE_MAKECALLBACK(name, argc, argv);
+	RETURN_NODE_MAKECALLBACK(iso, name, argc, argv);
 }
 
 void
diff --git a/v8plus_subr.cc b/v8plus_subr.cc
index 36cc845..8c7ee34 100644
--- a/v8plus_subr.cc
+++ b/v8plus_subr.cc
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2014 Joyent, Inc.  All rights reserved.
+ * Copyright 2016 Joyent, Inc.
  */
 
 #include <sys/types.h>
@@ -16,8 +16,25 @@
 #include "v8plus_c_impl.h"
 #include "v8plus_impl.h"
 
-#define	V8_EXCEPTION_CTOR_FMT \
-	"_ZN2v89Exception%u%sENS_6HandleINS_6StringEEE"
+#if NODE_VERSION_AT_LEAST(4, 0, 0)
+
+/*
+ * In Node 4.X, the signature of the C++ constructor for exception objects has
+ * changed.  For example, the "Error" constructor is now:
+ *
+ *	v8::Exception::Error(v8::Local<v8::String>)
+ */
+#define	V8_EXCEPTION_CTOR_FMT	"_ZN2v89Exception%u%sENS_5LocalINS_6StringEEE"
+#define	V8_EXCEPTION_CTOR_ARGS	v8::Local<v8::String>
+#else
+/*
+ * In older Node versions, the C++ function signature was of the form:
+ *
+ *	v8::Exception::Error(v8::Handle<v8::String>)
+ */
+#define	V8_EXCEPTION_CTOR_FMT	"_ZN2v89Exception%u%sENS_6HandleINS_6StringEEE"
+#define	V8_EXCEPTION_CTOR_ARGS	v8::Handle<v8::String>
+#endif
 
 typedef struct cb_hdl {
 	v8::Handle<v8::Function> ch_hdl;
@@ -93,6 +110,7 @@ static int
 v8_Object_to_nvlist(const v8::Handle<v8::Value> &vh, nvlist_t *lp)
 {
 	v8::Local<v8::Object> oh = vh->ToObject();
+	DECLARE_ISOLATE_FROM_OBJECT(iso, oh);
 	v8::Local<v8::Array> keys = oh->GetPropertyNames();
 	v8::Local<v8::String> th = oh->GetConstructorName();
 	v8::String::Utf8Value tv(th);
@@ -133,7 +151,7 @@ v8_Object_to_nvlist(const v8::Handle<v8::Value> &vh, nvlist_t *lp)
 	if (is_excp) {
 		v8::Local<v8::Value> mv;
 
-		mv = oh->Get(v8::String::New("message"));
+		mv = oh->Get(V8_STRING_NEW(iso, "message"));
 
 		if ((err = nvlist_add_v8_Value(lp, "message", mv)) != 0)
 			return (err);
@@ -146,7 +164,7 @@ v8_Object_to_nvlist(const v8::Handle<v8::Value> &vh, nvlist_t *lp)
 		const char *k;
 
 		(void) snprintf(knname, sizeof (knname), "%u", i);
-		mk = keys->Get(v8::String::New(knname));
+		mk = keys->Get(V8_STRING_NEW(iso, knname));
 		mv = oh->Get(mk);
 		v8::String::Utf8Value mks(mk);
 		k = cstr(mks);
@@ -285,7 +303,8 @@ v8plus::v8_Arguments_to_nvlist(const V8_ARGUMENTS &args)
 }
 
 static void
-decorate_object(v8::Local<v8::Object> &oh, const nvlist_t *lp)
+decorate_object(ISOLATE_OR_UNUSED(iso), v8::Local<v8::Object> &oh,
+    const nvlist_t *lp)
 {
 	nvpair_t *pp = NULL;
 
@@ -293,59 +312,74 @@ decorate_object(v8::Local<v8::Object> &oh, const nvlist_t *lp)
 	    nvlist_next_nvpair(const_cast<nvlist_t *>(lp), pp)) != NULL) {
 		if (strcmp(nvpair_name(pp), V8PLUS_OBJ_TYPE_MEMBER) == 0)
 			continue;
-		oh->Set(v8::String::New(nvpair_name(pp)),
-		    v8plus::nvpair_to_v8_Value(pp));
+		oh->Set(V8_STRING_NEW(iso, nvpair_name(pp)),
+		    V8PLUS_NVPAIR_TO_V8_VALUE(iso, pp));
 	}
 }
 
 static v8::Handle<v8::Value>
-create_and_populate(const nvlist_t *lp, const char *deftype)
+create_and_populate(ISOLATE_OR_UNUSED(iso), const nvlist_t *lp,
+    const char *deftype)
 {
 	v8::Local<v8::Object> oh;
 	const char *type;
-	const char *msg;
 	char *ctor_name;
-	v8::Local<v8::Value> (*excp_ctor)(v8::Handle<v8::String>);
+	v8::Local<v8::Value> (*excp_ctor)(V8_EXCEPTION_CTOR_ARGS);
 	v8::Local<v8::Value> array;
 	void *obj_hdl;
-	size_t len;
 	boolean_t is_array = _B_FALSE;
 	boolean_t is_excp = _B_FALSE;
 	v8::Local<v8::Value> excp;
-	v8::Local<v8::String> jsmsg;
 
 	if (nvlist_lookup_string(const_cast<nvlist_t *>(lp),
-	    V8PLUS_OBJ_TYPE_MEMBER, const_cast<char **>(&type)) != 0)
+	    V8PLUS_OBJ_TYPE_MEMBER, const_cast<char **>(&type)) != 0) {
 		type = deftype;
+	}
 
 	if (strcmp(type, "Array") == 0) {
-		array = v8::Array::New();
+		array = V8_ARRAY_NEW(iso);
 		oh = array->ToObject();
 		is_array = _B_TRUE;
 	} else if (strcmp(type, "Object") == 0) {
-		oh = v8::Object::New();
+		oh = V8_OBJECT_NEW(iso);
 	} else {
-		msg = "";
+		const char *msg = "";
+		size_t len;
+		v8::Local<v8::String> jsmsg;
+
+		/*
+		 * Look for a "message" property in the nvlist.
+		 */
 		(void) nvlist_lookup_string(const_cast<nvlist_t *>(lp),
 		    "message", const_cast<char **>(&msg));
-		jsmsg = v8::String::New(msg);
+		jsmsg = V8_STRING_NEW(iso, msg);
 
+		/*
+		 * Determine the name of the C++ constructor function for the
+		 * type we are trying to create.
+		 */
 		len = snprintf(NULL, 0, V8_EXCEPTION_CTOR_FMT,
 		    (uint_t)strlen(type), type);
 		ctor_name = reinterpret_cast<char *>(alloca(len + 1));
 		(void) snprintf(ctor_name, len + 1, V8_EXCEPTION_CTOR_FMT,
 		    (uint_t)strlen(type), type);
 
+		/*
+		 * Though this almost certainly contravenes some kind of peace
+		 * time treaty, we are about to locate the particular C++
+		 * function in memory and call it.
+		 */
 		obj_hdl = dlopen(NULL, RTLD_NOLOAD);
 		if (obj_hdl == NULL)
 			v8plus_panic("%s\n", dlerror());
 
-		excp_ctor = (v8::Local<v8::Value>(*)(v8::Handle<v8::String>))(
+		excp_ctor = (v8::Local<v8::Value>(*)(V8_EXCEPTION_CTOR_ARGS))(
 		    dlsym(obj_hdl, ctor_name));
 
 		if (excp_ctor == NULL) {
 			(void) dlclose(obj_hdl);
-			v8plus_panic("Unencodable type %s, aborting\n", type);
+			v8plus_panic("Unencodable type \"%s\", aborting\n",
+			    type);
 		}
 
 		is_excp = _B_TRUE;
@@ -355,7 +389,7 @@ create_and_populate(const nvlist_t *lp, const char *deftype)
 		oh = excp->ToObject();
 	}
 
-	decorate_object(oh, lp);
+	decorate_object(iso, oh, lp);
 
 	if (is_array)
 		return (array);
@@ -365,21 +399,21 @@ create_and_populate(const nvlist_t *lp, const char *deftype)
 	return (oh);
 }
 
-#define	RETURN_JS(_p, _jt, _ct, _xt, _pt) \
+#define	RETURN_JS(_iso, _p, _jt, _ct, _xt, _pt) \
 	do { \
 		_ct _v; \
 		(void) nvpair_value_##_pt(const_cast<nvpair_t *>(_p), &_v); \
-		return (v8::_jt::New((_xt)_v)); \
+		return (v8::_jt::New(USE_ISOLATE(_iso) (_xt)_v)); \
 	} while (0)
 
 v8::Handle<v8::Value>
-v8plus::nvpair_to_v8_Value(const nvpair_t *pp)
+v8plus::nvpair_to_v8_Value(ISOLATE_OR_UNUSED(iso), const nvpair_t *pp)
 {
 	switch (nvpair_type(const_cast<nvpair_t *>(pp))) {
 	case DATA_TYPE_BOOLEAN:
-		return (v8::Undefined());
+		return (V8_UNDEFINED(iso));
 	case DATA_TYPE_BOOLEAN_VALUE:
-		RETURN_JS(pp, Boolean, boolean_t, bool, boolean_value);
+		RETURN_JS(iso, pp, Boolean, boolean_t, bool, boolean_value);
 	case DATA_TYPE_BYTE:
 	{
 		uint8_t _v = (uint8_t)-1;
@@ -389,28 +423,34 @@ v8plus::nvpair_to_v8_Value(const nvpair_t *pp)
 			v8plus_panic("bad byte value %02x\n", _v);
 		}
 
-		return (v8::Null());
+		return (V8_NULL(iso));
 	}
 	case DATA_TYPE_INT8:
-		RETURN_JS(pp, Number, int8_t, double, int8);
+		RETURN_JS(iso, pp, Number, int8_t, double, int8);
 	case DATA_TYPE_UINT8:
-		RETURN_JS(pp, Number, uint8_t, double, uint8);
+		RETURN_JS(iso, pp, Number, uint8_t, double, uint8);
 	case DATA_TYPE_INT16:
-		RETURN_JS(pp, Number, int16_t, double, int16);
+		RETURN_JS(iso, pp, Number, int16_t, double, int16);
 	case DATA_TYPE_UINT16:
-		RETURN_JS(pp, Number, uint16_t, double, uint16);
+		RETURN_JS(iso, pp, Number, uint16_t, double, uint16);
 	case DATA_TYPE_INT32:
-		RETURN_JS(pp, Number, int32_t, double, int32);
+		RETURN_JS(iso, pp, Number, int32_t, double, int32);
 	case DATA_TYPE_UINT32:
-		RETURN_JS(pp, Number, uint32_t, double, uint32);
+		RETURN_JS(iso, pp, Number, uint32_t, double, uint32);
 	case DATA_TYPE_INT64:
-		RETURN_JS(pp, Number, int64_t, double, int64);
+		RETURN_JS(iso, pp, Number, int64_t, double, int64);
 	case DATA_TYPE_UINT64:
-		RETURN_JS(pp, Number, uint64_t, double, uint64);
+		RETURN_JS(iso, pp, Number, uint64_t, double, uint64);
 	case DATA_TYPE_DOUBLE:
-		RETURN_JS(pp, Number, double, double, double);
+		RETURN_JS(iso, pp, Number, double, double, double);
 	case DATA_TYPE_STRING:
-		RETURN_JS(pp, String, char *, const char *, string);
+	{
+		char *vp;
+
+		(void) nvpair_value_string(const_cast<nvpair_t *>(pp), &vp);
+
+		return (V8_STRING_NEW(iso, vp));
+	}
 	case DATA_TYPE_UINT64_ARRAY:
 	{
 		std::unordered_map<uint64_t, cb_hdl_t>::iterator it;
@@ -434,7 +474,7 @@ v8plus::nvpair_to_v8_Value(const nvpair_t *pp)
 
 		(void) nvpair_value_nvlist(const_cast<nvpair_t *>(pp), &lp);
 
-		return (create_and_populate(lp, "Object"));
+		return (create_and_populate(iso, lp, "Object"));
 	}
 	default:
 		v8plus_panic("bad data type %d\n",
@@ -442,7 +482,7 @@ v8plus::nvpair_to_v8_Value(const nvpair_t *pp)
 	}
 
 	/*NOTREACHED*/
-	return (v8::Undefined());
+	return (V8_UNDEFINED(iso));
 }
 
 #undef	RETURN_JS
@@ -461,7 +501,8 @@ nvlist_length(const nvlist_t *lp)
 }
 
 static void
-nvlist_to_v8_argv(const nvlist_t *lp, int *argcp, v8::Handle<v8::Value> *argv)
+nvlist_to_v8_argv(ISOLATE_OR_UNUSED(iso), const nvlist_t *lp, int *argcp,
+    v8::Handle<v8::Value> *argv)
 {
 	nvpair_t *pp;
 	char name[16];
@@ -472,7 +513,7 @@ nvlist_to_v8_argv(const nvlist_t *lp, int *argcp, v8::Handle<v8::Value> *argv)
 		if (nvlist_lookup_nvpair(const_cast<nvlist_t *>(lp),
 		    name, &pp) != 0)
 			break;
-		argv[i] = v8plus::nvpair_to_v8_Value(pp);
+		argv[i] = V8PLUS_NVPAIR_TO_V8_VALUE(iso, pp);
 	}
 
 	*argcp = i;
@@ -481,7 +522,9 @@ nvlist_to_v8_argv(const nvlist_t *lp, int *argcp, v8::Handle<v8::Value> *argv)
 v8::Handle<v8::Value>
 v8plus::exception(const nvlist_t *lp)
 {
-	return (create_and_populate(lp, "Error"));
+	DECLARE_ISOLATE_FROM_CURRENT(iso);
+
+	return (create_and_populate(ISOLATE_OR_NULL(iso), lp, "Error"));
 }
 
 extern "C" nvlist_t *
@@ -494,12 +537,13 @@ v8plus_call_direct(v8plus_jsfunc_t f, const nvlist_t *lp)
 	v8::Handle<v8::Value> argv[max_argc];
 	v8::Handle<v8::Value> res;
 	nvlist_t *rp;
+	DECLARE_ISOLATE_FROM_CURRENT(iso);
 
 	if ((it = cbhash.find(f)) == cbhash.end())
 		v8plus_panic("callback hash tag %llu not found", f);
 
 	argc = max_argc;
-	nvlist_to_v8_argv(lp, &argc, argv);
+	nvlist_to_v8_argv(ISOLATE_OR_NULL(iso), lp, &argc, argv);
 
 	if ((err = nvlist_alloc(&rp, NV_UNIQUE_NAME, 0)) != 0)
 		return (v8plus_nverr(err, NULL));
@@ -507,10 +551,9 @@ v8plus_call_direct(v8plus_jsfunc_t f, const nvlist_t *lp)
 	v8::TryCatch tc;
 	if (it->second.ch_persist) {
 		res = V8_LOCAL(it->second.ch_phdl, v8::Function)->Call(
-		    v8::Context::GetCurrent()->Global(), argc, argv);
+		    V8_GET_GLOBAL(iso), argc, argv);
 	} else {
-		res = it->second.ch_hdl->Call(
-		    v8::Context::GetCurrent()->Global(), argc, argv);
+		res = it->second.ch_hdl->Call(V8_GET_GLOBAL(iso), argc, argv);
 	}
 	if (tc.HasCaught()) {
 		v8plus_throw_v8_exception(tc.Exception());
@@ -535,12 +578,13 @@ v8plus_method_call_direct(void *cop, const char *name, const nvlist_t *lp)
 	v8::Handle<v8::Value> argv[max_argc];
 	v8::Handle<v8::Value> res;
 	nvlist_t *rp;
+	DECLARE_ISOLATE_FROM_CURRENT(iso);
 
 	if (v8plus_in_event_thread() != _B_TRUE)
 		v8plus_panic("direct method call outside of event loop");
 
 	argc = max_argc;
-	nvlist_to_v8_argv(lp, &argc, argv);
+	nvlist_to_v8_argv(ISOLATE_OR_NULL(iso), lp, &argc, argv);
 
 	if ((err = nvlist_alloc(&rp, NV_UNIQUE_NAME, 0)) != 0)
 		return (v8plus_nverr(err, NULL));
@@ -615,7 +659,11 @@ v8plus_jsfunc_rele_direct(v8plus_jsfunc_t f)
 
 	if (--it->second.ch_refs == 0) {
 		if (it->second.ch_persist) {
+#if NODE_VERSION_AT_LEAST(0, 12, 0)
+			it->second.ch_phdl.Reset();
+#else
 			it->second.ch_phdl.Dispose();
+#endif
 		}
 		cbhash.erase(it);
 	}
-- 
2.21.0

