From 7f3e2c6466b405faa0a1f86be292d3d7d7ac4346 Mon Sep 17 00:00:00 2001
From: Marsell Kukuljevic <marsell@joyent.com>
Date: Sat, 11 Feb 2017 01:04:18 +0800
Subject: [PATCH] PUBAPI-1216: Enhance cloudapi to accept a "primary":
 (true/false) argument for add_nic action PUBAPI-1363: AddNic no longer works
 with fabrics

---
 docs/index.md     |  7 +++++
 lib/nics.js       |  6 ++++
 test/common.js    |  2 +-
 test/nics.test.js | 74 +++++++++++++++++++++++++++++++++++++++++++++--
 4 files changed, 86 insertions(+), 3 deletions(-)

diff --git a/docs/index.md b/docs/index.md
index f3e1a08..31719a5 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -8321,6 +8321,7 @@ Creates a new NIC on an instance belonging to a given account.
 **Field** | **Type** | **Description**
 --------- | -------- | ---------------
 network   | UUID     | ID of network this NIC should attach to
+primary   | Boolean  | Whether this NIC should be the instance's primary
 
 ### Returns
 
@@ -8345,6 +8346,12 @@ a `state` of 'provisioning'. Once it's 'running', the NIC is active on the
 instance. If the provision fails, the NIC will be removed and the location will
 start returning 404.
 
+A primary NIC has its network's gateway set as the default in an instance,
+and if the network has any resolvers they are added to the instance's
+/etc/resolv.conf. NB: currently creating a primary NIC within 30s of other NIC
+addition/removal activity on an instance may result in the new NIC's primary
+flag being unset.
+
 ### Errors
 
 For all possible errors, see [CloudAPI HTTP Responses](#cloudapi-http-responses).
diff --git a/lib/nics.js b/lib/nics.js
index 47a5358..528a7fe 100644
--- a/lib/nics.js
+++ b/lib/nics.js
@@ -105,6 +105,7 @@ function addNic(req, res, next) {
     var ownerUuid   = req.account.uuid;
     var login       = req.account.login;
     var networkUuid = req.params.network;
+    var primary     = req.params.primary;
     var origin      = req.params.origin || 'cloudapi';
     var context = {
         caller: req._auditCtx,
@@ -120,6 +121,9 @@ function addNic(req, res, next) {
         return next(new InvalidArgumentError(errMsg));
     }
 
+    // only true boolean or string converts to true; everything else false
+    primary = (primary === 'true' || primary === true);
+
     var network, nic;  // filled in by the vasync-called functions
 
     function getNetworkPool(_, cb) {
@@ -301,8 +305,10 @@ function addNic(req, res, next) {
         req.sdc.napi.provisionNic(network.uuid, {
             belongs_to_uuid: vmUuid,
             belongs_to_type: 'zone',
+            cn_uuid: serverUuid,
             owner_uuid: ownerUuid,
             state: 'provisioning',
+            primary: primary,
             origin: origin,
             context: context
         }, {
diff --git a/test/common.js b/test/common.js
index 9ea766a..7f5f1e9 100644
--- a/test/common.js
+++ b/test/common.js
@@ -57,7 +57,7 @@ var PASSWD = 'secret123';
 var DEFAULT_CFG = path.join(__dirname, '..', '/etc/cloudapi.cfg');
 
 var LOG = new bunyan.createLogger({
-    level: process.env.LOG_LEVEL || 'info',
+    level: process.env.LOG_LEVEL || 'warn',
     name: 'sdccloudapitest',
     stream: process.stderr,
     serializers: restify.bunyan.serializers
diff --git a/test/nics.test.js b/test/nics.test.js
index 5612063..b6b7732 100644
--- a/test/nics.test.js
+++ b/test/nics.test.js
@@ -709,7 +709,9 @@ function removeNic(t, instId, nic) {
 }
 
 function waitTilNicDeleted(t, apiPath) {
-    var count = 30;
+    // XXX sometimes NICs take a very long time to delete due to long-reboot
+    // times that some zones experience
+    var count = 120;
 
     function check() {
         count--;
@@ -722,7 +724,13 @@ function waitTilNicDeleted(t, apiPath) {
         CLIENT.get(apiPath, function (err, req, res, nic) {
             if (err) {
                 t.equal(err.statusCode, 404);
-                t.end();
+
+                // XXX and we need to delay this callback because otherwise we
+                // sometimes race with net-agent writing to NAPI for subsequent
+                // tests
+                setTimeout(function () {
+                    t.end();
+                }, 10000);
             } else {
                 setTimeout(check, 5000);
             }
@@ -772,6 +780,7 @@ test('nics', function (tt) {
         });
     });
 
+
     // this also checks that a VM creates with an external and internal nic by
     // default if the package doesn't list networks
     tt.test('  List NICs', function (t) {
@@ -1451,6 +1460,66 @@ test('nics', function (tt) {
     });
 
 
+    tt.test('  Create primary NIC', function (t) {
+        var path = '/my/machines/' + fixtures.instId + '/nics';
+        var args = {
+            network: fixtures.networks[0].network.uuid,
+            primary: true
+        };
+
+        CLIENT.post(path, args, function (err, req, res, nic) {
+            t.ifError(err, 'POST ' + path);
+            t.equal(res.statusCode, 201, 'CreateNic 201 statusCode');
+
+            t.equal(nic.primary, true, 'nic is primary');
+
+            var location = res.headers.location;
+            t.ok(location);
+
+            instNic = nic;
+
+            CLIENT.get(path, function (err2, req2, res2, nics) {
+                t.ifError(err2);
+                t.equal(res2.statusCode, 200);
+
+                var primaryNics = nics.filter(function (n) {
+                    return n.primary;
+                });
+
+                t.equal(primaryNics.length, 1, 'only one primary nic allowed');
+                var primaryNic = primaryNics[0];
+
+                t.deepEqual(primaryNic.mac, nic.mac, 'mac equal');
+                t.deepEqual(primaryNic.network, nic.network, 'network equal');
+
+                waitTilNicAdded(t, location);
+            });
+        });
+    });
+
+
+    tt.test('  Confirm NIC is still primary after provisioning', function (t) {
+        var mac = instNic.mac.replace(/\:/g, '');
+        var path = '/my/machines/' + fixtures.instId + '/nics/' + mac;
+
+        CLIENT.get(path, function (err, req, res, nic) {
+            t.ifError(err);
+            t.equal(res.statusCode, 200);
+
+            t.equal(instNic.mac, nic.mac, 'NIC macs match');
+            t.equal(instNic.network, nic.network, 'NIC networks match');
+            t.equal(nic.primary, true, 'NIC is primary');
+
+            t.end();
+        });
+    });
+
+
+    tt.test('  Remove primary NIC', function (t) {
+        removeNic(t, fixtures.instId, instNic);
+    });
+
+
     tt.test('  Create NIC using network pool', function (t) {
         var path = '/my/machines/' + fixtures.instId + '/nics';
         var args = { network: fixtures.networks[0].pool.uuid };
@@ -1487,6 +1556,7 @@ test('nics', function (tt) {
         });
     });
 
+
     tt.test('  Remove NIC using network pool', function (t) {
         removeNic(t, fixtures.instId, instNic);
     });
-- 
2.21.0

