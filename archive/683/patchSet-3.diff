commit 02653a1d6a7cd95cb3fb54e08241f228da288fed (refs/changes/83/683/3)
Author: Todd Whiteman <todd.whiteman@joyent.com>
Date:   2016-10-14T20:32:29-07:00 (3 years ago)
    
    DOCKER-950 docker pull fails on registry that does not use authentication
    Reviewed by: Trent Mick <trentm@gmail.com>

diff --git a/CHANGES.md b/CHANGES.md
index 9c3ad1e..5fb41ad 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -1,6 +1,10 @@
 # node-docker-registry-client Changelog
 
-## not yet released
+## 3.2.3 (not yet released)
+
+## 3.2.2
+
+- DOCKER-950 Docker pull fails on registry that does not use authentication
 
 ## 3.2.1
 
diff --git a/lib/registry-client-v2.js b/lib/registry-client-v2.js
index 41f17ab..26078fd 100644
--- a/lib/registry-client-v2.js
+++ b/lib/registry-client-v2.js
@@ -68,18 +68,20 @@ function _basicAuthHeader(username, password) {
 
 
 /*
- * Return an appropriate "Authorization" HTTP header for the given auth info.
+ * Set the "Authorization" HTTP header into the headers object from the given
+ * auth info.
  * - Bearer auth if `token`.
- * - Else, Basic auth if `username` and `password`.
- * - Else, undefined
+ * - Else, Basic auth if `username`.
+ * - Else, if the authorization key exists, then it is removed from headers.
  */
-function _authHeaderFromAuthInfo(authInfo) {
+function _setAuthHeaderFromAuthInfo(headers, authInfo) {
     if (authInfo.token) {
-        return 'Bearer ' + authInfo.token;
-    } else if (authInfo.username && authInfo.password) {
-        return _basicAuthHeader(authInfo.username, authInfo.password);
-    } else {
-        return undefined;
+        headers.authorization = 'Bearer ' + authInfo.token;
+    } else if (authInfo.username) {
+        headers.authorization = _basicAuthHeader(authInfo.username,
+            authInfo.password);
+    } else if (headers.authorization) {
+        delete headers.authorization;
     }
 }
 
@@ -184,10 +186,10 @@ function _getToken(opts, cb) {
 
     if (opts.username) {
         query.account = opts.username;
-    }
-    if (opts.username && opts.password) {
-        headers.authorization = _basicAuthHeader(opts.username,
-            opts.password);
+        _setAuthHeaderFromAuthInfo(headers, {
+            username: opts.username,
+            password: opts.password
+        });
     }
     if (Object.keys(query).length) {
         tokenUrl += '?' + querystring.stringify(query);
@@ -572,8 +574,7 @@ function _verifyJws(jws) {
  *      - opts.log {Bunyan Logger} Optional.
  *      - opts.username {String} Optional. Set this and `opts.password` for
  *        Basic auth.
- *      - opts.password {String} Optional, but required if `opts.username` is
- *        provided.
+ *      - opts.password {String} Optional.
  *      - opts.authInfo {Object} Optional. This is an auth object result
  *        from the top-level `login` (a.k.a.
  *        `require('docker-registry-client').loginV2()`.)
@@ -598,12 +599,7 @@ function ping(opts, cb) {
     assert.optionalObject(opts.log, 'opts.log');
     // Auth options:
     assert.optionalString(opts.username, 'opts.username');
-    if (opts.username) {
-        assert.string(opts.password,
-            'opts.password required if username given');
-    } else {
-        assert.optionalString(opts.password, 'opts.password');
-    }
+    assert.optionalString(opts.password, 'opts.password');
     assert.optionalObject(opts.authInfo, 'opts.authInfo');
     // HTTP client basic options:
     assert.optionalBool(opts.insecure, 'opts.insecure');
@@ -676,10 +672,13 @@ function ping(opts, cb) {
 
     var headers = {};
     if (opts.authInfo) {
-        headers.authorization = _authHeaderFromAuthInfo(opts.authInfo);
+        _setAuthHeaderFromAuthInfo(headers, opts.authInfo);
+        assert.string(headers.authentication, 'headers.authentication');
     } else if (opts.username) {
-        headers.authorization = _basicAuthHeader(opts.username,
-            opts.password);
+        _setAuthHeaderFromAuthInfo(headers, {
+            username: opts.username,
+            password: opts.password
+        });
     }
 
     client.get({
@@ -999,13 +998,13 @@ function RegistryClientV2(opts) {
     this.password = opts.password;
     this._loggedIn = false;
     this._authInfo = null;
-    this._headers = {
-        authorization: _authHeaderFromAuthInfo({
-            token: opts.token,
-            username: opts.username,
-            password: opts.password
-        })
-    };
+    this._headers = {};
+
+    _setAuthHeaderFromAuthInfo(this._headers, {
+        token: opts.token,
+        username: opts.username,
+        password: opts.password
+    });
 
     // XXX relevant for v2?
     //this._cookieJar = new tough.CookieJar();
@@ -1123,8 +1122,7 @@ RegistryClientV2.prototype.login = function regLogin(opts, cb) {
             assert.ok(result);
             self._loggedIn = true;
             self._authInfo = result.authInfo;
-            self._headers.authorization =
-                _authHeaderFromAuthInfo(self._authInfo);
+            _setAuthHeaderFromAuthInfo(self._headers, self._authInfo);
         }
         self.log.trace({err: err, loggedIn: self._loggedIn}, 'login: done');
         cb(err);
diff --git a/package.json b/package.json
index 85e5600..0514975 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
     "name": "docker-registry-client",
-    "version": "3.2.1",
+    "version": "3.2.2",
     "description": "node.js client for the Docker Registry API",
     "author": "Joyent (joyent.com)",
     "main": "./lib/index.js",
