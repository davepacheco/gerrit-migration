commit c2d06328bc491447bddf5c993f5d09100884d674 (refs/changes/32/1232/2)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2017-01-13T01:03:44+00:00 (2 years, 9 months ago)
    
    joyent/node-cueball#61 mod_assert.optionalX allows null, needs to be handled
    Reviewed by: David Pacheco <dap@joyent.com>

diff --git a/lib/agent.js b/lib/agent.js
index bb031f1..08c8e80 100644
--- a/lib/agent.js
+++ b/lib/agent.js
@@ -80,7 +80,8 @@ function CueBallAgent(options) {
 	mod_assert.optionalBool(options.errorOnEmpty, 'options.errorOnEmpty');
 	this.cba_errOnEmpty = options.errorOnEmpty;
 
-	if (options.initialDomains !== undefined) {
+	if (options.initialDomains !== undefined &&
+	    options.initialDomains !== null) {
 		var self = this;
 		options.initialDomains.forEach(function (host) {
 			self.addPool(host, {});
@@ -165,7 +166,8 @@ CueBallAgent.prototype.addPool = function (host, options) {
 		} else {
 			nsock = mod_net.createConnection(opts);
 		}
-		if (self.tcpKAID !== undefined) {
+		if (self.tcpKAID !== undefined &&
+		    self.tcpKAID !== null) {
 			nsock.on('connect', function () {
 				if (USE_SECURECONNECT &&
 				    self.protocol === 'https:') {
@@ -179,7 +181,8 @@ CueBallAgent.prototype.addPool = function (host, options) {
 		}
 		return (nsock);
 	}
-	if (this.cba_ping !== undefined) {
+	if (this.cba_ping !== undefined &&
+	    this.cba_ping !== null) {
 		poolOpts.checkTimeout = this.cba_pingInterval || 30000;
 		poolOpts.checker = this.checkSocket.bind(this, host);
 	}
diff --git a/lib/connection-fsm.js b/lib/connection-fsm.js
index bcbd5a1..737a18a 100644
--- a/lib/connection-fsm.js
+++ b/lib/connection-fsm.js
@@ -56,7 +56,7 @@ function ConnectionFSM(options) {
 	this.cf_closeAfter = false;
 	mod_assert.optionalBool(options.doRef, 'options.doRef');
 	this.cf_doRef = options.doRef;
-	if (this.cf_doRef === undefined)
+	if (this.cf_doRef === undefined && this.cf_doRef !== null)
 		this.cf_doRef = true;
 	this.cf_oldListeners = {};
 	this.cf_checkTimeout = options.checkTimeout;
@@ -462,7 +462,8 @@ ConnectionFSM.prototype.state_idle = function (S) {
 	S.on(this, 'closeAsserted', function () {
 		S.gotoState('closed');
 	});
-	if (this.cf_checkTimeout !== undefined) {
+	if (this.cf_checkTimeout !== undefined &&
+	    this.cf_checkTimeout !== null) {
 		var now = new Date();
 		var sinceLast = (now - this.cf_lastCheck);
 		var delay;
@@ -628,7 +629,8 @@ ConnectionFSM.prototype.state_busy = function (S) {
 		self.cf_lastError = new mod_errors.ConnectionClosedError(self);
 		S.gotoState('error');
 	});
-	if (this.cf_checkTimeout !== undefined) {
+	if (this.cf_checkTimeout !== undefined &&
+	    this.cf_checkTimeout !== null) {
 		var t = S.timeout(this.cf_checkTimeout, function () {
 			var info = {};
 			info.stack = self.cf_claimStack;
diff --git a/lib/pool.js b/lib/pool.js
index de42c04..3c44674 100644
--- a/lib/pool.js
+++ b/lib/pool.js
@@ -687,7 +687,7 @@ CueBallConnectionPool.prototype.claim = function (options, cb) {
 	mod_assert.object(options, 'options');
 	mod_assert.optionalNumber(options.timeout, 'options.timeout');
 	var timeout = options.timeout;
-	if (timeout === undefined)
+	if (timeout === undefined || timeout === null)
 		timeout = Infinity;
 	mod_assert.optionalBool(options.errorOnEmpty, 'options.errorOnEmpty');
 	var errOnEmpty = options.errorOnEmpty;
diff --git a/lib/resolver.js b/lib/resolver.js
index fe43450..3ee2fb3 100644
--- a/lib/resolver.js
+++ b/lib/resolver.js
@@ -1130,7 +1130,7 @@ function CueBallStaticResolver(options) {
 		mod_assert.ok(mod_net.isIP(backend.address),
 		    'options.backends[' + i +
 		    '].address must be an IP address');
-		if (backend.port === undefined)
+		if (backend.port === undefined || backend.port === null)
 			backend.port = options.defaultPort;
 		mod_assert.number(backend.port,
 		    'options.backends[' + i + '].port');
diff --git a/lib/utils.js b/lib/utils.js
index 2c6db69..8e8c95c 100644
--- a/lib/utils.js
+++ b/lib/utils.js
@@ -98,7 +98,7 @@ function assertRecoverySet(obj) {
 }
 
 function assertRecovery(obj, name) {
-	if (name === undefined)
+	if (name === undefined || name === null)
 		name = 'recovery';
 	mod_assert.object(obj, name);
 	var ks = {};
@@ -113,6 +113,7 @@ function assertRecovery(obj, name) {
 	delete (ks.timeout);
 	mod_assert.optionalNumber(obj.maxTimeout, name + '.maxTimeout');
 	mod_assert.ok(obj.maxTimeout === undefined ||
+	    obj.maxTimeout === null ||
 	    obj.timeout <= obj.maxTimeout,
 	    name + '.maxTimeout must be >= timeout');
 	delete (ks.maxTimeout);
@@ -122,13 +123,14 @@ function assertRecovery(obj, name) {
 	delete (ks.delay);
 	mod_assert.optionalNumber(obj.maxDelay, name + '.maxDelay');
 	mod_assert.ok(obj.maxDelay === undefined ||
+	    obj.maxDelay === null ||
 	    obj.delay <= obj.maxDelay,
 	    name + '.maxDelay must be >= delay');
 	delete (ks.maxDelay);
 	mod_assert.deepEqual(Object.keys(ks), []);
 
 	var mult;
-	if (obj.maxDelay === undefined) {
+	if (obj.maxDelay === undefined || obj.maxDelay === null) {
 		mod_assert.ok(obj.retries < 32,
 		    name + '.maxDelay is required when retries >= 32 ' +
 		    '(exponential increase becomes unreasonably large)');
@@ -139,7 +141,7 @@ function assertRecovery(obj, name) {
 		    'retries and delay (effective unspecified maxDelay is ' +
 		    ' > 1 day)');
 	}
-	if (obj.maxTimeout === undefined) {
+	if (obj.maxTimeout === undefined || obj.maxTimeout === null) {
 		mod_assert.ok(obj.retries < 32,
 		    name + '.maxTimeout is required when retries >= 32 ' +
 		    '(exponential increase becomes unreasonably large)');
