From a4150bc5f05273f811521378323b84630f024459 Mon Sep 17 00:00:00 2001
From: Trent Mick <trentm@gmail.com>
Date: Thu, 30 May 2019 17:02:56 -0700
Subject: [PATCH] TOOLS-604 want tooling to check copyrights

---
 Makefile               |  10 +-
 tools/check-copyright  | 203 +++++++++++++++++++++++++++++++++++++++++
 tools/mk/Makefile.targ |  35 +++++--
 3 files changed, 238 insertions(+), 10 deletions(-)
 create mode 100755 tools/check-copyright

diff --git a/Makefile b/Makefile
index 5f441d6..1a4cc00 100644
--- a/Makefile
+++ b/Makefile
@@ -5,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2019, Joyent, Inc.
+# Copyright 2019 Joyent, Inc.
 #
 
 #
@@ -101,6 +101,7 @@ TOP ?= $(error Unable to access eng.git submodule Makefiles.)
 # Configuration used by Makefile.defs and Makefile.targ to generate
 # "check" and "docs" targets.
 #
+BASH_FILES =		tools/check-copyright
 DOC_FILES =		index.md boilerplateapi.md
 JSON_FILES =		package.json
 JS_FILES :=		$(shell find lib test -name '*.js') tools/bashstyle
@@ -130,7 +131,10 @@ ifeq ($(shell uname -s),SunOS)
 	NODE_PREBUILT_TAG = zone
 	include ./deps/eng/tools/mk/Makefile.node_prebuilt.defs
 else
-	include ./deps/eng/tools/mk/Makefile.node.defs
+	NPM=npm
+	NODE=node
+	NPM_EXEC=$(shell which npm)
+	NODE_EXEC=$(shell which node)
 endif
 
 #
@@ -279,8 +283,6 @@ ifeq ($(shell uname -s),SunOS)
 	include ./deps/eng/tools/mk/Makefile.node_prebuilt.targ
 	include ./deps/eng/tools/mk/Makefile.go_prebuilt.targ
 	include ./deps/eng/tools/mk/Makefile.agent_prebuilt.targ
-else
-	include ./deps/eng/tools/mk/Makefile.node.targ
 endif
 
 MAN_SECTION :=		1
diff --git a/tools/check-copyright b/tools/check-copyright
new file mode 100755
index 0000000..b3b844f
--- /dev/null
+++ b/tools/check-copyright
@@ -0,0 +1,203 @@
+#!/bin/bash
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright 2019 Joyent, Inc.
+#
+
+#
+# Check that changed files (uncommitted and unpushed files) have the appropriate
+# Joyent copyright year and blessed format, per:
+# https://github.com/joyent/rfd/blob/master/rfd/0164/README.md#copyright-notice
+#
+# Usage: Run this anywhere in your git clone.
+#
+
+if [[ -n "$TRACE" ]]; then
+    # BASHSTYLED
+    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
+    set -o xtrace
+fi
+set -o errexit
+set -o pipefail
+
+#---- globals
+
+numErrors=0
+numWarnings=0
+year=
+top=$(git rev-parse --show-toplevel)
+optQuiet=
+optVerbose=
+optWarnOnlyOnFormat=
+declare -a optExcludePaths
+
+#---- support stuff
+
+function fatal
+{
+    echo "$0: fatal error: $*"
+    exit 1
+}
+
+function usage {
+    echo "Check the Joyent Copyright line in uncommitted and unpushed changes."
+    echo ""
+    echo "Usage:"
+    echo "    check-copyright [-h] [-q] [-v] [-W] [-x FILE]"
+    echo ""
+    echo "Option:"
+    echo "    -h       Print this usage."
+    echo "    -q       Quiet: no pithy statements, only errors and warnings."
+    echo "    -v       Verbose: show a message for each file processed."
+    echo "    -W       Warn only (instead of error) on copyright line format:"
+    echo "                 'Copyright <year> Joyent, Inc.'"
+    echo "    -x FILE  Exclude the given FILE (relative path from base of repo)"
+    echo "             from copyright checking. This can be used multiple times"
+    echo "             for multiple files."
+}
+
+function check_file {
+    local file
+    local path
+    local hit
+
+    file=$1
+    path=$top/$file
+
+    if [[ ! -f "$path" ]]; then
+        # E.g. a changed directory (as from a git submodule update).
+        if [[ -n "$optVerbose" ]]; then
+            echo "info: $file: not a file" >&2
+        fi
+        return
+    fi
+
+    hit=$((grep -i "copyright.*joyent" "$path" 2>/dev/null || true) | head -1)
+
+    # No Copyright line in this file.
+    if [[ -z "$hit" ]]; then
+        if [[ -n "$optVerbose" ]]; then
+            echo "info: $file: skipping (no Joyent Copyright line)" >&2
+        fi
+        return
+    fi
+
+    # Wrong copyright year?
+    if [[ "$hit" != *$year* ]]; then
+        echo "error: $file: copyright year not updated to $year: '$hit'" >&2
+        numErrors=$(( $numErrors + 1 ))
+        return;
+    fi
+
+    # Wrong copyright format?
+    blessed='Copyright [0-9]{4} Joyent, Inc\.$'
+    if [[ ! "$hit" =~ $blessed ]]; then
+        if [[ -n "$optWarnOnlyOnFormat" ]]; then
+            echo "warning: $file: copyright not in RFD 164 form, '$hit'" \
+                "does not match /$blessed/" >&2
+            numWarnings=$(( $numWarnings + 1 ))
+        else
+            echo "error: $file: copyright not in RFD 164 form, '$hit'" \
+                "does not match /$blessed/" >&2
+            numErrors=$(( $numErrors + 1 ))
+        fi
+        return
+    fi
+
+    if [[ -n "$optVerbose" ]]; then
+        echo "info: $file: good!" >&2
+    fi
+}
+
+
+# ---- mainline
+
+while getopts "hqvWx:" opt
+do
+    case "$opt" in
+        h)
+            usage
+            exit 0
+            ;;
+        q)
+            optQuiet=1
+            ;;
+        v)
+            optVerbose=1
+            ;;
+        W)
+            optWarnOnlyOnFormat=1
+            ;;
+        x)
+            optExcludePaths+=("$OPTARG")
+            ;;
+        *)
+            usage 1>&2
+            exit 1
+            ;;
+    esac
+done
+shift $((OPTIND - 1))
+
+# Gather the files to possibly check.
+committedFiles=$(git diff --name-only master..)
+stagedFiles=$(git diff --name-only --staged)
+unstagedFiles=$(git diff --name-only)
+uniqFiles=$(echo "
+$committedFiles
+$stagedFiles
+$unstagedFiles
+" | sort | uniq | sed '/^$/d')
+IFS=$'\n' read -rd '' -a files <<<"$uniqFiles" || true
+
+# Year to check: If we only have committed files, use the last commit year.
+# This will then work for changes reviewed only in the new year.
+if [[ -n "$committedFiles" && -z "$stagedFiles" && -z "$unstagedFiles" ]]; then
+    year=$(git log -1 --pretty="%aI" | cut -d- -f1)
+else
+    year=$(date +%Y)
+fi
+
+# Handle path excludes.
+declare -a filteredFiles
+for file in "${files[@]}"; do
+    excludeIt=
+    for excludePath in "${optExcludePaths[@]}"; do
+        if [[ "$file" == "$excludePath" ]]; then
+            excludeIt=1
+            break
+        fi
+    done
+    if [[ -n "$excludeIt" ]]; then
+        if [[ -n "$optVerbose" ]]; then
+            echo "info: $file: excluded via '-x'" >&2
+        fi
+    else
+        filteredFiles+=("$file")
+    fi
+done
+
+# Check the files and count the errors.
+for file in "${filteredFiles[@]}"; do
+    check_file "$file"
+done
+
+# Print a pithy status (unless running with '-q').
+if [[ -n "$optQuiet" ]]; then
+    true # pass
+elif [[ ${#files[@]} -eq 0 ]]; then
+    echo "You haven't changed anything. Get to work!" >&2
+elif [[ $numErrors -eq 0 && $numWarnings -eq 0 ]]; then
+    echo "All clear! 🍻" >&2
+fi
+
+if [[ $numErrors -ne 0 ]]; then
+    exit 1
+else
+    exit 0
+fi
diff --git a/tools/mk/Makefile.targ b/tools/mk/Makefile.targ
index a9e1044..2b8734b 100644
--- a/tools/mk/Makefile.targ
+++ b/tools/mk/Makefile.targ
@@ -5,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2019, Joyent, Inc.
+# Copyright 2019 Joyent, Inc.
 #
 
 #
@@ -42,10 +42,19 @@
 #			file to determine the $(STAMP) of the uploaded bits
 #
 #	buildimage	Builds an image
-#	check		Checks JavaScript files for lint and style
-#			Checks bash scripts for syntax
-#			Checks SMF manifests for validity against the SMF DTD
-#			Checks rust files using `cargo check`
+#
+#	check		- check-jsl: Check JavaScript lint with 'jsl'
+#			  See JSL_ vars below.
+#			- check-jsstyle: Check JavaScript style with 'jsstyle'.
+#			  See JSSTYLE_ vars below.
+#			- check-bash: Checks $BASH_FILES for style.
+#			- check-manifests: Checks SMF manifests for validity
+#			  against the SMF DTD. See "Makefile.smf.defs".
+#			- check-rust: Checks rust files using `cargo check`.
+#			  See "RUST_" vars below.
+#			- check-copyright: Checks "Copyright" statements in
+#			  files different from master. See
+#			  "ENGBLD_CHECK_COPYRIGHT_" vars below.
 #
 #	clean		Removes built files
 #
@@ -104,6 +113,13 @@
 #
 #	RUST_CODE	Set this to enable rust code syntax checks.
 #
+#	ENGBLD_CHECK_COPYRIGHT_DISABLE
+#			Set this to disable "check-copyright".
+#	ENGBLD_CHECK_COPYRIGHT_ARGS
+#			Arguments to pass invocations of "check-copyright".
+# 			Run the following to see available options:
+#			    make check-copyright ENGBLD_CHECK_COPYRIGHT_ARGS=-h
+#
 # You can also override these variables:
 #
 #	BASH		Path to bash (default: "bash")
@@ -147,6 +163,8 @@
 BASH		?= bash
 BASHSTYLE   	?= $(NODE) deps/eng/tools/bashstyle
 CARGO		?= cargo
+ENGBLD_CHECK_COPYRIGHT ?= deps/eng/tools/check-copyright
+ENGBLD_CHECK_COPYRIGHT_ARGS ?= -q
 CP		?= cp
 CSCOPE		?= cscope
 CSCOPE_DIRS	?= .
@@ -268,8 +286,13 @@ RUST_CHECK_TARGET = $(if $(RUST_CODE), check-rust)
 check-rust:
 	$(CARGO) check
 
+_CHECK_COPYRIGHT_TARGET = $(if $(ENGBLD_CHECK_COPYRIGHT_DISABLE),,check-copyright)
+.PHONY: check-copyright
+check-copyright:
+	$(ENGBLD_CHECK_COPYRIGHT) $(ENGBLD_CHECK_COPYRIGHT_ARGS)
+
 .PHONY: check
-check:: $(ESLINT_TARGET) check-jsl check-json $(JSSTYLE_TARGET) check-bash $(RUST_CHECK_TARGET)
+check:: $(ESLINT_TARGET) check-jsl check-json $(JSSTYLE_TARGET) check-bash $(RUST_CHECK_TARGET) $(_CHECK_COPYRIGHT_TARGET)
 	@echo check ok
 
 .PHONY: clean
-- 
2.21.0

