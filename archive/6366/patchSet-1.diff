From 13c5474d5a214b85862b3f172aaadb5556dd0401 Mon Sep 17 00:00:00 2001
From: Trent Mick <trentm@gmail.com>
Date: Tue, 28 May 2019 13:20:30 -0700
Subject: [PATCH] TOOLS-604 want tooling to check copyrights

---
 tools/check-copyright  | 185 +++++++++++++++++++++++++++++++++++++++++
 tools/mk/Makefile.targ |  34 ++++++--
 2 files changed, 213 insertions(+), 6 deletions(-)
 create mode 100755 tools/check-copyright

diff --git a/tools/check-copyright b/tools/check-copyright
new file mode 100755
index 0000000..937214f
--- /dev/null
+++ b/tools/check-copyright
@@ -0,0 +1,185 @@
+#!/bin/bash
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright 2019 Joyent, Inc.
+#
+
+#
+# Check that changed files (uncommited and unpushed files) have the approrpriate
+# Joyent copyright year and blessed format, per:
+# https://github.com/joyent/rfd/blob/master/rfd/0164/README.md#copyright-notice
+#
+# Usage: Run this anywhere in your git clone.
+#
+
+if [[ -n "$TRACE" ]]; then
+    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
+    set -o xtrace
+fi
+set -o errexit
+set -o pipefail
+
+#---- globals
+
+errors=0
+year=$(date +%Y)
+top=$(git rev-parse --show-toplevel)
+optQuiet=
+optVerbose=
+optWarnOnlyOnFormat=
+optExcludePaths=
+
+#---- support stuff
+
+function fatal
+{
+    echo "$0: fatal error: $*"
+    exit 1
+}
+
+function usage {
+    echo "Check the Joyent Copyright line in uncommited and unpushed changes."
+    echo ""
+    echo "Usage:"
+    echo "    check-copyright [-h] [-q] [-v] [-W] [-x FILE]"
+    echo ""
+    echo "Option:"
+    echo "    -h       Print this usage."
+    echo "    -q       Quiet: no pithy statements, only errors and warnings."
+    echo "    -v       Verbose: show a message for each file processed."
+    echo "    -W       Warn only (instead of error) on copyright line format."
+    echo "                 'Copyright <year> Joyent, Inc.'"
+    echo "    -x FILE  Exclude the given FILE (relative path from base of repo)"
+    echo "             from copyright checking. This can be used multiple times"
+    echo "             for multiple files."
+}
+
+function check_file {
+    local path=$top/$1
+    local hit
+
+    if [[ ! -f $path ]]; then
+        # E.g. a changed directory (as from a git submodule update).
+        if [[ -n "$optVerbose" ]]; then
+            echo "info: $1: not a file" >&2
+        fi
+        return
+    fi
+
+    hit=$((grep -i "Copyright" $path 2>/dev/null || true) | (grep -i "Joyent" || true) | head -1)
+
+    # No Copyright line in this file.
+    if [[ -z "$hit" ]]; then
+        if [[ -n "$optVerbose" ]]; then
+            echo "info: $1: good (no Joyent Copyright line)" >&2
+        fi
+        return
+    fi
+
+    # Wrong copyright year?
+    if ! echo "$hit" | grep $year >/dev/null ; then
+        echo "error: $1: copyright year not updated to $year: '$hit'" >&2
+        errors=$(( $errors + 1 ))
+        return;
+    fi
+
+    # Wrong copyright format?
+    blessed='Copyright [0-9]{4} Joyent, Inc\.$'
+    if ! echo "$hit" | grep -E "$blessed" >/dev/null ; then
+        if [[ -n "$optWarnOnlyOnFormat" ]]; then
+            echo "warning: $1: copyright not in RFD 164 form, '$hit' does not match /$blessed/" >&2
+        else
+            echo "error: $1: copyright not in RFD 164 form, '$hit' does not match /$blessed/" >&2
+            errors=$(( $errors + 1 ))
+        fi
+        return
+    fi
+
+    if [[ -n "$optVerbose" ]]; then
+        echo "info: $1: good!" >&2
+    fi
+}
+
+
+# ---- mainline
+
+while getopts "hqvWx:" opt
+do
+    case "$opt" in
+        h)
+            usage
+            exit 0
+            ;;
+        q)
+            optQuiet=1
+            ;;
+        v)
+            optVerbose=1
+            ;;
+        W)
+            optWarnOnlyOnFormat=1
+            ;;
+        x)
+            optExcludePaths="$optExcludePaths $OPTARG"
+            ;;
+        *)
+            usage
+            exit 1
+            ;;
+    esac
+done
+shift $((OPTIND - 1))
+
+
+# Gather the files to potentially check.
+files="$(git diff --name-only master..)
+$(git diff --name-only --staged)
+$(git diff --name-only)"
+files=$(echo "$files" | sort | uniq)
+
+# Handle path excludes.
+filteredFiles=
+for file in $files; do
+    excludeIt=
+    for excludePath in $optExcludePaths; do
+        if [[ "$file" == "$excludePath" ]]; then
+            excludeIt=1
+            break
+        fi
+    done
+    if [[ -n "$excludeIt" ]]; then
+        if [[ -n "$optVerbose" ]]; then
+            echo "info: $file: excluded via '-x'"
+        fi
+    else
+        filteredFiles="$filteredFiles $file"
+    fi
+done
+
+
+# Check the files and count the errors.
+for file in $filteredFiles; do
+    check_file "$file"
+done
+
+if [[ -n "$optErrorOnWarnings" ]]; then
+    errors=$(( $errors + $warnings ))
+fi
+
+
+# Pithy status (unless running with '-q').
+trimmedFiles=$(echo "$files" | tr -d '[:space:]')
+if [[ -n "$optQuiet" ]]; then
+    true # pass
+elif [[ -z "$trimmedFiles" ]]; then
+    echo "You haven't changed anything. Get to work!" >&2
+elif [[ $errors -eq 0 && $warnings -eq 0 ]]; then
+    echo "All clear! 🍻" >&2
+fi
+
+exit $errors
diff --git a/tools/mk/Makefile.targ b/tools/mk/Makefile.targ
index a9e1044..3d1d989 100644
--- a/tools/mk/Makefile.targ
+++ b/tools/mk/Makefile.targ
@@ -5,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2019, Joyent, Inc.
+# Copyright 2019 Joyent, Inc.
 #
 
 #
@@ -42,10 +42,18 @@
 #			file to determine the $(STAMP) of the uploaded bits
 #
 #	buildimage	Builds an image
-#	check		Checks JavaScript files for lint and style
-#			Checks bash scripts for syntax
-#			Checks SMF manifests for validity against the SMF DTD
-#			Checks rust files using `cargo check`
+#
+#	check		- check-jsl: Check JavaScript lint with 'jsl'
+# 			  See JSL_ vars below.
+#			- check-jsstyle: Check JavaScript style with 'jsstyle'.
+# 			  See JSSTYLE_ vars below.
+#			- check-manifests: Checks SMF manifests for validity
+# 			  against the SMF DTD. See "Makefile.smf.defs".
+#			- check-rust: Checks rust files using `cargo check`.
+# 			  See "RUST_" vars below.
+#			- check-copyright: Checks "Copyright" statements in
+#			  files different from master. See
+#			  "ENGBLD_CHECK_COPYRIGHT_" vars below.
 #
 #	clean		Removes built files
 #
@@ -104,6 +112,13 @@
 #
 #	RUST_CODE	Set this to enable rust code syntax checks.
 #
+#	ENGBLD_CHECK_COPYRIGHT_DISABLE
+#			Set this to disable "check-copyright".
+#	ENGBLD_CHECK_COPYRIGHT_ARGS
+#			Arguments to pass invocations of "check-copyright".
+# 			Run the following to see available options:
+#			    make check-copyright ENGBLD_CHECK_COPYRIGHT_ARGS=-h
+#
 # You can also override these variables:
 #
 #	BASH		Path to bash (default: "bash")
@@ -147,6 +162,8 @@
 BASH		?= bash
 BASHSTYLE   	?= $(NODE) deps/eng/tools/bashstyle
 CARGO		?= cargo
+ENGBLD_CHECK_COPYRIGHT ?= deps/eng/tools/check-copyright
+ENGBLD_CHECK_COPYRIGHT_ARGS ?= -q
 CP		?= cp
 CSCOPE		?= cscope
 CSCOPE_DIRS	?= .
@@ -268,8 +285,13 @@ RUST_CHECK_TARGET = $(if $(RUST_CODE), check-rust)
 check-rust:
 	$(CARGO) check
 
+_CHECK_COPYRIGHT_TARGET = $(if $(ENGBLD_CHECK_COPYRIGHT_DISABLE),,check-copyright)
+.PHONY: check-copyright
+check-copyright:
+	$(ENGBLD_CHECK_COPYRIGHT) $(ENGBLD_CHECK_COPYRIGHT_ARGS)
+
 .PHONY: check
-check:: $(ESLINT_TARGET) check-jsl check-json $(JSSTYLE_TARGET) check-bash $(RUST_CHECK_TARGET)
+check:: $(ESLINT_TARGET) check-jsl check-json $(JSSTYLE_TARGET) check-bash $(RUST_CHECK_TARGET) $(_CHECK_COPYRIGHT_TARGET)
 	@echo check ok
 
 .PHONY: clean
-- 
2.21.0

