{"project":"joyent/eng","branch":"master","id":"I9a72f8893558ae1d78a444401a6924c83fe777ae","number":"6366","subject":"TOOLS-604 want tooling to check copyrights Reviewed by: Mike Gerdts \u003cmike.gerdts@joyent.com\u003e Approved by: Cody Peter Mello \u003cmelloc@writev.io\u003e","owner":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"url":"https://cr.joyent.us/6366","commitMessage":"TOOLS-604 want tooling to check copyrights\nReviewed by: Mike Gerdts \u003cmike.gerdts@joyent.com\u003e\nApproved by: Cody Peter Mello \u003cmelloc@writev.io\u003e\n","createdOn":1559074831,"lastUpdated":1560015683,"open":false,"status":"MERGED","comments":[{"timestamp":1559074831,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Uploaded patch set 1."},{"timestamp":1559074832,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Patch Set 1:\n\nNew commits:\n    \n    commit 6b91b421e59904d31e8ca8d4b898365e4c8d5a42\n    \n    add \u0027make check-copyright\u0027"},{"timestamp":1559076617,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Uploaded patch set 2."},{"timestamp":1559076619,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Patch Set 2:\n\nNew commits:\n    \n    commit 24386eda9684d2d48a68618dfab133349a088b05\n    \n    copyright-check: if only checking commited files, use the author date of the commit for the year"},{"timestamp":1559087304,"reviewer":{"name":"Mike Gerdts","email":"mike.gerdts@joyent.com","username":"mgerdts"},"message":"Patch Set 2:\n\n(16 comments)"},{"timestamp":1559124567,"reviewer":{"name":"Tim Foster","email":"tim.foster@joyent.com","username":"timfoster"},"message":"Patch Set 2:\n\n(5 comments)"},{"timestamp":1559151831,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Patch Set 2:\n\n(8 comments)\n\nMike, Thanks for the thorough review.  Some comments below."},{"timestamp":1559152713,"reviewer":{"name":"Mike Gerdts","email":"mike.gerdts@joyent.com","username":"mgerdts"},"message":"Patch Set 2:\n\n(3 comments)"},{"timestamp":1559153148,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Patch Set 2:\n\n(2 comments)"},{"timestamp":1559154066,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Patch Set 2:\n\n(1 comment)"},{"timestamp":1559260943,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Patch Set 2:\n\n(5 comments)\n\nFeedback to Tim\u0027s comments:"},{"timestamp":1559260977,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Uploaded patch set 3."},{"timestamp":1559260978,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Patch Set 3:\n\nNew commits:\n    \n    commit 6a6320ab50048a37d59558338bbdf9b84bb345e4\n    \n    updates for CR feedback"},{"timestamp":1559261075,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Patch Set 2:\n\n(1 comment)"},{"timestamp":1559306414,"reviewer":{"name":"Mike Gerdts","email":"mike.gerdts@joyent.com","username":"mgerdts"},"message":"Patch Set 3: Code-Review+1"},{"timestamp":1559320227,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Uploaded patch set 4."},{"timestamp":1559320228,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Patch Set 4:\n\nNew commits:\n    \n    commit d1bad87865cbfab7e6e98860b5132abd052e942f\n    \n    updates for CR feedback\n    \n    commit f3b843fb2be52e2b9306657eb645bb70704e2a12\n    \n    copyright-check: if only checking commited files, use the author date of the commit for the year\n    \n    commit bedd2db2a5a47368881db10adeb417572813b58e\n    \n    add \u0027make check-copyright\u0027"},{"timestamp":1559320300,"reviewer":{"name":"Mike Gerdts","email":"mike.gerdts@joyent.com","username":"mgerdts"},"message":"Patch Set 4: Code-Review+1"},{"timestamp":1559560836,"reviewer":{"name":"Tim Foster","email":"tim.foster@joyent.com","username":"timfoster"},"message":"Patch Set 4: Code-Review+1"},{"timestamp":1559586888,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Uploaded patch set 5."},{"timestamp":1559586889,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Patch Set 5:\n\nNew commits:\n    \n    commit 682b5b24394b38d044f064c694098bc4c1426902\n    \n    updates for CR feedback\n    \n    commit 5928f880afefd9be4a73fe067b61c50dee4685fe\n    \n    copyright-check: if only checking commited files, use the author date of the commit for the year\n    \n    commit 3b0433398b53e0dc446042bd2c224dbd0b7683e4\n    \n    add \u0027make check-copyright\u0027"},{"timestamp":1559587801,"reviewer":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},"message":"Patch Set 5: Integration-Approval+1"},{"timestamp":1559589866,"reviewer":{"name":"Mike Gerdts","email":"mike.gerdts@joyent.com","username":"mgerdts"},"message":"Patch Set 5: Code-Review+1"},{"timestamp":1559937851,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Patch Set 5:\n\n(4 comments)"},{"timestamp":1559939669,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Uploaded patch set 6: Commit message was updated."},{"timestamp":1559940434,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Uploaded patch set 7."},{"timestamp":1559940435,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Patch Set 7:\n\nNew commits:\n    \n    commit 75247ccd7f421852abb2516eaadde2be88aa3c52\n    \n    nits from DaveE\u0027s CR"},{"timestamp":1559940441,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Patch Set 5:\n\n(1 comment)"},{"timestamp":1559940477,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Patch Set 7: Code-Review+1 Integration-Approval+1\n\nI\u0027m assuming earlier +1 from Mike, Cody, and Tim."},{"timestamp":1559940478,"reviewer":{"name":"Gerrit Code Review","email":"no-reply@cr.joyent.us"},"message":"Change has been successfully merged by Trent Mick"},{"timestamp":1560015683,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"Patch Set 7:\n\n(1 comment)"}],"currentPatchSet":{"number":"7","revision":"9a72f8893558ae1d78a444401a6924c83fe777ae","parents":["ca4a08e8b7bba7a86d897060338fba27ee4e872b"],"ref":"refs/changes/66/6366/7","uploader":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"createdOn":1559940434,"author":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1559940477,"by":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"}},{"type":"Integration-Approval","description":"Integration-Approval","value":"1","grantedOn":1559940477,"by":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"}},{"type":"SUBM","value":"1","grantedOn":1559940478,"by":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":9,"deletions":0},{"file":"Makefile","type":"MODIFIED","insertions":6,"deletions":-4},{"file":"tools/check-copyright","type":"ADDED","insertions":203,"deletions":0},{"file":"tools/mk/Makefile.targ","type":"MODIFIED","insertions":29,"deletions":-6}],"sizeInsertions":238,"sizeDeletions":-10},"patchSets":[{"number":"1","revision":"13c5474d5a214b85862b3f172aaadb5556dd0401","parents":["d25b8fc60fb8c649559924870fe3aaf75e7421d5"],"ref":"refs/changes/66/6366/1","uploader":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"createdOn":1559074831,"author":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"isDraft":false,"kind":"REWORK","files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"tools/check-copyright","type":"ADDED","insertions":185,"deletions":0},{"file":"tools/mk/Makefile.targ","type":"MODIFIED","insertions":28,"deletions":-6}],"sizeInsertions":213,"sizeDeletions":-6},{"number":"2","revision":"0046b900bdf09588aa338cd363ca83b52ba1f03e","parents":["d25b8fc60fb8c649559924870fe3aaf75e7421d5"],"ref":"refs/changes/66/6366/2","uploader":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"createdOn":1559076617,"author":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"isDraft":false,"kind":"REWORK","comments":[{"file":"tools/check-copyright","line":1,"reviewer":{"name":"Tim Foster","email":"tim.foster@joyent.com","username":"timfoster"},"message":"Could we add this script to BASH_FILES at the top-level Makefile in eng.git so that we run bashstyle on this script? (mumble mumble Quis custodiet ipsos custodes?  (yes, I had to google that :))\n\nI know there\u0027s mixed ideas about what the top level Makefile in eng.git is (a template, or builder of eng itself).."},{"file":"tools/check-copyright","line":1,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Yup, added."},{"file":"tools/check-copyright","line":13,"reviewer":{"name":"Mike Gerdts","email":"mike.gerdts@joyent.com","username":"mgerdts"},"message":"appropriate"},{"file":"tools/check-copyright","line":13,"reviewer":{"name":"Mike Gerdts","email":"mike.gerdts@joyent.com","username":"mgerdts"},"message":"uncommitted"},{"file":"tools/check-copyright","line":46,"reviewer":{"name":"Mike Gerdts","email":"mike.gerdts@joyent.com","username":"mgerdts"},"message":"uncommitted"},{"file":"tools/check-copyright","line":74,"reviewer":{"name":"Mike Gerdts","email":"mike.gerdts@joyent.com","username":"mgerdts"},"message":"Seems odd to use -i with a mixed case argument"},{"file":"tools/check-copyright","line":74,"reviewer":{"name":"Mike Gerdts","email":"mike.gerdts@joyent.com","username":"mgerdts"},"message":"The quotes around Copyright cannot have any effect.  If you really feel like you need quotes somewhere, put them around $path.  As this will protect against paths with white space."},{"file":"tools/check-copyright","line":74,"reviewer":{"name":"Mike Gerdts","email":"mike.gerdts@joyent.com","username":"mgerdts"},"message":"Why multiple greps?  Wouldn\u0027t this suffice?\n\nhit\u003d$((grep -i \"copyright.*joyent\" \"$path\" || true) | head -1)\n\nNote that I use quotes around the pattern here to protect the * from expansion."},{"file":"tools/check-copyright","line":79,"reviewer":{"name":"Tim Foster","email":"tim.foster@joyent.com","username":"timfoster"},"message":"I wonder if this is the right thing, since by default it won\u0027t tell users they\u0027ve forgotten to add a copyright statement.\n\nI could see two routes here:\n\n1. decide on file patterns which should always have Joyent copyright statements (*.js, *.c, *.h, *.rs, *.sh, others?) report errors on those and otherwise issue verbose-mode-only info lines for files which don\u0027t match\n\n2. do what we\u0027re doing here, but have the info message always be printed *except* for file patterns we know shouldn\u0027t have copyright statements (*.json maybe?), only reporting those when -v is turned on.\n\nI\u0027m not sure which is the better approach, and suspect that the only way to find out, would be to trawl through our repositories and see which is more common."},{"file":"tools/check-copyright","line":79,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"I would like to punt this to a separate ticket, if at all. Coming up with heuristics for which should have Joyent copyright lines is a science project. We have many files (e.g. vendored, or many in illumos that originated from others) that shouldn\u0027t or shouldn\u0027t *yet* have Joyent copyright.\n\nI\u0027ve changed the \"good\" to \"skipped\" for now:\n\n```\necho \"info: $file: skipping (no Joyent Copyright line)\" \u003e\u00262\n```"},{"file":"tools/check-copyright","line":85,"reviewer":{"name":"Mike Gerdts","email":"mike.gerdts@joyent.com","username":"mgerdts"},"message":"Can avoid subprocess with:\n\nif [[ $hit !\u003d *$year* ]]; then"},{"file":"tools/check-copyright","line":85,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Thanks, will do."},{"file":"tools/check-copyright","line":93,"reviewer":{"name":"Mike Gerdts","email":"mike.gerdts@joyent.com","username":"mgerdts"},"message":"blessed\u003d\"Copyright [12][0-9][0-9][0-9] Joyent, Inc.\"\nif [[ $hit !\u003d $blessed ]]; then"},{"file":"tools/check-copyright","line":93,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"This doesn\u0027t handle leading comment character content."},{"file":"tools/check-copyright","line":93,"reviewer":{"name":"Mike Gerdts","email":"mike.gerdts@joyent.com","username":"mgerdts"},"message":"Maybe this to allow arbitrary content before $blessed?\n\nif [[ $hit !\u003d *$blessed ]]; then"},{"file":"tools/check-copyright","line":93,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Is there a particular reason to avoid grep here? I *like* having a regex pattern to show the user."},{"file":"tools/check-copyright","line":93,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"You can use bash builtin regex for this.  Still use regex, but avoid reliance on grep:\n\n $ blessed\u003d\u0027Copyright [0-9]{4} Joyent, Inc\\.$\u0027\n $ [[ \"Copyright 2019 Joyent, Inc.\" \u003d~ $blessed ]] \u0026\u0026 echo match || echo no match\n match\n $ [[ \"Copyright 12345 Joyent, Inc.\" \u003d~ $blessed ]] \u0026\u0026 echo match || echo no match\n no match"},{"file":"tools/check-copyright","line":131,"reviewer":{"name":"Mike Gerdts","email":"mike.gerdts@joyent.com","username":"mgerdts"},"message":"redirect to stderr?"},{"file":"tools/check-copyright","line":131,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Sure, will do."},{"file":"tools/check-copyright","line":139,"reviewer":{"name":"Tim Foster","email":"tim.foster@joyent.com","username":"timfoster"},"message":"I\u0027m curious whether these commands work on a laptop that\u0027s not connected to the network? I imagine they do, but if not, are there ways we could emit more useful error messages? (perhaps advising the user to run with make ENGBLD_CHECK_COPYRIGHT_DISABLE\u003dtrue check)"},{"file":"tools/check-copyright","line":139,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"They work disconnected. This is diffing against the current fetched master."},{"file":"tools/check-copyright","line":145,"reviewer":{"name":"Mike Gerdts","email":"mike.gerdts@joyent.com","username":"mgerdts"},"message":"This would be more friendly for file names with spaces.  Note speling corrections.  See 157.\n\nIFS\u003d\u0027\\n\u0027 read -a committedFiles \u003c \u003c(git diff --name-only master..)\nIFS\u003d\u0027\\n\u0027 read -a stagedFiles \u003c \u003c(git diff --name-only --staged)\nIFS\u003d\u0027\\n\u0027 read -a unstagedFiles \u003c \u003c(git diff --name-only)\n\ndeclare -A all\nfor file in \"${committedFiles[@]}\" \"${stagedFiles[@]}\" \"${unstagedFiles[@]}\"; do\n    all[\"$file\"]\u003d1\ndone\ndeclare -a files\u003d(\"${!all[@]}\")\n\nIf you do this, then 149 needs to be something like:\n\nif (( ${#committedFiles[@]} !\u003d 0 \u0026\u0026 ${#stagedFiles[@]} \u003d\u003d 0 \u0026\u0026 ... )); then"},{"file":"tools/check-copyright","line":145,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Thanks much.\n\nAlso, hooray for new Bash ways of exiting/failing silently. I.e. I need to work through `read -a ...` not being happy about empty input and interaction with `set -o errexit`."},{"file":"tools/check-copyright","line":145,"reviewer":{"name":"Mike Gerdts","email":"mike.gerdts@joyent.com","username":"mgerdts"},"message":"Try appending \"|| true\"\n\nread -a files \u003c \u003c(git diff --name-only) || true"},{"file":"tools/check-copyright","line":145,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Okay, thanks. Unsatisfying in that a missing `git` doesn\u0027t cause the script to blow up. However, that is Bash and process substitution for you: `set -e` is not inherited there.\n\nI avoided using `declare -A` (and `mapfile` or `readarray`) because the default /bin/bash on Mac is *still* (and perhaps forever) Bash v3 which doesn\u0027t have those."},{"file":"tools/check-copyright","line":147,"reviewer":{"name":"Mike Gerdts","email":"mike.gerdts@joyent.com","username":"mgerdts"},"message":"committed"},{"file":"tools/check-copyright","line":148,"reviewer":{"name":"Mike Gerdts","email":"mike.gerdts@joyent.com","username":"mgerdts"},"message":"It seems this check should be on a file-by-file basis.  But I guess it doesn\u0027t matter much so long as it generates a warning that does not block integration."},{"file":"tools/check-copyright","line":148,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Yes on the ideal being this is on file-by-file basis. That struck me as overkill to begin with.\n\nIt *will* actually be an error if it deems the year to be wrong. (a) I\u0027d hope this case is very rare, (b) one could override via ENGBLD_CHECK_COPYRIGHT_DISABLE\u003d1 to get past it , (c) can\u0027t override like that for the makecheckbot FWIW."},{"file":"tools/check-copyright","line":157,"reviewer":{"name":"Mike Gerdts","email":"mike.gerdts@joyent.com","username":"mgerdts"},"message":"This is problematic when there are file names with spaces, which is not entirely hypothetical.\n\n$ git ls-files | grep \u0027 \u0027\ntools/SmartOS.vmwarevm/Virtual Disk.vmdk\n\nNeed:\n\nfor file in \"${files[@]}\"; do\n\nThen line 170, 176, 186, 189 and perhaps others should be adjusted to use arrays."},{"file":"tools/check-copyright","line":167,"reviewer":{"name":"Mike Gerdts","email":"mike.gerdts@joyent.com","username":"mgerdts"},"message":"earlier \"info\" messages went to stderr"},{"file":"tools/check-copyright","line":167,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Thanks, will do."},{"file":"tools/check-copyright","line":190,"reviewer":{"name":"Mike Gerdts","email":"mike.gerdts@joyent.com","username":"mgerdts"},"message":"let errors++"},{"file":"tools/check-copyright","line":190,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"?\n\nNot sure what you mean here."},{"file":"tools/check-copyright","line":190,"reviewer":{"name":"Mike Gerdts","email":"mike.gerdts@joyent.com","username":"mgerdts"},"message":"You wrote a message to stderr, implying something was wrong.  I\u0027m suggesting incrementing $errors to ensure the exit code is non-zero. \n\n$ errors\u003d0\n$ let errors++\n$ echo $errors\n1"},{"file":"tools/check-copyright","line":190,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Nope it isn\u0027t an error. It is a pithy statement motivating the developer to come back after they have made some changes. This output is off by default (via \u0027-q\u0027) in the eng.git usage.\n\nIf it wasn\u0027t clear, this \u0027check-copyright\u0027 script was a quickish separate personal utility script originally."},{"file":"tools/check-copyright","line":195,"reviewer":{"name":"Mike Gerdts","email":"mike.gerdts@joyent.com","username":"mgerdts"},"message":"If there are 256 * N errors, this script will exit 0."},{"file":"tools/check-copyright","line":195,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Thanks. I\u0027ll change that to just exit 1 if errors."},{"file":"tools/mk/Makefile.targ","line":46,"reviewer":{"name":"Tim Foster","email":"tim.foster@joyent.com","username":"timfoster"},"message":"this section is missing an entry for \u0027check-bash\u0027"},{"file":"tools/mk/Makefile.targ","line":46,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Done"},{"file":"tools/mk/Makefile.targ","line":47,"reviewer":{"name":"Tim Foster","email":"tim.foster@joyent.com","username":"timfoster"},"message":"space at beginning of line?"},{"file":"tools/mk/Makefile.targ","line":47,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"Done"}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"tools/check-copyright","type":"ADDED","insertions":195,"deletions":0},{"file":"tools/mk/Makefile.targ","type":"MODIFIED","insertions":28,"deletions":-6}],"sizeInsertions":223,"sizeDeletions":-6},{"number":"3","revision":"a4150bc5f05273f811521378323b84630f024459","parents":["d25b8fc60fb8c649559924870fe3aaf75e7421d5"],"ref":"refs/changes/66/6366/3","uploader":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"createdOn":1559260977,"author":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1559306414,"by":{"name":"Mike Gerdts","email":"mike.gerdts@joyent.com","username":"mgerdts"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"Makefile","type":"MODIFIED","insertions":6,"deletions":-4},{"file":"tools/check-copyright","type":"ADDED","insertions":203,"deletions":0},{"file":"tools/mk/Makefile.targ","type":"MODIFIED","insertions":29,"deletions":-6}],"sizeInsertions":238,"sizeDeletions":-10},{"number":"4","revision":"336b8921b1de148859b9b7de1ece8e33f0898abf","parents":["4e33bf4e26bc6cc8d93b3851fed97c11f513bfe4"],"ref":"refs/changes/66/6366/4","uploader":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"createdOn":1559320227,"author":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1559320300,"by":{"name":"Mike Gerdts","email":"mike.gerdts@joyent.com","username":"mgerdts"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1559560836,"by":{"name":"Tim Foster","email":"tim.foster@joyent.com","username":"timfoster"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":8,"deletions":0},{"file":"Makefile","type":"MODIFIED","insertions":6,"deletions":-4},{"file":"tools/check-copyright","type":"ADDED","insertions":203,"deletions":0},{"file":"tools/mk/Makefile.targ","type":"MODIFIED","insertions":29,"deletions":-6}],"sizeInsertions":238,"sizeDeletions":-10},{"number":"5","revision":"6e144ee06859868db73953cf99a8ae3221828dc0","parents":["ca4a08e8b7bba7a86d897060338fba27ee4e872b"],"ref":"refs/changes/66/6366/5","uploader":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"createdOn":1559586888,"author":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"Integration-Approval","description":"Integration-Approval","value":"1","grantedOn":1559587801,"by":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1559589866,"by":{"name":"Mike Gerdts","email":"mike.gerdts@joyent.com","username":"mgerdts"}}],"comments":[{"file":"tools/check-copyright","line":93,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"nit: \"$\" is not needed for variable expansion inside (( ... )) or $(( ... )) expressions."},{"file":"tools/check-copyright","line":93,"reviewer":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"message":"This was illuminating: https://stackoverflow.com/a/31255942\n\nThis doesn\u0027t work:\n\n```\n$ numErrors\u003d0\n[13:35:50 trentm@bluesteel:~/joy/eng (grr-TOOLS-604)]\n$         numErrors\u003d(( $numErrors + 1 ))\n-bash: syntax error near unexpected token `(\u0027\n```\n\nHowever, this does:\n\n```\n$ (( numErrors++ ))\n[13:37:50 trentm@bluesteel:~/joy/eng (grr-TOOLS-604)]\n$ echo $numErrors\n1\n[13:37:53 trentm@bluesteel:~/joy/eng (grr-TOOLS-604)]\n$ (( numErrors++ ))\n[13:37:55 trentm@bluesteel:~/joy/eng (grr-TOOLS-604)]\n$ echo $numErrors\n2\n```\n\nNo huge reason to prefer one over the other, but I\u0027ve changed to the latter."},{"file":"tools/check-copyright","line":93,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"That\u0027s not what I said in my original comment.  The \"$\" is not needed for the variable expansion *inside* (( ... )) or $(( ... )) expressions.\n\nI meant you could do:\n\n numErrors\u003d$(( numErrors + 1 ))\n\nThis is the same as\n\n (( numErrors++ ))\n\n*However*, this latter example can cause problems with `set -e` or `set -o errexit` so be *really* careful with this... in fact I would avoid it altogether.\n\n(( ... )) is considered a statement, and its return value is whatever the mathematical expression resolves to.\n\nThis example script:\n\n #!/usr/bin/env bash\n set -o errexit\n i\u003d0\n echo \u0027hello\u0027\n ((i++))\n echo \u0027world\u0027\n\nRunning this will yield:\n\n $ ./errexit \n hello\n $ echo $?\n 1"},{"file":"tools/check-copyright","line":94,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"nit: semicolon not needed"},{"file":"tools/check-copyright","line":196,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"beautiful"},{"file":"tools/check-copyright","line":199,"reviewer":{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},"message":"nit: since you use \"\u003d\u003d\" in above code, you could use \"!\u003d\" to match here.  Also, because you control numErrors here and can guarantee it\u0027s always a number, you can use (( ... )) for mathematical expression:\n\n if (( numErrors !\u003d 0 )); then\n   ..\n fi\n\nThe \"$\" for variable expansion is not needed for (( ... ))."}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":9,"deletions":0},{"file":"Makefile","type":"MODIFIED","insertions":6,"deletions":-4},{"file":"tools/check-copyright","type":"ADDED","insertions":203,"deletions":0},{"file":"tools/mk/Makefile.targ","type":"MODIFIED","insertions":29,"deletions":-6}],"sizeInsertions":238,"sizeDeletions":-10},{"number":"6","revision":"17bd0744b0224f72d04abb889b38e49b8a3a909e","parents":["ca4a08e8b7bba7a86d897060338fba27ee4e872b"],"ref":"refs/changes/66/6366/6","uploader":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"createdOn":1559939669,"author":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"isDraft":false,"kind":"NO_CODE_CHANGE","approvals":[{"type":"Integration-Approval","description":"Integration-Approval","value":"1","grantedOn":1559587801,"by":{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"}},{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1559589866,"by":{"name":"Mike Gerdts","email":"mike.gerdts@joyent.com","username":"mgerdts"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":9,"deletions":0},{"file":"Makefile","type":"MODIFIED","insertions":6,"deletions":-4},{"file":"tools/check-copyright","type":"ADDED","insertions":203,"deletions":0},{"file":"tools/mk/Makefile.targ","type":"MODIFIED","insertions":29,"deletions":-6}],"sizeInsertions":238,"sizeDeletions":-10},{"number":"7","revision":"9a72f8893558ae1d78a444401a6924c83fe777ae","parents":["ca4a08e8b7bba7a86d897060338fba27ee4e872b"],"ref":"refs/changes/66/6366/7","uploader":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"createdOn":1559940434,"author":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1559940477,"by":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"}},{"type":"Integration-Approval","description":"Integration-Approval","value":"1","grantedOn":1559940477,"by":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"}},{"type":"SUBM","value":"1","grantedOn":1559940478,"by":{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":9,"deletions":0},{"file":"Makefile","type":"MODIFIED","insertions":6,"deletions":-4},{"file":"tools/check-copyright","type":"ADDED","insertions":203,"deletions":0},{"file":"tools/mk/Makefile.targ","type":"MODIFIED","insertions":29,"deletions":-6}],"sizeInsertions":238,"sizeDeletions":-10}],"allReviewers":[{"name":"Dave Eddy","email":"dave.eddy@joyent.com","username":"bahamas10"},{"name":"Mike Gerdts","email":"mike.gerdts@joyent.com","username":"mgerdts"},{"name":"Tim Foster","email":"tim.foster@joyent.com","username":"timfoster"},{"name":"Cody Peter Mello","email":"melloc@writev.io","username":"melloc"},{"name":"Trent Mick","email":"trentm@gmail.com","username":"trentm"}]}