commit 1261cf78d2bf233110c7c98725d180c1c5d3839c
Author: Sven Meys <sven.meys@gmail.com>
Date:   2019-08-20T20:00:11+00:00 (7 weeks ago)
    
    joyent/node-bunyan-syslog#54 Support building for node v12
    Reviewed by: Cody Peter Mello <cody.mello@joyent.com>
    Approved by: Cody Peter Mello <cody.mello@joyent.com>

diff --git a/README.md b/README.md
index f520800..1744153 100644
--- a/README.md
+++ b/README.md
@@ -77,7 +77,7 @@ This module maps bunyan levels to syslog levels as follows:
 You can run the test suite using the provided `rsyslog` configuration:
 
 ```
-$ rsyslogd -f ./test/rsyslog.conf -i ./test.pid -u $USER
+$ rsyslogd -f ./test/rsyslog.conf -i $PWD/test.pid -u $USER
 $ make test
 $ kill $(cat test.pid)
 ```
diff --git a/lib/sys.js b/lib/sys.js
index c6d0b81..d5062b3 100644
--- a/lib/sys.js
+++ b/lib/sys.js
@@ -1,6 +1,7 @@
 // Copyright 2013 Mark Cavage, Inc.  All rights reserved.
 
 var os = require('os');
+var Buffer = require('safer-buffer').Buffer;
 var Stream = require('stream').Stream;
 var util = require('util');
 
diff --git a/lib/tcp.js b/lib/tcp.js
index 6234148..16efd5d 100644
--- a/lib/tcp.js
+++ b/lib/tcp.js
@@ -5,6 +5,7 @@ var util = require('util');
 
 var assert = require('assert-plus');
 
+var Buffer = require('safer-buffer').Buffer;
 var SyslogStream = require('./sys');
 
 
@@ -111,5 +112,5 @@ TCPStream.prototype.close = function close() {
 
 
 TCPStream.prototype._send = function _send(msg) {
-        this.socket.write(new Buffer(msg + '\n', 'utf-8'));
+        this.socket.write(Buffer.from(msg + '\n', 'utf-8'));
 };
diff --git a/lib/udp.js b/lib/udp.js
index 2e9e2fd..c19efdd 100644
--- a/lib/udp.js
+++ b/lib/udp.js
@@ -5,6 +5,7 @@ var util = require('util');
 
 var assert = require('assert-plus');
 
+var Buffer = require('safer-buffer').Buffer;
 var SyslogStream = require('./sys');
 
 
@@ -44,7 +45,7 @@ UDPStream.prototype.close = function close() {
 
 
 UDPStream.prototype._send = function _send(msg) {
-        var buf = new Buffer(msg, 'utf-8');
+        var buf = Buffer.from(msg, 'utf-8');
         var s = this.socket;
         var self = this;
 
diff --git a/package.json b/package.json
index 35f5106..46e99bb 100755
--- a/package.json
+++ b/package.json
@@ -11,13 +11,14 @@
   },
   "dependencies": {
     "assert-plus": "0.1.5",
-    "nan": "^2.10.0"
+    "nan": "^2.14.0",
+    "safer-buffer": "~2.1.0"
   },
   "devDependencies": {
     "bunyan": "^1.8.12",
     "istanbul": "^0.3.6",
     "faucet": "0.0.1",
-    "tape": "^3.5.0",
+    "tape": "^4.11.0",
     "eslint": "^4.13.1",
     "eslint-plugin-joyent": "~2.1.0"
   },
diff --git a/src/syslog.cc b/src/syslog.cc
index 07e269e..9544d4e 100644
--- a/src/syslog.cc
+++ b/src/syslog.cc
@@ -14,42 +14,27 @@ using namespace v8;
 #define RETURN_ARGS_EXCEPTION(MSG)                                      \
 	Nan::ThrowError(MSG)
 
-#define RETURN_ERRNO_EXCEPTION(RC, API, MSG)				\
-	Nan::ThrowError(node::ErrnoException(RC, API, MSG))
-
-#define RETURN_OOM_EXCEPTION()						\
-	RETURN_ERRNO_EXCEPTION(ENOMEM, "malloc", strerror(ENOMEM))
-
 #define REQUIRE_ARGS(ARGS)					\
 	if (ARGS.Length() == 0)					\
 		RETURN_ARGS_EXCEPTION("missing arguments");
 
 #define REQUIRE_INT_ARG(ARGS, I, VAR)                                   \
 	REQUIRE_ARGS(ARGS);						\
-	if (ARGS.Length() <= (I) || !ARGS[I]->IsNumber())		\
+	if (ARGS.Length() <= (I))					\
+		RETURN_ARGS_EXCEPTION("argument " #I " must be an Integer"); \
+	Nan::MaybeLocal<v8::Integer> _ ## VAR(Nan::To<v8::Integer>(ARGS[I])); \
+	if (_ ## VAR.IsEmpty())					\
 		RETURN_ARGS_EXCEPTION("argument " #I " must be an Integer"); \
-	Local<Integer> _ ## VAR(ARGS[I]->ToInteger());			\
-	int VAR = _ ## VAR->Value();
+	int VAR = _ ## VAR.ToLocalChecked()->Value();
 
 #define REQUIRE_STRING_ARG(ARGS, I, VAR)				\
 	REQUIRE_ARGS(ARGS);						\
-	if (ARGS.Length() <= (I) || !ARGS[I]->IsString())		\
+	if (ARGS.Length() <= (I))					\
 		RETURN_ARGS_EXCEPTION("argument " #I " must be a String"); \
-	String::Utf8Value VAR(ARGS[I]->ToString());
-
-#define REQUIRE_FUNCTION_ARG(ARGS, I, VAR)                              \
-	REQUIRE_ARGS(ARGS);						\
-	if (ARGS.Length() <= (I) || !ARGS[I]->IsFunction())		\
-		RETURN_EXCEPTION("argument " #I " must be a Function");	\
-	Local<Function> VAR = Local<Function>::Cast(ARGS[I]);
-
-
-#define REQUIRE_OBJECT_ARG(ARGS, I, VAR)				\
-	REQUIRE_ARGS(ARGS);						\
-	if (ARGS.Length() <= (I) || !ARGS[I]->IsObject())		\
-		RETURN_EXCEPTION("argument " #I " must be an Object");	\
-	Local<Object> VAR(ARGS[I]->ToObject());
-
+	Nan::MaybeLocal<v8::String> _ ## VAR(Nan::To<v8::String>(ARGS[I])); \
+	if (_ ## VAR.IsEmpty())					\
+		RETURN_ARGS_EXCEPTION("argument " #I " must be a String"); \
+	Nan::Utf8String VAR(_ ## VAR.ToLocalChecked());
 
 
 ///--- API
@@ -95,7 +80,7 @@ NAN_METHOD(Mask) {
 	info.GetReturnValue().Set(scope.Escape(Nan::New<Integer>(mask)));
 }
 
-void init(Handle<Object> target) {
+NAN_MODULE_INIT(init) {
 	Nan::SetMethod(target, "openlog", Open);
 	Nan::SetMethod(target, "syslog", Log);
 	Nan::SetMethod(target, "closelog", Close);
