commit ecaa38bded72aa4dfcb60557945bbe9eb6ff9f0b (refs/changes/25/1325/1)
Author: Bill Pijewski <wdp@joyent.com>
Date:   2017-01-24T21:33:25+00:00 (2 years, 8 months ago)
    
    MANTA-1171 nginx needs fsync(3c) support

diff --git a/auto/unix b/auto/unix
index 8c0e8135..1316e54a 100755
--- a/auto/unix
+++ b/auto/unix
@@ -909,3 +909,12 @@ ngx_feature_test='struct addrinfo *res;
                   if (getaddrinfo("localhost", NULL, NULL, &res) != 0) return 1;
                   freeaddrinfo(res)'
 . auto/feature
+
+ngx_feature="fsync()"
+ngx_feature_name="NGX_HAVE_FSYNC"
+ngx_feature_run=no
+ngx_feature_incs="#include <unistd.h>"
+ngx_feature_path=
+ngx_feature_libs=
+ngx_feature_test="fsync(0)"
+. auto/feature
diff --git a/src/core/ngx_file.h b/src/core/ngx_file.h
index 5f8228b7..eda11ef0 100644
--- a/src/core/ngx_file.h
+++ b/src/core/ngx_file.h
@@ -36,6 +36,7 @@ struct ngx_file_s {
 
     unsigned                   valid_info:1;
     unsigned                   directio:1;
+    unsigned                   fsync:1;
 };
 
 
diff --git a/src/http/ngx_http_core_module.c b/src/http/ngx_http_core_module.c
index bd36aecc..739493d4 100644
--- a/src/http/ngx_http_core_module.c
+++ b/src/http/ngx_http_core_module.c
@@ -619,6 +619,13 @@ static ngx_command_t  ngx_http_core_commands[] = {
       offsetof(ngx_http_core_loc_conf_t, chunked_transfer_encoding),
       NULL },
 
+    { ngx_string("fsync"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_FLAG,
+      ngx_conf_set_flag_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_core_loc_conf_t, fsync),
+      NULL },
+
     { ngx_string("etag"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_FLAG,
       ngx_conf_set_flag_slot,
@@ -3646,6 +3653,7 @@ ngx_http_core_create_loc_conf(ngx_conf_t *cf)
     clcf->recursive_error_pages = NGX_CONF_UNSET;
     clcf->server_tokens = NGX_CONF_UNSET;
     clcf->chunked_transfer_encoding = NGX_CONF_UNSET;
+    clcf->fsync = NGX_CONF_UNSET;
     clcf->etag = NGX_CONF_UNSET;
     clcf->types_hash_max_size = NGX_CONF_UNSET_UINT;
     clcf->types_hash_bucket_size = NGX_CONF_UNSET_UINT;
@@ -3913,6 +3921,8 @@ ngx_http_core_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
     ngx_conf_merge_value(conf->server_tokens, prev->server_tokens, 1);
     ngx_conf_merge_value(conf->chunked_transfer_encoding,
                               prev->chunked_transfer_encoding, 1);
+    ngx_conf_merge_value(conf->fsync,
+                              prev->fsync, 0);
     ngx_conf_merge_value(conf->etag, prev->etag, 1);
 
     ngx_conf_merge_ptr_value(conf->open_file_cache,
diff --git a/src/http/ngx_http_core_module.h b/src/http/ngx_http_core_module.h
index 6c446a05..ebcd8373 100644
--- a/src/http/ngx_http_core_module.h
+++ b/src/http/ngx_http_core_module.h
@@ -418,6 +418,7 @@ struct ngx_http_core_loc_conf_s {
     ngx_flag_t    server_tokens;           /* server_tokens */
     ngx_flag_t    chunked_transfer_encoding; /* chunked_transfer_encoding */
     ngx_flag_t    etag;                    /* etag */
+    ngx_flag_t    fsync;	           /* fsync(3C) when writing files */
 
 #if (NGX_HTTP_GZIP)
     ngx_flag_t    gzip_vary;               /* gzip_vary */
diff --git a/src/http/ngx_http_request_body.c b/src/http/ngx_http_request_body.c
index 0641329c..80030db0 100644
--- a/src/http/ngx_http_request_body.c
+++ b/src/http/ngx_http_request_body.c
@@ -449,6 +449,7 @@ ngx_http_write_request_body(ngx_http_request_t *r)
 
         tf->file.fd = NGX_INVALID_FILE;
         tf->file.log = r->connection->log;
+        tf->file.fsync = clcf->fsync;
         tf->path = clcf->client_body_temp_path;
         tf->pool = r->pool;
         tf->warn = "a client request body is buffered to a temporary file";
diff --git a/src/os/unix/ngx_files.c b/src/os/unix/ngx_files.c
index 7fbb7c9a..cbe04d60 100644
--- a/src/os/unix/ngx_files.c
+++ b/src/os/unix/ngx_files.c
@@ -223,7 +223,7 @@ ngx_write_file(ngx_file_t *file, u_char *buf, size_t size, off_t offset)
         written += n;
 
         if ((size_t) n == size) {
-            return written;
+	    break;
         }
 
         offset += n;
@@ -264,12 +264,24 @@ ngx_write_file(ngx_file_t *file, u_char *buf, size_t size, off_t offset)
         written += n;
 
         if ((size_t) n == size) {
-            return written;
+            break;
         }
 
         size -= n;
     }
 #endif
+
+#ifdef NGX_HAVE_FSYNC
+    if (file->fsync) {
+         if (fsync(file->fd) != 0) {
+              ngx_log_error(NGX_LOG_CRIT, file->log, ngx_errno,
+                          "fsync() \"%s\" failed", file->name.data);
+              return NGX_ERROR;
+         }
+    }
+#endif
+
+    return written;
 }
 
 
