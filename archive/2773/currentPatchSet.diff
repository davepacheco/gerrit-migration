commit b6d2612f696d4f3de86e50e9fe990fb17bd3cf11 (refs/changes/73/2773/1)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2017-10-11T18:32:41+00:00 (2 years ago)
    
    TOOLS-1886 Want node-moray-sandbox command for running quick standalone instances

diff --git a/README.md b/README.md
index 7889f48..7fe7298 100644
--- a/README.md
+++ b/README.md
@@ -23,7 +23,7 @@ sure that you have at least Postgres 9.2 installed. On both Mac OS X and
 SmartOS:
 
 ```
-pkgin in postgresql92-client postgresql92-server
+$ pkgin in postgresql92-client postgresql92-server
 ```
 
 Each additional Moray connected to a Postgres instance maintains an additional
@@ -33,6 +33,17 @@ instances. This is normally not an issue, but can be easy to hit with Postgres
 9.2 on Mac OS X, where the max is 20. If that happens to you, newer versions of
 Postgres can help alleviate the issue.
 
+There is also a simple tool for starting up a temporary Moray instance, if you
+just want something to point at while working on the Moray CLI tools, or running
+the [moray-test-suite](https://github.com/joyent/moray-test-suite/):
+
+```
+$ ./bin/run-sandbox -p 2020
+```
+
+If you pass `--cover`, then it will also produce a coverage report for the Moray
+server when it exits.
+
 ## Examples
 
 You can spawn a new temporary Moray instance by running:
diff --git a/bin/run-sandbox b/bin/run-sandbox
new file mode 100755
index 0000000..afd44ff
--- /dev/null
+++ b/bin/run-sandbox
@@ -0,0 +1,109 @@
+#! /usr/bin/env node --abort-on-uncaught-exception
+
+'use strict';
+
+var assert = require('assert-plus');
+var mod_bunyan = require('bunyan');
+var mod_child = require('child_process');
+var mod_client = require('../lib/client');
+var mod_dashdash = require('dashdash');
+var mod_uuid = require('uuid');
+
+var HELP_OPTS = {
+    includeDefault: true,
+    includeEnv: true
+};
+
+var options = [
+    {
+        names: [ 'help', 'h' ],
+        type: 'bool',
+        help: 'Print this help and exit'
+    },
+    {
+        names: [ 'cover' ],
+        type: 'bool',
+        help: 'Instrument Moray to collect code coverage information'
+    },
+    {
+        names: [ 'port', 'p' ],
+        type: 'positiveInteger',
+        help: 'Port that Moray instance should listen on',
+        default: 2020
+    }
+];
+
+var parser = mod_dashdash.createParser({ options: options });
+var opts;
+
+try {
+    opts = parser.parse(process.argv);
+} catch (e) {
+    console.error('run-sandbox: %s', e.message);
+    process.exit(2);
+}
+
+if (opts.help) {
+    console.log('usage: run-sandbox [OPTIONS]\noptions:\n%s', parser.help(HELP_OPTS));
+    process.exit(0);
+}
+
+var LOG = mod_bunyan.createLogger({
+    name: 'run-sandbox',
+    level: (process.env.LOG_LEVEL || 'info'),
+    stream: process.stdout
+});
+
+var orig_uuid = mod_uuid.v4();
+var db_uuid = mod_uuid.v4();
+
+var args, cmd;
+
+if (opts.cover) {
+    cmd = 'node_modules/.bin/istanbul';
+    args = [
+        'cover', '--no-default-excludes', '-i', '**/node_modules/moray-server/lib/**',
+        'lib/run.js'
+    ];
+} else {
+    cmd = 'lib/run.js';
+    args = [];
+}
+
+args.push(orig_uuid);
+
+// Start child process
+var child = mod_child.fork(cmd, args, {
+    cwd: __dirname + '/../',
+    detached: true
+});
+
+
+child.on('message', function processResponse(response) {
+    switch (response.type) {
+    case 'error':
+        LOG.error('Error in child:\n%j', response);
+        return;
+    case 'up':
+        LOG.info({
+            unixDir: response.unixDir
+        }, 'Postgres has started');
+        child.send({
+            req_id: db_uuid,
+            port: opts.port,
+            type: 'createdb'
+        });
+        return;
+    case 'client-info':
+        LOG.info({
+            dbName: db_uuid,
+            moray: response.config
+        }, 'Moray is running');
+        return;
+    case 'log-file':
+        LOG.info('Child will log to %s', response.path);
+        return;
+    default:
+        throw new Error('bad message type: ' + response.type);
+    }
+});
diff --git a/lib/run.js b/lib/run.js
index 4501b11..a9b9e5a 100644
--- a/lib/run.js
+++ b/lib/run.js
@@ -17,6 +17,7 @@
 
 'use strict';
 
+var assert = require('assert-plus');
 var MoraySandbox = require('./sandbox');
 var mod_bunyan = require('bunyan');
 var mod_tmp = require('tmp');
@@ -40,6 +41,17 @@ var log = mod_bunyan.createLogger({
     } ]
 });
 
+
+function getRandomInt(min, max) {
+    return Math.floor(Math.random() * (max - min)) + min;
+}
+
+
+function getRandomPort() {
+    return getRandomInt(2000, 10000);
+}
+
+
 function haltPG() {
     if (sandbox) {
         sandbox.stop();
@@ -86,7 +98,7 @@ mod_tmp.dir({ unsafeCleanup: true }, function (dErr, path, cleanup) {
             process.on('message', function (message) {
                 switch (message.type) {
                 case 'createdb':
-                    createdb(message.req_id);
+                    createdb(message.req_id, message.port || getRandomPort());
                     return;
                 default:
                     log.error(message,
@@ -99,19 +111,29 @@ mod_tmp.dir({ unsafeCleanup: true }, function (dErr, path, cleanup) {
                     return;
                 }
             });
-            process.send({ type: 'up', req_id: ORIGINAL_REQ });
+            process.send({
+                type: 'up',
+                req_id: ORIGINAL_REQ,
+                unixDir: sandbox.unixDir
+            });
         }
     });
 });
 
 
-function createdb(req_id) {
+function createdb(req_id, port) {
+    assert.uuid(req_id, 'req_id');
+    assert.number(port, 'port');
+
     mod_vasync.waterfall([
         function (cb) {
             sandbox._createDB(req_id, cb);
         },
         function (connstr, cb) {
-            sandbox._startMoray(connstr, cb);
+            sandbox._startMoray({
+                connstr: connstr,
+                port: port
+            }, cb);
         }
     ], function (err, params) {
         if (err) {
diff --git a/lib/sandbox.js b/lib/sandbox.js
index 7210258..219f59d 100644
--- a/lib/sandbox.js
+++ b/lib/sandbox.js
@@ -22,6 +22,7 @@
 
 'use strict';
 
+var assert = require('assert-plus');
 var mod_forkexec = require('forkexec');
 var mod_fs = require('fs');
 var mod_moray_server = require('moray-server');
@@ -35,6 +36,8 @@ var VError = require('verror');
 var BIND_IP = '127.0.0.1';
 
 var PG_CONFIG = [
+    'logging_collector = on',
+    'log_filename = \'postgresql.log\'',
     'listen_addresses = \'\'',
     'fsync = off',
     'synchronous_commit = off',
@@ -53,31 +56,30 @@ var mkTableSQL = 'CREATE TABLE IF NOT EXISTS buckets_config ( ' +
 
 // --- Internal
 
-function getRandomInt(min, max) {
-    return Math.floor(Math.random() * (max - min)) + min;
-}
 
+function mkMorayConfig(log, port, connstr) {
+    assert.object(log, 'log');
+    assert.number(port, 'port');
+    assert.string(connstr, 'connstr');
 
-function mkMorayConfig(log, connstr) {
-    var morayPort = getRandomInt(2000, 10000);
     return {
         server: {
             log: log,
             name: 'moray-sandbox',
-            port: morayPort,
+            port: port,
             bindip: BIND_IP,
-            audit: false,
+            server_uuid: '00000000-0000-0000-0000-000000000000',
+            datacenter: 'sandbox',
             standalone: {
                 pg: {
-                    maxConnections: 5,
-                    queryTimeout: 30000
+                    maxConnections: 5
                 },
                 url: connstr
             }
         },
         client: {
             host: BIND_IP,
-            port: morayPort
+            port: port
         }
     };
 }
@@ -109,7 +111,9 @@ MoraySandbox.prototype._initDB = function initDB(callback) {
         }
 
         var cfg = mod_util.format('%s/postgresql.conf', self.dbDir);
-        mod_fs.appendFile(cfg, PG_CONFIG, function (fErr) {
+        var cfgTxt = mod_util.format('%s\nlog_directory = \'%s\'',
+            PG_CONFIG, self.baseDir);
+        mod_fs.appendFile(cfg, cfgTxt, function (fErr) {
             if (fErr) {
                 callback(new VError(fErr, 'Failed to append to PG config'));
                 return;
@@ -175,9 +179,9 @@ MoraySandbox.prototype._createDB = function createDB(req_id, callback) {
 };
 
 
-MoraySandbox.prototype._startMoray = function startMoray(connstr, callback) {
+MoraySandbox.prototype._startMoray = function startMoray(opts, callback) {
     var self = this;
-    var config = mkMorayConfig(self.log, connstr);
+    var config = mkMorayConfig(self.log, opts.port, opts.connstr);
     var server = mod_moray_server.createServer(config.server);
 
     server.on('error', function onError(err) {
diff --git a/package.json b/package.json
index 3510e80..b79c9d0 100644
--- a/package.json
+++ b/package.json
@@ -2,7 +2,7 @@
   "name": "moray-sandbox",
   "description": "Library for managing temporary, sandboxed Moray instances",
   "main": "./lib/index.js",
-  "version": "0.1.1",
+  "version": "0.1.2",
   "keywords": [ "moray" ],
   "repository": {
     "type": "git",
@@ -13,13 +13,14 @@
     "bunyan": "^1.8.5",
     "clone": "1.0.2",
     "forkexec": "1.1.0",
-    "moray-server": "git+https://github.com/joyent/moray.git#1e295ad",
+    "moray-server": "git+https://github.com/joyent/moray.git#3e9f411",
     "uuid": "3.0.0",
     "vasync": "1.6.4",
     "verror": "1.9.0",
     "tmp": "0.0.28"
   },
   "devDependencies": {
+    "dashdash": "1.14.1",
     "moray": "^2.0.0",
     "faucet": "0.0.1",
     "istanbul": "^0.4.0",
