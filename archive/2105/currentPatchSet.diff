From dfae20b5ffcad6bef48ac6df469fe8600ae3d26c Mon Sep 17 00:00:00 2001
From: Patrick Mooney <pmooney@pfmooney.com>
Date: Wed, 14 Jun 2017 23:37:42 +0000
Subject: [PATCH] OS-6183 lxbrand needs pipe-max-size sysctl for ltp fcntl35
 Reviewed by: Jerry Jelinek <jerry.jelinek@joyent.com> Approved by: Jerry
 Jelinek <jerry.jelinek@joyent.com>

---
 usr/src/uts/common/brand/lx/os/lx_brand.c     |  1 +
 usr/src/uts/common/brand/lx/procfs/lx_proc.h  |  1 +
 .../uts/common/brand/lx/procfs/lx_prvnops.c   | 78 ++++++++++++++++++
 usr/src/uts/common/brand/lx/sys/lx_brand.h    |  4 +
 .../uts/common/brand/lx/syscall/lx_fcntl.c    | 39 +--------
 usr/src/uts/common/brand/lx/syscall/lx_pipe.c | 82 ++++++++++++++++++-
 6 files changed, 169 insertions(+), 36 deletions(-)

diff --git a/usr/src/uts/common/brand/lx/os/lx_brand.c b/usr/src/uts/common/brand/lx/os/lx_brand.c
index e1ad9fc354..a8a710f088 100644
--- a/usr/src/uts/common/brand/lx/os/lx_brand.c
+++ b/usr/src/uts/common/brand/lx/os/lx_brand.c
@@ -1218,6 +1218,7 @@ lx_init_brand_data(zone_t *zone, kmutex_t *zsl)
 	    LX_KERN_RELEASE_MAX);
 	(void) strlcpy(data->lxzd_kernel_version, "BrandZ virtual linux",
 	    LX_KERN_VERSION_MAX);
+	data->lxzd_pipe_max_sz = lx_pipe_max_default;
 
 	zone->zone_brand_data = data;
 
diff --git a/usr/src/uts/common/brand/lx/procfs/lx_proc.h b/usr/src/uts/common/brand/lx/procfs/lx_proc.h
index 1aee44f1bb..04a8045a63 100644
--- a/usr/src/uts/common/brand/lx/procfs/lx_proc.h
+++ b/usr/src/uts/common/brand/lx/procfs/lx_proc.h
@@ -211,6 +211,7 @@ typedef enum lxpr_nodetype {
 	LXPR_SYS_FS_INOTIFY_MAX_QUEUED_EVENTS,	/* inotify/max_queued_events */
 	LXPR_SYS_FS_INOTIFY_MAX_USER_INSTANCES,	/* inotify/max_user_instances */
 	LXPR_SYS_FS_INOTIFY_MAX_USER_WATCHES,	/* inotify/max_user_watches */
+	LXPR_SYS_FS_PIPE_MAX,	/* /proc/sys/fs/pipe-max-size	*/
 	LXPR_SYS_KERNELDIR,	/* /proc/sys/kernel/	*/
 	LXPR_SYS_KERNEL_CAPLCAP,	/* /proc/sys/kernel/cap_last_cap */
 	LXPR_SYS_KERNEL_COREPATT,	/* /proc/sys/kernel/core_pattern */
diff --git a/usr/src/uts/common/brand/lx/procfs/lx_prvnops.c b/usr/src/uts/common/brand/lx/procfs/lx_prvnops.c
index 5de5fa8ce7..5978711b2c 100644
--- a/usr/src/uts/common/brand/lx/procfs/lx_prvnops.c
+++ b/usr/src/uts/common/brand/lx/procfs/lx_prvnops.c
@@ -231,6 +231,7 @@ static void lxpr_read_sys_fs_inotify_max_user_instances(lxpr_node_t *,
     lxpr_uiobuf_t *);
 static void lxpr_read_sys_fs_inotify_max_user_watches(lxpr_node_t *,
     lxpr_uiobuf_t *);
+static void lxpr_read_sys_fs_pipe_max(lxpr_node_t *, lxpr_uiobuf_t *);
 static void lxpr_read_sys_kernel_caplcap(lxpr_node_t *, lxpr_uiobuf_t *);
 static void lxpr_read_sys_kernel_corepatt(lxpr_node_t *, lxpr_uiobuf_t *);
 static void lxpr_read_sys_kernel_hostname(lxpr_node_t *, lxpr_uiobuf_t *);
@@ -264,6 +265,8 @@ static void lxpr_read_sys_vm_swappiness(lxpr_node_t *, lxpr_uiobuf_t *);
 
 static int lxpr_write_pid_loginuid(lxpr_node_t *, uio_t *, cred_t *,
     caller_context_t *);
+static int lxpr_write_sys_fs_pipe_max(lxpr_node_t *, uio_t *, cred_t *,
+    caller_context_t *);
 static int lxpr_write_sys_net_core_somaxc(lxpr_node_t *, uio_t *, cred_t *,
     caller_context_t *);
 static int lxpr_write_sys_net_ipv4_ip_lport_range(lxpr_node_t *, uio_t *,
@@ -517,6 +520,7 @@ static lxpr_dirent_t sys_fsdir[] = {
 	{ LXPR_SYS_FS_FILEMAX,		"file-max" },
 	{ LXPR_SYS_FS_FILENR,		"file-nr" },
 	{ LXPR_SYS_FS_INOTIFYDIR,	"inotify" },
+	{ LXPR_SYS_FS_PIPE_MAX,		"pipe-max-size" },
 };
 
 #define	SYS_FSDIRFILES (sizeof (sys_fsdir) / sizeof (sys_fsdir[0]))
@@ -640,6 +644,7 @@ static wftab_t wr_tab[] = {
 	{LXPR_SYS_KERNEL_COREPATT, lxpr_write_sys_kernel_corepatt},
 	{LXPR_SYS_KERNEL_SHMALL, NULL},
 	{LXPR_SYS_KERNEL_SHMMAX, NULL},
+	{LXPR_SYS_FS_PIPE_MAX, lxpr_write_sys_fs_pipe_max},
 	{LXPR_SYS_NET_CORE_SOMAXCON, lxpr_write_sys_net_core_somaxc},
 	{LXPR_SYS_NET_IPV4_IP_LPORT_RANGE,
 	    lxpr_write_sys_net_ipv4_ip_lport_range},
@@ -859,6 +864,7 @@ static void (*lxpr_read_function[LXPR_NFILES])() = {
 	lxpr_read_sys_fs_inotify_max_queued_events, /* max_queued_events */
 	lxpr_read_sys_fs_inotify_max_user_instances, /* max_user_instances */
 	lxpr_read_sys_fs_inotify_max_user_watches, /* max_user_watches */
+	lxpr_read_sys_fs_pipe_max,	/* /proc/sys/fs/pipe-max-size */
 	lxpr_read_invalid,		/* /proc/sys/kernel	*/
 	lxpr_read_sys_kernel_caplcap,	/* /proc/sys/kernel/cap_last_cap */
 	lxpr_read_sys_kernel_corepatt,	/* /proc/sys/kernel/core_pattern */
@@ -1007,6 +1013,7 @@ static vnode_t *(*lxpr_lookup_function[LXPR_NFILES])() = {
 	lxpr_lookup_not_a_dir,		/* .../inotify/max_queued_events */
 	lxpr_lookup_not_a_dir,		/* .../inotify/max_user_instances */
 	lxpr_lookup_not_a_dir,		/* .../inotify/max_user_watches */
+	lxpr_lookup_not_a_dir,		/* /proc/sys/fs/pipe-max-size */
 	lxpr_lookup_sys_kerneldir,	/* /proc/sys/kernel	*/
 	lxpr_lookup_not_a_dir,		/* /proc/sys/kernel/cap_last_cap */
 	lxpr_lookup_not_a_dir,		/* /proc/sys/kernel/core_pattern */
@@ -1155,6 +1162,7 @@ static int (*lxpr_readdir_function[LXPR_NFILES])() = {
 	lxpr_readdir_not_a_dir,		/* .../inotify/max_queued_events */
 	lxpr_readdir_not_a_dir,		/* .../inotify/max_user_instances */
 	lxpr_readdir_not_a_dir,		/* .../inotify/max_user_watches	*/
+	lxpr_readdir_not_a_dir,		/* /proc/sys/fs/pipe-max-size */
 	lxpr_readdir_sys_kerneldir,	/* /proc/sys/kernel	*/
 	lxpr_readdir_not_a_dir,		/* /proc/sys/kernel/cap_last_cap */
 	lxpr_readdir_not_a_dir,		/* /proc/sys/kernel/core_pattern */
@@ -4458,6 +4466,23 @@ lxpr_read_sys_fs_inotify_max_user_watches(lxpr_node_t *lxpnp,
 	lxpr_uiobuf_printf(uiobuf, "%d\n", inotify_maxwatches);
 }
 
+/* ARGSUSED */
+static void
+lxpr_read_sys_fs_pipe_max(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
+{
+	lx_zone_data_t *lxzd = ztolxzd(LXPTOZ(lxpnp));
+	uint_t pipe_max;
+
+	ASSERT(lxpnp->lxpr_type == LXPR_SYS_FS_PIPE_MAX);
+	ASSERT(lxzd != NULL);
+
+	mutex_enter(&lxzd->lxzd_lock);
+	pipe_max = lxzd->lxzd_pipe_max_sz;
+	mutex_exit(&lxzd->lxzd_lock);
+
+	lxpr_uiobuf_printf(uiobuf, "%u\n", pipe_max);
+}
+
 /* ARGSUSED */
 static void
 lxpr_read_sys_kernel_caplcap(lxpr_node_t *lxpnp, lxpr_uiobuf_t *uiobuf)
@@ -7272,6 +7297,59 @@ lxpr_write_sys_net_ipv4_tcp_winscale(lxpr_node_t *lxpnp, struct uio *uio,
 	    NULL));
 }
 
+/* ARGSUSED */
+static int
+lxpr_write_sys_fs_pipe_max(lxpr_node_t *lxpnp, struct uio *uio,
+    struct cred *cr, caller_context_t *ct)
+{
+	int error;
+	size_t olen;
+	char val[16];	/* big enough for a uint numeric string */
+	char *ep;
+	long u;
+	size_t size;
+	lx_zone_data_t *lxzd = ztolxzd(LXPTOZ(lxpnp));
+
+	ASSERT(lxpnp->lxpr_type == LXPR_SYS_FS_PIPE_MAX);
+
+	if (uio->uio_loffset != 0)
+		return (EINVAL);
+
+	if (uio->uio_resid == 0)
+		return (0);
+
+	olen = uio->uio_resid;
+	if (olen > sizeof (val) - 1)
+		return (EINVAL);
+
+	bzero(val, sizeof (val));
+	error = uiomove(val, olen, UIO_WRITE, uio);
+	if (error != 0)
+		return (error);
+
+	if (lxpr_tokenize_num(val, &u, &ep) != 0)
+		return (EINVAL);
+	if (*ep != '\0')
+		return (EINVAL);
+
+	/*
+	 * Bound to PAGESIZE <= input <= lx_pipe_max_limit, then round to the
+	 * nearest page.  Linux is a little more picky, rounding to the nearest
+	 * power-of-two pages.  Such strengthened behavior can be added later
+	 * if needed.
+	 */
+	size = (size_t)u;
+	size = P2ROUNDUP(MIN(MAX(PAGESIZE, size), lx_pipe_max_limit), PAGESIZE);
+
+	ASSERT(size <= lx_pipe_max_limit);
+
+	mutex_enter(&lxzd->lxzd_lock);
+	lxzd->lxzd_pipe_max_sz = size;
+	mutex_exit(&lxzd->lxzd_lock);
+
+	return (0);
+}
+
 /* ARGSUSED */
 static int
 lxpr_write_sys_kernel_corepatt(lxpr_node_t *lxpnp, struct uio *uio,
diff --git a/usr/src/uts/common/brand/lx/sys/lx_brand.h b/usr/src/uts/common/brand/lx/sys/lx_brand.h
index 87570cdd50..6912f7a51c 100644
--- a/usr/src/uts/common/brand/lx/sys/lx_brand.h
+++ b/usr/src/uts/common/brand/lx/sys/lx_brand.h
@@ -621,6 +621,7 @@ typedef struct lx_zone_data {
 	list_t *lxzd_vdisks;			/* virtual disks (zvols) */
 	dev_t lxzd_zfs_dev;			/* major num for zfs */
 	uint_t lxzd_aio_nr;			/* see lx_aio.c */
+	uint_t lxzd_pipe_max_sz;		/* pipe-max-size sysctl val */
 } lx_zone_data_t;
 
 /* LWP br_lwp_flags values */
@@ -710,6 +711,9 @@ extern pid_t lx_lwp_ppid(klwp_t *, pid_t *, id_t *);
 extern void lx_pid_init(void);
 extern void lx_pid_fini(void);
 
+extern uint_t lx_pipe_max_limit;
+extern uint_t lx_pipe_max_default;
+
 /*
  * In-Kernel Linux System Call Description.
  */
diff --git a/usr/src/uts/common/brand/lx/syscall/lx_fcntl.c b/usr/src/uts/common/brand/lx/syscall/lx_fcntl.c
index c812d94fc7..116dcbe884 100644
--- a/usr/src/uts/common/brand/lx/syscall/lx_fcntl.c
+++ b/usr/src/uts/common/brand/lx/syscall/lx_fcntl.c
@@ -10,7 +10,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 #include <sys/systm.h>
@@ -21,6 +21,7 @@
 #include <sys/stat.h>
 #include <sys/cmn_err.h>
 #include <sys/pathname.h>
+#include <sys/policy.h>
 #include <sys/lx_impl.h>
 #include <sys/lx_brand.h>
 #include <sys/lx_fcntl.h>
@@ -32,6 +33,7 @@
 
 extern int fcntl(int, int, intptr_t);
 extern int flock_check(vnode_t *, flock64_t *, offset_t, offset_t);
+extern int lx_pipe_setsz(stdata_t *, uint_t, boolean_t);
 
 
 int
@@ -210,8 +212,6 @@ lx_fcntl_setfl(int fd, ulong_t arg)
 	return (fcntl(fd, F_SETFL, flags));
 }
 
-/* The default unprivileged limit in Linux is 1MB */
-static int lx_pipe_max_size = 1048576;
 
 static int
 lx_fcntl_pipesz(int fd, int cmd, ulong_t arg)
@@ -232,38 +232,7 @@ lx_fcntl_pipesz(int fd, int cmd, ulong_t arg)
 	VERIFY((str = vp->v_stream) != NULL);
 
 	if (cmd == LX_F_SETPIPE_SZ) {
-		stdata_t *mate;
-		intptr_t val = arg;
-
-		if (val < PAGESIZE || val > lx_pipe_max_size) {
-			err = EINVAL;
-			goto out;
-		}
-		if (!STRMATED(str)) {
-			err = strqset(RD(str->sd_wrq), QHIWAT, 0, val);
-			goto out;
-		}
-
-		/*
-		 * Ensure consistent order so the set operation is always
-		 * attempted on the "higher" stream first.
-		 */
-		if (str > str->sd_mate) {
-			VERIFY((mate = str->sd_mate) != NULL);
-		} else {
-			mate = str;
-			VERIFY((str = mate->sd_mate) != NULL);
-		}
-
-		/*
-		 * While it is unfortunate that an error could occur for the
-		 * latter half of the stream pair, there is little to be done
-		 * about it aside from reporting the failure.
-		 */
-		if ((err = strqset(RD(str->sd_wrq), QHIWAT, 0, val)) != 0) {
-			goto out;
-		}
-		err = strqset(RD(mate->sd_wrq), QHIWAT, 0, val);
+		err = lx_pipe_setsz(str, (uint_t)arg, B_FALSE);
 	} else if (cmd == LX_F_GETPIPE_SZ) {
 		size_t val;
 
diff --git a/usr/src/uts/common/brand/lx/syscall/lx_pipe.c b/usr/src/uts/common/brand/lx/syscall/lx_pipe.c
index 519c742abc..d6c8f1d274 100644
--- a/usr/src/uts/common/brand/lx/syscall/lx_pipe.c
+++ b/usr/src/uts/common/brand/lx/syscall/lx_pipe.c
@@ -24,7 +24,7 @@
  * Copyright 2007 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
  * Copyright 2013 OmniTI Computer Consulting, Inc. All rights reserved.
- * Copyright 2015 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 #include <sys/zone.h>
@@ -42,9 +42,82 @@
 #include <sys/debug.h>
 #include <sys/fs/fifonode.h>
 #include <sys/fcntl.h>
+#include <sys/policy.h>
 #include <sys/brand.h>
 #include <sys/lx_brand.h>
 #include <sys/lx_fcntl.h>
+#include <sys/sysmacros.h>
+
+#define	LX_DEFAULT_PIPE_SIZE	65536
+
+/*
+ * Our default value for fs.pipe-size-max mirrors Linux.  The enforced maximum
+ * is meant to provide some sort of upper bound on pipe buffer sizing.  Its
+ * value was chosen somewhat arbitrarily.
+ */
+uint_t lx_pipe_max_default = 1048576;
+uint_t lx_pipe_max_limit = 8388608;
+
+int
+lx_pipe_setsz(stdata_t *str, uint_t size, boolean_t is_init)
+{
+	int err;
+	stdata_t *mate;
+	lx_zone_data_t *lxzd = ztolxzd(curzone);
+	uint_t max_size = lxzd->lxzd_pipe_max_sz;
+
+
+	size = P2ROUNDUP(size, PAGESIZE);
+	if (size == 0) {
+		return (EINVAL);
+	} else if (size > max_size && secpolicy_resource(CRED()) != 0) {
+		if (!is_init) {
+			return (EPERM);
+		}
+		/*
+		 * If the size limit is breached during initial pipe setup,
+		 * simply clamp it to the maximum.  On Linux kernels prior to
+		 * 4.9, this clamping would not occur and it would be possible
+		 * to open a pipe with the default buffer size even if it
+		 * exceeded the sysctl limit.  Rather than trigger behavior
+		 * here based on  the configured kernel version, it is applied
+		 * to all callers.
+		 */
+		size = max_size;
+		ASSERT(max_size <= lx_pipe_max_limit);
+	} else if (size > lx_pipe_max_limit) {
+		/*
+		 * Unlike Linux, we do maintain a global hard cap on pipe
+		 * buffer limits.
+		 */
+		return (EPERM);
+	}
+
+	if (!STRMATED(str)) {
+		return (strqset(RD(str->sd_wrq), QHIWAT, 0, (intptr_t)size));
+	}
+
+	/*
+	 * Ensure consistent order so the set operation is always attempted on
+	 * the "higher" stream first.
+	 */
+	if (str > str->sd_mate) {
+		VERIFY((mate = str->sd_mate) != NULL);
+	} else {
+		mate = str;
+		VERIFY((str = mate->sd_mate) != NULL);
+	}
+
+	/*
+	 * While it is unfortunate that an error could occur for the latter
+	 * half of the stream pair, there is little to be done about it aside
+	 * from reporting the failure.
+	 */
+	if ((err = strqset(RD(str->sd_wrq), QHIWAT, 0, (intptr_t)size)) == 0) {
+		err = strqset(RD(mate->sd_wrq), QHIWAT, 0, (intptr_t)size);
+	}
+	return (err);
+}
 
 /*
  * Based on native pipe(2) system call, except that the pipe is half-duplex.
@@ -57,6 +130,7 @@ lx_hd_pipe(intptr_t arg, int flags)
 	int error = 0;
 	int flag1, flag2, iflags;
 	int fd1, fd2;
+	stdata_t *str;
 
 	/*
 	 * Validate allowed flags.
@@ -99,6 +173,12 @@ lx_hd_pipe(intptr_t arg, int flags)
 
 	VTOF(vp1)->fn_ino = VTOF(vp2)->fn_ino = fifogetid();
 
+	/*
+	 * Attempt to set pipe buffer sizes to expected value.
+	 */
+	VERIFY((str = vp1->v_stream) != NULL);
+	(void) lx_pipe_setsz(str, LX_DEFAULT_PIPE_SIZE, B_TRUE);
+
 	/*
 	 * Set the O_NONBLOCK flag if requested.
 	 */
-- 
2.21.0

