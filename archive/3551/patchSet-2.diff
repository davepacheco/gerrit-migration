From f6b9d0da1f92b37bc6c4bed31b0d6b2205727f49 Mon Sep 17 00:00:00 2001
From: Julien Gilli <julien.gilli@joyent.com>
Date: Tue, 6 Mar 2018 16:40:32 -0800
Subject: [PATCH] TRITON-214 VMAPI data migrations make server process abort

---
 lib/apis/moray.js                             |   4 +-
 test/lib/moray.js                             |  37 +++-
 test/vms.data-migrations.test.js              | 179 ++++++++++++++----
 ...vms.update-moray-bucket-versioning.test.js |  34 +---
 4 files changed, 179 insertions(+), 75 deletions(-)

diff --git a/lib/apis/moray.js b/lib/apis/moray.js
index 122abf9..8f3970a 100644
--- a/lib/apis/moray.js
+++ b/lib/apis/moray.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -1754,7 +1754,7 @@ function findRecordsToMigrate(modelName, version, options, callback) {
             setTimeout(function retry() {
                 log.info({version: version},
                         'Retrying to find records at version less than');
-                self.findRecordsToMigrate(bucketName, version, options,
+                self.findRecordsToMigrate(modelName, version, options,
                     callback);
             }, RETRY_DELAY_IN_MS);
         }
diff --git a/test/lib/moray.js b/test/lib/moray.js
index 82b6cfc..b0809a8 100644
--- a/test/lib/moray.js
+++ b/test/lib/moray.js
@@ -11,6 +11,7 @@
 var assert = require('assert-plus');
 var bunyan = require('bunyan');
 var jsprim = require('jsprim');
+var libuuid = require('libuuid');
 var moray = require('moray');
 var restify = require('restify');
 var vasync = require('vasync');
@@ -68,6 +69,40 @@ function cleanupLeftoverBuckets(bucketsName, callback) {
     }
 }
 
+function writeObjects(morayClient, bucketName, valueTemplate, nbObjects,
+    callback) {
+    assert.object(morayClient, 'morayClient');
+    assert.string(bucketName, 'bucketName');
+    assert.object(valueTemplate, 'valueTemplate');
+    assert.number(nbObjects, 'nbObjects');
+    assert.func(callback, 'callback');
+
+    var i;
+
+    var objectKeys = [];
+    for (i = 0; i < nbObjects; ++i) {
+        objectKeys.push(libuuid.create());
+    }
+
+    vasync.forEachParallel({
+        func: function writeObject(objectUuid, done) {
+            var newObjectValue = jsprim.deepCopy(valueTemplate);
+            newObjectValue.uuid = objectUuid;
+            /*
+             * noBucketCache: true is needed so that when putting objects in
+             * moray after a bucket has been deleted and recreated, it doesn't
+             * use an old bucket schema and determine that it needs to update an
+             * _rver column that doesn't exist anymore.
+             */
+            morayClient.putObject(bucketName, objectUuid, newObjectValue, {
+                noBucketCache: true
+            }, done);
+        },
+        inputs: objectKeys
+    }, callback);
+}
+
 module.exports = {
-    cleanupLeftoverBuckets: cleanupLeftoverBuckets
+    cleanupLeftoverBuckets: cleanupLeftoverBuckets,
+    writeObjects: writeObjects
 };
diff --git a/test/vms.data-migrations.test.js b/test/vms.data-migrations.test.js
index 81715b1..059d16d 100644
--- a/test/vms.data-migrations.test.js
+++ b/test/vms.data-migrations.test.js
@@ -43,13 +43,33 @@ var VMS_BUCKET_NAME = 'test_vmapi_vms_data_migrations';
 var SERVER_VMS_BUCKET_NAME = 'test_vmapi_server_vms_data_migrations';
 var ROLE_TAGS_BUCKET_NAME = 'test_vmapi_vm_role_tags_data_migrations';
 
-var VMS_BUCKET_CONFIG = {
+/*
+ * We use two versions for the VMS_BUCKET_CONFIG (VMS_BUCKET_CONFIG_V1 and
+ * VMS_BUCKET_CONFIG_V2) to exercise the code path where finding objects to
+ * migrate fails with an InvalidQueryError due to the fact that some Moray
+ * instances do not have the data_version field indexed in their bucket cache.
+ * See https://smartos.org/bugview/TRITON-214 for context.
+ */
+var VMS_BUCKET_CONFIG_V1 = {
+    name: VMS_BUCKET_NAME,
+    schema: {
+        index: {
+            foo: { type: 'string' },
+            bar: { type: 'string' }
+        }
+    }
+};
+
+var VMS_BUCKET_CONFIG_V2 = {
     name: VMS_BUCKET_NAME,
     schema: {
         index: {
             foo: { type: 'string' },
             bar: { type: 'string' },
             data_version: { type: 'number' }
+        },
+        options: {
+            version: 1
         }
     }
 };
@@ -65,8 +85,14 @@ var ROLE_TAGS_MORAY_BUCKET_CONFIG = {
     }
 };
 
-var TEST_BUCKETS_CONFIG = {
-    vms: VMS_BUCKET_CONFIG,
+var TEST_BUCKETS_CONFIG_V1 = {
+    vms: VMS_BUCKET_CONFIG_V1,
+    server_vms: SERVER_VMS_MORAY_BUCKET_CONFIG,
+    vm_role_tags: ROLE_TAGS_MORAY_BUCKET_CONFIG
+};
+
+var TEST_BUCKETS_CONFIG_V2 = {
+    vms: VMS_BUCKET_CONFIG_V2,
     server_vms: SERVER_VMS_MORAY_BUCKET_CONFIG,
     vm_role_tags: ROLE_TAGS_MORAY_BUCKET_CONFIG
 };
@@ -111,31 +137,6 @@ function findAllObjects(morayClient, bucketName, filter, callback) {
     }
 }
 
-function writeObjects(morayClient, bucketName, valueTemplate, nbObjects,
-    callback) {
-    assert.object(morayClient, 'morayClient');
-    assert.string(bucketName, 'bucketName');
-    assert.object(valueTemplate, 'valueTemplate');
-    assert.number(nbObjects, 'nbObjects');
-    assert.func(callback, 'callback');
-
-    var i;
-
-    var objectKeys = [];
-    for (i = 0; i < nbObjects; ++i) {
-        objectKeys.push(libuuid.create());
-    }
-
-    vasync.forEachParallel({
-        func: function writeObject(objectUuid, done) {
-            var newObjectValue = jsprim.deepCopy(valueTemplate);
-            newObjectValue.uuid = objectUuid;
-            morayClient.putObject(bucketName, objectUuid, newObjectValue, done);
-        },
-        inputs: objectKeys
-    }, callback);
-}
-
 exports.data_migrations_invalid_filenames = function (t) {
     var dataMigrationsLoaderLogger = bunyan.createLogger({
         name: 'data-migrations-loader',
@@ -184,7 +185,7 @@ exports.data_migrations = function (t) {
             var morayClient;
             var moraySetup = morayInit.startMorayInit({
                 morayConfig: common.config.moray,
-                morayBucketsConfig: TEST_BUCKETS_CONFIG,
+                morayBucketsConfig: TEST_BUCKETS_CONFIG_V1,
                 changefeedPublisher: changefeedUtils.createNoopCfPublisher()
             });
             var nextOnce = once(next);
@@ -221,14 +222,53 @@ exports.data_migrations = function (t) {
         function writeTestObjects(ctx, next) {
             assert.object(ctx.morayClient, 'ctx.morayClient');
 
-            writeObjects(ctx.morayClient, VMS_BUCKET_NAME, {
+            testMoray.writeObjects(ctx.morayClient, VMS_BUCKET_NAME, {
                 foo: 'foo'
             }, NUM_TEST_OBJECTS, function onTestObjectsWritten(writeErr) {
+                ctx.morayClient.close();
+
                 t.ok(!writeErr, 'writing test objects should not error, got: ' +
                     util.inspect(writeErr));
                 next(writeErr);
             });
         },
+        function migrateSchemaForDataMigrations(ctx, next) {
+            var morayBucketsInitializer;
+            var morayClient;
+            var moraySetup = morayInit.startMorayInit({
+                morayConfig: common.config.moray,
+                morayBucketsConfig: TEST_BUCKETS_CONFIG_V2,
+                changefeedPublisher: changefeedUtils.createNoopCfPublisher()
+            });
+            var nextOnce = once(next);
+
+            ctx.moray = moraySetup.moray;
+            ctx.morayBucketsInitializer = morayBucketsInitializer =
+                moraySetup.morayBucketsInitializer;
+            ctx.morayClient = morayClient = moraySetup.morayClient;
+
+            function cleanUp() {
+                morayBucketsInitializer.removeAllListeners('error');
+                morayBucketsInitializer.removeAllListeners('done');
+            }
+
+            morayBucketsInitializer.on('done', function onMorayBucketsInit() {
+                t.ok(true, 'migration of moray buckets should be successful');
+
+                cleanUp();
+                nextOnce();
+            });
+
+            morayBucketsInitializer.on('error',
+                function onMorayBucketsInitError(morayBucketsInitErr) {
+                    t.ok(!morayBucketsInitErr,
+                        'moray buckets migration should not error, got: ' +
+                            morayBucketsInitErr);
+
+                    cleanUp();
+                    nextOnce(morayBucketsInitErr);
+                });
+        },
         function loadDataMigrations(ctx, next) {
             var dataMigrationsLoaderLogger = bunyan.createLogger({
                 name: 'data-migrations-loader',
@@ -337,9 +377,19 @@ exports.data_migrations = function (t) {
                 next();
         },
         function checkDataMigrationsTransientError(ctx, next) {
-            var MAX_NUM_TRIES = 20;
+            var MAX_NUM_TRIES;
+            /*
+             * We wait for the moray bucket cache to be refreshed on all Moray
+             * instances, which can be up to 5 minutes currently, and then some.
+             * This is the maximum delay during which InvalidQueryError can
+             * occur due to stale buckets cache, after which only the transient
+             * error injected by this test should surface.
+             */
+            var MAX_TRIES_DURATION_IN_MS = 6 * 60 * 1000;
             var NUM_TRIES = 0;
-            var RETRY_DELAY_IN_MS = 1000;
+            var RETRY_DELAY_IN_MS = 10000;
+
+            MAX_NUM_TRIES = MAX_TRIES_DURATION_IN_MS / RETRY_DELAY_IN_MS;
 
             assert.object(ctx.vmapiClient, 'ctx.vmapiClient');
 
@@ -480,9 +530,17 @@ exports.data_migrations = function (t) {
     ]}, function allMigrationsDone(allMigrationsErr) {
         t.ok(!allMigrationsErr, 'data migrations test should not error');
 
-        context.morayClient.close();
-        context.vmapiClient.close();
-        context.vmapiApp.close();
+        if (context.morayClient) {
+            context.morayClient.close();
+        }
+
+        if (context.vmapiClient) {
+            context.vmapiClient.close();
+        }
+
+        if (context.vmapiApp) {
+            context.vmapiApp.close();
+        }
 
         t.done();
     });
@@ -509,7 +567,7 @@ exports.data_migrations_non_transient_error = function (t) {
             var morayClient;
             var moraySetup = morayInit.startMorayInit({
                 morayConfig: common.config.moray,
-                morayBucketsConfig: TEST_BUCKETS_CONFIG,
+                morayBucketsConfig: TEST_BUCKETS_CONFIG_V1,
                 changefeedPublisher: changefeedUtils.createNoopCfPublisher()
             });
             var nextOnce = once(next);
@@ -546,14 +604,53 @@ exports.data_migrations_non_transient_error = function (t) {
         function writeTestObjects(ctx, next) {
             assert.object(ctx.morayClient, 'ctx.morayClient');
 
-            writeObjects(ctx.morayClient, VMS_BUCKET_NAME, {
+            testMoray.writeObjects(ctx.morayClient, VMS_BUCKET_NAME, {
                 foo: 'foo'
             }, NUM_TEST_OBJECTS, function onTestObjectsWritten(writeErr) {
+                ctx.morayClient.close();
+
                 t.ok(!writeErr, 'writing test objects should not error, got: ' +
                     util.inspect(writeErr));
                 next(writeErr);
             });
         },
+        function migrateSchemaForDataMigrations(ctx, next) {
+            var morayBucketsInitializer;
+            var morayClient;
+            var moraySetup = morayInit.startMorayInit({
+                morayConfig: common.config.moray,
+                morayBucketsConfig: TEST_BUCKETS_CONFIG_V2,
+                changefeedPublisher: changefeedUtils.createNoopCfPublisher()
+            });
+            var nextOnce = once(next);
+
+            ctx.moray = moraySetup.moray;
+            ctx.morayBucketsInitializer = morayBucketsInitializer =
+                moraySetup.morayBucketsInitializer;
+            ctx.morayClient = morayClient = moraySetup.morayClient;
+
+            function cleanUp() {
+                morayBucketsInitializer.removeAllListeners('error');
+                morayBucketsInitializer.removeAllListeners('done');
+            }
+
+            morayBucketsInitializer.on('done', function onMorayBucketsInit() {
+                t.ok(true, 'migration of moray buckets should be successful');
+
+                cleanUp();
+                nextOnce();
+            });
+
+            morayBucketsInitializer.on('error',
+                function onMorayBucketsInitError(morayBucketsInitErr) {
+                    t.ok(!morayBucketsInitErr,
+                        'moray buckets migration should not error, got: ' +
+                            morayBucketsInitErr);
+
+                    cleanUp();
+                    nextOnce(morayBucketsInitErr);
+                });
+        },
         function loadDataMigrations(ctx, next) {
             var dataMigrationsLoaderLogger = bunyan.createLogger({
                 name: 'data-migrations-loader',
@@ -616,8 +713,12 @@ exports.data_migrations_non_transient_error = function (t) {
         }
     ]}, function allMigrationsDone(allMigrationsErr) {
         t.equal(allMigrationsErr, undefined,
-                'data migrations test should not error');
-        context.morayClient.close();
+            'data migrations test should not error');
+
+        if (context.morayClient) {
+            context.morayClient.close();
+        }
+
         t.done();
     });
 };
diff --git a/test/vms.update-moray-bucket-versioning.test.js b/test/vms.update-moray-bucket-versioning.test.js
index ef3cad6..274107a 100644
--- a/test/vms.update-moray-bucket-versioning.test.js
+++ b/test/vms.update-moray-bucket-versioning.test.js
@@ -392,38 +392,6 @@ function testMigrationToBucketsConfig(bucketsConfig, options, t, callback) {
     });
 }
 
-function writeObjects(morayClient, bucketName, valueTemplate, nbObjects,
-    callback) {
-    assert.object(morayClient, 'morayClient');
-    assert.string(bucketName, 'bucketName');
-    assert.object(valueTemplate, 'valueTemplate');
-    assert.number(nbObjects, 'nbObjects');
-    assert.func(callback, 'callback');
-
-    var i;
-
-    var objectKeys = [];
-    for (i = 0; i < nbObjects; ++i) {
-        objectKeys.push(libuuid.create());
-    }
-
-    vasync.forEachParallel({
-        func: function writeObject(objectUuid, done) {
-            var newObjectValue = jsprim.deepCopy(valueTemplate);
-            newObjectValue.uuid = objectUuid;
-            /*
-             * noBucketCache: true is needed so that when putting objects in
-             * moray after a bucket has been deleted and recreated, it doesn't
-             * use an old bucket schema and determine that it needs to update an
-             * _rver column that doesn't exist anymore.
-             */
-            morayClient.putObject(bucketName, objectUuid, newObjectValue,
-                {noBucketCache: true}, done);
-        },
-        inputs: objectKeys
-    }, callback);
-}
-
 exports.moray_init_bucket_versioning = function (t) {
     vasync.pipeline({funcs: [
         function cleanup(arg, next) {
@@ -491,7 +459,7 @@ exports.moray_init_bucket_versioning = function (t) {
 
             morayBucketsInitializer.on('done',
                 function onMorayBucketsInitialized() {
-                    writeObjects(morayClient, VMS_BUCKET_NAME, {
+                    testMoray.writeObjects(morayClient, VMS_BUCKET_NAME, {
                         indexed_property: 'foo'
                     }, NB_TEST_OBJECTS, function onTestObjectsWritten(err) {
                         t.ok(!err, 'writing test objects should not error');
-- 
2.21.0

