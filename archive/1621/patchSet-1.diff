commit d529159f858d617ad001791ad18c542104910a15 (refs/changes/21/1621/1)
Author: YangYong3 <yy1111.yang@samsung.com>
Date:   2017-03-07T13:29:46+09:00 (2 years, 7 months ago)
    
    joyent/node-triton#186 Add support for 'triton datacenter get' to node-triton.

diff --git a/lib/cli.js b/lib/cli.js
index a8f3cc5..c0012c0 100644
--- a/lib/cli.js
+++ b/lib/cli.js
@@ -215,7 +215,7 @@ function CLI() {
             'account',
             'key',
             'services',
-            'datacenters'
+            'datacenter'
         ],
         helpBody: [
             /* BEGIN JSSTYLED */
@@ -656,6 +656,7 @@ CLI.prototype.do_env = require('./do_env');
 // Other
 CLI.prototype.do_account = require('./do_account');
 CLI.prototype.do_services = require('./do_services');
+CLI.prototype.do_datacenter = require('./do_datacenter');
 CLI.prototype.do_datacenters = require('./do_datacenters');
 CLI.prototype.do_info = require('./do_info');
 
diff --git a/lib/cloudapi2.js b/lib/cloudapi2.js
index f872baa..62dfd82 100644
--- a/lib/cloudapi2.js
+++ b/lib/cloudapi2.js
@@ -410,6 +410,18 @@ CloudApi.prototype.listDatacenters = function listDatacenters(opts, cb) {
     this._passThrough(endpoint, opts, cb);
 };
 
+/**
+ * Get datacenter information
+ *
+ * @param {Function} callback of the form `function (err, datacenters, res)`
+ */
+CloudApi.prototype.getDatacenter = function getDatacenter(name, cb) {
+    assert.string(name, 'name');
+    var endpoint = format('/%s/datacenters/%s', this.account, name);
+    this._request(endpoint, function (err, req, res, body) {
+        cb(err, body, res);
+    });
+};
 
 // ---- accounts
 
diff --git a/lib/do_datacenter/do_get.js b/lib/do_datacenter/do_get.js
new file mode 100644
index 0000000..8079c25
--- /dev/null
+++ b/lib/do_datacenter/do_get.js
@@ -0,0 +1,71 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2015 Joyent, Inc.
+ *
+ * `triton datacenter ...`
+ */
+
+var common = require('../common');
+
+function do_get(subcmd, opts, args, callback) {
+    if (opts.help) {
+        this.do_help('help', {}, [subcmd], callback);
+        return;
+    } else if (args.length !== 1) {
+        callback(new Error('invalid args: ' + args));
+        return;
+    }
+
+    var tritonapi = this.top.tritonapi;
+    common.cliSetupTritonApi({cli: this.top}, function onSetup(setupErr) {
+        if (setupErr) {
+            callback(setupErr);
+        }
+        tritonapi.cloudapi.getDatacenter(args[0], function (err, datacenter) {
+            if (err) {
+                callback(err);
+                return;
+            }
+
+            if (opts.json) {
+                console.log(JSON.stringify(datacenter));
+            } else {
+                console.log(JSON.stringify(datacenter, null, 4));
+            }
+            callback();
+        });
+    });
+}
+
+do_get.options = [
+    {
+        names: ['help', 'h'],
+        type: 'bool',
+        help: 'Show this help.'
+    },
+    {
+        names: ['json', 'j'],
+        type: 'bool',
+        help: 'JSON output.'
+    }
+];
+
+do_get.synopses = ['{{name}} {{cmd}} [OPTIONS] NAME'];
+
+do_get.help = [
+    'Show datacenter in this cloud.',
+    'A "cloud" is a set of related datacenter that share account',
+    'information.',
+    '',
+    '{{usage}}',
+    '',
+    '{{options}}',
+    'Where "NAME" is an datacenter name.'
+].join('\n');
+
+module.exports = do_get;
diff --git a/lib/do_datacenter/do_list.js b/lib/do_datacenter/do_list.js
new file mode 100644
index 0000000..0a5960b
--- /dev/null
+++ b/lib/do_datacenter/do_list.js
@@ -0,0 +1,96 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2015 Joyent, Inc.
+ *
+ * `triton datacenters ...`
+ */
+
+var tabula = require('tabula');
+
+var common = require('../common');
+
+// columns default without -o
+var columnsDefault = 'name,url';
+
+// sort default with -s
+var sortDefault = 'name';
+
+function do_list(subcmd, opts, args, callback) {
+    if (opts.help) {
+        this.do_help('help', {}, [subcmd], callback);
+        return;
+    } else if (args.length !== 0) {
+        callback(new Error('invalid args: ' + args));
+        return;
+    }
+
+    var columns = opts.o.split(',');
+    var sort = opts.s.split(',');
+    var tritonapi = this.top.tritonapi;
+
+    common.cliSetupTritonApi({cli: this.top}, function onSetup(setupErr) {
+        if (setupErr) {
+            callback(setupErr);
+        }
+        tritonapi.cloudapi.listDatacenters(function (err, datacenters) {
+            if (err) {
+                callback(err);
+                return;
+            }
+
+            if (opts.json) {
+                console.log(JSON.stringify(datacenters));
+            } else {
+                /*
+                 * datacenters are returned in the form of:
+                 * {name: 'url', name2: 'url2', ...}
+                 * we "normalize" them for use by tabula by making them an array
+                 */
+                var dcs = [];
+                Object.keys(datacenters).forEach(function (key) {
+                    dcs.push({
+                        name: key,
+                        url: datacenters[key]
+                    });
+                });
+                tabula(dcs, {
+                    skipHeader: opts.H,
+                    columns: columns,
+                    sort: sort,
+                    dottedLookup: true
+                });
+            }
+            callback();
+        });
+    });
+}
+
+do_list.options = [
+    {
+        names: ['help', 'h'],
+        type: 'bool',
+        help: 'Show this help.'
+    }
+].concat(common.getCliTableOptions({
+    columnsDefault: columnsDefault,
+    sortDefault: sortDefault
+}));
+
+do_list.synopses = ['{{name}} {{cmd}}'];
+
+do_list.help = [
+    'Show datacenters in this cloud.',
+    'A "cloud" is a set of related datacenters that share account',
+    'information.',
+    '',
+    '{{usage}}',
+    '',
+    '{{options}}'
+].join('\n');
+
+module.exports = do_list;
diff --git a/lib/do_datacenter/index.js b/lib/do_datacenter/index.js
new file mode 100644
index 0000000..21bf6f0
--- /dev/null
+++ b/lib/do_datacenter/index.js
@@ -0,0 +1,50 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2015 Joyent, Inc.
+ *
+ * `triton datacenter ...`
+ */
+
+var Cmdln = require('cmdln').Cmdln;
+var util = require('util');
+
+// ---- CLI class
+
+function DatacenterCLI(top) {
+    this.top = top;
+    Cmdln.call(this, {
+        name: top.name + ' datacenter',
+        /* BEGIN JSSTYLED */
+        desc: [
+            'List and get Triton datacenters.',
+            '',
+            'A "cloud" is a set of related datacenters that share account',
+            'information.'
+        ].join('\n'),
+        /* END JSSTYLED */
+        helpOpts: {
+            minHelpCol: 24 /* line up with option help */
+        },
+        helpSubcmds: [
+            'help',
+            'list',
+            'get'
+        ]
+    });
+}
+util.inherits(DatacenterCLI, Cmdln);
+
+DatacenterCLI.prototype.init = function init(opts, args, cb) {
+    this.log = this.top.log;
+    Cmdln.prototype.init.apply(this, arguments);
+};
+
+DatacenterCLI.prototype.do_list = require('./do_list');
+DatacenterCLI.prototype.do_get = require('./do_get');
+
+module.exports = DatacenterCLI;
diff --git a/lib/do_datacenters.js b/lib/do_datacenters.js
index e6935fe..6705e67 100644
--- a/lib/do_datacenters.js
+++ b/lib/do_datacenters.js
@@ -10,87 +10,16 @@
  * `triton datacenters ...`
  */
 
-var tabula = require('tabula');
-
-var common = require('./common');
-
-// columns default without -o
-var columnsDefault = 'name,url';
-
-// sort default with -s
-var sortDefault = 'name';
-
 function do_datacenters(subcmd, opts, args, callback) {
-    if (opts.help) {
-        this.do_help('help', {}, [subcmd], callback);
-        return;
-    } else if (args.length !== 0) {
-        callback(new Error('invalid args: ' + args));
-        return;
-    }
-
-    var columns = opts.o.split(',');
-    var sort = opts.s.split(',');
-    var tritonapi = this.tritonapi;
-
-    common.cliSetupTritonApi({cli: this}, function onSetup(setupErr) {
-        if (setupErr) {
-            callback(setupErr);
-        }
-        tritonapi.cloudapi.listDatacenters(function (err, datacenters) {
-            if (err) {
-                callback(err);
-                return;
-            }
-
-            if (opts.json) {
-                console.log(JSON.stringify(datacenters));
-            } else {
-                /*
-                 * datacenters are returned in the form of:
-                 * {name: 'url', name2: 'url2', ...}
-                 * we "normalize" them for use by tabula by making them an array
-                 */
-                var dcs = [];
-                Object.keys(datacenters).forEach(function (key) {
-                    dcs.push({
-                        name: key,
-                        url: datacenters[key]
-                    });
-                });
-                tabula(dcs, {
-                    skipHeader: opts.H,
-                    columns: columns,
-                    sort: sort,
-                    dottedLookup: true
-                });
-            }
-            callback();
-        });
-    });
+    this.handlerFromSubcmd('datacenter').dispatch({
+        subcmd: 'list',
+        opts: opts,
+        args: args
+    }, callback);
 }
 
-do_datacenters.options = [
-    {
-        names: ['help', 'h'],
-        type: 'bool',
-        help: 'Show this help.'
-    }
-].concat(common.getCliTableOptions({
-    columnsDefault: columnsDefault,
-    sortDefault: sortDefault
-}));
-
-do_datacenters.synopses = ['{{name}} {{cmd}}'];
-
-do_datacenters.help = [
-    'Show datacenters in this cloud.',
-    'A "cloud" is a set of related datacenters that share account',
-    'information.',
-    '',
-    '{{usage}}',
-    '',
-    '{{options}}'
-].join('\n');
+do_datacenters.help = 'A shortcut for "triton datacenter list".';
+do_datacenters.hidden = true;
+do_datacenters.options = require('./do_datacenter/do_list').options;
 
 module.exports = do_datacenters;
diff --git a/test/integration/cli-subcommands.test.js b/test/integration/cli-subcommands.test.js
index 3c83c37..ee691f1 100644
--- a/test/integration/cli-subcommands.test.js
+++ b/test/integration/cli-subcommands.test.js
@@ -34,6 +34,7 @@ var subs = [
     ['account get'],
     ['account update'],
     ['services'],
+    ['datacenter'],
     ['datacenters'],
     ['instance', 'inst'],
     ['instance list', 'instance ls', 'instances', 'insts', 'ls'],
