From 69c1c7f6fa21b60504fabf28c8ae6345241b5944 Mon Sep 17 00:00:00 2001
From: Isaac Davis <isaac.davis@joyent.com>
Date: Tue, 26 Mar 2019 01:26:10 +0000
Subject: [PATCH] TRITON-1352 Add CLI flag for ssh key in LX Grafana setup
 script

---
 README.md             | 58 +++++++++++++++++++++++++++++++++++++++++++
 setup-grafana-prod.sh | 41 ++++++++++++++++++++++++------
 2 files changed, 91 insertions(+), 8 deletions(-)

diff --git a/README.md b/README.md
index 1103c15..026f293 100644
--- a/README.md
+++ b/README.md
@@ -13,6 +13,64 @@ TritonDC "prometheus" and "grafana" services.
 
 ## How to deploy Prometheus and Grafana for monitoring Triton
 
+**NOTE**: the `setup-prometheus.sh` and `setup-grafana.sh` scripts are effectively
+deprecated -- the `setup-*-prod.sh` scripts implement all of their
+functionality, plus a number of additional features.
+
+### Setting up Prometheus
+
+Run `./setup-prometheus-prod.sh` from a Triton headnode. All CLI flags are
+optional; here's an explanation of what each flag does:
+- `-i` specifies that Prometheus should connect to CMON using insecure TLS; this
+  flag is likely necessary in a development environment
+- `-f` enables the Prometheus zone's firewall on the external network
+- `-r <comma-separated list of resolver IPs>` gives the Prometheus zone extra
+  DNS resolvers; common values to include are the CNS zone's IP and the IP of
+  a resolver for the public internet
+- `-s <server UUID>` specifies which server in the Triton deployment to
+  provision the zone on; the default is the server on which the script is being
+  run
+- `-k <path to ssh key>` puts the specified key in the Prometheus zone's
+  `authorized_keys` file to allow ssh access
+
+An appropriate invocation for a development setup would be:
+
+	./setup-prometheus-prod.sh \
+	-i \
+	-r <CNS IP>,8.8.8.8 \
+	-k /root/.ssh/sdc.id_rsa.pub
+
+An appropriate invocation for a production environment would be:
+
+	./setup-prometheus-prod.sh \
+	-f \
+	-r <CNS IP>,8.8.8.8 \
+	-s <server UUID> \
+	-k /root/.ssh/sdc.id_rsa.pub
+
+### Setting up Grafana
+
+Run `./setup-grafana-prod.sh` from a Triton headnode. All CLI flags are
+optional; here's an explanation of what each flag does:
+- `-s <server UUID>` specifies which server in the Triton deployment to
+  provision the zone on; the default is the server on which the script is being
+  run
+- `-k <path to ssh key>` puts the specified key in the Grafana zone's
+  `authorized_keys` file to allow ssh access
+
+An appropriate invocation for a development setup would be:
+
+	./setup-grafana-prod.sh \
+	-k /root/.ssh/sdc.id_rsa.pub
+
+An appropriate invocation for a production environment would be:
+
+	./setup-grafana-prod.sh \
+	-s <server UUID> \
+	-k /root/.ssh/sdc.id_rsa.pub
+
+### (DEPRECATED) Instructions for old scripts
+
 Run the following from your computer/laptop. Assuming you have something like
 this in your "~/.ssh/config":
 
diff --git a/setup-grafana-prod.sh b/setup-grafana-prod.sh
index fc08330..d01521f 100755
--- a/setup-grafana-prod.sh
+++ b/setup-grafana-prod.sh
@@ -30,6 +30,11 @@ function fatal() {
     exit 1
 }
 
+function usage() {
+    echo "usage: ./setup-grafana.sh [-s <non-local server uuid>] [-k <path to ssh key>]" >&2
+    exit 1
+}
+
 # Necessary to ensure compatibility for servers with LACP - see HEAD-2247
 function get_admin_ip() {
     sysinfo | /usr/node/bin/node -e "
@@ -70,14 +75,22 @@ function get_admin_ip() {
     "
 }
 
-if [[ $# -gt 1 ]]; then
-    echo "usage: ./setup-grafana.sh [<non-local server uuid>]" >&2
-    exit 1
-fi
-
-server_uuid=$1
-if [[ -z "$server_uuid" ]]; then
-    server_uuid=$(sysinfo | json UUID) # local headnode by default
+server_uuid=$(sysinfo | json UUID) # local headnode by default
+ssh_key_file=
+ssh_key=
+while getopts ":s:k:" f; do
+    case $f in
+        s)  server_uuid=$OPTARG
+            ;;
+        k)  ssh_key_file=$OPTARG
+            ;;
+        \?) usage
+            ;;
+    esac
+done
+
+if [[ $# -gt 4 ]]; then
+    usage
 fi
 
 set -o errexit
@@ -93,6 +106,12 @@ fi
 
 . ~/.bash_profile
 
+# Check that key exists if we passed the flag; then read the key's contents
+if [[ -n "${ssh_key_file}" ]]; then
+    [[ -f "${ssh_key_file}" ]] || fatal "ssh key not found at ${ssh_key_file}"
+    ssh_key=$(<"${ssh_key_file}")
+fi
+
 #
 # grafana0 zone creation
 #
@@ -289,6 +308,12 @@ echo \$pw > /zones/${vm_uuid}/root/root/grafana/password.txt
 curl -sSf --cacert \${cert} -u admin:admin \
     "https://${grafana_ip}:${PORT}/api/user/password" -H content-type:application/json \
     -d '{"oldPassword":"admin","newPassword":'\"\${pw}\"',"confirmNew":'\"\${pw}\"'}' -X PUT
+
+# Add ssh key, if specified
+if [[ -n "${ssh_key_file}" ]]; then
+    echo "${ssh_key}" >> /zones/${vm_uuid}/root/root/.ssh/authorized_keys
+fi
+
 SERVER
 
 echo ""
-- 
2.21.0

