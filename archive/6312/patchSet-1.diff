From 9a5a9fea881b63e841fc0456c6769b8eec729b9e Mon Sep 17 00:00:00 2001
From: Dave Eddy <dave@daveeddy.com>
Date: Fri, 17 May 2019 11:37:18 -0400
Subject: [PATCH] MANTA-4169 Add full complement of metrics to boray

---
 src/lib.rs     | 53 ++++++++++++++++++++++++++++++++++++--------------
 src/metrics.rs |  8 +++++++-
 2 files changed, 45 insertions(+), 16 deletions(-)

diff --git a/src/lib.rs b/src/lib.rs
index 44e6f03..2170ea1 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -9,6 +9,7 @@ pub mod opts;
 
 pub mod util {
     use std::io::{Error, ErrorKind};
+    use std::time::Instant;
 
     use cueball::connection_pool::ConnectionPool;
     use cueball::backend::Backend;
@@ -35,25 +36,47 @@ pub mod util {
                        pool: &ConnectionPool<PostgresConnection, StaticIpResolver, impl FnMut(&Backend) -> PostgresConnection + Send + 'static>,
                        log: &Logger) -> Result<Vec<FastMessage>, Error>
     {
+        let now = Instant::now();
         let response: Vec<FastMessage> = vec![];
 
         metrics::INCOMING_REQUEST_COUNTER.inc();
 
-        match msg.data.d {
-            Value::Array(ref args) => {
-                match msg.data.m.name.as_str() {
-                    "getobject"    => object::get_handler(msg.id, &args, response, &pool, &log),
-                    "createobject" => object::create_handler(msg.id, &args, response, &pool, &log),
-                    "deleteobject" => object::delete_handler(msg.id, &args, response, &pool, &log),
-                    "listobjects"  => object::list_handler(msg.id, &args, response, &pool, &log),
-                    "getbucket"    => bucket::get_handler(msg.id, &args, response, &pool, &log),
-                    "createbucket" => bucket::create_handler(msg.id, &args, response, &pool, &log),
-                    "deletebucket" => bucket::delete_handler(msg.id, &args, response, &pool, &log),
-                    "listbuckets"  => bucket::list_handler(msg.id, &args, response, &pool, &log),
-                    _ => Err(Error::new(ErrorKind::Other, format!("Unsupported functon: {}", msg.data.m.name)))
-                }
+        let args = match msg.data.d {
+            Value::Array(ref args) => args,
+            _ => {
+                return Err(other_error("Expected JSON array"));
             }
-            _ => Err(other_error("Expected JSON array"))
-        }
+        };
+
+        let method = msg.data.m.name.as_str();
+        let ret = match method {
+            "getobject"    => object::get_handler(msg.id, &args, response, &pool, &log),
+            "createobject" => object::create_handler(msg.id, &args, response, &pool, &log),
+            "deleteobject" => object::delete_handler(msg.id, &args, response, &pool, &log),
+            "listobjects"  => object::list_handler(msg.id, &args, response, &pool, &log),
+            "getbucket"    => bucket::get_handler(msg.id, &args, response, &pool, &log),
+            "createbucket" => bucket::create_handler(msg.id, &args, response, &pool, &log),
+            "deletebucket" => bucket::delete_handler(msg.id, &args, response, &pool, &log),
+            "listbuckets"  => bucket::list_handler(msg.id, &args, response, &pool, &log),
+            _ => return Err(Error::new(ErrorKind::Other, format!("Unsupported functon: {}", method)))
+        };
+
+        // If we are here, then the method name was valid, and the request may or
+        // may not have been successful.
+
+        // Generate metrics for the request
+        let duration = now.elapsed();
+        let secs = duration.as_secs() as f64;
+        let ms = duration.subsec_millis() as f64 / 1000 as f64;
+        let t = secs + ms;
+
+        let success = match ret.is_ok() {
+            true => "true",
+            false => "false"
+        };
+
+        metrics::FAST_REQUESTS.with_label_values(&[&method, success]).observe(t);
+
+        ret
     }
 }
diff --git a/src/metrics.rs b/src/metrics.rs
index 752b20e..15a6cad 100644
--- a/src/metrics.rs
+++ b/src/metrics.rs
@@ -12,7 +12,8 @@ use hyper::server::Server;
 use hyper::service::service_fn_ok;
 use hyper::StatusCode;
 use lazy_static::lazy_static;
-use prometheus::{Counter, Encoder, TextEncoder, labels, opts, register_counter};
+use prometheus::{HistogramVec, Counter, Encoder, TextEncoder, labels, opts, register_counter,
+register_histogram_vec, histogram_opts};
 use slog::{Logger, error, info};
 
 
@@ -27,6 +28,11 @@ lazy_static! {
         "Total number of metrics requests received.",
         labels! {"handler" => "all",}
     )).unwrap();
+    pub static ref FAST_REQUESTS: HistogramVec = register_histogram_vec!(
+        "fast_requests",
+        "Latency of all fast requests processed.",
+        &["method", "success"]
+    ).unwrap();
 }
 
 pub fn start_server(address: String, port: u32, log: Logger) {
-- 
2.21.0

