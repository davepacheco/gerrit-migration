commit eb128f0588cc3d7167f572eae0c7c26600ef0fb8 (refs/changes/77/3077/2)
Author: Dave Eddy <dave@daveeddy.com>
Date:   2017-12-11T14:10:29-05:00 (1 year, 10 months ago)
    
    OS-6506 test runner should track execution time for non-terminal outputs

diff --git a/src/Makefile b/src/Makefile
index eb0c4abf..e0047540 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -97,6 +97,7 @@ JS_CHECK_TARGETS=\
 	img/lib/*.js \
 	img/sbin/imgadm \
 	vm/common/nictag.js \
+	vm/tests/test-00-noop.js \
 	vm/tests/test-alias.js \
 	vm/tests/test-cleanup-on-failure.js \
 	vm/tests/test-create.js \
diff --git a/src/manifest b/src/manifest
index e8d151a3..8a7fe049 100644
--- a/src/manifest
+++ b/src/manifest
@@ -272,7 +272,7 @@ d usr/vm/test/testdata/vmload-xml 0555 root bin
 d usr/vm/test/tests 0555 root bin
 d usr/vm/test/common 0555 root bin
 f usr/vm/test/common/nictag.js 0444 root bin
-f usr/vm/test/common/vmtest.js 0444 root bin
+f usr/vm/test/common/vmtest.js 0555 root bin
 f usr/vm/test/runtest 0555 root bin
 f usr/vm/test/runtests 0555 root bin
 f usr/vm/sbin/add-userscript 0555 root bin
diff --git a/src/vm/common/vmtest.js b/src/vm/common/vmtest.js
old mode 100644
new mode 100755
index 2bf8d623..db95d7ff
--- a/src/vm/common/vmtest.js
+++ b/src/vm/common/vmtest.js
@@ -1,14 +1,46 @@
-//
-// Copyright 2016 Joyent, Inc.  All rights reserved.
-//
-// This is the common set of functions for things like ensuring we have a
-// SmartOS and Ubuntu image to work with.
-//
+#!/usr/node/bin/node
+/*
+ * CDDL HEADER START
+ *
+ * The contents of this file are subject to the terms of the
+ * Common Development and Distribution License, Version 1.0 only
+ * (the "License").  You may not use this file except in compliance
+ * with the License.
+ *
+ * You can obtain a copy of the license at http://smartos.org/CDDL
+ *
+ * See the License for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * When distributing Covered Code, include this CDDL HEADER in each
+ * file.
+ *
+ * If applicable, add the following below this CDDL HEADER, with the
+ * fields enclosed by brackets "[]" replaced with your own identifying
+ * information: Portions Copyright [yyyy] [name of copyright owner]
+ *
+ * CDDL HEADER END
+ *
+ * Copyright (c) 2017, Joyent, Inc.
+ *
+ * This is the common set of functions for things like ensuring we have a
+ * SmartOS and Ubuntu image to work with.
+ *
+ * If called on the command line directly, this program will output its exports
+ * as tab separated key-value pairs.  For example:
+ *
+ * [root@headnode (coal) ~]# /usr/vm/test/common/vmtest.js
+ * IMAGES_SOURCE   https://images.joyent.com/
+ * CURRENT_SMARTOS_UUID    01b2c898-945f-11e1-a523-af1afbe22822
+ * CURRENT_UBUNTU_UUID     71101322-43a5-11e1-8f01-cf2a3031a7f4
+ * CURRENT_UBUNTU_NAME     ubuntu-10.04
+ * CURRENT_UBUNTU_SIZE     5120
+ *
+ */
 
 process.env['TAP'] = 1;
 var async = require('/usr/node/node_modules/async');
 var cp = require('child_process');
-var fs = require('fs');
 var VM = require('/usr/vm/node_modules/VM');
 
 var DEFAULT_ZFS_PROPERTIES = {
@@ -47,8 +79,8 @@ var DEFAULT_ZFS_PROPERTIES = {
   "refcompressratio": "1.00x",
   "redundant_metadata": "all"
 };
-var IMAGES_SOURCE = 'https://images.joyent.com/';
 
+exports.IMAGES_SOURCE = 'https://images.joyent.com/';
 exports.CURRENT_DOCKER_IMAGE_UUID = process.env['DOCKER_BASE_IMAGE_UUID'];
 exports.CURRENT_SMARTOS_UUID = '01b2c898-945f-11e1-a523-af1afbe22822';
 exports.CURRENT_UBUNTU_UUID = '71101322-43a5-11e1-8f01-cf2a3031a7f4';
@@ -57,6 +89,8 @@ exports.CURRENT_UBUNTU_SIZE = 5120;
 
 exports.on_new_vm = function(t, uuid, payload, state, fnlist, callback)
 {
+    var functions;
+
     if (payload.hasOwnProperty('brand') && !state.hasOwnProperty('brand')) {
         state.brand = payload.brand;
     }
@@ -191,3 +225,17 @@ function checkDefaultZfsProperties(t, dataset, message, callback) {
         callback();
     });
 };
+
+if (require.main === module) {
+    Object.keys(exports).forEach(function (k) {
+        var elem = exports[k];
+
+        switch (typeof (elem)) {
+        case 'function':
+        case 'undefined':
+            return;
+        }
+
+        console.log('%s\t%s', k, elem);
+    });
+}
diff --git a/src/vm/runtest b/src/vm/runtest
index 63157cd2..c2ae9663 100755
--- a/src/vm/runtest
+++ b/src/vm/runtest
@@ -1,9 +1,56 @@
-#!/bin/bash
+#!/usr/bin/env bash
+#
+# This file and its contents are supplied under the terms of the
+# Common Development and Distribution License ("CDDL"), version 1.0.
+# You may only use this file in accordance with the terms of version
+# 1.0 of the CDDL.
+#
+# A full copy of the text of the CDDL should have accompanied this
+# source.  A copy of the CDDL is also available via the Internet at
+# http://www.illumos.org/license/CDDL.
+#
+
+#
+# Copyright (c) 2017 Joyent, Inc.
+#
 
 # All tests must pass!
 set -o errexit
 
-ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
+start_time=$(date +%s)
+script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+test_output=/tmp/test.output.$$
+
+# Check if an element is an array
+# Example:
+# arr=(foo bar baz)
+# in_array foo "${arr[@]}"
+# => 0
+# in_array bat "${arr[@]}"
+# => 1
+in_array() {
+    local elem
+    local want=$1
+    shift
+    for elem in "$@"; do
+        if [[ "$elem" == "$want" ]]; then
+            return 0
+        fi
+    done
+    return 1
+}
+
+# Return the UUID of a busybox image on the system
+get_docker_base_image_uuid() {
+    imgadm list -Ho uuid,tags \
+        | awk '/"docker:repo":"busybox"/ { print $1 }' \
+        | head -1
+}
+
+if [[ -z $script_dir ]]; then
+    echo "FATAL: failed to determine script path"
+    exit 1
+fi
 
 if [[ ! -f "/lib/sdc/.sdc-test-no-production-data" ]]; then
     cat <<EOF
@@ -16,8 +63,6 @@ EOF
     exit 2
 fi
 
-start_time=$(date +%s)
-
 if [[ $(uname -s) != 'SunOS' ]]; then
     echo "FATAL: this can only run on SmartOS"
     exit 1
@@ -38,91 +83,107 @@ if [[ -z "$1" ]]; then
     exit 1
 fi
 
-# Before starting tests, ensure we have the source(s) we want for test VM images
+# Read the common/vmtest.js file into memory as an associative array
+declare -A vmtest_common
+while IFS=$'\t' read -r key value; do
+    vmtest_common[$key]=$value
+done < <("$script_dir/common/vmtest.js")
 
-have_sources="imgadm sources | sort"
-want_source="grep IMAGES_SOURCE ${ROOT}/common/vmtest.js | cut -d\' -f2"
+# Before starting tests, ensure we have the source we want for test VM images
+mapfile -t have_sources < <(imgadm sources)
+want=${vmtest_common['IMAGES_SOURCE']}
 
-for src in $(comm -1 -3 <(eval ${have_sources}) <(eval ${want_source})); do
-    imgadm sources -a "${src}"
-done
+if [[ -z $want ]]; then
+    echo "FATAL: vmtest.js did not contain IMAGES_SOURCE"
+    exit 1
+fi
+
+if ! in_array "$want" "${have_sources[@]}"; then
+    imgadm sources -a "$want"
+fi
 
 # Ensure images used by tests are installed
+mapfile -t have_images < <(imgadm list -H -o uuid)
+image_re='CURRENT_.*_UUID'
 
-installed_images='imgadm list -H -o uuid | sort'
-want_images="cat ${ROOT}/common/vmtest.js | grep exports\.CURRENT_.*_UUID \
-    | grep -v "process.env" | cut -d \"'\" -f2 | sort"
+for key in "${!vmtest_common[@]}"; do
+    if ! [[ $key =~ $image_re ]]; then
+        continue
+    fi
+    img=${vmtest_common[$key]}
+
+    if in_array "$img" "${have_images[@]}"; then
+        continue
+    fi
 
-for img in $(comm -1 -3 <(eval ${installed_images}) <(eval ${want_images})); do
-    if [[ ${img} == "71101322-43a5-11e1-8f01-cf2a3031a7f4" ]]; then
+    case "$img" in
+    '71101322-43a5-11e1-8f01-cf2a3031a7f4')
         MANTA_PATH="https://us-east.manta.joyent.com/Joyent_Dev/public/old_images/ubuntu-10.04"
-        (cd /var/tmp && curl -kO ${MANTA_PATH}/${img}.file \
-            && curl -kO ${MANTA_PATH}/${img}.manifest \
-            && imgadm install -f ${img}.file -m ${img}.manifest \
-            && rm -f ${img}.file ${img}.manifest)
-    elif [[ ${img} == "01b2c898-945f-11e1-a523-af1afbe22822" ]]; then
+        (cd /var/tmp && curl -kO "${MANTA_PATH}/${img}.file" \
+            && curl -kO "${MANTA_PATH}/${img}.manifest" \
+            && imgadm install -f "${img}.file" -m "${img}.manifest" \
+            && rm -f "${img}.file" "${img}.manifest")
+        ;;
+    '01b2c898-945f-11e1-a523-af1afbe22822')
         MANTA_PATH="https://us-east.manta.joyent.com/Joyent_Dev/public/old_images/smartos-1.6.3"
-        (cd /var/tmp && curl -kO ${MANTA_PATH}/${img}.file \
-            && curl -kO ${MANTA_PATH}/${img}.manifest \
-            && imgadm install -f ${img}.file -m ${img}.manifest \
-            && rm -f ${img}.file ${img}.manifest)
-    else
+        (cd /var/tmp && curl -kO "${MANTA_PATH}/${img}.file" \
+            && curl -kO "${MANTA_PATH}/${img}.manifest" \
+            && imgadm install -f "${img}.file" -m "${img}.manifest" \
+            && rm -f "${img}.file" "${img}.manifest")
+        ;;
+    *)
         imgadm import "${img}"
-    fi
+        ;;
+    esac
 done
 
 # Special case for docker
-
 imgadm sources --add-docker-hub
-export DOCKER_BASE_IMAGE_UUID=$(imgadm list -o uuid,tags \
-    | grep "\"docker:repo\":\"busybox\"" \
-    | cut -d' ' -f1 \
-    | head -1)
-if [[ -z ${DOCKER_BASE_IMAGE_UUID} ]]; then
+export DOCKER_BASE_IMAGE_UUID=$(get_docker_base_image_uuid)
+
+if [[ -z $DOCKER_BASE_IMAGE_UUID ]]; then
+    # Try to import busybox if we don't have it
     imgadm import busybox:1.24.0
-    export DOCKER_BASE_IMAGE_UUID=$(imgadm list -o uuid,tags \
-        | grep "\"docker:repo\":\"busybox\"" \
-        | cut -d' ' -f1)
-    if [[ -z ${DOCKER_BASE_IMAGE_UUID} ]]; then
-        echo "Unable to download busybox:1.24.0 docker image" >&2
-        exit 1
-    fi
+    export DOCKER_BASE_IMAGE_UUID=$(get_docker_base_image_uuid)
+fi
+if [[ -z $DOCKER_BASE_IMAGE_UUID ]]; then
+    # If we still don't have it then something went wrong and we can't continue
+    echo 'Unable to download busybox:1.24.0 docker image' >&2
+    exit 1
 fi
 
 # Ensure nic tags needed by tests exist
-
 for tag in admin external; do
-    if ! /usr/bin/nictagadm exists ${tag} >/dev/null 2>&1; then
-        echo "Missing NIC tag: ${tag}, please add w/ nictagadm and try again" >&2
+    if ! /usr/bin/nictagadm exists "$tag" &>/dev/null; then
+        echo "Missing NIC tag: $tag, please add w/ nictagadm and try again" >&2
         exit 2
     fi
 done
 
-set +o errexit
-set -o pipefail
+# Run the actual test
 /usr/bin/ctrun -l child -o noorphan /usr/node/bin/node \
     --abort_on_uncaught_exception \
     /usr/vm/node_modules/nodeunit/bin/nodeunit \
-    --reporter tap $1 | tee -a /tmp/test.output.$$
-TEST_EXIT_CODE=$?
-set +o pipefail
-set -o errexit
+    --reporter tap "$1" | tee "$test_output"
+test_exit_code=${PIPESTATUS[0]}
 
 end_time=$(date +%s)
-elapsed=$((${end_time} - ${start_time}))
-
-tests=$(grep "^# tests [0-9]" /tmp/test.output.$$ | cut -d ' ' -f3 | xargs | tr ' ' '+' | bc)
-passed=$(grep "^# pass  [0-9]" /tmp/test.output.$$ | tr -s ' ' | cut -d ' ' -f3 | xargs | tr ' ' '+' | bc)
-skipped=$(grep "^# skip  [0-9]" /tmp/test.output.$$ | tr -s ' ' | cut -d ' ' -f3 | xargs | tr ' ' '+' | bc)
-
-[[ -z ${tests} ]] && tests=0
-[[ -z ${passed} ]] && passed=0
-[[ -z ${skipped} ]] && skipped=0
-
-fail=$((${tests} - ${passed} - ${skipped}))
-
-if [[ ${TEST_EXIT_CODE} != 0 ]]; then
-    fail=$((${fail} + 1))
+elapsed=$((end_time - start_time))
+
+# Gather the test results
+read -r tests passed skipped < <(awk '
+    /^# (tests|pass|skip) +([0-9]+)$/ {
+        totals[$2] += $3;
+    } END {
+        printf("%d %d %d\n", totals["tests"],
+            totals["pass"], totals["skip"]);
+    }
+' "$test_output")
+
+fail=$((tests - passed - skipped))
+
+if ((test_exit_code != 0)); then
+    fail=$((fail + 1))
     tests="?"
 fi
 
@@ -143,7 +204,7 @@ if [[ -t 0 ]]; then
     echo "#"
 fi
 
-if [[ ${fail} -gt 0 ]]; then
+if ((fail > 0)); then
     exit 1
 fi
 
diff --git a/src/vm/runtests b/src/vm/runtests
index f5fae201..6322d07a 100755
--- a/src/vm/runtests
+++ b/src/vm/runtests
@@ -1,8 +1,33 @@
-#!/bin/bash
+#!/usr/bin/env bash
+#
+# This file and its contents are supplied under the terms of the
+# Common Development and Distribution License ("CDDL"), version 1.0.
+# You may only use this file in accordance with the terms of version
+# 1.0 of the CDDL.
+#
+# A full copy of the text of the CDDL should have accompanied this
+# source.  A copy of the CDDL is also available via the Internet at
+# http://www.illumos.org/license/CDDL.
+#
+
+#
+# Copyright (c) 2017 Joyent, Inc.
+#
 
 # All tests must pass!
 set -o errexit
 
+failed_tests=()
+has_failed='false'
+script_dir=$(unset CDPATH; cd "$(dirname "$0")" && pwd)
+start_time=$(date +%s)
+test_output=/tmp/tests.output.$$
+
+if [[ -z $script_dir ]]; then
+    echo "FATAL: failed to determine script path"
+    exit 1
+fi
+
 if [[ ! -f "/lib/sdc/.sdc-test-no-production-data" ]]; then
     cat <<EOF
 To run this test you must create the file:
@@ -14,8 +39,6 @@ EOF
     exit 2
 fi
 
-start_time=$(date +%s)
-
 if [[ $(uname -s) != 'SunOS' ]]; then
     echo "FATAL: this can only run on SmartOS"
     exit 1
@@ -31,35 +54,48 @@ if [[ $(id -u) != 0 ]]; then
     exit 1
 fi
 
-test_errors=0
-failed_tests=
-
-pwd=$(unset CDPATH; cd $(dirname $0); pwd)
-for test in $(ls $pwd/tests | grep "\.js$"); do
-    set +o errexit
-    set -o pipefail
-    (/usr/vm/test/runtest $pwd/tests/${test} 2>&1) > >(tee -a /tmp/test.output.$$)
-    TEST_EXIT_CODE=$?
-    set +o pipefail
-    set -o errexit
-    if [[ ${TEST_EXIT_CODE} != 0 ]]; then
-        test_errors=$((${test_errors} + 1))
-        failed_tests=$(printf "${pwd}/tests/${test}\n${failed_tests}")
+# Clear (and create) the test output file
+> "$test_output"
+
+# Loop each test and run them
+tests=("$script_dir/tests/"*.js)
+i=1
+for test in "${tests[@]}"; do
+    echo "# $test ($i/${#tests[@]})"
+    start_test=$(($(date +%s%N) / 1000 / 1000))
+
+    # Run the test
+    /usr/vm/test/runtest "$test" 2>&1 | tee -a "$test_output"
+    test_exit_code=${PIPESTATUS[0]}
+
+    # Record any failure
+    if ((test_exit_code != 0)); then
+        failed_tests+=("$test")
     fi
+
+    end_test=$(($(date +%s%N) / 1000 / 1000))
+    delta_ms=$((end_test - start_test))
+    delta_s=$(bc <<< "scale=3; $delta_ms / 1000")
+
+    echo "# $test (took ${delta_s}s)"
+    echo
+
+    i=$((i + 1))
 done
 
 end_time=$(date +%s)
-elapsed=$((${end_time} - ${start_time}))
-
-tests=$(grep "^# tests [0-9]" /tmp/test.output.$$ | cut -d ' ' -f3 | xargs | tr ' ' '+' | bc)
-passed=$(grep "^# pass  [0-9]" /tmp/test.output.$$ | tr -s ' ' | cut -d ' ' -f3 | xargs | tr ' ' '+' | bc)
-skipped=$(grep "^# skip  [0-9]" /tmp/test.output.$$ | tr -s ' ' | cut -d ' ' -f3 | xargs | tr ' ' '+' | bc)
+elapsed=$((end_time - start_time))
 
-[[ -z ${tests} ]] && tests=0
-[[ -z ${passed} ]] && passed=0
-[[ -z ${skipped} ]] && skipped=0
+read -r tests passed skipped < <(awk '
+    /^# (tests|pass|skip) +([0-9]+)$/ {
+        totals[$2] += $3;
+    } END {
+        printf("%d %d %d\n", totals["tests"],
+            totals["pass"], totals["skip"]);
+    }
+' "$test_output")
 
-fail=$((${tests} - ${passed} - ${skipped}))
+fail=$((tests - passed - skipped))
 
 if [[ -t 0 ]]; then
     PASS_COLOR="\033[32m"
@@ -77,22 +113,24 @@ echo "#"
 echo "# $1 TEST COMPLETE IN ${elapsed} SECONDS, SUMMARY:"
 echo "#"
 echo -e "# ${PASS_COLOR}PASS: ${passed} / ${tests}${NORMAL_COLOR}"
-if [[ ${skipped} -gt 0 ]]; then
+if ((skipped > 0)); then
     echo -e "# ${SKIP_COLOR}SKIP: ${skipped} / ${tests}${NORMAL_COLOR}"
 fi
-if [[ ${fail} -gt 0 ]]; then
+if ((fail > 0)); then
+    has_failed='true'
     echo -e "# ${FAIL_COLOR}FAIL: ${fail} / ${tests}${NORMAL_COLOR}"
 fi
-if [[ -n ${failed_tests} ]]; then
+if ((${#failed_tests[@]} > 0)); then
+    has_failed='true'
     echo "#"
     echo "#  ** FAILED TESTS **"
-    for test in ${failed_tests}; do
+    for test in "${failed_tests[@]}"; do
         echo -e "#  ${FAIL_COLOR}${test}${NORMAL_COLOR}"
     done
 fi
 echo "#"
 
-if [[ ${fail} -gt 0 || ${test_errors} -gt 0 ]]; then
+if [[ $has_failed == 'true' ]]; then
     exit 1
 fi
 
diff --git a/src/vm/tests/test-00-noop.js b/src/vm/tests/test-00-noop.js
new file mode 100644
index 00000000..f1651d01
--- /dev/null
+++ b/src/vm/tests/test-00-noop.js
@@ -0,0 +1,40 @@
+/*
+ * CDDL HEADER START
+ *
+ * The contents of this file are subject to the terms of the
+ * Common Development and Distribution License, Version 1.0 only
+ * (the "License").  You may not use this file except in compliance
+ * with the License.
+ *
+ * You can obtain a copy of the license at http://smartos.org/CDDL
+ *
+ * See the License for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * When distributing Covered Code, include this CDDL HEADER in each
+ * file.
+ *
+ * If applicable, add the following below this CDDL HEADER, with the
+ * fields enclosed by brackets "[]" replaced with your own identifying
+ * information: Portions Copyright [yyyy] [name of copyright owner]
+ *
+ * CDDL HEADER END
+ *
+ * Copyright (c) 2017, Joyent, Inc.
+ *
+ * This test does effectively nothing.  The purpose of this test is to run
+ * first when called via the `runtests` test runner, and allow for any setup by
+ * the `runtest` script, such as pulling and installing images.  This way, the
+ * time it takes for this test to run will reflect the time it takes for all of
+ * that setup to complete, and all subsequent tests will not have any of that
+ * setup cost as part of the time it takes for them to run.
+ */
+
+// this puts test stuff in global, so we need to tell jsl about that:
+/* jsl:import ../node_modules/nodeunit-plus/index.js */
+require('nodeunit-plus');
+
+test('test noop', function (t) {
+    t.ok(true, 'noop');
+    t.end();
+});
