From 0d005eb1ed3fc03d85cde584dfa59b809e05f821 Mon Sep 17 00:00:00 2001
From: Todd Whiteman <todd.whiteman@joyent.com>
Date: Tue, 5 Dec 2017 13:47:13 -0800
Subject: [PATCH] TOOLS-1946 node-sdc-clients replace libuuid with uuid module

---
 CHANGES.md          |  4 ++++
 package.json        |  6 +++---
 test/amon.test.js   |  8 ++++----
 test/ca.test.js     | 14 +++++++-------
 test/cnapi.test.js  |  4 ++--
 test/napi.test.js   | 10 +++++-----
 test/vmapi.test.js  |  6 +++---
 test/volapi.test.js | 10 +++++-----
 8 files changed, 33 insertions(+), 29 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index 50c277b..aa920e7 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -8,6 +8,10 @@
 
 ## not yet released
 
+## 10.4.2
+
+- TOOLS-1946 node-sdc-clients replace libuuid with uuid module
+
 ## 10.4.1
 
 - DOCKER-1102 docker pull by manifest digest fails with an InternalError
diff --git a/package.json b/package.json
index 48c9fdf..9faae9a 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "sdc-clients",
   "description": "node.js client libraries for Triton core REST APIs.",
-  "version": "10.4.1",
+  "version": "10.4.2",
   "homepage": "http://www.joyent.com",
   "repository": {
     "type": "git",
@@ -16,7 +16,6 @@
     "clone": "0.1.8",
     "jsprim": "1.4.1",
     "lru-cache": "2.3.0",
-    "libuuid": "0.2.1",
     "lomstream": "1.1.0",
     "once": "^1.3.1",
     "restify-clients": "^1.4.1",
@@ -29,7 +28,8 @@
   "devDependencies": {
     "ldap-filter": "^0.3.1",
     "moray": "git+https://github.com/joyent/node-moray.git#fd5781bc25a9bfe2ba82167664639753fb9f0ca5",
-    "tape": "^4.6.0"
+    "tape": "^4.6.0",
+    "uuid": "3.1.0"
   },
   "engines": {
     "node": ">=0.8.14"
diff --git a/test/amon.test.js b/test/amon.test.js
index 9aa0d17..c4bf44d 100644
--- a/test/amon.test.js
+++ b/test/amon.test.js
@@ -5,11 +5,11 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
-var libuuid = require('libuuid');
 var test = require('tape');
+var uuid = require('uuid');
 
 var Amon = require('../lib/index').Amon;
 
@@ -32,12 +32,12 @@ var MACHINE_UUID = process.env.MACHINE_UUID;
 // Monitor name needs to be 32 chars length max and first char must be
 // alpha always:
 var MONITOR = {
-    'name' : 'p' + libuuid.create().replace(/-/g, '').substring(1),
+    'name' : 'p' + uuid.v4().replace(/-/g, '').substring(1),
     'contacts': ['email']
 };
 
 var MONITOR_2 = {
-    'name': 'p' + libuuid.create().replace(/-/g, '').substring(1),
+    'name': 'p' + uuid.v4().replace(/-/g, '').substring(1),
     'contacts': ['email']
 };
 
diff --git a/test/ca.test.js b/test/ca.test.js
index 4357ffe..41cb78e 100644
--- a/test/ca.test.js
+++ b/test/ca.test.js
@@ -5,13 +5,13 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 var bunyan = require('bunyan');
-var libuuid = require('libuuid');
 var test = require('tape');
 var util = require('util');
+var uuid = require('uuid');
 
 var CA = require('../lib/index').CA;
 
@@ -94,7 +94,7 @@ test('ca', function (tt) {
 
 
     tt.test(' list instrumentations bogus customer', function (t) {
-        ca.listInstrumentations(libuuid.create(), function (err, insts) {
+        ca.listInstrumentations(uuid.v4(), function (err, insts) {
             t.ifError(err);
             t.ok(insts);
             t.equal(insts.length, 0);
@@ -104,7 +104,7 @@ test('ca', function (tt) {
 
 
     tt.test(' get instrumentation bad', function (t) {
-        ca.getInstrumentation(customer, libuuid.create(), function (err, inst) {
+        ca.getInstrumentation(customer, uuid.v4(), function (err, inst) {
             t.ok(err);
             t.ok(!inst);
             t.equal(err.statusCode, 404);
@@ -134,7 +134,7 @@ test('ca', function (tt) {
 
 
     tt.test(' get heatmap bad', function (t) {
-        ca.getHeatmap(customer, libuuid.create(), function (err, heatmap) {
+        ca.getHeatmap(customer, uuid.v4(), function (err, heatmap) {
             t.ok(err);
             t.ok(!heatmap);
             t.equal(err.statusCode, 404);
@@ -147,7 +147,7 @@ test('ca', function (tt) {
 
 
     tt.test(' get heatmap details bad', function (t) {
-        ca.getHeatmapDetails(customer, libuuid.create(), {
+        ca.getHeatmapDetails(customer, uuid.v4(), {
             x: 10,
             y: 20
         }, function (err, heatmap) {
@@ -162,7 +162,7 @@ test('ca', function (tt) {
 
 
     tt.test(' delete instrumentation bad', function (t) {
-        ca.deleteInstrumentation(customer, libuuid.create(), function (err) {
+        ca.deleteInstrumentation(customer, uuid.v4(), function (err) {
             t.ok(err);
             t.equal(err.statusCode, 404);
             t.equal(err.restCode, 'ResourceNotFound');
diff --git a/test/cnapi.test.js b/test/cnapi.test.js
index 0d3d4c2..fa89ab6 100644
--- a/test/cnapi.test.js
+++ b/test/cnapi.test.js
@@ -9,9 +9,9 @@
  */
 
 var bunyan = require('bunyan');
-var libuuid = require('libuuid');
 var test = require('tape');
 var util = require('util');
+var uuid = require('uuid');
 
 var CNAPI = require('../lib/index').CNAPI;
 
@@ -22,7 +22,7 @@ var CNAPI = require('../lib/index').CNAPI;
 var CNAPI_URL = 'http://' + (process.env.CNAPI_IP || '10.99.99.22');
 
 var SERVER = null;
-var testVmUuid = libuuid.create();
+var testVmUuid = uuid.v4();
 var testVmAlias = 'nodesdcclientstest-cnapi-' + testVmUuid.split('-')[0];
 var TASK = null;
 var CUSTOMER = process.env.UFDS_ADMIN_UUID;
diff --git a/test/napi.test.js b/test/napi.test.js
index bf3d9e8..84e3c65 100644
--- a/test/napi.test.js
+++ b/test/napi.test.js
@@ -5,12 +5,12 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 var bunyan = require('bunyan');
-var libuuid = require('libuuid');
 var test = require('tape');
+var uuid = require('uuid');
 
 var NAPI = require('../lib/index').NAPI;
 
@@ -114,7 +114,7 @@ test('napi', function (tt) {
      * the `provisionable_by` property, which should return an error.
      */
     tt.test(' get unprovisionable network', function (t) {
-        var params = { provisionable_by: libuuid.create() };
+        var params = { provisionable_by: uuid.v4() };
 
         napi.getNetwork(ADMIN.uuid, { params: params },
                         function (err, network) {
@@ -182,7 +182,7 @@ test('napi', function (tt) {
 
 
     tt.test(' provision nic', function (t) {
-        NIC_UUID = libuuid.create();
+        NIC_UUID = uuid.v4();
         napi.provisionNic(ADMIN.uuid, {
             owner_uuid: process.env.UFDS_ADMIN_UUID,
             belongs_to_uuid: NIC_UUID,
@@ -203,7 +203,7 @@ test('napi', function (tt) {
 
 
     tt.test(' create new', function (t) {
-        var sUUID = libuuid.create(),
+        var sUUID = uuid.v4(),
             mac = pseudoRandomMac();
         napi.createNic(mac, {
             owner_uuid: process.env.UFDS_ADMIN_UUID,
diff --git a/test/vmapi.test.js b/test/vmapi.test.js
index f0ca299..31ad342 100644
--- a/test/vmapi.test.js
+++ b/test/vmapi.test.js
@@ -5,17 +5,17 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 
 var assert = require('assert-plus');
 var ldapfilter = require('ldap-filter');
-var libuuid = require('libuuid');
 var bunyan = require('bunyan');
 var moray = require('moray');
 var test = require('tape');
 var util = require('util');
+var uuid = require('uuid');
 var vasync = require('vasync');
 
 var VMAPI = require('../lib/index').VMAPI;
@@ -172,7 +172,7 @@ function createTestVms(nbTestVms, vmProperties, callback) {
             }, 10);
 
             for (var i = 0; i < nbTestVms; ++i) {
-                addVmsQueue.push(libuuid.create());
+                addVmsQueue.push(uuid.v4());
             }
 
             addVmsQueue.close();
diff --git a/test/volapi.test.js b/test/volapi.test.js
index 47b6966..efc28a8 100644
--- a/test/volapi.test.js
+++ b/test/volapi.test.js
@@ -10,9 +10,9 @@
 
 var assert = require('assert-plus');
 var bunyan = require('bunyan');
-var libuuid = require('libuuid');
 var restify = require('restify-clients');
 var test = require('tape');
+var uuid = require('uuid');
 
 assert.ok(typeof (process.env.NAPI_IP) === 'string' &&
     process.env.NAPI_IP !== '', 'NAPI_IP env var must be a non-empty string');
@@ -23,7 +23,7 @@ var ADMIN_UUID = process.env.UFDS_ADMIN_UUID;
 var ADMIN_FABRIC_NETWORK_UUID;
 var napiClient;
 var NAPI_URL = 'http://' + (process.env.NAPI_IP || '10.99.99.10');
-var TEST_VOLUME_NAME = 'node-sdc-clients-test-volapi-' + libuuid.create();
+var TEST_VOLUME_NAME = 'node-sdc-clients-test-volapi-' + uuid.v4();
 var TEST_VOLUME_UUID;
 
 var VOLAPI = require('../lib/index').VOLAPI;
@@ -205,9 +205,9 @@ test('volapi', testOps, function (tt) {
     tt.test(' create volume reservation', function (t) {
         volApiClient.createVolumeReservation({
             volume_name: 'foo',
-            vm_uuid: libuuid.create(),
-            job_uuid: libuuid.create(),
-            owner_uuid: libuuid.create()
+            vm_uuid: uuid.v4(),
+            job_uuid: uuid.v4(),
+            owner_uuid: uuid.v4()
         }, function onVolResCreated(resCreatErr, res) {
             t.ifError(resCreatErr,
                 'creating volume reservation should not error');
-- 
2.21.0

