From d977442ceab56e7dedb7ba0a2269f77b42c484c0 Mon Sep 17 00:00:00 2001
From: "Pedro P. Candel" <pedro@joyent.com>
Date: Tue, 19 Jul 2016 19:26:41 +0200
Subject: [PATCH] TOOLS-1471 sdcadm up dockerlogger/post-setup docker ur
 refactoring

---
 lib/post-setup/docker.js              | 71 +++++++--------------------
 lib/procedures/update-dockerlogger.js | 69 +++++++-------------------
 2 files changed, 36 insertions(+), 104 deletions(-)

diff --git a/lib/post-setup/docker.js b/lib/post-setup/docker.js
index 1ead935..2fddd4c 100644
--- a/lib/post-setup/docker.js
+++ b/lib/post-setup/docker.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2016, Joyent, Inc.
+ * Copyright 2016 Joyent, Inc.
  */
 
 var util = require('util'),
@@ -71,7 +71,9 @@ function do_docker(subcmd, opts, args, cb) {
 
     var context = {
         imgsToDownload: [],
-        downloadDir: '/var/tmp'
+        downloadDir: '/var/tmp',
+        serversToUpdate: [],
+        urConnection: null
     };
     vasync.pipeline({arg: context, funcs: [
         /* @field ctx.dockerPkg */
@@ -476,10 +478,10 @@ function do_docker(subcmd, opts, args, cb) {
 
         function urDiscoveryGetReady(ctx, next) {
             self.sdcadm.getUrConnection(function (err, urconn) {
-                ctx.log.debug({
-                    err: err
-                }, 'ur error');
                 if (err) {
+                    ctx.log.debug({
+                        err: err
+                    }, 'ur error');
                     next(new errors.InternalError({
                         cause: err,
                         message: 'ur failure'
@@ -494,55 +496,21 @@ function do_docker(subcmd, opts, args, cb) {
 
         function urDiscovery(ctx, next) {
             self.progress('Checking servers availability');
-            ctx.urServersToUpdate = [];
-            var onceNext = once(next);
-
-            var disco = ctx.urConnection.discover({
-                timeout: 10 * 1000,
-                exclude_headnode: false,
-                node_list: ctx.serversToUpdate.map(function (n) {
+            common.urDiscovery({
+                sdcadm: ctx.sdcadm,
+                progress: ctx.progress,
+                nodes: ctx.serversToUpdate.map(function (n) {
                     return n.uuid;
-                })
-            });
-
-            disco.on('server', function discoServer(urServer) {
-                ctx.log.trace({urServer: urServer}, 'discoServer');
-                ctx.urServersToUpdate.push(urServer);
-            });
-
-            disco.on('error', function discoError(err) {
-                if (err.nodes_missing && err.nodes_missing.length) {
-                    ctx.log.debug({nodes_missing: err.nodes_missing},
-                        'ur disco nodes missing');
-                    self.progress('Could not find %d servers (ur did not ' +
-                        'respond to discovery): %s',
-                        err.nodes_missing.length,
-                        err.nodes_missing.join(', '));
-                } else {
-                    self.progress('Unexpected ur discovery failure:', err);
+                }),
+                urconn: ctx.urConnection
+            }, function (err, urAvailServers) {
+                if (err) {
+                    next(err);
+                    return;
                 }
-                onceNext(err);
-            });
-
-            disco.on('duplicate', function discoDup(dupUuid, dupHostname) {
-                var err = new errors.InternalError({
-                    message: format('Duplicate server found during ur ' +
-                        'discovery: uuid=%s dupHostname=%s',
-                        dupUuid, dupHostname)
-                });
-                err.duplicate = [dupUuid, dupHostname];
-
-                /*
-                 * We are done with this discovery session.  Cancel it and
-                 * ignore future error/end events.
-                 */
-                disco.cancel();
-                onceNext(err);
-            });
-
-            disco.on('end', function discoEnd() {
-                ctx.log.trace('discoEnd');
+                ctx.urServersToUpdate = urAvailServers;
                 next();
+                return;
             });
         },
 
@@ -665,7 +633,6 @@ function do_docker(subcmd, opts, args, cb) {
                             filename: cmd.progbarName
                         });
                         queueOpts.progbar = bar;
-                        bar.advance(0); // Draw initial progbar at 0.
                     }
                     ctx.log.trace({
                         command: cmd.str,
diff --git a/lib/procedures/update-dockerlogger.js b/lib/procedures/update-dockerlogger.js
index 85054ae..73e1fbb 100644
--- a/lib/procedures/update-dockerlogger.js
+++ b/lib/procedures/update-dockerlogger.js
@@ -79,13 +79,12 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
 
         log.debug({change: change}, 'updateDockerlogger');
 
-        // var dockerloggerInsts = [];
-
         var context = {
             progress: progress,
             log: log,
             sdcadm: sdcadm,
-            urConnection: null
+            urConnection: null,
+            urServersToUpdate: []
         };
 
         vasync.pipeline({arg: context, funcs: [
@@ -249,10 +248,10 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
 
             function urDiscoveryGetReady(ctx, next) {
                 sdcadm.getUrConnection(function (err, urconn) {
-                    log.debug({
-                        err: err
-                    }, 'ur error');
                     if (err) {
+                        log.debug({
+                            err: err
+                        }, 'ur error');
                         next(new errors.InternalError({
                             cause: err,
                             message: 'ur failure'
@@ -267,55 +266,22 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
 
             function urDiscovery(ctx, next) {
                 progress('Checking servers availability');
-                ctx.urServersToUpdate = [];
-                var onceNext = once(next);
 
-                var disco = ctx.urConnection.discover({
-                    timeout: 10 * 1000,
-                    exclude_headnode: false,
-                    node_list: ctx.serversToUpdate.map(function (n) {
+                common.urDiscovery({
+                    sdcadm: sdcadm,
+                    progress: progress,
+                    nodes: ctx.serversToUpdate.map(function (n) {
                         return n.uuid;
-                    })
-                });
-
-                disco.on('server', function discoServer(urServer) {
-                    log.trace({urServer: urServer}, 'discoServer');
-                    ctx.urServersToUpdate.push(urServer);
-                });
-
-                disco.on('error', function discoError(err) {
-                    if (err.nodes_missing && err.nodes_missing.length) {
-                        log.debug({nodes_missing: err.nodes_missing},
-                            'ur disco nodes missing');
-                        progress('Could not find %d servers (ur did not ' +
-                            'respond to discovery): %s',
-                            err.nodes_missing.length,
-                            err.nodes_missing.join(', '));
-                    } else {
-                        progress('Unexpected ur discovery failure:', err);
+                    }),
+                    urconn: ctx.urConnection
+                }, function (err, urAvailServers) {
+                    if (err) {
+                        next(err);
+                        return;
                     }
-                    onceNext(err);
-                });
-
-                disco.on('duplicate', function discoDup(dupUuid, dupHostname) {
-                    var err = new errors.InternalError({
-                        message: format('Duplicate server found during ur ' +
-                            'discovery: uuid=%s dupHostname=%s',
-                            dupUuid, dupHostname)
-                    });
-                    err.duplicate = [dupUuid, dupHostname];
-
-                    /*
-                     * We are done with this discovery session.  Cancel it and
-                     * ignore future error/end events.
-                     */
-                    disco.cancel();
-                    onceNext(err);
-                });
-
-                disco.on('end', function discoEnd() {
-                    log.trace('discoEnd');
+                    ctx.urServersToUpdate = urAvailServers;
                     next();
+                    return;
                 });
             },
 
@@ -437,7 +403,6 @@ UpdateDockerlogger.prototype.execute = function udExecute(opts, callback) {
                                 filename: cmd.progbarName
                             });
                             queueOpts.progbar = bar;
-                            bar.advance(0); // Draw initial progbar at 0.
                         }
                         log.trace({
                             command: cmd.str,
-- 
2.21.0

