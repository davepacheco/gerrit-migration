From 365987993fb8844a8dd4beda681b4d6b0493abe6 Mon Sep 17 00:00:00 2001
From: Todd Whiteman <todd.whiteman@joyent.com>
Date: Wed, 2 Aug 2017 15:28:06 -0700
Subject: [PATCH] DOCKER-524 Implement docker push

---
 CHANGES.md     |   4 +
 lib/docker.js  | 466 ++++++++++++++++++++++++++++++++++++++++++++++++-
 lib/images.js  |  14 ++
 lib/storage.js |  31 +++-
 package.json   |   3 +-
 5 files changed, 510 insertions(+), 8 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index 2b0e9fd..dbef18a 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -1,5 +1,9 @@
 # IMGAPI changelog
 
+## 4.1.0
+
+- DOCKER-524: Implement docker push
+
 ## 4.0.3
 
 - IMGAPI-637: correctly report when docker image is update to date
diff --git a/lib/docker.js b/lib/docker.js
index 5394a3b..5eb7572 100644
--- a/lib/docker.js
+++ b/lib/docker.js
@@ -22,7 +22,9 @@ var drc = require('docker-registry-client');
 var imgmanifest = require('imgmanifest');
 var jsprim = require('jsprim');
 var once = require('once');
+var Readable = require('stream').Readable;
 var streampeek = require('buffer-peek-stream');
+var through2 = require('through2');
 var vasync = require('vasync');
 
 var constants = require('./constants');
@@ -1365,6 +1367,467 @@ function _dockerV21Pull(ctx, callback) {
 }
 
 
+// Done: Add progress messages.
+// TODO: Add cross repository blob mount (requires knowledge of tag names).
+// TODO: Support chunked uploads (using restify PATCH method).
+// TODO: Support resumable uploads.
+// TODO: Retry on failure?
+function _pushOneDockerLayer(opts, callback) {
+    assert.object(opts, 'opts');
+    assert.object(opts.app, 'opts.app');
+    assert.string(opts.digest, 'opts.digest');
+    assert.func(opts.Image, 'opts.Image');
+    assert.string(opts.imageUuid, 'opts.imageUuid');
+    assert.object(opts.log, 'opts.log');
+    assert.object(opts.regClient, 'opts.regClient');
+    assert.func(opts.resMessage, 'opts.resMessage');
+    assert.func(callback, 'callback');
+
+    var app = opts.app;
+    var digest = opts.digest;
+    var Image = opts.Image;
+    var imageUuid = opts.imageUuid;
+    var log = opts.log;
+    var manifest;
+    var REGISTRY_CONTAINS_IMAGE = true;  // Marker when image already exists.
+    var regClient = opts.regClient;
+    var resMessage = opts.resMessage;
+    var shortId = imgmanifest.shortDockerId(
+        imgmanifest.dockerIdFromDigest(digest));
+    var uploading = true;
+
+    function sendProgressStatus(msg, progressDetail) {
+        var payload = {
+            id: shortId,
+            status: msg
+        };
+        if (progressDetail) {
+            payload.progressDetail = progressDetail;
+        }
+        resMessage({
+            type: 'progress',
+            payload: payload
+        });
+    }
+
+    vasync.pipeline({ arg: { bytesPiped: 0 }, funcs: [
+        _getImage,
+        _checkLayerExistsInRegistry,
+        _getImgapiFileStream,
+        _startProgressUpdater,
+        _pipeStream,
+        _sendPushedStatus
+    ]}, _done);
+
+    // Lookup image in IMGAPI.
+    function _getImage(ctx, next) {
+        log.trace({imageUuid: imageUuid}, '_pushOneDockerLayer: _getImage');
+        Image.get(app, imageUuid, log, function (err, mnfst) {
+            if (err) {
+                next(err);
+            } else if (mnfst.state !== 'active') {
+                next(new errors.ResourceNotFoundError(imageUuid));
+            } else {
+                manifest = mnfst;
+                ctx.file = manifest.files[0];
+                assert.object(ctx.file, 'manifest.files[0]');
+                opts.imageFromImgUuid[imageUuid] = manifest;
+                sendProgressStatus('Preparing');
+                next();
+            }
+        });
+    }
+
+    // Check if the image (with this digest) already exists in the registry.
+    function _checkLayerExistsInRegistry(_, next) {
+        log.trace({imageUuid: imageUuid},
+            '_pushOneDockerLayer: _checkLayerExistsInRegistry');
+        // Send back a status message saying we're looking at this layer.
+        regClient.headBlob({digest: digest}, function (err  /* , ress */) {
+            if (err) {
+                // Allow 404 for when an image is not found - continue the push.
+                if (err.statusCode === 404) {
+                    next();
+                    return;
+                }
+                // Any other error means a failure - we end the push.
+                next(err);
+                return;
+            }
+            // Otherwise, we already have this image in the registry - job done.
+            sendProgressStatus('Layer already exists');
+            next(REGISTRY_CONTAINS_IMAGE);
+        });
+    }
+
+    // Get image file (stream).
+    function _getImgapiFileStream(ctx, next) {
+        log.trace({imageUuid: imageUuid},
+            '_pushOneDockerLayer: _getImgapiFileStream');
+        var stor = app.getStor(ctx.file.stor);
+        stor.createImageFileReadStream(manifest, 'file0', {doNotPause: true},
+                function (err, stream) {
+            ctx.stream = stream;
+            next(err);
+        });
+    }
+
+    // Send upload progress updates periodically.
+    function _startProgressUpdater(ctx, next) {
+        assert.number(ctx.file.size, 'ctx.file.size');
+        var bytesLastPiped = 0;
+        var bytesTotal = ctx.file.size;
+        var PROGRESS_UPDATE_TIMER = 2000;
+
+        var checkProgress = function () {
+            if (!uploading) {
+                // Done.
+                return;
+            }
+            if (ctx.bytesPiped > bytesLastPiped) {
+                bytesLastPiped = ctx.bytesPiped;
+                sendProgressStatus('Pushing', {
+                    current: bytesLastPiped,
+                    total: bytesTotal
+                });
+            }
+            // And go again.
+            ctx.progressId = setTimeout(checkProgress, PROGRESS_UPDATE_TIMER);
+        };
+
+        // Send a progress message every N seconds.
+        ctx.progressId = setTimeout(checkProgress, PROGRESS_UPDATE_TIMER);
+        next();
+    }
+
+    // Push image file (blob) to docker registry.
+    function _pipeStream(ctx, next) {
+        log.trace({digest: digest, imageUuid: imageUuid},
+            '_pushOneDockerLayer: _pipeStream');
+        var throughStream = through2(function onProgress(chunk, enc, cb) {
+            ctx.bytesPiped += chunk.length;
+            this.push(chunk);
+            cb();
+        });
+        var contentLength = ctx.file.size;
+        var blobOpts = {
+            contentLength: contentLength,
+            digest: digest,
+            stream: throughStream
+        };
+        ctx.stream.pipe(throughStream);
+        regClient.blobUpload(blobOpts, next);
+    }
+
+    function _sendPushedStatus(_, next) {
+        sendProgressStatus('Pushed');
+        next();
+    }
+
+    function _done(err, results) {
+        log.trace({imageUuid: imageUuid, err: err},
+            '_pushOneDockerLayer: _done');
+
+        uploading = false;
+
+        if (err === REGISTRY_CONTAINS_IMAGE) {  // shortcut code for success
+            callback();
+            return;
+        }
+
+        if (err) {
+            sendProgressStatus('Image push failed');
+        }
+
+        callback(err);
+    }
+}
+
+
+/**
+ * Push a docker image (layers and manifest) to a docker registry, while
+ * streaming back progress messages.
+ *
+ * Typically this is only called by the sdc-docker 'push-image' workflow.
+ */
+function adminPushDockerImage(opts, callback) {
+    assert.object(opts, 'opts');
+    assert.func(opts.Image, 'opts.Image');
+    assert.object(opts.req, 'opts.req');
+    assert.object(opts.req.log, 'opts.req.log');
+    assert.object(opts.req.body, 'opts.req.body');
+    assert.string(opts.req.body.manifest_str, 'opts.req.body.manifest_str');
+    assert.object(opts.req.query, 'opts.req.query');
+    assert.string(opts.req.query.repoAndTag, 'opts.req.query.repoAndTag');
+    assert.object(opts.res, 'opts.res');
+    assert.func(callback, 'callback');
+
+    var req = opts.req;
+    var res = opts.res;
+
+    var app = req._app;
+    var dockerImageV2 = req.body;
+    var log = req.log;
+    var req_id = req.getId();
+    var repoAndTag = req.query.repoAndTag;
+
+    req.log.trace('req.query: ', req.query);
+
+    var rat;
+    try {
+        rat = drc.parseRepoAndRef(repoAndTag);
+    } catch (e) {
+        callback(new errors.ValidationFailedError(
+            e,
+            e.message || e.toString(),
+            [ {field: 'repoAndTag', code: 'Invalid'}]));
+        return;
+    }
+
+    log.trace({dockerImageV2: dockerImageV2, repoAndTag: repoAndTag},
+        'adminPushDockerImage');
+
+    var manifest = dockerImageV2.manifest_str;
+    var manifestStr = dockerImageV2.manifest_str;
+    try {
+        manifest = JSON.parse(manifestStr);
+    } catch (e) {
+        callback(new errors.ValidationFailedError(
+            e,
+            'JSON parse of manifest_str failed',
+            [ { field: 'manifest_str', code: 'Invalid' } ]));
+        return;
+    }
+
+    // TODO: Move auth parsing into a separate/shared function.
+    var regAuth;
+    var username, password;
+
+    if (req.headers['x-registry-auth']) {
+        /*
+         * // JSSTYLED
+         * https://github.com/docker/docker/blob/master/docs/reference/api/docker_remote_api_v1.23.md#create-an-image
+         *
+         * The 'x-registry-auth' header contains `username` and `password`
+         * *OR* a `identitytoken`. We don't yet support identitytoken --
+         * See DOCKER-771.
+         */
+        try {
+            regAuth = JSON.parse(new Buffer(
+                req.headers['x-registry-auth'], 'base64').toString('utf8'));
+        } catch (e) {
+            log.info(e, 'invalid x-registry-auth header, ignoring');
+        }
+        // Censor for audit logs.
+        req.headers['x-registry-auth'] = '(censored)';
+    }
+
+    if (regAuth) {
+        if (regAuth.identitytoken) {
+            callback(new errors.NotImplementedError('OAuth to Docker '
+                + 'registry is not yet supported, please "docker logout" '
+                + 'and "docker login" and try again'));
+            return;
+        } else {
+            username = regAuth.username;
+            password = regAuth.password;
+        }
+    }
+
+    function resMessage(data) {
+        assert.string(data.type, 'data.type');
+        if (data.type === 'progress') {
+            assert.object(data.payload, 'data.payload');
+        } else if (data.type === 'error') {
+            assert.object(data.error, 'data.error');
+        }
+        data.id = req_id;
+        res.write(JSON.stringify(data) + '\r\n');
+    }
+
+    var ctx = {
+        alreadyExistsFromImgId: {},
+        app: app,
+        Image: opts.Image,
+        image_uuid: dockerImageV2.image_uuid,
+        imageFromImgUuid: {},  // <IMGAPI uuid> -> <IMGAPI image manifest>
+        log: log,
+        pushCancelled: false,
+        rat: rat,
+        regClient: null,
+        regClientOpts: utils.commonHttpClientOpts({
+            //insecure: app.config.dockerRegistryInsecure,
+            insecure: true,
+            log: log,
+            repo: rat,
+            username: username,
+            password: password
+        }, req),
+        repoAndTag: repoAndTag,
+        req: req,
+        res: res,
+        resMessage: resMessage
+    };
+    log.trace({rat: ctx.rat}, 'docker push');
+
+    vasync.pipeline({funcs: [
+        // Ensure the registry supports v2, otherwise we cannot push.
+        function regSupportsV2(_, next) {
+            var client = drc.createClientV2(ctx.regClientOpts);
+            client.supportsV2(function (err, supportsV2) {
+                if (err) {
+                    next(err);
+                } else {
+                    log.info({indexName: rat.index.name,
+                        supportsV2: supportsV2}, 'regSupportsV2');
+                    if (!supportsV2) {
+                        client.close();
+                        next(new errors.NotAvailableError(format(
+                            'registry %s does not support v2',
+                            rat.index.name)));
+                    } else {
+                        ctx.regClient = client;
+                        next();
+                    }
+                }
+            });
+        },
+
+        /*
+         * In *parallel*, upload image layers (blobs) to the docker registry.
+         */
+        function _pushDockerImageLayers(_, next) {
+            var layerDigests = [];
+            var layerInfos = manifest.layers.map(function (l) {
+                layerDigests.push(l.digest);
+                return {
+                    digest: l.digest,
+                    uuid: imgmanifest.imgUuidFromDockerDigests(layerDigests)
+                };
+            });
+            var pushQueueError;
+            var pushQueue = vasync.queue(function (layerInfo, nextImg) {
+                log.debug({digest: layerInfo.digest, imageUuid: layerInfo.uuid},
+                    'apiAdminPushDockerImage: pushing docker image');
+                ctx.digest = layerInfo.digest;
+                ctx.imageUuid = layerInfo.uuid;
+                _pushOneDockerLayer(ctx, nextImg);
+            }, 3);
+
+            pushQueue.on('end', function () {
+                next(pushQueueError);
+            });
+
+            pushQueue.push(layerInfos, function (qErr) {
+                if (qErr) {
+                    log.debug(qErr, '_pushDockerImages err');
+                }
+                // Take the first pushError and mark queue as cancelled.
+                if (qErr && pushQueueError === undefined) {
+                    pushQueueError = qErr;
+                    ctx.pushCancelled = true;
+                    pushQueue.kill();
+                }
+            });
+
+            pushQueue.close();
+        },
+
+        // Push the docker image config layer.
+        function _pushDockerConfigLayer(_, next) {
+            var config = dockerImageV2.image;
+            var configStr = JSON.stringify(config);
+            // Check that the image has remained consistent, by verifying the
+            // digest now to what it was initially created with.
+            var configDigest = 'sha256:' + crypto.createHash('sha256')
+                .update(configStr, 'binary').digest('hex');
+            if (configDigest !== dockerImageV2.config_digest) {
+                next(new errors.InvalidParameterError(
+                    format('image config digest does not match: %s != %s',
+                        configDigest, dockerImageV2.config_digest),
+                    [ { field: 'digest', code: 'Invalid' } ]));
+                return;
+            }
+            assert.equal(configDigest, dockerImageV2.config_digest,
+                'Config sha256 should match image config_digest');
+            var configBuf = Buffer.from(configStr, 'utf8');
+            var stream = new Readable();
+            stream.push(configBuf);
+            stream.push(null);
+            var blobOpts = {
+                contentLength: configBuf.length,
+                contentType: 'application/vnd.docker.container.image.v1+json',
+                digest: configDigest,
+                stream: stream
+            };
+            ctx.regClient.blobUpload(blobOpts, next);
+        },
+
+        // Push the docker image manifest.
+        function _pushDockerManifest(_, next) {
+            var manifestOpts = {
+                log: log,
+                manifest: manifestStr,
+                ref: rat.tag
+            };
+            var size = manifestStr.length;
+
+            ctx.regClient.putManifest(manifestOpts,
+                    function (err, resp, digest) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+                resMessage({
+                    type: 'progress',
+                    payload:  {
+                        status: format('%s: digest: %s size: %d',
+                            rat.tag, digest, size)
+                    }
+                });
+                resMessage({
+                    type: 'progress',
+                    payload:  {
+                        progressDetail: {},
+                        aux: {
+                            Tag: rat.tag,
+                            Digest: digest,
+                            Size: size
+                        }
+                    }
+                });
+                next();
+            });
+        }
+
+    ]}, function (err) {
+        if (ctx.regClient) {
+            ctx.regClient.close();
+        }
+        if (err) {
+            // This is a chunked transfer so we can't return a restify error.
+            log.info({err: err, repo: repoAndTag},
+                'error pushing image layers, err: %j', err);
+            resMessage({
+                type: 'error',
+                error: {
+                    /*
+                     * `restify.RestError` instances will have `err.code`. More
+                     * vanilla `restify.HttpError` instances may have
+                     * `err.body.code`.
+                     */
+                    code: err.code || (err.body && err.body.code),
+                    message: err.message
+                }
+            });
+        }
+        log.debug('apiAdminPushDockerImage done - closing response');
+        res.end();
+        callback(false);
+    });
+}
+
+
 /* BEGIN JSSTYLED */
 /**
  * Import a given docker repo:tag while streaming out progress messages.
@@ -1692,5 +2155,6 @@ function adminImportDockerImage(opts, callback) {
 //---- exports
 
 module.exports = {
-    adminImportDockerImage: adminImportDockerImage
+    adminImportDockerImage: adminImportDockerImage,
+    adminPushDockerImage: adminPushDockerImage
 };
diff --git a/lib/images.js b/lib/images.js
index fc6cfd4..c3ce546 100644
--- a/lib/images.js
+++ b/lib/images.js
@@ -2434,6 +2434,11 @@ function apiAdminImportDockerImage(req, res, next) {
 }
 
 
+function apiAdminPushDockerImage(req, res, next) {
+    docker.adminPushDockerImage({Image: Image, req: req, res: res}, next);
+}
+
+
 function apiAddImageFile(req, res, next) {
     if (req.query.source !== undefined)
         return next();
@@ -4153,6 +4158,15 @@ function mountApi(server, reqAuth, reqPassiveAuth) {
                     [ { field: 'action', code: 'MissingParameter' } ]));
             }
         });
+    server.post(
+        {path: '/images/:uuid/push', name: 'PushDockerImage'},
+        reqAuth,
+        reqValidUuid,
+        resume,
+        restify.bodyParser({mapParams: false}),
+        reqGetImage,  // ensure have access to image before pushing it
+        reqEnsureAccountIsImageOwner,
+        apiAdminPushDockerImage);
     server.del(
         {path: '/images/:uuid', name: 'DeleteImage'},
         reqAuth,
diff --git a/lib/storage.js b/lib/storage.js
index 8285872..701c2c2 100644
--- a/lib/storage.js
+++ b/lib/storage.js
@@ -70,10 +70,13 @@ Storage.prototype.createImageFileWriteStream =
  *
  * @param image {Image}
  * @param filename {string} Optional, defaults to file0
+ * @param opts {Object} Optional.
+ *      - @param doNotPause {Boolean} Optional. Do not pause the read stream,
+ *        default is false.
  * @param callback {Function} `function (err, stream)`
  */
 Storage.prototype.createImageFileReadStream =
-        function createImageFileReadStream(image, filename, callback) {
+        function createImageFileReadStream(image, filename, opts, callback) {
 };
 
 /**
@@ -248,13 +251,20 @@ LocalStorage.prototype.createImageFileWriteStream =
 };
 
 LocalStorage.prototype.createImageFileReadStream =
-        function (image, filename, callback) {
+        function (image, filename, opts, callback) {
     assert.object(image, 'image');
     assert.string(image.uuid, 'image.uuid');
-    if (callback === undefined) {
+    if (opts === undefined) {
         callback = filename;
         filename = 'file0';
+        opts = {};
+    }
+    if (callback === undefined) {
+        callback = opts;
+        opts = {};
     }
+    assert.string(filename, 'filename');
+    assert.object(opts, 'opts');
     assert.func(callback, 'callback');
 
     var stream;
@@ -264,7 +274,9 @@ LocalStorage.prototype.createImageFileReadStream =
     } catch (err) {
         return callback(err);
     }
-    utils.pauseStream(stream);
+    if (!opts.doNotPause) {
+        utils.pauseStream(stream);
+    }
     callback(null, stream);
 };
 
@@ -661,13 +673,20 @@ function (image, toPath, callback) {
 };
 
 MantaStorage.prototype.createImageFileReadStream =
-        function (image, filename, callback) {
+        function (image, filename, opts, callback) {
     assert.object(image, 'image');
     assert.string(image.uuid, 'image.uuid');
-    if (callback === undefined) {
+    if (opts === undefined) {
         callback = filename;
         filename = 'file0';
+        opts = {};
     }
+    if (callback === undefined) {
+        callback = opts;
+        opts = {};
+    }
+    assert.string(filename, 'filename');
+    assert.object(opts, 'opts');
     assert.func(callback, 'callback');
 
     var storPath = this._storPathFromImageUuid(image.uuid, filename);
diff --git a/package.json b/package.json
index c220bb5..725afbd 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "imgapi",
   "description": "Image API to manage images for SDC 7",
-  "version": "4.0.3",
+  "version": "4.1.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
@@ -38,6 +38,7 @@
     "sdc-clients": "10.0.4",
     "semver": "3.0.1",
     "sshpk": "1.13.0",
+    "through2": "2.0.3",
     "trace-event": "1.2.0",
     "ufds": "1.2.0",
     "uuid": "2.0.2",
-- 
2.21.0

