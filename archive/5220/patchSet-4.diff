From e06e87f38aadb6efd32dcf1bd7c8e5bcaa82f562 Mon Sep 17 00:00:00 2001
From: Josh Wilsdon <josh@wilsdon.ca>
Date: Tue, 11 Dec 2018 22:58:19 -0800
Subject: [PATCH] TRITON-1026 CNAPI CommandExecute should not use Ur

---
 docs/index.md                 |  99 +++++++++++++++-----
 docs/static.md                |  15 ++-
 lib/endpoints/index.js        |   4 +-
 lib/endpoints/platforms.js    |   4 +-
 lib/endpoints/servers.js      | 169 ++++++++++++++++++++++++++++++++++
 lib/endpoints/ur.js           |  48 +++++-----
 lib/models/server.js          |  14 ++-
 lib/ur.js                     |  20 ++--
 lib/validation/endpoints.js   |   7 +-
 package.json                  |   3 +-
 sapi_manifests/cnapi/template |   6 +-
 11 files changed, 318 insertions(+), 71 deletions(-)

diff --git a/docs/index.md b/docs/index.md
index dc3f8f4..4d3bb3b 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -1,6 +1,6 @@
 ---
 title: CNAPI (Compute Node API) Design
-apisections: Allocation API, Boot Parameters API, Compute Node Agent Tasks API, Miscellaneous API, Remote Execution API, Server API, Virtual Machine API, Virtual Machine Images API, Virtual Machine Snapshots API, Waitlist API, ZFS API (deprecated)
+apisections: Allocation API, Boot Parameters API, Compute Node Agent Tasks API, Miscellaneous API, Remote Execution API, Remote Execution API (deprecated), Server API, Virtual Machine API, Virtual Machine Images API, Virtual Machine Snapshots API, Waitlist API, ZFS API (deprecated)
 markdown2extras: tables, code-friendly
 ---
 <!--
@@ -122,6 +122,7 @@ specialized circumstances in production.
 | **ALLOC_WEIGHT_UNIFORM_RANDOM**    | Float | 0.5   | Bias selection towards random CNs.                                           |
 | **ALLOC_WEIGHT_UNRESERVED_DISK**   | Float | 1.0   | Bias selection towards CNs with more unreserved disk.                        |
 | **ALLOC_WEIGHT_UNRESERVED_RAM**    | Float | 2.0   | Bias selection towards CNs with more unreserved memory.                      |
+| **FEATURE_USE_CNAGENT_COMMAND_EXECUTE** | Boolean | false | Experimental: Use cn-agent's command_execute function instead of Ur when available. |
 
 If any of the keys above aren't in the `sdc` `metadata` section, it's treated as
 if the default value was specified. Be careful when changing from the default
@@ -158,6 +159,13 @@ and packages have had sane overprovision values set, after careful consideration
 of how the DC will be split up for the differing ratios. If in doubt, don't
 change the default.
 
+FEATURE_USE_CNAGENT_COMMAND_EXECUTE should only be set true if you want CNAPI to
+send CommandExecute requests to a CN via cn-agent's `command_execute` task when
+that is available (I.e. cn-agent is new enough). If this is false (the default)
+or if a CN does not have a new enough cn-agent to support `command_execute`, the
+CommandExecute will fall back to using Ur transparently. Enabling this is
+currently considered experimental as its backward compatibility has not been
+tested with the full spectrum of possible production scripts.
 
 ### Example
 
@@ -312,7 +320,12 @@ See the reference for the API for available VM endpoitns.
 
 
 
-# Remote Execution
+# Remote Execution (deprecated)
+
+*IMPORTANT: This functionality is deprecated and will be removed in a future
+release. It exists only for backward compatibility and should not be used for
+any new development. If you wish to execute commands on a CN, this should be
+done through a new cn-agent task, or a new agent.*
 
 CNAPI exposes a mechanism to allow remote execution of commands.
 
@@ -607,29 +620,32 @@ A CNAPI server record looks like the following
 | **uuid**                             | *String*         | The server's unique identifier                                             |
 | **vms**                              | *Object*         | A object representing all the vms on server                                |
 
+
 # Waitlist
 
-When executing jobs on a server, such vm provision, start, stop, reboot, and
-zfs dataset import it is possible that concurrent jobs may interfere with each
-other.
+Certain actions on datacenter resources require serialization of execution to
+prevent undesireable or undefined results. Such actions include – but are not
+limited to – DAPI allocation, VM lifecycle requests (creation, start, stop,
+reboot, destroy), and dataset import. Waitlist should be used on any workflow
+job where it is possible that concurrent jobs may interfere with each other if
+actions on the compute node are not deconflicted by a system such as this.
 
-To prevent this, a mechanism is required that will queue jobs based on the
-type of resource they're acting on. Jobs should be grouped by "scope" and
-serialized such that a server can will only execute be executing one job per
-scope group at a time. In this way it would be possible to enforce that only
-one job be active on a vm on a server, but would still allow jobs to be run
-against another vm. Any jobs that come in after one is active will be queued
-and dispatch as the previous job finishes.
+Jobs should be grouped by the combination of [server_uuid, scope, id] and
+serialized such that a server will only be executing one job per combination at
+a time. In this way it would be possible to enforce that only one job be active
+on a particular vm on a server, but would still allow jobs to be run against
+another vm. Any jobs that come in after one is active will be queued and
+dispatched as preceding jobs finish.
 
 This system allows for concurrent jobs where the scoping has been set such
 that two jobs will not interfere with each other. For instance, two reboot
 jobs for two different vms may be run at the same time, however, two reboots
 for the same vm will happen in sequential order.
 
-Use of the waitlist is a deliberate process. It is up to the one initiating a job
-to create a ticket and wait for it to become active. As such, it is possible
-to not use the waitlist at all. However, one then runs the risk of concurrent
-jobs trampling each other.
+Use of waitlist does not happen implicitly in workflow jobs. It is up to the
+workflow job to create a ticket and wait for it to become active. As such, it
+is possible to not use the waitlist at all. However, one then runs the risk of
+concurrent jobs trampling each other.
 
 Waitlist tickets are serialized and dispatched one by one according to their
 `server_uuid`, `scope` and `id` parameters.
@@ -642,12 +658,13 @@ performed on a resource identified by `id` of the type given by `scope`.
 The basic process is as follows: a job starts and it first acquires a ticket
 from CNAPI for that particular server and passes in a `scope` and an `id`.
 
-Because waitlist tickets are serviced in order, once a ticket has been created
-the next step is to wait for it to become active. This will happen if there
-are no tickets for that scope/id combination, or if waited upon and all
-preceding tickets are resolved. To find out whether a ticket has become
-'active' (ie indicating the job may proceed and do its work), the job may poll
-the ticket values, or use the blocking `wait` endpoint for that ticket.
+Because waitlist tickets are serviced in creation order, once a ticket has been
+created the next step is to wait for it to become active. Tickets become active
+once all extant tickets for that server/scope/id are finished or expired.
+
+To find out whether a ticket has become 'active' (i.e. indicating the job may
+proceed and do its work), the job may poll the ticket values, or use the
+blocking `wait` endpoint for that ticket.
 
 Once the work has been completed, it is up to the job to "release" the ticket,
 so that subsequent tickets for that scope/id combination can be serviced.
@@ -723,6 +740,9 @@ the results list if tickets are deleted.
 
 ### Release a ticket
 
+Releasing a ticket allows subsequent tickets (if any) queued on that
+server/scope/id to become active.
+
     -bash-4.1# sdc-cnapi /tickets/bb5038c2-7498-4e07-b919-df072c76d2dc/release -X PUT
     HTTP/1.1 204 No Content
     Date: Fri, 27 Jun 2014 19:42:46 GMT
@@ -1105,6 +1125,41 @@ Synchronously execute a command on the target server.
 
 
 
+# Remote Execution API (deprecated)
+
+## CommandExecute (deprecated) (POST /servers/:server_uuid/execute)
+
+*IMPORTANT: This endpoint is deprecated and will be removed in a future
+release. It exists only for backward compatibility and should not be used for
+any new development. If you wish to execute commands on a CN, this should be
+done through a new cn-agent task, or a new agent.*
+
+Synchronously execute a command on the target server.
+
+If `json` is true, the result returned will be a JSON object with `stdout`,
+`stderr` and `exitCode` properties. If the json flag is not passed or not set
+true, the body of the response will contain only the stdout and if the script
+executed non-zero a 500 error will be returned.
+
+### Inputs
+
+| Param  | Type    | Description                                                                |
+| ------ | ------- | -------------------------------------------------------------------------- |
+| args   | Array   | Array containing arguments to be passed in to command                      |
+| env    | Object  | Object containing environment variables to be passed in                    |
+| script | String  | Script to be executed. Must have a shebang line                            |
+| json   | Boolean | Whether to return results as JSON instead of just stdout (default = false) |
+
+
+### Responses
+
+| Code | Type | Description                     |
+| ---- | ---- | ------------------------------- |
+| 404  | None | No such server                  |
+| 500  | None | Error occurred executing script |
+
+
+
 # Server API
 
 ## ServerList (GET /servers)
diff --git a/docs/static.md b/docs/static.md
index 9c1e1f9..5fd7265 100644
--- a/docs/static.md
+++ b/docs/static.md
@@ -91,6 +91,7 @@ specialized circumstances in production.
 | **ALLOC_WEIGHT_UNIFORM_RANDOM**    | Float | 0.5   | Bias selection towards random CNs.                                           |
 | **ALLOC_WEIGHT_UNRESERVED_DISK**   | Float | 1.0   | Bias selection towards CNs with more unreserved disk.                        |
 | **ALLOC_WEIGHT_UNRESERVED_RAM**    | Float | 2.0   | Bias selection towards CNs with more unreserved memory.                      |
+| **FEATURE_USE_CNAGENT_COMMAND_EXECUTE** | Boolean | false | Experimental: Use cn-agent's command_execute function instead of Ur when available. |
 
 If any of the keys above aren't in the `sdc` `metadata` section, it's treated as
 if the default value was specified. Be careful when changing from the default
@@ -127,6 +128,13 @@ and packages have had sane overprovision values set, after careful consideration
 of how the DC will be split up for the differing ratios. If in doubt, don't
 change the default.
 
+FEATURE_USE_CNAGENT_COMMAND_EXECUTE should only be set true if you want CNAPI to
+send CommandExecute requests to a CN via cn-agent's `command_execute` task when
+that is available (I.e. cn-agent is new enough). If this is false (the default)
+or if a CN does not have a new enough cn-agent to support `command_execute`, the
+CommandExecute will fall back to using Ur transparently. Enabling this is
+currently considered experimental as its backward compatibility has not been
+tested with the full spectrum of possible production scripts.
 
 ### Example
 
@@ -281,7 +289,12 @@ See the reference for the API for available VM endpoitns.
 
 
 
-# Remote Execution
+# Remote Execution (deprecated)
+
+*IMPORTANT: This functionality is deprecated and will be removed in a future
+release. It exists only for backward compatibility and should not be used for
+any new development. If you wish to execute commands on a CN, this should be
+done through a new cn-agent task, or a new agent.*
 
 CNAPI exposes a mechanism to allow remote execution of commands.
 
diff --git a/lib/endpoints/index.js b/lib/endpoints/index.js
index fd14ad2..1ff4b46 100644
--- a/lib/endpoints/index.js
+++ b/lib/endpoints/index.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var fs = require('fs');
@@ -28,7 +28,6 @@ var nics = require('./nics');
 var platforms = require('./platforms');
 var servers = require('./servers');
 var tasks = require('./tasks');
-var ur = require('./ur');
 var vms = require('./vms');
 var waitlist = require('./waitlist');
 var zfs = require('./zfs');
@@ -391,7 +390,6 @@ function attachTo(http, app) {
     tasks.attachTo(http, app);
     allocations.attachTo(http, app);
     boot_params.attachTo(http, app);
-    ur.attachTo(http, app);
     zfs.attachTo(http, app);
 }
 
diff --git a/lib/endpoints/platforms.js b/lib/endpoints/platforms.js
index 3438933..6245704 100644
--- a/lib/endpoints/platforms.js
+++ b/lib/endpoints/platforms.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var async = require('async');
@@ -22,7 +22,7 @@ Platform.init = function () {
 
 
 /**
- * Returns avaiable platform images in datacenter.
+ * Returns available platform images in datacenter.
  *
  * @name PlatformList
  * @endpoint GET /platforms
diff --git a/lib/endpoints/servers.js b/lib/endpoints/servers.js
index 1c32028..44ec8d0 100644
--- a/lib/endpoints/servers.js
+++ b/lib/endpoints/servers.js
@@ -18,8 +18,10 @@ var async = require('async');
 var fs = require('fs');
 var qs = require('qs');
 var restify = require('restify');
+var semver = require('semver');
 var sprintf = require('sprintf').sprintf;
 var util = require('util');
+var vasync = require('vasync');
 var VError = require('verror');
 
 var common = require('../common');
@@ -27,6 +29,7 @@ var datasetEndpoints = require('./zfs');
 var Designation = require('../designation');
 var ModelPlatform = require('../models/platform');
 var ModelServer = require('../models/server');
+var ur = require('./ur');
 var validation = require('../validation/endpoints');
 
 
@@ -1105,6 +1108,160 @@ Server.ensureImage = function handlerServerEnsureImage(req, res, next) {
 };
 
 
+/* BEGIN JSSTYLED */
+/**
+ * *IMPORTANT: This endpoint is deprecated and will be removed in a future
+ * release. It exists only for backward compatibility and should not be used for
+ * any new development. If you wish to execute commands on a CN, this should be
+ * done through a new cn-agent task, or a new agent.*
+ *
+ * Synchronously execute a command on the target server.
+ *
+ * If `json` is true, the result returned will be a JSON object with `stdout`,
+ * `stderr` and `exitCode` properties. If the json flag is not passed or not set
+ * true, the body of the response will contain only the stdout and if the script
+ * executed non-zero a 500 error will be returned.
+ *
+ * @name CommandExecute (deprecated)
+ * @endpoint POST /servers/:server_uuid/execute
+ * @section Remote Execution API (deprecated)
+ *
+ * @param {Array} args Array containing arguments to be passed in to command
+ * @param {Object} env Object containing environment variables to be passed in
+ * @param {String} script Script to be executed. Must have a shebang line
+ * @param {Boolean} json Whether to return results as JSON instead of just stdout (default = false)
+ *
+ * @response 404 None No such server
+ * @response 500 None Error occurred executing script
+ *
+ */
+/* END JSSTYLED */
+Server.execute = function handlerCommandExecute(req, res, next) {
+    var self = this;
+
+    var handleWithUr = true; // default to Ur for backward compat
+    var rules = {
+        'args': ['optional', 'isArrayType'],
+        'env': ['optional', 'isObjectType'],
+        'json': [
+            ['optional', undefined],
+            ['regex', RegExp(/^(true|false)$/i)],
+            ['sanitize', 'toBoolean']
+        ],
+        'script': ['isStringType'],
+        'timeout': ['optional', 'isNumberType']
+    };
+    var useCnAgentCommandExecute =
+        Boolean(ModelServer.getConfig().useCnAgentCommandExecute);
+
+    if (validation.ensureParamsValid(req, res, rules)) {
+        next();
+        return;
+    }
+
+    self.log.info({
+        params: req.params,
+        useCnAgentCommandExecute: useCnAgentCommandExecute
+    }, 'handling CommandExecute');
+
+    vasync.pipeline({arg: {}, funcs: [
+        function getCnAgentVersion(ctx, cb) {
+            req.stash.server.getFinal({
+                sysinfo: false,
+                vms: false,
+                disk: false,
+                agents: true,
+                last_heartbeat: false,
+                memory: false
+            }, function (err, server) {
+                var agent;
+                var idx;
+
+                if (err) {
+                    self.log.error({err: err}, 'unable to load server');
+                    cb(err);
+                    return;
+                }
+
+                ctx.cnAgent = {}; // To ensure we always have an object.
+                for (idx = 0; idx < server.agents.length; idx++) {
+                    agent = server.agents[idx];
+                    if (agent.name === 'cn-agent') {
+                        ctx.cnAgent = agent;
+                        cb();
+                        return;
+                    }
+                }
+
+                cb();
+            });
+        }, function callUrIfAncient(ctx, cb) {
+            if (useCnAgentCommandExecute &&
+                ctx.cnAgent.version &&
+                semver.gte(ctx.cnAgent.version, '2.6.0')) {
+
+                handleWithUr = false;
+            }
+
+            self.log.info({
+                cnAgent: ctx.cnAgent,
+                handleWithUr: handleWithUr
+            }, 'CommandExecute checked for cn-agent');
+
+            cb();
+            return;
+        }
+    ]}, function sendRequest(err) {
+        if (err) {
+            next(err);
+            return;
+        }
+
+        if (handleWithUr) {
+            // Ur's execute functionality
+            ur.execute(req, res, next);
+        } else {
+            // cn-agent's command_execute task
+            req.stash.server.sendTaskRequest({
+                cb: function () {},
+                task: 'command_execute',
+                params: {
+                    env: req.params.env,
+                    args: req.params.args,
+                    script: req.params.script,
+                    timeout: req.params.timeout
+                },
+                req: req,
+                evcb: ModelServer.createComputeNodeAgentHandler(self,
+                    req.params.jobid),
+                synccb: function (error, results) {
+                    if (error) {
+                        next(error);
+                        return;
+                    }
+
+                    if (req.params.json) {
+                        res.send(results);
+                    } else {
+                        // for backward compat we want to return an error if
+                        // script exited non-zero.
+                        if (results.exitCode !== 0) {
+                            next(new restify.InternalError(
+                                'Error executing on remote system'));
+                            return;
+                        }
+                        // backward compatibly lose stderr
+                        res.send(results.stdout.trim());
+                    }
+                    next();
+                    return;
+                }
+            });
+        }
+    });
+};
+
+
 /* BEGIN JSSTYLED */
 /**
  * Instruct server to install given agent. Pass in image uuid of package to
@@ -1187,6 +1344,18 @@ function attachTo(http, app) {
         }),
         Server.update);
 
+    // Invoke script on server
+    http.post(
+        { path: '/servers/:server_uuid/execute', name: 'CommandExecute' },
+        ensure({
+            connectionTimeoutSeconds: 60 * 60,
+            app: app,
+            serverRunning: true,
+            prepopulate: ['server'],
+            connected: ['moray']
+        }),
+        Server.execute);
+
     // Setup server
     http.put(
         { path: '/servers/:server_uuid/setup', name: 'ServerSetup' },
diff --git a/lib/endpoints/ur.js b/lib/endpoints/ur.js
index 80cf293..80861f9 100644
--- a/lib/endpoints/ur.js
+++ b/lib/endpoints/ur.js
@@ -5,16 +5,20 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
  * ur.js: Ur endpoints
  *
- * The single /ur/:server_uuid endpoint invokes scripts through the ur agent.
+ * The /servers/:server_uuid/execute endpoint invokes scripts on servers. If the
+ * server has old agents that don't support the command_execute task, the
+ * lib/endpoints/servers.js Server.execute function will call the execute
+ * function here to handle the request through the ur agent.
+ *
  * This can be tested with:
  *
- *   $ sdc-cnapi /ur/$UUID -X POST -d 'script=echo Hello world'
+ * $ sdc-cnapi /servers/UUID/execute -X POST -d '{"script": "echo Hello world"}'
  */
 
 var restify = require('restify');
@@ -62,29 +66,29 @@ Ur.execute = function handlerUrExecute(req, res, next) {
 
     req.stash.server.invokeUrScript(script, params, onInvoke);
 
-    function onInvoke(err, stdout, stderr) {
+    function onInvoke(err, stdout, stderr, exitStatus) {
         if (err)
             return (next(new restify.InternalError(err.message)));
 
-        res.send(stdout.trim());
+        if (req.params.json) {
+            res.send({
+                exitCode: exitStatus,
+                stderr: stderr,
+                stdout: stdout
+            });
+        } else {
+            // for backward compat we want to return a useless error if
+            // script exited non-zero.
+            if (exitStatus !== 0) {
+                return (next(new restify.InternalError(
+                    'Error executing on remote system')));
+            }
+            // backward compatibly lose stderr and exit code
+            res.send(stdout.trim());
+        }
+
         return (next());
     }
 };
 
-function attachTo(http, app) {
-    var ensure = require('../endpoints').ensure;
-
-    // Invoke script through ur
-    http.post(
-        { path: '/servers/:server_uuid/execute', name: 'CommandExecute' },
-        ensure({
-            connectionTimeoutSeconds: 60 * 60,
-            app: app,
-            serverRunning: true,
-            prepopulate: ['server'],
-            connected: ['amqp', 'moray']
-        }),
-        Ur.execute);
-}
-
-exports.attachTo = attachTo;
+module.exports = Ur;
diff --git a/lib/models/server.js b/lib/models/server.js
index a1da652..7845fa0 100644
--- a/lib/models/server.js
+++ b/lib/models/server.js
@@ -461,14 +461,20 @@ function (script, params, callback) {
     };
     self.log.info('Sending compute node %s script', uuid);
 
-    ModelServer.getUr().execute(opts, function (err, stdout, stderr) {
+    ModelServer.getUr().execute(opts, function (err, stdout, stderr,
+        exit_status) {
+
         if (err) {
-            self.log.error('Error raised by ur when ' +
-                'running script: ' + err.message);
+            self.log.error({
+                err: err,
+                exit_status: exit_status,
+                stderr: stderr,
+                stdout: stdout
+            }, 'Error raised by ur when running script');
             return callback(err);
         }
 
-        return callback(err, stdout, stderr);
+        return callback(err, stdout, stderr, exit_status);
     });
 };
 
diff --git a/lib/ur.js b/lib/ur.js
index 8891540..c95b400 100644
--- a/lib/ur.js
+++ b/lib/ur.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -93,12 +93,18 @@ Ur.prototype.serverSysinfo = function (uuid, opts, callback) {
     };
     opts.uuid = uuid;
 
-    self.execute(execopts, function (err, stdout, stderr) {
+    self.execute(execopts, function (err, stdout, stderr, exitStatus) {
         if (err) {
             self.log.error(err);
             return callback(err);
         }
 
+        // script exited non-zero.
+        if (exitStatus !== 0) {
+            callback(new Error('Error executing on remote system'));
+            return;
+        }
+
         var sysinfo;
         try {
             sysinfo = JSON.parse(stdout.toString());
@@ -171,7 +177,7 @@ Ur.prototype.broadcastSysinfo = function (callback) {
  *
  * @param {Number} opts.uuid UUID of server on which to execute payload
  * @param {Number} opts.timeoutSeconds Number of seconds to wait for a result before returning an error
- * @param {Function} callback Function to call with stdout and stderr strings
+ * @param {Function} callback Function to call with stdout and stderr strings, and exit status
  */
 /* END JSSTYLED */
 
@@ -198,18 +204,12 @@ Ur.prototype.execute = function (opts, callback) {
 
         queue.subscribe(function (msg, headers, deliveryInfo, messageObject) {
             self.log.info({ obj: msg }, 'The message');
-            if (msg.exit_status !== 0) {
-                return callback(
-                    new Error('Error executing on remote system'),
-                    msg.stdout,
-                    msg.stderr);
-            }
             clearTimeout(timeout);
             queue.unsubscribe(ctag);
             setTimeout(function () {
                 queue.destroy();
             }, 1000);
-            return callback(null, msg.stdout, msg.stderr);
+            return callback(null, msg.stdout, msg.stderr, msg.exit_status);
         })
         .addCallback(function (ok) {
             ctag = ok.consumerTag;
diff --git a/lib/validation/endpoints.js b/lib/validation/endpoints.js
index fad2296..f779c79 100644
--- a/lib/validation/endpoints.js
+++ b/lib/validation/endpoints.js
@@ -1,5 +1,5 @@
 /*!
- * Copyright (c) 2012, Joyent, Inc. All rights reserved.
+ * Copyright (c) 2018, Joyent, Inc. All rights reserved.
  *
  * HTTP endpoints validation routines.
  *
@@ -61,7 +61,6 @@ function ensureParamsValid(req, res, paramRules, opts) {
         }
     }
 
-
     for (var paramName in paramRules) {
         var assertion = null;
 
@@ -91,7 +90,9 @@ function ensureParamsValid(req, res, paramRules, opts) {
                             ruleIdx);
                     }
 
-                    if (!req.params.hasOwnProperty(paramName)) {
+                    if (!req.params.hasOwnProperty(paramName) ||
+                        req.params[paramName] === undefined) {
+
                         skip = true;
                         req.params[paramName] = rule[1];
                         break;
diff --git a/package.json b/package.json
index 10bcb5a..63010f7 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "cnapi",
   "description": "SmartDataCenter Compute Node API",
-  "version": "1.17.1",
+  "version": "1.18.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
@@ -22,6 +22,7 @@
     "restify": "4.3.0",
     "restify-validator": "0.3.1",
     "sdc-clients": "10.0.3",
+    "semver": "5.6.0",
     "sprintf": "0.1.5",
     "trace-event": "1.3.0",
     "triton-metrics": "1.0.0",
diff --git a/sapi_manifests/cnapi/template b/sapi_manifests/cnapi/template
index 78beec9..69a2643 100644
--- a/sapi_manifests/cnapi/template
+++ b/sapi_manifests/cnapi/template
@@ -6,9 +6,9 @@
 	"instanceUuid": "{{auto.ZONENAME}}",
 	"serviceName": "{{SERVICE_NAME}}",
 	"serverUuid": "{{auto.SERVER_UUID}}",
-{{#no_rabbit}}
-	"useCnAgent": true,
-{{/no_rabbit}}
+{{#FEATURE_USE_CNAGENT_COMMAND_EXECUTE}}
+	"useCnAgentCommandExecute": true,
+{{/FEATURE_USE_CNAGENT_COMMAND_EXECUTE}}
 	"amqp": {
 		"host": "{{{RABBITMQ_SERVICE}}}"
 	},
-- 
2.21.0

