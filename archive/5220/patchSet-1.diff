commit ffe0bfa0b79a55055fc74b4f5ef0cfe71318bb90 (refs/changes/20/5220/1)
Author: Josh Wilsdon <josh@wilsdon.ca>
Date:   2018-12-11T01:25:35-08:00 (10 months ago)
    
    TRITON-1026 CNAPI CommandExecute should not use Ur

diff --git a/lib/endpoints/index.js b/lib/endpoints/index.js
index fd14ad2..1ff4b46 100644
--- a/lib/endpoints/index.js
+++ b/lib/endpoints/index.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var fs = require('fs');
@@ -28,7 +28,6 @@ var nics = require('./nics');
 var platforms = require('./platforms');
 var servers = require('./servers');
 var tasks = require('./tasks');
-var ur = require('./ur');
 var vms = require('./vms');
 var waitlist = require('./waitlist');
 var zfs = require('./zfs');
@@ -391,7 +390,6 @@ function attachTo(http, app) {
     tasks.attachTo(http, app);
     allocations.attachTo(http, app);
     boot_params.attachTo(http, app);
-    ur.attachTo(http, app);
     zfs.attachTo(http, app);
 }
 
diff --git a/lib/endpoints/servers.js b/lib/endpoints/servers.js
index 1c32028..9e00aac 100644
--- a/lib/endpoints/servers.js
+++ b/lib/endpoints/servers.js
@@ -18,8 +18,10 @@ var async = require('async');
 var fs = require('fs');
 var qs = require('qs');
 var restify = require('restify');
+var semver = require('semver');
 var sprintf = require('sprintf').sprintf;
 var util = require('util');
+var vasync = require('vasync');
 var VError = require('verror');
 
 var common = require('../common');
@@ -27,6 +29,7 @@ var datasetEndpoints = require('./zfs');
 var Designation = require('../designation');
 var ModelPlatform = require('../models/platform');
 var ModelServer = require('../models/server');
+var ur = require('./ur');
 var validation = require('../validation/endpoints');
 
 
@@ -1104,6 +1107,129 @@ Server.ensureImage = function handlerServerEnsureImage(req, res, next) {
         }});
 };
 
+/**
+ * Synchronously execute a command on the target server.
+ *
+ * @name CommandExecute
+ * @endpoint POST /servers/:server_uuid/execute
+ * @section Remote Execution API
+ *
+ * @param {Array} args Array containing arguments to be passed in to command
+ * @param {Object} env Object containing environment variables to be passed in
+ * @param {String} script Script to be executed. Must have a shebang line
+ * @param {Boolean} json Flag indicating whether to return a JSON object
+ *
+ * @response 404 None No such server
+ * @resposne 500 None Error occurred executing script
+ */
+
+Server.execute = function handlerCommandExecute(req, res, next) {
+    var self = this;
+
+    var handleWithUr = true; // default to Ur for backward compat
+    var rules = {
+        'args': ['optional', 'isArrayType'],
+        'env': ['optional', 'isObjectType'],
+        'json': [
+            ['optional', undefined],
+            ['regex', RegExp(/^(true|false)$/i)],
+            ['sanitize', 'toBoolean']
+        ],
+        'script': ['isStringType'],
+        'timeout': ['optional', 'isNumberType']
+    };
+
+    if (validation.ensureParamsValid(req, res, rules)) {
+        next();
+        return;
+    }
+
+    self.log.info({params: req.params}, 'handling CommandExecute');
+
+    vasync.pipeline({arg: {}, funcs: [
+        function getCnAgentVersion(ctx, cb) {
+            req.stash.server.getFinal({
+                sysinfo: false,
+                vms: false,
+                disk: false,
+                agents: true,
+                last_heartbeat: false,
+                memory: false
+            }, function (err, server) {
+                var agent;
+                var idx;
+
+                if (err) {
+                    self.log.error({err: err}, 'unable to load server');
+                    cb(err);
+                    return;
+                }
+
+                ctx.cnAgent = {}; // To ensure we always have an object.
+                for (idx = 0; idx < server.agents.length; idx++) {
+                    agent = server.agents[idx];
+                    if (agent.name === 'cn-agent') {
+                        ctx.cnAgent = agent;
+                        cb();
+                        return;
+                    }
+                }
+
+                cb();
+            });
+        }, function callUrIfAncient(ctx, cb) {
+            if (ctx.cnAgent.version &&
+                semver.gte(ctx.cnAgent.version, '2.6.0')) {
+
+                handleWithUr = false;
+            }
+
+            cb();
+            return;
+        }
+    ]}, function sendRequest(err) {
+        if (err) {
+            next(err);
+            return;
+        }
+
+        if (handleWithUr) {
+            // Ur's execute functionality
+            ur.execute(req, res, next);
+        } else {
+            // cn-agent's command_execute task
+            req.stash.server.sendTaskRequest({
+                cb: function () {},
+                task: 'command_execute',
+                params: {
+                    env: req.params.env,
+                    args: req.params.args,
+                    script: req.params.script,
+                    timeout: req.params.timeout
+                },
+                req: req,
+                evcb: ModelServer.createComputeNodeAgentHandler(self,
+                    req.params.jobid),
+                synccb: function (error, results) {
+                    if (error) {
+                        next(error);
+                        return;
+                    }
+
+                    if (req.params.json) {
+                        res.send(results);
+                    } else {
+                        // backward compatibly lose stderr
+                        res.send(results.stdout.trim());
+                    }
+                    next();
+                    return;
+                }
+            });
+        }
+    });
+};
+
 
 /* BEGIN JSSTYLED */
 /**
@@ -1187,6 +1313,18 @@ function attachTo(http, app) {
         }),
         Server.update);
 
+    // Invoke script on server
+    http.post(
+        { path: '/servers/:server_uuid/execute', name: 'CommandExecute' },
+        ensure({
+            connectionTimeoutSeconds: 60 * 60,
+            app: app,
+            serverRunning: true,
+            prepopulate: ['server'],
+            connected: ['moray']
+        }),
+        Server.execute);
+
     // Setup server
     http.put(
         { path: '/servers/:server_uuid/setup', name: 'ServerSetup' },
diff --git a/lib/endpoints/ur.js b/lib/endpoints/ur.js
index 80cf293..2727628 100644
--- a/lib/endpoints/ur.js
+++ b/lib/endpoints/ur.js
@@ -5,16 +5,20 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
  * ur.js: Ur endpoints
  *
- * The single /ur/:server_uuid endpoint invokes scripts through the ur agent.
+ * The /servers/:server_uuid/execute endpoint invokes scripts on servers. If the
+ * server has old agents that don't support the command_execute task, the
+ * lib/endpoints/servers.js Server.execute function will call the execute
+ * function here to handle the request through the ur agent.
+ *
  * This can be tested with:
  *
- *   $ sdc-cnapi /ur/$UUID -X POST -d 'script=echo Hello world'
+ * $ sdc-cnapi /servers/UUID/execute -X POST -d '{"script": "echo Hello world"}'
  */
 
 var restify = require('restify');
@@ -62,29 +66,23 @@ Ur.execute = function handlerUrExecute(req, res, next) {
 
     req.stash.server.invokeUrScript(script, params, onInvoke);
 
-    function onInvoke(err, stdout, stderr) {
+    function onInvoke(err, stdout, stderr, exitStatus) {
         if (err)
             return (next(new restify.InternalError(err.message)));
 
-        res.send(stdout.trim());
+        if (req.params.json) {
+            res.send({
+                exitCode: exitStatus,
+                stderr: stderr,
+                stdout: stdout
+            });
+        } else {
+            // backward compatibly lose stderr and exit code
+            res.send(stdout.trim());
+        }
+
         return (next());
     }
 };
 
-function attachTo(http, app) {
-    var ensure = require('../endpoints').ensure;
-
-    // Invoke script through ur
-    http.post(
-        { path: '/servers/:server_uuid/execute', name: 'CommandExecute' },
-        ensure({
-            connectionTimeoutSeconds: 60 * 60,
-            app: app,
-            serverRunning: true,
-            prepopulate: ['server'],
-            connected: ['amqp', 'moray']
-        }),
-        Ur.execute);
-}
-
-exports.attachTo = attachTo;
+module.exports = Ur;
diff --git a/lib/models/server.js b/lib/models/server.js
index a1da652..7845fa0 100644
--- a/lib/models/server.js
+++ b/lib/models/server.js
@@ -461,14 +461,20 @@ function (script, params, callback) {
     };
     self.log.info('Sending compute node %s script', uuid);
 
-    ModelServer.getUr().execute(opts, function (err, stdout, stderr) {
+    ModelServer.getUr().execute(opts, function (err, stdout, stderr,
+        exit_status) {
+
         if (err) {
-            self.log.error('Error raised by ur when ' +
-                'running script: ' + err.message);
+            self.log.error({
+                err: err,
+                exit_status: exit_status,
+                stderr: stderr,
+                stdout: stdout
+            }, 'Error raised by ur when running script');
             return callback(err);
         }
 
-        return callback(err, stdout, stderr);
+        return callback(err, stdout, stderr, exit_status);
     });
 };
 
diff --git a/lib/ur.js b/lib/ur.js
index 8891540..cdcb4ee 100644
--- a/lib/ur.js
+++ b/lib/ur.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -171,7 +171,7 @@ Ur.prototype.broadcastSysinfo = function (callback) {
  *
  * @param {Number} opts.uuid UUID of server on which to execute payload
  * @param {Number} opts.timeoutSeconds Number of seconds to wait for a result before returning an error
- * @param {Function} callback Function to call with stdout and stderr strings
+ * @param {Function} callback Function to call with stdout and stderr strings, and exit status
  */
 /* END JSSTYLED */
 
@@ -202,14 +202,15 @@ Ur.prototype.execute = function (opts, callback) {
                 return callback(
                     new Error('Error executing on remote system'),
                     msg.stdout,
-                    msg.stderr);
+                    msg.stderr,
+                    msg.exit_status);
             }
             clearTimeout(timeout);
             queue.unsubscribe(ctag);
             setTimeout(function () {
                 queue.destroy();
             }, 1000);
-            return callback(null, msg.stdout, msg.stderr);
+            return callback(null, msg.stdout, msg.stderr, msg.exit_status);
         })
         .addCallback(function (ok) {
             ctag = ok.consumerTag;
diff --git a/lib/validation/endpoints.js b/lib/validation/endpoints.js
index fad2296..f779c79 100644
--- a/lib/validation/endpoints.js
+++ b/lib/validation/endpoints.js
@@ -1,5 +1,5 @@
 /*!
- * Copyright (c) 2012, Joyent, Inc. All rights reserved.
+ * Copyright (c) 2018, Joyent, Inc. All rights reserved.
  *
  * HTTP endpoints validation routines.
  *
@@ -61,7 +61,6 @@ function ensureParamsValid(req, res, paramRules, opts) {
         }
     }
 
-
     for (var paramName in paramRules) {
         var assertion = null;
 
@@ -91,7 +90,9 @@ function ensureParamsValid(req, res, paramRules, opts) {
                             ruleIdx);
                     }
 
-                    if (!req.params.hasOwnProperty(paramName)) {
+                    if (!req.params.hasOwnProperty(paramName) ||
+                        req.params[paramName] === undefined) {
+
                         skip = true;
                         req.params[paramName] = rule[1];
                         break;
diff --git a/package.json b/package.json
index 10bcb5a..63010f7 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "cnapi",
   "description": "SmartDataCenter Compute Node API",
-  "version": "1.17.1",
+  "version": "1.18.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
@@ -22,6 +22,7 @@
     "restify": "4.3.0",
     "restify-validator": "0.3.1",
     "sdc-clients": "10.0.3",
+    "semver": "5.6.0",
     "sprintf": "0.1.5",
     "trace-event": "1.3.0",
     "triton-metrics": "1.0.0",
