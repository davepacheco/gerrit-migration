commit d612a228ce696101bb01693d24a055d325e021bf (refs/changes/87/4887/1)
Author: John Levon <john.levon@joyent.com>
Date:   2018-09-27T14:51:27+00:00 (1 year ago)
    
    gcc update

diff --git a/Makefile b/Makefile
index a9b7e1a0..6eb97050 100644
--- a/Makefile
+++ b/Makefile
@@ -10,9 +10,11 @@
 #
 
 #
-# Copyright (c) 2017, Joyent, Inc.
+# Copyright (c) 2018, Joyent, Inc.
 #
 
+include configure.env
+
 ROOT =		$(PWD)
 PROTO =		$(ROOT)/proto
 STRAP_PROTO =	$(ROOT)/proto.strap
@@ -118,7 +120,7 @@ TOOLS_TARGETS = \
 	$(UCODECHECK) \
 	tools/cryptpass
 
-world: 0-extra-stamp 0-illumos-stamp 1-extra-stamp 0-livesrc-stamp \
+world: 0-strap-stamp 0-illumos-stamp 0-extra-stamp 0-livesrc-stamp \
 	0-local-stamp 0-tools-stamp 0-man-stamp 0-devpro-stamp \
 	$(TOOLS_TARGETS) sdcman
 
@@ -209,12 +211,12 @@ $(MCPROTO)/illumos.mancheck.conf: projects/illumos/mancheck.conf | $(MCPROTO)
 $(BOOT_MPROTO)/illumos.manifest: projects/illumos/manifest | $(BOOT_MPROTO)
 	cp projects/illumos/boot.manifest $(BOOT_MPROTO)/illumos.manifest
 
-$(MPROTO)/illumos-extra.manifest: 1-extra-stamp \
+$(MPROTO)/illumos-extra.manifest: 0-extra-stamp \
     projects/illumos-extra/manifest | $(MPROTO)
 	gmake DESTDIR=$(MPROTO) DESTNAME=illumos-extra.manifest \
 	    -C projects/illumos-extra manifest; \
 
-$(MCPROTO)/illumos-extra.mancheck.conf: FRC | 1-extra-stamp $(MCPROTO)
+$(MCPROTO)/illumos-extra.mancheck.conf: FRC | 0-extra-stamp $(MCPROTO)
 	gmake DESTDIR=$(MCPROTO) DESTNAME=illumos-extra.mancheck.conf \
 	    -C projects/illumos-extra mancheck_conf; \
 
@@ -292,23 +294,29 @@ update-base:
 	    (cd projects/devpro && gmake DESTDIR=$(PROTO) install)
 	touch $@
 
-0-illumos-stamp: 0-extra-stamp
+0-illumos-stamp: 0-strap-stamp
+	@if [[ "$(ILLUMOS_CLOBBER)" = "yes" ]]; then \
+		(cd $(ROOT) && MAX_JOBS=$(MAX_JOBS) ./tools/clobber_illumos) \
+	fi
 	(cd $(ROOT) && MAX_JOBS=$(MAX_JOBS) ./tools/build_illumos)
 	touch $@
 
-0-extra-stamp:
-	(cd $(ROOT)/projects/illumos-extra && \
-	    gmake MAX_JOBS=$(MAX_JOBS) STRAP=strap DESTDIR=$(STRAP_PROTO) \
-	    install_strap)
-	(cd $(STRAP_PROTO) && gtar xzf $(ADJUNCT_TARBALL))
+FORCEARG_yes=-f
+
+# build our proto.strap area
+0-strap-stamp:
+	$(ROOT)/tools/build_strap -j $(MAX_JOBS) -d $(STRAP_PROTO) \
+	    -a $(ADJUNCT_TARBALL) $(FORCEARG_$(FORCE_STRAP_REBUILD))
 	touch $@
 
-1-extra-stamp: 0-illumos-stamp
+# additional illumos-extra content for proto itself
+0-extra-stamp: 0-illumos-stamp
 	(cd $(ROOT)/projects/illumos-extra && \
-	    gmake $(SUBDIR_DEFS) DESTDIR=$(PROTO) install)
+	    gmake $(SUBDIR_DEFS) DESTDIR=$(PROTO) \
+	    install)
 	touch $@
 
-0-livesrc-stamp: 0-illumos-stamp 0-extra-stamp 1-extra-stamp
+0-livesrc-stamp: 0-illumos-stamp 0-strap-stamp 0-extra-stamp
 	(cd $(ROOT)/src && \
 	    gmake -j$(MAX_JOBS) NATIVEDIR=$(STRAP_PROTO) \
 	    DESTDIR=$(PROTO) && \
@@ -368,6 +376,7 @@ clean:
 	rm -f $(MANIFEST) $(BOOT_MANIFEST)
 	rm -rf $(MPROTO)/* $(BOOT_MPROTO)/* $(MCPROTO)/*
 	(cd $(ROOT)/src && gmake clean)
+	# FIXME DESTDIR?
 	[ ! -d $(ROOT)/projects/illumos-extra ] || \
 	    (cd $(ROOT)/projects/illumos-extra && gmake clean)
 	[ ! -d projects/local ] || for dir in $(LOCAL_SUBDIRS); do \
@@ -380,7 +389,7 @@ clean:
 	done
 	(cd $(PKGSRC) && gmake clean)
 	(cd $(ROOT) && rm -rf $(PROTO))
-	(cd $(ROOT) && rm -rf $(STRAP_PROTO))
+	(cd $(ROOT) && [ -h $(STRAP_PROTO) ]] || rm -rf $(STRAP_PROTO))
 	(cd $(ROOT) && pfexec rm -rf $(BOOT_PROTO))
 	(cd $(ROOT) && pfexec rm -rf $(IMAGES_PROTO))
 	(cd $(ROOT) && mkdir -p $(PROTO) $(STRAP_PROTO) $(BOOT_PROTO) \
@@ -393,7 +402,7 @@ clean:
 	rm -f 0-*-stamp 1-*-stamp
 
 clobber: clean
-	pfexec rm -rf output/* output-iso/* output-usb/*
+	pfexec rm -rf configure.env output/* output-iso/* output-usb/*
  
 iso: live
 	./tools/build_iso
diff --git a/README.md b/README.md
index 7e8f4de5..669cd33d 100644
--- a/README.md
+++ b/README.md
@@ -255,6 +255,9 @@ This will produce a tarball that contains the platform. The platform
 will be placed in the `output` directory and a symlink to the latest
 tarball will be there.
 
+The configure script takes a few options that allow you to do a DEBUG
+build, configure shadow compilers, etc.
+
 #### Build Outputs
 
 By default, running `gmake live` produces a directory and a tarball in
@@ -383,7 +386,7 @@ would modify the normal workflow as follows:
 $ git clone git://github.com/joyent/smartos-live
 $ cd smartos-live
 $ cp sample.configure.smartos configure.smartos
-$ ILLUMOS_ENABLE_DEBUG=exclusive ./configure
+$ ./configure -d
 $ gmake live
 ```
 
@@ -406,12 +409,6 @@ support multiple proto-areas, this will end up just causing the system
 to clobber one build with the other. For more information on the nightly
 flags, see [nightly(1ONBLD)](https://illumos.org/man/1onbld/nightly)
 
-When performing a debug build and [using `bldenv` for incremental
-building of illumos](#incremental-building-of-illumos), make sure to
-specify the -d option to make sure that a debug build is enabled.
-`bldenv` ignores the settings in the illumos environment file to
-determine whether or not it should build debug bits.
-
 #### Controlling Maximum Number of Jobs
 
 By default, the build will determine the maximum number of jobs to use
@@ -434,13 +431,13 @@ will be rebuilt. Each of these components will be built incrementally.
 They will not be rebuilt from scratch unless they are cleaned up.
 
 The one project which is different here is illumos-extra. illumos-extra
-has two stamps: the `0-extra-stamp` and the `1-extra-stamp`. The
-`0-extra-stamp` represents building the bootstrap phase of
+has two stamps: the `0-strap-stamp` and the `0-extra-stamp`. The
+`0-strap-stamp` represents building the bootstrap phase of
 illumos-extra. This is the version of illumos-extra which builds the
 dependencies we need for the build. These are built against the host
 build system. After illumos is built, we then move onto the primary
 phase of illumos-extra where we build everything that we need against
-the proto area. This represents the `1-extra-stamp`.
+the proto area. This represents the `0-extra-stamp`.
 
 To rebuild most components you can simply remove the stamp file and
 build that stamp file again. For illumos and illumos-extra this may
@@ -492,6 +489,11 @@ risks and rewards of using `bldenv`.
 
 #### Iterating on illumos-extra
 
+If you're working on the bootstrap phase, make sure you're not using a cached
+`proto.strap` first. Using "./configure -r" will tell `./tools/build_strap` not
+to download a pre-built tarball for `proto.strap`, but instead do a full strap
+build of illumos-extra. Remember to explicitly `rm 0-strap-stamp`.
+
 Working on illumos-extra can sometimes be frustrating if you're simply
 building it from the top-level via the stamp each time. This is because
 some parts of GCC and other software will often be rebuilt. It is
@@ -499,10 +501,10 @@ possible to rebuild just a single directory by manually invoking what
 the Makefile would do. Note, that this manual process requires you to
 use the path of the repository that you're operating on.
 
-The simplest way to figure out how to rebuild what you need is to
-examine the make output. For example, if you were iterating on gas and
-the root of the smartos-live repository was at `/home/rm/src/mdb_v8`,
-then you might run a manual command like:
+The simplest way to figure out how to rebuild what you need is to examine the
+make output from a build. For example, if you were iterating on gas and the root
+of the smartos-live repository was at `/home/rm/src/mdb_v8`, then you might run
+a manual command like:
 
 ```
 $ cd projects/illumos-extra/binutils
diff --git a/TODO b/TODO
new file mode 100644
index 00000000..a647b072
--- /dev/null
+++ b/TODO
@@ -0,0 +1,27 @@
+
+need to finish up...
+
+0-strap-stamp - should we keep this? if so, modify README.md
+rconsdev has no type, breaks dtrace
+grep + compare old/new config.log
+find new files in proto
+test "dialog"  - what uses it
+contact qede
+file bugs
+testing libsldap - how - Leftwing?
+libresolv2 testing?
+gcc6 check??
+include prefetch patch
+test dtrace, especially perl + node ustack
+COAL build
+more testing?? how?
+
+
+done
+----
+
+ldd everything for missing deps
+clean traditional gcc4 buid
+gcc7 only build
+upstream  / separate pbchk
+upstream / separate cw
diff --git a/configure b/configure
index 9ca60535..9a317bb3 100755
--- a/configure
+++ b/configure
@@ -50,7 +50,7 @@ function check_loc
 	if [[ "$(uname -v)" =~ "joyent_" ]]; then
 		[[ "$(zonename)" == "global" ]] && fatal \
 		    "building in a GZ on SmartOS is not supported"
-	else	
+	else
 		echo "Not on SmartOS, assuming IPS and sudo"
 		conf_ips=1
 		conf_priv="sudo"
@@ -63,13 +63,6 @@ function create_projects
 	[[ -d "$dir" ]] || mkdir -p "$dir" || fatal "failed to create $dir"
 }
 
-function source_vars
-{
-	for file in "$(ls configure.*)"; do
-		source "$file" || fatal "failed to source $file"
-	done
-}
-
 function install_pkgin
 {
 	local pkglist=
@@ -219,27 +212,46 @@ function fetch_closed
 
 function generate_env
 {
+	#
+	# Note: since a nightly clobber build removes the whole proto, and we're
+	# installing non-Illumos things there, we always use the -i option, and
+	# ILLUMOS_CLOBBER is handled separately in Makefile.
+	#
 	local nopts="-CimMNnt"
-	local lint debug lprefix
-
-	if [[ -n "$ILLUMOS_ENABLE_LINT" ]]; then
-		lint=1
-		debug=1
-	fi
-
-	if [[ "$ILLUMOS_ENABLE_DEBUG" == "exclusive" ]]; then
-		debug=2
-	elif [[ "$ILLUMOS_ENABLE_DEBUG" == "yes" ]]; then
-		debug=1
-	elif [[ "$ILLUMOS_ENABLE_DEBUG" == "no" ]]; then
-		debug=
-	elif [[ -n "$ILLUMOS_ENABLE_DEBUG" ]]; then
-		fatal "Unknown value for $ILLUMOS_ENABLE_DEBUG"
-	fi
-
-	[[ -n "$lint" ]] && nopts="${nopts}l"
-	[[ "$debug" -eq 1 ]] && nopts="${nopts}D"
-	[[ "$debug" -eq 2 ]] && nopts="${nopts}DF"
+	local lprefix
+
+	[[ "$ILLUMOS_LINT" = "yes" ]] && nopts="${nopts}l"
+
+	case $ILLUMOS_DEBUG in
+	exclusive)
+		nopts="${nopts}DF"
+		;;
+	yes)
+		nopts="${nopts}D"
+		;;
+	no|"")
+		;;
+	*)
+		echo "unknown debug option $ILLUMOS_DEBUG" >&2
+		exit 1
+		;;
+	esac
+
+	GNUC_ROOT="$conf_root/proto.strap/usr/gcc/$PRIMARY_COMPILER_VER"
+	PRIMARY_CC="gcc$PRIMARY_COMPILER_VER,$GNUC_ROOT/bin/gcc,gnu"
+	PRIMARY_CCC="gcc$PRIMARY_COMPILER_VER,$GNUC_ROOT/bin/g++,gnu"
+
+	SHADOW_CCS=
+	SHADOW_CCCS=
+
+	IFS=,
+	for cc in $SHADOW_COMPILERS; do
+		gcc_ver=$(echo $cc | sed 's/^gcc//')
+		root="$conf_root/proto.strap/usr/gcc/$gcc_ver"
+		SHADOW_CCS+=" gcc${gcc_ver},$root/bin/gcc,gnu"
+		SHADOW_CCCS+=" gcc${gcc_ver},$root/bin/g++,gnu"
+	done
+	unset IFS
 
 	lprefix=$(echo $conf_root | tr / _)
 	[[ $? -eq 0 ]] || fatal "failed to create lock prefix"
@@ -283,20 +295,22 @@ PKGARCHIVE="\${CODEMGR_WS}/packages/\${MACH}/nightly";
 PKGPUBLISHER_REDIST="${PUBLISHER}";		export PKGPUBLISHER_REDIST
 MAKEFLAGS=k;					export MAKEFLAGS
 UT_NO_USAGE_TRACKING="1";			export UT_NO_USAGE_TRACKING
-CW_NO_SHADOW="1";				export CW_NO_SHADOW
 MULTI_PROTO="no";				export MULTI_PROTO
 BUILD_TOOLS="\${CODEMGR_WS}/usr/src/tools/proto/root_\${MACH}-nd/opt";
 						export BUILD_TOOLS
 SPRO_ROOT=/opt/SUNWspro;			export SPRO_ROOT
 SPRO_VROOT=\$SPRO_ROOT;				export SPRO_VROOT
 GNU_ROOT="$conf_root/proto.strap/usr/gnu"	export GNU_ROOT
-GCC_ROOT="$conf_root/proto.strap/usr/gcc/4";	export GCC_ROOT
-# A temporary hack to allow bootstrap of cw(1)
-CW_GCC_DIR="\${GCC_ROOT}/bin";			export CW_GCC_DIR
 # Use GCC as the primary compiler
 __GNUC="";					export __GNUC
-# Use GCC4 specific flags
+# Use GCC4 or later specific flags
 __GNUC4="";					export __GNUC4
+# root of \$PRIMARY_CC
+GNUC_ROOT="$GNUC_ROOT";				export GNUC_ROOT
+PRIMARY_CC="$PRIMARY_CC";			export PRIMARY_CC
+PRIMARY_CCC="$PRIMARY_CCC";			export PRIMARY_CCC
+SHADOW_CCS="$SHADOW_CCS";			export SHADOW_CCS
+SHADOW_CCCS="$SHADOW_CCCS";			export SHADOW_CCCS
 JAVA_ROOT=/opt/local/java/openjdk7;		export JAVA_ROOT
 FLEX=/opt/local/bin/flex;			export FLEX
 GNUXGETTEXT=/opt/local/bin/xgettext;		export GNUXGETTEXT
@@ -338,7 +352,7 @@ function update_git
 }
 
 function update_branches
-{	
+{
 	local line repo branch
 
 	[[ ! -f "configure-branches" ]] && return
@@ -357,18 +371,15 @@ function update_branches
 		    "missing repository entry in line: [$line]"
 		[[ -z "$branch" ]] && fatal \
 		    "missing branch entry in line: [$branch]"
-		
-		#
-		# Handle the legacy name of smartos-live
-		#
-		if [[ "$repo" == "smartos-live" || \
+
+		# Lots of "configure.smartos" out there with "illumos-live"
+		if [[ "$repo" == "smartos-live" ||
 		    "$repo" == "illumos-live" ]]; then
 			warn "configure-branches can't update smartos-live"
-			warn "ignoring and continuing on..."	
+			warn "ignoring and continuing on..."
 			continue
 		fi
-		if [[ "$repo" == "illumos-joyent" || \
-		    "$repo" == "illumos" ]]; then
+		if [[ "$repo" == "illumos-joyent" ]]; then
 			update_git "projects/illumos" $branch && continue
 		elif  [[ "$repo" == "smartos-overlay" ]]; then
 			update_git "overlay/smartos" $branch && continue
@@ -382,14 +393,98 @@ function update_branches
 	done < "configure-branches"
 }
 
+read -r -d '' usage <<EOF
+./configure [options]:
+	-c
+		clobber Illumos build [default: no]
+	-d
+		build Illumos in DEBUG mode only [default: no]
+	-h
+		this message
+	-l
+		run lint pass on Illumos [default: no]
+	-p gcc4
+		primary compiler version [default: gcc4]
+	-r
+		full strap build (no cache) [default: no]
+	-s gcc6,gcc7
+		shadow compilers [default: none]
+EOF
+
+while getopts "cdhlp:rs:" arg; do
+	case $arg in
+	c)
+		ILLUMOS_CLOBBER=yes
+		;;
+
+	#
+	# We have only one proto area: we'll skip building non-debug here,
+	# as the results are over-written by nightly (we only have one proto
+	# area).  If the user really wants a sanity check build, they can
+	# specify =yes via the env var, or by directly editing illumos.sh
+	#
+	d)
+		ILLUMOS_DEBUG=exclusive
+		;;
+	h)
+		echo "$usage"
+		exit 0
+		;;
+	l)
+		ILLUMOS_LINT=yes
+		;;
+	p)
+		PRIMARY_COMPILER=$OPTARG
+		FORCE_STRAP_REBUILD=yes
+		;;
+	r)
+		FORCE_STRAP_REBUILD=yes
+		;;
+	s)
+		SHADOW_COMPILERS=$OPTARG
+		FORCE_STRAP_REBUILD=yes
+		;;
+	?)
+		echo "$usage" >&2
+		exit 1
+		;;
+	esac
+done
+
+if [[ -n "$ILLUMOS_LINT" ]]; then
+	if [[ -z "$ILLUMOS_DEBUG" ]]; then
+		ILLUMOS_DEBUG=yes
+	fi
+else
+	ILLUMOS_LINT=no
+fi
+
+[[ -n "$ILLUMOS_DEBUG" ]] || ILLUMOS_DEBUG=no
+[[ -n "$ILLUMOS_CLOBBER" ]] || ILLUMOS_CLOBBER=no
+[[ -n "$PRIMARY_COMPILER" ]] || PRIMARY_COMPILER=gcc4
+
+PRIMARY_COMPILER_VER=$(echo $PRIMARY_COMPILER | sed 's/^gcc//')
+
+cat >configure.env <<EOF
+FORCE_STRAP_REBUILD=$FORCE_STRAP_REBUILD
+ILLUMOS_CLOBBER=$ILLUMOS_CLOBBER
+ILLUMOS_DEBUG=$ILLUMOS_DEBUG
+ILLUMOS_LINT=$ILLUMOS_LINT
+PRIMARY_COMPILER=$PRIMARY_COMPILER
+PRIMARY_COMPILER_VER=$PRIMARY_COMPILER_VER
+SHADOW_COMPILERS=$SHADOW_COMPILERS
+EOF
+
+source configure.smartos || {
+	echo "configure.smartos not found" >&2
+	exit 1
+}
 echo "Doing pre-flight checks... \c "
 check_loc
 echo "done."
 echo "Creating projects directory ... \c "
 create_projects
 echo "done."
-echo "Sourcing configure.* files ... \c "
-source_vars
 echo "done."
 echo "Installing packages ... \c "
 install_packages
diff --git a/sample.configure.smartos b/sample.configure.smartos
index a0c04922..d5ed1967 100644
--- a/sample.configure.smartos
+++ b/sample.configure.smartos
@@ -12,7 +12,7 @@ mkdir -p projects/local
 if [[ ! -f configure-branches ]]; then
     cat >configure-branches <<EOF
 # after editing, rerun configure
-illumos-live: master
+smartos-live: master
 illumos-extra: master
 illumos-joyent: master
 ur-agent: master
diff --git a/src/Makefile b/src/Makefile
index e465286f..80b796ef 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -338,13 +338,12 @@ clean : TARGET = clean
 install : TARGET = install
 check : TARGET = lint
 
-$(SUBDIRS): FRC
-	@cd $@; pwd; $(MAKE) $(SUBDIRS_ENV) $(TARGET)
-
-
 all: $(TARGETS) $(USR_LIB_TARGETS) sysinfo nictagadm sysevent \
 	$(SMARTDC_TARGETS) $(SMARTDC_LIB_TARGETS) $(SUBDIRS)
 
+$(SUBDIRS): FRC
+	@cd $@; pwd; $(MAKE) $(SUBDIRS_ENV) $(TARGET)
+
 install: all $(SUBDIRS)
 	mkdir -p $(DESTDIR)/usr/bin
 	cp -p $(TARGETS) sysinfo nictagadm $(DESTDIR)/usr/bin
@@ -556,11 +555,13 @@ $(EXPAT.NODE): node-expat/node-expat.cc
 # node-lockfd and node-zonename are built using the v8plus-based Makefile
 # contained within their projects.  We use LD_OPTIONS, here, to induce the
 # linker to include libc, which gcc as configured in proto.strap does not, but
-# which other C compilers generally do.
+# which other C compilers generally do.  We also need to pick up the build
+# libstdc++ rather than the system's.
 #
 $(LOCKFD_BINDING.NODE): FRC
 	cd $(LOCKFD_SRC_DIR) && \
 	LD_OPTIONS=-lc \
+	LD_LIBRARY_PATH_32=$(DESTDIR)/usr/lib \
 	$(MAKE) \
 		$(V8PLUS_SUBDIR_ENV) \
 		V8PLUS=$(PWD)/$(LOCKFD_V8PLUS_DIR)
@@ -568,6 +569,7 @@ $(LOCKFD_BINDING.NODE): FRC
 $(ZONENAME_BINDING.NODE): FRC
 	cd $(ZONENAME_SRC_DIR) && \
 	LD_OPTIONS=-lc \
+	LD_LIBRARY_PATH_32=$(DESTDIR)/usr/lib \
 	$(MAKE) \
 		$(V8PLUS_SUBDIR_ENV) \
 		V8PLUS=$(PWD)/$(ZONENAME_V8PLUS_DIR)
diff --git a/tools/build_live b/tools/build_live
index 280c2dd8..5ac7f095 100755
--- a/tools/build_live
+++ b/tools/build_live
@@ -893,7 +893,7 @@ bi_setup_work_dir
 # Create and mount the "/" (root) ramdisk image:
 #
 bi_file_root="$bi_tmpdir/root.image"
-bi_root_size=278000
+bi_root_size=300000 # FIXME: proto is 231M versus 216M
 if strings "$bi_wsroot/proto/kernel/amd64/genunix" |
     grep "DEBUG enabled" >/dev/null; then
 	#
diff --git a/tools/build_strap b/tools/build_strap
new file mode 100755
index 00000000..5f0d6a6c
--- /dev/null
+++ b/tools/build_strap
@@ -0,0 +1,198 @@
+#!/usr/bin/bash
+#
+# This file and its contents are supplied under the terms of the
+# Common Development and Distribution License ("CDDL"), version 1.0.
+# You may only use this file in accordance with the terms of version
+# 1.0 of the CDDL.
+#
+# A full copy of the text of the CDDL should have accompanied this
+# source.  A copy of the CDDL is also available via the Internet at
+# http://www.illumos.org/license/CDDL.
+#
+# Copyright (c) 2018 Joyent, Inc.
+#
+
+#
+# build_strap - populate proto.strap
+#
+# This script attempts to download a pre-built proto.strap, depending on the
+# pkgsrc branch and projects/illumos-extra git HEAD to determine the right
+# tarball.  This avoids a considerable amount of time building.
+#
+# Cached bootstrap directories are kept at /opt/smartos-build, and symlinked
+# into the build area; this allows multiple different builds to share a cached
+# strap dir.
+#
+# If we can't find a suitable tarball, or we find a non-symlinked proto.strap,
+# we'll fall back to doing a full strap build of illumos-extra.  This is also
+# true if the user specified non-default compilers.
+#
+
+usage="$0 -a adjunct.tar -d protodir [-f] [-j maxjobs]"
+wsroot=$(cd $(dirname $0)/../; pwd)
+pkgin_file="/opt/local/etc/pkgin/repositories.conf"
+# FIXME
+manta_base="https://us-east.manta.joyent.com/rmustacc/public/smartos-build/"
+cache_base="/opt/smartos-build"
+srcdir="$wsroot/projects/illumos-extra"
+adjunct=""
+protodir=""
+max_jobs="128"
+force_build="no"
+
+function fatal
+{
+        local msg="$*"
+        [[ -z "$msg" ]] && msg="failed"
+        echo "$msg" >&2
+        exit 1
+}
+
+function verbose
+{
+	echo "$@"
+	"$@"
+}
+
+function identify_pkgsrc_branch
+{
+	local branch=$($wsroot/tools/pkgsrc_branch.nawk "$pkgin_file")
+	[[ $? -ne 0 ]] && fatal "failed to extract pkgsrc branch"
+	[[ -z "$branch" ]] && fatal "pkgsrc branch is empty"
+	echo $branch
+}
+
+function identify_srcsha
+{
+	local sha=$(cd $srcdir && git rev-list -1 HEAD)
+	[[ $? -ne 0 ]] && fatal "failed to extract illumos-extra SHA"
+	[[ -z "$sha" ]] && fatal "illumos-extra SHA is empty"
+	echo $sha
+}
+
+function build_strap
+{
+	echo "Building illumos-extra bootstrap"
+
+	verbose gmake STRAP=strap MAX_JOBS=$max_jobs DESTDIR=$protodir \
+	    -C $wsroot/projects/illumos-extra install_strap ||
+	    fatal "failed to build install_strap"
+
+	verbose gtar xzf $adjunct -C "$protodir" ||
+	    fatal "failed to extract adjunct"
+}
+
+#
+# Download a copy of the pkgsrc bootstrap we need, if there is one. If curl
+# fails, we'll presume it's because there isn't a matching tarball available,
+# and fall back to building locally.
+#
+function download
+{
+	local pkgsrc_branch=$1
+	local srcdirsha=$2
+	local cache_dir="$cache_base/$pkgsrc_branch/$srcdirsha"
+	local outfile="/var/tmp/$srcdirsha.tgz.$$"
+	local url="$manta_base/$pkgsrc_branch/$srcdirsha.tgz"
+	local tmpdir="$cache_dir.$$"
+
+	pfexec mkdir -p "$tmpdir" || fatal "failed to make $cache_dir"
+
+	echo "Downloading proto.strap contents from $url ..."
+
+	if ! curl -f -o "$outfile" "$url"; then
+		rm -f "$outfile"
+		pfexec rm -rf "$tmpdir"
+		build_strap
+		return 0
+	fi
+
+	if ! pfexec tar xzf "$outfile" -C "$tmpdir"; then
+		rm -f "$outfile"
+		pfexec rm -rf "$tmpdir"
+		fatal "failed to extract tar file"
+	fi
+
+	rm -f "$outfile"
+
+	if ! pfexec mv "$tmpdir" "$cache_dir"; then
+		#
+		# It's possible we lost a rename race. If we did, then let's not
+		# worry about that and roll with it and just remove our download
+		# and copy. However, we need to remove our local copy anyway.
+		#
+		pfexec rm -rf "$tmpdir"
+		if [[ ! -d "$cache_dir" ]]; then
+			fatal "failed to rename our temporary directory to " \
+			    "$cache_dir"
+		fi
+	fi
+}
+
+#
+# Populate proto.strap: either we do a local build, or we download and use a
+# cached copy, sym-linking it in.
+#
+function populate_strap
+{
+	local pkgsrc_branch=$1
+	local srcdirsha=$2
+	local cache_dir="$cache_base/$pkgsrc_branch/$srcdirsha"
+
+	if [[ -e "$cache_dir" && ! -d "$cache_dir" ]]; then
+		fatal "found weird non-directory $cache_dir"
+	fi
+
+	#
+	# First we should clean up: if not a symlink or empty dir, it must be a
+	# local strap build we need.
+	#
+	if [[ -d "$protodir" ]] && ! rm "$protodir"; then
+		build_strap
+		return 0
+	fi
+
+	if [[ "$force_build" = "yes" ]]; then
+		build_strap
+		return 0
+	fi
+
+	if [[ ! -d "$cache_dir" ]]; then
+		download $pkgsrc_branch $srcdirsha
+	fi
+
+	verbose ln -s "$cache_dir" "$protodir" ||
+	    fatal "failed to symlink $protodir"
+
+}
+
+export PATH=/usr/bin:/usr/sbin:/sbin:/opt/local/bin:/opt/local/sbin
+set -o pipefail
+
+while getopts "a:d:fhj:" arg; do
+	case $arg in
+	a)
+		adjunct=$OPTARG ;;
+	d)
+		protodir=$OPTARG ;;
+	f)
+		force_build=yes ;;
+	h)
+		echo "$usage"
+		exit 0 ;;
+	j)
+		max_jobs=$OPTARG ;;
+	?)
+		echo "$usage" >&2
+		exit 1 ;;
+	esac
+done
+
+[[ -n "$adjunct" ]] || fatal "missing -a argument"
+[[ -n "$protodir" ]] || fatal "missing -d argument"
+[[ -d "$srcdir" ]] || fatal "cannot find illumos-extra in $srcdir"
+[[ -d "$srcdir/.git" ]] || fatal "$srcdir is not a git repo"
+
+populate_strap $(identify_pkgsrc_branch) $(identify_srcsha)
+
+exit 0
diff --git a/tools/clobber_illumos b/tools/clobber_illumos
index 24d38044..443c3860 100755
--- a/tools/clobber_illumos
+++ b/tools/clobber_illumos
@@ -108,6 +108,7 @@ EOF
 #
 function ci_do_clobber
 {
+	echo "Clobbering $ci_wsroot/projects/illumos"
 	ksh93 $ci_illumos/tools/scripts/bldenv.sh $ci_illumos/../../illumos.sh \
 	    'cd $CODEMGR_WS/usr/src && dmake clobber'
 }
diff --git a/tools/pkgsrc_branch.nawk b/tools/pkgsrc_branch.nawk
new file mode 100755
index 00000000..9c6901b8
--- /dev/null
+++ b/tools/pkgsrc_branch.nawk
@@ -0,0 +1,53 @@
+#!/opt/local/bin/nawk -f
+#
+# This file and its contents are supplied under the terms of the
+# Common Development and Distribution License ("CDDL"), version 1.0.
+# You may only use this file in accordance with the terms of version
+# 1.0 of the CDDL.
+#
+# A full copy of the text of the CDDL should have accompanied this
+# source.  A copy of the CDDL is also available via the Internet at
+# http://www.illumos.org/license/CDDL.
+#
+# Copyright (c) 2018 Joyent, Inc.
+#
+# Determine pkgsrc branch given a repositories.conf file.
+#
+
+BEGIN {
+	FS="/"
+}
+
+{
+	#
+	# Clear out comments.
+	#
+	gsub("#.*", "", $0);
+}
+
+!$0 {
+	#
+	# Skip blank lines.
+	#
+	next;
+}
+
+$3 != "pkgsrc.joyent.com" || $4 != "packages" {
+	print("WARNING: unexpected URL format: " $0) >"/dev/stderr";
+	next;
+}
+
+{
+	c++;
+	v = $(NF - 2);
+	a = $(NF - 1);
+}
+
+END {
+	if (c != 1) {
+	    printf("wanted 1 repo, found %d\n", c) >"/dev/stderr";
+	    exit(1);
+	}
+
+	printf("%s/%s\n", v, a);
+}
diff --git a/tools/update_base b/tools/update_base
index 806a344f..d1859f99 100755
--- a/tools/update_base
+++ b/tools/update_base
@@ -21,7 +21,7 @@
 #
 # CDDL HEADER END
 #
-# Copyright (c) 2012, Joyent, Inc.
+# Copyright 2018 Joyent, Inc.
 #
 
 #
@@ -31,8 +31,8 @@ shopt -s xpg_echo
 
 upd_arg0=$(basename $0)
 upd_root=$(pwd)
-upd_extra_stamp="$upd_root/0-extra-stamp $upd_root/1-extra-stamp"
-upd_illumos_stamp="$upd_root/0-illumos-stamp $upd_root/1-extra-stamp"
+upd_extra_stamp="$upd_root/0-strap-stamp $upd_root/0-extra-stamp"
+upd_illumos_stamp="$upd_root/0-illumos-stamp $upd_root/0-extra-stamp"
 upd_live_stamp="$upd_root/0-livesrc-stamp $upd_root/0-man-stamp"
 upd_live_stamp="$upd_live_stamp $upd_root/0-tools-stamp $upd_root/0-pwgen-stamp"
 upd_live_stamp="$upd_live_stamp $upd_root/0-builder-stamp"
