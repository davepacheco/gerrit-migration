From 49cbfff127ecafc58e5d94686e893f2ae60a9667 Mon Sep 17 00:00:00 2001
From: Ryan Zezeski <rpz@joyent.com>
Date: Tue, 8 Nov 2016 14:40:11 -0500
Subject: [PATCH] OS-3506 dls and mac lock ordering isn't honored

---
 usr/src/uts/common/io/dls/dls_mgmt.c | 15 +++++++++++++--
 1 file changed, 13 insertions(+), 2 deletions(-)

diff --git a/usr/src/uts/common/io/dls/dls_mgmt.c b/usr/src/uts/common/io/dls/dls_mgmt.c
index 105c55c7ce..3171d0f541 100644
--- a/usr/src/uts/common/io/dls/dls_mgmt.c
+++ b/usr/src/uts/common/io/dls/dls_mgmt.c
@@ -1854,12 +1854,17 @@ dls_devnet_destroy(mac_handle_t mh, datalink_id_t *idp, boolean_t wait)
 	mac_perim_handle_t	mph;
 
 	*idp = DATALINK_INVALID_LINKID;
+
+	mac_perim_enter_by_mh(mh, &mph);
+
 	err = dls_devnet_unset(mac_name(mh), idp, wait);
-	if (err != 0 && err != ENOENT)
+	if (err != 0 && err != ENOENT) {
+		mac_perim_exit(mph);
 		return (err);
+	}
 
-	mac_perim_enter_by_mh(mh, &mph);
 	err = dls_link_rele_by_name(mac_name(mh));
+
 	mac_perim_exit(mph);
 
 	if (err != 0) {
@@ -1870,6 +1875,12 @@ dls_devnet_destroy(mac_handle_t mh, datalink_id_t *idp, boolean_t wait)
 		 * called from kernel context or from a zone other than that
 		 * which initially created the link.
 		 */
+
+		/*
+		 * RPZ SAYS not holding MAC perim here because this
+		 * may do an upcall (though it will grab the DLS
+		 * devnet lock before doing so, sigh).
+		 */
 		(void) dls_devnet_set(mac_name(mh), *idp, crgetzoneid(CRED()),
 		    NULL);
 	}
-- 
2.21.0

