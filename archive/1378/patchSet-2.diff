From 5af1cdfe126904d2b57317b431e933501bb830b5 Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Fri, 27 Jan 2017 18:03:28 -0800
Subject: [PATCH] OS-5928 upgrade OpenSSH to 7.4p1 OS-5929 OpenSSH dumps core
 on audit failure

---
 openssh/Makefile                              |    3 +-
 .../0001-Include-priv.h-for-priv_set_t.patch  |   25 -
 ...eck.patch => 0001-Skip-config-check.patch} |   10 +-
 ...M-Support.patch => 0002-PAM-Support.patch} |   14 +-
 openssh/Patches/0003-lastlogin.patch          |   38 +
 ...ges-into-Illumos-numbering-adjust-t.patch} | 3937 +++++++++--------
 openssh/Patches/0004-lastlogin.patch          |   52 -
 ...h => 0005-Deprecated-SunSSH-options.patch} |   12 +-
 ...=> 0006-GSS-store-creds-for-Solaris.patch} |   22 +-
 ...tch => 0007-DTrace-support-for-SFTP.patch} |   34 +-
 ...ch => 0008-Add-DisableBanner-option.patch} |   90 +-
 ....patch => 0009-PAM-conversation-fix.patch} |   56 +-
 ...> 0010-PAM-enhancements-for-Solaris.patch} |  252 +-
 ...SunSSH-compat-default-config-values.patch} |   67 +-
 ...te-SunSSH-compatible-server-options.patch} |   10 +-
 ...ch => 0013-Solaris-Auditing-support.patch} |   90 +-
 .../0014-GSS-API-key-exchange-support.patch   | 3303 ++++++++++++++
 ...ogin-to-a-role-if-PAM-is-ok-with-it.patch} |   45 +-
 .../0015-GSS-API-key-exchange-support.patch   | 1939 --------
 ....patch => 0016-PAM-setcred-failures.patch} |   12 +-
 ...017-Don-t-call-do_pam_setcred-twice.patch} |    8 +-
 ...patch => 0018-Per-session-xauthfile.patch} |   30 +-
 ....patch => 0019-PubKeyPlugin-support.patch} |   38 +-
 ...Compatibility-fix-for-ListenAddress.patch} |   10 +-
 ...vsep-chroot-dir-if-it-doesn-t-exist.patch} |   10 +-
 ...anifest-and-method-and-install-them.patch} |   14 +-
 ...22-Hack-around-umac_ctx-name-punning.patch |   35 -
 ..._config-more-like-the-old-illumos-o.patch} |   39 +-
 ...configure-option-to-place-SSH-host-.patch} |   31 +-
 ...0025-Re-enable-DSA-keys-for-pk-auth.patch} |   22 +-
 ...nfig-to-check-for-GSSAPI-on-Illumos.patch} |   16 +-
 ...-options-based-on-etc-default-login.patch} |   30 +-
 ...-SunSSH_1.5-should-include-old-DH-K.patch} |    8 +-
 ...C_-environment-variables-from-clien.patch} |   47 +-
 ...sh-keygen-and-ssh-add-to-old-FP-for.patch} |   12 +-
 ...Restore-tcpwrappers-libwrap-support.patch} |   42 +-
 ...back-copy-of-DH-moduli-in-a-system-.patch} |   35 +-
 ...ce32.patch => 1000-smartos-dtrace32.patch} |   10 +-
 ...002-sunw_ssl.patch => 1001-sunw_ssl.patch} |  111 +-
 openssh/openssh-portable-7.2p2.tar.gz         |  Bin 1225306 -> 0 bytes
 openssh/openssh-portable-7.4p1.tar.gz         |  Bin 0 -> 1238523 bytes
 41 files changed, 6002 insertions(+), 4557 deletions(-)
 delete mode 100644 openssh/Patches/0001-Include-priv.h-for-priv_set_t.patch
 rename openssh/Patches/{0002-Skip-config-check.patch => 0001-Skip-config-check.patch} (85%)
 rename openssh/Patches/{0003-PAM-Support.patch => 0002-PAM-Support.patch} (76%)
 create mode 100644 openssh/Patches/0003-lastlogin.patch
 rename openssh/Patches/{0005-Reorganise-man-pages-into-Illumos-numbering-adjust-t.patch => 0004-Reorganise-man-pages-into-Illumos-numbering-adjust-t.patch} (85%)
 delete mode 100644 openssh/Patches/0004-lastlogin.patch
 rename openssh/Patches/{0006-Deprecated-SunSSH-options.patch => 0005-Deprecated-SunSSH-options.patch} (86%)
 rename openssh/Patches/{0007-GSS-store-creds-for-Solaris.patch => 0006-GSS-store-creds-for-Solaris.patch} (91%)
 rename openssh/Patches/{0008-DTrace-support-for-SFTP.patch => 0007-DTrace-support-for-SFTP.patch} (95%)
 rename openssh/Patches/{0009-Add-DisableBanner-option.patch => 0008-Add-DisableBanner-option.patch} (71%)
 rename openssh/Patches/{0010-PAM-conversation-fix.patch => 0009-PAM-conversation-fix.patch} (58%)
 rename openssh/Patches/{0011-PAM-enhancements-for-Solaris.patch => 0010-PAM-enhancements-for-Solaris.patch} (75%)
 rename openssh/Patches/{0012-SunSSH-compat-default-config-values.patch => 0011-SunSSH-compat-default-config-values.patch} (68%)
 rename openssh/Patches/{0013-Deprecate-SunSSH-compatible-server-options.patch => 0012-Deprecate-SunSSH-compatible-server-options.patch} (92%)
 rename openssh/Patches/{0014-Solaris-Auditing-support.patch => 0013-Solaris-Auditing-support.patch} (91%)
 create mode 100644 openssh/Patches/0014-GSS-API-key-exchange-support.patch
 rename openssh/Patches/{0016-Enable-login-to-a-role-if-PAM-is-ok-with-it.patch => 0015-Enable-login-to-a-role-if-PAM-is-ok-with-it.patch} (78%)
 delete mode 100644 openssh/Patches/0015-GSS-API-key-exchange-support.patch
 rename openssh/Patches/{0017-PAM-setcred-failures.patch => 0016-PAM-setcred-failures.patch} (87%)
 rename openssh/Patches/{0018-Don-t-call-do_pam_setcred-twice.patch => 0017-Don-t-call-do_pam_setcred-twice.patch} (90%)
 rename openssh/Patches/{0019-Per-session-xauthfile.patch => 0018-Per-session-xauthfile.patch} (89%)
 rename openssh/Patches/{0020-PubKeyPlugin-support.patch => 0019-PubKeyPlugin-support.patch} (89%)
 rename openssh/Patches/{0021-Compatibility-fix-for-ListenAddress.patch => 0020-Compatibility-fix-for-ListenAddress.patch} (82%)
 rename openssh/Patches/{0023-Try-to-create-privsep-chroot-dir-if-it-doesn-t-exist.patch => 0021-Try-to-create-privsep-chroot-dir-if-it-doesn-t-exist.patch} (82%)
 rename openssh/Patches/{0024-Add-SMF-manifest-and-method-and-install-them.patch => 0022-Add-SMF-manifest-and-method-and-install-them.patch} (97%)
 delete mode 100644 openssh/Patches/0022-Hack-around-umac_ctx-name-punning.patch
 rename openssh/Patches/{0025-Make-default-sshd_config-more-like-the-old-illumos-o.patch => 0023-Make-default-sshd_config-more-like-the-old-illumos-o.patch} (69%)
 rename openssh/Patches/{0026-Add-with-key-dir-configure-option-to-place-SSH-host-.patch => 0024-Add-with-key-dir-configure-option-to-place-SSH-host-.patch} (86%)
 rename openssh/Patches/{0027-Re-enable-DSA-keys-for-pk-auth.patch => 0025-Re-enable-DSA-keys-for-pk-auth.patch} (73%)
 rename openssh/Patches/{0028-Don-t-use-krb5-config-to-check-for-GSSAPI-on-Illumos.patch => 0026-Don-t-use-krb5-config-to-check-for-GSSAPI-on-Illumos.patch} (71%)
 rename openssh/Patches/{0029-Set-default-sshd-options-based-on-etc-default-login.patch => 0027-Set-default-sshd-options-based-on-etc-default-login.patch} (85%)
 rename openssh/Patches/{0030-Compatibility-for-SunSSH_1.5-should-include-old-DH-K.patch => 0028-Compatibility-for-SunSSH_1.5-should-include-old-DH-K.patch} (92%)
 rename openssh/Patches/{0031-Accept-LANG-and-LC_-environment-variables-from-clien.patch => 0029-Accept-LANG-and-LC_-environment-variables-from-clien.patch} (81%)
 rename openssh/Patches/{0032-Temporarily-set-ssh-keygen-and-ssh-add-to-old-FP-for.patch => 0030-Temporarily-set-ssh-keygen-and-ssh-add-to-old-FP-for.patch} (94%)
 rename openssh/Patches/{0033-Restore-tcpwrappers-libwrap-support.patch => 0031-Restore-tcpwrappers-libwrap-support.patch} (81%)
 rename openssh/Patches/{0034-Let-us-put-a-fallback-copy-of-DH-moduli-in-a-system-.patch => 0032-Let-us-put-a-fallback-copy-of-DH-moduli-in-a-system-.patch} (78%)
 rename openssh/Patches/{1001-dtrace32.patch => 1000-smartos-dtrace32.patch} (88%)
 rename openssh/Patches/{1002-sunw_ssl.patch => 1001-sunw_ssl.patch} (71%)
 delete mode 100644 openssh/openssh-portable-7.2p2.tar.gz
 create mode 100644 openssh/openssh-portable-7.4p1.tar.gz

diff --git a/openssh/Makefile b/openssh/Makefile
index 5d420c0..0f8afc6 100644
--- a/openssh/Makefile
+++ b/openssh/Makefile
@@ -22,7 +22,7 @@
 # Copyright 2015 Joyent, Inc.
 #
 
-VER =	openssh-portable-7.2p2
+VER =	openssh-portable-7.4p1
 
 include ../Makefile.defs
 
@@ -42,6 +42,7 @@ AUTOCONF_OPTS += \
 	--with-tcp-wrappers \
 	--with-4in6 \
 	--with-xauth=/usr/bin/xauth \
+	--with-Werror=no \
 	--enable-strip=no \
 	--without-rpath \
 	--disable-lastlog \
diff --git a/openssh/Patches/0001-Include-priv.h-for-priv_set_t.patch b/openssh/Patches/0001-Include-priv.h-for-priv_set_t.patch
deleted file mode 100644
index 205c9f4..0000000
--- a/openssh/Patches/0001-Include-priv.h-for-priv_set_t.patch
+++ /dev/null
@@ -1,25 +0,0 @@
-From 44b55a89f74313a4963167609cd5e6fd238e5548 Mon Sep 17 00:00:00 2001
-From: Darren Tucker <dtucker@zip.com.au>
-Date: Fri, 11 Mar 2016 14:47:41 +1100
-Subject: [PATCH 01/34] Include priv.h for priv_set_t.
-
-From alex at cooperi.net.
----
- openbsd-compat/port-solaris.h | 1 +
- 1 file changed, 1 insertion(+)
-
-diff --git a/openbsd-compat/port-solaris.h b/openbsd-compat/port-solaris.h
-index 3a41ea8..a7cb5eb 100644
---- a/openbsd-compat/port-solaris.h
-+++ b/openbsd-compat/port-solaris.h
-@@ -27,6 +27,7 @@ void solaris_contract_post_fork_child(void);
- void solaris_contract_post_fork_parent(pid_t pid);
- void solaris_set_default_project(struct passwd *);
- # ifdef USE_SOLARIS_PRIVS
-+#include <priv.h>
- priv_set_t *solaris_basic_privset(void);
- void solaris_drop_privs_pinfo_net_fork_exec(void);
- void solaris_drop_privs_root_pinfo_net(void);
--- 
-2.5.4 (Apple Git-61)
-
diff --git a/openssh/Patches/0002-Skip-config-check.patch b/openssh/Patches/0001-Skip-config-check.patch
similarity index 85%
rename from openssh/Patches/0002-Skip-config-check.patch
rename to openssh/Patches/0001-Skip-config-check.patch
index 3d65568..a3f473a 100644
--- a/openssh/Patches/0002-Skip-config-check.patch
+++ b/openssh/Patches/0001-Skip-config-check.patch
@@ -1,7 +1,7 @@
-From 41b029a3dab10a1bd3d2924a3b6c891b74102599 Mon Sep 17 00:00:00 2001
+From f1b0f2c40b09b0a280b097b6ce39a5767e6f6edd Mon Sep 17 00:00:00 2001
 From: oracle <solaris@oracle.com>
 Date: Mon, 3 Aug 2015 14:31:53 -0700
-Subject: [PATCH 02/34] Skip config check
+Subject: [PATCH 01/34] Skip config check
 
 #
 # This change is to remove some misleading error messages when running
@@ -15,10 +15,10 @@ Subject: [PATCH 02/34] Skip config check
  1 file changed, 10 insertions(+), 1 deletion(-)
 
 diff --git a/Makefile.in b/Makefile.in
-index d401787..c124ef6 100644
+index e10f3742..4bbfb736 100644
 --- a/Makefile.in
 +++ b/Makefile.in
-@@ -291,7 +291,16 @@ install-nokeys: $(CONFIGFILES) $(MANPAGES) $(TARGETS) install-files install-sysc
+@@ -302,7 +302,16 @@ install-nokeys: $(CONFIGFILES) $(MANPAGES) $(TARGETS) install-files install-sysc
  install-nosysconf: $(CONFIGFILES) $(MANPAGES) $(TARGETS) install-files
  
  check-config:
@@ -37,5 +37,5 @@ index d401787..c124ef6 100644
  install-files:
  	$(srcdir)/mkinstalldirs $(DESTDIR)$(bindir)
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/0003-PAM-Support.patch b/openssh/Patches/0002-PAM-Support.patch
similarity index 76%
rename from openssh/Patches/0003-PAM-Support.patch
rename to openssh/Patches/0002-PAM-Support.patch
index 3f7fbe5..fa6cf85 100644
--- a/openssh/Patches/0003-PAM-Support.patch
+++ b/openssh/Patches/0002-PAM-Support.patch
@@ -1,7 +1,7 @@
-From a77f4c6668feb9c991a7985425ce949c5f323f09 Mon Sep 17 00:00:00 2001
+From 0b9b897495b16fe4efeb8060a97c00bbbab28c0d Mon Sep 17 00:00:00 2001
 From: oracle <solaris@oracle.com>
 Date: Mon, 3 Aug 2015 14:34:19 -0700
-Subject: [PATCH 03/34] PAM Support
+Subject: [PATCH 02/34] PAM Support
 
 #
 # To comply to the Solaris PAM policy, the UsePAM option is changed to be
@@ -15,10 +15,10 @@ Subject: [PATCH 03/34] PAM Support
  1 file changed, 14 insertions(+)
 
 diff --git a/servconf.c b/servconf.c
-index b19d30e..c6f4bdd 100644
+index 795ddbab..409d4800 100644
 --- a/servconf.c
 +++ b/servconf.c
-@@ -199,7 +199,12 @@ fill_default_server_options(ServerOptions *options)
+@@ -194,7 +194,12 @@ fill_default_server_options(ServerOptions *options)
  
  	/* Portable-specific options */
  	if (options->use_pam == -1)
@@ -30,8 +30,8 @@ index b19d30e..c6f4bdd 100644
 +#endif
  
  	/* Standard Options */
- 	if (options->protocol == SSH_PROTO_UNKNOWN)
-@@ -1008,8 +1013,17 @@ process_server_config_line(ServerOptions *options, char *line,
+ 	if (options->num_host_key_files == 0) {
+@@ -998,8 +1003,17 @@ process_server_config_line(ServerOptions *options, char *line,
  	switch (opcode) {
  	/* Portable-specific options */
  	case sUsePAM:
@@ -50,5 +50,5 @@ index b19d30e..c6f4bdd 100644
  	/* Standard Options */
  	case sBadOption:
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/0003-lastlogin.patch b/openssh/Patches/0003-lastlogin.patch
new file mode 100644
index 0000000..8000e91
--- /dev/null
+++ b/openssh/Patches/0003-lastlogin.patch
@@ -0,0 +1,38 @@
+From c68ffbb72771d1c8c05f8e92f3d3bf448f2e800d Mon Sep 17 00:00:00 2001
+From: oracle <solaris@oracle.com>
+Date: Mon, 3 Aug 2015 14:34:41 -0700
+Subject: [PATCH 03/34] lastlogin
+
+*** old/servconf.c Wed Sep 17 02:54:26 2014
+---
+ sshd_config.5 | 7 ++++---
+ 1 file changed, 4 insertions(+), 3 deletions(-)
+
+diff --git a/sshd_config.5 b/sshd_config.5
+index 32b29d24..9eea74bd 100644
+--- a/sshd_config.5
++++ b/sshd_config.5
+@@ -1260,8 +1260,8 @@ Specifies whether
+ .Xr sshd 8
+ should print the date and time of the last user login when a user logs
+ in interactively.
+-The default is
+-.Cm yes .
++On Solaris this option is always ignored since pam_unix_session(5)
++reports the last login time.
+ .It Cm PrintMotd
+ Specifies whether
+ .Xr sshd 8
+@@ -1667,7 +1667,8 @@ This file should be writable by root only, but it is recommended
+ .El
+ .Sh SEE ALSO
+ .Xr sftp-server 8 ,
+-.Xr sshd 8
++.Xr sshd 8 ,
++.Xr pam_unix_session 5
+ .Sh AUTHORS
+ .An -nosplit
+ OpenSSH is a derivative of the original and free
+-- 
+2.11.0
+
diff --git a/openssh/Patches/0005-Reorganise-man-pages-into-Illumos-numbering-adjust-t.patch b/openssh/Patches/0004-Reorganise-man-pages-into-Illumos-numbering-adjust-t.patch
similarity index 85%
rename from openssh/Patches/0005-Reorganise-man-pages-into-Illumos-numbering-adjust-t.patch
rename to openssh/Patches/0004-Reorganise-man-pages-into-Illumos-numbering-adjust-t.patch
index 2a6c70d..d71af66 100644
--- a/openssh/Patches/0005-Reorganise-man-pages-into-Illumos-numbering-adjust-t.patch
+++ b/openssh/Patches/0004-Reorganise-man-pages-into-Illumos-numbering-adjust-t.patch
@@ -1,27 +1,34 @@
-From 77ff05d79cf5745f5e7d059498348fc047cfb5ea Mon Sep 17 00:00:00 2001
+From c8dca022760b47896046c397eafee93181de096f Mon Sep 17 00:00:00 2001
 From: oracle <solaris@oracle.com>
 Date: Mon, 3 Aug 2015 14:34:55 -0700
-Subject: [PATCH 05/34] Reorganise man pages into Illumos numbering, adjust
+Subject: [PATCH 04/34] Reorganise man pages into Illumos numbering, adjust
  text
 
 ---
- Makefile.in          |   22 +-
- moduli.4             |  127 ++++
- moduli.5             |  127 ----
- sftp-server.1m       |  170 +++++
- sftp-server.8        |  170 -----
- ssh-keygen.1         |    6 +-
- ssh-keysign.1m       |   93 +++
- ssh-keysign.8        |   93 ---
- ssh-pkcs11-helper.1m |   43 ++
- ssh-pkcs11-helper.8  |   43 --
- ssh_config.4         | 1801 ++++++++++++++++++++++++++++++++++++++++++++++++++
- ssh_config.5         | 1801 --------------------------------------------------
- sshd.1m              | 1004 ++++++++++++++++++++++++++++
- sshd.8               | 1004 ----------------------------
- sshd_config.4        | 1750 ++++++++++++++++++++++++++++++++++++++++++++++++
- sshd_config.5        | 1750 ------------------------------------------------
- 16 files changed, 5001 insertions(+), 5003 deletions(-)
+ Makefile.in           |   22 +-
+ contrib/ssh-copy-id.1 |    4 +-
+ moduli.4              |  127 ++++
+ moduli.5              |  127 ----
+ scp.1                 |    8 +-
+ sftp-server.1m        |  170 +++++
+ sftp-server.8         |  170 -----
+ sftp.1                |   14 +-
+ ssh-add.1             |    4 +-
+ ssh-agent.1           |    8 +-
+ ssh-keygen.1          |   20 +-
+ ssh-keyscan.1         |    2 +-
+ ssh-keysign.1m        |   93 +++
+ ssh-keysign.8         |   93 ---
+ ssh-pkcs11-helper.1m  |   43 ++
+ ssh-pkcs11-helper.8   |   43 --
+ ssh.1                 |   50 +-
+ ssh_config.4          | 1778 +++++++++++++++++++++++++++++++++++++++++++++++++
+ ssh_config.5          | 1778 -------------------------------------------------
+ sshd.1m               |  947 ++++++++++++++++++++++++++
+ sshd.8                |  947 --------------------------
+ sshd_config.4         | 1688 ++++++++++++++++++++++++++++++++++++++++++++++
+ sshd_config.5         | 1688 ----------------------------------------------
+ 23 files changed, 4911 insertions(+), 4913 deletions(-)
  create mode 100644 moduli.4
  delete mode 100644 moduli.5
  create mode 100644 sftp-server.1m
@@ -38,10 +45,10 @@ Subject: [PATCH 05/34] Reorganise man pages into Illumos numbering, adjust
  delete mode 100644 sshd_config.5
 
 diff --git a/Makefile.in b/Makefile.in
-index c124ef6..11e01ac 100644
+index 4bbfb736..6541b3bb 100644
 --- a/Makefile.in
 +++ b/Makefile.in
-@@ -112,8 +112,8 @@ SSHDOBJS=sshd.o auth-rhosts.o auth-passwd.o auth-rsa.o auth-rh-rsa.o \
+@@ -112,8 +112,8 @@ SSHDOBJS=sshd.o auth-rhosts.o auth-passwd.o \
  	sandbox-seccomp-filter.o sandbox-capsicum.o sandbox-pledge.o \
  	sandbox-solaris.o
  
@@ -52,7 +59,7 @@ index c124ef6..11e01ac 100644
  MANTYPE		= @MANTYPE@
  
  CONFIGFILES=sshd_config.out ssh_config.out moduli.out
-@@ -307,8 +307,8 @@ install-files:
+@@ -318,8 +318,8 @@ install-files:
  	$(srcdir)/mkinstalldirs $(DESTDIR)$(sbindir)
  	$(srcdir)/mkinstalldirs $(DESTDIR)$(mandir)
  	$(srcdir)/mkinstalldirs $(DESTDIR)$(mandir)/$(mansubdir)1
@@ -63,7 +70,7 @@ index c124ef6..11e01ac 100644
  	$(srcdir)/mkinstalldirs $(DESTDIR)$(libexecdir)
  	(umask 022 ; $(srcdir)/mkinstalldirs $(DESTDIR)$(PRIVSEP_PATH))
  	$(INSTALL) -m 0755 $(STRIP_OPT) ssh$(EXEEXT) $(DESTDIR)$(bindir)/ssh$(EXEEXT)
-@@ -328,14 +328,14 @@ install-files:
+@@ -339,14 +339,14 @@ install-files:
  	$(INSTALL) -m 644 ssh-agent.1.out $(DESTDIR)$(mandir)/$(mansubdir)1/ssh-agent.1
  	$(INSTALL) -m 644 ssh-keygen.1.out $(DESTDIR)$(mandir)/$(mansubdir)1/ssh-keygen.1
  	$(INSTALL) -m 644 ssh-keyscan.1.out $(DESTDIR)$(mandir)/$(mansubdir)1/ssh-keyscan.1
@@ -85,9 +92,28 @@ index c124ef6..11e01ac 100644
  
  install-sysconf:
  	if [ ! -d $(DESTDIR)$(sysconfdir) ]; then \
+diff --git a/contrib/ssh-copy-id.1 b/contrib/ssh-copy-id.1
+index 8850cced..270e13ef 100644
+--- a/contrib/ssh-copy-id.1
++++ b/contrib/ssh-copy-id.1
+@@ -95,7 +95,7 @@ options, respectively.
+ Rather than specifying these as command line options, it is often better to use (per-host) settings in
+ .Xr ssh 1 Ns 's
+ configuration file:
+-.Xr ssh_config 5 .
++.Xr ssh_config 4 .
+ .El
+ .Pp
+ Default behaviour without
+@@ -188,4 +188,4 @@ option, rather than
+ .Sh "SEE ALSO"
+ .Xr ssh 1 ,
+ .Xr ssh-agent 1 ,
+-.Xr sshd 8
++.Xr sshd 1M
 diff --git a/moduli.4 b/moduli.4
 new file mode 100644
-index 0000000..f87556b
+index 00000000..f87556be
 --- /dev/null
 +++ b/moduli.4
 @@ -0,0 +1,127 @@
@@ -220,7 +246,7 @@ index 0000000..f87556b
 +.Re
 diff --git a/moduli.5 b/moduli.5
 deleted file mode 100644
-index ef0de08..0000000
+index ef0de085..00000000
 --- a/moduli.5
 +++ /dev/null
 @@ -1,127 +0,0 @@
@@ -351,9 +377,40 @@ index ef0de08..0000000
 -.%T Diffie-Hellman Group Exchange for the Secure Shell (SSH) Transport Layer Protocol
 -.%D 2006
 -.Re
+diff --git a/scp.1 b/scp.1
+index 4ae87775..515fa400 100644
+--- a/scp.1
++++ b/scp.1
+@@ -116,13 +116,13 @@ Limits the used bandwidth, specified in Kbit/s.
+ Can be used to pass options to
+ .Nm ssh
+ in the format used in
+-.Xr ssh_config 5 .
++.Xr ssh_config 4 .
+ This is useful for specifying options
+ for which there is no separate
+ .Nm scp
+ command-line flag.
+ For full details of the options listed below, and their possible values, see
+-.Xr ssh_config 5 .
++.Xr ssh_config 4 .
+ .Pp
+ .Bl -tag -width Ds -offset indent -compact
+ .It AddressFamily
+@@ -233,8 +233,8 @@ debugging connection, authentication, and configuration problems.
+ .Xr ssh-add 1 ,
+ .Xr ssh-agent 1 ,
+ .Xr ssh-keygen 1 ,
+-.Xr ssh_config 5 ,
+-.Xr sshd 8
++.Xr ssh_config 4 ,
++.Xr sshd 1M
+ .Sh HISTORY
+ .Nm
+ is based on the rcp program in
 diff --git a/sftp-server.1m b/sftp-server.1m
 new file mode 100644
-index 0000000..42354c2
+index 00000000..42354c27
 --- /dev/null
 +++ b/sftp-server.1m
 @@ -0,0 +1,170 @@
@@ -529,7 +586,7 @@ index 0000000..42354c2
 +.An Markus Friedl Aq Mt markus@openbsd.org
 diff --git a/sftp-server.8 b/sftp-server.8
 deleted file mode 100644
-index c117398..0000000
+index c117398e..00000000
 --- a/sftp-server.8
 +++ /dev/null
 @@ -1,170 +0,0 @@
@@ -703,8 +760,123 @@ index c117398..0000000
 -.Ox 2.8 .
 -.Sh AUTHORS
 -.An Markus Friedl Aq Mt markus@openbsd.org
+diff --git a/sftp.1 b/sftp.1
+index fbdd00a1..a281ebcd 100644
+--- a/sftp.1
++++ b/sftp.1
+@@ -85,7 +85,7 @@ The final usage format allows for automated sessions using the
+ option.
+ In such cases, it is necessary to configure non-interactive authentication
+ to obviate the need to enter a password at connection time (see
+-.Xr sshd 8
++.Xr sshd 1M
+ and
+ .Xr ssh-keygen 1
+ for details).
+@@ -179,7 +179,7 @@ Limits the used bandwidth, specified in Kbit/s.
+ Can be used to pass options to
+ .Nm ssh
+ in the format used in
+-.Xr ssh_config 5 .
++.Xr ssh_config 4 .
+ This is useful for specifying options
+ for which there is no separate
+ .Nm sftp
+@@ -187,7 +187,7 @@ command-line flag.
+ For example, to specify an alternate port use:
+ .Ic sftp -oPort=24 .
+ For full details of the options listed below, and their possible values, see
+-.Xr ssh_config 5 .
++.Xr ssh_config 4 .
+ .Pp
+ .Bl -tag -width Ds -offset indent -compact
+ .It AddressFamily
+@@ -285,7 +285,7 @@ on the remote host.
+ A path is useful for using
+ .Nm
+ over protocol version 1, or when the remote
+-.Xr sshd 8
++.Xr sshd 1M
+ does not have an sftp subsystem configured.
+ .It Fl v
+ Raise logging level.
+@@ -615,9 +615,9 @@ Synonym for help.
+ .Xr ssh-add 1 ,
+ .Xr ssh-keygen 1 ,
+ .Xr glob 3 ,
+-.Xr ssh_config 5 ,
+-.Xr sftp-server 8 ,
+-.Xr sshd 8
++.Xr ssh_config 4 ,
++.Xr sftp-server 1M ,
++.Xr sshd 1M
+ .Rs
+ .%A T. Ylonen
+ .%A S. Lehtinen
+diff --git a/ssh-add.1 b/ssh-add.1
+index f02b595d..b4d7c8f8 100644
+--- a/ssh-add.1
++++ b/ssh-add.1
+@@ -134,7 +134,7 @@ Add keys provided by the PKCS#11 shared library
+ Set a maximum lifetime when adding identities to an agent.
+ The lifetime may be specified in seconds or in a time format
+ specified in
+-.Xr sshd_config 5 .
++.Xr sshd_config 4 .
+ .It Fl X
+ Unlock the agent.
+ .It Fl x
+@@ -200,7 +200,7 @@ is unable to contact the authentication agent.
+ .Xr ssh-agent 1 ,
+ .Xr ssh-askpass 1 ,
+ .Xr ssh-keygen 1 ,
+-.Xr sshd 8
++.Xr sshd 1M
+ .Sh AUTHORS
+ OpenSSH is a derivative of the original and free
+ ssh 1.2.12 release by Tatu Ylonen.
+diff --git a/ssh-agent.1 b/ssh-agent.1
+index 83b2b41c..d2cad7e8 100644
+--- a/ssh-agent.1
++++ b/ssh-agent.1
+@@ -71,7 +71,7 @@ Keys are added using
+ (see
+ .Cm AddKeysToAgent
+ in
+-.Xr ssh_config 5
++.Xr ssh_config 4
+ for details)
+ or
+ .Xr ssh-add 1 .
+@@ -132,7 +132,7 @@ The default is to allow loading PKCS#11 libraries from
+ .Dq /usr/lib/*,/usr/local/lib/* .
+ PKCS#11 libraries that do not match the whitelist will be refused.
+ See PATTERNS in
+-.Xr ssh_config 5
++.Xr ssh_config 4
+ for a description of pattern-list syntax.
+ .It Fl s
+ Generate Bourne shell commands on
+@@ -143,7 +143,7 @@ does not look like it's a csh style of shell.
+ .It Fl t Ar life
+ Set a default value for the maximum lifetime of identities added to the agent.
+ The lifetime may be specified in seconds or in a time format specified in
+-.Xr sshd_config 5 .
++.Xr sshd_config 4 .
+ A lifetime specified for an identity with
+ .Xr ssh-add 1
+ overrides this value.
+@@ -218,7 +218,7 @@ The sockets should get automatically removed when the agent exits.
+ .Xr ssh 1 ,
+ .Xr ssh-add 1 ,
+ .Xr ssh-keygen 1 ,
+-.Xr sshd 8
++.Xr sshd 1M
+ .Sh AUTHORS
+ .An -nosplit
+ OpenSSH is a derivative of the original and free ssh 1.2.12 release by
 diff --git a/ssh-keygen.1 b/ssh-keygen.1
-index 37a4fc2..9e40bf2 100644
+index ce2213c7..f0824509 100644
 --- a/ssh-keygen.1
 +++ b/ssh-keygen.1
 @@ -178,9 +178,7 @@ key in
@@ -727,9 +899,76 @@ index 37a4fc2..9e40bf2 100644
  to generate new host keys.
  .It Fl a Ar rounds
  When saving a new-format private key (i.e. an ed25519 key or any SSH protocol
+@@ -449,7 +447,7 @@ Disable PTY allocation (permitted by default).
+ Disable execution of
+ .Pa ~/.ssh/rc
+ by
+-.Xr sshd 8
++.Xr sshd 1M
+ (permitted by default).
+ .It Ic no-x11-forwarding
+ Disable X11 forwarding (permitted by default).
+@@ -465,7 +463,7 @@ Allows PTY allocation.
+ Allows execution of
+ .Pa ~/.ssh/rc
+ by
+-.Xr sshd 8 .
++.Xr sshd 1M .
+ .It Ic permit-x11-forwarding
+ Allows X11 forwarding.
+ .It Ic source-address Ns = Ns Ar address_list
+@@ -556,7 +554,7 @@ The start time may be specified as a date in YYYYMMDD format, a time
+ in YYYYMMDDHHMMSS format or a relative time (to the current time) consisting
+ of a minus sign followed by a relative time in the format described in the
+ TIME FORMATS section of
+-.Xr sshd_config 5 .
++.Xr sshd_config 4 .
+ The end time may be specified as a YYYYMMDD date, a YYYYMMDDHHMMSS time or
+ a relative time starting with a plus character.
+ .Pp
+@@ -722,7 +720,7 @@ Epoch to the distant future.
+ .Pp
+ For certificates to be used for user or host authentication, the CA
+ public key must be trusted by
+-.Xr sshd 8
++.Xr sshd 1M
+ or
+ .Xr ssh 1 .
+ Please refer to those manual pages for details.
+@@ -846,14 +844,14 @@ There is no need to keep the contents of this file secret.
+ .It Pa /etc/moduli
+ Contains Diffie-Hellman groups used for DH-GEX.
+ The file format is described in
+-.Xr moduli 5 .
++.Xr moduli 4 .
+ .El
+ .Sh SEE ALSO
+ .Xr ssh 1 ,
+ .Xr ssh-add 1 ,
+ .Xr ssh-agent 1 ,
+-.Xr moduli 5 ,
+-.Xr sshd 8
++.Xr moduli 4 ,
++.Xr sshd 1M
+ .Rs
+ .%R RFC 4716
+ .%T "The Secure Shell (SSH) Public Key File Format"
+diff --git a/ssh-keyscan.1 b/ssh-keyscan.1
+index d29d9d90..17a69770 100644
+--- a/ssh-keyscan.1
++++ b/ssh-keyscan.1
+@@ -166,7 +166,7 @@ $ ssh-keyscan -t rsa,dsa,ecdsa,ed25519 -f ssh_hosts | \e
+ .Ed
+ .Sh SEE ALSO
+ .Xr ssh 1 ,
+-.Xr sshd 8
++.Xr sshd 1M
+ .Sh AUTHORS
+ .An -nosplit
+ .An David Mazieres Aq Mt dm@lcs.mit.edu
 diff --git a/ssh-keysign.1m b/ssh-keysign.1m
 new file mode 100644
-index 0000000..9ce1e61
+index 00000000..9ce1e619
 --- /dev/null
 +++ b/ssh-keysign.1m
 @@ -0,0 +1,93 @@
@@ -828,7 +1067,7 @@ index 0000000..9ce1e61
 +.An Markus Friedl Aq Mt markus@openbsd.org
 diff --git a/ssh-keysign.8 b/ssh-keysign.8
 deleted file mode 100644
-index 19b0dbc..0000000
+index 19b0dbc5..00000000
 --- a/ssh-keysign.8
 +++ /dev/null
 @@ -1,93 +0,0 @@
@@ -927,7 +1166,7 @@ index 19b0dbc..0000000
 -.An Markus Friedl Aq Mt markus@openbsd.org
 diff --git a/ssh-pkcs11-helper.1m b/ssh-pkcs11-helper.1m
 new file mode 100644
-index 0000000..646b1fa
+index 00000000..646b1fab
 --- /dev/null
 +++ b/ssh-pkcs11-helper.1m
 @@ -0,0 +1,43 @@
@@ -976,7 +1215,7 @@ index 0000000..646b1fa
 +.An Markus Friedl Aq Mt markus@openbsd.org
 diff --git a/ssh-pkcs11-helper.8 b/ssh-pkcs11-helper.8
 deleted file mode 100644
-index 3728c4e..0000000
+index 3728c4e4..00000000
 --- a/ssh-pkcs11-helper.8
 +++ /dev/null
 @@ -1,43 +0,0 @@
@@ -1023,12 +1262,226 @@ index 3728c4e..0000000
 -.Ox 4.7 .
 -.Sh AUTHORS
 -.An Markus Friedl Aq Mt markus@openbsd.org
+diff --git a/ssh.1 b/ssh.1
+index 4011c65a..df81563e 100644
+--- a/ssh.1
++++ b/ssh.1
+@@ -173,7 +173,7 @@ listed in order of preference.
+ See the
+ .Cm Ciphers
+ keyword in
+-.Xr ssh_config 5
++.Xr ssh_config 4
+ for more information.
+ .Pp
+ .It Fl D Xo
+@@ -417,7 +417,7 @@ mode with confirmation required before slave connections are accepted.
+ Refer to the description of
+ .Cm ControlMaster
+ in
+-.Xr ssh_config 5
++.Xr ssh_config 4
+ for details.
+ .Pp
+ .It Fl m Ar mac_spec
+@@ -476,7 +476,7 @@ Can be used to give options in the format used in the configuration file.
+ This is useful for specifying options for which there is no separate
+ command-line flag.
+ For full details of the options listed below, and their possible values, see
+-.Xr ssh_config 5 .
++.Xr ssh_config 4 .
+ .Pp
+ .Bl -tag -width Ds -offset indent -compact
+ .It AddKeysToAgent
+@@ -657,7 +657,7 @@ Specifying a remote
+ will only succeed if the server's
+ .Cm GatewayPorts
+ option is enabled (see
+-.Xr sshd_config 5 ) .
++.Xr sshd_config 4 ) .
+ .Pp
+ If the
+ .Ar port
+@@ -679,7 +679,7 @@ Refer to the description of
+ and
+ .Cm ControlMaster
+ in
+-.Xr ssh_config 5
++.Xr ssh_config 4
+ for details.
+ .Pp
+ .It Fl s
+@@ -758,7 +758,7 @@ See also the
+ and
+ .Cm TunnelDevice
+ directives in
+-.Xr ssh_config 5 .
++.Xr ssh_config 4 .
+ If the
+ .Cm Tunnel
+ directive is unset, it is set to the default tunnel mode, which is
+@@ -782,7 +782,7 @@ Please refer to the
+ option and the
+ .Cm ForwardX11Trusted
+ directive in
+-.Xr ssh_config 5
++.Xr ssh_config 4
+ for more information.
+ .Pp
+ .It Fl x
+@@ -804,14 +804,14 @@ By default this information is sent to stderr.
+ may additionally obtain configuration data from
+ a per-user configuration file and a system-wide configuration file.
+ The file format and configuration options are described in
+-.Xr ssh_config 5 .
++.Xr ssh_config 4 .
+ .Sh AUTHENTICATION
+ The OpenSSH SSH client supports SSH protocols 1 and 2.
+ The default is to use protocol 2 only,
+ though this can be changed via the
+ .Cm Protocol
+ option in
+-.Xr ssh_config 5
++.Xr ssh_config 4
+ or the
+ .Fl 1
+ and
+@@ -946,7 +946,7 @@ See
+ and (optionally) the
+ .Cm AddKeysToAgent
+ directive in
+-.Xr ssh_config 5
++.Xr ssh_config 4
+ for more information.
+ .Pp
+ Challenge-response authentication works as follows:
+@@ -1078,7 +1078,7 @@ for dynamic port-forwardings.
+ allows the user to execute a local command if the
+ .Ic PermitLocalCommand
+ option is enabled in
+-.Xr ssh_config 5 .
++.Xr ssh_config 4 .
+ Basic help is available, using the
+ .Fl h
+ option.
+@@ -1280,7 +1280,7 @@ Are you sure you want to continue connecting (yes/no)?
+ See the
+ .Cm VerifyHostKeyDNS
+ option in
+-.Xr ssh_config 5
++.Xr ssh_config 4
+ for more information.
+ .Sh SSH-BASED VIRTUAL PRIVATE NETWORKS
+ .Nm
+@@ -1290,7 +1290,7 @@ using the
+ network pseudo-device,
+ allowing two networks to be joined securely.
+ The
+-.Xr sshd_config 5
++.Xr sshd_config 4
+ configuration option
+ .Cm PermitTunnel
+ controls whether the server supports this,
+@@ -1440,7 +1440,7 @@ change their environment.
+ For more information, see the
+ .Cm PermitUserEnvironment
+ option in
+-.Xr sshd_config 5 .
++.Xr sshd_config 4 .
+ .Sh FILES
+ .Bl -tag -width Ds -compact
+ .It Pa ~/.rhosts
+@@ -1448,7 +1448,7 @@ This file is used for host-based authentication (see above).
+ On some machines this file may need to be
+ world-readable if the user's home directory is on an NFS partition,
+ because
+-.Xr sshd 8
++.Xr sshd 1M
+ reads it as root.
+ Additionally, this file must be owned by the user,
+ and must not have write permissions for anyone else.
+@@ -1473,7 +1473,7 @@ and not accessible by others.
+ Lists the public keys (DSA, ECDSA, Ed25519, RSA)
+ that can be used for logging in as this user.
+ The format of this file is described in the
+-.Xr sshd 8
++.Xr sshd 1M
+ manual page.
+ This file is not highly sensitive, but the recommended
+ permissions are read/write for the user, and not accessible by others.
+@@ -1481,7 +1481,7 @@ permissions are read/write for the user, and not accessible by others.
+ .It Pa ~/.ssh/config
+ This is the per-user configuration file.
+ The file format and configuration options are described in
+-.Xr ssh_config 5 .
++.Xr ssh_config 4 .
+ Because of the potential for abuse, this file must have strict permissions:
+ read/write for the user, and not writable by others.
+ .Pp
+@@ -1518,7 +1518,7 @@ sensitive and can (but need not) be readable by anyone.
+ Contains a list of host keys for all hosts the user has logged into
+ that are not already in the systemwide list of known host keys.
+ See
+-.Xr sshd 8
++.Xr sshd 1M
+ for further details of the format of this file.
+ .Pp
+ .It Pa ~/.ssh/rc
+@@ -1527,7 +1527,7 @@ Commands in this file are executed by
+ when the user logs in, just before the user's shell (or command) is
+ started.
+ See the
+-.Xr sshd 8
++.Xr sshd 1M
+ manual page for more information.
+ .Pp
+ .It Pa /etc/hosts.equiv
+@@ -1543,7 +1543,7 @@ rlogin/rsh.
+ .It Pa /etc/ssh/ssh_config
+ Systemwide configuration file.
+ The file format and configuration options are described in
+-.Xr ssh_config 5 .
++.Xr ssh_config 4 .
+ .Pp
+ .It Pa /etc/ssh/ssh_host_key
+ .It Pa /etc/ssh/ssh_host_dsa_key
+@@ -1560,7 +1560,7 @@ system administrator to contain the public host keys of all machines in the
+ organization.
+ It should be world-readable.
+ See
+-.Xr sshd 8
++.Xr sshd 1M
+ for further details of the format of this file.
+ .Pp
+ .It Pa /etc/ssh/sshrc
+@@ -1568,7 +1568,7 @@ Commands in this file are executed by
+ .Nm
+ when the user logs in, just before the user's shell (or command) is started.
+ See the
+-.Xr sshd 8
++.Xr sshd 1M
+ manual page for more information.
+ .El
+ .Sh EXIT STATUS
+@@ -1583,9 +1583,9 @@ if an error occurred.
+ .Xr ssh-keygen 1 ,
+ .Xr ssh-keyscan 1 ,
+ .Xr tun 4 ,
+-.Xr ssh_config 5 ,
+-.Xr ssh-keysign 8 ,
+-.Xr sshd 8
++.Xr ssh_config 4 ,
++.Xr ssh-keysign 1M ,
++.Xr sshd 1M
+ .Sh STANDARDS
+ .Rs
+ .%A S. Lehtinen
 diff --git a/ssh_config.4 b/ssh_config.4
 new file mode 100644
-index 0000000..e190f6d
+index 00000000..ff5dc74b
 --- /dev/null
 +++ b/ssh_config.4
-@@ -0,0 +1,1801 @@
+@@ -0,0 +1,1778 @@
 +.\"
 +.\" Author: Tatu Ylonen <ylo@cs.hut.fi>
 +.\" Copyright (c) 1995 Tatu Ylonen <ylo@cs.hut.fi>, Espoo, Finland
@@ -1064,8 +1517,8 @@ index 0000000..e190f6d
 +.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 +.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 +.\"
-+.\" $OpenBSD: ssh_config.5,v 1.228 2016/02/20 23:01:46 sobrado Exp $
-+.Dd $Mdocdate: February 20 2016 $
++.\" $OpenBSD: ssh_config.5,v 1.240 2016/10/15 19:56:25 jmc Exp $
++.Dd $Mdocdate: October 15 2016 $
 +.Dt SSH_CONFIG 4
 +.Os
 +.Sh NAME
@@ -1093,25 +1546,25 @@ index 0000000..e190f6d
 +For each parameter, the first obtained value
 +will be used.
 +The configuration files contain sections separated by
-+.Dq Host
++.Cm Host
 +specifications, and that section is only applied for hosts that
 +match one of the patterns given in the specification.
 +The matched host name is usually the one given on the command line
 +(see the
 +.Cm CanonicalizeHostname
-+option for exceptions.)
++option for exceptions).
 +.Pp
 +Since the first obtained value for each parameter is used, more
 +host-specific declarations should be given near the beginning of the
 +file, and general defaults at the end.
 +.Pp
-+The configuration file has the following format:
-+.Pp
-+Empty lines and lines starting with
++The file contains keyword-argument pairs, one per line.
++Lines starting with
 +.Ql #
-+are comments.
-+Otherwise a line is of the format
-+.Dq keyword arguments .
++and empty lines are interpreted as comments.
++Arguments may optionally be enclosed in double quotes
++.Pq \&"
++in order to represent arguments containing spaces.
 +Configuration options may be separated by whitespace or
 +optional whitespace and exactly one
 +.Ql = ;
@@ -1123,9 +1576,6 @@ index 0000000..e190f6d
 +.Nm sftp
 +.Fl o
 +option.
-+Arguments may optionally be enclosed in double quotes
-+.Pq \&"
-+in order to represent arguments containing spaces.
 +.Pp
 +The possible
 +keywords and their meanings are as follows (note that
@@ -1148,7 +1598,7 @@ index 0000000..e190f6d
 +argument given on the command line
 +(see the
 +.Cm CanonicalizeHostname
-+option for exceptions.)
++keyword for exceptions).
 +.Pp
 +A pattern entry may be negated by prefixing it with an exclamation mark
 +.Pq Sq !\& .
@@ -1208,24 +1658,11 @@ index 0000000..e190f6d
 +keyword executes the specified command under the user's shell.
 +If the command returns a zero exit status then the condition is considered true.
 +Commands containing whitespace characters must be quoted.
-+The following character sequences in the command will be expanded prior to
-+execution:
-+.Ql %L
-+will be substituted by the first component of the local host name,
-+.Ql %l
-+will be substituted by the local host name (including any domain name),
-+.Ql %h
-+will be substituted by the target host name,
-+.Ql %n
-+will be substituted by the original target host name
-+specified on the command-line,
-+.Ql %p
-+the destination port,
-+.Ql %r
-+by the remote login username, and
-+.Ql %u
-+by the username of the user running
-+.Xr ssh 1 .
++Arguments to
++.Cm exec
++accept the tokens described in the
++.Sx TOKENS
++section.
 +.Pp
 +The other keywords' criteria must be single entries or comma-separated
 +lists and may use the wildcard and negation operators described in the
@@ -1256,57 +1693,54 @@ index 0000000..e190f6d
 +Specifies whether keys should be automatically added to a running
 +.Xr ssh-agent 1 .
 +If this option is set to
-+.Dq yes
++.Cm yes
 +and a key is loaded from a file, the key and its passphrase are added to
 +the agent with the default lifetime, as if by
 +.Xr ssh-add 1 .
 +If this option is set to
-+.Dq ask ,
-+.Nm ssh
++.Cm ask ,
++.Xr ssh 1
 +will require confirmation using the
 +.Ev SSH_ASKPASS
 +program before adding a key (see
 +.Xr ssh-add 1
 +for details).
 +If this option is set to
-+.Dq confirm ,
++.Cm confirm ,
 +each use of the key must be confirmed, as if the
 +.Fl c
 +option was specified to
 +.Xr ssh-add 1 .
 +If this option is set to
-+.Dq no ,
++.Cm no ,
 +no keys are added to the agent.
 +The argument must be
-+.Dq yes ,
-+.Dq confirm ,
-+.Dq ask ,
++.Cm yes ,
++.Cm confirm ,
++.Cm ask ,
 +or
-+.Dq no .
-+The default is
-+.Dq no .
++.Cm no
++(the default).
 +.It Cm AddressFamily
 +Specifies which address family to use when connecting.
 +Valid arguments are
-+.Dq any ,
-+.Dq inet
++.Cm any
++(the default),
++.Cm inet
 +(use IPv4 only), or
-+.Dq inet6
++.Cm inet6
 +(use IPv6 only).
-+The default is
-+.Dq any .
 +.It Cm BatchMode
 +If set to
-+.Dq yes ,
++.Cm yes ,
 +passphrase/password querying will be disabled.
 +This option is useful in scripts and other batch jobs where no user
 +is present to supply the password.
 +The argument must be
-+.Dq yes
++.Cm yes
 +or
-+.Dq no .
-+The default is
-+.Dq no .
++.Cm no
++(the default).
 +.It Cm BindAddress
 +Use the specified address on the local machine as the source address of
 +the connection.
@@ -1314,7 +1748,7 @@ index 0000000..e190f6d
 +Note that this option does not work if
 +.Cm UsePrivilegedPort
 +is set to
-+.Dq yes .
++.Cm yes .
 +.It Cm CanonicalDomains
 +When
 +.Cm CanonicalizeHostname
@@ -1323,11 +1757,11 @@ index 0000000..e190f6d
 +.It Cm CanonicalizeFallbackLocal
 +Specifies whether to fail with an error when hostname canonicalization fails.
 +The default,
-+.Dq yes ,
++.Cm yes ,
 +will attempt to look up the unqualified hostname using the system resolver's
 +search rules.
 +A value of
-+.Dq no
++.Cm no
 +will cause
 +.Xr ssh 1
 +to fail instantly if
@@ -1338,11 +1772,11 @@ index 0000000..e190f6d
 +.It Cm CanonicalizeHostname
 +Controls whether explicit hostname canonicalization is performed.
 +The default,
-+.Dq no ,
++.Cm no ,
 +is not to perform any name rewriting and let the system resolver handle all
 +hostname lookups.
 +If set to
-+.Dq yes
++.Cm yes
 +then, for connections that do not use a
 +.Cm ProxyCommand ,
 +.Xr ssh 1
@@ -1355,7 +1789,7 @@ index 0000000..e190f6d
 +If
 +.Cm CanonicalizeHostname
 +is set to
-+.Dq always ,
++.Cm always ,
 +then canonicalization is applied to proxied connections too.
 +.Pp
 +If this option is enabled, then the configuration files are processed
@@ -1367,8 +1801,7 @@ index 0000000..e190f6d
 +.It Cm CanonicalizeMaxDots
 +Specifies the maximum number of dot characters in a hostname before
 +canonicalization is disabled.
-+The default,
-+.Dq 1 ,
++The default, 1,
 +allows a single dot (i.e. hostname.subdomain).
 +.It Cm CanonicalizePermittedCNAMEs
 +Specifies rules to determine whether CNAMEs should be followed when
@@ -1383,13 +1816,13 @@ index 0000000..e190f6d
 +is a pattern-list of domains that they may resolve to.
 +.Pp
 +For example,
-+.Dq *.a.example.com:*.b.example.com,*.c.example.com
++.Qq *.a.example.com:*.b.example.com,*.c.example.com
 +will allow hostnames matching
-+.Dq *.a.example.com
++.Qq *.a.example.com
 +to be canonicalized to names in the
-+.Dq *.b.example.com
++.Qq *.b.example.com
 +or
-+.Dq *.c.example.com
++.Qq *.c.example.com
 +domains.
 +.It Cm CertificateFile
 +Specifies a file from which the user's certificate is read.
@@ -1406,19 +1839,12 @@ index 0000000..e190f6d
 +or via a
 +.Cm PKCS11Provider .
 +.Pp
-+The file name may use the tilde
-+syntax to refer to a user's home directory or one of the following
-+escape characters:
-+.Ql %d
-+(local user's home directory),
-+.Ql %u
-+(local user name),
-+.Ql %l
-+(local host name),
-+.Ql %h
-+(remote host name) or
-+.Ql %r
-+(remote user name).
++Arguments to
++.Cm CertificateFile
++may use the tilde syntax to refer to a user's home directory
++or the tokens described in the
++.Sx TOKENS
++section.
 +.Pp
 +It is possible to have multiple certificate files specified in
 +configuration files; these certificates will be tried in sequence.
@@ -1429,47 +1855,42 @@ index 0000000..e190f6d
 +.It Cm ChallengeResponseAuthentication
 +Specifies whether to use challenge-response authentication.
 +The argument to this keyword must be
-+.Dq yes
++.Cm yes
++(the default)
 +or
-+.Dq no .
-+The default is
-+.Dq yes .
++.Cm no .
 +.It Cm CheckHostIP
-+If this flag is set to
-+.Dq yes ,
++If set to
++.Cm yes
++(the default),
 +.Xr ssh 1
 +will additionally check the host IP address in the
 +.Pa known_hosts
 +file.
-+This allows ssh to detect if a host key changed due to DNS spoofing
++This allows it to detect if a host key changed due to DNS spoofing
 +and will add addresses of destination hosts to
 +.Pa ~/.ssh/known_hosts
 +in the process, regardless of the setting of
 +.Cm StrictHostKeyChecking .
 +If the option is set to
-+.Dq no ,
++.Cm no ,
 +the check will not be executed.
-+The default is
-+.Dq yes .
 +.It Cm Cipher
 +Specifies the cipher to use for encrypting the session
 +in protocol version 1.
 +Currently,
-+.Dq blowfish ,
-+.Dq 3des ,
++.Cm blowfish ,
++.Cm 3des
++(the default),
 +and
-+.Dq des
-+are supported.
-+.Ar des
++.Cm des
++are supported,
++though
++.Cm des
 +is only supported in the
 +.Xr ssh 1
-+client for interoperability with legacy protocol 1 implementations
-+that do not support the
-+.Ar 3des
-+cipher.
-+Its use is strongly discouraged due to cryptographic weaknesses.
-+The default is
-+.Dq 3des .
++client for interoperability with legacy protocol 1 implementations;
++its use is strongly discouraged due to cryptographic weaknesses.
 +.It Cm Ciphers
 +Specifies the ciphers allowed for protocol version 2
 +in order of preference.
@@ -1480,54 +1901,34 @@ index 0000000..e190f6d
 +instead of replacing them.
 +.Pp
 +The supported ciphers are:
-+.Pp
-+.Bl -item -compact -offset indent
-+.It
++.Bd -literal -offset indent
 +3des-cbc
-+.It
 +aes128-cbc
-+.It
 +aes192-cbc
-+.It
 +aes256-cbc
-+.It
 +aes128-ctr
-+.It
 +aes192-ctr
-+.It
 +aes256-ctr
-+.It
 +aes128-gcm@openssh.com
-+.It
 +aes256-gcm@openssh.com
-+.It
 +arcfour
-+.It
 +arcfour128
-+.It
 +arcfour256
-+.It
 +blowfish-cbc
-+.It
 +cast128-cbc
-+.It
 +chacha20-poly1305@openssh.com
-+.El
++.Ed
 +.Pp
 +The default is:
 +.Bd -literal -offset indent
 +chacha20-poly1305@openssh.com,
 +aes128-ctr,aes192-ctr,aes256-ctr,
 +aes128-gcm@openssh.com,aes256-gcm@openssh.com,
-+aes128-cbc,aes192-cbc,aes256-cbc,3des-cbc
++aes128-cbc,aes192-cbc,aes256-cbc
 +.Ed
 +.Pp
-+The list of available ciphers may also be obtained using the
-+.Fl Q
-+option of
-+.Xr ssh 1
-+with an argument of
-+.Dq cipher .
++The list of available ciphers may also be obtained using
++.Qq ssh -Q cipher .
 +.It Cm ClearAllForwardings
 +Specifies that all local, remote, and dynamic port forwardings
 +specified in the configuration files or on the command line be
@@ -1540,19 +1941,17 @@ index 0000000..e190f6d
 +and
 +.Xr sftp 1 .
 +The argument must be
-+.Dq yes
++.Cm yes
 +or
-+.Dq no .
-+The default is
-+.Dq no .
++.Cm no
++(the default).
 +.It Cm Compression
 +Specifies whether to use compression.
 +The argument must be
-+.Dq yes
++.Cm yes
 +or
-+.Dq no .
-+The default is
-+.Dq no .
++.Cm no
++(the default).
 +.It Cm CompressionLevel
 +Specifies the compression level to use if compression is enabled.
 +The argument must be an integer from 1 (fast) to 9 (slow, best).
@@ -1573,7 +1972,7 @@ index 0000000..e190f6d
 +.It Cm ControlMaster
 +Enables the sharing of multiple sessions over a single network connection.
 +When set to
-+.Dq yes ,
++.Cm yes ,
 +.Xr ssh 1
 +will listen for connections on a control socket specified using the
 +.Cm ControlPath
@@ -1583,21 +1982,23 @@ index 0000000..e190f6d
 +with
 +.Cm ControlMaster
 +set to
-+.Dq no
++.Cm no
 +(the default).
 +These sessions will try to reuse the master instance's network connection
 +rather than initiating new ones, but will fall back to connecting normally
 +if the control socket does not exist, or is not listening.
 +.Pp
 +Setting this to
-+.Dq ask
-+will cause ssh
++.Cm ask
++will cause
++.Xr ssh 1
 +to listen for control connections, but require confirmation using
 +.Xr ssh-askpass 1 .
 +If the
 +.Cm ControlPath
 +cannot be opened,
-+ssh will continue without connecting to a master instance.
++.Xr ssh 1
++will continue without connecting to a master instance.
 +.Pp
 +X11 and
 +.Xr ssh-agent 1
@@ -1609,41 +2010,25 @@ index 0000000..e190f6d
 +master connection but fall back to creating a new one if one does not already
 +exist.
 +These options are:
-+.Dq auto
++.Cm auto
 +and
-+.Dq autoask .
++.Cm autoask .
 +The latter requires confirmation like the
-+.Dq ask
++.Cm ask
 +option.
 +.It Cm ControlPath
 +Specify the path to the control socket used for connection sharing as described
 +in the
 +.Cm ControlMaster
 +section above or the string
-+.Dq none
++.Cm none
 +to disable connection sharing.
-+In the path,
-+.Ql %L
-+will be substituted by the first component of the local host name,
-+.Ql %l
-+will be substituted by the local host name (including any domain name),
-+.Ql %h
-+will be substituted by the target host name,
-+.Ql %n
-+will be substituted by the original target host name
-+specified on the command line,
-+.Ql %p
-+the destination port,
-+.Ql %r
-+by the remote login username,
-+.Ql %u
-+by the username and
-+.Ql %i
-+by the numeric user ID (uid) of the user running
-+.Xr ssh 1 ,
-+and
-+.Ql \&%C
-+by a hash of the concatenation: %l%h%p%r.
++Arguments to
++.Cm ControlPath
++may use the tilde syntax to refer to a user's home directory
++or the tokens described in the
++.Sx TOKENS
++section.
 +It is recommended that any
 +.Cm ControlPath
 +used for opportunistic connection sharing include
@@ -1657,18 +2042,15 @@ index 0000000..e190f6d
 +in the background (waiting for future client connections)
 +after the initial client connection has been closed.
 +If set to
-+.Dq no ,
++.Cm no ,
 +then the master connection will not be placed into the background,
 +and will close as soon as the initial client connection is closed.
 +If set to
-+.Dq yes
-+or
-+.Dq 0 ,
++.Cm yes
++or 0,
 +then the master connection will remain in the background indefinitely
 +(until killed or closed via a mechanism such as the
-+.Xr ssh 1
-+.Dq Fl O No exit
-+option).
++.Qq ssh -O exit ) .
 +If set to a time in seconds, or a time in any of the formats documented in
 +.Xr sshd_config 4 ,
 +then the backgrounded master connection will automatically terminate
@@ -1694,7 +2076,7 @@ index 0000000..e190f6d
 +The
 +.Ar bind_address
 +of
-+.Dq localhost
++.Cm localhost
 +indicates that the listening port be bound for local use only, while an
 +empty address or
 +.Sq *
@@ -1708,22 +2090,21 @@ index 0000000..e190f6d
 +Only the superuser can forward privileged ports.
 +.It Cm EnableSSHKeysign
 +Setting this option to
-+.Dq yes
++.Cm yes
 +in the global client configuration file
 +.Pa /etc/ssh/ssh_config
 +enables the use of the helper program
-+.Xr ssh-keysign 8
++.Xr ssh-keysign 1M
 +during
 +.Cm HostbasedAuthentication .
 +The argument must be
-+.Dq yes
++.Cm yes
 +or
-+.Dq no .
-+The default is
-+.Dq no .
++.Cm no
++(the default).
 +This option should be placed in the non-hostspecific section.
 +See
-+.Xr ssh-keysign 8
++.Xr ssh-keysign 1M
 +for more information.
 +.It Cm EscapeChar
 +Sets the escape character (default:
@@ -1733,7 +2114,7 @@ index 0000000..e190f6d
 +The argument should be a single character,
 +.Ql ^
 +followed by a letter, or
-+.Dq none
++.Cm none
 +to disable the escape
 +character entirely (making the connection transparent for binary
 +data).
@@ -1750,28 +2131,25 @@ index 0000000..e190f6d
 +.Xr ssh 1
 +to exit if TCP connections to the ultimate forwarding destination fail.
 +The argument must be
-+.Dq yes
++.Cm yes
 +or
-+.Dq no .
-+The default is
-+.Dq no .
++.Cm no
++(the default).
 +.It Cm FingerprintHash
 +Specifies the hash algorithm used when displaying key fingerprints.
 +Valid options are:
-+.Dq md5
++.Cm md5
 +and
-+.Dq sha256 .
-+The default is
-+.Dq sha256 .
++.Cm sha256
++(the default).
 +.It Cm ForwardAgent
 +Specifies whether the connection to the authentication agent (if any)
 +will be forwarded to the remote machine.
 +The argument must be
-+.Dq yes
++.Cm yes
 +or
-+.Dq no .
-+The default is
-+.Dq no .
++.Cm no
++(the default).
 +.Pp
 +Agent forwarding should be enabled with caution.
 +Users with the ability to bypass file permissions on the remote host
@@ -1786,11 +2164,10 @@ index 0000000..e190f6d
 +.Ev DISPLAY
 +set.
 +The argument must be
-+.Dq yes
++.Cm yes
 +or
-+.Dq no .
-+The default is
-+.Dq no .
++.Cm no
++(the default).
 +.Pp
 +X11 forwarding should be enabled with caution.
 +Users with the ability to bypass file permissions on the remote host
@@ -1803,7 +2180,8 @@ index 0000000..e190f6d
 +.It Cm ForwardX11Timeout
 +Specify a timeout for untrusted X11 forwarding
 +using the format described in the
-+TIME FORMATS section of
++.Sx TIME FORMATS
++section of
 +.Xr sshd_config 4 .
 +X11 connections received by
 +.Xr ssh 1
@@ -1812,11 +2190,12 @@ index 0000000..e190f6d
 +elapsed.
 +.It Cm ForwardX11Trusted
 +If this option is set to
-+.Dq yes ,
++.Cm yes ,
 +remote X11 clients will have full access to the original X11 display.
 +.Pp
 +If this option is set to
-+.Dq no ,
++.Cm no
++(the default),
 +remote X11 clients will be considered untrusted and prevented
 +from stealing or tampering with data belonging to trusted X11
 +clients.
@@ -1825,9 +2204,6 @@ index 0000000..e190f6d
 +token used for the session will be set to expire after 20 minutes.
 +Remote clients will be refused access after this time.
 +.Pp
-+The default is
-+.Dq no .
-+.Pp
 +See the X11 SECURITY extension specification for full details on
 +the restrictions imposed on untrusted clients.
 +.It Cm GatewayPorts
@@ -1842,11 +2218,10 @@ index 0000000..e190f6d
 +should bind local port forwardings to the wildcard address,
 +thus allowing remote hosts to connect to forwarded ports.
 +The argument must be
-+.Dq yes
++.Cm yes
 +or
-+.Dq no .
-+The default is
-+.Dq no .
++.Cm no
++(the default).
 +.It Cm GlobalKnownHostsFile
 +Specifies one or more files to use for the global
 +host key database, separated by whitespace.
@@ -1856,11 +2231,11 @@ index 0000000..e190f6d
 +.It Cm GSSAPIAuthentication
 +Specifies whether user authentication based on GSSAPI is allowed.
 +The default is
-+.Dq no .
++.Cm no .
 +.It Cm GSSAPIDelegateCredentials
 +Forward (delegate) credentials to the server.
 +The default is
-+.Dq no .
++.Cm no .
 +.It Cm HashKnownHosts
 +Indicates that
 +.Xr ssh 1
@@ -1873,7 +2248,7 @@ index 0000000..e190f6d
 +but they do not reveal identifying information should the file's contents
 +be disclosed.
 +The default is
-+.Dq no .
++.Cm no .
 +Note that existing names and addresses in known hosts files
 +will not be converted automatically,
 +but may be manually hashed using
@@ -1882,11 +2257,10 @@ index 0000000..e190f6d
 +Specifies whether to try rhosts based authentication with public key
 +authentication.
 +The argument must be
-+.Dq yes
++.Cm yes
 +or
-+.Dq no .
-+The default is
-+.Dq no .
++.Cm no
++(the default).
 +.It Cm HostbasedKeyTypes
 +Specifies the key types that will be used for hostbased authentication
 +as a comma-separated pattern list.
@@ -1931,12 +2305,8 @@ index 0000000..e190f6d
 +If hostkeys are known for the destination host then this default is modified
 +to prefer their algorithms.
 +.Pp
-+The list of available key types may also be obtained using the
-+.Fl Q
-+option of
-+.Xr ssh 1
-+with an argument of
-+.Dq key .
++The list of available key types may also be obtained using
++.Qq ssh -Q key .
 +.It Cm HostKeyAlias
 +Specifies an alias that should be used instead of the
 +real host name when looking up or saving the host key
@@ -1946,20 +2316,15 @@ index 0000000..e190f6d
 +.It Cm HostName
 +Specifies the real host name to log into.
 +This can be used to specify nicknames or abbreviations for hosts.
-+If the hostname contains the character sequence
-+.Ql %h ,
-+then this will be replaced with the host name specified on the command line
-+(this is useful for manipulating unqualified names).
-+The character sequence
-+.Ql %%
-+will be replaced by a single
-+.Ql %
-+character, which may be used when specifying IPv6 link-local addresses.
-+.Pp
-+The default is the name given on the command line.
++Arguments to
++.Cm HostName
++accept the tokens described in the
++.Sx TOKENS
++section.
 +Numeric IP addresses are also permitted (both on the command line and in
 +.Cm HostName
 +specifications).
++The default is the name given on the command line.
 +.It Cm IdentitiesOnly
 +Specifies that
 +.Xr ssh 1
@@ -1976,13 +2341,35 @@ index 0000000..e190f6d
 +.Cm PKCS11Provider
 +offers more identities.
 +The argument to this keyword must be
-+.Dq yes
++.Cm yes
 +or
-+.Dq no .
++.Cm no
++(the default).
 +This option is intended for situations where ssh-agent
 +offers many different identities.
-+The default is
-+.Dq no .
++.It Cm IdentityAgent
++Specifies the
++.Ux Ns -domain
++socket used to communicate with the authentication agent.
++.Pp
++This option overrides the
++.Ev SSH_AUTH_SOCK
++environment variable and can be used to select a specific agent.
++Setting the socket name to
++.Cm none
++disables the use of an authentication agent.
++If the string
++.Qq SSH_AUTH_SOCK
++is specified, the location of the socket will be read from the
++.Ev SSH_AUTH_SOCK
++environment variable.
++.Pp
++Arguments to
++.Cm IdentityAgent
++may use the tilde syntax to refer to a user's home directory
++or the tokens described in the
++.Sx TOKENS
++section.
 +.It Cm IdentityFile
 +Specifies a file from which the user's DSA, ECDSA, Ed25519 or RSA authentication
 +identity is read.
@@ -2008,20 +2395,13 @@ index 0000000..e190f6d
 +to the path of a specified
 +.Cm IdentityFile .
 +.Pp
-+The file name may use the tilde
-+syntax to refer to a user's home directory or one of the following
-+escape characters:
-+.Ql %d
-+(local user's home directory),
-+.Ql %u
-+(local user name),
-+.Ql %l
-+(local host name),
-+.Ql %h
-+(remote host name) or
-+.Ql %r
-+(remote user name).
-+.Pp
++Arguments to
++.Cm IdentityFile
++may use the tilde syntax to refer to a user's home directory
++or the tokens described in the
++.Sx TOKENS
++section.
++.Pp
 +It is possible to have
 +multiple identity files specified in configuration files; all these
 +identities will be tried in sequence.
@@ -2050,51 +2430,69 @@ index 0000000..e190f6d
 +.Cm IgnoreUnknown
 +be listed early in the configuration file as it will not be applied
 +to unknown options that appear before it.
++.It Cm Include
++Include the specified configuration file(s).
++Multiple pathnames may be specified and each pathname may contain
++.Xr glob 3
++wildcards and, for user configurations, shell-like
++.Sq ~
++references to user home directories.
++Files without absolute paths are assumed to be in
++.Pa ~/.ssh
++if included in a user configuration file or
++.Pa /etc/ssh
++if included from the system configuration file.
++.Cm Include
++directive may appear inside a
++.Cm Match
++or
++.Cm Host
++block
++to perform conditional inclusion.
 +.It Cm IPQoS
 +Specifies the IPv4 type-of-service or DSCP class for connections.
 +Accepted values are
-+.Dq af11 ,
-+.Dq af12 ,
-+.Dq af13 ,
-+.Dq af21 ,
-+.Dq af22 ,
-+.Dq af23 ,
-+.Dq af31 ,
-+.Dq af32 ,
-+.Dq af33 ,
-+.Dq af41 ,
-+.Dq af42 ,
-+.Dq af43 ,
-+.Dq cs0 ,
-+.Dq cs1 ,
-+.Dq cs2 ,
-+.Dq cs3 ,
-+.Dq cs4 ,
-+.Dq cs5 ,
-+.Dq cs6 ,
-+.Dq cs7 ,
-+.Dq ef ,
-+.Dq lowdelay ,
-+.Dq throughput ,
-+.Dq reliability ,
++.Cm af11 ,
++.Cm af12 ,
++.Cm af13 ,
++.Cm af21 ,
++.Cm af22 ,
++.Cm af23 ,
++.Cm af31 ,
++.Cm af32 ,
++.Cm af33 ,
++.Cm af41 ,
++.Cm af42 ,
++.Cm af43 ,
++.Cm cs0 ,
++.Cm cs1 ,
++.Cm cs2 ,
++.Cm cs3 ,
++.Cm cs4 ,
++.Cm cs5 ,
++.Cm cs6 ,
++.Cm cs7 ,
++.Cm ef ,
++.Cm lowdelay ,
++.Cm throughput ,
++.Cm reliability ,
 +or a numeric value.
 +This option may take one or two arguments, separated by whitespace.
 +If one argument is specified, it is used as the packet class unconditionally.
 +If two values are specified, the first is automatically selected for
 +interactive sessions and the second for non-interactive sessions.
 +The default is
-+.Dq lowdelay
++.Cm lowdelay
 +for interactive sessions and
-+.Dq throughput
++.Cm throughput
 +for non-interactive sessions.
 +.It Cm KbdInteractiveAuthentication
 +Specifies whether to use keyboard-interactive authentication.
 +The argument to this keyword must be
-+.Dq yes
++.Cm yes
++(the default)
 +or
-+.Dq no .
-+The default is
-+.Dq yes .
++.Cm no .
 +.It Cm KbdInteractiveDevices
 +Specifies the list of methods to use in keyboard-interactive authentication.
 +Multiple method names must be comma-separated.
@@ -2102,10 +2500,10 @@ index 0000000..e190f6d
 +The methods available vary depending on what the server supports.
 +For an OpenSSH server,
 +it may be zero or more of:
-+.Dq bsdauth ,
-+.Dq pam ,
++.Cm bsdauth ,
++.Cm pam ,
 +and
-+.Dq skey .
++.Cm skey .
 +.It Cm KexAlgorithms
 +Specifies the available KEX (Key Exchange) algorithms.
 +Multiple algorithms must be comma-separated.
@@ -2115,41 +2513,25 @@ index 0000000..e190f6d
 +instead of replacing them.
 +The default is:
 +.Bd -literal -offset indent
-+curve25519-sha256@libssh.org,
++curve25519-sha256,curve25519-sha256@libssh.org,
 +ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,
 +diffie-hellman-group-exchange-sha256,
 +diffie-hellman-group-exchange-sha1,
 +diffie-hellman-group14-sha1
 +.Ed
 +.Pp
-+The list of available key exchange algorithms may also be obtained using the
-+.Fl Q
-+option of
-+.Xr ssh 1
-+with an argument of
-+.Dq kex .
++The list of available key exchange algorithms may also be obtained using
++.Qq ssh -Q kex .
 +.It Cm LocalCommand
 +Specifies a command to execute on the local machine after successfully
 +connecting to the server.
 +The command string extends to the end of the line, and is executed with
 +the user's shell.
-+The following escape character substitutions will be performed:
-+.Ql %d
-+(local user's home directory),
-+.Ql %h
-+(remote host name),
-+.Ql %l
-+(local host name),
-+.Ql %n
-+(host name as provided on the command line),
-+.Ql %p
-+(remote port),
-+.Ql %r
-+(remote user name) or
-+.Ql %u
-+(local user name) or
-+.Ql \&%C
-+by a hash of the concatenation: %l%h%p%r.
++Arguments to
++.Cm LocalCommand
++accept the tokens described in the
++.Sx TOKENS
++section.
 +.Pp
 +The command is run synchronously and does not have access to the
 +session of the
@@ -2182,7 +2564,7 @@ index 0000000..e190f6d
 +The
 +.Ar bind_address
 +of
-+.Dq localhost
++.Cm localhost
 +indicates that the listening port be bound for local use only, while an
 +empty address or
 +.Sq *
@@ -2206,7 +2588,7 @@ index 0000000..e190f6d
 +instead of replacing them.
 +.Pp
 +The algorithms that contain
-+.Dq -etm
++.Qq -etm
 +calculate the MAC after encryption (encrypt-then-mac).
 +These are considered safer and their use recommended.
 +.Pp
@@ -2219,22 +2601,18 @@ index 0000000..e190f6d
 +hmac-sha2-256,hmac-sha2-512,hmac-sha1
 +.Ed
 +.Pp
-+The list of available MAC algorithms may also be obtained using the
-+.Fl Q
-+option of
-+.Xr ssh 1
-+with an argument of
-+.Dq mac .
++The list of available MAC algorithms may also be obtained using
++.Qq ssh -Q mac .
 +.It Cm NoHostAuthenticationForLocalhost
 +This option can be used if the home directory is shared across machines.
 +In this case localhost will refer to a different machine on each of
 +the machines and the user will get many warnings about changed host keys.
 +However, this option disables host authentication for localhost.
 +The argument to this keyword must be
-+.Dq yes
++.Cm yes
 +or
-+.Dq no .
-+The default is to check the host key for localhost.
++.Cm no .
++(the default).
 +.It Cm NumberOfPasswordPrompts
 +Specifies the number of password prompts before giving up.
 +The argument to this keyword must be an integer.
@@ -2242,11 +2620,10 @@ index 0000000..e190f6d
 +.It Cm PasswordAuthentication
 +Specifies whether to use password authentication.
 +The argument to this keyword must be
-+.Dq yes
++.Cm yes
++(the default)
 +or
-+.Dq no .
-+The default is
-+.Dq yes .
++.Cm no .
 +.It Cm PermitLocalCommand
 +Allow local command execution via the
 +.Ic LocalCommand
@@ -2255,11 +2632,10 @@ index 0000000..e190f6d
 +escape sequence in
 +.Xr ssh 1 .
 +The argument must be
-+.Dq yes
++.Cm yes
 +or
-+.Dq no .
-+The default is
-+.Dq no .
++.Cm no
++(the default).
 +.It Cm PKCS11Provider
 +Specifies which PKCS#11 provider to use.
 +The argument to this keyword is the PKCS#11 shared library
@@ -2284,18 +2660,14 @@ index 0000000..e190f6d
 +Specifies the protocol versions
 +.Xr ssh 1
 +should support in order of preference.
-+The possible values are
-+.Sq 1
-+and
-+.Sq 2 .
++The possible values are 1 and 2.
 +Multiple versions must be comma-separated.
 +When this option is set to
-+.Dq 2,1
++.Cm 2,1
 +.Nm ssh
 +will try version 2 and fall back to version 1
 +if version 2 is not available.
-+The default is
-+.Sq 2 .
++The default is version 2.
 +Protocol 1 suffers from a number of cryptographic weaknesses and should
 +not be used.
 +It is only offered to support legacy devices.
@@ -2307,18 +2679,15 @@ index 0000000..e190f6d
 +.Ql exec
 +directive to avoid a lingering shell process.
 +.Pp
-+In the command string, any occurrence of
-+.Ql %h
-+will be substituted by the host name to
-+connect,
-+.Ql %p
-+by the port, and
-+.Ql %r
-+by the remote user name.
++Arguments to
++.Cm ProxyCommand
++accept the tokens described in the
++.Sx TOKENS
++section.
 +The command can be basically anything,
 +and should read from its standard input and write to its standard output.
 +It should eventually connect an
-+.Xr sshd 8
++.Xr sshd 1M
 +server running on some machine, or execute
 +.Ic sshd -i
 +somewhere.
@@ -2326,7 +2695,7 @@ index 0000000..e190f6d
 +HostName of the host being connected (defaulting to the name typed by
 +the user).
 +Setting the command to
-+.Dq none
++.Cm none
 +disables this option entirely.
 +Note that
 +.Cm CheckHostIP
@@ -2340,6 +2709,30 @@ index 0000000..e190f6d
 +.Bd -literal -offset 3n
 +ProxyCommand /usr/bin/nc -X connect -x 192.0.2.0:8080 %h %p
 +.Ed
++.It Cm ProxyJump
++Specifies one or more jump proxies as
++.Xo
++.Sm off
++.Op Ar user No @
++.Ar host
++.Op : Ns Ar port
++.Sm on
++.Xc .
++Multiple proxies may be separated by comma characters and will be visited
++sequentially.
++Setting this option will cause
++.Xr ssh 1
++to connect to the target host by first making a
++.Xr ssh 1
++connection to the specified
++.Cm ProxyJump
++host and then establishing a
++TCP forwarding to the ultimate target from there.
++.Pp
++Note that this option will compete with the
++.Cm ProxyCommand
++option - whichever is specified first will prevent later instances of the
++other from taking effect.
 +.It Cm ProxyUseFdpass
 +Specifies that
 +.Cm ProxyCommand
@@ -2347,7 +2740,7 @@ index 0000000..e190f6d
 +.Xr ssh 1
 +instead of continuing to execute and pass data.
 +The default is
-+.Dq no .
++.Cm no .
 +.It Cm PubkeyAcceptedKeyTypes
 +Specifies the key types that will be used for public key authentication
 +as a comma-separated pattern list.
@@ -2366,19 +2759,15 @@ index 0000000..e190f6d
 +ssh-ed25519,ssh-rsa
 +.Ed
 +.Pp
-+The
-+.Fl Q
-+option of
-+.Xr ssh 1
-+may be used to list supported key types.
++The list of available key types may also be obtained using
++.Qq ssh -Q key .
 +.It Cm PubkeyAuthentication
 +Specifies whether to try public key authentication.
 +The argument to this keyword must be
-+.Dq yes
++.Cm yes
++(the default)
 +or
-+.Dq no .
-+The default is
-+.Dq yes .
++.Cm no .
 +.It Cm RekeyLimit
 +Specifies the maximum amount of data that may be transmitted before the
 +session key is renegotiated, optionally followed a maximum amount of
@@ -2396,12 +2785,13 @@ index 0000000..e190f6d
 +depending on the cipher.
 +The optional second value is specified in seconds and may use any of the
 +units documented in the
-+TIME FORMATS section of
++.Sx TIME FORMATS
++section of
 +.Xr sshd_config 4 .
 +The default value for
 +.Cm RekeyLimit
 +is
-+.Dq default none ,
++.Cm default none ,
 +which means that rekeying is performed after the cipher's default amount
 +of data has been sent or received and no time based rekeying is done.
 +.It Cm RemoteForward
@@ -2421,8 +2811,7 @@ index 0000000..e190f6d
 +.Pp
 +If the
 +.Ar port
-+argument is
-+.Ql 0 ,
++argument is 0,
 +the listen port will be dynamically allocated on the server and reported
 +to the client at run time.
 +.Pp
@@ -2444,13 +2833,13 @@ index 0000000..e190f6d
 +.It Cm RequestTTY
 +Specifies whether to request a pseudo-tty for the session.
 +The argument may be one of:
-+.Dq no
++.Cm no
 +(never request a TTY),
-+.Dq yes
++.Cm yes
 +(always request a TTY when standard input is a TTY),
-+.Dq force
++.Cm force
 +(always request a TTY) or
-+.Dq auto
++.Cm auto
 +(request a TTY when opening a login session).
 +This option mirrors the
 +.Fl t
@@ -2472,25 +2861,23 @@ index 0000000..e190f6d
 +Specifies whether to try rhosts based authentication with RSA host
 +authentication.
 +The argument must be
-+.Dq yes
++.Cm yes
 +or
-+.Dq no .
-+The default is
-+.Dq no .
++.Cm no
++(the default).
 +This option applies to protocol version 1 only and requires
 +.Xr ssh 1
 +to be setuid root.
 +.It Cm RSAAuthentication
 +Specifies whether to try RSA authentication.
 +The argument to this keyword must be
-+.Dq yes
++.Cm yes
++(the default)
 +or
-+.Dq no .
++.Cm no .
 +RSA authentication will only be
 +attempted if the identity file exists, or an authentication agent is
 +running.
-+The default is
-+.Dq yes .
 +Note that this option applies to protocol version 1 only.
 +.It Cm SendEnv
 +Specifies what variables from the local
@@ -2573,14 +2960,13 @@ index 0000000..e190f6d
 +This option is only used for port forwarding to a Unix-domain socket file.
 +.Pp
 +The argument must be
-+.Dq yes
++.Cm yes
 +or
-+.Dq no .
-+The default is
-+.Dq no .
++.Cm no
++(the default).
 +.It Cm StrictHostKeyChecking
 +If this flag is set to
-+.Dq yes ,
++.Cm yes ,
 +.Xr ssh 1
 +will never automatically add host keys to the
 +.Pa ~/.ssh/known_hosts
@@ -2593,24 +2979,18 @@ index 0000000..e190f6d
 +This option forces the user to manually
 +add all new hosts.
 +If this flag is set to
-+.Dq no ,
++.Cm no ,
 +ssh will automatically add new host keys to the
 +user known hosts files.
 +If this flag is set to
-+.Dq ask ,
++.Cm ask
++(the default),
 +new host keys
 +will be added to the user known host files only after the user
 +has confirmed that is what they really want to do, and
 +ssh will refuse to connect to hosts whose host key has changed.
 +The host keys of
 +known hosts will be verified automatically in all cases.
-+The argument must be
-+.Dq yes ,
-+.Dq no ,
-+or
-+.Dq ask .
-+The default is
-+.Dq ask .
 +.It Cm TCPKeepAlive
 +Specifies whether the system should send TCP keepalive messages to the
 +other side.
@@ -2621,31 +3001,30 @@ index 0000000..e190f6d
 +find it annoying.
 +.Pp
 +The default is
-+.Dq yes
++.Cm yes
 +(to send TCP keepalive messages), and the client will notice
 +if the network goes down or the remote host dies.
 +This is important in scripts, and many users want it too.
 +.Pp
 +To disable TCP keepalive messages, the value should be set to
-+.Dq no .
++.Cm no .
 +.It Cm Tunnel
 +Request
 +.Xr tun 4
 +device forwarding between the client and the server.
 +The argument must be
-+.Dq yes ,
-+.Dq point-to-point
++.Cm yes ,
++.Cm point-to-point
 +(layer 3),
-+.Dq ethernet
++.Cm ethernet
 +(layer 2),
 +or
-+.Dq no .
++.Cm no
++(the default).
 +Specifying
-+.Dq yes
++.Cm yes
 +requests the default tunnel mode, which is
-+.Dq point-to-point .
-+The default is
-+.Dq no .
++.Cm point-to-point .
 +.It Cm TunnelDevice
 +Specifies the
 +.Xr tun 4
@@ -2659,14 +3038,14 @@ index 0000000..e190f6d
 +.Ar local_tun Op : Ar remote_tun .
 +.Sm on
 +The devices may be specified by numerical ID or the keyword
-+.Dq any ,
++.Cm any ,
 +which uses the next available tunnel device.
 +If
 +.Ar remote_tun
 +is not specified, it defaults to
-+.Dq any .
++.Cm any .
 +The default is
-+.Dq any:any .
++.Cm any:any .
 +.It Cm UpdateHostKeys
 +Specifies whether
 +.Xr ssh 1
@@ -2674,10 +3053,10 @@ index 0000000..e190f6d
 +after authentication has completed and add them to
 +.Cm UserKnownHostsFile .
 +The argument must be
-+.Dq yes ,
-+.Dq no
++.Cm yes ,
++.Cm no
 +(the default) or
-+.Dq ask .
++.Cm ask .
 +Enabling this option allows learning alternate hostkeys for a server
 +and supports graceful key rotation by allowing a server to send replacement
 +public keys before old ones are removed.
@@ -2686,31 +3065,30 @@ index 0000000..e190f6d
 +If
 +.Cm UpdateHostKeys
 +is set to
-+.Dq ask ,
++.Cm ask ,
 +then the user is asked to confirm the modifications to the known_hosts file.
 +Confirmation is currently incompatible with
 +.Cm ControlPersist ,
 +and will be disabled if it is enabled.
 +.Pp
 +Presently, only
-+.Xr sshd 8
++.Xr sshd 1M
 +from OpenSSH 6.8 and greater support the
-+.Dq hostkeys@openssh.com
++.Qq hostkeys@openssh.com
 +protocol extension used to inform the client of all the server's hostkeys.
 +.It Cm UsePrivilegedPort
 +Specifies whether to use a privileged port for outgoing connections.
 +The argument must be
-+.Dq yes
++.Cm yes
 +or
-+.Dq no .
-+The default is
-+.Dq no .
++.Cm no
++(the default).
 +If set to
-+.Dq yes ,
++.Cm yes ,
 +.Xr ssh 1
 +must be setuid root.
 +Note that this option must be set to
-+.Dq yes
++.Cm yes
 +for
 +.Cm RhostsRSAAuthentication
 +with older servers.
@@ -2729,39 +3107,35 @@ index 0000000..e190f6d
 +Specifies whether to verify the remote key using DNS and SSHFP resource
 +records.
 +If this option is set to
-+.Dq yes ,
++.Cm yes ,
 +the client will implicitly trust keys that match a secure fingerprint
 +from DNS.
 +Insecure fingerprints will be handled as if this option was set to
-+.Dq ask .
++.Cm ask .
 +If this option is set to
-+.Dq ask ,
++.Cm ask ,
 +information on fingerprint match will be displayed, but the user will still
 +need to confirm new host keys according to the
 +.Cm StrictHostKeyChecking
 +option.
-+The argument must be
-+.Dq yes ,
-+.Dq no ,
-+or
-+.Dq ask .
 +The default is
-+.Dq no .
++.Cm no .
 +.Pp
-+See also VERIFYING HOST KEYS in
++See also
++.Sx VERIFYING HOST KEYS
++in
 +.Xr ssh 1 .
 +.It Cm VisualHostKey
 +If this flag is set to
-+.Dq yes ,
++.Cm yes ,
 +an ASCII art representation of the remote host key fingerprint is
 +printed in addition to the fingerprint string at login and
 +for unknown host keys.
 +If this flag is set to
-+.Dq no ,
++.Cm no
++(the default),
 +no fingerprint strings are printed at login and
 +only the fingerprint string will be printed for unknown host keys.
-+The default is
-+.Dq no .
 +.It Cm XAuthLocation
 +Specifies the full pathname of the
 +.Xr xauth 1
@@ -2779,7 +3153,7 @@ index 0000000..e190f6d
 +.Sq ?\&
 +(a wildcard that matches exactly one character).
 +For example, to specify a set of declarations for any host in the
-+.Dq .co.uk
++.Qq .co.uk
 +set of domains,
 +the following pattern could be used:
 +.Pp
@@ -2799,11 +3173,63 @@ index 0000000..e190f6d
 +For example,
 +to allow a key to be used from anywhere within an organization
 +except from the
-+.Dq dialup
++.Qq dialup
 +pool,
 +the following entry (in authorized_keys) could be used:
 +.Pp
 +.Dl from=\&"!*.dialup.example.com,*.example.com\&"
++.Sh TOKENS
++Arguments to some keywords can make use of tokens,
++which are expanded at runtime:
++.Pp
++.Bl -tag -width XXXX -offset indent -compact
++.It %%
++A literal
++.Sq % .
++.It \&%C
++Shorthand for %l%h%p%r.
++.It %d
++Local user's home directory.
++.It %h
++The remote hostname.
++.It %i
++The local user ID.
++.It %L
++The local hostname.
++.It %l
++The local hostname, including the domain name.
++.It %n
++The original remote hostname, as given on the command line.
++.It %p
++The remote port.
++.It %r
++The remote username.
++.It %u
++The local username.
++.El
++.Pp
++.Cm Match exec
++accepts the tokens %%, %h, %L, %l, %n, %p, %r, and %u.
++.Pp
++.Cm CertificateFile
++accepts the tokens %%, %d, %h, %l, %r, and %u.
++.Pp
++.Cm ControlPath
++accepts the tokens %%, %C, %h, %i, %L, %l, %n, %p, %r, and %u.
++.Pp
++.Cm HostName
++accepts the tokens %% and %h.
++.Pp
++.Cm IdentityAgent
++and
++.Cm IdentityFile
++accept the tokens %%, %d, %h, %l, %r, and %u.
++.Pp
++.Cm LocalCommand
++accepts the tokens %%, %C, %d, %h, %l, %n, %p, %r, and %u.
++.Pp
++.Cm ProxyCommand
++accepts the tokens %%, %h, %p, and %r.
 +.Sh FILES
 +.Bl -tag -width Ds
 +.It Pa ~/.ssh/config
@@ -2822,20 +3248,24 @@ index 0000000..e190f6d
 +.Sh SEE ALSO
 +.Xr ssh 1
 +.Sh AUTHORS
++.An -nosplit
 +OpenSSH is a derivative of the original and free
-+ssh 1.2.12 release by Tatu Ylonen.
-+Aaron Campbell, Bob Beck, Markus Friedl, Niels Provos,
-+Theo de Raadt and Dug Song
++ssh 1.2.12 release by
++.An Tatu Ylonen .
++.An Aaron Campbell , Bob Beck , Markus Friedl ,
++.An Niels Provos , Theo de Raadt
++and
++.An Dug Song
 +removed many bugs, re-added newer features and
 +created OpenSSH.
-+Markus Friedl contributed the support for SSH
-+protocol versions 1.5 and 2.0.
++.An Markus Friedl
++contributed the support for SSH protocol versions 1.5 and 2.0.
 diff --git a/ssh_config.5 b/ssh_config.5
 deleted file mode 100644
-index caf13a6..0000000
+index 591365f3..00000000
 --- a/ssh_config.5
 +++ /dev/null
-@@ -1,1801 +0,0 @@
+@@ -1,1778 +0,0 @@
 -.\"
 -.\" Author: Tatu Ylonen <ylo@cs.hut.fi>
 -.\" Copyright (c) 1995 Tatu Ylonen <ylo@cs.hut.fi>, Espoo, Finland
@@ -2871,8 +3301,8 @@ index caf13a6..0000000
 -.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 -.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 -.\"
--.\" $OpenBSD: ssh_config.5,v 1.228 2016/02/20 23:01:46 sobrado Exp $
--.Dd $Mdocdate: February 20 2016 $
+-.\" $OpenBSD: ssh_config.5,v 1.240 2016/10/15 19:56:25 jmc Exp $
+-.Dd $Mdocdate: October 15 2016 $
 -.Dt SSH_CONFIG 5
 -.Os
 -.Sh NAME
@@ -2900,25 +3330,25 @@ index caf13a6..0000000
 -For each parameter, the first obtained value
 -will be used.
 -The configuration files contain sections separated by
--.Dq Host
+-.Cm Host
 -specifications, and that section is only applied for hosts that
 -match one of the patterns given in the specification.
 -The matched host name is usually the one given on the command line
 -(see the
 -.Cm CanonicalizeHostname
--option for exceptions.)
+-option for exceptions).
 -.Pp
 -Since the first obtained value for each parameter is used, more
 -host-specific declarations should be given near the beginning of the
 -file, and general defaults at the end.
 -.Pp
--The configuration file has the following format:
--.Pp
--Empty lines and lines starting with
+-The file contains keyword-argument pairs, one per line.
+-Lines starting with
 -.Ql #
--are comments.
--Otherwise a line is of the format
--.Dq keyword arguments .
+-and empty lines are interpreted as comments.
+-Arguments may optionally be enclosed in double quotes
+-.Pq \&"
+-in order to represent arguments containing spaces.
 -Configuration options may be separated by whitespace or
 -optional whitespace and exactly one
 -.Ql = ;
@@ -2930,9 +3360,6 @@ index caf13a6..0000000
 -.Nm sftp
 -.Fl o
 -option.
--Arguments may optionally be enclosed in double quotes
--.Pq \&"
--in order to represent arguments containing spaces.
 -.Pp
 -The possible
 -keywords and their meanings are as follows (note that
@@ -2955,7 +3382,7 @@ index caf13a6..0000000
 -argument given on the command line
 -(see the
 -.Cm CanonicalizeHostname
--option for exceptions.)
+-keyword for exceptions).
 -.Pp
 -A pattern entry may be negated by prefixing it with an exclamation mark
 -.Pq Sq !\& .
@@ -3015,24 +3442,11 @@ index caf13a6..0000000
 -keyword executes the specified command under the user's shell.
 -If the command returns a zero exit status then the condition is considered true.
 -Commands containing whitespace characters must be quoted.
--The following character sequences in the command will be expanded prior to
--execution:
--.Ql %L
--will be substituted by the first component of the local host name,
--.Ql %l
--will be substituted by the local host name (including any domain name),
--.Ql %h
--will be substituted by the target host name,
--.Ql %n
--will be substituted by the original target host name
--specified on the command-line,
--.Ql %p
--the destination port,
--.Ql %r
--by the remote login username, and
--.Ql %u
--by the username of the user running
--.Xr ssh 1 .
+-Arguments to
+-.Cm exec
+-accept the tokens described in the
+-.Sx TOKENS
+-section.
 -.Pp
 -The other keywords' criteria must be single entries or comma-separated
 -lists and may use the wildcard and negation operators described in the
@@ -3063,57 +3477,54 @@ index caf13a6..0000000
 -Specifies whether keys should be automatically added to a running
 -.Xr ssh-agent 1 .
 -If this option is set to
--.Dq yes
+-.Cm yes
 -and a key is loaded from a file, the key and its passphrase are added to
 -the agent with the default lifetime, as if by
 -.Xr ssh-add 1 .
 -If this option is set to
--.Dq ask ,
--.Nm ssh
+-.Cm ask ,
+-.Xr ssh 1
 -will require confirmation using the
 -.Ev SSH_ASKPASS
 -program before adding a key (see
 -.Xr ssh-add 1
 -for details).
 -If this option is set to
--.Dq confirm ,
+-.Cm confirm ,
 -each use of the key must be confirmed, as if the
 -.Fl c
 -option was specified to
 -.Xr ssh-add 1 .
 -If this option is set to
--.Dq no ,
+-.Cm no ,
 -no keys are added to the agent.
 -The argument must be
--.Dq yes ,
--.Dq confirm ,
--.Dq ask ,
+-.Cm yes ,
+-.Cm confirm ,
+-.Cm ask ,
 -or
--.Dq no .
--The default is
--.Dq no .
+-.Cm no
+-(the default).
 -.It Cm AddressFamily
 -Specifies which address family to use when connecting.
 -Valid arguments are
--.Dq any ,
--.Dq inet
+-.Cm any
+-(the default),
+-.Cm inet
 -(use IPv4 only), or
--.Dq inet6
+-.Cm inet6
 -(use IPv6 only).
--The default is
--.Dq any .
 -.It Cm BatchMode
 -If set to
--.Dq yes ,
+-.Cm yes ,
 -passphrase/password querying will be disabled.
 -This option is useful in scripts and other batch jobs where no user
 -is present to supply the password.
 -The argument must be
--.Dq yes
+-.Cm yes
 -or
--.Dq no .
--The default is
--.Dq no .
+-.Cm no
+-(the default).
 -.It Cm BindAddress
 -Use the specified address on the local machine as the source address of
 -the connection.
@@ -3121,7 +3532,7 @@ index caf13a6..0000000
 -Note that this option does not work if
 -.Cm UsePrivilegedPort
 -is set to
--.Dq yes .
+-.Cm yes .
 -.It Cm CanonicalDomains
 -When
 -.Cm CanonicalizeHostname
@@ -3130,11 +3541,11 @@ index caf13a6..0000000
 -.It Cm CanonicalizeFallbackLocal
 -Specifies whether to fail with an error when hostname canonicalization fails.
 -The default,
--.Dq yes ,
+-.Cm yes ,
 -will attempt to look up the unqualified hostname using the system resolver's
 -search rules.
 -A value of
--.Dq no
+-.Cm no
 -will cause
 -.Xr ssh 1
 -to fail instantly if
@@ -3145,11 +3556,11 @@ index caf13a6..0000000
 -.It Cm CanonicalizeHostname
 -Controls whether explicit hostname canonicalization is performed.
 -The default,
--.Dq no ,
+-.Cm no ,
 -is not to perform any name rewriting and let the system resolver handle all
 -hostname lookups.
 -If set to
--.Dq yes
+-.Cm yes
 -then, for connections that do not use a
 -.Cm ProxyCommand ,
 -.Xr ssh 1
@@ -3162,7 +3573,7 @@ index caf13a6..0000000
 -If
 -.Cm CanonicalizeHostname
 -is set to
--.Dq always ,
+-.Cm always ,
 -then canonicalization is applied to proxied connections too.
 -.Pp
 -If this option is enabled, then the configuration files are processed
@@ -3174,8 +3585,7 @@ index caf13a6..0000000
 -.It Cm CanonicalizeMaxDots
 -Specifies the maximum number of dot characters in a hostname before
 -canonicalization is disabled.
--The default,
--.Dq 1 ,
+-The default, 1,
 -allows a single dot (i.e. hostname.subdomain).
 -.It Cm CanonicalizePermittedCNAMEs
 -Specifies rules to determine whether CNAMEs should be followed when
@@ -3190,13 +3600,13 @@ index caf13a6..0000000
 -is a pattern-list of domains that they may resolve to.
 -.Pp
 -For example,
--.Dq *.a.example.com:*.b.example.com,*.c.example.com
+-.Qq *.a.example.com:*.b.example.com,*.c.example.com
 -will allow hostnames matching
--.Dq *.a.example.com
+-.Qq *.a.example.com
 -to be canonicalized to names in the
--.Dq *.b.example.com
+-.Qq *.b.example.com
 -or
--.Dq *.c.example.com
+-.Qq *.c.example.com
 -domains.
 -.It Cm CertificateFile
 -Specifies a file from which the user's certificate is read.
@@ -3213,19 +3623,12 @@ index caf13a6..0000000
 -or via a
 -.Cm PKCS11Provider .
 -.Pp
--The file name may use the tilde
--syntax to refer to a user's home directory or one of the following
--escape characters:
--.Ql %d
--(local user's home directory),
--.Ql %u
--(local user name),
--.Ql %l
--(local host name),
--.Ql %h
--(remote host name) or
--.Ql %r
--(remote user name).
+-Arguments to
+-.Cm CertificateFile
+-may use the tilde syntax to refer to a user's home directory
+-or the tokens described in the
+-.Sx TOKENS
+-section.
 -.Pp
 -It is possible to have multiple certificate files specified in
 -configuration files; these certificates will be tried in sequence.
@@ -3236,47 +3639,42 @@ index caf13a6..0000000
 -.It Cm ChallengeResponseAuthentication
 -Specifies whether to use challenge-response authentication.
 -The argument to this keyword must be
--.Dq yes
+-.Cm yes
+-(the default)
 -or
--.Dq no .
--The default is
--.Dq yes .
+-.Cm no .
 -.It Cm CheckHostIP
--If this flag is set to
--.Dq yes ,
+-If set to
+-.Cm yes
+-(the default),
 -.Xr ssh 1
 -will additionally check the host IP address in the
 -.Pa known_hosts
 -file.
--This allows ssh to detect if a host key changed due to DNS spoofing
+-This allows it to detect if a host key changed due to DNS spoofing
 -and will add addresses of destination hosts to
 -.Pa ~/.ssh/known_hosts
 -in the process, regardless of the setting of
 -.Cm StrictHostKeyChecking .
 -If the option is set to
--.Dq no ,
+-.Cm no ,
 -the check will not be executed.
--The default is
--.Dq yes .
 -.It Cm Cipher
 -Specifies the cipher to use for encrypting the session
 -in protocol version 1.
 -Currently,
--.Dq blowfish ,
--.Dq 3des ,
+-.Cm blowfish ,
+-.Cm 3des
+-(the default),
 -and
--.Dq des
--are supported.
--.Ar des
+-.Cm des
+-are supported,
+-though
+-.Cm des
 -is only supported in the
 -.Xr ssh 1
--client for interoperability with legacy protocol 1 implementations
--that do not support the
--.Ar 3des
--cipher.
--Its use is strongly discouraged due to cryptographic weaknesses.
--The default is
--.Dq 3des .
+-client for interoperability with legacy protocol 1 implementations;
+-its use is strongly discouraged due to cryptographic weaknesses.
 -.It Cm Ciphers
 -Specifies the ciphers allowed for protocol version 2
 -in order of preference.
@@ -3287,54 +3685,34 @@ index caf13a6..0000000
 -instead of replacing them.
 -.Pp
 -The supported ciphers are:
--.Pp
--.Bl -item -compact -offset indent
--.It
+-.Bd -literal -offset indent
 -3des-cbc
--.It
 -aes128-cbc
--.It
 -aes192-cbc
--.It
 -aes256-cbc
--.It
 -aes128-ctr
--.It
 -aes192-ctr
--.It
 -aes256-ctr
--.It
 -aes128-gcm@openssh.com
--.It
 -aes256-gcm@openssh.com
--.It
 -arcfour
--.It
 -arcfour128
--.It
 -arcfour256
--.It
 -blowfish-cbc
--.It
 -cast128-cbc
--.It
 -chacha20-poly1305@openssh.com
--.El
+-.Ed
 -.Pp
 -The default is:
 -.Bd -literal -offset indent
 -chacha20-poly1305@openssh.com,
 -aes128-ctr,aes192-ctr,aes256-ctr,
 -aes128-gcm@openssh.com,aes256-gcm@openssh.com,
--aes128-cbc,aes192-cbc,aes256-cbc,3des-cbc
+-aes128-cbc,aes192-cbc,aes256-cbc
 -.Ed
 -.Pp
--The list of available ciphers may also be obtained using the
--.Fl Q
--option of
--.Xr ssh 1
--with an argument of
--.Dq cipher .
+-The list of available ciphers may also be obtained using
+-.Qq ssh -Q cipher .
 -.It Cm ClearAllForwardings
 -Specifies that all local, remote, and dynamic port forwardings
 -specified in the configuration files or on the command line be
@@ -3347,19 +3725,17 @@ index caf13a6..0000000
 -and
 -.Xr sftp 1 .
 -The argument must be
--.Dq yes
+-.Cm yes
 -or
--.Dq no .
--The default is
--.Dq no .
+-.Cm no
+-(the default).
 -.It Cm Compression
 -Specifies whether to use compression.
 -The argument must be
--.Dq yes
+-.Cm yes
 -or
--.Dq no .
--The default is
--.Dq no .
+-.Cm no
+-(the default).
 -.It Cm CompressionLevel
 -Specifies the compression level to use if compression is enabled.
 -The argument must be an integer from 1 (fast) to 9 (slow, best).
@@ -3380,7 +3756,7 @@ index caf13a6..0000000
 -.It Cm ControlMaster
 -Enables the sharing of multiple sessions over a single network connection.
 -When set to
--.Dq yes ,
+-.Cm yes ,
 -.Xr ssh 1
 -will listen for connections on a control socket specified using the
 -.Cm ControlPath
@@ -3390,21 +3766,23 @@ index caf13a6..0000000
 -with
 -.Cm ControlMaster
 -set to
--.Dq no
+-.Cm no
 -(the default).
 -These sessions will try to reuse the master instance's network connection
 -rather than initiating new ones, but will fall back to connecting normally
 -if the control socket does not exist, or is not listening.
 -.Pp
 -Setting this to
--.Dq ask
--will cause ssh
+-.Cm ask
+-will cause
+-.Xr ssh 1
 -to listen for control connections, but require confirmation using
 -.Xr ssh-askpass 1 .
 -If the
 -.Cm ControlPath
 -cannot be opened,
--ssh will continue without connecting to a master instance.
+-.Xr ssh 1
+-will continue without connecting to a master instance.
 -.Pp
 -X11 and
 -.Xr ssh-agent 1
@@ -3416,41 +3794,25 @@ index caf13a6..0000000
 -master connection but fall back to creating a new one if one does not already
 -exist.
 -These options are:
--.Dq auto
+-.Cm auto
 -and
--.Dq autoask .
+-.Cm autoask .
 -The latter requires confirmation like the
--.Dq ask
+-.Cm ask
 -option.
 -.It Cm ControlPath
 -Specify the path to the control socket used for connection sharing as described
 -in the
 -.Cm ControlMaster
 -section above or the string
--.Dq none
+-.Cm none
 -to disable connection sharing.
--In the path,
--.Ql %L
--will be substituted by the first component of the local host name,
--.Ql %l
--will be substituted by the local host name (including any domain name),
--.Ql %h
--will be substituted by the target host name,
--.Ql %n
--will be substituted by the original target host name
--specified on the command line,
--.Ql %p
--the destination port,
--.Ql %r
--by the remote login username,
--.Ql %u
--by the username and
--.Ql %i
--by the numeric user ID (uid) of the user running
--.Xr ssh 1 ,
--and
--.Ql \&%C
--by a hash of the concatenation: %l%h%p%r.
+-Arguments to
+-.Cm ControlPath
+-may use the tilde syntax to refer to a user's home directory
+-or the tokens described in the
+-.Sx TOKENS
+-section.
 -It is recommended that any
 -.Cm ControlPath
 -used for opportunistic connection sharing include
@@ -3464,18 +3826,15 @@ index caf13a6..0000000
 -in the background (waiting for future client connections)
 -after the initial client connection has been closed.
 -If set to
--.Dq no ,
+-.Cm no ,
 -then the master connection will not be placed into the background,
 -and will close as soon as the initial client connection is closed.
 -If set to
--.Dq yes
--or
--.Dq 0 ,
+-.Cm yes
+-or 0,
 -then the master connection will remain in the background indefinitely
 -(until killed or closed via a mechanism such as the
--.Xr ssh 1
--.Dq Fl O No exit
--option).
+-.Qq ssh -O exit ) .
 -If set to a time in seconds, or a time in any of the formats documented in
 -.Xr sshd_config 5 ,
 -then the backgrounded master connection will automatically terminate
@@ -3501,7 +3860,7 @@ index caf13a6..0000000
 -The
 -.Ar bind_address
 -of
--.Dq localhost
+-.Cm localhost
 -indicates that the listening port be bound for local use only, while an
 -empty address or
 -.Sq *
@@ -3515,7 +3874,7 @@ index caf13a6..0000000
 -Only the superuser can forward privileged ports.
 -.It Cm EnableSSHKeysign
 -Setting this option to
--.Dq yes
+-.Cm yes
 -in the global client configuration file
 -.Pa /etc/ssh/ssh_config
 -enables the use of the helper program
@@ -3523,11 +3882,10 @@ index caf13a6..0000000
 -during
 -.Cm HostbasedAuthentication .
 -The argument must be
--.Dq yes
+-.Cm yes
 -or
--.Dq no .
--The default is
--.Dq no .
+-.Cm no
+-(the default).
 -This option should be placed in the non-hostspecific section.
 -See
 -.Xr ssh-keysign 8
@@ -3540,7 +3898,7 @@ index caf13a6..0000000
 -The argument should be a single character,
 -.Ql ^
 -followed by a letter, or
--.Dq none
+-.Cm none
 -to disable the escape
 -character entirely (making the connection transparent for binary
 -data).
@@ -3557,28 +3915,25 @@ index caf13a6..0000000
 -.Xr ssh 1
 -to exit if TCP connections to the ultimate forwarding destination fail.
 -The argument must be
--.Dq yes
+-.Cm yes
 -or
--.Dq no .
--The default is
--.Dq no .
+-.Cm no
+-(the default).
 -.It Cm FingerprintHash
 -Specifies the hash algorithm used when displaying key fingerprints.
 -Valid options are:
--.Dq md5
+-.Cm md5
 -and
--.Dq sha256 .
--The default is
--.Dq sha256 .
+-.Cm sha256
+-(the default).
 -.It Cm ForwardAgent
 -Specifies whether the connection to the authentication agent (if any)
 -will be forwarded to the remote machine.
 -The argument must be
--.Dq yes
+-.Cm yes
 -or
--.Dq no .
--The default is
--.Dq no .
+-.Cm no
+-(the default).
 -.Pp
 -Agent forwarding should be enabled with caution.
 -Users with the ability to bypass file permissions on the remote host
@@ -3593,11 +3948,10 @@ index caf13a6..0000000
 -.Ev DISPLAY
 -set.
 -The argument must be
--.Dq yes
+-.Cm yes
 -or
--.Dq no .
--The default is
--.Dq no .
+-.Cm no
+-(the default).
 -.Pp
 -X11 forwarding should be enabled with caution.
 -Users with the ability to bypass file permissions on the remote host
@@ -3610,7 +3964,8 @@ index caf13a6..0000000
 -.It Cm ForwardX11Timeout
 -Specify a timeout for untrusted X11 forwarding
 -using the format described in the
--TIME FORMATS section of
+-.Sx TIME FORMATS
+-section of
 -.Xr sshd_config 5 .
 -X11 connections received by
 -.Xr ssh 1
@@ -3619,11 +3974,12 @@ index caf13a6..0000000
 -elapsed.
 -.It Cm ForwardX11Trusted
 -If this option is set to
--.Dq yes ,
+-.Cm yes ,
 -remote X11 clients will have full access to the original X11 display.
 -.Pp
 -If this option is set to
--.Dq no ,
+-.Cm no
+-(the default),
 -remote X11 clients will be considered untrusted and prevented
 -from stealing or tampering with data belonging to trusted X11
 -clients.
@@ -3632,9 +3988,6 @@ index caf13a6..0000000
 -token used for the session will be set to expire after 20 minutes.
 -Remote clients will be refused access after this time.
 -.Pp
--The default is
--.Dq no .
--.Pp
 -See the X11 SECURITY extension specification for full details on
 -the restrictions imposed on untrusted clients.
 -.It Cm GatewayPorts
@@ -3649,11 +4002,10 @@ index caf13a6..0000000
 -should bind local port forwardings to the wildcard address,
 -thus allowing remote hosts to connect to forwarded ports.
 -The argument must be
--.Dq yes
+-.Cm yes
 -or
--.Dq no .
--The default is
--.Dq no .
+-.Cm no
+-(the default).
 -.It Cm GlobalKnownHostsFile
 -Specifies one or more files to use for the global
 -host key database, separated by whitespace.
@@ -3663,11 +4015,11 @@ index caf13a6..0000000
 -.It Cm GSSAPIAuthentication
 -Specifies whether user authentication based on GSSAPI is allowed.
 -The default is
--.Dq no .
+-.Cm no .
 -.It Cm GSSAPIDelegateCredentials
 -Forward (delegate) credentials to the server.
 -The default is
--.Dq no .
+-.Cm no .
 -.It Cm HashKnownHosts
 -Indicates that
 -.Xr ssh 1
@@ -3680,7 +4032,7 @@ index caf13a6..0000000
 -but they do not reveal identifying information should the file's contents
 -be disclosed.
 -The default is
--.Dq no .
+-.Cm no .
 -Note that existing names and addresses in known hosts files
 -will not be converted automatically,
 -but may be manually hashed using
@@ -3689,11 +4041,10 @@ index caf13a6..0000000
 -Specifies whether to try rhosts based authentication with public key
 -authentication.
 -The argument must be
--.Dq yes
+-.Cm yes
 -or
--.Dq no .
--The default is
--.Dq no .
+-.Cm no
+-(the default).
 -.It Cm HostbasedKeyTypes
 -Specifies the key types that will be used for hostbased authentication
 -as a comma-separated pattern list.
@@ -3738,12 +4089,8 @@ index caf13a6..0000000
 -If hostkeys are known for the destination host then this default is modified
 -to prefer their algorithms.
 -.Pp
--The list of available key types may also be obtained using the
--.Fl Q
--option of
--.Xr ssh 1
--with an argument of
--.Dq key .
+-The list of available key types may also be obtained using
+-.Qq ssh -Q key .
 -.It Cm HostKeyAlias
 -Specifies an alias that should be used instead of the
 -real host name when looking up or saving the host key
@@ -3753,20 +4100,15 @@ index caf13a6..0000000
 -.It Cm HostName
 -Specifies the real host name to log into.
 -This can be used to specify nicknames or abbreviations for hosts.
--If the hostname contains the character sequence
--.Ql %h ,
--then this will be replaced with the host name specified on the command line
--(this is useful for manipulating unqualified names).
--The character sequence
--.Ql %%
--will be replaced by a single
--.Ql %
--character, which may be used when specifying IPv6 link-local addresses.
--.Pp
--The default is the name given on the command line.
+-Arguments to
+-.Cm HostName
+-accept the tokens described in the
+-.Sx TOKENS
+-section.
 -Numeric IP addresses are also permitted (both on the command line and in
 -.Cm HostName
 -specifications).
+-The default is the name given on the command line.
 -.It Cm IdentitiesOnly
 -Specifies that
 -.Xr ssh 1
@@ -3783,13 +4125,35 @@ index caf13a6..0000000
 -.Cm PKCS11Provider
 -offers more identities.
 -The argument to this keyword must be
--.Dq yes
+-.Cm yes
 -or
--.Dq no .
+-.Cm no
+-(the default).
 -This option is intended for situations where ssh-agent
 -offers many different identities.
--The default is
--.Dq no .
+-.It Cm IdentityAgent
+-Specifies the
+-.Ux Ns -domain
+-socket used to communicate with the authentication agent.
+-.Pp
+-This option overrides the
+-.Ev SSH_AUTH_SOCK
+-environment variable and can be used to select a specific agent.
+-Setting the socket name to
+-.Cm none
+-disables the use of an authentication agent.
+-If the string
+-.Qq SSH_AUTH_SOCK
+-is specified, the location of the socket will be read from the
+-.Ev SSH_AUTH_SOCK
+-environment variable.
+-.Pp
+-Arguments to
+-.Cm IdentityAgent
+-may use the tilde syntax to refer to a user's home directory
+-or the tokens described in the
+-.Sx TOKENS
+-section.
 -.It Cm IdentityFile
 -Specifies a file from which the user's DSA, ECDSA, Ed25519 or RSA authentication
 -identity is read.
@@ -3815,19 +4179,12 @@ index caf13a6..0000000
 -to the path of a specified
 -.Cm IdentityFile .
 -.Pp
--The file name may use the tilde
--syntax to refer to a user's home directory or one of the following
--escape characters:
--.Ql %d
--(local user's home directory),
--.Ql %u
--(local user name),
--.Ql %l
--(local host name),
--.Ql %h
--(remote host name) or
--.Ql %r
--(remote user name).
+-Arguments to
+-.Cm IdentityFile
+-may use the tilde syntax to refer to a user's home directory
+-or the tokens described in the
+-.Sx TOKENS
+-section.
 -.Pp
 -It is possible to have
 -multiple identity files specified in configuration files; all these
@@ -3857,51 +4214,69 @@ index caf13a6..0000000
 -.Cm IgnoreUnknown
 -be listed early in the configuration file as it will not be applied
 -to unknown options that appear before it.
+-.It Cm Include
+-Include the specified configuration file(s).
+-Multiple pathnames may be specified and each pathname may contain
+-.Xr glob 3
+-wildcards and, for user configurations, shell-like
+-.Sq ~
+-references to user home directories.
+-Files without absolute paths are assumed to be in
+-.Pa ~/.ssh
+-if included in a user configuration file or
+-.Pa /etc/ssh
+-if included from the system configuration file.
+-.Cm Include
+-directive may appear inside a
+-.Cm Match
+-or
+-.Cm Host
+-block
+-to perform conditional inclusion.
 -.It Cm IPQoS
 -Specifies the IPv4 type-of-service or DSCP class for connections.
 -Accepted values are
--.Dq af11 ,
--.Dq af12 ,
--.Dq af13 ,
--.Dq af21 ,
--.Dq af22 ,
--.Dq af23 ,
--.Dq af31 ,
--.Dq af32 ,
--.Dq af33 ,
--.Dq af41 ,
--.Dq af42 ,
--.Dq af43 ,
--.Dq cs0 ,
--.Dq cs1 ,
--.Dq cs2 ,
--.Dq cs3 ,
--.Dq cs4 ,
--.Dq cs5 ,
--.Dq cs6 ,
--.Dq cs7 ,
--.Dq ef ,
--.Dq lowdelay ,
--.Dq throughput ,
--.Dq reliability ,
+-.Cm af11 ,
+-.Cm af12 ,
+-.Cm af13 ,
+-.Cm af21 ,
+-.Cm af22 ,
+-.Cm af23 ,
+-.Cm af31 ,
+-.Cm af32 ,
+-.Cm af33 ,
+-.Cm af41 ,
+-.Cm af42 ,
+-.Cm af43 ,
+-.Cm cs0 ,
+-.Cm cs1 ,
+-.Cm cs2 ,
+-.Cm cs3 ,
+-.Cm cs4 ,
+-.Cm cs5 ,
+-.Cm cs6 ,
+-.Cm cs7 ,
+-.Cm ef ,
+-.Cm lowdelay ,
+-.Cm throughput ,
+-.Cm reliability ,
 -or a numeric value.
 -This option may take one or two arguments, separated by whitespace.
 -If one argument is specified, it is used as the packet class unconditionally.
 -If two values are specified, the first is automatically selected for
 -interactive sessions and the second for non-interactive sessions.
 -The default is
--.Dq lowdelay
+-.Cm lowdelay
 -for interactive sessions and
--.Dq throughput
+-.Cm throughput
 -for non-interactive sessions.
 -.It Cm KbdInteractiveAuthentication
 -Specifies whether to use keyboard-interactive authentication.
 -The argument to this keyword must be
--.Dq yes
+-.Cm yes
+-(the default)
 -or
--.Dq no .
--The default is
--.Dq yes .
+-.Cm no .
 -.It Cm KbdInteractiveDevices
 -Specifies the list of methods to use in keyboard-interactive authentication.
 -Multiple method names must be comma-separated.
@@ -3909,10 +4284,10 @@ index caf13a6..0000000
 -The methods available vary depending on what the server supports.
 -For an OpenSSH server,
 -it may be zero or more of:
--.Dq bsdauth ,
--.Dq pam ,
+-.Cm bsdauth ,
+-.Cm pam ,
 -and
--.Dq skey .
+-.Cm skey .
 -.It Cm KexAlgorithms
 -Specifies the available KEX (Key Exchange) algorithms.
 -Multiple algorithms must be comma-separated.
@@ -3922,41 +4297,25 @@ index caf13a6..0000000
 -instead of replacing them.
 -The default is:
 -.Bd -literal -offset indent
--curve25519-sha256@libssh.org,
+-curve25519-sha256,curve25519-sha256@libssh.org,
 -ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,
 -diffie-hellman-group-exchange-sha256,
 -diffie-hellman-group-exchange-sha1,
 -diffie-hellman-group14-sha1
 -.Ed
 -.Pp
--The list of available key exchange algorithms may also be obtained using the
--.Fl Q
--option of
--.Xr ssh 1
--with an argument of
--.Dq kex .
+-The list of available key exchange algorithms may also be obtained using
+-.Qq ssh -Q kex .
 -.It Cm LocalCommand
 -Specifies a command to execute on the local machine after successfully
 -connecting to the server.
 -The command string extends to the end of the line, and is executed with
 -the user's shell.
--The following escape character substitutions will be performed:
--.Ql %d
--(local user's home directory),
--.Ql %h
--(remote host name),
--.Ql %l
--(local host name),
--.Ql %n
--(host name as provided on the command line),
--.Ql %p
--(remote port),
--.Ql %r
--(remote user name) or
--.Ql %u
--(local user name) or
--.Ql \&%C
--by a hash of the concatenation: %l%h%p%r.
+-Arguments to
+-.Cm LocalCommand
+-accept the tokens described in the
+-.Sx TOKENS
+-section.
 -.Pp
 -The command is run synchronously and does not have access to the
 -session of the
@@ -3989,7 +4348,7 @@ index caf13a6..0000000
 -The
 -.Ar bind_address
 -of
--.Dq localhost
+-.Cm localhost
 -indicates that the listening port be bound for local use only, while an
 -empty address or
 -.Sq *
@@ -4013,7 +4372,7 @@ index caf13a6..0000000
 -instead of replacing them.
 -.Pp
 -The algorithms that contain
--.Dq -etm
+-.Qq -etm
 -calculate the MAC after encryption (encrypt-then-mac).
 -These are considered safer and their use recommended.
 -.Pp
@@ -4026,22 +4385,18 @@ index caf13a6..0000000
 -hmac-sha2-256,hmac-sha2-512,hmac-sha1
 -.Ed
 -.Pp
--The list of available MAC algorithms may also be obtained using the
--.Fl Q
--option of
--.Xr ssh 1
--with an argument of
--.Dq mac .
+-The list of available MAC algorithms may also be obtained using
+-.Qq ssh -Q mac .
 -.It Cm NoHostAuthenticationForLocalhost
 -This option can be used if the home directory is shared across machines.
 -In this case localhost will refer to a different machine on each of
 -the machines and the user will get many warnings about changed host keys.
 -However, this option disables host authentication for localhost.
 -The argument to this keyword must be
--.Dq yes
+-.Cm yes
 -or
--.Dq no .
--The default is to check the host key for localhost.
+-.Cm no .
+-(the default).
 -.It Cm NumberOfPasswordPrompts
 -Specifies the number of password prompts before giving up.
 -The argument to this keyword must be an integer.
@@ -4049,11 +4404,10 @@ index caf13a6..0000000
 -.It Cm PasswordAuthentication
 -Specifies whether to use password authentication.
 -The argument to this keyword must be
--.Dq yes
+-.Cm yes
+-(the default)
 -or
--.Dq no .
--The default is
--.Dq yes .
+-.Cm no .
 -.It Cm PermitLocalCommand
 -Allow local command execution via the
 -.Ic LocalCommand
@@ -4062,11 +4416,10 @@ index caf13a6..0000000
 -escape sequence in
 -.Xr ssh 1 .
 -The argument must be
--.Dq yes
+-.Cm yes
 -or
--.Dq no .
--The default is
--.Dq no .
+-.Cm no
+-(the default).
 -.It Cm PKCS11Provider
 -Specifies which PKCS#11 provider to use.
 -The argument to this keyword is the PKCS#11 shared library
@@ -4091,18 +4444,14 @@ index caf13a6..0000000
 -Specifies the protocol versions
 -.Xr ssh 1
 -should support in order of preference.
--The possible values are
--.Sq 1
--and
--.Sq 2 .
+-The possible values are 1 and 2.
 -Multiple versions must be comma-separated.
 -When this option is set to
--.Dq 2,1
+-.Cm 2,1
 -.Nm ssh
 -will try version 2 and fall back to version 1
 -if version 2 is not available.
--The default is
--.Sq 2 .
+-The default is version 2.
 -Protocol 1 suffers from a number of cryptographic weaknesses and should
 -not be used.
 -It is only offered to support legacy devices.
@@ -4114,14 +4463,11 @@ index caf13a6..0000000
 -.Ql exec
 -directive to avoid a lingering shell process.
 -.Pp
--In the command string, any occurrence of
--.Ql %h
--will be substituted by the host name to
--connect,
--.Ql %p
--by the port, and
--.Ql %r
--by the remote user name.
+-Arguments to
+-.Cm ProxyCommand
+-accept the tokens described in the
+-.Sx TOKENS
+-section.
 -The command can be basically anything,
 -and should read from its standard input and write to its standard output.
 -It should eventually connect an
@@ -4133,7 +4479,7 @@ index caf13a6..0000000
 -HostName of the host being connected (defaulting to the name typed by
 -the user).
 -Setting the command to
--.Dq none
+-.Cm none
 -disables this option entirely.
 -Note that
 -.Cm CheckHostIP
@@ -4147,6 +4493,30 @@ index caf13a6..0000000
 -.Bd -literal -offset 3n
 -ProxyCommand /usr/bin/nc -X connect -x 192.0.2.0:8080 %h %p
 -.Ed
+-.It Cm ProxyJump
+-Specifies one or more jump proxies as
+-.Xo
+-.Sm off
+-.Op Ar user No @
+-.Ar host
+-.Op : Ns Ar port
+-.Sm on
+-.Xc .
+-Multiple proxies may be separated by comma characters and will be visited
+-sequentially.
+-Setting this option will cause
+-.Xr ssh 1
+-to connect to the target host by first making a
+-.Xr ssh 1
+-connection to the specified
+-.Cm ProxyJump
+-host and then establishing a
+-TCP forwarding to the ultimate target from there.
+-.Pp
+-Note that this option will compete with the
+-.Cm ProxyCommand
+-option - whichever is specified first will prevent later instances of the
+-other from taking effect.
 -.It Cm ProxyUseFdpass
 -Specifies that
 -.Cm ProxyCommand
@@ -4154,7 +4524,7 @@ index caf13a6..0000000
 -.Xr ssh 1
 -instead of continuing to execute and pass data.
 -The default is
--.Dq no .
+-.Cm no .
 -.It Cm PubkeyAcceptedKeyTypes
 -Specifies the key types that will be used for public key authentication
 -as a comma-separated pattern list.
@@ -4173,19 +4543,15 @@ index caf13a6..0000000
 -ssh-ed25519,ssh-rsa
 -.Ed
 -.Pp
--The
--.Fl Q
--option of
--.Xr ssh 1
--may be used to list supported key types.
+-The list of available key types may also be obtained using
+-.Qq ssh -Q key .
 -.It Cm PubkeyAuthentication
 -Specifies whether to try public key authentication.
 -The argument to this keyword must be
--.Dq yes
+-.Cm yes
+-(the default)
 -or
--.Dq no .
--The default is
--.Dq yes .
+-.Cm no .
 -.It Cm RekeyLimit
 -Specifies the maximum amount of data that may be transmitted before the
 -session key is renegotiated, optionally followed a maximum amount of
@@ -4203,12 +4569,13 @@ index caf13a6..0000000
 -depending on the cipher.
 -The optional second value is specified in seconds and may use any of the
 -units documented in the
--TIME FORMATS section of
+-.Sx TIME FORMATS
+-section of
 -.Xr sshd_config 5 .
 -The default value for
 -.Cm RekeyLimit
 -is
--.Dq default none ,
+-.Cm default none ,
 -which means that rekeying is performed after the cipher's default amount
 -of data has been sent or received and no time based rekeying is done.
 -.It Cm RemoteForward
@@ -4228,8 +4595,7 @@ index caf13a6..0000000
 -.Pp
 -If the
 -.Ar port
--argument is
--.Ql 0 ,
+-argument is 0,
 -the listen port will be dynamically allocated on the server and reported
 -to the client at run time.
 -.Pp
@@ -4251,13 +4617,13 @@ index caf13a6..0000000
 -.It Cm RequestTTY
 -Specifies whether to request a pseudo-tty for the session.
 -The argument may be one of:
--.Dq no
+-.Cm no
 -(never request a TTY),
--.Dq yes
+-.Cm yes
 -(always request a TTY when standard input is a TTY),
--.Dq force
+-.Cm force
 -(always request a TTY) or
--.Dq auto
+-.Cm auto
 -(request a TTY when opening a login session).
 -This option mirrors the
 -.Fl t
@@ -4279,25 +4645,23 @@ index caf13a6..0000000
 -Specifies whether to try rhosts based authentication with RSA host
 -authentication.
 -The argument must be
--.Dq yes
+-.Cm yes
 -or
--.Dq no .
--The default is
--.Dq no .
+-.Cm no
+-(the default).
 -This option applies to protocol version 1 only and requires
 -.Xr ssh 1
 -to be setuid root.
 -.It Cm RSAAuthentication
 -Specifies whether to try RSA authentication.
 -The argument to this keyword must be
--.Dq yes
+-.Cm yes
+-(the default)
 -or
--.Dq no .
+-.Cm no .
 -RSA authentication will only be
 -attempted if the identity file exists, or an authentication agent is
 -running.
--The default is
--.Dq yes .
 -Note that this option applies to protocol version 1 only.
 -.It Cm SendEnv
 -Specifies what variables from the local
@@ -4380,14 +4744,13 @@ index caf13a6..0000000
 -This option is only used for port forwarding to a Unix-domain socket file.
 -.Pp
 -The argument must be
--.Dq yes
+-.Cm yes
 -or
--.Dq no .
--The default is
--.Dq no .
+-.Cm no
+-(the default).
 -.It Cm StrictHostKeyChecking
 -If this flag is set to
--.Dq yes ,
+-.Cm yes ,
 -.Xr ssh 1
 -will never automatically add host keys to the
 -.Pa ~/.ssh/known_hosts
@@ -4400,24 +4763,18 @@ index caf13a6..0000000
 -This option forces the user to manually
 -add all new hosts.
 -If this flag is set to
--.Dq no ,
+-.Cm no ,
 -ssh will automatically add new host keys to the
 -user known hosts files.
 -If this flag is set to
--.Dq ask ,
+-.Cm ask
+-(the default),
 -new host keys
 -will be added to the user known host files only after the user
 -has confirmed that is what they really want to do, and
 -ssh will refuse to connect to hosts whose host key has changed.
 -The host keys of
 -known hosts will be verified automatically in all cases.
--The argument must be
--.Dq yes ,
--.Dq no ,
--or
--.Dq ask .
--The default is
--.Dq ask .
 -.It Cm TCPKeepAlive
 -Specifies whether the system should send TCP keepalive messages to the
 -other side.
@@ -4428,31 +4785,30 @@ index caf13a6..0000000
 -find it annoying.
 -.Pp
 -The default is
--.Dq yes
+-.Cm yes
 -(to send TCP keepalive messages), and the client will notice
 -if the network goes down or the remote host dies.
 -This is important in scripts, and many users want it too.
 -.Pp
 -To disable TCP keepalive messages, the value should be set to
--.Dq no .
+-.Cm no .
 -.It Cm Tunnel
 -Request
 -.Xr tun 4
 -device forwarding between the client and the server.
 -The argument must be
--.Dq yes ,
--.Dq point-to-point
+-.Cm yes ,
+-.Cm point-to-point
 -(layer 3),
--.Dq ethernet
+-.Cm ethernet
 -(layer 2),
 -or
--.Dq no .
+-.Cm no
+-(the default).
 -Specifying
--.Dq yes
+-.Cm yes
 -requests the default tunnel mode, which is
--.Dq point-to-point .
--The default is
--.Dq no .
+-.Cm point-to-point .
 -.It Cm TunnelDevice
 -Specifies the
 -.Xr tun 4
@@ -4466,14 +4822,14 @@ index caf13a6..0000000
 -.Ar local_tun Op : Ar remote_tun .
 -.Sm on
 -The devices may be specified by numerical ID or the keyword
--.Dq any ,
+-.Cm any ,
 -which uses the next available tunnel device.
 -If
 -.Ar remote_tun
 -is not specified, it defaults to
--.Dq any .
+-.Cm any .
 -The default is
--.Dq any:any .
+-.Cm any:any .
 -.It Cm UpdateHostKeys
 -Specifies whether
 -.Xr ssh 1
@@ -4481,10 +4837,10 @@ index caf13a6..0000000
 -after authentication has completed and add them to
 -.Cm UserKnownHostsFile .
 -The argument must be
--.Dq yes ,
--.Dq no
+-.Cm yes ,
+-.Cm no
 -(the default) or
--.Dq ask .
+-.Cm ask .
 -Enabling this option allows learning alternate hostkeys for a server
 -and supports graceful key rotation by allowing a server to send replacement
 -public keys before old ones are removed.
@@ -4493,7 +4849,7 @@ index caf13a6..0000000
 -If
 -.Cm UpdateHostKeys
 -is set to
--.Dq ask ,
+-.Cm ask ,
 -then the user is asked to confirm the modifications to the known_hosts file.
 -Confirmation is currently incompatible with
 -.Cm ControlPersist ,
@@ -4502,22 +4858,21 @@ index caf13a6..0000000
 -Presently, only
 -.Xr sshd 8
 -from OpenSSH 6.8 and greater support the
--.Dq hostkeys@openssh.com
+-.Qq hostkeys@openssh.com
 -protocol extension used to inform the client of all the server's hostkeys.
 -.It Cm UsePrivilegedPort
 -Specifies whether to use a privileged port for outgoing connections.
 -The argument must be
--.Dq yes
+-.Cm yes
 -or
--.Dq no .
--The default is
--.Dq no .
+-.Cm no
+-(the default).
 -If set to
--.Dq yes ,
+-.Cm yes ,
 -.Xr ssh 1
 -must be setuid root.
 -Note that this option must be set to
--.Dq yes
+-.Cm yes
 -for
 -.Cm RhostsRSAAuthentication
 -with older servers.
@@ -4536,39 +4891,35 @@ index caf13a6..0000000
 -Specifies whether to verify the remote key using DNS and SSHFP resource
 -records.
 -If this option is set to
--.Dq yes ,
+-.Cm yes ,
 -the client will implicitly trust keys that match a secure fingerprint
 -from DNS.
 -Insecure fingerprints will be handled as if this option was set to
--.Dq ask .
+-.Cm ask .
 -If this option is set to
--.Dq ask ,
+-.Cm ask ,
 -information on fingerprint match will be displayed, but the user will still
 -need to confirm new host keys according to the
 -.Cm StrictHostKeyChecking
 -option.
--The argument must be
--.Dq yes ,
--.Dq no ,
--or
--.Dq ask .
 -The default is
--.Dq no .
+-.Cm no .
 -.Pp
--See also VERIFYING HOST KEYS in
+-See also
+-.Sx VERIFYING HOST KEYS
+-in
 -.Xr ssh 1 .
 -.It Cm VisualHostKey
 -If this flag is set to
--.Dq yes ,
+-.Cm yes ,
 -an ASCII art representation of the remote host key fingerprint is
 -printed in addition to the fingerprint string at login and
 -for unknown host keys.
 -If this flag is set to
--.Dq no ,
+-.Cm no
+-(the default),
 -no fingerprint strings are printed at login and
 -only the fingerprint string will be printed for unknown host keys.
--The default is
--.Dq no .
 -.It Cm XAuthLocation
 -Specifies the full pathname of the
 -.Xr xauth 1
@@ -4586,7 +4937,7 @@ index caf13a6..0000000
 -.Sq ?\&
 -(a wildcard that matches exactly one character).
 -For example, to specify a set of declarations for any host in the
--.Dq .co.uk
+-.Qq .co.uk
 -set of domains,
 -the following pattern could be used:
 -.Pp
@@ -4606,11 +4957,63 @@ index caf13a6..0000000
 -For example,
 -to allow a key to be used from anywhere within an organization
 -except from the
--.Dq dialup
+-.Qq dialup
 -pool,
 -the following entry (in authorized_keys) could be used:
 -.Pp
 -.Dl from=\&"!*.dialup.example.com,*.example.com\&"
+-.Sh TOKENS
+-Arguments to some keywords can make use of tokens,
+-which are expanded at runtime:
+-.Pp
+-.Bl -tag -width XXXX -offset indent -compact
+-.It %%
+-A literal
+-.Sq % .
+-.It \&%C
+-Shorthand for %l%h%p%r.
+-.It %d
+-Local user's home directory.
+-.It %h
+-The remote hostname.
+-.It %i
+-The local user ID.
+-.It %L
+-The local hostname.
+-.It %l
+-The local hostname, including the domain name.
+-.It %n
+-The original remote hostname, as given on the command line.
+-.It %p
+-The remote port.
+-.It %r
+-The remote username.
+-.It %u
+-The local username.
+-.El
+-.Pp
+-.Cm Match exec
+-accepts the tokens %%, %h, %L, %l, %n, %p, %r, and %u.
+-.Pp
+-.Cm CertificateFile
+-accepts the tokens %%, %d, %h, %l, %r, and %u.
+-.Pp
+-.Cm ControlPath
+-accepts the tokens %%, %C, %h, %i, %L, %l, %n, %p, %r, and %u.
+-.Pp
+-.Cm HostName
+-accepts the tokens %% and %h.
+-.Pp
+-.Cm IdentityAgent
+-and
+-.Cm IdentityFile
+-accept the tokens %%, %d, %h, %l, %r, and %u.
+-.Pp
+-.Cm LocalCommand
+-accepts the tokens %%, %C, %d, %h, %l, %n, %p, %r, and %u.
+-.Pp
+-.Cm ProxyCommand
+-accepts the tokens %%, %h, %p, and %r.
 -.Sh FILES
 -.Bl -tag -width Ds
 -.It Pa ~/.ssh/config
@@ -4629,20 +5032,24 @@ index caf13a6..0000000
 -.Sh SEE ALSO
 -.Xr ssh 1
 -.Sh AUTHORS
+-.An -nosplit
 -OpenSSH is a derivative of the original and free
--ssh 1.2.12 release by Tatu Ylonen.
--Aaron Campbell, Bob Beck, Markus Friedl, Niels Provos,
--Theo de Raadt and Dug Song
+-ssh 1.2.12 release by
+-.An Tatu Ylonen .
+-.An Aaron Campbell , Bob Beck , Markus Friedl ,
+-.An Niels Provos , Theo de Raadt
+-and
+-.An Dug Song
 -removed many bugs, re-added newer features and
 -created OpenSSH.
--Markus Friedl contributed the support for SSH
--protocol versions 1.5 and 2.0.
+-.An Markus Friedl
+-contributed the support for SSH protocol versions 1.5 and 2.0.
 diff --git a/sshd.1m b/sshd.1m
 new file mode 100644
-index 0000000..dac5c14
+index 00000000..b767cc7a
 --- /dev/null
 +++ b/sshd.1m
-@@ -0,0 +1,1004 @@
+@@ -0,0 +1,947 @@
 +.\"
 +.\" Author: Tatu Ylonen <ylo@cs.hut.fi>
 +.\" Copyright (c) 1995 Tatu Ylonen <ylo@cs.hut.fi>, Espoo, Finland
@@ -4678,9 +5085,9 @@ index 0000000..dac5c14
 +.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 +.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 +.\"
-+.\" $OpenBSD: sshd.8,v 1.284 2016/02/17 07:38:19 jmc Exp $
-+.Dd $Mdocdate: February 17 2016 $
-+.Dt SSHD 1M
++.\" $OpenBSD: sshd.8,v 1.287 2016/11/30 02:57:40 djm Exp $
++.Dd $Mdocdate: November 30 2016 $
++.Dt SSHD 1m
 +.Os
 +.Sh NAME
 +.Nm sshd
@@ -4689,14 +5096,12 @@ index 0000000..dac5c14
 +.Nm sshd
 +.Bk -words
 +.Op Fl 46DdeiqTt
-+.Op Fl b Ar bits
 +.Op Fl C Ar connection_spec
 +.Op Fl c Ar host_certificate_file
 +.Op Fl E Ar log_file
 +.Op Fl f Ar config_file
 +.Op Fl g Ar login_grace_time
 +.Op Fl h Ar host_key_file
-+.Op Fl k Ar key_gen_time
 +.Op Fl o Ar option
 +.Op Fl p Ar port
 +.Op Fl u Ar len
@@ -4741,9 +5146,6 @@ index 0000000..dac5c14
 +Forces
 +.Nm
 +to use IPv6 addresses only.
-+.It Fl b Ar bits
-+Specifies the number of bits in the ephemeral protocol version 1
-+server key (default 1024).
 +.It Fl C Ar connection_spec
 +Specify the connection parameters to use for the
 +.Fl T
@@ -4814,36 +5216,18 @@ index 0000000..dac5c14
 +is not run as root (as the normal
 +host key files are normally not readable by anyone but root).
 +The default is
-+.Pa /etc/ssh/ssh_host_key
-+for protocol version 1, and
 +.Pa /etc/ssh/ssh_host_dsa_key ,
-+.Pa /etc/ssh/ssh_host_ecdsa_key .
++.Pa /etc/ssh/ssh_host_ecdsa_key ,
 +.Pa /etc/ssh/ssh_host_ed25519_key
 +and
-+.Pa /etc/ssh/ssh_host_rsa_key
-+for protocol version 2.
++.Pa /etc/ssh/ssh_host_rsa_key .
 +It is possible to have multiple host key files for
-+the different protocol versions and host key algorithms.
++the different host key algorithms.
 +.It Fl i
 +Specifies that
 +.Nm
 +is being run from
 +.Xr inetd 8 .
-+If SSH protocol 1 is enabled,
-+.Nm
-+should not  normally be run
-+from inetd because it needs to generate the server key before it can
-+respond to the client, and this may take some time.
-+Clients may have to wait too long if the key was regenerated every time.
-+.It Fl k Ar key_gen_time
-+Specifies how often the ephemeral protocol version 1 server key is
-+regenerated (default 3600 seconds, or one hour).
-+The motivation for regenerating the key fairly
-+often is that the key is not stored anywhere, and after about an hour
-+it becomes impossible to recover the key for decrypting intercepted
-+communications even if the machine is cracked into or physically
-+seized.
-+A value of zero indicates that the key will never be regenerated.
 +.It Fl o Ar option
 +Can be used to give options in the format used in the configuration file.
 +This is useful for specifying options for which there is no separate
@@ -4902,8 +5286,7 @@ index 0000000..dac5c14
 +from making DNS requests unless the authentication
 +mechanism or configuration requires it.
 +Authentication mechanisms that may require DNS include
-+.Cm RhostsRSAAuthentication ,
-+.Cm HostbasedAuthentication ,
++.Cm HostbasedAuthentication
 +and using a
 +.Cm from="pattern-list"
 +option in a key file.
@@ -4914,42 +5297,14 @@ index 0000000..dac5c14
 +.Cm DenyUsers .
 +.El
 +.Sh AUTHENTICATION
-+The OpenSSH SSH daemon supports SSH protocols 1 and 2.
-+The default is to use protocol 2 only,
-+though this can be changed via the
-+.Cm Protocol
-+option in
-+.Xr sshd_config 4 .
-+Protocol 1 should not be used
-+and is only offered to support legacy devices.
-+.Pp
++The OpenSSH SSH daemon supports SSH protocol 2 only.
 +Each host has a host-specific key,
 +used to identify the host.
-+Partial forward security for protocol 1 is provided through
-+an additional server key,
-+normally 1024 bits,
-+generated when the server starts.
-+This key is normally regenerated every hour if it has been used, and
-+is never stored on disk.
 +Whenever a client connects, the daemon responds with its public
-+host and server keys.
++host key.
 +The client compares the
-+RSA host key against its own database to verify that it has not changed.
-+The client then generates a 256-bit random number.
-+It encrypts this
-+random number using both the host key and the server key, and sends
-+the encrypted number to the server.
-+Both sides then use this
-+random number as a session key which is used to encrypt all further
-+communications in the session.
-+The rest of the session is encrypted
-+using a conventional cipher, currently Blowfish or 3DES, with 3DES
-+being used by default.
-+The client selects the encryption algorithm
-+to use from those offered by the server.
-+.Pp
-+For protocol 2,
-+forward security is provided through a Diffie-Hellman key agreement.
++host key against its own database to verify that it has not changed.
++Forward security is provided through a Diffie-Hellman key agreement.
 +This key agreement results in a shared session key.
 +The rest of the session is encrypted using a symmetric cipher, currently
 +128-bit AES, Blowfish, 3DES, CAST128, Arcfour, 192-bit AES, or 256-bit AES.
@@ -5049,7 +5404,7 @@ index 0000000..dac5c14
 +If
 +.Pa ~/.ssh/rc
 +exists and the
-+.Xr sshd_config 5
++.Xr sshd_config 4
 +.Cm PermitUserRC
 +option is set, runs it; else if
 +.Pa /etc/ssh/sshrc
@@ -5122,32 +5477,25 @@ index 0000000..dac5c14
 +.Ql #
 +are ignored as
 +comments).
-+Protocol 1 public keys consist of the following space-separated fields:
-+options, bits, exponent, modulus, comment.
-+Protocol 2 public key consist of:
++Public keys consist of the following space-separated fields:
 +options, keytype, base64-encoded key, comment.
-+The options field is optional;
-+its presence is determined by whether the line starts
-+with a number or not (the options field never starts with a number).
-+The bits, exponent, modulus, and comment fields give the RSA key for
-+protocol version 1; the
-+comment field is not used for anything (but may be convenient for the
-+user to identify the key).
-+For protocol version 2 the keytype is
++The options field is optional.
++The keytype is
 +.Dq ecdsa-sha2-nistp256 ,
 +.Dq ecdsa-sha2-nistp384 ,
 +.Dq ecdsa-sha2-nistp521 ,
 +.Dq ssh-ed25519 ,
 +.Dq ssh-dss
 +or
-+.Dq ssh-rsa .
++.Dq ssh-rsa ;
++the comment field is not used for anything (but may be convenient for the
++user to identify the key).
 +.Pp
-+Note that lines in this file are usually several hundred bytes long
++Note that lines in this file can be several hundred bytes long
 +(because of the size of the public key encoding) up to a limit of
 +8 kilobytes, which permits DSA keys up to 8 kilobits and RSA
 +keys up to 16 kilobits.
 +You don't want to type them in; instead, copy the
-+.Pa identity.pub ,
 +.Pa id_dsa.pub ,
 +.Pa id_ecdsa.pub ,
 +.Pa id_ed25519.pub ,
@@ -5156,8 +5504,7 @@ index 0000000..dac5c14
 +file and edit it.
 +.Pp
 +.Nm
-+enforces a minimum RSA key modulus size for protocol 1
-+and protocol 2 keys of 768 bits.
++enforces a minimum RSA key modulus size of 768 bits.
 +.Pp
 +The options (if present) consist of comma-separated option
 +specifications.
@@ -5186,19 +5533,27 @@ index 0000000..dac5c14
 +one must not request a pty or should specify
 +.Cm no-pty .
 +A quote may be included in the command by quoting it with a backslash.
++.Pp
 +This option might be useful
 +to restrict certain public keys to perform just a specific operation.
 +An example might be a key that permits remote backups but nothing else.
 +Note that the client may specify TCP and/or X11
-+forwarding unless they are explicitly prohibited.
++forwarding unless they are explicitly prohibited, e.g. using the
++.Cm restrict
++key option.
++.Pp
 +The command originally supplied by the client is available in the
 +.Ev SSH_ORIGINAL_COMMAND
 +environment variable.
 +Note that this option applies to shell, command or subsystem execution.
-+Also note that this command may be superseded by either a
++Also note that this command may be superseded by a
 +.Xr sshd_config 4
 +.Cm ForceCommand
-+directive or a command embedded in a certificate.
++directive.
++.Pp
++If a command is specified and a forced-command is embedded in a certificate
++used for authentication, then the certificate will be accepted only if the
++two commands are identical.
 +.It Cm environment="NAME=value"
 +Specifies that the string is to be added to the environment when
 +logging in using this key.
@@ -5209,9 +5564,6 @@ index 0000000..dac5c14
 +controlled via the
 +.Cm PermitUserEnvironment
 +option.
-+This option is automatically disabled if
-+.Cm UseLogin
-+is enabled.
 +.It Cm from="pattern-list"
 +Specifies that in addition to public key authentication, either the canonical
 +name of the remote host or its IP address must be present in the
@@ -5335,7 +5687,7 @@ index 0000000..dac5c14
 +its key is added to the per-user file.
 +.Pp
 +Each line in these files contains the following fields: markers (optional),
-+hostnames, bits, exponent, modulus, comment.
++hostnames, keytype, base64-encoded key, comment.
 +The fields are separated by spaces.
 +.Pp
 +The marker is optional, but if it is present then it must be one of
@@ -5376,9 +5728,9 @@ index 0000000..dac5c14
 +Only one hashed hostname may appear on a single line and none of the above
 +negation or wildcard operators may be applied.
 +.Pp
-+Bits, exponent, and modulus are taken directly from the RSA host key; they
++The keytype and base64-encoded key are taken directly from the host key; they
 +can be obtained, for example, from
-+.Pa /etc/ssh/ssh_host_key.pub .
++.Pa /etc/ssh/ssh_host_rsa_key.pub .
 +The optional comment field continues to the end of the line, and is not used.
 +.Pp
 +Lines starting with
@@ -5417,8 +5769,8 @@ index 0000000..dac5c14
 +long, and you definitely don't want to type in the host keys by hand.
 +Rather, generate them by a script,
 +.Xr ssh-keyscan 1
-+or by taking
-+.Pa /etc/ssh/ssh_host_key.pub
++or by taking, for example,
++.Pa /etc/ssh/ssh_host_rsa_key.pub
 +and adding the host names at the front.
 +.Xr ssh-keygen 1
 +also offers some basic automated editing for
@@ -5557,7 +5909,6 @@ index 0000000..dac5c14
 +but allows host-based authentication without permitting login with
 +rlogin/rsh.
 +.Pp
-+.It Pa /etc/ssh/ssh_host_key
 +.It Pa /etc/ssh/ssh_host_dsa_key
 +.It Pa /etc/ssh/ssh_host_ecdsa_key
 +.It Pa /etc/ssh/ssh_host_ed25519_key
@@ -5569,7 +5920,6 @@ index 0000000..dac5c14
 +.Nm
 +does not start if these files are group/world-accessible.
 +.Pp
-+.It Pa /etc/ssh/ssh_host_key.pub
 +.It Pa /etc/ssh/ssh_host_dsa_key.pub
 +.It Pa /etc/ssh/ssh_host_ecdsa_key.pub
 +.It Pa /etc/ssh/ssh_host_ed25519_key.pub
@@ -5649,10 +5999,10 @@ index 0000000..dac5c14
 +for privilege separation.
 diff --git a/sshd.8 b/sshd.8
 deleted file mode 100644
-index 6c521f2..0000000
+index 41fc5051..00000000
 --- a/sshd.8
 +++ /dev/null
-@@ -1,1004 +0,0 @@
+@@ -1,947 +0,0 @@
 -.\"
 -.\" Author: Tatu Ylonen <ylo@cs.hut.fi>
 -.\" Copyright (c) 1995 Tatu Ylonen <ylo@cs.hut.fi>, Espoo, Finland
@@ -5688,8 +6038,8 @@ index 6c521f2..0000000
 -.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 -.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 -.\"
--.\" $OpenBSD: sshd.8,v 1.284 2016/02/17 07:38:19 jmc Exp $
--.Dd $Mdocdate: February 17 2016 $
+-.\" $OpenBSD: sshd.8,v 1.287 2016/11/30 02:57:40 djm Exp $
+-.Dd $Mdocdate: November 30 2016 $
 -.Dt SSHD 8
 -.Os
 -.Sh NAME
@@ -5699,14 +6049,12 @@ index 6c521f2..0000000
 -.Nm sshd
 -.Bk -words
 -.Op Fl 46DdeiqTt
--.Op Fl b Ar bits
 -.Op Fl C Ar connection_spec
 -.Op Fl c Ar host_certificate_file
 -.Op Fl E Ar log_file
 -.Op Fl f Ar config_file
 -.Op Fl g Ar login_grace_time
 -.Op Fl h Ar host_key_file
--.Op Fl k Ar key_gen_time
 -.Op Fl o Ar option
 -.Op Fl p Ar port
 -.Op Fl u Ar len
@@ -5751,9 +6099,6 @@ index 6c521f2..0000000
 -Forces
 -.Nm
 -to use IPv6 addresses only.
--.It Fl b Ar bits
--Specifies the number of bits in the ephemeral protocol version 1
--server key (default 1024).
 -.It Fl C Ar connection_spec
 -Specify the connection parameters to use for the
 -.Fl T
@@ -5824,36 +6169,18 @@ index 6c521f2..0000000
 -is not run as root (as the normal
 -host key files are normally not readable by anyone but root).
 -The default is
--.Pa /etc/ssh/ssh_host_key
--for protocol version 1, and
 -.Pa /etc/ssh/ssh_host_dsa_key ,
--.Pa /etc/ssh/ssh_host_ecdsa_key .
+-.Pa /etc/ssh/ssh_host_ecdsa_key ,
 -.Pa /etc/ssh/ssh_host_ed25519_key
 -and
--.Pa /etc/ssh/ssh_host_rsa_key
--for protocol version 2.
+-.Pa /etc/ssh/ssh_host_rsa_key .
 -It is possible to have multiple host key files for
--the different protocol versions and host key algorithms.
+-the different host key algorithms.
 -.It Fl i
 -Specifies that
 -.Nm
 -is being run from
 -.Xr inetd 8 .
--If SSH protocol 1 is enabled,
--.Nm
--should not  normally be run
--from inetd because it needs to generate the server key before it can
--respond to the client, and this may take some time.
--Clients may have to wait too long if the key was regenerated every time.
--.It Fl k Ar key_gen_time
--Specifies how often the ephemeral protocol version 1 server key is
--regenerated (default 3600 seconds, or one hour).
--The motivation for regenerating the key fairly
--often is that the key is not stored anywhere, and after about an hour
--it becomes impossible to recover the key for decrypting intercepted
--communications even if the machine is cracked into or physically
--seized.
--A value of zero indicates that the key will never be regenerated.
 -.It Fl o Ar option
 -Can be used to give options in the format used in the configuration file.
 -This is useful for specifying options for which there is no separate
@@ -5912,8 +6239,7 @@ index 6c521f2..0000000
 -from making DNS requests unless the authentication
 -mechanism or configuration requires it.
 -Authentication mechanisms that may require DNS include
--.Cm RhostsRSAAuthentication ,
--.Cm HostbasedAuthentication ,
+-.Cm HostbasedAuthentication
 -and using a
 -.Cm from="pattern-list"
 -option in a key file.
@@ -5924,42 +6250,14 @@ index 6c521f2..0000000
 -.Cm DenyUsers .
 -.El
 -.Sh AUTHENTICATION
--The OpenSSH SSH daemon supports SSH protocols 1 and 2.
--The default is to use protocol 2 only,
--though this can be changed via the
--.Cm Protocol
--option in
--.Xr sshd_config 5 .
--Protocol 1 should not be used
--and is only offered to support legacy devices.
--.Pp
+-The OpenSSH SSH daemon supports SSH protocol 2 only.
 -Each host has a host-specific key,
 -used to identify the host.
--Partial forward security for protocol 1 is provided through
--an additional server key,
--normally 1024 bits,
--generated when the server starts.
--This key is normally regenerated every hour if it has been used, and
--is never stored on disk.
 -Whenever a client connects, the daemon responds with its public
--host and server keys.
+-host key.
 -The client compares the
--RSA host key against its own database to verify that it has not changed.
--The client then generates a 256-bit random number.
--It encrypts this
--random number using both the host key and the server key, and sends
--the encrypted number to the server.
--Both sides then use this
--random number as a session key which is used to encrypt all further
--communications in the session.
--The rest of the session is encrypted
--using a conventional cipher, currently Blowfish or 3DES, with 3DES
--being used by default.
--The client selects the encryption algorithm
--to use from those offered by the server.
--.Pp
--For protocol 2,
--forward security is provided through a Diffie-Hellman key agreement.
+-host key against its own database to verify that it has not changed.
+-Forward security is provided through a Diffie-Hellman key agreement.
 -This key agreement results in a shared session key.
 -The rest of the session is encrypted using a symmetric cipher, currently
 -128-bit AES, Blowfish, 3DES, CAST128, Arcfour, 192-bit AES, or 256-bit AES.
@@ -6132,32 +6430,25 @@ index 6c521f2..0000000
 -.Ql #
 -are ignored as
 -comments).
--Protocol 1 public keys consist of the following space-separated fields:
--options, bits, exponent, modulus, comment.
--Protocol 2 public key consist of:
+-Public keys consist of the following space-separated fields:
 -options, keytype, base64-encoded key, comment.
--The options field is optional;
--its presence is determined by whether the line starts
--with a number or not (the options field never starts with a number).
--The bits, exponent, modulus, and comment fields give the RSA key for
--protocol version 1; the
--comment field is not used for anything (but may be convenient for the
--user to identify the key).
--For protocol version 2 the keytype is
+-The options field is optional.
+-The keytype is
 -.Dq ecdsa-sha2-nistp256 ,
 -.Dq ecdsa-sha2-nistp384 ,
 -.Dq ecdsa-sha2-nistp521 ,
 -.Dq ssh-ed25519 ,
 -.Dq ssh-dss
 -or
--.Dq ssh-rsa .
+-.Dq ssh-rsa ;
+-the comment field is not used for anything (but may be convenient for the
+-user to identify the key).
 -.Pp
--Note that lines in this file are usually several hundred bytes long
+-Note that lines in this file can be several hundred bytes long
 -(because of the size of the public key encoding) up to a limit of
 -8 kilobytes, which permits DSA keys up to 8 kilobits and RSA
 -keys up to 16 kilobits.
 -You don't want to type them in; instead, copy the
--.Pa identity.pub ,
 -.Pa id_dsa.pub ,
 -.Pa id_ecdsa.pub ,
 -.Pa id_ed25519.pub ,
@@ -6166,8 +6457,7 @@ index 6c521f2..0000000
 -file and edit it.
 -.Pp
 -.Nm
--enforces a minimum RSA key modulus size for protocol 1
--and protocol 2 keys of 768 bits.
+-enforces a minimum RSA key modulus size of 768 bits.
 -.Pp
 -The options (if present) consist of comma-separated option
 -specifications.
@@ -6196,19 +6486,27 @@ index 6c521f2..0000000
 -one must not request a pty or should specify
 -.Cm no-pty .
 -A quote may be included in the command by quoting it with a backslash.
+-.Pp
 -This option might be useful
 -to restrict certain public keys to perform just a specific operation.
 -An example might be a key that permits remote backups but nothing else.
 -Note that the client may specify TCP and/or X11
--forwarding unless they are explicitly prohibited.
+-forwarding unless they are explicitly prohibited, e.g. using the
+-.Cm restrict
+-key option.
+-.Pp
 -The command originally supplied by the client is available in the
 -.Ev SSH_ORIGINAL_COMMAND
 -environment variable.
 -Note that this option applies to shell, command or subsystem execution.
--Also note that this command may be superseded by either a
+-Also note that this command may be superseded by a
 -.Xr sshd_config 5
 -.Cm ForceCommand
--directive or a command embedded in a certificate.
+-directive.
+-.Pp
+-If a command is specified and a forced-command is embedded in a certificate
+-used for authentication, then the certificate will be accepted only if the
+-two commands are identical.
 -.It Cm environment="NAME=value"
 -Specifies that the string is to be added to the environment when
 -logging in using this key.
@@ -6219,9 +6517,6 @@ index 6c521f2..0000000
 -controlled via the
 -.Cm PermitUserEnvironment
 -option.
--This option is automatically disabled if
--.Cm UseLogin
--is enabled.
 -.It Cm from="pattern-list"
 -Specifies that in addition to public key authentication, either the canonical
 -name of the remote host or its IP address must be present in the
@@ -6345,7 +6640,7 @@ index 6c521f2..0000000
 -its key is added to the per-user file.
 -.Pp
 -Each line in these files contains the following fields: markers (optional),
--hostnames, bits, exponent, modulus, comment.
+-hostnames, keytype, base64-encoded key, comment.
 -The fields are separated by spaces.
 -.Pp
 -The marker is optional, but if it is present then it must be one of
@@ -6386,9 +6681,9 @@ index 6c521f2..0000000
 -Only one hashed hostname may appear on a single line and none of the above
 -negation or wildcard operators may be applied.
 -.Pp
--Bits, exponent, and modulus are taken directly from the RSA host key; they
+-The keytype and base64-encoded key are taken directly from the host key; they
 -can be obtained, for example, from
--.Pa /etc/ssh/ssh_host_key.pub .
+-.Pa /etc/ssh/ssh_host_rsa_key.pub .
 -The optional comment field continues to the end of the line, and is not used.
 -.Pp
 -Lines starting with
@@ -6427,8 +6722,8 @@ index 6c521f2..0000000
 -long, and you definitely don't want to type in the host keys by hand.
 -Rather, generate them by a script,
 -.Xr ssh-keyscan 1
--or by taking
--.Pa /etc/ssh/ssh_host_key.pub
+-or by taking, for example,
+-.Pa /etc/ssh/ssh_host_rsa_key.pub
 -and adding the host names at the front.
 -.Xr ssh-keygen 1
 -also offers some basic automated editing for
@@ -6567,7 +6862,6 @@ index 6c521f2..0000000
 -but allows host-based authentication without permitting login with
 -rlogin/rsh.
 -.Pp
--.It Pa /etc/ssh/ssh_host_key
 -.It Pa /etc/ssh/ssh_host_dsa_key
 -.It Pa /etc/ssh/ssh_host_ecdsa_key
 -.It Pa /etc/ssh/ssh_host_ed25519_key
@@ -6579,7 +6873,6 @@ index 6c521f2..0000000
 -.Nm
 -does not start if these files are group/world-accessible.
 -.Pp
--.It Pa /etc/ssh/ssh_host_key.pub
 -.It Pa /etc/ssh/ssh_host_dsa_key.pub
 -.It Pa /etc/ssh/ssh_host_ecdsa_key.pub
 -.It Pa /etc/ssh/ssh_host_ed25519_key.pub
@@ -6659,10 +6952,10 @@ index 6c521f2..0000000
 -for privilege separation.
 diff --git a/sshd_config.4 b/sshd_config.4
 new file mode 100644
-index 0000000..6351b43
+index 00000000..efb10c97
 --- /dev/null
 +++ b/sshd_config.4
-@@ -0,0 +1,1750 @@
+@@ -0,0 +1,1688 @@
 +.\"
 +.\" Author: Tatu Ylonen <ylo@cs.hut.fi>
 +.\" Copyright (c) 1995 Tatu Ylonen <ylo@cs.hut.fi>, Espoo, Finland
@@ -6698,8 +6991,8 @@ index 0000000..6351b43
 +.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 +.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 +.\"
-+.\" $OpenBSD: sshd_config.5,v 1.220 2016/02/17 08:57:34 djm Exp $
-+.Dd $Mdocdate: February 17 2016 $
++.\" $OpenBSD: sshd_config.5,v 1.239 2016/11/30 03:00:05 djm Exp $
++.Dd $Mdocdate: November 30 2016 $
 +.Dt SSHD_CONFIG 4
 +.Os
 +.Sh NAME
@@ -6755,19 +7048,18 @@ index 0000000..6351b43
 +Specifies which address family should be used by
 +.Xr sshd 1M .
 +Valid arguments are
-+.Dq any ,
-+.Dq inet
++.Cm any
++(the default),
++.Cm inet
 +(use IPv4 only), or
-+.Dq inet6
++.Cm inet6
 +(use IPv6 only).
-+The default is
-+.Dq any .
 +.It Cm AllowAgentForwarding
 +Specifies whether
 +.Xr ssh-agent 1
 +forwarding is permitted.
 +The default is
-+.Dq yes .
++.Cm yes .
 +Note that disabling agent forwarding does not improve security
 +unless users are also denied shell access, as they can always install
 +their own forwarders.
@@ -6788,44 +7080,42 @@ index 0000000..6351b43
 +See PATTERNS in
 +.Xr ssh_config 4
 +for more information on patterns.
-+.It Cm AllowTcpForwarding
-+Specifies whether TCP forwarding is permitted.
++.It Cm AllowStreamLocalForwarding
++Specifies whether StreamLocal (Unix-domain socket) forwarding is permitted.
 +The available options are
-+.Dq yes
++.Cm yes
++(the default)
 +or
-+.Dq all
-+to allow TCP forwarding,
-+.Dq no
-+to prevent all TCP forwarding,
-+.Dq local
++.Cm all
++to allow StreamLocal forwarding,
++.Cm no
++to prevent all StreamLocal forwarding,
++.Cm local
 +to allow local (from the perspective of
 +.Xr ssh 1 )
 +forwarding only or
-+.Dq remote
++.Cm remote
 +to allow remote forwarding only.
-+The default is
-+.Dq yes .
-+Note that disabling TCP forwarding does not improve security unless
++Note that disabling StreamLocal forwarding does not improve security unless
 +users are also denied shell access, as they can always install their
 +own forwarders.
-+.It Cm AllowStreamLocalForwarding
-+Specifies whether StreamLocal (Unix-domain socket) forwarding is permitted.
++.It Cm AllowTcpForwarding
++Specifies whether TCP forwarding is permitted.
 +The available options are
-+.Dq yes
++.Cm yes
++(the default)
 +or
-+.Dq all
-+to allow StreamLocal forwarding,
-+.Dq no
-+to prevent all StreamLocal forwarding,
-+.Dq local
++.Cm all
++to allow TCP forwarding,
++.Cm no
++to prevent all TCP forwarding,
++.Cm local
 +to allow local (from the perspective of
 +.Xr ssh 1 )
 +forwarding only or
-+.Dq remote
++.Cm remote
 +to allow remote forwarding only.
-+The default is
-+.Dq yes .
-+Note that disabling StreamLocal forwarding does not improve security unless
++Note that disabling TCP forwarding does not improve security unless
 +users are also denied shell access, as they can always install their
 +own forwarders.
 +.It Cm AllowUsers
@@ -6838,6 +7128,8 @@ index 0000000..6351b43
 +If the pattern takes the form USER@HOST then USER and HOST
 +are separately checked, restricting logins to particular
 +users from particular hosts.
++HOST criteria may additionally contain addresses to match in CIDR
++address/masklen format.
 +The allow/deny directives are processed in the following order:
 +.Cm DenyUsers ,
 +.Cm AllowUsers ,
@@ -6852,76 +7144,74 @@ index 0000000..6351b43
 +Specifies the authentication methods that must be successfully completed
 +for a user to be granted access.
 +This option must be followed by one or more comma-separated lists of
-+authentication method names.
-+Successful authentication requires completion of every method in at least
-+one of these lists.
++authentication method names, or by the single string
++.Cm any
++to indicate the default behaviour of accepting any single authentication
++method.
++If the default is overridden, then successful authentication requires
++completion of every method in at least one of these lists.
 +.Pp
-+For example, an argument of
-+.Dq publickey,password publickey,keyboard-interactive
++For example,
++.Qq publickey,password publickey,keyboard-interactive
 +would require the user to complete public key authentication, followed by
 +either password or keyboard interactive authentication.
 +Only methods that are next in one or more lists are offered at each stage,
-+so for this example, it would not be possible to attempt password or
++so for this example it would not be possible to attempt password or
 +keyboard-interactive authentication before public key.
 +.Pp
 +For keyboard interactive authentication it is also possible to
 +restrict authentication to a specific device by appending a
 +colon followed by the device identifier
-+.Dq bsdauth ,
-+.Dq pam ,
++.Cm bsdauth ,
++.Cm pam ,
 +or
-+.Dq skey ,
++.Cm skey ,
 +depending on the server configuration.
 +For example,
-+.Dq keyboard-interactive:bsdauth
++.Qq keyboard-interactive:bsdauth
 +would restrict keyboard interactive authentication to the
-+.Dq bsdauth
++.Cm bsdauth
 +device.
 +.Pp
-+If the
-+.Dq publickey
-+method is listed more than once,
-+.Xr sshd 8
++If the publickey method is listed more than once,
++.Xr sshd 1M
 +verifies that keys that have been used successfully are not reused for
 +subsequent authentications.
-+For example, an
-+.Cm AuthenticationMethods
-+of
-+.Dq publickey,publickey
-+will require successful authentication using two different public keys.
++For example,
++.Qq publickey,publickey
++requires successful authentication using two different public keys.
 +.Pp
-+This option will yield a fatal
-+error if enabled if protocol 1 is also enabled.
 +Note that each authentication method listed should also be explicitly enabled
 +in the configuration.
-+The default is not to require multiple authentication; successful completion
-+of a single authentication method is sufficient.
 +.It Cm AuthorizedKeysCommand
 +Specifies a program to be used to look up the user's public keys.
 +The program must be owned by root, not writable by group or others and
 +specified by an absolute path.
-+.Pp
 +Arguments to
 +.Cm AuthorizedKeysCommand
-+may be provided using the following tokens, which will be expanded
-+at runtime: %% is replaced by a literal '%', %u is replaced by the
-+username being authenticated, %h is replaced by the home directory
-+of the user being authenticated, %t is replaced with the key type
-+offered for authentication, %f is replaced with the fingerprint of
-+the key, and %k is replaced with the key being offered for authentication.
-+If no arguments are specified then the username of the target user
-+will be supplied.
++accept the tokens described in the
++.Sx TOKENS
++section.
++If no arguments are specified then the username of the target user is used.
 +.Pp
 +The program should produce on standard output zero or
-+more lines of authorized_keys output (see AUTHORIZED_KEYS in
++more lines of authorized_keys output (see
++.Sx AUTHORIZED_KEYS
++in
 +.Xr sshd 1M ) .
-+If a key supplied by AuthorizedKeysCommand does not successfully authenticate
++If a key supplied by
++.Cm AuthorizedKeysCommand
++does not successfully authenticate
 +and authorize the user then public key authentication continues using the usual
 +.Cm AuthorizedKeysFile
 +files.
-+By default, no AuthorizedKeysCommand is run.
++By default, no
++.Cm AuthorizedKeysCommand
++is run.
 +.It Cm AuthorizedKeysCommandUser
-+Specifies the user under whose account the AuthorizedKeysCommand is run.
++Specifies the user under whose account the
++.Cm AuthorizedKeysCommand
++is run.
 +It is recommended to use a dedicated user that has no other role on the host
 +than running authorized keys commands.
 +If
@@ -6929,44 +7219,41 @@ index 0000000..6351b43
 +is specified but
 +.Cm AuthorizedKeysCommandUser
 +is not, then
-+.Xr sshd 8
++.Xr sshd 1M
 +will refuse to start.
 +.It Cm AuthorizedKeysFile
-+Specifies the file that contains the public keys that can be used
-+for user authentication.
++Specifies the file that contains the public keys used for user authentication.
 +The format is described in the
-+AUTHORIZED_KEYS FILE FORMAT
++.Sx AUTHORIZED_KEYS FILE FORMAT
 +section of
 +.Xr sshd 1M .
++Arguments to
 +.Cm AuthorizedKeysFile
-+may contain tokens of the form %T which are substituted during connection
-+setup.
-+The following tokens are defined: %% is replaced by a literal '%',
-+%h is replaced by the home directory of the user being authenticated, and
-+%u is replaced by the username of that user.
++accept the tokens described in the
++.Sx TOKENS
++section.
 +After expansion,
 +.Cm AuthorizedKeysFile
 +is taken to be an absolute path or one relative to the user's home
 +directory.
 +Multiple files may be listed, separated by whitespace.
 +Alternately this option may be set to
-+.Dq none
++.Cm none
 +to skip checking for user keys in files.
 +The default is
-+.Dq .ssh/authorized_keys .ssh/authorized_keys2 .
++.Qq .ssh/authorized_keys .ssh/authorized_keys2 .
 +.It Cm AuthorizedPrincipalsCommand
 +Specifies a program to be used to generate the list of allowed
 +certificate principals as per
 +.Cm AuthorizedPrincipalsFile .
 +The program must be owned by root, not writable by group or others and
 +specified by an absolute path.
-+.Pp
 +Arguments to
 +.Cm AuthorizedPrincipalsCommand
-+may be provided using the following tokens, which will be expanded
-+at runtime: %% is replaced by a literal '%', %u is replaced by the
-+username being authenticated and %h is replaced by the home directory
-+of the user being authenticated.
++accept the tokens described in the
++.Sx TOKENS
++section.
++If no arguments are specified then the username of the target user is used.
 +.Pp
 +The program should produce on standard output zero or
 +more lines of
@@ -6978,9 +7265,13 @@ index 0000000..6351b43
 +.Cm AuthorizedPrincipalsFile
 +is specified, then certificates offered by the client for authentication
 +must contain a principal that is listed.
-+By default, no AuthorizedPrincipalsCommand is run.
++By default, no
++.Cm AuthorizedPrincipalsCommand
++is run.
 +.It Cm AuthorizedPrincipalsCommandUser
-+Specifies the user under whose account the AuthorizedPrincipalsCommand is run.
++Specifies the user under whose account the
++.Cm AuthorizedPrincipalsCommand
++is run.
 +It is recommended to use a dedicated user that has no other role on the host
 +than running authorized principals commands.
 +If
@@ -6988,7 +7279,7 @@ index 0000000..6351b43
 +is specified but
 +.Cm AuthorizedPrincipalsCommandUser
 +is not, then
-+.Xr sshd 8
++.Xr sshd 1M
 +will refuse to start.
 +.It Cm AuthorizedPrincipalsFile
 +Specifies a file that lists principal names that are accepted for
@@ -6997,29 +7288,28 @@ index 0000000..6351b43
 +.Cm TrustedUserCAKeys ,
 +this file lists names, one of which must appear in the certificate for it
 +to be accepted for authentication.
-+Names are listed one per line preceded by key options (as described
-+in AUTHORIZED_KEYS FILE FORMAT in
++Names are listed one per line preceded by key options (as described in
++.Sx AUTHORIZED_KEYS FILE FORMAT
++in
 +.Xr sshd 1M ) .
 +Empty lines and comments starting with
 +.Ql #
 +are ignored.
 +.Pp
++Arguments to
 +.Cm AuthorizedPrincipalsFile
-+may contain tokens of the form %T which are substituted during connection
-+setup.
-+The following tokens are defined: %% is replaced by a literal '%',
-+%h is replaced by the home directory of the user being authenticated, and
-+%u is replaced by the username of that user.
++accept the tokens described in the
++.Sx TOKENS
++section.
 +After expansion,
 +.Cm AuthorizedPrincipalsFile
-+is taken to be an absolute path or one relative to the user's home
-+directory.
-+.Pp
++is taken to be an absolute path or one relative to the user's home directory.
 +The default is
-+.Dq none ,
++.Cm none ,
 +i.e. not to use a principals file \(en in this case, the username
 +of the user must appear in a certificate's principals list for it to be
 +accepted.
++.Pp
 +Note that
 +.Cm AuthorizedPrincipalsFile
 +is only used when authentication proceeds using a CA listed in
@@ -7035,7 +7325,7 @@ index 0000000..6351b43
 +The contents of the specified file are sent to the remote user before
 +authentication is allowed.
 +If the argument is
-+.Dq none
++.Cm none
 +then no banner is displayed.
 +By default, no banner is displayed.
 +.It Cm ChallengeResponseAuthentication
@@ -7043,23 +7333,23 @@ index 0000000..6351b43
 +PAM or through authentication styles supported in
 +.Xr login.conf 5 )
 +The default is
-+.Dq yes .
++.Cm yes .
 +.It Cm ChrootDirectory
 +Specifies the pathname of a directory to
 +.Xr chroot 2
 +to after authentication.
 +At session startup
-+.Xr sshd 8
++.Xr sshd 1M
 +checks that all components of the pathname are root-owned directories
 +which are not writable by any other user or group.
 +After the chroot,
 +.Xr sshd 1M
 +changes the working directory to the user's home directory.
-+.Pp
-+The pathname may contain the following tokens that are expanded at runtime once
-+the connecting user has been authenticated: %% is replaced by a literal '%',
-+%h is replaced by the home directory of the user being authenticated, and
-+%u is replaced by the username of that user.
++Arguments to
++.Cm ChrootDirectory
++accept the tokens described in the
++.Sx TOKENS
++section.
 +.Pp
 +The
 +.Cm ChrootDirectory
@@ -7078,25 +7368,24 @@ index 0000000..6351b43
 +and
 +.Xr tty 4
 +devices.
-+For file transfer sessions using
-+.Dq sftp ,
-+no additional configuration of the environment is necessary if the
-+in-process sftp server is used,
++For file transfer sessions using SFTP
++no additional configuration of the environment is necessary if the in-process
++sftp-server is used,
 +though sessions which use logging may require
 +.Pa /dev/log
 +inside the chroot directory on some operating systems (see
-+.Xr sftp-server 8
++.Xr sftp-server 1M
 +for details).
 +.Pp
 +For safety, it is very important that the directory hierarchy be
 +prevented from modification by other processes on the system (especially
 +those outside the jail).
 +Misconfiguration can lead to unsafe environments which
-+.Xr sshd 8
++.Xr sshd 1M
 +cannot detect.
 +.Pp
 +The default is
-+.Dq none ,
++.Cm none ,
 +indicating not to
 +.Xr chroot 2 .
 +.It Cm Ciphers
@@ -7149,23 +7438,17 @@ index 0000000..6351b43
 +aes128-gcm@openssh.com,aes256-gcm@openssh.com
 +.Ed
 +.Pp
-+The list of available ciphers may also be obtained using the
-+.Fl Q
-+option of
-+.Xr ssh 1
-+with an argument of
-+.Dq cipher .
++The list of available ciphers may also be obtained using
++.Qq ssh -Q cipher .
 +.It Cm ClientAliveCountMax
-+Sets the number of client alive messages (see below) which may be
-+sent without
++Sets the number of client alive messages which may be sent without
 +.Xr sshd 1M
 +receiving any messages back from the client.
 +If this threshold is reached while client alive messages are being sent,
 +sshd will disconnect the client, terminating the session.
 +It is important to note that the use of client alive messages is very
 +different from
-+.Cm TCPKeepAlive
-+(below).
++.Cm TCPKeepAlive .
 +The client alive messages are sent through the encrypted channel
 +and therefore will not be spoofable.
 +The TCP keepalive option enabled by
@@ -7177,7 +7460,7 @@ index 0000000..6351b43
 +The default value is 3.
 +If
 +.Cm ClientAliveInterval
-+(see below) is set to 15, and
++is set to 15, and
 +.Cm ClientAliveCountMax
 +is left at the default, unresponsive SSH clients
 +will be disconnected after approximately 45 seconds.
@@ -7190,15 +7473,17 @@ index 0000000..6351b43
 +The default
 +is 0, indicating that these messages will not be sent to the client.
 +.It Cm Compression
-+Specifies whether compression is allowed, or delayed until
++Specifies whether compression is enabled after
 +the user has authenticated successfully.
 +The argument must be
-+.Dq yes ,
-+.Dq delayed ,
++.Cm yes ,
++.Cm delayed
++(a legacy synonym for
++.Cm yes )
 +or
-+.Dq no .
++.Cm no .
 +The default is
-+.Dq delayed .
++.Cm yes .
 +.It Cm DenyGroups
 +This keyword can be followed by a list of group name patterns, separated
 +by spaces.
@@ -7225,6 +7510,8 @@ index 0000000..6351b43
 +If the pattern takes the form USER@HOST then USER and HOST
 +are separately checked, restricting logins to particular
 +users from particular hosts.
++HOST criteria may additionally contain addresses to match in CIDR
++address/masklen format.
 +The allow/deny directives are processed in the following order:
 +.Cm DenyUsers ,
 +.Cm AllowUsers ,
@@ -7235,14 +7522,20 @@ index 0000000..6351b43
 +See PATTERNS in
 +.Xr ssh_config 4
 +for more information on patterns.
++.It Cm DisableForwarding
++Disables all forwarding features, including X11,
++.Xr ssh-agent 1 ,
++TCP and StreamLocal.
++This option overrides all other forwarding-related options and may
++simplify restricted configurations.
 +.It Cm FingerprintHash
 +Specifies the hash algorithm used when logging key fingerprints.
 +Valid options are:
-+.Dq md5
++.Cm md5
 +and
-+.Dq sha256 .
++.Cm sha256 .
 +The default is
-+.Dq sha256 .
++.Cm sha256 .
 +.It Cm ForceCommand
 +Forces the execution of the command specified by
 +.Cm ForceCommand ,
@@ -7258,12 +7551,12 @@ index 0000000..6351b43
 +.Ev SSH_ORIGINAL_COMMAND
 +environment variable.
 +Specifying a command of
-+.Dq internal-sftp
-+will force the use of an in-process sftp server that requires no support
++.Cm internal-sftp
++will force the use of an in-process SFTP server that requires no support
 +files when used with
 +.Cm ChrootDirectory .
 +The default is
-+.Dq none .
++.Cm none .
 +.It Cm GatewayPorts
 +Specifies whether remote hosts are allowed to connect to ports
 +forwarded for the client.
@@ -7276,38 +7569,37 @@ index 0000000..6351b43
 +should allow remote port forwardings to bind to non-loopback addresses, thus
 +allowing other hosts to connect.
 +The argument may be
-+.Dq no
++.Cm no
 +to force remote port forwardings to be available to the local host only,
-+.Dq yes
++.Cm yes
 +to force remote port forwardings to bind to the wildcard address, or
-+.Dq clientspecified
++.Cm clientspecified
 +to allow the client to select the address to which the forwarding is bound.
 +The default is
-+.Dq no .
++.Cm no .
 +.It Cm GSSAPIAuthentication
 +Specifies whether user authentication based on GSSAPI is allowed.
 +The default is
-+.Dq no .
++.Cm no .
 +.It Cm GSSAPICleanupCredentials
 +Specifies whether to automatically destroy the user's credentials cache
 +on logout.
 +The default is
-+.Dq yes .
++.Cm yes .
 +.It Cm GSSAPIStrictAcceptorCheck
 +Determines whether to be strict about the identity of the GSSAPI acceptor
 +a client authenticates against.
 +If set to
-+.Dq yes
-+then the client must authenticate against the
-+.Pa host
++.Cm yes
++then the client must authenticate against the host
 +service on the current hostname.
 +If set to
-+.Dq no
++.Cm no
 +then the client may authenticate against any service key stored in the
 +machine's default store.
 +This facility is provided to assist with operation on multi homed machines.
 +The default is
-+.Dq yes .
++.Cm yes .
 +.It Cm HostbasedAcceptedKeyTypes
 +Specifies the key types that will be accepted for hostbased authentication
 +as a comma-separated pattern list.
@@ -7326,17 +7618,14 @@ index 0000000..6351b43
 +ssh-ed25519,ssh-rsa
 +.Ed
 +.Pp
-+The
-+.Fl Q
-+option of
-+.Xr ssh 1
-+may be used to list supported key types.
++The list of available key types may also be obtained using
++.Qq ssh -Q key .
 +.It Cm HostbasedAuthentication
 +Specifies whether rhosts or /etc/hosts.equiv authentication together
 +with successful public key client host authentication is allowed
 +(host-based authentication).
 +The default is
-+.Dq no .
++.Cm no .
 +.It Cm HostbasedUsesNameFromPacketOnly
 +Specifies whether or not the server will attempt to perform a reverse
 +name lookup when matching the name in the
@@ -7347,13 +7636,13 @@ index 0000000..6351b43
 +files during
 +.Cm HostbasedAuthentication .
 +A setting of
-+.Dq yes
++.Cm yes
 +means that
 +.Xr sshd 1M
 +uses the name supplied by the client rather than
 +attempting to resolve the name from the TCP connection itself.
 +The default is
-+.Dq no .
++.Cm no .
 +.It Cm HostCertificate
 +Specifies a file containing a public host certificate.
 +The certificate's public key must match a private host key already specified
@@ -7365,15 +7654,12 @@ index 0000000..6351b43
 +.It Cm HostKey
 +Specifies a file containing a private host key
 +used by SSH.
-+The default is
-+.Pa /etc/ssh/ssh_host_key
-+for protocol version 1, and
++The defaults are
 +.Pa /etc/ssh/ssh_host_dsa_key ,
 +.Pa /etc/ssh/ssh_host_ecdsa_key ,
 +.Pa /etc/ssh/ssh_host_ed25519_key
 +and
-+.Pa /etc/ssh/ssh_host_rsa_key
-+for protocol version 2.
++.Pa /etc/ssh/ssh_host_rsa_key .
 +.Pp
 +Note that
 +.Xr sshd 1M
@@ -7384,14 +7670,6 @@ index 0000000..6351b43
 +.Xr sshd 1M .
 +.Pp
 +It is possible to have multiple host key files.
-+.Dq rsa1
-+keys are used for version 1 and
-+.Dq dsa ,
-+.Dq ecdsa ,
-+.Dq ed25519
-+or
-+.Dq rsa
-+are used for version 2 of the SSH protocol.
 +It is also possible to specify public host key files instead.
 +In this case operations on the private key will be delegated
 +to an
@@ -7399,8 +7677,8 @@ index 0000000..6351b43
 +.It Cm HostKeyAgent
 +Identifies the UNIX-domain socket used to communicate
 +with an agent that has access to the private host keys.
-+If
-+.Dq SSH_AUTH_SOCK
++If the string
++.Qq SSH_AUTH_SOCK
 +is specified, the location of the socket will be read from the
 +.Ev SSH_AUTH_SOCK
 +environment variable.
@@ -7418,20 +7696,14 @@ index 0000000..6351b43
 +ssh-ed25519,ssh-rsa
 +.Ed
 +.Pp
-+The list of available key types may also be obtained using the
-+.Fl Q
-+option of
-+.Xr ssh 1
-+with an argument of
-+.Dq key .
++The list of available key types may also be obtained using
++.Qq ssh -Q key .
 +.It Cm IgnoreRhosts
 +Specifies that
 +.Pa .rhosts
 +and
 +.Pa .shosts
 +files will not be used in
-+.Cm RhostsRSAAuthentication
-+or
 +.Cm HostbasedAuthentication .
 +.Pp
 +.Pa /etc/hosts.equiv
@@ -7439,66 +7711,64 @@ index 0000000..6351b43
 +.Pa /etc/shosts.equiv
 +are still used.
 +The default is
-+.Dq yes .
++.Cm yes .
 +.It Cm IgnoreUserKnownHosts
 +Specifies whether
 +.Xr sshd 1M
 +should ignore the user's
 +.Pa ~/.ssh/known_hosts
 +during
-+.Cm RhostsRSAAuthentication
-+or
 +.Cm HostbasedAuthentication .
 +The default is
-+.Dq no .
++.Cm no .
 +.It Cm IPQoS
 +Specifies the IPv4 type-of-service or DSCP class for the connection.
 +Accepted values are
-+.Dq af11 ,
-+.Dq af12 ,
-+.Dq af13 ,
-+.Dq af21 ,
-+.Dq af22 ,
-+.Dq af23 ,
-+.Dq af31 ,
-+.Dq af32 ,
-+.Dq af33 ,
-+.Dq af41 ,
-+.Dq af42 ,
-+.Dq af43 ,
-+.Dq cs0 ,
-+.Dq cs1 ,
-+.Dq cs2 ,
-+.Dq cs3 ,
-+.Dq cs4 ,
-+.Dq cs5 ,
-+.Dq cs6 ,
-+.Dq cs7 ,
-+.Dq ef ,
-+.Dq lowdelay ,
-+.Dq throughput ,
-+.Dq reliability ,
++.Cm af11 ,
++.Cm af12 ,
++.Cm af13 ,
++.Cm af21 ,
++.Cm af22 ,
++.Cm af23 ,
++.Cm af31 ,
++.Cm af32 ,
++.Cm af33 ,
++.Cm af41 ,
++.Cm af42 ,
++.Cm af43 ,
++.Cm cs0 ,
++.Cm cs1 ,
++.Cm cs2 ,
++.Cm cs3 ,
++.Cm cs4 ,
++.Cm cs5 ,
++.Cm cs6 ,
++.Cm cs7 ,
++.Cm ef ,
++.Cm lowdelay ,
++.Cm throughput ,
++.Cm reliability ,
 +or a numeric value.
 +This option may take one or two arguments, separated by whitespace.
 +If one argument is specified, it is used as the packet class unconditionally.
 +If two values are specified, the first is automatically selected for
 +interactive sessions and the second for non-interactive sessions.
 +The default is
-+.Dq lowdelay
++.Cm lowdelay
 +for interactive sessions and
-+.Dq throughput
++.Cm throughput
 +for non-interactive sessions.
 +.It Cm KbdInteractiveAuthentication
 +Specifies whether to allow keyboard-interactive authentication.
 +The argument to this keyword must be
-+.Dq yes
++.Cm yes
 +or
-+.Dq no .
++.Cm no .
 +The default is to use whatever value
 +.Cm ChallengeResponseAuthentication
 +is set to
 +(by default
-+.Dq yes ) .
++.Cm yes ) .
 +.It Cm KerberosAuthentication
 +Specifies whether the password provided by the user for
 +.Cm PasswordAuthentication
@@ -7506,24 +7776,24 @@ index 0000000..6351b43
 +To use this option, the server needs a
 +Kerberos servtab which allows the verification of the KDC's identity.
 +The default is
-+.Dq no .
++.Cm no .
 +.It Cm KerberosGetAFSToken
 +If AFS is active and the user has a Kerberos 5 TGT, attempt to acquire
 +an AFS token before accessing the user's home directory.
 +The default is
-+.Dq no .
++.Cm no .
 +.It Cm KerberosOrLocalPasswd
 +If password authentication through Kerberos fails then
 +the password will be validated via any additional local mechanism
 +such as
 +.Pa /etc/passwd .
 +The default is
-+.Dq yes .
++.Cm yes .
 +.It Cm KerberosTicketCleanup
 +Specifies whether to automatically destroy the user's ticket cache
 +file on logout.
 +The default is
-+.Dq yes .
++.Cm yes .
 +.It Cm KexAlgorithms
 +Specifies the available KEX (Key Exchange) algorithms.
 +Multiple algorithms must be comma-separated.
@@ -7535,6 +7805,8 @@ index 0000000..6351b43
 +.Pp
 +.Bl -item -compact -offset indent
 +.It
++curve25519-sha256
++.It
 +curve25519-sha256@libssh.org
 +.It
 +diffie-hellman-group1-sha1
@@ -7554,27 +7826,14 @@ index 0000000..6351b43
 +.Pp
 +The default is:
 +.Bd -literal -offset indent
-+curve25519-sha256@libssh.org,
++curve25519-sha256,curve25519-sha256@libssh.org,
 +ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,
 +diffie-hellman-group-exchange-sha256,
 +diffie-hellman-group14-sha1
 +.Ed
 +.Pp
-+The list of available key exchange algorithms may also be obtained using the
-+.Fl Q
-+option of
-+.Xr ssh 1
-+with an argument of
-+.Dq kex .
-+.It Cm KeyRegenerationInterval
-+In protocol version 1, the ephemeral server key is automatically regenerated
-+after this many seconds (if it has been used).
-+The purpose of regeneration is to prevent
-+decrypting captured sessions by later breaking into the machine and
-+stealing the keys.
-+The key is never stored anywhere.
-+If the value is 0, the key is never regenerated.
-+The default is 3600 (seconds).
++The list of available key exchange algorithms may also be obtained using
++.Qq ssh -Q kex .
 +.It Cm ListenAddress
 +Specifies the local addresses
 +.Xr sshd 1M
@@ -7634,7 +7893,7 @@ index 0000000..6351b43
 +instead of replacing them.
 +.Pp
 +The algorithms that contain
-+.Dq -etm
++.Qq -etm
 +calculate the MAC after encryption (encrypt-then-mac).
 +These are considered safer and their use recommended.
 +The supported MACs are:
@@ -7687,12 +7946,8 @@ index 0000000..6351b43
 +hmac-sha2-256,hmac-sha2-512,hmac-sha1
 +.Ed
 +.Pp
-+The list of available MAC algorithms may also be obtained using the
-+.Fl Q
-+option of
-+.Xr ssh 1
-+with an argument of
-+.Dq mac .
++The list of available MAC algorithms may also be obtained using
++.Qq ssh -Q mac .
 +.It Cm Match
 +Introduces a conditional block.
 +If all of the criteria on the
@@ -7721,24 +7976,19 @@ index 0000000..6351b43
 +.Cm Address .
 +The match patterns may consist of single entries or comma-separated
 +lists and may use the wildcard and negation operators described in the
-+PATTERNS section of
++.Sx PATTERNS
++section of
 +.Xr ssh_config 4 .
 +.Pp
 +The patterns in an
 +.Cm Address
 +criteria may additionally contain addresses to match in CIDR
-+address/masklen format, e.g.\&
-+.Dq 192.0.2.0/24
-+or
-+.Dq 3ffe:ffff::/32 .
++address/masklen format,
++such as 192.0.2.0/24 or 2001:db8::/32.
 +Note that the mask length provided must be consistent with the address -
 +it is an error to specify a mask length that is too long for the address
 +or one with bits set in this host portion of the address.
-+For example,
-+.Dq 192.0.2.0/33
-+and
-+.Dq 192.0.2.0/8
-+respectively.
++For example, 192.0.2.0/33 and 192.0.2.0/8, respectively.
 +.Pp
 +Only a subset of keywords may be used on the lines following a
 +.Cm Match
@@ -7759,6 +8009,8 @@ index 0000000..6351b43
 +.Cm AuthorizedPrincipalsFile ,
 +.Cm Banner ,
 +.Cm ChrootDirectory ,
++.Cm ClientAliveCountMax ,
++.Cm ClientAliveInterval ,
 +.Cm DenyGroups ,
 +.Cm DenyUsers ,
 +.Cm ForceCommand ,
@@ -7783,8 +8035,6 @@ index 0000000..6351b43
 +.Cm PubkeyAuthentication ,
 +.Cm RekeyLimit ,
 +.Cm RevokedKeys ,
-+.Cm RhostsRSAAuthentication ,
-+.Cm RSAAuthentication ,
 +.Cm StreamLocalBindMask ,
 +.Cm StreamLocalBindUnlink ,
 +.Cm TrustedUserCAKeys ,
@@ -7819,29 +8069,21 @@ index 0000000..6351b43
 +.Pp
 +Alternatively, random early drop can be enabled by specifying
 +the three colon separated values
-+.Dq start:rate:full
-+(e.g. "10:30:60").
++start:rate:full (e.g. "10:30:60").
 +.Xr sshd 1M
-+will refuse connection attempts with a probability of
-+.Dq rate/100
-+(30%)
-+if there are currently
-+.Dq start
-+(10)
-+unauthenticated connections.
++will refuse connection attempts with a probability of rate/100 (30%)
++if there are currently start (10) unauthenticated connections.
 +The probability increases linearly and all connection attempts
-+are refused if the number of unauthenticated connections reaches
-+.Dq full
-+(60).
++are refused if the number of unauthenticated connections reaches full (60).
 +.It Cm PasswordAuthentication
 +Specifies whether password authentication is allowed.
 +The default is
-+.Dq yes .
++.Cm yes .
 +.It Cm PermitEmptyPasswords
 +When password authentication is allowed, it specifies whether the
 +server allows login to accounts with empty password strings.
 +The default is
-+.Dq no .
++.Cm no .
 +.It Cm PermitOpen
 +Specifies the destinations to which TCP port forwarding is permitted.
 +The forwarding specification must be one of the following forms:
@@ -7866,33 +8108,36 @@ index 0000000..6351b43
 +.Pp
 +Multiple forwards may be specified by separating them with whitespace.
 +An argument of
-+.Dq any
++.Cm any
 +can be used to remove all restrictions and permit any forwarding requests.
 +An argument of
-+.Dq none
++.Cm none
 +can be used to prohibit all forwarding requests.
++The wildcard
++.Sq *
++can be used for host or port to allow all hosts or ports, respectively.
 +By default all port forwarding requests are permitted.
 +.It Cm PermitRootLogin
 +Specifies whether root can log in using
 +.Xr ssh 1 .
 +The argument must be
-+.Dq yes ,
-+.Dq prohibit-password ,
-+.Dq without-password ,
-+.Dq forced-commands-only ,
++.Cm yes ,
++.Cm prohibit-password ,
++.Cm without-password ,
++.Cm forced-commands-only ,
 +or
-+.Dq no .
++.Cm no .
 +The default is
-+.Dq prohibit-password .
++.Cm prohibit-password .
 +.Pp
 +If this option is set to
-+.Dq prohibit-password
++.Cm prohibit-password
 +or
-+.Dq without-password ,
++.Cm without-password ,
 +password and keyboard-interactive authentication are disabled for root.
 +.Pp
 +If this option is set to
-+.Dq forced-commands-only ,
++.Cm forced-commands-only ,
 +root login with public key authentication will be allowed,
 +but only if the
 +.Ar command
@@ -7902,37 +8147,37 @@ index 0000000..6351b43
 +All other authentication methods are disabled for root.
 +.Pp
 +If this option is set to
-+.Dq no ,
++.Cm no ,
 +root is not allowed to log in.
++.It Cm PermitTTY
++Specifies whether
++.Xr pty 4
++allocation is permitted.
++The default is
++.Cm yes .
 +.It Cm PermitTunnel
 +Specifies whether
 +.Xr tun 4
 +device forwarding is allowed.
 +The argument must be
-+.Dq yes ,
-+.Dq point-to-point
++.Cm yes ,
++.Cm point-to-point
 +(layer 3),
-+.Dq ethernet
++.Cm ethernet
 +(layer 2), or
-+.Dq no .
++.Cm no .
 +Specifying
-+.Dq yes
++.Cm yes
 +permits both
-+.Dq point-to-point
++.Cm point-to-point
 +and
-+.Dq ethernet .
++.Cm ethernet .
 +The default is
-+.Dq no .
++.Cm no .
 +.Pp
 +Independent of this setting, the permissions of the selected
 +.Xr tun 4
 +device must allow access to the user.
-+.It Cm PermitTTY
-+Specifies whether
-+.Xr pty 4
-+allocation is permitted.
-+The default is
-+.Dq yes .
 +.It Cm PermitUserEnvironment
 +Specifies whether
 +.Pa ~/.ssh/environment
@@ -7943,7 +8188,7 @@ index 0000000..6351b43
 +are processed by
 +.Xr sshd 1M .
 +The default is
-+.Dq no .
++.Cm no .
 +Enabling environment processing may enable users to bypass access
 +restrictions in some configurations using mechanisms such as
 +.Ev LD_PRELOAD .
@@ -7952,11 +8197,11 @@ index 0000000..6351b43
 +.Pa ~/.ssh/rc
 +file is executed.
 +The default is
-+.Dq yes .
++.Cm yes .
 +.It Cm PidFile
 +Specifies the file that contains the process ID of the
 +SSH daemon, or
-+.Dq none
++.Cm none
 +to not write one.
 +The default is
 +.Pa /var/run/sshd.pid .
@@ -7982,32 +8227,10 @@ index 0000000..6351b43
 +.Pa /etc/motd
 +when a user logs in interactively.
 +(On some systems it is also printed by the shell,
-+.Pa /etc/profile ,
-+or equivalent.)
-+The default is
-+.Dq yes .
-+.It Cm Protocol
-+Specifies the protocol versions
-+.Xr sshd 1M
-+supports.
-+The possible values are
-+.Sq 1
-+and
-+.Sq 2 .
-+Multiple versions must be comma-separated.
++.Pa /etc/profile ,
++or equivalent.)
 +The default is
-+.Sq 2 .
-+Protocol 1 suffers from a number of cryptographic weaknesses and should
-+not be used.
-+It is only offered to support legacy devices.
-+.Pp
-+Note that the order of the protocol list does not indicate preference,
-+because the client selects among multiple protocol versions offered
-+by the server.
-+Specifying
-+.Dq 2,1
-+is identical to
-+.Dq 1,2 .
++.Cm yes .
 +.It Cm PubkeyAcceptedKeyTypes
 +Specifies the key types that will be accepted for public key authentication
 +as a comma-separated pattern list.
@@ -8026,15 +8249,12 @@ index 0000000..6351b43
 +ssh-ed25519,ssh-rsa
 +.Ed
 +.Pp
-+The
-+.Fl Q
-+option of
-+.Xr ssh 1
-+may be used to list supported key types.
++The list of available key types may also be obtained using
++.Qq ssh -Q key .
 +.It Cm PubkeyAuthentication
 +Specifies whether public key authentication is allowed.
 +The default is
-+.Dq yes .
++.Cm yes .
 +.It Cm RekeyLimit
 +Specifies the maximum amount of data that may be transmitted before the
 +session key is renegotiated, optionally followed a maximum amount of
@@ -8057,12 +8277,12 @@ index 0000000..6351b43
 +The default value for
 +.Cm RekeyLimit
 +is
-+.Dq default none ,
++.Cm default none ,
 +which means that rekeying is performed after the cipher's default amount
 +of data has been sent or received and no time based rekeying is done.
 +.It Cm RevokedKeys
 +Specifies revoked public keys file, or
-+.Dq none
++.Cm none
 +to not use one.
 +Keys listed in this file will be refused for public key authentication.
 +Note that if this file is not readable, then public key authentication will
@@ -8072,20 +8292,6 @@ index 0000000..6351b43
 +.Xr ssh-keygen 1 .
 +For more information on KRLs, see the KEY REVOCATION LISTS section in
 +.Xr ssh-keygen 1 .
-+.It Cm RhostsRSAAuthentication
-+Specifies whether rhosts or /etc/hosts.equiv authentication together
-+with successful RSA host authentication is allowed.
-+The default is
-+.Dq no .
-+This option applies to protocol version 1 only.
-+.It Cm RSAAuthentication
-+Specifies whether pure RSA authentication is allowed.
-+The default is
-+.Dq yes .
-+This option applies to protocol version 1 only.
-+.It Cm ServerKeyBits
-+Defines the number of bits in the ephemeral protocol version 1 server key.
-+The default and minimum value is 1024.
 +.It Cm StreamLocalBindMask
 +Sets the octal file creation mode mask
 +.Pq umask
@@ -8108,11 +8314,11 @@ index 0000000..6351b43
 +This option is only used for port forwarding to a Unix-domain socket file.
 +.Pp
 +The argument must be
-+.Dq yes
++.Cm yes
 +or
-+.Dq no .
++.Cm no .
 +The default is
-+.Dq no .
++.Cm no .
 +.It Cm StrictModes
 +Specifies whether
 +.Xr sshd 1M
@@ -8121,7 +8327,7 @@ index 0000000..6351b43
 +This is normally desirable because novices sometimes accidentally leave their
 +directory or files world-writable.
 +The default is
-+.Dq yes .
++.Cm yes .
 +Note that this does not apply to
 +.Cm ChrootDirectory ,
 +whose permissions and ownership are checked unconditionally.
@@ -8131,16 +8337,12 @@ index 0000000..6351b43
 +to execute upon subsystem request.
 +.Pp
 +The command
-+.Xr sftp-server 8
-+implements the
-+.Dq sftp
-+file transfer subsystem.
++.Cm sftp-server
++implements the SFTP file transfer subsystem.
 +.Pp
 +Alternately the name
-+.Dq internal-sftp
-+implements an in-process
-+.Dq sftp
-+server.
++.Cm internal-sftp
++implements an in-process SFTP server.
 +This may simplify configurations using
 +.Cm ChrootDirectory
 +to force a different filesystem root on clients.
@@ -8162,21 +8364,21 @@ index 0000000..6351b43
 +find it annoying.
 +On the other hand, if TCP keepalives are not sent,
 +sessions may hang indefinitely on the server, leaving
-+.Dq ghost
++.Qq ghost
 +users and consuming server resources.
 +.Pp
 +The default is
-+.Dq yes
++.Cm yes
 +(to send TCP keepalive messages), and the server will notice
 +if the network goes down or the client host crashes.
 +This avoids infinitely hanging sessions.
 +.Pp
 +To disable TCP keepalive messages, the value should be set to
-+.Dq no .
++.Cm no .
 +.It Cm TrustedUserCAKeys
 +Specifies a file containing public keys of certificate authorities that are
 +trusted to sign user certificates for authentication, or
-+.Dq none
++.Cm none
 +to not use one.
 +Keys are listed one per line; empty lines and comments starting with
 +.Ql #
@@ -8197,38 +8399,19 @@ index 0000000..6351b43
 +very same IP address.
 +.Pp
 +If this option is set to
-+.Dq no
++.Cm no
 +(the default) then only addresses and not host names may be used in
-+.Pa ~/.ssh/known_hosts
++.Pa ~/.ssh/authorized_keys
 +.Cm from
 +and
 +.Nm
 +.Cm Match
 +.Cm Host
 +directives.
-+.It Cm UseLogin
-+Specifies whether
-+.Xr login 1
-+is used for interactive login sessions.
-+The default is
-+.Dq no .
-+Note that
-+.Xr login 1
-+is never used for remote command execution.
-+Note also, that if this is enabled,
-+.Cm X11Forwarding
-+will be disabled because
-+.Xr login 1
-+does not know how to handle
-+.Xr xauth 1
-+cookies.
-+If
-+.Cm UsePrivilegeSeparation
-+is specified, it will be disabled after authentication.
 +.It Cm UsePAM
 +Enables the Pluggable Authentication Module interface.
 +If set to
-+.Dq yes
++.Cm yes
 +this will enable PAM authentication using
 +.Cm ChallengeResponseAuthentication
 +and
@@ -8248,7 +8431,7 @@ index 0000000..6351b43
 +.Xr sshd 1M
 +as a non-root user.
 +The default is
-+.Dq no .
++.Cm no .
 +.It Cm UsePrivilegeSeparation
 +Specifies whether
 +.Xr sshd 1M
@@ -8259,23 +8442,23 @@ index 0000000..6351b43
 +The goal of privilege separation is to prevent privilege
 +escalation by containing any corruption within the unprivileged processes.
 +The argument must be
-+.Dq yes ,
-+.Dq no ,
++.Cm yes ,
++.Cm no ,
 +or
-+.Dq sandbox .
++.Cm sandbox .
 +If
 +.Cm UsePrivilegeSeparation
 +is set to
-+.Dq sandbox
++.Cm sandbox
 +then the pre-authentication unprivileged process is subject to additional
 +restrictions.
 +The default is
-+.Dq sandbox .
++.Cm sandbox .
 +.It Cm VersionAddendum
 +Optionally specifies additional text to append to the SSH protocol banner
 +sent by the server upon connection.
 +The default is
-+.Dq none .
++.Cm none .
 +.It Cm X11DisplayOffset
 +Specifies the first display number available for
 +.Xr sshd 1M Ns 's
@@ -8285,18 +8468,18 @@ index 0000000..6351b43
 +.It Cm X11Forwarding
 +Specifies whether X11 forwarding is permitted.
 +The argument must be
-+.Dq yes
++.Cm yes
 +or
-+.Dq no .
++.Cm no .
 +The default is
-+.Dq no .
++.Cm no .
 +.Pp
 +When X11 forwarding is enabled, there may be additional exposure to
 +the server and to client displays if the
 +.Xr sshd 1M
 +proxy display is configured to listen on the wildcard address (see
-+.Cm X11UseLocalhost
-+below), though this is not the default.
++.Cm X11UseLocalhost ) ,
++though this is not the default.
 +Additionally, the authentication spoofing and authentication data
 +verification and substitution occur on the client side.
 +The security risk of using X11 forwarding is that the client's X11
@@ -8308,14 +8491,11 @@ index 0000000..6351b43
 +A system administrator may have a stance in which they want to
 +protect clients that may expose themselves to attack by unwittingly
 +requesting X11 forwarding, which can warrant a
-+.Dq no
++.Cm no
 +setting.
 +.Pp
 +Note that disabling X11 forwarding does not prevent users from
 +forwarding X11 traffic, as users can always install their own forwarders.
-+X11 forwarding is automatically disabled if
-+.Cm UseLogin
-+is enabled.
 +.It Cm X11UseLocalhost
 +Specifies whether
 +.Xr sshd 1M
@@ -8326,26 +8506,26 @@ index 0000000..6351b43
 +hostname part of the
 +.Ev DISPLAY
 +environment variable to
-+.Dq localhost .
++.Cm localhost .
 +This prevents remote hosts from connecting to the proxy display.
 +However, some older X11 clients may not function with this
 +configuration.
 +.Cm X11UseLocalhost
 +may be set to
-+.Dq no
++.Cm no
 +to specify that the forwarding server should be bound to the wildcard
 +address.
 +The argument must be
-+.Dq yes
++.Cm yes
 +or
-+.Dq no .
++.Cm no .
 +The default is
-+.Dq yes .
++.Cm yes .
 +.It Cm XAuthLocation
 +Specifies the full pathname of the
 +.Xr xauth 1
 +program, or
-+.Dq none
++.Cm none
 +to not use one.
 +The default is
 +.Pa /usr/X11R6/bin/xauth .
@@ -8391,6 +8571,50 @@ index 0000000..6351b43
 +.It 1h30m
 +1 hour 30 minutes (90 minutes)
 +.El
++.Sh TOKENS
++Arguments to some keywords can make use of tokens,
++which are expanded at runtime:
++.Pp
++.Bl -tag -width XXXX -offset indent -compact
++.It %%
++A literal
++.Sq % .
++.It %F
++The fingerprint of the CA key.
++.It %f
++The fingerprint of the key or certificate.
++.It %h
++The home directory of the user.
++.It %i
++The key ID in the certificate.
++.It %K
++The base64-encoded CA key.
++.It %k
++The base64-encoded key or certificate for authentication.
++.It %s
++The serial number of the certificate.
++.It \&%T
++The type of the CA key.
++.It %t
++The key or certificate type.
++.It %u
++The username.
++.El
++.Pp
++.Cm AuthorizedKeysCommand
++accepts the tokens %%, %f, %h, %t, and %u.
++.Pp
++.Cm AuthorizedKeysFile
++accepts the tokens %%, %h, and %u.
++.Pp
++.Cm AuthorizedPrincipalsCommand
++accepts the tokens %%, %F, %f, %K, %k, %h, %i, %s, %T, %t, and %u.
++.Pp
++.Cm AuthorizedPrincipalsFile
++accepts the tokens %%, %h, and %u.
++.Pp
++.Cm ChrootDirectory
++accepts the tokens %%, %h, and %u.
 +.Sh FILES
 +.Bl -tag -width Ds
 +.It Pa /etc/ssh/sshd_config
@@ -8400,25 +8624,32 @@ index 0000000..6351b43
 +(though not necessary) that it be world-readable.
 +.El
 +.Sh SEE ALSO
++.Xr sftp-server 1M ,
 +.Xr sshd 1M ,
 +.Xr pam_unix_session 5
 +.Sh AUTHORS
++.An -nosplit
 +OpenSSH is a derivative of the original and free
-+ssh 1.2.12 release by Tatu Ylonen.
-+Aaron Campbell, Bob Beck, Markus Friedl, Niels Provos,
-+Theo de Raadt and Dug Song
++ssh 1.2.12 release by
++.An Tatu Ylonen .
++.An Aaron Campbell , Bob Beck , Markus Friedl , Niels Provos ,
++.An Theo de Raadt
++and
++.An Dug Song
 +removed many bugs, re-added newer features and
 +created OpenSSH.
-+Markus Friedl contributed the support for SSH
-+protocol versions 1.5 and 2.0.
-+Niels Provos and Markus Friedl contributed support
-+for privilege separation.
++.An Markus Friedl
++contributed the support for SSH protocol versions 1.5 and 2.0.
++.An Niels Provos
++and
++.An Markus Friedl
++contributed support for privilege separation.
 diff --git a/sshd_config.5 b/sshd_config.5
 deleted file mode 100644
-index 0e4ab0e..0000000
+index 9eea74bd..00000000
 --- a/sshd_config.5
 +++ /dev/null
-@@ -1,1750 +0,0 @@
+@@ -1,1688 +0,0 @@
 -.\"
 -.\" Author: Tatu Ylonen <ylo@cs.hut.fi>
 -.\" Copyright (c) 1995 Tatu Ylonen <ylo@cs.hut.fi>, Espoo, Finland
@@ -8454,8 +8685,8 @@ index 0e4ab0e..0000000
 -.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 -.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 -.\"
--.\" $OpenBSD: sshd_config.5,v 1.220 2016/02/17 08:57:34 djm Exp $
--.Dd $Mdocdate: February 17 2016 $
+-.\" $OpenBSD: sshd_config.5,v 1.239 2016/11/30 03:00:05 djm Exp $
+-.Dd $Mdocdate: November 30 2016 $
 -.Dt SSHD_CONFIG 5
 -.Os
 -.Sh NAME
@@ -8511,19 +8742,18 @@ index 0e4ab0e..0000000
 -Specifies which address family should be used by
 -.Xr sshd 8 .
 -Valid arguments are
--.Dq any ,
--.Dq inet
+-.Cm any
+-(the default),
+-.Cm inet
 -(use IPv4 only), or
--.Dq inet6
+-.Cm inet6
 -(use IPv6 only).
--The default is
--.Dq any .
 -.It Cm AllowAgentForwarding
 -Specifies whether
 -.Xr ssh-agent 1
 -forwarding is permitted.
 -The default is
--.Dq yes .
+-.Cm yes .
 -Note that disabling agent forwarding does not improve security
 -unless users are also denied shell access, as they can always install
 -their own forwarders.
@@ -8544,44 +8774,42 @@ index 0e4ab0e..0000000
 -See PATTERNS in
 -.Xr ssh_config 5
 -for more information on patterns.
--.It Cm AllowTcpForwarding
--Specifies whether TCP forwarding is permitted.
+-.It Cm AllowStreamLocalForwarding
+-Specifies whether StreamLocal (Unix-domain socket) forwarding is permitted.
 -The available options are
--.Dq yes
+-.Cm yes
+-(the default)
 -or
--.Dq all
--to allow TCP forwarding,
--.Dq no
--to prevent all TCP forwarding,
--.Dq local
+-.Cm all
+-to allow StreamLocal forwarding,
+-.Cm no
+-to prevent all StreamLocal forwarding,
+-.Cm local
 -to allow local (from the perspective of
 -.Xr ssh 1 )
 -forwarding only or
--.Dq remote
+-.Cm remote
 -to allow remote forwarding only.
--The default is
--.Dq yes .
--Note that disabling TCP forwarding does not improve security unless
+-Note that disabling StreamLocal forwarding does not improve security unless
 -users are also denied shell access, as they can always install their
 -own forwarders.
--.It Cm AllowStreamLocalForwarding
--Specifies whether StreamLocal (Unix-domain socket) forwarding is permitted.
+-.It Cm AllowTcpForwarding
+-Specifies whether TCP forwarding is permitted.
 -The available options are
--.Dq yes
+-.Cm yes
+-(the default)
 -or
--.Dq all
--to allow StreamLocal forwarding,
--.Dq no
--to prevent all StreamLocal forwarding,
--.Dq local
+-.Cm all
+-to allow TCP forwarding,
+-.Cm no
+-to prevent all TCP forwarding,
+-.Cm local
 -to allow local (from the perspective of
 -.Xr ssh 1 )
 -forwarding only or
--.Dq remote
+-.Cm remote
 -to allow remote forwarding only.
--The default is
--.Dq yes .
--Note that disabling StreamLocal forwarding does not improve security unless
+-Note that disabling TCP forwarding does not improve security unless
 -users are also denied shell access, as they can always install their
 -own forwarders.
 -.It Cm AllowUsers
@@ -8594,6 +8822,8 @@ index 0e4ab0e..0000000
 -If the pattern takes the form USER@HOST then USER and HOST
 -are separately checked, restricting logins to particular
 -users from particular hosts.
+-HOST criteria may additionally contain addresses to match in CIDR
+-address/masklen format.
 -The allow/deny directives are processed in the following order:
 -.Cm DenyUsers ,
 -.Cm AllowUsers ,
@@ -8608,76 +8838,74 @@ index 0e4ab0e..0000000
 -Specifies the authentication methods that must be successfully completed
 -for a user to be granted access.
 -This option must be followed by one or more comma-separated lists of
--authentication method names.
--Successful authentication requires completion of every method in at least
--one of these lists.
+-authentication method names, or by the single string
+-.Cm any
+-to indicate the default behaviour of accepting any single authentication
+-method.
+-If the default is overridden, then successful authentication requires
+-completion of every method in at least one of these lists.
 -.Pp
--For example, an argument of
--.Dq publickey,password publickey,keyboard-interactive
+-For example,
+-.Qq publickey,password publickey,keyboard-interactive
 -would require the user to complete public key authentication, followed by
 -either password or keyboard interactive authentication.
 -Only methods that are next in one or more lists are offered at each stage,
--so for this example, it would not be possible to attempt password or
+-so for this example it would not be possible to attempt password or
 -keyboard-interactive authentication before public key.
 -.Pp
 -For keyboard interactive authentication it is also possible to
 -restrict authentication to a specific device by appending a
 -colon followed by the device identifier
--.Dq bsdauth ,
--.Dq pam ,
+-.Cm bsdauth ,
+-.Cm pam ,
 -or
--.Dq skey ,
+-.Cm skey ,
 -depending on the server configuration.
 -For example,
--.Dq keyboard-interactive:bsdauth
+-.Qq keyboard-interactive:bsdauth
 -would restrict keyboard interactive authentication to the
--.Dq bsdauth
+-.Cm bsdauth
 -device.
 -.Pp
--If the
--.Dq publickey
--method is listed more than once,
+-If the publickey method is listed more than once,
 -.Xr sshd 8
 -verifies that keys that have been used successfully are not reused for
 -subsequent authentications.
--For example, an
--.Cm AuthenticationMethods
--of
--.Dq publickey,publickey
--will require successful authentication using two different public keys.
+-For example,
+-.Qq publickey,publickey
+-requires successful authentication using two different public keys.
 -.Pp
--This option will yield a fatal
--error if enabled if protocol 1 is also enabled.
 -Note that each authentication method listed should also be explicitly enabled
 -in the configuration.
--The default is not to require multiple authentication; successful completion
--of a single authentication method is sufficient.
 -.It Cm AuthorizedKeysCommand
 -Specifies a program to be used to look up the user's public keys.
 -The program must be owned by root, not writable by group or others and
 -specified by an absolute path.
--.Pp
 -Arguments to
 -.Cm AuthorizedKeysCommand
--may be provided using the following tokens, which will be expanded
--at runtime: %% is replaced by a literal '%', %u is replaced by the
--username being authenticated, %h is replaced by the home directory
--of the user being authenticated, %t is replaced with the key type
--offered for authentication, %f is replaced with the fingerprint of
--the key, and %k is replaced with the key being offered for authentication.
--If no arguments are specified then the username of the target user
--will be supplied.
+-accept the tokens described in the
+-.Sx TOKENS
+-section.
+-If no arguments are specified then the username of the target user is used.
 -.Pp
 -The program should produce on standard output zero or
--more lines of authorized_keys output (see AUTHORIZED_KEYS in
+-more lines of authorized_keys output (see
+-.Sx AUTHORIZED_KEYS
+-in
 -.Xr sshd 8 ) .
--If a key supplied by AuthorizedKeysCommand does not successfully authenticate
+-If a key supplied by
+-.Cm AuthorizedKeysCommand
+-does not successfully authenticate
 -and authorize the user then public key authentication continues using the usual
 -.Cm AuthorizedKeysFile
 -files.
--By default, no AuthorizedKeysCommand is run.
+-By default, no
+-.Cm AuthorizedKeysCommand
+-is run.
 -.It Cm AuthorizedKeysCommandUser
--Specifies the user under whose account the AuthorizedKeysCommand is run.
+-Specifies the user under whose account the
+-.Cm AuthorizedKeysCommand
+-is run.
 -It is recommended to use a dedicated user that has no other role on the host
 -than running authorized keys commands.
 -If
@@ -8688,41 +8916,38 @@ index 0e4ab0e..0000000
 -.Xr sshd 8
 -will refuse to start.
 -.It Cm AuthorizedKeysFile
--Specifies the file that contains the public keys that can be used
--for user authentication.
+-Specifies the file that contains the public keys used for user authentication.
 -The format is described in the
--AUTHORIZED_KEYS FILE FORMAT
+-.Sx AUTHORIZED_KEYS FILE FORMAT
 -section of
 -.Xr sshd 8 .
+-Arguments to
 -.Cm AuthorizedKeysFile
--may contain tokens of the form %T which are substituted during connection
--setup.
--The following tokens are defined: %% is replaced by a literal '%',
--%h is replaced by the home directory of the user being authenticated, and
--%u is replaced by the username of that user.
+-accept the tokens described in the
+-.Sx TOKENS
+-section.
 -After expansion,
 -.Cm AuthorizedKeysFile
 -is taken to be an absolute path or one relative to the user's home
 -directory.
 -Multiple files may be listed, separated by whitespace.
 -Alternately this option may be set to
--.Dq none
+-.Cm none
 -to skip checking for user keys in files.
 -The default is
--.Dq .ssh/authorized_keys .ssh/authorized_keys2 .
+-.Qq .ssh/authorized_keys .ssh/authorized_keys2 .
 -.It Cm AuthorizedPrincipalsCommand
 -Specifies a program to be used to generate the list of allowed
 -certificate principals as per
 -.Cm AuthorizedPrincipalsFile .
 -The program must be owned by root, not writable by group or others and
 -specified by an absolute path.
--.Pp
 -Arguments to
 -.Cm AuthorizedPrincipalsCommand
--may be provided using the following tokens, which will be expanded
--at runtime: %% is replaced by a literal '%', %u is replaced by the
--username being authenticated and %h is replaced by the home directory
--of the user being authenticated.
+-accept the tokens described in the
+-.Sx TOKENS
+-section.
+-If no arguments are specified then the username of the target user is used.
 -.Pp
 -The program should produce on standard output zero or
 -more lines of
@@ -8734,9 +8959,13 @@ index 0e4ab0e..0000000
 -.Cm AuthorizedPrincipalsFile
 -is specified, then certificates offered by the client for authentication
 -must contain a principal that is listed.
--By default, no AuthorizedPrincipalsCommand is run.
+-By default, no
+-.Cm AuthorizedPrincipalsCommand
+-is run.
 -.It Cm AuthorizedPrincipalsCommandUser
--Specifies the user under whose account the AuthorizedPrincipalsCommand is run.
+-Specifies the user under whose account the
+-.Cm AuthorizedPrincipalsCommand
+-is run.
 -It is recommended to use a dedicated user that has no other role on the host
 -than running authorized principals commands.
 -If
@@ -8753,29 +8982,28 @@ index 0e4ab0e..0000000
 -.Cm TrustedUserCAKeys ,
 -this file lists names, one of which must appear in the certificate for it
 -to be accepted for authentication.
--Names are listed one per line preceded by key options (as described
--in AUTHORIZED_KEYS FILE FORMAT in
+-Names are listed one per line preceded by key options (as described in
+-.Sx AUTHORIZED_KEYS FILE FORMAT
+-in
 -.Xr sshd 8 ) .
 -Empty lines and comments starting with
 -.Ql #
 -are ignored.
 -.Pp
+-Arguments to
 -.Cm AuthorizedPrincipalsFile
--may contain tokens of the form %T which are substituted during connection
--setup.
--The following tokens are defined: %% is replaced by a literal '%',
--%h is replaced by the home directory of the user being authenticated, and
--%u is replaced by the username of that user.
+-accept the tokens described in the
+-.Sx TOKENS
+-section.
 -After expansion,
 -.Cm AuthorizedPrincipalsFile
--is taken to be an absolute path or one relative to the user's home
--directory.
--.Pp
+-is taken to be an absolute path or one relative to the user's home directory.
 -The default is
--.Dq none ,
+-.Cm none ,
 -i.e. not to use a principals file \(en in this case, the username
 -of the user must appear in a certificate's principals list for it to be
 -accepted.
+-.Pp
 -Note that
 -.Cm AuthorizedPrincipalsFile
 -is only used when authentication proceeds using a CA listed in
@@ -8791,7 +9019,7 @@ index 0e4ab0e..0000000
 -The contents of the specified file are sent to the remote user before
 -authentication is allowed.
 -If the argument is
--.Dq none
+-.Cm none
 -then no banner is displayed.
 -By default, no banner is displayed.
 -.It Cm ChallengeResponseAuthentication
@@ -8799,7 +9027,7 @@ index 0e4ab0e..0000000
 -PAM or through authentication styles supported in
 -.Xr login.conf 5 )
 -The default is
--.Dq yes .
+-.Cm yes .
 -.It Cm ChrootDirectory
 -Specifies the pathname of a directory to
 -.Xr chroot 2
@@ -8811,11 +9039,11 @@ index 0e4ab0e..0000000
 -After the chroot,
 -.Xr sshd 8
 -changes the working directory to the user's home directory.
--.Pp
--The pathname may contain the following tokens that are expanded at runtime once
--the connecting user has been authenticated: %% is replaced by a literal '%',
--%h is replaced by the home directory of the user being authenticated, and
--%u is replaced by the username of that user.
+-Arguments to
+-.Cm ChrootDirectory
+-accept the tokens described in the
+-.Sx TOKENS
+-section.
 -.Pp
 -The
 -.Cm ChrootDirectory
@@ -8834,10 +9062,9 @@ index 0e4ab0e..0000000
 -and
 -.Xr tty 4
 -devices.
--For file transfer sessions using
--.Dq sftp ,
--no additional configuration of the environment is necessary if the
--in-process sftp server is used,
+-For file transfer sessions using SFTP
+-no additional configuration of the environment is necessary if the in-process
+-sftp-server is used,
 -though sessions which use logging may require
 -.Pa /dev/log
 -inside the chroot directory on some operating systems (see
@@ -8852,7 +9079,7 @@ index 0e4ab0e..0000000
 -cannot detect.
 -.Pp
 -The default is
--.Dq none ,
+-.Cm none ,
 -indicating not to
 -.Xr chroot 2 .
 -.It Cm Ciphers
@@ -8905,23 +9132,17 @@ index 0e4ab0e..0000000
 -aes128-gcm@openssh.com,aes256-gcm@openssh.com
 -.Ed
 -.Pp
--The list of available ciphers may also be obtained using the
--.Fl Q
--option of
--.Xr ssh 1
--with an argument of
--.Dq cipher .
+-The list of available ciphers may also be obtained using
+-.Qq ssh -Q cipher .
 -.It Cm ClientAliveCountMax
--Sets the number of client alive messages (see below) which may be
--sent without
+-Sets the number of client alive messages which may be sent without
 -.Xr sshd 8
 -receiving any messages back from the client.
 -If this threshold is reached while client alive messages are being sent,
 -sshd will disconnect the client, terminating the session.
 -It is important to note that the use of client alive messages is very
 -different from
--.Cm TCPKeepAlive
--(below).
+-.Cm TCPKeepAlive .
 -The client alive messages are sent through the encrypted channel
 -and therefore will not be spoofable.
 -The TCP keepalive option enabled by
@@ -8933,7 +9154,7 @@ index 0e4ab0e..0000000
 -The default value is 3.
 -If
 -.Cm ClientAliveInterval
--(see below) is set to 15, and
+-is set to 15, and
 -.Cm ClientAliveCountMax
 -is left at the default, unresponsive SSH clients
 -will be disconnected after approximately 45 seconds.
@@ -8946,15 +9167,17 @@ index 0e4ab0e..0000000
 -The default
 -is 0, indicating that these messages will not be sent to the client.
 -.It Cm Compression
--Specifies whether compression is allowed, or delayed until
+-Specifies whether compression is enabled after
 -the user has authenticated successfully.
 -The argument must be
--.Dq yes ,
--.Dq delayed ,
+-.Cm yes ,
+-.Cm delayed
+-(a legacy synonym for
+-.Cm yes )
 -or
--.Dq no .
+-.Cm no .
 -The default is
--.Dq delayed .
+-.Cm yes .
 -.It Cm DenyGroups
 -This keyword can be followed by a list of group name patterns, separated
 -by spaces.
@@ -8981,6 +9204,8 @@ index 0e4ab0e..0000000
 -If the pattern takes the form USER@HOST then USER and HOST
 -are separately checked, restricting logins to particular
 -users from particular hosts.
+-HOST criteria may additionally contain addresses to match in CIDR
+-address/masklen format.
 -The allow/deny directives are processed in the following order:
 -.Cm DenyUsers ,
 -.Cm AllowUsers ,
@@ -8991,14 +9216,20 @@ index 0e4ab0e..0000000
 -See PATTERNS in
 -.Xr ssh_config 5
 -for more information on patterns.
+-.It Cm DisableForwarding
+-Disables all forwarding features, including X11,
+-.Xr ssh-agent 1 ,
+-TCP and StreamLocal.
+-This option overrides all other forwarding-related options and may
+-simplify restricted configurations.
 -.It Cm FingerprintHash
 -Specifies the hash algorithm used when logging key fingerprints.
 -Valid options are:
--.Dq md5
+-.Cm md5
 -and
--.Dq sha256 .
+-.Cm sha256 .
 -The default is
--.Dq sha256 .
+-.Cm sha256 .
 -.It Cm ForceCommand
 -Forces the execution of the command specified by
 -.Cm ForceCommand ,
@@ -9014,12 +9245,12 @@ index 0e4ab0e..0000000
 -.Ev SSH_ORIGINAL_COMMAND
 -environment variable.
 -Specifying a command of
--.Dq internal-sftp
--will force the use of an in-process sftp server that requires no support
+-.Cm internal-sftp
+-will force the use of an in-process SFTP server that requires no support
 -files when used with
 -.Cm ChrootDirectory .
 -The default is
--.Dq none .
+-.Cm none .
 -.It Cm GatewayPorts
 -Specifies whether remote hosts are allowed to connect to ports
 -forwarded for the client.
@@ -9032,38 +9263,37 @@ index 0e4ab0e..0000000
 -should allow remote port forwardings to bind to non-loopback addresses, thus
 -allowing other hosts to connect.
 -The argument may be
--.Dq no
+-.Cm no
 -to force remote port forwardings to be available to the local host only,
--.Dq yes
+-.Cm yes
 -to force remote port forwardings to bind to the wildcard address, or
--.Dq clientspecified
+-.Cm clientspecified
 -to allow the client to select the address to which the forwarding is bound.
 -The default is
--.Dq no .
+-.Cm no .
 -.It Cm GSSAPIAuthentication
 -Specifies whether user authentication based on GSSAPI is allowed.
 -The default is
--.Dq no .
+-.Cm no .
 -.It Cm GSSAPICleanupCredentials
 -Specifies whether to automatically destroy the user's credentials cache
 -on logout.
 -The default is
--.Dq yes .
+-.Cm yes .
 -.It Cm GSSAPIStrictAcceptorCheck
 -Determines whether to be strict about the identity of the GSSAPI acceptor
 -a client authenticates against.
 -If set to
--.Dq yes
--then the client must authenticate against the
--.Pa host
+-.Cm yes
+-then the client must authenticate against the host
 -service on the current hostname.
 -If set to
--.Dq no
+-.Cm no
 -then the client may authenticate against any service key stored in the
 -machine's default store.
 -This facility is provided to assist with operation on multi homed machines.
 -The default is
--.Dq yes .
+-.Cm yes .
 -.It Cm HostbasedAcceptedKeyTypes
 -Specifies the key types that will be accepted for hostbased authentication
 -as a comma-separated pattern list.
@@ -9082,17 +9312,14 @@ index 0e4ab0e..0000000
 -ssh-ed25519,ssh-rsa
 -.Ed
 -.Pp
--The
--.Fl Q
--option of
--.Xr ssh 1
--may be used to list supported key types.
+-The list of available key types may also be obtained using
+-.Qq ssh -Q key .
 -.It Cm HostbasedAuthentication
 -Specifies whether rhosts or /etc/hosts.equiv authentication together
 -with successful public key client host authentication is allowed
 -(host-based authentication).
 -The default is
--.Dq no .
+-.Cm no .
 -.It Cm HostbasedUsesNameFromPacketOnly
 -Specifies whether or not the server will attempt to perform a reverse
 -name lookup when matching the name in the
@@ -9103,13 +9330,13 @@ index 0e4ab0e..0000000
 -files during
 -.Cm HostbasedAuthentication .
 -A setting of
--.Dq yes
+-.Cm yes
 -means that
 -.Xr sshd 8
 -uses the name supplied by the client rather than
 -attempting to resolve the name from the TCP connection itself.
 -The default is
--.Dq no .
+-.Cm no .
 -.It Cm HostCertificate
 -Specifies a file containing a public host certificate.
 -The certificate's public key must match a private host key already specified
@@ -9121,15 +9348,12 @@ index 0e4ab0e..0000000
 -.It Cm HostKey
 -Specifies a file containing a private host key
 -used by SSH.
--The default is
--.Pa /etc/ssh/ssh_host_key
--for protocol version 1, and
+-The defaults are
 -.Pa /etc/ssh/ssh_host_dsa_key ,
 -.Pa /etc/ssh/ssh_host_ecdsa_key ,
 -.Pa /etc/ssh/ssh_host_ed25519_key
 -and
--.Pa /etc/ssh/ssh_host_rsa_key
--for protocol version 2.
+-.Pa /etc/ssh/ssh_host_rsa_key .
 -.Pp
 -Note that
 -.Xr sshd 8
@@ -9140,14 +9364,6 @@ index 0e4ab0e..0000000
 -.Xr sshd 8 .
 -.Pp
 -It is possible to have multiple host key files.
--.Dq rsa1
--keys are used for version 1 and
--.Dq dsa ,
--.Dq ecdsa ,
--.Dq ed25519
--or
--.Dq rsa
--are used for version 2 of the SSH protocol.
 -It is also possible to specify public host key files instead.
 -In this case operations on the private key will be delegated
 -to an
@@ -9155,8 +9371,8 @@ index 0e4ab0e..0000000
 -.It Cm HostKeyAgent
 -Identifies the UNIX-domain socket used to communicate
 -with an agent that has access to the private host keys.
--If
--.Dq SSH_AUTH_SOCK
+-If the string
+-.Qq SSH_AUTH_SOCK
 -is specified, the location of the socket will be read from the
 -.Ev SSH_AUTH_SOCK
 -environment variable.
@@ -9174,20 +9390,14 @@ index 0e4ab0e..0000000
 -ssh-ed25519,ssh-rsa
 -.Ed
 -.Pp
--The list of available key types may also be obtained using the
--.Fl Q
--option of
--.Xr ssh 1
--with an argument of
--.Dq key .
+-The list of available key types may also be obtained using
+-.Qq ssh -Q key .
 -.It Cm IgnoreRhosts
 -Specifies that
 -.Pa .rhosts
 -and
 -.Pa .shosts
 -files will not be used in
--.Cm RhostsRSAAuthentication
--or
 -.Cm HostbasedAuthentication .
 -.Pp
 -.Pa /etc/hosts.equiv
@@ -9195,66 +9405,64 @@ index 0e4ab0e..0000000
 -.Pa /etc/shosts.equiv
 -are still used.
 -The default is
--.Dq yes .
+-.Cm yes .
 -.It Cm IgnoreUserKnownHosts
 -Specifies whether
 -.Xr sshd 8
 -should ignore the user's
 -.Pa ~/.ssh/known_hosts
 -during
--.Cm RhostsRSAAuthentication
--or
 -.Cm HostbasedAuthentication .
 -The default is
--.Dq no .
+-.Cm no .
 -.It Cm IPQoS
 -Specifies the IPv4 type-of-service or DSCP class for the connection.
 -Accepted values are
--.Dq af11 ,
--.Dq af12 ,
--.Dq af13 ,
--.Dq af21 ,
--.Dq af22 ,
--.Dq af23 ,
--.Dq af31 ,
--.Dq af32 ,
--.Dq af33 ,
--.Dq af41 ,
--.Dq af42 ,
--.Dq af43 ,
--.Dq cs0 ,
--.Dq cs1 ,
--.Dq cs2 ,
--.Dq cs3 ,
--.Dq cs4 ,
--.Dq cs5 ,
--.Dq cs6 ,
--.Dq cs7 ,
--.Dq ef ,
--.Dq lowdelay ,
--.Dq throughput ,
--.Dq reliability ,
+-.Cm af11 ,
+-.Cm af12 ,
+-.Cm af13 ,
+-.Cm af21 ,
+-.Cm af22 ,
+-.Cm af23 ,
+-.Cm af31 ,
+-.Cm af32 ,
+-.Cm af33 ,
+-.Cm af41 ,
+-.Cm af42 ,
+-.Cm af43 ,
+-.Cm cs0 ,
+-.Cm cs1 ,
+-.Cm cs2 ,
+-.Cm cs3 ,
+-.Cm cs4 ,
+-.Cm cs5 ,
+-.Cm cs6 ,
+-.Cm cs7 ,
+-.Cm ef ,
+-.Cm lowdelay ,
+-.Cm throughput ,
+-.Cm reliability ,
 -or a numeric value.
 -This option may take one or two arguments, separated by whitespace.
 -If one argument is specified, it is used as the packet class unconditionally.
 -If two values are specified, the first is automatically selected for
 -interactive sessions and the second for non-interactive sessions.
 -The default is
--.Dq lowdelay
+-.Cm lowdelay
 -for interactive sessions and
--.Dq throughput
+-.Cm throughput
 -for non-interactive sessions.
 -.It Cm KbdInteractiveAuthentication
 -Specifies whether to allow keyboard-interactive authentication.
 -The argument to this keyword must be
--.Dq yes
+-.Cm yes
 -or
--.Dq no .
+-.Cm no .
 -The default is to use whatever value
 -.Cm ChallengeResponseAuthentication
 -is set to
 -(by default
--.Dq yes ) .
+-.Cm yes ) .
 -.It Cm KerberosAuthentication
 -Specifies whether the password provided by the user for
 -.Cm PasswordAuthentication
@@ -9262,24 +9470,24 @@ index 0e4ab0e..0000000
 -To use this option, the server needs a
 -Kerberos servtab which allows the verification of the KDC's identity.
 -The default is
--.Dq no .
+-.Cm no .
 -.It Cm KerberosGetAFSToken
 -If AFS is active and the user has a Kerberos 5 TGT, attempt to acquire
 -an AFS token before accessing the user's home directory.
 -The default is
--.Dq no .
+-.Cm no .
 -.It Cm KerberosOrLocalPasswd
 -If password authentication through Kerberos fails then
 -the password will be validated via any additional local mechanism
 -such as
 -.Pa /etc/passwd .
 -The default is
--.Dq yes .
+-.Cm yes .
 -.It Cm KerberosTicketCleanup
 -Specifies whether to automatically destroy the user's ticket cache
 -file on logout.
 -The default is
--.Dq yes .
+-.Cm yes .
 -.It Cm KexAlgorithms
 -Specifies the available KEX (Key Exchange) algorithms.
 -Multiple algorithms must be comma-separated.
@@ -9291,6 +9499,8 @@ index 0e4ab0e..0000000
 -.Pp
 -.Bl -item -compact -offset indent
 -.It
+-curve25519-sha256
+-.It
 -curve25519-sha256@libssh.org
 -.It
 -diffie-hellman-group1-sha1
@@ -9310,27 +9520,14 @@ index 0e4ab0e..0000000
 -.Pp
 -The default is:
 -.Bd -literal -offset indent
--curve25519-sha256@libssh.org,
+-curve25519-sha256,curve25519-sha256@libssh.org,
 -ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,
 -diffie-hellman-group-exchange-sha256,
 -diffie-hellman-group14-sha1
 -.Ed
 -.Pp
--The list of available key exchange algorithms may also be obtained using the
--.Fl Q
--option of
--.Xr ssh 1
--with an argument of
--.Dq kex .
--.It Cm KeyRegenerationInterval
--In protocol version 1, the ephemeral server key is automatically regenerated
--after this many seconds (if it has been used).
--The purpose of regeneration is to prevent
--decrypting captured sessions by later breaking into the machine and
--stealing the keys.
--The key is never stored anywhere.
--If the value is 0, the key is never regenerated.
--The default is 3600 (seconds).
+-The list of available key exchange algorithms may also be obtained using
+-.Qq ssh -Q kex .
 -.It Cm ListenAddress
 -Specifies the local addresses
 -.Xr sshd 8
@@ -9390,7 +9587,7 @@ index 0e4ab0e..0000000
 -instead of replacing them.
 -.Pp
 -The algorithms that contain
--.Dq -etm
+-.Qq -etm
 -calculate the MAC after encryption (encrypt-then-mac).
 -These are considered safer and their use recommended.
 -The supported MACs are:
@@ -9443,12 +9640,8 @@ index 0e4ab0e..0000000
 -hmac-sha2-256,hmac-sha2-512,hmac-sha1
 -.Ed
 -.Pp
--The list of available MAC algorithms may also be obtained using the
--.Fl Q
--option of
--.Xr ssh 1
--with an argument of
--.Dq mac .
+-The list of available MAC algorithms may also be obtained using
+-.Qq ssh -Q mac .
 -.It Cm Match
 -Introduces a conditional block.
 -If all of the criteria on the
@@ -9477,24 +9670,19 @@ index 0e4ab0e..0000000
 -.Cm Address .
 -The match patterns may consist of single entries or comma-separated
 -lists and may use the wildcard and negation operators described in the
--PATTERNS section of
+-.Sx PATTERNS
+-section of
 -.Xr ssh_config 5 .
 -.Pp
 -The patterns in an
 -.Cm Address
 -criteria may additionally contain addresses to match in CIDR
--address/masklen format, e.g.\&
--.Dq 192.0.2.0/24
--or
--.Dq 3ffe:ffff::/32 .
+-address/masklen format,
+-such as 192.0.2.0/24 or 2001:db8::/32.
 -Note that the mask length provided must be consistent with the address -
 -it is an error to specify a mask length that is too long for the address
 -or one with bits set in this host portion of the address.
--For example,
--.Dq 192.0.2.0/33
--and
--.Dq 192.0.2.0/8
--respectively.
+-For example, 192.0.2.0/33 and 192.0.2.0/8, respectively.
 -.Pp
 -Only a subset of keywords may be used on the lines following a
 -.Cm Match
@@ -9515,6 +9703,8 @@ index 0e4ab0e..0000000
 -.Cm AuthorizedPrincipalsFile ,
 -.Cm Banner ,
 -.Cm ChrootDirectory ,
+-.Cm ClientAliveCountMax ,
+-.Cm ClientAliveInterval ,
 -.Cm DenyGroups ,
 -.Cm DenyUsers ,
 -.Cm ForceCommand ,
@@ -9539,8 +9729,6 @@ index 0e4ab0e..0000000
 -.Cm PubkeyAuthentication ,
 -.Cm RekeyLimit ,
 -.Cm RevokedKeys ,
--.Cm RhostsRSAAuthentication ,
--.Cm RSAAuthentication ,
 -.Cm StreamLocalBindMask ,
 -.Cm StreamLocalBindUnlink ,
 -.Cm TrustedUserCAKeys ,
@@ -9575,29 +9763,21 @@ index 0e4ab0e..0000000
 -.Pp
 -Alternatively, random early drop can be enabled by specifying
 -the three colon separated values
--.Dq start:rate:full
--(e.g. "10:30:60").
+-start:rate:full (e.g. "10:30:60").
 -.Xr sshd 8
--will refuse connection attempts with a probability of
--.Dq rate/100
--(30%)
--if there are currently
--.Dq start
--(10)
--unauthenticated connections.
+-will refuse connection attempts with a probability of rate/100 (30%)
+-if there are currently start (10) unauthenticated connections.
 -The probability increases linearly and all connection attempts
--are refused if the number of unauthenticated connections reaches
--.Dq full
--(60).
+-are refused if the number of unauthenticated connections reaches full (60).
 -.It Cm PasswordAuthentication
 -Specifies whether password authentication is allowed.
 -The default is
--.Dq yes .
+-.Cm yes .
 -.It Cm PermitEmptyPasswords
 -When password authentication is allowed, it specifies whether the
 -server allows login to accounts with empty password strings.
 -The default is
--.Dq no .
+-.Cm no .
 -.It Cm PermitOpen
 -Specifies the destinations to which TCP port forwarding is permitted.
 -The forwarding specification must be one of the following forms:
@@ -9622,33 +9802,36 @@ index 0e4ab0e..0000000
 -.Pp
 -Multiple forwards may be specified by separating them with whitespace.
 -An argument of
--.Dq any
+-.Cm any
 -can be used to remove all restrictions and permit any forwarding requests.
 -An argument of
--.Dq none
+-.Cm none
 -can be used to prohibit all forwarding requests.
+-The wildcard
+-.Sq *
+-can be used for host or port to allow all hosts or ports, respectively.
 -By default all port forwarding requests are permitted.
 -.It Cm PermitRootLogin
 -Specifies whether root can log in using
 -.Xr ssh 1 .
 -The argument must be
--.Dq yes ,
--.Dq prohibit-password ,
--.Dq without-password ,
--.Dq forced-commands-only ,
+-.Cm yes ,
+-.Cm prohibit-password ,
+-.Cm without-password ,
+-.Cm forced-commands-only ,
 -or
--.Dq no .
+-.Cm no .
 -The default is
--.Dq prohibit-password .
+-.Cm prohibit-password .
 -.Pp
 -If this option is set to
--.Dq prohibit-password
+-.Cm prohibit-password
 -or
--.Dq without-password ,
+-.Cm without-password ,
 -password and keyboard-interactive authentication are disabled for root.
 -.Pp
 -If this option is set to
--.Dq forced-commands-only ,
+-.Cm forced-commands-only ,
 -root login with public key authentication will be allowed,
 -but only if the
 -.Ar command
@@ -9658,37 +9841,37 @@ index 0e4ab0e..0000000
 -All other authentication methods are disabled for root.
 -.Pp
 -If this option is set to
--.Dq no ,
+-.Cm no ,
 -root is not allowed to log in.
+-.It Cm PermitTTY
+-Specifies whether
+-.Xr pty 4
+-allocation is permitted.
+-The default is
+-.Cm yes .
 -.It Cm PermitTunnel
 -Specifies whether
 -.Xr tun 4
 -device forwarding is allowed.
 -The argument must be
--.Dq yes ,
--.Dq point-to-point
+-.Cm yes ,
+-.Cm point-to-point
 -(layer 3),
--.Dq ethernet
+-.Cm ethernet
 -(layer 2), or
--.Dq no .
+-.Cm no .
 -Specifying
--.Dq yes
+-.Cm yes
 -permits both
--.Dq point-to-point
+-.Cm point-to-point
 -and
--.Dq ethernet .
+-.Cm ethernet .
 -The default is
--.Dq no .
+-.Cm no .
 -.Pp
 -Independent of this setting, the permissions of the selected
 -.Xr tun 4
 -device must allow access to the user.
--.It Cm PermitTTY
--Specifies whether
--.Xr pty 4
--allocation is permitted.
--The default is
--.Dq yes .
 -.It Cm PermitUserEnvironment
 -Specifies whether
 -.Pa ~/.ssh/environment
@@ -9699,7 +9882,7 @@ index 0e4ab0e..0000000
 -are processed by
 -.Xr sshd 8 .
 -The default is
--.Dq no .
+-.Cm no .
 -Enabling environment processing may enable users to bypass access
 -restrictions in some configurations using mechanisms such as
 -.Ev LD_PRELOAD .
@@ -9708,11 +9891,11 @@ index 0e4ab0e..0000000
 -.Pa ~/.ssh/rc
 -file is executed.
 -The default is
--.Dq yes .
+-.Cm yes .
 -.It Cm PidFile
 -Specifies the file that contains the process ID of the
 -SSH daemon, or
--.Dq none
+-.Cm none
 -to not write one.
 -The default is
 -.Pa /var/run/sshd.pid .
@@ -9741,29 +9924,7 @@ index 0e4ab0e..0000000
 -.Pa /etc/profile ,
 -or equivalent.)
 -The default is
--.Dq yes .
--.It Cm Protocol
--Specifies the protocol versions
--.Xr sshd 8
--supports.
--The possible values are
--.Sq 1
--and
--.Sq 2 .
--Multiple versions must be comma-separated.
--The default is
--.Sq 2 .
--Protocol 1 suffers from a number of cryptographic weaknesses and should
--not be used.
--It is only offered to support legacy devices.
--.Pp
--Note that the order of the protocol list does not indicate preference,
--because the client selects among multiple protocol versions offered
--by the server.
--Specifying
--.Dq 2,1
--is identical to
--.Dq 1,2 .
+-.Cm yes .
 -.It Cm PubkeyAcceptedKeyTypes
 -Specifies the key types that will be accepted for public key authentication
 -as a comma-separated pattern list.
@@ -9782,15 +9943,12 @@ index 0e4ab0e..0000000
 -ssh-ed25519,ssh-rsa
 -.Ed
 -.Pp
--The
--.Fl Q
--option of
--.Xr ssh 1
--may be used to list supported key types.
+-The list of available key types may also be obtained using
+-.Qq ssh -Q key .
 -.It Cm PubkeyAuthentication
 -Specifies whether public key authentication is allowed.
 -The default is
--.Dq yes .
+-.Cm yes .
 -.It Cm RekeyLimit
 -Specifies the maximum amount of data that may be transmitted before the
 -session key is renegotiated, optionally followed a maximum amount of
@@ -9813,12 +9971,12 @@ index 0e4ab0e..0000000
 -The default value for
 -.Cm RekeyLimit
 -is
--.Dq default none ,
+-.Cm default none ,
 -which means that rekeying is performed after the cipher's default amount
 -of data has been sent or received and no time based rekeying is done.
 -.It Cm RevokedKeys
 -Specifies revoked public keys file, or
--.Dq none
+-.Cm none
 -to not use one.
 -Keys listed in this file will be refused for public key authentication.
 -Note that if this file is not readable, then public key authentication will
@@ -9828,20 +9986,6 @@ index 0e4ab0e..0000000
 -.Xr ssh-keygen 1 .
 -For more information on KRLs, see the KEY REVOCATION LISTS section in
 -.Xr ssh-keygen 1 .
--.It Cm RhostsRSAAuthentication
--Specifies whether rhosts or /etc/hosts.equiv authentication together
--with successful RSA host authentication is allowed.
--The default is
--.Dq no .
--This option applies to protocol version 1 only.
--.It Cm RSAAuthentication
--Specifies whether pure RSA authentication is allowed.
--The default is
--.Dq yes .
--This option applies to protocol version 1 only.
--.It Cm ServerKeyBits
--Defines the number of bits in the ephemeral protocol version 1 server key.
--The default and minimum value is 1024.
 -.It Cm StreamLocalBindMask
 -Sets the octal file creation mode mask
 -.Pq umask
@@ -9864,11 +10008,11 @@ index 0e4ab0e..0000000
 -This option is only used for port forwarding to a Unix-domain socket file.
 -.Pp
 -The argument must be
--.Dq yes
+-.Cm yes
 -or
--.Dq no .
+-.Cm no .
 -The default is
--.Dq no .
+-.Cm no .
 -.It Cm StrictModes
 -Specifies whether
 -.Xr sshd 8
@@ -9877,7 +10021,7 @@ index 0e4ab0e..0000000
 -This is normally desirable because novices sometimes accidentally leave their
 -directory or files world-writable.
 -The default is
--.Dq yes .
+-.Cm yes .
 -Note that this does not apply to
 -.Cm ChrootDirectory ,
 -whose permissions and ownership are checked unconditionally.
@@ -9887,16 +10031,12 @@ index 0e4ab0e..0000000
 -to execute upon subsystem request.
 -.Pp
 -The command
--.Xr sftp-server 8
--implements the
--.Dq sftp
--file transfer subsystem.
+-.Cm sftp-server
+-implements the SFTP file transfer subsystem.
 -.Pp
 -Alternately the name
--.Dq internal-sftp
--implements an in-process
--.Dq sftp
--server.
+-.Cm internal-sftp
+-implements an in-process SFTP server.
 -This may simplify configurations using
 -.Cm ChrootDirectory
 -to force a different filesystem root on clients.
@@ -9918,21 +10058,21 @@ index 0e4ab0e..0000000
 -find it annoying.
 -On the other hand, if TCP keepalives are not sent,
 -sessions may hang indefinitely on the server, leaving
--.Dq ghost
+-.Qq ghost
 -users and consuming server resources.
 -.Pp
 -The default is
--.Dq yes
+-.Cm yes
 -(to send TCP keepalive messages), and the server will notice
 -if the network goes down or the client host crashes.
 -This avoids infinitely hanging sessions.
 -.Pp
 -To disable TCP keepalive messages, the value should be set to
--.Dq no .
+-.Cm no .
 -.It Cm TrustedUserCAKeys
 -Specifies a file containing public keys of certificate authorities that are
 -trusted to sign user certificates for authentication, or
--.Dq none
+-.Cm none
 -to not use one.
 -Keys are listed one per line; empty lines and comments starting with
 -.Ql #
@@ -9953,38 +10093,19 @@ index 0e4ab0e..0000000
 -very same IP address.
 -.Pp
 -If this option is set to
--.Dq no
+-.Cm no
 -(the default) then only addresses and not host names may be used in
--.Pa ~/.ssh/known_hosts
+-.Pa ~/.ssh/authorized_keys
 -.Cm from
 -and
 -.Nm
 -.Cm Match
 -.Cm Host
 -directives.
--.It Cm UseLogin
--Specifies whether
--.Xr login 1
--is used for interactive login sessions.
--The default is
--.Dq no .
--Note that
--.Xr login 1
--is never used for remote command execution.
--Note also, that if this is enabled,
--.Cm X11Forwarding
--will be disabled because
--.Xr login 1
--does not know how to handle
--.Xr xauth 1
--cookies.
--If
--.Cm UsePrivilegeSeparation
--is specified, it will be disabled after authentication.
 -.It Cm UsePAM
 -Enables the Pluggable Authentication Module interface.
 -If set to
--.Dq yes
+-.Cm yes
 -this will enable PAM authentication using
 -.Cm ChallengeResponseAuthentication
 -and
@@ -10004,7 +10125,7 @@ index 0e4ab0e..0000000
 -.Xr sshd 8
 -as a non-root user.
 -The default is
--.Dq no .
+-.Cm no .
 -.It Cm UsePrivilegeSeparation
 -Specifies whether
 -.Xr sshd 8
@@ -10015,23 +10136,23 @@ index 0e4ab0e..0000000
 -The goal of privilege separation is to prevent privilege
 -escalation by containing any corruption within the unprivileged processes.
 -The argument must be
--.Dq yes ,
--.Dq no ,
+-.Cm yes ,
+-.Cm no ,
 -or
--.Dq sandbox .
+-.Cm sandbox .
 -If
 -.Cm UsePrivilegeSeparation
 -is set to
--.Dq sandbox
+-.Cm sandbox
 -then the pre-authentication unprivileged process is subject to additional
 -restrictions.
 -The default is
--.Dq sandbox .
+-.Cm sandbox .
 -.It Cm VersionAddendum
 -Optionally specifies additional text to append to the SSH protocol banner
 -sent by the server upon connection.
 -The default is
--.Dq none .
+-.Cm none .
 -.It Cm X11DisplayOffset
 -Specifies the first display number available for
 -.Xr sshd 8 Ns 's
@@ -10041,18 +10162,18 @@ index 0e4ab0e..0000000
 -.It Cm X11Forwarding
 -Specifies whether X11 forwarding is permitted.
 -The argument must be
--.Dq yes
+-.Cm yes
 -or
--.Dq no .
+-.Cm no .
 -The default is
--.Dq no .
+-.Cm no .
 -.Pp
 -When X11 forwarding is enabled, there may be additional exposure to
 -the server and to client displays if the
 -.Xr sshd 8
 -proxy display is configured to listen on the wildcard address (see
--.Cm X11UseLocalhost
--below), though this is not the default.
+-.Cm X11UseLocalhost ) ,
+-though this is not the default.
 -Additionally, the authentication spoofing and authentication data
 -verification and substitution occur on the client side.
 -The security risk of using X11 forwarding is that the client's X11
@@ -10064,14 +10185,11 @@ index 0e4ab0e..0000000
 -A system administrator may have a stance in which they want to
 -protect clients that may expose themselves to attack by unwittingly
 -requesting X11 forwarding, which can warrant a
--.Dq no
+-.Cm no
 -setting.
 -.Pp
 -Note that disabling X11 forwarding does not prevent users from
 -forwarding X11 traffic, as users can always install their own forwarders.
--X11 forwarding is automatically disabled if
--.Cm UseLogin
--is enabled.
 -.It Cm X11UseLocalhost
 -Specifies whether
 -.Xr sshd 8
@@ -10082,26 +10200,26 @@ index 0e4ab0e..0000000
 -hostname part of the
 -.Ev DISPLAY
 -environment variable to
--.Dq localhost .
+-.Cm localhost .
 -This prevents remote hosts from connecting to the proxy display.
 -However, some older X11 clients may not function with this
 -configuration.
 -.Cm X11UseLocalhost
 -may be set to
--.Dq no
+-.Cm no
 -to specify that the forwarding server should be bound to the wildcard
 -address.
 -The argument must be
--.Dq yes
+-.Cm yes
 -or
--.Dq no .
+-.Cm no .
 -The default is
--.Dq yes .
+-.Cm yes .
 -.It Cm XAuthLocation
 -Specifies the full pathname of the
 -.Xr xauth 1
 -program, or
--.Dq none
+-.Cm none
 -to not use one.
 -The default is
 -.Pa /usr/X11R6/bin/xauth .
@@ -10147,6 +10265,50 @@ index 0e4ab0e..0000000
 -.It 1h30m
 -1 hour 30 minutes (90 minutes)
 -.El
+-.Sh TOKENS
+-Arguments to some keywords can make use of tokens,
+-which are expanded at runtime:
+-.Pp
+-.Bl -tag -width XXXX -offset indent -compact
+-.It %%
+-A literal
+-.Sq % .
+-.It %F
+-The fingerprint of the CA key.
+-.It %f
+-The fingerprint of the key or certificate.
+-.It %h
+-The home directory of the user.
+-.It %i
+-The key ID in the certificate.
+-.It %K
+-The base64-encoded CA key.
+-.It %k
+-The base64-encoded key or certificate for authentication.
+-.It %s
+-The serial number of the certificate.
+-.It \&%T
+-The type of the CA key.
+-.It %t
+-The key or certificate type.
+-.It %u
+-The username.
+-.El
+-.Pp
+-.Cm AuthorizedKeysCommand
+-accepts the tokens %%, %f, %h, %t, and %u.
+-.Pp
+-.Cm AuthorizedKeysFile
+-accepts the tokens %%, %h, and %u.
+-.Pp
+-.Cm AuthorizedPrincipalsCommand
+-accepts the tokens %%, %F, %f, %K, %k, %h, %i, %s, %T, %t, and %u.
+-.Pp
+-.Cm AuthorizedPrincipalsFile
+-accepts the tokens %%, %h, and %u.
+-.Pp
+-.Cm ChrootDirectory
+-accepts the tokens %%, %h, and %u.
 -.Sh FILES
 -.Bl -tag -width Ds
 -.It Pa /etc/ssh/sshd_config
@@ -10156,19 +10318,26 @@ index 0e4ab0e..0000000
 -(though not necessary) that it be world-readable.
 -.El
 -.Sh SEE ALSO
+-.Xr sftp-server 8 ,
 -.Xr sshd 8 ,
 -.Xr pam_unix_session 5
 -.Sh AUTHORS
+-.An -nosplit
 -OpenSSH is a derivative of the original and free
--ssh 1.2.12 release by Tatu Ylonen.
--Aaron Campbell, Bob Beck, Markus Friedl, Niels Provos,
--Theo de Raadt and Dug Song
+-ssh 1.2.12 release by
+-.An Tatu Ylonen .
+-.An Aaron Campbell , Bob Beck , Markus Friedl , Niels Provos ,
+-.An Theo de Raadt
+-and
+-.An Dug Song
 -removed many bugs, re-added newer features and
 -created OpenSSH.
--Markus Friedl contributed the support for SSH
--protocol versions 1.5 and 2.0.
--Niels Provos and Markus Friedl contributed support
--for privilege separation.
+-.An Markus Friedl
+-contributed the support for SSH protocol versions 1.5 and 2.0.
+-.An Niels Provos
+-and
+-.An Markus Friedl
+-contributed support for privilege separation.
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/0004-lastlogin.patch b/openssh/Patches/0004-lastlogin.patch
deleted file mode 100644
index c5db99b..0000000
--- a/openssh/Patches/0004-lastlogin.patch
+++ /dev/null
@@ -1,52 +0,0 @@
-From b90dd44d2485d5a95db4602bc8f811d267366f20 Mon Sep 17 00:00:00 2001
-From: oracle <solaris@oracle.com>
-Date: Mon, 3 Aug 2015 14:34:41 -0700
-Subject: [PATCH 04/34] lastlogin
-
-# The man page change here is Solaris-specific and thus is not being
-# contributed back to the upstream community.  The servconf.c change
-# was developed in-house and has been submitted upstream to OpenSSH for
-# their consideration:
-# https://bugzilla.mindrot.org/show_bug.cgi?id=2278
-#
-# OpenSSH normally updates lastlog when users login and reads lastlog to
-# determine the last login time of the user however on Solaris the
-# pam_unix_session(5) module handles both of these tasks so we compile
-# OpenSSH with --disable-lastlog to disable all lastlog references.
-# This means the sshd_config option of PrintLastLog is now ignored and
-# can't be changed so we update sshd's configuration parsing to flag
-# this as unsupported and update the man page here.
-#
-*** old/servconf.c Wed Sep 17 02:54:26 2014
----
- sshd_config.5 | 7 ++++---
- 1 file changed, 4 insertions(+), 3 deletions(-)
-
-diff --git a/sshd_config.5 b/sshd_config.5
-index a37a3ac..0e4ab0e 100644
---- a/sshd_config.5
-+++ b/sshd_config.5
-@@ -1308,8 +1308,8 @@ Specifies whether
- .Xr sshd 8
- should print the date and time of the last user login when a user logs
- in interactively.
--The default is
--.Dq yes .
-+On Solaris this option is always ignored since pam_unix_session(5)
-+reports the last login time.
- .It Cm PrintMotd
- Specifies whether
- .Xr sshd 8
-@@ -1735,7 +1735,8 @@ This file should be writable by root only, but it is recommended
- (though not necessary) that it be world-readable.
- .El
- .Sh SEE ALSO
--.Xr sshd 8
-+.Xr sshd 8 ,
-+.Xr pam_unix_session 5
- .Sh AUTHORS
- OpenSSH is a derivative of the original and free
- ssh 1.2.12 release by Tatu Ylonen.
--- 
-2.5.4 (Apple Git-61)
-
diff --git a/openssh/Patches/0006-Deprecated-SunSSH-options.patch b/openssh/Patches/0005-Deprecated-SunSSH-options.patch
similarity index 86%
rename from openssh/Patches/0006-Deprecated-SunSSH-options.patch
rename to openssh/Patches/0005-Deprecated-SunSSH-options.patch
index 8739627..b07bfa9 100644
--- a/openssh/Patches/0006-Deprecated-SunSSH-options.patch
+++ b/openssh/Patches/0005-Deprecated-SunSSH-options.patch
@@ -1,7 +1,7 @@
-From 229f03b20eb7ad551ba02508eb742c2ea5b88e7b Mon Sep 17 00:00:00 2001
+From 3d182d824ed1f288830a7e42b6a4a45d5564691a Mon Sep 17 00:00:00 2001
 From: oracle <solaris@oracle.com>
 Date: Mon, 3 Aug 2015 14:35:12 -0700
-Subject: [PATCH 06/34] Deprecated SunSSH options
+Subject: [PATCH 05/34] Deprecated SunSSH options
 
 #
 # To make the transition from SunSSH to OpenSSH as smooth as possible, we
@@ -16,12 +16,12 @@ Subject: [PATCH 06/34] Deprecated SunSSH options
  1 file changed, 18 insertions(+)
 
 diff --git a/readconf.c b/readconf.c
-index 69d4553..0e955ae 100644
+index fa3fab8f..e11a928d 100644
 --- a/readconf.c
 +++ b/readconf.c
-@@ -282,6 +282,24 @@ static struct {
- 	{ "pubkeyacceptedkeytypes", oPubkeyAcceptedKeyTypes },
+@@ -297,6 +297,24 @@ static struct {
  	{ "ignoreunknown", oIgnoreUnknown },
+ 	{ "proxyjump", oProxyJump },
  
 +#ifdef DEPRECATE_SUNSSH_OPT
 +        /*
@@ -45,5 +45,5 @@ index 69d4553..0e955ae 100644
  };
  
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/0007-GSS-store-creds-for-Solaris.patch b/openssh/Patches/0006-GSS-store-creds-for-Solaris.patch
similarity index 91%
rename from openssh/Patches/0007-GSS-store-creds-for-Solaris.patch
rename to openssh/Patches/0006-GSS-store-creds-for-Solaris.patch
index 4978368..3bf93bc 100644
--- a/openssh/Patches/0007-GSS-store-creds-for-Solaris.patch
+++ b/openssh/Patches/0006-GSS-store-creds-for-Solaris.patch
@@ -1,7 +1,7 @@
-From 6d8577b5a662b85a13a56aa8d41a589dc1ad0eae Mon Sep 17 00:00:00 2001
+From 8952e72b9cf0f8a14d728feaeb2f5fe85ebbeae0 Mon Sep 17 00:00:00 2001
 From: oracle <solaris@oracle.com>
 Date: Mon, 3 Aug 2015 14:35:34 -0700
-Subject: [PATCH 07/34] GSS store creds for Solaris
+Subject: [PATCH 06/34] GSS store creds for Solaris
 
 ---
  configure.ac    |  3 +++
@@ -12,10 +12,10 @@ Subject: [PATCH 07/34] GSS store creds for Solaris
  5 files changed, 71 insertions(+), 1 deletion(-)
 
 diff --git a/configure.ac b/configure.ac
-index 7258cc0..5dceabd 100644
+index eb9f45dc..f5deed69 100644
 --- a/configure.ac
 +++ b/configure.ac
-@@ -942,6 +942,9 @@ mips-sony-bsd|mips-sony-newsos4)
+@@ -949,6 +949,9 @@ mips-sony-bsd|mips-sony-newsos4)
  		],
  	)
  	TEST_SHELL=$SHELL	# let configure find us a capable shell
@@ -26,7 +26,7 @@ index 7258cc0..5dceabd 100644
  *-*-sunos4*)
  	CPPFLAGS="$CPPFLAGS -DSUNOS4"
 diff --git a/gss-serv-krb5.c b/gss-serv-krb5.c
-index 795992d..6e6cff7 100644
+index 795992d9..6e6cff7b 100644
 --- a/gss-serv-krb5.c
 +++ b/gss-serv-krb5.c
 @@ -110,7 +110,7 @@ ssh_gssapi_krb5_userok(ssh_gssapi_client *client, char *name)
@@ -59,7 +59,7 @@ index 795992d..6e6cff7 100644
  
  #endif /* KRB5 */
 diff --git a/gss-serv.c b/gss-serv.c
-index 53993d6..209ffe8 100644
+index 53993d67..209ffe82 100644
 --- a/gss-serv.c
 +++ b/gss-serv.c
 @@ -320,22 +320,66 @@ ssh_gssapi_getclient(Gssctxt *ctx, ssh_gssapi_client *client)
@@ -130,10 +130,10 @@ index 53993d6..209ffe8 100644
  
  /* This allows GSSAPI methods to do things to the childs environment based
 diff --git a/servconf.c b/servconf.c
-index c6f4bdd..1872661 100644
+index 409d4800..e98c6500 100644
 --- a/servconf.c
 +++ b/servconf.c
-@@ -496,7 +496,11 @@ static struct {
+@@ -484,7 +484,11 @@ static struct {
  	{ "afstokenpassing", sUnsupported, SSHCFG_GLOBAL },
  #ifdef GSSAPI
  	{ "gssapiauthentication", sGssAuthentication, SSHCFG_ALL },
@@ -146,10 +146,10 @@ index c6f4bdd..1872661 100644
  #else
  	{ "gssapiauthentication", sUnsupported, SSHCFG_ALL },
 diff --git a/sshd.c b/sshd.c
-index 430569c..68fd1ea 100644
+index 1dc4d182..e39b3024 100644
 --- a/sshd.c
 +++ b/sshd.c
-@@ -2234,9 +2234,23 @@ main(int ac, char **av)
+@@ -2048,9 +2048,23 @@ main(int ac, char **av)
  
  #ifdef GSSAPI
  	if (options.gss_authentication) {
@@ -174,5 +174,5 @@ index 430569c..68fd1ea 100644
  #endif
  #ifdef USE_PAM
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/0008-DTrace-support-for-SFTP.patch b/openssh/Patches/0007-DTrace-support-for-SFTP.patch
similarity index 95%
rename from openssh/Patches/0008-DTrace-support-for-SFTP.patch
rename to openssh/Patches/0007-DTrace-support-for-SFTP.patch
index 5559a6e..2718720 100644
--- a/openssh/Patches/0008-DTrace-support-for-SFTP.patch
+++ b/openssh/Patches/0007-DTrace-support-for-SFTP.patch
@@ -1,7 +1,7 @@
-From c1905780db9f622c36dae810897d23f66d2faafb Mon Sep 17 00:00:00 2001
+From 4afef59e9cfdc88092899a6abdff720d39b0ddd3 Mon Sep 17 00:00:00 2001
 From: oracle <solaris@oracle.com>
 Date: Mon, 3 Aug 2015 14:35:43 -0700
-Subject: [PATCH 08/34] DTrace support for SFTP
+Subject: [PATCH 07/34] DTrace support for SFTP
 
 ---
  Makefile.in          | 24 ++++++++++++++---
@@ -15,7 +15,7 @@ Subject: [PATCH 08/34] DTrace support for SFTP
  create mode 100644 sftp_provider_impl.h
 
 diff --git a/Makefile.in b/Makefile.in
-index 11e01ac..61a97de 100644
+index 6541b3bb..82065077 100644
 --- a/Makefile.in
 +++ b/Makefile.in
 @@ -26,6 +26,7 @@ ASKPASS_PROGRAM=$(libexecdir)/ssh-askpass
@@ -27,14 +27,14 @@ index 11e01ac..61a97de 100644
  SSH_PRIVSEP_USER=@SSH_PRIVSEP_USER@
  STRIP_OPT=@STRIP_OPT@
 @@ -85,6 +86,7 @@ LIBSSH_OBJS=${LIBOPENSSH_OBJS} \
- 	atomicio.o key.o dispatch.o mac.o uidswap.o uuencode.o misc.o \
+ 	atomicio.o key.o dispatch.o mac.o uidswap.o uuencode.o misc.o utf8.o \
  	monitor_fdpass.o rijndael.o ssh-dss.o ssh-ecdsa.o ssh-rsa.o dh.o \
  	msg.o progressmeter.o dns.o entropy.o gss-genr.o umac.o umac128.o \
 +	sftp_provider.o \
  	ssh-pkcs11.o smult_curve25519_ref.o \
  	poly1305.o chacha.o cipher-chachapoly.o \
  	ssh-ed25519.o digest-openssl.o digest-libc.o hmac.o \
-@@ -110,7 +112,7 @@ SSHDOBJS=sshd.o auth-rhosts.o auth-passwd.o auth-rsa.o auth-rh-rsa.o \
+@@ -110,7 +112,7 @@ SSHDOBJS=sshd.o auth-rhosts.o auth-passwd.o \
  	sftp-server.o sftp-common.o \
  	sandbox-null.o sandbox-rlimit.o sandbox-systrace.o sandbox-darwin.o \
  	sandbox-seccomp-filter.o sandbox-capsicum.o sandbox-pledge.o \
@@ -56,7 +56,7 @@ index 11e01ac..61a97de 100644
  	$(LD) -o $@ progressmeter.o sftp.o sftp-client.o sftp-common.o sftp-glob.o $(LDFLAGS) -lssh -lopenbsd-compat $(LIBS) $(LIBEDIT)
 @@ -225,9 +227,22 @@ umac128.o:	umac.c
  	    -Dumac_update=umac128_update -Dumac_final=umac128_final \
- 	    -Dumac_delete=umac128_delete
+ 	    -Dumac_delete=umac128_delete -Dumac_ctx=umac128_ctx
  
 +# dtrace sftp
 +sftp_provider.h: $(srcdir)/sftp_provider.d
@@ -78,7 +78,7 @@ index 11e01ac..61a97de 100644
  	rm -f regress/unittests/test_helper/*.a
  	rm -f regress/unittests/test_helper/*.o
  	rm -f regress/unittests/sshbuf/*.o
-@@ -336,6 +351,7 @@ install-files:
+@@ -347,6 +362,7 @@ install-files:
  	$(INSTALL) -m 644 sftp-server.1m.out $(DESTDIR)$(mandir)/$(mansubdir)1m/sftp-server.1m
  	$(INSTALL) -m 644 ssh-keysign.1m.out $(DESTDIR)$(mandir)/$(mansubdir)1m/ssh-keysign.1m
  	$(INSTALL) -m 644 ssh-pkcs11-helper.1m.out $(DESTDIR)$(mandir)/$(mansubdir)1m/ssh-pkcs11-helper.1m
@@ -87,10 +87,10 @@ index 11e01ac..61a97de 100644
  install-sysconf:
  	if [ ! -d $(DESTDIR)$(sysconfdir) ]; then \
 diff --git a/sftp-server.c b/sftp-server.c
-index e11a1b8..0e6a15a 100644
+index 3619cdfc..78167f9d 100644
 --- a/sftp-server.c
 +++ b/sftp-server.c
-@@ -54,6 +54,9 @@
+@@ -50,6 +50,9 @@
  
  #include "sftp.h"
  #include "sftp-common.h"
@@ -100,7 +100,7 @@ index e11a1b8..0e6a15a 100644
  
  /* Our verbosity */
  static LogLevel log_level = SYSLOG_LEVEL_ERROR;
-@@ -740,14 +743,17 @@ process_read(u_int32_t id)
+@@ -736,14 +739,17 @@ process_read(u_int32_t id)
  	u_int32_t len;
  	int r, handle, fd, ret, status = SSH2_FX_FAILURE;
  	u_int64_t off;
@@ -119,7 +119,7 @@ index e11a1b8..0e6a15a 100644
  	if (len > sizeof buf) {
  		len = sizeof buf;
  		debug2("read change len %d", len);
-@@ -758,7 +764,13 @@ process_read(u_int32_t id)
+@@ -754,7 +760,13 @@ process_read(u_int32_t id)
  			error("process_read: seek failed");
  			status = errno_to_portable(errno);
  		} else {
@@ -133,7 +133,7 @@ index e11a1b8..0e6a15a 100644
  			if (ret < 0) {
  				status = errno_to_portable(errno);
  			} else if (ret == 0) {
-@@ -781,14 +793,16 @@ process_write(u_int32_t id)
+@@ -777,14 +789,16 @@ process_write(u_int32_t id)
  	size_t len;
  	int r, handle, fd, ret, status;
  	u_char *data;
@@ -151,7 +151,7 @@ index e11a1b8..0e6a15a 100644
  	fd = handle_to_fd(handle);
  
  	if (fd < 0)
-@@ -800,7 +814,14 @@ process_write(u_int32_t id)
+@@ -796,7 +810,14 @@ process_write(u_int32_t id)
  			error("process_write: seek failed");
  		} else {
  /* XXX ATOMICIO ? */
@@ -168,7 +168,7 @@ index e11a1b8..0e6a15a 100644
  				status = errno_to_portable(errno);
 diff --git a/sftp64.d b/sftp64.d
 new file mode 100644
-index 0000000..8305d0a
+index 00000000..8305d0af
 --- /dev/null
 +++ b/sftp64.d
 @@ -0,0 +1,56 @@
@@ -230,7 +230,7 @@ index 0000000..8305d0a
 +};
 diff --git a/sftp_provider.d b/sftp_provider.d
 new file mode 100644
-index 0000000..99e9920
+index 00000000..99e99202
 --- /dev/null
 +++ b/sftp_provider.d
 @@ -0,0 +1,61 @@
@@ -297,7 +297,7 @@ index 0000000..99e9920
 +#pragma D attributes Evolving/Evolving/ISA provider sftp args
 diff --git a/sftp_provider_impl.h b/sftp_provider_impl.h
 new file mode 100644
-index 0000000..4b18e6e
+index 00000000..4b18e6ec
 --- /dev/null
 +++ b/sftp_provider_impl.h
 @@ -0,0 +1,73 @@
@@ -375,5 +375,5 @@ index 0000000..4b18e6e
 +
 +#endif /* _SFTP_PROVIDER_IMPL_H */
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/0009-Add-DisableBanner-option.patch b/openssh/Patches/0008-Add-DisableBanner-option.patch
similarity index 71%
rename from openssh/Patches/0009-Add-DisableBanner-option.patch
rename to openssh/Patches/0008-Add-DisableBanner-option.patch
index ded9968..d36a56d 100644
--- a/openssh/Patches/0009-Add-DisableBanner-option.patch
+++ b/openssh/Patches/0008-Add-DisableBanner-option.patch
@@ -1,40 +1,40 @@
-From d0fcfc84c64162fcc8db7f7a9a41912fb257c885 Mon Sep 17 00:00:00 2001
+From 09ad0aa54f500a5e3aef488bb4755bd480c4b8fa Mon Sep 17 00:00:00 2001
 From: oracle <solaris@oracle.com>
 Date: Mon, 3 Aug 2015 14:36:00 -0700
-Subject: [PATCH 09/34] Add DisableBanner option
+Subject: [PATCH 08/34] Add DisableBanner option
 
 ---
  readconf.c    | 31 +++++++++++++++++++++++++++++++
  readconf.h    |  9 +++++++++
  ssh_config.4  |  8 ++++++++
- sshconnect2.c | 17 +++++++++++++++++
- 4 files changed, 65 insertions(+)
+ sshconnect2.c | 31 +++++++++++++++++++++++++++----
+ 4 files changed, 75 insertions(+), 4 deletions(-)
 
 diff --git a/readconf.c b/readconf.c
-index 0e955ae..dca9c94 100644
+index e11a928d..b8c40291 100644
 --- a/readconf.c
 +++ b/readconf.c
-@@ -151,6 +151,9 @@ typedef enum {
+@@ -163,6 +163,9 @@ typedef enum {
  	oServerAliveInterval, oServerAliveCountMax, oIdentitiesOnly,
  	oSendEnv, oControlPath, oControlMaster, oControlPersist,
  	oHashKnownHosts,
-+#ifdef DISABLE_BANNER 
++#ifdef DISABLE_BANNER
 +	oDisableBanner,
 +#endif
  	oTunnel, oTunnelDevice, oLocalCommand, oPermitLocalCommand,
  	oVisualHostKey,
  	oKexAlgorithms, oIPQoS, oRequestTTY, oIgnoreUnknown, oProxyUseFdpass,
-@@ -258,6 +261,9 @@ static struct {
- 	{ "controlmaster", oControlMaster },
+@@ -272,6 +275,9 @@ static struct {
  	{ "controlpersist", oControlPersist },
  	{ "hashknownhosts", oHashKnownHosts },
+ 	{ "include", oInclude },
 +#ifdef DISABLE_BANNER
 +	{ "disablebanner", oDisableBanner },
 +#endif
  	{ "tunnel", oTunnel },
  	{ "tunneldevice", oTunnelDevice },
  	{ "localcommand", oLocalCommand },
-@@ -786,6 +792,17 @@ static const struct multistate multistate_canonicalizehostname[] = {
+@@ -812,6 +818,17 @@ static const struct multistate multistate_canonicalizehostname[] = {
  	{ NULL, -1 }
  };
  
@@ -46,27 +46,27 @@ index 0e955ae..dca9c94 100644
 +	{ "no",				SSH_DISABLEBANNER_NO },
 +	{ "in-exec-mode",		SSH_DISABLEBANNER_INEXECMODE },
 +	{ NULL, -1 }
-+}; 
++};
 +#endif
 +
  /*
   * Processes a single option line as used in the configuration files. This
   * only sets those values that have not already been set.
-@@ -1561,6 +1578,13 @@ parse_keytypes:
- 		multistate_ptr = multistate_yesnoaskconfirm;
- 		goto parse_multistate;
+@@ -1674,6 +1691,13 @@ parse_keytypes:
+ 		charptr = &options->identity_agent;
+ 		goto parse_string;
  
 +#ifdef DISABLE_BANNER
 +	case oDisableBanner:
 +	        intptr = &options->disable_banner;
 +                multistate_ptr = multistate_disablebanner;
-+                goto parse_multistate; 
++                goto parse_multistate;
 +#endif
 +
  	case oDeprecated:
  		debug("%s line %d: Deprecated option \"%s\"",
  		    filename, linenum, keyword);
-@@ -1732,6 +1756,9 @@ initialize_options(Options * options)
+@@ -1864,6 +1888,9 @@ initialize_options(Options * options)
  	options->ip_qos_bulk = -1;
  	options->request_tty = -1;
  	options->proxy_use_fdpass = -1;
@@ -76,7 +76,7 @@ index 0e955ae..dca9c94 100644
  	options->ignored_unknown = NULL;
  	options->num_canonical_domains = 0;
  	options->num_permitted_cnames = 0;
-@@ -1917,6 +1944,10 @@ fill_default_options(Options * options)
+@@ -2058,6 +2085,10 @@ fill_default_options(Options * options)
  		options->canonicalize_fallback_local = 1;
  	if (options->canonicalize_hostname == -1)
  		options->canonicalize_hostname = SSH_CANONICALISE_NO;
@@ -88,11 +88,11 @@ index 0e955ae..dca9c94 100644
  		options->fingerprint_hash = SSH_FP_HASH_DEFAULT;
  	if (options->update_hostkeys == -1)
 diff --git a/readconf.h b/readconf.h
-index c84d068..9aefd9e 100644
+index cef55f71..8005ebdd 100644
 --- a/readconf.h
 +++ b/readconf.h
-@@ -159,6 +159,9 @@ typedef struct {
- 	char   *pubkey_key_types;
+@@ -169,6 +169,9 @@ typedef struct {
+ 	char   *jump_extra;
  
  	char	*ignored_unknown; /* Pattern list of unknown tokens to ignore */
 +#ifdef DISABLE_BANNER
@@ -101,7 +101,7 @@ index c84d068..9aefd9e 100644
  }       Options;
  
  #define SSH_CANONICALISE_NO	0
-@@ -184,6 +187,12 @@ typedef struct {
+@@ -195,6 +198,12 @@ typedef struct {
  #define SSH_UPDATE_HOSTKEYS_YES	1
  #define SSH_UPDATE_HOSTKEYS_ASK	2
  
@@ -115,29 +115,29 @@ index c84d068..9aefd9e 100644
  void     fill_default_options(Options *);
  void	 fill_default_options_for_canonicalization(Options *);
 diff --git a/ssh_config.4 b/ssh_config.4
-index e190f6d..b0e22bc 100644
+index ff5dc74b..6b790fb7 100644
 --- a/ssh_config.4
 +++ b/ssh_config.4
-@@ -643,6 +643,14 @@ If set to a time in seconds, or a time in any of the formats documented in
+@@ -572,6 +572,14 @@ If set to a time in seconds, or a time in any of the formats documented in
  then the backgrounded master connection will automatically terminate
  after it has remained idle (with no client connections) for the
  specified time.
 +.It Cm DisableBanner
 +If set to yes, disables the display of the  banner  message.
-+If set to in-exec-mode, disables the display of banner message when in remote 
++If set to in-exec-mode, disables the display of banner message when in remote
 +command mode only.
 +.Pp
-+The default value is no, which means that the banner is displayed unless the 
++The default value is no, which means that the banner is displayed unless the
 +log level  is  QUIET, FATAL, or ERROR. See also the Banner option in
 +.Xr sshd_config 4 . This option applies to protocol version 2 only.
  .It Cm DynamicForward
  Specifies that a TCP port on the local machine be forwarded
  over the secure channel, and the application
 diff --git a/sshconnect2.c b/sshconnect2.c
-index f79c96b..a32204f 100644
+index 103a2b36..56942ca7 100644
 --- a/sshconnect2.c
 +++ b/sshconnect2.c
-@@ -81,6 +81,10 @@ extern char *client_version_string;
+@@ -82,6 +82,10 @@ extern char *client_version_string;
  extern char *server_version_string;
  extern Options options;
  
@@ -148,10 +148,19 @@ index f79c96b..a32204f 100644
  /*
   * SSH2 key exchange
   */
-@@ -502,7 +506,20 @@ input_userauth_banner(int type, u_int32_t seq, void *ctxt)
- 	debug3("input_userauth_banner");
- 	raw = packet_get_string(&len);
+@@ -499,15 +503,34 @@ input_userauth_error(int type, u_int32_t seq, void *ctxt)
+ int
+ input_userauth_banner(int type, u_int32_t seq, void *ctxt)
+ {
+-	char *msg, *lang;
++	char *msg, *lang, *raw;
+ 	u_int len;
+ 
+ 	debug3("%s", __func__);
+-	msg = packet_get_string(&len);
++	raw = packet_get_string(&len);
  	lang = packet_get_string(NULL);
+-	if (len > 0 && options.log_level >= SYSLOG_LEVEL_INFO)
 +
 +#ifdef DISABLE_BANNER
 +	/*
@@ -159,16 +168,25 @@ index f79c96b..a32204f 100644
 +	 * a banner in error log level or lower. If the log level is higher,
 +	 * use DisableBanner option to decide whether to display it or not.
 +	 */
-+	if (len > 0 && options.log_level >= SYSLOG_LEVEL_INFO && 
++	if (len > 0 && options.log_level >= SYSLOG_LEVEL_INFO &&
 +            (options.disable_banner == SSH_DISABLEBANNER_NO ||
 +            (options.disable_banner == SSH_DISABLEBANNER_INEXECMODE &&
 +            buffer_len(&command) == 0))) {
 +#else
- 	if (len > 0 && options.log_level >= SYSLOG_LEVEL_INFO) {
++	if (len > 0 && options.log_level >= SYSLOG_LEVEL_INFO) {
 +#endif
- 		if (len > 65536)
- 			len = 65536;
- 		msg = xmalloc(len * 4 + 1); /* max expansion from strnvis() */
++		if (len > 65536)
++			len = 65536;
++		msg = xmalloc(len * 4 + 1); /* max expansion from strnvis() */
++		strnvis(msg, raw, len * 4 + 1, VIS_SAFE|VIS_OCTAL|VIS_NOSLASH);
+ 		fmprintf(stderr, "%s", msg);
+-	free(msg);
++		free(msg);
++	}
++	free(raw);
+ 	free(lang);
+ 	return 0;
+ }
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/0010-PAM-conversation-fix.patch b/openssh/Patches/0009-PAM-conversation-fix.patch
similarity index 58%
rename from openssh/Patches/0010-PAM-conversation-fix.patch
rename to openssh/Patches/0009-PAM-conversation-fix.patch
index 9b0b0fb..0c8932f 100644
--- a/openssh/Patches/0010-PAM-conversation-fix.patch
+++ b/openssh/Patches/0009-PAM-conversation-fix.patch
@@ -1,23 +1,17 @@
-From dfad796450e2a215b9c8c96629da8439e5052983 Mon Sep 17 00:00:00 2001
+From 021fca2b8ff90ee195aab3ae1ee82b461b752100 Mon Sep 17 00:00:00 2001
 From: oracle <solaris@oracle.com>
 Date: Mon, 3 Aug 2015 14:36:13 -0700
-Subject: [PATCH 10/34] PAM conversation fix
+Subject: [PATCH 09/34] PAM conversation fix
 
-#
-# This patch contains an important bug fix for the PAM password userauth
-# conversation function. This bug fix was contributed back to the upstream in
-# 2009, but it was not accepted by the upstream.  For more information, see
-# https://bugzilla.mindrot.org/show_bug.cgi?id=1681.
-#
 ---
  auth-pam.c | 36 ++++++++++++++++++++++++++++++++++++
  1 file changed, 36 insertions(+)
 
 diff --git a/auth-pam.c b/auth-pam.c
-index 8425af1..92c3b1c 100644
+index 7d8b2926..ee09b804 100644
 --- a/auth-pam.c
 +++ b/auth-pam.c
-@@ -1112,11 +1112,13 @@ free_pam_environment(char **env)
+@@ -1130,11 +1130,13 @@ free_pam_environment(char **env)
  	free(env);
  }
  
@@ -31,19 +25,19 @@ index 8425af1..92c3b1c 100644
  static int
  sshpam_passwd_conv(int n, sshpam_const struct pam_message **msg,
      struct pam_response **resp, void *data)
-@@ -1138,12 +1140,24 @@ sshpam_passwd_conv(int n, sshpam_const struct pam_message **msg,
+@@ -1156,12 +1158,24 @@ sshpam_passwd_conv(int n, sshpam_const struct pam_message **msg,
  	for (i = 0; i < n; ++i) {
  		switch (PAM_MSG_MEMBER(msg, i, msg_style)) {
  		case PAM_PROMPT_ECHO_OFF:
 +#ifdef PAM_BUGFIX
-+                       /*
-+                        * PAM conversation function for the password userauth
-+			* method (non-interactive) really cannot do any 
-+			* prompting.  We set the PAM_AUTHTOK item in 
-+                        * sshpam_auth_passwd()to avoid conversation. If some
-+			* modules still try to converse, then the password
-+			* userauth will fail.
-+			*/
++			/*
++			 * PAM conversation function for the password userauth
++			 * method (non-interactive) really cannot do any
++			 * prompting.  We set the PAM_AUTHTOK item in
++			 * sshpam_auth_passwd()to avoid conversation. If some
++			 * modules still try to converse, then the password
++			 * userauth will fail.
++			 */
 +			goto fail;
 +#else
  			if (sshpam_password == NULL)
@@ -56,22 +50,22 @@ index 8425af1..92c3b1c 100644
  		case PAM_ERROR_MSG:
  		case PAM_TEXT_INFO:
  			len = strlen(PAM_MSG_MEMBER(msg, i, msg));
-@@ -1179,6 +1193,9 @@ static struct pam_conv passwd_conv = { sshpam_passwd_conv, NULL };
+@@ -1197,6 +1211,9 @@ static struct pam_conv passwd_conv = { sshpam_passwd_conv, NULL };
  int
  sshpam_auth_passwd(Authctxt *authctxt, const char *password)
  {
 +#ifdef PAM_BUGFIX
-+        int set_item_rtn;
++	int set_item_rtn;
 +#endif
  	int flags = (options.permit_empty_passwd == 0 ?
  	    PAM_DISALLOW_NULL_AUTHTOK : 0);
- 
-@@ -1198,6 +1215,15 @@ sshpam_auth_passwd(Authctxt *authctxt, const char *password)
+ 	char *fake = NULL;
+@@ -1217,6 +1234,15 @@ sshpam_auth_passwd(Authctxt *authctxt, const char *password)
  	    options.permit_root_login != PERMIT_YES))
- 		sshpam_password = badpw;
+ 		sshpam_password = fake = fake_password(password);
  
 +#ifdef PAM_BUGFIX
-+  	sshpam_err = pam_set_item(sshpam_handle, PAM_AUTHTOK, password);
++	sshpam_err = pam_set_item(sshpam_handle, PAM_AUTHTOK, password);
 +	if (sshpam_err != PAM_SUCCESS) {
 +		debug("PAM: %s: failed to set PAM_AUTHTOK: %s", __func__,
 +		    pam_strerror(sshpam_handle, sshpam_err));
@@ -82,13 +76,13 @@ index 8425af1..92c3b1c 100644
  	sshpam_err = pam_set_item(sshpam_handle, PAM_CONV,
  	    (const void *)&passwd_conv);
  	if (sshpam_err != PAM_SUCCESS)
-@@ -1206,6 +1232,16 @@ sshpam_auth_passwd(Authctxt *authctxt, const char *password)
- 
- 	sshpam_err = pam_authenticate(sshpam_handle, flags);
- 	sshpam_password = NULL;
+@@ -1228,6 +1254,16 @@ sshpam_auth_passwd(Authctxt *authctxt, const char *password)
+ 	free(fake);
+ 	if (sshpam_err == PAM_MAXTRIES)
+ 		sshpam_set_maxtries_reached(1);
 +
 +#ifdef PAM_BUGFIX
-+        set_item_rtn = pam_set_item(sshpam_handle, PAM_AUTHTOK, NULL);
++	set_item_rtn = pam_set_item(sshpam_handle, PAM_AUTHTOK, NULL);
 +	if (set_item_rtn != PAM_SUCCESS) {
 +		debug("PAM: %s: failed to set PAM_AUTHTOK: %s", __func__,
 +		    pam_strerror(sshpam_handle, set_item_rtn));
@@ -100,5 +94,5 @@ index 8425af1..92c3b1c 100644
  		debug("PAM: password authentication accepted for %.100s",
  		    authctxt->user);
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/0011-PAM-enhancements-for-Solaris.patch b/openssh/Patches/0010-PAM-enhancements-for-Solaris.patch
similarity index 75%
rename from openssh/Patches/0011-PAM-enhancements-for-Solaris.patch
rename to openssh/Patches/0010-PAM-enhancements-for-Solaris.patch
index 30f964f..bebe5dc 100644
--- a/openssh/Patches/0011-PAM-enhancements-for-Solaris.patch
+++ b/openssh/Patches/0010-PAM-enhancements-for-Solaris.patch
@@ -1,38 +1,26 @@
-From 44ace33bdb8ac3a8033dabcde4d5c8242fcec169 Mon Sep 17 00:00:00 2001
+From ed82a32f2970ccafe09d94de469de246ac8b795f Mon Sep 17 00:00:00 2001
 From: oracle <solaris@oracle.com>
 Date: Mon, 3 Aug 2015 14:36:19 -0700
-Subject: [PATCH 11/34] PAM enhancements for Solaris
+Subject: [PATCH 10/34] PAM enhancements for Solaris
 
-#
-# This patch contains a couple of PAM enhancements:
-#   1) Each SSHv2 userauth method has its own PAM service name so that PAM can
-#      be used to control what userauth methods are allowed.
-#   2) The PAMServiceName and PAMServicePrefix options.
-#
-# We have contributed back this feature to the OpenSSH upstream community.
-# For more information, see https://bugzilla.mindrot.org/show_bug.cgi?id=2246
-# In the future, if these enhancements are accepted by the upsteam in a
-# later release, we will remove this patch when we upgrade to that release.
-#
 ---
  auth-pam.c     | 119 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  auth.h         |   3 ++
  auth2.c        |  61 ++++++++++++++++++++++++++++-
- monitor.c      |  63 ++++++++++++++++++++++++++++++
+ monitor.c      |  65 +++++++++++++++++++++++++++++++
  monitor.h      |   3 ++
  monitor_wrap.c |  18 +++++++++
  servconf.c     |  56 +++++++++++++++++++++++++++
  servconf.h     |  10 +++++
  sshd.1m        |  27 +++++++++++++
- sshd.c         |   5 +++
  sshd_config.4  |  18 ++++++++-
- 11 files changed, 379 insertions(+), 4 deletions(-)
+ 10 files changed, 376 insertions(+), 4 deletions(-)
 
 diff --git a/auth-pam.c b/auth-pam.c
-index 92c3b1c..4ca0a58 100644
+index ee09b804..70a25c19 100644
 --- a/auth-pam.c
 +++ b/auth-pam.c
-@@ -618,6 +618,72 @@ sshpam_cleanup(void)
+@@ -617,6 +617,72 @@ sshpam_cleanup(void)
  	sshpam_handle = NULL;
  }
  
@@ -89,14 +77,14 @@ index 92c3b1c..4ca0a58 100644
 +			 * Although OpenSSH only supports "gssapi-with-mic"
 +			 * for now. We will still map any userauth method
 +                         * prefixed with "gssapi-" to the gssapi PAM service.
-+			 */ 
++			 */
 +			snprintf(svcname, BUFSIZ, "%s-gssapi",
 +			    options.pam_service_prefix);
 +		}
 +		return svcname;
 +	} else {
 +		/* SSHv1 doesn't get to be so cool */
-+	        snprintf(svcname, BUFSIZ, "sshd-v1");
++		snprintf(svcname, BUFSIZ, "sshd-v1");
 +	}
 +	return svcname;
 +}
@@ -105,9 +93,9 @@ index 92c3b1c..4ca0a58 100644
  static int
  sshpam_init(Authctxt *authctxt)
  {
-@@ -625,18 +691,71 @@ sshpam_init(Authctxt *authctxt)
- 	const char *pam_rhost, *pam_user, *user = authctxt->user;
+@@ -624,18 +690,71 @@ sshpam_init(Authctxt *authctxt)
  	const char **ptr_pam_user = &pam_user;
+ 	struct ssh *ssh = active_state; /* XXX */
  
 +#ifdef PAM_ENHANCEMENT
 +	const char *pam_service;
@@ -123,35 +111,35 @@ index 92c3b1c..4ca0a58 100644
 +	        /* get the pam service name */
 +		sshpam_err = pam_get_item(sshpam_handle,
 +		    PAM_SERVICE, (sshpam_const void **)ptr_pam_service);
-+                if (sshpam_err != PAM_SUCCESS) 
++		if (sshpam_err != PAM_SUCCESS)
 +		    fatal("Failed to get the PAM service name");
 +		debug3("Previous pam_service is %s", pam_service ?
-+                    pam_service : "NULL");
++		    pam_service : "NULL");
 +
 +		/* get the pam user name */
 +		sshpam_err = pam_get_item(sshpam_handle,
 +		    PAM_USER, (sshpam_const void **)ptr_pam_user);
 +
 +		/*
-+		 * only need to re-start if either user or service is 
++		 * only need to re-start if either user or service is
 +                 * different.
 +                 */
 +		if (sshpam_err == PAM_SUCCESS && strcmp(user, pam_user) == 0
 +		    && strncmp(svc, pam_service, strlen(svc)) == 0) {
-+		        free(svc);
++			free(svc);
 +			return (0);
-+                }
++		}
 +
 +		/*
-+		 * Clean up previous PAM state.  No need to clean up session 
++		 * Clean up previous PAM state.  No need to clean up session
 +		 * and creds.
 +		 */
-+                sshpam_authenticated = 0;
-+                sshpam_account_status = -1;
++		sshpam_authenticated = 0;
++		sshpam_account_status = -1;
 +
 +		sshpam_err = pam_set_item(sshpam_handle, PAM_CONV, NULL);
-+         	if (sshpam_err != PAM_SUCCESS)
-+		        debug3("Cannot remove PAM conv"); /* a warning only */
++		if (sshpam_err != PAM_SUCCESS)
++			debug3("Cannot remove PAM conv"); /* a warning only */
 +#else /* Original */
  		/* We already have a PAM context; check if the user matches */
  		sshpam_err = pam_get_item(sshpam_handle,
@@ -178,7 +166,7 @@ index 92c3b1c..4ca0a58 100644
  
  	if (sshpam_err != PAM_SUCCESS) {
 diff --git a/auth.h b/auth.h
-index 2160154..985053c 100644
+index 338a62da..4a7f2c1f 100644
 --- a/auth.h
 +++ b/auth.h
 @@ -81,6 +81,9 @@ struct Authctxt {
@@ -186,13 +174,13 @@ index 2160154..985053c 100644
  	struct sshkey	**prev_userkeys;
  	u_int		 nprev_userkeys;
 +#ifdef PAM_ENHANCEMENT
-+        char            *authmethod_name;
-+#endif 
++	char		*authmethod_name;
++#endif
  };
  /*
   * Every authentication method has to handle authentication requests for
 diff --git a/auth2.c b/auth2.c
-index 7177962..32ba663 100644
+index 9108b861..4623ae02 100644
 --- a/auth2.c
 +++ b/auth2.c
 @@ -243,10 +243,21 @@ input_userauth_request(int type, u_int32_t seq, void *ctxt)
@@ -207,7 +195,7 @@ index 7177962..32ba663 100644
 +		 * Start PAM here and once only, if each userauth does not
 +		 * has its own PAM service.
 +		 */
-+	        if (options.use_pam && !options.pam_service_per_authmethod)
++		if (options.use_pam && !options.pam_service_per_authmethod)
 +			PRIVSEP(start_pam(authctxt));
 +#else
  		if (options.use_pam)
@@ -224,13 +212,13 @@ index 7177962..32ba663 100644
 +
 +#if defined(USE_PAM) && defined(PAM_ENHANCEMENT)
 +		/* start PAM service for each userauth */
-+                if (options.use_pam && options.pam_service_per_authmethod) {
-+       		        if (authctxt->authmethod_name != NULL)
-+		                free(authctxt->authmethod_name);
-+                        authctxt->authmethod_name = xstrdup(method);
-+                        if (use_privsep)
-+                                mm_inform_authmethod(method);
-+		        PRIVSEP(start_pam(authctxt));
++		if (options.use_pam && options.pam_service_per_authmethod) {
++			if (authctxt->authmethod_name != NULL)
++				free(authctxt->authmethod_name);
++			authctxt->authmethod_name = xstrdup(method);
++			if (use_privsep)
++				mm_inform_authmethod(method);
++			PRIVSEP(start_pam(authctxt));
 +		}
 +#endif
  		debug2("input_userauth_request: try method %s", method);
@@ -254,8 +242,8 @@ index 7177962..32ba663 100644
 +
 +#if defined(USE_PAM) && defined(PAM_ENHANCEMENT)
 +                /*
-+                 * If each userauth has its own PAM service, then PAM need to 
-+                 * perform account check for this service.
++                 * If each userauth has its own PAM service, then PAM needs to
++                 * perform the account check for this service.
 +                 */
 +                if (options.use_pam && options.pam_service_per_authmethod &&
 +                    !PRIVSEP(do_pam_account())) {
@@ -282,12 +270,12 @@ index 7177962..32ba663 100644
 +        /*
 +         * PAM needs to perform account checks after auth. However, if each
 +         * userauth has its own PAM service and options.num_auth_methods != 0,
-+         * then no need to perform account checking, because it was done 
++         * then no need to perform account checking, because it was done
 +         * already.
 +         */
-+        if (options.use_pam && authenticated && 
-+            !(options.num_auth_methods != 0 &&
-+            options.pam_service_per_authmethod)){
++	if (options.use_pam && authenticated &&
++	    !(options.num_auth_methods != 0 &&
++	    options.pam_service_per_authmethod)) {
 +#else
  	if (options.use_pam && authenticated) {
 +#endif
@@ -301,10 +289,10 @@ index 7177962..32ba663 100644
 -
 -
 diff --git a/monitor.c b/monitor.c
-index ac7dd30..63bde62 100644
+index 43f48470..8f044f4e 100644
 --- a/monitor.c
 +++ b/monitor.c
-@@ -126,6 +126,9 @@ int mm_answer_sign(int, Buffer *);
+@@ -127,6 +127,9 @@ int mm_answer_sign(int, Buffer *);
  int mm_answer_pwnamallow(int, Buffer *);
  int mm_answer_auth2_read_banner(int, Buffer *);
  int mm_answer_authserv(int, Buffer *);
@@ -314,7 +302,7 @@ index ac7dd30..63bde62 100644
  int mm_answer_authpassword(int, Buffer *);
  int mm_answer_bsdauthquery(int, Buffer *);
  int mm_answer_bsdauthrespond(int, Buffer *);
-@@ -205,10 +208,17 @@ struct mon_table mon_dispatch_proto20[] = {
+@@ -202,10 +205,17 @@ struct mon_table mon_dispatch_proto20[] = {
      {MONITOR_REQ_SIGN, MON_ONCE, mm_answer_sign},
      {MONITOR_REQ_PWNAM, MON_ONCE, mm_answer_pwnamallow},
      {MONITOR_REQ_AUTHSERV, MON_ONCE, mm_answer_authserv},
@@ -330,34 +318,35 @@ index ac7dd30..63bde62 100644
      {MONITOR_REQ_PAM_START, MON_ONCE, mm_answer_pam_start},
 +#endif
      {MONITOR_REQ_PAM_ACCOUNT, 0, mm_answer_pam_account},
-     {MONITOR_REQ_PAM_INIT_CTX, MON_ISAUTH, mm_answer_pam_init_ctx},
-     {MONITOR_REQ_PAM_QUERY, MON_ISAUTH, mm_answer_pam_query},
-@@ -370,6 +380,24 @@ monitor_child_preauth(Authctxt *_authctxt, struct monitor *pmonitor)
- 			if (!compat20)
- 				fatal("AuthenticationMethods is not supported"
- 				    "with SSH protocol 1");
+     {MONITOR_REQ_PAM_INIT_CTX, MON_ONCE, mm_answer_pam_init_ctx},
+     {MONITOR_REQ_PAM_QUERY, 0, mm_answer_pam_query},
+@@ -311,6 +321,25 @@ monitor_child_preauth(Authctxt *_authctxt, struct monitor *pmonitor)
+ 
+ 		/* Special handling for multiple required authentications */
+ 		if (options.num_auth_methods != 0) {
 +
 +#if defined(USE_PAM) && defined(PAM_ENHANCEMENT)
-+                        /* 
-+                         * If each userauth has its own PAM service, then PAM
-+                         * need to perform account check for this service.
-+                         */
-+                        if (options.use_pam && authenticated &&
-+                            options.pam_service_per_authmethod) {
-+                                Buffer m;
-+
-+                                buffer_init(&m);
-+                                mm_request_receive_expect(pmonitor->m_sendfd,
-+                                    MONITOR_REQ_PAM_ACCOUNT, &m);
-+                                authenticated = 
-+                                    mm_answer_pam_account(pmonitor->m_sendfd, &m);
-+                                buffer_free(&m);
-+                         }
++			/*
++			 * If each userauth has its own PAM service, then PAM
++			 * need to perform account check for this service.
++			 */
++			if (options.use_pam && authenticated &&
++			    options.pam_service_per_authmethod) {
++				Buffer m;
++
++				buffer_init(&m);
++				mm_request_receive_expect(pmonitor->m_sendfd,
++				    MONITOR_REQ_PAM_ACCOUNT, &m);
++				authenticated = mm_answer_pam_account(
++				    pmonitor->m_sendfd, &m);
++				buffer_free(&m);
++			}
 +#endif
++
  			if (authenticated &&
  			    !auth2_update_methods_lists(authctxt,
  			    auth_method, auth_submethod)) {
-@@ -388,8 +416,21 @@ monitor_child_preauth(Authctxt *_authctxt, struct monitor *pmonitor)
+@@ -329,8 +358,21 @@ monitor_child_preauth(Authctxt *_authctxt, struct monitor *pmonitor)
  			    !auth_root_allowed(auth_method))
  				authenticated = 0;
  #ifdef USE_PAM
@@ -366,12 +355,12 @@ index ac7dd30..63bde62 100644
 +                         * PAM needs to perform account checks after auth.
 +                         * However, if each userauth has its own PAM service
 +                         * and options.num_auth_methods != 0, then no need to
-+                         * perform account checking, because it was done 
++                         * perform account checking, because it was done
 +                         * already.
 +                         */
-+                        if (options.use_pam && authenticated &&
-+                            !(options.num_auth_methods != 0 &&
-+                            options.pam_service_per_authmethod)) {
++			if (options.use_pam && authenticated &&
++			    !(options.num_auth_methods != 0 &&
++			    options.pam_service_per_authmethod)) {
 +#else
  			/* PAM needs to perform account checks after auth */
  			if (options.use_pam && authenticated) {
@@ -379,18 +368,19 @@ index ac7dd30..63bde62 100644
  				Buffer m;
  
  				buffer_init(&m);
-@@ -859,6 +900,10 @@ mm_answer_pwnamallow(int sock, Buffer *m)
- 		/* Allow service/style information on the auth context */
- 		monitor_permit(mon_dispatch, MONITOR_REQ_AUTHSERV, 1);
- 		monitor_permit(mon_dispatch, MONITOR_REQ_AUTH2_READ_BANNER, 1);
+@@ -771,6 +813,11 @@ mm_answer_pwnamallow(int sock, Buffer *m)
+ 	monitor_permit(mon_dispatch, MONITOR_REQ_AUTHSERV, 1);
+ 	monitor_permit(mon_dispatch, MONITOR_REQ_AUTH2_READ_BANNER, 1);
+ 
 +#ifdef PAM_ENHANCEMENT
-+                /* Allow authmethod information on the auth context */
-+		monitor_permit(mon_dispatch, MONITOR_REQ_AUTHMETHOD, 1);
++	/* Allow authmethod information on the auth context */
++	monitor_permit(mon_dispatch, MONITOR_REQ_AUTHMETHOD, 1);
 +#endif
- 	}
++
  #ifdef USE_PAM
  	if (options.use_pam)
-@@ -899,6 +944,24 @@ mm_answer_authserv(int sock, Buffer *m)
+ 		monitor_permit(mon_dispatch, MONITOR_REQ_PAM_START, 1);
+@@ -810,6 +857,24 @@ mm_answer_authserv(int sock, Buffer *m)
  	return (0);
  }
  
@@ -416,7 +406,7 @@ index ac7dd30..63bde62 100644
  mm_answer_authpassword(int sock, Buffer *m)
  {
 diff --git a/monitor.h b/monitor.h
-index 93b8b66..da63e7d 100644
+index d68f6745..36e73f79 100644
 --- a/monitor.h
 +++ b/monitor.h
 @@ -65,6 +65,9 @@ enum monitor_reqtype {
@@ -424,13 +414,13 @@ index 93b8b66..da63e7d 100644
  	MONITOR_REQ_AUDIT_EVENT = 112, MONITOR_REQ_AUDIT_COMMAND = 113,
  
 +#ifdef PAM_ENHANCEMENT
-+        MONITOR_REQ_AUTHMETHOD = 114,
-+#endif        
++	MONITOR_REQ_AUTHMETHOD = 114,
++#endif
  };
  
- struct mm_master;
+ struct monitor {
 diff --git a/monitor_wrap.c b/monitor_wrap.c
-index c5db6df..30e3c15 100644
+index 64ff9288..bc6382f3 100644
 --- a/monitor_wrap.c
 +++ b/monitor_wrap.c
 @@ -345,6 +345,24 @@ mm_inform_authserv(char *service, char *style)
@@ -459,18 +449,18 @@ index c5db6df..30e3c15 100644
  int
  mm_auth_password(Authctxt *authctxt, char *password)
 diff --git a/servconf.c b/servconf.c
-index 1872661..b16a8be 100644
+index e98c6500..36eb9057 100644
 --- a/servconf.c
 +++ b/servconf.c
-@@ -169,6 +169,18 @@ initialize_server_options(ServerOptions *options)
- 	options->ip_qos_bulk = -1;
+@@ -164,6 +164,18 @@ initialize_server_options(ServerOptions *options)
  	options->version_addendum = NULL;
  	options->fingerprint_hash = -1;
+ 	options->disable_forwarding = -1;
 +#ifdef PAM_ENHANCEMENT
 +	options->pam_service_name = NULL;
 +	options->pam_service_prefix = NULL;
 +
-+	/* 
++	/*
 +	 * Each user method will have its own PAM service by default.
 +	 * However, if PAMServiceName is specified or the protocal version
 +	 * is not compat20, then there will be only one PAM service for the
@@ -481,7 +471,7 @@ index 1872661..b16a8be 100644
  }
  
  /* Returns 1 if a string option is unset or set to "none" or 0 otherwise. */
-@@ -352,6 +364,12 @@ fill_default_server_options(ServerOptions *options)
+@@ -330,6 +342,12 @@ fill_default_server_options(ServerOptions *options)
  		options->ip_qos_bulk = IPTOS_THROUGHPUT;
  	if (options->version_addendum == NULL)
  		options->version_addendum = xstrdup("");
@@ -494,7 +484,7 @@ index 1872661..b16a8be 100644
  	if (options->fwd_opts.streamlocal_bind_mask == (mode_t)-1)
  		options->fwd_opts.streamlocal_bind_mask = 0177;
  	if (options->fwd_opts.streamlocal_bind_unlink == -1)
-@@ -428,6 +446,9 @@ typedef enum {
+@@ -416,6 +434,9 @@ typedef enum {
  	sMatch, sPermitOpen, sForceCommand, sChrootDirectory,
  	sUsePrivilegeSeparation, sAllowAgentForwarding,
  	sHostCertificate,
@@ -504,7 +494,7 @@ index 1872661..b16a8be 100644
  	sRevokedKeys, sTrustedUserCAKeys, sAuthorizedPrincipalsFile,
  	sAuthorizedPrincipalsCommand, sAuthorizedPrincipalsCommandUser,
  	sKexAlgorithms, sIPQoS, sVersionAddendum,
-@@ -566,6 +587,10 @@ static struct {
+@@ -554,6 +575,10 @@ static struct {
  	{ "forcecommand", sForceCommand, SSHCFG_ALL },
  	{ "chrootdirectory", sChrootDirectory, SSHCFG_ALL },
  	{ "hostcertificate", sHostCertificate, SSHCFG_GLOBAL },
@@ -515,7 +505,7 @@ index 1872661..b16a8be 100644
  	{ "revokedkeys", sRevokedKeys, SSHCFG_ALL },
  	{ "trustedusercakeys", sTrustedUserCAKeys, SSHCFG_ALL },
  	{ "authorizedprincipalsfile", sAuthorizedPrincipalsFile, SSHCFG_ALL },
-@@ -1868,6 +1893,37 @@ process_server_config_line(ServerOptions *options, char *line,
+@@ -1854,6 +1879,37 @@ process_server_config_line(ServerOptions *options, char *line,
  			options->fingerprint_hash = value;
  		break;
  
@@ -551,10 +541,10 @@ index 1872661..b16a8be 100644
 +		break;
 +
  	case sDeprecated:
- 		logit("%s line %d: Deprecated option %s",
- 		    filename, linenum, arg);
+ 	case sIgnore:
+ 	case sUnsupported:
 diff --git a/servconf.h b/servconf.h
-index f4137af..8c86b57 100644
+index 5853a974..104852f7 100644
 --- a/servconf.h
 +++ b/servconf.h
 @@ -54,6 +54,10 @@
@@ -568,7 +558,7 @@ index f4137af..8c86b57 100644
  typedef struct {
  	u_int	num_ports;
  	u_int	ports_from_cmdline;
-@@ -194,6 +198,12 @@ typedef struct {
+@@ -188,6 +192,12 @@ typedef struct {
  	u_int	num_auth_methods;
  	char   *auth_methods[MAX_AUTH_METHODS];
  
@@ -577,15 +567,15 @@ index f4137af..8c86b57 100644
 +	char   *pam_service_name;
 +	int	pam_service_per_authmethod;
 +#endif
-+        
++
  	int	fingerprint_hash;
  }       ServerOptions;
  
 diff --git a/sshd.1m b/sshd.1m
-index dac5c14..500c4d5 100644
+index b767cc7a..387ea69e 100644
 --- a/sshd.1m
 +++ b/sshd.1m
-@@ -977,6 +977,33 @@ concurrently for different ports, this contains the process ID of the one
+@@ -920,6 +920,33 @@ concurrently for different ports, this contains the process ID of the one
  started last).
  The content of this file is not sensitive; it can be world-readable.
  .El
@@ -619,58 +609,42 @@ index dac5c14..500c4d5 100644
  .Sh SEE ALSO
  .Xr scp 1 ,
  .Xr sftp 1 ,
-diff --git a/sshd.c b/sshd.c
-index 68fd1ea..418e1fd 100644
---- a/sshd.c
-+++ b/sshd.c
-@@ -2165,6 +2165,11 @@ main(int ac, char **av)
- 
- 	sshd_exchange_identification(sock_in, sock_out);
- 
-+#ifdef PAM_ENHANCEMENT
-+	if (!compat20)
-+	        options.pam_service_per_authmethod = 0;
-+#endif
-+
- 	/* In inetd mode, generate ephemeral key only for proto 1 connections */
- 	if (!compat20 && inetd_flag && sensitive_data.server_key == NULL)
- 		generate_ephemeral_server_key();
 diff --git a/sshd_config.4 b/sshd_config.4
-index 6351b43..f45ddef 100644
+index efb10c97..7e4a376b 100644
 --- a/sshd_config.4
 +++ b/sshd_config.4
-@@ -1168,6 +1168,21 @@ The probability increases linearly and all connection attempts
- are refused if the number of unauthenticated connections reaches
- .Dq full
- (60).
+@@ -1117,6 +1117,21 @@ will refuse connection attempts with a probability of rate/100 (30%)
+ if there are currently start (10) unauthenticated connections.
+ The probability increases linearly and all connection attempts
+ are refused if the number of unauthenticated connections reaches full (60).
 +.It Cm PAMServiceName
-+Specifies the PAM service name for the PAM session. The PAMServiceName and 
++Specifies the PAM service name for the PAM session. The PAMServiceName and
 +PAMServicePrefix options are mutually exclusive and if both set, sshd does not
-+start. If this option is set the service name is the same for all user 
-+authentication methods. The option has no default value. See PAMServicePrefix 
++start. If this option is set the service name is the same for all user
++authentication methods. The option has no default value. See PAMServicePrefix
 +for more information.
 +.It Cm PAMServicePrefix
-+Specifies the PAM service name prefix for service names used for individual 
-+user authentication methods. The default is sshd. The PAMServiceName and 
-+PAMServicePrefix options are mutually exclusive and if both set, sshd does not 
++Specifies the PAM service name prefix for service names used for individual
++user authentication methods. The default is sshd. The PAMServiceName and
++PAMServicePrefix options are mutually exclusive and if both set, sshd does not
 +start.
 +.Pp
-+For example, if this option is set to admincli, the service name for the 
-+keyboard-interactive authentication method is admincli-kbdint instead of the 
++For example, if this option is set to admincli, the service name for the
++keyboard-interactive authentication method is admincli-kbdint instead of the
 +default sshd-kbdint.
  .It Cm PasswordAuthentication
  Specifies whether password authentication is allowed.
  The default is
-@@ -1582,8 +1597,7 @@ If
+@@ -1472,8 +1487,7 @@ If
  is enabled, you will not be able to run
  .Xr sshd 1M
  as a non-root user.
 -The default is
--.Dq no .
+-.Cm no .
 +On Solaris, the option is always enabled.
  .It Cm UsePrivilegeSeparation
  Specifies whether
  .Xr sshd 1M
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/0012-SunSSH-compat-default-config-values.patch b/openssh/Patches/0011-SunSSH-compat-default-config-values.patch
similarity index 68%
rename from openssh/Patches/0012-SunSSH-compat-default-config-values.patch
rename to openssh/Patches/0011-SunSSH-compat-default-config-values.patch
index 3859df2..d3ce1c8 100644
--- a/openssh/Patches/0012-SunSSH-compat-default-config-values.patch
+++ b/openssh/Patches/0011-SunSSH-compat-default-config-values.patch
@@ -1,32 +1,20 @@
-From 8f9f7d848fc627c8be0c965f0b6be1c78dce7df5 Mon Sep 17 00:00:00 2001
+From a63fcd9e5d1a8921073617f6053c766720d978b6 Mon Sep 17 00:00:00 2001
 From: oracle <solaris@oracle.com>
 Date: Mon, 3 Aug 2015 14:36:22 -0700
-Subject: [PATCH 12/34] SunSSH compat default config values
+Subject: [PATCH 11/34] SunSSH compat default config values
 
-#
-# Some options in OpenSSH have different default values from those in SunSSH.
-# To make the transition smoother from SunSSH to OpenSSH, we change default
-# values for the following options to be as same as those in SunSSH.
-#
-#   GSSAPIAuthentication (for both server and client)
-#   X11Forwarding        (for server)
-#   ForwardX11Trusted    (for client)
-#
-# This is for Solaris only, we will not contribute back these changes to the
-# upstream.
-#
 ---
  readconf.c    | 8 ++++++++
  servconf.c    | 8 ++++++++
- ssh_config.4  | 8 ++++----
+ ssh_config.4  | 7 +++++--
  sshd_config.4 | 8 ++++----
- 4 files changed, 24 insertions(+), 8 deletions(-)
+ 4 files changed, 25 insertions(+), 6 deletions(-)
 
 diff --git a/readconf.c b/readconf.c
-index dca9c94..a5a2f12 100644
+index b8c40291..e6fd1420 100644
 --- a/readconf.c
 +++ b/readconf.c
-@@ -1799,7 +1799,11 @@ fill_default_options(Options * options)
+@@ -1931,7 +1931,11 @@ fill_default_options(Options * options)
  	if (options->forward_x11 == -1)
  		options->forward_x11 = 0;
  	if (options->forward_x11_trusted == -1)
@@ -37,8 +25,8 @@ index dca9c94..a5a2f12 100644
 +#endif
  	if (options->forward_x11_timeout == -1)
  		options->forward_x11_timeout = 1200;
- 	if (options->exit_on_forward_failure == -1)
-@@ -1821,7 +1825,11 @@ fill_default_options(Options * options)
+ 	/*
+@@ -1964,7 +1968,11 @@ fill_default_options(Options * options)
  	if (options->challenge_response_authentication == -1)
  		options->challenge_response_authentication = 1;
  	if (options->gss_authentication == -1)
@@ -51,10 +39,10 @@ index dca9c94..a5a2f12 100644
  		options->gss_deleg_creds = 0;
  	if (options->password_authentication == -1)
 diff --git a/servconf.c b/servconf.c
-index b16a8be..bac51a3 100644
+index 36eb9057..6f11010a 100644
 --- a/servconf.c
 +++ b/servconf.c
-@@ -265,7 +265,11 @@ fill_default_server_options(ServerOptions *options)
+@@ -249,7 +249,11 @@ fill_default_server_options(ServerOptions *options)
  	if (options->print_lastlog == -1)
  		options->print_lastlog = 1;
  	if (options->x11_forwarding == -1)
@@ -66,7 +54,7 @@ index b16a8be..bac51a3 100644
  	if (options->x11_display_offset == -1)
  		options->x11_display_offset = 10;
  	if (options->x11_use_localhost == -1)
-@@ -303,7 +307,11 @@ fill_default_server_options(ServerOptions *options)
+@@ -283,7 +287,11 @@ fill_default_server_options(ServerOptions *options)
  	if (options->kerberos_get_afs_token == -1)
  		options->kerberos_get_afs_token = 0;
  	if (options->gss_authentication == -1)
@@ -79,57 +67,56 @@ index b16a8be..bac51a3 100644
  		options->gss_cleanup_creds = 1;
  	if (options->gss_strict_acceptor == -1)
 diff --git a/ssh_config.4 b/ssh_config.4
-index b0e22bc..3135e45 100644
+index 6b790fb7..0953f11c 100644
 --- a/ssh_config.4
 +++ b/ssh_config.4
-@@ -802,8 +802,8 @@ Furthermore, the
+@@ -728,6 +728,9 @@ Furthermore, the
  token used for the session will be set to expire after 20 minutes.
  Remote clients will be refused access after this time.
  .Pp
--The default is
--.Dq no .
 +The default on Solaris is
 +.Dq yes .
- .Pp
++.Pp
  See the X11 SECURITY extension specification for full details on
  the restrictions imposed on untrusted clients.
-@@ -832,8 +832,8 @@ The default is
+ .It Cm GatewayPorts
+@@ -754,8 +757,8 @@ The default is
  .Pa /etc/ssh/ssh_known_hosts2 .
  .It Cm GSSAPIAuthentication
  Specifies whether user authentication based on GSSAPI is allowed.
 -The default is
--.Dq no .
+-.Cm no .
 +The default on Solaris is
 +.Dq yes .
  .It Cm GSSAPIDelegateCredentials
  Forward (delegate) credentials to the server.
  The default is
 diff --git a/sshd_config.4 b/sshd_config.4
-index f45ddef..445cf65 100644
+index 7e4a376b..45c54629 100644
 --- a/sshd_config.4
 +++ b/sshd_config.4
 @@ -621,8 +621,8 @@ The default is
- .Dq no .
+ .Cm no .
  .It Cm GSSAPIAuthentication
  Specifies whether user authentication based on GSSAPI is allowed.
 -The default is
--.Dq no .
+-.Cm no .
 +The default on Solaris is
-+.Dq yes .
++.Cm yes .
  .It Cm GSSAPICleanupCredentials
  Specifies whether to automatically destroy the user's credentials cache
  on logout.
-@@ -1637,8 +1637,8 @@ The argument must be
- .Dq yes
+@@ -1527,8 +1527,8 @@ The argument must be
+ .Cm yes
  or
- .Dq no .
+ .Cm no .
 -The default is
--.Dq no .
+-.Cm no .
 +The default on Solaris is
-+.Dq yes .
++.Cm yes .
  .Pp
  When X11 forwarding is enabled, there may be additional exposure to
  the server and to client displays if the
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/0013-Deprecate-SunSSH-compatible-server-options.patch b/openssh/Patches/0012-Deprecate-SunSSH-compatible-server-options.patch
similarity index 92%
rename from openssh/Patches/0013-Deprecate-SunSSH-compatible-server-options.patch
rename to openssh/Patches/0012-Deprecate-SunSSH-compatible-server-options.patch
index ec5bc64..f69f413 100644
--- a/openssh/Patches/0013-Deprecate-SunSSH-compatible-server-options.patch
+++ b/openssh/Patches/0012-Deprecate-SunSSH-compatible-server-options.patch
@@ -1,7 +1,7 @@
-From 60e5aa52c6b3504b937ecf455be4b95d6ae1656c Mon Sep 17 00:00:00 2001
+From ac8727ca9535ec6b278a738ff2c8f4e2d329b3ca Mon Sep 17 00:00:00 2001
 From: oracle <solaris@oracle.com>
 Date: Mon, 3 Aug 2015 14:36:33 -0700
-Subject: [PATCH 13/34] Deprecate SunSSH compatible server options
+Subject: [PATCH 12/34] Deprecate SunSSH compatible server options
 
 #
 # Originally we planned to only deprecate client config (ssh_config) options
@@ -23,10 +23,10 @@ Subject: [PATCH 13/34] Deprecate SunSSH compatible server options
  1 file changed, 23 insertions(+)
 
 diff --git a/servconf.c b/servconf.c
-index bac51a3..434cafc 100644
+index 6f11010a..c0aba508 100644
 --- a/servconf.c
 +++ b/servconf.c
-@@ -599,6 +599,29 @@ static struct {
+@@ -587,6 +587,29 @@ static struct {
  	{ "pamserviceprefix", sPAMServicePrefix, SSHCFG_GLOBAL },
  	{ "pamservicename", sPAMServiceName, SSHCFG_GLOBAL },
  #endif
@@ -57,5 +57,5 @@ index bac51a3..434cafc 100644
  	{ "trustedusercakeys", sTrustedUserCAKeys, SSHCFG_ALL },
  	{ "authorizedprincipalsfile", sAuthorizedPrincipalsFile, SSHCFG_ALL },
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/0014-Solaris-Auditing-support.patch b/openssh/Patches/0013-Solaris-Auditing-support.patch
similarity index 91%
rename from openssh/Patches/0014-Solaris-Auditing-support.patch
rename to openssh/Patches/0013-Solaris-Auditing-support.patch
index 853232f..223bd25 100644
--- a/openssh/Patches/0014-Solaris-Auditing-support.patch
+++ b/openssh/Patches/0013-Solaris-Auditing-support.patch
@@ -1,46 +1,24 @@
-From 785d51f8667359a362893f13e8762d0e814ceeda Mon Sep 17 00:00:00 2001
+From 2e8ab14aca27f750c402d566ade38cec42e79766 Mon Sep 17 00:00:00 2001
 From: oracle <solaris@oracle.com>
 Date: Mon, 3 Aug 2015 14:37:01 -0700
-Subject: [PATCH 14/34] Solaris Auditing support
+Subject: [PATCH 13/34] Solaris Auditing support
 
-#
-# Add Solaris Auditing configuration (--with-audit=solaris) to openssh-6.5p1.
-#
-# Add phase 1 Solaris Auditing of sshd login/logout to openssh-6.5p1.
-#
-# Additional Solaris Auditing should include audit of password
-#  change.
-# Presuming it is appropriate, this patch should/will be updated
-#  with additional files and updates to sources/audit-solaris.c
-#
-# Code is developed by the Solaris Audit team.
-# It should/will likely be contributed up stream when done.
-# This patch relies on sources/audit-solaris.c being copied into
-#  the openssh source directory by the Makefile that configures
-#  using --with-audit=solaris.
-#
-# The up stream community has been contacted about the plans.
-#  No reply has yet been received.
-#
-# An additional patch relying on the --with-audit=solaris configuration
-#  should/will be created for sftp Solaris Audit and password change.
-#
 ---
  INSTALL         |  15 +-
  Makefile.in     |   2 +-
  README.platform |   7 +-
- audit-solaris.c | 562 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+ audit-solaris.c | 574 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  configure.ac    |   9 +-
  defines.h       |   5 +
  sshd.c          |   6 +
- 7 files changed, 597 insertions(+), 9 deletions(-)
+ 7 files changed, 609 insertions(+), 9 deletions(-)
  create mode 100644 audit-solaris.c
 
 diff --git a/INSTALL b/INSTALL
-index cbbb2df..765d4aa 100644
+index 6bc80b68..03417493 100644
 --- a/INSTALL
 +++ b/INSTALL
-@@ -92,9 +92,13 @@ http://www.gnu.org/software/autoconf/
+@@ -98,9 +98,13 @@ http://www.gnu.org/software/autoconf/
  
  Basic Security Module (BSM):
  
@@ -57,7 +35,7 @@ index cbbb2df..765d4aa 100644
  
  
  2. Building / Installation
-@@ -147,8 +151,9 @@ name).
+@@ -153,8 +157,9 @@ name).
  There are a few other options to the configure script:
  
  --with-audit=[module] enable additional auditing via the specified module.
@@ -70,20 +48,20 @@ index cbbb2df..765d4aa 100644
  --with-pam enables PAM support. If PAM support is compiled in, it must
  also be enabled in sshd_config (refer to the UsePAM directive).
 diff --git a/Makefile.in b/Makefile.in
-index 61a97de..abc9285 100644
+index 82065077..48d773de 100644
 --- a/Makefile.in
 +++ b/Makefile.in
 @@ -100,7 +100,7 @@ SSHOBJS= ssh.o readconf.o clientloop.o sshtty.o \
  	sshconnect.o sshconnect1.o sshconnect2.o mux.o
  
- SSHDOBJS=sshd.o auth-rhosts.o auth-passwd.o auth-rsa.o auth-rh-rsa.o \
+ SSHDOBJS=sshd.o auth-rhosts.o auth-passwd.o \
 -	audit.o audit-bsm.o audit-linux.o platform.o \
 +	audit.o audit-bsm.o audit-linux.o audit-solaris.o platform.o \
  	sshpty.o sshlogin.o servconf.o serverloop.o \
- 	auth.o auth1.o auth2.o auth-options.o session.o \
- 	auth-chall.o auth2-chall.o groupaccess.o \
+ 	auth.o auth2.o auth-options.o session.o \
+ 	auth2-chall.o groupaccess.o \
 diff --git a/README.platform b/README.platform
-index 8d75c16..616200b 100644
+index c7be95fb..ae461550 100644
 --- a/README.platform
 +++ b/README.platform
 @@ -71,8 +71,8 @@ zlib-devel and pam-devel, on Debian based distros these may be
@@ -109,10 +87,10 @@ index 8d75c16..616200b 100644
  -------------------
 diff --git a/audit-solaris.c b/audit-solaris.c
 new file mode 100644
-index 0000000..abf870c
+index 00000000..fc0839f5
 --- /dev/null
 +++ b/audit-solaris.c
-@@ -0,0 +1,562 @@
+@@ -0,0 +1,574 @@
 +/*
 + * CDDL HEADER START
 + *
@@ -289,26 +267,28 @@ index 0000000..abf870c
 +audit_connection_from(const char *host, int port)
 +{
 +	int peer = packet_get_connection_in();
-+	adt_session_data_t	*ah;
++	adt_session_data_t	*ah = NULL;
 +
 +	if (adt_load_termid(peer, &tid) != 0) {
 +		error("adt audit_connection_from: unable to load tid for %d:%s",
 +		    peer, strerror(errno));
++		goto err;
 +	}
 +	if (adt_start_session(&ah, NULL, 0) != 0) {
 +		error("adt audit_connection_from: unable to start session "
 +		    "for %s:%d:%s", host, port, strerror(errno));
++		goto err;
 +	}
 +	if (adt_set_user(ah, ADT_NO_AUDIT, ADT_NO_AUDIT, 0,
 +	    ADT_NO_AUDIT, tid, ADT_SETTID) != 0) {
 +		error("adt audit_connection_from: unable to set user "
 +		    "for %s:%d:%s", host, port, strerror(errno));
-+		(void) adt_end_session(ah);
-+		ah = NULL;
++		goto err;
 +	}
 +	if (adt_set_proc(ah) != 0) {
 +		error("adt audit_connection_from: unable to set proc "
 +		    "for %s:%d:%s", host, port, strerror(errno));
++		goto err;
 +	}
 +	(void) adt_end_session(ah);
 +	debug("adt audit_connection_from(%s, %d): peerfd=%d", host, port,
@@ -317,6 +297,14 @@ index 0000000..abf870c
 +	    "peerfd=%d\n", getpid(), getuid(), geteuid(), host, port,
 +	    (void *)the_authctxt, peer);
 +	__audit_pidinfo();
++	return;
++
++err:
++	free(tid);
++	tid = NULL;
++	if (ah != NULL) {
++		(void) adt_end_session(ah);
++	}
 +}
 +
 +/*
@@ -351,6 +339,8 @@ index 0000000..abf870c
 +		} else {
 +			error("adt audit_event logout without login");
 +		}
++		free(tid);
++		tid = NULL;
 +		return;
 +
 +	/* Translate fail events to Solaris PAM errors */
@@ -437,6 +427,8 @@ index 0000000..abf870c
 +			/* reset saw max tries */
 +			did_maxtries = FALSE;
 +		}
++		free(tid);
++		tid = NULL;
 +		break;
 +
 +	default:
@@ -578,8 +570,6 @@ index 0000000..abf870c
 +	adt_free_event(event);
 +	(void) adt_end_session(ah);
 +	ah = NULL;
-+	free(tid);
-+	tid = NULL;
 +}
 +
 +/*
@@ -676,10 +666,10 @@ index 0000000..abf870c
 +}
 +#endif	/* USE_SOLARIS_AUDIT */
 diff --git a/configure.ac b/configure.ac
-index 5dceabd..4192a45 100644
+index f5deed69..7a36eee9 100644
 --- a/configure.ac
 +++ b/configure.ac
-@@ -1551,7 +1551,7 @@ AC_ARG_WITH([libedit],
+@@ -1561,7 +1561,7 @@ AC_ARG_WITH([libedit],
  
  AUDIT_MODULE=none
  AC_ARG_WITH([audit],
@@ -688,7 +678,7 @@ index 5dceabd..4192a45 100644
  	[
  	  AC_MSG_CHECKING([for supported audit module])
  	  case "$withval" in
-@@ -1588,6 +1588,13 @@ AC_ARG_WITH([audit],
+@@ -1598,6 +1598,13 @@ AC_ARG_WITH([audit],
  		SSHDLIBS="$SSHDLIBS -laudit"
  		AC_DEFINE([USE_LINUX_AUDIT], [1], [Use Linux audit module])
  		;;
@@ -703,10 +693,10 @@ index 5dceabd..4192a45 100644
  		AUDIT_MODULE=debug
  		AC_MSG_RESULT([debug])
 diff --git a/defines.h b/defines.h
-index a438ddd..6196188 100644
+index c89f85a8..a2ec7361 100644
 --- a/defines.h
 +++ b/defines.h
-@@ -635,6 +635,11 @@ struct winsize {
+@@ -645,6 +645,11 @@ struct winsize {
  # define CUSTOM_SSH_AUDIT_EVENTS
  #endif
  
@@ -719,10 +709,10 @@ index a438ddd..6196188 100644
  #  define __func__ __FUNCTION__
  #elif !defined(HAVE___func__)
 diff --git a/sshd.c b/sshd.c
-index 418e1fd..37cb5fa 100644
+index e39b3024..eee363ab 100644
 --- a/sshd.c
 +++ b/sshd.c
-@@ -2234,7 +2234,9 @@ main(int ac, char **av)
+@@ -2043,7 +2043,9 @@ main(int ac, char **av)
  	}
  
  #ifdef SSH_AUDIT_EVENTS
@@ -732,7 +722,7 @@ index 418e1fd..37cb5fa 100644
  #endif
  
  #ifdef GSSAPI
-@@ -2264,6 +2266,10 @@ main(int ac, char **av)
+@@ -2073,6 +2075,10 @@ main(int ac, char **av)
  		do_pam_session();
  	}
  #endif
@@ -744,5 +734,5 @@ index 418e1fd..37cb5fa 100644
  	/*
  	 * In privilege separation, we fork another child and prepare
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/0014-GSS-API-key-exchange-support.patch b/openssh/Patches/0014-GSS-API-key-exchange-support.patch
new file mode 100644
index 0000000..fb81c75
--- /dev/null
+++ b/openssh/Patches/0014-GSS-API-key-exchange-support.patch
@@ -0,0 +1,3303 @@
+From 12082003b85205a16c44323f4211afce46df84b7 Mon Sep 17 00:00:00 2001
+From: Simon Wilkinson <simon@sxw.org.uk>
+Date: Fri, 27 Jan 2017 16:46:31 -0800
+Subject: [PATCH 14/34] GSS-API key exchange support
+
+---
+ ChangeLog.gssapi | 113 +++++++++++++++++++
+ Makefile.in      |   3 +-
+ auth-krb5.c      |  17 ++-
+ auth.c           |  96 +---------------
+ auth2-gss.c      |  48 +++++++-
+ auth2.c          |   2 +
+ canohost.c       |  93 +++++++++++++++
+ canohost.h       |   3 +
+ clientloop.c     |  15 ++-
+ configure.ac     |  24 ++++
+ gss-genr.c       | 275 +++++++++++++++++++++++++++++++++++++++++++-
+ gss-serv-krb5.c  |  87 ++++++++++++--
+ gss-serv.c       | 224 +++++++++++++++++++++++++++++++++---
+ kex.c            |  19 ++++
+ kex.h            |  14 +++
+ kexgssc.c        | 339 +++++++++++++++++++++++++++++++++++++++++++++++++++++++
+ kexgsss.c        | 296 ++++++++++++++++++++++++++++++++++++++++++++++++
+ monitor.c        | 115 +++++++++++++++++--
+ monitor.h        |   2 +
+ monitor_wrap.c   |  47 +++++++-
+ monitor_wrap.h   |   4 +-
+ readconf.c       |  42 +++++++
+ readconf.h       |   5 +
+ servconf.c       |  28 ++++-
+ servconf.h       |   2 +
+ ssh-gss.h        |  41 ++++++-
+ ssh_config       |   2 +
+ ssh_config.4     |  32 ++++++
+ sshconnect2.c    | 131 ++++++++++++++++++++-
+ sshd.c           | 112 +++++++++++++++++-
+ sshd_config      |   2 +
+ sshd_config.4    |  10 ++
+ sshkey.c         |   3 +-
+ sshkey.h         |   1 +
+ 34 files changed, 2099 insertions(+), 148 deletions(-)
+ create mode 100644 ChangeLog.gssapi
+ create mode 100644 kexgssc.c
+ create mode 100644 kexgsss.c
+
+diff --git a/ChangeLog.gssapi b/ChangeLog.gssapi
+new file mode 100644
+index 00000000..f117a336
+--- /dev/null
++++ b/ChangeLog.gssapi
+@@ -0,0 +1,113 @@
++20110101
++  - Finally update for OpenSSH 5.6p1
++  - Add GSSAPIServerIdentity option from Jim Basney
++ 
++20100308
++  - [ Makefile.in, key.c, key.h ]
++    Updates for OpenSSH 5.4p1
++  - [ servconf.c ]
++    Include GSSAPI options in the sshd -T configuration dump, and flag
++    some older configuration options as being unsupported. Thanks to Colin 
++    Watson.
++  -
++
++20100124
++  - [ sshconnect2.c ]
++    Adapt to deal with additional element in Authmethod structure. Thanks to
++    Colin Watson
++
++20090615
++  - [ gss-genr.c gss-serv.c kexgssc.c kexgsss.c monitor.c sshconnect2.c
++      sshd.c ]
++    Fix issues identified by Greg Hudson following a code review
++	Check return value of gss_indicate_mechs
++	Protect GSSAPI calls in monitor, so they can only be used if enabled
++	Check return values of bignum functions in key exchange
++	Use BN_clear_free to clear other side's DH value
++	Make ssh_gssapi_id_kex more robust
++	Only configure kex table pointers if GSSAPI is enabled
++	Don't leak mechanism list, or gss mechanism list
++	Cast data.length before printing
++	If serverkey isn't provided, use an empty string, rather than NULL
++
++20090201
++  - [ gss-genr.c gss-serv.c kex.h kexgssc.c readconf.c readconf.h ssh-gss.h
++      ssh_config.5 sshconnet2.c ]
++    Add support for the GSSAPIClientIdentity option, which allows the user
++    to specify which GSSAPI identity to use to contact a given server
++
++20080404
++  - [ gss-serv.c ]
++    Add code to actually implement GSSAPIStrictAcceptCheck, which had somehow
++    been omitted from a previous version of this patch. Reported by Borislav
++    Stoichkov
++
++20070317
++  - [ gss-serv-krb5.c ]
++    Remove C99ism, where new_ccname was being declared in the middle of a 
++    function
++
++20061220
++  - [ servconf.c ]
++    Make default for GSSAPIStrictAcceptorCheck be Yes, to match previous, and 
++    documented, behaviour. Reported by Dan Watson.
++
++20060910
++  - [ gss-genr.c kexgssc.c kexgsss.c kex.h monitor.c sshconnect2.c sshd.c
++      ssh-gss.h ]
++    add support for gss-group14-sha1 key exchange mechanisms
++  - [ gss-serv.c servconf.c servconf.h sshd_config sshd_config.5 ]
++    Add GSSAPIStrictAcceptorCheck option to allow the disabling of
++    acceptor principal checking on multi-homed machines.
++    <Bugzilla #928>
++  - [ sshd_config ssh_config ]
++    Add settings for GSSAPIKeyExchange and GSSAPITrustDNS to the sample
++    configuration files
++  - [ kexgss.c kegsss.c sshconnect2.c sshd.c ]
++    Code cleanup. Replace strlen/xmalloc/snprintf sequences with xasprintf()
++    Limit length of error messages displayed by client
++
++20060909
++  - [ gss-genr.c gss-serv.c ]
++    move ssh_gssapi_acquire_cred() and ssh_gssapi_server_ctx to be server
++    only, where they belong 
++    <Bugzilla #1225>
++
++20060829
++  - [ gss-serv-krb5.c ]
++    Fix CCAPI credentials cache name when creating KRB5CCNAME environment 
++    variable
++
++20060828
++  - [ gss-genr.c ]
++    Avoid Heimdal context freeing problem
++    <Fixed upstream 20060829>
++
++20060818
++  - [ gss-genr.c ssh-gss.h sshconnect2.c ]
++    Make sure that SPENGO is disabled 
++    <Bugzilla #1218 - Fixed upstream 20060818>
++
++20060421
++  - [ gssgenr.c, sshconnect2.c ]
++    a few type changes (signed versus unsigned, int versus size_t) to
++    fix compiler errors/warnings 
++    (from jbasney AT ncsa.uiuc.edu)
++  - [ kexgssc.c, sshconnect2.c ]
++    fix uninitialized variable warnings
++    (from jbasney AT ncsa.uiuc.edu)
++  - [ gssgenr.c ]
++    pass oid to gss_display_status (helpful when using GSSAPI mechglue)
++    (from jbasney AT ncsa.uiuc.edu)
++    <Bugzilla #1220 >
++  - [ gss-serv-krb5.c ]
++    #ifdef HAVE_GSSAPI_KRB5 should be #ifdef HAVE_GSSAPI_KRB5_H
++    (from jbasney AT ncsa.uiuc.edu)
++    <Fixed upstream 20060304>
++  - [ readconf.c, readconf.h, ssh_config.5, sshconnect2.c 
++    add client-side GssapiKeyExchange option
++    (from jbasney AT ncsa.uiuc.edu)
++  - [ sshconnect2.c ]
++    add support for GssapiTrustDns option for gssapi-with-mic
++    (from jbasney AT ncsa.uiuc.edu)
++    <gssapi-with-mic support is Bugzilla #1008>
+diff --git a/Makefile.in b/Makefile.in
+index 48d773de..47dbceff 100644
+--- a/Makefile.in
++++ b/Makefile.in
+@@ -94,6 +94,7 @@ LIBSSH_OBJS=${LIBOPENSSH_OBJS} \
+ 	kex.o kexdh.o kexgex.o kexecdh.o kexc25519.o \
+ 	kexdhc.o kexgexc.o kexecdhc.o kexc25519c.o \
+ 	kexdhs.o kexgexs.o kexecdhs.o kexc25519s.o \
++	kexgssc.o \
+ 	platform-pledge.o platform-tracing.o
+ 
+ SSHOBJS= ssh.o readconf.o clientloop.o sshtty.o \
+@@ -107,7 +108,7 @@ SSHDOBJS=sshd.o auth-rhosts.o auth-passwd.o \
+ 	auth-skey.o auth-bsdauth.o auth2-hostbased.o auth2-kbdint.o \
+ 	auth2-none.o auth2-passwd.o auth2-pubkey.o \
+ 	monitor.o monitor_wrap.o auth-krb5.o \
+-	auth2-gss.o gss-serv.o gss-serv-krb5.o \
++	auth2-gss.o gss-serv.o gss-serv-krb5.o kexgsss.o \
+ 	loginrec.o auth-pam.o auth-shadow.o auth-sia.o md5crypt.o \
+ 	sftp-server.o sftp-common.o \
+ 	sandbox-null.o sandbox-rlimit.o sandbox-systrace.o sandbox-darwin.o \
+diff --git a/auth-krb5.c b/auth-krb5.c
+index a5a81ed2..38e7fee2 100644
+--- a/auth-krb5.c
++++ b/auth-krb5.c
+@@ -182,8 +182,13 @@ auth_krb5_password(Authctxt *authctxt, const char *password)
+ 
+ 	len = strlen(authctxt->krb5_ticket_file) + 6;
+ 	authctxt->krb5_ccname = xmalloc(len);
++#ifdef USE_CCAPI
++	snprintf(authctxt->krb5_ccname, len, "API:%s",
++	    authctxt->krb5_ticket_file);
++#else
+ 	snprintf(authctxt->krb5_ccname, len, "FILE:%s",
+ 	    authctxt->krb5_ticket_file);
++#endif
+ 
+ #ifdef USE_PAM
+ 	if (options.use_pam)
+@@ -240,15 +245,22 @@ krb5_cleanup_proc(Authctxt *authctxt)
+ #ifndef HEIMDAL
+ krb5_error_code
+ ssh_krb5_cc_gen(krb5_context ctx, krb5_ccache *ccache) {
+-	int tmpfd, ret, oerrno;
++	int ret, oerrno;
+ 	char ccname[40];
+ 	mode_t old_umask;
++#ifdef USE_CCAPI
++	char cctemplate[] = "API:krb5cc_%d";
++#else
++	char cctemplate[] = "FILE:/tmp/krb5cc_%d_XXXXXXXXXX";
++	int tmpfd;
++#endif
+ 
+ 	ret = snprintf(ccname, sizeof(ccname),
+-	    "FILE:/tmp/krb5cc_%d_XXXXXXXXXX", geteuid());
++	    cctemplate, geteuid());
+ 	if (ret < 0 || (size_t)ret >= sizeof(ccname))
+ 		return ENOMEM;
+ 
++#ifndef USE_CCAPI
+ 	old_umask = umask(0177);
+ 	tmpfd = mkstemp(ccname + strlen("FILE:"));
+ 	oerrno = errno;
+@@ -265,6 +277,7 @@ ssh_krb5_cc_gen(krb5_context ctx, krb5_ccache *ccache) {
+ 		return oerrno;
+ 	}
+ 	close(tmpfd);
++#endif
+ 
+ 	return (krb5_cc_resolve(ctx, ccname, ccache));
+ }
+diff --git a/auth.c b/auth.c
+index 6ee6116d..c6390687 100644
+--- a/auth.c
++++ b/auth.c
+@@ -372,7 +372,8 @@ auth_root_allowed(const char *method)
+ 	case PERMIT_NO_PASSWD:
+ 		if (strcmp(method, "publickey") == 0 ||
+ 		    strcmp(method, "hostbased") == 0 ||
+-		    strcmp(method, "gssapi-with-mic") == 0)
++		    strcmp(method, "gssapi-with-mic") == 0 ||
++		    strcmp(method, "gssapi-keyex") == 0)
+ 			return 1;
+ 		break;
+ 	case PERMIT_FORCED_ONLY:
+@@ -795,99 +796,6 @@ fakepw(void)
+ }
+ 
+ /*
+- * Returns the remote DNS hostname as a string. The returned string must not
+- * be freed. NB. this will usually trigger a DNS query the first time it is
+- * called.
+- * This function does additional checks on the hostname to mitigate some
+- * attacks on legacy rhosts-style authentication.
+- * XXX is RhostsRSAAuthentication vulnerable to these?
+- * XXX Can we remove these checks? (or if not, remove RhostsRSAAuthentication?)
+- */
+-
+-static char *
+-remote_hostname(struct ssh *ssh)
+-{
+-	struct sockaddr_storage from;
+-	socklen_t fromlen;
+-	struct addrinfo hints, *ai, *aitop;
+-	char name[NI_MAXHOST], ntop2[NI_MAXHOST];
+-	const char *ntop = ssh_remote_ipaddr(ssh);
+-
+-	/* Get IP address of client. */
+-	fromlen = sizeof(from);
+-	memset(&from, 0, sizeof(from));
+-	if (getpeername(ssh_packet_get_connection_in(ssh),
+-	    (struct sockaddr *)&from, &fromlen) < 0) {
+-		debug("getpeername failed: %.100s", strerror(errno));
+-		return strdup(ntop);
+-	}
+-
+-	ipv64_normalise_mapped(&from, &fromlen);
+-	if (from.ss_family == AF_INET6)
+-		fromlen = sizeof(struct sockaddr_in6);
+-
+-	debug3("Trying to reverse map address %.100s.", ntop);
+-	/* Map the IP address to a host name. */
+-	if (getnameinfo((struct sockaddr *)&from, fromlen, name, sizeof(name),
+-	    NULL, 0, NI_NAMEREQD) != 0) {
+-		/* Host name not found.  Use ip address. */
+-		return strdup(ntop);
+-	}
+-
+-	/*
+-	 * if reverse lookup result looks like a numeric hostname,
+-	 * someone is trying to trick us by PTR record like following:
+-	 *	1.1.1.10.in-addr.arpa.	IN PTR	2.3.4.5
+-	 */
+-	memset(&hints, 0, sizeof(hints));
+-	hints.ai_socktype = SOCK_DGRAM;	/*dummy*/
+-	hints.ai_flags = AI_NUMERICHOST;
+-	if (getaddrinfo(name, NULL, &hints, &ai) == 0) {
+-		logit("Nasty PTR record \"%s\" is set up for %s, ignoring",
+-		    name, ntop);
+-		freeaddrinfo(ai);
+-		return strdup(ntop);
+-	}
+-
+-	/* Names are stored in lowercase. */
+-	lowercase(name);
+-
+-	/*
+-	 * Map it back to an IP address and check that the given
+-	 * address actually is an address of this host.  This is
+-	 * necessary because anyone with access to a name server can
+-	 * define arbitrary names for an IP address. Mapping from
+-	 * name to IP address can be trusted better (but can still be
+-	 * fooled if the intruder has access to the name server of
+-	 * the domain).
+-	 */
+-	memset(&hints, 0, sizeof(hints));
+-	hints.ai_family = from.ss_family;
+-	hints.ai_socktype = SOCK_STREAM;
+-	if (getaddrinfo(name, NULL, &hints, &aitop) != 0) {
+-		logit("reverse mapping checking getaddrinfo for %.700s "
+-		    "[%s] failed.", name, ntop);
+-		return strdup(ntop);
+-	}
+-	/* Look for the address from the list of addresses. */
+-	for (ai = aitop; ai; ai = ai->ai_next) {
+-		if (getnameinfo(ai->ai_addr, ai->ai_addrlen, ntop2,
+-		    sizeof(ntop2), NULL, 0, NI_NUMERICHOST) == 0 &&
+-		    (strcmp(ntop, ntop2) == 0))
+-				break;
+-	}
+-	freeaddrinfo(aitop);
+-	/* If we reached the end of the list, the address was not there. */
+-	if (ai == NULL) {
+-		/* Address not found for the host name. */
+-		logit("Address %.100s maps to %.600s, but this does not "
+-		    "map back to the address.", ntop, name);
+-		return strdup(ntop);
+-	}
+-	return strdup(name);
+-}
+-
+-/*
+  * Return the canonical name of the host in the other side of the current
+  * connection.  The host name is cached, so it is efficient to call this
+  * several times.
+diff --git a/auth2-gss.c b/auth2-gss.c
+index 1ca83577..3b5036df 100644
+--- a/auth2-gss.c
++++ b/auth2-gss.c
+@@ -1,7 +1,7 @@
+ /* $OpenBSD: auth2-gss.c,v 1.22 2015/01/19 20:07:45 markus Exp $ */
+ 
+ /*
+- * Copyright (c) 2001-2003 Simon Wilkinson. All rights reserved.
++ * Copyright (c) 2001-2007 Simon Wilkinson. All rights reserved.
+  *
+  * Redistribution and use in source and binary forms, with or without
+  * modification, are permitted provided that the following conditions
+@@ -53,6 +53,40 @@ static int input_gssapi_mic(int type, u_int32_t plen, void *ctxt);
+ static int input_gssapi_exchange_complete(int type, u_int32_t plen, void *ctxt);
+ static int input_gssapi_errtok(int, u_int32_t, void *);
+ 
++/* 
++ * The 'gssapi_keyex' userauth mechanism.
++ */
++static int
++userauth_gsskeyex(Authctxt *authctxt)
++{
++	int authenticated = 0;
++	Buffer b;
++	gss_buffer_desc mic, gssbuf;
++	u_int len;
++
++	mic.value = packet_get_string(&len);
++	mic.length = len;
++
++	packet_check_eom();
++
++	ssh_gssapi_buildmic(&b, authctxt->user, authctxt->service,
++	    "gssapi-keyex");
++
++	gssbuf.value = buffer_ptr(&b);
++	gssbuf.length = buffer_len(&b);
++
++	/* gss_kex_context is NULL with privsep, so we can't check it here */
++	if (!GSS_ERROR(PRIVSEP(ssh_gssapi_checkmic(gss_kex_context, 
++	    &gssbuf, &mic))))
++		authenticated = PRIVSEP(ssh_gssapi_userok(authctxt->user,
++		    authctxt->pw));
++	
++	buffer_free(&b);
++	free(mic.value);
++
++	return (authenticated);
++}
++
+ /*
+  * We only support those mechanisms that we know about (ie ones that we know
+  * how to check local user kuserok and the like)
+@@ -238,7 +272,8 @@ input_gssapi_exchange_complete(int type, u_int32_t plen, void *ctxt)
+ 
+ 	packet_check_eom();
+ 
+-	authenticated = PRIVSEP(ssh_gssapi_userok(authctxt->user));
++	authenticated = PRIVSEP(ssh_gssapi_userok(authctxt->user,
++	    authctxt->pw));
+ 
+ 	authctxt->postponed = 0;
+ 	dispatch_set(SSH2_MSG_USERAUTH_GSSAPI_TOKEN, NULL);
+@@ -274,7 +309,8 @@ input_gssapi_mic(int type, u_int32_t plen, void *ctxt)
+ 	gssbuf.length = buffer_len(&b);
+ 
+ 	if (!GSS_ERROR(PRIVSEP(ssh_gssapi_checkmic(gssctxt, &gssbuf, &mic))))
+-		authenticated = PRIVSEP(ssh_gssapi_userok(authctxt->user));
++		authenticated = 
++		    PRIVSEP(ssh_gssapi_userok(authctxt->user, authctxt->pw));
+ 	else
+ 		logit("GSSAPI MIC check failed");
+ 
+@@ -290,6 +326,12 @@ input_gssapi_mic(int type, u_int32_t plen, void *ctxt)
+ 	return 0;
+ }
+ 
++Authmethod method_gsskeyex = {
++	"gssapi-keyex",
++	userauth_gsskeyex,
++	&options.gss_authentication
++};
++
+ Authmethod method_gssapi = {
+ 	"gssapi-with-mic",
+ 	userauth_gssapi,
+diff --git a/auth2.c b/auth2.c
+index 4623ae02..6a9f936b 100644
+--- a/auth2.c
++++ b/auth2.c
+@@ -70,6 +70,7 @@ extern Authmethod method_passwd;
+ extern Authmethod method_kbdint;
+ extern Authmethod method_hostbased;
+ #ifdef GSSAPI
++extern Authmethod method_gsskeyex;
+ extern Authmethod method_gssapi;
+ #endif
+ 
+@@ -77,6 +78,7 @@ Authmethod *authmethods[] = {
+ 	&method_none,
+ 	&method_pubkey,
+ #ifdef GSSAPI
++	&method_gsskeyex,
+ 	&method_gssapi,
+ #endif
+ 	&method_passwd,
+diff --git a/canohost.c b/canohost.c
+index f71a0856..404731d2 100644
+--- a/canohost.c
++++ b/canohost.c
+@@ -35,6 +35,99 @@
+ #include "canohost.h"
+ #include "misc.h"
+ 
++/*
++ * Returns the remote DNS hostname as a string. The returned string must not
++ * be freed. NB. this will usually trigger a DNS query the first time it is
++ * called.
++ * This function does additional checks on the hostname to mitigate some
++ * attacks on legacy rhosts-style authentication.
++ * XXX is RhostsRSAAuthentication vulnerable to these?
++ * XXX Can we remove these checks? (or if not, remove RhostsRSAAuthentication?)
++ */
++
++char *
++remote_hostname(struct ssh *ssh)
++{
++	struct sockaddr_storage from;
++	socklen_t fromlen;
++	struct addrinfo hints, *ai, *aitop;
++	char name[NI_MAXHOST], ntop2[NI_MAXHOST];
++	const char *ntop = ssh_remote_ipaddr(ssh);
++
++	/* Get IP address of client. */
++	fromlen = sizeof(from);
++	memset(&from, 0, sizeof(from));
++	if (getpeername(ssh_packet_get_connection_in(ssh),
++	    (struct sockaddr *)&from, &fromlen) < 0) {
++		debug("getpeername failed: %.100s", strerror(errno));
++		return strdup(ntop);
++	}
++
++	ipv64_normalise_mapped(&from, &fromlen);
++	if (from.ss_family == AF_INET6)
++		fromlen = sizeof(struct sockaddr_in6);
++
++	debug3("Trying to reverse map address %.100s.", ntop);
++	/* Map the IP address to a host name. */
++	if (getnameinfo((struct sockaddr *)&from, fromlen, name, sizeof(name),
++	    NULL, 0, NI_NAMEREQD) != 0) {
++		/* Host name not found.  Use ip address. */
++		return strdup(ntop);
++	}
++
++	/*
++	 * if reverse lookup result looks like a numeric hostname,
++	 * someone is trying to trick us by PTR record like following:
++	 *	1.1.1.10.in-addr.arpa.	IN PTR	2.3.4.5
++	 */
++	memset(&hints, 0, sizeof(hints));
++	hints.ai_socktype = SOCK_DGRAM;	/*dummy*/
++	hints.ai_flags = AI_NUMERICHOST;
++	if (getaddrinfo(name, NULL, &hints, &ai) == 0) {
++		logit("Nasty PTR record \"%s\" is set up for %s, ignoring",
++		    name, ntop);
++		freeaddrinfo(ai);
++		return strdup(ntop);
++	}
++
++	/* Names are stored in lowercase. */
++	lowercase(name);
++
++	/*
++	 * Map it back to an IP address and check that the given
++	 * address actually is an address of this host.  This is
++	 * necessary because anyone with access to a name server can
++	 * define arbitrary names for an IP address. Mapping from
++	 * name to IP address can be trusted better (but can still be
++	 * fooled if the intruder has access to the name server of
++	 * the domain).
++	 */
++	memset(&hints, 0, sizeof(hints));
++	hints.ai_family = from.ss_family;
++	hints.ai_socktype = SOCK_STREAM;
++	if (getaddrinfo(name, NULL, &hints, &aitop) != 0) {
++		logit("reverse mapping checking getaddrinfo for %.700s "
++		    "[%s] failed.", name, ntop);
++		return strdup(ntop);
++	}
++	/* Look for the address from the list of addresses. */
++	for (ai = aitop; ai; ai = ai->ai_next) {
++		if (getnameinfo(ai->ai_addr, ai->ai_addrlen, ntop2,
++		    sizeof(ntop2), NULL, 0, NI_NUMERICHOST) == 0 &&
++		    (strcmp(ntop, ntop2) == 0))
++				break;
++	}
++	freeaddrinfo(aitop);
++	/* If we reached the end of the list, the address was not there. */
++	if (ai == NULL) {
++		/* Address not found for the host name. */
++		logit("Address %.100s maps to %.600s, but this does not "
++		    "map back to the address.", ntop, name);
++		return strdup(ntop);
++	}
++	return strdup(name);
++}
++
+ void
+ ipv64_normalise_mapped(struct sockaddr_storage *addr, socklen_t *len)
+ {
+diff --git a/canohost.h b/canohost.h
+index 26d62855..0cadc9f1 100644
+--- a/canohost.h
++++ b/canohost.h
+@@ -15,6 +15,9 @@
+ #ifndef _CANOHOST_H
+ #define _CANOHOST_H
+ 
++struct ssh;
++
++char		*remote_hostname(struct ssh *);
+ char		*get_peer_ipaddr(int);
+ int		 get_peer_port(int);
+ char		*get_local_ipaddr(int);
+diff --git a/clientloop.c b/clientloop.c
+index 4289a408..99c68b69 100644
+--- a/clientloop.c
++++ b/clientloop.c
+@@ -113,6 +113,10 @@
+ #include "ssherr.h"
+ #include "hostfile.h"
+ 
++#ifdef GSSAPI
++#include "ssh-gss.h"
++#endif
++
+ /* import options */
+ extern Options options;
+ 
+@@ -1664,9 +1668,18 @@ client_loop(int have_pty, int escape_char_arg, int ssh2_chan_id)
+ 			break;
+ 
+ 		/* Do channel operations unless rekeying in progress. */
+-		if (!ssh_packet_is_rekeying(active_state))
++		if (!ssh_packet_is_rekeying(active_state)) {
+ 			channel_after_select(readset, writeset);
+ 
++#ifdef GSSAPI
++			if (options.gss_renewal_rekey &&
++			    ssh_gssapi_credentials_updated(NULL)) {
++				debug("credentials updated - forcing rekey");
++				need_rekeying = 1;
++			}
++#endif
++		}
++
+ 		/* Buffer input from the connection.  */
+ 		client_process_net_input(readset);
+ 
+diff --git a/configure.ac b/configure.ac
+index 7a36eee9..1635897c 100644
+--- a/configure.ac
++++ b/configure.ac
+@@ -623,6 +623,30 @@ main() { if (NSVersionOfRunTimeLibrary("System") >= (60 << 16))
+ 	    [Use tunnel device compatibility to OpenBSD])
+ 	AC_DEFINE([SSH_TUN_PREPEND_AF], [1],
+ 	    [Prepend the address family to IP tunnel traffic])
++	AC_MSG_CHECKING([if we have the Security Authorization Session API])
++	AC_TRY_COMPILE([#include <Security/AuthSession.h>],
++		[SessionCreate(0, 0);],
++		[ac_cv_use_security_session_api="yes"
++		 AC_DEFINE([USE_SECURITY_SESSION_API], [1], 
++			[platform has the Security Authorization Session API])
++		 LIBS="$LIBS -framework Security"
++		 AC_MSG_RESULT([yes])],
++		[ac_cv_use_security_session_api="no"
++		 AC_MSG_RESULT([no])])
++	AC_MSG_CHECKING([if we have an in-memory credentials cache])
++	AC_TRY_COMPILE(
++		[#include <Kerberos/Kerberos.h>],
++		[cc_context_t c;
++		 (void) cc_initialize (&c, 0, NULL, NULL);],
++		[AC_DEFINE([USE_CCAPI], [1], 
++			[platform uses an in-memory credentials cache])
++		 LIBS="$LIBS -framework Security"
++		 AC_MSG_RESULT([yes])
++		 if test "x$ac_cv_use_security_session_api" = "xno"; then
++			AC_MSG_ERROR([*** Need a security framework to use the credentials cache API ***])
++		fi],
++		[AC_MSG_RESULT([no])]
++	)
+ 	m4_pattern_allow([AU_IPv])
+ 	AC_CHECK_DECL([AU_IPv4], [],
+ 	    AC_DEFINE([AU_IPv4], [0], [System only supports IPv4 audit records])
+diff --git a/gss-genr.c b/gss-genr.c
+index 62559ed9..0b3ae073 100644
+--- a/gss-genr.c
++++ b/gss-genr.c
+@@ -1,7 +1,7 @@
+ /* $OpenBSD: gss-genr.c,v 1.24 2016/09/12 01:22:38 deraadt Exp $ */
+ 
+ /*
+- * Copyright (c) 2001-2007 Simon Wilkinson. All rights reserved.
++ * Copyright (c) 2001-2009 Simon Wilkinson. All rights reserved.
+  *
+  * Redistribution and use in source and binary forms, with or without
+  * modification, are permitted provided that the following conditions
+@@ -40,12 +40,167 @@
+ #include "buffer.h"
+ #include "log.h"
+ #include "ssh2.h"
++#include "cipher.h"
++#include "key.h"
++#include "kex.h"
++#include <openssl/evp.h>
+ 
+ #include "ssh-gss.h"
+ 
+ extern u_char *session_id2;
+ extern u_int session_id2_len;
+ 
++typedef struct {
++	char *encoded;
++	gss_OID oid;
++} ssh_gss_kex_mapping;
++
++/*
++ * XXX - It would be nice to find a more elegant way of handling the
++ * XXX   passing of the key exchange context to the userauth routines
++ */
++
++Gssctxt *gss_kex_context = NULL;
++
++static ssh_gss_kex_mapping *gss_enc2oid = NULL;
++
++int 
++ssh_gssapi_oid_table_ok(void) {
++	return (gss_enc2oid != NULL);
++}
++
++/*
++ * Return a list of the gss-group1-sha1 mechanisms supported by this program
++ *
++ * We test mechanisms to ensure that we can use them, to avoid starting
++ * a key exchange with a bad mechanism
++ */
++
++char *
++ssh_gssapi_client_mechanisms(const char *host, const char *client) {
++	gss_OID_set gss_supported;
++	OM_uint32 min_status;
++
++	if (GSS_ERROR(gss_indicate_mechs(&min_status, &gss_supported)))
++		return NULL;
++
++	return(ssh_gssapi_kex_mechs(gss_supported, ssh_gssapi_check_mechanism,
++	    host, client));
++}
++
++char *
++ssh_gssapi_kex_mechs(gss_OID_set gss_supported, ssh_gssapi_check_fn *check,
++    const char *host, const char *client) {
++	Buffer buf;
++	size_t i;
++	int oidpos, enclen;
++	char *mechs, *encoded;
++	u_char digest[EVP_MAX_MD_SIZE];
++	char deroid[2];
++	const EVP_MD *evp_md = EVP_md5();
++	EVP_MD_CTX md;
++
++	if (gss_enc2oid != NULL) {
++		for (i = 0; gss_enc2oid[i].encoded != NULL; i++)
++			free(gss_enc2oid[i].encoded);
++		free(gss_enc2oid);
++	}
++
++	gss_enc2oid = xmalloc(sizeof(ssh_gss_kex_mapping) *
++	    (gss_supported->count + 1));
++
++	buffer_init(&buf);
++
++	oidpos = 0;
++	for (i = 0; i < gss_supported->count; i++) {
++		if (gss_supported->elements[i].length < 128 &&
++		    (*check)(NULL, &(gss_supported->elements[i]), host, client)) {
++
++			deroid[0] = SSH_GSS_OIDTYPE;
++			deroid[1] = gss_supported->elements[i].length;
++
++			EVP_DigestInit(&md, evp_md);
++			EVP_DigestUpdate(&md, deroid, 2);
++			EVP_DigestUpdate(&md,
++			    gss_supported->elements[i].elements,
++			    gss_supported->elements[i].length);
++			EVP_DigestFinal(&md, digest, NULL);
++
++			encoded = xmalloc(EVP_MD_size(evp_md) * 2);
++			enclen = __b64_ntop(digest, EVP_MD_size(evp_md),
++			    encoded, EVP_MD_size(evp_md) * 2);
++
++			if (oidpos != 0)
++				buffer_put_char(&buf, ',');
++
++			buffer_append(&buf, KEX_GSS_GEX_SHA1_ID,
++			    sizeof(KEX_GSS_GEX_SHA1_ID) - 1);
++			buffer_append(&buf, encoded, enclen);
++			buffer_put_char(&buf, ',');
++			buffer_append(&buf, KEX_GSS_GRP1_SHA1_ID, 
++			    sizeof(KEX_GSS_GRP1_SHA1_ID) - 1);
++			buffer_append(&buf, encoded, enclen);
++			buffer_put_char(&buf, ',');
++			buffer_append(&buf, KEX_GSS_GRP14_SHA1_ID,
++			    sizeof(KEX_GSS_GRP14_SHA1_ID) - 1);
++			buffer_append(&buf, encoded, enclen);
++
++			gss_enc2oid[oidpos].oid = &(gss_supported->elements[i]);
++			gss_enc2oid[oidpos].encoded = encoded;
++			oidpos++;
++		}
++	}
++	gss_enc2oid[oidpos].oid = NULL;
++	gss_enc2oid[oidpos].encoded = NULL;
++
++	buffer_put_char(&buf, '\0');
++
++	mechs = xmalloc(buffer_len(&buf));
++	buffer_get(&buf, mechs, buffer_len(&buf));
++	buffer_free(&buf);
++
++	if (strlen(mechs) == 0) {
++		free(mechs);
++		mechs = NULL;
++	}
++	
++	return (mechs);
++}
++
++gss_OID
++ssh_gssapi_id_kex(Gssctxt *ctx, char *name, int kex_type) {
++	int i = 0;
++	
++	switch (kex_type) {
++	case KEX_GSS_GRP1_SHA1:
++		if (strlen(name) < sizeof(KEX_GSS_GRP1_SHA1_ID))
++			return GSS_C_NO_OID;
++		name += sizeof(KEX_GSS_GRP1_SHA1_ID) - 1;
++		break;
++	case KEX_GSS_GRP14_SHA1:
++		if (strlen(name) < sizeof(KEX_GSS_GRP14_SHA1_ID))
++			return GSS_C_NO_OID;
++		name += sizeof(KEX_GSS_GRP14_SHA1_ID) - 1;
++		break;
++	case KEX_GSS_GEX_SHA1:
++		if (strlen(name) < sizeof(KEX_GSS_GEX_SHA1_ID))
++			return GSS_C_NO_OID;
++		name += sizeof(KEX_GSS_GEX_SHA1_ID) - 1;
++		break;
++	default:
++		return GSS_C_NO_OID;
++	}
++
++	while (gss_enc2oid[i].encoded != NULL &&
++	    strcmp(name, gss_enc2oid[i].encoded) != 0)
++		i++;
++
++	if (gss_enc2oid[i].oid != NULL && ctx != NULL)
++		ssh_gssapi_set_oid(ctx, gss_enc2oid[i].oid);
++
++	return gss_enc2oid[i].oid;
++}
++
+ /* Check that the OID in a data stream matches that in the context */
+ int
+ ssh_gssapi_check_oid(Gssctxt *ctx, void *data, size_t len)
+@@ -198,7 +353,7 @@ ssh_gssapi_init_ctx(Gssctxt *ctx, int deleg_creds, gss_buffer_desc *recv_tok,
+ 	}
+ 
+ 	ctx->major = gss_init_sec_context(&ctx->minor,
+-	    GSS_C_NO_CREDENTIAL, &ctx->context, ctx->name, ctx->oid,
++	    ctx->client_creds, &ctx->context, ctx->name, ctx->oid,
+ 	    GSS_C_MUTUAL_FLAG | GSS_C_INTEG_FLAG | deleg_flag,
+ 	    0, NULL, recv_tok, NULL, send_tok, flags, NULL);
+ 
+@@ -228,8 +383,42 @@ ssh_gssapi_import_name(Gssctxt *ctx, const char *host)
+ }
+ 
+ OM_uint32
++ssh_gssapi_client_identity(Gssctxt *ctx, const char *name)
++{
++	gss_buffer_desc gssbuf;
++	gss_name_t gssname;
++	OM_uint32 status;
++	gss_OID_set oidset;
++
++	gssbuf.value = (void *) name;
++	gssbuf.length = strlen(gssbuf.value);
++
++	gss_create_empty_oid_set(&status, &oidset);
++	gss_add_oid_set_member(&status, ctx->oid, &oidset);
++
++	ctx->major = gss_import_name(&ctx->minor, &gssbuf,
++	    GSS_C_NT_USER_NAME, &gssname);
++
++	if (!ctx->major)
++		ctx->major = gss_acquire_cred(&ctx->minor, 
++		    gssname, 0, oidset, GSS_C_INITIATE, 
++		    &ctx->client_creds, NULL, NULL);
++
++	gss_release_name(&status, &gssname);
++	gss_release_oid_set(&status, &oidset);
++
++	if (ctx->major)
++		ssh_gssapi_error(ctx);
++
++	return(ctx->major);
++}
++
++OM_uint32
+ ssh_gssapi_sign(Gssctxt *ctx, gss_buffer_t buffer, gss_buffer_t hash)
+ {
++	if (ctx == NULL) 
++		return -1;
++
+ 	if ((ctx->major = gss_get_mic(&ctx->minor, ctx->context,
+ 	    GSS_C_QOP_DEFAULT, buffer, hash)))
+ 		ssh_gssapi_error(ctx);
+@@ -237,6 +426,19 @@ ssh_gssapi_sign(Gssctxt *ctx, gss_buffer_t buffer, gss_buffer_t hash)
+ 	return (ctx->major);
+ }
+ 
++/* Priviledged when used by server */
++OM_uint32
++ssh_gssapi_checkmic(Gssctxt *ctx, gss_buffer_t gssbuf, gss_buffer_t gssmic)
++{
++	if (ctx == NULL)
++		return -1;
++
++	ctx->major = gss_verify_mic(&ctx->minor, ctx->context,
++	    gssbuf, gssmic, NULL);
++
++	return (ctx->major);
++}
++
+ void
+ ssh_gssapi_buildmic(Buffer *b, const char *user, const char *service,
+     const char *context)
+@@ -250,11 +452,16 @@ ssh_gssapi_buildmic(Buffer *b, const char *user, const char *service,
+ }
+ 
+ int
+-ssh_gssapi_check_mechanism(Gssctxt **ctx, gss_OID oid, const char *host)
++ssh_gssapi_check_mechanism(Gssctxt **ctx, gss_OID oid, const char *host, 
++    const char *client)
+ {
+ 	gss_buffer_desc token = GSS_C_EMPTY_BUFFER;
+ 	OM_uint32 major, minor;
+ 	gss_OID_desc spnego_oid = {6, (void *)"\x2B\x06\x01\x05\x05\x02"};
++	Gssctxt *intctx = NULL;
++
++	if (ctx == NULL)
++		ctx = &intctx;
+ 
+ 	/* RFC 4462 says we MUST NOT do SPNEGO */
+ 	if (oid->length == spnego_oid.length && 
+@@ -264,6 +471,10 @@ ssh_gssapi_check_mechanism(Gssctxt **ctx, gss_OID oid, const char *host)
+ 	ssh_gssapi_build_ctx(ctx);
+ 	ssh_gssapi_set_oid(*ctx, oid);
+ 	major = ssh_gssapi_import_name(*ctx, host);
++
++	if (!GSS_ERROR(major) && client)
++		major = ssh_gssapi_client_identity(*ctx, client);
++
+ 	if (!GSS_ERROR(major)) {
+ 		major = ssh_gssapi_init_ctx(*ctx, 0, GSS_C_NO_BUFFER, &token, 
+ 		    NULL);
+@@ -273,10 +484,66 @@ ssh_gssapi_check_mechanism(Gssctxt **ctx, gss_OID oid, const char *host)
+ 			    GSS_C_NO_BUFFER);
+ 	}
+ 
+-	if (GSS_ERROR(major)) 
++	if (GSS_ERROR(major) || intctx != NULL) 
+ 		ssh_gssapi_delete_ctx(ctx);
+ 
+ 	return (!GSS_ERROR(major));
+ }
+ 
++int
++ssh_gssapi_credentials_updated(Gssctxt *ctxt) {
++	static gss_name_t saved_name = GSS_C_NO_NAME;
++	static OM_uint32 saved_lifetime = 0;
++	static gss_OID saved_mech = GSS_C_NO_OID;
++	static gss_name_t name;
++	static OM_uint32 last_call = 0;
++	OM_uint32 lifetime, now, major, minor;
++	int equal;
++	
++	now = time(NULL);
++
++	if (ctxt) {
++		debug("Rekey has happened - updating saved versions");
++
++		if (saved_name != GSS_C_NO_NAME)
++			gss_release_name(&minor, &saved_name);
++
++		major = gss_inquire_cred(&minor, GSS_C_NO_CREDENTIAL,
++		    &saved_name, &saved_lifetime, NULL, NULL);
++
++		if (!GSS_ERROR(major)) {
++			saved_mech = ctxt->oid;
++		        saved_lifetime+= now;
++		} else {
++			/* Handle the error */
++		}
++		return 0;
++	}
++
++	if (now - last_call < 10)
++		return 0;
++
++	last_call = now;
++
++	if (saved_mech == GSS_C_NO_OID)
++		return 0;
++	
++	major = gss_inquire_cred(&minor, GSS_C_NO_CREDENTIAL, 
++	    &name, &lifetime, NULL, NULL);
++	if (major == GSS_S_CREDENTIALS_EXPIRED)
++		return 0;
++	else if (GSS_ERROR(major))
++		return 0;
++
++	major = gss_compare_name(&minor, saved_name, name, &equal);
++	gss_release_name(&minor, &name);
++	if (GSS_ERROR(major))
++		return 0;
++
++	if (equal && (saved_lifetime < lifetime + now - 10))
++		return 1;
++
++	return 0;
++}
++
+ #endif /* GSSAPI */
+diff --git a/gss-serv-krb5.c b/gss-serv-krb5.c
+index 6e6cff7b..fcfb86a8 100644
+--- a/gss-serv-krb5.c
++++ b/gss-serv-krb5.c
+@@ -1,7 +1,7 @@
+ /* $OpenBSD: gss-serv-krb5.c,v 1.8 2013/07/20 01:55:13 djm Exp $ */
+ 
+ /*
+- * Copyright (c) 2001-2003 Simon Wilkinson. All rights reserved.
++ * Copyright (c) 2001-2007 Simon Wilkinson. All rights reserved.
+  *
+  * Redistribution and use in source and binary forms, with or without
+  * modification, are permitted provided that the following conditions
+@@ -121,8 +121,8 @@ ssh_gssapi_krb5_storecreds(ssh_gssapi_client *client)
+ 	krb5_error_code problem;
+ 	krb5_principal princ;
+ 	OM_uint32 maj_status, min_status;
+-	int len;
+ 	const char *errmsg;
++	const char *new_ccname;
+ 
+ 	if (client->creds == NULL) {
+ 		debug("No credentials stored");
+@@ -181,11 +181,16 @@ ssh_gssapi_krb5_storecreds(ssh_gssapi_client *client)
+ 		return;
+ 	}
+ 
+-	client->store.filename = xstrdup(krb5_cc_get_name(krb_context, ccache));
++	new_ccname = krb5_cc_get_name(krb_context, ccache);
++
+ 	client->store.envvar = "KRB5CCNAME";
+-	len = strlen(client->store.filename) + 6;
+-	client->store.envval = xmalloc(len);
+-	snprintf(client->store.envval, len, "FILE:%s", client->store.filename);
++#ifdef USE_CCAPI
++	xasprintf(&client->store.envval, "API:%s", new_ccname);
++	client->store.filename = NULL;
++#else
++	xasprintf(&client->store.envval, "FILE:%s", new_ccname);
++	client->store.filename = xstrdup(new_ccname);
++#endif
+ 
+ #ifdef USE_PAM
+ 	if (options.use_pam)
+@@ -196,6 +201,72 @@ ssh_gssapi_krb5_storecreds(ssh_gssapi_client *client)
+ 
+ 	return;
+ }
++
++int
++ssh_gssapi_krb5_updatecreds(ssh_gssapi_ccache *store, 
++    ssh_gssapi_client *client)
++{
++	krb5_ccache ccache = NULL;
++	krb5_principal principal = NULL;
++	char *name = NULL;
++	krb5_error_code problem;
++	OM_uint32 maj_status, min_status;
++
++   	if ((problem = krb5_cc_resolve(krb_context, store->envval, &ccache))) {
++                logit("krb5_cc_resolve(): %.100s",
++                    krb5_get_err_text(krb_context, problem));
++                return 0;
++       	}
++	
++	/* Find out who the principal in this cache is */
++	if ((problem = krb5_cc_get_principal(krb_context, ccache, 
++	    &principal))) {
++		logit("krb5_cc_get_principal(): %.100s",
++		    krb5_get_err_text(krb_context, problem));
++		krb5_cc_close(krb_context, ccache);
++		return 0;
++	}
++
++	if ((problem = krb5_unparse_name(krb_context, principal, &name))) {
++		logit("krb5_unparse_name(): %.100s",
++		    krb5_get_err_text(krb_context, problem));
++		krb5_free_principal(krb_context, principal);
++		krb5_cc_close(krb_context, ccache);
++		return 0;
++	}
++
++
++	if (strcmp(name,client->exportedname.value)!=0) {
++		debug("Name in local credentials cache differs. Not storing");
++		krb5_free_principal(krb_context, principal);
++		krb5_cc_close(krb_context, ccache);
++		krb5_free_unparsed_name(krb_context, name);
++		return 0;
++	}
++	krb5_free_unparsed_name(krb_context, name);
++
++	/* Name matches, so lets get on with it! */
++
++	if ((problem = krb5_cc_initialize(krb_context, ccache, principal))) {
++		logit("krb5_cc_initialize(): %.100s",
++		    krb5_get_err_text(krb_context, problem));
++		krb5_free_principal(krb_context, principal);
++		krb5_cc_close(krb_context, ccache);
++		return 0;
++	}
++
++	krb5_free_principal(krb_context, principal);
++
++	if ((maj_status = gss_krb5_copy_ccache(&min_status, client->creds,
++	    ccache))) {
++		logit("gss_krb5_copy_ccache() failed. Sorry!");
++		krb5_cc_close(krb_context, ccache);
++		return 0;
++	}
++
++	return 1;
++}
++
+ #endif /* #ifndef USE_GSS_STORE_CRED */
+ 
+ ssh_gssapi_mech gssapi_kerberos_mech = {
+@@ -206,9 +277,11 @@ ssh_gssapi_mech gssapi_kerberos_mech = {
+ 	&ssh_gssapi_krb5_userok,
+ 	NULL,
+ #ifdef USE_GSS_STORE_CRED
++	NULL,
+ 	NULL
+ #else
+-	&ssh_gssapi_krb5_storecreds
++	&ssh_gssapi_krb5_storecreds,
++	&ssh_gssapi_krb5_updatecreds
+ #endif
+ };
+ 
+diff --git a/gss-serv.c b/gss-serv.c
+index 209ffe82..3f9dfe5c 100644
+--- a/gss-serv.c
++++ b/gss-serv.c
+@@ -1,7 +1,7 @@
+ /* $OpenBSD: gss-serv.c,v 1.29 2015/05/22 03:50:02 djm Exp $ */
+ 
+ /*
+- * Copyright (c) 2001-2003 Simon Wilkinson. All rights reserved.
++ * Copyright (c) 2001-2009 Simon Wilkinson. All rights reserved.
+  *
+  * Redistribution and use in source and binary forms, with or without
+  * modification, are permitted provided that the following conditions
+@@ -45,17 +45,22 @@
+ #include "session.h"
+ #include "misc.h"
+ #include "servconf.h"
++#include "uidswap.h"
+ 
+ #include "ssh-gss.h"
++#include "monitor_wrap.h"
++
++extern ServerOptions options;
+ 
+ extern ServerOptions options;
+ 
+ static ssh_gssapi_client gssapi_client =
+     { GSS_C_EMPTY_BUFFER, GSS_C_EMPTY_BUFFER,
+-    GSS_C_NO_CREDENTIAL, NULL, {NULL, NULL, NULL, NULL}};
++    GSS_C_NO_CREDENTIAL, GSS_C_NO_NAME,  NULL,
++    {NULL, NULL, NULL, NULL, NULL}, 0, 0};
+ 
+ ssh_gssapi_mech gssapi_null_mech =
+-    { NULL, NULL, {0, NULL}, NULL, NULL, NULL, NULL};
++    { NULL, NULL, {0, NULL}, NULL, NULL, NULL, NULL, NULL};
+ 
+ #ifdef KRB5
+ extern ssh_gssapi_mech gssapi_kerberos_mech;
+@@ -142,6 +147,28 @@ ssh_gssapi_server_ctx(Gssctxt **ctx, gss_OID oid)
+ }
+ 
+ /* Unprivileged */
++char *
++ssh_gssapi_server_mechanisms(void) {
++	if (supported_oids == NULL)
++		ssh_gssapi_prepare_supported_oids();
++	return (ssh_gssapi_kex_mechs(supported_oids,
++	    &ssh_gssapi_server_check_mech, NULL, NULL));
++}
++
++/* Unprivileged */
++int
++ssh_gssapi_server_check_mech(Gssctxt **dum, gss_OID oid, const char *data,
++    const char *dummy) {
++	Gssctxt *ctx = NULL;
++	int res;
++ 
++	res = !GSS_ERROR(PRIVSEP(ssh_gssapi_server_ctx(&ctx, oid)));
++	ssh_gssapi_delete_ctx(&ctx);
++
++	return (res);
++}
++
++/* Unprivileged */
+ void
+ ssh_gssapi_supported_oids(gss_OID_set *oidset)
+ {
+@@ -151,7 +178,9 @@ ssh_gssapi_supported_oids(gss_OID_set *oidset)
+ 	gss_OID_set supported;
+ 
+ 	gss_create_empty_oid_set(&min_status, oidset);
+-	gss_indicate_mechs(&min_status, &supported);
++
++	if (GSS_ERROR(gss_indicate_mechs(&min_status, &supported)))
++		return;
+ 
+ 	while (supported_mechs[i]->name != NULL) {
+ 		if (GSS_ERROR(gss_test_oid_set_member(&min_status,
+@@ -277,8 +306,48 @@ OM_uint32
+ ssh_gssapi_getclient(Gssctxt *ctx, ssh_gssapi_client *client)
+ {
+ 	int i = 0;
++	int equal = 0;
++	gss_name_t new_name = GSS_C_NO_NAME;
++	gss_buffer_desc ename = GSS_C_EMPTY_BUFFER;
++
++	if (options.gss_store_rekey && client->used && ctx->client_creds) {
++		if (client->mech->oid.length != ctx->oid->length ||
++		    (memcmp(client->mech->oid.elements,
++		     ctx->oid->elements, ctx->oid->length) !=0)) {
++			debug("Rekeyed credentials have different mechanism");
++			return GSS_S_COMPLETE;
++		}
+ 
+-	gss_buffer_desc ename;
++		if ((ctx->major = gss_inquire_cred_by_mech(&ctx->minor, 
++		    ctx->client_creds, ctx->oid, &new_name, 
++		    NULL, NULL, NULL))) {
++			ssh_gssapi_error(ctx);
++			return (ctx->major);
++		}
++
++		ctx->major = gss_compare_name(&ctx->minor, client->name, 
++		    new_name, &equal);
++
++		if (GSS_ERROR(ctx->major)) {
++			ssh_gssapi_error(ctx);
++			return (ctx->major);
++		}
++ 
++		if (!equal) {
++			debug("Rekeyed credentials have different name");
++			return GSS_S_COMPLETE;
++		}
++
++		debug("Marking rekeyed credentials for export");
++
++		gss_release_name(&ctx->minor, &client->name);
++		gss_release_cred(&ctx->minor, &client->creds);
++		client->name = new_name;
++		client->creds = ctx->client_creds;
++        	ctx->client_creds = GSS_C_NO_CREDENTIAL;
++		client->updated = 1;
++		return GSS_S_COMPLETE;
++	}
+ 
+ 	client->mech = NULL;
+ 
+@@ -293,6 +362,13 @@ ssh_gssapi_getclient(Gssctxt *ctx, ssh_gssapi_client *client)
+ 	if (client->mech == NULL)
+ 		return GSS_S_FAILURE;
+ 
++	if (ctx->client_creds &&
++	    (ctx->major = gss_inquire_cred_by_mech(&ctx->minor,
++	     ctx->client_creds, ctx->oid, &client->name, NULL, NULL, NULL))) {
++		ssh_gssapi_error(ctx);
++		return (ctx->major);
++	}
++
+ 	if ((ctx->major = gss_display_name(&ctx->minor, ctx->client,
+ 	    &client->displayname, NULL))) {
+ 		ssh_gssapi_error(ctx);
+@@ -310,6 +386,8 @@ ssh_gssapi_getclient(Gssctxt *ctx, ssh_gssapi_client *client)
+ 		return (ctx->major);
+ 	}
+ 
++	gss_release_buffer(&ctx->minor, &ename);
++
+ 	/* We can't copy this structure, so we just move the pointer to it */
+ 	client->creds = ctx->client_creds;
+ 	ctx->client_creds = GSS_C_NO_CREDENTIAL;
+@@ -401,7 +479,7 @@ ssh_gssapi_do_child(char ***envp, u_int *envsizep)
+ 
+ /* Privileged */
+ int
+-ssh_gssapi_userok(char *user)
++ssh_gssapi_userok(char *user, struct passwd *pw)
+ {
+ 	OM_uint32 lmin;
+ 
+@@ -411,9 +489,11 @@ ssh_gssapi_userok(char *user)
+ 		return 0;
+ 	}
+ 	if (gssapi_client.mech && gssapi_client.mech->userok)
+-		if ((*gssapi_client.mech->userok)(&gssapi_client, user))
++		if ((*gssapi_client.mech->userok)(&gssapi_client, user)) {
++			gssapi_client.used = 1;
++			gssapi_client.store.owner = pw;
+ 			return 1;
+-		else {
++		} else {
+ 			/* Destroy delegated credentials if userok fails */
+ 			gss_release_buffer(&lmin, &gssapi_client.displayname);
+ 			gss_release_buffer(&lmin, &gssapi_client.exportedname);
+@@ -427,14 +507,130 @@ ssh_gssapi_userok(char *user)
+ 	return (0);
+ }
+ 
+-/* Privileged */
+-OM_uint32
+-ssh_gssapi_checkmic(Gssctxt *ctx, gss_buffer_t gssbuf, gss_buffer_t gssmic)
++/* These bits are only used for rekeying. The unpriviledged child is running 
++ * as the user, the monitor is root.
++ *
++ * In the child, we want to :
++ *    *) Ask the monitor to store our credentials into the store we specify
++ *    *) If it succeeds, maybe do a PAM update
++ */
++
++/* Stuff for PAM */
++
++#ifdef USE_PAM
++static int ssh_gssapi_simple_conv(int n, const struct pam_message **msg, 
++    struct pam_response **resp, void *data)
+ {
+-	ctx->major = gss_verify_mic(&ctx->minor, ctx->context,
+-	    gssbuf, gssmic, NULL);
++	return (PAM_CONV_ERR);
++}
++#endif
+ 
+-	return (ctx->major);
++void
++ssh_gssapi_rekey_creds(void) {
++	int ok;
++	int ret;
++#ifdef USE_PAM
++	pam_handle_t *pamh = NULL;
++	struct pam_conv pamconv = {ssh_gssapi_simple_conv, NULL};
++	char *envstr;
++#endif
++
++	if (gssapi_client.store.filename == NULL && 
++	    gssapi_client.store.envval == NULL &&
++	    gssapi_client.store.envvar == NULL)
++		return;
++ 
++	ok = PRIVSEP(ssh_gssapi_update_creds(&gssapi_client.store));
++
++	if (!ok)
++		return;
++
++	debug("Rekeyed credentials stored successfully");
++
++	/* Actually managing to play with the ssh pam stack from here will
++	 * be next to impossible. In any case, we may want different options
++	 * for rekeying. So, use our own :)
++	 */
++#ifdef USE_PAM	
++	if (!use_privsep) {
++		debug("Not even going to try and do PAM with privsep disabled");
++		return;
++	}
++
++	ret = pam_start("sshd-rekey", gssapi_client.store.owner->pw_name,
++ 	    &pamconv, &pamh);
++	if (ret)
++		return;
++
++	xasprintf(&envstr, "%s=%s", gssapi_client.store.envvar, 
++	    gssapi_client.store.envval);
++
++	ret = pam_putenv(pamh, envstr);
++	if (!ret)
++		pam_setcred(pamh, PAM_REINITIALIZE_CRED);
++	pam_end(pamh, PAM_SUCCESS);
++#endif
++}
++
++int
++ssh_gssapi_update_creds(ssh_gssapi_ccache *store)
++{
++	OM_uint32 maj_status, min_status;
++	int ok = 0;
++
++	/* Check we've got credentials to store */
++	if (!gssapi_client.updated)
++		return 0;
++
++	gssapi_client.updated = 0;
++
++#ifdef USE_GSS_STORE_CRED
++	if (gssapi_client.creds == NULL) {
++		debug("No credentials stored");
++		return;
++	}
++
++	maj_status = gss_store_cred(&min_status, gssapi_client.creds,
++	    GSS_C_INITIATE, &gssapi_client.mech->oid, 1, 1, NULL, NULL);
++
++	if (GSS_ERROR(maj_status)) {
++		Buffer b;
++		gss_buffer_desc msg;
++		OM_uint32 lmin;
++		OM_uint32 more = 0;
++		buffer_init(&b);
++		/* GSS-API error */
++		do {
++			gss_display_status(&lmin, maj_status, GSS_C_GSS_CODE,
++			    GSS_C_NULL_OID, &more, &msg);
++			buffer_append(&b, msg.value, msg.length);
++			buffer_put_char(&b, '\n');
++			gss_release_buffer(&lmin, &msg);
++		} while (more != 0);
++		/* Mechanism specific error */
++		do {
++			gss_display_status(&lmin, min_status, GSS_C_MECH_CODE,
++			    &gssapi_client.mech->oid, &more, &msg);
++			buffer_append(&b, msg.value, msg.length);
++			buffer_put_char(&b, '\n');
++			gss_release_buffer(&lmin, &msg);
++		} while (more != 0);
++		buffer_put_char(&b, '\0');
++		error("GSS-API error while storing delegated credentials: %s",
++		    buffer_ptr(&b));
++		buffer_free(&b);
++	}
++#else	/* #ifdef USE_GSS_STORE_CRED */
++	temporarily_use_uid(gssapi_client.store.owner);
++	if (gssapi_client.mech && gssapi_client.mech->updatecreds)
++		ok = (*gssapi_client.mech->updatecreds)(store, &gssapi_client);
++	else
++		debug("No update function for this mechanism");
++
++	restore_uid();
++
++	return ok;
++#endif	/* #ifdef USE_GSS_STORE_CRED */
+ }
+ 
+ #endif
+diff --git a/kex.c b/kex.c
+index 6a94bc53..d8708684 100644
+--- a/kex.c
++++ b/kex.c
+@@ -54,6 +54,10 @@
+ #include "sshbuf.h"
+ #include "digest.h"
+ 
++#ifdef GSSAPI
++#include "ssh-gss.h"
++#endif
++
+ #if OPENSSL_VERSION_NUMBER >= 0x00907000L
+ # if defined(HAVE_EVP_SHA256)
+ # define evp_ssh_sha256 EVP_sha256
+@@ -113,6 +117,14 @@ static const struct kexalg kexalgs[] = {
+ #endif /* HAVE_EVP_SHA256 || !WITH_OPENSSL */
+ 	{ NULL, -1, -1, -1},
+ };
++static const struct kexalg kexalg_prefixes[] = {
++#ifdef GSSAPI
++	{ KEX_GSS_GEX_SHA1_ID, KEX_GSS_GEX_SHA1, 0, SSH_DIGEST_SHA1 },
++	{ KEX_GSS_GRP1_SHA1_ID, KEX_GSS_GRP1_SHA1, 0, SSH_DIGEST_SHA1 },
++	{ KEX_GSS_GRP14_SHA1_ID, KEX_GSS_GRP14_SHA1, 0, SSH_DIGEST_SHA1 },
++#endif
++	{ NULL, -1, -1, -1 },
++};
+ 
+ char *
+ kex_alg_list(char sep)
+@@ -145,6 +157,10 @@ kex_alg_by_name(const char *name)
+ 		if (strcmp(k->name, name) == 0)
+ 			return k;
+ 	}
++	for (k = kexalg_prefixes; k->name != NULL; k++) {
++		if (strncmp(k->name, name, strlen(k->name)) == 0)
++			return k;
++	}
+ 	return NULL;
+ }
+ 
+@@ -597,6 +613,9 @@ kex_free(struct kex *kex)
+ 	sshbuf_free(kex->peer);
+ 	sshbuf_free(kex->my);
+ 	free(kex->session_id);
++#ifdef GSSAPI
++	free(kex->gss_host);
++#endif /* GSSAPI */
+ 	free(kex->client_version_string);
+ 	free(kex->server_version_string);
+ 	free(kex->failed_choice);
+diff --git a/kex.h b/kex.h
+index 3794f212..fd56171d 100644
+--- a/kex.h
++++ b/kex.h
+@@ -99,6 +99,9 @@ enum kex_exchange {
+ 	KEX_DH_GEX_SHA256,
+ 	KEX_ECDH_SHA2,
+ 	KEX_C25519_SHA256,
++	KEX_GSS_GRP1_SHA1,
++	KEX_GSS_GRP14_SHA1,
++	KEX_GSS_GEX_SHA1,
+ 	KEX_MAX
+ };
+ 
+@@ -147,6 +150,12 @@ struct kex {
+ 	u_int	flags;
+ 	int	hash_alg;
+ 	int	ec_nid;
++#ifdef GSSAPI
++	int	gss_deleg_creds;
++	int	gss_trust_dns;
++	char    *gss_host;
++	char	*gss_client;
++#endif
+ 	char	*client_version_string;
+ 	char	*server_version_string;
+ 	char	*failed_choice;
+@@ -197,6 +206,11 @@ int	 kexecdh_server(struct ssh *);
+ int	 kexc25519_client(struct ssh *);
+ int	 kexc25519_server(struct ssh *);
+ 
++#ifdef GSSAPI
++int	 kexgss_client(struct ssh *);
++int	 kexgss_server(struct ssh *);
++#endif
++
+ int	 kex_dh_hash(int, const char *, const char *,
+     const u_char *, size_t, const u_char *, size_t, const u_char *, size_t,
+     const BIGNUM *, const BIGNUM *, const BIGNUM *, u_char *, size_t *);
+diff --git a/kexgssc.c b/kexgssc.c
+new file mode 100644
+index 00000000..a77d3712
+--- /dev/null
++++ b/kexgssc.c
+@@ -0,0 +1,339 @@
++/*
++ * Copyright (c) 2001-2009 Simon Wilkinson. All rights reserved.
++ *
++ * Redistribution and use in source and binary forms, with or without
++ * modification, are permitted provided that the following conditions
++ * are met:
++ * 1. Redistributions of source code must retain the above copyright
++ *    notice, this list of conditions and the following disclaimer.
++ * 2. Redistributions in binary form must reproduce the above copyright
++ *    notice, this list of conditions and the following disclaimer in the
++ *    documentation and/or other materials provided with the distribution.
++ *
++ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR
++ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
++ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
++ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
++ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
++ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
++ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
++ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
++ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
++ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
++ */
++
++#include "includes.h"
++
++#ifdef GSSAPI
++
++#include "includes.h"
++
++#include <openssl/crypto.h>
++#include <openssl/bn.h>
++
++#include <string.h>
++#include <signal.h>
++
++#include "xmalloc.h"
++#include "buffer.h"
++#include "ssh2.h"
++#include "key.h"
++#include "cipher.h"
++#include "kex.h"
++#include "log.h"
++#include "packet.h"
++#include "dh.h"
++#include "digest.h"
++
++#include "ssh-gss.h"
++
++int
++kexgss_client(struct ssh *ssh) {
++	gss_buffer_desc send_tok = GSS_C_EMPTY_BUFFER;
++	gss_buffer_desc recv_tok, gssbuf, msg_tok, *token_ptr;
++	Gssctxt *ctxt;
++	OM_uint32 maj_status, min_status, ret_flags;
++	u_int klen, kout, slen = 0, strlen;
++	DH *dh; 
++	BIGNUM *dh_server_pub = NULL;
++	BIGNUM *shared_secret = NULL;
++	BIGNUM *p = NULL;
++	BIGNUM *g = NULL;	
++	u_char *kbuf;
++	u_char *serverhostkey = NULL;
++	u_char *empty = "";
++	char *msg;
++	int type = 0;
++	int first = 1;
++	int nbits = 0, min = DH_GRP_MIN, max = DH_GRP_MAX;
++	u_char hash[SSH_DIGEST_MAX_LENGTH];
++	size_t hashlen;
++
++	/* Initialise our GSSAPI world */	
++	ssh_gssapi_build_ctx(&ctxt);
++	if (ssh_gssapi_id_kex(ctxt, ssh->kex->name, ssh->kex->kex_type) 
++	    == GSS_C_NO_OID)
++		fatal("Couldn't identify host exchange");
++
++	if (ssh_gssapi_import_name(ctxt, ssh->kex->gss_host))
++		fatal("Couldn't import hostname");
++
++	if (ssh->kex->gss_client && 
++	    ssh_gssapi_client_identity(ctxt, ssh->kex->gss_client))
++		fatal("Couldn't acquire client credentials");
++
++	switch (ssh->kex->kex_type) {
++	case KEX_GSS_GRP1_SHA1:
++		dh = dh_new_group1();
++		break;
++	case KEX_GSS_GRP14_SHA1:
++		dh = dh_new_group14();
++		break;
++	case KEX_GSS_GEX_SHA1:
++		debug("Doing group exchange\n");
++		nbits = dh_estimate(ssh->kex->we_need * 8);
++		packet_start(SSH2_MSG_KEXGSS_GROUPREQ);
++		packet_put_int(min);
++		packet_put_int(nbits);
++		packet_put_int(max);
++
++		packet_send();
++
++		packet_read_expect(SSH2_MSG_KEXGSS_GROUP);
++
++		if ((p = BN_new()) == NULL)
++			fatal("BN_new() failed");
++		packet_get_bignum2(p);
++		if ((g = BN_new()) == NULL)
++			fatal("BN_new() failed");
++		packet_get_bignum2(g);
++		packet_check_eom();
++
++		if (BN_num_bits(p) < min || BN_num_bits(p) > max)
++			fatal("GSSGRP_GEX group out of range: %d !< %d !< %d",
++			    min, BN_num_bits(p), max);
++
++		dh = dh_new_group(g, p);
++		break;
++	default:
++		fatal("%s: Unexpected KEX type %d", __func__, ssh->kex->kex_type);
++	}
++	
++	/* Step 1 - e is dh->pub_key */
++	dh_gen_key(dh, ssh->kex->we_need * 8);
++
++	/* This is f, we initialise it now to make life easier */
++	dh_server_pub = BN_new();
++	if (dh_server_pub == NULL)
++		fatal("dh_server_pub == NULL");
++
++	token_ptr = GSS_C_NO_BUFFER;
++			 
++	do {
++		debug("Calling gss_init_sec_context");
++		
++		maj_status = ssh_gssapi_init_ctx(ctxt,
++		    ssh->kex->gss_deleg_creds, token_ptr, &send_tok,
++		    &ret_flags);
++
++		if (GSS_ERROR(maj_status)) {
++			if (send_tok.length != 0) {
++				packet_start(SSH2_MSG_KEXGSS_CONTINUE);
++				packet_put_string(send_tok.value,
++				    send_tok.length);
++			}
++			fatal("gss_init_context failed");
++		}
++
++		/* If we've got an old receive buffer get rid of it */
++		if (token_ptr != GSS_C_NO_BUFFER)
++			free(recv_tok.value);
++
++		if (maj_status == GSS_S_COMPLETE) {
++			/* If mutual state flag is not true, kex fails */
++			if (!(ret_flags & GSS_C_MUTUAL_FLAG))
++				fatal("Mutual authentication failed");
++
++			/* If integ avail flag is not true kex fails */
++			if (!(ret_flags & GSS_C_INTEG_FLAG))
++				fatal("Integrity check failed");
++		}
++
++		/* 
++		 * If we have data to send, then the last message that we
++		 * received cannot have been a 'complete'. 
++		 */
++		if (send_tok.length != 0) {
++			if (first) {
++				packet_start(SSH2_MSG_KEXGSS_INIT);
++				packet_put_string(send_tok.value,
++				    send_tok.length);
++				packet_put_bignum2(dh->pub_key);
++				first = 0;
++			} else {
++				packet_start(SSH2_MSG_KEXGSS_CONTINUE);
++				packet_put_string(send_tok.value,
++				    send_tok.length);
++			}
++			packet_send();
++			gss_release_buffer(&min_status, &send_tok);
++
++			/* If we've sent them data, they should reply */
++			do {	
++				type = packet_read();
++				if (type == SSH2_MSG_KEXGSS_HOSTKEY) {
++					debug("Received KEXGSS_HOSTKEY");
++					if (serverhostkey)
++						fatal("Server host key received more than once");
++					serverhostkey = 
++					    packet_get_string(&slen);
++				}
++			} while (type == SSH2_MSG_KEXGSS_HOSTKEY);
++
++			switch (type) {
++			case SSH2_MSG_KEXGSS_CONTINUE:
++				debug("Received GSSAPI_CONTINUE");
++				if (maj_status == GSS_S_COMPLETE) 
++					fatal("GSSAPI Continue received from server when complete");
++				recv_tok.value = packet_get_string(&strlen);
++				recv_tok.length = strlen; 
++				break;
++			case SSH2_MSG_KEXGSS_COMPLETE:
++				debug("Received GSSAPI_COMPLETE");
++				packet_get_bignum2(dh_server_pub);
++				msg_tok.value =  packet_get_string(&strlen);
++				msg_tok.length = strlen; 
++
++				/* Is there a token included? */
++				if (packet_get_char()) {
++					recv_tok.value=
++					    packet_get_string(&strlen);
++					recv_tok.length = strlen;
++					/* If we're already complete - protocol error */
++					if (maj_status == GSS_S_COMPLETE)
++						packet_disconnect("Protocol error: received token when complete");
++					} else {
++						/* No token included */
++						if (maj_status != GSS_S_COMPLETE)
++							packet_disconnect("Protocol error: did not receive final token");
++				}
++				break;
++			case SSH2_MSG_KEXGSS_ERROR:
++				debug("Received Error");
++				maj_status = packet_get_int();
++				min_status = packet_get_int();
++				msg = packet_get_string(NULL);
++				(void) packet_get_string_ptr(NULL);
++				fatal("GSSAPI Error: \n%.400s",msg);
++			default:
++				packet_disconnect("Protocol error: didn't expect packet type %d",
++		    		type);
++			}
++			token_ptr = &recv_tok;
++		} else {
++			/* No data, and not complete */
++			if (maj_status != GSS_S_COMPLETE)
++				fatal("Not complete, and no token output");
++		}
++	} while (maj_status & GSS_S_CONTINUE_NEEDED);
++
++	/* 
++	 * We _must_ have received a COMPLETE message in reply from the 
++	 * server, which will have set dh_server_pub and msg_tok 
++	 */
++
++	if (type != SSH2_MSG_KEXGSS_COMPLETE)
++		fatal("Didn't receive a SSH2_MSG_KEXGSS_COMPLETE when I expected it");
++
++	/* Check f in range [1, p-1] */
++	if (!dh_pub_is_valid(dh, dh_server_pub))
++		packet_disconnect("bad server public DH value");
++
++	/* compute K=f^x mod p */
++	klen = DH_size(dh);
++	kbuf = xmalloc(klen);
++	kout = DH_compute_key(kbuf, dh_server_pub, dh);
++	if (kout < 0)
++		fatal("DH_compute_key: failed");
++
++	shared_secret = BN_new();
++	if (shared_secret == NULL)
++		fatal("kexgss_client: BN_new failed");
++
++	if (BN_bin2bn(kbuf, kout, shared_secret) == NULL)
++		fatal("kexdh_client: BN_bin2bn failed");
++
++	memset(kbuf, 0, klen);
++	free(kbuf);
++
++	hashlen = sizeof(hash);
++	switch (ssh->kex->kex_type) {
++	case KEX_GSS_GRP1_SHA1:
++	case KEX_GSS_GRP14_SHA1:
++		kex_dh_hash(
++		    ssh->kex->hash_alg,
++		    ssh->kex->client_version_string,
++		    ssh->kex->server_version_string,
++		    buffer_ptr(ssh->kex->my), buffer_len(ssh->kex->my),
++		    buffer_ptr(ssh->kex->peer), buffer_len(ssh->kex->peer),
++		    (serverhostkey ? serverhostkey : empty), slen,
++		    dh->pub_key,	/* e */
++		    dh_server_pub,	/* f */
++		    shared_secret,	/* K */
++		    hash, &hashlen
++		);
++		break;
++	case KEX_GSS_GEX_SHA1:
++		kexgex_hash(
++		    ssh->kex->hash_alg,
++		    ssh->kex->client_version_string,
++		    ssh->kex->server_version_string,
++		    buffer_ptr(ssh->kex->my), buffer_len(ssh->kex->my),
++		    buffer_ptr(ssh->kex->peer), buffer_len(ssh->kex->peer),
++		    (serverhostkey ? serverhostkey : empty), slen,
++ 		    min, nbits, max,
++		    dh->p, dh->g,
++		    dh->pub_key,
++		    dh_server_pub,
++		    shared_secret,
++		    hash, &hashlen
++		);
++		break;
++	default:
++		fatal("%s: Unexpected KEX type %d", __func__, ssh->kex->kex_type);
++	}
++
++	gssbuf.value = hash;
++	gssbuf.length = hashlen;
++
++	/* Verify that the hash matches the MIC we just got. */
++	if (GSS_ERROR(ssh_gssapi_checkmic(ctxt, &gssbuf, &msg_tok)))
++		packet_disconnect("Hash's MIC didn't verify");
++
++	free(msg_tok.value);
++
++	DH_free(dh);
++	free(serverhostkey);
++	BN_clear_free(dh_server_pub);
++
++	/* save session id */
++	if (ssh->kex->session_id == NULL) {
++		ssh->kex->session_id_len = hashlen;
++		ssh->kex->session_id = xmalloc(ssh->kex->session_id_len);
++		memcpy(ssh->kex->session_id, hash, ssh->kex->session_id_len);
++	}
++
++	if (ssh->kex->gss_deleg_creds)
++		ssh_gssapi_credentials_updated(ctxt);
++
++	if (gss_kex_context == NULL)
++		gss_kex_context = ctxt;
++	else
++		ssh_gssapi_delete_ctx(&ctxt);
++
++	kex_derive_keys_bn(ssh, hash, hashlen, shared_secret);
++	BN_clear_free(shared_secret);
++	return kex_send_newkeys(ssh);
++}
++
++#endif /* GSSAPI */
+diff --git a/kexgsss.c b/kexgsss.c
+new file mode 100644
+index 00000000..0e5ff55b
+--- /dev/null
++++ b/kexgsss.c
+@@ -0,0 +1,296 @@
++/*
++ * Copyright (c) 2001-2009 Simon Wilkinson. All rights reserved.
++ *
++ * Redistribution and use in source and binary forms, with or without
++ * modification, are permitted provided that the following conditions
++ * are met:
++ * 1. Redistributions of source code must retain the above copyright
++ *    notice, this list of conditions and the following disclaimer.
++ * 2. Redistributions in binary form must reproduce the above copyright
++ *    notice, this list of conditions and the following disclaimer in the
++ *    documentation and/or other materials provided with the distribution.
++ *
++ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR
++ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
++ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
++ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
++ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
++ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
++ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
++ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
++ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
++ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
++ */
++
++#include "includes.h"
++
++#ifdef GSSAPI
++
++#include <string.h>
++#include <signal.h>
++
++#include <openssl/crypto.h>
++#include <openssl/bn.h>
++
++#include "xmalloc.h"
++#include "buffer.h"
++#include "ssh2.h"
++#include "key.h"
++#include "cipher.h"
++#include "kex.h"
++#include "log.h"
++#include "packet.h"
++#include "dh.h"
++#include "ssh-gss.h"
++#include "monitor_wrap.h"
++#include "misc.h"
++#include "servconf.h"
++#include "digest.h"
++
++extern ServerOptions options;
++
++int
++kexgss_server(struct ssh *ssh)
++{
++	OM_uint32 maj_status, min_status;
++	
++	/* 
++	 * Some GSSAPI implementations use the input value of ret_flags (an
++ 	 * output variable) as a means of triggering mechanism specific 
++ 	 * features. Initializing it to zero avoids inadvertently 
++ 	 * activating this non-standard behaviour.
++	 */
++
++	OM_uint32 ret_flags = 0;
++	gss_buffer_desc gssbuf, recv_tok, msg_tok;
++	gss_buffer_desc send_tok = GSS_C_EMPTY_BUFFER;
++	Gssctxt *ctxt = NULL;
++	u_int slen, klen, kout;
++	u_char *kbuf;
++	DH *dh;
++	int min = -1, max = -1, nbits = -1;
++	BIGNUM *shared_secret = NULL;
++	BIGNUM *dh_client_pub = NULL;
++	int type = 0;
++	gss_OID oid;
++	char *mechs;
++	u_char hash[SSH_DIGEST_MAX_LENGTH];
++	size_t hashlen;
++
++	/* Initialise GSSAPI */
++
++	/* If we're rekeying, privsep means that some of the private structures
++	 * in the GSSAPI code are no longer available. This kludges them back
++	 * into life
++	 */
++	if (!ssh_gssapi_oid_table_ok()) {
++		mechs = ssh_gssapi_server_mechanisms();
++		free(mechs);
++	}
++
++	debug2("%s: Identifying %s", __func__, ssh->kex->name);
++	oid = ssh_gssapi_id_kex(NULL, ssh->kex->name, ssh->kex->kex_type);
++	if (oid == GSS_C_NO_OID)
++	   fatal("Unknown gssapi mechanism");
++
++	debug2("%s: Acquiring credentials", __func__);
++
++	if (GSS_ERROR(PRIVSEP(ssh_gssapi_server_ctx(&ctxt, oid))))
++		fatal("Unable to acquire credentials for the server");
++
++	switch (ssh->kex->kex_type) {
++	case KEX_GSS_GRP1_SHA1:
++		dh = dh_new_group1();
++		break;
++	case KEX_GSS_GRP14_SHA1:
++		dh = dh_new_group14();
++		break;
++	case KEX_GSS_GEX_SHA1:
++		debug("Doing group exchange");
++		packet_read_expect(SSH2_MSG_KEXGSS_GROUPREQ);
++		min = packet_get_int();
++		nbits = packet_get_int();
++		max = packet_get_int();
++		packet_check_eom();
++		if (max < min || nbits < min || max < nbits)
++			fatal("GSS_GEX, bad parameters: %d !< %d !< %d",
++			    min, nbits, max);
++		dh = PRIVSEP(choose_dh(MAX(DH_GRP_MIN, min),
++		    nbits, MIN(DH_GRP_MAX, max)));
++		if (dh == NULL)
++			packet_disconnect("Protocol error: no matching group found");
++
++		packet_start(SSH2_MSG_KEXGSS_GROUP);
++		packet_put_bignum2(dh->p);
++		packet_put_bignum2(dh->g);
++		packet_send();
++
++		packet_write_wait();
++		break;
++	default:
++		fatal("%s: Unexpected KEX type %d", __func__, ssh->kex->kex_type);
++	}
++
++	dh_gen_key(dh, ssh->kex->we_need * 8);
++
++	do {
++		debug("Wait SSH2_MSG_GSSAPI_INIT");
++		type = packet_read();
++		switch(type) {
++		case SSH2_MSG_KEXGSS_INIT:
++			if (dh_client_pub != NULL) 
++				fatal("Received KEXGSS_INIT after initialising");
++			recv_tok.value = packet_get_string(&slen);
++			recv_tok.length = slen; 
++
++			if ((dh_client_pub = BN_new()) == NULL)
++				fatal("dh_client_pub == NULL");
++
++			packet_get_bignum2(dh_client_pub);
++
++			/* Send SSH_MSG_KEXGSS_HOSTKEY here, if we want */
++			break;
++		case SSH2_MSG_KEXGSS_CONTINUE:
++			recv_tok.value = packet_get_string(&slen);
++			recv_tok.length = slen; 
++			break;
++		default:
++			packet_disconnect(
++			    "Protocol error: didn't expect packet type %d",
++			    type);
++		}
++
++		maj_status = PRIVSEP(ssh_gssapi_accept_ctx(ctxt, &recv_tok, 
++		    &send_tok, &ret_flags));
++
++		free(recv_tok.value);
++
++		if (maj_status != GSS_S_COMPLETE && send_tok.length == 0)
++			fatal("Zero length token output when incomplete");
++
++		if (dh_client_pub == NULL)
++			fatal("No client public key");
++		
++		if (maj_status & GSS_S_CONTINUE_NEEDED) {
++			debug("Sending GSSAPI_CONTINUE");
++			packet_start(SSH2_MSG_KEXGSS_CONTINUE);
++			packet_put_string(send_tok.value, send_tok.length);
++			packet_send();
++			gss_release_buffer(&min_status, &send_tok);
++		}
++	} while (maj_status & GSS_S_CONTINUE_NEEDED);
++
++	if (GSS_ERROR(maj_status)) {
++		if (send_tok.length > 0) {
++			packet_start(SSH2_MSG_KEXGSS_CONTINUE);
++			packet_put_string(send_tok.value, send_tok.length);
++			packet_send();
++		}
++		fatal("accept_ctx died");
++	}
++
++	if (!(ret_flags & GSS_C_MUTUAL_FLAG))
++		fatal("Mutual Authentication flag wasn't set");
++
++	if (!(ret_flags & GSS_C_INTEG_FLAG))
++		fatal("Integrity flag wasn't set");
++	
++	if (!dh_pub_is_valid(dh, dh_client_pub))
++		packet_disconnect("bad client public DH value");
++
++	klen = DH_size(dh);
++	kbuf = xmalloc(klen); 
++	kout = DH_compute_key(kbuf, dh_client_pub, dh);
++	if (kout < 0)
++		fatal("DH_compute_key: failed");
++
++	shared_secret = BN_new();
++	if (shared_secret == NULL)
++		fatal("kexgss_server: BN_new failed");
++
++	if (BN_bin2bn(kbuf, kout, shared_secret) == NULL)
++		fatal("kexgss_server: BN_bin2bn failed");
++
++	memset(kbuf, 0, klen);
++	free(kbuf);
++
++	hashlen = sizeof(hash);
++	switch (ssh->kex->kex_type) {
++	case KEX_GSS_GRP1_SHA1:
++	case KEX_GSS_GRP14_SHA1:
++		kex_dh_hash(
++		    ssh->kex->hash_alg,
++		    ssh->kex->client_version_string, ssh->kex->server_version_string,
++		    buffer_ptr(ssh->kex->peer), buffer_len(ssh->kex->peer),
++		    buffer_ptr(ssh->kex->my), buffer_len(ssh->kex->my),
++		    NULL, 0, /* Change this if we start sending host keys */
++		    dh_client_pub, dh->pub_key, shared_secret,
++		    hash, &hashlen
++		);
++		break;
++	case KEX_GSS_GEX_SHA1:
++		kexgex_hash(
++		    ssh->kex->hash_alg,
++		    ssh->kex->client_version_string, ssh->kex->server_version_string,
++		    buffer_ptr(ssh->kex->peer), buffer_len(ssh->kex->peer),
++		    buffer_ptr(ssh->kex->my), buffer_len(ssh->kex->my),
++		    NULL, 0,
++		    min, nbits, max,
++		    dh->p, dh->g,
++		    dh_client_pub,
++		    dh->pub_key,
++		    shared_secret,
++		    hash, &hashlen
++		);
++		break;
++	default:
++		fatal("%s: Unexpected KEX type %d", __func__, ssh->kex->kex_type);
++	}
++
++	BN_clear_free(dh_client_pub);
++
++	if (ssh->kex->session_id == NULL) {
++		ssh->kex->session_id_len = hashlen;
++		ssh->kex->session_id = xmalloc(ssh->kex->session_id_len);
++		memcpy(ssh->kex->session_id, hash, ssh->kex->session_id_len);
++	}
++
++	gssbuf.value = hash;
++	gssbuf.length = hashlen;
++
++	if (GSS_ERROR(PRIVSEP(ssh_gssapi_sign(ctxt,&gssbuf,&msg_tok))))
++		fatal("Couldn't get MIC");
++
++	packet_start(SSH2_MSG_KEXGSS_COMPLETE);
++	packet_put_bignum2(dh->pub_key);
++	packet_put_string(msg_tok.value,msg_tok.length);
++
++	if (send_tok.length != 0) {
++		packet_put_char(1); /* true */
++		packet_put_string(send_tok.value, send_tok.length);
++	} else {
++		packet_put_char(0); /* false */
++	}
++	packet_send();
++
++	gss_release_buffer(&min_status, &send_tok);
++	gss_release_buffer(&min_status, &msg_tok);
++
++	if (gss_kex_context == NULL)
++		gss_kex_context = ctxt;
++	else 
++		ssh_gssapi_delete_ctx(&ctxt);
++
++	DH_free(dh);
++
++	kex_derive_keys_bn(ssh, hash, hashlen, shared_secret);
++	BN_clear_free(shared_secret);
++	kex_send_newkeys(ssh);
++
++	/* If this was a rekey, then save out any delegated credentials we
++	 * just exchanged.  */
++	if (options.gss_store_rekey)
++		ssh_gssapi_rekey_creds();
++	return 0;
++}
++#endif /* GSSAPI */
+diff --git a/monitor.c b/monitor.c
+index 8f044f4e..b0c9b4f4 100644
+--- a/monitor.c
++++ b/monitor.c
+@@ -160,6 +160,8 @@ int mm_answer_gss_setup_ctx(int, Buffer *);
+ int mm_answer_gss_accept_ctx(int, Buffer *);
+ int mm_answer_gss_userok(int, Buffer *);
+ int mm_answer_gss_checkmic(int, Buffer *);
++int mm_answer_gss_sign(int, Buffer *);
++int mm_answer_gss_updatecreds(int, Buffer *);
+ #endif
+ 
+ #ifdef SSH_AUDIT_EVENTS
+@@ -240,11 +242,18 @@ struct mon_table mon_dispatch_proto20[] = {
+     {MONITOR_REQ_GSSSTEP, 0, mm_answer_gss_accept_ctx},
+     {MONITOR_REQ_GSSUSEROK, MON_ONCE|MON_AUTHDECIDE, mm_answer_gss_userok},
+     {MONITOR_REQ_GSSCHECKMIC, MON_ONCE, mm_answer_gss_checkmic},
++    {MONITOR_REQ_GSSSIGN, MON_ONCE, mm_answer_gss_sign},
+ #endif
+     {0, 0, NULL}
+ };
+ 
+ struct mon_table mon_dispatch_postauth20[] = {
++#ifdef GSSAPI
++    {MONITOR_REQ_GSSSETUP, 0, mm_answer_gss_setup_ctx},
++    {MONITOR_REQ_GSSSTEP, 0, mm_answer_gss_accept_ctx},
++    {MONITOR_REQ_GSSSIGN, 0, mm_answer_gss_sign},
++    {MONITOR_REQ_GSSUPCREDS, 0, mm_answer_gss_updatecreds},
++#endif
+ #ifdef WITH_OPENSSL
+     {MONITOR_REQ_MODULI, 0, mm_answer_moduli},
+ #endif
+@@ -311,6 +320,10 @@ monitor_child_preauth(Authctxt *_authctxt, struct monitor *pmonitor)
+ 	/* Permit requests for moduli and signatures */
+ 	monitor_permit(mon_dispatch, MONITOR_REQ_MODULI, 1);
+ 	monitor_permit(mon_dispatch, MONITOR_REQ_SIGN, 1);
++#ifdef GSSAPI
++	/* and for the GSSAPI key exchange */
++	monitor_permit(mon_dispatch, MONITOR_REQ_GSSSETUP, 1);
++#endif
+ 
+ 	/* The first few requests do not require asynchronous access */
+ 	while (!authenticated) {
+@@ -442,6 +455,10 @@ monitor_child_postauth(struct monitor *pmonitor)
+ 	monitor_permit(mon_dispatch, MONITOR_REQ_MODULI, 1);
+ 	monitor_permit(mon_dispatch, MONITOR_REQ_SIGN, 1);
+ 	monitor_permit(mon_dispatch, MONITOR_REQ_TERM, 1);
++#ifdef GSSAPI
++	/* and for the GSSAPI key exchange */
++	monitor_permit(mon_dispatch, MONITOR_REQ_GSSSETUP, 1);
++#endif		
+ 
+ 	if (!no_pty_flag) {
+ 		monitor_permit(mon_dispatch, MONITOR_REQ_PTY, 1);
+@@ -1666,6 +1683,13 @@ monitor_apply_keystate(struct monitor *pmonitor)
+ # endif
+ #endif /* WITH_OPENSSL */
+ 		kex->kex[KEX_C25519_SHA256] = kexc25519_server;
++#ifdef GSSAPI
++		if (options.gss_keyex) {
++			kex->kex[KEX_GSS_GRP1_SHA1] = kexgss_server;
++			kex->kex[KEX_GSS_GRP14_SHA1] = kexgss_server;
++			kex->kex[KEX_GSS_GEX_SHA1] = kexgss_server;
++		}
++#endif
+ 		kex->load_host_public_key=&get_hostkey_public_by_type;
+ 		kex->load_host_private_key=&get_hostkey_private_by_type;
+ 		kex->host_key_index=&get_hostkey_index;
+@@ -1745,8 +1769,8 @@ mm_answer_gss_setup_ctx(int sock, Buffer *m)
+ 	OM_uint32 major;
+ 	u_int len;
+ 
+-	if (!options.gss_authentication)
+-		fatal("%s: GSSAPI authentication not enabled", __func__);
++	if (!options.gss_authentication && !options.gss_keyex)
++		fatal("%s: GSSAPI not enabled", __func__);
+ 
+ 	goid.elements = buffer_get_string(m, &len);
+ 	goid.length = len;
+@@ -1775,8 +1799,8 @@ mm_answer_gss_accept_ctx(int sock, Buffer *m)
+ 	OM_uint32 flags = 0; /* GSI needs this */
+ 	u_int len;
+ 
+-	if (!options.gss_authentication)
+-		fatal("%s: GSSAPI authentication not enabled", __func__);
++	if (!options.gss_authentication && !options.gss_keyex)
++		fatal("%s: GSSAPI not enabled", __func__);
+ 
+ 	in.value = buffer_get_string(m, &len);
+ 	in.length = len;
+@@ -1795,6 +1819,7 @@ mm_answer_gss_accept_ctx(int sock, Buffer *m)
+ 		monitor_permit(mon_dispatch, MONITOR_REQ_GSSSTEP, 0);
+ 		monitor_permit(mon_dispatch, MONITOR_REQ_GSSUSEROK, 1);
+ 		monitor_permit(mon_dispatch, MONITOR_REQ_GSSCHECKMIC, 1);
++		monitor_permit(mon_dispatch, MONITOR_REQ_GSSSIGN, 1);
+ 	}
+ 	return (0);
+ }
+@@ -1806,8 +1831,8 @@ mm_answer_gss_checkmic(int sock, Buffer *m)
+ 	OM_uint32 ret;
+ 	u_int len;
+ 
+-	if (!options.gss_authentication)
+-		fatal("%s: GSSAPI authentication not enabled", __func__);
++	if (!options.gss_authentication && !options.gss_keyex)
++		fatal("%s: GSSAPI not enabled", __func__);
+ 
+ 	gssbuf.value = buffer_get_string(m, &len);
+ 	gssbuf.length = len;
+@@ -1835,10 +1860,11 @@ mm_answer_gss_userok(int sock, Buffer *m)
+ {
+ 	int authenticated;
+ 
+-	if (!options.gss_authentication)
+-		fatal("%s: GSSAPI authentication not enabled", __func__);
++	if (!options.gss_authentication && !options.gss_keyex)
++		fatal("%s: GSSAPI not enabled", __func__);
+ 
+-	authenticated = authctxt->valid && ssh_gssapi_userok(authctxt->user);
++	authenticated = authctxt->valid && 
++	    ssh_gssapi_userok(authctxt->user, authctxt->pw);
+ 
+ 	buffer_clear(m);
+ 	buffer_put_int(m, authenticated);
+@@ -1851,5 +1877,76 @@ mm_answer_gss_userok(int sock, Buffer *m)
+ 	/* Monitor loop will terminate if authenticated */
+ 	return (authenticated);
+ }
++
++int 
++mm_answer_gss_sign(int socket, Buffer *m)
++{
++	gss_buffer_desc data;
++	gss_buffer_desc hash = GSS_C_EMPTY_BUFFER;
++	OM_uint32 major, minor;
++	u_int len;
++
++	if (!options.gss_authentication && !options.gss_keyex)
++		fatal("%s: GSSAPI not enabled", __func__);
++
++	data.value = buffer_get_string(m, &len);
++	data.length = len;
++	if (data.length != 20) 
++		fatal("%s: data length incorrect: %d", __func__, 
++		    (int) data.length);
++
++	/* Save the session ID on the first time around */
++	if (session_id2_len == 0) {
++		session_id2_len = data.length;
++		session_id2 = xmalloc(session_id2_len);
++		memcpy(session_id2, data.value, session_id2_len);
++	}
++	major = ssh_gssapi_sign(gsscontext, &data, &hash);
++
++	free(data.value);
++
++	buffer_clear(m);
++	buffer_put_int(m, major);
++	buffer_put_string(m, hash.value, hash.length);
++
++	mm_request_send(socket, MONITOR_ANS_GSSSIGN, m);
++
++	gss_release_buffer(&minor, &hash);
++
++	/* Turn on getpwnam permissions */
++	monitor_permit(mon_dispatch, MONITOR_REQ_PWNAM, 1);
++	
++	/* And credential updating, for when rekeying */
++	monitor_permit(mon_dispatch, MONITOR_REQ_GSSUPCREDS, 1);
++
++	return (0);
++}
++
++int
++mm_answer_gss_updatecreds(int socket, Buffer *m) {
++	ssh_gssapi_ccache store;
++	int ok;
++
++	if (!options.gss_authentication && !options.gss_keyex)
++		fatal("%s: GSSAPI not enabled", __func__);
++
++	store.filename = buffer_get_string(m, NULL);
++	store.envvar   = buffer_get_string(m, NULL);
++	store.envval   = buffer_get_string(m, NULL);
++
++	ok = ssh_gssapi_update_creds(&store);
++
++	free(store.filename);
++	free(store.envvar);
++	free(store.envval);
++
++	buffer_clear(m);
++	buffer_put_int(m, ok);
++
++	mm_request_send(socket, MONITOR_ANS_GSSUPCREDS, m);
++
++	return(0);
++}
++
+ #endif /* GSSAPI */
+ 
+diff --git a/monitor.h b/monitor.h
+index 36e73f79..bcf9f125 100644
+--- a/monitor.h
++++ b/monitor.h
+@@ -68,6 +68,8 @@ enum monitor_reqtype {
+ #ifdef PAM_ENHANCEMENT
+ 	MONITOR_REQ_AUTHMETHOD = 114,
+ #endif
++	MONITOR_REQ_GSSSIGN = 150, MONITOR_ANS_GSSSIGN = 151,
++	MONITOR_REQ_GSSUPCREDS = 152, MONITOR_ANS_GSSUPCREDS = 153,
+ };
+ 
+ struct monitor {
+diff --git a/monitor_wrap.c b/monitor_wrap.c
+index bc6382f3..6cacbbab 100644
+--- a/monitor_wrap.c
++++ b/monitor_wrap.c
+@@ -942,7 +942,7 @@ mm_ssh_gssapi_checkmic(Gssctxt *ctx, gss_buffer_t gssbuf, gss_buffer_t gssmic)
+ }
+ 
+ int
+-mm_ssh_gssapi_userok(char *user)
++mm_ssh_gssapi_userok(char *user, struct passwd *pw)
+ {
+ 	Buffer m;
+ 	int authenticated = 0;
+@@ -959,5 +959,50 @@ mm_ssh_gssapi_userok(char *user)
+ 	debug3("%s: user %sauthenticated",__func__, authenticated ? "" : "not ");
+ 	return (authenticated);
+ }
++
++OM_uint32
++mm_ssh_gssapi_sign(Gssctxt *ctx, gss_buffer_desc *data, gss_buffer_desc *hash)
++{
++	Buffer m;
++	OM_uint32 major;
++	u_int len;
++
++	buffer_init(&m);
++	buffer_put_string(&m, data->value, data->length);
++
++	mm_request_send(pmonitor->m_recvfd, MONITOR_REQ_GSSSIGN, &m);
++	mm_request_receive_expect(pmonitor->m_recvfd, MONITOR_ANS_GSSSIGN, &m);
++
++	major = buffer_get_int(&m);
++	hash->value = buffer_get_string(&m, &len);
++	hash->length = len;
++
++	buffer_free(&m);
++
++	return(major);
++}
++
++int
++mm_ssh_gssapi_update_creds(ssh_gssapi_ccache *store)
++{
++	Buffer m;
++	int ok;
++
++	buffer_init(&m);
++
++	buffer_put_cstring(&m, store->filename ? store->filename : "");
++	buffer_put_cstring(&m, store->envvar ? store->envvar : "");
++	buffer_put_cstring(&m, store->envval ? store->envval : "");
++	
++	mm_request_send(pmonitor->m_recvfd, MONITOR_REQ_GSSUPCREDS, &m);
++	mm_request_receive_expect(pmonitor->m_recvfd, MONITOR_ANS_GSSUPCREDS, &m);
++
++	ok = buffer_get_int(&m);
++
++	buffer_free(&m);
++	
++	return (ok);
++}
++
+ #endif /* GSSAPI */
+ 
+diff --git a/monitor_wrap.h b/monitor_wrap.h
+index db5902f5..8f9dd896 100644
+--- a/monitor_wrap.h
++++ b/monitor_wrap.h
+@@ -55,8 +55,10 @@ int mm_key_verify(Key *, u_char *, u_int, u_char *, u_int);
+ OM_uint32 mm_ssh_gssapi_server_ctx(Gssctxt **, gss_OID);
+ OM_uint32 mm_ssh_gssapi_accept_ctx(Gssctxt *,
+    gss_buffer_desc *, gss_buffer_desc *, OM_uint32 *);
+-int mm_ssh_gssapi_userok(char *user);
++int mm_ssh_gssapi_userok(char *user, struct passwd *);
+ OM_uint32 mm_ssh_gssapi_checkmic(Gssctxt *, gss_buffer_t, gss_buffer_t);
++OM_uint32 mm_ssh_gssapi_sign(Gssctxt *, gss_buffer_t, gss_buffer_t);
++int mm_ssh_gssapi_update_creds(ssh_gssapi_ccache *);
+ #endif
+ 
+ #ifdef USE_PAM
+diff --git a/readconf.c b/readconf.c
+index e6fd1420..1efbab9b 100644
+--- a/readconf.c
++++ b/readconf.c
+@@ -160,6 +160,8 @@ typedef enum {
+ 	oClearAllForwardings, oNoHostAuthenticationForLocalhost,
+ 	oEnableSSHKeysign, oRekeyLimit, oVerifyHostKeyDNS, oConnectTimeout,
+ 	oAddressFamily, oGssAuthentication, oGssDelegateCreds,
++	oGssTrustDns, oGssKeyEx, oGssClientIdentity, oGssRenewalRekey,
++	oGssServerIdentity, 
+ 	oServerAliveInterval, oServerAliveCountMax, oIdentitiesOnly,
+ 	oSendEnv, oControlPath, oControlMaster, oControlPersist,
+ 	oHashKnownHosts,
+@@ -208,10 +210,19 @@ static struct {
+ 	{ "afstokenpassing", oUnsupported },
+ #if defined(GSSAPI)
+ 	{ "gssapiauthentication", oGssAuthentication },
++	{ "gssapikeyexchange", oGssKeyEx },
+ 	{ "gssapidelegatecredentials", oGssDelegateCreds },
++	{ "gssapitrustdns", oGssTrustDns },
++	{ "gssapiclientidentity", oGssClientIdentity },
++	{ "gssapiserveridentity", oGssServerIdentity },
++	{ "gssapirenewalforcesrekey", oGssRenewalRekey },
+ #else
+ 	{ "gssapiauthentication", oUnsupported },
++	{ "gssapikeyexchange", oUnsupported },
+ 	{ "gssapidelegatecredentials", oUnsupported },
++	{ "gssapitrustdns", oUnsupported },
++	{ "gssapiclientidentity", oUnsupported },
++	{ "gssapirenewalforcesrekey", oUnsupported },
+ #endif
+ 	{ "fallbacktorsh", oDeprecated },
+ 	{ "usersh", oDeprecated },
+@@ -996,10 +1007,30 @@ parse_time:
+ 		intptr = &options->gss_authentication;
+ 		goto parse_flag;
+ 
++	case oGssKeyEx:
++		intptr = &options->gss_keyex;
++		goto parse_flag;
++
+ 	case oGssDelegateCreds:
+ 		intptr = &options->gss_deleg_creds;
+ 		goto parse_flag;
+ 
++	case oGssTrustDns:
++		intptr = &options->gss_trust_dns;
++		goto parse_flag;
++
++	case oGssClientIdentity:
++		charptr = &options->gss_client_identity;
++		goto parse_string;
++
++	case oGssServerIdentity:
++		charptr = &options->gss_server_identity;
++		goto parse_string;
++
++	case oGssRenewalRekey:
++		intptr = &options->gss_renewal_rekey;
++		goto parse_flag;
++
+ 	case oBatchMode:
+ 		intptr = &options->batch_mode;
+ 		goto parse_flag;
+@@ -1818,7 +1849,12 @@ initialize_options(Options * options)
+ 	options->pubkey_authentication = -1;
+ 	options->challenge_response_authentication = -1;
+ 	options->gss_authentication = -1;
++	options->gss_keyex = -1;
+ 	options->gss_deleg_creds = -1;
++	options->gss_trust_dns = -1;
++	options->gss_renewal_rekey = -1;
++	options->gss_client_identity = NULL;
++	options->gss_server_identity = NULL;
+ 	options->password_authentication = -1;
+ 	options->kbd_interactive_authentication = -1;
+ 	options->kbd_interactive_devices = NULL;
+@@ -1973,8 +2009,14 @@ fill_default_options(Options * options)
+ #else
+ 		options->gss_authentication = 0;
+ #endif
++	if (options->gss_keyex == -1)
++		options->gss_keyex = 0;
+ 	if (options->gss_deleg_creds == -1)
+ 		options->gss_deleg_creds = 0;
++	if (options->gss_trust_dns == -1)
++		options->gss_trust_dns = 0;
++	if (options->gss_renewal_rekey == -1)
++		options->gss_renewal_rekey = 0;
+ 	if (options->password_authentication == -1)
+ 		options->password_authentication = 1;
+ 	if (options->kbd_interactive_authentication == -1)
+diff --git a/readconf.h b/readconf.h
+index 8005ebdd..35fb4ad0 100644
+--- a/readconf.h
++++ b/readconf.h
+@@ -45,7 +45,12 @@ typedef struct {
+ 	int     challenge_response_authentication;
+ 					/* Try S/Key or TIS, authentication. */
+ 	int     gss_authentication;	/* Try GSS authentication */
++	int     gss_keyex;		/* Try GSS key exchange */
+ 	int     gss_deleg_creds;	/* Delegate GSS credentials */
++	int	gss_trust_dns;		/* Trust DNS for GSS canonicalization */
++	int	gss_renewal_rekey;	/* Credential renewal forces rekey */
++	char    *gss_client_identity;   /* Principal to initiate GSSAPI with */
++	char    *gss_server_identity;   /* GSSAPI target principal */
+ 	int     password_authentication;	/* Try password
+ 						 * authentication. */
+ 	int     kbd_interactive_authentication; /* Try keyboard-interactive auth. */
+diff --git a/servconf.c b/servconf.c
+index c0aba508..881edd95 100644
+--- a/servconf.c
++++ b/servconf.c
+@@ -113,8 +113,10 @@ initialize_server_options(ServerOptions *options)
+ 	options->kerberos_ticket_cleanup = -1;
+ 	options->kerberos_get_afs_token = -1;
+ 	options->gss_authentication=-1;
++	options->gss_keyex = -1;
+ 	options->gss_cleanup_creds = -1;
+ 	options->gss_strict_acceptor = -1;
++	options->gss_store_rekey = -1;
+ 	options->password_authentication = -1;
+ 	options->kbd_interactive_authentication = -1;
+ 	options->challenge_response_authentication = -1;
+@@ -292,10 +294,14 @@ fill_default_server_options(ServerOptions *options)
+ #else
+ 		options->gss_authentication = 0;
+ #endif
++	if (options->gss_keyex == -1)
++		options->gss_keyex = 0;
+ 	if (options->gss_cleanup_creds == -1)
+ 		options->gss_cleanup_creds = 1;
+ 	if (options->gss_strict_acceptor == -1)
+-		options->gss_strict_acceptor = 0;
++		options->gss_strict_acceptor = 1;
++	if (options->gss_store_rekey == -1)
++		options->gss_store_rekey = 0;
+ 	if (options->password_authentication == -1)
+ 		options->password_authentication = 1;
+ 	if (options->kbd_interactive_authentication == -1)
+@@ -438,6 +444,7 @@ typedef enum {
+ 	sHostKeyAlgorithms,
+ 	sClientAliveInterval, sClientAliveCountMax, sAuthorizedKeysFile,
+ 	sGssAuthentication, sGssCleanupCreds, sGssStrictAcceptor,
++	sGssKeyEx, sGssStoreRekey,
+ 	sAcceptEnv, sPermitTunnel,
+ 	sMatch, sPermitOpen, sForceCommand, sChrootDirectory,
+ 	sUsePrivilegeSeparation, sAllowAgentForwarding,
+@@ -518,12 +525,20 @@ static struct {
+ #else /* USE_GSS_STORE_CRED */
+ 	{ "gssapicleanupcredentials", sGssCleanupCreds, SSHCFG_GLOBAL },
+ #endif /* USE_GSS_STORE_CRED */
++	{ "gssapicleanupcreds", sGssCleanupCreds, SSHCFG_GLOBAL },
+ 	{ "gssapistrictacceptorcheck", sGssStrictAcceptor, SSHCFG_GLOBAL },
++	{ "gssapikeyexchange", sGssKeyEx, SSHCFG_GLOBAL },
++	{ "gssapistorecredentialsonrekey", sGssStoreRekey, SSHCFG_GLOBAL },
+ #else
+ 	{ "gssapiauthentication", sUnsupported, SSHCFG_ALL },
+ 	{ "gssapicleanupcredentials", sUnsupported, SSHCFG_GLOBAL },
++	{ "gssapicleanupcreds", sUnsupported, SSHCFG_GLOBAL },
+ 	{ "gssapistrictacceptorcheck", sUnsupported, SSHCFG_GLOBAL },
++	{ "gssapikeyexchange", sUnsupported, SSHCFG_GLOBAL },
++	{ "gssapistorecredentialsonrekey", sUnsupported, SSHCFG_GLOBAL },
+ #endif
++	{ "gssusesessionccache", sUnsupported, SSHCFG_GLOBAL },
++	{ "gssapiusesessioncredcache", sUnsupported, SSHCFG_GLOBAL },
+ 	{ "passwordauthentication", sPasswordAuthentication, SSHCFG_ALL },
+ 	{ "kbdinteractiveauthentication", sKbdInteractiveAuthentication, SSHCFG_ALL },
+ 	{ "challengeresponseauthentication", sChallengeResponseAuthentication, SSHCFG_GLOBAL },
+@@ -1281,6 +1296,10 @@ process_server_config_line(ServerOptions *options, char *line,
+ 		intptr = &options->gss_authentication;
+ 		goto parse_flag;
+ 
++	case sGssKeyEx:
++		intptr = &options->gss_keyex;
++		goto parse_flag;
++
+ 	case sGssCleanupCreds:
+ 		intptr = &options->gss_cleanup_creds;
+ 		goto parse_flag;
+@@ -1289,6 +1308,10 @@ process_server_config_line(ServerOptions *options, char *line,
+ 		intptr = &options->gss_strict_acceptor;
+ 		goto parse_flag;
+ 
++	case sGssStoreRekey:
++		intptr = &options->gss_store_rekey;
++		goto parse_flag;
++
+ 	case sPasswordAuthentication:
+ 		intptr = &options->password_authentication;
+ 		goto parse_flag;
+@@ -2353,7 +2376,10 @@ dump_config(ServerOptions *o)
+ #endif
+ #ifdef GSSAPI
+ 	dump_cfg_fmtint(sGssAuthentication, o->gss_authentication);
++	dump_cfg_fmtint(sGssKeyEx, o->gss_keyex);
+ 	dump_cfg_fmtint(sGssCleanupCreds, o->gss_cleanup_creds);
++	dump_cfg_fmtint(sGssStrictAcceptor, o->gss_strict_acceptor);
++	dump_cfg_fmtint(sGssStoreRekey, o->gss_store_rekey);
+ #endif
+ 	dump_cfg_fmtint(sPasswordAuthentication, o->password_authentication);
+ 	dump_cfg_fmtint(sKbdInteractiveAuthentication,
+diff --git a/servconf.h b/servconf.h
+index 104852f7..729819e7 100644
+--- a/servconf.h
++++ b/servconf.h
+@@ -116,8 +116,10 @@ typedef struct {
+ 	int     kerberos_get_afs_token;		/* If true, try to get AFS token if
+ 						 * authenticated with Kerberos. */
+ 	int     gss_authentication;	/* If true, permit GSSAPI authentication */
++	int     gss_keyex;		/* If true, permit GSSAPI key exchange */
+ 	int     gss_cleanup_creds;	/* If true, destroy cred cache on logout */
+ 	int     gss_strict_acceptor;	/* If true, restrict the GSSAPI acceptor name */
++	int 	gss_store_rekey;
+ 	int     password_authentication;	/* If true, permit password
+ 						 * authentication. */
+ 	int     kbd_interactive_authentication;	/* If true, permit */
+diff --git a/ssh-gss.h b/ssh-gss.h
+index a99d7f08..914701bc 100644
+--- a/ssh-gss.h
++++ b/ssh-gss.h
+@@ -1,6 +1,6 @@
+ /* $OpenBSD: ssh-gss.h,v 1.11 2014/02/26 20:28:44 djm Exp $ */
+ /*
+- * Copyright (c) 2001-2003 Simon Wilkinson. All rights reserved.
++ * Copyright (c) 2001-2009 Simon Wilkinson. All rights reserved.
+  *
+  * Redistribution and use in source and binary forms, with or without
+  * modification, are permitted provided that the following conditions
+@@ -61,10 +61,22 @@
+ 
+ #define SSH_GSS_OIDTYPE 0x06
+ 
++#define SSH2_MSG_KEXGSS_INIT                            30
++#define SSH2_MSG_KEXGSS_CONTINUE                        31
++#define SSH2_MSG_KEXGSS_COMPLETE                        32
++#define SSH2_MSG_KEXGSS_HOSTKEY                         33
++#define SSH2_MSG_KEXGSS_ERROR                           34
++#define SSH2_MSG_KEXGSS_GROUPREQ			40
++#define SSH2_MSG_KEXGSS_GROUP				41
++#define KEX_GSS_GRP1_SHA1_ID				"gss-group1-sha1-"
++#define KEX_GSS_GRP14_SHA1_ID				"gss-group14-sha1-"
++#define KEX_GSS_GEX_SHA1_ID				"gss-gex-sha1-"
++
+ typedef struct {
+ 	char *filename;
+ 	char *envvar;
+ 	char *envval;
++	struct passwd *owner;
+ 	void *data;
+ } ssh_gssapi_ccache;
+ 
+@@ -72,8 +84,11 @@ typedef struct {
+ 	gss_buffer_desc displayname;
+ 	gss_buffer_desc exportedname;
+ 	gss_cred_id_t creds;
++	gss_name_t name;
+ 	struct ssh_gssapi_mech_struct *mech;
+ 	ssh_gssapi_ccache store;
++	int used;
++	int updated;
+ } ssh_gssapi_client;
+ 
+ typedef struct ssh_gssapi_mech_struct {
+@@ -84,6 +99,7 @@ typedef struct ssh_gssapi_mech_struct {
+ 	int (*userok) (ssh_gssapi_client *, char *);
+ 	int (*localname) (ssh_gssapi_client *, char **);
+ 	void (*storecreds) (ssh_gssapi_client *);
++	int (*updatecreds) (ssh_gssapi_ccache *, ssh_gssapi_client *);
+ } ssh_gssapi_mech;
+ 
+ typedef struct {
+@@ -94,10 +110,11 @@ typedef struct {
+ 	gss_OID		oid; /* client */
+ 	gss_cred_id_t	creds; /* server */
+ 	gss_name_t	client; /* server */
+-	gss_cred_id_t	client_creds; /* server */
++	gss_cred_id_t	client_creds; /* both */
+ } Gssctxt;
+ 
+ extern ssh_gssapi_mech *supported_mechs[];
++extern Gssctxt *gss_kex_context;
+ 
+ int  ssh_gssapi_check_oid(Gssctxt *, void *, size_t);
+ void ssh_gssapi_set_oid_data(Gssctxt *, void *, size_t);
+@@ -119,16 +136,32 @@ void ssh_gssapi_build_ctx(Gssctxt **);
+ void ssh_gssapi_delete_ctx(Gssctxt **);
+ OM_uint32 ssh_gssapi_sign(Gssctxt *, gss_buffer_t, gss_buffer_t);
+ void ssh_gssapi_buildmic(Buffer *, const char *, const char *, const char *);
+-int ssh_gssapi_check_mechanism(Gssctxt **, gss_OID, const char *);
++int ssh_gssapi_check_mechanism(Gssctxt **, gss_OID, const char *, const char *);
++OM_uint32 ssh_gssapi_client_identity(Gssctxt *, const char *);
++int ssh_gssapi_credentials_updated(Gssctxt *);
+ 
+ /* In the server */
++typedef int ssh_gssapi_check_fn(Gssctxt **, gss_OID, const char *, 
++    const char *);
++char *ssh_gssapi_client_mechanisms(const char *, const char *);
++char *ssh_gssapi_kex_mechs(gss_OID_set, ssh_gssapi_check_fn *, const char *,
++    const char *);
++gss_OID ssh_gssapi_id_kex(Gssctxt *, char *, int);
++int ssh_gssapi_server_check_mech(Gssctxt **,gss_OID, const char *, 
++    const char *);
+ OM_uint32 ssh_gssapi_server_ctx(Gssctxt **, gss_OID);
+-int ssh_gssapi_userok(char *name);
++int ssh_gssapi_userok(char *name, struct passwd *);
+ OM_uint32 ssh_gssapi_checkmic(Gssctxt *, gss_buffer_t, gss_buffer_t);
+ void ssh_gssapi_do_child(char ***, u_int *);
+ void ssh_gssapi_cleanup_creds(void);
+ void ssh_gssapi_storecreds(void);
+ 
++char *ssh_gssapi_server_mechanisms(void);
++int ssh_gssapi_oid_table_ok(void);
++
++int ssh_gssapi_update_creds(ssh_gssapi_ccache *store);
++void ssh_gssapi_rekey_creds(void);
++
+ #endif /* GSSAPI */
+ 
+ #endif /* _SSH_GSS_H */
+diff --git a/ssh_config b/ssh_config
+index 90fb63f0..4e879cd2 100644
+--- a/ssh_config
++++ b/ssh_config
+@@ -26,6 +26,8 @@
+ #   HostbasedAuthentication no
+ #   GSSAPIAuthentication no
+ #   GSSAPIDelegateCredentials no
++#   GSSAPIKeyExchange no
++#   GSSAPITrustDNS no
+ #   BatchMode no
+ #   CheckHostIP yes
+ #   AddressFamily any
+diff --git a/ssh_config.4 b/ssh_config.4
+index 0953f11c..4492ecaf 100644
+--- a/ssh_config.4
++++ b/ssh_config.4
+@@ -759,10 +759,42 @@ The default is
+ Specifies whether user authentication based on GSSAPI is allowed.
+ The default on Solaris is
+ .Dq yes .
++.It Cm GSSAPIKeyExchange
++Specifies whether key exchange based on GSSAPI may be used. When using
++GSSAPI key exchange the server need not have a host key.
++The default is
++.Cm no .
++.It Cm GSSAPIClientIdentity
++If set, specifies the GSSAPI client identity that ssh should use when
++connecting to the server. The default is unset, which means that the default
++identity will be used.
++.It Cm GSSAPIServerIdentity
++If set, specifies the GSSAPI server identity that ssh should expect when
++connecting to the server. The default is unset, which means that the
++expected GSSAPI server identity will be determined from the target
++hostname.
+ .It Cm GSSAPIDelegateCredentials
+ Forward (delegate) credentials to the server.
+ The default is
+ .Cm no .
++.It Cm GSSAPIRenewalForcesRekey
++If set to
++.Cm yes
++then renewal of the client's GSSAPI credentials will force the rekeying of the
++ssh connection. With a compatible server, this can delegate the renewed
++credentials to a session on the server.
++The default is
++.Cm no .
++.It Cm GSSAPITrustDns
++Set to
++.Cm yes
++to indicate that the DNS is trusted to securely canonicalize
++the name of the host being connected to. If
++.Cm no ,
++the hostname entered on the
++command line will be passed untouched to the GSSAPI library.
++The default is
++.Cm no .
+ .It Cm HashKnownHosts
+ Indicates that
+ .Xr ssh 1
+diff --git a/sshconnect2.c b/sshconnect2.c
+index 56942ca7..7959d048 100644
+--- a/sshconnect2.c
++++ b/sshconnect2.c
+@@ -166,6 +166,11 @@ ssh_kex2(char *host, struct sockaddr *hostaddr, u_short port)
+ 	struct kex *kex;
+ 	int r;
+ 
++#ifdef GSSAPI
++	char *orig = NULL, *gss = NULL;
++	char *gss_host = NULL;
++#endif
++
+ 	xxx_host = host;
+ 	xxx_hostaddr = hostaddr;
+ 
+@@ -196,6 +201,35 @@ ssh_kex2(char *host, struct sockaddr *hostaddr, u_short port)
+ 		    order_hostkeyalgs(host, hostaddr, port));
+ 	}
+ 
++#ifdef GSSAPI
++	if (options.gss_keyex) {
++		/* Add the GSSAPI mechanisms currently supported on this
++		 * client to the key exchange algorithm proposal */
++		orig = myproposal[PROPOSAL_KEX_ALGS];
++
++		if (options.gss_server_identity)
++			gss_host = xstrdup(options.gss_server_identity);
++		else if (options.gss_trust_dns)
++			gss_host = remote_hostname(active_state);
++		else
++			gss_host = xstrdup(host);
++
++		gss = ssh_gssapi_client_mechanisms(gss_host,
++		    options.gss_client_identity);
++		if (gss) {
++			debug("Offering GSSAPI proposal: %s", gss);
++			xasprintf(&myproposal[PROPOSAL_KEX_ALGS],
++			    "%s,%s", gss, orig);
++
++			/* If we've got GSSAPI algorithms, then we also
++			 * support the 'null' hostkey, as a last resort */
++			orig = myproposal[PROPOSAL_SERVER_HOST_KEY_ALGS];
++			xasprintf(&myproposal[PROPOSAL_SERVER_HOST_KEY_ALGS],
++			    "%s,null", orig);
++		}
++	}
++#endif
++
+ 	if (options.rekey_limit || options.rekey_interval)
+ 		packet_set_rekey_limits((u_int32_t)options.rekey_limit,
+ 		    (time_t)options.rekey_interval);
+@@ -217,15 +251,41 @@ ssh_kex2(char *host, struct sockaddr *hostaddr, u_short port)
+ # endif
+ #endif
+ 	kex->kex[KEX_C25519_SHA256] = kexc25519_client;
++#ifdef GSSAPI
++	if (options.gss_keyex) {
++		kex->kex[KEX_GSS_GRP1_SHA1] = kexgss_client;
++		kex->kex[KEX_GSS_GRP14_SHA1] = kexgss_client;
++		kex->kex[KEX_GSS_GEX_SHA1] = kexgss_client;
++	}
++#endif
+ 	kex->client_version_string=client_version_string;
+ 	kex->server_version_string=server_version_string;
+ 	kex->verify_host_key=&verify_host_key_callback;
+ 
++#ifdef GSSAPI
++	if (options.gss_keyex) {
++		kex->gss_deleg_creds = options.gss_deleg_creds;
++		kex->gss_trust_dns = options.gss_trust_dns;
++		kex->gss_client = options.gss_client_identity;
++		kex->gss_host = gss_host;
++	}
++#endif
++
+ 	dispatch_run(DISPATCH_BLOCK, &kex->done, active_state);
+ 
+ 	/* remove ext-info from the KEX proposals for rekeying */
+ 	myproposal[PROPOSAL_KEX_ALGS] =
+ 	    compat_kex_proposal(options.kex_algorithms);
++#ifdef GSSAPI
++	/* repair myproposal after it was crumpled by the */
++	/* ext-info removal above */
++	if (gss) {
++		orig = myproposal[PROPOSAL_KEX_ALGS];
++		xasprintf(&myproposal[PROPOSAL_KEX_ALGS],
++		    "%s,%s", gss, orig);
++		free(gss);
++	}
++#endif
+ 	if ((r = kex_prop2buf(kex->my, myproposal)) != 0)
+ 		fatal("kex_prop2buf: %s", ssh_err(r));
+ 
+@@ -315,6 +375,7 @@ int	input_gssapi_token(int type, u_int32_t, void *);
+ int	input_gssapi_hash(int type, u_int32_t, void *);
+ int	input_gssapi_error(int, u_int32_t, void *);
+ int	input_gssapi_errtok(int, u_int32_t, void *);
++int	userauth_gsskeyex(Authctxt *authctxt);
+ #endif
+ 
+ void	userauth(Authctxt *, char *);
+@@ -331,6 +392,11 @@ static char *authmethods_get(void);
+ 
+ Authmethod authmethods[] = {
+ #ifdef GSSAPI
++	{"gssapi-keyex",
++		userauth_gsskeyex,
++		NULL,
++		&options.gss_authentication,
++		NULL},
+ 	{"gssapi-with-mic",
+ 		userauth_gssapi,
+ 		NULL,
+@@ -675,25 +741,40 @@ userauth_gssapi(Authctxt *authctxt)
+ 	static u_int mech = 0;
+ 	OM_uint32 min;
+ 	int ok = 0;
++	char *gss_host;
++
++	if (options.gss_server_identity)
++		gss_host = xstrdup(options.gss_server_identity);
++	else if (options.gss_trust_dns)
++		gss_host = remote_hostname(active_state);
++	else
++		gss_host = xstrdup(authctxt->host);
+ 
+ 	/* Try one GSSAPI method at a time, rather than sending them all at
+ 	 * once. */
+ 
+ 	if (gss_supported == NULL)
+-		gss_indicate_mechs(&min, &gss_supported);
++		if (GSS_ERROR(gss_indicate_mechs(&min, &gss_supported))) {
++			gss_supported = NULL;
++			free(gss_host);
++			return 0;
++		}
+ 
+ 	/* Check to see if the mechanism is usable before we offer it */
+ 	while (mech < gss_supported->count && !ok) {
+ 		/* My DER encoding requires length<128 */
+ 		if (gss_supported->elements[mech].length < 128 &&
+ 		    ssh_gssapi_check_mechanism(&gssctxt, 
+-		    &gss_supported->elements[mech], authctxt->host)) {
++		    &gss_supported->elements[mech], gss_host, 
++                    options.gss_client_identity)) {
+ 			ok = 1; /* Mechanism works */
+ 		} else {
+ 			mech++;
+ 		}
+ 	}
+ 
++	free(gss_host);
++
+ 	if (!ok)
+ 		return 0;
+ 
+@@ -784,8 +865,8 @@ input_gssapi_response(int type, u_int32_t plen, void *ctxt)
+ {
+ 	Authctxt *authctxt = ctxt;
+ 	Gssctxt *gssctxt;
+-	int oidlen;
+-	char *oidv;
++	u_int oidlen;
++	u_char *oidv;
+ 
+ 	if (authctxt == NULL)
+ 		fatal("input_gssapi_response: no authentication context");
+@@ -898,6 +979,48 @@ input_gssapi_error(int type, u_int32_t plen, void *ctxt)
+ 	free(lang);
+ 	return 0;
+ }
++
++int
++userauth_gsskeyex(Authctxt *authctxt)
++{
++	Buffer b;
++	gss_buffer_desc gssbuf;
++	gss_buffer_desc mic = GSS_C_EMPTY_BUFFER;
++	OM_uint32 ms;
++
++	static int attempt = 0;
++	if (attempt++ >= 1)
++		return (0);
++
++	if (gss_kex_context == NULL) {
++		debug("No valid Key exchange context"); 
++		return (0);
++	}
++
++	ssh_gssapi_buildmic(&b, authctxt->server_user, authctxt->service,
++	    "gssapi-keyex");
++
++	gssbuf.value = buffer_ptr(&b);
++	gssbuf.length = buffer_len(&b);
++
++	if (GSS_ERROR(ssh_gssapi_sign(gss_kex_context, &gssbuf, &mic))) {
++		buffer_free(&b);
++		return (0);
++	}
++
++	packet_start(SSH2_MSG_USERAUTH_REQUEST);
++	packet_put_cstring(authctxt->server_user);
++	packet_put_cstring(authctxt->service);
++	packet_put_cstring(authctxt->method->name);
++	packet_put_string(mic.value, mic.length);
++	packet_send();
++
++	buffer_free(&b);
++	gss_release_buffer(&ms, &mic);
++
++	return (1);
++}
++
+ #endif /* GSSAPI */
+ 
+ int
+diff --git a/sshd.c b/sshd.c
+index eee363ab..e460c238 100644
+--- a/sshd.c
++++ b/sshd.c
+@@ -123,6 +123,10 @@
+ #include "version.h"
+ #include "ssherr.h"
+ 
++#ifdef USE_SECURITY_SESSION_API
++#include <Security/AuthSession.h>
++#endif
++
+ /* Re-exec fds */
+ #define REEXEC_DEVCRYPTO_RESERVED_FD	(STDERR_FILENO + 1)
+ #define REEXEC_STARTUP_PIPE_FD		(STDERR_FILENO + 2)
+@@ -531,7 +535,7 @@ privsep_preauth_child(void)
+ 
+ #ifdef GSSAPI
+ 	/* Cache supported mechanism OIDs for later use */
+-	if (options.gss_authentication)
++	if (options.gss_authentication || options.gss_keyex)
+ 		ssh_gssapi_prepare_supported_oids();
+ #endif
+ 
+@@ -1705,10 +1709,13 @@ main(int ac, char **av)
+ 		    key ? "private" : "agent", i, sshkey_ssh_name(pubkey), fp);
+ 		free(fp);
+ 	}
++#ifndef GSSAPI
++	/* The GSSAPI key exchange can run without a host key */
+ 	if (!sensitive_data.have_ssh2_key) {
+ 		logit("sshd: no hostkeys available -- exiting.");
+ 		exit(1);
+ 	}
++#endif
+ 
+ 	/*
+ 	 * Load certificates. They are stored in an array at identical
+@@ -1978,6 +1985,60 @@ main(int ac, char **av)
+ 	    remote_ip, remote_port, laddr,  ssh_local_port(ssh));
+ 	free(laddr);
+ 
++#ifdef USE_SECURITY_SESSION_API
++	/*
++	 * Create a new security session for use by the new user login if
++	 * the current session is the root session or we are not launched
++	 * by inetd (eg: debugging mode or server mode).  We do not
++	 * necessarily need to create a session if we are launched from
++	 * inetd because Panther xinetd will create a session for us.
++	 *
++	 * The only case where this logic will fail is if there is an
++	 * inetd running in a non-root session which is not creating
++	 * new sessions for us.  Then all the users will end up in the
++	 * same session (bad).
++	 *
++	 * When the client exits, the session will be destroyed for us
++	 * automatically.
++	 *
++	 * We must create the session before any credentials are stored
++	 * (including AFS pags, which happens a few lines below).
++	 */
++	{
++		OSStatus err = 0;
++		SecuritySessionId sid = 0;
++		SessionAttributeBits sattrs = 0;
++
++		err = SessionGetInfo(callerSecuritySession, &sid, &sattrs);
++		if (err)
++			error("SessionGetInfo() failed with error %.8X",
++			    (unsigned) err);
++		else
++			debug("Current Session ID is %.8X / Session Attributes are %.8X",
++			    (unsigned) sid, (unsigned) sattrs);
++
++		if (inetd_flag && !(sattrs & sessionIsRoot))
++			debug("Running in inetd mode in a non-root session... "
++			    "assuming inetd created the session for us.");
++		else {
++			debug("Creating new security session...");
++			err = SessionCreate(0, sessionHasTTY | sessionIsRemote);
++			if (err)
++				error("SessionCreate() failed with error %.8X",
++				    (unsigned) err);
++
++			err = SessionGetInfo(callerSecuritySession, &sid, 
++			    &sattrs);
++			if (err)
++				error("SessionGetInfo() failed with error %.8X",
++				    (unsigned) err);
++			else
++				debug("New Session ID is %.8X / Session Attributes are %.8X",
++				    (unsigned) sid, (unsigned) sattrs);
++		}
++	}
++#endif
++
+ 	/*
+ 	 * We don't want to listen forever unless the other side
+ 	 * successfully authenticates itself.  So we set up an alarm which is
+@@ -2179,6 +2240,48 @@ do_ssh2_kex(void)
+ 	myproposal[PROPOSAL_SERVER_HOST_KEY_ALGS] = compat_pkalg_proposal(
+ 	    list_hostkey_types());
+ 
++#ifdef GSSAPI
++	{
++	char *orig;
++	char *gss = NULL;
++	char *newstr = NULL;
++	orig = myproposal[PROPOSAL_KEX_ALGS];
++
++	/* 
++	 * If we don't have a host key, then there's no point advertising
++	 * the other key exchange algorithms
++	 */
++
++	if (strlen(myproposal[PROPOSAL_SERVER_HOST_KEY_ALGS]) == 0)
++		orig = NULL;
++
++	if (options.gss_keyex)
++		gss = ssh_gssapi_server_mechanisms();
++	else
++		gss = NULL;
++
++	if (gss && orig)
++		xasprintf(&newstr, "%s,%s", gss, orig);
++	else if (gss)
++		newstr = gss;
++	else if (orig)
++		newstr = orig;
++
++	/* 
++	 * If we've got GSSAPI mechanisms, then we've got the 'null' host
++	 * key alg, but we can't tell people about it unless its the only
++  	 * host key algorithm we support
++	 */
++	if (gss && (strlen(myproposal[PROPOSAL_SERVER_HOST_KEY_ALGS])) == 0)
++		myproposal[PROPOSAL_SERVER_HOST_KEY_ALGS] = "null";
++
++	if (newstr)
++		myproposal[PROPOSAL_KEX_ALGS] = newstr;
++	else
++		fatal("No supported key exchange algorithms");
++	}
++#endif
++
+ 	/* start key exchange */
+ 	if ((r = kex_setup(active_state, myproposal)) != 0)
+ 		fatal("kex_setup: %s", ssh_err(r));
+@@ -2196,6 +2299,13 @@ do_ssh2_kex(void)
+ # endif
+ #endif
+ 	kex->kex[KEX_C25519_SHA256] = kexc25519_server;
++#ifdef GSSAPI
++	if (options.gss_keyex) {
++		kex->kex[KEX_GSS_GRP1_SHA1] = kexgss_server;
++		kex->kex[KEX_GSS_GRP14_SHA1] = kexgss_server;
++		kex->kex[KEX_GSS_GEX_SHA1] = kexgss_server;
++	}
++#endif
+ 	kex->server = 1;
+ 	kex->client_version_string=client_version_string;
+ 	kex->server_version_string=server_version_string;
+diff --git a/sshd_config b/sshd_config
+index 9f09e4a6..00e5a728 100644
+--- a/sshd_config
++++ b/sshd_config
+@@ -70,6 +70,8 @@ AuthorizedKeysFile	.ssh/authorized_keys
+ # GSSAPI options
+ #GSSAPIAuthentication no
+ #GSSAPICleanupCredentials yes
++#GSSAPIStrictAcceptorCheck yes
++#GSSAPIKeyExchange no
+ 
+ # Set this to 'yes' to enable PAM authentication, account processing,
+ # and session processing. If this is enabled, PAM authentication will
+diff --git a/sshd_config.4 b/sshd_config.4
+index 45c54629..de03ac5e 100644
+--- a/sshd_config.4
++++ b/sshd_config.4
+@@ -623,6 +623,11 @@ The default is
+ Specifies whether user authentication based on GSSAPI is allowed.
+ The default on Solaris is
+ .Cm yes .
++.It Cm GSSAPIKeyExchange
++Specifies whether key exchange based on GSSAPI is allowed. GSSAPI key exchange
++doesn't rely on ssh keys to verify host identity.
++The default is
++.Cm no .
+ .It Cm GSSAPICleanupCredentials
+ Specifies whether to automatically destroy the user's credentials cache
+ on logout.
+@@ -642,6 +647,11 @@ machine's default store.
+ This facility is provided to assist with operation on multi homed machines.
+ The default is
+ .Cm yes .
++.It Cm GSSAPIStoreCredentialsOnRekey
++Controls whether the user's GSSAPI credentials should be updated following a
++successful connection rekeying. This option can be used to accepted renewed
++or updated credentials from a compatible client. The default is
++.Cm no .
+ .It Cm HostbasedAcceptedKeyTypes
+ Specifies the key types that will be accepted for hostbased authentication
+ as a comma-separated pattern list.
+diff --git a/sshkey.c b/sshkey.c
+index c01da6c3..377d72fa 100644
+--- a/sshkey.c
++++ b/sshkey.c
+@@ -114,6 +114,7 @@ static const struct keytype keytypes[] = {
+ #  endif /* OPENSSL_HAS_NISTP521 */
+ # endif /* OPENSSL_HAS_ECC */
+ #endif /* WITH_OPENSSL */
++	{ "null", "null", KEY_NULL, 0, 0, 0 },
+ 	{ NULL, NULL, -1, -1, 0, 0 }
+ };
+ 
+@@ -202,7 +203,7 @@ sshkey_alg_list(int certs_only, int plain_only, char sep)
+ 	const struct keytype *kt;
+ 
+ 	for (kt = keytypes; kt->type != -1; kt++) {
+-		if (kt->name == NULL || kt->sigonly)
++		if (kt->name == NULL || kt->sigonly || kt->type == KEY_NULL)
+ 			continue;
+ 		if ((certs_only && !kt->cert) || (plain_only && kt->cert))
+ 			continue;
+diff --git a/sshkey.h b/sshkey.h
+index f3936384..7eb2a139 100644
+--- a/sshkey.h
++++ b/sshkey.h
+@@ -62,6 +62,7 @@ enum sshkey_types {
+ 	KEY_DSA_CERT,
+ 	KEY_ECDSA_CERT,
+ 	KEY_ED25519_CERT,
++	KEY_NULL,
+ 	KEY_UNSPEC
+ };
+ 
+-- 
+2.11.0
+
diff --git a/openssh/Patches/0016-Enable-login-to-a-role-if-PAM-is-ok-with-it.patch b/openssh/Patches/0015-Enable-login-to-a-role-if-PAM-is-ok-with-it.patch
similarity index 78%
rename from openssh/Patches/0016-Enable-login-to-a-role-if-PAM-is-ok-with-it.patch
rename to openssh/Patches/0015-Enable-login-to-a-role-if-PAM-is-ok-with-it.patch
index f6645ce..be87c09 100644
--- a/openssh/Patches/0016-Enable-login-to-a-role-if-PAM-is-ok-with-it.patch
+++ b/openssh/Patches/0015-Enable-login-to-a-role-if-PAM-is-ok-with-it.patch
@@ -1,22 +1,22 @@
-From d9c44a1bca6f053bebcdf9eb185fbe09fd11f19e Mon Sep 17 00:00:00 2001
+From 821f18783268014b0d8f8a469198568d5f56bb44 Mon Sep 17 00:00:00 2001
 From: oracle <solaris@oracle.com>
 Date: Mon, 3 Aug 2015 14:38:19 -0700
-Subject: [PATCH 16/34] Enable login to a role if PAM is ok with it
+Subject: [PATCH 15/34] Enable login to a role if PAM is ok with it
 
 ---
  auth-pam.c        | 14 ++++++++++++++
- auth-pam.h        |  3 +++
+ auth-pam.h        |  4 ++++
  auth.h            |  3 +++
  auth2-hostbased.c | 10 ++++++++++
  auth2.c           |  8 ++++++++
  monitor.c         | 15 ++++++++++++++-
- 6 files changed, 52 insertions(+), 1 deletion(-)
+ 6 files changed, 53 insertions(+), 1 deletion(-)
 
 diff --git a/auth-pam.c b/auth-pam.c
-index 4ca0a58..d049779 100644
+index 70a25c19..46bf722e 100644
 --- a/auth-pam.c
 +++ b/auth-pam.c
-@@ -1039,6 +1039,20 @@ do_pam_account(void)
+@@ -1069,6 +1069,20 @@ do_pam_account(void)
  	return (sshpam_account_status);
  }
  
@@ -35,38 +35,39 @@ index 4ca0a58..d049779 100644
 +#endif
 +
  void
- do_pam_set_tty(const char *tty)
+ do_pam_setcred(int init)
  {
 diff --git a/auth-pam.h b/auth-pam.h
-index a1a2b52..6c41fd9 100644
+index c47b442e..892a27bc 100644
 --- a/auth-pam.h
 +++ b/auth-pam.h
-@@ -35,6 +35,9 @@ void start_pam(Authctxt *);
+@@ -29,6 +29,10 @@ void start_pam(Authctxt *);
  void finish_pam(void);
  u_int do_pam_account(void);
  void do_pam_session(void);
 +#ifdef HAVE_PAM_AUSER
 +void do_pam_set_auser(const char *);
 +#endif
- void do_pam_set_tty(const char *);
++void do_pam_set_tty(const char *);
  void do_pam_setcred(int );
  void do_pam_chauthtok(void);
+ int do_pam_putenv(char *, char *);
 diff --git a/auth.h b/auth.h
-index 985053c..6883f16 100644
+index 4a7f2c1f..b4efc255 100644
 --- a/auth.h
 +++ b/auth.h
 @@ -84,6 +84,9 @@ struct Authctxt {
  #ifdef PAM_ENHANCEMENT
-         char            *authmethod_name;
- #endif 
+ 	char		*authmethod_name;
+ #endif
 +#ifdef HAVE_PAM_AUSER
 +	char		*auser;
-+#endif 
++#endif
  };
  /*
   * Every authentication method has to handle authentication requests for
 diff --git a/auth2-hostbased.c b/auth2-hostbased.c
-index e2327cf..c0fcc4d 100644
+index 1b3c3b20..2c51bd2b 100644
 --- a/auth2-hostbased.c
 +++ b/auth2-hostbased.c
 @@ -85,6 +85,9 @@ userauth_hostbased(Authctxt *authctxt)
@@ -94,7 +95,7 @@ index e2327cf..c0fcc4d 100644
  done:
  	debug2("userauth_hostbased: authenticated %d", authenticated);
 diff --git a/auth2.c b/auth2.c
-index 5a3ef1b..b456237 100644
+index 6a9f936b..e68aa6d3 100644
 --- a/auth2.c
 +++ b/auth2.c
 @@ -339,6 +339,14 @@ userauth_finish(Authctxt *authctxt, int authenticated, const char *method,
@@ -113,10 +114,10 @@ index 5a3ef1b..b456237 100644
  
  #if defined(USE_PAM) && defined(PAM_ENHANCEMENT)
 diff --git a/monitor.c b/monitor.c
-index dc3e7bf..ef6b45b 100644
+index b0c9b4f4..d2ad5425 100644
 --- a/monitor.c
 +++ b/monitor.c
-@@ -460,6 +460,12 @@ monitor_child_preauth(Authctxt *_authctxt, struct monitor *pmonitor)
+@@ -404,6 +404,12 @@ monitor_child_preauth(Authctxt *_authctxt, struct monitor *pmonitor)
  		}
  	}
  
@@ -129,7 +130,7 @@ index dc3e7bf..ef6b45b 100644
  	if (!authctxt->valid)
  		fatal("%s: authenticated invalid user", __func__);
  	if (strcmp(auth_method, "unknown") == 0)
-@@ -688,12 +694,14 @@ monitor_reset_key_state(void)
+@@ -603,12 +609,14 @@ monitor_reset_key_state(void)
  {
  	/* reset state */
  	free(key_blob);
@@ -145,9 +146,9 @@ index dc3e7bf..ef6b45b 100644
  	hostbased_chost = NULL;
  }
  
-@@ -1143,6 +1151,11 @@ mm_answer_pam_account(int sock, Buffer *m)
+@@ -1066,6 +1074,11 @@ mm_answer_pam_account(int sock, Buffer *m)
  	if (!options.use_pam)
- 		fatal("UsePAM not set, but ended up in %s anyway", __func__);
+ 		fatal("%s: PAM not enabled", __func__);
  
 +#ifdef HAVE_PAM_AUSER
 +	if (hostbased_cuser != NULL)
@@ -158,5 +159,5 @@ index dc3e7bf..ef6b45b 100644
  
  	buffer_put_int(m, ret);
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/0015-GSS-API-key-exchange-support.patch b/openssh/Patches/0015-GSS-API-key-exchange-support.patch
deleted file mode 100644
index 43c57cf..0000000
--- a/openssh/Patches/0015-GSS-API-key-exchange-support.patch
+++ /dev/null
@@ -1,1939 +0,0 @@
-From 68617650ba57f98538090afdf6cbc2dab409af0f Mon Sep 17 00:00:00 2001
-From: oracle <solaris@oracle.com>
-Date: Mon, 3 Aug 2015 14:37:24 -0700
-Subject: [PATCH 15/34] GSS-API key exchange support
-
----
- Makefile.in    |   3 +-
- auth2-gss.c    |  41 ++++++-
- auth2.c        |   2 +
- gss-genr.c     | 179 ++++++++++++++++++++++++++++-
- gss-serv.c     |  39 +++++--
- kex.c          |  11 +-
- kex.h          |  11 ++
- kexgssc.c      | 347 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
- kexgsss.c      | 296 ++++++++++++++++++++++++++++++++++++++++++++++++
- monitor.c      |  77 +++++++++++++
- monitor.h      |   3 +
- monitor_wrap.c |  23 ++++
- monitor_wrap.h |   1 +
- readconf.c     |  14 +++
- readconf.h     |   1 +
- servconf.c     |  15 +++
- servconf.h     |   1 +
- ssh-gss.h      |  19 ++++
- ssh_config     |   1 +
- ssh_config.4   |   5 +
- sshconnect2.c  | 104 ++++++++++++++++-
- sshd.c         |  52 +++++++++
- sshd_config    |   3 +-
- sshd_config.4  |   5 +
- sshkey.c       |   1 +
- sshkey.h       |   3 +
- 26 files changed, 1236 insertions(+), 21 deletions(-)
- create mode 100644 kexgssc.c
- create mode 100644 kexgsss.c
-
-diff --git a/Makefile.in b/Makefile.in
-index abc9285..3e11b3f 100644
---- a/Makefile.in
-+++ b/Makefile.in
-@@ -87,6 +87,7 @@ LIBSSH_OBJS=${LIBOPENSSH_OBJS} \
- 	monitor_fdpass.o rijndael.o ssh-dss.o ssh-ecdsa.o ssh-rsa.o dh.o \
- 	msg.o progressmeter.o dns.o entropy.o gss-genr.o umac.o umac128.o \
- 	sftp_provider.o \
-+	kexgssc.o \
- 	ssh-pkcs11.o smult_curve25519_ref.o \
- 	poly1305.o chacha.o cipher-chachapoly.o \
- 	ssh-ed25519.o digest-openssl.o digest-libc.o hmac.o \
-@@ -107,7 +108,7 @@ SSHDOBJS=sshd.o auth-rhosts.o auth-passwd.o auth-rsa.o auth-rh-rsa.o \
- 	auth-skey.o auth-bsdauth.o auth2-hostbased.o auth2-kbdint.o \
- 	auth2-none.o auth2-passwd.o auth2-pubkey.o \
- 	monitor_mm.o monitor.o monitor_wrap.o auth-krb5.o \
--	auth2-gss.o gss-serv.o gss-serv-krb5.o \
-+	auth2-gss.o gss-serv.o gss-serv-krb5.o kexgsss.o \
- 	loginrec.o auth-pam.o auth-shadow.o auth-sia.o md5crypt.o \
- 	sftp-server.o sftp-common.o \
- 	sandbox-null.o sandbox-rlimit.o sandbox-systrace.o sandbox-darwin.o \
-diff --git a/auth2-gss.c b/auth2-gss.c
-index 1ca8357..24999c8 100644
---- a/auth2-gss.c
-+++ b/auth2-gss.c
-@@ -1,7 +1,7 @@
- /* $OpenBSD: auth2-gss.c,v 1.22 2015/01/19 20:07:45 markus Exp $ */
- 
- /*
-- * Copyright (c) 2001-2003 Simon Wilkinson. All rights reserved.
-+ * Copyright (c) 2001-2007 Simon Wilkinson. All rights reserved.
-  *
-  * Redistribution and use in source and binary forms, with or without
-  * modification, are permitted provided that the following conditions
-@@ -53,6 +53,39 @@ static int input_gssapi_mic(int type, u_int32_t plen, void *ctxt);
- static int input_gssapi_exchange_complete(int type, u_int32_t plen, void *ctxt);
- static int input_gssapi_errtok(int, u_int32_t, void *);
- 
-+/* 
-+ * The 'gssapi_keyex' userauth mechanism.
-+ */
-+static int
-+userauth_gsskeyex(Authctxt *authctxt)
-+{
-+	int authenticated = 0;
-+	Buffer b;
-+	gss_buffer_desc mic, gssbuf;
-+	u_int len;
-+
-+	mic.value = packet_get_string(&len);
-+	mic.length = len;
-+
-+	packet_check_eom();
-+
-+	ssh_gssapi_buildmic(&b, authctxt->user, authctxt->service,
-+	    "gssapi-keyex");
-+
-+	gssbuf.value = buffer_ptr(&b);
-+	gssbuf.length = buffer_len(&b);
-+
-+	/* gss_kex_context is NULL with privsep, so we can't check it here */
-+	if (!GSS_ERROR(PRIVSEP(ssh_gssapi_checkmic(gss_kex_context, 
-+	    &gssbuf, &mic))))
-+		authenticated = PRIVSEP(ssh_gssapi_userok(authctxt->user));
-+	
-+	buffer_free(&b);
-+	free(mic.value);
-+
-+	return (authenticated);
-+}
-+
- /*
-  * We only support those mechanisms that we know about (ie ones that we know
-  * how to check local user kuserok and the like)
-@@ -290,6 +323,12 @@ input_gssapi_mic(int type, u_int32_t plen, void *ctxt)
- 	return 0;
- }
- 
-+Authmethod method_gsskeyex = {
-+	"gssapi-keyex",
-+	userauth_gsskeyex,
-+	&options.gss_authentication
-+};
-+
- Authmethod method_gssapi = {
- 	"gssapi-with-mic",
- 	userauth_gssapi,
-diff --git a/auth2.c b/auth2.c
-index 32ba663..5a3ef1b 100644
---- a/auth2.c
-+++ b/auth2.c
-@@ -70,6 +70,7 @@ extern Authmethod method_passwd;
- extern Authmethod method_kbdint;
- extern Authmethod method_hostbased;
- #ifdef GSSAPI
-+extern Authmethod method_gsskeyex;
- extern Authmethod method_gssapi;
- #endif
- 
-@@ -77,6 +78,7 @@ Authmethod *authmethods[] = {
- 	&method_none,
- 	&method_pubkey,
- #ifdef GSSAPI
-+	&method_gsskeyex,
- 	&method_gssapi,
- #endif
- 	&method_passwd,
-diff --git a/gss-genr.c b/gss-genr.c
-index d617d60..9dcf51c 100644
---- a/gss-genr.c
-+++ b/gss-genr.c
-@@ -1,7 +1,7 @@
- /* $OpenBSD: gss-genr.c,v 1.23 2015/01/20 23:14:00 deraadt Exp $ */
- 
- /*
-- * Copyright (c) 2001-2007 Simon Wilkinson. All rights reserved.
-+ * Copyright (c) 2001-2009 Simon Wilkinson. All rights reserved.
-  *
-  * Redistribution and use in source and binary forms, with or without
-  * modification, are permitted provided that the following conditions
-@@ -41,12 +41,167 @@
- #include "buffer.h"
- #include "log.h"
- #include "ssh2.h"
-+#include "cipher.h"
-+#include "key.h"
-+#include "kex.h"
-+#include <openssl/evp.h>
- 
- #include "ssh-gss.h"
- 
- extern u_char *session_id2;
- extern u_int session_id2_len;
- 
-+typedef struct {
-+	char *encoded;
-+	gss_OID oid;
-+} ssh_gss_kex_mapping;
-+
-+/*
-+ * XXX - It would be nice to find a more elegant way of handling the
-+ * XXX   passing of the key exchange context to the userauth routines
-+ */
-+
-+Gssctxt *gss_kex_context = NULL;
-+
-+static ssh_gss_kex_mapping *gss_enc2oid = NULL;
-+
-+int 
-+ssh_gssapi_oid_table_ok() {
-+	return (gss_enc2oid != NULL);
-+}
-+
-+/*
-+ * Return a list of the gss-group1-sha1 mechanisms supported by this program
-+ *
-+ * We test mechanisms to ensure that we can use them, to avoid starting
-+ * a key exchange with a bad mechanism
-+ */
-+
-+char *
-+ssh_gssapi_client_mechanisms(const char *host) {
-+	gss_OID_set gss_supported;
-+	OM_uint32 min_status;
-+
-+	if (GSS_ERROR(gss_indicate_mechs(&min_status, &gss_supported)))
-+		return NULL;
-+
-+	return(ssh_gssapi_kex_mechs(gss_supported, ssh_gssapi_check_mechanism,
-+	    host));
-+}
-+
-+char *
-+ssh_gssapi_kex_mechs(gss_OID_set gss_supported, ssh_gssapi_check_fn *check,
-+    const char *data) {
-+	Buffer buf;
-+	size_t i;
-+	int oidpos, enclen;
-+	char *mechs, *encoded;
-+	u_char digest[EVP_MAX_MD_SIZE];
-+	char deroid[2];
-+	const EVP_MD *evp_md = EVP_md5();
-+	EVP_MD_CTX md;
-+
-+	if (gss_enc2oid != NULL) {
-+		for (i = 0; gss_enc2oid[i].encoded != NULL; i++)
-+			free(gss_enc2oid[i].encoded);
-+		free(gss_enc2oid);
-+	}
-+
-+	gss_enc2oid = xmalloc(sizeof(ssh_gss_kex_mapping) *
-+	    (gss_supported->count + 1));
-+
-+	buffer_init(&buf);
-+
-+	oidpos = 0;
-+	for (i = 0; i < gss_supported->count; i++) {
-+		if (gss_supported->elements[i].length < 128 &&
-+		    (*check)(NULL, &(gss_supported->elements[i]), data)) {
-+
-+			deroid[0] = SSH_GSS_OIDTYPE;
-+			deroid[1] = gss_supported->elements[i].length;
-+
-+			EVP_DigestInit(&md, evp_md);
-+			EVP_DigestUpdate(&md, deroid, 2);
-+			EVP_DigestUpdate(&md,
-+			    gss_supported->elements[i].elements,
-+			    gss_supported->elements[i].length);
-+			EVP_DigestFinal(&md, digest, NULL);
-+
-+			encoded = xmalloc(EVP_MD_size(evp_md) * 2);
-+			enclen = __b64_ntop(digest, EVP_MD_size(evp_md),
-+			    encoded, EVP_MD_size(evp_md) * 2);
-+
-+			if (oidpos != 0)
-+				buffer_put_char(&buf, ',');
-+
-+			buffer_append(&buf, KEX_GSS_GEX_SHA1_ID,
-+			    sizeof(KEX_GSS_GEX_SHA1_ID) - 1);
-+			buffer_append(&buf, encoded, enclen);
-+			buffer_put_char(&buf, ',');
-+			buffer_append(&buf, KEX_GSS_GRP1_SHA1_ID, 
-+			    sizeof(KEX_GSS_GRP1_SHA1_ID) - 1);
-+			buffer_append(&buf, encoded, enclen);
-+			buffer_put_char(&buf, ',');
-+			buffer_append(&buf, KEX_GSS_GRP14_SHA1_ID,
-+			    sizeof(KEX_GSS_GRP14_SHA1_ID) - 1);
-+			buffer_append(&buf, encoded, enclen);
-+
-+			gss_enc2oid[oidpos].oid = &(gss_supported->elements[i]);
-+			gss_enc2oid[oidpos].encoded = encoded;
-+			oidpos++;
-+		}
-+	}
-+	gss_enc2oid[oidpos].oid = NULL;
-+	gss_enc2oid[oidpos].encoded = NULL;
-+
-+	buffer_put_char(&buf, '\0');
-+
-+	mechs = xmalloc(buffer_len(&buf));
-+	buffer_get(&buf, mechs, buffer_len(&buf));
-+	buffer_free(&buf);
-+
-+	if (strlen(mechs) == 0) {
-+		free(mechs);
-+		mechs = NULL;
-+	}
-+	
-+	return (mechs);
-+}
-+
-+gss_OID
-+ssh_gssapi_id_kex(Gssctxt *ctx, char *name, int kex_type) {
-+	int i = 0;
-+	
-+	switch (kex_type) {
-+	case KEX_GSS_GRP1_SHA1:
-+		if (strlen(name) < sizeof(KEX_GSS_GRP1_SHA1_ID))
-+			return GSS_C_NO_OID;
-+		name += sizeof(KEX_GSS_GRP1_SHA1_ID) - 1;
-+		break;
-+	case KEX_GSS_GRP14_SHA1:
-+		if (strlen(name) < sizeof(KEX_GSS_GRP14_SHA1_ID))
-+			return GSS_C_NO_OID;
-+		name += sizeof(KEX_GSS_GRP14_SHA1_ID) - 1;
-+		break;
-+	case KEX_GSS_GEX_SHA1:
-+		if (strlen(name) < sizeof(KEX_GSS_GEX_SHA1_ID))
-+			return GSS_C_NO_OID;
-+		name += sizeof(KEX_GSS_GEX_SHA1_ID) - 1;
-+		break;
-+	default:
-+		return GSS_C_NO_OID;
-+	}
-+
-+	while (gss_enc2oid[i].encoded != NULL &&
-+	    strcmp(name, gss_enc2oid[i].encoded) != 0)
-+		i++;
-+
-+	if (gss_enc2oid[i].oid != NULL && ctx != NULL)
-+		ssh_gssapi_set_oid(ctx, gss_enc2oid[i].oid);
-+
-+	return gss_enc2oid[i].oid;
-+}
-+
- /* Check that the OID in a data stream matches that in the context */
- int
- ssh_gssapi_check_oid(Gssctxt *ctx, void *data, size_t len)
-@@ -231,6 +386,9 @@ ssh_gssapi_import_name(Gssctxt *ctx, const char *host)
- OM_uint32
- ssh_gssapi_sign(Gssctxt *ctx, gss_buffer_t buffer, gss_buffer_t hash)
- {
-+	if (ctx == NULL) 
-+		return -1;
-+
- 	if ((ctx->major = gss_get_mic(&ctx->minor, ctx->context,
- 	    GSS_C_QOP_DEFAULT, buffer, hash)))
- 		ssh_gssapi_error(ctx);
-@@ -238,6 +396,19 @@ ssh_gssapi_sign(Gssctxt *ctx, gss_buffer_t buffer, gss_buffer_t hash)
- 	return (ctx->major);
- }
- 
-+/* Priviledged when used by server */
-+OM_uint32
-+ssh_gssapi_checkmic(Gssctxt *ctx, gss_buffer_t gssbuf, gss_buffer_t gssmic)
-+{
-+	if (ctx == NULL)
-+		return -1;
-+
-+	ctx->major = gss_verify_mic(&ctx->minor, ctx->context,
-+	    gssbuf, gssmic, NULL);
-+
-+	return (ctx->major);
-+}
-+
- void
- ssh_gssapi_buildmic(Buffer *b, const char *user, const char *service,
-     const char *context)
-@@ -256,6 +427,10 @@ ssh_gssapi_check_mechanism(Gssctxt **ctx, gss_OID oid, const char *host)
- 	gss_buffer_desc token = GSS_C_EMPTY_BUFFER;
- 	OM_uint32 major, minor;
- 	gss_OID_desc spnego_oid = {6, (void *)"\x2B\x06\x01\x05\x05\x02"};
-+	Gssctxt *intctx = NULL;
-+
-+	if (ctx == NULL)
-+		ctx = &intctx;
- 
- 	/* RFC 4462 says we MUST NOT do SPNEGO */
- 	if (oid->length == spnego_oid.length && 
-@@ -274,7 +449,7 @@ ssh_gssapi_check_mechanism(Gssctxt **ctx, gss_OID oid, const char *host)
- 			    GSS_C_NO_BUFFER);
- 	}
- 
--	if (GSS_ERROR(major)) 
-+	if (GSS_ERROR(major) || intctx != NULL) 
- 		ssh_gssapi_delete_ctx(ctx);
- 
- 	return (!GSS_ERROR(major));
-diff --git a/gss-serv.c b/gss-serv.c
-index 209ffe8..a45d8fd 100644
---- a/gss-serv.c
-+++ b/gss-serv.c
-@@ -1,7 +1,7 @@
- /* $OpenBSD: gss-serv.c,v 1.29 2015/05/22 03:50:02 djm Exp $ */
- 
- /*
-- * Copyright (c) 2001-2003 Simon Wilkinson. All rights reserved.
-+ * Copyright (c) 2001-2009 Simon Wilkinson. All rights reserved.
-  *
-  * Redistribution and use in source and binary forms, with or without
-  * modification, are permitted provided that the following conditions
-@@ -47,6 +47,7 @@
- #include "servconf.h"
- 
- #include "ssh-gss.h"
-+#include "monitor_wrap.h"
- 
- extern ServerOptions options;
- 
-@@ -142,6 +143,28 @@ ssh_gssapi_server_ctx(Gssctxt **ctx, gss_OID oid)
- }
- 
- /* Unprivileged */
-+char *
-+ssh_gssapi_server_mechanisms() {
-+	gss_OID_set	supported;
-+
-+	ssh_gssapi_supported_oids(&supported);
-+	return (ssh_gssapi_kex_mechs(supported, &ssh_gssapi_server_check_mech,
-+	    NULL));
-+}
-+
-+/* Unprivileged */
-+int
-+ssh_gssapi_server_check_mech(Gssctxt **dum, gss_OID oid, const char *data) {
-+	Gssctxt *ctx = NULL;
-+	int res;
-+ 
-+	res = !GSS_ERROR(PRIVSEP(ssh_gssapi_server_ctx(&ctx, oid)));
-+	ssh_gssapi_delete_ctx(&ctx);
-+
-+	return (res);
-+}
-+
-+/* Unprivileged */
- void
- ssh_gssapi_supported_oids(gss_OID_set *oidset)
- {
-@@ -151,7 +174,9 @@ ssh_gssapi_supported_oids(gss_OID_set *oidset)
- 	gss_OID_set supported;
- 
- 	gss_create_empty_oid_set(&min_status, oidset);
--	gss_indicate_mechs(&min_status, &supported);
-+
-+	if (GSS_ERROR(gss_indicate_mechs(&min_status, &supported)))
-+		return;
- 
- 	while (supported_mechs[i]->name != NULL) {
- 		if (GSS_ERROR(gss_test_oid_set_member(&min_status,
-@@ -427,14 +452,4 @@ ssh_gssapi_userok(char *user)
- 	return (0);
- }
- 
--/* Privileged */
--OM_uint32
--ssh_gssapi_checkmic(Gssctxt *ctx, gss_buffer_t gssbuf, gss_buffer_t gssmic)
--{
--	ctx->major = gss_verify_mic(&ctx->minor, ctx->context,
--	    gssbuf, gssmic, NULL);
--
--	return (ctx->major);
--}
--
- #endif
-diff --git a/kex.c b/kex.c
-index d371f47..25bc129 100644
---- a/kex.c
-+++ b/kex.c
-@@ -54,6 +54,10 @@
- #include "sshbuf.h"
- #include "digest.h"
- 
-+#ifdef GSSAPI
-+#include "ssh-gss.h"
-+#endif
-+
- #if OPENSSL_VERSION_NUMBER >= 0x00907000L
- # if defined(HAVE_EVP_SHA256)
- # define evp_ssh_sha256 EVP_sha256
-@@ -107,6 +111,11 @@ static const struct kexalg kexalgs[] = {
- #if defined(HAVE_EVP_SHA256) || !defined(WITH_OPENSSL)
- 	{ KEX_CURVE25519_SHA256, KEX_C25519_SHA256, 0, SSH_DIGEST_SHA256 },
- #endif /* HAVE_EVP_SHA256 || !WITH_OPENSSL */
-+#ifdef GSSAPI
-+	{ KEX_GSS_GEX_SHA1_ID, KEX_GSS_GEX_SHA1, 0, SSH_DIGEST_SHA1 },
-+	{ KEX_GSS_GRP1_SHA1_ID, KEX_GSS_GRP1_SHA1, 0, SSH_DIGEST_SHA1 },
-+	{ KEX_GSS_GRP14_SHA1_ID, KEX_GSS_GRP14_SHA1, 0, SSH_DIGEST_SHA1 },
-+#endif
- 	{ NULL, -1, -1, -1},
- };
- 
-@@ -138,7 +147,7 @@ kex_alg_by_name(const char *name)
- 	const struct kexalg *k;
- 
- 	for (k = kexalgs; k->name != NULL; k++) {
--		if (strcmp(k->name, name) == 0)
-+		if (strncmp(k->name, name, strlen(k->name)) == 0)
- 			return k;
- 	}
- 	return NULL;
-diff --git a/kex.h b/kex.h
-index 1c58966..9438305 100644
---- a/kex.h
-+++ b/kex.h
-@@ -92,6 +92,9 @@ enum kex_exchange {
- 	KEX_DH_GEX_SHA256,
- 	KEX_ECDH_SHA2,
- 	KEX_C25519_SHA256,
-+	KEX_GSS_GRP1_SHA1,
-+	KEX_GSS_GRP14_SHA1,
-+	KEX_GSS_GEX_SHA1,
- 	KEX_MAX
- };
- 
-@@ -140,6 +143,10 @@ struct kex {
- 	u_int	flags;
- 	int	hash_alg;
- 	int	ec_nid;
-+#ifdef GSSAPI
-+	int	gss_deleg_creds;
-+	char    *gss_host;
-+#endif
- 	char	*client_version_string;
- 	char	*server_version_string;
- 	char	*failed_choice;
-@@ -189,6 +196,10 @@ int	 kexecdh_client(struct ssh *);
- int	 kexecdh_server(struct ssh *);
- int	 kexc25519_client(struct ssh *);
- int	 kexc25519_server(struct ssh *);
-+#ifdef GSSAPI
-+int	 kexgss_client(struct ssh *);
-+int	 kexgss_server(struct ssh *);
-+#endif
- 
- int	 kex_dh_hash(const char *, const char *,
-     const u_char *, size_t, const u_char *, size_t, const u_char *, size_t,
-diff --git a/kexgssc.c b/kexgssc.c
-new file mode 100644
-index 0000000..c36d36b
---- /dev/null
-+++ b/kexgssc.c
-@@ -0,0 +1,347 @@
-+/*
-+ * Copyright (c) 2001-2009 Simon Wilkinson. All rights reserved.
-+ *
-+ * Redistribution and use in source and binary forms, with or without
-+ * modification, are permitted provided that the following conditions
-+ * are met:
-+ * 1. Redistributions of source code must retain the above copyright
-+ *    notice, this list of conditions and the following disclaimer.
-+ * 2. Redistributions in binary form must reproduce the above copyright
-+ *    notice, this list of conditions and the following disclaimer in the
-+ *    documentation and/or other materials provided with the distribution.
-+ *
-+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR
-+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
-+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
-+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
-+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
-+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
-+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-+ */
-+
-+/*
-+ * May 22, 2015
-+ * In version 6.8 a new packet interface has been introduced to OpenSSH,
-+ * while the old packet API has been provided in opacket.c.
-+ * At this moment we are not rewritting GSS-API key exchange code to the new
-+ * API, just adjusting it to still work with new struct ssh.
-+ * Rewritting to the new API can be considered in the future.
-+ */
-+
-+#include "includes.h"
-+
-+#ifdef GSSAPI
-+
-+#include "includes.h"
-+
-+#include <openssl/crypto.h>
-+#include <openssl/bn.h>
-+
-+#include <signal.h>	/* for sig_atomic_t in kex.h */
-+#include <string.h>
-+
-+#include "xmalloc.h"
-+#include "buffer.h"
-+#include "ssh2.h"
-+#include "key.h"
-+#include "cipher.h"
-+#include "digest.h"
-+#include "kex.h"
-+#include "log.h"
-+#include "packet.h"
-+#include "dh.h"
-+
-+#include "ssh-gss.h"
-+
-+int
-+kexgss_client(struct ssh *ssh) {
-+	gss_buffer_desc send_tok = GSS_C_EMPTY_BUFFER;
-+	gss_buffer_desc recv_tok, gssbuf, msg_tok, *token_ptr;
-+	Gssctxt *ctxt;
-+	OM_uint32 maj_status, min_status, ret_flags;
-+	uint_t klen, kout, slen = 0, strlen;
-+	DH *dh;
-+	BIGNUM *dh_server_pub = NULL;
-+	BIGNUM *shared_secret = NULL;
-+	BIGNUM *p = NULL;
-+	BIGNUM *g = NULL;
-+	uchar_t *kbuf;
-+	uchar_t *serverhostkey = NULL;
-+	uchar_t *empty = "";
-+	char *msg;
-+	char *lang;
-+	int type = 0;
-+	int first = 1;
-+	int nbits = 0, min = DH_GRP_MIN, max = DH_GRP_MAX;
-+	struct kex *kex = ssh->kex;
-+	int r;
-+	uchar_t hash[SSH_DIGEST_MAX_LENGTH];
-+	size_t hashlen;
-+
-+	/* Initialise our GSSAPI world */
-+	ssh_gssapi_build_ctx(&ctxt);
-+	if (ssh_gssapi_id_kex(ctxt, kex->name, kex->kex_type)
-+	    == GSS_C_NO_OID)
-+		fatal("Couldn't identify host exchange");
-+
-+	if (ssh_gssapi_import_name(ctxt, kex->gss_host))
-+		fatal("Couldn't import hostname");
-+
-+	switch (kex->kex_type) {
-+	case KEX_GSS_GRP1_SHA1:
-+		kex->dh = dh_new_group1();
-+		break;
-+	case KEX_GSS_GRP14_SHA1:
-+		kex->dh = dh_new_group14();
-+		break;
-+	case KEX_GSS_GEX_SHA1:
-+		debug("Doing group exchange\n");
-+		nbits = dh_estimate(kex->we_need * 8);
-+		packet_start(SSH2_MSG_KEXGSS_GROUPREQ);
-+		packet_put_int(min);
-+		packet_put_int(nbits);
-+		packet_put_int(max);
-+
-+		packet_send();
-+
-+		packet_read_expect(SSH2_MSG_KEXGSS_GROUP);
-+
-+		if ((p = BN_new()) == NULL)
-+			fatal("BN_new() failed");
-+		packet_get_bignum2(p);
-+		if ((g = BN_new()) == NULL)
-+			fatal("BN_new() failed");
-+		packet_get_bignum2(g);
-+		packet_check_eom();
-+
-+		if (BN_num_bits(p) < min || BN_num_bits(p) > max)
-+			fatal("GSSGRP_GEX group out of range: %d !< %d !< %d",
-+			    min, BN_num_bits(p), max);
-+
-+		kex->dh = dh_new_group(g, p);
-+		break;
-+	default:
-+		fatal("%s: Unexpected KEX type %d", __func__, kex->kex_type);
-+	}
-+
-+	/* Step 1 - e is dh->pub_key */
-+	dh_gen_key(kex->dh, kex->we_need * 8);
-+
-+	/* This is f, we initialise it now to make life easier */
-+	dh_server_pub = BN_new();
-+	if (dh_server_pub == NULL)
-+		fatal("dh_server_pub == NULL");
-+
-+	token_ptr = GSS_C_NO_BUFFER;
-+
-+	do {
-+		debug("Calling gss_init_sec_context");
-+
-+		maj_status = ssh_gssapi_init_ctx(ctxt,
-+		    kex->gss_deleg_creds, token_ptr, &send_tok,
-+		    &ret_flags);
-+
-+		if (GSS_ERROR(maj_status)) {
-+			if (send_tok.length != 0) {
-+				packet_start(SSH2_MSG_KEXGSS_CONTINUE);
-+				packet_put_string(send_tok.value,
-+				    send_tok.length);
-+			}
-+			fatal("gss_init_context failed");
-+		}
-+
-+		/* If we've got an old receive buffer get rid of it */
-+		if (token_ptr != GSS_C_NO_BUFFER)
-+			free(recv_tok.value);
-+
-+		if (maj_status == GSS_S_COMPLETE) {
-+			/* If mutual state flag is not true, kex fails */
-+			if (!(ret_flags & GSS_C_MUTUAL_FLAG))
-+				fatal("Mutual authentication failed");
-+
-+			/* If integ avail flag is not true kex fails */
-+			if (!(ret_flags & GSS_C_INTEG_FLAG))
-+				fatal("Integrity check failed");
-+		}
-+
-+		/*
-+		 * If we have data to send, then the last message that we
-+		 * received cannot have been a 'complete'.
-+		 */
-+		if (send_tok.length != 0) {
-+			if (first) {
-+				packet_start(SSH2_MSG_KEXGSS_INIT);
-+				packet_put_string(send_tok.value,
-+				    send_tok.length);
-+				packet_put_bignum2(kex->dh->pub_key);
-+				first = 0;
-+			} else {
-+				packet_start(SSH2_MSG_KEXGSS_CONTINUE);
-+				packet_put_string(send_tok.value,
-+				    send_tok.length);
-+			}
-+			packet_send();
-+			gss_release_buffer(&min_status, &send_tok);
-+
-+			/* If we've sent them data, they should reply */
-+			do {
-+				type = packet_read();
-+				if (type == SSH2_MSG_KEXGSS_HOSTKEY) {
-+					debug("Received KEXGSS_HOSTKEY");
-+					if (serverhostkey)
-+						fatal("Server host key received"
-+						    "more than once");
-+					serverhostkey =
-+					    packet_get_string(&slen);
-+				}
-+			} while (type == SSH2_MSG_KEXGSS_HOSTKEY);
-+
-+			switch (type) {
-+			case SSH2_MSG_KEXGSS_CONTINUE:
-+				debug("Received GSSAPI_CONTINUE");
-+				if (maj_status == GSS_S_COMPLETE)
-+					fatal("GSSAPI Continue received from"
-+					    "server when complete");
-+				recv_tok.value = packet_get_string(&strlen);
-+				recv_tok.length = strlen;
-+				break;
-+			case SSH2_MSG_KEXGSS_COMPLETE:
-+				debug("Received GSSAPI_COMPLETE");
-+				packet_get_bignum2(dh_server_pub);
-+				msg_tok.value =  packet_get_string(&strlen);
-+				msg_tok.length = strlen;
-+
-+				/* Is there a token included? */
-+				if (packet_get_char()) {
-+					recv_tok.value=
-+					    packet_get_string(&strlen);
-+					recv_tok.length = strlen;
-+					/* If complete - protocol error */
-+					if (maj_status == GSS_S_COMPLETE)
-+						packet_disconnect("Protocol"
-+						    " error: received token"
-+						    " when complete");
-+				} else {
-+					/* No token included */
-+					if (maj_status != GSS_S_COMPLETE)
-+						packet_disconnect("Protocol"
-+						    " error: did not receive"
-+						    " final token");
-+				}
-+				break;
-+			case SSH2_MSG_KEXGSS_ERROR:
-+				debug("Received Error");
-+				maj_status = packet_get_int();
-+				min_status = packet_get_int();
-+				msg = packet_get_string(NULL);
-+				lang = packet_get_string(NULL);
-+				fatal("GSSAPI Error: \n%.400s", msg);
-+			default:
-+				packet_disconnect("Protocol error: didn't"
-+				    " expect packet type %d", type);
-+			}
-+			token_ptr = &recv_tok;
-+		} else {
-+			/* No data, and not complete */
-+			if (maj_status != GSS_S_COMPLETE)
-+				fatal("Not complete, and no token output");
-+		}
-+	} while (maj_status & GSS_S_CONTINUE_NEEDED);
-+
-+	/*
-+	 * We _must_ have received a COMPLETE message in reply from the
-+	 * server, which will have set dh_server_pub and msg_tok
-+	 */
-+
-+	if (type != SSH2_MSG_KEXGSS_COMPLETE)
-+		fatal("Didn't receive SSH2_MSG_KEXGSS_COMPLETE when expected");
-+
-+	/* Check f in range [1, p-1] */
-+	if (!dh_pub_is_valid(kex->dh, dh_server_pub))
-+		packet_disconnect("bad server public DH value");
-+
-+	/* compute K=f^x mod p */
-+	klen = DH_size(kex->dh);
-+	kbuf = xmalloc(klen);
-+	kout = DH_compute_key(kbuf, dh_server_pub, kex->dh);
-+	if (kout < 0)
-+		fatal("DH_compute_key: failed");
-+
-+	shared_secret = BN_new();
-+	if (shared_secret == NULL)
-+		fatal("kexgss_client: BN_new failed");
-+
-+	if (BN_bin2bn(kbuf, kout, shared_secret) == NULL)
-+		fatal("kexdh_client: BN_bin2bn failed");
-+
-+	memset(kbuf, 0, klen);
-+	free(kbuf);
-+
-+	hashlen = sizeof (hash);
-+	switch (kex->kex_type) {
-+	case KEX_GSS_GRP1_SHA1:
-+	case KEX_GSS_GRP14_SHA1:
-+		kex_dh_hash(kex->client_version_string,
-+		    kex->server_version_string,
-+		    buffer_ptr(kex->my), buffer_len(kex->my),
-+		    buffer_ptr(kex->peer), buffer_len(kex->peer),
-+		    (serverhostkey ? serverhostkey : empty), slen,
-+		    kex->dh->pub_key,	/* e */
-+		    dh_server_pub,	/* f */
-+		    shared_secret,	/* K */
-+		    hash, &hashlen);
-+		break;
-+	case KEX_GSS_GEX_SHA1:
-+		kexgex_hash(
-+		    kex->hash_alg,
-+		    kex->client_version_string,
-+		    kex->server_version_string,
-+		    buffer_ptr(kex->my), buffer_len(kex->my),
-+		    buffer_ptr(kex->peer), buffer_len(kex->peer),
-+		    (serverhostkey ? serverhostkey : empty), slen,
-+		    min, nbits, max,
-+		    kex->dh->p, kex->dh->g,
-+		    kex->dh->pub_key,
-+		    dh_server_pub,
-+		    shared_secret,
-+		    hash, &hashlen);
-+		break;
-+	default:
-+		fatal("%s: Unexpected KEX type %d", __func__, kex->kex_type);
-+	}
-+
-+	gssbuf.value = hash;
-+	gssbuf.length = hashlen;
-+
-+	/* Verify that the hash matches the MIC we just got. */
-+	if (GSS_ERROR(ssh_gssapi_checkmic(ctxt, &gssbuf, &msg_tok)))
-+		packet_disconnect("Hash's MIC didn't verify");
-+
-+	free(msg_tok.value);
-+
-+	DH_free(kex->dh);
-+	if (serverhostkey)
-+		free(serverhostkey);
-+	BN_clear_free(dh_server_pub);
-+
-+	/* save session id */
-+	if (kex->session_id == NULL) {
-+		kex->session_id_len = hashlen;
-+		kex->session_id = xmalloc(kex->session_id_len);
-+		memcpy(kex->session_id, hash, kex->session_id_len);
-+	}
-+
-+	if (gss_kex_context == NULL)
-+		gss_kex_context = ctxt;
-+	else
-+		ssh_gssapi_delete_ctx(&ctxt);
-+
-+	if ((r = kex_derive_keys_bn(ssh, hash, hashlen, shared_secret)) == 0)
-+		r = kex_send_newkeys(ssh);
-+	return (r);
-+}
-+
-+#endif /* GSSAPI */
-diff --git a/kexgsss.c b/kexgsss.c
-new file mode 100644
-index 0000000..1300db0
---- /dev/null
-+++ b/kexgsss.c
-@@ -0,0 +1,296 @@
-+/*
-+ * Copyright (c) 2001-2009 Simon Wilkinson. All rights reserved.
-+ *
-+ * Redistribution and use in source and binary forms, with or without
-+ * modification, are permitted provided that the following conditions
-+ * are met:
-+ * 1. Redistributions of source code must retain the above copyright
-+ *    notice, this list of conditions and the following disclaimer.
-+ * 2. Redistributions in binary form must reproduce the above copyright
-+ *    notice, this list of conditions and the following disclaimer in the
-+ *    documentation and/or other materials provided with the distribution.
-+ *
-+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR
-+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
-+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
-+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
-+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
-+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
-+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-+ */
-+
-+/*
-+ * May 22, 2015
-+ * In version 6.8 a new packet interface has been introduced to OpenSSH,
-+ * while the old packet API has been provided in opacket.c.
-+ * At this moment we are not rewritting GSS-API key exchange code to the new
-+ * API, just adjusting it to still work with new struct ssh.
-+ * Rewritting to the new API can be considered in the future.
-+ */
-+
-+#include "includes.h"
-+
-+#ifdef GSSAPI
-+
-+#include <signal.h>	/* for sig_atomic_t in kex.h */
-+#include <string.h>
-+
-+#include <openssl/crypto.h>
-+#include <openssl/bn.h>
-+
-+#include "xmalloc.h"
-+#include "buffer.h"
-+#include "ssh2.h"
-+#include "key.h"
-+#include "cipher.h"
-+#include "digest.h"
-+#include "kex.h"
-+#include "log.h"
-+#include "packet.h"
-+#include "dh.h"
-+#include "ssh-gss.h"
-+#include "monitor_wrap.h"
-+
-+int
-+kexgss_server(struct ssh *ssh)
-+{
-+	OM_uint32 maj_status, min_status;
-+
-+	/*
-+	 * Some GSSAPI implementations use the input value of ret_flags (an
-+	 * output variable) as a means of triggering mechanism specific
-+	 * features. Initializing it to zero avoids inadvertently
-+	 * activating this non-standard behaviour.
-+	 */
-+
-+	OM_uint32 ret_flags = 0;
-+	gss_buffer_desc gssbuf, recv_tok, msg_tok;
-+	gss_buffer_desc send_tok = GSS_C_EMPTY_BUFFER;
-+	Gssctxt *ctxt = NULL;
-+	uint_t slen, klen, kout;
-+	uchar_t *kbuf;
-+	DH *dh;
-+	int min = -1, max = -1, nbits = -1;
-+	BIGNUM *shared_secret = NULL;
-+	BIGNUM *dh_client_pub = NULL;
-+	int type = 0;
-+	gss_OID oid;
-+	char *mechs;
-+	struct kex *kex = ssh->kex;
-+	int r;
-+	uchar_t hash[SSH_DIGEST_MAX_LENGTH];
-+	size_t hashlen;
-+
-+	/* Initialise GSSAPI */
-+
-+	/*
-+	 * If we're rekeying, privsep means that some of the private structures
-+	 * in the GSSAPI code are no longer available. This kludges them back
-+	 * into life
-+	 */
-+	if (!ssh_gssapi_oid_table_ok())
-+		if ((mechs = ssh_gssapi_server_mechanisms()))
-+			free(mechs);
-+
-+	debug2("%s: Identifying %s", __func__, kex->name);
-+	oid = ssh_gssapi_id_kex(NULL, kex->name, kex->kex_type);
-+	if (oid == GSS_C_NO_OID)
-+		fatal("Unknown gssapi mechanism");
-+
-+	debug2("%s: Acquiring credentials", __func__);
-+
-+	if (GSS_ERROR(PRIVSEP(ssh_gssapi_server_ctx(&ctxt, oid))))
-+		fatal("Unable to acquire credentials for the server");
-+
-+	switch (kex->kex_type) {
-+	case KEX_GSS_GRP1_SHA1:
-+		kex->dh = dh_new_group1();
-+		break;
-+	case KEX_GSS_GRP14_SHA1:
-+		kex->dh = dh_new_group14();
-+		break;
-+	case KEX_GSS_GEX_SHA1:
-+		debug("Doing group exchange");
-+		packet_read_expect(SSH2_MSG_KEXGSS_GROUPREQ);
-+		min = packet_get_int();
-+		nbits = packet_get_int();
-+		max = packet_get_int();
-+		packet_check_eom();
-+		if (max < min || nbits < min || max < nbits)
-+			fatal("GSS_GEX, bad parameters: %d !< %d !< %d",
-+			    min, nbits, max);
-+		kex->dh = PRIVSEP(choose_dh(MAX(DH_GRP_MIN, min),
-+		    nbits, MIN(DH_GRP_MAX, max)));
-+		if (kex->dh == NULL)
-+			packet_disconnect("Protocol error:"
-+			    " no matching group found");
-+
-+		packet_start(SSH2_MSG_KEXGSS_GROUP);
-+		packet_put_bignum2(kex->dh->p);
-+		packet_put_bignum2(kex->dh->g);
-+		packet_send();
-+
-+		packet_write_wait();
-+		break;
-+	default:
-+		fatal("%s: Unexpected KEX type %d", __func__, kex->kex_type);
-+	}
-+
-+	dh_gen_key(kex->dh, kex->we_need * 8);
-+
-+	do {
-+		debug("Wait SSH2_MSG_GSSAPI_INIT");
-+		type = packet_read();
-+		switch (type) {
-+		case SSH2_MSG_KEXGSS_INIT:
-+			if (dh_client_pub != NULL)
-+				fatal("Received KEXGSS_INIT after"
-+				    " initialising");
-+			recv_tok.value = packet_get_string(&slen);
-+			recv_tok.length = slen;
-+
-+			if ((dh_client_pub = BN_new()) == NULL)
-+				fatal("dh_client_pub == NULL");
-+
-+			packet_get_bignum2(dh_client_pub);
-+
-+			/* Send SSH_MSG_KEXGSS_HOSTKEY here, if we want */
-+			break;
-+		case SSH2_MSG_KEXGSS_CONTINUE:
-+			recv_tok.value = packet_get_string(&slen);
-+			recv_tok.length = slen;
-+			break;
-+		default:
-+			packet_disconnect(
-+			    "Protocol error: didn't expect packet type %d",
-+			    type);
-+		}
-+
-+		maj_status = PRIVSEP(ssh_gssapi_accept_ctx(ctxt, &recv_tok,
-+		    &send_tok, &ret_flags));
-+
-+		free(recv_tok.value);
-+
-+		if (maj_status != GSS_S_COMPLETE && send_tok.length == 0)
-+			fatal("Zero length token output when incomplete");
-+
-+		if (dh_client_pub == NULL)
-+			fatal("No client public key");
-+
-+		if (maj_status & GSS_S_CONTINUE_NEEDED) {
-+			debug("Sending GSSAPI_CONTINUE");
-+			packet_start(SSH2_MSG_KEXGSS_CONTINUE);
-+			packet_put_string(send_tok.value, send_tok.length);
-+			packet_send();
-+			gss_release_buffer(&min_status, &send_tok);
-+		}
-+	} while (maj_status & GSS_S_CONTINUE_NEEDED);
-+
-+	if (GSS_ERROR(maj_status)) {
-+		if (send_tok.length > 0) {
-+			packet_start(SSH2_MSG_KEXGSS_CONTINUE);
-+			packet_put_string(send_tok.value, send_tok.length);
-+			packet_send();
-+		}
-+		fatal("accept_ctx died");
-+	}
-+
-+	if (!(ret_flags & GSS_C_MUTUAL_FLAG))
-+		fatal("Mutual Authentication flag wasn't set");
-+
-+	if (!(ret_flags & GSS_C_INTEG_FLAG))
-+		fatal("Integrity flag wasn't set");
-+
-+	if (!dh_pub_is_valid(kex->dh, dh_client_pub))
-+		packet_disconnect("bad client public DH value");
-+
-+	klen = DH_size(kex->dh);
-+	kbuf = xmalloc(klen);
-+	kout = DH_compute_key(kbuf, dh_client_pub, kex->dh);
-+	if (kout < 0)
-+		fatal("DH_compute_key: failed");
-+
-+	shared_secret = BN_new();
-+	if (shared_secret == NULL)
-+		fatal("kexgss_server: BN_new failed");
-+
-+	if (BN_bin2bn(kbuf, kout, shared_secret) == NULL)
-+		fatal("kexgss_server: BN_bin2bn failed");
-+
-+	memset(kbuf, 0, klen);
-+	free(kbuf);
-+
-+	hashlen = sizeof (hash);
-+	switch (kex->kex_type) {
-+	case KEX_GSS_GRP1_SHA1:
-+	case KEX_GSS_GRP14_SHA1:
-+		kex_dh_hash(
-+		    kex->client_version_string, kex->server_version_string,
-+		    buffer_ptr(kex->peer), buffer_len(kex->peer),
-+		    buffer_ptr(kex->my), buffer_len(kex->my),
-+		    NULL, 0, /* Change this if we start sending host keys */
-+		    dh_client_pub, kex->dh->pub_key, shared_secret,
-+		    hash, &hashlen);
-+		break;
-+	case KEX_GSS_GEX_SHA1:
-+		kexgex_hash(
-+		    kex->hash_alg,
-+		    kex->client_version_string, kex->server_version_string,
-+		    buffer_ptr(kex->peer), buffer_len(kex->peer),
-+		    buffer_ptr(kex->my), buffer_len(kex->my),
-+		    NULL, 0,
-+		    min, nbits, max,
-+		    kex->dh->p, kex->dh->g,
-+		    dh_client_pub,
-+		    kex->dh->pub_key,
-+		    shared_secret,
-+		    hash, &hashlen);
-+		break;
-+	default:
-+		fatal("%s: Unexpected KEX type %d", __func__, kex->kex_type);
-+	}
-+
-+	BN_clear_free(dh_client_pub);
-+
-+	if (kex->session_id == NULL) {
-+		kex->session_id_len = hashlen;
-+		kex->session_id = xmalloc(kex->session_id_len);
-+		memcpy(kex->session_id, hash, kex->session_id_len);
-+	}
-+
-+	gssbuf.value = hash;
-+	gssbuf.length = hashlen;
-+
-+	if (GSS_ERROR(PRIVSEP(ssh_gssapi_sign(ctxt, &gssbuf, &msg_tok))))
-+		fatal("Couldn't get MIC");
-+
-+	packet_start(SSH2_MSG_KEXGSS_COMPLETE);
-+	packet_put_bignum2(kex->dh->pub_key);
-+	packet_put_string(msg_tok.value, msg_tok.length);
-+
-+	if (send_tok.length != 0) {
-+		packet_put_char(1); /* true */
-+		packet_put_string(send_tok.value, send_tok.length);
-+	} else {
-+		packet_put_char(0); /* false */
-+	}
-+	packet_send();
-+
-+	gss_release_buffer(&min_status, &send_tok);
-+	gss_release_buffer(&min_status, &msg_tok);
-+
-+	if (gss_kex_context == NULL)
-+		gss_kex_context = ctxt;
-+	else
-+		ssh_gssapi_delete_ctx(&ctxt);
-+
-+	DH_free(kex->dh);
-+
-+	if ((r = kex_derive_keys_bn(ssh, hash, hashlen, shared_secret)) == 0)
-+		r = kex_send_newkeys(ssh);
-+	return (r);
-+}
-+#endif /* GSSAPI */
-diff --git a/monitor.c b/monitor.c
-index 63bde62..dc3e7bf 100644
---- a/monitor.c
-+++ b/monitor.c
-@@ -159,6 +159,7 @@ int mm_answer_gss_setup_ctx(int, Buffer *);
- int mm_answer_gss_accept_ctx(int, Buffer *);
- int mm_answer_gss_userok(int, Buffer *);
- int mm_answer_gss_checkmic(int, Buffer *);
-+int mm_answer_gss_sign(int, Buffer *);
- #endif
- 
- #ifdef SSH_AUDIT_EVENTS
-@@ -243,11 +244,17 @@ struct mon_table mon_dispatch_proto20[] = {
-     {MONITOR_REQ_GSSSTEP, MON_ISAUTH, mm_answer_gss_accept_ctx},
-     {MONITOR_REQ_GSSUSEROK, MON_AUTH, mm_answer_gss_userok},
-     {MONITOR_REQ_GSSCHECKMIC, MON_ISAUTH, mm_answer_gss_checkmic},
-+    {MONITOR_REQ_GSSSIGN, MON_ONCE, mm_answer_gss_sign},
- #endif
-     {0, 0, NULL}
- };
- 
- struct mon_table mon_dispatch_postauth20[] = {
-+#ifdef GSSAPI
-+    {MONITOR_REQ_GSSSETUP, 0, mm_answer_gss_setup_ctx},
-+    {MONITOR_REQ_GSSSTEP, 0, mm_answer_gss_accept_ctx},
-+    {MONITOR_REQ_GSSSIGN, 0, mm_answer_gss_sign},
-+#endif
- #ifdef WITH_OPENSSL
-     {MONITOR_REQ_MODULI, 0, mm_answer_moduli},
- #endif
-@@ -362,6 +369,10 @@ monitor_child_preauth(Authctxt *_authctxt, struct monitor *pmonitor)
- 		/* Permit requests for moduli and signatures */
- 		monitor_permit(mon_dispatch, MONITOR_REQ_MODULI, 1);
- 		monitor_permit(mon_dispatch, MONITOR_REQ_SIGN, 1);
-+#ifdef GSSAPI
-+		/* and for the GSSAPI key exchange */
-+		monitor_permit(mon_dispatch, MONITOR_REQ_GSSSETUP, 1);
-+#endif
- 	} else {
- 		mon_dispatch = mon_dispatch_proto15;
- 
-@@ -501,6 +512,10 @@ monitor_child_postauth(struct monitor *pmonitor)
- 		monitor_permit(mon_dispatch, MONITOR_REQ_MODULI, 1);
- 		monitor_permit(mon_dispatch, MONITOR_REQ_SIGN, 1);
- 		monitor_permit(mon_dispatch, MONITOR_REQ_TERM, 1);
-+#ifdef GSSAPI
-+		/* and for the GSSAPI key exchange */
-+		monitor_permit(mon_dispatch, MONITOR_REQ_GSSSETUP, 1);
-+#endif		
- 	} else {
- 		mon_dispatch = mon_dispatch_postauth15;
- 		monitor_permit(mon_dispatch, MONITOR_REQ_TERM, 1);
-@@ -1924,6 +1939,13 @@ monitor_apply_keystate(struct monitor *pmonitor)
- # endif
- #endif /* WITH_OPENSSL */
- 		kex->kex[KEX_C25519_SHA256] = kexc25519_server;
-+#ifdef GSSAPI
-+		if (options.gss_keyex) {
-+			kex->kex[KEX_GSS_GRP1_SHA1] = kexgss_server;
-+			kex->kex[KEX_GSS_GRP14_SHA1] = kexgss_server;
-+			kex->kex[KEX_GSS_GEX_SHA1] = kexgss_server;
-+		}
-+#endif
- 		kex->load_host_public_key=&get_hostkey_public_by_type;
- 		kex->load_host_private_key=&get_hostkey_private_by_type;
- 		kex->host_key_index=&get_hostkey_index;
-@@ -2023,6 +2045,9 @@ mm_answer_gss_setup_ctx(int sock, Buffer *m)
- 	OM_uint32 major;
- 	u_int len;
- 
-+	if (!options.gss_authentication && !options.gss_keyex)
-+		fatal("In GSSAPI monitor when GSSAPI is disabled");
-+
- 	goid.elements = buffer_get_string(m, &len);
- 	goid.length = len;
- 
-@@ -2050,6 +2075,9 @@ mm_answer_gss_accept_ctx(int sock, Buffer *m)
- 	OM_uint32 flags = 0; /* GSI needs this */
- 	u_int len;
- 
-+	if (!options.gss_authentication && !options.gss_keyex)
-+		fatal("In GSSAPI monitor when GSSAPI is disabled");
-+
- 	in.value = buffer_get_string(m, &len);
- 	in.length = len;
- 	major = ssh_gssapi_accept_ctx(gsscontext, &in, &out, &flags);
-@@ -2067,6 +2095,7 @@ mm_answer_gss_accept_ctx(int sock, Buffer *m)
- 		monitor_permit(mon_dispatch, MONITOR_REQ_GSSSTEP, 0);
- 		monitor_permit(mon_dispatch, MONITOR_REQ_GSSUSEROK, 1);
- 		monitor_permit(mon_dispatch, MONITOR_REQ_GSSCHECKMIC, 1);
-+		monitor_permit(mon_dispatch, MONITOR_REQ_GSSSIGN, 1);
- 	}
- 	return (0);
- }
-@@ -2078,6 +2107,9 @@ mm_answer_gss_checkmic(int sock, Buffer *m)
- 	OM_uint32 ret;
- 	u_int len;
- 
-+	if (!options.gss_authentication && !options.gss_keyex)
-+		fatal("In GSSAPI monitor when GSSAPI is disabled");
-+
- 	gssbuf.value = buffer_get_string(m, &len);
- 	gssbuf.length = len;
- 	mic.value = buffer_get_string(m, &len);
-@@ -2104,6 +2136,9 @@ mm_answer_gss_userok(int sock, Buffer *m)
- {
- 	int authenticated;
- 
-+	if (!options.gss_authentication && !options.gss_keyex)
-+		fatal("In GSSAPI monitor when GSSAPI is disabled");
-+
- 	authenticated = authctxt->valid && ssh_gssapi_userok(authctxt->user);
- 
- 	buffer_clear(m);
-@@ -2117,5 +2152,47 @@ mm_answer_gss_userok(int sock, Buffer *m)
- 	/* Monitor loop will terminate if authenticated */
- 	return (authenticated);
- }
-+
-+int 
-+mm_answer_gss_sign(int socket, Buffer *m)
-+{
-+	gss_buffer_desc data;
-+	gss_buffer_desc hash = GSS_C_EMPTY_BUFFER;
-+	OM_uint32 major, minor;
-+	u_int len;
-+
-+	if (!options.gss_authentication && !options.gss_keyex)
-+		fatal("In GSSAPI monitor when GSSAPI is disabled");
-+
-+	data.value = buffer_get_string(m, &len);
-+	data.length = len;
-+	if (data.length != 20) 
-+		fatal("%s: data length incorrect: %d", __func__, 
-+		    (int) data.length);
-+
-+	/* Save the session ID on the first time around */
-+	if (session_id2_len == 0) {
-+		session_id2_len = data.length;
-+		session_id2 = xmalloc(session_id2_len);
-+		memcpy(session_id2, data.value, session_id2_len);
-+	}
-+	major = ssh_gssapi_sign(gsscontext, &data, &hash);
-+
-+	free(data.value);
-+
-+	buffer_clear(m);
-+	buffer_put_int(m, major);
-+	buffer_put_string(m, hash.value, hash.length);
-+
-+	mm_request_send(socket, MONITOR_ANS_GSSSIGN, m);
-+
-+	gss_release_buffer(&minor, &hash);
-+
-+	/* Turn on getpwnam permissions */
-+	monitor_permit(mon_dispatch, MONITOR_REQ_PWNAM, 1);
-+
-+	return (0);
-+}
-+
- #endif /* GSSAPI */
- 
-diff --git a/monitor.h b/monitor.h
-index da63e7d..1be1545 100644
---- a/monitor.h
-+++ b/monitor.h
-@@ -68,6 +68,9 @@ enum monitor_reqtype {
- #ifdef PAM_ENHANCEMENT
-         MONITOR_REQ_AUTHMETHOD = 114,
- #endif        
-+#ifdef GSSAPI
-+	MONITOR_REQ_GSSSIGN = 130, MONITOR_ANS_GSSSIGN = 131,
-+#endif        
- };
- 
- struct mm_master;
-diff --git a/monitor_wrap.c b/monitor_wrap.c
-index 30e3c15..2d4eb29 100644
---- a/monitor_wrap.c
-+++ b/monitor_wrap.c
-@@ -1103,5 +1103,28 @@ mm_ssh_gssapi_userok(char *user)
- 	debug3("%s: user %sauthenticated",__func__, authenticated ? "" : "not ");
- 	return (authenticated);
- }
-+
-+OM_uint32
-+mm_ssh_gssapi_sign(Gssctxt *ctx, gss_buffer_desc *data, gss_buffer_desc *hash)
-+{
-+	Buffer m;
-+	OM_uint32 major;
-+	u_int len;
-+
-+	buffer_init(&m);
-+	buffer_put_string(&m, data->value, data->length);
-+
-+	mm_request_send(pmonitor->m_recvfd, MONITOR_REQ_GSSSIGN, &m);
-+	mm_request_receive_expect(pmonitor->m_recvfd, MONITOR_ANS_GSSSIGN, &m);
-+
-+	major = buffer_get_int(&m);
-+	hash->value = buffer_get_string(&m, &len);
-+	hash->length = len;
-+
-+	buffer_free(&m);
-+
-+	return(major);
-+}
-+
- #endif /* GSSAPI */
- 
-diff --git a/monitor_wrap.h b/monitor_wrap.h
-index eb820ae..42266d7 100644
---- a/monitor_wrap.h
-+++ b/monitor_wrap.h
-@@ -60,6 +60,7 @@ OM_uint32 mm_ssh_gssapi_accept_ctx(Gssctxt *,
-    gss_buffer_desc *, gss_buffer_desc *, OM_uint32 *);
- int mm_ssh_gssapi_userok(char *user);
- OM_uint32 mm_ssh_gssapi_checkmic(Gssctxt *, gss_buffer_t, gss_buffer_t);
-+OM_uint32 mm_ssh_gssapi_sign(Gssctxt *, gss_buffer_t, gss_buffer_t);
- #endif
- 
- #ifdef USE_PAM
-diff --git a/readconf.c b/readconf.c
-index a5a2f12..39776ae 100644
---- a/readconf.c
-+++ b/readconf.c
-@@ -148,6 +148,7 @@ typedef enum {
- 	oClearAllForwardings, oNoHostAuthenticationForLocalhost,
- 	oEnableSSHKeysign, oRekeyLimit, oVerifyHostKeyDNS, oConnectTimeout,
- 	oAddressFamily, oGssAuthentication, oGssDelegateCreds,
-+	oGssKeyEx,
- 	oServerAliveInterval, oServerAliveCountMax, oIdentitiesOnly,
- 	oSendEnv, oControlPath, oControlMaster, oControlPersist,
- 	oHashKnownHosts,
-@@ -197,9 +198,11 @@ static struct {
- #if defined(GSSAPI)
- 	{ "gssapiauthentication", oGssAuthentication },
- 	{ "gssapidelegatecredentials", oGssDelegateCreds },
-+	{ "gssapikeyexchange", oGssKeyEx },
- #else
- 	{ "gssapiauthentication", oUnsupported },
- 	{ "gssapidelegatecredentials", oUnsupported },
-+	{ "gssapikeyexchange", oUnsupported },
- #endif
- 	{ "fallbacktorsh", oDeprecated },
- 	{ "usersh", oDeprecated },
-@@ -961,6 +964,10 @@ parse_time:
- 		intptr = &options->gss_authentication;
- 		goto parse_flag;
- 
-+	case oGssKeyEx:
-+		intptr = &options->gss_keyex;
-+		goto parse_flag;
-+
- 	case oGssDelegateCreds:
- 		intptr = &options->gss_deleg_creds;
- 		goto parse_flag;
-@@ -1690,6 +1697,7 @@ initialize_options(Options * options)
- 	options->pubkey_authentication = -1;
- 	options->challenge_response_authentication = -1;
- 	options->gss_authentication = -1;
-+	options->gss_keyex = -1;
- 	options->gss_deleg_creds = -1;
- 	options->password_authentication = -1;
- 	options->kbd_interactive_authentication = -1;
-@@ -1830,6 +1838,12 @@ fill_default_options(Options * options)
- #else
- 		options->gss_authentication = 0;
- #endif
-+	if (options->gss_keyex == -1)
-+#ifdef OPTION_DEFAULT_VALUE
-+		options->gss_keyex = 1;
-+#else
-+		options->gss_keyex = 0;
-+#endif
- 	if (options->gss_deleg_creds == -1)
- 		options->gss_deleg_creds = 0;
- 	if (options->password_authentication == -1)
-diff --git a/readconf.h b/readconf.h
-index 9aefd9e..a41b137 100644
---- a/readconf.h
-+++ b/readconf.h
-@@ -45,6 +45,7 @@ typedef struct {
- 	int     challenge_response_authentication;
- 					/* Try S/Key or TIS, authentication. */
- 	int     gss_authentication;	/* Try GSS authentication */
-+	int     gss_keyex;		/* Try GSS key exchange */
- 	int     gss_deleg_creds;	/* Delegate GSS credentials */
- 	int     password_authentication;	/* Try password
- 						 * authentication. */
-diff --git a/servconf.c b/servconf.c
-index 434cafc..157a64a 100644
---- a/servconf.c
-+++ b/servconf.c
-@@ -117,6 +117,7 @@ initialize_server_options(ServerOptions *options)
- 	options->kerberos_ticket_cleanup = -1;
- 	options->kerberos_get_afs_token = -1;
- 	options->gss_authentication=-1;
-+	options->gss_keyex = -1;
- 	options->gss_cleanup_creds = -1;
- 	options->gss_strict_acceptor = -1;
- 	options->password_authentication = -1;
-@@ -312,6 +313,12 @@ fill_default_server_options(ServerOptions *options)
- #else
- 		options->gss_authentication = 0;
- #endif
-+	if (options->gss_keyex == -1)
-+#ifdef OPTION_DEFAULT_VALUE
-+		options->gss_keyex = 1;
-+#else
-+		options->gss_keyex = 0;
-+#endif
- 	if (options->gss_cleanup_creds == -1)
- 		options->gss_cleanup_creds = 1;
- 	if (options->gss_strict_acceptor == -1)
-@@ -449,6 +456,7 @@ typedef enum {
- 	sHostbasedUsesNameFromPacketOnly, sHostbasedAcceptedKeyTypes,
- 	sHostKeyAlgorithms,
- 	sClientAliveInterval, sClientAliveCountMax, sAuthorizedKeysFile,
-+	sGssKeyEx,
- 	sGssAuthentication, sGssCleanupCreds, sGssStrictAcceptor,
- 	sAcceptEnv, sPermitTunnel,
- 	sMatch, sPermitOpen, sForceCommand, sChrootDirectory,
-@@ -525,6 +533,7 @@ static struct {
- 	{ "afstokenpassing", sUnsupported, SSHCFG_GLOBAL },
- #ifdef GSSAPI
- 	{ "gssapiauthentication", sGssAuthentication, SSHCFG_ALL },
-+	{ "gssapikeyexchange", sGssKeyEx, SSHCFG_ALL },
- #ifdef USE_GSS_STORE_CRED
- 	{ "gssapicleanupcredentials", sUnsupported, SSHCFG_GLOBAL },
- #else /* USE_GSS_STORE_CRED */
-@@ -533,6 +542,7 @@ static struct {
- 	{ "gssapistrictacceptorcheck", sGssStrictAcceptor, SSHCFG_GLOBAL },
- #else
- 	{ "gssapiauthentication", sUnsupported, SSHCFG_ALL },
-+	{ "gssapikeyexchange", sUnsupported, SSHCFG_ALL },
- 	{ "gssapicleanupcredentials", sUnsupported, SSHCFG_GLOBAL },
- 	{ "gssapistrictacceptorcheck", sUnsupported, SSHCFG_GLOBAL },
- #endif
-@@ -1316,6 +1326,10 @@ process_server_config_line(ServerOptions *options, char *line,
- 		intptr = &options->gss_authentication;
- 		goto parse_flag;
- 
-+	case sGssKeyEx:
-+		intptr = &options->gss_keyex;
-+		goto parse_flag;
-+
- 	case sGssCleanupCreds:
- 		intptr = &options->gss_cleanup_creds;
- 		goto parse_flag;
-@@ -2370,6 +2384,7 @@ dump_config(ServerOptions *o)
- #endif
- #ifdef GSSAPI
- 	dump_cfg_fmtint(sGssAuthentication, o->gss_authentication);
-+	dump_cfg_fmtint(sGssKeyEx, o->gss_keyex);
- 	dump_cfg_fmtint(sGssCleanupCreds, o->gss_cleanup_creds);
- #endif
- 	dump_cfg_fmtint(sPasswordAuthentication, o->password_authentication);
-diff --git a/servconf.h b/servconf.h
-index 8c86b57..2175645 100644
---- a/servconf.h
-+++ b/servconf.h
-@@ -122,6 +122,7 @@ typedef struct {
- 	int     kerberos_get_afs_token;		/* If true, try to get AFS token if
- 						 * authenticated with Kerberos. */
- 	int     gss_authentication;	/* If true, permit GSSAPI authentication */
-+	int     gss_keyex;		/* If true, permit GSSAPI key exchange */
- 	int     gss_cleanup_creds;	/* If true, destroy cred cache on logout */
- 	int     gss_strict_acceptor;	/* If true, restrict the GSSAPI acceptor name */
- 	int     password_authentication;	/* If true, permit password
-diff --git a/ssh-gss.h b/ssh-gss.h
-index a99d7f0..43c33f9 100644
---- a/ssh-gss.h
-+++ b/ssh-gss.h
-@@ -61,6 +61,17 @@
- 
- #define SSH_GSS_OIDTYPE 0x06
- 
-+#define SSH2_MSG_KEXGSS_INIT                            30
-+#define SSH2_MSG_KEXGSS_CONTINUE                        31
-+#define SSH2_MSG_KEXGSS_COMPLETE                        32
-+#define SSH2_MSG_KEXGSS_HOSTKEY                         33
-+#define SSH2_MSG_KEXGSS_ERROR                           34
-+#define SSH2_MSG_KEXGSS_GROUPREQ			40
-+#define SSH2_MSG_KEXGSS_GROUP				41
-+#define KEX_GSS_GRP1_SHA1_ID				"gss-group1-sha1-"
-+#define KEX_GSS_GRP14_SHA1_ID				"gss-group14-sha1-"
-+#define KEX_GSS_GEX_SHA1_ID				"gss-gex-sha1-"
-+
- typedef struct {
- 	char *filename;
- 	char *envvar;
-@@ -98,6 +109,7 @@ typedef struct {
- } Gssctxt;
- 
- extern ssh_gssapi_mech *supported_mechs[];
-+extern Gssctxt *gss_kex_context;
- 
- int  ssh_gssapi_check_oid(Gssctxt *, void *, size_t);
- void ssh_gssapi_set_oid_data(Gssctxt *, void *, size_t);
-@@ -122,6 +134,11 @@ void ssh_gssapi_buildmic(Buffer *, const char *, const char *, const char *);
- int ssh_gssapi_check_mechanism(Gssctxt **, gss_OID, const char *);
- 
- /* In the server */
-+typedef int ssh_gssapi_check_fn(Gssctxt **, gss_OID, const char *);
-+char *ssh_gssapi_client_mechanisms(const char *host);
-+char *ssh_gssapi_kex_mechs(gss_OID_set, ssh_gssapi_check_fn *, const char *);
-+gss_OID ssh_gssapi_id_kex(Gssctxt *, char *, int);
-+int ssh_gssapi_server_check_mech(Gssctxt **,gss_OID, const char *);
- OM_uint32 ssh_gssapi_server_ctx(Gssctxt **, gss_OID);
- int ssh_gssapi_userok(char *name);
- OM_uint32 ssh_gssapi_checkmic(Gssctxt *, gss_buffer_t, gss_buffer_t);
-@@ -129,6 +146,8 @@ void ssh_gssapi_do_child(char ***, u_int *);
- void ssh_gssapi_cleanup_creds(void);
- void ssh_gssapi_storecreds(void);
- 
-+char *ssh_gssapi_server_mechanisms(void);
-+int ssh_gssapi_oid_table_ok();
- #endif /* GSSAPI */
- 
- #endif /* _SSH_GSS_H */
-diff --git a/ssh_config b/ssh_config
-index 90fb63f..dd2a6e9 100644
---- a/ssh_config
-+++ b/ssh_config
-@@ -26,6 +26,7 @@
- #   HostbasedAuthentication no
- #   GSSAPIAuthentication no
- #   GSSAPIDelegateCredentials no
-+#   GSSAPIKeyExchange yes
- #   BatchMode no
- #   CheckHostIP yes
- #   AddressFamily any
-diff --git a/ssh_config.4 b/ssh_config.4
-index 3135e45..f4b471e 100644
---- a/ssh_config.4
-+++ b/ssh_config.4
-@@ -834,6 +834,11 @@ The default is
- Specifies whether user authentication based on GSSAPI is allowed.
- The default on Solaris is
- .Dq yes .
-+.It Cm GSSAPIKeyExchange
-+Specifies whether key exchange based on GSSAPI may be used. When using
-+GSSAPI key exchange the server need not have a host key.
-+The default on Solaris is
-+.Dq yes .
- .It Cm GSSAPIDelegateCredentials
- Forward (delegate) credentials to the server.
- The default is
-diff --git a/sshconnect2.c b/sshconnect2.c
-index a32204f..725fefd 100644
---- a/sshconnect2.c
-+++ b/sshconnect2.c
-@@ -165,12 +165,35 @@ ssh_kex2(char *host, struct sockaddr *hostaddr, u_short port)
- 	struct kex *kex;
- 	int r;
- 
-+#ifdef GSSAPI
-+	char *orig = NULL, *gss = NULL;
-+	char *gss_host = NULL;
-+#endif
-+
- 	xxx_host = host;
- 	xxx_hostaddr = hostaddr;
- 
- 	if ((s = kex_names_cat(options.kex_algorithms, "ext-info-c")) == NULL)
- 		fatal("%s: kex_names_cat", __func__);
- 	myproposal[PROPOSAL_KEX_ALGS] = compat_kex_proposal(s);
-+
-+#ifdef GSSAPI
-+	if (options.gss_keyex) {
-+		/* Add the GSSAPI mechanisms currently supported on this 
-+		 * client to the key exchange algorithm proposal */
-+		orig = myproposal[PROPOSAL_KEX_ALGS];
-+
-+		gss_host = (char *)get_canonical_hostname(1);
-+
-+		gss = ssh_gssapi_client_mechanisms(gss_host);
-+		if (gss) {
-+			debug("Offering GSSAPI proposal: %s", gss);
-+			xasprintf(&myproposal[PROPOSAL_KEX_ALGS],
-+			    "%s,%s", gss, orig);
-+		}
-+	}
-+#endif
-+
- 	myproposal[PROPOSAL_ENC_ALGS_CTOS] =
- 	    compat_cipher_proposal(options.ciphers);
- 	myproposal[PROPOSAL_ENC_ALGS_STOC] =
-@@ -199,6 +222,17 @@ ssh_kex2(char *host, struct sockaddr *hostaddr, u_short port)
- 		    order_hostkeyalgs(host, hostaddr, port));
- 	}
- 
-+#ifdef GSSAPI
-+	/* If we've got GSSAPI algorithms, then we also support the
-+	 * 'null' hostkey, as a last resort */
-+	if (options.gss_keyex && gss) {
-+		orig = myproposal[PROPOSAL_SERVER_HOST_KEY_ALGS];
-+		xasprintf(&myproposal[PROPOSAL_SERVER_HOST_KEY_ALGS], 
-+		    "%s,null", orig);
-+		free(gss);
-+	}
-+#endif
-+
- 	if (options.rekey_limit || options.rekey_interval)
- 		packet_set_rekey_limits((u_int32_t)options.rekey_limit,
- 		    (time_t)options.rekey_interval);
-@@ -217,9 +251,22 @@ ssh_kex2(char *host, struct sockaddr *hostaddr, u_short port)
- # endif
- #endif
- 	kex->kex[KEX_C25519_SHA256] = kexc25519_client;
-+#ifdef GSSAPI
-+	if (options.gss_keyex) {
-+		kex->kex[KEX_GSS_GRP1_SHA1] = kexgss_client;
-+		kex->kex[KEX_GSS_GRP14_SHA1] = kexgss_client;
-+		kex->kex[KEX_GSS_GEX_SHA1] = kexgss_client;
-+	}
-+#endif
- 	kex->client_version_string=client_version_string;
- 	kex->server_version_string=server_version_string;
- 	kex->verify_host_key=&verify_host_key_callback;
-+#ifdef GSSAPI
-+	if (options.gss_keyex) {
-+		kex->gss_deleg_creds = options.gss_deleg_creds;
-+		kex->gss_host = gss_host;
-+	}
-+#endif
- 
- 	dispatch_run(DISPATCH_BLOCK, &kex->done, active_state);
- 
-@@ -315,6 +362,7 @@ int	input_gssapi_token(int type, u_int32_t, void *);
- int	input_gssapi_hash(int type, u_int32_t, void *);
- int	input_gssapi_error(int, u_int32_t, void *);
- int	input_gssapi_errtok(int, u_int32_t, void *);
-+int	userauth_gsskeyex(Authctxt *authctxt);
- #endif
- 
- void	userauth(Authctxt *, char *);
-@@ -330,6 +378,11 @@ static char *authmethods_get(void);
- 
- Authmethod authmethods[] = {
- #ifdef GSSAPI
-+	{"gssapi-keyex",
-+		userauth_gsskeyex,
-+		NULL,
-+		&options.gss_authentication,
-+		NULL},
- 	{"gssapi-with-mic",
- 		userauth_gssapi,
- 		NULL,
-@@ -678,7 +731,10 @@ userauth_gssapi(Authctxt *authctxt)
- 	 * once. */
- 
- 	if (gss_supported == NULL)
--		gss_indicate_mechs(&min, &gss_supported);
-+		if (GSS_ERROR(gss_indicate_mechs(&min, &gss_supported))) {
-+			gss_supported = NULL;
-+			return 0;
-+		}
- 
- 	/* Check to see if the mechanism is usable before we offer it */
- 	while (mech < gss_supported->count && !ok) {
-@@ -782,8 +838,8 @@ input_gssapi_response(int type, u_int32_t plen, void *ctxt)
- {
- 	Authctxt *authctxt = ctxt;
- 	Gssctxt *gssctxt;
--	int oidlen;
--	char *oidv;
-+	u_int oidlen;
-+	u_char *oidv;
- 
- 	if (authctxt == NULL)
- 		fatal("input_gssapi_response: no authentication context");
-@@ -896,6 +952,48 @@ input_gssapi_error(int type, u_int32_t plen, void *ctxt)
- 	free(lang);
- 	return 0;
- }
-+
-+int
-+userauth_gsskeyex(Authctxt *authctxt)
-+{
-+	Buffer b;
-+	gss_buffer_desc gssbuf;
-+	gss_buffer_desc mic = GSS_C_EMPTY_BUFFER;
-+	OM_uint32 ms;
-+
-+	static int attempt = 0;
-+	if (attempt++ >= 1)
-+		return (0);
-+
-+	if (gss_kex_context == NULL) {
-+		debug("No valid Key exchange context"); 
-+		return (0);
-+	}
-+
-+	ssh_gssapi_buildmic(&b, authctxt->server_user, authctxt->service,
-+	    "gssapi-keyex");
-+
-+	gssbuf.value = buffer_ptr(&b);
-+	gssbuf.length = buffer_len(&b);
-+
-+	if (GSS_ERROR(ssh_gssapi_sign(gss_kex_context, &gssbuf, &mic))) {
-+		buffer_free(&b);
-+		return (0);
-+	}
-+
-+	packet_start(SSH2_MSG_USERAUTH_REQUEST);
-+	packet_put_cstring(authctxt->server_user);
-+	packet_put_cstring(authctxt->service);
-+	packet_put_cstring(authctxt->method->name);
-+	packet_put_string(mic.value, mic.length);
-+	packet_send();
-+
-+	buffer_free(&b);
-+	gss_release_buffer(&ms, &mic);
-+
-+	return (1);
-+}
-+
- #endif /* GSSAPI */
- 
- int
-diff --git a/sshd.c b/sshd.c
-index 37cb5fa..f34d804 100644
---- a/sshd.c
-+++ b/sshd.c
-@@ -1833,10 +1833,13 @@ main(int ac, char **av)
- 		logit("Disabling protocol version 1. Could not load host key");
- 		options.protocol &= ~SSH_PROTO_1;
- 	}
-+#ifndef GSSAPI
-+	/* The GSSAPI key exchange can run without a host key */
- 	if ((options.protocol & SSH_PROTO_2) && !sensitive_data.have_ssh2_key) {
- 		logit("Disabling protocol version 2. Could not load host key");
- 		options.protocol &= ~SSH_PROTO_2;
- 	}
-+#endif
- 	if (!(options.protocol & (SSH_PROTO_1|SSH_PROTO_2))) {
- 		logit("sshd: no hostkeys available -- exiting.");
- 		exit(1);
-@@ -2596,6 +2599,48 @@ do_ssh2_kex(void)
- 	myproposal[PROPOSAL_SERVER_HOST_KEY_ALGS] = compat_pkalg_proposal(
- 	    list_hostkey_types());
- 
-+#ifdef GSSAPI
-+	{
-+	char *orig;
-+	char *gss = NULL;
-+	char *newstr = NULL;
-+	orig = myproposal[PROPOSAL_KEX_ALGS];
-+
-+	/* 
-+	 * If we don't have a host key, then there's no point advertising
-+	 * the other key exchange algorithms
-+	 */
-+
-+	if (strlen(myproposal[PROPOSAL_SERVER_HOST_KEY_ALGS]) == 0)
-+		orig = NULL;
-+
-+	if (options.gss_keyex)
-+		gss = ssh_gssapi_server_mechanisms();
-+	else
-+		gss = NULL;
-+
-+	if (gss && orig)
-+		xasprintf(&newstr, "%s,%s", gss, orig);
-+	else if (gss)
-+		newstr = gss;
-+	else if (orig)
-+		newstr = orig;
-+
-+	/* 
-+	 * If we've got GSSAPI mechanisms, then we've got the 'null' host
-+	 * key alg, but we can't tell people about it unless its the only
-+  	 * host key algorithm we support
-+	 */
-+	if (gss && (strlen(myproposal[PROPOSAL_SERVER_HOST_KEY_ALGS])) == 0)
-+		myproposal[PROPOSAL_SERVER_HOST_KEY_ALGS] = "null";
-+
-+	if (newstr)
-+		myproposal[PROPOSAL_KEX_ALGS] = newstr;
-+	else
-+		fatal("No supported key exchange algorithms");
-+	}
-+#endif
-+
- 	/* start key exchange */
- 	if ((r = kex_setup(active_state, myproposal)) != 0)
- 		fatal("kex_setup: %s", ssh_err(r));
-@@ -2610,6 +2655,13 @@ do_ssh2_kex(void)
- # endif
- #endif
- 	kex->kex[KEX_C25519_SHA256] = kexc25519_server;
-+#ifdef GSSAPI
-+	if (options.gss_keyex) {
-+		kex->kex[KEX_GSS_GRP1_SHA1] = kexgss_server;
-+		kex->kex[KEX_GSS_GRP14_SHA1] = kexgss_server;
-+		kex->kex[KEX_GSS_GEX_SHA1] = kexgss_server;
-+	}
-+#endif
- 	kex->server = 1;
- 	kex->client_version_string=client_version_string;
- 	kex->server_version_string=server_version_string;
-diff --git a/sshd_config b/sshd_config
-index a848d73..7322872 100644
---- a/sshd_config
-+++ b/sshd_config
-@@ -82,8 +82,9 @@ AuthorizedKeysFile	.ssh/authorized_keys
- #KerberosGetAFSToken no
- 
- # GSSAPI options
--#GSSAPIAuthentication no
-+#GSSAPIAuthentication yes
- #GSSAPICleanupCredentials yes
-+#GSSAPIKeyExchange yes
- 
- # Set this to 'yes' to enable PAM authentication, account processing,
- # and session processing. If this is enabled, PAM authentication will
-diff --git a/sshd_config.4 b/sshd_config.4
-index 445cf65..0dec36c 100644
---- a/sshd_config.4
-+++ b/sshd_config.4
-@@ -623,6 +623,11 @@ The default is
- Specifies whether user authentication based on GSSAPI is allowed.
- The default on Solaris is
- .Dq yes .
-+.It Cm GSSAPIKeyExchange
-+Specifies whether key exchange based on GSSAPI is allowed. GSSAPI key exchange
-+doesn't rely on ssh keys to verify host identity.
-+The default on Solaris is
-+.Dq yes .
- .It Cm GSSAPICleanupCredentials
- Specifies whether to automatically destroy the user's credentials cache
- on logout.
-diff --git a/sshkey.c b/sshkey.c
-index 87b093e..d7c4f97 100644
---- a/sshkey.c
-+++ b/sshkey.c
-@@ -115,6 +115,7 @@ static const struct keytype keytypes[] = {
- #  endif /* OPENSSL_HAS_NISTP521 */
- # endif /* OPENSSL_HAS_ECC */
- #endif /* WITH_OPENSSL */
-+	{ "null", "null", KEY_NULL, 0, 0, 0 },
- 	{ NULL, NULL, -1, -1, 0, 0 }
- };
- 
-diff --git a/sshkey.h b/sshkey.h
-index a20a14f..b10d578 100644
---- a/sshkey.h
-+++ b/sshkey.h
-@@ -62,6 +62,9 @@ enum sshkey_types {
- 	KEY_DSA_CERT,
- 	KEY_ECDSA_CERT,
- 	KEY_ED25519_CERT,
-+	KEY_RSA_CERT_V00,
-+	KEY_DSA_CERT_V00,
-+	KEY_NULL,
- 	KEY_UNSPEC
- };
- 
--- 
-2.5.4 (Apple Git-61)
-
diff --git a/openssh/Patches/0017-PAM-setcred-failures.patch b/openssh/Patches/0016-PAM-setcred-failures.patch
similarity index 87%
rename from openssh/Patches/0017-PAM-setcred-failures.patch
rename to openssh/Patches/0016-PAM-setcred-failures.patch
index 31f4511..7be54e0 100644
--- a/openssh/Patches/0017-PAM-setcred-failures.patch
+++ b/openssh/Patches/0016-PAM-setcred-failures.patch
@@ -1,7 +1,7 @@
-From 94dc5c2ab3457fd002a10e9d2a42059a17ed83b6 Mon Sep 17 00:00:00 2001
+From 521cf53bb31a4edfc2f6eaa8531322bd31e4a3bb Mon Sep 17 00:00:00 2001
 From: oracle <solaris@oracle.com>
 Date: Mon, 3 Aug 2015 14:38:26 -0700
-Subject: [PATCH 17/34] PAM setcred failures
+Subject: [PATCH 16/34] PAM setcred failures
 
 #
 # This patch contains bug fixes to the PAM credential and session operations.
@@ -20,10 +20,10 @@ Subject: [PATCH 17/34] PAM setcred failures
  1 file changed, 13 insertions(+)
 
 diff --git a/auth-pam.c b/auth-pam.c
-index d049779..8bad498 100644
+index 46bf722e..dcd0f208 100644
 --- a/auth-pam.c
 +++ b/auth-pam.c
-@@ -1084,12 +1084,19 @@ do_pam_setcred(int init)
+@@ -1102,12 +1102,19 @@ do_pam_setcred(int init)
  		sshpam_cred_established = 1;
  		return;
  	}
@@ -43,7 +43,7 @@ index d049779..8bad498 100644
  }
  
  static int
-@@ -1182,10 +1189,16 @@ do_pam_session(void)
+@@ -1200,10 +1207,16 @@ do_pam_session(void)
  	if (sshpam_err == PAM_SUCCESS)
  		sshpam_session_open = 1;
  	else {
@@ -61,5 +61,5 @@ index d049779..8bad498 100644
  
  }
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/0018-Don-t-call-do_pam_setcred-twice.patch b/openssh/Patches/0017-Don-t-call-do_pam_setcred-twice.patch
similarity index 90%
rename from openssh/Patches/0018-Don-t-call-do_pam_setcred-twice.patch
rename to openssh/Patches/0017-Don-t-call-do_pam_setcred-twice.patch
index 34eda6a..a9d40dd 100644
--- a/openssh/Patches/0018-Don-t-call-do_pam_setcred-twice.patch
+++ b/openssh/Patches/0017-Don-t-call-do_pam_setcred-twice.patch
@@ -1,7 +1,7 @@
-From 6a7f4e87eace242d1761b5a8c3a17c119f9b527f Mon Sep 17 00:00:00 2001
+From 74d402ba1c7796f10e39d178a8db4e5b3f26c9fb Mon Sep 17 00:00:00 2001
 From: oracle <solaris@oracle.com>
 Date: Mon, 3 Aug 2015 14:38:41 -0700
-Subject: [PATCH 18/34] Don't call do_pam_setcred twice
+Subject: [PATCH 17/34] Don't call do_pam_setcred twice
 
 # This issue has been raised with the upstream OpenSSH community:
 #
@@ -30,7 +30,7 @@ Subject: [PATCH 18/34] Don't call do_pam_setcred twice
  1 file changed, 1 insertion(+), 1 deletion(-)
 
 diff --git a/platform.c b/platform.c
-index ee313da..8362a08 100644
+index 973a63e4..fc9c079e 100644
 --- a/platform.c
 +++ b/platform.c
 @@ -145,7 +145,7 @@ platform_setusercontext(struct passwd *pw)
@@ -43,5 +43,5 @@ index ee313da..8362a08 100644
  	 * PAM credentials may take the form of supplementary groups.
  	 * These will have been wiped by the above initgroups() call.
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/0019-Per-session-xauthfile.patch b/openssh/Patches/0018-Per-session-xauthfile.patch
similarity index 89%
rename from openssh/Patches/0019-Per-session-xauthfile.patch
rename to openssh/Patches/0018-Per-session-xauthfile.patch
index ffbc70f..a42e5a9 100644
--- a/openssh/Patches/0019-Per-session-xauthfile.patch
+++ b/openssh/Patches/0018-Per-session-xauthfile.patch
@@ -1,7 +1,7 @@
-From a0027fbda837126e12d04098019a133ea83a9b75 Mon Sep 17 00:00:00 2001
+From e72d906779bb14a58fb2649d736a0ef6e3efdf21 Mon Sep 17 00:00:00 2001
 From: oracle <solaris@oracle.com>
 Date: Tue, 22 Dec 2015 17:12:50 -0800
-Subject: [PATCH 19/34] Per-session xauthfile
+Subject: [PATCH 18/34] Per-session xauthfile
 
 This patch is to fix a X11 connection failure when a user's home directory
 is read-only.
@@ -16,7 +16,7 @@ will remove this patch when we upgrade to that release.
  2 files changed, 137 insertions(+), 4 deletions(-)
 
 diff --git a/session.c b/session.c
-index 87fddfc..36f8c62 100644
+index a08aa69d..9586901e 100644
 --- a/session.c
 +++ b/session.c
 @@ -63,6 +63,10 @@
@@ -30,7 +30,7 @@ index 87fddfc..36f8c62 100644
  #include "openbsd-compat/sys-queue.h"
  #include "xmalloc.h"
  #include "ssh.h"
-@@ -133,6 +137,11 @@ static void do_authenticated2(Authctxt *);
+@@ -131,6 +135,11 @@ static void do_authenticated2(Authctxt *);
  
  static int session_pty_req(Session *);
  
@@ -42,7 +42,7 @@ index 87fddfc..36f8c62 100644
  /* import */
  extern ServerOptions options;
  extern char *__progname;
-@@ -1242,6 +1251,11 @@ do_setup_env(Session *s, const char *shell)
+@@ -1056,6 +1065,11 @@ do_setup_env(Session *s, const char *shell)
  	if (getenv("TZ"))
  		child_set_env(&env, &envsize, "TZ", getenv("TZ"));
  
@@ -52,9 +52,9 @@ index 87fddfc..36f8c62 100644
 +#endif
 +
  	/* Set custom environment options from RSA authentication. */
- 	if (!options.use_login) {
- 		while (custom_environment) {
-@@ -2189,6 +2203,11 @@ session_x11_req(Session *s)
+ 	while (custom_environment) {
+ 		struct envstring *ce = custom_environment;
+@@ -1958,6 +1972,11 @@ session_x11_req(Session *s)
  {
  	int success;
  
@@ -66,7 +66,7 @@ index 87fddfc..36f8c62 100644
  	if (s->auth_proto != NULL || s->auth_data != NULL) {
  		error("session_x11_req: session %d: "
  		    "x11 forwarding already active", s->self);
-@@ -2200,19 +2219,78 @@ session_x11_req(Session *s)
+@@ -1969,19 +1988,78 @@ session_x11_req(Session *s)
  	s->screen = packet_get_int();
  	packet_check_eom();
  
@@ -149,7 +149,7 @@ index 87fddfc..36f8c62 100644
  	return success;
  }
  
-@@ -2403,6 +2481,51 @@ session_pty_cleanup(Session *s)
+@@ -2170,6 +2248,51 @@ session_pty_cleanup(Session *s)
  	PRIVSEP(session_pty_cleanup2(s));
  }
  
@@ -201,7 +201,7 @@ index 87fddfc..36f8c62 100644
  static char *
  sig2name(int sig)
  {
-@@ -2542,6 +2665,9 @@ session_close(Session *s)
+@@ -2310,6 +2433,9 @@ session_close(Session *s)
  	free(s->auth_display);
  	free(s->auth_data);
  	free(s->auth_proto);
@@ -211,7 +211,7 @@ index 87fddfc..36f8c62 100644
  	free(s->subsys);
  	if (s->env != NULL) {
  		for (i = 0; i < s->num_env; i++) {
-@@ -2793,6 +2919,10 @@ do_cleanup(Authctxt *authctxt)
+@@ -2556,6 +2682,10 @@ do_cleanup(Authctxt *authctxt)
  	/* remove agent socket */
  	auth_sock_cleanup_proc(authctxt->pw);
  
@@ -223,7 +223,7 @@ index 87fddfc..36f8c62 100644
  	 * Cleanup ptys/utmp only if privsep is disabled,
  	 * or if running in monitor.
 diff --git a/session.h b/session.h
-index 6a2f35e..276cd04 100644
+index 98e1dafe..f211c19c 100644
 --- a/session.h
 +++ b/session.h
 @@ -49,6 +49,9 @@ struct Session {
@@ -235,7 +235,7 @@ index 6a2f35e..276cd04 100644
 +#endif
  	int	single_connection;
  
- 	/* proto 2 */
+ 	int	chanid;
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/0020-PubKeyPlugin-support.patch b/openssh/Patches/0019-PubKeyPlugin-support.patch
similarity index 89%
rename from openssh/Patches/0020-PubKeyPlugin-support.patch
rename to openssh/Patches/0019-PubKeyPlugin-support.patch
index 3cba258..aca3a93 100644
--- a/openssh/Patches/0020-PubKeyPlugin-support.patch
+++ b/openssh/Patches/0019-PubKeyPlugin-support.patch
@@ -1,7 +1,7 @@
-From 730e53f3bebc365d2d2a2b48679e89196f7a3aee Mon Sep 17 00:00:00 2001
+From bebfcbdd79b0124d599bed2b551cdab15088d3d9 Mon Sep 17 00:00:00 2001
 From: Alex Wilson <alex.wilson@joyent.com>
 Date: Mon, 3 Aug 2015 16:27:44 -0700
-Subject: [PATCH 20/34] PubKeyPlugin support
+Subject: [PATCH 19/34] PubKeyPlugin support
 
 This adds the PubKeyPlugin directive and associated code from
 SunSSH, allowing an in-process shared library to be called
@@ -13,7 +13,7 @@ into to check public keys for authentication.
  3 files changed, 155 insertions(+)
 
 diff --git a/auth2-pubkey.c b/auth2-pubkey.c
-index 41b34ae..c920e49 100644
+index 20f3309e..01daef4a 100644
 --- a/auth2-pubkey.c
 +++ b/auth2-pubkey.c
 @@ -22,6 +22,11 @@
@@ -58,7 +58,7 @@ index 41b34ae..c920e49 100644
  static int
  userauth_pubkey(Authctxt *authctxt)
  {
-@@ -1038,6 +1054,125 @@ user_key_command_allowed2(struct passwd *user_pw, Key *key)
+@@ -1071,6 +1087,125 @@ user_key_command_allowed2(struct passwd *user_pw, Key *key)
  	return found_key;
  }
  
@@ -184,7 +184,7 @@ index 41b34ae..c920e49 100644
  /*
   * Check whether key authenticates and authorises the user.
   */
-@@ -1056,6 +1191,10 @@ user_key_allowed(struct passwd *pw, Key *key, int auth_attempt)
+@@ -1089,6 +1224,10 @@ user_key_allowed(struct passwd *pw, Key *key, int auth_attempt)
  	if (success)
  		return success;
  
@@ -196,10 +196,10 @@ index 41b34ae..c920e49 100644
  	if (success > 0)
  		return success;
 diff --git a/servconf.c b/servconf.c
-index 157a64a..7e6c7f8 100644
+index 881edd95..b492f32b 100644
 --- a/servconf.c
 +++ b/servconf.c
-@@ -182,6 +182,7 @@ initialize_server_options(ServerOptions *options)
+@@ -178,6 +178,7 @@ initialize_server_options(ServerOptions *options)
  	 */
  	options->pam_service_per_authmethod = 1;
  #endif
@@ -207,23 +207,23 @@ index 157a64a..7e6c7f8 100644
  }
  
  /* Returns 1 if a string option is unset or set to "none" or 0 otherwise. */
-@@ -472,6 +473,7 @@ typedef enum {
+@@ -459,6 +460,7 @@ typedef enum {
  	sAuthenticationMethods, sHostKeyAgent, sPermitUserRC,
  	sStreamLocalBindMask, sStreamLocalBindUnlink,
- 	sAllowStreamLocalForwarding, sFingerprintHash,
+ 	sAllowStreamLocalForwarding, sFingerprintHash, sDisableForwarding,
 +	sPubKeyPlugin,
- 	sDeprecated, sUnsupported
+ 	sDeprecated, sIgnore, sUnsupported
  } ServerOpCodes;
  
-@@ -647,6 +649,7 @@ static struct {
- 	{ "streamlocalbindunlink", sStreamLocalBindUnlink, SSHCFG_ALL },
+@@ -641,6 +643,7 @@ static struct {
  	{ "allowstreamlocalforwarding", sAllowStreamLocalForwarding, SSHCFG_ALL },
  	{ "fingerprinthash", sFingerprintHash, SSHCFG_GLOBAL },
+ 	{ "disableforwarding", sDisableForwarding, SSHCFG_ALL },
 +	{ "pubkeyplugin", sPubKeyPlugin, SSHCFG_ALL },
  	{ NULL, sBadOption, 0 }
  };
  
-@@ -1969,6 +1972,18 @@ process_server_config_line(ServerOptions *options, char *line,
+@@ -1964,6 +1967,18 @@ process_server_config_line(ServerOptions *options, char *line,
  		}
  		break;
  
@@ -240,20 +240,20 @@ index 157a64a..7e6c7f8 100644
 +		break;
 +
  	case sDeprecated:
- 		logit("%s line %d: Deprecated option %s",
- 		    filename, linenum, arg);
+ 	case sIgnore:
+ 	case sUnsupported:
 diff --git a/servconf.h b/servconf.h
-index 2175645..80e152f 100644
+index 729819e7..4197ffde 100644
 --- a/servconf.h
 +++ b/servconf.h
-@@ -206,6 +206,7 @@ typedef struct {
+@@ -201,6 +201,7 @@ typedef struct {
  #endif
-         
+ 
  	int	fingerprint_hash;
 +	char   *pubkey_plugin;
  }       ServerOptions;
  
  /* Information about the incoming connection as used by Match */
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/0021-Compatibility-fix-for-ListenAddress.patch b/openssh/Patches/0020-Compatibility-fix-for-ListenAddress.patch
similarity index 82%
rename from openssh/Patches/0021-Compatibility-fix-for-ListenAddress.patch
rename to openssh/Patches/0020-Compatibility-fix-for-ListenAddress.patch
index a71b5f7..bbae224 100644
--- a/openssh/Patches/0021-Compatibility-fix-for-ListenAddress.patch
+++ b/openssh/Patches/0020-Compatibility-fix-for-ListenAddress.patch
@@ -1,7 +1,7 @@
-From 89cc9519a677be0208678a3e3c80584b4f7c7a74 Mon Sep 17 00:00:00 2001
+From f249fcbe9cbf0625fa294e731a18cbd04a42a96e Mon Sep 17 00:00:00 2001
 From: Alex Wilson <alex.wilson@joyent.com>
 Date: Mon, 3 Aug 2015 17:27:41 -0700
-Subject: [PATCH 21/34] Compatibility fix for "ListenAddress ::"
+Subject: [PATCH 20/34] Compatibility fix for "ListenAddress ::"
 
 In SunSSH, a config that specifies only "ListenAddress ::" in
 fact will listen on both IPv4 and IPv6.
@@ -10,10 +10,10 @@ fact will listen on both IPv4 and IPv6.
  1 file changed, 13 insertions(+), 2 deletions(-)
 
 diff --git a/servconf.c b/servconf.c
-index 7e6c7f8..1b6cc34 100644
+index b492f32b..1501af6a 100644
 --- a/servconf.c
 +++ b/servconf.c
-@@ -769,11 +769,22 @@ process_queued_listen_addrs(ServerOptions *options)
+@@ -763,11 +763,22 @@ process_queued_listen_addrs(ServerOptions *options)
  		options->address_family = AF_UNSPEC;
  
  	for (i = 0; i < options->num_queued_listens; i++) {
@@ -39,5 +39,5 @@ index 7e6c7f8..1b6cc34 100644
  	options->queued_listen_addrs = NULL;
  	free(options->queued_listen_ports);
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/0023-Try-to-create-privsep-chroot-dir-if-it-doesn-t-exist.patch b/openssh/Patches/0021-Try-to-create-privsep-chroot-dir-if-it-doesn-t-exist.patch
similarity index 82%
rename from openssh/Patches/0023-Try-to-create-privsep-chroot-dir-if-it-doesn-t-exist.patch
rename to openssh/Patches/0021-Try-to-create-privsep-chroot-dir-if-it-doesn-t-exist.patch
index 164a0f5..2a68a2e 100644
--- a/openssh/Patches/0023-Try-to-create-privsep-chroot-dir-if-it-doesn-t-exist.patch
+++ b/openssh/Patches/0021-Try-to-create-privsep-chroot-dir-if-it-doesn-t-exist.patch
@@ -1,7 +1,7 @@
-From d383529c65321d6c0fa10230b3d3f05941fd20eb Mon Sep 17 00:00:00 2001
+From 9dc43b8491b187d32a69df9f58d7a00508deb23d Mon Sep 17 00:00:00 2001
 From: Alex Wilson <alex.wilson@joyent.com>
 Date: Wed, 5 Aug 2015 12:25:15 -0700
-Subject: [PATCH 23/34] Try to create privsep chroot dir if it doesn't exist
+Subject: [PATCH 21/34] Try to create privsep chroot dir if it doesn't exist
  yet
 
 ---
@@ -9,10 +9,10 @@ Subject: [PATCH 23/34] Try to create privsep chroot dir if it doesn't exist
  1 file changed, 22 insertions(+), 3 deletions(-)
 
 diff --git a/sshd.c b/sshd.c
-index f34d804..a912c1c 100644
+index e460c238..67171704 100644
 --- a/sshd.c
 +++ b/sshd.c
-@@ -1917,11 +1917,30 @@ main(int ac, char **av)
+@@ -1762,11 +1762,30 @@ main(int ac, char **av)
  
  	if (use_privsep) {
  		struct stat st;
@@ -47,5 +47,5 @@ index f34d804..a912c1c 100644
  #ifdef HAVE_CYGWIN
  		if (check_ntsec(_PATH_PRIVSEP_CHROOT_DIR) &&
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/0024-Add-SMF-manifest-and-method-and-install-them.patch b/openssh/Patches/0022-Add-SMF-manifest-and-method-and-install-them.patch
similarity index 97%
rename from openssh/Patches/0024-Add-SMF-manifest-and-method-and-install-them.patch
rename to openssh/Patches/0022-Add-SMF-manifest-and-method-and-install-them.patch
index 0cdc222..1d09c7b 100644
--- a/openssh/Patches/0024-Add-SMF-manifest-and-method-and-install-them.patch
+++ b/openssh/Patches/0022-Add-SMF-manifest-and-method-and-install-them.patch
@@ -1,7 +1,7 @@
-From 81f7496856a90d112ae0e229b81d2b9b5f795e67 Mon Sep 17 00:00:00 2001
+From 3d0716fa9b5aff027f6c8eb793293922e3eea1d2 Mon Sep 17 00:00:00 2001
 From: Alex Wilson <alex.wilson@joyent.com>
 Date: Fri, 7 Aug 2015 12:19:47 -0700
-Subject: [PATCH 24/34] Add SMF manifest and method, and install them
+Subject: [PATCH 22/34] Add SMF manifest and method, and install them
 
 ---
  Makefile.in      |   6 ++
@@ -12,7 +12,7 @@ Subject: [PATCH 24/34] Add SMF manifest and method, and install them
  create mode 100644 smf/method.sh
 
 diff --git a/Makefile.in b/Makefile.in
-index aff7a9c..4a05465 100644
+index 47dbceff..1ab8bc90 100644
 --- a/Makefile.in
 +++ b/Makefile.in
 @@ -27,6 +27,8 @@ SFTP_SERVER=$(libexecdir)/sftp-server
@@ -24,7 +24,7 @@ index aff7a9c..4a05465 100644
  PRIVSEP_PATH=@PRIVSEP_PATH@
  SSH_PRIVSEP_USER=@SSH_PRIVSEP_USER@
  STRIP_OPT=@STRIP_OPT@
-@@ -353,6 +355,10 @@ install-files:
+@@ -364,6 +366,10 @@ install-files:
  	$(INSTALL) -m 644 ssh-keysign.1m.out $(DESTDIR)$(mandir)/$(mansubdir)1m/ssh-keysign.1m
  	$(INSTALL) -m 644 ssh-pkcs11-helper.1m.out $(DESTDIR)$(mandir)/$(mansubdir)1m/ssh-pkcs11-helper.1m
  	mkdir -p $(ROOTDLIBDIR64) && cp $(srcdir)/sftp64.d $(ROOTDLIBDIR64)/sftp64.d
@@ -37,7 +37,7 @@ index aff7a9c..4a05465 100644
  	if [ ! -d $(DESTDIR)$(sysconfdir) ]; then \
 diff --git a/smf/manifest.xml b/smf/manifest.xml
 new file mode 100644
-index 0000000..5045296
+index 00000000..50452966
 --- /dev/null
 +++ b/smf/manifest.xml
 @@ -0,0 +1,169 @@
@@ -213,7 +213,7 @@ index 0000000..5045296
 \ No newline at end of file
 diff --git a/smf/method.sh b/smf/method.sh
 new file mode 100644
-index 0000000..e91ed55
+index 00000000..e91ed553
 --- /dev/null
 +++ b/smf/method.sh
 @@ -0,0 +1,121 @@
@@ -340,5 +340,5 @@ index 0000000..e91ed55
 +exit $?
 \ No newline at end of file
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/0022-Hack-around-umac_ctx-name-punning.patch b/openssh/Patches/0022-Hack-around-umac_ctx-name-punning.patch
deleted file mode 100644
index b59e888..0000000
--- a/openssh/Patches/0022-Hack-around-umac_ctx-name-punning.patch
+++ /dev/null
@@ -1,35 +0,0 @@
-From 50ebb4d67f3f494216ec16abe82a6a67ffb1e80c Mon Sep 17 00:00:00 2001
-From: Alex Wilson <alex.wilson@joyent.com>
-Date: Wed, 5 Aug 2015 10:57:08 -0700
-Subject: [PATCH 22/34] Hack around umac_ctx name-punning
-
-OpenSSH builds the file umac.c twice, once as is, and once using
-the preprocessor to rename everything to umac128_*.
-
-Unfortunately, it does not rename the struct umac_ctx, which ends
-up being used by both .o files to talk about completely different
-structs (the preprocessor macros change its size).
-
-This only matters if you care about DWARF/CTF type information,
-which we do, so we add an extra -D to rename the struct in the
-second build of umac.c.
----
- Makefile.in | 2 +-
- 1 file changed, 1 insertion(+), 1 deletion(-)
-
-diff --git a/Makefile.in b/Makefile.in
-index 3e11b3f..aff7a9c 100644
---- a/Makefile.in
-+++ b/Makefile.in
-@@ -226,7 +226,7 @@ umac128.o:	umac.c
- 	$(CC) $(CFLAGS) $(CPPFLAGS) -o umac128.o -c $(srcdir)/umac.c \
- 	    -DUMAC_OUTPUT_LEN=16 -Dumac_new=umac128_new \
- 	    -Dumac_update=umac128_update -Dumac_final=umac128_final \
--	    -Dumac_delete=umac128_delete
-+	    -Dumac_delete=umac128_delete -Dumac_ctx=umac128_ctx
- 
- # dtrace sftp
- sftp_provider.h: $(srcdir)/sftp_provider.d
--- 
-2.5.4 (Apple Git-61)
-
diff --git a/openssh/Patches/0025-Make-default-sshd_config-more-like-the-old-illumos-o.patch b/openssh/Patches/0023-Make-default-sshd_config-more-like-the-old-illumos-o.patch
similarity index 69%
rename from openssh/Patches/0025-Make-default-sshd_config-more-like-the-old-illumos-o.patch
rename to openssh/Patches/0023-Make-default-sshd_config-more-like-the-old-illumos-o.patch
index be0eaa5..c1acc74 100644
--- a/openssh/Patches/0025-Make-default-sshd_config-more-like-the-old-illumos-o.patch
+++ b/openssh/Patches/0023-Make-default-sshd_config-more-like-the-old-illumos-o.patch
@@ -1,14 +1,14 @@
-From c14527246e887cf64453df036f4da4666ed8c166 Mon Sep 17 00:00:00 2001
+From 90d9c68e06413cce7f4d82b51c7549c009efc9a7 Mon Sep 17 00:00:00 2001
 From: Alex Wilson <alex.wilson@joyent.com>
 Date: Fri, 7 Aug 2015 13:24:58 -0700
-Subject: [PATCH 25/34] Make default sshd_config more like the old illumos one
+Subject: [PATCH 23/34] Make default sshd_config more like the old illumos one
 
 ---
- sshd_config | 52 +++++++++++++++++++++++++++-------------------------
- 1 file changed, 27 insertions(+), 25 deletions(-)
+ sshd_config | 44 +++++++++++++++++++++++---------------------
+ 1 file changed, 23 insertions(+), 21 deletions(-)
 
 diff --git a/sshd_config b/sshd_config
-index 7322872..05317eb 100644
+index 00e5a728..62027108 100644
 --- a/sshd_config
 +++ b/sshd_config
 @@ -10,7 +10,7 @@
@@ -20,25 +20,10 @@ index 7322872..05317eb 100644
  #AddressFamily any
  #ListenAddress 0.0.0.0
  #ListenAddress ::
-@@ -21,10 +21,10 @@
- # HostKey for protocol version 1
- #HostKey /etc/ssh/ssh_host_key
- # HostKeys for protocol version 2
--#HostKey /etc/ssh/ssh_host_rsa_key
--#HostKey /etc/ssh/ssh_host_dsa_key
--#HostKey /etc/ssh/ssh_host_ecdsa_key
--#HostKey /etc/ssh/ssh_host_ed25519_key
-+HostKey /var/ssh/ssh_host_rsa_key
-+HostKey /var/ssh/ssh_host_dsa_key
-+HostKey /var/ssh/ssh_host_ecdsa_key
-+HostKey /var/ssh/ssh_host_ed25519_key
- 
- # Lifetime and size of ephemeral version 1 server key
- #KeyRegenerationInterval 1h
-@@ -35,13 +35,13 @@
+@@ -24,13 +24,13 @@
+ #RekeyLimit default none
  
  # Logging
- # obsoletes QuietMode and FascistLogging
 -#SyslogFacility AUTH
 -#LogLevel INFO
 +SyslogFacility AUTH
@@ -52,7 +37,7 @@ index 7322872..05317eb 100644
  #StrictModes yes
  #MaxAuthTries 6
  #MaxSessions 10
-@@ -69,8 +69,8 @@ AuthorizedKeysFile	.ssh/authorized_keys
+@@ -55,8 +55,8 @@ AuthorizedKeysFile	.ssh/authorized_keys
  #IgnoreRhosts yes
  
  # To disable tunneled clear text passwords, change to no here!
@@ -63,9 +48,9 @@ index 7322872..05317eb 100644
  
  # Change to no to disable s/key passwords
  #ChallengeResponseAuthentication yes
-@@ -86,26 +86,28 @@ AuthorizedKeysFile	.ssh/authorized_keys
- #GSSAPICleanupCredentials yes
- #GSSAPIKeyExchange yes
+@@ -73,26 +73,28 @@ AuthorizedKeysFile	.ssh/authorized_keys
+ #GSSAPIStrictAcceptorCheck yes
+ #GSSAPIKeyExchange no
  
 -# Set this to 'yes' to enable PAM authentication, account processing,
 -# and session processing. If this is enabled, PAM authentication will
@@ -108,5 +93,5 @@ index 7322872..05317eb 100644
  #UseLogin no
  #UsePrivilegeSeparation sandbox
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/0026-Add-with-key-dir-configure-option-to-place-SSH-host-.patch b/openssh/Patches/0024-Add-with-key-dir-configure-option-to-place-SSH-host-.patch
similarity index 86%
rename from openssh/Patches/0026-Add-with-key-dir-configure-option-to-place-SSH-host-.patch
rename to openssh/Patches/0024-Add-with-key-dir-configure-option-to-place-SSH-host-.patch
index 350f06c..2502a32 100644
--- a/openssh/Patches/0026-Add-with-key-dir-configure-option-to-place-SSH-host-.patch
+++ b/openssh/Patches/0024-Add-with-key-dir-configure-option-to-place-SSH-host-.patch
@@ -1,17 +1,17 @@
-From 42365d84bd37d35583317b52936024f502ce5102 Mon Sep 17 00:00:00 2001
+From eae4973dfe1d2aa5cdc5d48530297350e32e3022 Mon Sep 17 00:00:00 2001
 From: Alex Wilson <alex.wilson@joyent.com>
 Date: Fri, 7 Aug 2015 13:32:53 -0700
-Subject: [PATCH 26/34] Add --with-key-dir configure option to place SSH host
+Subject: [PATCH 24/34] Add --with-key-dir configure option to place SSH host
  keys
 
 ---
  Makefile.in  | 12 +++++++-----
  configure.ac | 16 ++++++++++++++++
- pathnames.h  | 16 ++++++++++------
- 3 files changed, 33 insertions(+), 11 deletions(-)
+ pathnames.h  | 19 +++++++++++++------
+ 3 files changed, 36 insertions(+), 11 deletions(-)
 
 diff --git a/Makefile.in b/Makefile.in
-index 4a05465..c70f71f 100644
+index 1ab8bc90..3a2a840d 100644
 --- a/Makefile.in
 +++ b/Makefile.in
 @@ -18,6 +18,7 @@ sysconfdir=@sysconfdir@
@@ -39,7 +39,7 @@ index 4a05465..c70f71f 100644
  	-e 's|/var/run/sshd.pid|$(piddir)/sshd.pid|g' \
  	-e 's|/etc/moduli|$(sysconfdir)/moduli|g' \
  	-e 's|/etc/ssh/moduli|$(sysconfdir)/moduli|g' \
-@@ -359,6 +360,7 @@ install-files:
+@@ -370,6 +371,7 @@ install-files:
  	$(srcdir)/mkinstalldirs $(SMFNETMANIDIR)
  	$(INSTALL) -m 555 smf/method.sh $(SMFMETHODDIR)/sshd
  	$(INSTALL) -m 444 smf/manifest.xml $(SMFNETMANIDIR)/ssh.xml
@@ -48,10 +48,10 @@ index 4a05465..c70f71f 100644
  install-sysconf:
  	if [ ! -d $(DESTDIR)$(sysconfdir) ]; then \
 diff --git a/configure.ac b/configure.ac
-index 4192a45..1846eb2 100644
+index 1635897c..c7a8e662 100644
 --- a/configure.ac
 +++ b/configure.ac
-@@ -4655,6 +4655,20 @@ AC_DEFINE_UNQUOTED([_PATH_SSH_PIDDIR], ["$piddir"],
+@@ -4780,6 +4780,20 @@ AC_DEFINE_UNQUOTED([_PATH_SSH_PIDDIR], ["$piddir"],
  	[Specify location of ssh.pid])
  AC_SUBST([piddir])
  
@@ -72,7 +72,7 @@ index 4192a45..1846eb2 100644
  dnl allow user to disable some login recording features
  AC_ARG_ENABLE([lastlog],
  	[  --disable-lastlog       disable use of lastlog even if detected [no]],
-@@ -4959,12 +4973,14 @@ G=`eval echo ${piddir}` ; G=`eval echo ${G}`
+@@ -5085,12 +5099,14 @@ G=`eval echo ${piddir}` ; G=`eval echo ${G}`
  H=`eval echo ${PRIVSEP_PATH}` ; H=`eval echo ${H}`
  I=`eval echo ${user_path}` ; I=`eval echo ${I}`
  J=`eval echo ${superuser_path}` ; J=`eval echo ${J}`
@@ -88,7 +88,7 @@ index 4192a45..1846eb2 100644
  echo "                      Manual pages: $F"
  echo "                          PID file: $G"
 diff --git a/pathnames.h b/pathnames.h
-index ec89fc6..0b2281b 100644
+index f5e11ab1..7915c405 100644
 --- a/pathnames.h
 +++ b/pathnames.h
 @@ -22,6 +22,10 @@
@@ -102,7 +102,7 @@ index ec89fc6..0b2281b 100644
  /*
   * System-wide file containing host keys of known hosts.  This file should be
   * world-readable.
-@@ -36,12 +40,12 @@
+@@ -36,12 +40,15 @@
   */
  #define _PATH_SERVER_CONFIG_FILE	SSHDIR "/sshd_config"
  #define _PATH_HOST_CONFIG_FILE		SSHDIR "/ssh_config"
@@ -112,15 +112,18 @@ index ec89fc6..0b2281b 100644
 -#define _PATH_HOST_ED25519_KEY_FILE	SSHDIR "/ssh_host_ed25519_key"
 -#define _PATH_HOST_RSA_KEY_FILE		SSHDIR "/ssh_host_rsa_key"
 -#define _PATH_DH_MODULI			SSHDIR "/moduli"
++
 +#define _PATH_HOST_KEY_FILE		SSHKEYDIR "/ssh_host_key"
 +#define _PATH_HOST_DSA_KEY_FILE		SSHKEYDIR "/ssh_host_dsa_key"
 +#define _PATH_HOST_ECDSA_KEY_FILE	SSHKEYDIR "/ssh_host_ecdsa_key"
 +#define _PATH_HOST_ED25519_KEY_FILE	SSHKEYDIR "/ssh_host_ed25519_key"
 +#define _PATH_HOST_RSA_KEY_FILE		SSHKEYDIR "/ssh_host_rsa_key"
 +#define _PATH_DH_MODULI			SSHKEYDIR "/moduli"
- /* Backwards compatibility */
- #define _PATH_DH_PRIMES			SSHDIR "/primes"
++/* Backwards compatibility */
++#define _PATH_DH_PRIMES			SSHDIR "/primes"
  
+ #ifndef _PATH_SSH_PROGRAM
+ #define _PATH_SSH_PROGRAM		"/usr/bin/ssh"
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/0027-Re-enable-DSA-keys-for-pk-auth.patch b/openssh/Patches/0025-Re-enable-DSA-keys-for-pk-auth.patch
similarity index 73%
rename from openssh/Patches/0027-Re-enable-DSA-keys-for-pk-auth.patch
rename to openssh/Patches/0025-Re-enable-DSA-keys-for-pk-auth.patch
index 0589908..e89616d 100644
--- a/openssh/Patches/0027-Re-enable-DSA-keys-for-pk-auth.patch
+++ b/openssh/Patches/0025-Re-enable-DSA-keys-for-pk-auth.patch
@@ -1,7 +1,7 @@
-From 6fdd7632d7cfad601e3b354bc2a676932050060e Mon Sep 17 00:00:00 2001
+From cadf5558e7cb4df712b3606e4c172762846a242a Mon Sep 17 00:00:00 2001
 From: Alex Wilson <alex.wilson@joyent.com>
 Date: Wed, 19 Aug 2015 11:35:32 -0700
-Subject: [PATCH 27/34] Re-enable DSA keys for pk auth
+Subject: [PATCH 25/34] Re-enable DSA keys for pk auth
 
 ---
  myproposal.h  | 4 +++-
@@ -10,10 +10,10 @@ Subject: [PATCH 27/34] Re-enable DSA keys for pk auth
  3 files changed, 7 insertions(+), 3 deletions(-)
 
 diff --git a/myproposal.h b/myproposal.h
-index bdd0596..7b15897 100644
+index 072e36ec..f6322a73 100644
 --- a/myproposal.h
 +++ b/myproposal.h
-@@ -99,11 +99,13 @@
+@@ -108,11 +108,13 @@
  	HOSTKEY_ECDSA_CERT_METHODS \
  	"ssh-ed25519-cert-v01@openssh.com," \
  	"ssh-rsa-cert-v01@openssh.com," \
@@ -29,10 +29,10 @@ index bdd0596..7b15897 100644
  /* the actual algorithms */
  
 diff --git a/ssh_config.4 b/ssh_config.4
-index f4b471e..0e17ef9 100644
+index 4492ecaf..dadd092a 100644
 --- a/ssh_config.4
 +++ b/ssh_config.4
-@@ -1344,8 +1344,9 @@ ecdsa-sha2-nistp384-cert-v01@openssh.com,
+@@ -1314,8 +1314,9 @@ ecdsa-sha2-nistp384-cert-v01@openssh.com,
  ecdsa-sha2-nistp521-cert-v01@openssh.com,
  ssh-ed25519-cert-v01@openssh.com,
  ssh-rsa-cert-v01@openssh.com,
@@ -42,12 +42,12 @@ index f4b471e..0e17ef9 100644
 +ssh-ed25519,rsa-sha2-512,rsa-sha2-256,ssh-rsa,ssh-dss
  .Ed
  .Pp
- The
+ The list of available key types may also be obtained using
 diff --git a/sshd_config.4 b/sshd_config.4
-index 0dec36c..8f0dbc4 100644
+index de03ac5e..6a6f940b 100644
 --- a/sshd_config.4
 +++ b/sshd_config.4
-@@ -1377,8 +1377,9 @@ ecdsa-sha2-nistp384-cert-v01@openssh.com,
+@@ -1312,8 +1312,9 @@ ecdsa-sha2-nistp384-cert-v01@openssh.com,
  ecdsa-sha2-nistp521-cert-v01@openssh.com,
  ssh-ed25519-cert-v01@openssh.com,
  ssh-rsa-cert-v01@openssh.com,
@@ -57,7 +57,7 @@ index 0dec36c..8f0dbc4 100644
 +ssh-ed25519,rsa-sha2-512,rsa-sha2-256,ssh-rsa,ssh-dss
  .Ed
  .Pp
- The
+ The list of available key types may also be obtained using
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/0028-Don-t-use-krb5-config-to-check-for-GSSAPI-on-Illumos.patch b/openssh/Patches/0026-Don-t-use-krb5-config-to-check-for-GSSAPI-on-Illumos.patch
similarity index 71%
rename from openssh/Patches/0028-Don-t-use-krb5-config-to-check-for-GSSAPI-on-Illumos.patch
rename to openssh/Patches/0026-Don-t-use-krb5-config-to-check-for-GSSAPI-on-Illumos.patch
index 531764a..1d1e3dc 100644
--- a/openssh/Patches/0028-Don-t-use-krb5-config-to-check-for-GSSAPI-on-Illumos.patch
+++ b/openssh/Patches/0026-Don-t-use-krb5-config-to-check-for-GSSAPI-on-Illumos.patch
@@ -1,18 +1,18 @@
-From 6df7c448336d7997c27fb13b18154d4cc2aa9f7b Mon Sep 17 00:00:00 2001
+From e9a98be2ca1f9f5ae8c0e483e94830e9d0d89d18 Mon Sep 17 00:00:00 2001
 From: Alex Wilson <alex.wilson@joyent.com>
 Date: Fri, 21 Aug 2015 18:47:46 -0700
-Subject: [PATCH 28/34] Don't use krb5-config to check for GSSAPI on Illumos
+Subject: [PATCH 26/34] Don't use krb5-config to check for GSSAPI on Illumos
 
 ---
  configure.ac | 7 ++++++-
  1 file changed, 6 insertions(+), 1 deletion(-)
 
 diff --git a/configure.ac b/configure.ac
-index 1846eb2..580fa5c 100644
+index c7a8e662..5e64db3b 100644
 --- a/configure.ac
 +++ b/configure.ac
-@@ -4081,6 +4081,11 @@ AC_ARG_WITH([kerberos5],
- 		AC_PATH_PROG([KRB5CONF], [krb5-config],
+@@ -4207,6 +4207,11 @@ AC_ARG_WITH([kerberos5],
+ 		AC_PATH_TOOL([KRB5CONF], [krb5-config],
  			     [$KRB5ROOT/bin/krb5-config],
  			     [$KRB5ROOT/bin:$PATH])
 +		# Illumos has GSS but krb5-config doesn't talk about it
@@ -23,15 +23,15 @@ index 1846eb2..580fa5c 100644
  		if test -x $KRB5CONF ; then
  			K5CFLAGS="`$KRB5CONF --cflags`"
  			K5LIBS="`$KRB5CONF --libs`"
-@@ -4122,7 +4127,7 @@ AC_ARG_WITH([kerberos5],
+@@ -4248,7 +4253,7 @@ AC_ARG_WITH([kerberos5],
  					 AC_CHECK_LIB([des], [des_cbc_encrypt],
  					   [K5LIBS="$K5LIBS -ldes"])
  				       ], [ AC_MSG_RESULT([no])
 -					 K5LIBS="-lkrb5 -lk5crypto -lcom_err"
 +					 K5LIBS="-lkrb5"
- 				       
  			])
  			AC_SEARCH_LIBS([dn_expand], [resolv])
+ 
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/0029-Set-default-sshd-options-based-on-etc-default-login.patch b/openssh/Patches/0027-Set-default-sshd-options-based-on-etc-default-login.patch
similarity index 85%
rename from openssh/Patches/0029-Set-default-sshd-options-based-on-etc-default-login.patch
rename to openssh/Patches/0027-Set-default-sshd-options-based-on-etc-default-login.patch
index 3791b83..98a1369 100644
--- a/openssh/Patches/0029-Set-default-sshd-options-based-on-etc-default-login.patch
+++ b/openssh/Patches/0027-Set-default-sshd-options-based-on-etc-default-login.patch
@@ -1,7 +1,7 @@
-From 3f7d2b018be50877e3e3489fbe5735fde48ed8e8 Mon Sep 17 00:00:00 2001
+From b9a68fe508d3de2c54b2b53efd7647fc8528df6c Mon Sep 17 00:00:00 2001
 From: Alex Wilson <alex.wilson@joyent.com>
 Date: Mon, 24 Aug 2015 18:57:27 -0700
-Subject: [PATCH 29/34] Set default sshd options based on /etc/default/login
+Subject: [PATCH 27/34] Set default sshd options based on /etc/default/login
 
 ---
  pathnames.h   |  1 +
@@ -10,10 +10,10 @@ Subject: [PATCH 29/34] Set default sshd options based on /etc/default/login
  3 files changed, 77 insertions(+), 2 deletions(-)
 
 diff --git a/pathnames.h b/pathnames.h
-index 0b2281b..11c9bf6 100644
+index 7915c405..40284a1f 100644
 --- a/pathnames.h
 +++ b/pathnames.h
-@@ -46,6 +46,7 @@
+@@ -47,6 +47,7 @@
  #define _PATH_HOST_ED25519_KEY_FILE	SSHKEYDIR "/ssh_host_ed25519_key"
  #define _PATH_HOST_RSA_KEY_FILE		SSHKEYDIR "/ssh_host_rsa_key"
  #define _PATH_DH_MODULI			SSHKEYDIR "/moduli"
@@ -22,7 +22,7 @@ index 0b2281b..11c9bf6 100644
  #define _PATH_DH_PRIMES			SSHDIR "/primes"
  
 diff --git a/servconf.c b/servconf.c
-index 1b6cc34..0ee50e3 100644
+index 1501af6a..91f8c942 100644
 --- a/servconf.c
 +++ b/servconf.c
 @@ -30,6 +30,7 @@
@@ -33,7 +33,7 @@ index 1b6cc34..0ee50e3 100644
  #include <errno.h>
  #ifdef HAVE_UTIL_H
  #include <util.h>
-@@ -192,6 +193,64 @@ option_clear_or_none(const char *o)
+@@ -188,6 +189,64 @@ option_clear_or_none(const char *o)
  	return o == NULL || strcasecmp(o, "none") == 0;
  }
  
@@ -98,20 +98,20 @@ index 1b6cc34..0ee50e3 100644
  static void
  assemble_algorithms(ServerOptions *o)
  {
-@@ -220,6 +279,8 @@ fill_default_server_options(ServerOptions *options)
+@@ -216,6 +275,8 @@ fill_default_server_options(ServerOptions *options)
  		options->use_pam = 0;
  #endif
  
 +	deflt_fill_default_server_options(options);
 +
  	/* Standard Options */
- 	if (options->protocol == SSH_PROTO_UNKNOWN)
- 		options->protocol = SSH_PROTO_2;
+ 	if (options->num_host_key_files == 0) {
+ 		/* fill default hostkeys for protocols */
 diff --git a/sshd_config.4 b/sshd_config.4
-index 8f0dbc4..85c7f26 100644
+index 6a6f940b..0b2393dd 100644
 --- a/sshd_config.4
 +++ b/sshd_config.4
-@@ -1137,7 +1137,13 @@ Specifies the maximum number of authentication attempts permitted per
+@@ -1099,7 +1099,13 @@ Specifies the maximum number of authentication attempts permitted per
  connection.
  Once the number of failures reaches half this value,
  additional failures are logged.
@@ -126,12 +126,12 @@ index 8f0dbc4..85c7f26 100644
  .It Cm MaxSessions
  Specifies the maximum number of open shell, login or subsystem (e.g. sftp)
  sessions permitted per network connection.
-@@ -1196,7 +1202,14 @@ The default is
+@@ -1150,7 +1156,14 @@ The default is
  When password authentication is allowed, it specifies whether the
  server allows login to accounts with empty password strings.
  The default is
--.Dq no .
-+.Dq no
+-.Cm no .
++.Cm no
 +unless
 +.Dq PASSREQ=YES
 +is present in
@@ -143,5 +143,5 @@ index 8f0dbc4..85c7f26 100644
  Specifies the destinations to which TCP port forwarding is permitted.
  The forwarding specification must be one of the following forms:
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/0030-Compatibility-for-SunSSH_1.5-should-include-old-DH-K.patch b/openssh/Patches/0028-Compatibility-for-SunSSH_1.5-should-include-old-DH-K.patch
similarity index 92%
rename from openssh/Patches/0030-Compatibility-for-SunSSH_1.5-should-include-old-DH-K.patch
rename to openssh/Patches/0028-Compatibility-for-SunSSH_1.5-should-include-old-DH-K.patch
index cbf428f..891c2eb 100644
--- a/openssh/Patches/0030-Compatibility-for-SunSSH_1.5-should-include-old-DH-K.patch
+++ b/openssh/Patches/0028-Compatibility-for-SunSSH_1.5-should-include-old-DH-K.patch
@@ -1,7 +1,7 @@
-From 1aaf7bb147a3e1f382bc997f7ae3debd5d476fce Mon Sep 17 00:00:00 2001
+From 7e2514ecfe99fd49f5134a8cecc8b130b2ff2375 Mon Sep 17 00:00:00 2001
 From: Alex Wilson <alex.wilson@joyent.com>
 Date: Fri, 4 Sep 2015 10:38:28 -0700
-Subject: [PATCH 30/34] Compatibility for SunSSH_1.5* should include old DH KEx
+Subject: [PATCH 28/34] Compatibility for SunSSH_1.5* should include old DH KEx
  algos
 
 We use the kex compat mechanism here to recognise old SunSSH
@@ -15,7 +15,7 @@ new daemon.
  1 file changed, 30 insertions(+), 1 deletion(-)
 
 diff --git a/compat.c b/compat.c
-index 5583804..e2bebee 100644
+index 69a104fb..55fb3d93 100644
 --- a/compat.c
 +++ b/compat.c
 @@ -92,7 +92,9 @@ compat_datafellows(const char *version)
@@ -71,5 +71,5 @@ index 5583804..e2bebee 100644
  	debug2("%s: compat KEX proposal: %s", __func__, p);
  	if (*p == '\0')
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/0031-Accept-LANG-and-LC_-environment-variables-from-clien.patch b/openssh/Patches/0029-Accept-LANG-and-LC_-environment-variables-from-clien.patch
similarity index 81%
rename from openssh/Patches/0031-Accept-LANG-and-LC_-environment-variables-from-clien.patch
rename to openssh/Patches/0029-Accept-LANG-and-LC_-environment-variables-from-clien.patch
index f5bd6f6..22e6b9c 100644
--- a/openssh/Patches/0031-Accept-LANG-and-LC_-environment-variables-from-clien.patch
+++ b/openssh/Patches/0029-Accept-LANG-and-LC_-environment-variables-from-clien.patch
@@ -1,23 +1,23 @@
-From af59564785eeeef3c8f9441a41c36c25cfcdd282 Mon Sep 17 00:00:00 2001
+From c18e1f4dbc22d1dbe3b68b75a108bbbcfca86233 Mon Sep 17 00:00:00 2001
 From: Alex Wilson <alex.wilson@joyent.com>
 Date: Fri, 4 Sep 2015 11:04:30 -0700
-Subject: [PATCH 31/34] Accept LANG and LC_* environment variables from clients
+Subject: [PATCH 29/34] Accept LANG and LC_* environment variables from clients
  by default
 
 This preserves most of the old SunSSH locale negotiation
 behaviour (at least the parts that are most commonly used).
 ---
  servconf.c    | 27 +++++++++++++++++++++++++--
- session.c     | 26 ++++++++++++++++++++++++--
+ session.c     | 25 +++++++++++++++++++++++--
  sshd_config   |  4 ++++
  sshd_config.4 | 13 ++++++++++++-
- 4 files changed, 65 insertions(+), 5 deletions(-)
+ 4 files changed, 64 insertions(+), 5 deletions(-)
 
 diff --git a/servconf.c b/servconf.c
-index 0ee50e3..b91fd7d 100644
+index 91f8c942..6f1f0068 100644
 --- a/servconf.c
 +++ b/servconf.c
-@@ -155,7 +155,7 @@ initialize_server_options(ServerOptions *options)
+@@ -150,7 +150,7 @@ initialize_server_options(ServerOptions *options)
  	options->client_alive_interval = -1;
  	options->client_alive_count_max = -1;
  	options->num_authkeys_files = 0;
@@ -26,7 +26,7 @@ index 0ee50e3..b91fd7d 100644
  	options->permit_tun = -1;
  	options->num_permitted_opens = -1;
  	options->adm_forced_command = NULL;
-@@ -423,6 +423,25 @@ fill_default_server_options(ServerOptions *options)
+@@ -400,6 +400,25 @@ fill_default_server_options(ServerOptions *options)
  		options->max_sessions = DEFAULT_SESSIONS_MAX;
  	if (options->use_dns == -1)
  		options->use_dns = 0;
@@ -52,7 +52,7 @@ index 0ee50e3..b91fd7d 100644
  	if (options->client_alive_interval == -1)
  		options->client_alive_interval = 0;
  	if (options->client_alive_count_max == -1)
-@@ -1773,11 +1792,15 @@ process_server_config_line(ServerOptions *options, char *line,
+@@ -1748,11 +1767,15 @@ process_server_config_line(ServerOptions *options, char *line,
  			if (strchr(arg, '=') != NULL)
  				fatal("%s line %d: Invalid environment name.",
  				    filename, linenum);
@@ -68,7 +68,7 @@ index 0ee50e3..b91fd7d 100644
  			options->accept_env[options->num_accept_env++] =
  			    xstrdup(arg);
  		}
-@@ -2219,7 +2242,7 @@ copy_set_server_options(ServerOptions *dst, ServerOptions *src, int preauth)
+@@ -2224,7 +2247,7 @@ copy_set_server_options(ServerOptions *dst, ServerOptions *src, int preauth)
  	} \
  } while(0)
  #define M_CP_STRARRAYOPT(n, num_n) do {\
@@ -78,10 +78,10 @@ index 0ee50e3..b91fd7d 100644
  			dst->n[dst->num_n] = xstrdup(src->n[dst->num_n]); \
  	} \
 diff --git a/session.c b/session.c
-index 36f8c62..cabd1d2 100644
+index 9586901e..13ee4bbe 100644
 --- a/session.c
 +++ b/session.c
-@@ -1043,6 +1043,18 @@ child_set_env(char ***envp, u_int *envsizep, const char *name,
+@@ -860,6 +860,18 @@ child_set_env(char ***envp, u_int *envsizep, const char *name,
  }
  
  /*
@@ -100,7 +100,7 @@ index 36f8c62..cabd1d2 100644
   * Reads environment variables from the given file and adds/overrides them
   * into the environment.  If the file does not exist, this does nothing.
   * Otherwise, it must consist of empty lines, comments (line starts with '#')
-@@ -1204,6 +1216,16 @@ do_setup_env(Session *s, const char *shell)
+@@ -1022,6 +1034,16 @@ do_setup_env(Session *s, const char *shell)
  	ssh_gssapi_do_child(&env, &envsize);
  #endif
  
@@ -114,25 +114,24 @@ index 36f8c62..cabd1d2 100644
 +	child_inherit_env(&env, &envsize, "LC_MONETARY");
 +	child_inherit_env(&env, &envsize, "LC_MESSAGES");
 +
- 	if (!options.use_login) {
- 		/* Set basic environment. */
- 		for (i = 0; i < s->num_env; i++)
-@@ -1248,8 +1270,8 @@ do_setup_env(Session *s, const char *shell)
- 		/* Normal systems set SHELL by default. */
- 		child_set_env(&env, &envsize, "SHELL", shell);
- 	}
+ 	/* Set basic environment. */
+ 	for (i = 0; i < s->num_env; i++)
+ 		child_set_env(&env, &envsize, s->env[i].name, s->env[i].val);
+@@ -1062,8 +1084,7 @@ do_setup_env(Session *s, const char *shell)
+ 	/* Normal systems set SHELL by default. */
+ 	child_set_env(&env, &envsize, "SHELL", shell);
+ 
 -	if (getenv("TZ"))
 -		child_set_env(&env, &envsize, "TZ", getenv("TZ"));
-+
 +	child_inherit_env(&env, &envsize, "TZ");
  
  #ifdef PER_SESSION_XAUTHFILE
          if (s->auth_file != NULL)
 diff --git a/sshd_config b/sshd_config
-index 05317eb..83c5e01 100644
+index 62027108..9fcf2ca1 100644
 --- a/sshd_config
 +++ b/sshd_config
-@@ -38,6 +38,10 @@ HostKey /var/ssh/ssh_host_ed25519_key
+@@ -27,6 +27,10 @@ Port 22
  SyslogFacility AUTH
  LogLevel INFO
  
@@ -144,7 +143,7 @@ index 05317eb..83c5e01 100644
  
  #LoginGraceTime 2m
 diff --git a/sshd_config.4 b/sshd_config.4
-index 85c7f26..a1456db 100644
+index 0b2393dd..fbd9b1cd 100644
 --- a/sshd_config.4
 +++ b/sshd_config.4
 @@ -85,7 +85,18 @@ directives.
@@ -168,5 +167,5 @@ index 85c7f26..a1456db 100644
  Specifies which address family should be used by
  .Xr sshd 1M .
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/0032-Temporarily-set-ssh-keygen-and-ssh-add-to-old-FP-for.patch b/openssh/Patches/0030-Temporarily-set-ssh-keygen-and-ssh-add-to-old-FP-for.patch
similarity index 94%
rename from openssh/Patches/0032-Temporarily-set-ssh-keygen-and-ssh-add-to-old-FP-for.patch
rename to openssh/Patches/0030-Temporarily-set-ssh-keygen-and-ssh-add-to-old-FP-for.patch
index 72a211e..fbc4c7d 100644
--- a/openssh/Patches/0032-Temporarily-set-ssh-keygen-and-ssh-add-to-old-FP-for.patch
+++ b/openssh/Patches/0030-Temporarily-set-ssh-keygen-and-ssh-add-to-old-FP-for.patch
@@ -1,7 +1,7 @@
-From 1242df0d1cab712ccbb60a0daaacb24e11af120f Mon Sep 17 00:00:00 2001
+From 4479491d407454d2cb248c65877dc48b88d2aed8 Mon Sep 17 00:00:00 2001
 From: Alex Wilson <alex.wilson@joyent.com>
 Date: Wed, 9 Sep 2015 10:36:05 -0700
-Subject: [PATCH 32/34] Temporarily set ssh-keygen and ssh-add to old FP format
+Subject: [PATCH 30/34] Temporarily set ssh-keygen and ssh-add to old FP format
 
 SDC and its users have a lot of scripts that expect ssh-add
 and ssh-keygen to return fingerprints in the old format.
@@ -13,7 +13,7 @@ same output until we have migrated everything over.
  2 files changed, 29 insertions(+), 6 deletions(-)
 
 diff --git a/ssh-add.c b/ssh-add.c
-index fb9a53e..c63488a 100644
+index fb9a53e6..c63488a3 100644
 --- a/ssh-add.c
 +++ b/ssh-add.c
 @@ -52,6 +52,7 @@
@@ -67,7 +67,7 @@ index fb9a53e..c63488a 100644
  				fatal("Invalid hash algorithm \"%s\"", optarg);
  			break;
 diff --git a/ssh-keygen.c b/ssh-keygen.c
-index 4785201..25b8049 100644
+index 2a7939bf..6c0355bb 100644
 --- a/ssh-keygen.c
 +++ b/ssh-keygen.c
 @@ -37,6 +37,7 @@
@@ -134,7 +134,7 @@ index 4785201..25b8049 100644
  	    comment ? comment : "no comment", sshkey_type(public));
  	if (log_level >= SYSLOG_LEVEL_VERBOSE)
  		printf("%s\n", ra);
-@@ -2297,6 +2310,7 @@ main(int argc, char **argv)
+@@ -2303,6 +2316,7 @@ main(int argc, char **argv)
  			break;
  		case 'E':
  			fingerprint_hash = ssh_digest_alg_by_name(optarg);
@@ -143,5 +143,5 @@ index 4785201..25b8049 100644
  				fatal("Invalid hash algorithm \"%s\"", optarg);
  			break;
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/0033-Restore-tcpwrappers-libwrap-support.patch b/openssh/Patches/0031-Restore-tcpwrappers-libwrap-support.patch
similarity index 81%
rename from openssh/Patches/0033-Restore-tcpwrappers-libwrap-support.patch
rename to openssh/Patches/0031-Restore-tcpwrappers-libwrap-support.patch
index 7c4831c..532b2d1 100644
--- a/openssh/Patches/0033-Restore-tcpwrappers-libwrap-support.patch
+++ b/openssh/Patches/0031-Restore-tcpwrappers-libwrap-support.patch
@@ -1,21 +1,21 @@
-From 607f7c1f63e9e7b6fbab274736537177e8e1fd55 Mon Sep 17 00:00:00 2001
+From ddfeb12addf9cba1c815e3786538bb6349779821 Mon Sep 17 00:00:00 2001
 From: Alex Wilson <alex.wilson@joyent.com>
 Date: Wed, 16 Sep 2015 10:54:13 -0700
-Subject: [PATCH 33/34] Restore tcpwrappers/libwrap support
+Subject: [PATCH 31/34] Restore tcpwrappers/libwrap support
 
 This reverts commit f9696566fb41320820f3b257ab564fa321bb3751
 and commit f2719b7c2b8a3b14d778d8a6d8dc729b5174b054.
 ---
  configure.ac | 57 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  sshd.1m      |  7 +++++++
- sshd.c       | 25 +++++++++++++++++++++++++
- 3 files changed, 89 insertions(+)
+ sshd.c       | 29 +++++++++++++++++++++++++++++
+ 3 files changed, 93 insertions(+)
 
 diff --git a/configure.ac b/configure.ac
-index 580fa5c..ed56471 100644
+index 5e64db3b..bf9c5449 100644
 --- a/configure.ac
 +++ b/configure.ac
-@@ -1460,6 +1460,62 @@ AC_ARG_WITH([skey],
+@@ -1494,6 +1494,62 @@ AC_ARG_WITH([skey],
  	]
  )
  
@@ -78,7 +78,7 @@ index 580fa5c..ed56471 100644
  # Check whether user wants to use ldns
  LDNS_MSG="no"
  AC_ARG_WITH(ldns,
-@@ -5010,6 +5066,7 @@ echo "                 KerberosV support: $KRB5_MSG"
+@@ -5136,6 +5192,7 @@ echo "                 KerberosV support: $KRB5_MSG"
  echo "                   SELinux support: $SELINUX_MSG"
  echo "                 Smartcard support: $SCARD_MSG"
  echo "                     S/KEY support: $SKEY_MSG"
@@ -87,10 +87,10 @@ index 580fa5c..ed56471 100644
  echo "                   libedit support: $LIBEDIT_MSG"
  echo "  Solaris process contract support: $SPC_MSG"
 diff --git a/sshd.1m b/sshd.1m
-index 500c4d5..8d096e8 100644
+index 387ea69e..55cf3f0d 100644
 --- a/sshd.1m
 +++ b/sshd.1m
-@@ -880,6 +880,12 @@ the user's home directory becomes accessible.
+@@ -825,6 +825,12 @@ the user's home directory becomes accessible.
  This file should be writable only by the user, and need not be
  readable by anyone else.
  .Pp
@@ -103,7 +103,7 @@ index 500c4d5..8d096e8 100644
  .It Pa /etc/hosts.equiv
  This file is for host-based authentication (see
  .Xr ssh 1 ) .
-@@ -1013,6 +1019,7 @@ Each SSHv2 userauth type has its own PAM service name:
+@@ -956,6 +962,7 @@ Each SSHv2 userauth type has its own PAM service name:
  .Xr ssh-keygen 1 ,
  .Xr ssh-keyscan 1 ,
  .Xr chroot 2 ,
@@ -112,12 +112,12 @@ index 500c4d5..8d096e8 100644
  .Xr moduli 4 ,
  .Xr sshd_config 4 ,
 diff --git a/sshd.c b/sshd.c
-index a912c1c..b8c11de 100644
+index 67171704..75da16b7 100644
 --- a/sshd.c
 +++ b/sshd.c
-@@ -125,6 +125,13 @@
- #include "version.h"
- #include "ssherr.h"
+@@ -127,6 +127,17 @@
+ #include <Security/AuthSession.h>
+ #endif
  
 +#ifdef LIBWRAP
 +#include <tcpd.h>
@@ -126,10 +126,14 @@ index a912c1c..b8c11de 100644
 +int deny_severity;
 +#endif /* LIBWRAP */
 +
- #ifndef O_NOCTTY
- #define O_NOCTTY	0
- #endif
-@@ -2166,6 +2173,24 @@ main(int ac, char **av)
++#ifndef O_NOCTTY
++#define O_NOCTTY	0
++#endif
++
+ /* Re-exec fds */
+ #define REEXEC_DEVCRYPTO_RESERVED_FD	(STDERR_FILENO + 1)
+ #define REEXEC_STARTUP_PIPE_FD		(STDERR_FILENO + 2)
+@@ -1997,6 +2008,24 @@ main(int ac, char **av)
  #ifdef SSH_AUDIT_EVENTS
  	audit_connection_from(remote_ip, remote_port);
  #endif
@@ -155,5 +159,5 @@ index a912c1c..b8c11de 100644
  	/* Log the connection. */
  	laddr = get_local_ipaddr(sock_in);
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/0034-Let-us-put-a-fallback-copy-of-DH-moduli-in-a-system-.patch b/openssh/Patches/0032-Let-us-put-a-fallback-copy-of-DH-moduli-in-a-system-.patch
similarity index 78%
rename from openssh/Patches/0034-Let-us-put-a-fallback-copy-of-DH-moduli-in-a-system-.patch
rename to openssh/Patches/0032-Let-us-put-a-fallback-copy-of-DH-moduli-in-a-system-.patch
index 233532f..df47c2a 100644
--- a/openssh/Patches/0034-Let-us-put-a-fallback-copy-of-DH-moduli-in-a-system-.patch
+++ b/openssh/Patches/0032-Let-us-put-a-fallback-copy-of-DH-moduli-in-a-system-.patch
@@ -1,7 +1,7 @@
-From 503265d13d5dced3a70fdd2b602426c06311e122 Mon Sep 17 00:00:00 2001
+From b9b4229a6f8e2b6ec87caeeb66b1a98b87bd0ead Mon Sep 17 00:00:00 2001
 From: Alex Wilson <alex.wilson@joyent.com>
 Date: Thu, 15 Oct 2015 16:02:37 -0700
-Subject: [PATCH 34/34] Let us put a fallback copy of DH moduli in a system
+Subject: [PATCH 32/34] Let us put a fallback copy of DH moduli in a system
  path
 
 Live distributions like SmartOS can't keep and update default
@@ -11,11 +11,11 @@ that if we can't find one in the SSHKEYDIR.
 ---
  Makefile.in  | 17 +++++------------
  configure.ac | 15 +++++++++++++++
- dh.c         |  3 +++
- 3 files changed, 23 insertions(+), 12 deletions(-)
+ dh.c         |  6 +++++-
+ 3 files changed, 25 insertions(+), 13 deletions(-)
 
 diff --git a/Makefile.in b/Makefile.in
-index c70f71f..5e973f1 100644
+index 3a2a840d..e1f9d8a1 100644
 --- a/Makefile.in
 +++ b/Makefile.in
 @@ -19,6 +19,7 @@ piddir=@piddir@
@@ -37,7 +37,7 @@ index c70f71f..5e973f1 100644
  	-e 's|/etc/ssh/sshrc|$(sysconfdir)/sshrc|g' \
  	-e 's|/usr/X11R6/bin/xauth|$(XAUTH_PATH)|g' \
  	-e 's|/var/empty|$(PRIVSEP_PATH)|g' \
-@@ -361,6 +362,8 @@ install-files:
+@@ -372,6 +373,8 @@ install-files:
  	$(INSTALL) -m 555 smf/method.sh $(SMFMETHODDIR)/sshd
  	$(INSTALL) -m 444 smf/manifest.xml $(SMFNETMANIDIR)/ssh.xml
  	mkdir -p $(DESTDIR)$(keydir)
@@ -46,7 +46,7 @@ index c70f71f..5e973f1 100644
  
  install-sysconf:
  	if [ ! -d $(DESTDIR)$(sysconfdir) ]; then \
-@@ -376,16 +379,6 @@ install-sysconf:
+@@ -387,16 +390,6 @@ install-sysconf:
  	else \
  		echo "$(DESTDIR)$(sysconfdir)/sshd_config already exists, install will not overwrite"; \
  	fi
@@ -64,10 +64,10 @@ index c70f71f..5e973f1 100644
  host-key: ssh-keygen$(EXEEXT)
  	@if [ -z "$(DESTDIR)" ] ; then \
 diff --git a/configure.ac b/configure.ac
-index ed56471..42e24e8 100644
+index bf9c5449..b9a7e7d5 100644
 --- a/configure.ac
 +++ b/configure.ac
-@@ -4730,6 +4730,21 @@ AC_DEFINE_UNQUOTED([SSHKEYDIR], ["$keydir"],
+@@ -4855,6 +4855,21 @@ AC_DEFINE_UNQUOTED([SSHKEYDIR], ["$keydir"],
  	[Specify location of SSH host keys])
  AC_SUBST([keydir])
  
@@ -90,19 +90,22 @@ index ed56471..42e24e8 100644
  AC_ARG_ENABLE([lastlog],
  	[  --disable-lastlog       disable use of lastlog even if detected [no]],
 diff --git a/dh.c b/dh.c
-index 4c639ac..a1a0639 100644
+index 47531242..0d3aca90 100644
 --- a/dh.c
 +++ b/dh.c
-@@ -152,6 +152,9 @@ choose_dh(int min, int wantbits, int max)
+@@ -151,7 +151,11 @@ choose_dh(int min, int wantbits, int max)
+ 	int linenum;
  	struct dhgroup dhg;
  
- 	if ((f = fopen(_PATH_DH_MODULI, "r")) == NULL &&
+-	if ((f = fopen(_PATH_DH_MODULI, "r")) == NULL) {
++	if ((f = fopen(_PATH_DH_MODULI, "r")) == NULL &&
 +#if defined(_PATH_SYS_MODULI)
 +	    (f = fopen(_PATH_SYS_MODULI, "r")) == NULL &&
 +#endif
- 	    (f = fopen(_PATH_DH_PRIMES, "r")) == NULL) {
- 		logit("WARNING: %s does not exist, using fixed modulus",
- 		    _PATH_DH_MODULI);
++	    (f = fopen(_PATH_DH_PRIMES, "r")) == NULL) {
+ 		logit("WARNING: could not open %s (%s), using fixed modulus",
+ 		    _PATH_DH_MODULI, strerror(errno));
+ 		return (dh_new_group_fallback(max));
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/1001-dtrace32.patch b/openssh/Patches/1000-smartos-dtrace32.patch
similarity index 88%
rename from openssh/Patches/1001-dtrace32.patch
rename to openssh/Patches/1000-smartos-dtrace32.patch
index cdbb9f7..b0b4754 100644
--- a/openssh/Patches/1001-dtrace32.patch
+++ b/openssh/Patches/1000-smartos-dtrace32.patch
@@ -1,14 +1,14 @@
-From abeab0b2b8f99ea5cf74943f9437d7ae2268f636 Mon Sep 17 00:00:00 2001
+From 66cd92553066b1d3b2ccbdb9a2407153ad6562ae Mon Sep 17 00:00:00 2001
 From: Alex Wilson <alex.wilson@joyent.com>
 Date: Tue, 22 Dec 2015 14:30:19 -0800
-Subject: [PATCH 1/2] SmartOS local: make dtrace lib 32-bit
+Subject: [PATCH 33/34] SmartOS local: make dtrace lib 32-bit
 
 ---
  Makefile.in | 6 +++---
  1 file changed, 3 insertions(+), 3 deletions(-)
 
 diff --git a/Makefile.in b/Makefile.in
-index 5e973f1..7d5d93c 100644
+index e1f9d8a1..58ac8ed7 100644
 --- a/Makefile.in
 +++ b/Makefile.in
 @@ -28,7 +28,7 @@ ASKPASS_PROGRAM=$(libexecdir)/ssh-askpass
@@ -29,7 +29,7 @@ index 5e973f1..7d5d93c 100644
  	    sftp-server.o -o sftp_provider.o
  
  # special case for sftp-server.o, it includes sftp_provider.h
-@@ -356,7 +356,7 @@ install-files:
+@@ -367,7 +367,7 @@ install-files:
  	$(INSTALL) -m 644 sftp-server.1m.out $(DESTDIR)$(mandir)/$(mansubdir)1m/sftp-server.1m
  	$(INSTALL) -m 644 ssh-keysign.1m.out $(DESTDIR)$(mandir)/$(mansubdir)1m/ssh-keysign.1m
  	$(INSTALL) -m 644 ssh-pkcs11-helper.1m.out $(DESTDIR)$(mandir)/$(mansubdir)1m/ssh-pkcs11-helper.1m
@@ -39,5 +39,5 @@ index 5e973f1..7d5d93c 100644
  	$(srcdir)/mkinstalldirs $(SMFNETMANIDIR)
  	$(INSTALL) -m 555 smf/method.sh $(SMFMETHODDIR)/sshd
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/Patches/1002-sunw_ssl.patch b/openssh/Patches/1001-sunw_ssl.patch
similarity index 71%
rename from openssh/Patches/1002-sunw_ssl.patch
rename to openssh/Patches/1001-sunw_ssl.patch
index ae80e1e..d9425a5 100644
--- a/openssh/Patches/1002-sunw_ssl.patch
+++ b/openssh/Patches/1001-sunw_ssl.patch
@@ -1,25 +1,25 @@
-From 7117609d7dcc4aac30f228a31c291dddeece44bd Mon Sep 17 00:00:00 2001
+From 6f944a0c3e6d4230275c55d6491928ff3a678466 Mon Sep 17 00:00:00 2001
 From: Alex Wilson <alex.wilson@joyent.com>
 Date: Tue, 22 Dec 2015 14:31:25 -0800
-Subject: [PATCH 2/2] SmartOS local: use sunw_ssl lib from platform
+Subject: [PATCH 34/34] SmartOS local: use sunw_ssl lib from platform
 
 ---
  configure.ac                    | 34 +++++++++++++++++-----------------
  digest-openssl.c                |  8 ++++----
  kex.c                           | 10 +++++-----
- mac.c                           |  4 ++--
+ mac.c                           |  8 ++++----
  md-sha256.c                     |  4 ++--
  myproposal.h                    |  4 ++--
- openbsd-compat/openssl-compat.h |  2 +-
+ openbsd-compat/openssl-compat.h |  6 +++---
  openbsd-compat/sha2.c           |  2 +-
  openbsd-compat/sha2.h           |  2 +-
- 9 files changed, 35 insertions(+), 35 deletions(-)
+ 9 files changed, 39 insertions(+), 39 deletions(-)
 
 diff --git a/configure.ac b/configure.ac
-index 42e24e8..4662a07 100644
+index b9a7e7d5..8e0426a0 100644
 --- a/configure.ac
 +++ b/configure.ac
-@@ -2419,8 +2419,8 @@ AC_ARG_WITH([ssl-engine],
+@@ -2524,8 +2524,8 @@ AC_ARG_WITH([ssl-engine],
  )
  
  if test "x$openssl" = "xyes" ; then
@@ -30,7 +30,7 @@ index 42e24e8..4662a07 100644
  		[Define if your ssl headers are included
  		with #include <openssl/header.h>])],
  		[
-@@ -2433,7 +2433,7 @@ if test "x$openssl" = "xyes" ; then
+@@ -2538,7 +2538,7 @@ if test "x$openssl" = "xyes" ; then
  			CPPFLAGS="-I/usr/local/ssl/include ${saved_CPPFLAGS}"
  			AC_CHECK_HEADER([openssl/opensslv.h], ,
  			    [AC_MSG_ERROR([*** OpenSSL headers missing - please install first or check config.log ***])])
@@ -39,7 +39,7 @@ index 42e24e8..4662a07 100644
  				[
  					AC_MSG_ERROR([*** Can't find recent OpenSSL libcrypto (see config.log for details) ***])
  				]
-@@ -2580,16 +2580,16 @@ if test "x$openssl" = "xyes" ; then
+@@ -2686,16 +2686,16 @@ if test "x$openssl" = "xyes" ; then
  	)
  
  	AC_CHECK_FUNCS([ \
@@ -66,7 +66,7 @@ index 42e24e8..4662a07 100644
  	])
  
  	if test "x$openssl_engine" = "xyes" ; then
-@@ -2674,8 +2674,8 @@ if test "x$openssl" = "xyes" ; then
+@@ -2781,8 +2781,8 @@ if test "x$openssl" = "xyes" ; then
  		]
  	)
  
@@ -77,26 +77,26 @@ index 42e24e8..4662a07 100644
  		    [Define if libcrypto has EVP_CIPHER_CTX_ctrl])])
  
  	AC_MSG_CHECKING([if EVP_DigestUpdate returns an int])
-@@ -2711,7 +2711,7 @@ if test "x$openssl" = "xyes" ; then
+@@ -2818,7 +2818,7 @@ if test "x$openssl" = "xyes" ; then
  	AC_CHECK_FUNCS([crypt DES_crypt])
  
  	# Search for SHA256 support in libc and/or OpenSSL
 -	AC_CHECK_FUNCS([SHA256_Update EVP_sha256], ,
 +	AC_CHECK_FUNCS([sunw_SHA256_Update sunw_EVP_sha256], ,
  	    [unsupported_algorithms="$unsupported_algorithms \
- 		hmac-sha2-256 hmac-sha2-512 \
- 		diffie-hellman-group-exchange-sha256 \
-@@ -2719,7 +2719,7 @@ if test "x$openssl" = "xyes" ; then
+ 		hmac-sha2-256 \
+ 		hmac-sha2-512 \
+@@ -2828,7 +2828,7 @@ if test "x$openssl" = "xyes" ; then
  	     ]
  	)
  	# Search for RIPE-MD support in OpenSSL
 -	AC_CHECK_FUNCS([EVP_ripemd160], ,
 +	AC_CHECK_FUNCS([sunw_EVP_ripemd160], ,
  	    [unsupported_algorithms="$unsupported_algorithms \
- 		hmac-ripemd160
- 		hmac-ripemd160@openssh.com
+ 		hmac-ripemd160 \
+ 		hmac-ripemd160@openssh.com \
 diff --git a/digest-openssl.c b/digest-openssl.c
-index 13b63c2..c6fe9f9 100644
+index 13b63c2f..c6fe9f9e 100644
 --- a/digest-openssl.c
 +++ b/digest-openssl.c
 @@ -32,14 +32,14 @@
@@ -119,7 +119,7 @@ index 13b63c2..c6fe9f9 100644
  struct ssh_digest_ctx {
  	int alg;
 diff --git a/kex.c b/kex.c
-index 25bc129..1eda52d 100644
+index d8708684..d634e648 100644
 --- a/kex.c
 +++ b/kex.c
 @@ -59,7 +59,7 @@
@@ -131,9 +131,9 @@ index 25bc129..1eda52d 100644
  # define evp_ssh_sha256 EVP_sha256
  # else
  extern const EVP_MD *evp_ssh_sha256(void);
-@@ -94,9 +94,9 @@ static const struct kexalg kexalgs[] = {
- 	{ KEX_DH1, KEX_DH_GRP1_SHA1, 0, SSH_DIGEST_SHA1 },
- 	{ KEX_DH14, KEX_DH_GRP14_SHA1, 0, SSH_DIGEST_SHA1 },
+@@ -97,9 +97,9 @@ static const struct kexalg kexalgs[] = {
+ 	{ KEX_DH16_SHA512, KEX_DH_GRP16_SHA512, 0, SSH_DIGEST_SHA512 },
+ 	{ KEX_DH18_SHA512, KEX_DH_GRP18_SHA512, 0, SSH_DIGEST_SHA512 },
  	{ KEX_DHGEX_SHA1, KEX_DH_GEX_SHA1, 0, SSH_DIGEST_SHA1 },
 -#ifdef HAVE_EVP_SHA256
 +#ifdef HAVE_SUNW_EVP_SHA256
@@ -143,23 +143,24 @@ index 25bc129..1eda52d 100644
  #ifdef OPENSSL_HAS_ECC
  	{ KEX_ECDH_SHA2_NISTP256, KEX_ECDH_SHA2,
  	    NID_X9_62_prime256v1, SSH_DIGEST_SHA256 },
-@@ -108,9 +108,9 @@ static const struct kexalg kexalgs[] = {
+@@ -111,10 +111,10 @@ static const struct kexalg kexalgs[] = {
  # endif /* OPENSSL_HAS_NISTP521 */
  #endif /* OPENSSL_HAS_ECC */
  #endif /* WITH_OPENSSL */
 -#if defined(HAVE_EVP_SHA256) || !defined(WITH_OPENSSL)
 +#if defined(HAVE_SUNW_EVP_SHA256) || !defined(WITH_OPENSSL)
  	{ KEX_CURVE25519_SHA256, KEX_C25519_SHA256, 0, SSH_DIGEST_SHA256 },
+ 	{ KEX_CURVE25519_SHA256_OLD, KEX_C25519_SHA256, 0, SSH_DIGEST_SHA256 },
 -#endif /* HAVE_EVP_SHA256 || !WITH_OPENSSL */
 +#endif /* HAVE_SUNW_EVP_SHA256 || !WITH_OPENSSL */
- #ifdef GSSAPI
- 	{ KEX_GSS_GEX_SHA1_ID, KEX_GSS_GEX_SHA1, 0, SSH_DIGEST_SHA1 },
- 	{ KEX_GSS_GRP1_SHA1_ID, KEX_GSS_GRP1_SHA1, 0, SSH_DIGEST_SHA1 },
+ 	{ NULL, -1, -1, -1},
+ };
+ static const struct kexalg kexalg_prefixes[] = {
 diff --git a/mac.c b/mac.c
-index f63fbff..02d872a 100644
+index 5ba7fae1..b3b92fad 100644
 --- a/mac.c
 +++ b/mac.c
-@@ -58,7 +58,7 @@ static const struct macalg macs[] = {
+@@ -58,13 +58,13 @@ static const struct macalg macs[] = {
  	/* Encrypt-and-MAC (encrypt-and-authenticate) variants */
  	{ "hmac-sha1",				SSH_DIGEST, SSH_DIGEST_SHA1, 0, 0, 0, 0 },
  	{ "hmac-sha1-96",			SSH_DIGEST, SSH_DIGEST_SHA1, 96, 0, 0, 0 },
@@ -168,7 +169,14 @@ index f63fbff..02d872a 100644
  	{ "hmac-sha2-256",			SSH_DIGEST, SSH_DIGEST_SHA256, 0, 0, 0, 0 },
  	{ "hmac-sha2-512",			SSH_DIGEST, SSH_DIGEST_SHA512, 0, 0, 0, 0 },
  #endif
-@@ -72,7 +72,7 @@ static const struct macalg macs[] = {
+ 	{ "hmac-md5",				SSH_DIGEST, SSH_DIGEST_MD5, 0, 0, 0, 0 },
+ 	{ "hmac-md5-96",			SSH_DIGEST, SSH_DIGEST_MD5, 96, 0, 0, 0 },
+-#ifdef HAVE_EVP_RIPEMD160
++#ifdef HAVE_SUNW_EVP_RIPEMD160
+ 	{ "hmac-ripemd160",			SSH_DIGEST, SSH_DIGEST_RIPEMD160, 0, 0, 0, 0 },
+ 	{ "hmac-ripemd160@openssh.com",		SSH_DIGEST, SSH_DIGEST_RIPEMD160, 0, 0, 0, 0 },
+ #endif
+@@ -74,13 +74,13 @@ static const struct macalg macs[] = {
  	/* Encrypt-then-MAC variants */
  	{ "hmac-sha1-etm@openssh.com",		SSH_DIGEST, SSH_DIGEST_SHA1, 0, 0, 0, 1 },
  	{ "hmac-sha1-96-etm@openssh.com",	SSH_DIGEST, SSH_DIGEST_SHA1, 96, 0, 0, 1 },
@@ -177,8 +185,15 @@ index f63fbff..02d872a 100644
  	{ "hmac-sha2-256-etm@openssh.com",	SSH_DIGEST, SSH_DIGEST_SHA256, 0, 0, 0, 1 },
  	{ "hmac-sha2-512-etm@openssh.com",	SSH_DIGEST, SSH_DIGEST_SHA512, 0, 0, 0, 1 },
  #endif
+ 	{ "hmac-md5-etm@openssh.com",		SSH_DIGEST, SSH_DIGEST_MD5, 0, 0, 0, 1 },
+ 	{ "hmac-md5-96-etm@openssh.com",	SSH_DIGEST, SSH_DIGEST_MD5, 96, 0, 0, 1 },
+-#ifdef HAVE_EVP_RIPEMD160
++#ifdef HAVE_SUNW_EVP_RIPEMD160
+ 	{ "hmac-ripemd160-etm@openssh.com",	SSH_DIGEST, SSH_DIGEST_RIPEMD160, 0, 0, 0, 1 },
+ #endif
+ 	{ "umac-64-etm@openssh.com",		SSH_UMAC, 0, 0, 128, 64, 1 },
 diff --git a/md-sha256.c b/md-sha256.c
-index 8c1b3b9..40c2dc8 100644
+index 8c1b3b92..40c2dc83 100644
 --- a/md-sha256.c
 +++ b/md-sha256.c
 @@ -22,7 +22,7 @@
@@ -198,7 +213,7 @@ index 8c1b3b9..40c2dc8 100644
 +#endif /* !defined(HAVE_SUNW_EVP_SHA256) && (OPENSSL_VERSION_NUMBER >= 0x00907000L) */
  
 diff --git a/myproposal.h b/myproposal.h
-index 7b15897..f2dbe11 100644
+index f6322a73..a9637ed8 100644
 --- a/myproposal.h
 +++ b/myproposal.h
 @@ -66,7 +66,7 @@
@@ -207,23 +222,23 @@ index 7b15897..f2dbe11 100644
  
 -#ifdef HAVE_EVP_SHA256
 +#ifdef HAVE_SUNW_EVP_SHA256
- # define KEX_SHA256_METHODS \
- 	"diffie-hellman-group-exchange-sha256,"
- #define	SHA2_HMAC_MODES \
-@@ -78,7 +78,7 @@
+ # define KEX_SHA2_METHODS \
+ 	"diffie-hellman-group-exchange-sha256," \
+ 	"diffie-hellman-group16-sha512," \
+@@ -83,7 +83,7 @@
  #endif
  
  #ifdef WITH_OPENSSL
 -# ifdef HAVE_EVP_SHA256
 +# ifdef HAVE_SUNW_EVP_SHA256
- #  define KEX_CURVE25519_METHODS "curve25519-sha256@libssh.org,"
- # else
- #  define KEX_CURVE25519_METHODS ""
+ #  define KEX_CURVE25519_METHODS \
+ 	"curve25519-sha256," \
+ 	"curve25519-sha256@libssh.org,"
 diff --git a/openbsd-compat/openssl-compat.h b/openbsd-compat/openssl-compat.h
-index 8917551..f658d6a 100644
+index 2ae42bac..042d6829 100644
 --- a/openbsd-compat/openssl-compat.h
 +++ b/openbsd-compat/openssl-compat.h
-@@ -63,7 +63,7 @@ void ssh_aes_ctr_iv(EVP_CIPHER_CTX *, int, u_char *, size_t);
+@@ -61,7 +61,7 @@ void ssh_aes_ctr_iv(EVP_CIPHER_CTX *, int, u_char *, size_t);
  #endif
  
  /* Replace missing EVP_CIPHER_CTX_ctrl() with something that returns failure */
@@ -232,8 +247,20 @@ index 8917551..f658d6a 100644
  # ifdef OPENSSL_HAVE_EVPGCM
  #  error AES-GCM enabled without EVP_CIPHER_CTX_ctrl /* shouldn't happen */
  # else
+@@ -69,9 +69,9 @@ void ssh_aes_ctr_iv(EVP_CIPHER_CTX *, int, u_char *, size_t);
+ # endif
+ #endif
+ 
+-#if defined(HAVE_EVP_RIPEMD160)
++#if defined(HAVE_SUNW_EVP_RIPEMD160)
+ # if defined(OPENSSL_NO_RIPEMD) || defined(OPENSSL_NO_RMD160)
+-#  undef HAVE_EVP_RIPEMD160
++#  undef HAVE_SUNW_EVP_RIPEMD160
+ # endif
+ #endif
+ 
 diff --git a/openbsd-compat/sha2.c b/openbsd-compat/sha2.c
-index 737935d..0f5c84c 100644
+index a22099bb..d7033890 100644
 --- a/openbsd-compat/sha2.c
 +++ b/openbsd-compat/sha2.c
 @@ -40,7 +40,7 @@
@@ -246,7 +273,7 @@ index 737935d..0f5c84c 100644
  # endif
  #else
 diff --git a/openbsd-compat/sha2.h b/openbsd-compat/sha2.h
-index c8bfc3c..a802d40 100644
+index c6e6c97a..313848f0 100644
 --- a/openbsd-compat/sha2.h
 +++ b/openbsd-compat/sha2.h
 @@ -43,7 +43,7 @@
@@ -259,5 +286,5 @@ index c8bfc3c..a802d40 100644
  # endif
  #else
 -- 
-2.5.4 (Apple Git-61)
+2.11.0
 
diff --git a/openssh/openssh-portable-7.2p2.tar.gz b/openssh/openssh-portable-7.2p2.tar.gz
deleted file mode 100644
index 6cf490c..0000000
Binary files a/openssh/openssh-portable-7.2p2.tar.gz and /dev/null differ
diff --git a/openssh/openssh-portable-7.4p1.tar.gz b/openssh/openssh-portable-7.4p1.tar.gz
new file mode 100644
index 0000000..0036a1a
Binary files /dev/null and b/openssh/openssh-portable-7.4p1.tar.gz differ
-- 
2.21.0

