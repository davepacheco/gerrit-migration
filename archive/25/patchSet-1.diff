From 590362bf9f34a3e5cc59a0f8e286b9415250dc61 Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Thu, 30 Jun 2016 14:07:18 -0700
Subject: [PATCH] joyent/node-zkstream#1 Want a simple streams-based ZK client
 for libregistrar

---
 .gitignore                           |   1 +
 .gitmodules                          |   6 +
 .npmignore                           |   9 +
 .travis.yml                          |   9 +
 Makefile                             |  64 +++++
 deps/javascriptlint                  |   1 +
 deps/jsstyle                         |   1 +
 lib/client-fsm.js                    | 173 +++++++++++++
 lib/errors.js                        |  23 ++
 lib/jute-buffer.js                   | 157 ++++++++++++
 lib/zk-buffer.js                     | 352 +++++++++++++++++++++++++++
 lib/zk-consts.js                     | 100 ++++++++
 lib/zk-streams.js                    | 129 ++++++++++
 package.json                         |  25 ++
 test/basic.test.js                   |  84 +++++++
 test/streams.test.js                 |  76 ++++++
 test/zkserver.js                     | 212 ++++++++++++++++
 tools/bashstyle                      | 164 +++++++++++++
 tools/jsl.node.conf                  | 153 ++++++++++++
 tools/jsstyle.conf                   |  12 +
 tools/mk/Makefile.defs               |  51 ++++
 tools/mk/Makefile.deps               |  54 ++++
 tools/mk/Makefile.node.defs          | 104 ++++++++
 tools/mk/Makefile.node.targ          |  42 ++++
 tools/mk/Makefile.node_deps.defs     |  43 ++++
 tools/mk/Makefile.node_deps.targ     |  24 ++
 tools/mk/Makefile.node_prebuilt.defs | 153 ++++++++++++
 tools/mk/Makefile.node_prebuilt.targ |  42 ++++
 tools/mk/Makefile.targ               | 319 ++++++++++++++++++++++++
 29 files changed, 2583 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 .gitmodules
 create mode 100644 .npmignore
 create mode 100644 .travis.yml
 create mode 100644 Makefile
 create mode 160000 deps/javascriptlint
 create mode 160000 deps/jsstyle
 create mode 100644 lib/client-fsm.js
 create mode 100644 lib/errors.js
 create mode 100644 lib/jute-buffer.js
 create mode 100644 lib/zk-buffer.js
 create mode 100644 lib/zk-consts.js
 create mode 100644 lib/zk-streams.js
 create mode 100644 package.json
 create mode 100644 test/basic.test.js
 create mode 100644 test/streams.test.js
 create mode 100644 test/zkserver.js
 create mode 100644 tools/bashstyle
 create mode 100644 tools/jsl.node.conf
 create mode 100644 tools/jsstyle.conf
 create mode 100644 tools/mk/Makefile.defs
 create mode 100644 tools/mk/Makefile.deps
 create mode 100644 tools/mk/Makefile.node.defs
 create mode 100644 tools/mk/Makefile.node.targ
 create mode 100644 tools/mk/Makefile.node_deps.defs
 create mode 100644 tools/mk/Makefile.node_deps.targ
 create mode 100644 tools/mk/Makefile.node_prebuilt.defs
 create mode 100644 tools/mk/Makefile.node_prebuilt.targ
 create mode 100644 tools/mk/Makefile.targ

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..c2658d7
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1 @@
+node_modules/
diff --git a/.gitmodules b/.gitmodules
new file mode 100644
index 0000000..d65f40b
--- /dev/null
+++ b/.gitmodules
@@ -0,0 +1,6 @@
+[submodule "deps/javascriptlint"]
+	path = deps/javascriptlint
+	url = git://github.com/davepacheco/javascriptlint.git
+[submodule "deps/jsstyle"]
+	path = deps/jsstyle
+	url = git://github.com/davepacheco/jsstyle.git
diff --git a/.npmignore b/.npmignore
new file mode 100644
index 0000000..f54a5da
--- /dev/null
+++ b/.npmignore
@@ -0,0 +1,9 @@
+.gitmodules
+deps
+docs
+Makefile
+node_modules
+test
+tools
+coverage
+demo-*.js
diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..ea4b1ec
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,9 @@
+addons:
+  apt:
+    packages:
+      - zookeeper
+language: node_js
+node_js:
+  - "0.12"
+install: "make"
+script: "make test"
diff --git a/Makefile b/Makefile
new file mode 100644
index 0000000..64d3c3f
--- /dev/null
+++ b/Makefile
@@ -0,0 +1,64 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+# Copyright (c) 2016, Joyent, Inc.
+#
+
+#
+# Tools
+#
+NPM_EXEC	:= $(shell which npm)
+NPM		:= npm
+TAP		:= ./node_modules/.bin/tape
+JSON		:= ./node_modules/.bin/json
+
+#
+# Makefile.defs defines variables used as part of the build process.
+#
+include ./tools/mk/Makefile.defs
+
+#
+# Configuration used by Makefile.defs and Makefile.targ to generate 
+# "check" and "docs" targets.
+#
+DOC_FILES	 = 
+JSON_FILES	 = package.json
+JS_FILES	:= $(shell find lib test -name '*.js')
+JSL_FILES_NODE	 = $(JS_FILES)
+JSSTYLE_FILES	 = $(JS_FILES)
+
+JSL_CONF_NODE	 = tools/jsl.node.conf
+JSSTYLE_FLAGS	 = -f tools/jsstyle.conf
+
+include ./tools/mk/Makefile.defs
+include ./tools/mk/Makefile.node_deps.defs
+
+#
+# Repo-specific targets
+#
+.PHONY: all
+all: $(SMF_MANIFESTS) | $(TAP) $(REPO_DEPS)
+	$(NPM) rebuild
+
+$(TAP): | $(NPM_EXEC)
+	$(NPM) install
+$(JSON): | $(NPM_EXEC)
+	$(NPM) install
+
+CLEAN_FILES += $(TAP) ./node_modules/tap
+
+.PHONY: test
+test: $(TAP)
+	TAP=1 $(TAP) test/*.test.js
+
+.PHONY: coverage
+coverage: all
+	$(NPM_EXEC) install istanbul && \
+	    ./node_modules/.bin/istanbul cover \
+	    $(TAP) test/*.js
+
+include ./tools/mk/Makefile.deps
+include ./tools/mk/Makefile.node_deps.targ
+include ./tools/mk/Makefile.targ
diff --git a/deps/javascriptlint b/deps/javascriptlint
new file mode 160000
index 0000000..040bf5e
--- /dev/null
+++ b/deps/javascriptlint
@@ -0,0 +1 @@
+Subproject commit 040bf5e429969ae42d976b570fd64c9e17fab20f
diff --git a/deps/jsstyle b/deps/jsstyle
new file mode 160000
index 0000000..b94eb62
--- /dev/null
+++ b/deps/jsstyle
@@ -0,0 +1 @@
+Subproject commit b94eb629ee524d21b563c8b4461caa2bdf1becc6
diff --git a/lib/client-fsm.js b/lib/client-fsm.js
new file mode 100644
index 0000000..34ad24a
--- /dev/null
+++ b/lib/client-fsm.js
@@ -0,0 +1,173 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * Copyright (c) 2016, Joyent, Inc.
+ */
+
+module.exports = { ClientFSM: ZKClientFSM };
+
+const mod_fsm = require('mooremachine');
+const mod_assert = require('assert-plus');
+const mod_consts = require('./zk-consts');
+const mod_util = require('util');
+const mod_stream = require('stream');
+const mod_errors = require('./errors');
+const mod_jsbn = require('jsbn');
+const mod_events = require('events');
+const mod_zkstreams = require('./zk-streams');
+
+function ZKClientFSM(opts) {
+	mod_assert.object(opts, 'options');
+	this.zs_decoder = new mod_zkstreams.ZKDecodeStream({
+		fsm: this
+	});
+	this.zs_encoder = new mod_zkstreams.ZKEncodeStream({
+		fsm: this
+	});
+
+	var self = this;
+	function onStreamError() {
+		self.gotoState('error');
+	}
+	this.zs_decoder.on('error', this.emit.bind(this, 'error'));
+	this.zs_decoder.on('error', onStreamError);
+	this.zs_encoder.on('error', this.emit.bind(this, 'error'));
+	this.zs_encoder.on('error', onStreamError);
+	
+	this.zs_xidMap = {};
+	this.zs_xid = 1;
+	this.zs_reqs = {};
+	mod_fsm.FSM.call(this, 'connecting');
+}
+mod_util.inherits(ZKClientFSM, mod_fsm.FSM);
+
+ZKClientFSM.prototype.attach = function (socket) {
+	var self = this;
+	this.zs_socket = socket;
+	socket.pipe(this.zs_decoder);
+	this.zs_encoder.pipe(socket);
+	socket.on('error', this.emit.bind(this, 'error'));
+	socket.on('error', function () {
+		self.gotoState('error');
+	});
+};
+
+ZKClientFSM.prototype.nextXid = function () {
+	return (this.zs_xid++);
+};
+
+ZKClientFSM.prototype.state_connecting = function (on) {
+	var self = this;
+	on(this.zs_decoder, 'readable', function () {
+		var pkt = self.zs_decoder.read();
+		if (self.zs_decoder.read() !== null) {
+			self.emit('error', new mod_errors.ZKProtocolError(
+			    'UNEXPECTED_PACKET', 'Received unexpected ' +
+			    'additional packet during connect phase'));
+			self.gotoState('error');
+			return;
+		}
+		if (pkt.protocolVersion !== 0) {
+			self.emit('error', new mod_errors.ZKProtocolError(
+			    'VERSION_INCOMPAT', 'Server version is not ' +
+			    'compatible'));
+			self.gotoState('error');
+			return;
+		}
+		self.zs_cr = pkt;
+		self.gotoState('connected');
+	});
+	on(this.zs_decoder, 'end', function () {
+		self.gotoState('closed');
+	});
+	this.zs_encoder.write({
+		protocolVersion: 0,
+		lastZxidSeen: new mod_jsbn.BigInteger('0'),
+		timeOut: 30000,
+		sessionId: new mod_jsbn.BigInteger('0'),
+		passwd: new Buffer(16).fill(0)
+	});
+};
+
+ZKClientFSM.prototype.state_connected = function (on) {
+	var self = this;
+	on(this.zs_decoder, 'readable', function () {
+		var pkt;
+		while ((pkt = self.zs_decoder.read()) !== null) {
+			var req = self.zs_reqs[pkt.xid];
+			if (req === undefined) {
+				self.emit('packet', pkt);
+			} else {
+				req.emit('reply', pkt);
+			}
+		}
+	});
+	on(this.zs_decoder, 'end', function () {
+		self.gotoState('closed');
+	});
+};
+
+ZKClientFSM.prototype.state_error = function () {
+	if (this.zs_socket)
+		this.zs_socket.destroy();
+};
+
+ZKClientFSM.prototype.state_closed = function () {
+	this.zs_encoder.end();
+	this.emit('close');
+};
+
+ZKClientFSM.prototype.ping = function (cb) {
+	var self = this;
+	var pkt = {
+		xid: mod_consts.XID_PING,
+		opcode: 'PING'
+	};
+	this.once('packet', onPacket);
+	var timer = setTimeout(function () {
+		self.removeListener('packet', onPacket);
+		self.emit('error', new Error('Ping timeout'));
+		self.gotoState('error');
+		cb(new Error('Ping timeout'));
+	}, this.zs_cr.timeOut);
+	this.zs_encoder.write(pkt);
+	function onPacket(pkt) {
+		if (pkt.xid !== mod_consts.XID_PING ||
+		    pkt.opcode !== 'PING') {
+			self.once('packet', onPacket);
+			return;
+		}
+		clearTimeout(timer);
+		cb();
+	}
+};
+
+ZKClientFSM.prototype.setWatches = function (events, cb) {
+	var self = this;
+	var req = new mod_events.EventEmitter();
+	var pkt = {
+		xid: mod_consts.XID_SET_WATCHES,
+		opcode: 'SET_WATCHES',
+		relZxid: new mod_jsbn.BigInteger('0'),
+		events: events
+	};
+	if (this.zs_reqs[pkt.xid] !== undefined) {
+		this.zs_reqs[pkt.xid].once('reply', function () {
+			self.setWatches(events, cb);
+		});
+		return;
+	}
+	this.zs_reqs[pkt.xid] = req;
+	req.once('reply', cb);
+	this.zs_encoder.write(pkt);
+};
+
+ZKClientFSM.prototype.request = function (pkt) {
+	var req = new mod_events.EventEmitter();
+	pkt.xid = this.nextXid();
+	this.zs_reqs[pkt.xid] = req;
+	this.zs_encoder.write(pkt);
+	return (req);
+};
diff --git a/lib/errors.js b/lib/errors.js
new file mode 100644
index 0000000..6d4d654
--- /dev/null
+++ b/lib/errors.js
@@ -0,0 +1,23 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * Copyright (c) 2016, Joyent, Inc.
+ */
+
+module.exports = {
+	ZKProtocolError: ZKProtocolError
+};
+
+const mod_assert = require('assert-plus');
+const mod_util = require('util');
+
+function ZKProtocolError(code, msg) {
+        if (Error.captureStackTrace)
+                Error.captureStackTrace(this, ZKProtocolError);
+        this.code = code;
+        this.name = 'ZKProtocolError';
+        this.message = code + ': ' + msg;
+}
+mod_util.inherits(ZKProtocolError, Error);
diff --git a/lib/jute-buffer.js b/lib/jute-buffer.js
new file mode 100644
index 0000000..c73ac4e
--- /dev/null
+++ b/lib/jute-buffer.js
@@ -0,0 +1,157 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * Copyright (c) 2016, Joyent, Inc.
+ */
+
+module.exports = { JuteBuffer: JuteBuffer };
+
+const mod_assert = require('assert-plus');
+const mod_jsbn = require('jsbn');
+
+function JuteBuffer(opts) {
+	mod_assert.object(opts, 'options');
+	if (opts.buffer !== undefined)
+		mod_assert.buffer(opts.buffer, 'options.buffer');
+	this.jb_size = opts.buffer ? opts.buffer.length : 1024;
+	this.jb_buffer = opts.buffer || (new Buffer(this.jb_size));
+	this.jb_offset = 0;
+}
+
+JuteBuffer.prototype.toBuffer = function () {
+	return (this.jb_buffer.slice(0, this.jb_offset));
+};
+
+JuteBuffer.prototype.atEnd = function () {
+	return (this.jb_offset >= this.jb_buffer.length);
+};
+
+JuteBuffer.prototype.remainder = function () {
+	return (this.jb_buffer.slice(this.jb_offset));
+};
+
+JuteBuffer.prototype.skip = function (n) {
+	this.jb_offset += n;
+};
+
+JuteBuffer.prototype.expand = function () {
+	this.jb_size *= 2;
+	var buf = new Buffer(this.jb_size);
+	this.jb_buffer.copy(buf, 0);
+	this.jb_buffer = buf;
+};
+
+JuteBuffer.prototype.readByte = function () {
+	var v = this.jb_buffer.readInt8(this.jb_offset++);
+	return (v);
+};
+
+JuteBuffer.prototype.readBool = function () {
+	mod_assert.ok(this.jb_offset < this.jb_size);
+	var v = this.jb_buffer[this.jb_offset++];
+	mod_assert.ok(v === 0 || v === 1);
+	return (v === 1);
+};
+
+JuteBuffer.prototype.readInt = function () {
+	var v = this.jb_buffer.readInt32BE(this.jb_offset);
+	this.jb_offset += 4;
+	return (v);
+};
+
+JuteBuffer.prototype.readLongBuffer = function () {
+	mod_assert.ok(this.jb_offset + 8 <= this.jb_size);
+	var v = this.jb_buffer.slice(this.jb_offset, this.jb_offset + 8);
+	this.jb_offset += 8;
+	return (v);
+};
+
+JuteBuffer.prototype.readLongBN = function () {
+	return (new mod_jsbn.BigInteger(this.readLongBuffer()));
+};
+
+JuteBuffer.prototype.readBuffer = function () {
+	var len = this.readInt();
+	mod_assert.ok(this.jb_offset + len <= this.jb_size);
+	var buf = this.jb_buffer.slice(this.jb_offset, this.jb_offset + len);
+	this.jb_offset += len;
+	return (buf);
+};
+
+JuteBuffer.prototype.readUString = function () {
+	return (this.readBuffer().toString('utf-8'));
+};
+
+JuteBuffer.prototype.writeBool = function (v, assertName) {
+	mod_assert.bool(v, assertName || 'value');
+	this.writeByte(v ? 1 : 0);
+};
+
+JuteBuffer.prototype.writeByte = function (v, assertName) {
+	mod_assert.number(v, assertName || 'value');
+	while (this.jb_offset + 1 > this.jb_size)
+		this.expand();
+	this.jb_buffer.writeInt8(v, this.jb_offset++);
+};
+
+JuteBuffer.prototype.writeBuffer = function (v, assertName) {
+	mod_assert.buffer(v, assertName || 'value');
+	while (this.jb_offset + v.length + 4 > this.jb_size)
+		this.expand();
+	this.writeInt(v.length);
+	v.copy(this.jb_buffer, this.jb_offset);
+	this.jb_offset += v.length;
+};
+
+JuteBuffer.prototype.writeUString = function (v, assertName) {
+	mod_assert.string(v, assertName || 'value');
+	this.writeBuffer(new Buffer(v, 'utf-8'));
+};
+
+JuteBuffer.prototype.writeInt = function (v, assertName) {
+	mod_assert.number(v, assertName || 'value');
+	while (this.jb_offset + 4 > this.jb_size)
+		this.expand();
+	this.jb_buffer.writeInt32BE(v, this.jb_offset);
+	this.jb_offset += 4;
+};
+
+JuteBuffer.prototype.writeLong = function (v) {
+	if (Buffer.isBuffer(v)) {
+		mod_assert.ok(v.length <= 8);
+	} else {
+		v = new Buffer(v.toByteArray());
+		mod_assert.ok(v.length <= 8);
+	}
+	while (this.jb_offset + 8 > this.jb_size)
+		this.expand();
+	this.jb_buffer.fill(0, this.jb_offset, this.jb_offset + 8);
+	v.copy(this.jb_buffer, this.jb_offset + (8 - v.length));
+	this.jb_offset += 8;
+};
+
+JuteBuffer.prototype.readLengthPrefixed = function (cb) {
+	mod_assert.func(cb, 'callback');
+	var len = this._buffer.readUInt32BE(this.jb_offset);
+	this.jb_offset += 4;
+	mod_assert.ok(this.jb_offset + len <= this.jb_size);
+
+	var child = Object.create(this);
+	child.jb_size = this.jb_offset + len;
+	var ret = cb(child);
+	this.jb_offset += len;
+
+	return (ret);
+};
+
+JuteBuffer.prototype.writeLengthPrefixed = function (cb) {
+	var lenOffset = this.jb_offset;
+	this.jb_offset += 4;
+	var ret = cb(this);
+	var len = this.jb_offset - lenOffset - 4;
+	this.jb_buffer.writeUInt32BE(len, lenOffset);
+
+	return (ret);
+};
diff --git a/lib/zk-buffer.js b/lib/zk-buffer.js
new file mode 100644
index 0000000..d63df57
--- /dev/null
+++ b/lib/zk-buffer.js
@@ -0,0 +1,352 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * Copyright (c) 2016, Joyent, Inc.
+ */
+
+module.exports = { ZKBuffer: ZKBuffer };
+
+const mod_assert = require('assert-plus');
+const mod_jsbn = require('jsbn');
+const mod_util = require('util');
+const JuteBuffer = require('./jute-buffer').JuteBuffer;
+const mod_consts = require('./zk-consts');
+
+function ZKBuffer(opts) {
+	JuteBuffer.call(this, opts);
+}
+mod_util.inherits(ZKBuffer, JuteBuffer);
+
+ZKBuffer.prototype.readConnectRequest = function () {
+	var pkt = {};
+	pkt.protocolVersion = this.readInt();
+	pkt.lastZxidSeen = this.readLongBuffer();
+	pkt.timeOut = this.readInt();
+	pkt.sessionId = this.readLongBuffer();
+	pkt.passwd = this.readBuffer();
+	return (pkt);
+};
+
+ZKBuffer.prototype.writeConnectRequest = function (pkt) {
+	mod_assert.object(pkt, 'packet');
+	this.writeInt(pkt.protocolVersion, 'protocolVersion');
+	this.writeLong(pkt.lastZxidSeen);
+	this.writeInt(pkt.timeOut, 'timeOut');
+	this.writeLong(pkt.sessionId);
+	this.writeBuffer(pkt.passwd, 'passwd');
+};
+
+ZKBuffer.prototype.readConnectResponse = function () {
+	var pkt = {};
+	pkt.protocolVersion = this.readInt();
+	pkt.timeOut = this.readInt();
+	pkt.sessionId = this.readLongBuffer();
+	pkt.passwd = this.readBuffer();
+	return (pkt);
+};
+
+ZKBuffer.prototype.readRequest = function () {
+	var pkt = {};
+	pkt.xid = this.readInt();
+	pkt.opcode = mod_consts.OP_CODE_LOOKUP[this.readInt()];
+	switch (pkt.opcode) {
+	case 'GET_CHILDREN':
+	case 'GET_CHILDREN2':
+		this.readGetChildrenRequest(pkt);
+		break;
+	case 'CREATE':
+		this.readCreateRequest(pkt);
+		break;
+	case 'DELETE':
+		this.readDeleteRequest(pkt);
+		break;
+	case 'GET_ACL':
+		this.readGetACLRequest(pkt);
+		break;
+	case 'SET_WATCHES':
+		this.readSetWatchesRequest(pkt);
+		break;
+	case 'GET_DATA':
+		this.readGetDataRequest(pkt);
+		break;
+	}
+	return (pkt);
+};
+
+ZKBuffer.prototype.writeRequest = function (pkt) {
+	this.writeInt(pkt.xid);
+	this.writeInt(mod_consts.OP_CODES[pkt.opcode]);
+	switch (pkt.opcode) {
+	case 'GET_CHILDREN':
+	case 'GET_CHILDREN2':
+		this.writeGetChildrenRequest(pkt);
+		break;
+	case 'CREATE':
+		this.writeCreateRequest(pkt);
+		break;
+	case 'DELETE':
+		this.writeDeleteRequest(pkt);
+		break;
+	case 'GET_ACL':
+		this.writeGetACLRequest(pkt);
+		break;
+	case 'SET_WATCHES':
+		this.writeSetWatchesRequest(pkt);
+		break;
+	case 'GET_DATA':
+		this.writeGetDataRequest(pkt);
+		break;
+	case 'PING':
+		/* No extra data is included: the header is sufficient. */
+		break;
+	}
+};
+
+ZKBuffer.prototype.readGetChildrenRequest = function (pkt) {
+	pkt.path = this.readUString();
+	pkt.watch = this.readBool();
+};
+
+ZKBuffer.prototype.writeGetChildrenRequest = function (pkt) {
+	this.writeUString(pkt.path, 'path');
+	this.writeBool(pkt.watch, 'watch');
+};
+
+ZKBuffer.prototype.readCreateRequest = function (pkt) {
+	pkt.path = this.readUString();
+	pkt.data = this.readBuffer();
+	pkt.acl = this.readACL();
+	pkt.flags = this.readInt();
+};
+
+ZKBuffer.prototype.writeCreateRequest = function (pkt) {
+	this.writeUString(pkt.path, 'path');
+	this.writeBuffer(pkt.data, 'data');
+	this.writeACL(pkt.acl, 'acl');
+	this.writeInt(pkt.flags, 'flags');
+};
+
+ZKBuffer.prototype.readDeleteRequest = function (pkt) {
+	pkt.path = this.readUString();
+	pkt.version = this.readInt();
+};
+
+ZKBuffer.prototype.writeDeleteRequest = function (pkt) {
+	this.writeUString(pkt.path, 'name');
+	this.writeInt(pkt.version, 'version');
+};
+
+ZKBuffer.prototype.readGetACLRequest = function (pkt) {
+	pkt.path = this.readUString();
+};
+
+ZKBuffer.prototype.writeGetACLRequest = function (pkt) {
+	this.writeUString(pkt.path, 'path');
+};
+
+ZKBuffer.prototype.readGetDataRequest = function (pkt) {
+	pkt.path = this.readUString();
+	pkt.watch = this.readBool();
+};
+
+ZKBuffer.prototype.writeGetDataRequest = function (pkt) {
+	this.writeUString(pkt.path, 'path');
+	this.writeBool(pkt.watch, 'watch');
+};
+
+ZKBuffer.prototype.readSetWatchesRequest = function (pkt) {
+	var i, count;
+
+	pkt.relZxid = this.readLongBuffer();
+
+	count = this.readInt();
+	pkt.events = {};
+	pkt.events.dataChanged = [];
+	for (i = 0; i < count; ++i)
+		pkt.events.dataChanged.push(this.readUString());
+	
+	count = this.readInt();
+	pkt.events.createdOrDestroyed = [];
+	for (i = 0; i < count; ++i)
+		pkt.events.createdOrDestroyed.push(this.readUString());
+
+	count = this.readInt();
+	pkt.events.childrenChanged = [];
+	for (i = 0; i < count; ++i)
+		pkt.events.childrenChanged.push(this.readUString());
+};
+
+ZKBuffer.prototype.writeSetWatchesRequest = function (pkt) {
+	var evt, i;
+	this.writeLong(pkt.relZxid, 'relZxid');
+
+	evt = pkt.events.dataChanged || [];
+	this.writeInt(evt.length);
+	for (i = 0; i < evt.length; ++i)
+		this.writeUString(evt[i], 'dataChanged[' + i + ']');
+
+	evt = pkt.events.createdOrDestroyed || [];
+	this.writeInt(evt.length);
+	for (i = 0; i < evt.length; ++i)
+		this.writeUString(evt[i], 'createdOrDestroyed[' + i + ']');
+
+	evt = pkt.events.childrenChanged || [];
+	this.writeInt(evt.length);
+	for (i = 0; i < evt.length; ++i)
+		this.writeUString(evt[i], 'childrenChanged[' + i + ']');
+};
+
+const SPECIAL_XIDS = {};
+SPECIAL_XIDS[mod_consts.XID_NOTIFICATION] = 'NOTIFICATION';
+SPECIAL_XIDS[mod_consts.XID_PING] = 'PING';
+SPECIAL_XIDS[mod_consts.XID_AUTHENTICATION] = 'AUTH';
+SPECIAL_XIDS[mod_consts.XID_SET_WATCHES] = 'SET_WATCHES';
+
+ZKBuffer.prototype.readResponse = function (xidMap) {
+	mod_assert.object(xidMap, 'xidMap');
+
+	var pkt = {};
+	pkt.xid = this.readInt();
+	pkt.zxid = this.readLongBuffer();
+	pkt.err = mod_consts.ERR_LOOKUP[this.readInt()];
+	pkt.opcode = SPECIAL_XIDS[pkt.xid];
+	if (pkt.opcode === undefined)
+		pkt.opcode = xidMap[pkt.xid];
+	mod_assert.ok(pkt.opcode, 'reply packet must match a request');
+	if (pkt.err === 'OK') {
+		switch (pkt.opcode) {
+		case 'GET_CHILDREN':
+		case 'GET_CHILDREN2':
+			this.readGetChildrenResponse(pkt);
+			break;
+		case 'CREATE':
+			this.readCreateResponse(pkt);
+			break;
+		case 'GET_ACL':
+			this.readGetACLResponse(pkt);
+			break;
+		case 'GET_DATA':
+			this.readGetDataResponse(pkt);
+			break;
+		case 'NOTIFICATION':
+			this.readNotification(pkt);
+			break;
+		case 'SET_WATCHES':
+		case 'PING':
+		case 'DELETE':
+			/*
+			 * No special response packet format -- error code in
+			 * header determines status of the request.
+			 */
+			break;
+		default:
+			throw (new Error('Unsupported opcode ' + pkt.opcode));
+		}
+	}
+	return (pkt);
+};
+
+ZKBuffer.prototype.readGetChildrenResponse = function (pkt) {
+	var count = this.readInt();
+	pkt.children = [];
+	for (var i = 0; i < count; ++i)
+		pkt.children.push(this.readUString());
+	if (pkt.opcode === 'GET_CHILDREN2')
+		pkt.stat = this.readStat();
+};
+
+ZKBuffer.prototype.readCreateResponse = function (pkt) {
+	pkt.path = this.readUString();
+};
+
+ZKBuffer.prototype.readGetACLResponse = function (pkt) {
+	pkt.acl = this.readACL();
+	pkt.stat = this.readStat();
+};
+
+ZKBuffer.prototype.readGetDataResponse = function (pkt) {
+	pkt.data = this.readBuffer();
+	pkt.stat = this.readStat();
+};
+
+ZKBuffer.prototype.readNotification = function (pkt) {
+	var type = this.readInt();
+	pkt.type = mod_consts.NOTIFICATION_TYPE_LOOKUP[type];
+	var state = this.readInt();
+	pkt.state = mod_consts.STATE_LOOKUP[state];
+	pkt.path = this.readUString();
+};
+
+ZKBuffer.prototype.readACL = function () {
+	var count = this.readInt();
+	var acl = [];
+	for (var i = 0; i < count; ++i) {
+		var line = {};
+		line.perms = this.readPerms();
+		line.id = this.readID();
+		acl.push(line);
+	}
+	return (acl);
+};
+
+ZKBuffer.prototype.writeACL = function (acl) {
+	mod_assert.arrayOfObject(acl, 'acl');
+	var count = acl.length;
+	this.writeInt(count);
+	for (var i = 0; i < count; ++i) {
+		var line = acl[i];
+		this.writePerms(line.perms);
+		this.writeID(line.id);
+	}
+};
+
+ZKBuffer.prototype.readPerms = function () {
+	var perms = [];
+	var val = this.readInt();
+	Object.keys(mod_consts.PERM_MASKS).forEach(function (k) {
+		if (val & mod_consts.PERM_MASKS[k] != 0)
+			perms.push(k);
+	});
+	return (perms);
+};
+
+ZKBuffer.prototype.writePerms = function (perms) {
+	mod_assert.arrayOfString(perms, 'permissions');
+	var val = 0;
+	perms.forEach(function (k) {
+		var mask = mod_consts.PERM_MASKS[k.toUpperCase()];
+		mod_assert.number(mask, 'permission mask for ' + k);
+		val |= mask;
+	});
+	this.writeInt(val);
+}
+
+ZKBuffer.prototype.readID = function () {
+	var id = {};
+	id.scheme = this.readUString();
+	id.id = this.readUString();
+	return (id);
+};
+
+ZKBuffer.prototype.writeID = function (id) {
+	this.writeUString(id.scheme, 'id.scheme');
+	this.writeUString(id.id, 'id');
+};
+
+ZKBuffer.prototype.readStat = function () {
+	var stat = {};
+	stat.czxid = this.readLongBuffer();
+	stat.mzxid = this.readLongBuffer();
+	stat.ctime = this.readLongBN();
+	stat.mtime = this.readLongBN();
+	stat.version = this.readInt();
+	stat.cversion = this.readInt();
+	stat.aversion = this.readInt();
+	stat.ephemeralOwner = this.readLongBuffer();
+	stat.dataLength = this.readInt();
+	stat.numChildren = this.readInt();
+	stat.pzxid = this.readLongBuffer();
+	return (stat);
+};
diff --git a/lib/zk-consts.js b/lib/zk-consts.js
new file mode 100644
index 0000000..f1504d6
--- /dev/null
+++ b/lib/zk-consts.js
@@ -0,0 +1,100 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * Copyright (c) 2016, Joyent, Inc.
+ */
+
+module.exports = {};
+
+module.exports.PERM_MASKS = {
+	READ: (1<<0),
+	WRITE: (1<<1),
+	CREATE: (1<<2),
+	DELETE: (1<<3),
+	ADMIN: (1<<4)
+};
+
+var ERR_CODES = (module.exports.ERR_CODES = {
+	OK : 0,
+	SYSTEM_ERROR : -1,
+	RUNTIME_INCONSISTENCY : -2,
+	DATA_INCONSISTENCY : -3,
+	CONNECTION_LOSS : -4,
+	MARSHALLING_ERROR : -5,
+	UNIMPLEMENTED : -6,
+	OPERATION_TIMEOUT : -7,
+	BAD_ARGUMENTS : -8,
+	API_ERROR : -100,
+	NO_NODE : -101,
+	NO_AUTH : -102,
+	BAD_VERSION : -103,
+	NO_CHILDREN_FOR_EPHEMERALS : -108,
+	NODE_EXISTS : -110,
+	NOT_EMPTY : -111,
+	SESSION_EXPIRED : -112,
+	INVALID_CALLBACK : -113,
+	INVALID_ACL : -114,
+	AUTH_FAILED : -115
+});
+var ERR_LOOKUP = (module.exports.ERR_LOOKUP = {});
+Object.keys(ERR_CODES).forEach(function (k) {
+	ERR_LOOKUP[ERR_CODES[k]] = k;
+});
+
+var OP_CODES = (module.exports.OP_CODES = {
+	NOTIFICATION : 0,
+	CREATE : 1,
+	DELETE : 2,
+	EXISTS : 3,
+	GET_DATA : 4,
+	SET_DATA : 5,
+	GET_ACL : 6,
+	SET_ACL : 7,
+	GET_CHILDREN : 8,
+	SYNC : 9,
+	PING : 11,
+	GET_CHILDREN2 : 12,
+	CHECK : 13,
+	MULTI : 14,
+	AUTH : 100,
+	SET_WATCHES : 101,
+	SASL : 102,
+	CREATE_SESSION : -10,
+	CLOSE_SESSION : -11,
+	ERROR : -1
+});
+var OP_CODE_LOOKUP = (module.exports.OP_CODE_LOOKUP = {});
+Object.keys(OP_CODES).forEach(function (k) {
+	OP_CODE_LOOKUP[OP_CODES[k]] = k;
+});
+
+var NOTIFICATION_TYPE = (module.exports.NOTIFICATION_TYPE = {
+	CREATED : 1,
+	DELETED : 2,
+	DATA_CHANGED : 3,
+	CHILDREN_CHANGED : 4
+});
+var NOTIFICATION_TYPE_LOOKUP = (module.exports.NOTIFICATION_TYPE_LOOKUP = {});
+Object.keys(NOTIFICATION_TYPE).forEach(function (k) {
+	NOTIFICATION_TYPE_LOOKUP[NOTIFICATION_TYPE[k]] = k;
+});
+
+var STATE = (module.exports.STATE = {
+	DISCONNECTED : 0,
+	SYNC_CONNECTED : 3,
+	AUTH_FAILED : 4,
+	CONNECTED_READ_ONLY : 5,
+	SASL_AUTHENTICATED : 6,
+	EXPIRED : -122
+});
+var STATE_LOOKUP = (module.exports.STATE_LOOKUP = {});
+Object.keys(STATE).forEach(function (k) {
+	STATE_LOOKUP[STATE[k]] = k;
+});
+
+module.exports.XID_NOTIFICATION = -1;
+module.exports.XID_PING = -2;
+module.exports.XID_AUTHENTICATION = -4;
+module.exports.XID_SET_WATCHES = -8;
diff --git a/lib/zk-streams.js b/lib/zk-streams.js
new file mode 100644
index 0000000..4608c66
--- /dev/null
+++ b/lib/zk-streams.js
@@ -0,0 +1,129 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * Copyright (c) 2016, Joyent, Inc.
+ */
+
+module.exports = {
+	ZKDecodeStream: ZKDecodeStream,
+	ZKEncodeStream: ZKEncodeStream
+};
+
+const mod_assert = require('assert-plus');
+const ZKBuffer = require('./zk-buffer').ZKBuffer;
+const mod_consts = require('./zk-consts');
+const mod_util = require('util');
+const mod_stream = require('stream');
+const mod_errors = require('./errors');
+const mod_jsbn = require('jsbn');
+const mod_events = require('events');
+
+const MAX_PACKET = 8*1024*1024;
+
+function ZKDecodeStream(opts) {
+	mod_assert.object(opts, 'options');
+	mod_assert.object(opts.fsm, 'options.fsm');
+	this.zd_fsm = opts.fsm;
+	this.zd_used = 0;
+	this.zd_buffer = new Buffer(1024);
+	opts.readableObjectMode = true;
+	opts.writableObjectMode = false;
+	mod_stream.Transform.call(this, opts);
+}
+mod_util.inherits(ZKDecodeStream, mod_stream.Transform);
+
+ZKDecodeStream.prototype._transform = function (chunk, enc, cb) {
+	var self = this;
+	mod_assert.buffer(chunk);
+	while (this.zd_buffer.length < this.zd_used + chunk.length)
+		this.expandBuffer();
+	chunk.copy(this.zd_buffer, this.zd_used);
+	this.zd_used += chunk.length;
+	while (this.zd_used > 4) {
+		var len = this.zd_buffer.readInt32BE(0);
+		if (len < 0 || len > MAX_PACKET) {
+			this.emit('error', new mod_errors.ZKProtocolError(
+			    'BAD_LENGTH', 'Invalid ZK packet length'));
+			return;
+		}
+		if (this.zd_used >= 4 + len) {
+			var pkt = new Buffer(len);
+			this.zd_buffer.copy(pkt, 0, 4, 4 + len);
+			this.zd_buffer.copy(this.zd_buffer, 
+			    0, 4 + len, this.zd_used);
+			this.zd_used -= (4 + len);
+			handlePacket(pkt);
+		} else {
+			break;
+		}
+	}
+	cb();
+	function handlePacket(pktBuf) {
+		var zkb = new ZKBuffer({buffer: pktBuf});
+		var pkt;
+		if (self.zd_fsm.getState() === 'connecting') {
+			try {
+				pkt = zkb.readConnectResponse();
+			} catch (e) {
+				self.emit('error', 
+				    new mod_errors.ZKProtocolError('BAD_DECODE',
+				    'Failed to decode ConnectResponse: ' +
+				    e.name + ': ' + e.message));
+				return;
+			}
+			self.push(pkt);
+		} else {
+			try {
+				pkt = zkb.readResponse(self.zd_fsm.zs_xidMap);
+			} catch (e) {
+				self.emit('error', 
+				    new mod_errors.ZKProtocolError('BAD_DECODE',
+				    'Failed to decode Response: ' +
+				    e.name + ': ' + e.message));
+				return;
+			}
+			self.push(pkt);
+		}
+	}
+};
+
+ZKDecodeStream.prototype.expandBuffer = function () {
+	var newBuf = new Buffer(this.zd_buffer.size * 2);
+	this.zd_buffer.copy(newBuf);
+	this.zd_buffer = newBuf;
+};
+
+
+function ZKEncodeStream(opts) {
+	mod_assert.object(opts, 'options');
+	mod_assert.object(opts.fsm, 'options.fsm');
+	this.ze_fsm = opts.fsm;
+	opts.readableObjectMode = false;
+	opts.writableObjectMode = true;
+	mod_stream.Transform.call(this, opts);
+}
+mod_util.inherits(ZKEncodeStream, mod_stream.Transform);
+
+ZKEncodeStream.prototype._transform = function (pkt, enc, cb) {
+	mod_assert.object(pkt);
+	var zkb = new ZKBuffer({});
+
+	if (this.ze_fsm.getState() === 'connecting') {
+		zkb.writeLengthPrefixed(function (sub) {
+			sub.writeConnectRequest(pkt);
+		});
+		this.push(zkb.toBuffer());
+		cb();
+	} else {
+		mod_assert.number(pkt.xid);
+		mod_assert.string(pkt.opcode);
+		zkb.writeLengthPrefixed(function (sub) {
+			sub.writeRequest(pkt);
+		});
+		this.push(zkb.toBuffer());
+		this.ze_fsm.zs_xidMap[pkt.xid] = pkt.opcode;
+		cb();
+	}
+};
diff --git a/package.json b/package.json
new file mode 100644
index 0000000..8bd1de2
--- /dev/null
+++ b/package.json
@@ -0,0 +1,25 @@
+{
+  "name": "zkstream",
+  "version": "0.1.0",
+  "description": "",
+  "main": "lib/index.js",
+  "dependencies": {
+    "assert-plus": "^1.0.0",
+    "jsbn": "^0.1.0",
+    "mooremachine": "^1.2.0",
+    "node-uuid": "^1.4.7",
+    "vasync": "^1.6.3",
+    "verror": "^1.6.1"
+  },
+  "devDependencies": {
+    "json": "^9.0.3",
+    "ps-node": "^0.1.2",
+    "sinon": "^1.17.3",
+    "tape": "^4.4.0"
+  },
+  "scripts": {
+    "test": "tape test/*.test.js"
+  },
+  "author": "",
+  "license": "MPL-2.0"
+}
diff --git a/test/basic.test.js b/test/basic.test.js
new file mode 100644
index 0000000..87b1be2
--- /dev/null
+++ b/test/basic.test.js
@@ -0,0 +1,84 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * Copyright (c) 2016, Joyent, Inc.
+ */
+
+const mod_tape = require('tape');
+const mod_zk = require('./zkserver');
+const mod_client = require('../lib/client-fsm');
+const mod_net = require('net');
+
+var zk;
+
+mod_tape.test('start zk server', function (t) {
+	zk = new mod_zk.ZKServer();
+	zk.onState('running', function () {
+		t.end();
+	});
+});
+
+mod_tape.test('simple connect and ping', function (t) {
+	var zkc = new mod_client.ClientFSM({});
+	var sock = mod_net.connect({
+		host: 'localhost',
+		port: 2181
+	});
+	zkc.attach(sock);
+
+	zkc.onState('connected', function () {
+		zkc.ping(function (err) {
+			t.error(err);
+			sock.destroy();
+			t.end();
+		});
+	});
+});
+
+mod_tape.test('set up test object', function (t) {
+	zk.cli('create', '/foo', 'hi', 'world:anyone:cdrwa', function (err) {
+		t.error(err);
+		t.end();
+	});
+});
+
+mod_tape.test('find the test object', function (t) {
+	var zkc = new mod_client.ClientFSM({});
+	var sock = mod_net.connect({
+		host: 'localhost',
+		port: 2181
+	});
+	zkc.attach(sock);
+
+	zkc.onState('connected', function () {
+		var req = zkc.request({
+			opcode: 'GET_CHILDREN',
+			path: '/',
+			watch: false
+		});
+		req.on('reply', function (pkt) {
+			t.strictEqual(pkt.opcode, 'GET_CHILDREN');
+			t.deepEqual(pkt.children, ['zookeeper', 'foo']);
+
+			var req2 = zkc.request({
+				opcode: 'GET_DATA',
+				path: '/foo',
+				watch: false
+			});
+			req2.on('reply', function (pkt) {
+				t.strictEqual(pkt.data.toString('ascii'), 'hi');
+				sock.destroy();
+				t.end();
+			});
+		});
+	});
+});
+
+mod_tape.test('stop zk server', function (t) {
+	zk.onState('stopped', function () {
+		t.end();
+	});
+	zk.stop();
+});
diff --git a/test/streams.test.js b/test/streams.test.js
new file mode 100644
index 0000000..7bb0647
--- /dev/null
+++ b/test/streams.test.js
@@ -0,0 +1,76 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * Copyright (c) 2016, Joyent, Inc.
+ */
+
+const mod_tape = require('tape');
+
+const mod_zkbuf = require('../lib/zk-buffer');
+const mod_zkstreams = require('../lib/zk-streams');
+
+/* An example packet capture of "zkCli ls /" */
+var CAPTURE1 = [
+	{ send: 'AAAALQAAAAAAAAAAAAAAAAAAdTAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAA' +
+	    'AAAAAA==' },
+	{ recv: 'AAAAJQAAAAAAAHUwAVWjqFbbAAAAAAAQh19uvwgo25o9B6hUkSvqKQA=' },
+	{ send: 'AAAADgAAAAEAAAAIAAAAAS8A' },
+	{ recv: 'AAAAKAAAAAEAAAAAAAAFFwAAAAAAAAACAAAACXpvb2tlZXBlcgAAAANmb28=' }
+];
+var DECODED1 = [
+	{
+		lastZxidSeen: new Buffer([0, 0, 0, 0, 0, 0, 0, 0]),
+		passwd: new Buffer([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+		    0, 0, 0, 0, 0]),
+		protocolVersion: 0,
+		sessionId: new Buffer([0, 0, 0, 0, 0, 0, 0, 0]),
+		timeOut: 30000
+	},
+	{
+		passwd: new Buffer('h19uvwgo25o9B6hUkSvqKQ==', 'base64'),
+		protocolVersion: 0,
+		sessionId: new Buffer('AVWjqFbbAAA=', 'base64'),
+		timeOut: 30000
+	},
+	{
+		xid: 1,
+		opcode: 'GET_CHILDREN',
+		path: '/',
+		watch: false
+	},
+	{
+		xid: 1,
+		opcode: 'GET_CHILDREN',
+		err: 'OK',
+		zxid: new Buffer([0, 0, 0, 0, 0, 0, 5, 0x17]),
+		children: ['zookeeper', 'foo']
+	}
+];
+
+mod_tape.test('decode capture #1', function (t) {
+	var xidMap = {};
+	for (var i = 0; i < CAPTURE1.length; ++i) {
+		var data = CAPTURE1[i].send || CAPTURE1[i].recv;
+		var buf = new Buffer(data, 'base64');
+		var zkb = new mod_zkbuf.ZKBuffer({ buffer: buf });
+		var len = zkb.readInt();
+		t.strictEqual(len, zkb.remainder().length);
+		var pkt;
+		if (i == 0) {
+			pkt = zkb.readConnectRequest();
+		} else if (i == 1) {
+			pkt = zkb.readConnectResponse();
+		} else if (CAPTURE1[i].send) {
+			pkt = zkb.readRequest();
+			xidMap[pkt.xid] = pkt.opcode;
+		} else if (CAPTURE1[i].recv) {
+			pkt = zkb.readResponse(xidMap);
+		} else {
+			t.fail('Invalid capture');
+		}
+		t.deepEqual(pkt, DECODED1[i]);
+	}
+	t.end();
+});
diff --git a/test/zkserver.js b/test/zkserver.js
new file mode 100644
index 0000000..49a71ec
--- /dev/null
+++ b/test/zkserver.js
@@ -0,0 +1,212 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * Copyright (c) 2016, Joyent, Inc.
+ */
+
+module.exports = { ZKServer: ZKServer };
+
+const mod_fsm = require('mooremachine');
+const mod_cproc = require('child_process');
+const mod_fs = require('fs');
+const mod_util = require('util');
+const mod_assert = require('assert-plus');
+const mod_ps = require('ps-node');
+const mod_events = require('events');
+
+function ZKServer(opts) {
+	this.zk_cmds = ['zkServer.sh', 'zkServer'];
+	this.zk_opts = opts;
+	this.zk_tokill = [];
+	if (opts && opts.command)
+		this.zk_cmds.unshift(opts.command);
+	mod_fsm.FSM.call(this, 'starting');
+}
+mod_util.inherits(ZKServer, mod_fsm.FSM);
+
+ZKServer.prototype.cli = function () {
+	mod_assert.strictEqual(this.getState(), 'running');
+
+	var args = Array.prototype.slice.apply(arguments);
+	var cb = args.pop();
+	mod_assert.func(cb, 'callback');
+	var cmd = this.zk_cmd.replace('zkServer', 'zkCli');
+
+	var kid = mod_cproc.spawn(cmd, args);
+
+	var output = '';
+	kid.stdout.on('data', function (d) {
+		output += d.toString('ascii');
+	});
+	var errout = '';
+	kid.stderr.on('data', function (d) {
+		errout += d.toString('ascii');
+	});
+	kid.on('close', function (code) {
+		if (code == 0) {
+			output = output.split('\n');
+			if (/^Connecting to /.test(output[0]))
+				output.shift();
+			if (output[0] == '')
+				output.shift();
+			if (/^WATCHER::/.test(output[0]))
+				output.shift();
+			if (output[0] == '')
+				output.shift();
+			if (/^WatchedEvent.*type:None/.test(output[0]))
+				output.shift();
+			if (output[0] == '')
+				output.shift();
+			cb(null, output.join('\n'));
+
+		} else {
+			errout = errout.split('\n');
+			var excs = errout.filter(function (l) {
+				return (/^Exception in/.test(l));
+			});
+			if (excs.length > 0) {
+				cb(new Error(excs[0]));
+				return;
+			}
+			errout = errout.filter(function (l) {
+				return (!/^Connecting to /.test(l));
+			});
+			cb(new Error(errout.join(" ")));
+		}
+	});
+};
+
+ZKServer.prototype.state_starting = function (on) {
+	this.zk_cmd = this.zk_cmds.shift();
+	this.gotoState('spawning');
+};
+
+ZKServer.prototype.state_spawning = function (on) {
+	var self = this;
+	this.zk_kid = mod_cproc.spawn(this.zk_cmd, ['start-foreground']);
+	on(this.zk_kid, 'error', function (err) {
+		if (err.code === 'ENOENT') {
+			self.gotoState('starting');
+		} else {
+			self.zk_lastError = err;
+			self.gotoState('error');
+		}
+	});
+	var output = '';
+	this.zk_kid.stderr.on('data', function (data) {
+		console.error('zk: %j', data.toString('ascii'));
+	});
+	this.zk_kid.stdout.on('data', function (data) {
+		console.error('zk: %j', data.toString('ascii'));
+	});
+	on(this.zk_kid.stderr, 'data', function (data) {
+		output += data.toString('ascii');
+		var lines = output.split('\n');
+		lines = lines.map(function (l) {
+			return (/^Using config: [^ \t]+$/.test(l));
+		});
+		if (lines.length > 0)
+			self.gotoState('findkids');
+	});
+	on(this.zk_kid, 'close', function (code) {
+		self.zk_lastError = new Error('Exited with status ' + code);
+		self.gotoState('error');
+	});
+};
+
+ZKServer.prototype.state_findkids = function (on) {
+	var self = this;
+	var req = new mod_events.EventEmitter();
+
+	mod_ps.lookup({ ppid: self.zk_kid.pid },
+	    function (err, res) {
+		if (err)
+			req.emit('error', err);
+		else
+			req.emit('result', res);
+	});
+
+	on(req, 'error', function (err) {
+		self.zk_lastError = err;
+		self.gotoState('error');
+	});
+
+	on(req, 'result', function (res) {
+		self.zk_tokill = res.map(function (ps) {
+			return (parseInt(ps.pid, 10));
+		});
+		self.zk_tokill.push(self.zk_kid.pid);
+		self.gotoState('testing');
+	});
+};
+
+ZKServer.prototype.state_testing = function (on, once, timeout) {
+	var self = this;
+	var cmd = this.zk_cmd.replace('zkServer', 'zkCli');
+
+	timeout(10000, function () {
+		self.zk_lastError = new Error('Timeout');
+		self.gotoState('error');
+	});
+
+	timeout(1000, function () {
+		var kid = mod_cproc.spawn(cmd, ['ls', '/']);
+		on(kid, 'close', function (code) {
+			if (code == 0) {
+				self.gotoState('running');
+			} else {
+				self.zk_lastError = new Error(
+				    'Testing command exited with status ' +
+				    code);
+				self.gotoState('error');
+			}
+		});
+	});
+
+	on(self.zk_kid, 'close', function (code) {
+		self.zk_lastError = new Error(
+		    'Exited with status ' + code);
+		self.gotoState('error');
+	});
+};
+
+ZKServer.prototype.state_running = function (on) {
+	var self = this;
+	on(this.zk_kid, 'close', function (code) {
+		self.zk_lastError = new Error('Exited with status ' + code);
+		self.gotoState('error');
+	});
+	on(this, 'stopAsserted', function () {
+		self.gotoState('stopping');
+	});
+	on(process, 'exit', function () {
+		self.gotoState('stopping');
+	});
+};
+
+ZKServer.prototype.stop = function () {
+	mod_assert.strictEqual(this.getState(), 'running');
+	this.emit('stopAsserted');
+};
+
+ZKServer.prototype.state_stopping = function (on) {
+	var self = this;
+	on(this.zk_kid, 'close', function (code) {
+		self.gotoState('stopped');
+	});
+	this.zk_tokill.forEach(function (pid) {
+		console.error('zk: killing %d', pid);
+		mod_cproc.spawnSync('kill', [pid]);
+	});
+};
+
+ZKServer.prototype.state_stopped = function () {
+	delete (this.zk_kid);
+};
+
+ZKServer.prototype.state_error = function () {
+	delete (this.zk_kid);
+	this.emit('error', this.zk_lastError);
+};
diff --git a/tools/bashstyle b/tools/bashstyle
new file mode 100644
index 0000000..3e8052e
--- /dev/null
+++ b/tools/bashstyle
@@ -0,0 +1,164 @@
+#!/usr/bin/env node
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2014, Joyent, Inc.
+ */
+
+/*
+ * bashstyle: check bash scripts for adherence to style guidelines, including:
+ *
+ *    o no lines longer than 80 characters
+ *    o file does not end with a blank line
+ *    o Do not use 'local' and var initialization *using a subshell* in the
+ *      same statement. See
+ *      <http://www.tldp.org/LDP/abs/html/localvar.html#EXITVALANOMALY01>
+ *      for why not. Arguably this belongs in a separate 'bashlint'.
+ *
+ * Future enhancements could include:
+ *    o indents consistent with respect to tabs, spaces
+ *    o indents consistently sized (all are some multiple of the smallest
+ *      indent, which must be a tab or 4 or 8 spaces)
+ */
+
+var VERSION = '2.0.0';
+
+var mod_assert = require('assert');
+var mod_fs = require('fs');
+
+var nerrors = 0;
+
+main();
+process.exit(0);
+
+function main()
+{
+	var files = process.argv.slice(2);
+
+	if (files.length === 0) {
+		console.error('usage: %s file1 [...]',
+		    process.argv.slice(0, 2).join(' '));
+		process.exit(2);
+	}
+
+	files.forEach(checkFile);
+
+	if (nerrors != 0)
+		process.exit(1);
+}
+
+function checkFile(filename)
+{
+	var text = mod_fs.readFileSync(filename, 'utf-8');
+	var lines = text.split('\n');
+	var i;
+	var styled = false;
+	var styleStart;
+
+	mod_assert.ok(lines.length > 0);
+
+	/*
+	 * Expand tabs in each line and check for long lines.
+	 */
+	for (i = 1; i <= lines.length; i++) {
+		var line = expandTabs(lines[i - 1]);
+
+		if (i > 1 && lines[i-2].match(/# BASHSTYLED/)) {
+			continue;
+		}
+
+		if (line.match(/# BEGIN BASHSTYLED/)) {
+			styleStart = i;
+			styled = true;
+		}
+
+		if (line.match(/# END BASHSTYLED/)) {
+			if (styled != true) {
+				nerrors++;
+				console.log('%s: %d: END BASHSTYLED w/o corresponding BEGIN',
+				            filename, i);
+			}
+			styled = false;
+		}
+
+		if (!styled && line.match(/^\s*local\s+(\w+)\s*=.*\$\(/)) {
+			nerrors++;
+			var m = line.match(/^\s*local\s+(\w+)\s*=/);
+			console.log('%s: %d: declaring and setting a "local" ' +
+				'var in the same statement ' +
+				'ignores a subshell return code ' +
+				'<http://www.tldp.org/LDP/abs/html/localvar.html#EXITVALANOMALY01>: ' +
+				'local %s=...',
+				filename, i, m[1]);
+		}
+
+		// Regexplanation: non-[, [, space (contents) space, ], non-]
+		// groups before and after brackets to ease search/replace.
+		if (!styled && line.match(/(^|[^\[])\[(\s.+\s)\]([^\]])/)) {
+			nerrors++;
+			console.log('%s: %d: prefer [[ to [ for tests.', filename, i);
+		}
+
+		if (!styled && line.length > 80) {
+			nerrors++;
+			console.log('%s: %d: line exceeds 80 columns',
+			    filename, i);
+		}
+	}
+
+	if (styled) {
+		nerrors++;
+		console.log('%s: %d: BEGIN BASHSTYLED that does not END',
+		            filename, styleStart);
+	}
+
+
+	/*
+	 * No sane editor lets you save a file without a newline at the very end.
+	 */
+	if (lines[lines.length - 1].length !== 0) {
+		nerrors++;
+		console.log('%s: %d: file does not end with newline',
+			filename, lines.length);
+	}
+
+	/*
+	 * Since the file will always end with a newline, the last entry of
+	 * "lines" will actually be blank.
+	 */
+	if (lines.length > 1 && lines[lines.length - 2].length === 0) {
+		nerrors++;
+		console.log('%s: %d: file ends with a blank line',
+		    filename, lines.length - 1);
+	}
+}
+
+function expandTabs(text)
+{
+	var out = '';
+	var col = 0;
+	var j, k;
+
+	for (j = 0; j < text.length; j++) {
+		if (text[j] != '\t') {
+			out += text[j];
+			col++;
+			continue;
+		}
+
+		k = 8 - (col % 8);
+		col += k;
+
+		do {
+			out += ' ';
+		}  while (--k > 0);
+
+		col += k;
+	}
+
+	return (out);
+}
diff --git a/tools/jsl.node.conf b/tools/jsl.node.conf
new file mode 100644
index 0000000..0388cde
--- /dev/null
+++ b/tools/jsl.node.conf
@@ -0,0 +1,153 @@
+#
+# Configuration File for JavaScript Lint 
+#
+# This configuration file can be used to lint a collection of scripts, or to enable
+# or disable warnings for scripts that are linted via the command line.
+#
+
+### Warnings
+# Enable or disable warnings based on requirements.
+# Use "+WarningName" to display or "-WarningName" to suppress.
+#
++ambiguous_else_stmt          # the else statement could be matched with one of multiple if statements (use curly braces to indicate intent
++ambiguous_nested_stmt        # block statements containing block statements should use curly braces to resolve ambiguity
++ambiguous_newline            # unexpected end of line; it is ambiguous whether these lines are part of the same statement
++anon_no_return_value         # anonymous function does not always return value
++assign_to_function_call      # assignment to a function call
+-block_without_braces         # block statement without curly braces
++comma_separated_stmts        # multiple statements separated by commas (use semicolons?)
++comparison_type_conv         # comparisons against null, 0, true, false, or an empty string allowing implicit type conversion (use === or !==)
++default_not_at_end           # the default case is not at the end of the switch statement
++dup_option_explicit          # duplicate "option explicit" control comment
++duplicate_case_in_switch     # duplicate case in switch statement
++duplicate_formal             # duplicate formal argument {name}
++empty_statement              # empty statement or extra semicolon
++identifier_hides_another     # identifer {name} hides an identifier in a parent scope
+-inc_dec_within_stmt          # increment (++) and decrement (--) operators used as part of greater statement
++incorrect_version            # Expected /*jsl:content-type*/ control comment. The script was parsed with the wrong version.
++invalid_fallthru             # unexpected "fallthru" control comment
++invalid_pass                 # unexpected "pass" control comment
++jsl_cc_not_understood        # couldn't understand control comment using /*jsl:keyword*/ syntax
++leading_decimal_point        # leading decimal point may indicate a number or an object member
++legacy_cc_not_understood     # couldn't understand control comment using /*@keyword@*/ syntax
++meaningless_block            # meaningless block; curly braces have no impact
++mismatch_ctrl_comments       # mismatched control comment; "ignore" and "end" control comments must have a one-to-one correspondence
++misplaced_regex              # regular expressions should be preceded by a left parenthesis, assignment, colon, or comma
++missing_break                # missing break statement
++missing_break_for_last_case  # missing break statement for last case in switch
++missing_default_case         # missing default case in switch statement
++missing_option_explicit      # the "option explicit" control comment is missing
++missing_semicolon            # missing semicolon
++missing_semicolon_for_lambda # missing semicolon for lambda assignment
++multiple_plus_minus          # unknown order of operations for successive plus (e.g. x+++y) or minus (e.g. x---y) signs
++nested_comment               # nested comment
++no_return_value              # function {name} does not always return a value
++octal_number                 # leading zeros make an octal number
++parseint_missing_radix       # parseInt missing radix parameter
++partial_option_explicit      # the "option explicit" control comment, if used, must be in the first script tag
++redeclared_var               # redeclaration of {name}
++trailing_comma_in_array      # extra comma is not recommended in array initializers
++trailing_decimal_point       # trailing decimal point may indicate a number or an object member
++undeclared_identifier        # undeclared identifier: {name}
++unreachable_code             # unreachable code
+-unreferenced_argument        # argument declared but never referenced: {name}
+-unreferenced_function        # function is declared but never referenced: {name}
++unreferenced_variable        # variable is declared but never referenced: {name}
++unsupported_version          # JavaScript {version} is not supported
++use_of_label                 # use of label
++useless_assign               # useless assignment
++useless_comparison           # useless comparison; comparing identical expressions
+-useless_quotes               # the quotation marks are unnecessary
++useless_void                 # use of the void type may be unnecessary (void is always undefined)
++var_hides_arg                # variable {name} hides argument
++want_assign_or_call          # expected an assignment or function call
++with_statement               # with statement hides undeclared variables; use temporary variable instead
+
+
+### Output format
+# Customize the format of the error message.
+#    __FILE__ indicates current file path
+#    __FILENAME__ indicates current file name
+#    __LINE__ indicates current line
+#    __COL__ indicates current column
+#    __ERROR__ indicates error message (__ERROR_PREFIX__: __ERROR_MSG__)
+#    __ERROR_NAME__ indicates error name (used in configuration file)
+#    __ERROR_PREFIX__ indicates error prefix
+#    __ERROR_MSG__ indicates error message
+#
+# For machine-friendly output, the output format can be prefixed with
+# "encode:". If specified, all items will be encoded with C-slashes.
+#
+# Visual Studio syntax (default):
++output-format __FILE__(__LINE__): __ERROR__
+# Alternative syntax:
+#+output-format __FILE__:__LINE__: __ERROR__
+
+
+### Context
+# Show the in-line position of the error.
+# Use "+context" to display or "-context" to suppress.
+#
++context
+
+
+### Control Comments
+# Both JavaScript Lint and the JScript interpreter confuse each other with the syntax for
+# the /*@keyword@*/ control comments and JScript conditional comments. (The latter is
+# enabled in JScript with @cc_on@). The /*jsl:keyword*/ syntax is preferred for this reason,
+# although legacy control comments are enabled by default for backward compatibility.
+#
+-legacy_control_comments
+
+
+### Defining identifiers
+# By default, "option explicit" is enabled on a per-file basis.
+# To enable this for all files, use "+always_use_option_explicit"
+-always_use_option_explicit
+
+# Define certain identifiers of which the lint is not aware.
+# (Use this in conjunction with the "undeclared identifier" warning.)
+#
+# Common uses for webpages might be:
++define __dirname
++define clearInterval
++define clearTimeout
++define console
++define exports
++define global
++define module
++define process
++define require
++define setInterval
++define setTimeout
++define setImmediate
++define clearImmediate
++define Buffer
++define JSON
++define Math
+
+# ES6 Typed Arrays
++define ArrayBuffer
++define DataView
++define Int8Array
++define Uint8Array
++define Uint8ClampedArray
++define Int16Array
++define Uint16Array
++define Int32Array
++define Uint32Array
++define Float32Array
++define Float64Array
+
+### JavaScript Version
+# To change the default JavaScript version:
+#+default-type text/javascript;version=1.5
+#+default-type text/javascript;e4x=1
+
+### Files
+# Specify which files to lint
+# Use "+recurse" to enable recursion (disabled by default).
+# To add a set of files, use "+process FileName", "+process Folder\Path\*.js",
+# or "+process Folder\Path\*.htm".
+#
+
diff --git a/tools/jsstyle.conf b/tools/jsstyle.conf
new file mode 100644
index 0000000..5e7999e
--- /dev/null
+++ b/tools/jsstyle.conf
@@ -0,0 +1,12 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+indent=tab
+blank-after-start-comment=0
diff --git a/tools/mk/Makefile.defs b/tools/mk/Makefile.defs
new file mode 100644
index 0000000..85139d7
--- /dev/null
+++ b/tools/mk/Makefile.defs
@@ -0,0 +1,51 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.defs: common defines.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This makefile defines some useful defines. Include it at the top of
+# your Makefile.
+#
+# Definitions in this Makefile:
+#
+#	TOP 		The absolute path to the project directory. The top dir.
+#	BRANCH 		The current git branch.
+#	TIMESTAMP	The timestamp for the build. This can be set via
+#			the TIMESTAMP envvar (used by MG-based builds).
+#	STAMP		A build stamp to use in built package names.
+#
+
+TOP := $(shell pwd)
+
+#
+# Mountain Gorilla-spec'd versioning.
+# See "Package Versioning" in MG's README.md:
+# <https://mo.joyent.com/mountain-gorilla/blob/master/README.md#L139-200>
+#
+# Need GNU awk for multi-char arg to "-F".
+_AWK := $(shell (which gawk >/dev/null && echo gawk) \
+	|| (which nawk >/dev/null && echo nawk) \
+	|| echo awk)
+BRANCH := $(shell git symbolic-ref HEAD | $(_AWK) -F/ '{print $$3}')
+ifeq ($(TIMESTAMP),)
+	TIMESTAMP := $(shell date -u "+%Y%m%dT%H%M%SZ")
+endif
+_GITDESCRIBE := g$(shell git describe --all --long --dirty | $(_AWK) -F'-g' '{print $$NF}')
+STAMP := $(BRANCH)-$(TIMESTAMP)-$(_GITDESCRIBE)
+
+# node-gyp will print build info useful for debugging with V=1
+export V=1
diff --git a/tools/mk/Makefile.deps b/tools/mk/Makefile.deps
new file mode 100644
index 0000000..1cffbe7
--- /dev/null
+++ b/tools/mk/Makefile.deps
@@ -0,0 +1,54 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.deps: Makefile for including common tools as dependencies
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This file is separate from Makefile.targ so that teams can choose
+# independently whether to use the common targets in Makefile.targ and the
+# common tools here.
+#
+
+#
+# javascriptlint
+#
+JSL_EXEC	?= deps/javascriptlint/build/install/jsl
+JSL		?= $(JSL_EXEC)
+
+$(JSL_EXEC): | deps/javascriptlint/.git
+	cd deps/javascriptlint && make install
+
+distclean::
+	if [[ -f deps/javascriptlint/Makefile ]]; then \
+		cd deps/javascriptlint && make clean; \
+	fi
+
+#
+# jsstyle
+#
+JSSTYLE_EXEC	?= deps/jsstyle/jsstyle
+JSSTYLE		?= $(JSSTYLE_EXEC)
+
+$(JSSTYLE_EXEC): | deps/jsstyle/.git
+
+#
+# restdown
+#
+RESTDOWN_EXEC	?= deps/restdown/bin/restdown
+RESTDOWN	?= python $(RESTDOWN_EXEC)
+$(RESTDOWN_EXEC): | deps/restdown/.git
+
+EXTRA_DOC_DEPS	?=
diff --git a/tools/mk/Makefile.node.defs b/tools/mk/Makefile.node.defs
new file mode 100644
index 0000000..9376841
--- /dev/null
+++ b/tools/mk/Makefile.node.defs
@@ -0,0 +1,104 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.node.defs: Makefile for building and bundling your own Node.js.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile facilitates building and bundling your own copy of Node.js in
+# your repo.  All it does is define variables for node, node-waf, and npm for
+# you to use elsewhere in your Makefile and rules to build these tools when
+# needed.
+#
+# To use this facility, include "Makefile.node.defs", use the variables as
+# described below to define targets, and then include "Makefile.node.targ".
+#
+# There are two use cases addressed here:
+#
+# (1) Invoking node, node-waf, or npm as part of the build process, as in "npm
+#     install" and "node-waf configure build".  To facilitate this, this
+#     Makefile defines Make variables NODE, NODE_WAF, and NPM that you can use
+#     to invoke these commands during the build process.  You MUST NOT assume
+#     that these variables just evaluate to the filenames themselves, as they
+#     may have environment variable definitions and other things that prevent
+#     you from using them directly as a filename.  If you want that, see (2).
+#
+#     Wherever you use one of these variables, you MUST include a dependency on
+#     the corresponding *_EXEC variable as well, like so:
+#
+#	node_modules/restify: deps/restify $(NPM_EXEC)
+#		$(NPM) install deps/restify
+#
+#     or better, use an order-only dependency to avoid spurious rebuilds:
+#
+#	node_modules/restify: deps/restify | $(NPM_EXEC)
+#		$(NPM) install deps/restify
+#
+#     Otherwise, the underlying file will not get built.  We don't
+#     automatically build them as part of "all" because that approach is
+#     brittle.
+#
+# (2) Specifying paths for invoking node, node-waf, or npm at RUNTIME, as in
+#     specifying the path to node used for the start method of your service's
+#     SMF manifest.  For this, this Makefile defines variables NODE_EXEC,
+#     NODE_WAF_EXEC, and NPM_EXEC, which represent the relative paths of these
+#     files from the root of the workspace.  You MUST NOT use these variables
+#     to invoke these commands during the build process.  See (1) instead.
+#
+#     However, in order to work at runtime, you must build the tool as well.
+#     That is, if you use NODE_EXEC to specify the path to node, you must
+#     depend on NODE_EXEC somewhere. This usually happens anyway because you
+#     usually need them during the build process too, but if you don't then
+#     you need to explicitly add NODE_EXEC (or whichever) to your "all"
+#     target.
+#
+# When including this Makefile, you MAY also specify:
+#
+#	BUILD			top-level directory for built binaries
+#				(default: "build")
+#
+#	NODE_INSTALL		where node should install its built items
+#				(default: "$BUILD/node")
+#
+#	NODE_CONFIG_FLAGS	extra flags to pass to Node's "configure"
+#				(default: "--with-dtrace" on SmartOS; empty
+#				otherwise.)
+#
+
+TOP ?= $(error You must include Makefile.defs before this makefile)
+
+BUILD		?= build
+NODE_INSTALL 	?= $(BUILD)/node
+DISTCLEAN_FILES	+= $(NODE_INSTALL)
+
+NODE_CONFIG_FLAGS += --prefix=$(TOP)/$(NODE_INSTALL)
+
+ifeq ($(shell uname -s),SunOS)
+	NODE_CONFIG_FLAGS += 	--with-dtrace \
+				--openssl-libpath=/opt/local/lib \
+				--openssl-includes=/opt/local/include
+endif
+
+NODE_EXEC	= $(NODE_INSTALL)/bin/node
+NODE_WAF_EXEC	= $(NODE_INSTALL)/bin/node-waf
+NPM_EXEC	= $(NODE_INSTALL)/bin/npm
+
+# Ensure these use absolute paths to the executables to allow running
+# from a dir other than the project top.
+NODE		:= $(TOP)/$(NODE_EXEC)
+NODE_WAF	:= $(TOP)/$(NODE_WAF_EXEC)
+NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) node $(TOP)/$(NPM_EXEC)
diff --git a/tools/mk/Makefile.node.targ b/tools/mk/Makefile.node.targ
new file mode 100644
index 0000000..bf53f78
--- /dev/null
+++ b/tools/mk/Makefile.node.targ
@@ -0,0 +1,42 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.node.targ: See Makefile.node.defs.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+ifneq ($(shell uname -s),SunOS)
+NODE_PREBUILT_VERSION ?= $(error You must define NODE_PREBUILT_VERSION to use Makefile.node.targ on non-SunOS)
+endif
+
+ifeq ($(shell uname -s),SunOS)
+$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC): | deps/node/.git
+	(cd deps/node; ./configure $(NODE_CONFIG_FLAGS) && $(MAKE) && $(MAKE) install)
+else
+$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC):
+	(mkdir -p $(BUILD) \
+		&& cd $(BUILD) \
+		&& [[ -d src-node ]] && (cd src-node && git checkout master && git pull) || git clone https://github.com/joyent/node.git src-node \
+		&& cd src-node \
+		&& git checkout $(NODE_PREBUILT_VERSION) \
+		&& ./configure $(NODE_CONFIG_FLAGS) \
+		&& $(MAKE) && $(MAKE) install)
+endif
+
+DISTCLEAN_FILES += $(NODE_INSTALL) $(BUILD)/src-node
+
+distclean::
+	-([[ ! -d deps/node ]] || (cd deps/node && $(MAKE) distclean))
diff --git a/tools/mk/Makefile.node_deps.defs b/tools/mk/Makefile.node_deps.defs
new file mode 100644
index 0000000..29a83f7
--- /dev/null
+++ b/tools/mk/Makefile.node_deps.defs
@@ -0,0 +1,43 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.node_deps.defs: Makefile for including npm modules whose sources
+# reside inside the repo.  This should NOT be used for modules in the npm
+# public repo or modules that could be specified with git SHAs.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile takes as input the following make variable:
+#
+#    REPO_MODULES	List of relative paths to node modules (i.e., npm
+#    			packages) inside this repo.  For example:
+#    			src/node-canative, where there's a binary npm package
+#    			in src/node-canative.
+#
+# Based on the above, this Makefile defines the following new variables:
+#
+#    REPO_DEPS		List of relative paths to the installed modules.  For
+#    			example: "node_modules/canative".
+#
+# The accompanying Makefile.node_deps.targ defines a target that will install
+# each of REPO_MODULES into REPO_DEPS and remove REPO_DEPS with "make clean".
+# The top-level Makefile is responsible for depending on REPO_DEPS where
+# appropriate (usually the "deps" or "all" target).
+#
+
+REPO_DEPS    = $(REPO_MODULES:src/node-%=node_modules/%)
+CLEAN_FILES += $(REPO_DEPS)
diff --git a/tools/mk/Makefile.node_deps.targ b/tools/mk/Makefile.node_deps.targ
new file mode 100644
index 0000000..bb2ab4f
--- /dev/null
+++ b/tools/mk/Makefile.node_deps.targ
@@ -0,0 +1,24 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.node_deps.targ: targets for Makefile.node_deps.defs.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+NPM_EXEC  ?= $(error NPM_EXEC must be defined for Makefile.node_deps.targ)
+
+node_modules/%: src/node-% | $(NPM_EXEC)
+	$(NPM) install $<
diff --git a/tools/mk/Makefile.node_prebuilt.defs b/tools/mk/Makefile.node_prebuilt.defs
new file mode 100644
index 0000000..5744489
--- /dev/null
+++ b/tools/mk/Makefile.node_prebuilt.defs
@@ -0,0 +1,153 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.node_prebuilt.defs: Makefile for including a prebuilt Node.js build.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile facilitates downloading and bundling a prebuilt node.js
+# build (using the 'sdcnode' distro builds). This is an alternative to
+# the "Makefile.node.*" makefiles for *building* a node from source.
+#
+# Usage:
+#
+# - Define `NODE_PREBUILT_VERSION` in your Makefile to choose a node version.
+#   E.g.: `NODE_PREBUILT_VERSION=v0.6.19`. See other optional variables
+#   below.
+# - `include tools/mk/Makefile.node_prebuilt.defs` after this in your Makefile.
+# - `include tools/mk/Makefile.node_prebuilt.targ` near the end of your
+#   Makefile.
+# - Have at least one of your Makefile targets depend on either `$(NODE_EXEC)`
+#   or `$(NPM_EXEC)`. E.g.:
+#
+#		node_modules/restify: deps/restify $(NPM_EXEC)
+#			$(NPM) install deps/restify
+#
+#   or better, use an order-only dependency to avoid spurious rebuilds:
+#
+#		node_modules/restify: deps/restify | $(NPM_EXEC)
+#			$(NPM) install deps/restify
+#
+# - Use `$(NPM)` or `$(NODE)` to use your node build.
+# - Include the "$(NODE_INSTALL)" tree in your release package.
+#
+#
+# When including this Makefile, you MUST also specify:
+#
+#	NODE_PREBUILT_VERSION 	The node version in the prebuilt 'sdcnode'
+#				package to use. Typically this is one of the
+#				node version tags, e.g. "v0.6.18" but it
+#				can be any commitish.
+#
+# When including this Makefile, you MAY also specify:
+#
+#	NODE_PREBUILT_DIR 	The dir in which to find sdcnode builds. This
+#				can either be a *local directory* or *a
+#				URL* dir (with trailing '/') which serves
+#				Apache/Nginx dir listing HTML.
+#				(default: sdcnode master build dir on stuff)
+#
+#	NODE_PREBUILT_TAG	The 'sdcnode' project supports special
+#				configuration builds of node, e.g. say a
+#				build configured `--without-ssl`. These
+#				special configurations are given a tag, e.g.
+#				'gz', that is used in the filename. Optionally
+#				specify a tag name here.
+#				(default: empty)
+#
+#	NODE_PREBUILT_BRANCH	Specify a particular branch of 'sdcnode' builds
+#				from which to pull. Generally one should stick
+#				with the default.
+#				(default: master)
+#
+#	NODE_PREBUILT_IMAGE		If you have a zone image that differs from that
+#				for an sdcnode build that you want to use (potential compat
+#				issues be damned), then set this to the UUID of the sdcnode
+#				build you want. See here for available build image uuids:
+#				<https://download.joyent.com/pub/build/sdcnode/master-latest/sdcnode/>
+#
+#	BUILD			top-level directory for built binaries
+#				(default: "build")
+#
+#	NODE_INSTALL		where node should install its built items
+#				(default: "$BUILD/node")
+#
+#
+# Dev Notes:
+#
+# This works by getting "NODE_PREBUILT_NAME" from the provided "NODE_PREBUILT_*"
+# vars and the image version (via 'mdata-get sdc:image_uuid'). The image uuid is
+# included to ensure an exact match with the build machine. This name (e.g.
+# "v0.6.18-zone-$uuid") is used to find a matching "sdcnode-$name-*.tgz" build
+# in "NODE_PREBUILT_DIR" (either a local directory or a URL). That tarball is
+# downloaded and extracted into "NODE_INSTALL".
+#
+# The "*_EXEC" vars are set to named symlinks, e.g.
+# "build/prebuilt-node-v0.6.18-$uuid", so that a change of selected node
+# build (say the developer changes NODE_PREBUILT_VERSION) will recreate the
+# node install.
+#
+# See <https://mo.joyent.com/docs/sdcnode/master/> for details on 'sdcnode-*'
+# package naming.
+#
+
+TOP ?= $(error You must include Makefile.defs before this makefile)
+NODE_PREBUILT_VERSION ?= $(error NODE_PREBUILT_VERSION is not set.)
+
+
+BUILD		?= build
+NODE_INSTALL	?= $(BUILD)/node
+DISTCLEAN_FILES	+= $(NODE_INSTALL) \
+	$(BUILD)/prebuilt-node-* $(BUILD)/prebuilt-npm-*
+
+NODE_PREBUILT_BRANCH ?= master
+NODE_PREBUILT_IMAGE ?= $(shell pfexec mdata-get sdc:image_uuid)
+ifeq ($(NODE_PREBUILT_TAG),)
+	NODE_PREBUILT_NAME := $(NODE_PREBUILT_VERSION)-$(NODE_PREBUILT_IMAGE)
+else
+	NODE_PREBUILT_NAME := $(NODE_PREBUILT_VERSION)-$(NODE_PREBUILT_TAG)-$(NODE_PREBUILT_IMAGE)
+endif
+NODE_PREBUILT_PATTERN := sdcnode-$(NODE_PREBUILT_NAME)-$(NODE_PREBUILT_BRANCH)-.*\.tgz
+NODE_PREBUILT_DIR ?= https://download.joyent.com/pub/build/sdcnode/$(NODE_PREBUILT_IMAGE)/$(NODE_PREBUILT_BRANCH)-latest/sdcnode/
+ifeq ($(shell echo $(NODE_PREBUILT_DIR) | cut -c 1-4),http)
+	NODE_PREBUILT_BASE := $(shell curl -ksS --fail --connect-timeout 30 $(NODE_PREBUILT_DIR) | grep 'href=' | cut -d'"' -f2 | grep "^$(NODE_PREBUILT_PATTERN)$$" | sort | tail -1)
+	ifneq ($(NODE_PREBUILT_BASE),)
+		NODE_PREBUILT_TARBALL := $(NODE_PREBUILT_DIR)$(NODE_PREBUILT_BASE)
+	endif
+else
+	NODE_PREBUILT_BASE := $(shell ls -1 $(NODE_PREBUILT_DIR)/ | grep "^$(NODE_PREBUILT_PATTERN)$$" 2>/dev/null | sort | tail -1)
+	ifneq ($(NODE_PREBUILT_BASE),)
+		NODE_PREBUILT_TARBALL := $(NODE_PREBUILT_DIR)/$(NODE_PREBUILT_BASE)
+	endif
+endif
+ifeq ($(NODE_PREBUILT_TARBALL),)
+	NODE_PREBUILT_TARBALL = $(error NODE_PREBUILT_TARBALL is empty: no '$(NODE_PREBUILT_DIR)/$(NODE_PREBUILT_PATTERN)' found)
+endif
+
+
+# Prebuild-specific paths for the "*_EXEC" vars to ensure that
+# a prebuild change (e.g. if master Makefile's NODE_PREBUILT_VERSION
+# choice changes) causes a install of the new node.
+NODE_EXEC	:= $(BUILD)/prebuilt-node-$(NODE_PREBUILT_NAME)
+NODE_WAF_EXEC	:= $(BUILD)/prebuilt-node-waf-$(NODE_PREBUILT_NAME)
+NPM_EXEC	:= $(BUILD)/prebuilt-npm-$(NODE_PREBUILT_NAME)
+
+# Ensure these use absolute paths to the executables to allow running
+# from a dir other than the project top.
+NODE		:= $(TOP)/$(NODE_INSTALL)/bin/node
+NODE_WAF	:= $(TOP)/$(NODE_INSTALL)/bin/node-waf
+NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) node $(TOP)/$(NODE_INSTALL)/bin/npm
diff --git a/tools/mk/Makefile.node_prebuilt.targ b/tools/mk/Makefile.node_prebuilt.targ
new file mode 100644
index 0000000..6877333
--- /dev/null
+++ b/tools/mk/Makefile.node_prebuilt.targ
@@ -0,0 +1,42 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.node_prebuilt.targ: Makefile for including a prebuilt Node.js
+# build.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+
+
+NODE_PREBUILT_TARBALL ?= $(error NODE_PREBUILT_TARBALL is not set: was Makefile.node_prebuilt.defs included?)
+
+
+# TODO: remove this limitation
+# Limitation: currently presuming that the NODE_INSTALL basename is
+# 'node' and that sdcnode tarballs have a 'node' top-level dir.
+$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC):
+	[[ $(shell basename $(NODE_INSTALL)) == "node" ]] \
+		|| (echo "Limitation: 'basename NODE_INSTALL' is not 'node'" && exit 1)
+	rm -rf $(NODE_INSTALL) \
+		$(BUILD)/prebuilt-node-* $(BUILD)/prebuilt-npm-*
+	mkdir -p $(shell dirname $(NODE_INSTALL))
+	if [[ $(shell echo $(NODE_PREBUILT_TARBALL) | cut -c 1-4) == "http" ]]; then \
+		echo "Downloading '$(NODE_PREBUILT_BASE)'."; \
+		curl -ksS --fail --connect-timeout 30 -o $(shell dirname $(NODE_INSTALL))/$(NODE_PREBUILT_BASE) $(NODE_PREBUILT_TARBALL); \
+		(cd $(shell dirname $(NODE_INSTALL)) && $(TAR) xf $(NODE_PREBUILT_BASE)); \
+	else \
+		(cd $(shell dirname $(NODE_INSTALL)) && $(TAR) xf $(NODE_PREBUILT_TARBALL)); \
+	fi
+	ln -s $(TOP)/$(NODE_INSTALL)/bin/node $(NODE_EXEC)
+	ln -s $(TOP)/$(NODE_INSTALL)/bin/npm $(NPM_EXEC)
diff --git a/tools/mk/Makefile.targ b/tools/mk/Makefile.targ
new file mode 100644
index 0000000..39c5498
--- /dev/null
+++ b/tools/mk/Makefile.targ
@@ -0,0 +1,319 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.targ: common targets.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This Makefile defines several useful targets and rules. You can use it by
+# including it from a Makefile that specifies some of the variables below.
+#
+# Targets defined in this Makefile:
+#
+#	check	Checks JavaScript files for lint and style
+#		Checks bash scripts for syntax
+#		Checks SMF manifests for validity against the SMF DTD
+#
+#	clean	Removes built files
+#
+#	docs	Builds restdown documentation in docs/
+#
+#	prepush	Depends on "check" and "test"
+#
+#	test	Does nothing (you should override this)
+#
+#	xref	Generates cscope (source cross-reference index)
+#
+# For details on what these targets are supposed to do, see the Joyent
+# Engineering Guide.
+#
+# To make use of these targets, you'll need to set some of these variables. Any
+# variables left unset will simply not be used.
+#
+#	BASH_FILES	Bash scripts to check for syntax
+#			(paths relative to top-level Makefile)
+#
+#	CLEAN_FILES	Files to remove as part of the "clean" target.  Note
+#			that files generated by targets in this Makefile are
+#			automatically included in CLEAN_FILES.  These include
+#			restdown-generated HTML and JSON files.
+#
+#	DOC_FILES	Restdown (documentation source) files. These are
+#			assumed to be contained in "docs/", and must NOT
+#			contain the "docs/" prefix.
+#
+#	JSL_CONF_NODE	Specify JavaScriptLint configuration files
+#	JSL_CONF_WEB	(paths relative to top-level Makefile)
+#
+#			Node.js and Web configuration files are separate
+#			because you'll usually want different global variable
+#			configurations.  If no file is specified, none is given
+#			to jsl, which causes it to use a default configuration,
+#			which probably isn't what you want.
+#
+#	JSL_FILES_NODE	JavaScript files to check with Node config file.
+#	JSL_FILES_WEB	JavaScript files to check with Web config file.
+#
+#	JSON_FILES	JSON files to be validated
+#
+#	JSSTYLE_FILES	JavaScript files to be style-checked
+#
+# You can also override these variables:
+#
+#	BASH		Path to bash (default: "bash")
+#
+#	CSCOPE_DIRS	Directories to search for source files for the cscope
+#			index. (default: ".")
+#
+#	JSL		Path to JavaScriptLint (default: "jsl")
+#
+#	JSL_FLAGS_NODE	Additional flags to pass through to JSL
+#	JSL_FLAGS_WEB
+#	JSL_FLAGS
+#
+#	JSON		Path to json tool (default: "json")
+#
+#	JSSTYLE		Path to jsstyle (default: "jsstyle")
+#
+#	JSSTYLE_FLAGS	Additional flags to pass through to jsstyle
+#
+#	RESTDOWN_EXT	By default '.md' is required for DOC_FILES (see above).
+#			If you want to use, say, '.restdown' instead, then set
+#			'RESTDOWN_EXT=.restdown' in your Makefile.
+#
+
+#
+# Defaults for the various tools we use.
+#
+BASH		?= bash
+BASHSTYLE	?= tools/bashstyle
+CP		?= cp
+CSCOPE		?= cscope
+CSCOPE_DIRS	?= .
+JSL		?= jsl
+JSON		?= json
+JSSTYLE		?= jsstyle
+MKDIR		?= mkdir -p
+MV		?= mv
+RESTDOWN_FLAGS	?=
+RESTDOWN_EXT	?= .md
+RMTREE		?= rm -rf
+JSL_FLAGS  	?= --nologo --nosummary
+
+ifeq ($(shell uname -s),SunOS)
+	TAR	?= gtar
+else
+	TAR	?= tar
+endif
+
+
+#
+# Defaults for other fixed values.
+#
+BUILD		= build
+DISTCLEAN_FILES += $(BUILD)
+DOC_BUILD	= $(BUILD)/docs/public
+
+#
+# Configure JSL_FLAGS_{NODE,WEB} based on JSL_CONF_{NODE,WEB}.
+#
+ifneq ($(origin JSL_CONF_NODE), undefined)
+	JSL_FLAGS_NODE += --conf=$(JSL_CONF_NODE)
+endif
+
+ifneq ($(origin JSL_CONF_WEB), undefined)
+	JSL_FLAGS_WEB += --conf=$(JSL_CONF_WEB)
+endif
+
+#
+# Targets. For descriptions on what these are supposed to do, see the
+# Joyent Engineering Guide.
+#
+
+#
+# Instruct make to keep around temporary files. We have rules below that
+# automatically update git submodules as needed, but they employ a deps/*/.git
+# temporary file. Without this directive, make tries to remove these .git
+# directories after the build has completed.
+#
+.SECONDARY: $($(wildcard deps/*):%=%/.git)
+
+#
+# This rule enables other rules that use files from a git submodule to have
+# those files depend on deps/module/.git and have "make" automatically check
+# out the submodule as needed.
+#
+deps/%/.git:
+	git submodule update --init deps/$*
+
+#
+# These recipes make heavy use of dynamically-created phony targets. The parent
+# Makefile defines a list of input files like BASH_FILES. We then say that each
+# of these files depends on a fake target called filename.bashchk, and then we
+# define a pattern rule for those targets that runs bash in check-syntax-only
+# mode. This mechanism has the nice properties that if you specify zero files,
+# the rule becomes a noop (unlike a single rule to check all bash files, which
+# would invoke bash with zero files), and you can check individual files from
+# the command line with "make filename.bashchk".
+#
+.PHONY: check-bash
+check-bash: $(BASH_FILES:%=%.bashchk) $(BASH_FILES:%=%.bashstyle)
+
+%.bashchk: %
+	$(BASH) -n $^
+
+%.bashstyle: %
+	$(BASHSTYLE) $^
+
+.PHONY: check-json
+check-json: $(JSON_FILES:%=%.jsonchk)
+
+%.jsonchk: % $(JSON)
+	$(JSON) --validate -f $^
+
+#
+# The above approach can be slow when there are many files to check because it
+# requires that "make" invoke the check tool once for each file, rather than
+# passing in several files at once.  For the JavaScript check targets, we define
+# a variable for the target itself *only if* the list of input files is
+# non-empty.  This avoids invoking the tool if there are no files to check.
+#
+JSL_NODE_TARGET = $(if $(JSL_FILES_NODE), check-jsl-node)
+.PHONY: check-jsl-node
+check-jsl-node: $(JSL_EXEC)
+	$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_NODE) $(JSL_FILES_NODE)
+
+JSL_WEB_TARGET = $(if $(JSL_FILES_WEB), check-jsl-web)
+.PHONY: check-jsl-web
+check-jsl-web: $(JSL_EXEC)
+	$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_WEB) $(JSL_FILES_WEB)
+
+.PHONY: check-jsl
+check-jsl: $(JSL_NODE_TARGET) $(JSL_WEB_TARGET)
+
+JSSTYLE_TARGET = $(if $(JSSTYLE_FILES), check-jsstyle)
+.PHONY: check-jsstyle
+check-jsstyle:  $(JSSTYLE_EXEC)
+	$(JSSTYLE) $(JSSTYLE_FLAGS) $(JSSTYLE_FILES)
+
+.PHONY: check
+check:: check-jsl check-json $(JSSTYLE_TARGET) check-bash
+	@echo check ok
+
+.PHONY: clean
+clean::
+	-$(RMTREE) $(CLEAN_FILES)
+
+.PHONY: distclean
+distclean:: clean
+	-$(RMTREE) $(DISTCLEAN_FILES)
+
+CSCOPE_FILES = cscope.in.out cscope.out cscope.po.out
+CLEAN_FILES += $(CSCOPE_FILES)
+
+.PHONY: xref
+xref: cscope.files
+	$(CSCOPE) -bqR
+
+.PHONY: cscope.files
+cscope.files:
+	find $(CSCOPE_DIRS) -name '*.c' -o -name '*.h' -o -name '*.cc' \
+	    -o -name '*.js' -o -name '*.s' -o -name '*.cpp' > $@
+
+#
+# The "docs" target is complicated because we do several things here:
+#
+#    (1) Use restdown to build HTML and JSON files from each of DOC_FILES.
+#
+#    (2) Copy these files into $(DOC_BUILD) (build/docs/public), which
+#        functions as a complete copy of the documentation that could be
+#        mirrored or served over HTTP.
+#
+#    (3) Then copy any directories and media from docs/media into
+#        $(DOC_BUILD)/media. This allows projects to include their own media,
+#        including files that will override same-named files provided by
+#        restdown.
+#
+# Step (3) is the surprisingly complex part: in order to do this, we need to
+# identify the subdirectories in docs/media, recreate them in
+# $(DOC_BUILD)/media, then do the same with the files.
+#
+DOC_MEDIA_DIRS := $(shell find docs/media -type d 2>/dev/null | grep -v "^docs/media$$")
+DOC_MEDIA_DIRS := $(DOC_MEDIA_DIRS:docs/media/%=%)
+DOC_MEDIA_DIRS_BUILD := $(DOC_MEDIA_DIRS:%=$(DOC_BUILD)/media/%)
+
+DOC_MEDIA_FILES := $(shell find docs/media -type f 2>/dev/null)
+DOC_MEDIA_FILES := $(DOC_MEDIA_FILES:docs/media/%=%)
+DOC_MEDIA_FILES_BUILD := $(DOC_MEDIA_FILES:%=$(DOC_BUILD)/media/%)
+
+#
+# Like the other targets, "docs" just depends on the final files we want to
+# create in $(DOC_BUILD), leveraging other targets and recipes to define how
+# to get there.
+#
+.PHONY: docs
+docs::							\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.html)		\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.json)		\
+	$(DOC_MEDIA_FILES_BUILD)
+
+#
+# We keep the intermediate files so that the next build can see whether the
+# files in DOC_BUILD are up to date.
+#
+.PRECIOUS:					\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.html)		\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%json)
+
+#
+# We do clean those intermediate files, as well as all of DOC_BUILD.
+#
+CLEAN_FILES +=					\
+	$(DOC_BUILD)				\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.html)		\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.json)
+
+#
+# Before installing the files, we must make sure the directories exist. The |
+# syntax tells make that the dependency need only exist, not be up to date.
+# Otherwise, it might try to rebuild spuriously because the directory itself
+# appears out of date.
+#
+$(DOC_MEDIA_FILES_BUILD): | $(DOC_MEDIA_DIRS_BUILD)
+
+$(DOC_BUILD)/%: docs/% | $(DOC_BUILD)
+	$(MKDIR) $(shell dirname $@)
+	$(CP) $< $@
+
+docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC) \
+    $(EXTRA_DOC_DEPS)
+	$(RESTDOWN) $(RESTDOWN_FLAGS) -m $(DOC_BUILD) $<
+
+$(DOC_BUILD):
+	$(MKDIR) $@
+
+$(DOC_MEDIA_DIRS_BUILD):
+	$(MKDIR) $@
+
+#
+# The default "test" target does nothing. This should usually be overridden by
+# the parent Makefile. It's included here so we can define "prepush" without
+# requiring the repo to define "test".
+#
+.PHONY: test
+test:
+
+.PHONY: prepush
+prepush: check test
-- 
2.21.0

