From 758d99c9901dcf499f4206b5cbd19b71e2927ca4 Mon Sep 17 00:00:00 2001
From: Hans Rosenfeld <hans.rosenfeld@joyent.com>
Date: Tue, 10 Oct 2017 12:37:29 +0200
Subject: [PATCH] OS-6410 fix-up bhyve build

---
 exception_lists/check_rtime                   |  1 +
 exception_lists/packaging                     |  9 ++++
 usr/src/Makefile.master                       |  7 +++
 usr/src/cmd/Makefile                          |  4 ++
 usr/src/cmd/bhyve/atkbdc.c                    |  5 ++-
 usr/src/cmd/bhyve/consport.c                  |  2 +
 usr/src/cmd/bhyve/pci_ahci.c                  |  2 +-
 usr/src/cmd/bhyve/pci_emul.c                  | 14 ++++--
 usr/src/cmd/bhyve/pci_virtio_block.c          |  5 ++-
 usr/src/cmd/bhyve/pci_virtio_net.c            | 10 ++++-
 usr/src/cmd/bhyve/pci_virtio_viona.c          |  5 +++
 usr/src/cmd/bhyve/pmtmr.c                     |  5 +++
 usr/src/cmd/bhyve/ps2kbd.c                    |  2 +
 usr/src/cmd/bhyve/rfb.c                       |  2 +
 usr/src/cmd/bhyve/uart_emul.c                 |  7 ++-
 usr/src/cmd/bhyveconsole/Makefile             |  3 ++
 usr/src/cmd/bhyveconsole/bhyveconsole.c       |  4 +-
 usr/src/cmd/bhyvectl/bhyvectl.c               |  3 +-
 usr/src/cmd/bhyveload-uefi/Makefile.com       |  3 +-
 usr/src/cmd/mdb/intel/amd64/Makefile          |  3 +-
 usr/src/cmd/mdb/intel/amd64/vmm/Makefile      |  5 ++-
 .../cmd/mdb/intel/amd64/vmm/amd64/Makefile    |  5 ++-
 usr/src/cmd/mdb/intel/amd64/vmm/vmm.c         |  1 -
 usr/src/compat/freebsd/sys/cdefs.h            |  3 +-
 usr/src/compat/freebsd/sys/cpuset.h           |  3 +-
 usr/src/compat/freebsd/sys/systm.h            |  4 --
 usr/src/head/Makefile                         |  5 ++-
 usr/src/lib/Makefile                          |  8 ++--
 usr/src/lib/libvmmapi/Makefile                |  4 +-
 usr/src/lib/libvmmapi/Makefile.com            | 12 +++---
 usr/src/lib/libvmmapi/common/vmmapi.c         |  3 ++
 usr/src/tools/scripts/Makefile                |  2 +
 usr/src/uts/common/Makefile.files             |  8 ++--
 usr/src/uts/i86pc/Makefile.files              | 24 +++++++++++
 usr/src/uts/i86pc/Makefile.i86pc              |  4 ++
 usr/src/uts/i86pc/Makefile.rules              | 43 ++++++++++++++++++-
 usr/src/uts/i86pc/io/viona/viona.c            | 11 +++--
 usr/src/uts/i86pc/io/vmm/amd/amdv.c           |  3 +-
 usr/src/uts/i86pc/io/vmm/intel/vmcs.c         |  6 ++-
 usr/src/uts/i86pc/io/vmm/intel/vmx.c          | 37 +++++++++++++---
 usr/src/uts/i86pc/io/vmm/intel/vmx_cpufunc.h  |  9 ++--
 usr/src/uts/i86pc/io/vmm/intel/vmx_msr.c      | 14 ++++++
 usr/src/uts/i86pc/io/vmm/intel/vmx_support.s  | 33 ++++++++++++++
 usr/src/uts/i86pc/io/vmm/io/vioapic.c         |  5 +++
 usr/src/uts/i86pc/io/vmm/io/vlapic.c          |  9 ++--
 usr/src/uts/i86pc/io/vmm/vmm.c                | 15 ++++++-
 usr/src/uts/i86pc/io/vmm/vmm_host.h           |  3 ++
 .../uts/i86pc/io/vmm/vmm_instruction_emul.c   |  9 ++--
 usr/src/uts/i86pc/io/vmm/vmm_sol_dev.c        | 20 +++------
 usr/src/uts/i86pc/io/vmm/vmm_sol_glue.c       | 27 ++++++++----
 usr/src/uts/i86pc/io/vmm/vmm_stat.h           | 16 ++++++-
 usr/src/uts/i86pc/sys/vmm.h                   |  3 +-
 usr/src/uts/i86pc/viona/Makefile              |  9 +++-
 usr/src/uts/i86pc/vmm/Makefile                | 34 ++++++++++++++-
 54 files changed, 397 insertions(+), 96 deletions(-)

diff --git a/exception_lists/check_rtime b/exception_lists/check_rtime
index 1de5d2d078..70b1122675 100644
--- a/exception_lists/check_rtime
+++ b/exception_lists/check_rtime
@@ -76,6 +76,7 @@ EXEC_STACK	^opt/os-tests/tests/secflags/stacky$
 
 # Objects for which we allow relocations to the text segment
 TEXTREL		^platform/.*/MACH(kernel)/unix$
+TEXTREL		^usr/sbin/amd64/bhyve$
 
 # Directories and files that are allowed to have no direct bound symbols
 NODIRECT	^platform/.*/MACH(kernel)/unix$
diff --git a/exception_lists/packaging b/exception_lists/packaging
index 0ed8ba06e0..e59ee2560c 100644
--- a/exception_lists/packaging
+++ b/exception_lists/packaging
@@ -1000,3 +1000,12 @@ usr/lib/sparcv9/llib-lsff.ln		sparc
 usr/lib/libsff.so
 usr/lib/llib-lsff
 usr/lib/llib-lsff.ln
+
+#
+# private bhyve header files
+#
+usr/include/bhyve.h
+usr/include/vmmapi.h
+usr/platform/i86pc/include/sys/vmm.h
+usr/platform/i86pc/include/sys/vmm_impl.h
+usr/platform/i86pc/include/sys/vmm_instruction_emul.h
diff --git a/usr/src/Makefile.master b/usr/src/Makefile.master
index 5bb85fd957..2e5fd4b51b 100644
--- a/usr/src/Makefile.master
+++ b/usr/src/Makefile.master
@@ -46,6 +46,12 @@ ADJUNCT_PROTO=
 #
 NATIVE_ADJUNCT=	/usr
 
+#
+# Compatibility code for FreeBSD etc.
+#
+COMPAT=	$(SRC)/compat
+CONTRIB= $(SRC)/../contrib
+
 #
 # RELEASE_BUILD should be cleared for final release builds.
 # NOT_RELEASE_BUILD is exactly what the name implies.
@@ -184,6 +190,7 @@ CTFSTABS=	$(ONBLD_TOOLS)/bin/$(MACH)/ctfstabs
 CTFSTRIP=	$(ONBLD_TOOLS)/bin/$(MACH)/ctfstrip
 NDRGEN=		$(ONBLD_TOOLS)/bin/$(MACH)/ndrgen
 GENOFFSETS=	$(ONBLD_TOOLS)/bin/genoffsets
+GENSETDEFS=	$(ONBLD_TOOLS)/bin/gensetdefs
 XREF=		$(ONBLD_TOOLS)/bin/xref
 FIND=		/usr/bin/find
 PERL=		/usr/bin/perl
diff --git a/usr/src/cmd/Makefile b/usr/src/cmd/Makefile
index b1fe28447a..b1d0693266 100644
--- a/usr/src/cmd/Makefile
+++ b/usr/src/cmd/Makefile
@@ -480,6 +480,10 @@ i386_SUBDIRS=		\
 	acpi		\
 	acpihpd		\
 	addbadsec	\
+	bhyve		\
+	bhyveconsole	\
+	bhyvectl	\
+	bhyveload-uefi	\
 	biosdev		\
 	diskscan	\
 	nvmeadm		\
diff --git a/usr/src/cmd/bhyve/atkbdc.c b/usr/src/cmd/bhyve/atkbdc.c
index 4d09d88266..a1501fa31d 100644
--- a/usr/src/cmd/bhyve/atkbdc.c
+++ b/usr/src/cmd/bhyve/atkbdc.c
@@ -404,7 +404,10 @@ atkbdc_sts_ctl_handler(struct vmctx *ctx, int vcpu, int in, int port,
     int bytes, uint32_t *eax, void *arg)
 {
 	struct atkbdc_softc *sc;
-	int	error, retval;
+#ifdef	__FreeBSD__
+	int	error;
+#endif
+	int	retval;
 
 	if (bytes != 1)
 		return (-1);
diff --git a/usr/src/cmd/bhyve/consport.c b/usr/src/cmd/bhyve/consport.c
index 69b6dfddf1..90e3d0e5eb 100644
--- a/usr/src/cmd/bhyve/consport.c
+++ b/usr/src/cmd/bhyve/consport.c
@@ -44,6 +44,7 @@ __FBSDID("$FreeBSD: head/usr.sbin/bhyve/consport.c 264277 2014-04-08 21:02:03Z j
 #define	BVM_CONSOLE_PORT	0x220
 #define	BVM_CONS_SIG		('b' << 8 | 'v')
 
+#ifdef	__FreeBSD__
 static struct termios tio_orig, tio_new;
 
 static void
@@ -51,6 +52,7 @@ ttyclose(void)
 {
 	tcsetattr(STDIN_FILENO, TCSANOW, &tio_orig);
 }
+#endif
 
 static void
 ttyopen(void)
diff --git a/usr/src/cmd/bhyve/pci_ahci.c b/usr/src/cmd/bhyve/pci_ahci.c
index b68c977c1f..9c8d6d429a 100644
--- a/usr/src/cmd/bhyve/pci_ahci.c
+++ b/usr/src/cmd/bhyve/pci_ahci.c
@@ -1137,7 +1137,7 @@ static void
 atapi_mode_sense(struct ahci_port *p, int slot, uint8_t *cfis)
 {
 	uint8_t *acmd;
-	uint32_t tfd;
+	uint32_t tfd = 0;
 	uint8_t pc, code;
 	int len;
 
diff --git a/usr/src/cmd/bhyve/pci_emul.c b/usr/src/cmd/bhyve/pci_emul.c
index 3b4ca805cc..19b3fcbedd 100644
--- a/usr/src/cmd/bhyve/pci_emul.c
+++ b/usr/src/cmd/bhyve/pci_emul.c
@@ -36,6 +36,7 @@
  * http://www.illumos.org/license/CDDL.
  *
  * Copyright 2014 Pluribus Networks Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 #include <sys/cdefs.h>
@@ -570,8 +571,10 @@ int
 pci_emul_alloc_pbar(struct pci_devinst *pdi, int idx, uint64_t hostbase,
 		    enum pcibar_type type, uint64_t size)
 {
+	uint64_t *baseptr = NULL;
+	uint64_t limit = 0, lobits = 0;
+	uint64_t addr, mask, bar;
 	int error;
-	uint64_t *baseptr, limit, addr, mask, lobits, bar;
 
 	assert(idx >= 0 && idx <= PCI_BARMAX);
 
@@ -1737,8 +1740,8 @@ pci_cfgrw(struct vmctx *ctx, int vcpu, int in, int bus, int slot, int func,
 	struct slotinfo *si;
 	struct pci_devinst *pi;
 	struct pci_devemu *pe;
-	int idx, needcfg;
-	uint64_t addr, bar, mask;
+	uint64_t addr, mask;
+	uint64_t bar = 0;
 
 	if ((bi = pci_businfo[bus]) != NULL) {
 		si = &bi->slotinfo[slot];
@@ -1782,6 +1785,8 @@ pci_cfgrw(struct vmctx *ctx, int vcpu, int in, int bus, int slot, int func,
 	 * Config read
 	 */
 	if (in) {
+		int needcfg;
+
 		/* Let the device emulation override the default handler */
 		if (pe->pe_cfgread != NULL) {
 			needcfg = pe->pe_cfgread(ctx, vcpu, pi, coff, bytes,
@@ -1810,6 +1815,7 @@ pci_cfgrw(struct vmctx *ctx, int vcpu, int in, int bus, int slot, int func,
 		 * Special handling for write to BAR registers
 		 */
 		if (coff >= PCIR_BAR(0) && coff < PCIR_BAR(PCI_BARMAX + 1)) {
+			int idx;
 			/*
 			 * Ignore writes to BAR registers that are not
 			 * 4-byte aligned.
@@ -2043,7 +2049,7 @@ pci_emul_dior(struct vmctx *ctx, int vcpu, struct pci_devinst *pi, int baridx,
 	      uint64_t offset, int size)
 {
 	struct pci_emul_dsoftc *sc = pi->pi_arg;
-	uint32_t value;
+	uint32_t value = 0;
 
 	if (baridx == 0) {
 		if (offset + size > DIOSZ) {
diff --git a/usr/src/cmd/bhyve/pci_virtio_block.c b/usr/src/cmd/bhyve/pci_virtio_block.c
index 65e2d9c57d..cba1e26189 100644
--- a/usr/src/cmd/bhyve/pci_virtio_block.c
+++ b/usr/src/cmd/bhyve/pci_virtio_block.c
@@ -36,6 +36,7 @@
  * http://www.illumos.org/license/CDDL.
  *
  * Copyright 2014 Pluribus Networks Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 #include <sys/cdefs.h>
@@ -188,9 +189,9 @@ pci_vtblk_proc(struct pci_vtblk_softc *sc, struct vqueue_info *vq)
 
 	assert((flags[0] & VRING_DESC_F_WRITE) == 0);
 	assert(iov[0].iov_len == sizeof(struct virtio_blk_hdr));
-	vbh = (struct virtio_block_hdr *)iov[0].iov_base;
+	vbh = (struct virtio_blk_hdr *)iov[0].iov_base;
 
-	status = iov[--n].iov_base;
+	status = (uint8_t *)iov[--n].iov_base;
 	assert(iov[n].iov_len == 1);
 	assert(flags[n] & VRING_DESC_F_WRITE);
 
diff --git a/usr/src/cmd/bhyve/pci_virtio_net.c b/usr/src/cmd/bhyve/pci_virtio_net.c
index e58bdd0115..2c63612a8e 100644
--- a/usr/src/cmd/bhyve/pci_virtio_net.c
+++ b/usr/src/cmd/bhyve/pci_virtio_net.c
@@ -36,6 +36,7 @@
  * http://www.illumos.org/license/CDDL.
  *
  * Copyright 2013 Pluribus Networks Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 #include <sys/cdefs.h>
@@ -392,7 +393,7 @@ pci_vtnet_tap_rx(struct pci_vtnet_softc *sc)
 			int num_segs;
 			num_segs = vq_getchain(vq, iov,
 			    VTNET_MAXSEGS, NULL);
-			vrx = (struct virtio_net_rxhrd *)iov[0].iov_base;
+			vrx = (struct virtio_net_rxhdr *)iov[0].iov_base;
 			total_len = iov[0].iov_len;
 			for (i = 1; i < num_segs; i++) {
 				buf = (uint8_t *)iov[i].iov_base;
@@ -480,6 +481,8 @@ pci_vtnet_poll_thread(void *param)
 		pci_vtnet_tap_rx(sc);
 		pthread_mutex_unlock(&sc->vsc_mtx);
 	}
+
+	return (NULL);
 }
 #endif
 
@@ -597,6 +600,7 @@ pci_vtnet_tx_thread(void *param)
 
 		pthread_mutex_lock(&sc->tx_mtx);
 	}
+	return (NULL);
 }
 
 #ifdef notyet
@@ -640,12 +644,12 @@ pci_vtnet_init(struct vmctx *ctx, struct pci_devinst *pi, char *opts)
 #ifdef	__FreeBSD__
 	MD5_CTX mdctx;
 	unsigned char digest[16];
+	char nstr[80];
 #else
 	uchar_t physaddr[DLPI_PHYSADDR_MAX];
 	size_t physaddrlen = DLPI_PHYSADDR_MAX;
 	int error;
 #endif
-	char nstr[80];
 	char tname[MAXCOMLEN + 1];
 	struct pci_vtnet_softc *sc;
 	const char *env_msi;
@@ -688,7 +692,9 @@ pci_vtnet_init(struct vmctx *ctx, struct pci_devinst *pi, char *opts)
 #endif
 	if (opts != NULL) {
 		char tbuf[80];
+#ifdef	__FreeBSD__
 		int err;
+#endif
 
 		devname = vtopts = strdup(opts);
 		(void) strsep(&vtopts, ",");
diff --git a/usr/src/cmd/bhyve/pci_virtio_viona.c b/usr/src/cmd/bhyve/pci_virtio_viona.c
index f4d5d528be..4ce0896063 100644
--- a/usr/src/cmd/bhyve/pci_virtio_viona.c
+++ b/usr/src/cmd/bhyve/pci_virtio_viona.c
@@ -34,6 +34,7 @@
  * http://www.illumos.org/license/CDDL.
  *
  * Copyright 2015 Pluribus Networks Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 #include <sys/cdefs.h>
@@ -289,6 +290,8 @@ pci_viona_tx_thread(void *param)
 		sc->vsc_tx_kick_lock_held = B_FALSE;
 	}
 	pthread_mutex_unlock(&sc->tx_mtx);
+
+	return (NULL);
 }
 
 static void
@@ -347,8 +350,10 @@ static int
 pci_viona_viona_init(struct vmctx *ctx, struct pci_viona_softc *sc)
 {
 	vioc_create_t		vna_create;
+#if notyet
 	char			devname[MAXNAMELEN];
 	int			ctlfd;
+#endif
 	int			error;
 
 	sc->vsc_vnafd = open("/devices/pseudo/viona@0:ctl", O_RDWR | O_EXCL);
diff --git a/usr/src/cmd/bhyve/pmtmr.c b/usr/src/cmd/bhyve/pmtmr.c
index 92ab24be57..ee797d7fff 100644
--- a/usr/src/cmd/bhyve/pmtmr.c
+++ b/usr/src/cmd/bhyve/pmtmr.c
@@ -36,6 +36,7 @@
  * http://www.illumos.org/license/CDDL.
  *
  * Copyright 2014 Pluribus Networks Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 #include <sys/cdefs.h>
@@ -162,10 +163,14 @@ pmtmr_init(void)
 static uint32_t
 pmtmr_val(void)
 {
+#ifdef	__FreeBSD__
 	struct timespec	tsnew;
+#endif
 	uint64_t	pmtmr_tsc_new;
 	uint64_t	pmtmr_new;
+#ifdef	__FreeBSD__
 	int		error;
+#endif
 
 	pthread_once(&pmtmr_once, pmtmr_init);
 
diff --git a/usr/src/cmd/bhyve/ps2kbd.c b/usr/src/cmd/bhyve/ps2kbd.c
index 22e566ac21..1399cde66e 100644
--- a/usr/src/cmd/bhyve/ps2kbd.c
+++ b/usr/src/cmd/bhyve/ps2kbd.c
@@ -93,6 +93,7 @@ fifo_reset(struct ps2kbd_softc *sc)
 	fifo->size = sizeof(((struct fifo *)0)->buf);
 }
 
+#if notyet
 static int
 fifo_available(struct ps2kbd_softc *sc)
 {
@@ -101,6 +102,7 @@ fifo_available(struct ps2kbd_softc *sc)
 	fifo = &sc->fifo;
 	return (fifo->num < fifo->size);
 }
+#endif
 
 static void
 fifo_put(struct ps2kbd_softc *sc, uint8_t val)
diff --git a/usr/src/cmd/bhyve/rfb.c b/usr/src/cmd/bhyve/rfb.c
index 0846316378..d0ba4b10c9 100644
--- a/usr/src/cmd/bhyve/rfb.c
+++ b/usr/src/cmd/bhyve/rfb.c
@@ -207,6 +207,7 @@ rfb_recv_set_encodings_msg(struct rfb_softc *rc, int cfd)
 	}
 }
 
+#if notyet
 static void
 rfb_resize_update(struct rfb_softc *rc, int fd)
 {
@@ -227,6 +228,7 @@ rfb_resize_update(struct rfb_softc *rc, int fd)
 	srect_hdr.encoding = ntohl(RFB_ENCODING_RESIZE);
 	write(fd, &srect_hdr, sizeof (struct rfb_srvr_rect_hdr));
 }
+#endif
 
 static void
 rfb_recv_update_msg(struct rfb_softc *rc, int cfd)
diff --git a/usr/src/cmd/bhyve/uart_emul.c b/usr/src/cmd/bhyve/uart_emul.c
index a8b5d40356..f9533ecfae 100644
--- a/usr/src/cmd/bhyve/uart_emul.c
+++ b/usr/src/cmd/bhyve/uart_emul.c
@@ -37,6 +37,7 @@
  * http://www.illumos.org/license/CDDL.
  *
  * Copyright 2015 Pluribus Networks Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 #include <sys/cdefs.h>
@@ -277,15 +278,17 @@ fifo_available(struct fifo *fifo)
 static void
 uart_opentty(struct uart_softc *sc)
 {
+#ifdef	__FreeBSD__
 	struct mevent *mev;
+#endif
 
 	assert(!sc->opened && sc->stdio);
 
 	ttyopen();
 #ifdef	__FreeBSD__
 	mev = mevent_add(STDIN_FILENO, EVF_READ, uart_drain, sc);
-#endif
 	assert(mev);
+#endif
 }
 
 /*
@@ -838,7 +841,9 @@ uart_bcons_client_event(struct uart_softc *sc)
 static void
 uart_bcons_server_event(struct uart_softc *sc)
 {
+#if notyet
 	int clifd;
+#endif
 
 	if (sc->usc_bcons.clifd != -1) {
 		/* we're already handling a client */
diff --git a/usr/src/cmd/bhyveconsole/Makefile b/usr/src/cmd/bhyveconsole/Makefile
index 11d34e6599..7ebdb8f60f 100644
--- a/usr/src/cmd/bhyveconsole/Makefile
+++ b/usr/src/cmd/bhyveconsole/Makefile
@@ -11,10 +11,13 @@
 
 #
 # Copyright 2013 Pluribus Networks Inc.
+# Copyright 2017 Joyent, Inc.
 #
 
 include ../Makefile.cmd
 
+PROG=	bhyveconsole
+
 SUBDIRS= $(MACH)
 
 all	:=	TARGET = all
diff --git a/usr/src/cmd/bhyveconsole/bhyveconsole.c b/usr/src/cmd/bhyveconsole/bhyveconsole.c
index 7f237a72f6..baf6c98f7f 100644
--- a/usr/src/cmd/bhyveconsole/bhyveconsole.c
+++ b/usr/src/cmd/bhyveconsole/bhyveconsole.c
@@ -11,6 +11,7 @@
 
 /*
  * Copyright 2013 Pluribus Networks Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 #include <sys/param.h>
@@ -24,6 +25,7 @@
 #include <stdio.h>
 #include <strings.h>
 #include <unistd.h>
+#include <stdlib.h>
 
 #include <bhyve.h>
 
@@ -325,7 +327,7 @@ doio(void)
 int
 main(int argc, char **argv)
 {
-	char *vmname;
+	char *vmname = NULL;
 
 	pname = basename(argv[0]);
 
diff --git a/usr/src/cmd/bhyvectl/bhyvectl.c b/usr/src/cmd/bhyvectl/bhyvectl.c
index 07d0a83df5..319d1995f0 100644
--- a/usr/src/cmd/bhyvectl/bhyvectl.c
+++ b/usr/src/cmd/bhyvectl/bhyvectl.c
@@ -38,6 +38,7 @@
 
 /*
  * Copyright 2015 Pluribus Networks Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 #include <sys/cdefs.h>
@@ -398,7 +399,7 @@ enum {
 int
 main(int argc, char *argv[])
 {
-	char *vmname;
+	char *vmname = NULL;
 	int error, ch, vcpu;
 	vm_paddr_t gpa;
 	size_t len;
diff --git a/usr/src/cmd/bhyveload-uefi/Makefile.com b/usr/src/cmd/bhyveload-uefi/Makefile.com
index 7865cca8d8..244a29a454 100644
--- a/usr/src/cmd/bhyveload-uefi/Makefile.com
+++ b/usr/src/cmd/bhyveload-uefi/Makefile.com
@@ -24,7 +24,7 @@ include ../../Makefile.cmd
 
 CFLAGS +=	$(CCVERBOSE)
 CPPFLAGS =	-I$(COMPAT)/freebsd -I$(CONTRIB)/freebsd $(CPPFLAGS.master) \
-	        -I$(ROOT)/usr/platform/i86pc/include
+		-I$(ROOT)/usr/platform/i86pc/include
 LDLIBS +=	-lvmmapi
 
 all: $(PROG)
@@ -49,4 +49,3 @@ include ../../Makefile.targ
 %.o: $(CONTRIB)/freebsd/lib/libutil/%.c
 	$(COMPILE.c) $<
 	$(POST_PROCESS_O)
-
diff --git a/usr/src/cmd/mdb/intel/amd64/Makefile b/usr/src/cmd/mdb/intel/amd64/Makefile
index e51c3c5a69..7749b75f37 100644
--- a/usr/src/cmd/mdb/intel/amd64/Makefile
+++ b/usr/src/cmd/mdb/intel/amd64/Makefile
@@ -21,11 +21,12 @@
 #
 # Copyright 2010 Sun Microsystems, Inc.  All rights reserved.
 # Use is subject to license terms.
+# Copyright 2017 Joyent, Inc.
 #
 
 include ../../Makefile.common
 
-MODULES = $(COMMON_MODULES_PROC) $(COMMON_MODULES_KVM) uhci
+MODULES = $(COMMON_MODULES_PROC) $(COMMON_MODULES_KVM) uhci vmm
 
 SUBDIRS = mdb mdb_ks kmdb libstandctf libstand .WAIT $(MODULES)
 
diff --git a/usr/src/cmd/mdb/intel/amd64/vmm/Makefile b/usr/src/cmd/mdb/intel/amd64/vmm/Makefile
index bf9219b435..0f2b977dfd 100644
--- a/usr/src/cmd/mdb/intel/amd64/vmm/Makefile
+++ b/usr/src/cmd/mdb/intel/amd64/vmm/Makefile
@@ -11,10 +11,11 @@
 
 #
 # Copyright 2014 Pluribus Networks Inc.
+# Copyright 2017 Joyent, Inc.
 #
 
-MAKEVARS = CW_NO_SHADOW=true __GNUC=
+#MAKEVARS = CW_NO_SHADOW=true __GNUC=
 
 include $(SRC)/Makefile.master
-$(BUILD64)SUBDIRS += 	$(MACH64)
+$(BUILD64)SUBDIRS +=	$(MACH64)
 include ../../../Makefile.subdirs
diff --git a/usr/src/cmd/mdb/intel/amd64/vmm/amd64/Makefile b/usr/src/cmd/mdb/intel/amd64/vmm/amd64/Makefile
index 49ca0c5eb3..e61be22d2a 100644
--- a/usr/src/cmd/mdb/intel/amd64/vmm/amd64/Makefile
+++ b/usr/src/cmd/mdb/intel/amd64/vmm/amd64/Makefile
@@ -29,4 +29,7 @@ CPPFLAGS += -I$(CONTRIB)/freebsd -I$(CONTRIB)/freebsd/amd64
 CPPFLAGS += -I$(SRC)/uts/common -I$(SRC)/uts/i86pc
 CPPFLAGS += -I$(SRC)/cmd/mdb/common
 
-CPPFLAGS += -_cc=-xdryrun
+#CPPFLAGS += -_cc=-xdryrun
+
+LINTTAGS += -erroff=E_FUNC_ARG_UNUSED
+LINTTAGS += -erroff=E_STATIC_UNUSED
diff --git a/usr/src/cmd/mdb/intel/amd64/vmm/vmm.c b/usr/src/cmd/mdb/intel/amd64/vmm/vmm.c
index 9e29d8662a..74c4ebc6c0 100644
--- a/usr/src/cmd/mdb/intel/amd64/vmm/vmm.c
+++ b/usr/src/cmd/mdb/intel/amd64/vmm/vmm.c
@@ -115,7 +115,6 @@ int
 vmm_dmsg_dump(vmm_trace_dmsg_t *addr, int print_pathname, uint_t *printed)
 {
 	vmm_trace_dmsg_t	dmsg, *dmsgh = addr;
-	char			pathname[MAXPATHLEN];
 	char			merge[1024];
 
 	while (addr != NULL) {
diff --git a/usr/src/compat/freebsd/sys/cdefs.h b/usr/src/compat/freebsd/sys/cdefs.h
index 974e323dbe..1d3f4d5434 100644
--- a/usr/src/compat/freebsd/sys/cdefs.h
+++ b/usr/src/compat/freebsd/sys/cdefs.h
@@ -11,6 +11,7 @@
 
 /*
  * Copyright 2013 Pluribus Networks Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 #ifndef _COMPAT_FREEBSD_SYS_CDEFS_H_
@@ -24,11 +25,11 @@
 #define	__GNUCLIKE___SECTION		1
 
 #define	__dead2		__attribute__((__noreturn__))
-#define	__unused	__attribute__((__unused__))
 #define	__used		__attribute__((__used__))
 #define	__packed	__attribute__((__packed__))
 #define	__aligned(x)	__attribute__((__aligned__(x)))
 #define	__section(x)	__attribute__((__section__(x)))
+#define	__weak_symbol   __attribute__((__weak__))
 #endif
 
 /*
diff --git a/usr/src/compat/freebsd/sys/cpuset.h b/usr/src/compat/freebsd/sys/cpuset.h
index 8527624b5e..bfaaaa6b6a 100644
--- a/usr/src/compat/freebsd/sys/cpuset.h
+++ b/usr/src/compat/freebsd/sys/cpuset.h
@@ -11,6 +11,7 @@
 
 /*
  * Copyright 2014 Pluribus Networks Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 #ifndef _COMPAT_FREEBSD_SYS_CPUSET_H_
@@ -38,7 +39,7 @@ typedef int cpuset_t;
 
 #define	CPUSET(cpu)			(1UL << (cpu))
 
-#define	CPU_SET_ATOMIC(cpu, set)	atomic_set_int((set), CPUSET(cpu))
+#define	CPU_SET_ATOMIC(cpu, set)	atomic_set_int((u_int *)(set), CPUSET(cpu))
 #endif
 
 #endif	/* _COMPAT_FREEBSD_SYS_CPUSET_H_ */
diff --git a/usr/src/compat/freebsd/sys/systm.h b/usr/src/compat/freebsd/sys/systm.h
index e25acc0e4a..613e97371c 100644
--- a/usr/src/compat/freebsd/sys/systm.h
+++ b/usr/src/compat/freebsd/sys/systm.h
@@ -28,10 +28,6 @@ struct mtx;
 		panic msg;						\
 } while (0)
 
-#define	CTASSERT(x)	_CTASSERT(x, __LINE__)
-#define	_CTASSERT(x,y)	__CTASSERT(x,y)
-#define	__CTASSERT(x,y)	typedef char __assert ## y[(x) ? 1 : -1]
-
 void	critical_enter(void);
 void	critical_exit(void);
 
diff --git a/usr/src/head/Makefile b/usr/src/head/Makefile
index eaf35ff373..64e1f1ba5d 100644
--- a/usr/src/head/Makefile
+++ b/usr/src/head/Makefile
@@ -25,13 +25,16 @@
 # Copyright 2013 Garrett D'Amore <garrett@damore.org>
 # Copyright 2015 Igor Kozhukhov <ikozhukhov@gmail.com>
 # Copyright 2017 Nexenta Systems, Inc.
+# Copyright 2017 Joyent, Inc.
 #
 
 # include global definitions
 include ../Makefile.master
 
 sparc_HDRS=
-i386_HDRS=	stack_unwind.h
+i386_HDRS=		\
+	stack_unwind.h	\
+	bhyve.h
 
 KRB5HDRS=		\
 	mit_copyright.h	\
diff --git a/usr/src/lib/Makefile b/usr/src/lib/Makefile
index 878ffa9f04..0054c41e6d 100644
--- a/usr/src/lib/Makefile
+++ b/usr/src/lib/Makefile
@@ -22,7 +22,7 @@
 #
 # Copyright (c) 1989, 2010, Oracle and/or its affiliates. All rights reserved.
 # Copyright (c) 2012 by Delphix. All rights reserved.
-# Copyright 2015, Joyent, Inc.
+# Copyright 2017 Joyent, Inc.
 # Copyright (c) 2013 Gary Mills
 # Copyright 2014 Garrett D'Amore <garrett@damore.org>
 # Copyright (c) 2015 Gary Mills
@@ -278,7 +278,8 @@ SUBDIRS +=				\
 
 i386_SUBDIRS=		\
 	libfdisk	\
-	libsaveargs
+	libsaveargs	\
+	libvmmapi
 
 sparc_SUBDIRS=		\
 	efcode		\
@@ -507,7 +508,8 @@ HDRSUBDIRS=				\
 
 i386_HDRSUBDIRS=	\
 	libfdisk	\
-	libsaveargs
+	libsaveargs	\
+	libvmmapi
 
 sparc_HDRSUBDIRS=	\
 	libds		\
diff --git a/usr/src/lib/libvmmapi/Makefile b/usr/src/lib/libvmmapi/Makefile
index 60621fcb75..233fcd5edb 100644
--- a/usr/src/lib/libvmmapi/Makefile
+++ b/usr/src/lib/libvmmapi/Makefile
@@ -19,11 +19,13 @@ HDRS =		vmmapi.h
 
 HDRDIR =	common
 
+CHECKHDRS =
+
 $(BUILD64)SUBDIRS += $(MACH64)
 
 all:=		TARGET= all
 install:=	TARGET= install
-clean:=		TARGET= clean
+clean:=	TARGET= clean
 clobber:=	TARGET= clobber
 lint:=		TARGET= lint
 _msg:=		TARGET= _msg
diff --git a/usr/src/lib/libvmmapi/Makefile.com b/usr/src/lib/libvmmapi/Makefile.com
index e41a82f9a2..f975b1775f 100644
--- a/usr/src/lib/libvmmapi/Makefile.com
+++ b/usr/src/lib/libvmmapi/Makefile.com
@@ -13,10 +13,10 @@
 # Copyright 2013 Pluribus Networks Inc.
 #
 
-LIBRARY		= libvmmapi.a
+LIBRARY	= libvmmapi.a
 VERS		= .1
 
-OBJECTS		= vmmapi.o expand_number.o
+OBJECTS	= vmmapi.o expand_number.o
 
 # include library definitions
 include ../../Makefile.lib
@@ -24,16 +24,16 @@ include ../../Makefile.lib
 # install this library in the root filesystem
 include ../../Makefile.rootfs
 
-SRCDIR		=	../common
+SRCDIR		= ../common
 
-LIBS		=	$(DYNLIB) $(LINTLIB)
+LIBS		= $(DYNLIB) $(LINTLIB)
 
-CPPFLAGS	=	-I$(COMPAT)/freebsd -I$(CONTRIB)/freebsd \
+CPPFLAGS	= -I$(COMPAT)/freebsd -I$(CONTRIB)/freebsd \
 	$(CPPFLAGS.master) -I$(SRC)/uts/i86pc
 
 $(LINTLIB) :=	SRCS = $(SRCDIR)/$(LINTSRC)
 
-LDLIBS		+=	-lc
+LDLIBS		+= -lc
 
 .KEEP_STATE:
 
diff --git a/usr/src/lib/libvmmapi/common/vmmapi.c b/usr/src/lib/libvmmapi/common/vmmapi.c
index bbab3961a9..a1b3ef4ae4 100644
--- a/usr/src/lib/libvmmapi/common/vmmapi.c
+++ b/usr/src/lib/libvmmapi/common/vmmapi.c
@@ -535,6 +535,8 @@ vm_run(struct vmctx *ctx, int vcpu, struct vm_exit *vmexit)
 	return (error);
 }
 
+/* XXX: unused static */
+#if notyet
 static int
 vm_inject_exception_real(struct vmctx *ctx, int vcpu, int vector,
     int error_code, int error_code_valid)
@@ -549,6 +551,7 @@ vm_inject_exception_real(struct vmctx *ctx, int vcpu, int vector,
 
 	return (ioctl(ctx->fd, VM_INJECT_EXCEPTION, &exc));
 }
+#endif
 
 int
 vm_inject_exception(struct vmctx *ctx, int vcpu, int vector, int errcode_valid,
diff --git a/usr/src/tools/scripts/Makefile b/usr/src/tools/scripts/Makefile
index e254a76a08..e797213bcd 100644
--- a/usr/src/tools/scripts/Makefile
+++ b/usr/src/tools/scripts/Makefile
@@ -22,6 +22,7 @@
 # Copyright (c) 1999, 2010, Oracle and/or its affiliates. All rights reserved.
 #
 # Copyright 2010, Richard Lowe
+# Copyright 2017 Joyent, Inc.
 
 SHELL=/usr/bin/ksh93
 
@@ -47,6 +48,7 @@ SHFILES= \
 PERLFILES= \
 	check_rtime \
 	find_elf \
+	gensetdefs \
 	interface_check \
 	interface_cmp \
 	jstyle \
diff --git a/usr/src/uts/common/Makefile.files b/usr/src/uts/common/Makefile.files
index 1030968c73..6479aaf5de 100644
--- a/usr/src/uts/common/Makefile.files
+++ b/usr/src/uts/common/Makefile.files
@@ -25,7 +25,7 @@
 # Copyright (c) 2013 by Saso Kiselkov. All rights reserved.
 # Copyright 2015 Nexenta Systems, Inc.  All rights reserved.
 # Copyright 2016 Garrett D'Amore <garrett@damore.org>
-# Copyright (c) 2017, Joyent, Inc.
+# Copyright 2017 Joyent, Inc.
 # Copyright 2016 OmniTI Computer Consulting, Inc.  All rights reserved.
 # Copyright 2016 Hans Rosenfeld <rosenfeld@grumpf.hope-2000.org>
 #
@@ -1986,9 +1986,9 @@ LINT_DEFS	+= -Dunix
 #	It is a bug in the current compilation system that the assember
 #	can't process the -Y I, flag.
 #
-NATIVE_INC_PATH += $(INC_PATH) $(CCYFLAG)$(UTSBASE)/common
-AS_INC_PATH	+= $(INC_PATH) -I$(UTSBASE)/common
-INCLUDE_PATH    += $(INC_PATH) $(CCYFLAG)$(UTSBASE)/common
+NATIVE_INC_PATH += $(PRE_INC_PATH) $(INC_PATH) $(CCYFLAG)$(UTSBASE)/common
+AS_INC_PATH	+= $(PRE_INC_PATH) $(INC_PATH) -I$(UTSBASE)/common
+INCLUDE_PATH    += $(PRE_INC_PATH) $(INC_PATH) $(CCYFLAG)$(UTSBASE)/common
 
 PCIEB_OBJS += pcieb.o
 
diff --git a/usr/src/uts/i86pc/Makefile.files b/usr/src/uts/i86pc/Makefile.files
index 1f646736e0..40eb4036cc 100644
--- a/usr/src/uts/i86pc/Makefile.files
+++ b/usr/src/uts/i86pc/Makefile.files
@@ -237,6 +237,30 @@ UPPC_OBJS += uppc.o psm_common.o
 XSVC_OBJS += xsvc.o
 AMD_IOMMU_OBJS +=	amd_iommu.o amd_iommu_impl.o amd_iommu_acpi.o \
 			amd_iommu_cmd.o amd_iommu_log.o amd_iommu_page_tables.o
+VMM_OBJS += vmm.o \
+	vmm_sol_dev.o \
+	vmm_host.o \
+	vmm_instruction_emul.o \
+	vmm_ioport.o \
+	vmm_lapic.o \
+	vmm_sol_mem.o \
+	vmm_util.o \
+	x86.o \
+	vdev.o \
+	vatpic.o \
+	vatpit.o \
+	vhpet.o \
+	vioapic.o \
+	vlapic.o \
+	ept.o \
+	vmcs.o \
+	vmx_msr.o \
+	vmx.o \
+	vmx_support.o \
+	amdv.o \
+	vmm_sol_glue.o
+
+VIONA_OBJS += viona.o
 
 #
 #	Build up defines and paths.
diff --git a/usr/src/uts/i86pc/Makefile.i86pc b/usr/src/uts/i86pc/Makefile.i86pc
index 9a5a625b4c..b5673b182b 100644
--- a/usr/src/uts/i86pc/Makefile.i86pc
+++ b/usr/src/uts/i86pc/Makefile.i86pc
@@ -24,6 +24,7 @@
 #
 # Copyright (c) 2005, 2010, Oracle and/or its affiliates. All rights reserved.
 # Copyright (c) 2013 Andrew Stormont.  All rights reserved.
+# Copyright 2017 Joyent, Inc.
 #
 #
 #	This makefile contains the common definitions for the i86pc unix
@@ -264,6 +265,9 @@ DRV_KMODS	+= amd_iommu
 DRV_KMODS	+= dr
 DRV_KMODS	+= ioat
 DRV_KMODS	+= fipe
+# XXX: should be DRV_KMODS_64, but that doesn't work
+DRV_KMODS	+= vmm
+DRV_KMODS	+= viona
 
 DRV_KMODS	+= cpudrv
 
diff --git a/usr/src/uts/i86pc/Makefile.rules b/usr/src/uts/i86pc/Makefile.rules
index 849fadcc14..9bfbbe5e78 100644
--- a/usr/src/uts/i86pc/Makefile.rules
+++ b/usr/src/uts/i86pc/Makefile.rules
@@ -22,7 +22,7 @@
 #
 # Copyright (c) 1992, 2010, Oracle and/or its affiliates. All rights reserved.
 # Copyright 2015 Igor Kozhukhov <ikozhukhov@gmail.com>
-# Copyright (c) 2017 Joyent, Inc.
+# Copyright 2017 Joyent, Inc.
 #
 
 #	This Makefile defines the build rules for the directory uts/i86pc
@@ -216,6 +216,29 @@ $(OBJS_DIR)/%.o:		$(UTSBASE)/i86pc/dboot/%.c
 	$(COMPILE.c) -o $@ $<
 	$(CTFCONVERT_O)
 
+$(OBJS_DIR)/%.o:		$(UTSBASE)/i86pc/io/vmm/%.c
+	$(COMPILE.c) -o $@ $<
+	$(CTFCONVERT_O)
+
+$(OBJS_DIR)/%.o:		$(UTSBASE)/i86pc/io/vmm/amd/%.c
+	$(COMPILE.c) -o $@ $<
+	$(CTFCONVERT_O)
+
+$(OBJS_DIR)/%.o:		$(UTSBASE)/i86pc/io/vmm/intel/%.c
+	$(COMPILE.c) -o $@ $<
+	$(CTFCONVERT_O)
+
+$(OBJS_DIR)/%.o:		$(UTSBASE)/i86pc/io/vmm/io/%.c
+	$(COMPILE.c) -o $@ $<
+	$(CTFCONVERT_O)
+
+$(OBJS_DIR)/%.o:		$(UTSBASE)/i86pc/io/vmm/intel/%.s
+	$(COMPILE.s) -o $@ $<
+
+$(OBJS_DIR)/%.o:		$(UTSBASE)/i86pc/io/viona/%.c
+	$(COMPILE.c) -o $@ $<
+	$(CTFCONVERT_O)
+
 #
 # dboot stuff is always 32 bit, linked to run with phys_addr == virt_addr
 #
@@ -464,6 +487,24 @@ $(LINTS_DIR)/%.ln:		$(UTSBASE)/i86pc/io/xsvc/%.c
 $(LINTS_DIR)/%.ln:		$(UTSBASE)/common/xen/os/%.c
 	@($(LHEAD) $(LINT.c) $< $(LTAIL))
 
+$(LINTS_DIR)/%.ln:		$(UTSBASE)/i86pc/io/vmm/%.c
+	@($(LHEAD) $(LINT.c) $< $(LTAIL))
+
+$(LINTS_DIR)/%.ln:		$(UTSBASE)/i86pc/io/vmm/amd/%.c
+	@($(LHEAD) $(LINT.c) $< $(LTAIL))
+
+$(LINTS_DIR)/%.ln:		$(UTSBASE)/i86pc/io/vmm/intel/%.c
+	@($(LHEAD) $(LINT.c) $< $(LTAIL))
+
+$(LINTS_DIR)/%.ln:		$(UTSBASE)/i86pc/io/vmm/io/%.c
+	@($(LHEAD) $(LINT.c) $< $(LTAIL))
+
+$(LINTS_DIR)/%.ln:		$(UTSBASE)/i86pc/io/vmm/intel/%.s
+	@($(LHEAD) $(LINT.s) $< $(LTAIL))
+
+$(LINTS_DIR)/%.ln:		$(UTSBASE)/i86pc/io/viona/%.c
+	@($(LHEAD) $(LINT.c) $< $(LTAIL))
+
 #
 # bios call has a funky name change while building
 #
diff --git a/usr/src/uts/i86pc/io/viona/viona.c b/usr/src/uts/i86pc/io/viona/viona.c
index 40bdd80a6e..86666d4432 100644
--- a/usr/src/uts/i86pc/io/viona/viona.c
+++ b/usr/src/uts/i86pc/io/viona/viona.c
@@ -34,6 +34,7 @@
  * http://www.illumos.org/license/CDDL.
  *
  * Copyright 2015 Pluribus Networks Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 #include <sys/conf.h>
@@ -1139,10 +1140,12 @@ viona_rx(void *arg, mac_resource_handle_t mrh, mblk_t *mp,
 		size_t			mblklen;
 		int			n, i = 0;
 		uint16_t		cookie;
-		struct virtio_net_hdr	*vrx;
-		struct virtio_net_mrgrxhdr *vmrgrx;
+		struct virtio_net_hdr	*vrx = NULL;
+		struct virtio_net_mrgrxhdr *vmrgrx = NULL;
+#if notyet
 		mblk_t			*ml;
-		caddr_t			buf;
+#endif
+		caddr_t			buf = NULL;
 		int			total_len = 0;
 		int			copied_buf = 0;
 		int			num_bufs = 0;
@@ -1312,8 +1315,10 @@ viona_desb_free(viona_desb_t *dp)
 {
 	viona_link_t		*link;
 	viona_vring_hqueue_t	*hq;
+#if notyet
 	struct virtio_used	*vu;
 	int			uidx;
+#endif
 	uint_t			ref;
 
 	ref = atomic_dec_uint_nv(&dp->d_ref);
diff --git a/usr/src/uts/i86pc/io/vmm/amd/amdv.c b/usr/src/uts/i86pc/io/vmm/amd/amdv.c
index 6b62daae6c..5cdf283a24 100644
--- a/usr/src/uts/i86pc/io/vmm/amd/amdv.c
+++ b/usr/src/uts/i86pc/io/vmm/amd/amdv.c
@@ -36,6 +36,7 @@
  * http://www.illumos.org/license/CDDL.
  *
  * Copyright 2014 Pluribus Networks Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 #include <sys/cdefs.h>
@@ -172,6 +173,7 @@ struct vmm_ops vmm_ops_amd = {
 	amdv_setcap
 };
 
+#ifdef	__FreeBSD__
 static int
 amd_iommu_init(void)
 {
@@ -254,7 +256,6 @@ amd_iommu_invalidate_tlb(void *domain)
 	printf("amd_iommu_invalidate_tlb: not implemented\n");
 }
 
-#ifdef	__FreeBSD__
 struct iommu_ops iommu_ops_amd = {
 	amd_iommu_init,
 	amd_iommu_cleanup,
diff --git a/usr/src/uts/i86pc/io/vmm/intel/vmcs.c b/usr/src/uts/i86pc/io/vmm/intel/vmcs.c
index bbd2da2a34..1f31959ec2 100644
--- a/usr/src/uts/i86pc/io/vmm/intel/vmcs.c
+++ b/usr/src/uts/i86pc/io/vmm/intel/vmcs.c
@@ -36,6 +36,7 @@
  * http://www.illumos.org/license/CDDL.
  *
  * Copyright 2014 Pluribus Networks Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 #ifdef	__FreeBSD__
@@ -364,7 +365,10 @@ vmcs_set_defaults(struct vmcs *vmcs,
 {
 	int error, codesel, datasel, tsssel;
 	u_long cr0, cr4, efer;
-	uint64_t eptp, pat, fsbase, idtrbase;
+	uint64_t eptp, pat, idtrbase;
+#ifdef	__FreeBSD__
+	uint64_t fsbase;
+#endif
 	uint32_t exc_bitmap;
 
 	codesel = vmm_get_host_codesel();
diff --git a/usr/src/uts/i86pc/io/vmm/intel/vmx.c b/usr/src/uts/i86pc/io/vmm/intel/vmx.c
index 7ddf4e2a46..be2490fe44 100644
--- a/usr/src/uts/i86pc/io/vmm/intel/vmx.c
+++ b/usr/src/uts/i86pc/io/vmm/intel/vmx.c
@@ -36,6 +36,7 @@
  * http://www.illumos.org/license/CDDL.
  *
  * Copyright 2015 Pluribus Networks Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 #include <sys/cdefs.h>
@@ -163,7 +164,9 @@ static int cap_halt_exit;
 static int cap_pause_exit;
 static int cap_unrestricted_guest;
 static int cap_monitor_trap;
+#if notyet
 static int cap_invpcid;
+#endif
 
 static int virtual_interrupt_delivery;
 SYSCTL_INT(_hw_vmm_vmx, OID_AUTO, virtual_interrupt_delivery, CTLFLAG_RD,
@@ -192,7 +195,9 @@ SYSCTL_UINT(_hw_vmm_vmx, OID_AUTO, vpid_alloc_failed, CTLFLAG_RD,
 static int vmx_getdesc(void *arg, int vcpu, int reg, struct seg_desc *desc);
 static int vmx_getreg(void *arg, int vcpu, int reg, uint64_t *retval);
 static int vmxctx_setreg(struct vmxctx *vmxctx, int reg, uint64_t val);
+#ifdef	__FreeBSD__
 static void vmx_inject_pir(struct vlapic *vlapic);
+#endif
 
 #ifdef KTR
 static const char *
@@ -384,13 +389,14 @@ vmx_setjmp_trace(struct vmx *vmx, int vcpu, struct vmxctx *vmxctx, int rc)
 }
 #endif
 #else
-static void __inline
+static __inline void
 vmx_setjmp_trace(struct vmx *vmx, int vcpu, struct vmxctx *vmxctx, int rc)
 {
 	return;
 }
 #endif	/* KTR */
 
+#if notyet
 static int
 vmx_allow_x2apic_msrs(struct vmx *vmx)
 {
@@ -438,6 +444,7 @@ vmx_allow_x2apic_msrs(struct vmx *vmx)
 
 	return (error);
 }
+#endif
 
 u_long
 vmx_fix_cr0(u_long cr0)
@@ -1031,8 +1038,10 @@ vmx_set_pcpu_defaults(struct vmx *vmx, int vcpu)
 {
 	struct vmxstate *vmxstate;
 	struct invvpid_desc invvpid_desc = { 0 };
+#if notyet
 #ifndef	__FreeBSD__
 	desctbr_t idtr, gdtr;
+#endif
 #endif
 
 	vmxstate = &vmx->state[vcpu];
@@ -1090,7 +1099,7 @@ vm_exit_update_rip(struct vm_exit *vmexit)
  */
 CTASSERT((PROCBASED_CTLS_ONE_SETTING & PROCBASED_INT_WINDOW_EXITING) != 0);
 
-static void __inline
+static __inline void
 vmx_set_int_window_exiting(struct vmx *vmx, int vcpu)
 {
 
@@ -1101,7 +1110,7 @@ vmx_set_int_window_exiting(struct vmx *vmx, int vcpu)
 	}
 }
 
-static void __inline
+static __inline void
 vmx_clear_int_window_exiting(struct vmx *vmx, int vcpu)
 {
 
@@ -1117,7 +1126,7 @@ vmx_clear_int_window_exiting(struct vmx *vmx, int vcpu)
 	VCPU_CTR0(vmx->vm, vcpu, "Disabling interrupt window exiting");
 }
 
-static void __inline
+static __inline void
 vmx_set_nmi_window_exiting(struct vmx *vmx, int vcpu)
 {
 
@@ -1128,7 +1137,7 @@ vmx_set_nmi_window_exiting(struct vmx *vmx, int vcpu)
 	}
 }
 
-static void __inline
+static __inline void
 vmx_clear_nmi_window_exiting(struct vmx *vmx, int vcpu)
 {
 
@@ -1409,6 +1418,7 @@ vmx_restore_nmi_blocking(struct vmx *vmx, int vcpuid)
 	vmcs_write(VMCS_GUEST_INTERRUPTIBILITY, gi);
 }
 
+#if notyet
 static void
 vmx_clear_nmi_blocking(struct vmx *vmx, int vcpuid)
 {
@@ -1419,6 +1429,7 @@ vmx_clear_nmi_blocking(struct vmx *vmx, int vcpuid)
 	gi &= ~VMCS_INTERRUPTIBILITY_NMI_BLOCKING;
 	vmcs_write(VMCS_GUEST_INTERRUPTIBILITY, gi);
 }
+#endif
 
 static uint64_t
 vmx_get_guest_reg(struct vmx *vmx, int vcpu, int ident)
@@ -1756,6 +1767,7 @@ vmexit_inst_emul(struct vm_exit *vmexit, uint64_t gpa, uint64_t gla)
 	vie_init(&vmexit->u.inst_emul.vie, NULL, 0);
 }
 
+#if notyet
 static int
 ept_fault_type(uint64_t ept_qual)
 {
@@ -1770,6 +1782,7 @@ ept_fault_type(uint64_t ept_qual)
 
 	return (fault_type);
 }
+#endif
 
 static boolean_t
 ept_emulation_fault(uint64_t ept_qual)
@@ -1847,7 +1860,10 @@ vmx_exit_process(struct vmx *vmx, int vcpu, struct vm_exit *vmexit)
 	struct vmxctx *vmxctx;
 	struct vm_inout_str *vis;
 	uint32_t eax, ecx, edx, idtvec_info, intr_info, inst_info;
-	uint64_t qual, gla, gpa, cr3;
+	uint64_t qual, gpa;
+#if notyet
+	uint64_t gla, cr3;
+#endif
 	bool retu;
 
 	CTASSERT((PINBASED_CTLS_ONE_SETTING & PINBASED_VIRTUAL_NMI) != 0);
@@ -2021,6 +2037,8 @@ vmx_exit_process(struct vmx *vmx, int vcpu, struct vm_exit *vmexit)
 		 *
 		 * See "Resuming Guest Software after Handling an Exception".
 		 */
+		/* XXX: properly initialize idtvec_info */
+		idtvec_info = 0;
 		if ((idtvec_info & VMCS_IDT_VEC_VALID) == 0 &&
 		    (intr_info & 0xff) != IDT_DF &&
 		    (intr_info & EXIT_QUAL_NMIUDTI) != 0)
@@ -2089,7 +2107,10 @@ vmx_exit_process(struct vmx *vmx, int vcpu, struct vm_exit *vmexit)
 static int
 vmx_run(void *arg, int vcpu, register_t rip)
 {
-	int error, vie, rc, handled, astpending;
+#if notyet
+	int error;
+#endif
+	int vie, rc, handled, astpending;
 	uint32_t exit_reason;
 	struct vmx *vmx;
 	struct vm *vm;
@@ -2689,6 +2710,7 @@ vmx_post_intr(struct vlapic *vlapic, int hostcpu)
  * Transfer the pending interrupts in the PIR descriptor to the IRR
  * in the virtual APIC page.
  */
+#ifdef	__FreeBSD__
 static void
 vmx_inject_pir(struct vlapic *vlapic)
 {
@@ -2778,6 +2800,7 @@ vmx_inject_pir(struct vlapic *vlapic)
 		}
 	}
 }
+#endif
 
 static struct vlapic *
 vmx_vlapic_init(void *arg, int vcpuid)
diff --git a/usr/src/uts/i86pc/io/vmm/intel/vmx_cpufunc.h b/usr/src/uts/i86pc/io/vmm/intel/vmx_cpufunc.h
index 9513f6c70b..2344606b06 100644
--- a/usr/src/uts/i86pc/io/vmm/intel/vmx_cpufunc.h
+++ b/usr/src/uts/i86pc/io/vmm/intel/vmx_cpufunc.h
@@ -36,6 +36,7 @@
  * http://www.illumos.org/license/CDDL.
  *
  * Copyright 2014 Pluribus Networks Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 #ifndef	_VMX_CPUFUNC_H_
@@ -169,7 +170,7 @@ vmread(uint64_t r, uint64_t *addr)
 	return (error);
 }
 
-static void __inline
+static __inline void
 VMCLEAR(struct vmcs *vmcs)
 {
 	int err;
@@ -181,7 +182,7 @@ VMCLEAR(struct vmcs *vmcs)
 	critical_exit();
 }
 
-static void __inline
+static __inline void
 VMPTRLD(struct vmcs *vmcs)
 {
 	int err;
@@ -205,7 +206,7 @@ struct invvpid_desc {
 };
 CTASSERT(sizeof(struct invvpid_desc) == 16);
 
-static void __inline
+static __inline void
 invvpid(uint64_t type, struct invvpid_desc desc)
 {
 	int error;
@@ -228,7 +229,7 @@ struct invept_desc {
 };
 CTASSERT(sizeof(struct invept_desc) == 16);
 
-static void __inline
+static __inline void
 invept(uint64_t type, struct invept_desc desc)
 {
 	int error;
diff --git a/usr/src/uts/i86pc/io/vmm/intel/vmx_msr.c b/usr/src/uts/i86pc/io/vmm/intel/vmx_msr.c
index 1ced311ca8..ebcbbc428d 100644
--- a/usr/src/uts/i86pc/io/vmm/intel/vmx_msr.c
+++ b/usr/src/uts/i86pc/io/vmm/intel/vmx_msr.c
@@ -25,6 +25,18 @@
  *
  * $FreeBSD: head/sys/amd64/vmm/intel/vmx_msr.c 284174 2015-06-09 00:14:47Z tychon $
  */
+/*
+ * This file and its contents are supplied under the terms of the
+ * Common Development and Distribution License ("CDDL"), version 1.0.
+ * You may only use this file in accordance with the terms of version
+ * 1.0 of the CDDL.
+ *
+ * A full copy of the text of the CDDL should have accompanied this
+ * source.  A copy of the CDDL is also available via the Internet at
+ * http://www.illumos.org/license/CDDL.
+ *
+ * Copyright 2017 Joyent, Inc.
+ */
 
 #include <sys/cdefs.h>
 __FBSDID("$FreeBSD: head/sys/amd64/vmm/intel/vmx_msr.c 284174 2015-06-09 00:14:47Z tychon $");
@@ -184,7 +196,9 @@ msr_bitmap_change_access(char *bitmap, u_int msr, int access)
 static uint64_t misc_enable;
 static uint64_t platform_info;
 static uint64_t turbo_ratio_limit;
+#ifdef	__FreeBSD__
 static uint64_t host_msrs[GUEST_MSR_NUM];
+#endif
 
 static bool
 nehalem_cpu(void)
diff --git a/usr/src/uts/i86pc/io/vmm/intel/vmx_support.s b/usr/src/uts/i86pc/io/vmm/intel/vmx_support.s
index d57dde1093..88e11c8137 100644
--- a/usr/src/uts/i86pc/io/vmm/intel/vmx_support.s
+++ b/usr/src/uts/i86pc/io/vmm/intel/vmx_support.s
@@ -36,10 +36,41 @@
  * http://www.illumos.org/license/CDDL.
  *
  * Copyright 2013 Pluribus Networks Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 #include <machine/asmacros.h>
 
+#if defined(lint)
+
+struct vmxctx;
+
+/*ARGSUSED*/
+int
+vmx_setjmp(struct vmxctx *ctx)
+{ return (0); }
+
+/*ARGSUSED*/
+void
+vmx_return(struct vmxctx *ctxp, int retval)
+{}
+
+void
+vmx_longjmp(void)
+{}
+
+/*ARGSUSED*/
+void
+vmx_launch(struct vmxctx *ctx)
+{}
+
+/*ARGSUSED*/
+void
+vmx_resume(struct vmxctx *ctx)
+{}
+
+#else /* lint */
+
 #include "vmx_assym.s"
 
 /*
@@ -269,3 +300,5 @@ ENTRY(vmx_launch)
 	addq	$VMXCTX_TMPSTKTOP,%rsp
 	callq	vmx_return
 END(vmx_launch)
+
+#endif /* lint */
diff --git a/usr/src/uts/i86pc/io/vmm/io/vioapic.c b/usr/src/uts/i86pc/io/vmm/io/vioapic.c
index 5adf5de16d..77fe58151a 100644
--- a/usr/src/uts/i86pc/io/vmm/io/vioapic.c
+++ b/usr/src/uts/i86pc/io/vmm/io/vioapic.c
@@ -37,6 +37,7 @@
  * http://www.illumos.org/license/CDDL.
  *
  * Copyright 2014 Pluribus Networks Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 #include <sys/cdefs.h>
@@ -238,6 +239,7 @@ vioapic_pulse_irq(struct vm *vm, int irq)
  * Reset the vlapic's trigger-mode register to reflect the ioapic pin
  * configuration.
  */
+#if 0	/* XXX */
 static void
 vioapic_update_tmr(struct vm *vm, int vcpuid, void *arg)
 {
@@ -277,6 +279,7 @@ vioapic_update_tmr(struct vm *vm, int vcpuid, void *arg)
 	}
 	VIOAPIC_UNLOCK(vioapic);
 }
+#endif
 
 static uint32_t
 vioapic_read(struct vioapic *vioapic, int vcpuid, uint32_t addr)
@@ -319,7 +322,9 @@ vioapic_write(struct vioapic *vioapic, int vcpuid, uint32_t addr, uint32_t data)
 	uint64_t data64, mask64;
 	uint64_t last, changed;
 	int regnum, pin, lshift;
+#if 0	/* XXX */
 	cpuset_t allvcpus;
+#endif
 
 	regnum = addr & 0xff;
 	switch (regnum) {
diff --git a/usr/src/uts/i86pc/io/vmm/io/vlapic.c b/usr/src/uts/i86pc/io/vmm/io/vlapic.c
index 9a0a3058ea..5bf306fd6d 100644
--- a/usr/src/uts/i86pc/io/vmm/io/vlapic.c
+++ b/usr/src/uts/i86pc/io/vmm/io/vlapic.c
@@ -36,6 +36,7 @@
  * http://www.illumos.org/license/CDDL.
  *
  * Copyright 2014 Pluribus Networks Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 #include <sys/cdefs.h>
@@ -122,12 +123,14 @@ vlapic_dfr_write_handler(struct vlapic *vlapic)
 	lapic->dfr &= APIC_DFR_MODEL_MASK;
 	lapic->dfr |= APIC_DFR_RESERVED;
 
-	if ((lapic->dfr & APIC_DFR_MODEL_MASK) == APIC_DFR_MODEL_FLAT)
+	if ((lapic->dfr & APIC_DFR_MODEL_MASK) == APIC_DFR_MODEL_FLAT) {
 		VLAPIC_CTR0(vlapic, "vlapic DFR in Flat Model");
-	else if ((lapic->dfr & APIC_DFR_MODEL_MASK) == APIC_DFR_MODEL_CLUSTER)
+	} else if ((lapic->dfr & APIC_DFR_MODEL_MASK) ==
+	    APIC_DFR_MODEL_CLUSTER) {
 		VLAPIC_CTR0(vlapic, "vlapic DFR in Cluster Model");
-	else
+	} else {
 		VLAPIC_CTR1(vlapic, "DFR in Unknown Model %#x", lapic->dfr);
+	}
 }
 
 void
diff --git a/usr/src/uts/i86pc/io/vmm/vmm.c b/usr/src/uts/i86pc/io/vmm/vmm.c
index 7081368f4a..fd8304585c 100644
--- a/usr/src/uts/i86pc/io/vmm/vmm.c
+++ b/usr/src/uts/i86pc/io/vmm/vmm.c
@@ -36,6 +36,7 @@
  * http://www.illumos.org/license/CDDL.
  *
  * Copyright 2015 Pluribus Networks Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 #include <sys/cdefs.h>
@@ -350,9 +351,13 @@ vm_create(const char *name, struct vm **retvm)
 {
 	int i;
 	struct vm *vm;
+#ifdef	__FreeBSD__
 	vm_paddr_t maxaddr;
+#endif
 
+#if notyet
 	const int BSP = 0;
+#endif
 
 	/*
 	 * If vmm.ko could not be successfully initialized then don't attempt
@@ -391,9 +396,9 @@ vm_free_mem_seg(struct vm *vm, struct vm_memory_segment *seg)
 {
 	size_t len;
 	vm_paddr_t hpa;
+#ifdef	__FreeBSD__
 	void *host_domain;
 
-#ifdef	__FreeBSD__
 	host_domain = iommu_host_domain();
 #endif
 
@@ -515,7 +520,9 @@ vm_malloc(struct vm *vm, vm_paddr_t gpa, size_t len)
 	int error, available, allocated;
 	struct vm_memory_segment *seg;
 	vm_paddr_t g, hpa;
+#ifdef	__FreeBSD__
 	void *host_domain;
+#endif
 
 	const boolean_t spok = TRUE;	/* superpage mappings are ok */
 
@@ -894,7 +901,9 @@ vcpu_require_state_locked(struct vcpu *vcpu, enum vcpu_state newstate)
 static int
 vm_handle_hlt(struct vm *vm, int vcpuid, bool intr_disabled, bool *retu)
 {
+#ifdef	__FreeBSD__
 	struct vm_exit *vmexit;
+#endif
 	struct vcpu *vcpu;
 	int t, timo, spindown;
 
@@ -1037,7 +1046,9 @@ vm_run(struct vm *vm, struct vm_run *vmrun)
 {
 	int error, vcpuid;
 	struct vcpu *vcpu;
+#ifdef	__FreeBSD__
 	struct pcb *pcb;
+#endif
 	uint64_t tscval;
 	struct vm_exit *vme;
 	bool retu, intr_disabled;
@@ -1803,9 +1814,9 @@ void
 vm_copy_teardown(struct vm *vm, int vcpuid, struct vm_copyinfo *copyinfo,
     int num_copyinfo)
 {
+#ifdef	__FreeBSD__
 	int idx;
 
-#ifdef	__FreeBSD__
 	for (idx = 0; idx < num_copyinfo; idx++) {
 		if (copyinfo[idx].cookie != NULL)
 			vm_gpa_release(copyinfo[idx].cookie);
diff --git a/usr/src/uts/i86pc/io/vmm/vmm_host.h b/usr/src/uts/i86pc/io/vmm/vmm_host.h
index 5de015a228..c5984e8f99 100644
--- a/usr/src/uts/i86pc/io/vmm/vmm_host.h
+++ b/usr/src/uts/i86pc/io/vmm/vmm_host.h
@@ -36,6 +36,7 @@
  * http://www.illumos.org/license/CDDL.
  *
  * Copyright 2013 Pluribus Networks Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 #ifndef	_VMM_HOST_H_
@@ -89,8 +90,10 @@ vmm_get_host_gdtrbase(void)
 #endif
 }
 
+#ifdef	__FreeBSD__
 struct pcpu;
 extern struct pcpu __pcpu[];
+#endif
 
 static __inline uint64_t
 vmm_get_host_gsbase(void)
diff --git a/usr/src/uts/i86pc/io/vmm/vmm_instruction_emul.c b/usr/src/uts/i86pc/io/vmm/vmm_instruction_emul.c
index 72c7056e26..d35a74b33c 100644
--- a/usr/src/uts/i86pc/io/vmm/vmm_instruction_emul.c
+++ b/usr/src/uts/i86pc/io/vmm/vmm_instruction_emul.c
@@ -37,6 +37,7 @@
  * http://www.illumos.org/license/CDDL.
  *
  * Copyright 2015 Pluribus Networks Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 #include <sys/cdefs.h>
@@ -1636,11 +1637,13 @@ int
 vm_gla2gpa(struct vm *vm, int vcpuid, struct vm_guest_paging *paging,
     uint64_t gla, int prot, uint64_t *gpa)
 {
-	int nlevels, pfcode, ptpshift, ptpindex, retval, usermode, writable;
+	int ptpshift = 0, ptpindex = 0;
+	uint64_t *ptpbase = NULL, pte = 0, pgsize = 0;
+	int nlevels, pfcode, retval, usermode, writable;
 #ifdef	__FreeBSD__
-#endif
 	u_int retries;
-	uint64_t *ptpbase, ptpphys, pte, pgsize;
+#endif
+	uint64_t ptpphys;
 	uint32_t *ptpbase32, pte32;
 	void *cookie;
 
diff --git a/usr/src/uts/i86pc/io/vmm/vmm_sol_dev.c b/usr/src/uts/i86pc/io/vmm/vmm_sol_dev.c
index 79e1cb1a44..36e89613c5 100644
--- a/usr/src/uts/i86pc/io/vmm/vmm_sol_dev.c
+++ b/usr/src/uts/i86pc/io/vmm/vmm_sol_dev.c
@@ -11,6 +11,7 @@
 
 /*
  * Copyright 2015 Pluribus Networks Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 #include <sys/types.h>
@@ -20,11 +21,6 @@
 #include <sys/stat.h>
 #include <sys/vmsystm.h>
 #include <sys/ddi.h>
-/*
- * struct modctl in <sys/modctl.h> contains "void *__unused".  
- * Do this ugly workaround to avoid it.
- */
-#undef	__unused
 #include <sys/sunddi.h>
 #include <sys/fs/dv_node.h>
 
@@ -55,7 +51,9 @@ static	vmm_trace_rbuf_t *vmm_debug_rbuf;
 static	vmm_trace_dmsg_t *vmm_trace_dmsg_alloc(void);
 static	void vmm_trace_dmsg_free(void);
 static	void vmm_trace_rbuf_alloc(void);
+#if notyet
 static	void vmm_trace_rbuf_free(void);
+#endif
 
 /*
  * This routine is used to manage debug messages
@@ -149,7 +147,7 @@ vmm_trace_rbuf_alloc(void)
 	}
 }
 
-
+#if notyet
 static void
 vmm_trace_rbuf_free(void)
 {
@@ -157,6 +155,7 @@ vmm_trace_rbuf_free(void)
 	mutex_destroy(&vmm_debug_rbuf->lock);
 	kmem_free(vmm_debug_rbuf, sizeof (vmm_trace_rbuf_t));
 }
+#endif
 
 static void
 vmm_vtrace_log(const char *fmt, va_list ap)
@@ -235,18 +234,15 @@ vmmdev_do_ioctl(struct vmm_softc *sc, int cmd, intptr_t arg, int mode,
 	struct vm_register vmreg;
 	struct vm_seg_desc vmsegdesc;
 	struct vm_run vmrun;
-	struct vm_exception vmexc;
 	struct vm_lapic_irq vmirq;
 	struct vm_lapic_msi vmmsi;
 	struct vm_ioapic_irq ioapic_irq;
 	struct vm_isa_irq isa_irq;
 	struct vm_capability vmcap;
-	struct vm_nmi vmnmi;
 	struct vm_x2apic x2apic;
 	struct vm_gla2gpa gg;
 	struct vm_activate_cpu vac;
 	int pincount;
-	int i;
 
 	vcpu = -1;
 	state_changed = 0;
@@ -887,12 +883,6 @@ vmm_segmap(dev_t dev, off_t off, struct as *as,
 	return (error);
 }
 
-static int
-vmm_getinfo(dev_info_t *dip, ddi_info_cmd_t infocmd, void *arg, void **result)
-{
-	return (0);
-}
-
 static int
 vmm_probe(dev_info_t *dip)
 {
diff --git a/usr/src/uts/i86pc/io/vmm/vmm_sol_glue.c b/usr/src/uts/i86pc/io/vmm/vmm_sol_glue.c
index 6588f5a46d..07b5f87345 100644
--- a/usr/src/uts/i86pc/io/vmm/vmm_sol_glue.c
+++ b/usr/src/uts/i86pc/io/vmm/vmm_sol_glue.c
@@ -63,6 +63,7 @@
  * http://www.illumos.org/license/CDDL.
  *
  * Copyright 2014 Pluribus Networks Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 #include <sys/types.h>
@@ -553,7 +554,7 @@ int
 msleep_spin(void *chan, struct mtx *mtx, const char *wmesg, int ticks)
 {
 	struct sleepqueue	*sq;
-	int			error;
+	int			error = 0;
 
 	sleepq_lock(chan);
 	sq = sleepq_add(chan);
@@ -641,13 +642,21 @@ fpu_save_area_cleanup(void)
 struct savefpu *
 fpu_save_area_alloc(void)
 {
-	return (vmem_alloc(fpu_save_area_arena, sizeof (struct savefpu),
-			   VM_SLEEP));
+	struct savefpu *fsa = vmem_alloc(fpu_save_area_arena,
+	    sizeof (struct savefpu), VM_SLEEP);
+
+	bzero(fsa, sizeof (struct savefpu));
+	fsa->fsa_fp_ctx.fpu_regs.kfpu_u.kfpu_generic =
+	    kmem_cache_alloc(fpsave_cachep, KM_SLEEP);
+
+	return (fsa);
 }
 
 void
 fpu_save_area_free(struct savefpu *fsa)
 {
+	kmem_cache_free(fpsave_cachep,
+	    fsa->fsa_fp_ctx.fpu_regs.kfpu_u.kfpu_generic);
 	vmem_free(fpu_save_area_arena, fsa, sizeof (struct savefpu));
 }
 
@@ -667,13 +676,13 @@ fpu_save_area_reset(struct savefpu *fsa)
 
 	switch (fp_save_mech) {
 	case FP_FXSAVE:
-		fx = &fp->fpu_regs.kfpu_u.kfpu_fx;
+		fx = fp->fpu_regs.kfpu_u.kfpu_fx;
 		bcopy(&sse_initial, fx, sizeof (*fx));
 		break;
 	case FP_XSAVE:
 		fp->fpu_xsave_mask = (XFEATURE_ENABLED_X87 |
 		    XFEATURE_ENABLED_SSE | XFEATURE_ENABLED_AVX);
-		xs = &fp->fpu_regs.kfpu_u.kfpu_xs;
+		xs = fp->fpu_regs.kfpu_u.kfpu_xs;
 		bcopy(&avx_initial, xs, sizeof (*xs));
 		break;
 	default:
@@ -731,10 +740,10 @@ fpurestore(void *arg)
 
 	switch (fp_save_mech) {
 	case FP_FXSAVE:
-		vmm_fxrstor(&fp->fpu_regs.kfpu_u.kfpu_fx);
+		vmm_fxrstor(fp->fpu_regs.kfpu_u.kfpu_fx);
 		break;
 	case FP_XSAVE:
-		vmm_xrstor(&fp->fpu_regs.kfpu_u.kfpu_xs, fp->fpu_xsave_mask);
+		vmm_xrstor(fp->fpu_regs.kfpu_u.kfpu_xs, fp->fpu_xsave_mask);
 		break;
 	default:
 		panic("Invalid fp_save_mech");
@@ -752,10 +761,10 @@ fpusave(void *arg)
 
 	switch (fp_save_mech) {
 	case FP_FXSAVE:
-		vmm_fxsave(&fp->fpu_regs.kfpu_u.kfpu_fx);
+		vmm_fxsave(fp->fpu_regs.kfpu_u.kfpu_fx);
 		break;
 	case FP_XSAVE:
-		vmm_xsave(&fp->fpu_regs.kfpu_u.kfpu_xs, fp->fpu_xsave_mask);
+		vmm_xsave(fp->fpu_regs.kfpu_u.kfpu_xs, fp->fpu_xsave_mask);
 		break;
 	default:
 		panic("Invalid fp_save_mech");
diff --git a/usr/src/uts/i86pc/io/vmm/vmm_stat.h b/usr/src/uts/i86pc/io/vmm/vmm_stat.h
index 9bf7a60e0b..8fa74143d8 100644
--- a/usr/src/uts/i86pc/io/vmm/vmm_stat.h
+++ b/usr/src/uts/i86pc/io/vmm/vmm_stat.h
@@ -28,6 +28,18 @@
  *
  * $FreeBSD: head/sys/amd64/vmm/vmm_stat.h 250427 2013-05-10 02:59:49Z neel $
  */
+/*
+ * This file and its contents are supplied under the terms of the
+ * Common Development and Distribution License ("CDDL"), version 1.0.
+ * You may only use this file in accordance with the terms of version
+ * 1.0 of the CDDL.
+ *
+ * A full copy of the text of the CDDL should have accompanied this
+ * source.  A copy of the CDDL is also available via the Internet at
+ * http://www.illumos.org/license/CDDL.
+ *
+ * Copyright 2017 Joyent, Inc.
+ */
 
 #ifndef _VMM_STAT_H_
 #define	_VMM_STAT_H_
@@ -79,7 +91,7 @@ void 	vmm_stat_free(void *vp);
 int	vmm_stat_copy(struct vm *vm, int vcpu, int *num_stats, uint64_t *buf);
 int	vmm_stat_desc_copy(int index, char *buf, int buflen);
 
-static void __inline
+static __inline void
 vmm_stat_array_incr(struct vm *vm, int vcpu, struct vmm_stat_type *vst,
 		    int statidx, uint64_t x)
 {
@@ -94,7 +106,7 @@ vmm_stat_array_incr(struct vm *vm, int vcpu, struct vmm_stat_type *vst,
 }
 		   
 
-static void __inline
+static __inline void
 vmm_stat_incr(struct vm *vm, int vcpu, struct vmm_stat_type *vst, uint64_t x)
 {
 
diff --git a/usr/src/uts/i86pc/sys/vmm.h b/usr/src/uts/i86pc/sys/vmm.h
index e876ce748f..fd021ce876 100644
--- a/usr/src/uts/i86pc/sys/vmm.h
+++ b/usr/src/uts/i86pc/sys/vmm.h
@@ -36,6 +36,7 @@
  * http://www.illumos.org/license/CDDL.
  *
  * Copyright 2015 Pluribus Networks Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 #ifndef _VMM_H_
@@ -232,7 +233,7 @@ int vcpu_set_state(struct vm *vm, int vcpu, enum vcpu_state state,
     bool from_idle);
 enum vcpu_state vcpu_get_state(struct vm *vm, int vcpu, int *hostcpu);
 
-static int __inline
+static __inline int
 vcpu_is_running(struct vm *vm, int vcpu, int *hostcpu)
 {
 	return (vcpu_get_state(vm, vcpu, hostcpu) == VCPU_RUNNING);
diff --git a/usr/src/uts/i86pc/viona/Makefile b/usr/src/uts/i86pc/viona/Makefile
index c2b8bd8dcf..4ede5bbd84 100644
--- a/usr/src/uts/i86pc/viona/Makefile
+++ b/usr/src/uts/i86pc/viona/Makefile
@@ -11,6 +11,7 @@
 
 #
 # Copyright 2013 Pluribus Networks Inc.
+# Copyright 2017 Joyent, Inc.
 #
 
 #
@@ -22,7 +23,7 @@ UTSBASE	= ../..
 # Define the module and object file sets.
 #
 MODULE		= viona
-OBJECTS		= $(VIONA_OBJS:%=$(OBJS_DIR)/%)
+OBJECTS	= $(VIONA_OBJS:%=$(OBJS_DIR)/%)
 LINTS		= $(VIONA_OBJS:%.o=$(LINTS_DIR)/%.ln)
 ROOTMODULE	= $(USR_DRV_DIR)/$(MODULE)
 CONF_SRCDIR	= $(UTSBASE)/i86pc/io/viona
@@ -42,6 +43,12 @@ INSTALL_TARGET	= $(BINARY) $(ROOTMODULE) $(ROOT_CONFFILE)
 #
 # Overrides
 #
+LINTTAGS	+= -erroff=E_ASSIGN_NARROW_CONV
+LINTTAGS	+= -erroff=E_FUNC_ARG_UNUSED
+LINTTAGS	+= -erroff=E_BAD_PTR_CAST_ALIGN
+LINTTAGS	+= -erroff=E_FUNC_RET_MAYBE_IGNORED2
+LINTTAGS	+= -erroff=E_FUNC_RET_ALWAYS_IGNOR2
+
 CFLAGS		+= $(CCVERBOSE)
 LDFLAGS		+= -dy -Ndrv/dld -Nmisc/mac -Nmisc/dls -Ndrv/vmm
 
diff --git a/usr/src/uts/i86pc/vmm/Makefile b/usr/src/uts/i86pc/vmm/Makefile
index b3ab735781..f283d2f98f 100644
--- a/usr/src/uts/i86pc/vmm/Makefile
+++ b/usr/src/uts/i86pc/vmm/Makefile
@@ -11,6 +11,7 @@
 
 #
 # Copyright 2013 Pluribus Networks Inc.
+# Copyright 2017 Joyent, Inc.
 #
 
 #
@@ -42,11 +43,40 @@ INSTALL_TARGET	= $(BINARY) $(ROOTMODULE) $(ROOT_CONFFILE)
 #
 #	Overrides and additions
 #
+LINTTAGS	+= -erroff=E_EMPTY_DECLARATION
+LINTTAGS	+= -erroff=E_OPERANDS_INCOMPATIBLE_TYPES
+LINTTAGS	+= -erroff=E_VOID_CANT_RETURN_VALUE
+LINTTAGS	+= -erroff=E_YACC_ERROR
+LINTTAGS	+= -erroff=E_STATIC_UNUSED
+LINTTAGS	+= -erroff=E_FUNC_RET_MAYBE_IGNORED2
+LINTTAGS	+= -erroff=E_FUNC_RET_ALWAYS_IGNOR2
+LINTTAGS	+= -erroff=E_BAD_FORMAT_ARG_TYPE2
+LINTTAGS	+= -erroff=E_FUNC_ARG_UNUSED
+LINTTAGS	+= -erroff=E_FUNC_SET_NOT_USED
+LINTTAGS	+= -erroff=E_ASSIGN_NARROW_CONV
+LINTTAGS	+= -erroff=E_BAD_PTR_CAST_ALIGN
+LINTTAGS	+= -erroff=E_CONSTANT_CONDITION
+LINTTAGS	+= -erroff=E_PTR_TO_VOID_IN_ARITHMETIC
+LINTTAGS	+= -erroff=E_CONST_TRUNCATED_BY_ASSIGN
+LINTTAGS	+= -erroff=E_NOP_ELSE_STMT
+LINTTAGS	+= -erroff=E_FUNC_NO_RET_VAL
+LINTTAGS	+= -erroff=E_OLD_STYLE_DECL_OR_BAD_TYPE
+LINTTAGS	+= -erroff=E_VAR_USED_BEFORE_SET
+LINTTAGS	+= -erroff=E_INTEGER_OVERFLOW_DETECTED
+LINTTAGS	+= -erroff=E_STMT_NOT_REACHED
+LINTTAGS	+= -erroff=E_FUNC_NO_RET_VAL
+LINTTAGS	+= -erroff=E_USELESS_DECLARATION
+LINTTAGS	+= -erroff=E_EXPR_NULL_EFFECT
+LINTTAGS	+= -erroff=E_CASE_FALLTHRU
+LINTTAGS	+= -erroff=E_FUNC_DECL_VAR_ARG2
+LINTTAGS	+= -erroff=E_ASM_IMPOSSIBLE_CONSTRAINT
+LINTTAGS	+= -erroff=E_ASM_UNUSED_PARAM
+LINTTAGS	+= -erroff=E_NOP_IF_STMT
 
 # These sources only compile with gcc.  Workaround a confluence of cruft
 # regarding dmake and shadow compilation by neutering the sun compiler.
-amd64_CC	= $(ONBLD_TOOLS)/bin/$(MACH)/cw -_gcc
-CFLAGS 		+= -_cc=-xdryrun
+#amd64_CC	= $(ONBLD_TOOLS)/bin/$(MACH)/cw -_gcc
+#CFLAGS		+= -_cc=-xdryrun
 
 ALL_BUILDS	= $(ALL_BUILDSONLY64)
 DEF_BUILDS	= $(DEF_BUILDSONLY64)
-- 
2.21.0

