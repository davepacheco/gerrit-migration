From 7b67b9210f5b7ece27cbea85ed60586a6d7d989c Mon Sep 17 00:00:00 2001
From: Jan Wyszynski <jan.wyszynski@joyent.com>
Date: Mon, 27 Nov 2017 19:32:08 +0000
Subject: [PATCH] MANTA-3503 moray pgclient query function creates its own
 request id

---
 lib/buckets/common.js   |  3 ++-
 lib/buckets/creat.js    | 11 ++++-----
 lib/buckets/del.js      | 10 ++++-----
 lib/buckets/get.js      |  2 +-
 lib/buckets/list.js     |  2 +-
 lib/buckets/update.js   | 19 +++++++++-------
 lib/control.js          |  6 ++---
 lib/manatee.js          |  5 +++--
 lib/objects/common.js   |  4 ++--
 lib/objects/del.js      |  2 +-
 lib/objects/del_many.js |  2 +-
 lib/objects/find.js     |  4 ++--
 lib/objects/get.js      |  2 +-
 lib/objects/put.js      |  8 +++----
 lib/objects/reindex.js  |  8 +++----
 lib/objects/update.js   |  2 +-
 lib/pg.js               | 49 ++++++++++++++++++++++++++---------------
 lib/ping.js             |  2 +-
 lib/sql.js              |  2 +-
 19 files changed, 81 insertions(+), 62 deletions(-)

diff --git a/lib/buckets/common.js b/lib/buckets/common.js
index 938d6f0..0ad8832 100644
--- a/lib/buckets/common.js
+++ b/lib/buckets/common.js
@@ -109,6 +109,7 @@ function createIndexes(opts, cb) {
     var bucket = opts.bucket;
     var log = opts.log;
     var pg = opts.pg;
+    var reqid = opts.reqid;
 
     var queries = opts.indexes.map(function (i) {
         var sql = util.format(('CREATE %s INDEX %s_%s_idx ' +
@@ -127,7 +128,7 @@ function createIndexes(opts, cb) {
         func: function createIndex(sql, _cb) {
             _cb = once(_cb);
             log.debug('createIndexes: running %s', sql);
-            var q = pg.query(sql);
+            var q = pg.query(sql, reqid);
             q.once('error', function (err) {
                 if (err) {
                     log.error({
diff --git a/lib/buckets/creat.js b/lib/buckets/creat.js
index aefa463..fb6a117 100644
--- a/lib/buckets/creat.js
+++ b/lib/buckets/creat.js
@@ -69,7 +69,7 @@ function insertConfig(req, cb) {
         bucket: util.inspect(bucket)
     }, 'insertConfig: entered');
 
-    q = pg.query(sql, values);
+    q = pg.query(sql, values, req.req_id);
 
     q.once('error', function (err) {
         log.debug(err, 'insertConfig: failed');
@@ -102,7 +102,7 @@ function createSequence(req, cb) {
         bucket: bucket.name,
         sql: sql
     }, 'createSequence: entered');
-    q = pg.query(sql);
+    q = pg.query(sql, req.req_id);
 
     q.once('error', function (err) {
         log.debug(err, 'createSequence: failed');
@@ -136,7 +136,7 @@ function createLockingSerial(req, cb) {
         bucket: bucket.name,
         sql: sql
     }, 'createLockingSerial: entered');
-    q = pg.query(sql);
+    q = pg.query(sql, req.req_id);
 
     q.once('error', function (err) {
         log.debug(err, 'createLockingSerial: failed');
@@ -146,7 +146,7 @@ function createLockingSerial(req, cb) {
     q.once('end', function () {
         sql = util.format('INSERT INTO %s_locking_serial (id) VALUES (1)',
                           bucket.name);
-        q = pg.query(sql);
+        q = pg.query(sql, req.req_id);
         q.once('error', function (err) {
             log.debug(err, 'createLockingSerial(insert): failed');
             cb(err);
@@ -184,7 +184,7 @@ function createTable(req, cb) {
         bucket: bucket.name,
         sql: sql
     }, 'createTable: entered');
-    q = pg.query(sql);
+    q = pg.query(sql, req.req_id);
 
     q.once('error', function (err) {
         log.debug(err, 'createTable: failed');
@@ -205,6 +205,7 @@ function createIndexes(req, cb) {
         bucket: req.bucket.name,
         log: req.log,
         pg: req.pg,
+        reqid: req.req_id,
         indexes: Object.keys(req.bucket.index).filter(function (k) {
             return (!req.bucket.index[k].unique);
         }).concat('_id', '_etag', '_mtime', '_vnode')
diff --git a/lib/buckets/del.js b/lib/buckets/del.js
index 9405ca9..7347c69 100644
--- a/lib/buckets/del.js
+++ b/lib/buckets/del.js
@@ -65,7 +65,7 @@ function checkExists(req, cb) {
         bucket: req.bucket.name
     }, 'checkExists: entered');
 
-    var q = req.pg.query(sql, [req.bucket.name]);
+    var q = req.pg.query(sql, [req.bucket.name], req.req_id);
     var found = false;
 
     q.once('error', function (err) {
@@ -105,7 +105,7 @@ function deleteConfig(req, cb) {
 
     log.debug({ bucket: bucket.name }, 'deleteConfig: entered');
 
-    q = pg.query(sql);
+    q = pg.query(sql, req.req_id);
     q.once('error', cb);
     q.once('end', function () {
         log.debug({ bucket: bucket.name }, 'deleteConfig: done');
@@ -128,7 +128,7 @@ function dropTable(req, cb) {
         sql: sql
     }, 'dropTable: entered');
 
-    q = pg.query(sql);
+    q = pg.query(sql, req.req_id);
     q.once('error', cb);
     q.once('end', function () {
         log.debug({
@@ -153,7 +153,7 @@ function dropSequence(req, cb) {
         sql: sql
     }, 'dropSequence: entered');
 
-    q = pg.query(sql);
+    q = pg.query(sql, req.req_id);
 
     q.once('error', cb);
     q.once('end', function () {
@@ -178,7 +178,7 @@ function dropLockingSerial(req, cb) {
         sql: sql
     }, 'dropLockingSequence: entered');
 
-    q = pg.query(sql);
+    q = pg.query(sql, req.req_id);
 
     q.once('error', cb);
     q.once('end', function () {
diff --git a/lib/buckets/get.js b/lib/buckets/get.js
index ed6ac35..87dd93c 100644
--- a/lib/buckets/get.js
+++ b/lib/buckets/get.js
@@ -42,7 +42,7 @@ function loadBucket(req, cb) {
         bucket: req.bucket.name
     }, 'loadBucket: entered');
 
-    q = pg.query(sql);
+    q = pg.query(sql, req.req_id);
 
     q.once('error', function (err) {
         log.debug({
diff --git a/lib/buckets/list.js b/lib/buckets/list.js
index bde0500..b6d7f4d 100644
--- a/lib/buckets/list.js
+++ b/lib/buckets/list.js
@@ -35,7 +35,7 @@ function loadBuckets(req, cb) {
 
     log.debug('loadBuckets: entered');
 
-    q = pg.query(sql);
+    q = pg.query(sql, req.req_id);
 
     q.once('error', function (err) {
         log.debug(err, 'loadBuckets: failed');
diff --git a/lib/buckets/update.js b/lib/buckets/update.js
index ab297a2..c0f0dbb 100644
--- a/lib/buckets/update.js
+++ b/lib/buckets/update.js
@@ -86,7 +86,7 @@ function loadBucket(req, cb) {
         bucket: b.name
     }, 'loadBucket: entered');
 
-    q = pg.query(sql);
+    q = pg.query(sql, req.req_id);
     q.once('error', function (err) {
         log.debug({
             bucket: b.name,
@@ -141,7 +141,7 @@ function ensureReindexProperty(req, cb) {
 
         var sql = 'ALTER TABLE buckets_config ' +
             'ADD COLUMN reindex_active TEXT';
-        var q = req.pg.query(sql);
+        var q = req.pg.query(sql, req.req_id);
 
         q.once('error', function (err) {
             req.log.debug({
@@ -223,7 +223,7 @@ function ensureRowVer(req, cb) {
             function checkCol(arg, callback) {
                 sql = 'SELECT column_name FROM information_schema.columns ' +
                     'WHERE table_name = $1 AND column_name = $2';
-                q = pg.query(sql, [b.name, arg.colName]);
+                q = pg.query(sql, [b.name, arg.colName], req.req_id);
                 q.on('error', callback);
                 q.once('row', function () {
                     arg.colExists = true;
@@ -239,14 +239,14 @@ function ensureRowVer(req, cb) {
                 }
                 sql = util.format('ALTER TABLE %s ADD COLUMN ', b.name) +
                     arg.colName + ' INTEGER';
-                q = pg.query(sql);
+                q = pg.query(sql, req.req_id);
                 q.on('error', callback);
                 q.once('end', callback.bind(null, null));
             },
             function checkIdx(arg, callback) {
                 sql = 'SELECT indexname FROM pg_catalog.pg_indexes ' +
                     'WHERE tablename = $1 AND indexname = $2';
-                q = pg.query(sql, [b.name, arg.idxName]);
+                q = pg.query(sql, [b.name, arg.idxName], req.req_id);
                 q.on('error', callback);
                 q.once('row', function () {
                     arg.idxExists = true;
@@ -264,6 +264,7 @@ function ensureRowVer(req, cb) {
                     bucket: b.name,
                     log: log,
                     pg: pg,
+                    reqid: req.req_id,
                     indexes: [
                         {name: arg.colName, type: 'BTREE'}
                     ]
@@ -321,7 +322,7 @@ function updateConfig(req, cb) {
         bucket: bucket.name,
         values: values
     }, 'updateConfig: entered');
-    q = pg.query(sql, values);
+    q = pg.query(sql, values, req.req_id);
 
     q.once('error', function (err) {
         log.debug({
@@ -359,7 +360,7 @@ function dropColumns(req, cb) {
     vasync.forEachParallel({
         func: function _drop(c, _cb) {
             _cb = once(_cb);
-            var q = pg.query(sql + c);
+            var q = pg.query(sql + c, req.req_id);
             q.once('error', _cb);
             q.once('end', function () {
                 _cb();
@@ -401,7 +402,7 @@ function addColumns(req, cb) {
                 bucket: req.bucket.name,
                 sql: str
             }, 'addColumns: adding column');
-            var q = pg.query(str);
+            var q = pg.query(str, req.req_id);
             q.once('error', _cb);
             q.once('end', function () {
                 _cb();
@@ -439,6 +440,7 @@ function createIndexes(req, cb) {
         bucket: req.bucket.name,
         log: req.log,
         pg: req.pg,
+        reqid: req.req_id,
         indexes: add
     }, cb);
 }
@@ -465,6 +467,7 @@ function createUniqueIndexes(req, cb) {
         bucket: req.bucket.name,
         log: req.log,
         pg: req.pg,
+        reqid: req.req_id,
         unique: true,
         indexes: add
     }, cb);
diff --git a/lib/control.js b/lib/control.js
index f7b8b39..620d109 100644
--- a/lib/control.js
+++ b/lib/control.js
@@ -69,7 +69,7 @@ function getPGHandle(req, cb) {
 
 function getPGHandleAndTransaction(req, cb) {
     // run pg.begin before returning control
-    req.manatee.start(_getPGHandleAfter(req, cb));
+    req.manatee.start(req.req_id, _getPGHandleAfter(req, cb));
 }
 
 function handlerPipeline(options) {
@@ -107,7 +107,7 @@ function handlerPipeline(options) {
         if (err) {
             log.debug(err, '%s: failed', route);
             if (req.pg) {
-                req.pg.rollback();
+                req.pg.rollback(req.req_id);
                 req.pg = null;
             }
             rpc.fail(pgError(err));
@@ -115,7 +115,7 @@ function handlerPipeline(options) {
             return;
         }
 
-        req.pg.commit(function (err2) {
+        req.pg.commit(req.req_id, function (err2) {
             req.pg = null;
             if (err2) {
                 log.debug(err2, '%s: failed', route);
diff --git a/lib/manatee.js b/lib/manatee.js
index 451022a..5e5e00e 100644
--- a/lib/manatee.js
+++ b/lib/manatee.js
@@ -170,7 +170,8 @@ Manatee.prototype.pg = function pg(callback) {
 };
 
 
-Manatee.prototype.start = function start(cb) {
+Manatee.prototype.start = function start(reqid, cb) {
+    assert.string(reqid, 'reqid');
     assert.func(cb, 'cb');
 
     var log = this._log;
@@ -181,7 +182,7 @@ Manatee.prototype.start = function start(cb) {
             return;
         }
 
-        client.begin(function (err) {
+        client.begin(reqid, function (err) {
             if (err) {
                 log.debug({
                     pg: client,
diff --git a/lib/objects/common.js b/lib/objects/common.js
index 39c98f2..9bdc1f2 100644
--- a/lib/objects/common.js
+++ b/lib/objects/common.js
@@ -789,7 +789,7 @@ function loadBucket(req, cb) {
 
     cb = once(cb);
 
-    q = pg.query(sql, [b]);
+    q = pg.query(sql, [b], req.req_id);
 
     q.once('error', function (err) {
         log.debug({
@@ -995,7 +995,7 @@ function selectForUpdate(req, cb) {
         bucket: bucket,
         key: key
     }, 'selectForUpdate: entered');
-    q = pg.query(sql, [key]);
+    q = pg.query(sql, [key], req.req_id);
 
     q.once('error', function (err) {
         log.debug(err, 'selectForUpdate: failed');
diff --git a/lib/objects/del.js b/lib/objects/del.js
index 5a652d9..5dd031a 100644
--- a/lib/objects/del.js
+++ b/lib/objects/del.js
@@ -56,7 +56,7 @@ function drop(req, cb) {
         sql: sql
     }, 'drop: entered');
 
-    q = pg.query(sql, [req.key]);
+    q = pg.query(sql, [req.key], req.req_id);
 
     q.once('error', function (err) {
         log.debug(err, 'drop: failed');
diff --git a/lib/objects/del_many.js b/lib/objects/del_many.js
index 4eb789d..e4ee02f 100644
--- a/lib/objects/del_many.js
+++ b/lib/objects/del_many.js
@@ -57,7 +57,7 @@ function drop(req, cb) {
         sql: sql
     }, 'drop: entered');
 
-    q = pg.query(sql, req.where.args);
+    q = pg.query(sql, req.where.args, req.req_id);
 
     q.once('error', function (err) {
         log.debug(err, 'drop: failed');
diff --git a/lib/objects/find.js b/lib/objects/find.js
index 3eb6995..f4ee26d 100644
--- a/lib/objects/find.js
+++ b/lib/objects/find.js
@@ -139,7 +139,7 @@ function getCount(req, cb) {
         args: req.where.args
     }, 'getCount: entered');
 
-    var query = req.pg.query(sql, req.where.args);
+    var query = req.pg.query(sql, req.where.args, req.req_id);
     query.on('error', function (err) {
         query.removeAllListeners('end');
         query.removeAllListeners('row');
@@ -186,7 +186,7 @@ function getRecords(req, cb) {
         args: req.where.args
     }, 'getRecords: entered');
 
-    var query = req.pg.query(sql, req.where.args);
+    var query = req.pg.query(sql, req.where.args, req.req_id);
     var ignore = common.getReindexingFields(req.bucket);
 
     query.on('error', function (err) {
diff --git a/lib/objects/get.js b/lib/objects/get.js
index 0b50340..1df9039 100644
--- a/lib/objects/get.js
+++ b/lib/objects/get.js
@@ -110,7 +110,7 @@ function loadObject(req, cb) {
         key: req.key
     }, 'loadObject: entered');
 
-    q = req.pg.query(sql, [req.key]);
+    q = req.pg.query(sql, [req.key], req.req_id);
 
     q.once('error', function (err) {
         log.debug(err, 'loadObject: failed');
diff --git a/lib/objects/put.js b/lib/objects/put.js
index fd1e54e..49a486c 100644
--- a/lib/objects/put.js
+++ b/lib/objects/put.js
@@ -127,7 +127,7 @@ function getNextId(req, cb) {
         key: req.key
     }, 'getNextId: entered');
 
-    q = req.pg.query(sql);
+    q = req.pg.query(sql, req.req_id);
 
     q.once('error', function (err) {
         log.debug(err, 'getNextId: failed');
@@ -212,7 +212,7 @@ function insert(req, cb) {
                       req.bucket.name, keyStr, valStr,
                       req.req_id);
 
-    q = pg.query(sql, values);
+    q = pg.query(sql, values, req.req_id);
 
     q.once('error', function (err) {
         log.debug(err, 'insert: failed');
@@ -288,7 +288,7 @@ function update(req, cb) {
         sql: sql
     }, 'update: entered');
 
-    q = pg.query(sql, values);
+    q = pg.query(sql, values, req.req_id);
     q.once('error', function (err) {
         log.debug(err, 'update: failed');
         cb(err);
@@ -321,7 +321,7 @@ function updateSerial(req, cb) {
     sql = util.format(('UPDATE %s_locking_serial SET id=%d ' +
                        'RETURNING \'%s\' AS req_id'),
                        b, id, req.req_id);
-    q = req.pg.query(sql);
+    q = req.pg.query(sql, req.req_id);
 
     q.once('error', function (err) {
         log.debug(err, 'updateSerial: failed');
diff --git a/lib/objects/reindex.js b/lib/objects/reindex.js
index 33068db..7c67d9e 100644
--- a/lib/objects/reindex.js
+++ b/lib/objects/reindex.js
@@ -116,7 +116,7 @@ function processRows(req, cb) {
         });
 
 
-        var q = req.pg.query(updateSql, values);
+        var q = req.pg.query(updateSql, values, req.req_id);
         q.once('error', function (err) {
             log.trace(err, 'indexObject: failed');
             callback(err);
@@ -131,7 +131,7 @@ function processRows(req, cb) {
     // There is no backpressure on rows being returned from the SELECT
     // statement so heap consumption my be extreme if an unreasonable page size
     // is chosen.
-    var result = req.pg.query(sql);
+    var result = req.pg.query(sql, req.req_id);
     var queue = vasync.queue(indexObject, 1);
 
     var ignore = common.getReindexingFields(req.bucket);
@@ -171,7 +171,7 @@ function recordStatus(req, cb) {
         log.debug({
             bucket: req.bucket.name
         }, 'recordStatus: entered');
-        var q = pg.query(sql, [req.bucket.name]);
+        var q = pg.query(sql, [req.bucket.name], req.req_id);
         q.on('error', function (err) {
             log.debug('recordStatus: failed');
             cb(err);
@@ -207,7 +207,7 @@ function countRemaining(req, cb) {
         sql: sql
     }, 'countRemaining: entered');
 
-    var q = pg.query(sql);
+    var q = pg.query(sql, req.req_id);
 
     q.on('error', function (err) {
         q.removeAllListeners('end');
diff --git a/lib/objects/update.js b/lib/objects/update.js
index b8487a4..9318a2e 100644
--- a/lib/objects/update.js
+++ b/lib/objects/update.js
@@ -110,7 +110,7 @@ function updateRows(req, cb) {
         vals: vals
     }, 'updateRows: entered');
 
-    q = pg.query(sql, vals);
+    q = pg.query(sql, vals, req.req_id);
     q.once('error', function (err) {
         log.debug(err, 'updateRows: failed');
         cb(err);
diff --git a/lib/pg.js b/lib/pg.js
index 521bde9..82c5c1f 100644
--- a/lib/pg.js
+++ b/lib/pg.js
@@ -124,9 +124,14 @@ PGClient.prototype.release = function clientRelease() {
 };
 
 
-PGClient.prototype.query = function clientQuery(sql, args) {
+PGClient.prototype.query = function clientQuery(sql, args, reqid) {
+    if (typeof (args) === 'string') {
+        reqid = args;
+        args = undefined;
+    }
     assert.string(sql, 'sql');
     assert.optionalArray(args, 'args');
+    assert.optionalString(reqid, 'reqid');
 
     // Clean up whitespace so queries are normalized to DTrace
     sql = sql.replace(/(\r\n|\n|\r)/gm, '').replace(/\s+/, ' ');
@@ -136,9 +141,14 @@ PGClient.prototype.query = function clientQuery(sql, args) {
     var res = new EventEmitter();
     var self = this;
     var timer;
-    var reqid = libuuid.create();
     var aborted = false;
 
+    /*
+     * If this function is being called from the context of recordDeleteLog,
+     * then it will not have a reqid associated with it.
+     */
+    var req_id = (reqid) ? reqid : libuuid.create();
+
     function done(event, arg) {
         if (aborted) {
             return;
@@ -152,11 +162,11 @@ PGClient.prototype.query = function clientQuery(sql, args) {
 
     req.on('row', function onRow(row) {
         dtrace['query-row'].fire(function () {
-            return ([reqid, sql, row]);
+            return ([req_id, sql, row]);
         });
 
         log.debug({
-            req_id: reqid,
+            req_id: req_id,
             client: self,
             row: row
         }, 'query: row');
@@ -171,11 +181,11 @@ PGClient.prototype.query = function clientQuery(sql, args) {
 
     req.on('end', function onQueryEnd(arg) {
         dtrace['query-done'].fire(function () {
-            return ([reqid, sql, arg]);
+            return ([req_id, sql, arg]);
         });
 
         log.debug({
-            req_id: reqid,
+            req_id: req_id,
             client: self,
             res: arg
         }, 'query: done');
@@ -185,11 +195,11 @@ PGClient.prototype.query = function clientQuery(sql, args) {
 
     req.on('error', function onQueryError(err) {
         dtrace['query-error'].fire(function () {
-            return ([reqid, sql, err.toString()]);
+            return ([req_id, sql, err.toString()]);
         });
 
         log.debug({
-            req_id: reqid,
+            req_id: req_id,
             client: self,
             err: err
         }, 'query: failed');
@@ -209,7 +219,7 @@ PGClient.prototype.query = function clientQuery(sql, args) {
             self._moray_had_err = true;
 
             dtrace['query-timeout'].fire(function () {
-                return ([reqid, sql]);
+                return ([req_id, sql]);
             });
 
             /*
@@ -231,11 +241,11 @@ PGClient.prototype.query = function clientQuery(sql, args) {
     this.client.query(req);
 
     dtrace['query-start'].fire(function () {
-        return ([reqid, sql]);
+        return ([req_id, sql]);
     });
 
     log.debug({
-        req_id: reqid,
+        req_id: req_id,
         client: self,
         sql: sql,
         args: args
@@ -245,7 +255,8 @@ PGClient.prototype.query = function clientQuery(sql, args) {
 };
 
 
-PGClient.prototype.begin = function transactionBegin(level, cb) {
+PGClient.prototype.begin = function transactionBegin(reqid, level, cb) {
+    assert.string(reqid, 'reqid');
     var self = this;
 
     if (typeof (level) === 'function') {
@@ -254,7 +265,7 @@ PGClient.prototype.begin = function transactionBegin(level, cb) {
     }
     assert.func(cb, 'callback');
 
-    var q = self.query('BEGIN TRANSACTION ISOLATION LEVEL ' + level);
+    var q = self.query('BEGIN TRANSACTION ISOLATION LEVEL ' + level, reqid);
 
     q.once('error', function (err) {
         self._moray_had_err = true;
@@ -269,7 +280,8 @@ PGClient.prototype.begin = function transactionBegin(level, cb) {
 };
 
 
-PGClient.prototype.commit = function transactionCommit(cb) {
+PGClient.prototype.commit = function transactionCommit(reqid, cb) {
+    assert.string(reqid, 'reqid');
     assert.func(cb, 'callback');
 
     var self = this;
@@ -297,7 +309,7 @@ PGClient.prototype.commit = function transactionCommit(cb) {
      */
     self.setTimeout(0);
 
-    var q = self.query('COMMIT');
+    var q = self.query('COMMIT', reqid);
 
     q.once('error', function (err) {
         self._moray_had_err = true;
@@ -310,7 +322,8 @@ PGClient.prototype.commit = function transactionCommit(cb) {
 };
 
 
-PGClient.prototype.rollback = function transactionRollback(cb) {
+PGClient.prototype.rollback = function transactionRollback(reqid, cb) {
+    assert.string(reqid, 'reqid');
     assert.optionalFunc(cb, 'callback');
 
     var self = this;
@@ -344,7 +357,7 @@ PGClient.prototype.rollback = function transactionRollback(cb) {
         return;
     }
 
-    var q = self.query('ROLLBACK');
+    var q = self.query('ROLLBACK', reqid);
 
     q.once('error', function (err) {
         self._moray_had_err = true;
@@ -391,7 +404,7 @@ function pgAssert(_pg) {
 function pgCheck(options) {
     function _pgCheck(client, cb) {
         var ok = false;
-        var req = client.query('SELECT NOW() AS when');
+        var req = client.query('SELECT NOW() AS when', libuuid.create());
         req.once('error', cb);
         req.once('row', function (row) {
             ok = true;
diff --git a/lib/ping.js b/lib/ping.js
index 8407350..dbec34f 100644
--- a/lib/ping.js
+++ b/lib/ping.js
@@ -70,7 +70,7 @@ function ping(options) {
             }
 
             var req = pg.query('SELECT name FROM buckets_config ' +
-                               'LIMIT 1');
+                               'LIMIT 1', req_id);
 
             req.once('error', function (err) {
                 log.debug(err, 'postgres error');
diff --git a/lib/sql.js b/lib/sql.js
index ea7b77b..a96fa15 100644
--- a/lib/sql.js
+++ b/lib/sql.js
@@ -39,7 +39,7 @@ function execSql(req, cb) {
         stmt: req.stmt,
         values: req.values
     }, 'execSql: begin');
-    var q = pg.query(req.stmt, req.values);
+    var q = pg.query(req.stmt, req.values, req.req_id);
 
     q.on('row', function (r) {
         req.rpc.write(r);
-- 
2.21.0

