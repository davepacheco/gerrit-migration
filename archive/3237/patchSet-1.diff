From 2fb2b971164eec56cb916b47184babf10f536a86 Mon Sep 17 00:00:00 2001
From: Trent Mick <trentm@gmail.com>
Date: Thu, 18 Jan 2018 16:35:20 -0800
Subject: [PATCH] TRITON-51 make image creation non-incremental by default

---
 CHANGES.md                |  14 +++++
 lib/cloudapi2.js          |  27 +++++++--
 lib/common.js             |  34 ++++++++++-
 lib/config.js             |   3 +-
 lib/do_image/do_create.js |  50 +++++++++++------
 lib/errors.js             |   2 +-
 lib/tritonapi.js          | 115 +++++++++++++++++++++++++++++++++++---
 package.json              |   2 +-
 8 files changed, 213 insertions(+), 34 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index 03ec7dc..ce7a4c2 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -8,6 +8,20 @@ Known issues:
 
 (nothing yet)
 
+## 6.0.0
+
+- [TRITON-51] **BREAKING CHANGE for `triton image create` usage.**
+  By default `triton image create ...` will create a
+  *non*-incremental image. There is a `--incremental` option to get the old
+  behavior.
+
+  As of this version of node-triton, CloudAPI API version 9 is being used, if
+  available. If you use the newer node-triton v6 against a CloudAPI that
+  has not yet been upgraded to support version 9, then `triton image create`
+  without the `--incremental` option will error out. In other words,
+  node-triton v6 will ensure that `triton image create ...` *only* creates
+  an incremental image if the `--incremental` option is explicitly given.
+
 ## 5.6.0
 
 - [TRITON-30] Add UpdateNetworkIP to node-triton, e.g.
diff --git a/lib/cloudapi2.js b/lib/cloudapi2.js
index ba43791..7b61ce4 100644
--- a/lib/cloudapi2.js
+++ b/lib/cloudapi2.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017 Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  *
  * Client library for the SmartDataCenter Cloud API (cloudapi).
  * http://apidocs.joyent.com/cloudapi/
@@ -36,6 +36,7 @@
 
 var assert = require('assert-plus');
 var format = require('util').format;
+var jsprim = require('jsprim');
 var LOMStream = require('lomstream').LOMStream;
 var os = require('os');
 var querystring = require('querystring');
@@ -68,7 +69,7 @@ var OS_PLATFORM = os.platform();
  *      - Authentication options (see below)
  *      - {String} version (optional) Used for the accept-version header. This
  *        defaults to '*', meaning that over time you could experience breaking
- *        changes. Specifying a value is strongly recommended. E.g. '~7.1'.
+ *        changes. Specifying a value is strongly recommended. E.g. '~9||~8'.
  *      - {Bunyan Logger} log (optional)
  *      - ... and any other standard restify client options, e.g.:
  *          {String} userAgent
@@ -289,7 +290,7 @@ CloudApi.prototype._request = function _request(opts, cb) {
             return;
         }
         if (opts.headers) {
-            common.objMerge(headers, opts.headers);
+            common.objMergeLowerCase(headers, opts.headers);
         }
         var reqOpts = {
             path: opts.path,
@@ -702,12 +703,15 @@ CloudApi.prototype.deleteImage = function deleteImage(id, callback) {
     });
 };
 
+
 /**
  * <http://apidocs.joyent.com/cloudapi/#CreateImageFromMachine>
  *
  * @param {Object} opts
  *      - {UUID} machine  Required. The ID of the machine from which to create
  *        the image.
+ *      - {Boolean} incremental - Optional. Whether to create an incremental
+ *        or non-incremental image. Added in node-triton v6.
  *      - {String} name  Required. The image name.
  *      - {String} version  Required. The image version.
  *      - {String} description  Optional. A short description.
@@ -716,12 +720,15 @@ CloudApi.prototype.deleteImage = function deleteImage(id, callback) {
  *      - {Array} acl  Optional. An array of account UUIDs to which to give
  *        access. "Access Control List."
  *      - {Object} tags  Optional.
+ *
+ *      - {Object} headers - Optional. Extra headers for the CloudAPI request.
  * @param {Function} cb of the form `function (err, image, res)`
  */
 CloudApi.prototype.createImageFromMachine =
 function createImageFromMachine(opts, cb) {
     assert.object(opts, 'opts');
     assert.uuid(opts.machine, 'opts.machine');
+    assert.optionalBool(opts.incremental, 'opts.incremental');
     assert.string(opts.name, 'opts.name');
     assert.string(opts.version, 'opts.version');
     assert.optionalString(opts.description, 'opts.description');
@@ -729,12 +736,24 @@ function createImageFromMachine(opts, cb) {
     assert.optionalString(opts.eula, 'opts.eula');
     assert.optionalArrayOfUuid(opts.acl, 'opts.acl');
     assert.optionalObject(opts.tags, 'opts.tags');
+    assert.optionalObject(opts.headers, 'opts.headers');
     assert.func(cb, 'cb');
 
     this._request({
         method: 'POST',
         path: format('/%s/images', this.account),
-        data: opts
+        data: {
+            machine: opts.machine,
+            incremental: opts.incremental,
+            name: opts.name,
+            version: opts.version,
+            description: opts.description,
+            homepage: opts.homepage,
+            eula: opts.eula,
+            acl: opts.acl,
+            tags: opts.tags
+        },
+        headers: opts.headers
     }, function (err, req, res, body) {
         cb(err, body, res);
     });
diff --git a/lib/common.js b/lib/common.js
index 1dfb7b0..4bfb333 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -74,6 +74,34 @@ function objMerge(target) {
 }
 
 
+/*
+ * Merge given objects into the given `target` object, lower-casing all
+ * added keys. Last one wins. The `target` is modified in place.
+ *
+ *      > var foo = {bar: 32};
+ *      > objMergeLowerCase(foo, {Bar: 42}, {bling: 'blam'});
+ *      { bar: 42, bling: 'blam' }
+ *
+ * Adapted from tunnel-agent `mergeOptions`. The use case for lower-casing is
+ * to avoid duplicate HTTP headers when merging sets of headers.
+ */
+function objMergeLowerCase(target) {
+    for (var i = 1, len = arguments.length; i < len; ++i) {
+        var overrides = arguments[i];
+        if (typeof (overrides) === 'object') {
+            var keys = Object.keys(overrides);
+            for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
+                var k = keys[j];
+                if (overrides[k] !== undefined) {
+                    target[k.toLowerCase()] = overrides[k];
+                }
+            }
+        }
+    }
+    return target;
+}
+
+
 function zeroPad(n, width) {
     var s = String(n);
     assert.number(width, 'width');
@@ -865,8 +893,9 @@ function promptPassphraseUnlockKey(opts, cb) {
  * `tritonapi` instance, but a `tritonapi` can also be passed in
  * directly.
  *
- * @param opts.cli {Object}
- * @param opts.tritonapi {Object}
+ * @param {Object} opts
+ *      - @param {Object} opts.cli
+ *      - @param {Object} opts.tritonapi
  * @param cb {Function} `function (err)`
  */
 function cliSetupTritonApi(opts, cb) {
@@ -1418,6 +1447,7 @@ module.exports = {
     objCopy: objCopy,
     deepObjCopy: deepObjCopy,
     objMerge: objMerge,
+    objMergeLowerCase: objMergeLowerCase,
     zeroPad: zeroPad,
     boolFromString: boolFromString,
     jsonStream: jsonStream,
diff --git a/lib/config.js b/lib/config.js
index fe2fda0..5298e1e 100644
--- a/lib/config.js
+++ b/lib/config.js
@@ -63,7 +63,8 @@ var PROFILE_FIELDS = {
     insecure: true,
     user: true,
     roles: true,
-    actAsAccount: true
+    actAsAccount: true,
+    acceptVersion: true
 };
 
 
diff --git a/lib/do_image/do_create.js b/lib/do_image/do_create.js
index 30aca85..a0242b8 100644
--- a/lib/do_image/do_create.js
+++ b/lib/do_image/do_create.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2015 Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  *
  * `triton image create ...`
  */
@@ -37,8 +37,11 @@ function do_create(subcmd, opts, args, cb) {
 
     var log = this.top.log;
     var tritonapi = this.top.tritonapi;
+    var context = {
+        cli: this.top
+    };
 
-    vasync.pipeline({arg: {cli: this.top}, funcs: [
+    vasync.pipeline({arg: context, funcs: [
         common.cliSetupTritonApi,
         function loadTags(ctx, next) {
             mat.tagsFromCreateOpts(opts, log, function (err, tags) {
@@ -97,6 +100,9 @@ function do_create(subcmd, opts, args, cb) {
                 acl: ctx.acl,
                 tags: ctx.tags
             };
+            if (opts.incremental !== undefined) {
+                createOpts.incremental = opts.incremental;
+            }
 
             log.trace({dryRun: opts.dry_run, createOpts: createOpts},
                 'image create createOpts');
@@ -113,22 +119,21 @@ function do_create(subcmd, opts, args, cb) {
                 return;
             }
 
-            tritonapi.cloudapi.createImageFromMachine(
-                createOpts, function (err, img) {
-                    if (err) {
-                        next(new errors.TritonError(err,
-                                                    'error creating image'));
-                        return;
-                    }
-                    ctx.img = img;
-                    if (opts.json) {
-                        console.log(JSON.stringify(img));
-                    } else {
-                        console.log('Creating image %s@%s (%s)',
-                                    img.name, img.version, img.id);
-                    }
-                    next();
-                });
+            tritonapi.createImageFromMachine(createOpts, function (err, img) {
+                if (err) {
+                    next(new errors.TritonError(err,
+                                                'error creating image'));
+                    return;
+                }
+                ctx.img = img;
+                if (opts.json) {
+                    console.log(JSON.stringify(img));
+                } else {
+                    console.log('Creating image %s@%s (%s)',
+                                img.name, img.version, img.id);
+                }
+                next();
+            });
         },
         function maybeWait(ctx, next) {
             if (!opts.wait) {
@@ -234,6 +239,15 @@ do_create.options = [
     {
         group: 'Other options'
     },
+    {
+        names: ['incremental', 'i'],
+        type: 'bool',
+        help: 'Create an incremental image. As of version 6, the default ' +
+            'behavior is to create *non*-incremental images. Incremental ' +
+            'images only include the filesystem difference from its origin ' +
+            'image, but creates a dependency on that origin image. See the ' +
+            'change log for discussion.'
+    },
     {
         names: ['dry-run'],
         type: 'bool',
diff --git a/lib/errors.js b/lib/errors.js
index 59fe810..957bc4b 100644
--- a/lib/errors.js
+++ b/lib/errors.js
@@ -65,7 +65,7 @@ util.inherits(_TritonBaseVError, VError);
 /*
  * Base error class that doesn't include a 'cause' message in its message.
  * This is useful in cases where we are wrapping CloudAPI errors with
- * onces that should *replace* the CloudAPI error message.
+ * ones that should *replace* the CloudAPI error message.
  */
 function _TritonBaseWError(opts) {
     assert.object(opts, 'opts');
diff --git a/lib/tritonapi.js b/lib/tritonapi.js
index 28e7be9..151f341 100644
--- a/lib/tritonapi.js
+++ b/lib/tritonapi.js
@@ -123,7 +123,9 @@ var restifyBunyanSerializers =
     require('restify-clients/lib/helpers/bunyan').serializers;
 var tabula = require('tabula');
 var vasync = require('vasync');
-var VError = require('verror');
+var verror = require('verror'),
+    VError = verror.VError,
+    WError = verror.WError;
 var sshpk = require('sshpk');
 
 var cloudapi = require('./cloudapi2');
@@ -133,7 +135,7 @@ var errors = require('./errors');
 
 // ---- globals
 
-var CLOUDAPI_ACCEPT_VERSION = '~8||~7';
+var CLOUDAPI_ACCEPT_VERSION = '~9||~8||~7';
 
 
 
@@ -361,6 +363,9 @@ TritonApi.prototype.close = function close() {
 
 TritonApi.prototype.init = function init(cb) {
     var self = this;
+
+    assert.func(cb, 'cb');
+
     if (this.cacheDir) {
         fs.exists(this.cacheDir, function (exists) {
             if (!exists) {
@@ -384,6 +389,7 @@ TritonApi.prototype._setupProfile = function _setupProfile(cb) {
     var self = this;
     var profile = this.profile;
 
+    assert.func(cb, 'cb');
     assert.object(profile, 'profile');
     assert.string(profile.account, 'profile.account');
     assert.optionalString(profile.actAsAccount, 'profile.actAsAccount');
@@ -399,7 +405,7 @@ TritonApi.prototype._setupProfile = function _setupProfile(cb) {
         ? true : !profile.insecure);
     var acceptVersion = profile.acceptVersion || CLOUDAPI_ACCEPT_VERSION;
 
-    var opts = {
+    var cloudapiOpts = {
         url: profile.url,
         account: profile.actAsAccount || profile.account,
         principal: {
@@ -415,9 +421,9 @@ TritonApi.prototype._setupProfile = function _setupProfile(cb) {
     if (profile.privKey) {
         var key = sshpk.parsePrivateKey(profile.privKey);
         this.keyPair =
-            opts.principal.keyPair =
+            cloudapiOpts.principal.keyPair =
             auth.KeyPair.fromPrivateKey(key);
-        this.cloudapi = cloudapi.createClient(opts);
+        this.cloudapi = cloudapi.createClient(cloudapiOpts);
         cb(null);
     } else {
         var kr = new auth.KeyRing();
@@ -427,8 +433,8 @@ TritonApi.prototype._setupProfile = function _setupProfile(cb) {
                 cb(err);
                 return;
             }
-            self.keyPair = opts.principal.keyPair = kp;
-            self.cloudapi = cloudapi.createClient(opts);
+            self.keyPair = cloudapiOpts.principal.keyPair = kp;
+            self.cloudapi = cloudapi.createClient(cloudapiOpts);
             cb(null);
         });
     }
@@ -712,6 +718,101 @@ TritonApi.prototype.getImage = function getImage(opts, cb) {
     }
 };
 
+/**
+ * Create a image from the given customized machine.
+ *
+ * @param {Object} opts
+ *      - {UUID} machine - Required. The ID of the machine from which to create
+ *        the image.
+ *      - {Boolean} incremental - Optional. Whether to create an incremental
+ *        or non-incremental image. Added in v6. As well, the *default* changed
+ *        in v6 from incremental by default to non-incremental by default.
+ *      - {String} name - Required. The image name.
+ *      - {String} version - Required. The image version.
+ *      - {String} description - Optional. A short description.
+ *      - {String} homepage - Optional. Homepage URL.
+ *      - {String} eula - Optional. EULA URL.
+ *      - {Array} acl - Optional. An array of account UUIDs to which to give
+ *        access. "Access Control List."
+ *      - {Object} tags - Optional.
+ * @param {Function} cb of the form `function (err, image, res)`
+ */
+TritonApi.prototype.createImageFromMachine =
+function createImageFromMachine(opts, cb) {
+    var self = this;
+
+    assert.object(opts, 'opts');
+    assert.uuid(opts.machine, 'opts.machine');
+    assert.optionalBool(opts.incremental, 'opts.incremental');
+    assert.string(opts.name, 'opts.name');
+    assert.string(opts.version, 'opts.version');
+    assert.optionalString(opts.description, 'opts.description');
+    assert.optionalString(opts.homepage, 'opts.homepage');
+    assert.optionalString(opts.eula, 'opts.eula');
+    assert.optionalArrayOfUuid(opts.acl, 'opts.acl');
+    assert.optionalObject(opts.tags, 'opts.tags');
+    assert.func(cb, 'cb');
+
+    var headers = {};
+    var createOpts = {
+        machine: opts.machine,
+        name: opts.name,
+        version: opts.version
+    };
+
+    [
+        'description',
+        'homepage',
+        'eula',
+        'acl',
+        'tags'
+    ].forEach(function addCreateOpt(field) {
+        if (jsprim.hasKey(opts, field)) {
+            createOpts[field] = opts[field];
+        }
+    });
+
+    /*
+     * In CloudAPI v9 and node-triton v6 a breaking change was made to make
+     * *non*-incremental images by default. To ensure that, if incremental=false
+     * we need to ensure that we are using CloudAPI v9.
+     */
+    if (opts.incremental) {
+        createOpts.incremental = true;
+    } else {
+        createOpts.incremental = false;
+        headers = {
+            'accept-version': '~9'
+        };
+    }
+    if (Object.keys(headers).length > 0) {
+        createOpts.headers = headers;
+    }
+
+    self.cloudapi.createImageFromMachine(createOpts, function (err, img, res) {
+        var improvedErr = err;
+
+        /*
+         * The failure mode for someone moving from node-triton v5 to v6
+         * against a cloudapi v8 can be confusing. Here we try to improve the
+         * error message.
+         */
+        if (err && headers['accept-version'] &&
+            VError.hasCauseWithName(err, 'InvalidVersionError'))
+        {
+            improvedErr = new WError(err,
+                'Node-triton is attempting to ensure a *non*-incremental '
+                + 'image is created. However the TritonDC CloudAPI server '
+                + 'does not support API version 9 required for this. '
+                + 'You may use the "incremental" image creation option to '
+                + 'get the old behavior.');
+        }
+
+        cb(improvedErr, img, res);
+    });
+};
+
+
 /**
  * Export and image to Manta.
  *
diff --git a/package.json b/package.json
index 1096f50..07b4f8a 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "triton",
   "description": "Joyent Triton CLI and client (https://www.joyent.com/triton)",
-  "version": "5.6.0",
+  "version": "6.0.0",
   "author": "Joyent (joyent.com)",
   "homepage": "https://github.com/joyent/node-triton",
   "dependencies": {
-- 
2.21.0

