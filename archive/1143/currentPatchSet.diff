commit 63bde30181e921296f304f8191b25e36bcc91ed4 (refs/changes/43/1143/2)
Author: Todd Whiteman <todd.whiteman@joyent.com>
Date:   2016-12-19T14:08:56-08:00 (2 years, 10 months ago)
    
    DOCKER-987 Update docker build to allow container package selection from a label

diff --git a/lib/backends/sdc/build.js b/lib/backends/sdc/build.js
index 13949fa..9e4fe33 100644
--- a/lib/backends/sdc/build.js
+++ b/lib/backends/sdc/build.js
@@ -162,6 +162,14 @@ function buildImage(opts, callback) {
 
 
     function buildCreateContainer(_, cb) {
+        var labels;
+        try {
+            labels = JSON.parse(dockerOpts.labels || '{}');
+        } catch (ex) {
+            cb(new errors.DockerError(ex, 'Error parsing labels: '
+                + dockerOpts.labels));
+            return;
+        }
         var createOpts = {
             account: req.account,
             app: req.app,
@@ -174,7 +182,8 @@ function buildImage(opts, callback) {
                 HostConfig: {
                     Memory: dockerOpts.memory
                 },
-                Cmd: [ '# nop (build setup)' ]
+                Cmd: [ '# nop (build setup)' ],
+                Labels: labels
             },
             req_id: req_id
         };
diff --git a/test/integration/api-build.test.js b/test/integration/api-build.test.js
index 80b773b..5ccd8d3 100644
--- a/test/integration/api-build.test.js
+++ b/test/integration/api-build.test.js
@@ -33,6 +33,20 @@ var ALICE;
 var DOCKER_ALICE; // Regular JSON restify client.
 var DOCKER_ALICE_HTTP; // For sending non-JSON payload
 
+
+function createTarStream(fileAndContents) {
+    var pack = tar.pack();
+
+    Object.keys(fileAndContents).forEach(function (name) {
+        pack.entry({ name: name }, fileAndContents[name]);
+    });
+
+    pack.finalize();
+
+    return pack;
+}
+
+
 test('setup', function (tt) {
 
     tt.test('docker env', function (t) {
@@ -159,18 +173,6 @@ test('api: build', function (tt) {
 });
 
 
-function createTarStream(fileAndContents) {
-    var pack = tar.pack();
-
-    Object.keys(fileAndContents).forEach(function (name) {
-        pack.entry({ name: name }, fileAndContents[name]);
-    });
-
-    pack.finalize();
-
-    return pack;
-}
-
 /**
  * DOCKER-662: Ensure no conflicts with same images in different repositories.
  */
@@ -410,3 +412,121 @@ test('api: build across multiple registries', function (tt) {
     });
 
 });
+
+
+test('build with packagelabel', function (tt) {
+
+    var imageLabels = { 'fireworks': 'awesome' };
+
+    vasync.pipeline({ arg: {}, funcs: [
+
+        function getSmallestPackage(ctx, next) {
+            h.getSortedPackages(function (err, pkgs) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+                tt.ok(pkgs.length >= 1, 'Must be at least one pkg');
+                var smallestPkg = pkgs[0];
+                tt.ok(smallestPkg.name, 'smallestPkg.name');
+                ctx.allLabels = {
+                    'com.joyent.package': smallestPkg.name,
+                    'fireworks': 'awesome'
+                };
+                next();
+            });
+        },
+
+        function createTar(ctx, next) {
+            var fileAndContents = {
+                'Dockerfile': 'FROM busybox\n'
+                            + 'LABEL fireworks=awesome\n'
+                            + 'RUN true\n'
+            };
+            ctx.tarStream = createTarStream(fileAndContents);
+            next();
+        },
+
+        function buildWithPackageLabel(ctx, next) {
+            h.buildDockerContainer({
+                dockerClient: DOCKER_ALICE_HTTP,
+                params: {
+                    'labels': JSON.stringify(ctx.allLabels),
+                    'rm': 'false'  // Don't remove container after it's built.
+                },
+                test: tt,
+                tarball: ctx.tarStream
+            }, onbuild);
+
+            function onbuild(err, result) {
+                tt.ifError(err, 'build finished');
+                ctx.result = result;
+                next(err, result);
+            }
+        },
+
+        function checkResults(ctx, next) {
+            if (!ctx.result || !ctx.result.body) {
+                next(new Error('build generated no output!?'));
+                return;
+            }
+
+            var reg;
+            var output = ctx.result.body;
+            var hasLabel = output.indexOf('LABEL fireworks=awesome') >= 0;
+            tt.ok(hasLabel, format(
+                'output contains "LABEL fireworks=awesome": output=%j',
+                output));
+
+            var hasRunningIn = output.indexOf('Running in ') >= 0;
+            tt.ok(hasRunningIn, 'output contains "Running in"');
+            if (hasRunningIn) {
+                reg = new RegExp('Running in (\\w+)');
+                ctx.containerId = output.match(reg)[1];
+                tt.ok(ctx.containerId, 'Found containerId');
+            }
+
+            var hasSuccess = output.indexOf('Successfully built') >= 0;
+            tt.ok(hasSuccess, 'output contains Successfully built');
+            if (hasSuccess) {
+                reg = new RegExp('Successfully built (\\w+)');
+                ctx.dockerImageId = output.match(reg)[1];
+                tt.ok(ctx.dockerImageId, 'Found dockerImageId');
+            }
+
+            next();
+        },
+
+        function inspectBuildContainer(ctx, next) {
+            DOCKER_ALICE.get('/containers/' + ctx.containerId + '/json',
+                    function (err, req, res, container) {
+                tt.ok(container, 'inspect container');
+                tt.deepEqual(container.Config.Labels, ctx.allLabels);
+                next();
+            });
+        },
+
+        // Make sure that the image does not include 'com.joyent.package' label.
+        function inspectBuiltImage(ctx, next) {
+            DOCKER_ALICE.get('/images/' + ctx.dockerImageId + '/json',
+                    function (err, req, res, img) {
+                tt.ok(img, 'inspect image');
+                tt.deepEqual(img.Config.Labels, imageLabels);
+                next();
+            });
+        },
+
+        function removeBuiltImage(ctx, next) {
+            tt.ok(ctx.dockerImageId, 'Got the docker image id');
+            DOCKER_ALICE.del('/images/' + ctx.dockerImageId, next);
+        },
+
+        function removeBuildContainer(ctx, next) {
+            DOCKER_ALICE.del('/containers/' + ctx.containerId, next);
+        }
+
+    ]}, function _inspectedContainers(err) {
+        tt.ifError(err, 'build with packagelabel');
+        tt.end();
+    });
+});
diff --git a/test/integration/cli-packagelabels.test.js b/test/integration/cli-packagelabels.test.js
index 93d24e0..a47c5d2 100644
--- a/test/integration/cli-packagelabels.test.js
+++ b/test/integration/cli-packagelabels.test.js
@@ -55,61 +55,25 @@ if (cliVersion) {
 
 
 test('setup docker environment/cli', opts, function (tt) {
-    tt.test('DockerEnv: alice init', cli.init);
+    h.createPapiClient(function (err, _papi) {
+        tt.ifErr(err, 'create PAPI client');
+        papi = _papi;
+        tt.test('DockerEnv: alice init', cli.init);
+        tt.end();
+    });
 });
 
-/*
- * Because of the disaster we have with cpu_cap and no-cpu_cap packages, we
- * can't just create our own packages and expect anything to work. So we'll pull
- * out the packagePrefix then pick the smallest 2 packages that match that for
- * use when testing here.
- */
 test('find packages for test', opts, function (tt) {
-    var configFile = __dirname + '/../../etc/config.json';
-    var packagePrefix;
-
-    packagePrefix = JSON.parse(fs.readFileSync(configFile)).packagePrefix;
-
-    tt.ok(packagePrefix, 'found packagePrefix: ' + packagePrefix);
-
-    vasync.pipeline({funcs: [
-        function _createPapiClient(_, cb) {
-            h.createPapiClient(function (err, _papi) {
-                tt.ifErr(err, 'create PAPI client');
-                papi = _papi;
-                cb(err);
-            });
-        }, function _getPackages(_, cb) {
-            papi.list('name=' + packagePrefix + '*', {}, function (err, pkgs) {
-                var cleanedPkgs;
-
-                tt.ifError(err, 'list packages');
+    h.getSortedPackages(function (err, pkgs) {
+        tt.ifErr(err, 'getSortedPackages');
+        tt.ok(pkgs.length >= 2, 'need at least 2 packages, got ' + pkgs.length);
 
-                if (err) {
-                    cb(err);
-                    return;
-                }
-
-                cleanedPkgs = pkgs.filter(function _filterPkgs(pkg) {
-                    return (Boolean(pkg.active));
-                }).sort(function _cmpPkgMemory(a, b) {
-                    return (a.max_physical_memory - b.max_physical_memory);
-                });
+        packageA = pkgs[1]; // 2nd smallest
+        packageB = pkgs[0]; // smallest
 
-                tt.ok(cleanedPkgs.length >= 2, 'need at least 2 packages, have '
-                    + cleanedPkgs.length);
+        tt.ok(packageA.name, 'packageA: ' + packageA.name);
+        tt.ok(packageB.name, 'packageB: ' + packageB.name);
 
-                packageA = cleanedPkgs[1]; // 2nd smallest
-                packageB = cleanedPkgs[0]; // smallest
-
-                tt.ok(packageA.name, 'packageA: ' + packageA.name);
-                tt.ok(packageB.name, 'packageB: ' + packageB.name);
-
-                cb();
-            });
-        }
-    ]}, function _afterPkgPipeline(err) {
-        tt.ifError(err, 'found packages');
         tt.end();
     });
 });
diff --git a/test/integration/helpers.js b/test/integration/helpers.js
index 7ae0392..5405801 100644
--- a/test/integration/helpers.js
+++ b/test/integration/helpers.js
@@ -1819,6 +1819,51 @@ function getOrCreateFabricNetwork(client, userUuid, vlan_id, params, callback) {
     );
 }
 
+/*
+ * Return the array of active packages in sorted (smallest to largest) order.
+ *
+ * Because of the disaster we have with cpu_cap and no-cpu_cap packages, we
+ * can't just create our own packages and expect anything to work. So we'll pull
+ * out the packagePrefix to filter the correct packages for docker.
+ */
+function getSortedPackages(callback) {
+    var configFile = __dirname + '/../../etc/config.json';
+    var packagePrefix = JSON.parse(fs.readFileSync(configFile)).packagePrefix;
+    var packages;
+    var papi;
+
+    assert.string(packagePrefix, 'configFile packagePrefix');
+
+    vasync.pipeline({funcs: [
+        function _createPapiClient(_, cb) {
+            createPapiClient(function (err, _papi) {
+                papi = _papi;
+                cb(err);
+            });
+        }, function _getPackages(_, cb) {
+            papi.list('name=' + packagePrefix + '*', {}, function (err, pkgs) {
+                if (err) {
+                    cb(err);
+                    return;
+                }
+
+                assert.arrayOfObject(pkgs, 'pkgs');
+
+                packages = pkgs.filter(function _filterPkgs(pkg) {
+                    return (Boolean(pkg.active));
+                }).sort(function _cmpPkgMemory(a, b) {
+                    return (a.max_physical_memory - b.max_physical_memory);
+                });
+
+                cb();
+            });
+        }
+    ]}, function _afterPkgPipeline(err) {
+        callback(err, packages);
+    });
+}
+
+
 // --- exports
 
 module.exports = {
@@ -1836,6 +1881,7 @@ module.exports = {
     buildDockerContainer: buildDockerContainer,
     getOrCreateFabricVLAN: getOrCreateFabricVLAN,
     getOrCreateFabricNetwork: getOrCreateFabricNetwork,
+    getSortedPackages: getSortedPackages,
 
     getDockerEnv: getDockerEnv,
 
