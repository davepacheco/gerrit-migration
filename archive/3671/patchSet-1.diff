From a54d23307a25bd369e83e76b157b126ad6bc388c Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Wed, 14 Mar 2018 16:21:01 -0700
Subject: [PATCH] OS-6786 An end to the great interrupt drought

---
 usr/src/uts/common/io/ixgbe/ixgbe_main.c | 27 +++++++++++++++---------
 usr/src/uts/common/sys/ddi_intr_impl.h   |  7 +++---
 usr/src/uts/i86pc/io/apix/apix_irm.c     | 18 ++++++++++++++--
 3 files changed, 37 insertions(+), 15 deletions(-)

diff --git a/usr/src/uts/common/io/ixgbe/ixgbe_main.c b/usr/src/uts/common/io/ixgbe/ixgbe_main.c
index c44a5de359..eddea8d08d 100644
--- a/usr/src/uts/common/io/ixgbe/ixgbe_main.c
+++ b/usr/src/uts/common/io/ixgbe/ixgbe_main.c
@@ -5075,14 +5075,7 @@ ixgbe_alloc_intr_handles(ixgbe_t *ixgbe, int intr_type)
 		break;
 
 	case DDI_INTR_TYPE_MSIX:
-		/*
-		 * Best number of vectors for the adapter is
-		 * (# rx rings + # tx rings), however we will
-		 * limit the request number.
-		 */
-		request = min(16, ixgbe->num_rx_rings + ixgbe->num_tx_rings);
-		if (request > ixgbe->capab->max_ring_vect)
-			request = ixgbe->capab->max_ring_vect;
+		/* Set the request # after we get the max supported count. */
 		minimum = 1;
 		IXGBE_DEBUGLOG_0(ixgbe, "interrupt type: MSI-X");
 		break;
@@ -5093,8 +5086,6 @@ ixgbe_alloc_intr_handles(ixgbe_t *ixgbe, int intr_type)
 		    intr_type);
 		return (IXGBE_FAILURE);
 	}
-	IXGBE_DEBUGLOG_2(ixgbe, "interrupt handles requested: %d  minimum: %d",
-	    request, minimum);
 
 	/*
 	 * Get number of supported interrupts
@@ -5108,6 +5099,19 @@ ixgbe_alloc_intr_handles(ixgbe_t *ixgbe, int intr_type)
 	}
 	IXGBE_DEBUGLOG_1(ixgbe, "interrupts supported: %d", count);
 
+	if (intr_type == DDI_INTR_TYPE_MSIX) {
+		/*
+		 * Best number of vectors for the adapter is (# rx rings +
+		 * # tx rings), however we have to obey limits from get_nintrs
+		 * and the max_ring_vect in ixgbe->capab.
+		 */
+		request = ixgbe->num_rx_rings + ixgbe->num_tx_rings;
+		if (request > count)
+			request = count;
+		if (request > ixgbe->capab->max_ring_vect)
+			request = ixgbe->capab->max_ring_vect;
+	}
+
 	actual = 0;
 	ixgbe->intr_cnt = 0;
 	ixgbe->intr_cnt_max = 0;
@@ -5119,6 +5123,9 @@ ixgbe_alloc_intr_handles(ixgbe_t *ixgbe, int intr_type)
 	ixgbe->intr_size = request * sizeof (ddi_intr_handle_t);
 	ixgbe->htable = kmem_alloc(ixgbe->intr_size, KM_SLEEP);
 
+	IXGBE_DEBUGLOG_2(ixgbe, "interrupt handles requested: %d  minimum: %d",
+	    request, minimum);
+
 	rc = ddi_intr_alloc(devinfo, ixgbe->htable, intr_type, 0,
 	    request, &actual, DDI_INTR_ALLOC_NORMAL);
 	if (rc != DDI_SUCCESS) {
diff --git a/usr/src/uts/common/sys/ddi_intr_impl.h b/usr/src/uts/common/sys/ddi_intr_impl.h
index cb5617dc8f..c26095aaed 100644
--- a/usr/src/uts/common/sys/ddi_intr_impl.h
+++ b/usr/src/uts/common/sys/ddi_intr_impl.h
@@ -146,11 +146,12 @@ typedef struct ddi_intr_handle_impl {
 /* Maximum number of MSI resources to allocate */
 #define	DDI_MAX_MSI_ALLOC	2
 
-/* Default number of MSI-X resources to allocate */
-#define	DDI_DEFAULT_MSIX_ALLOC	2
+/* Default limit on number of MSI-X resources to allocate (non-"apix") */
+#define	DDI_DEFAULT_MSIX_ALLOC	4
 
 #define	DDI_MSIX_ALLOC_DIVIDER	32
-#define	DDI_MIN_MSIX_ALLOC	8
+/* Used by "apix" instead of DDI_DEFAULT_MSIX_ALLOC */
+#define	DDI_MIN_MSIX_ALLOC	16
 #define	DDI_MAX_MSIX_ALLOC	2048
 
 struct av_softinfo;
diff --git a/usr/src/uts/i86pc/io/apix/apix_irm.c b/usr/src/uts/i86pc/io/apix/apix_irm.c
index fb7295c420..ec0a0ee82e 100644
--- a/usr/src/uts/i86pc/io/apix/apix_irm.c
+++ b/usr/src/uts/i86pc/io/apix/apix_irm.c
@@ -217,15 +217,29 @@ apix_irm_init(void)
 
 		/*
 		 * Set default alloc limit for non-IRM drivers
-		 * to DDI_MIN_MSIX_ALLOC (currently defined as 8).
+		 * to DDI_MIN_MSIX_ALLOC (currently defined as 16).
 		 *
 		 * NOTE: This is done here so that the limit of 8 vectors
 		 * is applicable only with APIX module. For the old pcplusmp
-		 * implementation, the current default of 2 (i.e
+		 * implementation, the current default of 4 (i.e
 		 * DDI_DEFAULT_MSIX_ALLOC) is retained.
 		 */
 		if (ddi_msix_alloc_limit < DDI_MIN_MSIX_ALLOC)
 			ddi_msix_alloc_limit = DDI_MIN_MSIX_ALLOC;
+
+		/*
+		 * If we're on a machine with lots of CPUs, it should be
+		 * safe to give drivers a few more interrupts if they are
+		 * asking for them.
+		 *
+		 * This is basically equivalent to the old effective limit of
+		 * 2 vectors per device globally, since with apix they're
+		 * associated with each CPU individually (so you would have to
+		 * allocate 2*NCPUS to have the same impact on available
+		 * vector count).
+		 */
+		if (ddi_msix_alloc_limit < 2 * cpus_used)
+			ddi_msix_alloc_limit = 2 * cpus_used;
 	} else {
 		APIX_IRM_DEBUG((CE_NOTE,
 		    "apix_irm_init: ndi_irm_create() failed"));
-- 
2.21.0

