From 760857dbf5d30f5734b4ac21e097628824bb6569 Mon Sep 17 00:00:00 2001
From: Jan Wyszynski <jan.wyszynski@joyent.com>
Date: Fri, 15 Jun 2018 19:08:09 +0000
Subject: [PATCH] MANTA-3768 add SAPI property to disable/enable snaplinks per
 account

---
 etc/config.coal.json           |  1 +
 lib/common.js                  | 45 ++++++++++++++++++++++++++++++++++
 lib/errors.js                  | 11 +++++++++
 lib/link.js                    | 24 +++++++++++++++++-
 main.js                        | 15 +++++++++++-
 sapi_manifests/muskie/template |  5 ++++
 tools/jsl.node.conf            |  1 +
 7 files changed, 100 insertions(+), 2 deletions(-)

diff --git a/etc/config.coal.json b/etc/config.coal.json
index 9b075c4..dff7e7d 100644
--- a/etc/config.coal.json
+++ b/etc/config.coal.json
@@ -27,6 +27,7 @@
         "maxTranslationCacheSize": 1000,
         "maxTranslationCacheAgeMs": 300
     },
+    "accountsSnaplinksDisabled": [],
     "moray": {
         "morayOptions": {
             "srvDomain": "electric-moray.coal.joyent.us",
diff --git a/lib/common.js b/lib/common.js
index 36a1645..733004c 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -324,6 +324,42 @@ function ensureEntryExists(req, res, next) {
 }
 
 
+/*
+ * This function is used to abstract away the logic involved in checking
+ * that a particular account uuid has snaplinks enabled. Today, it is
+ * called in the `ensureSnaplinksEnabled` method defined in this module
+ * and in the putlinkHandler chain to verify that the source object (the
+ * object being linked to) is not owned by an account for which snaplinks
+ * are enabled.
+ */
+function checkAccountSnaplinksEnabled(req, uuid, next) {
+    for (var i = 0; i < req.accountsSnaplinksDisabled.length; i++) {
+        var account = req.accountsSnaplinksDisabled[i];
+        assert.string(account.uuid, 'account.uuid');
+        assert.string(req.caller.account.uuid, 'req.caller.account.uuid');
+
+        if (account.uuid === uuid) {
+            next(false);
+            return;
+        }
+    }
+    next(true);
+}
+
+
+function ensureSnaplinksEnabled(req, res, next) {
+    checkAccountSnaplinksEnabled(req, req.caller.account.uuid,
+        function (enabled) {
+        if (!enabled) {
+            next(new SnaplinksDisabledError('snaplinks have been disabled ' +
+                'for this account'));
+            return;
+        }
+    });
+    next();
+}
+
+
 function ensureNotDirectory(req, res, next) {
     if (!req.metadata) {
         next(new DirectoryOperationError(req));
@@ -894,6 +930,10 @@ module.exports = {
         return (ensureEntryExists);
     },
 
+    ensureSnaplinksEnabledHandler: function () {
+        return (ensureSnaplinksEnabled);
+    },
+
     ensureNotDirectoryHandler: function () {
         return (ensureNotDirectory);
     },
@@ -910,6 +950,8 @@ module.exports = {
         return (getMetadata);
     },
 
+    checkAccountSnaplinksEnabled: checkAccountSnaplinksEnabled,
+
     setupHandler: function (options, clients) {
         assert.object(options, 'options');
         assert.object(options.jobCache, 'options.jobCache');
@@ -928,6 +970,8 @@ module.exports = {
         assert.object(options.multipartUpload, 'options.multipartUpload');
         assert.number(options.multipartUpload.prefixDirLen,
             'options.multipartUpload.prefixDirLen');
+        assert.arrayOfObject(options.accountsSnaplinksDisabled,
+            'options.accountsSnaplinksDisabled');
 
         function setup(req, res, next) {
             req.config = options;
@@ -961,6 +1005,7 @@ module.exports = {
                     1024 * 1024,
                 mpuPrefixDirLen: options.multipartUpload.prefixDirLen
             };
+            req.accountsSnaplinksDisabled = options.accountsSnaplinksDisabled;
 
             var _opts = {
                 account: req.owner.account,
diff --git a/lib/errors.js b/lib/errors.js
index a542cda..f963f60 100644
--- a/lib/errors.js
+++ b/lib/errors.js
@@ -589,6 +589,17 @@ function ServiceUnavailableError(req, cause) {
 util.inherits(ServiceUnavailableError, MuskieError);
 
 
+function SnaplinksDisabledError(msg) {
+    assert.string(msg, 'msg');
+    MuskieError.call(this, {
+        restCode: 'SnaplinksDisabledError',
+        statusCode: 403,
+        message: msg
+    });
+}
+util.inherits(SnaplinksDisabledError, MuskieError);
+
+
 function SSLRequiredError() {
     MuskieError.call(this, {
         restCode: 'SecureTransportRequired',
diff --git a/lib/link.js b/lib/link.js
index 9c3315d..537577c 100644
--- a/lib/link.js
+++ b/lib/link.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var url = require('url');
@@ -124,6 +124,26 @@ function resolveOwner(req, res, next) {
 }
 
 
+function ensureSourceOwnerSnaplinksEnabled(req, res, next) {
+    var log = req.log;
+    var uuid = req.link.owner.account.uuid;
+
+    common.checkAccountSnaplinksEnabled(req, uuid, function (enabled) {
+        if (!enabled) {
+            log.debug({
+                link: req.link,
+                owner: req.link.owner
+            }, 'link.ensureSourceOwnerSnaplinksEnabled: source owner ' +
+                'has snaplinks disabled');
+            next(new SnaplinksDisabledError('owner of source object has ' +
+                'snaplinks disabled'));
+            return;
+        }
+        next();
+    });
+}
+
+
 function resolveSource(req, res, next) {
     var log = req.log;
     var opts = {
@@ -221,11 +241,13 @@ module.exports = {
 
     putLinkHandler: function () {
         var chain = [
+            common.ensureSnaplinksEnabledHandler(),
             common.ensureNotRootHandler(),
             common.ensureNotDirectoryHandler(),
             common.ensureParentHandler(),
             parseLocation,
             resolveOwner,
+            ensureSourceOwnerSnaplinksEnabled,
             resolveSource,
             checkAccess,
             restify.conditionalRequest(),
diff --git a/main.js b/main.js
index 4677e36..2172b3f 100644
--- a/main.js
+++ b/main.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var fs = require('fs');
@@ -191,6 +191,19 @@ function configure(appName, opts, dtProbes) {
         DEF_MAX_STREAMING_SIZE_MB, cfg.storage, cfg.log,
         function (x) { return (x >= 1); });
 
+    if (!cfg.hasOwnProperty('accountsSnaplinksDisabled')) {
+        cfg.accountsSnaplinksDisabled = [];
+    } else {
+        assert.arrayOfObject(cfg.accountsSnaplinksDisabled,
+            'cfg.accountsSnaplinksDisabled');
+        for (var i = 0; i < cfg.accountsSnaplinksDisabled.length; i++) {
+            var uuid = cfg.accountsSnaplinksDisabled[i].uuid;
+
+            assert.uuid(uuid, 'cfg.accountsSnaplinksDisabled[i].uuid');
+            cfg.log.info('snaplinks disabled for uuid ' + uuid);
+        }
+    }
+
     if (!cfg.hasOwnProperty('multipartUpload')) {
         cfg.multipartUpload = {};
     }
diff --git a/sapi_manifests/muskie/template b/sapi_manifests/muskie/template
index 43083bb..1d5827f 100644
--- a/sapi_manifests/muskie/template
+++ b/sapi_manifests/muskie/template
@@ -38,6 +38,11 @@
     "maxTranslationCacheSize": 1000,
     "maxTranslationCacheAgeMs": 300000
   },
+  "accountsSnaplinksDisabled": [ {{#ACCOUNTS_SNAPLINKS_DISABLED}}
+    {
+      "uuid": "{{uuid}}"
+    }{{^last}},{{/last}}{{/ACCOUNTS_SNAPLINKS_DISABLED}}
+  ],
   "moray": {
     "morayOptions": {
         "srvDomain": "{{ELECTRIC_MORAY}}",
diff --git a/tools/jsl.node.conf b/tools/jsl.node.conf
index 293bc4c..eac7168 100644
--- a/tools/jsl.node.conf
+++ b/tools/jsl.node.conf
@@ -184,6 +184,7 @@
 +define RootDirectoryError
 +define ServiceUnavailableError
 +define SharksExhaustedError
++define SnaplinksDisabledError
 +define SSLRequiredError
 +define ThrottledError
 +define UploadAbandonedError
-- 
2.21.0

