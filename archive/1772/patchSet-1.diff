From dcba702ef8e7ffdb3ff2d981ec10268659437e31 Mon Sep 17 00:00:00 2001
From: Dillon Amburgey <dillona@dillona.com>
Date: Sat, 8 Apr 2017 19:35:35 +0000
Subject: [PATCH] OS-XXXX tgkill incorrectly handles init threads

---
 usr/src/uts/common/brand/lx/syscall/lx_kill.c | 15 ++++++++++-----
 1 file changed, 10 insertions(+), 5 deletions(-)

diff --git a/usr/src/uts/common/brand/lx/syscall/lx_kill.c b/usr/src/uts/common/brand/lx/syscall/lx_kill.c
index 6fefbde705..fa2e378f68 100644
--- a/usr/src/uts/common/brand/lx/syscall/lx_kill.c
+++ b/usr/src/uts/common/brand/lx/syscall/lx_kill.c
@@ -77,6 +77,7 @@ lx_thrkill(pid_t tgid, pid_t pid, int lx_sig, boolean_t tgkill)
 	proc_t *pp, *cp = curproc;
 	sigqueue_t *sqp;
 	int sig, rv;
+	pid_t initpid = cp->p_zone->zone_proc_initpid;
 
 	/*
 	 * Unlike kill(2), Linux tkill(2) doesn't allow signals to
@@ -94,10 +95,7 @@ lx_thrkill(pid_t tgid, pid_t pid, int lx_sig, boolean_t tgkill)
 	 *
 	 * Otherwise, extract the tid and real pid from the Linux pid.
 	 */
-	if (pid == 1) {
-		pid_t initpid;
-
-		initpid = cp->p_zone->zone_proc_initpid;
+	if ((pid == 1) || (tgkill && tgid == 1)) {
 		if ((rv = lx_init_sig_check(sig, initpid)) != 0) {
 			return (set_errno(rv));
 		}
@@ -115,8 +113,15 @@ lx_thrkill(pid_t tgid, pid_t pid, int lx_sig, boolean_t tgkill)
 	 * Make sure the thread group matches the thread.
 	 */
 	if (tgkill) {
+		pid_t targetpid;
+		if (tgid == 1) {
+			targetpid = initpid;
+		} else {
+			targetpid = tgid;
+		}
+
 		if ((pid == 1 && tgid != 1) ||
-		    (pid != 1 && tgid != pp->p_pid)) {
+		    (pid != 1 && pp->p_pid != targetpid)) {
 			mutex_exit(&pp->p_lock);
 			rv = set_errno(ESRCH);
 			goto free_and_exit;
-- 
2.21.0

