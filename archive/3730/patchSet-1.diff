commit ad7d70301d9594ae9f418e0d668d85743e364868 (refs/changes/30/3730/1)
Author: Dave Eddy <dave@daveeddy.com>
Date:   2018-03-27T16:56:00-04:00 (1 year, 6 months ago)
    
    TRITON-281 vmapi vms.full.test fabric tests should be more robust and debuggable

diff --git a/test/vms.full.test.js b/test/vms.full.test.js
index 04fcf87..fe62875 100644
--- a/test/vms.full.test.js
+++ b/test/vms.full.test.js
@@ -2710,6 +2710,15 @@ exports.find_fabric_network = function (t) {
     });
 
     t.ok(fabricNetwork, 'found a fabric network');
+
+    if (fabricNetwork) {
+        assert.object(fabricNetwork, 'fabricNetwork');
+        assert.string(fabricNetwork.name, 'fabricNetwork.name');
+        assert.uuid(fabricNetwork.uuid, 'fabricNetwork.uuid');
+        t.ok(true, util.format('using fabric network "%s": %s',
+            fabricNetwork.name, fabricNetwork.uuid));
+    }
+
     t.done();
 };
 
@@ -2811,20 +2820,35 @@ exports.ensure_fabric_nat_provisioned = function (t) {
     };
 
     client.get(opts, function (err, req, res, vms) {
+        var vm;
+
         /**
          * We expect to get back an array containing one running vm.
          */
         common.ifError(t, err);
         t.equal(res.statusCode, 200, 'expected a 200 status');
-        t.ok(Array.isArray(vms), 'should get vms array object');
 
-        if (Array.isArray(vms)) {
-            t.equal(vms.length, 1, 'should have found one NAT vm');
-            t.equal(vms[0].state, 'running', 'should have found one NAT vm');
+        t.ok(Array.isArray(vms), 'should get vms array object');
+        if (!Array.isArray(vms)) {
+            t.done();
+            return;
+        }
 
-            natZoneUuid = vms[0].uuid;
+        t.equal(vms.length, 1, 'should have found one NAT vm');
+        if (vms.length !== 1) {
+            t.done();
+            return;
         }
 
+        vm = vms[0];
+        assert.object(vm, 'vm');
+        assert.uuid(vm.uuid, 'vm.uuid');
+
+        t.equal(vm.state, 'running', 'NAT vm should be running');
+        natZoneUuid = vm.uuid;
+
+        t.ok(true, 'NAT vm uuid: ' + natZoneUuid);
+
         t.done();
     });
 };
@@ -2873,6 +2897,12 @@ exports.ensure_fabric_nat_destroyed = function (t) {
         return;
     }
 
+    if (!natZoneUuid) {
+        t.fail('NAT zone not created');
+        t.done();
+        return;
+    }
+
     var opts = createOpts('/vms/' + natZoneUuid);
 
     client.get(opts, function (err, req, res, vm) {
