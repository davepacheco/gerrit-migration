From 7bcc2780aa07a573fce0a0cf8ef77d1e213304e0 Mon Sep 17 00:00:00 2001
From: Kody A Kantor <kody.kantor@gmail.com>
Date: Mon, 29 Jan 2018 20:47:09 +0000
Subject: [PATCH] #12 histograms can't observe values less than one

---
 CHANGES.md         |  3 +++
 README.md          | 10 ++++-----
 lib/histogram.js   | 36 ++++++++++++++++++++---------
 package.json       |  2 +-
 test/basic.test.js | 56 +++++++++++++++++++++++++---------------------
 5 files changed, 66 insertions(+), 41 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index b115030..48d9fba 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -3,6 +3,9 @@
 ## Not yet released
 None
 
+## 1.2.1
+* #12 histograms can't observe values less than one
+
 ## 1.2.0
 * #9 Create an accessor function for collector values
 
diff --git a/README.md b/README.md
index daf0c3b..0ca283b 100644
--- a/README.md
+++ b/README.md
@@ -20,7 +20,7 @@ var counter = collector.counter({
     name: 'http_requests_completed',
     help: 'count of muskie http requests completed',
     labels: {
-        zone: ZONENAME
+        zone: 'e5d3'
     }
 });
 
@@ -53,7 +53,7 @@ histogram.observe(998, {
 // This output is defined by Prometheus.
 collector.collect(artedi.FMT_PROM, function (err, metrics) {
     if (err) {
-        throw new VError(err, 'could not collect metrics');
+        throw new Error('could not collect metrics');
     }
     console.log(metrics);
     // Prints:
@@ -64,9 +64,9 @@ collector.collect(artedi.FMT_PROM, function (err, metrics) {
     // # TYPE http_request_latency_ms histogram
     // http_request_latency_ms{zone="e5d3",method="getobject",code="200",le="729"} 0
     // http_request_latency_ms{zone="e5d3",method="getobject",code="200",le="2187"} 1
-    // http_request_latency_ms{zone="e5d3",method="getobject",code="200",le="3645"} 0
-    // http_request_latency_ms{zone="e5d3",method="getobject",code="200",le="5103"} 0
-    // http_request_latency_ms{zone="e5d3",method="getobject",code="200",le="6561"} 0
+    // http_request_latency_ms{zone="e5d3",method="getobject",code="200",le="3645"} 1
+    // http_request_latency_ms{zone="e5d3",method="getobject",code="200",le="5103"} 1
+    // http_request_latency_ms{zone="e5d3",method="getobject",code="200",le="6561"} 1
     // http_request_latency_ms{zone="e5d3",method="getobject",code="200",le="+Inf"} 1
     // http_request_latency_ms_count{zone="e5d3",method="getobject",code="200"} 1
     // http_request_latency_ms_sum{zone="e5d3",method="getobject",code="200"} 998
diff --git a/lib/histogram.js b/lib/histogram.js
index f8ef86d..825920c 100644
--- a/lib/histogram.js
+++ b/lib/histogram.js
@@ -286,10 +286,13 @@ Histogram.prototype.defaultCounter = function defaultCounter() {
  * The 'steps' argument is provided, as we may allow the user to specify
  * the number of linear 'steps' between logarithmic jumps. This idea is taken
  * from DTrace's log/linear quantization ('llquantize()').
+ *
+ * The 'steps' argument is ignored for retrieving the order of values less than
+ * one.
  */
 function getOrder(value, steps) {
-    var i, j, val, width, next;
-    var buckets = [];
+    var i, j, bucketVal, width, next;
+    var buckets;
 
     // These values are relatively arbitrary. It's possible that we may want to
     // allow the user to change these at some point.
@@ -299,21 +302,34 @@ function getOrder(value, steps) {
     // This is an arbitrary high watermark. Setting this allows us to ensure
     // that our loop will always exit.
     // The maximum value that we can observe (without it falling into only the
-    // +Inf bucket is 10^10, or 10,000,000,000.
-    var high = 10;
+    // +Inf bucket) is 3,486,784,401
+    var high = 13;
 
-    val = 1;
+    bucketVal = 0.0001; // smallest possible precision.
     for (i = low; i <= high; i++) {
-        next = val * factor;
-        width = next > steps ? next / steps : 1;
+        buckets = [];
+
+        // Chop off decimals when decimal precision means less.
+        if (bucketVal >= 10) {
+            bucketVal = Math.ceil(bucketVal);
+        }
+
+        next = bucketVal * factor;
+        if (bucketVal < 1) {
+            // Ignore the 'step' count for very small values.
+            width = bucketVal;
+        } else {
+            // Otherwise enforce that we don't have more than 'step' buckets.
+            width = next > steps ? next / steps : 1;
+        }
 
-        for (j = 0; val <= next; val += width, j++) {
-            buckets[j] = val;
+        for (j = 0; bucketVal <= next; bucketVal += width, j++) {
+            buckets[j] = bucketVal;
         }
 
         // Overlap buckets so we get something like:
         // [0-10], [10-100], [100-1000].
-        val -= width;
+        bucketVal -= width;
         if (value <= buckets[buckets.length - 1]) {
             // The number is within this order.
             return (buckets);
diff --git a/package.json b/package.json
index 41bdd77..1411eda 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "artedi",
-  "version": "1.2.0",
+  "version": "1.2.1",
   "description": "a metric client library",
   "main": "lib/collector.js",
   "dependencies": {
diff --git a/test/basic.test.js b/test/basic.test.js
index c08f297..bcd23ac 100644
--- a/test/basic.test.js
+++ b/test/basic.test.js
@@ -357,14 +357,19 @@ mod_tape('histogram serialization tests', function (t) {
             });
 
             expected = expected +
-                'bot_trolololol{key="value",le="1"} 1\n' +
-                'bot_trolololol{key="value",le="3"} 1\n' +
-                'bot_trolololol{key="value",le="5"} 1\n' +
-                'bot_trolololol{key="value",le="7"} 1\n' +
-                'bot_trolololol{key="value",le="9"} 1\n' +
-                'bot_trolololol{le="+Inf",key="value"} 1\n' +
-                'bot_trolololol_count{key="value"} 1\n' +
-                'bot_trolololol_sum{key="value"} 1\n';
+                'bot_trolololol{key="value",le="0.8999999999999998"} 0\n'
+                + 'bot_trolololol{key="value",le="1.7999999999999996"} 1\n'
+                + 'bot_trolololol{key="value",le="2.6999999999999993"} 1\n'
+                + 'bot_trolololol{key="value",le="3.599999999999999"} 1\n'
+                + 'bot_trolololol{key="value",le="4.499999999999999"} 1\n'
+                + 'bot_trolololol{key="value",le="5.399999999999999"} 1\n'
+                + 'bot_trolololol{key="value",le="6.299999999999998"} 1\n'
+                + 'bot_trolololol{key="value",le="7.1999999999999975"} 1\n'
+                + 'bot_trolololol{key="value",le="8.099999999999998"} 1\n'
+                + 'bot_trolololol{key="value",le="8.999999999999998"} 1\n'
+                + 'bot_trolololol{le="+Inf",key="value"} 1\n'
+                + 'bot_trolololol_count{key="value"} 1\n'
+                + 'bot_trolololol_sum{key="value"} 1\n';
 
             collector.collect(mod_artedi.FMT_PROM, function (err, str) {
                 t.notOk(err, 'no error for single label');
@@ -502,27 +507,28 @@ mod_tape('histogram serialization tests', function (t) {
                 help: 'testhelp'
             });
 
-            histogram.observe(1);
+            histogram.observe(10);
             histogram.observe(100);
             // TODO We should have the +Inf label at the end. This works, but
             // it would look nicer.
             expected = '' +
-                '# HELP test_test1 testhelp\n' +
-                '# TYPE test_test1 ' + common.HISTOGRAM + '\n' +
-                'test_test1{le="1"} 1\n' +
-                'test_test1{le="3"} 1\n' +
-                'test_test1{le="5"} 1\n' +
-                'test_test1{le="7"} 1\n' +
-                'test_test1{le="9"} 1\n' +
-                'test_test1{le="+Inf"} 2\n' +
-                'test_test1{le="81"} 1\n' +
-                'test_test1{le="243"} 2\n' +
-                'test_test1{le="405"} 2\n' +
-                'test_test1{le="567"} 2\n' +
-                'test_test1{le="729"} 2\n' +
-                'test_test1_count{} 2\n' +
-                'test_test1_sum{} 101\n';
-            collector.collect(mod_artedi.FMT_PROM, function (err, str) {
+                '# HELP test_test1 testhelp\n'
+                + '# TYPE test_test1 ' + common.HISTOGRAM + '\n'
+                + 'test_test1{le="8.999999999999998"} 0\n'
+                + 'test_test1{le="26.999999999999993"} 1\n'
+                + 'test_test1{le="44.999999999999986"} 1\n'
+                + 'test_test1{le="62.999999999999986"} 1\n'
+                + 'test_test1{le="80.99999999999999"} 1\n'
+                + 'test_test1{le="+Inf"} 2\n'
+                + 'test_test1{le="81"} 1\n'
+                + 'test_test1{le="243"} 2\n'
+                + 'test_test1{le="405"} 2\n'
+                + 'test_test1{le="567"} 2\n'
+                + 'test_test1{le="729"} 2\n'
+                + 'test_test1_count{} 2\n'
+                + 'test_test1_sum{} 110\n';
+
+                collector.collect(mod_artedi.FMT_PROM, function (err, str) {
                 t.notOk(err, 'no error for copying bucket values');
                 t.equals(str, expected, 'initial values copied from ' +
                     'low-order buckets to high-order buckets');
-- 
2.21.0

