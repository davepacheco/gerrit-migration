commit bd84686ad3a8e9231adc557b14598bcb079a1fdd (refs/changes/89/689/2)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2016-10-14T17:45:35+00:00 (3 years ago)
    
    FWAPI-262 Firewall rule parser needs better test coverage

diff --git a/.gitignore b/.gitignore
index 3c3629e..7bbe1a3 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1 +1,2 @@
-node_modules
+/node_modules
+/coverage
diff --git a/Makefile b/Makefile
index 8bf4b63..d041e35 100644
--- a/Makefile
+++ b/Makefile
@@ -20,7 +20,7 @@
 #
 # CDDL HEADER END
 #
-# Copyright (c) 2014, Joyent, Inc. All rights reserved.
+# Copyright 2016, Joyent, Inc. All rights reserved.
 #
 #
 # fwrule Makefile
@@ -31,7 +31,8 @@
 # Tools
 #
 JISON	:= ./node_modules/jison/lib/cli.js
-NODEUNIT := node_modules/nodeunit/bin/nodeunit
+ISTANBUL := node_modules/.bin/istanbul
+FAUCET := node_modules/.bin/faucet
 RAMSEY := node_modules/ramsey/bin/ramsey
 NPM := npm
 JS_FILES	:= $(shell find lib test -name '*.js' | grep -v parser.js)
@@ -41,6 +42,9 @@ JSL_FLAGS  	?= --nologo --nosummary
 JSL_FLAGS_NODE 	 = --conf=$(JSL_CONF_NODE)
 JSSTYLE_FILES	 = $(JS_FILES)
 JSSTYLE_FLAGS    = -o indent=4,strict-indent=1,doxygen,unparenthesized-return=0,continuation-at-front=1,leading-right-paren-ok=1
+ESLINT		= ./node_modules/.bin/eslint
+ESLINT_CONF	= tools/eslint.node.conf
+ESLINT_FILES	= $(JS_FILES)
 
 
 #
@@ -52,7 +56,13 @@ parser: $(JISON)
 	@cp ./src/header.js ./lib/parser.js
 	@cat ./src/fwrule.jison | $(JISON)  >> ./lib/parser.js
 
-$(NODEUNIT):
+$(ESLINT):
+	$(NPM) install
+
+$(ISTANBUL):
+	$(NPM) install
+
+$(FAUCET):
 	$(NPM) install
 
 $(JISON):
@@ -67,15 +77,11 @@ $(RAMSEY):
 #
 
 .PHONY: test
-test: $(NODEUNIT)
-	@(for F in test/*.js; do \
-		echo "# $$F" ;\
-		$(NODEUNIT) --reporter tap $$F ;\
-		[[ $$? == "0" ]] || exit 1; \
-	done)
+test: $(ISTANBUL) $(FAUCET)
+	$(ISTANBUL) cover --print none test/run.js | $(FAUCET)
 
 .PHONY: check
-check: check-jsl check-jsstyle
+check: check-jsl check-jsstyle check-eslint
 	@echo check ok
 
 .PHONY: prepush
@@ -130,3 +136,7 @@ check-jsl: $(JSL_EXEC)
 .PHONY: check-jsstyle
 check-jsstyle:  $(JSSTYLE_EXEC)
 	@$(JSSTYLE) $(JSSTYLE_FLAGS) $(JSSTYLE_FILES)
+
+.PHONY: check-eslint
+check-eslint: $(ESLINT)
+	@$(ESLINT) -c $(ESLINT_CONF) $(ESLINT_FILES)
diff --git a/deps/jsstyle b/deps/jsstyle
index da42b50..b94eb62 160000
--- a/deps/jsstyle
+++ b/deps/jsstyle
@@ -1 +1 @@
-Subproject commit da42b50ceb12d431437b32efd4c411a8e2fac0c8
+Subproject commit b94eb629ee524d21b563c8b4461caa2bdf1becc6
diff --git a/lib/index.js b/lib/index.js
index e219748..6e17be2 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -26,11 +26,12 @@
  * firewall rule parser: entry point
  */
 
+'use strict';
+
 var mod_net = require('net');
 var parser = require('./parser').parser;
 var rule = require('./rule');
 var validators = require('./validators');
-var VError = require('verror').VError;
 
 
 
@@ -39,7 +40,6 @@ var VError = require('verror').VError;
 
 
 var uuidRE = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
-var portRE = /^[0-9]{1,5}$/;
 
 /**
  * The fwrule language is versioned so that use of new features can be
@@ -109,8 +109,8 @@ parser.yy.validateIPv6address = function validateIPv6address(ip) {
 };
 
 
-parser.yy.validateIPv6subnet = function validateIPv6subnet(ip, subnet) {
-    if (!validators.validateIPv6subnet(ip, subnet)) {
+parser.yy.validateIPv6subnet = function validateIPv6subnet(subnet) {
+    if (!validators.validateIPv6subnet(subnet)) {
         throw new validators.InvalidParamError('rule',
             'Subnet "%s" is invalid (must be in CIDR format)', subnet);
     }
@@ -182,7 +182,7 @@ parser.yy.validateOKVersion = function validateOKVersion(ver, feature) {
 };
 
 
-parser.yy.parseError = function parseError(str, details) {
+parser.yy.parseError = function parseError(_, details) {
     var err;
     if (details.token === null) {
         var pre = this.yy.lexer.pastInput();
diff --git a/lib/rule.js b/lib/rule.js
index 71bdf7c..8bd441c 100644
--- a/lib/rule.js
+++ b/lib/rule.js
@@ -26,6 +26,8 @@
  * fwadm: firewall rule model
  */
 
+'use strict';
+
 var mod_net = require('net');
 var mod_uuid = require('node-uuid');
 var sprintf = require('extsprintf').sprintf;
@@ -79,7 +81,7 @@ function forEachTarget(obj, callback) {
                 return;
             }
 
-            callback(dir, type, type, obj[dir][name]);
+            callback(dir, type, name, obj[dir][name]);
         });
     });
 }
@@ -482,7 +484,7 @@ FwRule.prototype.text = function () {
         to: []
     };
 
-    forEachTarget(this, function (dir, type, name, arr) {
+    forEachTarget(this, function (dir, type, _, arr) {
         for (var i in arr) {
             var txt;
             if (type === 'tag') {
diff --git a/lib/validators.js b/lib/validators.js
index 73ce97e..651df74 100644
--- a/lib/validators.js
+++ b/lib/validators.js
@@ -28,6 +28,8 @@
  * firewall rule parser: validation functions
  */
 
+'use strict';
+
 var net = require('net');
 var util = require('util');
 var VError = require('verror').VError;
@@ -65,7 +67,7 @@ util.inherits(InvalidParamError, VError);
  * the broadcast address
  */
 function validateIPv4address(ip) {
-    if (!net.isIPv4(ip) || (ip == '255.255.255.255') || (ip == '0.0.0.0')) {
+    if (!net.isIPv4(ip) || (ip === '255.255.255.255') || (ip === '0.0.0.0')) {
         return false;
     }
 
@@ -149,11 +151,12 @@ function validatePortOrAll(port) {
  * and lower-case allowed)
  */
 function validateProtocol(protocol) {
-    var protoLC = protocol.toLowerCase();
-    if ((protoLC != 'tcp') && (protoLC != 'udp') && (!icmpr.test(protoLC))) {
+    if (typeof (protocol) !== 'string') {
         return false;
     }
-    return true;
+
+    var protoLC = protocol.toLowerCase();
+    return ((protoLC === 'tcp') || (protoLC === 'udp') || icmpr.test(protoLC));
 }
 
 
@@ -162,11 +165,12 @@ function validateProtocol(protocol) {
  * mixed case allowed)
  */
 function validateAction(action) {
-    var actionLC = action.toLowerCase();
-    if ((actionLC != 'allow') && (actionLC != 'block')) {
+    if (typeof (action) !== 'string') {
         return false;
     }
-    return true;
+
+    var actionLC = action.toLowerCase();
+    return ((actionLC === 'allow') || (actionLC === 'block'));
 }
 
 
diff --git a/package.json b/package.json
index 5264b57..3d7542f 100644
--- a/package.json
+++ b/package.json
@@ -9,12 +9,16 @@
     "verror": "1.3.4"
   },
   "devDependencies": {
+    "eslint": "2.13.1",
+    "eslint-plugin-joyent": "1.0.1",
+    "faucet": "0.0.1",
+    "istanbul": "^0.4.0",
     "jison": "0.4.2",
-    "nodeunit": "0.9.1",
+    "tape": "^4.2.2",
     "ramsey": "0.1.2"
   },
   "engines": {
-    "node": ">=0.6"
+    "node": ">=0.10"
   },
   "main": "lib/index.js",
   "scripts": {
diff --git a/test/invalid.test.js b/test/invalid.test.js
index 211fb07..379899c 100644
--- a/test/invalid.test.js
+++ b/test/invalid.test.js
@@ -26,14 +26,10 @@
  * Negative unit tests for the firewall rule object
  */
 
-var fwrule = require('../lib/index');
-var util = require('util');
-
+'use strict';
 
-
-// Set this to any of the exports in this file to only run that test,
-// plus setup and teardown
-var runOne;
+var fwrule = require('../lib/index');
+var test = require('tape');
 
 
 function longStr() {
@@ -102,10 +98,30 @@ var INVALID = [
                         + 'expected: \'(\', \'all\', \'any\', \'ip\', '
                         + '\'subnet\', \'vm\', \'tag\', found: word'],
 
-    [ 'invalid subnet',
+    [ 'invalid IPv4',
+        { rule: 'FROM tag foo TO ip 10.288.0.0 ALLOW udp port 53' },
+        'rule', 'IPv4 address "10.288.0.0" is invalid' ],
+
+    [ 'invalid IPv6',
+        { rule: 'FROM tag foo TO ip fd00::12345 ALLOW udp port 53' },
+        'rule', 'IPv6 address "fd00::12345" is invalid' ],
+
+    [ 'invalid IPv4 subnet: bad address component',
+        { rule: 'FROM tag foo TO subnet 10.350.0.0/24 ALLOW udp port 53' },
+        'rule', 'Subnet "10.350.0.0/24" is invalid (must be in CIDR format)' ],
+
+    [ 'invalid IPv4 subnet: bad prefix length',
         { rule: 'FROM tag foo TO subnet 10.8.0.0/33 ALLOW udp port 53' },
         'rule', 'Subnet "10.8.0.0/33" is invalid (must be in CIDR format)' ],
 
+    [ 'invalid IPv6 subnet: bad address component',
+        { rule: 'FROM tag foo TO subnet fd005::/64 ALLOW udp port 53' },
+        'rule', 'Subnet "fd005::/64" is invalid (must be in CIDR format)' ],
+
+    [ 'invalid IPv6 subnet: bad prefix length',
+        { rule: 'FROM tag foo TO subnet fd00::/130 ALLOW udp port 53' },
+        'rule', 'Subnet "fd00::/130" is invalid (must be in CIDR format)' ],
+
     [ 'invalid port: too small',
         { rule: 'FROM tag foo TO subnet 10.8.0.0/24 ALLOW udp port 0' },
         'rule', 'Port number "0" is invalid' ],
@@ -114,6 +130,10 @@ var INVALID = [
         { rule: 'FROM tag foo TO subnet 10.8.0.0/24 ALLOW udp port 65537' },
         'rule', 'Port number "65537" is invalid' ],
 
+    [ 'invalid port range: too many numbers',
+        { rule: 'FROM tag foo TO subnet 10.8.0.0/24 ALLOW tcp ports 1-20-30' },
+        'rule', '"1-20-30" is not a valid port number or range' ],
+
     [ 'invalid port range: too small',
         { rule: 'FROM tag foo TO subnet 10.8.0.0/24 ALLOW tcp ports 0-20' },
         'rule', 'Port number "0" is invalid' ],
@@ -314,7 +334,7 @@ var INVALID = [
 ];
 
 
-exports['Invalid rules'] = function (t) {
+test('Invalid rules', function (t) {
     INVALID.forEach(function (data) {
         var testName = data[0];
         var expMsg = data[3];
@@ -324,7 +344,7 @@ exports['Invalid rules'] = function (t) {
         var thrown = false;
 
         try {
-            opts = (field == 'global' ? { enforceGlobal: true } : {});
+            opts = (field === 'global' ? { enforceGlobal: true } : {});
             fwrule.create(rule, opts);
         } catch (err) {
             thrown = true;
@@ -335,11 +355,11 @@ exports['Invalid rules'] = function (t) {
         t.ok(thrown, 'Error thrown: ' + testName);
     });
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['Invalid parameters'] = function (t) {
+test('Invalid parameters', function (t) {
     var thrown = false;
     var invalid = {
         enabled: 'invalid',
@@ -369,11 +389,11 @@ exports['Invalid parameters'] = function (t) {
     }
 
     t.ok(thrown, 'error thrown');
-    t.done();
-};
+    t.end();
+});
 
 
-exports['Missing rule field'] = function (t) {
+test('Missing rule field', function (t) {
     var thrown = false;
 
     try {
@@ -385,11 +405,11 @@ exports['Missing rule field'] = function (t) {
     }
 
     t.ok(thrown, 'error thrown');
-    t.done();
-};
+    t.end();
+});
 
 
-exports['global and owner_uuid not set'] = function (t) {
+test('global and owner_uuid not set', function (t) {
     var thrown = false;
 
     try {
@@ -403,14 +423,5 @@ exports['global and owner_uuid not set'] = function (t) {
     }
 
     t.ok(thrown, 'error thrown');
-    t.done();
-};
-
-
-
-// Use to run only one test in this file:
-if (runOne) {
-    module.exports = {
-        oneTest: runOne
-    };
-}
+    t.end();
+});
diff --git a/test/parser.test.js b/test/parser.test.js
index 47ac52f..2859407 100644
--- a/test/parser.test.js
+++ b/test/parser.test.js
@@ -26,12 +26,46 @@
  * Unit tests for the firewall rule parser
  */
 
+'use strict';
+
 var util = require('util');
 var parser = require('../lib/index');
+var test = require('tape');
+
+
+// --- Helpers
+
+function checkInvalidRules(t, toCheck) {
+    toCheck.forEach(function (rule) {
+        try {
+            parser.parse(rule);
+            t.fail('Parsing bad rule didn\'t fail: ' + rule);
+        } catch (err) {
+            t.ok(err.message, 'Failed to parse bad rule: ' + rule);
+        }
+    });
+
+    t.end();
+}
+
+
+// --- Tests
+
 
+test('empty input', function (t) {
+    try {
+        parser.parse('');
+        t.ok(false, 'Empty input to the parser should throw!');
+    } catch (err) {
+        t.deepEqual(err.message,
+            'Error at character 0: \'\', expected: \'FROM\', '
+            + 'found: empty string');
+    }
+    t.end();
+});
 
 
-exports['tags'] = function (t) {
+test('tags', function (t) {
     t.deepEqual(parser.parse(
         'FROM ip 1.2.3.4 TO tag some-tag ALLOW tcp PORT 80'),
         { from: [ [ 'ip', '1.2.3.4' ] ],
@@ -43,11 +77,11 @@ exports['tags'] = function (t) {
             }
         }, 'tag containing dashes');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['icmp'] = function (t) {
+test('icmp', function (t) {
     var vm = 'b0b92cd9-1fe7-4636-8477-81d2742566c2';
 
     t.deepEqual(parser.parse(
@@ -57,7 +91,7 @@ exports['icmp'] = function (t) {
             action: 'allow',
             protocol: {
                 name: 'icmp',
-                targets: [ '8' ]
+                targets: [ 8 ]
             }
         }, 'icmp with type');
 
@@ -72,11 +106,11 @@ exports['icmp'] = function (t) {
             }
         }, 'icmp with type and code');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['case insensitivity'] = function (t) {
+test('case insensitivity', function (t) {
     var vm = 'b5ff85db-fc33-4471-b045-5688cb7fa6a8';
     var ipToTag = {
         from: [ [ 'ip', '1.2.3.4' ] ],
@@ -115,7 +149,7 @@ exports['case insensitivity'] = function (t) {
         action: 'allow',
         protocol: {
             name: 'icmp',
-            targets: [ '8:0', '9' ]
+            targets: [ '8:0', 9 ]
         }
     };
 
@@ -141,15 +175,168 @@ exports['case insensitivity'] = function (t) {
         try {
             t.deepEqual(parser.parse(data[0]), data[1], data[0]);
         } catch (err) {
-            t.ifError(err);
+            t.ifError(err, data[0]);
         }
     });
 
-    t.done();
-};
+    t.end();
+});
 
-exports['port ranges'] = function (t) {
 
+test('parentheses around wildcards', function (t) {
+    var anyToAll = {
+        from: [ [ 'wildcard', 'any' ] ],
+        to: [ [ 'wildcard', 'vmall' ] ],
+        action: 'allow',
+        protocol: {
+            name: 'udp',
+            targets: [ 50 ]
+        }
+    };
+
+    [
+        [ 'from (ANY) to ALL VMS allow UDP ports 50', anyToAll ],
+        [ 'from (any) to all vms allow udp ports 50', anyToAll ],
+        [ 'from ANY to (ALL VMS) allow UDP ports 50', anyToAll ],
+        [ 'from any to (all vms) allow udp ports 50', anyToAll ],
+        [ 'FROM ( ANY ) TO ALL VMS ALLOW UDP ports 50', anyToAll ],
+        [ 'FROM ( ANY ) TO all vms ALLOW udp ports 50', anyToAll ],
+        [ 'from ANY to ( ALL VMS ) allow UDP ports 50', anyToAll ],
+        [ 'from any to ( all vms ) allow udp ports 50', anyToAll ],
+        [ 'from ( any ) to ( all vms ) allow udp ports 50', anyToAll ],
+        [ 'from (any) to (all vms) allow udp ports 50', anyToAll ]
+    ].forEach(function (data) {
+        try {
+            t.deepEqual(parser.parse(data[0]), data[1], data[0]);
+        } catch (err) {
+            t.ifError(err, data[0]);
+        }
+    });
+
+    t.end();
+});
+
+
+test('incomplete rule text', function (t) {
+    var check = [ ];
+
+    var to = [ 'TO' ];
+    var targets = [
+        'any', 'all vms', 'ip 1.2.3.4', 'ip fd00::1', 'subnet 1.2.3.0/24',
+        'subnet fd00::/64', 'tag foo', 'tag foo = bar',
+        'vm ca3eb1d6-1555-44fb-ea1a-ab66f4685214'
+    ];
+    var endings = [ 'port', 'ports', 'ports 1 -', 'ports 1-', 'type',
+        'type 128 code' ];
+
+    function buildStr(str, remains) {
+        check.push(str);
+
+        if (remains[0] !== undefined) {
+            remains[0].forEach(function (strB) {
+                buildStr(str + ' ' + strB, remains.slice(1));
+            });
+        }
+    }
+
+    buildStr('FROM',
+        [ targets, to, targets, parser.ACTIONS, parser.PROTOCOLS, endings ]);
+
+    checkInvalidRules(t, check);
+});
+
+
+test('Invalid: Logical operations', function (t) {
+    checkInvalidRules(t, [
+        'FROM (tag a foo tag b) TO any ALLOW tcp PORT 80',
+        'FROM (tag a xor tag b) TO any ALLOW tcp PORT 80',
+        'FROM (tag a nand tag b) TO any ALLOW tcp PORT 80',
+        'FROM (tag a not tag b) TO any ALLOW tcp PORT 80',
+        'FROM (tag a nor tag b) TO any ALLOW tcp PORT 80',
+        'FROM (tag a xnor tag b) TO any ALLOW tcp PORT 80'
+    ]);
+});
+
+
+test('Invalid: Actions', function (t) {
+    checkInvalidRules(t, [
+        'FROM any TO any DENY tcp PORT 80',
+        'FROM any TO any FORWARD tcp PORT 80',
+        'FROM any TO any OBSTRUCT tcp PORT 80',
+        'FROM any TO any PASS tcp PORT 80',
+        'FROM any TO any PASSTHROUGH tcp PORT 80',
+        'FROM any TO any PERMIT tcp PORT 80'
+    ]);
+});
+
+
+test('Invalid: Protocols', function (t) {
+    checkInvalidRules(t, [
+        'FROM any TO any ALLOW foo PORT 80',
+        'FROM any TO any ALLOW bar PORT 80',
+        'FROM any TO any ALLOW ftp PORT 80',
+        'FROM any TO any ALLOW ssh PORT 80',
+        'FROM any TO any ALLOW http PORT 80',
+        'FROM any TO any ALLOW sctp PORT 80',
+        'FROM any TO any ALLOW dccp PORT 80',
+        'FROM any TO any ALLOW mtcp PORT 80'
+    ]);
+});
+
+test('Invalid: Parameters for TCP & UDP', function (t) {
+    checkInvalidRules(t, [
+        'FROM any TO any ALLOW tcp PORT hello',
+        'FROM any TO any ALLOW udp PORT hello',
+        'FROM any TO any ALLOW tcp PORT ssh',
+        'FROM any TO any ALLOW udp PORT ssh',
+        'FROM any TO any ALLOW tcp PORT _',
+        'FROM any TO any ALLOW udp PORT _',
+        'FROM any TO any ALLOW tcp PORT *',
+        'FROM any TO any ALLOW udp PORT *',
+        'FROM any TO any ALLOW tcp PORTS hello',
+        'FROM any TO any ALLOW udp PORTS hello',
+        'FROM any TO any ALLOW tcp PORTS ssh',
+        'FROM any TO any ALLOW udp PORTS ssh',
+        'FROM any TO any ALLOW tcp PORTS ssh-http',
+        'FROM any TO any ALLOW udp PORTS ssh-http',
+        'FROM any TO any ALLOW tcp PORTS _',
+        'FROM any TO any ALLOW udp PORTS _',
+        'FROM any TO any ALLOW tcp PORTS *',
+        'FROM any TO any ALLOW udp PORTS *',
+        'FROM any TO any ALLOW tcp TYPE 128',
+        'FROM any TO any ALLOW udp TYPE 128',
+        'FROM any TO any ALLOW tcp TYPE 128 CODE 0',
+        'FROM any TO any ALLOW udp TYPE 128 CODE 0'
+    ]);
+});
+
+test('Invalid: Parameters for ICMP(6)', function (t) {
+    checkInvalidRules(t, [
+        'FROM any TO any ALLOW icmp PORT 80',
+        'FROM any TO any ALLOW icmp6 PORT 80',
+        'FROM any TO any ALLOW icmp PORTS 80',
+        'FROM any TO any ALLOW icmp6 PORTS 80',
+        'FROM any TO any ALLOW icmp PORTS 80-85',
+        'FROM any TO any ALLOW icmp6 PORTS 80-85',
+        'FROM any TO any ALLOW icmp TYPE foo',
+        'FROM any TO any ALLOW icmp6 TYPE foo',
+        'FROM any TO any ALLOW icmp TYPE *',
+        'FROM any TO any ALLOW icmp6 TYPE *',
+        'FROM any TO any ALLOW icmp TYPE 1:0',
+        'FROM any TO any ALLOW icmp6 TYPE 1:0',
+        'FROM any TO any ALLOW icmp 1:0',
+        'FROM any TO any ALLOW icmp6 1:0',
+        'FROM any TO any ALLOW icmp TYPE 128 CODE foo',
+        'FROM any TO any ALLOW icmp6 TYPE 128 CODE foo',
+        'FROM any TO any ALLOW icmp TYPE 128 CODE *',
+        'FROM any TO any ALLOW icmp6 TYPE 128 CODE *',
+        'FROM any TO any ALLOW icmp TYPE 128 CODE _',
+        'FROM any TO any ALLOW icmp6 TYPE 128 CODE _'
+    ]);
+});
+
+
+test('port ranges', function (t) {
     var rangeA = {
         from: [ [ 'ip', '1.2.3.4' ] ],
         to: [ [ 'tag', 'some-tag' ] ],
@@ -170,10 +357,11 @@ exports['port ranges'] = function (t) {
             t.ifError(err);
         }
     });
-    t.done();
-};
+    t.end();
+});
 
-exports['version mismatch'] = function (t) {
+
+test('version mismatch', function (t) {
     try {
         parser.parse('FROM tag foo TO tag bar ALLOW TCP PORTS 20-30',
             { maxVersion: 1 });
@@ -184,10 +372,11 @@ exports['version mismatch'] = function (t) {
             'The rule uses a feature (port ranges) newer than this API allows',
             'Correct error message for using ports in version 1');
     }
-    t.done();
-};
+    t.end();
+});
+
 
-exports['icmp with code'] = function (t) {
+test('icmp with code', function (t) {
     var vm = 'b0b92cd9-1fe7-4636-8477-81d2742566c2';
     var ruleTxt = util.format('FROM ip 10.0.0.2 TO vm %s ALLOW icmp type 8 '
         + 'code 0', vm);
@@ -202,10 +391,11 @@ exports['icmp with code'] = function (t) {
             }
         }, 'icmp with type');
 
-    t.done();
-};
+    t.end();
+});
+
 
-exports['icmp type all'] = function (t) {
+test('icmp type all', function (t) {
     var vm = 'b0b92cd9-1fe7-4636-8477-81d2742566c2';
 
     t.deepEqual(parser.parse(
@@ -230,10 +420,11 @@ exports['icmp type all'] = function (t) {
             }
         }, 'icmp type all in parens');
 
-    t.done();
-};
+    t.end();
+});
 
-exports['icmp6 type all'] = function (t) {
+
+test('icmp6 type all', function (t) {
     var vm = 'b0b92cd9-1fe7-4636-8477-81d2742566c2';
 
     t.deepEqual(parser.parse(
@@ -258,10 +449,11 @@ exports['icmp6 type all'] = function (t) {
             }
         }, 'icmp6 type all in parens');
 
-    t.done();
-};
+    t.end();
+});
+
 
-exports['tag with value'] = function (t) {
+test('Tags: With value', function (t) {
     var ruleTxt = 'FROM tag foo = bar TO ip 8.8.8.8 BLOCK udp PORT 53';
 
     t.deepEqual(parser.parse(ruleTxt),
@@ -274,11 +466,11 @@ exports['tag with value'] = function (t) {
             }
         }, 'tag = value');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['multiple tags with values'] = function (t) {
+test('Tags: Multiple values', function (t) {
     var ruleTxt = 'FROM (tag foo = bar OR tag some = value) TO '
         + 'ip 8.8.8.8 BLOCK udp PORT 53';
 
@@ -295,11 +487,11 @@ exports['multiple tags with values'] = function (t) {
             }
         }, 'tag = value');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['tag with quoted value'] = function (t) {
+test('Tags: Quoted value', function (t) {
     var ruleTxt = 'FROM tag foo = "some value" TO ip 8.8.8.8 BLOCK udp PORT 53';
 
     t.deepEqual(parser.parse(ruleTxt),
@@ -312,11 +504,11 @@ exports['tag with quoted value'] = function (t) {
             }
         }, 'tag = value');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['tags with quoted name and value'] = function (t) {
+test('Tags: Quoted name and value', function (t) {
     var ruleTxt = 'FROM (tag "tag one" = "some value" OR '
         + 'tag "tag two" = "another value")'
         + 'TO ip 8.8.8.8 BLOCK udp PORT 53';
@@ -334,11 +526,11 @@ exports['tags with quoted name and value'] = function (t) {
             }
         }, 'tag = value');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['tags with unicode characters'] = function (t) {
+test('Tags: Unicode characters', function (t) {
     var ruleTxt = 'FROM (tag "☂" = "ທ" OR '
         + 'tag "삼겹살" = "불고기")'
         + 'TO ip 8.8.8.8 BLOCK udp PORT 53';
@@ -356,5 +548,5 @@ exports['tags with unicode characters'] = function (t) {
             }
         }, 'tag = value');
 
-    t.done();
-};
+    t.end();
+});
diff --git a/test/rule.test.js b/test/rule.test.js
index e284ad6..e89bde7 100644
--- a/test/rule.test.js
+++ b/test/rule.test.js
@@ -26,14 +26,14 @@
  * Unit tests for the firewall rule object
  */
 
+'use strict';
+
 var fwrule = require('../lib/index');
 var util = require('util');
+var test = require('tape');
 
 
 
-// Set this to any of the exports in this file to only run that test,
-// plus setup and teardown
-var runOne;
 
 
 
@@ -41,17 +41,17 @@ var runOne;
 
 
 
-exports['rule exports'] = function (t) {
+test('rule exports', function (t) {
     ['ACTIONS', 'DIRECTIONS', 'FIELDS', 'PROTOCOLS', 'TARGET_TYPES'].forEach(
         function (field) {
         t.ok(fwrule[field].length > 0, 'fwrule.' + field);
     });
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['all target types'] = function (t) {
+test('all target types', function (t) {
     var desc = 'all target types';
     var ips = ['192.168.1.1', '10.2.0.3'];
     var vms = ['9a343ca8-b42a-4a27-a9c5-800f57d1e8ed',
@@ -120,11 +120,11 @@ exports['all target types'] = function (t) {
         { enabled: ser.enabled, version: ser.version },
         'rule.serialize(): enabled, version');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['any'] = function (t) {
+test('any', function (t) {
     var ip = '192.168.3.2';
     var vm = '8a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
     var tag = 'tag3';
@@ -176,11 +176,11 @@ exports['any'] = function (t) {
         version: rule.version
     }, 'rule.serialize()');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['all vms'] = function (t) {
+test('all vms', function (t) {
     var ip = '192.168.3.2';
     var owner = '50716241-ac8d-4e63-a9e4-77ff07cede61';
 
@@ -232,11 +232,11 @@ exports['all vms'] = function (t) {
         version: rule.version
     }, 'rule.serialize()');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['tags'] = function (t) {
+test('tags', function (t) {
     var ruleTxt = 'FROM ip 1.2.3.4 TO tag some-tag ALLOW tcp PORT 80';
     var rule = new fwrule.create({
         rule: ruleTxt,
@@ -276,11 +276,11 @@ exports['tags'] = function (t) {
     }, 'rule.serialize()');
     t.ok(!rule.allVMs, 'rule.allVMs');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['multiple ports and owner_uuid'] = function (t) {
+test('multiple ports and owner_uuid', function (t) {
     var inRule1 = {
         rule: 'FROM ip 10.88.88.1 TO tag tag2 ALLOW tcp '
             + '(PORT 1002 AND PORT 1052)',
@@ -336,6 +336,7 @@ exports['multiple ports and owner_uuid'] = function (t) {
     }, 'rule1.serialize()');
 
     raw.uuid = rule2.uuid;
+    raw.version = rule2.version;
 
     t.deepEqual(rule2.raw(), raw, 'rule2.raw()');
     t.deepEqual(rule2.ports, raw.ports, 'rule2.ports');
@@ -349,11 +350,11 @@ exports['multiple ports and owner_uuid'] = function (t) {
         version: rule2.version
     }, 'rule2.serialize()');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['icmp'] = function (t) {
+test('icmp', function (t) {
     var vm = '8a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
 
     var ruleTxt = util.format(
@@ -401,11 +402,11 @@ exports['icmp'] = function (t) {
         version: rule.version
     }, 'rule.serialize()');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['icmp with code'] = function (t) {
+test('icmp with code', function (t) {
     var vm = '8a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
 
     var ruleTxt = util.format(
@@ -453,11 +454,11 @@ exports['icmp with code'] = function (t) {
         version: rule.version
     }, 'rule.serialize()');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['icmp: multiple types'] = function (t) {
+test('icmp: multiple types', function (t) {
     var vm = '8a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
 
     var ruleTxt = util.format(
@@ -509,11 +510,11 @@ exports['icmp: multiple types'] = function (t) {
         version: rule.version
     }, 'rule.serialize()');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['sorting: icmp codes'] = function (t) {
+test('sorting: icmp codes', function (t) {
     var vm = '8a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
 
     var rule = fwrule.create({
@@ -564,10 +565,11 @@ exports['sorting: icmp codes'] = function (t) {
         version: rule.version
     }, 'rule.serialize()');
 
-    t.done();
-};
+    t.end();
+});
+
 
-exports['sorting: icmp6 codes'] = function (t) {
+test('sorting: icmp6 codes', function (t) {
     var vm = '8a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
 
     var rule = fwrule.create({
@@ -618,10 +620,11 @@ exports['sorting: icmp6 codes'] = function (t) {
         version: rule.version
     }, 'rule.serialize()');
 
-    t.done();
-};
+    t.end();
+});
 
-exports['sorting: ports'] = function (t) {
+
+test('sorting: ports', function (t) {
     var inRule = {
         rule: 'FROM ip 10.88.88.1 TO tag tag2 ALLOW tcp '
             + '(PORT 1002 AND PORT 10 AND PORT 1052 AND PORT 80 AND PORT 30245 '
@@ -666,10 +669,11 @@ exports['sorting: ports'] = function (t) {
         version: rule.version
     }, 'rule.serialize()');
 
-    t.done();
-};
+    t.end();
+});
+
 
-exports['sorting: port ranges'] = function (t) {
+test('sorting: port ranges', function (t) {
     var inRule = {
         rule: 'FROM ip 10.88.88.1 TO tag tag2 ALLOW tcp '
             + 'PORTS 1002, 20-40, 10, 1052, 80, 30245, 6 - 11',
@@ -717,10 +721,11 @@ exports['sorting: port ranges'] = function (t) {
         version: rule.version
     }, 'rule.serialize()');
 
-    t.done();
-};
+    t.end();
+});
 
-exports['single port range'] = function (t) {
+
+test('single port range', function (t) {
     var inRule = {
         rule: 'FROM ip 10.88.88.1 TO tag tag2 ALLOW tcp '
             + 'PORTS 50-50',
@@ -763,10 +768,11 @@ exports['single port range'] = function (t) {
         version: rule.version
     }, 'rule.serialize()');
 
-    t.done();
-};
+    t.end();
+});
+
 
-exports['port ALL'] = function (t) {
+test('port ALL', function (t) {
     var normalText = 'FROM ip 10.88.88.1 TO tag tag2 ALLOW tcp PORT all';
     var parenText = 'FROM ip 10.88.88.1 TO tag tag2 ALLOW tcp ( PORT all )';
     var ruleTexts = [ normalText, parenText ];
@@ -815,11 +821,11 @@ exports['port ALL'] = function (t) {
         }, 'rule.serialize()');
     });
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['tags: equal'] = function (t) {
+test('tags: equal', function (t) {
     var ruleTxt =
         'FROM ip 1.2.3.4 TO tag some-tag = value ALLOW tcp PORT 80';
     var rule = new fwrule.create({
@@ -862,11 +868,11 @@ exports['tags: equal'] = function (t) {
     t.ok(!rule.allVMs, 'rule.allVMs');
     t.deepEqual(rule.tags, raw.to.tags, 'rule.tags');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['multiple tags: equal'] = function (t) {
+test('multiple tags: equal', function (t) {
     var ruleTxt = 'FROM ip 1.2.3.4 TO '
         + '(tag some-tag = value OR tag some-tag = value2) ALLOW tcp PORT 80';
     var rule = new fwrule.create({
@@ -912,11 +918,11 @@ exports['multiple tags: equal'] = function (t) {
     t.ok(!rule.allVMs, 'rule.allVMs');
     t.deepEqual(rule.tags, raw.to.tags, 'rule.tags');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['multiple tags: multiple values'] = function (t) {
+test('multiple tags: multiple values', function (t) {
     var rule = new fwrule.create({
         rule: 'FROM (tag some-tag OR tag some-tag = value0) TO '
             + '(tag some-tag = value OR tag some-tag = value2) '
@@ -966,11 +972,11 @@ exports['multiple tags: multiple values'] = function (t) {
     t.ok(!rule.allVMs, 'rule.allVMs');
     t.deepEqual(rule.tags, raw.from.tags, 'rule.tags');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['multiple tags: multiple quoted values'] = function (t) {
+test('multiple tags: multiple quoted values', function (t) {
     var owner = 'ace1da4b-9ab2-4991-8298-700bec1b70ed';
     var rule = new fwrule.create({
         owner_uuid: owner,
@@ -1033,11 +1039,11 @@ exports['multiple tags: multiple quoted values'] = function (t) {
                 [ '김치', '백김치' ]
         ], 'rule.tags');
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['IPv6 sources'] = function (t) {
+test('IPv6 sources', function (t) {
     var desc = 'IPv6 sources';
     var vm = '9a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
     var ips = ['fd00::2', 'fe80::8:20ff:fe40:65e4'];
@@ -1097,10 +1103,11 @@ exports['IPv6 sources'] = function (t) {
         { enabled: ser.enabled, version: ser.version },
         'rule.serialize(): enabled, version');
 
-    t.done();
-};
+    t.end();
+});
+
 
-exports['IPv6 subnet sources'] = function (t) {
+test('IPv6 subnet sources', function (t) {
     var desc = 'IPv6 subnet sources';
     var vm = '9a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
     var cidr = 'fd00::/64';
@@ -1160,10 +1167,11 @@ exports['IPv6 subnet sources'] = function (t) {
         { enabled: ser.enabled, version: ser.version },
         'rule.serialize(): enabled, version');
 
-    t.done();
-};
+    t.end();
+});
 
-exports['IPv6 destinations'] = function (t) {
+
+test('IPv6 destinations', function (t) {
     var desc = 'IPv6 destinations';
     var vm = '9a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
     var ips = ['fd00::1', 'fd00::2'];
@@ -1223,10 +1231,11 @@ exports['IPv6 destinations'] = function (t) {
         { enabled: ser.enabled, version: ser.version },
         'rule.serialize(): enabled, version');
 
-    t.done();
-};
+    t.end();
+});
+
 
-exports['IPv6 subnet destinations'] = function (t) {
+test('IPv6 subnet destinations', function (t) {
     var desc = 'IPv6 subnet destinations';
     var vm = '9a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
     var cidr = 'fd00::/64';
@@ -1286,10 +1295,11 @@ exports['IPv6 subnet destinations'] = function (t) {
         { enabled: ser.enabled, version: ser.version },
         'rule.serialize(): enabled, version');
 
-    t.done();
-};
+    t.end();
+});
 
-exports['Mixed IPv4 and IPv6'] = function (t) {
+
+test('Mixed IPv4 and IPv6', function (t) {
     var desc = 'Mixed IPv4 and IPv6';
     var vm1 = '9a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
     var vm2 = '518908b6-8299-466d-8ea5-20a0ceff63ec';
@@ -1351,14 +1361,5 @@ exports['Mixed IPv4 and IPv6'] = function (t) {
         { enabled: ser.enabled, version: ser.version },
         'rule.serialize(): enabled, version');
 
-    t.done();
-};
-
-
-
-// Use to run only one test in this file:
-if (runOne) {
-    module.exports = {
-        oneTest: runOne
-    };
-}
+    t.end();
+});
diff --git a/test/run.js b/test/run.js
new file mode 100644
index 0000000..276bc30
--- /dev/null
+++ b/test/run.js
@@ -0,0 +1,24 @@
+// Copyright 2014 Patrick Mooney.  All rights reserved.
+
+'use strict';
+
+var assert = require('assert');
+var fs = require('fs');
+var path = require('path');
+
+function runTests(directory) {
+    fs.readdir(directory, function (err, files) {
+        assert.ifError(err);
+        files.filter(function (f) {
+            return (/\.test\.js$/.test(f));
+        }).map(function (f) {
+            return (path.join(directory, f));
+        }).forEach(require);
+    });
+}
+
+// --- Run All Tests
+
+(function main() {
+    runTests(__dirname);
+})();
diff --git a/test/validators.test.js b/test/validators.test.js
index d86d319..65c62b8 100644
--- a/test/validators.test.js
+++ b/test/validators.test.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright (c) 2015, Joyent, Inc. All rights reserved.
+ * Copyright 2016, Joyent, Inc. All rights reserved.
  *
  */
 
@@ -28,23 +28,17 @@
  * Unit tests for the firewall rule validators
  */
 
-var validator = require('../lib/validators.js');
-
-
-
-// --- Globals
+'use strict';
 
-
-
-var IS_NODE_08 = (process.version.indexOf('v0.8') === 0);
+var test = require('tape');
+var validator = require('../lib/validators.js');
 
 
 
 // --- Tests
 
 
-
-exports['IPv4 addresses'] = function (t) {
+test('IPv4 addresses', function (t) {
     var i;
     var valid = [
         '1.2.3.4',
@@ -55,30 +49,24 @@ exports['IPv4 addresses'] = function (t) {
         '1',
         'asdf',
         '0.0.0.0',
+        '01.02.03.04',
         '255.255.255.255',
         '256.0.0.1'
     ];
 
-    if (IS_NODE_08) {
-        // net.isIPv4 thinks this is valid in node 0.8:
-        valid.push('01.02.03.04');
-    } else {
-        invalid.push('01.02.03.04');
-    }
-
     for (i in valid) {
         t.ok(validator.validateIPv4address(valid[i]), valid[i]);
     }
 
     for (i in invalid) {
-        t.ok(!validator.validateIPv4address(invalid[i]), invalid[i]);
+        t.notOk(validator.validateIPv4address(invalid[i]), invalid[i]);
     }
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['IPv4 subnets'] = function (t) {
+test('IPv4 subnets', function (t) {
     var i;
     var valid = [
         '1.2.3.4/24',
@@ -92,30 +80,24 @@ exports['IPv4 subnets'] = function (t) {
         'asdf',
         '0.0.0.0/32',
         '1.0.0.0/33',
+        '01.02.03.04/24',
         '1.0.0.0/0'
     ];
 
-    if (IS_NODE_08) {
-        // net.isIPv4 thinks this is valid in node 0.8:
-        valid.push('01.02.03.04/24');
-    } else {
-        invalid.push('01.02.03.04/24');
-    }
-
     for (i in valid) {
         t.ok(validator.validateIPv4subnet(valid[i]), 'valid: ' + valid[i]);
     }
 
     for (i in invalid) {
-        t.ok(!validator.validateIPv4subnet(invalid[i]),
+        t.notOk(validator.validateIPv4subnet(invalid[i]),
             'invalid: ' + invalid[i]);
     }
 
-    t.done();
-};
+    t.end();
+});
 
 
-exports['ports'] = function (t) {
+test('ports', function (t) {
     var i;
     var valid = [
         1,
@@ -146,9 +128,80 @@ exports['ports'] = function (t) {
     }
 
     for (i in invalid) {
-        t.ok(!validator.validatePortOrAll(invalid[i]),
+        t.notOk(validator.validatePortOrAll(invalid[i]),
+            'invalid: ' + invalid[i]);
+    }
+
+    return t.end();
+});
+
+
+test('protocols', function (t) {
+    var i;
+    var valid = [
+        'tcp',
+        'TCP',
+        'udp',
+        'UDP',
+        'icmp',
+        'ICMP',
+        'icmp6',
+        'ICMP6'
+    ];
+
+    var invalid = [
+        0,
+        {},
+        65536,
+        '65536',
+        '',
+        [],
+        -1,
+        'something',
+        'ethernet',
+        'ftp'
+    ];
+
+    for (i in valid) {
+        t.ok(validator.validateProtocol(valid[i]), 'valid: ' + valid[i]);
+    }
+
+    for (i in invalid) {
+        t.notOk(validator.validateProtocol(invalid[i]),
+            'invalid: ' + invalid[i]);
+    }
+
+    return t.end();
+});
+
+test('actions', function (t) {
+    var i;
+    var valid = [
+        'block',
+        'BLOCK',
+        'allow',
+        'ALLOW'
+    ];
+
+    var invalid = [
+        0,
+        {},
+        65536,
+        '65536',
+        '',
+        'something',
+        'permit',
+        'obstruct'
+    ];
+
+    for (i in valid) {
+        t.ok(validator.validateAction(valid[i]), 'valid: ' + valid[i]);
+    }
+
+    for (i in invalid) {
+        t.notOk(validator.validateAction(invalid[i]),
             'invalid: ' + invalid[i]);
     }
 
-    return t.done();
-};
+    return t.end();
+});
diff --git a/tools/eslint.node.conf b/tools/eslint.node.conf
new file mode 100644
index 0000000..ae6d704
--- /dev/null
+++ b/tools/eslint.node.conf
@@ -0,0 +1,20 @@
+{
+    "plugins": [ "joyent" ],
+    "extends": [
+        "eslint:recommended",
+        "plugin:joyent/style",
+        "plugin:joyent/lint"
+    ],
+    "parserOptions": {
+        "ecmaVersion": 5,
+        "sourceType": "script",
+        "ecmaFeatures": {
+        }
+    },
+    "env": {
+        "node": true
+    },
+    "rules": {
+        "strict": [ "error", "global" ]
+    }
+}
diff --git a/tools/jsl.node.conf b/tools/jsl.node.conf
index 0b8ae95..591cb8c 100644
--- a/tools/jsl.node.conf
+++ b/tools/jsl.node.conf
@@ -60,7 +60,7 @@
 -useless_quotes               # the quotation marks are unnecessary
 +useless_void                 # use of the void type may be unnecessary (void is always undefined)
 +var_hides_arg                # variable {name} hides argument
-+want_assign_or_call          # expected an assignment or function call
+-want_assign_or_call          # expected an assignment or function call
 +with_statement               # with statement hides undeclared variables; use temporary variable instead
 
 
