From 3a6a5de42b3e91095b19d8f9f4bdc58bcc69e238 Mon Sep 17 00:00:00 2001
From: Dave Eddy <dave@daveeddy.com>
Date: Tue, 2 Oct 2018 18:32:32 -0400
Subject: [PATCH] OS-7272 vmadm reprovision fails with custom ZFS properties
 set Reviewed by: Todd Whiteman <todd.whiteman@joyent.com>

---
 src/vm/node_modules/VM.js        | 31 +++++++++--
 src/vm/tests/test-reprovision.js | 93 +++++++++++++++++++++++++++++++-
 2 files changed, 119 insertions(+), 5 deletions(-)

diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index 17cd6655..a13313dc 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -7602,7 +7602,7 @@ function installZone(payload, log, callback)
         callback = tracers_obj.callback;
         log = tracers_obj.log;
     } else {
-        log.debug('installZone()');
+        log.debug({payload: payload}, 'installZone()');
     }
 
     load_fields = [
@@ -7781,26 +7781,51 @@ function installZone(payload, log, callback)
                 }
             ];
 
+            log.debug({props: props}, 'optionally setting ZFS properties');
+
             vasync.forEachPipeline({
                 inputs: props,
                 func: function (o, cb2) {
                     var key = o.key;
                     var zfs_prop = o.zfs_prop;
+                    var defaultValue;
+                    var logLevel;
+
                     if (!payload.hasOwnProperty(key)) {
                         // not setting value
+                        log.debug('key "%s" not set for VM, skipping',
+                            key);
+                        cb2();
+                        return;
+                    }
+
+                    if (vmobj.hasOwnProperty(key)
+                        && vmobj[key] === payload[key]) {
+
+                        // This property is already set - this can happen if the
+                        // zone is reprovisioning.
+                        logLevel = reprovisioning ? 'debug' : 'warn';
+
+                        log[logLevel]('key "%s" already set to %j, skipping',
+                            key, vmobj[key]);
                         cb2();
                         return;
                     }
 
                     if (PAYLOAD_PROPERTIES[key].hasOwnProperty('pr_default')) {
-                        var def = PAYLOAD_PROPERTIES[key].pr_default;
-                        if (payload[key] === def) {
+                        defaultValue = PAYLOAD_PROPERTIES[key].pr_default;
+                        if (payload[key] === defaultValue) {
                             // value is set to default
+                            log.debug(
+                                'key "%s" already set to default value %j, '
+                                + 'skipping', key, defaultValue);
                             cb2();
                             return;
                         }
                     }
 
+                    log.debug('setting key "%s" to %j', key, payload[key]);
+
                     var cancelFn;
                     vasync.parallel({funcs: [
                         function (cb3) {
diff --git a/src/vm/tests/test-reprovision.js b/src/vm/tests/test-reprovision.js
index 0567b7eb..64027f6d 100644
--- a/src/vm/tests/test-reprovision.js
+++ b/src/vm/tests/test-reprovision.js
@@ -1,8 +1,10 @@
-// Copyright 2016 Joyent, Inc.  All rights reserved.
+// Copyright 2018 Joyent, Inc.  All rights reserved.
 
 var async = require('/usr/node/node_modules/async');
+var common = require('./common');
 var cp = require('child_process');
 var execFile = cp.execFile;
+var f = require('util').format;
 var fs = require('fs');
 var VM = require('/usr/vm/node_modules/VM');
 var vmtest = require('../common/vmtest.js');
@@ -421,7 +423,7 @@ test('delete docker VM', function (t) {
     }
 });
 
-test('test zfs reprovision properties', function (t) {
+test('test zfs reprovision default properties', function (t) {
     var p = JSON.parse(JSON.stringify(payload_test_zfs_on_reprovision));
     var state = {brand: p.brand};
     var _vmobj;
@@ -454,5 +456,92 @@ test('test zfs reprovision properties', function (t) {
                 cb);
         }
     ]);
+});
+
+test('test zfs reprovision custom properties', function (t) {
+    var p = JSON.parse(JSON.stringify(payload_test_zfs_on_reprovision));
+    var state = {
+        brand: p.brand
+    };
+    var zfsArgs = [
+        'get',
+        '-Hpo',
+        'value',
+        'compression',
+        'zones'
+    ];
+    var algorithmToUse;
+
+    // Figure out the current compression algorithm set for 'zones'
+    common.zfs(zfsArgs, function (zfsErr, out) {
+        common.ifError(t, zfsErr, 'zfs get compression');
+        if (zfsErr) {
+            t.done();
+            return;
+        }
+
+        /*
+         * We want to use an algorithm here that is different than what 'zones'
+         * (the parent dataset) is currently set to use.  The algorithm we use
+         * here doesn't really matter, we just want something other than what
+         * will be inherited by default.
+         *
+         * ZFS also has the notion of a "default compression algorithm" if the
+         * property is set to 'on'.  The VM JSON payload however, does not know
+         * this and will still consider "on" to be a different property than
+         * whatever the default algorithm according to ZFS happens to be (could
+         * be "lzib", or even "lz4").
+         *
+         * To make things even more confusing, `proptable.js` has a default
+         * value set for `zfs_root_compression` (currently set to "off").  This
+         * means setting the property to "off" will result in the property being
+         * removed from the VM JSON payload.
+         *
+         * With all of this knowledge, we avoid manually setting the
+         * `zfs_root_compression` property on the JSON payload to "off", and we
+         * also ensure it is set to something that is different than what the
+         * 'zones' dataset is currently set to.
+         */
+        var alg = out.trim();
+        switch (alg) {
+        case 'gzip':
+            algorithmToUse = 'lz4';
+            break;
+        default:
+            algorithmToUse = 'gzip';
+            break;
+        }
+
+        t.ok(true, f('zones compression: %j, using for vm: %j',
+            alg, algorithmToUse));
+
+        p.zfs_root_compression = algorithmToUse;
+
+        vmtest.on_new_vm(t, p.image_uuid, p, state, [
+            function (cb) {
+                VM.load(state.uuid, {}, function (err, obj) {
+                    common.ifError(t, err, 'reload VM after create');
 
+                    cb(err);
+                });
+            }, function (cb) {
+                VM.reprovision(state.uuid, {image_uuid: p.image_uuid},
+                    function (err) {
+                        common.ifError(t, err, 'reprovision VM');
+
+                        cb(err);
+                    }
+                );
+            }, function (cb) {
+                VM.load(state.uuid, {}, function (err, obj) {
+                    common.ifError(t, err, 'reload VM after reprovision');
+
+                    t.equal(obj.zfs_root_compression, algorithmToUse,
+                        'zfs_root_compression set properly');
+
+                    cb(err);
+                });
+            }
+        ]);
+    });
 });
-- 
2.21.0

