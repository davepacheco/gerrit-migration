commit 4b34592a0f193febc246bdf20540732a0369f86c (refs/changes/05/4905/3)
Author: Dave Eddy <dave@daveeddy.com>
Date:   2018-10-02T12:42:45-04:00 (1 year ago)
    
    OS-7272 vmadm reprovision fails with custom ZFS properties set

diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index 17cd6655..c69dc1ea 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -7602,7 +7602,7 @@ function installZone(payload, log, callback)
         callback = tracers_obj.callback;
         log = tracers_obj.log;
     } else {
-        log.debug('installZone()');
+        log.debug({payload: payload}, 'installZone()');
     }
 
     load_fields = [
@@ -7786,16 +7786,36 @@ function installZone(payload, log, callback)
                 func: function (o, cb2) {
                     var key = o.key;
                     var zfs_prop = o.zfs_prop;
+                    var defaultValue;
+                    var logLevel;
+
                     if (!payload.hasOwnProperty(key)) {
                         // not setting value
+                        log.debug('not setting value for ZFS key: %s', key);
+                        cb2();
+                        return;
+                    }
+
+                    if (vmobj.hasOwnProperty(key)
+                        && vmobj[key] === payload[key]) {
+
+                        // This property is already set - this can happen if the
+                        // zone is reprovisioning.
+                        logLevel = reprovisioning ? 'debug' : 'warn';
+
+                        log[logLevel]('ZFS key "%s" already set to %j',
+                            key, vmobj[key]);
                         cb2();
                         return;
                     }
 
                     if (PAYLOAD_PROPERTIES[key].hasOwnProperty('pr_default')) {
-                        var def = PAYLOAD_PROPERTIES[key].pr_default;
-                        if (payload[key] === def) {
+                        defaultValue = PAYLOAD_PROPERTIES[key].pr_default;
+                        if (payload[key] === defaultValue) {
                             // value is set to default
+                            log.debug(
+                                'payload is using default value for ZFS key '
+                                + '"%s": %j', key, defaultValue);
                             cb2();
                             return;
                         }
diff --git a/src/vm/tests/test-reprovision.js b/src/vm/tests/test-reprovision.js
index 0567b7eb..3459924a 100644
--- a/src/vm/tests/test-reprovision.js
+++ b/src/vm/tests/test-reprovision.js
@@ -1,6 +1,7 @@
-// Copyright 2016 Joyent, Inc.  All rights reserved.
+// Copyright 2018 Joyent, Inc.  All rights reserved.
 
 var async = require('/usr/node/node_modules/async');
+var common = require('./common');
 var cp = require('child_process');
 var execFile = cp.execFile;
 var fs = require('fs');
@@ -421,7 +422,7 @@ test('delete docker VM', function (t) {
     }
 });
 
-test('test zfs reprovision properties', function (t) {
+test('test zfs reprovision default properties', function (t) {
     var p = JSON.parse(JSON.stringify(payload_test_zfs_on_reprovision));
     var state = {brand: p.brand};
     var _vmobj;
@@ -454,5 +455,37 @@ test('test zfs reprovision properties', function (t) {
                 cb);
         }
     ]);
+});
+
+test('test zfs reprovision custom properties', function (t) {
+    var p = JSON.parse(JSON.stringify(payload_test_zfs_on_reprovision));
+    p.zfs_root_compression = 'lz4';
+    var state = {brand: p.brand};
+
+    vmtest.on_new_vm(t, p.image_uuid, p, state, [
+        function (cb) {
+            VM.load(state.uuid, {}, function (err, obj) {
+                common.ifError(t, err, 'reload VM after create');
+
+                cb(err);
+            });
+        }, function (cb) {
+            VM.reprovision(state.uuid, {image_uuid: p.image_uuid},
+                function (err) {
+                    common.ifError(t, err, 'reprovision VM');
+
+                    cb(err);
+                }
+            );
+        }, function (cb) {
+            VM.load(state.uuid, {}, function (err, obj) {
+                common.ifError(t, err, 'reload VM after reprovision');
+
+                t.equal(obj.zfs_root_compression, p.zfs_root_compression,
+                    'zfs_root_compression set properly');
 
+                cb(err);
+            });
+        }
+    ]);
 });
