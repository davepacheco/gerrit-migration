From 74235f850a3089d2e6bd0c54bd53dd093d99ec1c Mon Sep 17 00:00:00 2001
From: David Pacheco <dap@joyent.com>
Date: Mon, 5 Dec 2016 17:30:29 -0800
Subject: [PATCH] MORAY-381 want default values with cueballOptions MORAY-380
 translateLegacyOptions not setting "service"

---
 lib/client.js | 309 +++++++++++++++++++++++++++++++++-----------------
 package.json  |   2 +-
 2 files changed, 207 insertions(+), 104 deletions(-)

diff --git a/lib/client.js b/lib/client.js
index 89c935a..685bc07 100644
--- a/lib/client.js
+++ b/lib/client.js
@@ -39,12 +39,19 @@ var dflClientMaxConnections = 15;
 var dflClientMaxDnsConcurrency = 3;
 var dflClientConnectRetries = 5;
 var dflClientConnectTimeout = 2000;     /* milliseconds */
+var dflClientConnectTimeoutMax = 30000; /* milliseconds */
 var dflClientDnsTimeout = 1000;         /* milliseconds */
+var dflClientDnsTimeoutMax = 20000;     /* milliseconds */
 var dflClientDnsDelayMin = 10;          /* milliseconds */
 var dflClientDnsDelayMax = 10000;       /* milliseconds */
 var dflClientDelayMin = 1000;           /* milliseconds */
 var dflClientDelayMax = 60000;          /* milliseconds */
 
+/* "service" associated with Moray DNS SRV records */
+var dflClientCueballService = '_moray._tcp';
+/* default TCP port for Moray servers */
+var dflClientCueballDefaultPort = 2020;
+
 var fastNRecentRequests = 30;
 var dflClientTcpKeepAliveIdle = 10000;  /* milliseconds */
 
@@ -164,145 +171,234 @@ function translateLegacyOptions(options) {
             port = options.port;
         } else if (u.port) {
             port = u.port;
-        } else {
-            port = 2020;
         }
 
-        port = parseInt(port, 10);
-        assert.ok(!isNaN(port), 'port must be a number');
+        if (port !== undefined) {
+            port = parseInt(port, 10);
+            assert.ok(!isNaN(port), 'port must be a number');
+        }
     } else {
         host = options.host;
         port = options.port;
     }
 
     assert.string(host, 'options.host');
-    assert.number(port, 'options.port');
+    assert.optionalNumber(port, 'options.port');
     assert.optionalNumber(options.maxConnections, 'options.maxConnections');
     assert.optionalNumber(options.connectTimeout, 'options.connectTimeout');
     assert.optionalObject(options.retry, 'options.retry');
     assert.optionalObject(options.dns, 'options.dns');
 
+    /*
+     * "domain" is the only required option.  We'll fill in other options whose
+     * legacy analogs are specified by our caller.  At the end, we'll use
+     * normalizeCueballOptions() to fill in any values that the user didn't
+     * specify but for which we do want to provide values (e.g., "service").
+     */
     cueballOptions = {
-        /* Resolver parameters */
-        'domain': host,
-        'maxDNSConcurrency': dflClientMaxDnsConcurrency,
-        'defaultPort': port,
-
-        /* ConnectionSet parameters */
-        'target': dflClientTargetConnections,
-        'maximum': options.maxConnections || dflClientMaxConnections,
-
-        /* Shared parameters */
-        'recovery': {}
+        'domain': host
     };
 
-    if (cueballOptions.maximum < cueballOptions.target) {
-        cueballOptions.target = cueballOptions.maximum;
+    if (typeof (port) == 'number') {
+        cueballOptions.defaultPort = port;
     }
 
-    /*
-     * DNS configuration: The delay and maxDelay values used in the previous
-     * implementation were historically hardcoded to the same values that we use
-     * use as defaults now.
-     */
-    r = cueballOptions.recovery.dns = {
-        'retries': dflClientConnectRetries,
-        'timeout': dflClientDnsTimeout,
-        'delay': dflClientDnsDelayMin,
-        'maxDelay': dflClientDnsDelayMax
-    };
+    if (typeof (options.maxConnections) == 'number') {
+        cueballOptions.maximum = options.maxConnections;
+        cueballOptions.target = Math.min(
+            dflClientTargetConnections, cueballOptions.maximum);
+    }
 
     if (options.dns) {
+        assert.optionalArrayOfString(options.dns.resolvers,
+            'options.dns.resolvers');
         if (Array.isArray(options.dns.resolvers)) {
-            assert.arrayOfString(options.dns.resolvers,
-                'options.dns.resolvers');
             cueballOptions.resolvers = options.dns.resolvers.slice(0);
         }
-
-        if (options.dns.timeout) {
-            assert.number(options.dns.timeout, 'options.dns.timeout');
-            assert.ok(options.dns.timeout >= 0,
-                'dns timeout must be non-negative');
-            r.timeout = options.dns.timeout;
-        }
     }
 
     /*
-     * Right or wrong, the legacy behavior was that the timeout for each
-     * request never increased.
+     * Most of the time, we expect to use our default recovery options.  If the
+     * user specified options that override some of those defaults, we need to
+     * respect those while still providing defaults for other options.  We'll
+     * start with the defaults and override only what the user asked for.
      */
-    r.maxTimeout = r.timeout;
+    r = cueballOptions.recovery = cueballDefaultRecovery();
+    if (options.dns && typeof (options.dns.timeout) == 'number') {
+        assert.number(options.dns.timeout, 'options.dns.timeout');
+        assert.ok(options.dns.timeout >= 0, 'dns timeout must be non-negative');
+        r.dns.timeout = options.dns.timeout;
+        r.dns_srv.timeout = options.dns.timeout;
 
-    /*
-     * DNS SRV configuration: SRV should fail fast, since it's not widely
-     * deployed yet.
-     */
-    cueballOptions.recovery.dns_srv = jsprim.deepCopy(
-        cueballOptions.recovery.dns);
-    cueballOptions.recovery.dns_srv.retries = 0;
+        /*
+         * In the old implementation, the timeout never increased.  Based on
+         * experience, that's not reasonable default behavior, so we'll try to
+         * use our default maximum unless that's too small.
+         */
+        if (r.dns.maxTimeout < r.dns.timeout) {
+            r.dns.maxTimeout = r.dns.timeout;
+            r.dns_srv.maxTimeout = r.dns.maxTimeout;
+        }
+    }
 
-    /*
-     * Default recovery configuration: we specify a 'default' recovery in
-     * the cueball options that will cover both the initial connect attempt
-     * and subsequent connect attempts.
-     */
-    r = cueballOptions.recovery.default = {};
     if (typeof (options.connectTimeout) == 'number') {
         assert.ok(options.connectTimeout >= 0,
             'connect timeout must be non-negative');
-        r.timeout = options.connectTimeout;
-    } else {
-        r.timeout = dflClientConnectTimeout;
+        r.default.timeout = options.connectTimeout;
+        if (r.default.maxTimeout < r.default.timeout) {
+            r.default.maxTimeout = r.default.timeout;
+        }
     }
 
-    /*
-     * As with DNS requests, connection operations historically used a fixed
-     * timeout value.
-     */
-    r.maxTimeout = r.timeout;
-
     if (options.retry) {
         assert.optionalNumber(options.retry.retries, 'options.retry.retries');
         if (typeof (options.retry.retries) == 'number') {
-            r.retries = options.retry.retries;
-        } else {
-            r.retries = dflClientConnectRetries;
+            r.default.retries = options.retry.retries;
         }
 
         /*
-         * It's confusing, but the "timeout" for a retry policy is
-         * really a delay.
+         * In the legacy interface, the retry policy is specified in terms of
+         * timeouts.  Those timeout values really describe the delay between
+         * attempts, which we now call "delay".
          */
         assert.optionalNumber(options.retry.minTimeout,
             'options.retry.minTimeout');
         if (typeof (options.retry.minTimeout) == 'number') {
-            r.delay = options.retry.minTimeout;
+            r.default.delay = options.retry.minTimeout;
 
             if (typeof (options.retry.maxTimeout) == 'number') {
                 assert.ok(options.retry.maxTimeout >=
                     options.retry.minTimeout,
                     'retry.maxTimeout must not be smaller ' +
                     'than retry.minTimeout');
-                r.maxDelay = options.retry.maxTimeout;
+                r.default.maxDelay = options.retry.maxTimeout;
             } else {
-                r.delay = options.retry.minTimeout;
-                r.maxDelay = Math.max(r.delay, dflClientDelayMax);
+                r.default.delay = options.retry.minTimeout;
+                if (r.default.maxDelay < r.default.delay) {
+                    r.default.maxDelay = r.default.delay;
+                }
             }
         } else if (typeof (options.retry.maxTimeout) == 'number') {
-            r.maxDelay = options.retry.maxTimeout;
-            r.delay = Math.min(dflClientDelayMin, r.maxDelay);
-        } else {
-            r.delay = dflClientDelayMin;
-            r.maxDelay = dflClientDelayMax;
+            r.default.maxDelay = options.retry.maxTimeout;
+            if (r.default.delay > r.default.maxDelay) {
+                r.default.delay = r.default.maxDelay;
+            }
         }
 
-        assert.number(r.delay);
-        assert.number(r.maxDelay);
-        assert.ok(r.delay <= r.maxDelay);
+        assert.number(r.default.delay);
+        assert.number(r.default.maxDelay);
+        assert.ok(r.default.delay <= r.default.maxDelay);
     } else {
-        r.retries = 0;
-        r.delay = 0;
-        r.maxDelay = r.delay;
+        r.default.retries = 0;
+        r.default.delay = 0;
+        r.default.maxDelay = 0;
+    }
+
+    return (normalizeCueballOptions(cueballOptions));
+}
+
+/*
+ * Returns a default "recovery" object to be used with new Cueball clients.
+ * Note that this function is used by translateLegacyOptions(), which relies on
+ * the fact that for values configured by legacy properties (e.g., DNS request
+ * timeout), the default values provided here match the defaults of the legacy
+ * implementation.
+ */
+function cueballDefaultRecovery() {
+    var rv = {};
+
+    /*
+     * The 'default' recovery option will cover both the initial connect attempt
+     * and subsequent connect attempts.
+     *
+     */
+    rv = {};
+    rv.default = {
+        'retries': dflClientConnectRetries,
+        'timeout': dflClientConnectTimeout,
+        'maxTimeout': dflClientConnectTimeoutMax,
+        'delay': dflClientDelayMin,
+        'maxDelay': dflClientDelayMax
+    };
+
+    rv.dns = {
+        'retries': dflClientConnectRetries,
+        'timeout': dflClientDnsTimeout,
+        'maxTimeout': dflClientDnsTimeoutMax,
+        'delay': dflClientDnsDelayMin,
+        'maxDelay': dflClientDnsDelayMax
+    };
+
+    /*
+     * DNS SRV requests should fail fast since it's not deployed everywhere yet.
+     */
+    rv.dns_srv = jsprim.deepCopy(rv.dns);
+    rv.dns_srv.retries = 0;
+    return (rv);
+}
+
+/*
+ * Given a set of cueball options provided by an end user or constructed in
+ * translateLegacyOptions(), fill out any additional properties that cueball
+ * requires (or that we just want to make sure are filled in) with default
+ * values.
+ */
+function normalizeCueballOptions(uoptions) {
+    var cueballOptions, havetarget, havemax;
+
+    assert.object(uoptions, 'cueballOptions');
+    assert.string(uoptions.domain, 'cueballOptions.domain');
+
+    cueballOptions = jsprim.deepCopy(uoptions);
+
+    /*
+     * The "defaultPort", "service", and "maxDNSConcurrency" properties are
+     * simple: we want to supply our own defaults if they're not specified.
+     */
+    assert.optionalNumber(cueballOptions.defaultPort,
+        'cueballOptions.defaultPort');
+    if (!jsprim.hasKey(cueballOptions, 'defaultPort')) {
+        cueballOptions.defaultPort = dflClientCueballDefaultPort;
+    }
+
+    assert.optionalString(cueballOptions.service, 'cueballOptions.service');
+    if (!jsprim.hasKey(cueballOptions, 'service')) {
+        cueballOptions.service = dflClientCueballService;
+    }
+
+    assert.optionalNumber(cueballOptions.maxDNSConcurrency,
+        'cueballOptions.maxDNSConcurrency');
+    if (!jsprim.hasKey(cueballOptions, 'maxDNSConcurrency')) {
+        cueballOptions.maxDNSConcurrency = dflClientMaxDnsConcurrency;
+    }
+
+    /*
+     * For "target" and "maximum", we demand that if the user specify one, then
+     * they ought to specify both.  We could relax this and say that if only one
+     * is specified, we'll pick a default for the other, but at this point it
+     * seems clearer to require the consumer to specify both (and it seems no
+     * harder for the them, either).
+     */
+    assert.optionalNumber(cueballOptions.target, 'cueballOptions.target');
+    assert.optionalNumber(cueballOptions.maximum, 'cueballOptions.maximum');
+    havetarget = jsprim.hasKey(cueballOptions, 'target');
+    havemax = jsprim.hasKey(cueballOptions, 'maximum');
+    if ((havetarget && !havemax) || (!havetarget && havemax)) {
+        throw (new Error(
+            'must specify either or both of "target" and "maximum"'));
+    }
+
+    if (!havetarget) {
+        cueballOptions.target = dflClientTargetConnections;
+        cueballOptions.maximum = dflClientMaxConnections;
+    }
+
+    /*
+     * Similarly, if the caller specified "recovery" at all, we will assume
+     * they completely specified what they want and we will not mess with it.
+     */
+    if (!jsprim.hasKey(cueballOptions, 'recovery')) {
+        cueballOptions.recovery = cueballDefaultRecovery();
     }
 
     return (cueballOptions);
@@ -346,9 +442,12 @@ function translateLegacyOptions(options) {
  *                     not be specified here.
  *
  * or some combination of legacy options documented with
- * translateLegacyOptions() above.  It's strongly recommended that new consumers
- * use the "cueballOptions" approach because it's much less confusing and allows
- * specifying additional important parameters.
+ * translateLegacyOptions() above.
+ *
+ * NOTE: It's expected that the vast majority of consumers will only need to
+ * specify "cueballOptions.domain" (or "host") and potentially "resolvers" (if
+ * using resolver bootstrap mode).  Default values ought to work for the port,
+ * DNS service, and all the various timeouts, delays, and retry limits.
  *
  * You may also specify:
  *
@@ -384,7 +483,7 @@ function translateLegacyOptions(options) {
  *                      This is useful for making sure that client consumers
  *                      clean up after themselves.
  *
- * A sample invocation:
+ * A sample server invocation might look like this:
  *
  *     var client = moray.createClient({
  *         'log': bunyan.createLogger({
@@ -393,22 +492,24 @@ function translateLegacyOptions(options) {
  *             'stream': process.stdout
  *         }),
  *         'cueballOptions': {
- *             'domain': 'moray.mydatacenter.joyent.us',
- *             'maxDNSConcurrency': 3,
- *             'defaultPort': 2020,
- *             'target': 6,
- *             'maximum': 15,
- *             'recovery': {
- *                 'default': {
- *                     'retries': 5,
- *                     'timeout': 2000,
- *                     'maxTimeout': 10000,
- *                     'delay': 1000,
- *                     'maxDelay': 60000
- *                 }
- *             }
+ *             'domain': 'moray.mydatacenter.joyent.us'
  *         }
  *     });
+ *
+ * And a CLI invocation might look like this:
+ *
+ *     var client = moray.createClient({
+ *         'log': bunyan.createLogger({
+ *             'name': 'MorayClient',
+ *             'level': process.env.LOG_LEVEL || 'debug',
+ *             'stream': process.stdout
+ *         }),
+ *         'cueballOptions': {
+ *             'domain': 'moray.mydatacenter.joyent.us'
+ *         },
+ *         'failFast': true,
+ *         'mustCloseBeforeNormalProcessExit': true,
+ *     });
  */
 function MorayClient(options) {
     var self = this;
@@ -450,6 +551,7 @@ function MorayClient(options) {
     }
 
     assert.string(cueballOptions.domain, 'cueballOptions.domain');
+    cueballOptions = normalizeCueballOptions(cueballOptions);
 
     /* Read-only metadata used for toString() and the like. */
     this.hostLabel = cueballOptions.domain;
@@ -1414,10 +1516,11 @@ MorayRpcContext.prototype.createLog = function createLog(options) {
 ///--- Exports
 
 /*
- * Expose translateLegacyOptions privately for testing, not for the outside
- * world.
+ * Expose translateLegacyOptions and normalizeCueballOptions privately for
+ * testing, not for the outside world.
  */
 MorayClient.privateTranslateLegacyOptions = translateLegacyOptions;
+MorayClient.privateNormalizeCueballOptions = normalizeCueballOptions;
 
 module.exports = {
     Client: MorayClient
diff --git a/package.json b/package.json
index 1efe38a..2177b63 100644
--- a/package.json
+++ b/package.json
@@ -17,7 +17,7 @@
         "cueball": "^1.0.3",
         "fast": "^2.1.0",
         "libuuid": "0.2.1",
-        "jsprim": "^1.2.2",
+        "jsprim": "^1.3.0",
         "posix-getopt": "^1.0.0",
         "progbar": "0.1.0",
         "vasync": "^1.6.4",
-- 
2.21.0

