commit 18dff0cef1268dfb4fb5fc2de84b89d2e55e1295 (refs/changes/32/932/4)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2016-11-24T00:01:24+00:00 (2 years, 10 months ago)
    
    joyent/node-cueball#46 want filter to restrict connection drop rate
    Reviewed by: Cody Peter Mello <cody.mello@joyent.com>

diff --git a/lib/pool.js b/lib/pool.js
index 5c705d0..655e75d 100644
--- a/lib/pool.js
+++ b/lib/pool.js
@@ -30,6 +30,71 @@ const EventEmitter = mod_events.EventEmitter;
 const Queue = require('./queue');
 const ConnectionFSM = require('./connection-fsm');
 
+/*
+ * Parameters for the EMA/low-pass filter that is used to limit pool shrinkage
+ * under sustained load. The idea is to stop the pool from shrinking too
+ * rapidly if the average load has been high recently. This stops us from
+ * over-reacting to small transients in load and generally stablizes behavior.
+ */
+/* Sample rate of the filter, in Hz. */
+var LP_RATE = 5;
+/* One sampling interval. */
+var LP_INT = Math.round(1000 / LP_RATE);
+/* The filter taps array. See below for parameters' meaning. */
+var LP_TAPS = genTaps(128, -0.2);
+
+/*
+ * Generates a set of EMA taps: count is the number of taps to generate, and
+ * tc is the value of the time constant of decay. This should be negative
+ * and fractional. The closer it gets to 0.0 (while remaining negative), the
+ * lower its low-pass cutoff frequency will be and the sharper the filter
+ * roll-off becomes.
+ *
+ * A tc of -0.2 at 5Hz creates an EMA filter with a pass band extending out
+ * to about 0.25Hz (4-second period), -10dB point at 0.5Hz, -20dB point at
+ * 2.5Hz. This means that the filter reacts most strongly to trends with
+ * principal components of around 4 seconds period or more -- any faster
+ * trends will be gradually suppressed, and for trends of 400ms or less, down
+ * to about 1% of their original magnitude.
+ */
+function genTaps(count, tc) {
+	var taps = new Float64Array(count);
+	var sum = 0.0;
+	for (var i = 0; i < count; ++i) {
+		taps[i] = Math.exp(tc * i);
+		sum += taps[i];
+	}
+	for (i = 0; i < count; ++i) {
+		taps[i] /= sum;
+	}
+	return (taps);
+}
+
+/* A simple FIR filter with a circular buffer. */
+function FIRFilter(taps) {
+	this.f_taps = taps;
+	this.f_buf = new Float64Array(taps.length);
+	this.f_ptr = 0;
+}
+FIRFilter.prototype.put = function (v) {
+	this.f_buf[this.f_ptr++] = v;
+	/* Wrap around to zero if we go off the end. */
+	if (this.f_ptr === this.f_taps.length)
+		this.f_ptr = 0;
+};
+FIRFilter.prototype.get = function () {
+	var i = this.f_ptr - 1;
+	if (i < 0)
+		i += this.f_taps.length;
+	var acc = 0.0;
+	for (var j = 0; j < this.f_taps.length; ++j) {
+		acc += this.f_buf[i] * this.f_taps[j];
+		if (--i < 0)
+			i += this.f_taps.length;
+	}
+	return (acc);
+};
+
 /*
  * A ConnectionPool holds a pool of ConnectionFSMs that are kept up to date
  * based on the output of a Resolver. At any given time the pool may contain:
@@ -104,6 +169,7 @@ function CueBallConnectionPool(options) {
 	this.p_inRebalance = false;
 	this.p_rebalScheduled = false;
 	this.p_startedResolver = false;
+	this.p_lpf = new FIRFilter(LP_TAPS);
 
 	this.p_idleq = new Queue();
 	this.p_initq = new Queue();
@@ -145,6 +211,22 @@ function CueBallConnectionPool(options) {
 	}, 60000);
 	this.p_shuffleTimerInst.unref();
 
+	this.p_lastRebalClamped = false;
+
+	this.p_lpTimer = setInterval(function () {
+		var conns = 0;
+		Object.keys(self.p_connections).forEach(function (k) {
+			conns += self.p_connections[k].length;
+		});
+		var spares = self.p_idleq.length + self.p_initq.length;
+		var busy = conns - spares;
+		self.p_lpf.put(busy + self.p_spares);
+
+		if (self.p_lastRebalClamped)
+			self.rebalance();
+	}, LP_INT);
+	this.p_lpTimer.unref();
+
 	FSM.call(this, 'starting');
 }
 mod_util.inherits(CueBallConnectionPool, FSM);
@@ -344,6 +426,7 @@ CueBallConnectionPool.prototype.state_stopped = function (S) {
 	this.p_backends = {};
 	clearInterval(this.p_rebalTimerInst);
 	clearInterval(this.p_shuffleTimerInst);
+	clearInterval(this.p_lpTimer);
 };
 
 CueBallConnectionPool.prototype.shouldRetryBackend = function (backend) {
@@ -420,6 +503,15 @@ CueBallConnectionPool.prototype._rebalance = function () {
 		extras = 0;
 
 	var target = busy + extras + this.p_spares;
+
+	var min = Math.ceil(this.p_lpf.get());
+	if (target < min * 1.05) {
+		target = min;
+		this.p_lastRebalClamped = true;
+	} else {
+		this.p_lastRebalClamped = false;
+	}
+
 	if (target > this.p_max)
 		target = this.p_max;
 
@@ -599,6 +691,8 @@ CueBallConnectionPool.prototype.claim = function (options, cb) {
 	mod_assert.optionalBool(options.errorOnEmpty, 'options.errorOnEmpty');
 	var errOnEmpty = options.errorOnEmpty;
 
+	this._incrCounter('claim');
+
 	if (this.isInState('stopping') || this.isInState('stopped')) {
 		setImmediate(function () {
 			if (!done)
diff --git a/package.json b/package.json
index ddd4283..dde05e3 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "cueball",
-  "version": "1.1.5",
+  "version": "1.1.6",
   "description": "",
   "main": "lib/index.js",
   "dependencies": {
