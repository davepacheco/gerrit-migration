From cb460917025216cc2f21a911d067ab0be2ed66bc Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Tue, 27 Jun 2017 14:50:17 -0700
Subject: [PATCH] joyent/node-cueball#113 spurious error handler leak warnings
 when using Agent

---
 CHANGES.adoc          |  9 +++++++++
 lib/agent.js          | 38 ++++++++++++++++++++++++++++++++++----
 lib/connection-fsm.js |  8 ++++++++
 package.json          |  2 +-
 4 files changed, 52 insertions(+), 5 deletions(-)

diff --git a/CHANGES.adoc b/CHANGES.adoc
index 9222e4a..56e719d 100644
--- a/CHANGES.adoc
+++ b/CHANGES.adoc
@@ -6,6 +6,15 @@ toc::[]
 
 ## v2.x
 
+### v2.2.8
+
+Maintenance release.
+
+Bugs fixed:
+
+ - #113 spurious error handler leak warnings when using Agent. This is also
+   MANTA-3331 and MANTA-3204
+
 ### v2.2.7
 
 Maintenance release.
diff --git a/lib/agent.js b/lib/agent.js
index d5362a5..4c58c65 100644
--- a/lib/agent.js
+++ b/lib/agent.js
@@ -287,6 +287,7 @@ CueBallAgent.prototype.addRequest = function (req, optionsOrHost, port) {
 		}
 		sock = socket;
 		conn = connh;
+
 		socket.once('free', onFree);
 		socket.once('close', onClose);
 		socket.once('agentRemove', onAgentRemove);
@@ -297,6 +298,31 @@ CueBallAgent.prototype.addRequest = function (req, optionsOrHost, port) {
 		sock.removeListener('free', onFree);
 		sock.removeListener('agentRemove', onAgentRemove);
 		req.removeListener('abort', onAbort);
+		/*
+		 * The node http framework (especially in 0.10.x) can leave
+		 * handlers on socket events when the socket has closed and the
+		 * request completed normally (e.g. the remote server doesn't
+		 * support keep-alive, or we exceeded its maximum time).
+		 *
+		 * To avoid a spurious warning here, we disable the handler
+		 * leak check.
+		 */
+		conn.disableReleaseLeakCheck();
+		/*
+		 * Unfortunately, there is no way to distinguish between a
+		 * 'close' event coming out of a socket where the request
+		 * succeeded, and one coming out of a socket where it closed
+		 * prematurely and the HTTP-level request failed. Node does not
+		 * actually have any way to tell the difference between these
+		 * (and actually doesn't know whether a request "ended early"
+		 * at all, since it doesn't keep track of Content-Length
+		 * properly, especially in 0.10.x).
+		 *
+		 * As a result, if we get a 'close' event before any other
+		 * event happens, we give it the benefit of the doubt and
+		 * don't induce a cueball-level backoff. We do this by always
+		 * calling .release() instead of .close() on the handle here.
+		 */
 		conn.release();
 		conn = undefined;
 		sock = undefined;
@@ -324,13 +350,17 @@ CueBallAgent.prototype.addRequest = function (req, optionsOrHost, port) {
 		conn = undefined;
 		sock = undefined;
 	}
+	/*
+	 * Called when the http framework wants to notify us that the request
+	 * did an Upgrade or similar, and the socket is now being used for
+	 * other purposes (and won't be available for more HTTP requests).
+	 *
+	 * We keep the lease open until 'close' is emitted, and take off all
+	 * our other handlers.
+	 */
 	function onAgentRemove() {
-		sock.removeListener('close', onClose);
 		sock.removeListener('free', onFree);
 		req.removeListener('abort', onAbort);
-		conn.close();
-		conn = undefined;
-		sock = undefined;
 	}
 };
 
diff --git a/lib/connection-fsm.js b/lib/connection-fsm.js
index ea9db76..4588ebf 100644
--- a/lib/connection-fsm.js
+++ b/lib/connection-fsm.js
@@ -498,6 +498,7 @@ function CueBallClaimHandle(options) {
 	this.ch_preListeners = {};
 	this.ch_cancelled = false;
 	this.ch_lastError = undefined;
+	this.ch_doReleaseLeakCheck = true;
 
 	FSM.call(this, 'waiting');
 }
@@ -515,6 +516,10 @@ Object.defineProperty(CueBallClaimHandle.prototype, 'readable', {
 	}
 });
 
+CueBallClaimHandle.prototype.disableReleaseLeakCheck = function () {
+	this.ch_doReleaseLeakCheck = false;
+};
+
 CueBallClaimHandle.prototype.on = function (evt) {
 	if (evt === 'readable' || evt === 'close') {
 		throw (new mod_errors.ClaimHandleMisusedError());
@@ -686,6 +691,9 @@ CueBallClaimHandle.prototype.state_claimed = function (S) {
 CueBallClaimHandle.prototype.state_released = function (S) {
 	S.validTransitions([]);
 
+	if (!this.ch_doReleaseLeakCheck)
+		return;
+
 	var conn = this.ch_connection;
 	var self = this;
 
diff --git a/package.json b/package.json
index 375f01a..ee0b65c 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "cueball",
-  "version": "2.2.7",
+  "version": "2.2.8",
   "description": "manage a pool of connections to a multi-node service where nodes are listed in DNS",
   "main": "lib/index.js",
   "dependencies": {
-- 
2.21.0

