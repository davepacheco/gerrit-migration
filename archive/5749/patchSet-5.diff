commit 10d01499dc302f501c63949a7c7d8c7e6c148470
Author: YanChii <janci@binaryparadise.com>
Date:   2019-04-08T23:16:53+00:00 (6 months ago)
    
    fix live migration

diff --git a/qemu-kvm-x86.c b/qemu-kvm-x86.c
index cb3dad0..71ea482 100644
--- a/qemu-kvm-x86.c
+++ b/qemu-kvm-x86.c
@@ -508,7 +508,10 @@ int kvm_arch_qemu_create_context(void)
     struct utsname utsname;
 
     uname(&utsname);
-    lm_capable_kernel = strcmp(utsname.machine, "x86_64") == 0;
+    if(strcmp(utsname.sysname, "SunOS") == 0)
+        lm_capable_kernel = 1;
+    else
+        lm_capable_kernel = strcmp(utsname.machine, "x86_64") == 0;
 
     if (kvm_shadow_memory) {
         kvm_set_shadow_pages(kvm_context, kvm_shadow_memory);
@@ -723,11 +726,12 @@ void kvm_arch_push_nmi(void *opaque)
 static int kvm_reset_msrs(CPUState *env)
 {
     struct {
-        struct kvm_msrs info;
+        uint32_t nmsrs; /* number of msrs in entries */
+        uint32_t pad;
         struct kvm_msr_entry entries[100];
-    } msr_data;
+    } kvm_msrs;
     int n;
-    struct kvm_msr_entry *msrs = msr_data.entries;
+    struct kvm_msr_entry *msrs = kvm_msrs.entries;
     uint32_t index;
     uint64_t data;
 
@@ -747,9 +751,9 @@ static int kvm_reset_msrs(CPUState *env)
         kvm_msr_entry_set(&msrs[n], kvm_msr_list->indices[n], data);
     }
 
-    msr_data.info.nmsrs = n;
+    kvm_msrs.nmsrs = n;
 
-    return kvm_vcpu_ioctl(env, KVM_SET_MSRS, &msr_data);
+    return kvm_vcpu_ioctl(env, KVM_SET_MSRS, &kvm_msrs);
 }
 
 
diff --git a/target-i386/kvm.c b/target-i386/kvm.c
index 8f28911..a870947 100644
--- a/target-i386/kvm.c
+++ b/target-i386/kvm.c
@@ -837,10 +837,11 @@ static void kvm_msr_entry_set(struct kvm_msr_entry *entry,
 static int kvm_put_msrs(CPUState *env, int level)
 {
     struct {
-        struct kvm_msrs info;
+        uint32_t nmsrs; /* number of msrs in entries */
+        uint32_t pad;
         struct kvm_msr_entry entries[100];
-    } msr_data;
-    struct kvm_msr_entry *msrs = msr_data.entries;
+    } kvm_msrs;
+    struct kvm_msr_entry *msrs = kvm_msrs.entries;
     int n = 0;
 
     kvm_msr_entry_set(&msrs[n++], MSR_IA32_SYSENTER_CS, env->sysenter_cs);
@@ -903,9 +904,9 @@ static int kvm_put_msrs(CPUState *env, int level)
     }
 #endif
 
-    msr_data.info.nmsrs = n;
+    kvm_msrs.nmsrs = n;
 
-    return kvm_vcpu_ioctl(env, KVM_SET_MSRS, &msr_data);
+    return kvm_vcpu_ioctl(env, KVM_SET_MSRS, &kvm_msrs);
 
 }
 
@@ -1091,10 +1092,11 @@ static int kvm_get_sregs(CPUState *env)
 static int kvm_get_msrs(CPUState *env)
 {
     struct {
-        struct kvm_msrs info;
+        uint32_t nmsrs; /* number of msrs in entries */
+        uint32_t pad;
         struct kvm_msr_entry entries[100];
-    } msr_data;
-    struct kvm_msr_entry *msrs = msr_data.entries;
+    } kvm_msrs;
+    struct kvm_msr_entry *msrs = kvm_msrs.entries;
     int ret, i, n;
 
     n = 0;
@@ -1134,8 +1136,8 @@ static int kvm_get_msrs(CPUState *env)
     }
 #endif
 
-    msr_data.info.nmsrs = n;
-    ret = kvm_vcpu_ioctl(env, KVM_GET_MSRS, &msr_data);
+    kvm_msrs.nmsrs = n;
+    ret = kvm_vcpu_ioctl(env, KVM_GET_MSRS, &kvm_msrs);
     if (ret < 0) {
         return ret;
     }
