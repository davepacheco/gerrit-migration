From 3862932fdf585f373243cd8dedc9a2f4e4365015 Mon Sep 17 00:00:00 2001
From: Todd Whiteman <todd.whiteman@joyent.com>
Date: Thu, 20 Jun 2019 10:30:38 -0700
Subject: [PATCH] TRITON-1721 migration needs a cleanup command

---
 docs/index.md               |  28 +++++++-
 lib/vm-migration/migrate.js | 139 +++++++++++++++++++++++++++++++++++-
 package.json                |   2 +-
 test/lib/migration.js       |  87 ++++++++++++++--------
 4 files changed, 219 insertions(+), 37 deletions(-)

diff --git a/docs/index.md b/docs/index.md
index afeb83e..3d54d9c 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -2361,7 +2361,7 @@ Starts the specified migration action.
 
 Param            | Type     | Description
 ---------------- | -------- | -----------
-migration_action | String   | One of "begin", "sync", "switch", "pause" or "abort".
+migration_action | String   | One of "begin", "sync", "switch", "pause", "abort" or "finalize".
 
 ### Optional Inputs
 
@@ -2410,6 +2410,12 @@ This action is only actionable when the migration is paused or failed. It is
 used to abort the migration, removing the target placeholder vm and ensuring the
 source vm is returned to it's original state.
 
+### Migrate Finalize
+
+The "finalize" action will remove (decommission) the original source vm (which
+was hidden during the "switch" action). Finalize will return a 200 status code
+when successful and the migration record will have been removed.
+
 ### VmMigrate Response
 
 On a successful response, a [Migration Job Response Object](#migration-job-response-object) is
@@ -2418,11 +2424,12 @@ follow the progress of the migration.
 
 Code     | Description                                                                  | Response
 -------- | ---------------------------------------------------------------------------- | ------------------
-202      | New job created                                                              | VM job response object
+200      | Action was successful                                                        | None
+202      | New job created, use migration watch to track the progress                   | VM job response object
 404      | VM Not Found. VM does not exist or VM does not belong to the specified owner | Error object
 409      | VM failed to validate.                                                       | Error object
 
-#### Example
+#### Examples
 
     POST /vms/e9bd0ed1-7de3-4c66-a649-d675dbce6e83?action=migrate&migration_action=begin
 
@@ -2445,6 +2452,21 @@ Code     | Description
       }
     }
 
+    POST /vms/e9bd0ed1-7de3-4c66-a649-d675dbce6e83?action=migrate&migration_action=finalize
+
+    HTTP/1.1 200 OK
+    Connection: close
+    Content-Type: application/json
+    Content-Length: 2
+    Content-MD5: bs77tdERx4Kj7igpE33AbZ==
+    Date: Mon, 24 Apr 2019 10:30:00 GMT
+    Server: VMAPI
+    x-request-id: d169bbdf-a54c-4f71-a543-8928cda5b152
+    x-response-time: 1970
+    x-server-name: d6334b70-2e19-4af4-85ba-53776ef82820
+
+    {}
+
 ### Migration Job Response Object
 
 Most migration actions on a VM will result in a new Job being created on the
diff --git a/lib/vm-migration/migrate.js b/lib/vm-migration/migrate.js
index 485421b..3e6f9ef 100644
--- a/lib/vm-migration/migrate.js
+++ b/lib/vm-migration/migrate.js
@@ -33,6 +33,7 @@ var VALID_MIGRATION_ACTIONS = [
     'abort',
     'begin',
     'estimate',
+    'finalize',
     'pause',
     'switch',
     'sync'
@@ -84,9 +85,14 @@ function validateMigrationBegin(vm, ctx, callback) {
             disallowRetry = false;
         }
 
-        if (ctx.migrationRecord.state !== 'successful' &&
-                ctx.migrationRecord.state !== 'aborted' &&
-                disallowRetry) {
+        if (ctx.migrationRecord.state === 'successful') {
+            callback(new restify.errors.PreconditionFailedError(
+                'A previous migration exists for this instance, use ' +
+                'migration finalize to complete it.'));
+            return;
+        }
+
+        if (ctx.migrationRecord.state !== 'aborted' && disallowRetry) {
             callback(new restify.errors.PreconditionFailedError(
                 'An active migration already exists for this instance'));
             return;
@@ -211,6 +217,101 @@ function migrationEstimate(req, callback) {
     });
 }
 
+function migrationFinalize(req, migrationRecord, callback) {
+    assert.object(req, 'req');
+    assert.object(req.vm, 'req.vm');
+    assert.object(req.app.cnapi, 'req.app.cnapi');
+    assert.object(req.app.cnapi.client, 'req.app.cnapi.client');
+    assert.object(migrationRecord, 'migrationRecord');
+    assert.func(callback, 'callback');
+
+    var errMsg = 'Migration finalize failed';
+    var headers = {'x-request-id': req.getId()};
+    var timeout = 15 * 60 * 1000; // 15 minutes
+
+    vasync.pipeline({arg: {}, funcs: [
+        function cnapiDeleteSourceVmRequest(ctx, cb) {
+            var delOpts = {
+                headers: headers,
+                path: '/servers/' + migrationRecord.source_server_uuid +
+                    '/vms/' + migrationRecord.vm_uuid + '?include_dni=true'
+            };
+
+            req.app.cnapi.client.del(delOpts,
+                    function _cnapiDeleteCb(err, cnReq, cnRes, task) {
+                // Allow a 404 "Vm not found" error - that makes our job easier.
+                if (err && err.statusCode !== 404) {
+                    cb(null, 'OK - target instance does not exist');
+                    return;
+                }
+
+                ctx.task = task;
+                cb();
+            });
+        },
+
+        function cnapiWaitDeleteTask(ctx, cb) {
+            if (!ctx.task || !ctx.task.id) {
+                cb();
+                return;
+            }
+
+            // Wait for the cnapi task to finish.
+            req.app.cnapi.waitTask(ctx.task.id, {timeout: timeout},
+                    function (waitErr, waitReq, waitRes, task) {
+                // Allow a 404 "Vm not found" error - that makes our job easier.
+                if (waitErr && waitErr.statusCode !== 404) {
+                    cb(waitErr);
+                    return;
+                }
+
+                if (!task) {
+                    cb();
+                    return;
+                }
+
+                if (task.status !== 'complete') {
+                    var errEntries;
+                    if (Array.isArray(task.history) && task.history.length) {
+                        errEntries = task.history.filter(function _histFilt(h) {
+                            return h.name === 'error';
+                        });
+                    }
+                    if (errEntries && errEntries.length) {
+                        errMsg += ': ' + errEntries.map(function _errMap(e) {
+                            if (e.event && e.event.error) {
+                                return e.event.error.message ||
+                                    String(e.event.error);
+                            }
+                            return String(e);
+                        }).join(', ');
+                    } else {
+                        errMsg += ' (task id ' + task.id + ')';
+                    }
+                    cb(new restify.errors.InternalError(errMsg));
+                    return;
+                }
+
+                if (!Array.isArray(task.history) ||
+                        task.history.length === 0 ||
+                        task.history.slice(-1)[0].name !== 'finish' ||
+                        !task.history.slice(-1)[0].event) {
+                    cb(new restify.errors.InternalError(
+                        errMsg + ': no cnapi task finish event'));
+                    return;
+                }
+
+                cb();
+            });
+        },
+
+        function removeMigrationRecord(ctx, cb) {
+            req.app.moray.delVmMigration(migrationRecord.id, cb);
+        }
+
+    ]}, callback);
+}
+
 /**
  * For migration, we must convert the existing vm nics into network objects,
  * which is then stored into req.params.networks. The reason for this is that
@@ -333,6 +434,13 @@ function migrateVm(req, res, next) {
                         return;
                     }
                     break;
+                case 'finalize':
+                    if (state !== 'successful') {
+                        cb(new restify.errors.PreconditionFailedError(
+                            'Finalize only works on a successful migration'));
+                        return;
+                    }
+                    break;
                 case 'pause':
                     if (phase !== 'sync' || state !== 'running') {
                         cb(new restify.errors.PreconditionFailedError(
@@ -420,8 +528,29 @@ function migrateVm(req, res, next) {
             });
         },
 
+        function do_migration_finalize(ctx, cb) {
+            assert.notEqual(action, 'estimate');
+
+            if (action !== 'finalize') {
+                cb();
+                return;
+            }
+
+            migrationFinalize(req, ctx.migrationRecord,
+                    function _migrationFinalizeCb(err) {
+                if (err) {
+                    cb(err);
+                    return;
+                }
+
+                res.send(200);
+                cb(OK_EARLY_ABORT);
+            });
+        },
+
         function do_get_image(ctx, cb) {
             assert.notEqual(action, 'estimate');
+            assert.notEqual(action, 'finalize');
 
             if (action !== 'begin') {
                 cb();
@@ -445,6 +574,7 @@ function migrateVm(req, res, next) {
 
         function do_get_package(ctx, cb) {
             assert.notEqual(action, 'estimate');
+            assert.notEqual(action, 'finalize');
 
             if (action !== 'begin') {
                 cb();
@@ -464,6 +594,7 @@ function migrateVm(req, res, next) {
 
         function abort_with_no_target_server_uuid(ctx, cb) {
             assert.notEqual(action, 'estimate');
+            assert.notEqual(action, 'finalize');
 
             if (action !== 'abort') {
                 cb();
@@ -517,6 +648,7 @@ function migrateVm(req, res, next) {
 
         function start_create_new_record(ctx, cb) {
             assert.notEqual(action, 'estimate');
+            assert.notEqual(action, 'finalize');
 
             if (action !== 'begin') {
                 cb();
@@ -574,6 +706,7 @@ function migrateVm(req, res, next) {
 
         function start_migration_workflow(ctx, cb) {
             assert.notEqual(action, 'estimate');
+            assert.notEqual(action, 'finalize');
 
             req.migrationTask = {
                 action: action,
diff --git a/package.json b/package.json
index 17956c9..ccaa4c6 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "vmapi",
   "description": "VMs API",
-  "version": "9.8.11",
+  "version": "9.8.12",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
diff --git a/test/lib/migration.js b/test/lib/migration.js
index 9340793..ec62c2d 100644
--- a/test/lib/migration.js
+++ b/test/lib/migration.js
@@ -1255,25 +1255,51 @@ function TestMigrationCfg(test, cfg) {
         }
     };
 
-    test.delete_source_instance = function test_delete_source_instance(t) {
-        // To delete a hidden (DNI) vm, we execute a 'vmadm delete' on the
-        // server in question.
-        if (!sourceVm) {
-            t.ok(false, 'Source VM was not created successfully');
+    test.bad_migration_begin_from_state_switch =
+            function test_bad_migration_begin_from_state_switch(t) {
+        if (!targetVm) {
+            t.ok(false, 'Target VM was not migrated successfully');
             t.done();
             return;
         }
 
-        var server_uuid = sourceVm.server_uuid;
-        var params = {
-            script: format('#!/bin/bash\nvmadm delete %s', sourceVm.uuid),
-            server_uuid: server_uuid
-        };
-        client.cnapi.post({path: format('/servers/%s/execute',
-                server_uuid)},
-                params,
-                function _onServerExecuteCb(err) {
-            common.ifError(t, err, 'error running vmadm delete on server');
+        // It should not be possible to start another migration until the recent
+        // migration is finalized.
+        client.post({
+            path: format('/vms/%s?action=migrate&migration_action=begin',
+                targetVm.uuid)
+        }, function onMigrateBeginFromStateSuccessCb(err) {
+            t.ok(err,
+                'expect an error for migration begin when a previous ' +
+                'migration exists');
+            if (err) {
+                t.equal(err.statusCode, 412,
+                    format('err.statusCode === 412, got %s', err.statusCode));
+            }
+            t.done();
+        });
+    };
+
+    test.migration_finalize = function test_migration_finalize(t) {
+        if (!targetVm) {
+            t.ok(false, 'Target VM was not migrated successfully');
+            t.done();
+            return;
+        }
+
+        client.post({
+            path: format('/vms/%s?action=migrate&migration_action=finalize',
+                targetVm.uuid)
+        }, function onMigrateFinalizeCb(err, req, res) {
+            common.ifError(t, err, 'no error from migration finalize call');
+            if (!err) {
+                t.ok(res, 'should get a restify response object');
+                if (res) {
+                    t.equal(res.statusCode, 200,
+                        format('err.statusCode === 200, got %s',
+                            res.statusCode));
+                }
+            }
             t.done();
         });
     };
@@ -1522,25 +1548,26 @@ function TestMigrationCfg(test, cfg) {
         }
     };
 
-    test.delete_source_instance_2 = function test_delete_source_instance_2(t) {
-        // To delete a hidden (DNI) vm, we execute a 'vmadm delete' on the
-        // server in question.
-        if (!sourceVm) {
-            t.ok(false, 'Source VM was not created successfully');
+    test.migration_full_finalize = function test_migration_full_finalize(t) {
+        if (!targetVm) {
+            t.ok(false, 'Target VM was not migrated successfully');
             t.done();
             return;
         }
 
-        var server_uuid = sourceVm.server_uuid;
-        var params = {
-            script: format('#!/bin/bash\nvmadm delete %s', sourceVm.uuid),
-            server_uuid: server_uuid
-        };
-        client.cnapi.post({path: format('/servers/%s/execute',
-                server_uuid)},
-                params,
-                function _onServerExecuteCb(err) {
-            common.ifError(t, err, 'error running vmadm delete on server');
+        client.post({
+            path: format('/vms/%s?action=migrate&migration_action=finalize',
+                targetVm.uuid)
+        }, function onMigrateFinalizeCb(err, req, res) {
+            common.ifError(t, err, 'no error from migration finalize call');
+            if (!err) {
+                t.ok(res, 'should get a restify response object');
+                if (res) {
+                    t.equal(res.statusCode, 200,
+                        format('err.statusCode === 200, got %s',
+                            res.statusCode));
+                }
+            }
             t.done();
         });
     };
-- 
2.21.0

