commit 367c6cb2d2f32d83f553a81b30b910fdf8fb9888 (refs/changes/88/4688/2)
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2018-08-16T17:50:57+02:00 (1 year, 2 months ago)
    
    TRITON-619 Manatee upgrades broken

diff --git a/CHANGES.md b/CHANGES.md
index 8933ab3..3b32705 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -10,6 +10,10 @@
 
 # sdcadm Changelog
 
+## 1.20.5
+
+- TRITON-619 Manatee upgrades broken
+
 ## 1.20.4
 
 - TRITON-689 improve `sdcadm post-setup cmon` to not require
diff --git a/lib/procedures/update-manatee-v2.js b/lib/procedures/update-manatee-v2.js
index 523b553..19bf5a1 100644
--- a/lib/procedures/update-manatee-v2.js
+++ b/lib/procedures/update-manatee-v2.js
@@ -857,10 +857,6 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                 next();
             },
 
-            function freezeClusterState(_, next) {
-                freeze(_,  next);
-            },
-
             function reprovisionAsyncPeers(_, next) {
                 function reprovisionAsyncPeer(peer, nextPeer) {
                     vasync.pipeline({
@@ -941,10 +937,6 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
 
             },
 
-            function freezeBeforeSync(_, next) {
-                freeze(_,  next);
-            },
-
             function reprovisionSync(_, next) {
                 if (!arg.HA ||
                     arg.updated_vms.indexOf(sync.zoneId) !== -1) {
@@ -1006,6 +998,11 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                     primary.zoneId, hasPgStatus, next);
             },
 
+            /*
+             * We don't need to freeze the shard until we're going to update
+             * the primary. (Given our goal is to avoid a deposed primary and
+             * the amount of time it takes to rebuild)
+             */
             function freezeBeforePrimary(_, next) {
                 freeze(_,  next);
             },
@@ -1028,6 +1025,27 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                 }, next);
             },
 
+            /*
+             * We need to kick moray's in order to make sure those detect that
+             * the manatee primary is down and they need to talk to whatever
+             * the shard member is up and running
+             */
+            function disableMorayRegistrars(_, next) {
+                progress(
+                    'Force SAPI to use local cache during primary update');
+                vasync.forEachParallel({
+                    inputs: morayVms,
+                    func: function disableRegistrar(vm, next_) {
+                        s.disableRemoteSvc({
+                            server: vm.server_uuid,
+                            zone: vm.uuid,
+                            fmri: 'registrar',
+                            log: log
+                        }, next_);
+                    }
+                }, next);
+            },
+
             function waitForPrimaryInstance(_, next) {
                 if (arg.HA &&
                     arg.updated_vms.indexOf(primary.zoneId) !== -1) {
@@ -1062,6 +1080,19 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                 }, next);
             },
 
+            function enableMorayRegistrars(_, next) {
+                vasync.forEachParallel({
+                    inputs: morayVms,
+                    func: function enableRegistrar(vm, next_) {
+                        s.enableRemoteSvc({
+                            server: vm.server_uuid,
+                            zone: vm.uuid,
+                            fmri: 'registrar',
+                            log: log
+                        }, next_);
+                    }
+                }, next);
+            },
             // ----------- Again, no-HA only ----------------------------------
 
             function waitForPrimaryPG(_, next) {
@@ -1093,6 +1124,59 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                 }, next);
             },
 
+            function waitForShardHA(_, next) {
+                if (!arg.HA) {
+                    next();
+                    return;
+                }
+                progress('Waiting for manatee shard to reach full HA');
+                waitForManatee('async', 'enabled',
+                    sync.server_uuid,
+                    sync.zoneId, hasPgStatus, function (err) {
+                        if (err) {
+                            if (err === 'deposed') {
+                                var msg = 'manatee instance ' +
+                                    primary.zoneId + ' on server ' +
+                                    primary.server_uuid + ' is on ' +
+                                    'deposed state. Please log into this ' +
+                                    'VM an run:\n\t `manatee-adm rebuild`.';
+                                progress(msg);
+                                next(new errors.UpdateError(new Error(
+                                    msg), 'manatee-adm'));
+                            } else {
+                                next(err);
+                            }
+                            return;
+                        }
+                        next();
+                    });
+            },
+
+            function unfreezeClusterState(_, next) {
+                if (!arg.HA) {
+                    next();
+                    return;
+                }
+                progress('Unfreezing cluster state');
+                common.manateeAdmRemote({
+                    server: sync.server_uuid,
+                    vm: sync.zoneId,
+                    cmd: 'unfreeze',
+                    log: log
+                }, function (err, stdout, stderr) {
+                    if (err) {
+                        next(err);
+                        return;
+                    } else if (stderr) {
+                        next(new errors.InternalError({
+                            message: stderr
+                        }));
+                        return;
+                    }
+                    next();
+                });
+            },
+
             function disableWorkflowRunners(_, next) {
                 progress('Disabling wf-runner services');
                 vasync.forEachParallel({
@@ -1248,61 +1332,9 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
                     }
                     next();
                 });
-            },
-
-            function waitForShardHA(_, next) {
-                if (!arg.HA) {
-                    next();
-                    return;
-                }
-                progress('Waiting for manatee shard to reach full HA');
-                waitForManatee('async', 'enabled',
-                    sync.server_uuid,
-                    sync.zoneId, hasPgStatus, function (err) {
-                        if (err) {
-                            if (err === 'deposed') {
-                                var msg = 'manatee instance ' +
-                                    primary.zoneId + ' on server ' +
-                                    primary.server_uuid + ' is on ' +
-                                    'deposed state. Please log into this ' +
-                                    'VM an run:\n\t `manatee-adm rebuild`.';
-                                progress(msg);
-                                next(new errors.UpdateError(new Error(
-                                    msg), 'manatee-adm'));
-                            } else {
-                                next(err);
-                            }
-                            return;
-                        }
-                        next();
-                    });
-            },
-
-            function unfreezeClusterState(_, next) {
-                if (!arg.HA) {
-                    next();
-                    return;
-                }
-                progress('Unfreezing cluster state');
-                common.manateeAdmRemote({
-                    server: sync.server_uuid,
-                    vm: sync.zoneId,
-                    cmd: 'unfreeze',
-                    log: log
-                }, function (err, stdout, stderr) {
-                    if (err) {
-                        next(err);
-                        return;
-                    } else if (stderr) {
-                        next(new errors.InternalError({
-                            message: stderr
-                        }));
-                        return;
-                    }
-                    next();
-                });
             }
 
+
         ])}, nextSvc);
     }
 
diff --git a/package.json b/package.json
index a98d7df..9732b52 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "sdcadm",
   "description": "Administer a SmartDataCenter (SDC) standup",
-  "version": "1.20.4",
+  "version": "1.20.5",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
