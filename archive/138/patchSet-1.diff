commit fd77477817d9a278a36d6a86ecb21fcdfa5a1d5c (refs/changes/38/138/1)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2016-07-25T23:09:52+00:00 (3 years, 2 months ago)
    
    NAPI-363 Add method for getting IP bucket key

diff --git a/lib/models/ip/common.js b/lib/models/ip/common.js
index eac5020..b19a3bf 100644
--- a/lib/models/ip/common.js
+++ b/lib/models/ip/common.js
@@ -15,7 +15,6 @@
 var assert = require('assert-plus');
 var clone = require('clone');
 var constants = require('../../util/constants');
-var ipaddr = require('ipaddr.js');
 var mod_moray = require('../../apis/moray');
 var util = require('util');
 var util_ip = require('../../util/ip');
@@ -117,14 +116,9 @@ Object.defineProperty(IP.prototype, 'v6address', {
  * Returns an object suitable for passing to a moray batch
  */
 IP.prototype.batch = function ipBatch(opts) {
-    var key = this.address.toString();
-    if (!this.use_strings) {
-        key = util_ip.addressToNumber(key).toString();
-    }
-
     var batchObj = {
         bucket: bucketName(this.params.network_uuid),
-        key: key,
+        key: this.key(),
         operation: 'put',
         value: this.raw(),
         options: {
@@ -150,6 +144,14 @@ IP.prototype.batch = function ipBatch(opts) {
 };
 
 
+/**
+ * Get the key for this IP address in its network's bucket
+ */
+IP.prototype.key = function ipKey() {
+    return getIPKey(this.use_strings, this.address);
+};
+
+
 /**
  * Returns true if this IP can be provisioned
  */
@@ -226,6 +228,17 @@ IP.prototype.raw = function ipRaw() {
 
 // --- Exports
 
+/**
+ * Given an address, get the appropriate Moray key to search
+ * for in an IP bucket.
+ */
+function getIPKey(use_strings, ipaddr) {
+    if (!use_strings) {
+        return util_ip.addressToNumber(ipaddr.toString()).toString();
+    } else {
+        return ipaddr.toString();
+    }
+}
 
 
 /**
@@ -263,5 +276,6 @@ module.exports = {
     BUCKET: BUCKET,
     bucketName: bucketName,
     getBucketObj: getBucketObj,
+    getIPKey: getIPKey,
     IP: IP
 };
diff --git a/lib/models/ip/index.js b/lib/models/ip/index.js
index b5832b5..4bb31ea 100644
--- a/lib/models/ip/index.js
+++ b/lib/models/ip/index.js
@@ -214,10 +214,7 @@ function getIP(opts, callback) {
     }
 
     var ipBucket = common.getBucketObj(params.network_uuid);
-    var key = ip.toString();
-    if (!params.network.ip_use_strings) {
-        key = util_ip.addressToNumber(key).toString();
-    }
+    var key = common.getIPKey(params.network.ip_use_strings, ip);
 
     mod_moray.getObj(app.moray, ipBucket, key, function (err, rec) {
         if (err) {
@@ -319,10 +316,7 @@ function updateIP(app, log, params, callback) {
             return callback(validationErr);
         }
 
-        var key = ip.toString();
-        if (!validatedParams.network.ip_use_strings) {
-            key = util_ip.addressToNumber(key).toString();
-        }
+        var key = common.getIPKey(validatedParams.network.ip_use_strings, ip);
 
         var updateOpts = {
             bucket: common.getBucketObj(params.network_uuid),
@@ -431,10 +425,7 @@ function createIP(app, log, params, callback) {
             return callback(err);
         }
 
-        var key = ip.address.toString();
-        if (!ip.use_strings) {
-            key = util_ip.addressToNumber(key).toString();
-        }
+        var key = ip.key();
         var ipBucket = common.getBucketObj(validated.network.uuid);
         log.debug({ params: params, bucket: ipBucket }, 'addIP: creating IP');
 
@@ -499,10 +490,7 @@ function batchCreateIPs(app, log, params, callback) {
         var ip = new IP(ipParams);
         ips.push(ip);
 
-        var key = ip.address.toString();
-        if (!ip.use_strings) {
-            key = util_ip.addressToNumber(key).toString();
-        }
+        var key = ip.key();
 
         return {
             bucket : bucket.name,
@@ -541,16 +529,16 @@ function deleteIP(app, log, params, callback) {
             'Invalid IP "%s"', params.ip));
     }
 
-    var key = ip.toString();
+    var use_strings = params.network.ip_use_strings;
+    var key = common.getIPKey(use_strings, ip);
     var val = {
         reserved: false
     };
 
-    if (params.network.ip_use_strings) {
+    if (use_strings) {
         val.ipaddr = ip.toString();
     } else {
         val.ip = util_ip.aton(key);
-        key = val.ip.toString();
     }
 
     log.info(params, 'deleteIP: deleting IP %s', ip.toString());
@@ -623,6 +611,7 @@ module.exports = {
     createUpdated: createUpdatedObject,
     del: deleteIP,
     get: getIP,
+    key: common.getIPKey,
     IP: common.IP,
     list: listNetworkIPs,
     nextIPonNetwork: require('./provision').nextIPonNetwork,
diff --git a/lib/models/network.js b/lib/models/network.js
index d0d8778..a037464 100644
--- a/lib/models/network.js
+++ b/lib/models/network.js
@@ -269,18 +269,13 @@ function provisionRangeUpdates(app, log, network, update, callback) {
         };
 
         mod_ip.get(getOpts, function (err2, oldRec) {
-            var oldIPKey = oldIP.toString();
-            var newIPKey = newIP.toString();
+            var oldIPKey = mod_ip.key(network.ip_use_strings, oldIP);
+            var newIPKey = mod_ip.key(network.ip_use_strings, newIP);
 
             if (err2) {
                 return cb(err2);
             }
 
-            if (!network.ip_use_strings) {
-                oldIPKey = util_ip.aton(oldIPKey).toString();
-                newIPKey = util_ip.aton(newIPKey).toString();
-            }
-
             // Old IP: if it's just a placeholder record (eg: one with
             // reserved: false and nothing else set), just delete it.
             var oldRaw = oldRec.raw();
