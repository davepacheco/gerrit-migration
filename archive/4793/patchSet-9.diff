From f3df4a78bde82a220414a2eb554e65cbc6071732 Mon Sep 17 00:00:00 2001
From: Richard Kiene <richard.kiene@joyent.com>
Date: Wed, 5 Sep 2018 22:43:20 +0000
Subject: [PATCH] TRITON-755 Want ability to filter CMON discovery results by
 tag

---
 .gitignore                |  1 +
 CHANGES.md                |  5 +++
 Makefile                  |  4 +--
 lib/cmon-groups-tag.pegjs | 11 +++++++
 lib/cns-svc-tag.pegjs     | 42 ++++++++++++++++---------
 lib/index.js              | 65 ++++++++++++++++++++++++++++++++++++++-
 package.json              |  2 +-
 test/unit.test.js         | 41 +++++++++++++++++++++++-
 8 files changed, 151 insertions(+), 20 deletions(-)
 create mode 100644 lib/cmon-groups-tag.pegjs

diff --git a/.gitignore b/.gitignore
index 8eeb3ea..52241be 100644
--- a/.gitignore
+++ b/.gitignore
@@ -3,3 +3,4 @@
 /npm-debug.log
 /triton-tags-*.tgz
 /lib/cns-svc-tag.js
+/lib/cmon-groups-tag.js
diff --git a/CHANGES.md b/CHANGES.md
index 961fab5..2f07822 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -4,6 +4,11 @@
 
 (nothing yet)
 
+## 1.2.0
+
+- TRITON-755: Add support for 'triton.cmon.groups' tag. This tag is used for
+  filtering the set of results returned by the CMON discover endpoint.
+
 ## 1.1.4
 
 - DOCKER-1020: Add 'triton.network.public' tag
diff --git a/Makefile b/Makefile
index faf5a86..b0bd378 100644
--- a/Makefile
+++ b/Makefile
@@ -1,5 +1,5 @@
 #
-# Copyright (c) 2017, Joyent, Inc.
+# Copyright (c) 2018, Joyent, Inc.
 #
 # Makefile for node-triton-tags
 #
@@ -8,7 +8,7 @@
 # Vars, Tools, Files, Flags
 #
 JS_FILES	:= $(shell find lib test -name '*.js' | grep -v '/tmp/')
-PEGJS_FILES	:= lib/cns-svc-tag.js
+PEGJS_FILES	:= lib/cns-svc-tag.js lib/cmon-groups-tag.js
 # Exclude the auto-generated PEGJS outputs from "make check"
 JS_FILES	:= $(filter-out $(PEGJS_FILES),$(JS_FILES))
 
diff --git a/lib/cmon-groups-tag.pegjs b/lib/cmon-groups-tag.pegjs
new file mode 100644
index 0000000..d12112b
--- /dev/null
+++ b/lib/cmon-groups-tag.pegjs
@@ -0,0 +1,11 @@
+tag = first:group rest:("," group)*
+{
+    var all = rest.map(function (n) { return (n[1]); });
+    all.unshift(first);
+    return (all);
+}
+
+group "Group" = [a-zA-Z0-9\-\_]*
+{
+    return (text());
+}
diff --git a/lib/cns-svc-tag.pegjs b/lib/cns-svc-tag.pegjs
index 83b5b2a..15faabf 100644
--- a/lib/cns-svc-tag.pegjs
+++ b/lib/cns-svc-tag.pegjs
@@ -1,22 +1,34 @@
 tag = first:service rest:("," service)*
 {
-	var all = rest.map(function (n) { return (n[1]); });
-	all.unshift(first);
-	return (all);
+    var all = rest.map(function (n) { return (n[1]); });
+    all.unshift(first);
+    return (all);
 }
 service = name:dnslabel port:(":" int)? props:(":" key "=" value)*
 {
-	var svc = {"name": name};
-	if (port)
-		svc.port = port[1];
-	props.forEach(function (pr) {
-		svc[pr[1]] = pr[3];
-	});
-	return (svc);
+    var svc = {"name": name};
+    if (port)
+        svc.port = port[1];
+
+    props.forEach(function (pr) {
+        svc[pr[1]] = pr[3];
+    });
+
+    return (svc);
 }
-dnslabel "DNS name"		= [a-zA-Z0-9] [a-zA-Z0-9-.]* {
-	return (text().toLowerCase());
+dnslabel "DNS name" = [a-zA-Z0-9] [a-zA-Z0-9-.]*
+{
+    return (text().toLowerCase());
+}
+key "property name" = [a-z] [a-z0-9-]*
+{
+    return (text());
+}
+value "property value" = [^,:]+
+{
+    return (text());
+}
+int "integer (port number)" = [0-9]+
+{
+    return (text());
 }
-key "property name"		= [a-z] [a-z0-9-]* 	   { return (text()); }
-value "property value"		= [^,:]+ 		   { return (text()); }
-int "integer (port number)"	= [0-9]+		   { return (text()); }
diff --git a/lib/index.js b/lib/index.js
index 7be9f55..439b462 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017, Joyent, Inc.
+ * Copyright 2018, Joyent, Inc.
  */
 
 /*
@@ -15,6 +15,9 @@
  *
  * Triton tags are all optional.
  *
+ * - `triton.cmon.groups` (string): Comma-separated list of CMON group strings
+ *   used to filter the set of results returned by the CMON discover endpoint
+ *   (e.g. Request that only VMs with tag 'triton.cmon.groups=api' be returned).
  * - `triton.cns.disable` (boolean): Can be set on a VM to tell the CNS service
  *   to not serve records for this VM.
  * - `triton.cns.services` (string): Comma-separated list of DNS-name strings
@@ -27,6 +30,7 @@
 
 var assert = require('assert-plus');
 var format = require('util').format;
+var cmonGroupsTag = require('./cmon-groups-tag');
 var cnsSvcTag = require('./cns-svc-tag');
 
 /*
@@ -37,7 +41,18 @@ var cnsSvcTag = require('./cns-svc-tag');
 var DNS_NAME_RE = /^[a-z0-9][a-z0-9\-]{0,62}(?:\.[a-z0-9][a-z0-9\-]{0,62})*$/i;
 
 
+/*
+ * The value 100 is somewhat arbitrary, but was chosen as a limit on the number
+ * of gropus and length of group names. The reasoning is that it is likely high
+ * enough to not be hit, but low enough to not allow massive group counts and
+ * group names that could potentially chew up DRAM in the CMON cache.
+ */
+var CMON_MAX_GROUPS = 100;
+var CMON_MAX_GROUP_LEN = 100;
+
+
 var typeFromKey = {
+    'triton.cmon.groups': 'string',
     'triton.cns.services': 'string',
     'triton.cns.disable': 'boolean',
     'triton.cns.reverse_ptr': 'string',
@@ -55,6 +70,54 @@ var typeFromKey = {
  * null is returned.
  */
 var validatorFromKey = {
+    'triton.cmon.groups': function validateTritonCmonGroups(val) {
+        assert.string(val, 'val');
+
+        var groups;
+        try {
+            groups = cmonGroupsTag.parse(val);
+        } catch (e) {
+            return format(
+                'invalid "triton.cmon.groups" tag: groups must be strings ' +
+                'comprised of letters, numbers, _, and -');
+        }
+
+        assert.arrayOfString(groups);
+
+        if (groups.length < 1) {
+            return format(
+                'invalid "triton.cmon.groups" tag: must contain at least ' +
+                'one valid group string');
+        }
+
+        if (groups.length > CMON_MAX_GROUPS) {
+            return format(
+                'invalid "triton.cmon.groups" tag: must contain less than ' +
+                'or equal to 100 group strings');
+        }
+
+        var tagCount = {};
+        for (var i = 0; i < groups.length; ++i) {
+            var group = groups[i];
+            assert.string(group);
+
+            if (tagCount[group] !== 1) {
+                tagCount[group] = 1;
+            } else {
+                return format('invalid "triton.cmon.groups" tag: contains ' +
+                    'duplicate group %s', group);
+            }
+
+            if (group.length < 1 || group.length > CMON_MAX_GROUP_LEN) {
+                return format(
+                    'invalid "triton.cmon.groups" tag: group name must be no ' +
+                    'less than 1 character and no greater than 100 characters');
+            }
+        }
+
+        return null;
+    },
+
     'triton.cns.services': function validateTritonCnsServices(val) {
         assert.string(val, 'val');
 
diff --git a/package.json b/package.json
index b24211c..779261c 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "triton-tags",
   "description": "Triton tags parsing and validation",
-  "version": "1.1.4",
+  "version": "1.2.0",
   "author": "Joyent (joyent.com)",
   "dependencies": {
     "assert-plus": "^1.0.0"
diff --git a/test/unit.test.js b/test/unit.test.js
index c66aa65..ed10179 100644
--- a/test/unit.test.js
+++ b/test/unit.test.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016, Joyent, Inc.
+ * Copyright 2018, Joyent, Inc.
  */
 
 /*
@@ -85,6 +85,45 @@ var cases = [
         err: /Unrecognized special triton tag \"triton.unknown\"/
     },
 
+    // triton.cmon.groups
+    {
+        key: 'triton.cmon.groups',
+        str: '',
+        /* JSSTYLED */
+        err: /invalid \"triton.cmon.groups\" tag: group name must be no less than 1 character and no greater than 100 characters/
+    },
+    {
+        key: 'triton.cmon.groups',
+        str: '&(--',
+        /* JSSTYLED */
+        err: /invalid \"triton.cmon.groups\" tag: groups must be strings comprised of letters, numbers, _, and -/
+    },
+    {
+        key: 'triton.cmon.groups',
+        /* JSSTYLED */
+        str: '1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101',
+        /* JSSTYLED */
+        err: /invalid "triton.cmon.groups" tag: must contain less than or equal to 100 group strings/
+    },
+    {
+        key: 'triton.cmon.groups',
+        /* JSSTYLED */
+        str: 'nifjdwhctkxbyhdqtwifkmehiedqocmmbguukckllseyirkedddrhmqmaemwfczfisvpmhunykccavpxqenpegbymhibsdazfmrrc',
+        /* JSSTYLED */
+        err: /invalid "triton.cmon.groups" tag: group name must be no less than 1 character and no greater than 100 characters/
+    },
+    {
+        key: 'triton.cmon.groups',
+        str: 'a,b,c,dupe,z,dupe,x',
+        /* JSSTYLED */
+        err: /invalid \"triton.cmon.groups\" tag: contains duplicate group dupe/
+    },
+    {
+        key: 'triton.cmon.groups',
+        str: 'foo-bar,bar_foo,disc',
+        val: 'foo-bar,bar_foo,disc'
+    },
+
     // triton.cns.disable
     {
         key: 'triton.cns.disable',
-- 
2.21.0

