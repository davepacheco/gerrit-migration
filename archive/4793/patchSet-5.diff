From ab890d872c5079795c6fc6d253b5b824896cffbf Mon Sep 17 00:00:00 2001
From: Richard Kiene <richard.kiene@joyent.com>
Date: Wed, 5 Sep 2018 22:43:20 +0000
Subject: [PATCH] TRITON-755 Want ability to filter CMON discovery results by
 tag

---
 CHANGES.md                |   4 +
 Makefile                  |   2 +-
 lib/cmon-groups-tag.js    | 421 ++++++++++++++++++++++++++++++++++++++
 lib/cmon-groups-tag.pegjs |  11 +
 lib/cns-svc-tag.pegjs     |  40 ++--
 lib/index.js              |  52 +++++
 package.json              |   2 +-
 test/unit.test.js         |  39 ++++
 8 files changed, 554 insertions(+), 17 deletions(-)
 create mode 100644 lib/cmon-groups-tag.js
 create mode 100644 lib/cmon-groups-tag.pegjs

diff --git a/CHANGES.md b/CHANGES.md
index 961fab5..06efdf3 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -4,6 +4,10 @@
 
 (nothing yet)
 
+## 1.2.0
+
+- TRITON-755: Want ability to filter CMON discovery results by tag
+
 ## 1.1.4
 
 - DOCKER-1020: Add 'triton.network.public' tag
diff --git a/Makefile b/Makefile
index faf5a86..3fe6fa0 100644
--- a/Makefile
+++ b/Makefile
@@ -8,7 +8,7 @@
 # Vars, Tools, Files, Flags
 #
 JS_FILES	:= $(shell find lib test -name '*.js' | grep -v '/tmp/')
-PEGJS_FILES	:= lib/cns-svc-tag.js
+PEGJS_FILES	:= lib/cns-svc-tag.js lib/cmon-groups-tag.js
 # Exclude the auto-generated PEGJS outputs from "make check"
 JS_FILES	:= $(filter-out $(PEGJS_FILES),$(JS_FILES))
 
diff --git a/lib/cmon-groups-tag.js b/lib/cmon-groups-tag.js
new file mode 100644
index 0000000..ac8089c
--- /dev/null
+++ b/lib/cmon-groups-tag.js
@@ -0,0 +1,421 @@
+/*
+ * Generated by PEG.js 0.10.0.
+ *
+ * http://pegjs.org/
+ */
+
+"use strict";
+
+function peg$subclass(child, parent) {
+  function ctor() { this.constructor = child; }
+  ctor.prototype = parent.prototype;
+  child.prototype = new ctor();
+}
+
+function peg$SyntaxError(message, expected, found, location) {
+  this.message  = message;
+  this.expected = expected;
+  this.found    = found;
+  this.location = location;
+  this.name     = "SyntaxError";
+
+  if (typeof Error.captureStackTrace === "function") {
+    Error.captureStackTrace(this, peg$SyntaxError);
+  }
+}
+
+peg$subclass(peg$SyntaxError, Error);
+
+peg$SyntaxError.buildMessage = function(expected, found) {
+  var DESCRIBE_EXPECTATION_FNS = {
+        literal: function(expectation) {
+          return "\"" + literalEscape(expectation.text) + "\"";
+        },
+
+        "class": function(expectation) {
+          var escapedParts = "",
+              i;
+
+          for (i = 0; i < expectation.parts.length; i++) {
+            escapedParts += expectation.parts[i] instanceof Array
+              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
+              : classEscape(expectation.parts[i]);
+          }
+
+          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
+        },
+
+        any: function(expectation) {
+          return "any character";
+        },
+
+        end: function(expectation) {
+          return "end of input";
+        },
+
+        other: function(expectation) {
+          return expectation.description;
+        }
+      };
+
+  function hex(ch) {
+    return ch.charCodeAt(0).toString(16).toUpperCase();
+  }
+
+  function literalEscape(s) {
+    return s
+      .replace(/\\/g, '\\\\')
+      .replace(/"/g,  '\\"')
+      .replace(/\0/g, '\\0')
+      .replace(/\t/g, '\\t')
+      .replace(/\n/g, '\\n')
+      .replace(/\r/g, '\\r')
+      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
+      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
+  }
+
+  function classEscape(s) {
+    return s
+      .replace(/\\/g, '\\\\')
+      .replace(/\]/g, '\\]')
+      .replace(/\^/g, '\\^')
+      .replace(/-/g,  '\\-')
+      .replace(/\0/g, '\\0')
+      .replace(/\t/g, '\\t')
+      .replace(/\n/g, '\\n')
+      .replace(/\r/g, '\\r')
+      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
+      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
+  }
+
+  function describeExpectation(expectation) {
+    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
+  }
+
+  function describeExpected(expected) {
+    var descriptions = new Array(expected.length),
+        i, j;
+
+    for (i = 0; i < expected.length; i++) {
+      descriptions[i] = describeExpectation(expected[i]);
+    }
+
+    descriptions.sort();
+
+    if (descriptions.length > 0) {
+      for (i = 1, j = 1; i < descriptions.length; i++) {
+        if (descriptions[i - 1] !== descriptions[i]) {
+          descriptions[j] = descriptions[i];
+          j++;
+        }
+      }
+      descriptions.length = j;
+    }
+
+    switch (descriptions.length) {
+      case 1:
+        return descriptions[0];
+
+      case 2:
+        return descriptions[0] + " or " + descriptions[1];
+
+      default:
+        return descriptions.slice(0, -1).join(", ")
+          + ", or "
+          + descriptions[descriptions.length - 1];
+    }
+  }
+
+  function describeFound(found) {
+    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
+  }
+
+  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
+};
+
+function peg$parse(input, options) {
+  options = options !== void 0 ? options : {};
+
+  var peg$FAILED = {},
+
+      peg$startRuleFunctions = { tag: peg$parsetag },
+      peg$startRuleFunction  = peg$parsetag,
+
+      peg$c0 = ",",
+      peg$c1 = peg$literalExpectation(",", false),
+      peg$c2 = function(first, rest) {
+      	var all = rest.map(function (n) { return (n[1]); });
+      	all.unshift(first);
+      	return (all);
+      },
+      peg$c3 = peg$otherExpectation("Group"),
+      peg$c4 = /^[a-zA-Z0-9\-_]/,
+      peg$c5 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "-", "_"], false, false),
+      peg$c6 = function() {
+          return (text());
+      },
+
+      peg$currPos          = 0,
+      peg$savedPos         = 0,
+      peg$posDetailsCache  = [{ line: 1, column: 1 }],
+      peg$maxFailPos       = 0,
+      peg$maxFailExpected  = [],
+      peg$silentFails      = 0,
+
+      peg$result;
+
+  if ("startRule" in options) {
+    if (!(options.startRule in peg$startRuleFunctions)) {
+      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
+    }
+
+    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
+  }
+
+  function text() {
+    return input.substring(peg$savedPos, peg$currPos);
+  }
+
+  function location() {
+    return peg$computeLocation(peg$savedPos, peg$currPos);
+  }
+
+  function expected(description, location) {
+    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)
+
+    throw peg$buildStructuredError(
+      [peg$otherExpectation(description)],
+      input.substring(peg$savedPos, peg$currPos),
+      location
+    );
+  }
+
+  function error(message, location) {
+    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)
+
+    throw peg$buildSimpleError(message, location);
+  }
+
+  function peg$literalExpectation(text, ignoreCase) {
+    return { type: "literal", text: text, ignoreCase: ignoreCase };
+  }
+
+  function peg$classExpectation(parts, inverted, ignoreCase) {
+    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
+  }
+
+  function peg$anyExpectation() {
+    return { type: "any" };
+  }
+
+  function peg$endExpectation() {
+    return { type: "end" };
+  }
+
+  function peg$otherExpectation(description) {
+    return { type: "other", description: description };
+  }
+
+  function peg$computePosDetails(pos) {
+    var details = peg$posDetailsCache[pos], p;
+
+    if (details) {
+      return details;
+    } else {
+      p = pos - 1;
+      while (!peg$posDetailsCache[p]) {
+        p--;
+      }
+
+      details = peg$posDetailsCache[p];
+      details = {
+        line:   details.line,
+        column: details.column
+      };
+
+      while (p < pos) {
+        if (input.charCodeAt(p) === 10) {
+          details.line++;
+          details.column = 1;
+        } else {
+          details.column++;
+        }
+
+        p++;
+      }
+
+      peg$posDetailsCache[pos] = details;
+      return details;
+    }
+  }
+
+  function peg$computeLocation(startPos, endPos) {
+    var startPosDetails = peg$computePosDetails(startPos),
+        endPosDetails   = peg$computePosDetails(endPos);
+
+    return {
+      start: {
+        offset: startPos,
+        line:   startPosDetails.line,
+        column: startPosDetails.column
+      },
+      end: {
+        offset: endPos,
+        line:   endPosDetails.line,
+        column: endPosDetails.column
+      }
+    };
+  }
+
+  function peg$fail(expected) {
+    if (peg$currPos < peg$maxFailPos) { return; }
+
+    if (peg$currPos > peg$maxFailPos) {
+      peg$maxFailPos = peg$currPos;
+      peg$maxFailExpected = [];
+    }
+
+    peg$maxFailExpected.push(expected);
+  }
+
+  function peg$buildSimpleError(message, location) {
+    return new peg$SyntaxError(message, null, null, location);
+  }
+
+  function peg$buildStructuredError(expected, found, location) {
+    return new peg$SyntaxError(
+      peg$SyntaxError.buildMessage(expected, found),
+      expected,
+      found,
+      location
+    );
+  }
+
+  function peg$parsetag() {
+    var s0, s1, s2, s3, s4, s5;
+
+    s0 = peg$currPos;
+    s1 = peg$parsegroup();
+    if (s1 !== peg$FAILED) {
+      s2 = [];
+      s3 = peg$currPos;
+      if (input.charCodeAt(peg$currPos) === 44) {
+        s4 = peg$c0;
+        peg$currPos++;
+      } else {
+        s4 = peg$FAILED;
+        if (peg$silentFails === 0) { peg$fail(peg$c1); }
+      }
+      if (s4 !== peg$FAILED) {
+        s5 = peg$parsegroup();
+        if (s5 !== peg$FAILED) {
+          s4 = [s4, s5];
+          s3 = s4;
+        } else {
+          peg$currPos = s3;
+          s3 = peg$FAILED;
+        }
+      } else {
+        peg$currPos = s3;
+        s3 = peg$FAILED;
+      }
+      while (s3 !== peg$FAILED) {
+        s2.push(s3);
+        s3 = peg$currPos;
+        if (input.charCodeAt(peg$currPos) === 44) {
+          s4 = peg$c0;
+          peg$currPos++;
+        } else {
+          s4 = peg$FAILED;
+          if (peg$silentFails === 0) { peg$fail(peg$c1); }
+        }
+        if (s4 !== peg$FAILED) {
+          s5 = peg$parsegroup();
+          if (s5 !== peg$FAILED) {
+            s4 = [s4, s5];
+            s3 = s4;
+          } else {
+            peg$currPos = s3;
+            s3 = peg$FAILED;
+          }
+        } else {
+          peg$currPos = s3;
+          s3 = peg$FAILED;
+        }
+      }
+      if (s2 !== peg$FAILED) {
+        peg$savedPos = s0;
+        s1 = peg$c2(s1, s2);
+        s0 = s1;
+      } else {
+        peg$currPos = s0;
+        s0 = peg$FAILED;
+      }
+    } else {
+      peg$currPos = s0;
+      s0 = peg$FAILED;
+    }
+
+    return s0;
+  }
+
+  function peg$parsegroup() {
+    var s0, s1, s2;
+
+    peg$silentFails++;
+    s0 = peg$currPos;
+    s1 = [];
+    if (peg$c4.test(input.charAt(peg$currPos))) {
+      s2 = input.charAt(peg$currPos);
+      peg$currPos++;
+    } else {
+      s2 = peg$FAILED;
+      if (peg$silentFails === 0) { peg$fail(peg$c5); }
+    }
+    while (s2 !== peg$FAILED) {
+      s1.push(s2);
+      if (peg$c4.test(input.charAt(peg$currPos))) {
+        s2 = input.charAt(peg$currPos);
+        peg$currPos++;
+      } else {
+        s2 = peg$FAILED;
+        if (peg$silentFails === 0) { peg$fail(peg$c5); }
+      }
+    }
+    if (s1 !== peg$FAILED) {
+      peg$savedPos = s0;
+      s1 = peg$c6();
+    }
+    s0 = s1;
+    peg$silentFails--;
+    if (s0 === peg$FAILED) {
+      s1 = peg$FAILED;
+      if (peg$silentFails === 0) { peg$fail(peg$c3); }
+    }
+
+    return s0;
+  }
+
+  peg$result = peg$startRuleFunction();
+
+  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
+    return peg$result;
+  } else {
+    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
+      peg$fail(peg$endExpectation());
+    }
+
+    throw peg$buildStructuredError(
+      peg$maxFailExpected,
+      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
+      peg$maxFailPos < input.length
+        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
+        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
+    );
+  }
+}
+
+module.exports = {
+  SyntaxError: peg$SyntaxError,
+  parse:       peg$parse
+};
diff --git a/lib/cmon-groups-tag.pegjs b/lib/cmon-groups-tag.pegjs
new file mode 100644
index 0000000..d12112b
--- /dev/null
+++ b/lib/cmon-groups-tag.pegjs
@@ -0,0 +1,11 @@
+tag = first:group rest:("," group)*
+{
+    var all = rest.map(function (n) { return (n[1]); });
+    all.unshift(first);
+    return (all);
+}
+
+group "Group" = [a-zA-Z0-9\-\_]*
+{
+    return (text());
+}
diff --git a/lib/cns-svc-tag.pegjs b/lib/cns-svc-tag.pegjs
index 83b5b2a..240e845 100644
--- a/lib/cns-svc-tag.pegjs
+++ b/lib/cns-svc-tag.pegjs
@@ -1,22 +1,32 @@
 tag = first:service rest:("," service)*
 {
-	var all = rest.map(function (n) { return (n[1]); });
-	all.unshift(first);
-	return (all);
+    var all = rest.map(function (n) { return (n[1]); });
+    all.unshift(first);
+    return (all);
 }
 service = name:dnslabel port:(":" int)? props:(":" key "=" value)*
 {
-	var svc = {"name": name};
-	if (port)
-		svc.port = port[1];
-	props.forEach(function (pr) {
-		svc[pr[1]] = pr[3];
-	});
-	return (svc);
+    var svc = {"name": name};
+    if (port)
+        svc.port = port[1];
+        props.forEach(function (pr) {
+            svc[pr[1]] = pr[3];
+        });
+    return (svc);
 }
-dnslabel "DNS name"		= [a-zA-Z0-9] [a-zA-Z0-9-.]* {
-	return (text().toLowerCase());
+dnslabel "DNS name" = [a-zA-Z0-9] [a-zA-Z0-9-.]*
+{
+    return (text().toLowerCase());
+}
+key "property name" = [a-z] [a-z0-9-]*
+{
+    return (text());
+}
+value "property value" = [^,:]+
+{
+    return (text());
+}
+int "integer (port number)" = [0-9]+
+{
+    return (text());
 }
-key "property name"		= [a-z] [a-z0-9-]* 	   { return (text()); }
-value "property value"		= [^,:]+ 		   { return (text()); }
-int "integer (port number)"	= [0-9]+		   { return (text()); }
diff --git a/lib/index.js b/lib/index.js
index 7be9f55..0fcb248 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -15,6 +15,8 @@
  *
  * Triton tags are all optional.
  *
+ * - `triton.cmon.groups` (string): Comma-separated list of CMON group strings
+ *   for the CMON service.
  * - `triton.cns.disable` (boolean): Can be set on a VM to tell the CNS service
  *   to not serve records for this VM.
  * - `triton.cns.services` (string): Comma-separated list of DNS-name strings
@@ -27,6 +29,7 @@
 
 var assert = require('assert-plus');
 var format = require('util').format;
+var cmonGroupsTag = require('./cmon-groups-tag');
 var cnsSvcTag = require('./cns-svc-tag');
 
 /*
@@ -38,6 +41,7 @@ var DNS_NAME_RE = /^[a-z0-9][a-z0-9\-]{0,62}(?:\.[a-z0-9][a-z0-9\-]{0,62})*$/i;
 
 
 var typeFromKey = {
+    'triton.cmon.groups': 'string',
     'triton.cns.services': 'string',
     'triton.cns.disable': 'boolean',
     'triton.cns.reverse_ptr': 'string',
@@ -55,6 +59,54 @@ var typeFromKey = {
  * null is returned.
  */
 var validatorFromKey = {
+    'triton.cmon.groups': function validateTritonCmonGroups(val) {
+        assert.string(val, 'val');
+
+        var groups;
+        try {
+            groups = cmonGroupsTag.parse(val);
+        } catch (e) {
+            return format(
+                'invalid "triton.cmon.groups" tag: groups must be strings ' +
+                'comprised of letters, numbers, _, and -');
+        }
+
+        assert.arrayOfString(groups);
+
+        if (groups.length < 1) {
+            return format(
+                'invalid "triton.cmon.groups" tag: must contain at least ' +
+                'one valid group string');
+        }
+
+        if (groups.length > 100) {
+            return format(
+                'invalid "triton.cmon.groups" tag: must contain less than ' +
+                'or equal to 100 group strings');
+        }
+
+        var tagCount = {};
+        for (var i = 0; i < groups.length; ++i) {
+            var group = groups[i];
+            assert.string(group);
+
+            if (tagCount[group] !== 1) {
+                tagCount[group] = 1;
+            } else {
+                return format('invalid "triton.cmon.groups" tag: contains ' +
+                    'duplicate group %s', group);
+            }
+
+            if (group.length < 1 || group.length > 100) {
+                return format(
+                    'invalid "triton.cmon.groups" tag: group name must be no ' +
+                    'less than 1 character and no greater than 100 characters');
+            }
+        }
+
+        return null;
+    },
+
     'triton.cns.services': function validateTritonCnsServices(val) {
         assert.string(val, 'val');
 
diff --git a/package.json b/package.json
index b24211c..779261c 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "triton-tags",
   "description": "Triton tags parsing and validation",
-  "version": "1.1.4",
+  "version": "1.2.0",
   "author": "Joyent (joyent.com)",
   "dependencies": {
     "assert-plus": "^1.0.0"
diff --git a/test/unit.test.js b/test/unit.test.js
index c66aa65..640a434 100644
--- a/test/unit.test.js
+++ b/test/unit.test.js
@@ -85,6 +85,45 @@ var cases = [
         err: /Unrecognized special triton tag \"triton.unknown\"/
     },
 
+    // triton.cmon.groups
+    {
+        key: 'triton.cmon.groups',
+        str: '',
+        /* JSSTYLED */
+        err: /invalid \"triton.cmon.groups\" tag: group name must be no less than 1 character and no greater than 100 characters/
+    },
+    {
+        key: 'triton.cmon.groups',
+        str: '&(--',
+        /* JSSTYLED */
+        err: /invalid \"triton.cmon.groups\" tag: groups must be strings comprised of letters, numbers, _, and -/
+    },
+    {
+        key: 'triton.cmon.groups',
+        /* JSSTYLED */
+        str: '1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101',
+        /* JSSTYLED */
+        err: /invalid "triton.cmon.groups" tag: must contain less than or equal to 100 group strings/
+    },
+    {
+        key: 'triton.cmon.groups',
+        /* JSSTYLED */
+        str: 'nifjdwhctkxbyhdqtwifkmehiedqocmmbguukckllseyirkedddrhmqmaemwfczfisvpmhunykccavpxqenpegbymhibsdazfmrrc',
+        /* JSSTYLED */
+        err: /invalid "triton.cmon.groups" tag: group name must be no less than 1 character and no greater than 100 characters/
+    },
+    {
+        key: 'triton.cmon.groups',
+        str: 'a,b,c,dupe,z,dupe,x',
+        /* JSSTYLED */
+        err: /invalid \"triton.cmon.groups\" tag: contains duplicate group dupe/
+    },
+    {
+        key: 'triton.cmon.groups',
+        str: 'foo-bar,bar_foo,disc',
+        val: 'foo-bar,bar_foo,disc'
+    },
+
     // triton.cns.disable
     {
         key: 'triton.cns.disable',
-- 
2.21.0

