From 55f9dc73587c9639ac3785d65efec3c62e2e8a62 Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Tue, 19 Sep 2017 15:05:22 +0000
Subject: [PATCH] MORAY-436 Port arguments need better validation Reviewed by:
 Jordan Hendricks <jordan.hendricks@joyent.com> Approved by: Jordan Hendricks
 <jordan.hendricks@joyent.com>

---
 main.js      | 48 +++++++++++++++++++++++++++++++++---------------
 package.json |  2 +-
 2 files changed, 34 insertions(+), 16 deletions(-)

diff --git a/main.js b/main.js
index 985d47f..5803d72 100644
--- a/main.js
+++ b/main.js
@@ -17,6 +17,7 @@ var bunyan = require('bunyan');
 var clone = require('clone');
 var extend = require('xtend');
 var getopt = require('posix-getopt');
+var jsprim = require('jsprim');
 var VError = require('verror').VError;
 
 
@@ -26,6 +27,8 @@ var app = require('./lib');
 
 ///--- Globals
 
+var MIN_PORT = 1;
+var MAX_PORT = 65535;
 var DEFAULTS = {
     file: process.cwd() + '/etc/config.json',
     monitorPort: 3020,
@@ -90,10 +93,27 @@ function setupLogger(config) {
 }
 
 
+function parsePort(str) {
+    var port = jsprim.parseInteger(str);
+
+    if (port instanceof Error) {
+        LOG.fatal({ port: str }, 'Invalid port');
+        throw new VError(port, 'Invalid port %j', str);
+    }
+
+    if (port < MIN_PORT || port > MAX_PORT) {
+        throw new VError('Invalid port %j: should be in range %d-%d',
+            port, MIN_PORT, MAX_PORT);
+    }
+
+    return port;
+}
+
+
 function parseOptions() {
     var option;
     var opts = {};
-    var parser = new getopt.BasicParser('cvf:p:k:', process.argv);
+    var parser = new getopt.BasicParser(':cvf:p:k:', process.argv);
 
     while ((option = parser.getopt()) !== undefined) {
         switch (option.option) {
@@ -105,22 +125,11 @@ function parseOptions() {
             break;
 
         case 'p':
-            opts.port = parseInt(option.optarg, 10);
-            if (isNaN(opts.port)) {
-                LOG.fatal({
-                    port: option.optarg
-                }, 'Invalid port.');
-                throw new Error('Invalid port: ' +
-                                option.optarg);
-            }
+            opts.port = parsePort(option.optarg);
             break;
 
         case 'k':
-            opts.monitorPort = parseInt(option.optarg, 10);
-            if (isNaN(opts.monitorPort)) {
-                LOG.fatal({ port: option.optarg }, 'Invalid port');
-                throw new Error('Invalid port: ' + option.optarg);
-            }
+            opts.monitorPort = parsePort(option.optarg);
             break;
 
         case 'v':
@@ -132,11 +141,20 @@ function parseOptions() {
                 LOG = LOG.child({src: true});
             break;
 
+        case ':':
+            throw new VError('Expected argument for -%s', option.optopt);
+
         default:
-            throw new Error('Invalid option: ' + option.option);
+            throw new VError('Invalid option: -%s', option.optopt);
         }
     }
 
+    if (parser.optind() !== process.argv.length) {
+        throw new VError(
+            'Positional arguments found when none were expected: %s',
+            process.argv.slice(parser.optind()).join(' '));
+    }
+
     if (!opts.file) {
         LOG.fatal({ opts: opts }, 'No config file specified.');
         throw new Error('No config file specified');
diff --git a/package.json b/package.json
index 9fb4ca2..666f675 100644
--- a/package.json
+++ b/package.json
@@ -30,7 +30,7 @@
         "pg": "6.2.4",
         "pg-parse-float": "0.0.1",
         "pooling": "0.4.5",
-        "posix-getopt": "1.0.0",
+        "posix-getopt": "1.2.0",
         "vasync": "1.6.4",
         "restify": "5.2.0",
         "verror": "1.3.7",
-- 
2.21.0

