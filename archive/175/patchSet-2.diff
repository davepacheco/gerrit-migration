commit 153ab9cf87b3b7a393f472f9d85ea566b11236a0 (refs/changes/75/175/2)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2016-09-06T18:16:43+00:00 (3 years, 1 month ago)
    
    CNAPI-658 CNAPI and cn-agent shouldn't try to manage firewall rules
    Reviewed by: Orlando Vazquez <orlando@joyent.com>
    Approved by: Richard Kiene <richard.kiene@joyent.com>

diff --git a/lib/app.js b/lib/app.js
index c99d697..4f74c26 100644
--- a/lib/app.js
+++ b/lib/app.js
@@ -416,15 +416,6 @@ App.prototype.start = function () {
                 'zfs_list_pools'
             ]
         },
-        {
-            name: 'fw_tasks',
-            onhttpmsg: createHttpTaskDispatchFn(agent, taskspath),
-            tasks: [
-                'fw_add',
-                'fw_del',
-                'fw_update'
-            ]
-        },
         {
             name: 'test_sleep',
             onhttpmsg: createHttpTaskDispatchFn(agent, taskspath),
diff --git a/lib/tasks/fw_add.js b/lib/tasks/fw_add.js
deleted file mode 100644
index cc35cba..0000000
--- a/lib/tasks/fw_add.js
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2015, Joyent, Inc.
- */
-
-var Task = require('../task_agent/task');
-var fw = require('fw');
-var vmadm = require('vmadm');
-var common = require('../common');
-
-var FwAddTask = module.exports = function (req) {
-    Task.call(this);
-    this.req = req;
-};
-
-Task.createTask(FwAddTask);
-
-function start(callback) {
-    var self = this;
-    var opts = {};
-
-    opts.full = true;
-    opts.log = self.log;
-    opts.req_id = self.req.req_id;
-    opts.vmadmLogger = common.makeVmadmLogger(self);
-
-    return vmadm.lookup({}, opts, function (err, vms) {
-        if (err) {
-            var msg = err instanceof Error ? err.message : err;
-            return self.fatal('vmadm.lookup error: ' + msg);
-        }
-
-        self.progress(50);
-
-        var fwOpts = self.req.params;
-        fwOpts.vms = vms;
-        fwOpts.logName = 'provisioner_fw_add';
-
-        return fw.add(fwOpts, function (err2, res) {
-            if (err2) {
-                return self.fatal('fw.add error: ' + err2.message);
-            }
-
-            self.progress(100);
-            return self.finish();
-        });
-    });
-}
-
-FwAddTask.setStart(start);
diff --git a/lib/tasks/fw_del.js b/lib/tasks/fw_del.js
deleted file mode 100644
index aeef877..0000000
--- a/lib/tasks/fw_del.js
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2015, Joyent, Inc.
- */
-
-var Task = require('../task_agent/task');
-var fw = require('fw');
-var vmadm = require('vmadm');
-var common = require('../common');
-
-var FwDelTask = module.exports = function (req) {
-    Task.call(this);
-    this.req = req;
-};
-
-Task.createTask(FwDelTask);
-
-function start(callback) {
-    var self = this;
-    var opts = {};
-
-    opts.full = true;
-    opts.log = self.log;
-    opts.req_id = self.req.req_id;
-    opts.vmadmLogger = common.makeVmadmLogger(self);
-
-    return vmadm.lookup({}, opts, function (err, vms) {
-        if (err) {
-            var msg = err instanceof Error ? err.message : err;
-            return self.fatal('vmadm.lookup error: ' + msg);
-        }
-
-        self.progress(50);
-
-        var fwOpts = self.req.params;
-        fwOpts.vms = vms;
-        fwOpts.logName = 'provisioner_fw_del';
-
-        return fw.del(fwOpts, function (err2, res) {
-            if (err2) {
-                return self.fatal('fw.del error: ' + err2.message);
-            }
-
-            self.progress(100);
-            return self.finish();
-        });
-    });
-}
-
-FwDelTask.setStart(start);
diff --git a/lib/tasks/fw_update.js b/lib/tasks/fw_update.js
deleted file mode 100644
index b8b7955..0000000
--- a/lib/tasks/fw_update.js
+++ /dev/null
@@ -1,56 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2015, Joyent, Inc.
- */
-
-var Task = require('../task_agent/task');
-var fw = require('fw');
-var vmadm = require('vmadm');
-var common = require('../common');
-
-var FwUpdateTask = module.exports = function (req) {
-    Task.call(this);
-    this.req = req;
-};
-
-Task.createTask(FwUpdateTask);
-
-function start(callback) {
-    var self = this;
-    var opts = {};
-
-    opts.full = true;
-    opts.log = self.log;
-    opts.req_id = self.req.req_id;
-    opts.vmadmLogger = common.makeVmadmLogger(self);
-
-    return vmadm.lookup({}, opts, function (err, vms) {
-        if (err) {
-            var msg = err instanceof Error ? err.message : err;
-            return self.fatal('vmadm.lookup error: ' + msg);
-        }
-
-        self.progress(50);
-
-        var fwOpts = self.req.params;
-        fwOpts.allowAdds = true;
-        fwOpts.vms = vms;
-        fwOpts.logName = 'provisioner_fw_update';
-
-        return fw.update(fwOpts, function (err2, res) {
-            if (err2) {
-                return self.fatal('fw.update error: ' + err2.message);
-            }
-
-            self.progress(100);
-            return self.finish();
-        });
-    });
-}
-
-FwUpdateTask.setStart(start);
diff --git a/node_modules/fw/Makefile b/node_modules/fw/Makefile
deleted file mode 100644
index d424859..0000000
--- a/node_modules/fw/Makefile
+++ /dev/null
@@ -1,102 +0,0 @@
-#
-# Copyright (c) 2014, Joyent, Inc. All rights reserved.
-#
-
-
-#
-# Directories
-#
-ROOT = $(PWD)/../..
-TOP := $(shell pwd)
-NM := node_modules
-NM_ORIG := node_modules.orig
-TEST_MODULES := test/node_modules
-
-
-#
-# Tools
-#
-NODEUNIT := $(TEST_MODULES)/nodeunit/bin/nodeunit
-JSSTYLE =	$(ROOT)/tools/jsstyle/jsstyle
-JSLINT =	$(ROOT)/tools/javascriptlint/build/install/jsl
-RAMSEY := tools/ramsey/bin/ramsey
-
-#
-# Files
-#
-JS_CHECK_TARGETS=\
-	lib/*.js \
-	lib/util/*.js \
-	sbin/* \
-	test/unit/*.js \
-	test/integration/*.js \
-	test/lib/*.js
-MAN_CHECK_TARGETS=\
-	man/fwadm.1m.md \
-	man/fwrule.5.md
-
-#
-# Tool options
-#
-JSSTYLE_OPTS = -o indent=4,strict-indent=1,doxygen,unparenthesized-return=0,continuation-at-front=1,leading-right-paren-ok=1
-
-#
-# Repo-specific targets
-#
-.PHONY: test
-test:
-	$(NODEUNIT) --reporter tap test/unit/*.js
-
-.PHONY: teststop
-teststop:
-	@(for F in test/unit/*.js; do \
-		echo "# $$F" ;\
-		$(NODEUNIT) --reporter tap $$F ;\
-		[[ $$? == "0" ]] || exit 1; \
-	done)
-
-# Create a node modules suitable for installing in the platform
-$(NM):
-	$(TOP)/tools/bin/rebuild-node-modules
-
-.PHONY: man
-man: man/fwadm.1m.md man/fwrule.5.md
-
-man/fwadm.1m.md: man/fwadm.1m.md.in etc/examples/*
-	$(RAMSEY) -d etc/examples man/fwadm.1m.md.in man/fwadm.1m.md
-
-man/fwrule.5.md: man/fwrule.5.header tools/fwrule/docs/rules.md.in man/fwrule.5.footer
-	@cat man/fwrule.5.header > $@
-	$(RAMSEY) -p wrap=80 tools/fwrule/docs/rules.md.in | sed -e 's,^#,##,' -e 's,&lt;,<,g' | awk '/^## / { print toupper($$0); next } 1' >> $@
-	@cat man/fwrule.5.footer >> $@
-
-
-#
-# check and related
-#
-check: $(JSLINT) jslint jsstyle mancheck
-
-jslint:
-	@printf "\n==> Running JavaScriptLint...\n"
-	@$(JSLINT) --nologo --conf=$(TOP)/tools/jsl.node.conf \
-	    $(JS_CHECK_TARGETS)
-
-jsstyle:
-	@printf "\n==> Running jsstyle...\n"
-	@# jsstyle doesn't echo as it goes so we add an echo to each line below
-	@(for file in $(JS_CHECK_TARGETS); do \
-		echo $(PWD)/$$file; \
-		$(JSSTYLE) $(JSSTYLE_OPTS) $$file; \
-		[[ $$? == "0" ]] || exit 1; \
-	done)
-	@printf "\nJS style ok!\n"
-
-$(JSLINT):
-	(cd $(ROOT); $(MAKE) jsl)
-
-mancheck:
-	@printf "\n==> Check man page line lengths...\n"
-	@(for file in $(MAN_CHECK_TARGETS); do \
-		echo $$file; \
-		cat $$file | awk '{ if (length($0) > 80) { x = length($0); print $0 } } END { exit x }'; \
-	done)
diff --git a/node_modules/fw/README.md b/node_modules/fw/README.md
deleted file mode 100644
index c5f2a07..0000000
--- a/node_modules/fw/README.md
+++ /dev/null
@@ -1,41 +0,0 @@
-# fwadm
-
-Repository: <https://github.com/joyent/smartos-live.git>
-Browsing: <https://github.com/joyent/smartos-live/tree/master/src/fw>
-Who: SmartOS mailing list <smartos-discuss@lists.smartos.org>
-Docs: <https://github.com/joyent/smartos-live/tree/master/src/fw/README.md>
-Tickets/bugs: <https://github.com/joyent/smartos-live/issues>
-
-
-# Overview
-
-fwadm is an adminstrative tool for managing VM firewalls.
-
-
-# Repository
-
-    etc/            Contains the bash completion file
-    lib/            Source files.
-    node_modules/   Committed node.js dependencies
-    sbin/           Executables that are runnable as root
-    test/           Test suite (using nodeunit)
-    tools/          Dev tools, including jison for generating the rule parser
-
-
-# Development
-
-Before checking in, please run:
-
-    make check
-
-and fix any warnings. Note that jsstyle will stop after the first file with an
-error, so you may need to run this multiple times while fixing.
-
-
-# Testing
-
-    make test
-
-To run an individual test:
-
-    ./test/runtest <path to test file>
diff --git a/node_modules/fw/etc/examples/fwadm_add_global b/node_modules/fw/etc/examples/fwadm_add_global
deleted file mode 100644
index 2918486..0000000
--- a/node_modules/fw/etc/examples/fwadm_add_global
+++ /dev/null
@@ -1 +0,0 @@
-fwadm add -g -e FROM any TO all vms ALLOW tcp PORT 22
diff --git a/node_modules/fw/etc/examples/fwadm_add_owner b/node_modules/fw/etc/examples/fwadm_add_owner
deleted file mode 100644
index 913650e..0000000
--- a/node_modules/fw/etc/examples/fwadm_add_owner
+++ /dev/null
@@ -1 +0,0 @@
-fwadm add --owner_uuid=e6c73bd2-fae4-4e0a-af76-2c05d088b066 FROM any TO all vms ALLOW tcp PORT 22
diff --git a/node_modules/fw/etc/examples/fwadm_add_rvm b/node_modules/fw/etc/examples/fwadm_add_rvm
deleted file mode 100644
index 123318c..0000000
--- a/node_modules/fw/etc/examples/fwadm_add_rvm
+++ /dev/null
@@ -1,13 +0,0 @@
-echo '{
-    "remoteVMs": [
-        {
-            "uuid": "0c3a87d2-b9b6-4445-8eeb-96a94d72b29e",
-            "owner_uuid": "e6c73bd2-fae4-4e0a-af76-2c05d088b066",
-            "nics": [
-                { "ip": "172.29.0.3" },
-                { "ip": "172.30.0.3" }
-            ],
-            "tags": { "role": "db" }
-        }
-    ]
-}' | fwadm add
diff --git a/node_modules/fw/etc/examples/fwadm_add_rvm_and_rule b/node_modules/fw/etc/examples/fwadm_add_rvm_and_rule
deleted file mode 100644
index 26d02dc..0000000
--- a/node_modules/fw/etc/examples/fwadm_add_rvm_and_rule
+++ /dev/null
@@ -1,17 +0,0 @@
-echo '{
-    "rules": [
-        {
-          "enabled": true,
-          "owner_uuid": "e6c73bd2-fae4-4e0a-af76-2c05d088b066",
-          "rule": "FROM vm a223bec2-c62b-4fe7-babb-ad4c4d8441bb TO all vms ALLOW tcp PORT 22"
-        }
-    ],
-    "remoteVMs": [
-        {
-            "uuid": "5baca016-6dda-11e3-a6f2-730593c54f04",
-            "owner_uuid": "e6c73bd2-fae4-4e0a-af76-2c05d088b066",
-            "nics": [ { "ip": "172.29.0.2" } ],
-            "tags": { "role": "web" }
-        }
-    ]
-}' | fwadm add
diff --git a/node_modules/fw/etc/examples/fwadm_add_with_uuid b/node_modules/fw/etc/examples/fwadm_add_with_uuid
deleted file mode 100644
index 6e3be23..0000000
--- a/node_modules/fw/etc/examples/fwadm_add_with_uuid
+++ /dev/null
@@ -1,9 +0,0 @@
-echo '{
-    "rules": [
-        {
-            "uuid": "71bf3c29-bcd3-42a4-b4cb-222585429a70",
-            "owner_uuid": "e6c73bd2-fae4-4e0a-af76-2c05d088b066",
-            "rule": "FROM tag www TO tag db ALLOW tcp PORT 5432"
-        }
-    ]
-}' | fwadm add
diff --git a/node_modules/fw/etc/examples/fwadm_get_rvm b/node_modules/fw/etc/examples/fwadm_get_rvm
deleted file mode 100644
index 9e86a9a..0000000
--- a/node_modules/fw/etc/examples/fwadm_get_rvm
+++ /dev/null
@@ -1 +0,0 @@
-fwadm get-rvm 5baca016-6dda-11e3-a6f2-730593c54f04
diff --git a/node_modules/fw/etc/examples/fwadm_list_json b/node_modules/fw/etc/examples/fwadm_list_json
deleted file mode 100644
index f38b372..0000000
--- a/node_modules/fw/etc/examples/fwadm_list_json
+++ /dev/null
@@ -1 +0,0 @@
-fwadm list -j -o uuid,rule
diff --git a/node_modules/fw/etc/examples/fwadm_list_parseable b/node_modules/fw/etc/examples/fwadm_list_parseable
deleted file mode 100644
index 673619b..0000000
--- a/node_modules/fw/etc/examples/fwadm_list_parseable
+++ /dev/null
@@ -1 +0,0 @@
-fwadm list -d "|" -p
diff --git a/node_modules/fw/etc/examples/fwadm_update b/node_modules/fw/etc/examples/fwadm_update
deleted file mode 100644
index bebe7ae..0000000
--- a/node_modules/fw/etc/examples/fwadm_update
+++ /dev/null
@@ -1 +0,0 @@
-fwadm update 71bf3c29-bcd3-42a4-b4cb-222585429a70 'FROM (tag www OR ip 172.30.0.250) TO tag db ALLOW tcp PORT 5432'
diff --git a/node_modules/fw/etc/examples/fwadm_update_rvm b/node_modules/fw/etc/examples/fwadm_update_rvm
deleted file mode 100644
index 3722396..0000000
--- a/node_modules/fw/etc/examples/fwadm_update_rvm
+++ /dev/null
@@ -1,10 +0,0 @@
-echo '{
-    "remoteVMs": [
-        {
-            "uuid": "5baca016-6dda-11e3-a6f2-730593c54f04",
-            "owner_uuid": "e6c73bd2-fae4-4e0a-af76-2c05d088b066",
-            "ips": [ "172.29.0.2", "172.31.0.2" ],
-            "tags": { "role": "web" }
-        }
-    ]
-}' | fwadm update
diff --git a/node_modules/fw/etc/examples/rvm_rule1 b/node_modules/fw/etc/examples/rvm_rule1
deleted file mode 100644
index 84c5c63..0000000
--- a/node_modules/fw/etc/examples/rvm_rule1
+++ /dev/null
@@ -1,6 +0,0 @@
-{
-    "description": "allow ssh from bastion host",
-    "enabled": true,
-    "owner_uuid": "e6c73bd2-fae4-4e0a-af76-2c05d088b066",
-    "rule": "FROM tag role=bastion TO all vms ALLOW tcp PORT 22"
-}
diff --git a/node_modules/fw/etc/examples/rvm_rule2 b/node_modules/fw/etc/examples/rvm_rule2
deleted file mode 100644
index e451e06..0000000
--- a/node_modules/fw/etc/examples/rvm_rule2
+++ /dev/null
@@ -1,6 +0,0 @@
-{
-    "description": "block UDP port 5400 to bastion host",
-    "enabled": true,
-    "owner_uuid": "e6c73bd2-fae4-4e0a-af76-2c05d088b066",
-    "rule": "FROM all vms TO vm 86abf627-5398-45ee-8e65-8260d3466e3f BLOCK udp PORT 54"
-}
diff --git a/node_modules/fw/etc/examples/rvm_rvm1 b/node_modules/fw/etc/examples/rvm_rvm1
deleted file mode 100644
index 427d715..0000000
--- a/node_modules/fw/etc/examples/rvm_rvm1
+++ /dev/null
@@ -1,8 +0,0 @@
-{
-    "uuid": "86abf627-5398-45ee-8e65-8260d3466e3f",
-    "owner_uuid": "e6c73bd2-fae4-4e0a-af76-2c05d088b066",
-    "ips": [ "172.29.0.4" ],
-    "tags": {
-        "role": "bastion"
-    }
-}
diff --git a/node_modules/fw/etc/examples/vmadm_cmd1 b/node_modules/fw/etc/examples/vmadm_cmd1
deleted file mode 100644
index cb27d0d..0000000
--- a/node_modules/fw/etc/examples/vmadm_cmd1
+++ /dev/null
@@ -1 +0,0 @@
-echo '{ "set_tags": { "role": "webserver" } }' | vmadm update 60e90d15-fb48-4bb9-90e6-1e1bb8269d1e
diff --git a/node_modules/fw/etc/examples/vmadm_rule1 b/node_modules/fw/etc/examples/vmadm_rule1
deleted file mode 100644
index 5721777..0000000
--- a/node_modules/fw/etc/examples/vmadm_rule1
+++ /dev/null
@@ -1,6 +0,0 @@
-{
-    "description": "block all outgoing SMTP traffic",
-    "enabled": true,
-    "owner_uuid": "e6c73bd2-fae4-4e0a-af76-2c05d088b066",
-    "rule": "FROM tag blocksmtp TO any BLOCK tcp PORT 25"
-}
diff --git a/node_modules/fw/etc/examples/vmadm_rule2 b/node_modules/fw/etc/examples/vmadm_rule2
deleted file mode 100644
index c619e74..0000000
--- a/node_modules/fw/etc/examples/vmadm_rule2
+++ /dev/null
@@ -1,6 +0,0 @@
-{
-    "description": "allow HTTP and HTTPS traffic",
-    "enabled": true,
-    "owner_uuid": "e6c73bd2-fae4-4e0a-af76-2c05d088b066",
-    "rule": "FROM any TO tag role=webserver ALLOW tcp (PORT 80 AND PORT 443)"
-}
diff --git a/node_modules/fw/etc/examples/vmadm_vm1 b/node_modules/fw/etc/examples/vmadm_vm1
deleted file mode 100644
index d3a9c4f..0000000
--- a/node_modules/fw/etc/examples/vmadm_vm1
+++ /dev/null
@@ -1,20 +0,0 @@
-{
-    "brand": "joyent",
-    "image_uuid": "7b0b4140-6e98-11e5-b1ae-ff68fe257228",
-    "firewall_enabled": true,
-    "nics": [
-      {
-        "nic_tag": "external",
-        "ip": "10.88.88.59",
-        "netmask": "255.255.255.0",
-        "gateway": "10.88.88.2",
-        "primary": true
-      }
-    ],
-    "owner_uuid": "e6c73bd2-fae4-4e0a-af76-2c05d088b066",
-    "ram": 128,
-    "tags": {
-        "blocksmtp": true
-    },
-    "uuid": "60e90d15-fb48-4bb9-90e6-1e1bb8269d1e"
-}
diff --git a/node_modules/fw/etc/fwadm.completion b/node_modules/fw/etc/fwadm.completion
deleted file mode 100644
index 5076c36..0000000
--- a/node_modules/fw/etc/fwadm.completion
+++ /dev/null
@@ -1,54 +0,0 @@
-_fwadm()
-{
-    local cur prev opts base
-    COMPREPLY=()
-    COMMANDS="add add-rvm delete delete-rvm disable enable get get-rvm list \
-        list-rvms rules rvm-rules start stats status stop update vms"
-    cur="${COMP_WORDS[COMP_CWORD]}"
-    prev="${COMP_WORDS[COMP_CWORD-1]}"
-
-    if [[  ${prev} == 'start'
-        || ${prev} == 'stats'
-        || ${prev} == 'status'
-        || ${prev} == 'stop'
-        || ${prev} == 'rules'
-    ]] && [[ ${COMP_WORDS[COMP_CWORD-2]} == "fwadm" ]]; then
-
-        vms_uuids=$(zoneadm list -cp | grep -v ':global:' | cut -d':' -f5 | \
-            sort | uniq)
-        COMPREPLY=( $(compgen -W "${vms_uuids}" -- ${cur}) )
-
-    elif [[ ${prev} == 'delete'
-          || ${prev} == 'disable'
-          || ${prev} == 'enable'
-          || ${prev} == 'get'
-          || ${prev} == 'update'
-          || ${prev} == 'vms' ]]; then
-
-        rule_uuids=$(/usr/bin/ls -1 /var/fw/rules/*.json | \
-            sed -e 's,/var/fw/rules/,,' -e 's/.json//')
-        COMPREPLY=( $(compgen -W "${rule_uuids}" -- ${cur}) )
-
-    elif [[ ${prev} == 'delete-rvm'
-          || ${prev} == 'get-rvm'
-          || ${prev} == 'rvm-rules' ]]; then
-
-        rvm_uuids=$(/usr/bin/ls -1 /var/fw/vms/*.json | \
-            sed -e 's,/var/fw/vms/,,' -e 's/.json//')
-        COMPREPLY=( $(compgen -W "${rvm_uuids}" -- ${cur}) )
-
-    elif [[ ${prev} == 'fwadm' ]]; then
-
-        COMPREPLY=( $(compgen -W "${COMMANDS}" -- ${cur}) )
-
-    elif [[ ${prev} == '-f' ]]; then
-
-        # Just expand files by default
-        COMPREPLY=( $(compgen -f -- ${cur}) )
-
-    fi
-
-    return 0
-}
-
-complete -F _fwadm fwadm
diff --git a/node_modules/fw/lib/cli.js b/node_modules/fw/lib/cli.js
deleted file mode 100644
index e93d8a0..0000000
--- a/node_modules/fw/lib/cli.js
+++ /dev/null
@@ -1,269 +0,0 @@
-/*
- * CDDL HEADER START
- *
- * The contents of this file are subject to the terms of the
- * Common Development and Distribution License, Version 1.0 only
- * (the "License").  You may not use this file except in compliance
- * with the License.
- *
- * You can obtain a copy of the license at http://smartos.org/CDDL
- *
- * See the License for the specific language governing permissions
- * and limitations under the License.
- *
- * When distributing Covered Code, include this CDDL HEADER in each
- * file.
- *
- * If applicable, add the following below this CDDL HEADER, with the
- * fields enclosed by brackets "[]" replaced with your own identifying
- * information: Portions Copyright [yyyy] [name of copyright owner]
- *
- * CDDL HEADER END
- *
- * Copyright (c) 2013, Joyent, Inc. All rights reserved.
- *
- *
- * fwadm: CLI shared logic
- */
-
-var fs = require('fs');
-var tab = require('tab');
-var tty = require('tty');
-var util = require('util');
-var verror = require('verror');
-
-
-
-// --- Globals
-
-
-
-var DEFAULT_FIELDS = ['uuid', 'enabled', 'rule'];
-var DEFAULT_FIELD_WIDTHS = {
-    created_by: 10,
-    description: 15,
-    enabled: 7,
-    global: 6,
-    owner_uuid: 36,
-    rule: 20,
-    uuid: 36,
-    version: 20
-};
-// Have we output an error?
-var OUTPUT_ERROR = false;
-var UUID_REGEX =
-    /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;
-
-
-
-// --- Exported functions
-
-
-
-/**
- * Displays a list of firewall rules
- */
-function displayRules(err, res, opts) {
-    if (err) {
-        return outputError(err, opts);
-    }
-
-    if (opts && opts.json) {
-        return console.log(json(res));
-    }
-
-    var fields = opts.fields || DEFAULT_FIELDS;
-    var tableOpts = {
-        columns: [],
-        omitHeader: opts.parseable || false,
-        rows: []
-    };
-
-    if (opts.parseable) {
-        tableOpts.columnSeparator = opts.delim || ':';
-    }
-
-    fields.forEach(function (f) {
-        tableOpts.columns.push({
-            align: 'left',
-            label: f.toUpperCase(),
-            // Parseable output: make all field widths 1, so that
-            // there's no whitespace between them
-            width: opts.parseable ? 1 : DEFAULT_FIELD_WIDTHS[f]
-        });
-    });
-
-    res.forEach(function (r) {
-        tableOpts.rows.push(fields.map(function (f, i) {
-            if (!r[f]) {
-                return '-';
-            }
-
-            var str = r[f].toString();
-            if (tableOpts.columnSeparator) {
-                str = str.split(tableOpts.columnSeparator).join(
-                    '\\' + tableOpts.columnSeparator);
-            }
-
-            if (opts.parseable) {
-                // We don't care about fixing the length for parseable
-                // output: there's no spacing
-                return str;
-            }
-
-            var len = str.length;
-            if (len > tableOpts.columns[i].width) {
-                tableOpts.columns[i].width = len;
-            }
-
-            return str;
-        }));
-    });
-
-    tab.emitTable(tableOpts);
-}
-
-
-/**
- * Output an error and then exit
- */
-function exitWithErr(err, opts) {
-    outputError(err, opts);
-    return process.exit(1);
-}
-
-
-/**
- * Reads the payload from one of: a file, stdin, a text argument
- */
-function getPayload(opts, args, callback) {
-    var file;
-    if (opts && opts.file) {
-        file = opts.file;
-    }
-
-    // If no file specified, try to find the rule from the commandline args
-    if (!file && args.length > 0) {
-        var payload = {
-            rule: args.join(' ')
-        };
-
-        return callback(null, payload);
-    }
-
-    if (!file && !tty.isatty(0)) {
-        file = '-';
-    }
-
-    if (!file) {
-        return callback(new verror.VError('Must supply file!'));
-    }
-
-    if (file === '-') {
-        file = '/dev/stdin';
-    }
-
-    fs.readFile(file, function (err, data) {
-        if (err) {
-            if (err.code === 'ENOENT') {
-                return callback(new verror.VError(
-                    'File "%s" does not exist.', file));
-            }
-            return callback(new verror.VError(
-                'Error reading "%s": %s', file, err.message));
-        }
-
-        return callback(null, JSON.parse(data.toString()));
-    });
-}
-
-
-/**
- * Have we output an error so far?
- */
-function haveOutputErr() {
-    return OUTPUT_ERROR;
-}
-
-
-/**
- * Pretty-print a JSON object
- */
-function json(obj) {
-    return JSON.stringify(obj, null, 2);
-}
-
-
-/**
- * Outputs an error to the console, displaying all of the error messages
- * if it's a MultiError
- */
-function outputError(err, opts) {
-    var errs = [ err ];
-
-    OUTPUT_ERROR = true;
-    if (err.hasOwnProperty('ase_errors')) {
-        errs = err.ase_errors;
-    }
-
-    if (opts && opts.json) {
-        return console.error(json({
-            errors: errs.map(function (e) {
-                var j = { message: e.message };
-                if (e.hasOwnProperty('code')) {
-                    j.code = e.code;
-                }
-
-                if (opts.verbose) {
-                    j.stack = e.stack;
-                }
-                return j;
-            })
-        }));
-    }
-
-    errs.forEach(function (e) {
-        console.error(e.message);
-        if (opts && opts.verbose) {
-            console.error(e.stack);
-        }
-    });
-}
-
-
-/**
- * Outputs one formatted rule line
- */
-function ruleLine(r) {
-    return util.format('%s %s %s', r.uuid,
-        r.enabled ? 'true   ' : 'false  ', r.rule);
-}
-
-
-/**
- * Prints an error and exits if the UUID is invalid
- */
-function validateUUID(arg) {
-    if (!arg) {
-        console.error('Error: missing UUID');
-        process.exit(1);
-    }
-    if (!UUID_REGEX.test(arg)) {
-        console.error('Error: invalid UUID "%s"', arg);
-        process.exit(1);
-    }
-    return arg;
-}
-
-
-
-module.exports = {
-    displayRules: displayRules,
-    exitWithErr: exitWithErr,
-    getPayload: getPayload,
-    haveOutputErr : haveOutputErr,
-    json: json,
-    outputError: outputError,
-    ruleLine: ruleLine,
-    validateUUID: validateUUID
-};
diff --git a/node_modules/fw/lib/filter.js b/node_modules/fw/lib/filter.js
deleted file mode 100644
index d94ba14..0000000
--- a/node_modules/fw/lib/filter.js
+++ /dev/null
@@ -1,363 +0,0 @@
-/*
- * CDDL HEADER START
- *
- * The contents of this file are subject to the terms of the
- * Common Development and Distribution License, Version 1.0 only
- * (the "License").  You may not use this file except in compliance
- * with the License.
- *
- * You can obtain a copy of the license at http://smartos.org/CDDL
- *
- * See the License for the specific language governing permissions
- * and limitations under the License.
- *
- * When distributing Covered Code, include this CDDL HEADER in each
- * file.
- *
- * If applicable, add the following below this CDDL HEADER, with the
- * fields enclosed by brackets "[]" replaced with your own identifying
- * information: Portions Copyright [yyyy] [name of copyright owner]
- *
- * CDDL HEADER END
- *
- * Copyright (c) 2014, Joyent, Inc. All rights reserved.
- *
- *
- * fwadm: functions for filtering rules and remote VMs
- */
-
-var assert = require('assert-plus');
-var mod_rvm = require('./rvm');
-var objEmpty = require('./util/obj').objEmpty;
-
-
-
-// --- Internal functions
-
-
-
-/**
- * For each rule in rules, call cb for each target present in the rule,
- * passing the rule, target type and target itself.
- *
- * @param rules {Array} : rule objects to process
- * @param types {Array} : (optional)
- */
-function ruleTypeWalk(rules, types, cb) {
-    if (typeof (types) === 'function') {
-        cb = types;
-        types = ['ips', 'tags', 'vms', 'wildcards'];
-    }
-
-    rules.forEach(function (rule) {
-        types.forEach(function (type) {
-            rule[type].forEach(function (t) {
-                if (typeof (t) === 'string') {
-                    cb(rule, type, t);
-                } else {
-                    cb(rule, type, t[0], t[1]);
-                }
-            });
-        });
-    });
-}
-
-
-
-// --- Exports
-
-
-
-/**
- * Filter the list of rules, returning only the rules that contain VMs
- * in the given remote VM lookup table
- *
- * @param remoteVMs {Object}: remote VM lookup table, as returned by
- *     createRemoteVMlookup()
- * @param rules {Array}: array of rule objects
- * @param callback {Function} `function (err, matchingRules)`
- *
- */
-function rulesByRVMs(remoteVMs, rules, log, callback) {
-    log.trace('filter.rulesByRVMs: entry');
-
-    if (!remoteVMs || objEmpty(remoteVMs)) {
-        log.debug({ rules: [] }, 'filter.rulesByRVMs: return');
-        return callback(null, []);
-    }
-
-    var matchingRules = [];
-
-    ruleTypeWalk(rules, ['tags', 'vms', 'wildcards'], function (rule, type, t) {
-        if (type === 'wildcards' && t === 'any') {
-            return;
-        }
-
-        if (remoteVMs[type].hasOwnProperty(t)
-            && !objEmpty(remoteVMs[type][t])) {
-            if (!rule.hasOwnProperty('owner_uuid')) {
-                matchingRules.push(rule);
-                return;
-            }
-
-            for (var uuid in remoteVMs[type][t]) {
-                if (remoteVMs[type][t][uuid].owner_uuid == rule.owner_uuid) {
-                    matchingRules.push(rule);
-                    return;
-                }
-            }
-        }
-        return;
-    });
-
-    log.debug({ rules: matchingRules }, 'filter.rulesByRVMs: return');
-    return callback(null, matchingRules);
-}
-
-
-/**
- * Find rules that match a set of UUIDs. Warns if any of the UUIDs can't be
- * found.
- *
- * @param rules {Array} : list of rules to filter
- * @param uuids {Array} : UUIDs of rules to filter
- * @param callback {Function} : `function (err, rules)`
- * - Where matching is an object:
- *     { matching: [ <rules> ], notMatching: [ <rules> ] }
- */
-function rulesByUUIDs(rules, uuids, log, callback) {
-    log.debug(uuids, 'filter.rulesByUUIDs: entry');
-
-    var results = {
-        matching: [],
-        notMatching: []
-    };
-
-    if (!uuids || uuids.length === 0) {
-        results.notMatching = rules;
-        return callback(null, results);
-    }
-
-    var uuidHash = uuids.reduce(function (acc, u) {
-        acc[u] = 1;
-        return acc;
-    }, {});
-
-    rules.forEach(function (rule) {
-        if (uuidHash.hasOwnProperty(rule.uuid)) {
-            delete uuidHash[rule.uuid];
-            results.matching.push(rule);
-        } else {
-            results.notMatching.push(rule);
-        }
-    });
-
-    if (!objEmpty(uuidHash)) {
-        log.warn(Object.keys(uuidHash), 'Trying to delete unknown rules');
-    }
-
-    log.debug({ rules: results.matching }, 'filter.rulesByUUIDs: return');
-    return callback(null, results);
-}
-
-
-/**
- * Find rules that apply to a set of VMs
- *
- * @param allVMs {Object} : VM lookup table
- * @param vms {Object} : hash of VM UUIDs to find rules for
- * - e.g. : { uuid1: 1, uuid2: 2 }
- * @param rules {Array} : list of rules to filter
- * @param callback {Function} : `function (err, matching)`
- * - Where matching is an array of the matching rule objects
- */
-function rulesByVMs(allVMs, vms, rules, log, callback) {
-    log.debug({ vms: vms }, 'filter.rulesByVMs: entry');
-    var matchingRules = [];
-    var matchingUUIDs = {};
-
-    ruleTypeWalk(rules, function _filterByVM(rule, type, t, val) {
-        if (val !== undefined) {
-            type = 'tagValues';
-        }
-
-        log.trace('filter.rulesByVMs: type=%s, t=%s, rule=%s',
-            type, t, rule);
-
-        if (!allVMs[type].hasOwnProperty(t)) {
-            return;
-        }
-
-        var vmList = allVMs[type][t];
-
-        if (val) {
-            if (!allVMs[type][t].hasOwnProperty(val)) {
-                return;
-            }
-            vmList = allVMs[type][t][val];
-        }
-
-        var owner = rule.owner_uuid;
-
-        for (var uuid in vmList) {
-            if (!vms.hasOwnProperty(uuid)) {
-                continue;
-            }
-
-            if (owner && vmList[uuid].owner_uuid != owner) {
-                log.trace('filter.rulesByVMs: VM %s owner_uuid=%s does not'
-                    + ' match rule owner_uuid=%s: %s', vmList[uuid].owner_uuid,
-                    owner, rule);
-                continue;
-            }
-
-            if (!matchingUUIDs[rule.uuid]) {
-                matchingRules.push(rule);
-                matchingUUIDs[rule.uuid] = true;
-            }
-
-            return;
-        }
-    });
-
-    log.debug({ rules: matchingRules }, 'filter.rulesByVMs: return');
-    return callback(null, matchingRules);
-}
-
-
-
-/**
- * Filters the remote VM lookup table into a lookup of RVMs that match the
- * UUIDs and one that doesn't.
- *
- * @param allRVMs {Object}: remote VM lookup table, as returned by
- *   createRemoteVMlookup()
- * @param uuids {Array}: array of remoteVM UUIDs
- * @param callback {Function} `function (err, matchingRVMs)`
- * - matchingRVMs {Object} : with matching and notMatching properties, both
- *   of which are remote VM lookups
- */
-function rvmsByUUIDs(allRVMs, uuids, log, callback) {
-    log.trace(uuids, 'filter.rvmsByUUIDs: entry');
-
-    if (!uuids || uuids.length === 0) {
-        return callback(null, {
-            matching: mod_rvm.createLookup(null, log),
-            notMatching: allRVMs
-        });
-    }
-
-    var matching = {};
-    var notMatching = {};
-
-    // XXX: warn or error if we try to delete an RVM that doesn't exist?
-    for (var uuid in allRVMs.vms) {
-        if (uuids.indexOf(uuid) === -1) {
-            // See the comment in createLookup() for the double UUID here:
-            notMatching[uuid] = allRVMs.vms[uuid][uuid];
-        } else {
-            matching[uuid] = allRVMs.vms[uuid][uuid];
-        }
-    }
-
-    return callback(null, {
-        matching: mod_rvm.createLookup(matching, log),
-        notMatching: mod_rvm.createLookup(notMatching, log)
-    });
-}
-
-
-/**
- * Returns an object of the VMs the given rules apply to
- *
- * @param opts {Object} : options:
- * - log {Object}: bunyan logger
- * - vms {Object}: VM lookup table, as returned by createVMlookup()
- * - rules {Array}: array of rule objects
- * - includeDisabled {Boolean, optional} : if set, include VMs that have
- *   their firewalls disabled in the filter. Defaults to true.
- * @param callback {Function} `function (err, matchingVMs)`
- * - Where matchingVMs contains VM objects keyed by uuid, like:
- *     { vm_uuid: vmObj }
- */
-function vmsByRules(opts, callback) {
-    assert.object(opts, 'opts');
-    assert.object(opts.log, 'opts.log');
-    assert.arrayOfObject(opts.rules, 'opts.rules');
-    assert.object(opts.vms, 'opts.vms');
-
-    opts.log.debug({ rules: opts.rules }, 'filter.vmsByRules: entry');
-
-    var includeDisabled = true;
-    var rules = opts.rules;
-    var matchingVMs = {};
-    var vms = opts.vms;
-
-    if (opts.hasOwnProperty('includeDisabled')) {
-        includeDisabled = opts.includeDisabled;
-    }
-
-    ruleTypeWalk(rules, function _matchingVMs(rule, type, t, val) {
-        if (val !== undefined) {
-            type = 'tagValues';
-        }
-
-        if (type === 'wildcards' && t === 'any') {
-            return;
-        }
-
-        if (!vms[type].hasOwnProperty(t)) {
-            opts.log.trace(
-                'filter.vmsByRules: type=%s, t=%s, rule=%s: not in VM hash',
-                type, t, rule);
-            return;
-        }
-
-        var vmList = vms[type][t];
-        if (val) {
-            if (!vms[type][t].hasOwnProperty(val)) {
-                return;
-            }
-            vmList = vms[type][t][val];
-        }
-
-        var owner = rule.owner_uuid;
-
-        Object.keys(vmList).forEach(function (uuid) {
-            var vm = vmList[uuid];
-            if (owner && vm.owner_uuid != owner) {
-                opts.log.trace(
-                    'filter.vmsByRules: type=%s, t=%s, VM=%s: rule owner uuid'
-                    + ' (%s) did not match VM owner uuid (%s): %s',
-                    type, t, uuid, owner, vm.owner_uuid, rule);
-                return;
-            }
-
-            if (!includeDisabled && !vm.enabled) {
-                opts.log.trace(
-                    'filter.vmsByRules: type=%s, t=%s, VM=%s: '
-                    + 'VM matched but did not have firewall_enabled=true: %s',
-                    type, t, uuid, rule);
-                return;
-            }
-
-            opts.log.trace(
-                'filter.vmsByRules: type=%s, t=%s, VM=%s: matched rule: %s',
-                type, t, uuid, rule);
-            matchingVMs[uuid] = vm;
-        });
-    });
-
-    opts.log.debug({ vms: matchingVMs }, 'filter.vmsByRules: return');
-    return callback(null, matchingVMs);
-}
-
-
-
-module.exports = {
-    rulesByRVMs: rulesByRVMs,
-    rulesByUUIDs: rulesByUUIDs,
-    rulesByVMs: rulesByVMs,
-    rvmsByUUIDs: rvmsByUUIDs,
-    vmsByRules: vmsByRules
-};
diff --git a/node_modules/fw/lib/fw.js b/node_modules/fw/lib/fw.js
deleted file mode 100644
index fba979f..0000000
--- a/node_modules/fw/lib/fw.js
+++ /dev/null
@@ -1,2625 +0,0 @@
-/*
- * CDDL HEADER START
- *
- * The contents of this file are subject to the terms of the
- * Common Development and Distribution License, Version 1.0 only
- * (the "License").  You may not use this file except in compliance
- * with the License.
- *
- * You can obtain a copy of the license at http://smartos.org/CDDL
- *
- * See the License for the specific language governing permissions
- * and limitations under the License.
- *
- * When distributing Covered Code, include this CDDL HEADER in each
- * file.
- *
- * If applicable, add the following below this CDDL HEADER, with the
- * fields enclosed by brackets "[]" replaced with your own identifying
- * information: Portions Copyright [yyyy] [name of copyright owner]
- *
- * CDDL HEADER END
- *
- *
- * Copyright (c) 2016, Joyent, Inc. All rights reserved.
- *
- *
- * fwadm: Main entry points
- */
-
-var assert = require('assert-plus');
-var clone = require('clone');
-var filter = require('./filter');
-var fs = require('fs');
-var mkdirp = require('mkdirp');
-var mod_ipf = require('./ipf');
-var mod_obj = require('./util/obj');
-var mod_rvm = require('./rvm');
-var mod_rule = require('fwrule');
-var pipeline = require('./pipeline').pipeline;
-var sprintf = require('extsprintf').sprintf;
-var util = require('util');
-var util_err = require('./util/errors');
-var util_log = require('./util/log');
-var util_vm = require('./util/vm');
-var vasync = require('vasync');
-var verror = require('verror');
-
-var createSubObjects = mod_obj.createSubObjects;
-var forEachKey = mod_obj.forEachKey;
-var objEmpty = mod_obj.objEmpty;
-var mergeObjects = mod_obj.mergeObjects;
-
-
-
-// --- Globals
-
-
-
-var DIRECTIONS = ['from', 'to'];
-var RULE_PATH = '/var/fw/rules';
-var IPF_CONF = '%s/config/ipf.conf';
-var IPF_CONF_OLD = '%s/config/ipf.conf.old';
-var IPF6_CONF = '%s/config/ipf6.conf';
-var IPF6_CONF_OLD = '%s/config/ipf6.conf.old';
-var NOT_RUNNING_MSG = 'Could not find running zone';
-// VM fields that affect filtering
-var VM_FIELDS = [
-    'firewall_enabled',
-    'nics',
-    'owner_uuid',
-    'state',
-    'tags',
-    'uuid',
-    'zonepath'
-];
-// VM fields required for filtering
-var VM_FIELDS_REQUIRED = [
-    'nics',
-    'state',
-    'tags',
-    'uuid',
-    'zonepath'
-];
-
-var icmpr = /^icmp6?$/;
-
-var fallbacks = [
-    '',
-    '# fwadm fallbacks',
-    'block in all',
-    'pass out quick proto tcp from any to any flags S/SA keep state',
-    'pass out proto tcp from any to any',
-    'pass out proto udp from any to any keep state'];
-
-var v4fallbacks = fallbacks.concat([
-    'pass out quick proto icmp from any to any keep state',
-    'pass out proto icmp from any to any']);
-
-var v6fallbacks = fallbacks.concat([
-    'pass out quick proto ipv6-icmp from any to any keep state',
-    'pass out proto ipv6-icmp from any to any']);
-
-
-// --- Internal helper functions
-
-
-
-/**
- * Assert that this is either a string or an object
- */
-function assertStringOrObject(obj, name) {
-    if (typeof (obj) !== 'string' && typeof (obj) !== 'object') {
-        assert.ok(false, name + ' ([string] or [object]) required');
-    }
-}
-
-
-/**
- * For a rule and a direction, return whether or not we actually need to
- * write ipf rules. FROM+ALLOW and TO+BLOCK are essentially no-ops, as
- * they will be caught by the block / allow catch-all default rules.
- */
-function noRulesNeeded(dir, rule) {
-    if ((dir === 'from' && rule.action === 'allow')
-            || (dir === 'to' && rule.action === 'block')) {
-        return true;
-    }
-    return false;
-}
-
-
-/**
- * For each rule in rules, call cb for each target present in the rule,
- * passing the rule, direction, target type and target itself.
- *
- * @param rules {Array} : rule objects to process
- */
-function ruleTypeDirWalk(rules, cb) {
-    rules.forEach(function (rule) {
-        DIRECTIONS.forEach(function (dir) {
-            ['ips', 'tags', 'vms'].forEach(function (type) {
-                if (rule[dir].hasOwnProperty(type)) {
-                    rule[dir][type].forEach(function (t) {
-                        cb(rule, dir, type, t);
-                    });
-                }
-            });
-        });
-    });
-}
-
-
-/**
- * Returns a list of rules with duplicates removed. Rules in list1 will
- * override rules in list2
- */
-function dedupRules(list1, list2) {
-    var seenUUIDs = {};
-    var toReturn = [];
-
-    list1.concat(list2).forEach(function (r) {
-        if (r.hasOwnProperty('uuid') && !seenUUIDs.hasOwnProperty(r.uuid)) {
-            toReturn.push(r);
-            seenUUIDs[r.uuid] = 1;
-        }
-    });
-
-    return toReturn;
-}
-
-
-/**
- * Starts ipf and reloads the rules for a VM
- */
-function startIPF(opts, log, callback) {
-    var ipfConf = util.format(IPF_CONF, opts.zonepath);
-    var ipf6Conf = util.format(IPF6_CONF, opts.zonepath);
-
-    return mod_ipf.start(opts.vm, log, function (err, res) {
-        if (err) {
-            return callback(err, res);
-        }
-        return mod_ipf.reload(opts.vm, ipfConf, ipf6Conf, log, callback);
-    });
-}
-
-
-
-// --- Internal functions
-
-
-
-/**
- * Validates the payload passed to the exported functions. Throws an error
- * if not in the right format
- */
-function validateOpts(opts) {
-    assert.object(opts, 'opts');
-    assert.ok(util.isArray(opts.vms),
-        'opts.vms ([object]) required');
-    // Allow opts.vms to be empty - it's possible, though unlikely, that
-    // there are no VMs on this system
-    if (opts.vms.length !== 0) {
-        assert.arrayOfObject(opts.vms, 'opts.vms');
-    }
-}
-
-
-/**
- * Create rule objects from the rules
- *
- * @param {Array} inRules : raw rule input objects to create
- * @param {Function} callback : `f(err, newRules)`
- * - newRules {Array} : array of rule objects
- */
-function createRules(inRules, createdBy, callback) {
-    var errors = [];
-    var rules = [];
-    var ver = mod_rule.generateVersion();
-
-    if (!callback) {
-        callback = createdBy;
-        createdBy = null;
-    }
-
-    if (!inRules || inRules.length === 0) {
-        return callback(null, []);
-    }
-
-    inRules.forEach(function (payloadRule) {
-        var rule = clone(payloadRule);
-        if (!rule.hasOwnProperty('version')) {
-            rule.version = ver;
-        }
-
-        if (createdBy && !rule.hasOwnProperty('created_by')) {
-            rule.created_by = createdBy;
-        }
-
-        try {
-            var r = mod_rule.create(rule, { enforceGlobal: true });
-            rules.push(r);
-        } catch (err) {
-            errors.push(err);
-        }
-    });
-
-    if (errors.length !== 0) {
-        return callback(util_err.createMultiError(errors));
-    }
-
-    return callback(null, rules);
-}
-
-
-/**
- * Merge updates from the rules in payload, and return the updated
- * rule objects
- */
-function createUpdatedRules(opts, log, callback) {
-    log.trace('createUpdatedRules: entry');
-    var originalRules = opts.originalRules;
-    var updatedRules = opts.updatedRules;
-
-    if (!updatedRules || updatedRules.length === 0) {
-        return callback(null, []);
-    }
-
-    var mergedRule;
-    var origRule;
-    var originals = {};
-    var updated = [];
-    var ver = mod_rule.generateVersion();
-
-    originalRules.forEach(function (r) {
-        originals[r.uuid] = r;
-    });
-
-    updatedRules.forEach(function (rule) {
-        // Assume that we're allowed to do adds - findRules() would have errored
-        // out if allowAdds was unset and an add was attempted
-        if (!rule.hasOwnProperty('version')) {
-            rule.version = ver;
-        }
-
-        if (opts.createdBy && !rule.hasOwnProperty('created_by')) {
-            rule.created_by = opts.createdBy;
-        }
-
-        if (originals.hasOwnProperty(rule.uuid)) {
-            origRule = originals[rule.uuid].serialize();
-            mergedRule = mergeObjects(rule, origRule);
-
-            if (!(rule.hasOwnProperty('owner_uuid')
-                && rule.hasOwnProperty('global'))) {
-                // If both owner_uuid and global are set - let
-                // this bubble up the appropriate error in createRules()
-
-                if (rule.hasOwnProperty('owner_uuid')
-                    && origRule.hasOwnProperty('global')) {
-                    // Updating from global -> owner_uuid rule
-                    delete mergedRule.global;
-                }
-
-                if (rule.hasOwnProperty('global')
-                    && origRule.hasOwnProperty('owner_uuid')) {
-                    // Updating from owner_uuid -> global rule
-                    delete mergedRule.owner_uuid;
-                }
-            }
-
-            updated.push(mergedRule);
-
-        } else {
-            updated.push(rule);
-        }
-    });
-
-    log.debug(updated, 'createUpdatedRules: rules merged');
-    return createRules(updated, callback);
-}
-
-function mergeIntoLookup(vmStore, vm) {
-    vmStore.all[vm.uuid] = vm;
-    mod_obj.addToObj3(vmStore, 'vms', vm.uuid, vm.uuid, vm);
-
-    forEachKey(vm.tags, function (tag, val) {
-        createSubObjects(vmStore, 'tags', tag, vm.uuid, vm);
-        createSubObjects(vmStore, 'tagValues', tag, val, vm.uuid, vm);
-    });
-
-    vm.ips.forEach(function (ip) {
-        mod_obj.addToObj3(vmStore, 'ips', ip, vm.uuid, vm);
-    });
-
-    // XXX: subnet
-}
-
-/**
- * Turns a list of VMs from VM.js into a lookup table, keyed by the various
- * properties we'd like to filter VMs by (tags, ips, and vms),
- * like so:
- *   {
- *     all: { uuid1: <vm 1> }
- *     tags: { tag2: <vm 2> }
- *     vms: { uuid1: <vm 1> }
- *     ips: { 10.0.0.1: <vm 3> }
- *     ips: { 10.0.0.1: <vm 3> }
- *   }
- */
-function createVMlookup(vms, log, callback) {
-    log.trace('createVMlookup: entry');
-
-    var errs = [];
-    var vmStore = {
-        all: {},
-        ips: {},
-        subnets: {},
-        tags: {},
-        tagValues: {},
-        vms: {},
-        wildcards: {}
-    };
-
-    vmStore.wildcards.vmall = vmStore.all;
-
-    vms.forEach(function (fullVM) {
-        var missing = [];
-        VM_FIELDS_REQUIRED.forEach(function (field) {
-            if (!fullVM.hasOwnProperty(field)) {
-                missing.push(field);
-            }
-        });
-
-        if (missing.length !== 0) {
-            log.error({ vm: fullVM, missing: missing }, 'missing VM fields');
-            errs.push(new verror.VError(
-                'VM %s: missing field%s required for firewall: %s',
-                fullVM.uuid,
-                missing.length === 0 ? '' : 's',
-                missing.join(', ')));
-            return;
-        }
-
-        var vm = {
-            enabled: fullVM.firewall_enabled || false,
-            ips: util_vm.ipsFromNICs(fullVM.nics),
-            owner_uuid: fullVM.owner_uuid,
-            state: fullVM.state,
-            tags: fullVM.tags,
-            uuid: fullVM.uuid,
-            zonepath: fullVM.zonepath
-        };
-        log.trace(vm, 'Adding VM "%s" to lookup', vm.uuid);
-
-        mergeIntoLookup(vmStore, vm);
-    });
-
-    if (errs.length !== 0) {
-        return callback(util_err.createMultiError(errs));
-    }
-
-    if (log.debug()) {
-        var truncated = { };
-        ['vms', 'tags', 'ips'].forEach(function (type) {
-            truncated[type] = {};
-            if (!vmStore.hasOwnProperty(type)) {
-                return;
-            }
-
-            Object.keys(vmStore[type]).forEach(function (t) {
-                truncated[type][t] = Object.keys(vmStore[type][t]);
-            });
-        });
-
-        log.debug(truncated, 'vmStore');
-    }
-
-    return callback(null, vmStore);
-}
-
-
-/**
- * Create a lookup table for remote VMs
- */
-function createRemoteVMlookup(remoteVMs, log, callback) {
-    return callback(null, mod_rvm.createLookup(remoteVMs, log));
-}
-
-
-/**
- * Load a single rule from disk, returning a rule object
- *
- * @param {String} uuid : UUID of the rule to load
- * @param {Function} callback : `f(err, rule)`
- * - vm {Object} : rule object (as per mod_rule)
- */
-function loadRule(uuid, log, callback) {
-    var file = util.format('%s/%s.json', RULE_PATH, uuid);
-    log.debug('loadRule: loading rule file "%s"', file);
-
-    return fs.readFile(file, function (err, raw) {
-        if (err) {
-            if (err.code == 'ENOENT') {
-                var uErr = new verror.VError('Unknown rule "%s"', uuid);
-                uErr.code = 'ENOENT';
-                return callback(uErr);
-            }
-
-            return callback(err);
-        }
-
-        var rule;
-
-        try {
-            var parsed = JSON.parse(raw);
-            log.trace(parsed, 'loadRule: loaded rule file "%s"', file);
-            // XXX: validate that the rule has a uuid
-            rule = mod_rule.create(parsed);
-        } catch (err2) {
-            log.error(err2, 'loadRule: error creating rule');
-            return callback(err2);
-        }
-
-        if (log.trace()) {
-            log.trace(rule.toString(), 'loadRule: created rule');
-        }
-
-        return callback(null, rule);
-    });
-}
-
-
-/**
- * Loads all rules from disk
- */
-function loadAllRules(log, callback) {
-    var rules = [];
-
-    fs.readdir(RULE_PATH, function (err, files) {
-        if (err) {
-            if (err.code === 'ENOENT') {
-                return callback(null, []);
-            }
-            return callback(err);
-        }
-
-        return vasync.forEachParallel({
-            inputs: files,
-            func: function (file, cb) {
-                if (file.indexOf('.json', file.length - 5) === -1) {
-                    return cb(null);
-                }
-
-                return loadRule(file.substring(0, file.length - 5),
-                    log, function (err2, rule) {
-                    if (rule) {
-                        rules.push(rule);
-                    }
-                    return cb(err2);
-                });
-            }
-        }, function (err3, res) {
-            if (err3) {
-                log.error(err3, 'loadAllRules: return');
-                return callback(err3);
-            }
-
-            log.debug({ fullRules: rules }, 'loadAllRules: return');
-            return callback(null, rules);
-        });
-    });
-}
-
-
-/*
- * Saves rules to disk
- *
- * @param {Array} rules : rule objects to save
- * @param {Function} callback : `f(err)`
- */
-function saveRules(rules, log, callback) {
-    var uuids = [];
-    var versions = {};
-    log.debug({ rules: rules }, 'saveRules: entry');
-
-    return vasync.pipeline({
-    funcs: [
-        function _mkdir(_, cb) { mkdirp(RULE_PATH, cb); },
-        function _writeRules(_, cb) {
-            return vasync.forEachParallel({
-                inputs: rules,
-                func: function _writeRule(rule, cb2) {
-                    var ser = rule.serialize();
-                    // XXX: allow overriding version in the payload
-                    var filename = util.format('%s/%s.json.%s', RULE_PATH,
-                        rule.uuid, rule.version);
-                    log.trace(ser, 'writing "%s"', filename);
-
-                    return fs.writeFile(filename, JSON.stringify(ser, null, 2),
-                        function (err) {
-                        if (err) {
-                            return cb2(err);
-                        }
-                        uuids.push(rule.uuid);
-                        versions[rule.uuid] = rule.version;
-
-                        return cb2(null);
-                    });
-                }
-            // XXX: if there are failures here, we want to delete these files
-            }, cb);
-        },
-        function _renameRules(_, cb) {
-            return vasync.forEachParallel({
-                inputs: uuids,
-                func: function _renameRule(uuid, cb2) {
-                    var before = util.format('%s/%s.json.%s', RULE_PATH, uuid,
-                        versions[uuid]);
-                    var after = util.format('%s/%s.json', RULE_PATH, uuid);
-                    log.trace('renaming "%s" to "%s"', before, after);
-                    fs.rename(before, after, cb2);
-                }
-            }, cb);
-        }
-    ]}, callback);
-}
-
-
-/*
- * Deletes rules on disk
- *
- * @param {Array} rules : rule objects to delete
- * @param {Function} callback : `f(err)`
- */
-function deleteRules(rules, log, callback) {
-    log.debug({ rules: rules }, 'deleteRules: entry');
-
-    return vasync.forEachParallel({
-        inputs: rules.map(function (r) { return r.uuid; }),
-        func: function _delRule(uuid, cb) {
-            var filename = util.format('%s/%s.json', RULE_PATH, uuid);
-            log.trace('deleting "%s"', filename);
-
-            fs.unlink(filename, function (err) {
-                if (err && err.code == 'ENOENT') {
-                    return cb();
-                }
-
-                return cb(err);
-            });
-        }
-    }, callback);
-}
-
-
-/**
- * Loads rules and remote VMs from disk
- */
-function loadDataFromDisk(log, callback) {
-    var onDisk = {};
-
-    vasync.parallel({
-        funcs: [
-            function _diskRules(cb) {
-                loadAllRules(log, function (err, res) {
-                    if (res) {
-                        onDisk.rules = res;
-                    }
-
-                    return cb(err);
-                });
-            },
-
-            function _diskRemoteVMs(cb) {
-                mod_rvm.loadAll(log, function (err, res) {
-                    if (res) {
-                        onDisk.remoteVMs = res;
-                    }
-
-                    return cb(err);
-                });
-            }
-        ]
-    }, function (err) {
-        if (err) {
-            return callback(err);
-        }
-
-        return callback(null, onDisk);
-    });
-}
-
-
-/**
- * Finds rules in the list, returning an error if they can't be found
- */
-function findRules(opts, log, callback) {
-    log.trace('findRules: entry');
-    var allowAdds = opts.allowAdds || false;
-    var allRules = opts.allRules;
-    var rules = opts.rules;
-
-    if (!rules || rules.length === 0) {
-        return callback(null, []);
-    }
-
-    var errs = [];
-    var found = [];
-    var uuids = {};
-    rules.forEach(function (r) {
-        if (!r.hasOwnProperty('uuid')) {
-            errs.push(new verror.VError('Missing UUID of rule: %j', r));
-            return;
-        }
-        uuids[r.uuid] = 1;
-    });
-    log.debug(uuids, 'findRules: rules');
-
-    allRules.forEach(function (r) {
-        if (!r.hasOwnProperty('uuid')) {
-            errs.push(new verror.VError('Missing UUID of rule: %j', r));
-        }
-
-        if (uuids.hasOwnProperty(r.uuid)) {
-            delete uuids[r.uuid];
-            found.push(r);
-        }
-    });
-
-    // If we're allowing adds, missing rules aren't an error
-    if (!allowAdds && !objEmpty(uuids)) {
-        Object.keys(uuids).forEach(function (uuid) {
-            errs.push(new verror.VError('Unknown rule: %s', uuid));
-        });
-    }
-
-    if (log.debug()) {
-        var ret = { rules: found };
-        if (allowAdds) {
-            ret.adds = Object.keys(uuids);
-        } else {
-            ret.missing = Object.keys(uuids);
-        }
-        log.debug(ret, 'findRules: return');
-    }
-
-    if (errs.length !== 0) {
-        return callback(util_err.createMultiError(errs));
-    }
-
-    return callback(null, found);
-}
-
-
-/**
- * Looks up the given VMs in the VM lookup object, and returns an
- * object mapping UUIDs to VM lookup objects
- */
-function lookupVMs(allVMs, vms, log, callback) {
-    log.debug({ vms: vms }, 'lookupVMs: entry');
-
-    if (!vms || vms.length === 0) {
-        log.debug('lookupVMs: no VMs to lookup: returning');
-        return callback(null, {});
-    }
-
-    var toReturn = {};
-    var errs = [];
-    vms.forEach(function (vm) {
-        if (!vm.hasOwnProperty('uuid')) {
-            errs.push(new verror.VError('VM missing uuid property: %j', vm));
-            return;
-        }
-        if (!allVMs.all.hasOwnProperty(vm.uuid)) {
-            errs.push(new verror.VError('Could not find VM "%s" in VM list',
-                vm.uuid));
-            return;
-        }
-        toReturn[vm.uuid] = allVMs.all[vm.uuid];
-    });
-
-    if (errs.length !== 0) {
-        return callback(util_err.createMultiError(errs));
-    }
-
-    log.debug({ vms: toReturn }, 'lookupVMs: return');
-    return callback(null, toReturn);
-}
-
-
-/**
- * Validates the list of rules, ensuring that there's enough information
- * to write each rule to disk
- *
- * @param vms {Object}: VM lookup table, as returned by createVMlookup()
- * @param rvms {Object}: remote VM lookup table, as returned by
- *     createRemoteVMlookup()
- * @param rules {Array}: array of rule objects
- * @param callback {Function} `function (err)`
- */
-function validateRules(vms, rvms, rules, log, callback) {
-    log.trace(rules, 'validateRules: entry');
-    var sideData = {};
-    var errs = [];
-    var rulesLeft = rules.reduce(function (h, r) {
-        h[r.uuid] = r;
-        return h;
-    }, {});
-
-    // XXX: make owner uuid aware
-
-    // First go through the rules finding all the VMs we need rules for,
-    // and mark any missing types
-    ruleTypeDirWalk(rules, function _getRuleData(rule, dir, type, t) {
-        // Don't bother checking IPs, since we don't need any additional
-        // data in order to create an ipf rule
-        if (type == 'ips') {
-            return;
-        }
-
-        // Allow creating rules that target tags, but not any specific VMs
-        if (type == 'tags') {
-            delete rulesLeft[rule.uuid];
-            return;
-        }
-
-        createSubObjects(sideData, rule.uuid, dir, 'missing', type);
-        createSubObjects(sideData, rule.uuid, dir, 'vms');
-
-        if (vms[type].hasOwnProperty(t)) {
-            for (var vm in vms[type][t]) {
-                sideData[rule.uuid][dir].vms[vm] = 1;
-            }
-            delete rulesLeft[rule.uuid];
-
-        } else if (rvms[type].hasOwnProperty(t)) {
-            delete rulesLeft[rule.uuid];
-
-        } else {
-            sideData[rule.uuid][dir].missing[type][t] = 1;
-        }
-    });
-
-    for (var uuid in rulesLeft) {
-        errs.push(new verror.VError('No VMs found that match rule: %s',
-                rulesLeft[uuid].text()));
-    }
-
-    rules.forEach(function (rule) {
-        var missing = sideData[rule.uuid];
-
-        if (!missing) {
-            return;
-        }
-
-        DIRECTIONS.forEach(function (dir) {
-            var otherSide = (dir == 'to' ? 'from' : 'to');
-
-            if (!missing.hasOwnProperty(dir) || objEmpty(missing[dir].vms)
-                || !missing.hasOwnProperty(otherSide)) {
-                return;
-            }
-
-            for (var type in missing[otherSide].missing) {
-                for (var t in missing[otherSide].missing[type]) {
-                    errs.push(new verror.VError('Missing %s %s for rule: %s',
-                            type.replace(/s$/, ''), t, rule.text()));
-                }
-            }
-        });
-    });
-
-    if (errs.length !== 0) {
-        return callback(util_err.createMultiError(errs));
-    }
-
-    return callback();
-}
-
-
-/**
- * Returns the appropriate target string based on the rule's protocol
- * (eg: code for ICMP, port for TCP / UDP)
- */
-function protoTarget(rule, target) {
-    if (target === 'all') {
-        return '';
-    } else if (icmpr.test(rule.protocol)) {
-        var typeArr = target.split(':');
-        return 'icmp-type ' + typeArr[0]
-            + (typeArr.length === 1 ? '' : ' code ' + typeArr[1]);
-    } else {
-        if (target.hasOwnProperty('start')
-            && target.hasOwnProperty('end')) {
-
-            return 'port ' + target.start + ' : ' + target.end;
-        } else {
-            return 'port = ' + target;
-        }
-    }
-}
-
-
-/**
- * Returns an object containing ipf rule text and enough data to sort on
- */
-function ipfRuleObj(opts) {
-    var dir = opts.direction;
-    var rule = opts.rule;
-
-    // ipfilter uses /etc/protocols which calls ICMPv6 'ipv6-icmp'
-    var ipfProto = (rule.protocol === 'icmp6') ? 'ipv6-icmp' : rule.protocol;
-
-    var sortObj = {
-        action: rule.action,
-        direction: dir,
-        protocol: rule.protocol,
-        v4text: [ '', util.format('# rule=%s, version=%s, %s=%s',
-            rule.uuid, rule.version, opts.type, opts.value)
-        ],
-        v6text: [ '', util.format('# rule=%s, version=%s, %s=%s',
-            rule.uuid, rule.version, opts.type, opts.value)
-        ],
-        type: opts.type,
-        uuid: rule.uuid,
-        value: opts.value,
-        version: rule.version
-    };
-
-    if (opts.type === 'wildcard' && opts.value === 'any') {
-        rule.protoTargets.sort().forEach(function (t) {
-            var wild = util.format('%s %s quick proto %s from any to any %s',
-                rule.action === 'allow' ? 'pass' : 'block',
-                dir === 'from' ? 'out' : 'in',
-                ipfProto,
-                protoTarget(rule, t));
-            if (rule.protocol !== 'icmp6')
-                sortObj.v4text.push(wild);
-            if (rule.protocol !== 'icmp')
-                sortObj.v6text.push(wild);
-        });
-
-        return sortObj;
-    }
-
-    var targets = mod_obj.isArray(opts.targets) ?
-        opts.targets : [ opts.targets ];
-
-    targets.forEach(function (target) {
-        var isv6 = target.indexOf(':') !== -1;
-
-        // Don't generate rules for ICMPv4/IPv6 or ICMPv6/IPv4
-        if ((isv6 && rule.protocol === 'icmp')
-            || (!isv6 && rule.protocol === 'icmp6')) {
-            return;
-        }
-
-        var text = isv6 ? sortObj.v6text : sortObj.v4text;
-
-        // XXX: need to do Number() on these before sorting?
-        rule.protoTargets.sort().forEach(function (t) {
-            text.push(
-                util.format('%s %s quick proto %s from %s to %s %s',
-                    rule.action === 'allow' ? 'pass' : 'block',
-                    dir === 'from' ? 'out' : 'in',
-                    ipfProto,
-                    dir === 'to' ? target : 'any',
-                    dir === 'to' ? 'any' : target,
-                    protoTarget(rule, t)));
-        });
-    });
-
-    return sortObj;
-}
-
-
-/**
- * Returns an object containing all ipf files to be written to disk, based
- * on the given rules
- *
- * @param opts {Object} :
- * - @param allVMs {Object} : VM lookup table, as returned by createVMlookup()
- * - @param remoteVMs {Array} : array of remote VM objects (optional)
- * - @param rules {Array} : array of rule objects
- * - @param vms {Array} : object mapping VM UUIDs to VM objects. All VMs in
- *   this object will have conf files written. This covers the case where
- *   a rule used to target a VM, but no longer does, so we want to write the
- *   config minus the rule that no longer applies.
- * @param callback {Function} `function (err)`
- */
-function prepareIPFdata(opts, log, callback) {
-    var allVMs = opts.allVMs;
-    var date = new Date();
-    var rules = opts.rules;
-    var vms = opts.vms;
-    var remoteVMs = opts.remoteVMs || { ips: {}, vms: {}, tags: {} };
-
-    log.debug({ vms: vms, rules: rules }, 'prepareIPFdata: entry');
-
-    var conf = {};
-    if (vms) {
-        conf = Object.keys(vms).reduce(function (acc, v) {
-            // If the VM's firewall is disabled, we don't need to write out
-            // rules for it
-            if (allVMs.all[v].enabled) {
-                acc[v] = [];
-            }
-            return acc;
-        }, {});
-    }
-
-    rules.forEach(function (rule) {
-        if (!rule.enabled) {
-            return;
-        }
-
-        var ruleVMs = {
-            from: vmsOnSide(allVMs, rule, 'from', log),
-            to: vmsOnSide(allVMs, rule, 'to', log)
-        };
-
-        DIRECTIONS.forEach(function (dir) {
-            // XXX: add to errors here if missing
-
-            // Default outgoing policy is 'allow' and default incoming policy
-            // is 'block', so these are effectively no-ops:
-            if (noRulesNeeded(dir, rule)) {
-                return;
-            }
-
-            var otherSideRules = rulesFromOtherSide(rule, dir, allVMs,
-                remoteVMs);
-
-            ruleVMs[dir].forEach(function (uuid) {
-                // If the VM's firewall is disabled, we don't need to write out
-                // rules for it
-                if (!allVMs.all[uuid].enabled) {
-                    return;
-                }
-
-                otherSideRules.forEach(function (oRule) {
-                    if (!conf.hasOwnProperty(uuid)) {
-                        return;
-                    }
-
-                    conf[uuid].push(oRule);
-                });
-            });
-        });
-    });
-
-    var toReturn = { files: {}, vms: [] };
-    for (var vm in conf) {
-        var rulesIncluded = {};
-        var v4filename = util.format(IPF_CONF, allVMs.all[vm].zonepath);
-        var v6filename = util.format(IPF6_CONF, allVMs.all[vm].zonepath);
-        var ipfConf = [
-            '# DO NOT EDIT THIS FILE. THIS FILE IS AUTO-GENERATED BY fwadm(1M)',
-            '# AND MAY BE OVERWRITTEN AT ANY TIME.',
-            '#',
-            '# File generated at ' + date.toString(),
-            '#',
-            ''];
-        var ipf6Conf = ipfConf.slice();
-
-        toReturn.vms.push(vm);
-
-        // XXX: sort here
-        conf[vm].forEach(function (sortObj) {
-            if (!rulesIncluded.hasOwnProperty(sortObj.uuid)) {
-                rulesIncluded[sortObj.uuid] = [];
-            }
-            rulesIncluded[sortObj.uuid].push(sortObj.direction);
-
-            sortObj.v4text.forEach(function (line) {
-                ipfConf.push(line);
-            });
-            sortObj.v6text.forEach(function (line) {
-                ipf6Conf.push(line);
-            });
-        });
-
-        log.debug(rulesIncluded, 'VM %s: generated ipf(6).conf', vm);
-
-        var v4rules = ipfConf.concat(v4fallbacks);
-        var v6rules = ipf6Conf.concat(v6fallbacks);
-
-        toReturn.files[v4filename] = v4rules.join('\n') + '\n';
-        toReturn.files[v6filename] = v6rules.join('\n') + '\n';
-    }
-
-    return callback(null, toReturn);
-}
-
-
-/**
- * Returns an array of the UUIDs of VMs on the given side of a rule
- */
-function vmsOnSide(allVMs, rule, dir, log) {
-    var matching = [];
-
-    ['vms', 'tags', 'wildcards'].forEach(function (type) {
-        rule[dir][type].forEach(function (t) {
-            var value;
-            if (typeof (t) !== 'string') {
-                value = t[1];
-                t = t[0];
-                type = 'tagValues';
-            }
-
-            if (type === 'wildcards' && t === 'any') {
-                return;
-            }
-
-            if (!allVMs[type] || !allVMs[type].hasOwnProperty(t)) {
-                log.debug('No matching VMs found in lookup for %s=%s', type, t);
-                return;
-            }
-
-            var vmList = allVMs[type][t];
-            if (value !== undefined) {
-                if (!vmList.hasOwnProperty(value)) {
-                    return;
-                }
-                vmList = vmList[value];
-            }
-
-            Object.keys(vmList).forEach(function (uuid) {
-                if (rule.hasOwnProperty('owner_uuid')
-                    && (rule.owner_uuid != vmList[uuid].owner_uuid)) {
-                    return;
-                }
-
-                matching.push(uuid);
-            });
-        });
-    });
-
-    return matching;
-}
-
-
-/**
- * Returns the ipf rules for the opposite side of a rule
- */
-function rulesFromOtherSide(rule, dir, localVMs, remoteVMs) {
-    var otherSide = dir === 'from' ? 'to' : 'from';
-    var ipfRules = [];
-
-    if (rule[otherSide].wildcards.indexOf('any') !== -1) {
-            ipfRules.push(ipfRuleObj({
-                rule: rule,
-                direction: dir,
-                type: 'wildcard',
-                value: 'any'
-            }));
-
-        return ipfRules;
-    }
-
-    // IPs and subnets don't need looking up in the local or remote VM
-    // lookup objects, so just them as-is
-    ['ip', 'subnet'].forEach(function (type) {
-        rule[otherSide][type + 's'].forEach(function (value) {
-            ipfRules.push(ipfRuleObj({
-                rule: rule,
-                direction: dir,
-                targets: value,
-                type: type,
-                value: value
-            }));
-        });
-    });
-
-    // Lookup the VMs in the local and remove VM lookups, and add their IPs
-    // accordingly
-    ['tag', 'vm', 'wildcard'].forEach(function (type) {
-        var typePlural = type + 's';
-        rule[otherSide][typePlural].forEach(function (value) {
-            var t;
-            if (typeof (value) !== 'string') {
-                t = value[1];
-                value = value[0];
-                type = 'tagValue';
-                typePlural = 'tagValues';
-            }
-
-            if (type === 'wildcards' && value === 'any') {
-                return;
-            }
-
-            [localVMs, remoteVMs].forEach(function (lookup) {
-                if (!lookup.hasOwnProperty(typePlural)
-                    || !lookup[typePlural].hasOwnProperty(value)) {
-                    return;
-                }
-
-                var vmList = lookup[typePlural][value];
-                if (t !== undefined) {
-                    if (!vmList.hasOwnProperty(t)) {
-                        return;
-                    }
-                    vmList = vmList[t];
-                }
-
-                forEachKey(vmList, function (uuid, vm) {
-                    if (rule.owner_uuid && vm.owner_uuid
-                        && vm.owner_uuid != rule.owner_uuid) {
-                        return;
-                    }
-
-                    ipfRules.push(ipfRuleObj({
-                        rule: rule,
-                        direction: dir,
-                        targets: vm.ips,
-                        type: type,
-                        value: value
-                    }));
-                });
-            });
-
-        });
-    });
-
-    return ipfRules;
-}
-
-
-/**
- * Gets remote targets from the other side of the rule and adds them to
- * the targets object
- */
-function addOtherSideRemoteTargets(vms, rule, targets, dir, log) {
-    var matching = vmsOnSide(vms, rule, dir, log);
-    if (matching.length === 0) {
-        return;
-    }
-
-    var otherSide = dir === 'from' ? 'to' : 'from';
-    if (rule[otherSide].tags.length !== 0) {
-        if (!targets.hasOwnProperty('tags')) {
-            targets.tags = {};
-        }
-
-        // All tags (no value) wins out over tags with
-        // a value. If multiple values for the same tag
-        // are present, return them as an array
-        rule[otherSide].tags.forEach(function (tag) {
-            var key = tag;
-            var val = true;
-            if (typeof (tag) !== 'string') {
-                key = tag[0];
-                val = tag[1];
-            }
-
-            if (!targets.tags.hasOwnProperty(key)) {
-                targets.tags[key] = val;
-            } else {
-                if (targets.tags[key] !== true) {
-                    if (val === true) {
-                        targets.tags[key] = val;
-                    } else {
-                        if (!util.isArray(targets.tags[key])) {
-                            targets.tags[key] = [ targets.tags[key] ];
-                        }
-
-                        if (targets.tags[key].indexOf(val) === -1) {
-                            targets.tags[key].push(val);
-                        }
-                    }
-                }
-            }
-        });
-    }
-
-    if (rule[otherSide].vms.length !== 0) {
-        if (!targets.hasOwnProperty('vms')) {
-            targets.vms = {};
-        }
-
-        rule[otherSide].vms.forEach(function (vm) {
-            // Don't add if it's a local VM
-            if (!vms.all.hasOwnProperty(vm)) {
-                targets.vms[vm] = true;
-            }
-        });
-    }
-
-    if (rule[otherSide].wildcards.indexOf('vmall') !== -1) {
-        targets.allVMs = true;
-    }
-}
-
-
-/**
- * Saves all of the files in ipfData to disk
- */
-function saveIPFfiles(ipfData, log, callback) {
-    var ver = Date.now(0) + '.' + sprintf('%06d', process.pid);
-
-    return vasync.forEachParallel({
-        inputs: Object.keys(ipfData),
-        func: function _apply(file, cb) {
-            var tempFile = util.format('%s.%s', file, ver);
-            var oldFile = util.format('%s.old', file);
-
-            vasync.pipeline({
-            funcs: [
-                function _write(_, cb2) {
-                    log.trace('saveIPFfiles: writing temp file "%s"', tempFile);
-                    return fs.writeFile(tempFile, ipfData[file], cb2);
-                },
-                function _unlinkOld(_, cb2) {
-                    return fs.unlink(oldFile, function (err) {
-                        if (err && err.code === 'ENOENT') {
-                            return cb2(null);
-                        }
-                        return cb2(err);
-                    });
-                },
-                function _linkOld(_, cb2) {
-                    return fs.link(file, oldFile, function (err) {
-                        if (err && err.code === 'ENOENT') {
-                            return cb2(null);
-                        }
-                        return cb2(err);
-                    });
-                },
-                function _renameTemp(_, cb2) {
-                    return fs.rename(tempFile, file, cb2);
-                }
-            ]}, cb);
-        }
-    }, function (err, res) {
-        return callback(err, res);
-    });
-}
-
-
-/**
- * Restart the firewalls for VMs listed in uuids
- *
- * @param vms {Object}: VM lookup table, as returned by createVMlookup()
- * @param rules {Array}: array of VM UUIDs to restart
- * @param callback {Function} `function (err, restarted)`
- * - Where restarted is a list of UUIDs for VMs that were actually restarted
- */
-function restartFirewalls(vms, uuids, log, callback) {
-    log.trace(uuids, 'restartFirewalls: entry');
-    var restarted = [];
-
-    return vasync.forEachParallel({
-        inputs: uuids,
-        func: function _restart(uuid, cb) {
-            if (!vms.all[uuid].enabled || vms.all[uuid].state !== 'running') {
-                log.debug('restartFirewalls: VM "%s": not restarting '
-                    + '(enabled=%s, state=%s)', uuid, vms.all[uuid].enabled,
-                    vms.all[uuid].state);
-                return cb(null);
-            }
-
-            log.debug('restartFirewalls: reloading firewall for VM "%s" '
-                + '(enabled=%s, state=%s)', uuid, vms.all[uuid].enabled,
-                vms.all[uuid].state);
-
-            // Start the firewall just in case
-            return startIPF({ vm: uuid, zonepath: vms.all[uuid].zonepath },
-                log, function (err, res) {
-                    restarted.push(uuid);
-                    if (err && zoneNotRunning(res)) {
-                        // An error starting the firewall due to the zone not
-                        // running isn't really an error
-                        return cb();
-                    }
-
-                    return cb(err);
-                });
-        }
-    }, function (err, res) {
-        // XXX: Does this stop on the first error?
-        return callback(err, restarted);
-    });
-}
-
-
-/**
- * Applies firewall changes:
- * - saves / deletes rule files as needed
- * - writes out ipf conf files
- * - starts or restarts ipf in VMs
- *
- * @param {Object} opts :
- *   - allRemoteVMs {Object} : VM lookup object of all remote VMs
- *   - allVMs {Object} : VM lookup object of all local VMs
- *   - del {Object} : Objects to delete from disk:
- *     - rules {Array of Objects} : rules objects to delete
- *     - rvms {Array of Objects} : remote VM UUIDs to delete
- *   - dryRun {Bool} : if true, no files will be written or firewalls reloaded
- *   - rules {Array of Objects} : rules to write out
- *   - save {Object} : Objects to save to disk:
- *     - rules {Array of Objects} : rule objects to save
- *     - remoteVMs {Array of Objects} : remote VM objects to save
- *   - vms {Object} : Mapping of UUID to VM object - VMs to write out
- *     firewalls for, regardless of whether or not rules affect them
- *     (necessary for catching the case where a VM used to have rules that
- *     applied to it but no longer does)
- */
-function applyChanges(opts, log, callback) {
-    log.trace(opts, 'applyChanges: entry');
-
-    assert.object(opts, 'opts');
-    assert.optionalObject(opts.allRemoteVMs, 'opts.allRemoteVMs');
-    assert.optionalObject(opts.allVMs, 'opts.allVMs');
-    assert.optionalObject(opts.del, 'opts.del');
-    assert.optionalArrayOfObject(opts.rules, 'opts.rules');
-    assert.optionalObject(opts.vms, 'opts.vms');
-    assert.optionalObject(opts.save, 'opts.save');
-
-    pipeline({
-    funcs: [
-        // Generate the ipf files for each VM
-        function ipfData(res, cb) {
-            prepareIPFdata({
-                allVMs: opts.allVMs,
-                remoteVMs: opts.allRemoteVMs,
-                rules: opts.rules,
-                vms: opts.vms
-            }, log, cb);
-        },
-
-        // Save the remote VMs
-        function saveVMs(res, cb) {
-            if (opts.dryrun || !opts.save || !opts.save.remoteVMs
-                || objEmpty(opts.save.remoteVMs)) {
-                return cb(null);
-            }
-            mod_rvm.save(opts.save.remoteVMs, log, cb);
-        },
-
-        // Save rule files (if specified)
-        function save(res, cb) {
-            if (opts.dryrun || !opts.save || !opts.save.rules
-                || opts.save.rules.length === 0) {
-                return cb(null);
-            }
-            saveRules(opts.save.rules, log, cb);
-        },
-
-        // Delete rule files (if specified)
-        function delRules(res, cb) {
-            if (opts.dryrun || !opts.del || !opts.del.rules
-                || opts.del.rules.length === 0) {
-                return cb(null);
-            }
-            deleteRules(opts.del.rules, log, cb);
-        },
-
-        // Delete remote VMs (if specified)
-        function delRVMs(res, cb) {
-            if (opts.dryrun || !opts.del || !opts.del.rvms
-                || opts.del.rvms.length === 0) {
-                return cb(null);
-            }
-            mod_rvm.del(opts.del.rvms, log, cb);
-        },
-
-        // Write the new ipf files to disk
-        function writeIPF(res, cb) {
-            if (opts.dryrun) {
-                return cb(null);
-            }
-            saveIPFfiles(res.ipfData.files, log, cb);
-        },
-
-        // Restart the firewalls for all of the affected VMs
-        function restart(res, cb) {
-            if (opts.dryrun) {
-                return cb(null);
-            }
-            restartFirewalls(opts.allVMs, res.ipfData.vms, log, cb);
-        }
-
-    ] }, function (err, res) {
-        if (err) {
-            return callback(err);
-        }
-
-        var toReturn = {
-            vms: res.state.ipfData.vms
-        };
-
-        if (opts.save) {
-            if (opts.save.rules) {
-                toReturn.rules = opts.save.rules.map(function (r) {
-                    return r.serialize();
-                });
-            }
-
-            if (opts.save.remoteVMs) {
-                toReturn.remoteVMs = Object.keys(opts.save.remoteVMs).sort();
-            }
-        }
-
-        if (opts.del) {
-            if (opts.del.rules) {
-                toReturn.rules = opts.del.rules.map(function (r) {
-                    return r.serialize();
-                });
-            }
-
-            if (opts.del.rvms && opts.del.rvms.length !== 0) {
-                toReturn.remoteVMs = opts.del.rvms.sort();
-            }
-        }
-
-        if (opts.filecontents) {
-            toReturn.files = res.state.ipfData.files;
-        }
-
-        return callback(null, toReturn);
-    });
-}
-
-
-/**
- * Examine the stderr from an ipf command and return true if the zone
- * wasn't running at the time
- */
-function zoneNotRunning(res) {
-    return res && res.stderr && res.stderr.indexOf(NOT_RUNNING_MSG) !== -1;
-}
-
-
-
-// --- Exported functions
-
-
-
-/**
- * Add rules, local VMs or remote VMs
- *
- * @param {Object} opts : options
- *   - localVMs {Array} : list of local VMs to update
- *   - remoteVMs {Array} : list of remote VMs to add
- *   - rules {Array} : list of rules
- *   - vms {Array} : list of VMs from vmadm
- * @param {Function} callback : `f(err, res)`
- */
-function add(opts, callback) {
-    try {
-        validateOpts(opts);
-        assert.optionalArrayOfObject(opts.rules, 'opts.rules');
-        assert.optionalArrayOfObject(opts.localVMs, 'opts.localVMs');
-        assert.optionalArrayOfObject(opts.remoteVMs, 'opts.remoteVMs');
-        assert.optionalString(opts.createdBy, 'opts.createdBy');
-
-        var optRules = opts.rules || [];
-        var optLocalVMs = opts.localVMs || [];
-        var optRemoteVMs = opts.remoteVMs || [];
-        if (optRules.length === 0 && optLocalVMs.length === 0
-            && optRemoteVMs.length === 0) {
-            throw new Error(
-                'Payload must contain one of: rules, localVMs, remoteVMs');
-        }
-    } catch (err) {
-        return callback(err);
-    }
-    var log = util_log.entry(opts, 'add');
-
-    pipeline({
-    funcs: [
-        function rules(_, cb) {
-            createRules(opts.rules, opts.createdBy, cb);
-        },
-
-        function vms(_, cb) { createVMlookup(opts.vms, log, cb); },
-
-        function disk(_, cb) { loadDataFromDisk(log, cb); },
-
-        function newRemoteVMs(res, cb) {
-            mod_rvm.create(res.vms, opts.remoteVMs, log, cb);
-        },
-
-        // Create remote VMs (if any) from payload
-        function remoteVMs(res, cb) {
-            createRemoteVMlookup(res.newRemoteVMs, log, cb);
-        },
-
-        // Create a combined remote VM lookup of remote VMs on disk plus
-        // new remote VMs in the payload
-        function allRemoteVMs(res, cb) {
-            createRemoteVMlookup([res.disk.remoteVMs, res.newRemoteVMs],
-                log, cb);
-        },
-
-        function localVMs(res, cb) {
-            lookupVMs(res.vms, opts.localVMs, log, cb);
-        },
-
-        // Build a table for information about newly added local/remote VMs
-        function newVMs(res, cb) {
-            var nvms = clone(res.remoteVMs);
-            mod_obj.values(res.localVMs).map(mergeIntoLookup.bind(null, nvms));
-            cb(null, nvms);
-        },
-
-        function allRules(res, cb) {
-            return cb(null, dedupRules(res.rules, res.disk.rules));
-        },
-
-        // Get VMs the added rules affect
-        function matchingVMs(res, cb) {
-            filter.vmsByRules({
-                log: log,
-                rules: res.rules,
-                vms: res.vms
-            }, cb);
-        },
-
-        // Get rules the added remote VMs affect
-        function remoteVMrules(res, cb) {
-            filter.rulesByRVMs(res.remoteVMs, res.allRules, log, cb);
-        },
-
-        // Get any rules that the added local VMs target
-        function localVMrules(res, cb) {
-            filter.rulesByVMs(res.vms, res.localVMs, res.allRules, log, cb);
-        },
-
-        // Merge the local and remote VM rules, and use that list to find
-        // the VMs affected. We filter out rules that aren't affected by
-        // adding a remote VM or updating a local VM (for example, simple
-        // wildcard rules). This table shows which rules we keep. Each row
-        // represents whether or not a new VM or remote VM is a source or
-        // destination VM, plus whether or not the rule is a BLOCK or ALLOW
-        // rule. Each column represents a collection of targets we might
-        // have. Each cell says whether or not we need to update the VMs
-        // represented by that column.
-        //
-        //              |  From   |   To    | From |  To  | From | To
-        //              | All VMs | All VMs | Tags | Tags | VMs  | VMs
-        // |------------|---------|---------|------|------|------|-----
-        // | Dest. VM / |   No    |   No    |  No  |  No  |  No  | No
-        // |   ALLOW    |         |         |      |      |      |
-        // |------------|---------|---------|------|------|------|-----
-        // |  Src VM /  |   No    |   Yes   |  No  |  Yes |  No  | Yes
-        // |   ALLOW    |         |         |      |      |      |
-        // |------------|---------|---------|------|------|------|-----
-        // | Dest. VM / |   Yes   |   No    |  Yes |  No  |  Yes | No
-        // |   BLOCK    |         |         |      |      |      |
-        // |------------|---------|---------|------|------|------|-----
-        // |  Src VM /  |   No    |   No    |  No  |  No  |  No  | No
-        // |   BLOCK    |         |         |      |      |      |
-        //
-        function localAndRemoteVMsAffected(res, cb) {
-            var affected_rules = dedupRules(res.localVMrules, res.remoteVMrules)
-                .filter(function (el) {
-                    if (el.action === 'allow'
-                        && vmsOnSide(res.newVMs, el, 'from', log).length > 0) {
-                        return el.to.wildcards.indexOf('vmall') !== -1
-                            || el.to.tags.length > 0
-                            || el.to.vms.length > 0;
-                    } else if (el.action === 'block'
-                        && vmsOnSide(res.newVMs, el, 'to', log).length > 0) {
-                        return el.from.wildcards.indexOf('vmall') !== -1
-                            || el.from.tags.length > 0
-                            || el.from.vms.length > 0;
-                    }
-                    return false;
-                });
-            filter.vmsByRules({
-                log: log,
-                rules: affected_rules,
-                vms: res.vms
-            }, cb);
-        },
-
-        function mergedVMs(res, cb) {
-            var ruleVMs = mergeObjects(res.localVMs, res.matchingVMs);
-            return cb(null, mergeObjects(ruleVMs,
-                res.localAndRemoteVMsAffected));
-        },
-
-        // Get the rules that need to be written out for all VMs, before and
-        // after the update
-        function vmRules(res, cb) {
-            filter.rulesByVMs(res.vms, res.mergedVMs, res.allRules, log, cb);
-        },
-
-        function apply(res, cb) {
-            applyChanges({
-                allVMs: res.vms,
-                dryrun: opts.dryrun,
-                filecontents: opts.filecontents,
-                allRemoteVMs: res.allRemoteVMs,
-                rules: res.vmRules,
-                save: {
-                    rules: res.rules,
-                    remoteVMs: res.newRemoteVMs
-                },
-                vms: res.mergedVMs
-            }, log, cb);
-        }
-
-    ]}, function (err, res) {
-        if (err) {
-            util_log.finishErr(log, err, 'add: finish');
-            return callback(err);
-        }
-
-        log.debug(res.state.apply, 'add: finish');
-        return callback(err, res.state.apply);
-    });
-}
-
-
-/**
- * Delete rules
- *
- * @param {Object} opts : options
- *   - uuids {Array} : list of rules
- *   - vms {Array} : list of VMs from vmadm
- * @param {Function} callback : `f(err, res)`
- */
-function del(opts, callback) {
-    try {
-        assert.object(opts, 'opts');
-        assert.optionalArrayOfString(opts.rvmUUIDs, 'opts.rvmUUIDs');
-        assert.optionalArrayOfString(opts.uuids, 'opts.uuids');
-        assert.arrayOfObject(opts.vms, 'vms');
-
-        var rvmUUIDs = opts.rvmUUIDs || [];
-        var uuids = opts.uuids || [];
-        if (rvmUUIDs.length === 0 && uuids.length === 0) {
-            throw new Error(
-                'Payload must contain one of: rvmUUIDs, uuids');
-        }
-
-    } catch (err) {
-        return callback(err);
-    }
-    var log = util_log.entry(opts, 'del');
-
-    pipeline({
-    funcs: [
-        function vms(_, cb) { createVMlookup(opts.vms, log, cb); },
-
-        function disk(_, cb) { loadDataFromDisk(log, cb); },
-
-        function allRemoteVMs(state, cb) {
-            createRemoteVMlookup(state.disk.remoteVMs, log, cb);
-        },
-
-        // Get matching remote VMs
-        function remoteVMs(state, cb) {
-            filter.rvmsByUUIDs(state.allRemoteVMs, opts.rvmUUIDs, log, cb);
-        },
-
-        // Get rules the delted remote VMs affect
-        function remoteVMrules(res, cb) {
-            filter.rulesByRVMs(res.remoteVMs.matching, res.disk.rules,
-                log, cb);
-        },
-
-        // Get VMs that are affected by the remote VM rules
-        function rvmVMs(res, cb) {
-            filter.vmsByRules({
-                log: log,
-                rules: res.remoteVMrules,
-                vms: res.vms
-            }, cb);
-        },
-
-        // Get the deleted rules
-        function rules(res, cb) {
-            filter.rulesByUUIDs(res.disk.rules, opts.uuids, log, cb);
-        },
-
-        // Get VMs the deleted rules affect
-        function ruleVMs(res, cb) {
-            filter.vmsByRules({
-                log: log,
-                rules: res.rules.matching,
-                vms: res.vms
-            }, cb);
-        },
-
-        // Now find all rules that apply to those VMs, omitting the
-        // rules that are deleted
-        function vmRules(res, cb) {
-            filter.rulesByVMs(res.vms,
-                mergeObjects(res.ruleVMs, res.rvmVMs),
-                res.rules.notMatching, log, cb);
-        },
-
-        function apply(res, cb) {
-            applyChanges({
-                allVMs: res.vms,
-                dryrun: opts.dryrun,
-                filecontents: opts.filecontents,
-                allRemoteVMs: res.remoteVMs.notMatching,
-                rules: res.vmRules,
-                del: {
-                    rules: res.rules.matching,
-                    rvms: objEmpty(res.remoteVMs.matching.all) ?
-                        null : Object.keys(res.remoteVMs.matching.all)
-                },
-                vms: mergeObjects(res.ruleVMs, res.rvmVMs)
-            }, log, cb);
-        }
-
-    ]}, function (err, res) {
-        if (err) {
-            util_log.finishErr(log, err, 'del: finish');
-            return callback(err);
-        }
-
-        log.debug(res.state.apply, 'del: finish');
-        return callback(err, res.state.apply);
-    });
-}
-
-
-/**
- * Returns a remote VM
- *
- * @param opts {Object} : options:
- * - remoteVM {String} : UUID of remote VM to get
- * @param callback {Function} : `function (err, rvm)`
- */
-function getRemoteVM(opts, callback) {
-    try {
-        assert.object(opts, 'opts');
-        assert.string(opts.remoteVM, 'opts.remoteVM');
-    } catch (err) {
-        return callback(err);
-    }
-    var log = util_log.entry(opts, 'getRemoteVM', true);
-
-    return mod_rvm.load(opts.remoteVM, log, function (err, rvm) {
-        if (err) {
-            if (err.code == 'ENOENT') {
-                // Don't write a log file for "not found"
-                log.info(err, 'getRemoteVM: finish');
-            } else {
-                util_log.finishErr(log, err, 'getRemoteVM: finish');
-            }
-            return callback(err);
-        }
-
-        log.debug(rvm, 'getRemoteVM: finish');
-        return callback(null, rvm);
-    });
-}
-
-
-/**
- * Returns a rule
- *
- * @param opts {Object} : options:
- * - uuid {String} : UUID of rule to get
- * @param callback {Function} : `function (err, rule)`
- */
-function getRule(opts, callback) {
-    try {
-        assert.object(opts, 'opts');
-        assert.string(opts.uuid, 'opts.uuid');
-    } catch (err) {
-        return callback(err);
-    }
-    var log = util_log.entry(opts, 'get', true);
-
-    return loadRule(opts.uuid, log, function (err, rule) {
-        if (err) {
-            if (err.code == 'ENOENT') {
-                // Don't write a log file for "not found"
-                log.info(err, 'get: finish');
-            } else {
-                util_log.finishErr(log, err, 'get: finish');
-            }
-            return callback(err);
-        }
-
-        var ser = rule.serialize();
-        log.debug(ser, 'get: finish');
-        return callback(null, ser);
-    });
-}
-
-
-/**
- * List remote VMs
- */
-function listRemoteVMs(opts, callback) {
-    try {
-        assert.object(opts, 'opts');
-    } catch (err) {
-        return callback(err);
-    }
-    var log = util_log.entry(opts, 'listRemoteVMs', true);
-
-    mod_rvm.loadAll(log, function (err, res) {
-        if (err) {
-            util_log.finishErr(log, err, 'listRemoteVMs: finish');
-            return callback(err);
-        }
-
-        // XXX: support sorting by other fields, filtering
-        var sortFn = function _sort(a, b) {
-            return (a.uuid > b.uuid) ? 1: -1;
-        };
-
-        log.debug('listRemoteVMs: finish');
-        return callback(null, Object.keys(res).map(function (r) {
-            return res[r];
-        }).sort(sortFn));
-    });
-}
-
-
-/**
- * List rules
- */
-function listRules(opts, callback) {
-    try {
-        assert.object(opts, 'opts');
-        assert.optionalArrayOfString(opts.fields, 'opts.fields');
-        if (opts.fields) {
-            var invalid = [];
-            opts.fields.forEach(function (f) {
-                if (mod_rule.FIELDS.indexOf(f) === -1) {
-                    invalid.push(f);
-                }
-            });
-
-            if (invalid.length > 0) {
-                throw new verror.VError('Invalid display field%s: %s',
-                    invalid.length == 1 ? '' : 's',
-                    invalid.sort().join(', '));
-            }
-        }
-    } catch (err) {
-        return callback(err);
-    }
-    var log = util_log.entry(opts, 'list', true);
-
-    loadAllRules(log, function (err, res) {
-        if (err) {
-            util_log.finishErr(log, err, 'list: finish');
-            return callback(err);
-        }
-
-        // XXX: support sorting by other fields, filtering
-        // (eg: enabled=true vm=<uuid>)
-        var sortFn = function _defaultSort(a, b) {
-            return (a.uuid > b.uuid) ? 1: -1;
-        };
-        var mapFn = function _defaultMap(r) {
-            return r.serialize();
-        };
-
-        if (opts.fields) {
-            var filterFields = opts.fields;
-            // If we didn't include uuid in the fields to list, include
-            // it here so that we can sort by it - we'll remove it after
-            if (opts.fields.indexOf('uuid') === -1) {
-                filterFields = opts.fields.concat(['uuid']);
-            }
-
-            mapFn = function _fieldMap(r) {
-                return r.serialize(filterFields);
-            };
-        }
-
-        var rules = res.map(mapFn).sort(sortFn);
-        if (opts.fields && opts.fields.indexOf('uuid') === -1) {
-            rules = rules.map(function (r) {
-                delete r.uuid;
-                return r;
-            });
-        }
-
-        log.debug('list: finish');
-        return callback(null, rules);
-    });
-}
-
-
-/**
- * Enable the firewall for a VM. If the VM is running, start ipf for that VM.
- *
- * @param opts {Object} : options:
- * - vms {Array} : array of VM objects (as per VM.js)
- * - vm {Object} : VM object for the VM to enable
- * - dryrun {Boolean} : don't write any files to disk (Optional)
- * - filecontents {Boolean} : return contents of files written to
- *   disk (Optional)
- * @param callback {Function} `function (err, res)`
- * - Where res is an object, optionall containing a files subhash
- *   if opts.filecontents is set
- */
-function enableVM(opts, callback) {
-    try {
-        assert.object(opts, 'opts');
-        assert.object(opts.vm, 'opts.vm');
-        assert.arrayOfObject(opts.vms, 'opts.vms');
-    } catch (err) {
-        return callback(err);
-    }
-    var log = util_log.entry(opts, 'enable');
-
-    var vmFilter = {};
-
-    pipeline({
-    funcs: [
-        function vms(_, cb) { createVMlookup(opts.vms, log, cb); },
-
-        function disk(_, cb) { loadDataFromDisk(log, cb); },
-
-        function getVM(res, cb) {
-            var vm = res.vms.all[opts.vm.uuid];
-            if (!vm) {
-                return cb(new verror.VError('VM "%s" not found', opts.vm.uuid));
-            }
-
-            vmFilter[opts.vm.uuid] = vm;
-            return cb();
-        },
-
-        // Find all rules that apply to the VM
-        function vmRules(res, cb) {
-            filter.rulesByVMs(res.vms, vmFilter, res.disk.rules, log, cb);
-        },
-
-        function allRemoteVMs(res, cb) {
-            createRemoteVMlookup(res.disk.remoteVMs, log, cb);
-        },
-
-        function apply(res, cb) {
-            applyChanges({
-                allVMs: res.vms,
-                dryrun: opts.dryrun,
-                filecontents: opts.filecontents,
-                allRemoteVMs: res.allRemoteVMs,
-                rules: res.vmRules,
-                vms: vmFilter
-            }, log, cb);
-        }
-    ]}, function _afterEnable(err, res) {
-        if (err) {
-            util_log.finishErr(log, err, 'enable: finish');
-            return callback(err);
-        }
-
-        var toReturn = res.state.apply;
-        log.debug(toReturn, 'enable: finish');
-        return callback(null, toReturn);
-    });
-}
-
-
-/**
- * Disable the firewall for a VM. If the VM is running, stop ipf for that VM.
- *
- * @param opts {Object} : options:
- * - vm {Object} : VM object for the VM to disable
- * @param callback {Function} `function (err)`
- */
-function disableVM(opts, callback) {
-    try {
-        assert.object(opts, 'opts');
-        assert.object(opts.vm, 'opts.vm');
-    } catch (err) {
-        return callback(err);
-    }
-    var log = util_log.entry(opts, 'disable');
-
-    function moveConf(new_fmt, old_fmt, _, cb) {
-        // Move config out of the way - on zone boot, the firewall
-        // will start again if it's present
-        var new_cfg = util.format(new_fmt, opts.vm.zonepath);
-        var old_cfg = util.format(old_fmt, opts.vm.zonepath);
-        return fs.rename(new_cfg, old_cfg, function (err) {
-            // If the file's already gone, that's OK
-            if (err && err.code !== 'ENOENT') {
-                return cb(err);
-            }
-
-            return cb(null);
-        });
-    }
-
-    pipeline({
-    funcs: [
-        moveConf.bind(null, IPF_CONF, IPF_CONF_OLD),
-        moveConf.bind(null, IPF6_CONF, IPF6_CONF_OLD),
-        function stop(_, cb) {
-            if (opts.vm.state !== 'running') {
-                log.debug('disableVM: VM "%s": not stopping ipf (state=%s)',
-                    opts.vm.uuid, opts.vm.state);
-                return cb(null);
-            }
-
-            log.debug('disableVM: stopping ipf for VM "%s"', opts.vm.uuid);
-            return mod_ipf.stop(opts.vm.uuid, log, cb);
-        }
-    ]}, function _afterDisable(err) {
-        if (err) {
-            util_log.finishErr(log, err, 'disable: finish');
-            return callback(err);
-        }
-
-        log.debug('disable: finish');
-        return callback();
-    });
-}
-
-
-/**
- * Gets the firewall status for a VM
- *
- * @param opts {Object} : options:
- * - uuid {String} : VM UUID
- * @param callback {Function} `function (err, res)`
- */
-function vmStatus(opts, callback) {
-    try {
-        assert.object(opts, 'opts');
-        assert.string(opts.uuid, 'opts.uuid');
-    } catch (err) {
-        return callback(err);
-    }
-    var log = util_log.entry(opts, 'status', true);
-
-    return mod_ipf.status(opts.uuid, log, function (err, res) {
-        if (err) {
-            // 'No such device' is returned when the zone is down
-            if (zoneNotRunning(res)) {
-                log.debug({ running: false }, 'status: finish');
-                return callback(null, { running: false });
-            }
-
-            util_log.finishErr(log, err, 'status: finish');
-            return callback(err);
-        }
-
-        log.debug(res, 'status: finish');
-        return callback(null, res);
-    });
-}
-
-
-/**
- * Gets the firewall statistics for a VM
- *
- * @param opts {Object} : options:
- * - uuid {String} : VM UUID
- * @param callback {Function} `function (err, res)`
- */
-function vmStats(opts, callback) {
-    try {
-        assert.object(opts, 'opts');
-        assert.string(opts.uuid, 'opts.uuid');
-    } catch (err) {
-        return callback(err);
-    }
-    var log = util_log.entry(opts, 'stats', true);
-
-    return mod_ipf.ruleStats(opts.uuid, log, function (err, res) {
-        if (err) {
-            if (res && res.stderr) {
-                // Zone is down
-                if (zoneNotRunning(res)) {
-                    log.debug('stats: finish: zone not running');
-                    return callback(new verror.VError(
-                        'Firewall is not running for VM "%s"', opts.uuid));
-                }
-
-                // No rules loaded: return an error if the firewall
-                // isn't running
-                if (res.stderr.indexOf('empty list') !== -1) {
-                    return vmStatus(opts, function (err2, res2) {
-                        if (err2) {
-                            util_log.finishErr(log, err2, 'stats: finish');
-                            return callback(err2);
-                        }
-
-                        if (res2.running) {
-                            log.debug({ rules: [] }, 'stats: finish');
-                            return callback(null, { rules: [] });
-                        } else {
-                            log.debug('stats: finish: firewall not running');
-                            return callback(new verror.VError(
-                                'Firewall is not running for VM "%s"',
-                                opts.uuid));
-                        }
-                    });
-                }
-            }
-
-            return callback(err);
-        }
-
-        log.debug({ rules: res }, 'stats: finish');
-        return callback(null, { rules: res });
-    });
-}
-
-
-/**
- * Update rules, local VMs or remote VMs
- *
- * @param {Object} opts : options
- *   - localVMs {Array} : list of local VMs to update
- *   - remoteVMs {Array} : list of remote VMs to update
- *   - rules {Array} : list of rules
- *   - vms {Array} : list of VMs from vmadm
- * @param {Function} callback : `f(err, res)`
- */
-function update(opts, callback) {
-    try {
-        validateOpts(opts);
-        assert.optionalArrayOfObject(opts.rules, 'opts.rules');
-        assert.optionalArrayOfObject(opts.localVMs, 'opts.localVMs');
-        assert.optionalArrayOfObject(opts.remoteVMs, 'opts.remoteVMs');
-        assert.optionalString(opts.createdBy, 'opts.createdBy');
-
-        var optRules = opts.rules || [];
-        var optLocalVMs = opts.localVMs || [];
-        var optRemoteVMs = opts.remoteVMs || [];
-        if (optRules.length === 0 && optLocalVMs.length === 0
-            && optRemoteVMs.length === 0) {
-            throw new Error(
-                'Payload must contain one of: rules, localVMs, remoteVMs');
-        }
-    } catch (err) {
-        return callback(err);
-    }
-    var log = util_log.entry(opts, 'update');
-
-    pipeline({
-    funcs: [
-        function disk(_, cb) { loadDataFromDisk(log, cb); },
-
-        // Make sure the rules exist
-        function originalRules(res, cb) {
-            findRules({
-                allRules: res.disk.rules,
-                allowAdds: opts.allowAdds,
-                rules: opts.rules
-            }, log, cb);
-        },
-
-        // Apply updates to the found rules
-        function rules(res, cb) {
-            createUpdatedRules({
-                createdBy: opts.createdBy,
-                originalRules: res.originalRules,
-                updatedRules: opts.rules
-            }, log, cb);
-        },
-
-        // Create the VM lookup
-        function vms(_, cb) { createVMlookup(opts.vms, log, cb); },
-
-        // Create remote VMs (if any) from payload
-        function newRemoteVMs(res, cb) {
-            mod_rvm.create(res.vms, opts.remoteVMs, log, cb);
-        },
-
-        // Create a lookup for the new remote VMs
-        function newRemoteVMsLookup(res, cb) {
-            createRemoteVMlookup(res.newRemoteVMs, log, cb);
-        },
-
-        function allRemoteVMs(res, cb) {
-            createRemoteVMlookup([res.disk.remoteVMs, res.newRemoteVMs],
-                log, cb);
-        },
-
-        // Lookup any local VMs in the payload
-        function localVMs(res, cb) {
-            lookupVMs(res.vms, opts.localVMs, log, cb);
-        },
-
-        // Get the VMs the rules applied to before the update
-        function originalVMs(res, cb) {
-            filter.vmsByRules({
-                log: log,
-                rules: res.originalRules,
-                vms: res.vms
-            }, cb);
-        },
-
-        // Now get the VMs the updated rules apply to
-        function matchingVMs(res, cb) {
-            filter.vmsByRules({
-                log: log,
-                rules: res.rules,
-                vms: res.vms
-            }, cb);
-        },
-
-        // Replace the rules with their updated versions
-        function updatedRules(res, cb) {
-            return cb(null, dedupRules(res.rules, res.disk.rules));
-        },
-
-        // Get any rules that the added remote VMs target
-        function remoteVMrules(res, cb) {
-            filter.rulesByRVMs(res.newRemoteVMsLookup,
-                res.updatedRules, log, cb);
-        },
-
-        // Get any rules that the added local VMs target
-        function localVMrules(res, cb) {
-            filter.rulesByVMs(res.vms, res.localVMs, res.updatedRules, log, cb);
-        },
-
-        // Merge the local and remote VM rules, and use that list to find
-        // the VMs affected
-        function localAndRemoteVMsAffected(res, cb) {
-            filter.vmsByRules({
-                log: log,
-                rules: dedupRules(res.localVMrules, res.remoteVMrules),
-                vms: res.vms
-            }, cb);
-        },
-
-        function mergedVMs(res, cb) {
-            var ruleVMs = mergeObjects(res.originalVMs, res.matchingVMs);
-            return cb(null, mergeObjects(ruleVMs,
-                res.localAndRemoteVMsAffected));
-        },
-
-        // Get the rules that need to be written out for all VMs, before and
-        // after the update
-        function vmRules(res, cb) {
-            filter.rulesByVMs(res.vms, res.mergedVMs, res.updatedRules, log,
-                cb);
-        },
-
-        function apply(res, cb) {
-            applyChanges({
-                allVMs: res.vms,
-                dryrun: opts.dryrun,
-                filecontents: opts.filecontents,
-                allRemoteVMs: res.allRemoteVMs,
-                rules: res.vmRules,
-                save: {
-                    rules: res.rules,
-                    remoteVMs: res.newRemoteVMs
-                },
-                vms: res.mergedVMs
-            }, log, cb);
-        }
-    ]}, function (err, res) {
-        if (err) {
-            util_log.finishErr(log, err, 'update: finish');
-            return callback(err);
-        }
-
-        log.debug(res.state.apply, 'update: finish');
-        return callback(err, res.state.apply);
-    });
-}
-
-
-/**
- * Given the list of local VMs and a list of rules, return an object with
- * the non-local targets on the other side of the rules.
- *
- * @param opts {Object} : options:
- * - vms {Array} : array of VM objects (as per VM.js)
- * - rules {Array of Objects} : firewall rules
- * @param callback {Function} `function (err, targets)`
- * - Where targets is an object like:
- *   {
- *     tags: { some: ['one', 'two'], other: true },
- *     vms: [ '<UUID>' ],
- *     allVMs: true
- *   }
- */
-function getRemoteTargets(opts, callback) {
-    try {
-        assert.object(opts, 'opts');
-        assert.arrayOfObject(opts.vms, 'opts.vms');
-        assert.arrayOfObject(opts.rules, 'opts.rules');
-
-        if (opts.rules.length === 0) {
-            throw new Error('Must specify rules');
-        }
-
-    } catch (err) {
-        return callback(err);
-    }
-    var log = util_log.entry(opts, 'remoteTargets', true);
-
-    createRules(opts.rules, function (err, rules) {
-        if (err) {
-            util_log.finishErr(log, err, 'remoteTargets: finish: createRules');
-            return callback(err);
-        }
-
-        createVMlookup(opts.vms, log, function (err2, vms) {
-            if (err2) {
-                util_log.finishErr(log, err2,
-                    'remoteTargets: finish: createVMlookup');
-                return callback(err2);
-            }
-
-            var targets = {};
-
-            for (var r in rules) {
-                var rule = rules[r];
-
-                for (var d in DIRECTIONS) {
-                    var dir = DIRECTIONS[d];
-                    addOtherSideRemoteTargets(vms, rule, targets, dir, log);
-                }
-            }
-
-            if (targets.hasOwnProperty('vms')) {
-                targets.vms = Object.keys(targets.vms);
-                if (targets.vms.length === 0) {
-                    delete targets.vms;
-                }
-            }
-
-            log.debug(targets, 'remoteTargets: finish');
-            return callback(null, targets);
-        });
-    });
-}
-
-
-/**
- * Gets VMs that are affected by a rule
- *
- * @param opts {Object} : options:
- * - vms {Array} : array of VM objects (as per VM.js)
- * - rule {UUID or Object} : UUID of pre-existing rule, or a rule object
- * - includeDisabled {Boolean, optional} : if set, include VMs that have
- *   their firewalls disabled in the search
- * @param callback {Function} `function (err, vms)`
- * - Where vms is an array of VMs that are affected by that rule
- */
-function getRuleVMs(opts, callback) {
-    try {
-        assert.object(opts, 'opts');
-        assert.arrayOfObject(opts.vms, 'opts.vms');
-        assertStringOrObject(opts.rule, 'opts.rule');
-        assert.optionalBool(opts.includeDisabled, 'opts.includeDisabled');
-    } catch (err) {
-        return callback(err);
-    }
-    var log = util_log.entry(opts, 'vms', true);
-
-    pipeline({
-    funcs: [
-        function rules(_, cb) {
-            if (typeof (opts.rule) === 'string') {
-                return loadRule(opts.rule, log, cb);
-            }
-
-            createRules([ opts.rule ], cb);
-        },
-        function vms(_, cb) { createVMlookup(opts.vms, log, cb); },
-        function ruleVMs(state, cb) {
-            if (!util.isArray(state.rules)) {
-                state.rules = [ state.rules ];
-            }
-
-            filter.vmsByRules({
-                includeDisabled: opts.includeDisabled,
-                log: log,
-                rules: state.rules,
-                vms: state.vms
-            }, cb);
-        }
-    ]}, function (err, res) {
-        if (err) {
-            util_log.finishErr(log, err, 'vms: finish');
-            return callback(err);
-        }
-
-        var matched = Object.keys(res.state.ruleVMs);
-        log.debug(matched, 'vms: finish');
-        return callback(null, matched);
-    });
-}
-
-
-/**
- * Gets rules that apply to a Remote VM
- *
- * @param opts {Object} : options:
- * - vms {Array} : array of VM objects (as per VM.js)
- * - vm {UUID} : UUID of VM to get the rules for
- * @param callback {Function} `function (err, rules)`
- * - Where rules is an array of rules that apply to the VM
- */
-function getRemoteVMrules(opts, callback) {
-    try {
-        assert.object(opts, 'opts');
-        assertStringOrObject(opts.remoteVM, 'opts.remoteVM');
-        assert.arrayOfObject(opts.vms, 'opts.vms');
-    } catch (err) {
-        return callback(err);
-    }
-    var log = util_log.entry(opts, 'rvmRules', true);
-
-    pipeline({
-    funcs: [
-        function allRules(_, cb) { loadAllRules(log, cb); },
-        function vms(_, cb) { createVMlookup(opts.vms, log, cb); },
-        function rvm(_, cb) {
-            if (typeof (opts.remoteVM) === 'object') {
-                return cb(null, opts.remoteVM);
-            }
-
-            return mod_rvm.load(opts.remoteVM, log, cb);
-        },
-        function rvms(state, cb) {
-            return mod_rvm.create(state.vms, [ state.rvm ],
-                log, function (e, rvmList) {
-                if (e) {
-                    return cb(e);
-                }
-
-                createRemoteVMlookup(rvmList, log, cb);
-            });
-        },
-        function rvmRules(state, cb) {
-            filter.rulesByRVMs(state.rvms, state.allRules, log, cb);
-        }
-    ]}, function (err, res) {
-        if (err) {
-            util_log.finishErr(log, err, 'rvmRules: finish (vm=%s)',
-                opts.remoteVM);
-            return callback(err);
-        }
-
-        var toReturn = res.state.rvmRules.map(function (r) {
-            return r.serialize();
-        });
-
-        log.debug(toReturn, 'rvmRules: finish (vm=%s)', opts.remoteVM);
-        return callback(null, toReturn);
-    });
-}
-
-
-/**
- * Gets rules that apply to a VM
- *
- * @param opts {Object} : options:
- * - vms {Array} : array of VM objects (as per VM.js)
- * - vm {UUID} : UUID of VM to get the rules for
- * @param callback {Function} `function (err, rules)`
- * - Where rules is an array of rules that apply to the VM
- */
-function getVMrules(opts, callback) {
-    try {
-        assert.object(opts, 'opts');
-        assert.string(opts.vm, 'opts.vm');
-        assert.arrayOfObject(opts.vms, 'opts.vms');
-    } catch (err) {
-        return callback(err);
-    }
-    var log = util_log.entry(opts, 'vmRules', true);
-
-    var toFind = {};
-    toFind[opts.vm] = opts.vm;
-
-    pipeline({
-    funcs: [
-        function allRules(_, cb) { loadAllRules(log, cb); },
-        function vms(_, cb) { createVMlookup(opts.vms, log, cb); },
-        function vmRules(state, cb) {
-            filter.rulesByVMs(state.vms, toFind, state.allRules, log, cb);
-        }
-    ]}, function (err, res) {
-        if (err) {
-            util_log.finishErr(log, err, 'vmRules: finish (vm=%s)', opts.vm);
-            return callback(err);
-        }
-
-        var toReturn = res.state.vmRules.map(function (r) {
-            return r.serialize();
-        });
-
-        log.debug(toReturn, 'vmRules: finish (vm=%s)', opts.vm);
-        return callback(null, toReturn);
-    });
-}
-
-
-/**
- * Validates an add / update payload
- *
- * @param opts {Object} : options:
- *   - localVMs {Array} : list of local VMs
- *   - remoteVMs {Array} : list of remote VMs
- *   - rules {Array} : list of rules
- *   - vms {Array} : array of VM objects (as per VM.js)
- * @param callback {Function} `function (err, rules)`
- * - Where rules is an array of rules that apply to the VM
- */
-function validatePayload(opts, callback) {
-    try {
-        assert.object(opts, 'opts');
-        assert.arrayOfObject(opts.vms, 'opts.vms');
-        assert.optionalArrayOfObject(opts.rules, 'opts.rules');
-        assert.optionalArrayOfObject(opts.localVMs, 'opts.localVMs');
-        assert.optionalArrayOfObject(opts.remoteVMs, 'opts.remoteVMs');
-
-        var optRules = opts.rules || [];
-        var optLocalVMs = opts.localVMs || [];
-        var optRemoteVMs = opts.remoteVMs || [];
-        if (optRules.length === 0 && optLocalVMs.length === 0
-            && optRemoteVMs.length === 0) {
-            throw new Error(
-                'Payload must contain one of: rules, localVMs, remoteVMs');
-        }
-    } catch (err) {
-        return callback(err);
-    }
-    var log = util_log.entry(opts, 'validatePayload');
-
-    pipeline({
-    funcs: [
-        function rules(_, cb) {
-            createRules(opts.rules, cb);
-        },
-        function vms(_, cb) { createVMlookup(opts.vms, log, cb); },
-        function remoteVMs(_, cb) { mod_rvm.loadAll(log, cb); },
-        function newRemoteVMs(state, cb) {
-            mod_rvm.create(state.vms, opts.remoteVMs, log, cb);
-        },
-        // Create a combined remote VM lookup of remote VMs on disk plus
-        // new remote VMs in the payload
-        function allRemoteVMs(state, cb) {
-            createRemoteVMlookup([state.remoteVMs, state.newRemoteVMs],
-                log, cb);
-        },
-
-        function validate(state, cb) {
-            validateRules(state.vms, state.allRemoteVMs, state.rules, log, cb);
-        }
-    ]}, function (err, res) {
-        if (err) {
-            util_log.finishErr(log, err, 'validatePayload: finish');
-            return callback(err);
-        }
-
-        log.debug(opts.payload, 'validatePayload: finish');
-        return callback();
-    });
-}
-
-
-
-module.exports = {
-    _setOldIPF: mod_ipf._setOld,
-    add: add,
-    del: del,
-    disable: disableVM,
-    enable: enableVM,
-    get: getRule,
-    getRVM: getRemoteVM,
-    list: listRules,
-    listRVMs: listRemoteVMs,
-    remoteTargets: getRemoteTargets,
-    rvmRules: getRemoteVMrules,
-    setBunyan: util_log.setBunyan,
-    stats: vmStats,
-    status: vmStatus,
-    update: update,
-    validatePayload: validatePayload,
-    VM_FIELDS: VM_FIELDS,
-    vmRules: getVMrules,
-    vms: getRuleVMs
-};
diff --git a/node_modules/fw/lib/fwadm.js b/node_modules/fw/lib/fwadm.js
deleted file mode 100644
index 1d2dd4c..0000000
--- a/node_modules/fw/lib/fwadm.js
+++ /dev/null
@@ -1,811 +0,0 @@
-/*
- * CDDL HEADER START
- *
- * The contents of this file are subject to the terms of the
- * Common Development and Distribution License, Version 1.0 only
- * (the "License").  You may not use this file except in compliance
- * with the License.
- *
- * You can obtain a copy of the license at http://smartos.org/CDDL
- *
- * See the License for the specific language governing permissions
- * and limitations under the License.
- *
- * When distributing Covered Code, include this CDDL HEADER in each
- * file.
- *
- * If applicable, add the following below this CDDL HEADER, with the
- * fields enclosed by brackets "[]" replaced with your own identifying
- * information: Portions Copyright [yyyy] [name of copyright owner]
- *
- * CDDL HEADER END
- *
- * Copyright (c) 2013, Joyent, Inc. All rights reserved.
- *
- *
- * fwadm: CLI logic
- */
-
-var assert = require('assert-plus');
-var cli = require('./cli');
-var clone = require('clone');
-var cmdln = require('cmdln');
-var fw = require('./fw');
-var onlyif = require('onlyif');
-var path = require('path');
-var pipeline = require('./pipeline').pipeline;
-var util = require('util');
-var util_log = require('./util/log');
-var vasync = require('vasync');
-var verror = require('verror');
-var VM = require('/usr/vm/node_modules/VM');
-
-
-
-// --- Globals
-
-
-
-var LOG;
-var OPTS = {
-    dryrun: {
-        names: ['dryrun'],
-        type: 'bool',
-        help: 'Do not apply changes.'
-    },
-    delim: {
-        names: ['delim', 'd'],
-        type: 'string',
-        help: 'Output delimiter.'
-    },
-    description: {
-        names: ['description', 'desc' ],
-        type: 'string',
-        help: 'Rule description.'
-    },
-    enable: {
-        names: ['enable', 'e'],
-        type: 'bool',
-        help: 'Enable the rule'
-    },
-    file: {
-        names: ['file', 'f'],
-        type: 'string',
-        help: 'Input file.'
-    },
-    global: {
-        names: ['global', 'g'],
-        type: 'bool',
-        help: 'Global rule.'
-    },
-    help: {
-        names: ['help', 'h'],
-        type: 'bool',
-        help: 'Print help and exit.'
-    },
-    json: {
-        names: ['json', 'j'],
-        type: 'bool',
-        help: 'Output JSON.'
-    },
-    output_fields: {
-        names: ['fields', 'o'],
-        type: 'string',
-        help: 'Output field list'
-    },
-    owner_uuid: {
-        names: ['owner_uuid', 'O'],
-        type: 'string',
-        help: 'Owner UUID'
-    },
-    parseable: {
-        names: ['parseable', 'p'],
-        type: 'bool',
-        help: 'Parseable output'
-    },
-    stdout: {
-        names: ['stdout'],
-        type: 'bool',
-        help: 'Output file changes to stdout.'
-    },
-    verbose: {
-        names: ['verbose', 'v'],
-        type: 'bool',
-        help: 'Verbose output.'
-    }
-};
-
-
-
-// --- Utilities
-
-
-
-/**
- * Translates the payload into the format expected by fw.js
- */
-function preparePayload(opts, payload) {
-    var newOpts = {};
-    if (payload) {
-        newOpts = clone(payload);
-
-        // Allow doing this:
-        //   echo '{ ... }' | fwadm add|update
-        if (newOpts.hasOwnProperty('rule')
-            || newOpts.hasOwnProperty('enabled')
-            || newOpts.hasOwnProperty('description')
-            || newOpts.hasOwnProperty('owner_uuid')
-            || newOpts.hasOwnProperty('version')) {
-            // Trying to add a single rule, and nothing else
-            newOpts = { rules: [ newOpts ] };
-        }
-    }
-
-    if (opts) {
-        newOpts.dryrun = opts.dryrun || false;
-
-        if (opts.enable) {
-            newOpts.rules.forEach(function (r) {
-                r.enabled = true;
-            });
-        }
-
-        if (opts.global) {
-            newOpts.rules.forEach(function (r) {
-                r.global = true;
-            });
-        }
-
-        if (opts.owner_uuid && newOpts.rules) {
-            newOpts.rules.forEach(function (r) {
-                r.owner_uuid = opts.owner_uuid;
-            });
-        }
-
-        if (opts.stdout) {
-            newOpts.filecontents = true;
-        }
-    }
-
-    return newOpts;
-}
-
-
-/**
- * Displays the results of a command that adds or updates rules
- */
-function ruleOutput(err, res, opts, action) {
-    if (err) {
-        return cli.outputError(err, opts);
-    }
-
-    if (opts && opts.json) {
-        return console.log(cli.json(res));
-    }
-
-    if (opts && opts.stdout && res.hasOwnProperty('files')) {
-        for (var f in res.files) {
-            console.log('=== %s', f);
-            console.log(res.files[f]);
-            console.log('');
-        }
-    }
-
-    var out = [];
-
-    if (res.rules && res.rules.length !== 0) {
-        out.push(util.format('%s rules:', action));
-        res.rules.forEach(function (r) {
-            out.push(cli.ruleLine(r));
-        });
-    }
-
-    if (res.remoteVMs && res.remoteVMs.length !== 0) {
-        out.push(util.format('%s remote VMs:', action));
-        out = out.concat(res.remoteVMs);
-    }
-
-    if (opts && opts.verbose) {
-        out.push('');
-        out.push('VMs affected:');
-        out = out.concat(res.vms);
-    }
-    console.log(out.join('\n'));
-}
-
-
-/**
- * Performs an update
- */
-function doUpdate(opts, payload, action, callback) {
-    try {
-        assert.object(opts, 'opts');
-        assert.object(payload, 'payload');
-        assert.string(action, 'action');
-    } catch (err) {
-        cli.outputError(err);
-        return callback(err);
-    }
-
-    LOG = util_log.create({ action: 'update' });
-
-    pipeline({
-    funcs: [
-        function vms(_, cb) { VM.lookup({}, { fields: fw.VM_FIELDS }, cb); },
-        function updateRules(state, cb) {
-            payload.log = LOG;
-            payload.vms = state.vms;
-            return fw.update(payload, cb);
-        }
-    ]}, function _afterUpdate(err, res) {
-        ruleOutput(err, res.state.updateRules, opts, action);
-        return callback(err);
-    });
-}
-
-
-/**
- * Starts or stops the firewall for a VM
- */
-function startStop(opts, args, enabled, callback) {
-    var uuid = cli.validateUUID(args[0]);
-
-    VM.update(uuid, { firewall_enabled: enabled }, function _afterUpdate(err) {
-        if (err) {
-            cli.outputError(err, opts);
-            return callback(err);
-        }
-
-        if (opts && opts.json) {
-            console.log(cli.json({ result: 'success' }));
-        } else {
-            console.log('Firewall %s for VM',
-                enabled ? 'started' : 'stopped', uuid);
-        }
-
-        return callback();
-    });
-}
-
-
-
-// --- Fwadm Cmdln object
-
-
-
-/**
- * Constructor for a new fwadm cmdln object
- */
-function Fwadm() {
-    cmdln.Cmdln.call(this, {
-        name: 'fwadm',
-        desc: 'Manage firewall rules',
-        options: [ OPTS.help, OPTS.json, OPTS.dryrun, OPTS.stdout,
-            OPTS.verbose ]
-    });
-}
-
-util.inherits(Fwadm, cmdln.Cmdln);
-
-
-
-// --- Command handlers
-
-
-
-/**
- * Adds firewall data
- */
-Fwadm.prototype.do_add = function (subcmd, opts, args, callback) {
-    LOG = util_log.create({ action: 'add' });
-
-    pipeline({
-    funcs: [
-        function payload(_, cb) { cli.getPayload(opts, args, cb); },
-        function vms(_, cb) { VM.lookup({}, { fields: fw.VM_FIELDS }, cb); },
-        function addRules(state, cb) {
-            var addOpts = preparePayload(opts, state.payload);
-            addOpts.vms = state.vms;
-            addOpts.log = LOG;
-            return fw.add(addOpts, cb);
-        }
-    ]}, function _afterAdd(err, results) {
-        ruleOutput(err, results.state.addRules, opts, 'Added');
-        return callback(err);
-    });
-};
-
-
-/**
- * Adds a remote VM
- */
-Fwadm.prototype['do_add-rvm'] = function (subcmd, opts, args, callback) {
-    LOG = util_log.create({ action: 'add' });
-
-    pipeline({
-    funcs: [
-        function payload(_, cb) { cli.getPayload(opts, args, cb); },
-        function vms(_, cb) { VM.lookup({}, { fields: fw.VM_FIELDS }, cb); },
-        function addRules(state, cb) {
-            var addOpts = {
-                log: LOG,
-                vms: state.vms
-            };
-
-            if (state.payload.hasOwnProperty('remoteVMs')) {
-                // formatted like it was being passed to 'fwadm add'
-                addOpts.remoteVMs = state.payload.remoteVMs;
-            } else {
-                // just the remote VM (hopefully)
-                addOpts.remoteVMs = [ state.payload ];
-            }
-
-            return fw.add(addOpts, cb);
-        }
-    ]}, function _afterAdd(err, results) {
-        ruleOutput(err, results.state.addRules, opts, 'Added');
-        return callback(err);
-    });
-};
-
-
-/**
- * Lists firewall rules
- */
-Fwadm.prototype.do_list = function (subcmd, opts, args, callback) {
-    // XXX: support sorting
-    var listOpts = {};
-    if (opts.fields) {
-        opts.fields = opts.fields.split(',');
-        listOpts.fields = opts.fields;
-    }
-
-    if (opts.delim && !opts.parseable) {
-        var delimErr = new Error('-d requires -p');
-        cli.outputError(delimErr, opts);
-        return callback(delimErr);
-    }
-
-    if (opts.json && opts.parseable) {
-        var fmtErr = new Error('cannot specify both -j and -p');
-        cli.outputError(fmtErr, opts);
-        return callback(fmtErr);
-    }
-
-    LOG = util_log.create({ action: 'list' }, true);
-    listOpts.log = LOG;
-
-    return fw.list(listOpts, function (err, res) {
-        cli.displayRules(err, res, opts);
-        return callback(err);
-    });
-};
-
-
-/**
- * Lists remote VMs
- */
-Fwadm.prototype['do_list-rvms'] = function (subcmd, opts, args, callback) {
-    LOG = util_log.create({ action: 'listRemoteVMs' }, true);
-
-    // XXX: support filtering, sorting
-    return fw.listRVMs({ log: LOG }, function (err, res) {
-        if (err) {
-            cli.outputError(err, opts);
-            return callback(err);
-        }
-
-        console.log(cli.json(res));
-        return callback();
-    });
-};
-
-
-/**
- * Updates a rule
- */
-Fwadm.prototype.do_update = function (subcmd, opts, args, callback) {
-    var id;
-    if (args.length !== 0) {
-        id = args.shift();
-    }
-
-    return cli.getPayload(opts, args, function (err, payload) {
-        if (err) {
-            cli.outputError(err, opts);
-            return callback(err);
-        }
-
-        var updatePayload = preparePayload(opts, payload);
-
-        // Allow doing an 'update <uuid>' instead of requiring the UUID be in
-        // the payload:
-        if (id && updatePayload.hasOwnProperty('rules')
-            && updatePayload.rules.length === 1) {
-            updatePayload.rules[0].uuid = cli.validateUUID(id);
-        }
-
-        return doUpdate(opts, updatePayload, 'Updated', callback);
-    });
-};
-
-
-/**
- * Gets a firewall rule
- */
-Fwadm.prototype.do_get = function (subcmd, opts, args, callback) {
-    var uuid = cli.validateUUID(args[0]);
-    LOG = util_log.create({ action: 'get' }, true);
-
-    return fw.get({ log: LOG, uuid: uuid }, function (err, rule) {
-        if (err) {
-            cli.outputError(err, opts);
-            return callback(err);
-        }
-
-        console.log(cli.json(rule));
-        return callback();
-    });
-};
-
-
-/**
- * Gets a remote VM
- */
-Fwadm.prototype['do_get-rvm'] = function (subcmd, opts, args, callback) {
-    var uuid = cli.validateUUID(args[0]);
-    LOG = util_log.create({ action: 'getRemoteVM' }, true);
-
-    return fw.getRVM({ log: LOG, remoteVM: uuid }, function (err, rvm) {
-        if (err) {
-            cli.outputError(err, opts);
-            return callback(err);
-        }
-
-        console.log(cli.json(rvm));
-        return callback();
-    });
-};
-
-
-/**
- * Enables or disables firewall rules
- */
-function enableDisable(subcmd, opts, args, callback) {
-    var enabled = subcmd === 'enable';
-    if (args.length === 0) {
-        return callback(new Error('Must specify rules to enable!'));
-    }
-
-    var rules = args.map(function (uuid) {
-        return { uuid: cli.validateUUID(uuid), enabled: enabled };
-    });
-
-    return doUpdate(opts, preparePayload(opts, { rules: rules }),
-        enabled ? 'Enabled' : 'Disabled', callback);
-}
-
-
-Fwadm.prototype.do_enable = function () {
-    enableDisable.apply(this, arguments);
-};
-
-Fwadm.prototype.do_disable = function () {
-    enableDisable.apply(this, arguments);
-};
-
-
-/**
- * Deletes a firewall rule
- */
-Fwadm.prototype.do_delete = function (subcmd, opts, args, callback) {
-    if (args.length === 0) {
-        return console.error('Must specify rules to delete!');
-    }
-
-    args.forEach(function (uuid) {
-        cli.validateUUID(uuid);
-    });
-
-    LOG = util_log.create({ action: 'del' });
-
-    pipeline({
-    funcs: [
-        function vms(_, cb) { VM.lookup({}, { fields: fw.VM_FIELDS }, cb); },
-        function delRules(state, cb) {
-            var delOpts = preparePayload(opts);
-            delOpts.log = LOG;
-            delOpts.vms = state.vms;
-            delOpts.uuids = args;
-            return fw.del(delOpts, cb);
-        }
-    ]}, function _afterDel(err, results) {
-        ruleOutput(err, results.state.delRules, opts, 'Deleted');
-        return callback(err);
-    });
-};
-
-
-/**
- * Deletes a remote VM
- */
-Fwadm.prototype['do_delete-rvm'] = function (subcmd, opts, args, callback) {
-    if (args.length === 0) {
-        return console.error('Must specify remote VMs to delete!');
-    }
-
-    args.forEach(function (uuid) {
-        cli.validateUUID(uuid);
-    });
-
-    LOG = util_log.create({ action: 'del' });
-
-    pipeline({
-    funcs: [
-        function vms(_, cb) { VM.lookup({}, { fields: fw.VM_FIELDS }, cb); },
-        function delRVMs(state, cb) {
-            var delOpts = preparePayload(opts);
-            delOpts.log = LOG;
-            delOpts.vms = state.vms;
-            delOpts.rvmUUIDs = args;
-            return fw.del(delOpts, cb);
-        }
-    ]}, function _afterDel(err, results) {
-        ruleOutput(err, results.state.delRVMs, opts, 'Deleted');
-        return callback(err);
-    });
-};
-
-
-/**
- * Gets the rules that apply to a remote VM
- */
-Fwadm.prototype['do_rvm-rules'] = function (subcmd, opts, args, callback) {
-    var uuid = cli.validateUUID(args[0]);
-    LOG = util_log.create({ action: 'rvmRules' }, true);
-
-    return VM.lookup({}, { fields: fw.VM_FIELDS }, function (err, vms) {
-        if (err) {
-            cli.outputError(err, opts);
-            return callback(err);
-        }
-
-        return fw.rvmRules({ log: LOG, remoteVM: uuid, vms: vms },
-            function (err2, res) {
-            cli.displayRules(err2, res, opts);
-            return callback(err2);
-        });
-    });
-};
-
-
-/**
- * Gets the rules that apply to a zone
- */
-Fwadm.prototype.do_rules = function (subcmd, opts, args, callback) {
-    var uuid = cli.validateUUID(args[0]);
-    LOG = util_log.create({ action: 'vmRules' }, true);
-
-    return VM.lookup({}, { fields: fw.VM_FIELDS }, function (err, vms) {
-        if (err) {
-            cli.outputError(err, opts);
-            return callback(err);
-        }
-
-        return fw.vmRules({ log: LOG, vm: uuid, vms: vms },
-            function (err2, res) {
-            cli.displayRules(err2, res, opts);
-            return callback(err2);
-        });
-    });
-};
-
-
-/**
- * Starts the firewall for a VM
- */
-Fwadm.prototype.do_start = function (subcmd, opts, args, callback) {
-    return startStop(opts, args, true, callback);
-};
-
-
-/**
- * Stops the firewall for a VM
- */
-Fwadm.prototype.do_stop = function (subcmd, opts, args, callback) {
-    return startStop(opts, args, false, callback);
-};
-
-
-/**
- * Gets the status of a VM's firewall (and extra information from ipf if
- * the verbose flag is set)
- */
-Fwadm.prototype.do_status = function (subcmd, opts, args, callback) {
-    var uuid = cli.validateUUID(args[0]);
-    LOG = util_log.create({ action: 'status' }, true);
-
-    fw.status({ log: LOG, uuid: uuid }, function (err, res) {
-        if (err) {
-            cli.outputError(err, opts);
-            return callback(err);
-        }
-
-        if (opts && opts.json) {
-            console.log(cli.json(res));
-            return callback();
-        }
-
-        if (opts && opts.verbose) {
-            for (var key in res) {
-                console.log('%s: %s', key, res[key]);
-            }
-            return;
-        }
-
-        console.log(res.running ? 'running' : 'stopped');
-        return callback();
-    });
-};
-
-
-/**
- * Gets rule statistics for a VM's firewall
- */
-Fwadm.prototype.do_stats = function (subcmd, opts, args, callback) {
-    var uuid = cli.validateUUID(args[0]);
-    LOG = util_log.create({ action: 'stats' }, true);
-
-    fw.stats({ log: LOG, uuid: uuid }, function (err, res) {
-        if (err) {
-            cli.outputError(err, opts);
-            return callback(err);
-        }
-
-        if (opts && opts.json) {
-            console.log(cli.json(res.rules));
-            return callback();
-        }
-
-        res.rules.forEach(function (r) {
-            console.log('%s %s', r.hits, r.rule);
-        });
-
-        return callback();
-    });
-};
-
-
-/**
- * Gets the VMs that are affected by a rule
- */
-Fwadm.prototype.do_vms = function (subcmd, opts, args, callback) {
-    var uuid = cli.validateUUID(args[0]);
-    LOG = util_log.create({ action: 'vms' }, true);
-
-    return VM.lookup({}, { fields: fw.VM_FIELDS }, function (err, vms) {
-        if (err) {
-            cli.outputError(err, opts);
-            return callback(err);
-        }
-
-        return fw.vms({ log: LOG, rule: uuid, vms: vms }, function (err2, res) {
-            if (err2) {
-                cli.outputError(err2, opts);
-                return callback(err);
-            }
-
-            if (opts && opts.json) {
-                console.log(cli.json(res));
-                return callback();
-            }
-
-            console.log(res.join('\n'));
-            return callback();
-        });
-    });
-};
-
-var ARG_OPTS;
-
-/**
- * Run before any of the do_* methods
- */
-Fwadm.prototype.init = function (opts, args, callback) {
-    ARG_OPTS = opts;
-    return callback();
-
-};
-
-
-
-// --- Help text and other cmdln options
-
-
-
-var HELP = {
-    add: 'add firewall rules or remote VMs',
-    'add-rvm': 'add a remote VM',
-    delete: 'delete a rule',
-    'delete-rvm': 'delete a remote VM',
-    disable: 'disable a rule',
-    enable: 'enable a rule',
-    get: 'get a rule',
-    'get-rvm': 'get a remote VM',
-    list: 'list rules',
-    'list-rvms': 'list remote VMs',
-    rules: 'list rules that apply to a VM',
-    'rvm-rules': 'list rules that apply to a remote VM',
-    start: 'start a VM\'s firewall',
-    status: 'get the status of a VM\'s firewall',
-    stats: 'get rule statistics for a VM\'s firewall',
-    stop: 'stop a VM\'s firewall',
-    update: 'update firewall rules or data',
-    vms: 'list the UUIDs of VMs affected by a rule'
-};
-
-var EXTRA_OPTS = {
-    add: [ OPTS.description, OPTS.enable, OPTS.file, OPTS.global,
-        OPTS.owner_uuid ],
-    'add-rvm': [ OPTS.file ],
-    list: [ OPTS.delim, OPTS.output_fields, OPTS.parseable ],
-    update: [ OPTS.description, OPTS.enable, OPTS.file, OPTS.global,
-        OPTS.owner_uuid ]
-};
-
-// Help text and options for all commands
-for (var cmd in HELP) {
-    var proto = Fwadm.prototype['do_' + cmd];
-    proto.help = HELP[cmd];
-    if (!EXTRA_OPTS.hasOwnProperty(cmd)) {
-        EXTRA_OPTS[cmd] = [];
-    }
-
-    EXTRA_OPTS[cmd] = EXTRA_OPTS[cmd].concat([
-        OPTS.dryrun, OPTS.json, OPTS.stdout, OPTS.verbose ]);
-    proto.options = EXTRA_OPTS[cmd];
-}
-
-
-
-// --- Exports
-
-
-
-/**
- * Main entry point
- */
-function main() {
-    onlyif.rootInSmartosGlobal(function (err) {
-        if (err) {
-            console.error('FATAL: cannot run: %s', err);
-            return process.exit(2);
-        }
-
-        var fwadm = new Fwadm;
-        fwadm.main(process.argv, function (err2) {
-            if (err2 && !cli.haveOutputErr()) {
-                cli.outputError(err2, ARG_OPTS);
-                // This is a usage error - no need to flush logs
-                process.exit(2);
-            }
-
-            // Potentially 3 different logs to flush: if we've only used
-            // fw.js, just flush LOG.  If we've gone through VM.update
-            // (for start / stop), we need to flush VM.log and VM.fw_log.
-            util_log.flush([LOG, VM.log, VM.fw_log], function () {
-                if (cli.haveOutputErr()) {
-                    process.exit(1);
-                }
-
-                process.exit(0);
-            });
-        });
-    });
-}
-
-
-
-module.exports = {
-    main: main
-};
diff --git a/node_modules/fw/lib/ipf.js b/node_modules/fw/lib/ipf.js
deleted file mode 100644
index e072bf4..0000000
--- a/node_modules/fw/lib/ipf.js
+++ /dev/null
@@ -1,332 +0,0 @@
-/*
- * CDDL HEADER START
- *
- * The contents of this file are subject to the terms of the
- * Common Development and Distribution License, Version 1.0 only
- * (the "License").  You may not use this file except in compliance
- * with the License.
- *
- * You can obtain a copy of the license at http://smartos.org/CDDL
- *
- * See the License for the specific language governing permissions
- * and limitations under the License.
- *
- * When distributing Covered Code, include this CDDL HEADER in each
- * file.
- *
- * If applicable, add the following below this CDDL HEADER, with the
- * fields enclosed by brackets "[]" replaced with your own identifying
- * information: Portions Copyright [yyyy] [name of copyright owner]
- *
- * CDDL HEADER END
- *
- * Copyright (c) 2016, Joyent, Inc. All rights reserved.
- *
- * fwadm: ipf control functions
- */
-
-var assert = require('assert-plus');
-var execFile = require('child_process').execFile;
-var fs = require('fs');
-var vasync = require('vasync');
-
-
-
-// --- Globals
-
-
-
-var IPF = '/usr/sbin/ipf';
-var IPFSTAT = '/usr/sbin/ipfstat';
-// Are we using an older version of ipf?
-var OLD = false;
-
-
-
-// --- Internal functions
-
-
-
-/**
- * Trims spaces from both sides of a string
- */
-function trim(str) {
-    return str.replace(/^\s+/, '').replace(/\s+$/, '');
-}
-
-
-/**
- * Actually runs the ipfilter executable, logging as appropriate
- */
-function ipf(args, log, callback) {
-    return execFile(IPF, args, function (err, stdout, stderr) {
-        var res = { stdout: stdout, stderr: stderr };
-        if (log) {
-            log.debug(res, 'ipf: "%s %s"', IPF, args.join(' '));
-        }
-
-        return callback(err, res);
-    });
-}
-
-
-/**
- * Actually runs the ipfstat executable, logging as appropriate
- */
-function ipfstat(args, log, callback) {
-    return execFile(IPFSTAT, args, function (err, stdout, stderr) {
-        var res = { stdout: stdout, stderr: stderr };
-        if (log) {
-            log.debug(res, 'ipfstat: "%s %s"', IPFSTAT, args.join(' '));
-        }
-
-        return callback(err, res);
-    });
-}
-
-
-
-// --- Exported functions
-
-
-
-/**
- * Indicates we're on a platform that doesn't support the '-G' flag
- */
-function setOld() {
-    OLD = true;
-}
-
-
-/**
- * Reloads the ipf rules for a zone
- *
- * @param uuid {String} : zone UUID
- * @param conf {String} : path of ipf conf file to load
- * @param log {Object} : bunyan logger
- * @param callback {Function} : `function (err, res)`
- */
-function zoneReload(uuid, conf, conf6, log, callback) {
-    assert.string(uuid, 'uuid');
-    assert.string(conf, 'conf');
-    assert.string(conf6, 'conf6');
-    assert.object(log, 'log');
-    assert.func(callback, 'callback');
-
-    vasync.waterfall([
-        function _v4flush(cb) {
-            // Flush (-F) all (-a) IPv4 rules from the inactive list (-I) for
-            // the GZ-controlled ipf stack (-G) for zone uuid
-            var flushOpts = ['-GIFa', uuid];
-            if (OLD) {
-                flushOpts = ['-IFa', uuid];
-            }
-
-            return ipf(flushOpts, log, cb);
-        },
-        function _v6flush(_, cb) {
-            // Flush (-F) all (-a) IPv6 (-6) rules from the inactive list (-I)
-            // for the GZ-controlled ipf stack (-G) for zone uuid
-            var flushOpts = ['-6GIFa', uuid];
-            if (OLD) {
-                flushOpts = ['-6IFa', uuid];
-            }
-
-            return ipf(flushOpts, log, cb);
-        },
-        function _v4load(_, cb) {
-            // Load IPv4 rules from conf (-f) into the inactive list (-I) for
-            // the GZ-controlled (-G) ipf stack
-            var loadOpts = ['-G', '-I', '-f', conf, uuid];
-            if (OLD) {
-                loadOpts = ['-I', '-f', conf, uuid];
-            }
-            return ipf(loadOpts, log, cb);
-        },
-        function _v6load(_, cb) {
-            fs.stat(conf6, function (err, stati) {
-                if (err) {
-                    if (err.code === 'ENOENT') {
-                        // No IPv6 rules to load
-                        return cb();
-                    }
-                    return cb(err);
-                }
-
-                // Load IPv6 (-6) rules from conf (-f) into the inactive
-                // list (-I) for the GZ-controlled (-G) ipf stack
-                var loadOpts = ['-6', '-G', '-I', '-f', conf6, uuid];
-                if (OLD) {
-                    loadOpts = ['-6', '-I', '-f', conf6, uuid];
-                }
-                return ipf(loadOpts, log, cb);
-            });
-        },
-        function _swap(_, cb) {
-            // Swap (-s) the active and inactive lists, and update the interface
-            // list (-y) for the GZ-controlled ipf stack (-G)
-            var swapOpts = ['-G', '-s', '-y', uuid];
-            if (OLD) {
-                swapOpts = ['-s', '-y', uuid];
-            }
-
-            return ipf(swapOpts, log, cb);
-        }
-    ], callback);
-}
-
-
-/**
- * Gets per-rule statistics for a zone
- *
- * @param uuid {String} : zone UUID
- * @param log {Object} : bunyan logger
- * @param callback {Function} : `function (err, res)`
- */
-function zoneRuleStats(uuid, log, callback) {
-    assert.string(uuid, 'uuid');
-    assert.object(log, 'log');
-    assert.func(callback, 'callback');
-
-    var statOpts = ['-hoi', '-G', uuid];
-    if (OLD) {
-        statOpts = ['-hoi', '-z', uuid];
-    }
-    return ipfstat(statOpts, log, function (err, res) {
-        if (!res.stdout) {
-            return callback(new Error('No output from ipfstat'), res);
-        }
-
-        var results = [];
-        res.stdout.split('\n').forEach(function (line) {
-            if (line === '') {
-                return;
-            }
-
-            var idx = line.indexOf(' ');
-            results.push({
-                hits: line.substring(0, idx),
-                rule: line.substring(idx + 1)
-            });
-        });
-
-        return callback(null, results);
-    });
-}
-
-
-/**
- * Gets the ipf status for a zone
- *
- * @param uuid {String} : zone UUID
- * @param log {Object} : bunyan logger
- * @param callback {Function} : `function (err, res)`
- */
-function zoneStatus(uuid, log, callback) {
-    assert.string(uuid, 'uuid');
-    assert.object(log, 'log');
-    assert.func(callback, 'callback');
-
-    var statusOpts = ['-GV', uuid];
-    if (OLD) {
-        statusOpts = ['-V', uuid];
-    }
-    return ipf(statusOpts, log, function (err, res) {
-        if (err) {
-            return callback(err, res);
-        }
-
-        if (!res.stdout) {
-            return callback(new Error('No output from ipf'), res);
-        }
-
-        var i;
-        var results = {};
-        var lines = res.stdout.split('\n');
-        for (i in lines) {
-            var idx = lines[i].indexOf(':');
-            var key = lines[i].substr(0, idx).toLowerCase();
-            var val = trim(lines[i].substr(idx + 1));
-            if (!key) {
-                continue;
-            }
-
-            switch (key) {
-            case 'ipf':
-            case 'kernel':
-                val = val.replace('IP Filter: ', '');
-                break;
-            case 'running':
-                if (val == 'no') {
-                    val = false;
-                } else {
-                    val = true;
-                }
-                break;
-            case 'active list':
-                val = Number(val);
-                break;
-            default:
-                break;
-            }
-
-            results[key] = val;
-        }
-
-        return callback(null, results);
-    });
-}
-
-
-/**
- * Enables ipf for a zone
- *
- * @param uuid {String} : zone UUID
- * @param log {Object} : bunyan logger
- * @param callback {Function} : `function (err, res)`
- */
-function zoneStart(uuid, log, callback) {
-    assert.string(uuid, 'uuid');
-    assert.object(log, 'log');
-    assert.func(callback, 'callback');
-
-    var startOpts = ['-GE', uuid];
-    if (OLD) {
-        startOpts = ['-E', uuid];
-    }
-    return ipf(startOpts, log, callback);
-}
-
-
-/**
- * Disables ipf for a zone
- *
- * @param uuid {String} : zone UUID
- * @param log {Object} : bunyan logger
- * @param callback {Function} : `function (err, res)`
- */
-function zoneStop(uuid, log, callback) {
-    assert.string(uuid, 'uuid');
-    assert.object(log, 'log');
-    assert.func(callback, 'callback');
-
-    var stopOpts = ['-GD', uuid];
-    if (OLD) {
-        stopOpts = ['-D', uuid];
-    }
-
-    return ipf(stopOpts, log, callback);
-}
-
-
-
-module.exports = {
-    _setOld: setOld,
-    ipf: ipf,
-    ipfstat: ipfstat,
-    reload: zoneReload,
-    ruleStats: zoneRuleStats,
-    status: zoneStatus,
-    start: zoneStart,
-    stop: zoneStop
-};
diff --git a/node_modules/fw/lib/pipeline.js b/node_modules/fw/lib/pipeline.js
deleted file mode 100644
index 84fd5e8..0000000
--- a/node_modules/fw/lib/pipeline.js
+++ /dev/null
@@ -1,68 +0,0 @@
-/*
- * CDDL HEADER START
- *
- * The contents of this file are subject to the terms of the
- * Common Development and Distribution License, Version 1.0 only
- * (the "License").  You may not use this file except in compliance
- * with the License.
- *
- * You can obtain a copy of the license at http://smartos.org/CDDL
- *
- * See the License for the specific language governing permissions
- * and limitations under the License.
- *
- * When distributing Covered Code, include this CDDL HEADER in each
- * file.
- *
- * If applicable, add the following below this CDDL HEADER, with the
- * fields enclosed by brackets "[]" replaced with your own identifying
- * information: Portions Copyright [yyyy] [name of copyright owner]
- *
- * CDDL HEADER END
- *
- * Copyright (c) 2012, Joyent, Inc. All rights reserved.
- *
- *
- * fwadm: shared vasync logic
- */
-
-var vasync = require('vasync');
-
-
-
-// --- Exports
-
-
-
-/**
- * Wraps vasync's pipeline so that each function in the pipeline gets called
- * with (state, cb) as its arguments. state contains the output of previous
- * steps of the pipeline, keyed by function name.
- */
-function pipeline(opts, callback) {
-    var state = {};
-    var funcs = [];
-
-    opts['funcs'].forEach(function (fn, i) {
-        funcs.push(function (_, cb) {
-            var name = fn.name || 'func' + i;
-
-            fn(state, function (e, r) {
-                state[name] = r;
-                return cb(e, r);
-            });
-        });
-    });
-
-    vasync.pipeline({
-        funcs: funcs
-    }, function (err, res) {
-        return callback(err, { results: res, state: state });
-    });
-}
-
-
-
-module.exports = {
-    pipeline: pipeline
-};
diff --git a/node_modules/fw/lib/rvm.js b/node_modules/fw/lib/rvm.js
deleted file mode 100644
index 7fe04f4..0000000
--- a/node_modules/fw/lib/rvm.js
+++ /dev/null
@@ -1,333 +0,0 @@
-/*
- * CDDL HEADER START
- *
- * The contents of this file are subject to the terms of the
- * Common Development and Distribution License, Version 1.0 only
- * (the "License").  You may not use this file except in compliance
- * with the License.
- *
- * You can obtain a copy of the license at http://smartos.org/CDDL
- *
- * See the License for the specific language governing permissions
- * and limitations under the License.
- *
- * When distributing Covered Code, include this CDDL HEADER in each
- * file.
- *
- * If applicable, add the following below this CDDL HEADER, with the
- * fields enclosed by brackets "[]" replaced with your own identifying
- * information: Portions Copyright [yyyy] [name of copyright owner]
- *
- * CDDL HEADER END
- *
- * Copyright (c) 2013, Joyent, Inc. All rights reserved.
- *
- *
- * fwadm: functions for manipulating remote VMs
- */
-
-var fs = require('fs');
-var mkdirp = require('mkdirp');
-var mod_rule = require('fwrule');
-var util = require('util');
-var util_err = require('./util/errors');
-var util_obj = require('./util/obj');
-var util_vm = require('./util/vm');
-var vasync = require('vasync');
-var VError = require('verror').VError;
-
-
-var createSubObjects = util_obj.createSubObjects;
-var forEachKey = util_obj.forEachKey;
-
-
-
-// --- Globals
-
-
-
-var VM_PATH = '/var/fw/vms';
-
-
-
-// --- Exports
-
-
-
-/**
- * Create remote VM objects
- *
- * @param allVMs {Object}: VM lookup table, as returned by createVMlookup()
- * @param vms {Array}: array of VM objects to turn into remote VMs
- * @param callback {Function} `function (err, remoteVMs)`
- * - Where remoteVMs is an object of remote VMs, keyed by UUID
- */
-function create(allVMs, vms, log, callback) {
-    log.trace(vms, 'rvm.create: entry');
-    if (!vms || vms.length === 0) {
-        return callback();
-    }
-
-    var remoteVMs = {};
-    var errs = [];
-
-    vms.forEach(function (vm) {
-        try {
-            var rvm = util_vm.createRemoteVM(vm);
-            if (allVMs.all.hasOwnProperty(rvm.uuid)) {
-                var err = new VError(
-                    'Remote VM "%s" must not have the same UUID as a local VM',
-                    rvm.uuid);
-                err.details = vm;
-                throw err;
-            }
-            remoteVMs[rvm.uuid] = rvm;
-        } catch (err2) {
-            errs.push(err2);
-        }
-    });
-
-    if (errs.length !== 0) {
-        return callback(util_err.createMultiError(errs));
-    }
-
-    return callback(null, remoteVMs);
-}
-
-
-/**
- * Create a lookup table for remote VMs
- *
- * @param {Array of Objects} remoteVMs : this can either be an object mapping
- *   UUIDs to remote VM objects, or an array of these objects
- * @param {Object} log : bunyan logger
- */
-function createLookup(remoteVMs, log) {
-    log.trace(remoteVMs, 'rvm.createLookup: entry');
-
-    var rvmLookup = {
-        all: {},
-        ips: {},
-        subnets: {},
-        tags: {},
-        vms: {},
-        wildcards: {}
-    };
-
-    rvmLookup.wildcards.vmall = rvmLookup.all;
-
-    if (!remoteVMs || util_obj.objEmpty(remoteVMs)) {
-        return rvmLookup;
-    }
-
-    var rvmList = remoteVMs;
-    if (!util_obj.isArray(rvmList)) {
-        rvmList = [ remoteVMs ];
-    }
-
-    rvmList.forEach(function (rvmObj) {
-        forEachKey(rvmObj, function (uuid, rvm) {
-            // Make vms match the layout of tags, eg: tags[key][uuid] = { obj }
-            rvmLookup.vms[uuid] = {};
-            rvmLookup.vms[uuid][uuid] = rvm;
-
-            if (rvm.hasOwnProperty('tags')) {
-                forEachKey(rvm.tags, function (tag, val) {
-                    createSubObjects(rvmLookup.tags, tag, uuid, rvm);
-                    createSubObjects(rvmLookup, 'tagValues', tag, val,
-                        uuid, rvm);
-                });
-            }
-
-            rvm.ips.forEach(function (ip) {
-                util_obj.addToObj3(rvmLookup, 'ips', ip, uuid, rvm);
-            });
-
-            rvmLookup.all[uuid] = rvm;
-        });
-    });
-
-    rvmLookup.wildcards.vmall = rvmLookup.all;
-    log.trace(rvmLookup, 'rvm.createLookup: return');
-    return rvmLookup;
-}
-
-
-/*
- * Deletes remote VMs on disk
- *
- * @param {Array} rules : rule objects to delete
- * @param {Object} log : bunyan logger
- * @param {Function} callback : `f(err)`
- */
-function del(rvmUUIDs, log, callback) {
-    log.debug({ rvmUUIDs: rvmUUIDs }, 'rvm.del: entry');
-
-    return vasync.forEachParallel({
-        inputs: rvmUUIDs,
-        func: function _del(uuid, cb) {
-            var filename = util.format('%s/%s.json', VM_PATH, uuid);
-            log.trace('deleting "%s"', filename);
-
-            fs.unlink(filename, function (err) {
-                if (err && err.code == 'ENOENT') {
-                    return cb();
-                }
-
-                return cb(err);
-            });
-        }
-    }, callback);
-}
-
-
-/**
- * Load a single remote VM from disk, returning the object
- *
- * @param {String} file : file to load the remote VM from
- * @param {Object} log : bunyan logger
- * @param {Function} callback : `f(err, vm)`
- * - vm {Object} : remote VM
- */
-function load(uuid, log, callback) {
-    var file = util.format('%s/%s.json', VM_PATH, uuid);
-    log.trace('rvm.load: loading file "%s"', file);
-
-    return fs.readFile(file, function (err, raw) {
-        if (err) {
-            if (err.code == 'ENOENT') {
-                var uErr = new VError('Unknown remote VM "%s"', uuid);
-                uErr.code = 'ENOENT';
-                return callback(uErr);
-            }
-
-            return callback(err);
-        }
-        var parsed;
-
-        try {
-            parsed = JSON.parse(raw);
-            log.trace(parsed, 'rvm.load: loaded rule file "%s"', file);
-            // XXX: validate that the VM has a uuid
-        } catch (err2) {
-            log.error(err2, 'rvm.load: error parsing VM file "%s"', file);
-            return callback(err2);
-        }
-
-        return callback(null, parsed);
-    });
-}
-
-
-/**
- * Loads all remote VMs from disk
- *
- * @param {Object} log : bunyan logger
- * @param {Function} callback : `f(err, vms)`
- * - vms {Object} : remote VM objects, keyed by UUID
- */
-function loadAll(log, callback) {
-    log.trace('rvm.loadAll: entry');
-    var vms = {};
-
-    fs.readdir(VM_PATH, function (err, files) {
-        if (err) {
-            if (err.code === 'ENOENT') {
-                return callback(null, {});
-            }
-            return callback(err);
-        }
-
-        return vasync.forEachParallel({
-            inputs: files,
-            func: function (file, cb) {
-                if (file.indexOf('.json', file.length - 5) === -1) {
-                    return cb(null);
-                }
-                var uuid = file.split('.')[0];
-
-                return load(uuid, log, function (err2, rvm) {
-                    if (rvm) {
-                        vms[uuid] = rvm;
-                    }
-                    return cb(err2);
-                });
-            }
-        }, function (err3, res) {
-            return callback(err3, vms);
-        });
-    });
-}
-
-
-/*
- * Saves remote VMs to disk
- *
- * @param {Object} vms : remote VM objects to save, keyed by UUID
- * @param {Object} log : bunyan logger
- * @param {Function} callback : `f(err)`
- */
-function save(vms, log, callback) {
-    log.trace('rvm.save: entry');
-
-    if (!vms || util_obj.objEmpty(vms)) {
-        return callback();
-    }
-
-    var uuids = [];
-    // XXX: allow overriding version in the payload
-    var versions = {};
-    var ver = mod_rule.generateVersion();
-
-    return vasync.pipeline({
-    funcs: [
-        function _mkdir(_, cb) { mkdirp(VM_PATH, cb); },
-        function _writeVMs(_, cb) {
-            return vasync.forEachParallel({
-                inputs: Object.keys(vms),
-                func: function _writeVM(uuid, cb2) {
-                    var vm = vms[uuid];
-                    var filename = util.format('%s/%s.json.%s',
-                        VM_PATH, uuid, ver);
-                    log.trace(vm, 'writing "%s"', filename);
-
-                    return fs.writeFile(filename, JSON.stringify(vm, null, 2),
-                        function (err) {
-                        if (err) {
-                            return cb2(err);
-                        }
-
-                        uuids.push(uuid);
-                        versions[uuid] = ver;
-
-                        return cb2(null);
-                    });
-                }
-            // XXX: if there are failures here, we want to delete these files
-            }, cb);
-        },
-        function _renameRules(_, cb) {
-            return vasync.forEachParallel({
-                inputs: uuids,
-                func: function _renameRule(uuid, cb2) {
-                    var before = util.format('%s/%s.json.%s', VM_PATH, uuid,
-                        versions[uuid]);
-                    var after = util.format('%s/%s.json', VM_PATH, uuid);
-                    log.trace('renaming "%s" to "%s"', before, after);
-                    fs.rename(before, after, cb2);
-                }
-            }, cb);
-        }
-    ]}, callback);
-}
-
-
-
-module.exports = {
-    create: create,
-    createLookup: createLookup,
-    del: del,
-    load: load,
-    loadAll: loadAll,
-    save: save
-};
diff --git a/node_modules/fw/lib/util/errors.js b/node_modules/fw/lib/util/errors.js
deleted file mode 100644
index 2738c44..0000000
--- a/node_modules/fw/lib/util/errors.js
+++ /dev/null
@@ -1,66 +0,0 @@
-/*
- * CDDL HEADER START
- *
- * The contents of this file are subject to the terms of the
- * Common Development and Distribution License, Version 1.0 only
- * (the "License").  You may not use this file except in compliance
- * with the License.
- *
- * You can obtain a copy of the license at http://smartos.org/CDDL
- *
- * See the License for the specific language governing permissions
- * and limitations under the License.
- *
- * When distributing Covered Code, include this CDDL HEADER in each
- * file.
- *
- * If applicable, add the following below this CDDL HEADER, with the
- * fields enclosed by brackets "[]" replaced with your own identifying
- * information: Portions Copyright [yyyy] [name of copyright owner]
- *
- * CDDL HEADER END
- *
- * Copyright (c) 2013, Joyent, Inc. All rights reserved.
- *
- *
- * fwadm: errors
- */
-
-var verror = require('verror');
-
-
-
-// --- Exports
-
-
-
-/**
- * Creates a MultiError from an array of errors, or if there's only one in the
- * list, just returns that error.
- */
-function createMultiError(errs) {
-    if (errs.length == 1) {
-        return errs[0];
-    }
-
-    var details = [];
-    var err = new verror.MultiError(errs);
-
-    errs.forEach(function (e) {
-        if (e.hasOwnProperty('details')) {
-            details.push(e.details);
-        }
-    });
-
-    if (details.length !== 0) {
-        err.details = details;
-    }
-
-    return err;
-}
-
-
-
-module.exports = {
-    createMultiError: createMultiError
-};
diff --git a/node_modules/fw/lib/util/log.js b/node_modules/fw/lib/util/log.js
deleted file mode 100644
index 635ed7e..0000000
--- a/node_modules/fw/lib/util/log.js
+++ /dev/null
@@ -1,483 +0,0 @@
-/*
- * CDDL HEADER START
- *
- * The contents of this file are subject to the terms of the
- * Common Development and Distribution License, Version 1.0 only
- * (the "License").  You may not use this file except in compliance
- * with the License.
- *
- * You can obtain a copy of the license at http://smartos.org/CDDL
- *
- * See the License for the specific language governing permissions
- * and limitations under the License.
- *
- * When distributing Covered Code, include this CDDL HEADER in each
- * file.
- *
- * If applicable, add the following below this CDDL HEADER, with the
- * fields enclosed by brackets "[]" replaced with your own identifying
- * information: Portions Copyright [yyyy] [name of copyright owner]
- *
- * CDDL HEADER END
- *
- * Copyright (c) 2014, Joyent, Inc. All rights reserved.
- *
- *
- * fwadm: logging and associated utils
- */
-
-var assert = require('assert-plus');
-var bunyan;
-var events = require('events');
-var fs = require('fs');
-var mkdirp = require('mkdirp');
-var mod_uuid = require('node-uuid');
-var path = require('path');
-var sprintf = require('extsprintf').sprintf;
-var util = require('util');
-var vasync = require('vasync');
-
-
-
-// --- Globals
-
-
-
-var LOG_DIR = '/var/log/fw/logs';
-var LOG_NAME = process.argv[1] ? path.basename(process.argv[1]) : 'fw';
-
-
-
-// --- Internal helper functions
-
-
-
-/**
- * Bunyan serializer for a firewall rule
- */
-function fullRuleSerializer(rules) {
-    var res = {};
-    for (var r in rules) {
-        res[rules[r].uuid] = rules[r].toString();
-    }
-
-    return Object.keys(res).map(function (u) {
-        return res[u];
-    });
-}
-
-
-/**
- * Returns true if the bunyan stream is logging to LOG_DIR
- */
-function isLoggingToFile(str) {
-    if (str.type === 'file' && str.stream
-        && startsWith(str.path, LOG_DIR)) {
-        return true;
-    }
-
-    return false;
-}
-
-
-/**
- * Returns true if the bunyan stream is an OpenOnErrorFileStream
- */
-function isOnErrorStream(str) {
-    if (str.type === 'raw' && str.stream
-        && str.stream instanceof OpenOnErrorFileStream) {
-        return true;
-    }
-
-    return false;
-}
-
-
-/**
- * Bunyan serializer for just the rule UUID
- */
-function ruleSerializer(rules) {
-    var res = {};
-    for (var r in rules) {
-        res[rules[r].uuid] = rules[r].toString();
-    }
-
-    return Object.keys(res);
-}
-
-
-/**
- * Taken from jsprim
- */
-function startsWith(str, prefix)
-{
-    return (str.substr(0, prefix.length) == prefix);
-}
-
-
-/**
- * Bunyan serializer for just the VM UUID
- */
-function vmSerializer(vms) {
-    // Returning from add, update, etc, vms is a list of VM UUIDs
-    if (util.isArray(vms)) {
-        if (typeof (vms[0]) === 'string') {
-            return vms;
-        }
-
-        return vms.map(function (v) {
-            return v.hasOwnProperty('uuid') ? v.uuid : v;
-        });
-    }
-
-    return Object.keys(vms);
-}
-
-
-
-// --- OpenOnErrorFileStream (originally from VM.js)
-
-
-
-// OpenOnErrorFileStream is a bunyan stream that only creates the file when
-// there's an error or higher level message.  We use this for actions that
-// shouldn't log in the normal case but where we do want logs when something
-// breaks.  Thanks to Trent++ for most of this code.
-
-
-function OpenOnErrorFileStream(opts) {
-    this.path = opts.path;
-    this.level = bunyan.resolveLevel(opts.level);
-    this.write = this.constructor.prototype.write1;
-    this.end = this.constructor.prototype.end1;
-
-    // Add the ringbuffer which we'll dump if we switch from not writing to
-    // writing, and so that they'll show up in dumps.
-    this.ringbuffer = new bunyan.RingBuffer({ limit: 50 });
-    this.log_to_file = false;
-}
-
-util.inherits(OpenOnErrorFileStream, events.EventEmitter);
-
-
-OpenOnErrorFileStream.prototype.startLoggingToFile = function () {
-    this._startWriting(this.level);
-};
-
-
-OpenOnErrorFileStream.prototype._startWriting = function (level, rec) {
-    var r;
-    var self = this;
-
-    if (this.stream) {
-        return;
-    }
-
-    this.stream = fs.createWriteStream(this.path,
-        { flags: 'a', encoding: 'utf8' });
-
-    this.stream.once('close', function _onClose() {
-        var args = Array.prototype.slice(arguments);
-        args.unshift('close');
-        self.emit.apply(self, args);
-    });
-
-    this.stream.once('drain', function _onDrain() {
-        var args = Array.prototype.slice(arguments);
-        args.unshift('drain');
-        self.emit.apply(self, args);
-    });
-
-    this.end = function _end() { this.stream.end(); };
-    this.write = this.constructor.prototype.write2;
-
-    // dump out logs from ringbuffer too since there was an error so we can
-    // figure out what's going on.
-    for (r in this.ringbuffer.records) {
-        r = this.ringbuffer.records[r];
-        if (r.level >= level && (!rec || r != rec)) {
-            this.write(r);
-        }
-    }
-};
-
-
-OpenOnErrorFileStream.prototype.end1 = function () {
-    // in initial mode we're not writing anything, so nothing to flush
-    this.emit('close');
-    return;
-};
-
-
-// used until first ERROR or higher, then opens file and ensures future writes
-// go to .write2()
-OpenOnErrorFileStream.prototype.write1 = function (rec) {
-    if (rec.level >= bunyan.ERROR || this.log_to_file) {
-        this._startWriting(bunyan.TRACE, rec);
-        return this.write(rec);
-    } else {
-        return this.ringbuffer.write(rec);
-    }
-};
-
-
-// used when writing to file
-OpenOnErrorFileStream.prototype.write2 = function (rec) {
-    var str = JSON.stringify(rec, bunyan.safeCycles()) + '\n';
-    this.stream.write(str);
-};
-
-
-
-// --- Exports
-
-
-
-/**
- * Create logger
- */
-function createLogger(opts, readOnly) {
-    readOnly = !!readOnly;  // make boolean
-    if (!opts) {
-        opts = {};
-    }
-    assert.string(opts.action, 'opts.action');
-
-    if (!bunyan) {
-        bunyan = require('bunyan');
-    }
-
-    var log;
-    var logName = opts.logName || LOG_NAME;
-    var logLevel = opts.logLevel || 'debug';
-    var serializers = {
-        err: bunyan.stdSerializers.err,
-        fullRules: fullRuleSerializer,
-        rules: ruleSerializer,
-        vms: vmSerializer
-    };
-    var s;
-    var str;
-    var streams = [];
-
-    // XXX: allow logging to stderr
-
-    var filename = util.format('%s/%s-%s-%s.log',
-        LOG_DIR, Date.now(0), sprintf('%06d', process.pid),
-        opts.action.toLowerCase());
-
-    function addOnErrStream() {
-        streams.push({
-            type: 'raw',
-            stream: new OpenOnErrorFileStream({
-                path: filename,
-                level: logLevel
-            }),
-            level: 'trace'
-        });
-    }
-
-    function addFileStream() {
-        streams.push({ level: logLevel, path: filename });
-    }
-
-    mkdirp.sync(LOG_DIR);
-
-    if (opts.log) {
-        if (readOnly) {
-            for (s in opts.log.streams) {
-                str = opts.log.streams[s];
-
-                if (isLoggingToFile(str) || isOnErrorStream(str)) {
-                    return opts.log;
-                }
-            }
-
-            addOnErrStream();
-
-        } else {
-            for (s in opts.log.streams) {
-                str = opts.log.streams[s];
-
-                if (isLoggingToFile(str)) {
-                    return opts.log;
-                }
-
-                if (isOnErrorStream(str)) {
-                    str.startLoggingToFile();
-                    return opts.log;
-                }
-            }
-
-            addFileStream();
-        }
-
-        log = opts.log.child({
-            component: logName,
-            serializers: serializers,
-            streams: streams
-        });
-        return log;
-    }
-
-    if (readOnly) {
-        addOnErrStream();
-    } else {
-        addFileStream();
-    }
-
-    log = bunyan.createLogger({
-        name: logName,
-        req_id: opts.req_id || mod_uuid.v4(),
-        serializers: serializers,
-        streams: streams
-    });
-
-    return log;
-}
-
-
-/**
- * Create the logger and log one of the API entry points. Strips down
- * properties in opts that we know to be too big to log (eg: VMs).
- */
-function logEntry(opts, action, readOnly) {
-    opts.action = action;
-
-    var localVMs;
-    var log = createLogger(opts, readOnly).child({ component: action });
-    var oldLog;
-    var rules;
-    var vms;
-
-    // Remove or truncate properties from opts to make the start logline
-    // below a little cleaner
-
-    if (opts.localVMs) {
-        localVMs = opts.localVMs;
-        opts.localVMs = opts.localVMs.map(function (vm) {
-            return vm.uuid || '<unknown>'; });
-    }
-
-    if (opts.log) {
-        oldLog = opts.log;
-        delete opts.log;
-    }
-
-    if (opts.rules) {
-        rules = opts.rules;
-        opts.inputRules = opts.rules;
-        delete opts.rules;
-    }
-
-    if (opts.vms) {
-        vms = opts.vms;
-        opts.vms = opts.vms.map(function (vm) {
-            return vm.uuid || '<unknown>';
-        });
-    }
-
-    log.debug(opts, '%s: start', action);
-
-    // Now restore the removed / massaged properties
-
-    if (localVMs) {
-        opts.localVMs = localVMs;
-    }
-    if (oldLog) {
-        opts.log = oldLog;
-    }
-    if (rules) {
-        opts.rules = rules;
-    }
-    if (vms) {
-        opts.vms = vms;
-    }
-    delete opts.inputRules;
-
-    return log;
-}
-
-
-/**
- * Log error and suberrors on API endpoint exit
- */
-function finishErr(log, err, msg) {
-    if (err.hasOwnProperty('ase_errors')) {
-        for (var e in err.ase_errors) {
-            log.error(err.ase_errors[e], msg + ': err %d/%d',
-                Number(e) + 1, err.ase_errors.length);
-        }
-    }
-
-    return log.error(err, msg);
-}
-
-
-/**
- * Flush all open log streams
- */
-function flushLogs(logs, callback) {
-    if (!logs) {
-        return callback();
-    }
-
-    var streams = [];
-    if (!util.isArray(logs)) {
-        logs = [ logs ];
-    }
-
-    if (logs.length === 0) {
-        return callback();
-    }
-
-    logs.forEach(function (log) {
-        if (!log || !log.streams || log.streams.length === 0) {
-            return;
-        }
-
-        streams = streams.concat(log.streams);
-    });
-
-    var toClose = streams.length;
-    var closed = 0;
-
-    function _doneClose() {
-        closed++;
-        if (closed == toClose) {
-            return callback();
-        }
-    }
-
-    streams.forEach(function (str) {
-        if (!str || !str.stream) {
-            return _doneClose();
-        }
-
-        str.stream.once('drain', function () {
-            _doneClose();
-        });
-
-        if (str.stream.write('')) {
-            _doneClose();
-        }
-    });
-}
-
-
-/**
- * Set the bunyan module
- */
-function setBunyan(mod) {
-    bunyan = mod;
-}
-
-
-
-module.exports = {
-    create: createLogger,
-    entry: logEntry,
-    finishErr: finishErr,
-    flush: flushLogs,
-    setBunyan: setBunyan
-};
diff --git a/node_modules/fw/lib/util/obj.js b/node_modules/fw/lib/util/obj.js
deleted file mode 100644
index d2189f5..0000000
--- a/node_modules/fw/lib/util/obj.js
+++ /dev/null
@@ -1,146 +0,0 @@
-/*
- * CDDL HEADER START
- *
- * The contents of this file are subject to the terms of the
- * Common Development and Distribution License, Version 1.0 only
- * (the "License").  You may not use this file except in compliance
- * with the License.
- *
- * You can obtain a copy of the license at http://smartos.org/CDDL
- *
- * See the License for the specific language governing permissions
- * and limitations under the License.
- *
- * When distributing Covered Code, include this CDDL HEADER in each
- * file.
- *
- * If applicable, add the following below this CDDL HEADER, with the
- * fields enclosed by brackets "[]" replaced with your own identifying
- * information: Portions Copyright [yyyy] [name of copyright owner]
- *
- * CDDL HEADER END
- *
- * Copyright (c) 2013, Joyent, Inc. All rights reserved.
- *
- *
- * fwadm: shared object logic
- */
-
-
-
-// --- Exports
-
-
-
-/**
- * Adds to a 3-level deep object
- */
-function addToObj3(hash, key1, key2, key3, obj) {
-    if (!hash.hasOwnProperty(key1)) {
-        hash[key1] = {};
-    }
-    if (!hash[key1].hasOwnProperty(key2)) {
-        hash[key1][key2] = {};
-    }
-    if (!hash[key1][key2].hasOwnProperty(key3)) {
-        hash[key1][key2][key3] = obj;
-    }
-}
-
-
-/**
- * Creates a nested set of objects based on the argument names, like:
- *     args[0] = { args[1]: { args[2]: {} } }
- * If the last argument is an object, use that instead of an empty object
- * for the value of the most deeply nested object.
- */
-function createSubObjects() {
-    var h = arguments[0];
-    var prev = {};
-    for (var i = 1; i < arguments.length; i++) {
-        if (typeof (arguments[i]) === 'object') {
-            prev[arguments[i - 1]] = arguments[i];
-            return;
-        }
-
-        if (!h.hasOwnProperty(arguments[i])) {
-            h[arguments[i]] = {};
-        }
-        prev = h;
-        h = h[arguments[i]];
-    }
-    return h;
-}
-
-
-/**
- * For object obj, calls callback(key, val)
- */
-function forEachKey(obj, callback) {
-    for (var key in obj) {
-        callback(key, obj[key]);
-    }
-}
-
-
-/**
- * Returns true if the object is an array
- */
-function isArray(obj) {
-    if (typeof (obj) == 'object' && obj.hasOwnProperty('length')) {
-        return true;
-    }
-
-    return false;
-}
-
-
-/**
- * Merges two objects based on their keys and returns the result. In a key
- * conflict, obj1 wins.
- */
-function mergeObjects(obj1, obj2) {
-    var newObj = {};
-    [obj2, obj1].forEach(function (h) {
-        for (var k in h) {
-            newObj[k] = h[k];
-        }
-    });
-    return newObj;
-}
-
-
-/**
- * Returns true if the object has no keys
- */
-function objEmpty(obj) {
-    /* JSSTYLED */
-    /*jsl:ignore*/
-    for (var k in obj) {
-        return false;
-    }
-    /* JSSTYLED */
-    /*jsl:end*/
-
-    return true;
-}
-
-
-function objValues(obj) {
-    var arr = [];
-    for (var key in obj) {
-        arr.push(obj[key]);
-    }
-    return arr;
-}
-
-
-module.exports = {
-    addToObj3: addToObj3,
-    createSubObjects: createSubObjects,
-    forEachKey: forEachKey,
-    isArray: isArray,
-    mergeObjects: mergeObjects,
-    values: objValues,
-    objEmpty: objEmpty
-};
diff --git a/node_modules/fw/lib/util/vm.js b/node_modules/fw/lib/util/vm.js
deleted file mode 100644
index a832102..0000000
--- a/node_modules/fw/lib/util/vm.js
+++ /dev/null
@@ -1,120 +0,0 @@
-/*
- * CDDL HEADER START
- *
- * The contents of this file are subject to the terms of the
- * Common Development and Distribution License, Version 1.0 only
- * (the "License").  You may not use this file except in compliance
- * with the License.
- *
- * You can obtain a copy of the license at http://smartos.org/CDDL
- *
- * See the License for the specific language governing permissions
- * and limitations under the License.
- *
- * When distributing Covered Code, include this CDDL HEADER in each
- * file.
- *
- * If applicable, add the following below this CDDL HEADER, with the
- * fields enclosed by brackets "[]" replaced with your own identifying
- * information: Portions Copyright [yyyy] [name of copyright owner]
- *
- * CDDL HEADER END
- *
- * Copyright (c) 2016, Joyent, Inc. All rights reserved.
- *
- *
- * fwadm: shared VM logic
- */
-
-var objEmpty = require('./obj').objEmpty;
-var VError = require('verror').VError;
-
-function getIPs(n) {
-    if (n.hasOwnProperty('ips')) {
-        return n.ips.map(function (ip) {
-            return ip.split('/')[0];
-        });
-    } else if (n.hasOwnProperty('ip')) {
-        return [n.ip];
-    } else {
-        return [];
-    }
-}
-
-function concat(acc, curr) {
-    return acc.concat(curr);
-}
-
-function notAuto(i) {
-    return (i !== 'dhcp') && (i !== 'addrconf');
-}
-
-
-
-// --- Exports
-
-/**
- * Get all of the IP addresses on the provided NICs
- */
-function ipsFromNICs(nics) {
-    return nics.map(getIPs).reduce(concat, []).filter(notAuto);
-}
-
-
-/**
- * Creates a remote VM object based on a VM.js VM object
- */
-function createRemoteVM(vm) {
-    var err;
-    var ips = {};
-    var rvm = {};
-    var uuid = vm.uuid;
-
-    if (!uuid) {
-        err = new VError('Remote VM must have UUID');
-        err.details = vm;
-        throw err;
-    }
-    rvm.uuid = uuid;
-
-    if (vm.hasOwnProperty('nics')) {
-        ipsFromNICs(vm.nics).forEach(function (ip) {
-            ips[ip] = 1;
-        });
-    }
-
-    if (vm.hasOwnProperty('ips')) {
-        vm.ips.forEach(function (ip) {
-            ips[ip] = 1;
-        });
-    }
-
-    if (objEmpty(ips)) {
-        err = new VError(
-            'Remote VM "%s": missing IPs', uuid);
-        err.details = vm;
-        throw err;
-    }
-
-    rvm.ips = Object.keys(ips).sort();
-
-    if (vm.hasOwnProperty('tags') && !objEmpty(vm.tags)) {
-        rvm.tags = {};
-        for (var t in vm.tags) {
-            rvm.tags[t] = vm.tags[t];
-        }
-    }
-
-    if (vm.hasOwnProperty('owner_uuid')) {
-        // XXX: validate UUID
-        rvm.owner_uuid = vm.owner_uuid;
-    }
-
-    return rvm;
-}
-
-
-module.exports = {
-    ipsFromNICs: ipsFromNICs,
-    createRemoteVM: createRemoteVM
-};
diff --git a/node_modules/fw/man/fwadm.1m.md b/node_modules/fw/man/fwadm.1m.md
deleted file mode 100644
index f37deed..0000000
--- a/node_modules/fw/man/fwadm.1m.md
+++ /dev/null
@@ -1,486 +0,0 @@
-# fwadm(1m) -- Manage SmartOS firewall rules
-
-
-## SYNOPSIS
-
-    fwadm add [-f <file>]                   add firewall rules or remote VMs
-    fwadm delete <rule uuid>                delete a rule
-    fwadm disable <rule uuid>               disable a rule
-    fwadm enable <rule uuid>                enable a rule
-    fwadm get <rule uuid>                   get a rule
-    fwadm list                              list rules
-    fwadm update [-f <file>] <rule uuid>    update firewall rules or data
-    fwadm vms <rule uuid>                   list the UUIDs of VMs affected by a
-                                            rule
-
-    fwadm add-rvm [-f <file>]               add a remote VM
-    fwadm delete-rvm <rvm uuid>             delete a remote VM
-    fwadm get-rvm <rvm uuid>                get a remote VM
-    fwadm list-rvms                         list remote VMs
-    fwadm rvm-rules <rvm uuid>              list rules that apply to a remote VM
-
-    fwadm rules <vm uuid>                   list rules that apply to a VM
-    fwadm start <vm uuid>                   start a VM's firewall
-    fwadm status <vm uuid>                  get the status of a VM's firewall
-    fwadm stats <vm uuid>                   get rule statistics for a VM's
-                                            firewall
-    fwadm stop <vm uuid>                    stop a VM's firewall
-
-    fwadm help [command]                    help on a specific subcommand
-
-
-## DESCRIPTION
-
-The fwadm tool allows you to manage firewall data on a SmartOS system. It
-is primarily used to manage firewall rules and remote VMs.
-
-Firewall rules are JSON objects. They contain a rule written in a
-Domain-Specific Language, as well as other metadata.  See fwrule(5) and
-the "EXAMPLES" section below for rule syntax.
-
-Remote VMs are JSON objects. They represent VMs on other SmartOS hosts.
-The format is similar to the vmadm(1M) format with most properties omitted
-and some simplified properties. See the "REMOTE VMS", "REMOTE VM PROPERTIES"
-and "EXAMPLES" sections below for details.
-
-Firewall rules only apply to VMs that have the firewall_enabled property set
-to true. Adding, updating or deleting firewall rules or remote VMs will reload
-the firewalls of any VMs affected.
-
-
-## OPTIONS
-
-**-h, --help**
-    Print help or subcommand help and exit.
-
-**-v, --verbose**
-    Output verbose diagnostic information. When a command results in an
-    error, output the stack trace for that error.
-
-**-j, --json**
-    Output results or errors as JSON.
-
-
-## SUBCOMMANDS
-
-    The following commands and options are supported:
-
-    fwadm help [command]
-
-        Print general tool help or help on a specific command.
-
-
-    fwadm add -f <file>
-    fwadm add [-e] [--desc <description>] [-g] [-O <owner uuid>] <rule>
-
-        Add firewall rules or remote VMs.  A single rule and its properties can
-        be added using arguments and options, or the -f option can be used to
-        pass a file containing a JSON object with one or many rules and remote
-        VMs to be added. See the "EXAMPLES" section below for details on what to
-        pass in the JSON object.
-
-        Options:
-            --desc <description>    Rule description
-            --dryrun                Output changes to be made, but don't write
-                                    files to disk or reload VM firewalls.
-            -e, --enable            Set the enabled property for the rule.
-                                    Default is false.
-            -f <filename>           Path to file containing JSON payload of
-                                    firewall data to add.
-            -g, --global            Set the global property for the rule.
-            -O, --owner_uuid        Set the owner for the rule.
-            --stdout                Output ipf rule lists for VM firewalls
-                                    that were updated.
-
-        Arguments:
-            <rule>                  Firewall rule, written in the rule DSL.  See
-                                    fwrule(5) for syntax.
-
-        Examples:
-            # Add a disabled rule with an owner by specifying it on the
-            # commandline.
-            fwadm add --owner_uuid=e6c73bd2-fae4-4e0a-af76-2c05d088b066 FROM \
-                 any TO all vms ALLOW tcp PORT 22
-
-            # Add an enabled global rule by specifying it on the commandline.
-            fwadm add -g -e FROM any TO all vms ALLOW tcp PORT 22
-
-            # Add a remote VM and a rule referencing that VM.
-            echo '{
-                "rules": [
-                    {
-                      "enabled": true,
-                      "owner_uuid": "e6c73bd2-fae4-4e0a-af76-2c05d088b066",
-                      "rule": "FROM vm a223bec2-c62b-4fe7-babb-ad4c4d8441bb \
-                           TO all vms ALLOW tcp PORT 22"
-                    }
-                ],
-                "remoteVMs": [
-                    {
-                        "uuid": "5baca016-6dda-11e3-a6f2-730593c54f04",
-                        "owner_uuid": "e6c73bd2-fae4-4e0a-af76-2c05d088b066",
-                        "nics": [ { "ip": "172.29.0.2" } ],
-                        "tags": { "role": "web" }
-                    }
-                ]
-            }' | fwadm add
-            
-
-    fwadm add-rvm -f <file>
-
-        Add a remote VM.
-
-        Options:
-            --dryrun                Output changes to be made, but don't write
-                                    files to disk or reload VM firewalls.
-            --stdout                Output ipf rule lists for VM firewalls
-                                    that were updated.
-
-
-    fwadm delete <rule uuid>
-
-        Delete a firewall rule.
-
-        Options:
-            --dryrun                Output changes to be made, but don't write
-                                    files to disk or reload VM firewalls.
-
-        Arguments:
-            <rule uuid>             Firewall rule UUID
-
-
-    fwadm disable <rule uuid>
-
-        Disable a firewall rule.
-
-        Options:
-            --dryrun                Output changes to be made, but don't write
-                                    files to disk or reload VM firewalls.
-
-        Arguments:
-            <rule uuid>             Firewall rule UUID
-
-
-    fwadm enable <rule uuid>
-
-        Enable a firewall rule.
-
-        Options:
-            --dryrun                Output changes to be made, but don't write
-                                    files to disk or reload VM firewalls.
-
-        Arguments:
-            <rule uuid>             Firewall rule UUID
-
-
-    fwadm get <rule uuid>
-
-        Get a firewall rule.
-
-        Arguments:
-            <rule uuid>             Firewall rule UUID
-
-
-    fwadm list
-
-        List firewall rules.
-
-        Options:
-            -d, --delim             Set the delimiting character for parseable
-                                    output. Default is ":".
-            -j, --json              Output results as JSON.
-            -o, --fields            Rule properties to output.
-            -p, --parseable         Output results in parseable format.
-
-        Examples:
-            # Output rule list in parseable format with the "|" character as a
-            # delimiter.
-            fwadm list -d "|" -p
-
-            # Output only the uuid and rule fields in JSON format
-            fwadm list -j -o uuid,rule
-            
-
-    fwadm update -f <file>
-    fwadm update [-e] [--desc <description>] [-g] [-O <owner uuid>] <rule>
-
-        Update firewall rules or remote VMs.  A single rule and its properties
-        can be updated using arguments, or the -f option can be used to pass a
-        file containing a JSON object with one or many rules and remote VMs to
-        be updated. See the "EXAMPLES" section below for details on what to
-        pass in the JSON object.
-
-        Options:
-            --desc <description>    Rule description
-            --dryrun                Output changes to be made, but don't write
-                                    files to disk or reload VM firewalls.
-            -e, --enable            Set the enabled property for the rule.
-                                    Default is false.
-            -f <filename>           Path to file containing JSON payload of
-                                    firewall data to add.
-            -g, --global            Set the global property for the rule.
-            -O, --owner_uuid        Set the owner for the rule.
-            --stdout                Output ipf rule lists for VM firewalls
-                                    that were updated.
-
-        Arguments:
-            <rule>                  Firewall rule, written in the rule DSL.  See
-                                    fwrule(5) for syntax.
-
-        Examples:
-            # Update a rule by specifying it on the commandline.
-            fwadm update 71bf3c29-bcd3-42a4-b4cb-222585429a70 'FROM (tag www \
-                 OR ip 172.30.0.250) TO tag db ALLOW tcp PORT 5432'
-
-            # Add an IP to a remote VM.
-            echo '{
-                "remoteVMs": [
-                    {
-                        "uuid": "5baca016-6dda-11e3-a6f2-730593c54f04",
-                        "owner_uuid": "e6c73bd2-fae4-4e0a-af76-2c05d088b066",
-                        "ips": [ "172.29.0.2", "172.31.0.2" ],
-                        "tags": { "role": "web" }
-                    }
-                ]
-            }' | fwadm update
-            
-
-    fwadm vms <rule uuid>
-
-        List the UUIDs of VMs affected by a rule.
-
-        Arguments:
-            <rule uuid>             Firewall rule UUID
-
-
-    fwadm delete-rvm <rvm uuid>
-
-        Delete a remote VM.
-
-        Options:
-            --dryrun                Output changes to be made, but don't write
-                                    files to disk or reload VM firewalls.
-
-        Arguments:
-            <rvm uuid>              Remote VM UUID
-
-
-    fwadm get-rvm <rvm uuid>
-
-        Get a remote VM.
-
-        Arguments:
-            <rvm uuid>              Remote VM UUID
-
-
-    fwadm list-rvms
-
-        List remote VMs in JSON format.
-
-
-    fwadm rvm-rules <rvm uuid>
-
-        List rules that apply to a remote VM.
-
-        Arguments:
-            <rvm uuid>              Remote VM UUID
-
-
-    fwadm rules <vm uuid>
-
-        List rules that apply to a VM.
-
-        Arguments:
-            <vm uuid>               VM UUID
-
-
-    fwadm start <vm uuid>
-
-        Start the firewall for a VM.
-
-        Arguments:
-            <vm uuid>               VM UUID
-
-
-    fwadm status [-v] <vm uuid>
-
-        Get the firewall status (running, stopped) for a VM.
-
-        Options:
-            --v, --verbose          Output additional information about the
-                                    firewall
-
-        Arguments:
-            <vm uuid>               VM UUID
-
-
-    fwadm stats <vm uuid>
-
-        Get ipfilter rule statistics for a VM's firewall.
-
-        Arguments:
-            <vm uuid>               VM UUID
-
-
-    fwadm stop <vm uuid>
-
-        Stop the firewall for a VM.
-
-        Arguments:
-            <vm uuid>               VM UUID
-
-
-## REMOTE VMS
-
-    The purpose of remote VMs is to allow VMs on other SmartOS hosts to be
-    included when generating rules.  For example, if the following remote
-    VM from another SmartOS host was added:
-
-    {
-        "uuid": "86abf627-5398-45ee-8e65-8260d3466e3f",
-        "owner_uuid": "e6c73bd2-fae4-4e0a-af76-2c05d088b066",
-        "ips": [ "172.29.0.4" ],
-        "tags": {
-            "role": "bastion"
-        }
-    }
-
-    And the following rule:
-    {
-        "description": "allow ssh from bastion host",
-        "enabled": true,
-        "owner_uuid": "e6c73bd2-fae4-4e0a-af76-2c05d088b066",
-        "rule": "FROM tag role=bastion TO all vms ALLOW tcp PORT 22"
-    }
-
-    
-    The remote VM has the tag role with value bastion, which means that it
-    matches the rule above. All VMs on this host with firewall_enabled set
-    would then allow connections on TCP port 22 from that remote VM.
-
-    This rule would also match, since it has the remote VM's UUID as a target:
-
-    {
-        "description": "block UDP port 5400 to bastion host",
-        "enabled": true,
-        "owner_uuid": "e6c73bd2-fae4-4e0a-af76-2c05d088b066",
-        "rule": "FROM all vms TO vm 86abf627-5398-45ee-8e65-8260d3466e3f \
-             BLOCK udp PORT 54"
-    }
-    
-
-## REMOTE VM PROPERTIES
-
-    Remote VMs are simplified versions of the VM objects used by vmadm(1m).
-    They are also in a JSON format, but only the properties below will be
-    stored and used by fwadm. All other properties will be discarded. The
-    properties used are:
-
-    ips:
-
-        Array of IP addresses for the remote VM. At least one IP from this
-        property or the nics property below must be specified when creating
-        or updating.
-
-    nics:
-
-        Array of nics, as per vmadm(1m). Only the "ip" property of each of
-        these nic objects is required - all other properties will be ignored.
-        This property is used for creation of remote VMs only - it is not
-        stored in the object. IPs from these objects will be added to the ips
-        array. This property is supported so the output of "vmadm get" on one
-        host can be used in the input to "fwadm add" on another host.
-
-    owner_uuid:
-
-        Owner UUID. Only rules with a matching owner_uuid can use IPs for
-        remote VMs with this property set.
-
-    tags:
-
-        vmadm(1m) tags object, mapping tag keys to values.
-
-    uuid (required):
-
-        UUID. This must not be the same as the UUID of any other remote VM or
-        local VM managed by vmadm(1m).
-
-    Note that VMs can be added and updated in this simplified representation,
-    or using the same representation as "vmadm get". This enables the output
-    of "vmadm get" or "vmadm lookup" to be input to the commands listed in the
-    "SUBCOMMANDS" section.
-
-
-## INTERACTION WITH VMADM(1M)
-
-    fwadm relies on properties of VMs from vmadm(1m) in order to generate
-    firewall rules correctly. Therefore, when vmadm is used to create a new
-    VM or update properties on an existing VM that can affect firewall rules,
-    it will update firewall rules through fwadm accordingly.
-
-    As an example, if the following rules are present on a SmartOS host:
-
-    {
-        "description": "block all outgoing SMTP traffic",
-        "enabled": true,
-        "owner_uuid": "e6c73bd2-fae4-4e0a-af76-2c05d088b066",
-        "rule": "FROM tag blocksmtp TO any BLOCK tcp PORT 25"
-    }
-
-    {
-        "description": "allow HTTP and HTTPS traffic",
-        "enabled": true,
-        "owner_uuid": "e6c73bd2-fae4-4e0a-af76-2c05d088b066",
-        "rule": "FROM any TO tag role=webserver ALLOW tcp (PORT 80 AND PORT \
-             443)"
-    }
-
-    And then a VM is created with these parameters:
-
-    {
-        "brand": "joyent",
-        "image_uuid": "7b0b4140-6e98-11e5-b1ae-ff68fe257228",
-        "firewall_enabled": true,
-        "nics": [
-          {
-            "nic_tag": "external",
-            "ip": "10.88.88.59",
-            "netmask": "255.255.255.0",
-            "gateway": "10.88.88.2",
-            "primary": true
-          }
-        ],
-        "owner_uuid": "e6c73bd2-fae4-4e0a-af76-2c05d088b066",
-        "ram": 128,
-        "tags": {
-            "blocksmtp": true
-        },
-        "uuid": "60e90d15-fb48-4bb9-90e6-1e1bb8269d1e"
-    }
-
-    The first rule would be applied to that VM.  If the following vmadm command
-    was then run:
-
-    echo '{ "set_tags": { "role": "webserver" } }' | vmadm update \
-         60e90d15-fb48-4bb9-90e6-1e1bb8269d1e
-
-    The second rule would then be applied to that VM in addition to the first.
-    
-
-## EXIT STATUS
-
-The following exit values are returned:
-
-     0
-         Successful completion.
-
-     1
-         An error occurred.
-
-     2
-         Invalid usage.
-
-
-## SEE ALSO
-
-    vmadm(1m), fwrule(5), ipf(1m), ipfilter(5)
diff --git a/node_modules/fw/man/fwadm.1m.md.in b/node_modules/fw/man/fwadm.1m.md.in
deleted file mode 100644
index cb7eab8..0000000
--- a/node_modules/fw/man/fwadm.1m.md.in
+++ /dev/null
@@ -1,421 +0,0 @@
-# fwadm(1m) -- Manage SmartOS firewall rules
-
-
-## SYNOPSIS
-
-    fwadm add [-f <file>]                   add firewall rules or remote VMs
-    fwadm delete <rule uuid>                delete a rule
-    fwadm disable <rule uuid>               disable a rule
-    fwadm enable <rule uuid>                enable a rule
-    fwadm get <rule uuid>                   get a rule
-    fwadm list                              list rules
-    fwadm update [-f <file>] <rule uuid>    update firewall rules or data
-    fwadm vms <rule uuid>                   list the UUIDs of VMs affected by a
-                                            rule
-
-    fwadm add-rvm [-f <file>]               add a remote VM
-    fwadm delete-rvm <rvm uuid>             delete a remote VM
-    fwadm get-rvm <rvm uuid>                get a remote VM
-    fwadm list-rvms                         list remote VMs
-    fwadm rvm-rules <rvm uuid>              list rules that apply to a remote VM
-
-    fwadm rules <vm uuid>                   list rules that apply to a VM
-    fwadm start <vm uuid>                   start a VM's firewall
-    fwadm status <vm uuid>                  get the status of a VM's firewall
-    fwadm stats <vm uuid>                   get rule statistics for a VM's
-                                            firewall
-    fwadm stop <vm uuid>                    stop a VM's firewall
-
-    fwadm help [command]                    help on a specific subcommand
-
-
-## DESCRIPTION
-
-The fwadm tool allows you to manage firewall data on a SmartOS system. It
-is primarily used to manage firewall rules and remote VMs.
-
-Firewall rules are JSON objects. They contain a rule written in a
-Domain-Specific Language, as well as other metadata.  See fwrule(5) and
-the "EXAMPLES" section below for rule syntax.
-
-Remote VMs are JSON objects. They represent VMs on other SmartOS hosts.
-The format is similar to the vmadm(1M) format with most properties omitted
-and some simplified properties. See the "REMOTE VMS", "REMOTE VM PROPERTIES"
-and "EXAMPLES" sections below for details.
-
-Firewall rules only apply to VMs that have the firewall_enabled property set
-to true. Adding, updating or deleting firewall rules or remote VMs will reload
-the firewalls of any VMs affected.
-
-
-## OPTIONS
-
-**-h, --help**
-    Print help or subcommand help and exit.
-
-**-v, --verbose**
-    Output verbose diagnostic information. When a command results in an
-    error, output the stack trace for that error.
-
-**-j, --json**
-    Output results or errors as JSON.
-
-
-## SUBCOMMANDS
-
-    The following commands and options are supported:
-
-    fwadm help [command]
-
-        Print general tool help or help on a specific command.
-
-
-    fwadm add -f <file>
-    fwadm add [-e] [--desc <description>] [-g] [-O <owner uuid>] <rule>
-
-        Add firewall rules or remote VMs.  A single rule and its properties can
-        be added using arguments and options, or the -f option can be used to
-        pass a file containing a JSON object with one or many rules and remote
-        VMs to be added. See the "EXAMPLES" section below for details on what to
-        pass in the JSON object.
-
-        Options:
-            --desc <description>    Rule description
-            --dryrun                Output changes to be made, but don't write
-                                    files to disk or reload VM firewalls.
-            -e, --enable            Set the enabled property for the rule.
-                                    Default is false.
-            -f <filename>           Path to file containing JSON payload of
-                                    firewall data to add.
-            -g, --global            Set the global property for the rule.
-            -O, --owner_uuid        Set the owner for the rule.
-            --stdout                Output ipf rule lists for VM firewalls
-                                    that were updated.
-
-        Arguments:
-            <rule>                  Firewall rule, written in the rule DSL.  See
-                                    fwrule(5) for syntax.
-
-        Examples:
-            {{#indent_and_wrap}}
-            # Add a disabled rule with an owner by specifying it on the
-            # commandline.
-            {{{fwadm_add_owner}}}
-
-            # Add an enabled global rule by specifying it on the commandline.
-            {{{fwadm_add_global}}}
-
-            # Add a remote VM and a rule referencing that VM.
-            {{{fwadm_add_rvm_and_rule}}}
-            {{/indent_and_wrap}}
-
-
-    fwadm add-rvm -f <file>
-
-        Add a remote VM.
-
-        Options:
-            --dryrun                Output changes to be made, but don't write
-                                    files to disk or reload VM firewalls.
-            --stdout                Output ipf rule lists for VM firewalls
-                                    that were updated.
-
-
-    fwadm delete <rule uuid>
-
-        Delete a firewall rule.
-
-        Options:
-            --dryrun                Output changes to be made, but don't write
-                                    files to disk or reload VM firewalls.
-
-        Arguments:
-            <rule uuid>             Firewall rule UUID
-
-
-    fwadm disable <rule uuid>
-
-        Disable a firewall rule.
-
-        Options:
-            --dryrun                Output changes to be made, but don't write
-                                    files to disk or reload VM firewalls.
-
-        Arguments:
-            <rule uuid>             Firewall rule UUID
-
-
-    fwadm enable <rule uuid>
-
-        Enable a firewall rule.
-
-        Options:
-            --dryrun                Output changes to be made, but don't write
-                                    files to disk or reload VM firewalls.
-
-        Arguments:
-            <rule uuid>             Firewall rule UUID
-
-
-    fwadm get <rule uuid>
-
-        Get a firewall rule.
-
-        Arguments:
-            <rule uuid>             Firewall rule UUID
-
-
-    fwadm list
-
-        List firewall rules.
-
-        Options:
-            -d, --delim             Set the delimiting character for parseable
-                                    output. Default is ":".
-            -j, --json              Output results as JSON.
-            -o, --fields            Rule properties to output.
-            -p, --parseable         Output results in parseable format.
-
-        Examples:
-            {{#indent_and_wrap}}
-            # Output rule list in parseable format with the "|" character as a
-            # delimiter.
-            {{{fwadm_list_parseable}}}
-
-            # Output only the uuid and rule fields in JSON format
-            {{{fwadm_list_json}}}
-            {{/indent_and_wrap}}
-
-
-    fwadm update -f <file>
-    fwadm update [-e] [--desc <description>] [-g] [-O <owner uuid>] <rule>
-
-        Update firewall rules or remote VMs.  A single rule and its properties
-        can be updated using arguments, or the -f option can be used to pass a
-        file containing a JSON object with one or many rules and remote VMs to
-        be updated. See the "EXAMPLES" section below for details on what to
-        pass in the JSON object.
-
-        Options:
-            --desc <description>    Rule description
-            --dryrun                Output changes to be made, but don't write
-                                    files to disk or reload VM firewalls.
-            -e, --enable            Set the enabled property for the rule.
-                                    Default is false.
-            -f <filename>           Path to file containing JSON payload of
-                                    firewall data to add.
-            -g, --global            Set the global property for the rule.
-            -O, --owner_uuid        Set the owner for the rule.
-            --stdout                Output ipf rule lists for VM firewalls
-                                    that were updated.
-
-        Arguments:
-            <rule>                  Firewall rule, written in the rule DSL.  See
-                                    fwrule(5) for syntax.
-
-        Examples:
-            {{#indent_and_wrap}}
-            # Update a rule by specifying it on the commandline.
-            {{{fwadm_update}}}
-
-            # Add an IP to a remote VM.
-            {{{fwadm_update_rvm}}}
-            {{/indent_and_wrap}}
-
-
-    fwadm vms <rule uuid>
-
-        List the UUIDs of VMs affected by a rule.
-
-        Arguments:
-            <rule uuid>             Firewall rule UUID
-
-
-    fwadm delete-rvm <rvm uuid>
-
-        Delete a remote VM.
-
-        Options:
-            --dryrun                Output changes to be made, but don't write
-                                    files to disk or reload VM firewalls.
-
-        Arguments:
-            <rvm uuid>              Remote VM UUID
-
-
-    fwadm get-rvm <rvm uuid>
-
-        Get a remote VM.
-
-        Arguments:
-            <rvm uuid>              Remote VM UUID
-
-
-    fwadm list-rvms
-
-        List remote VMs in JSON format.
-
-
-    fwadm rvm-rules <rvm uuid>
-
-        List rules that apply to a remote VM.
-
-        Arguments:
-            <rvm uuid>              Remote VM UUID
-
-
-    fwadm rules <vm uuid>
-
-        List rules that apply to a VM.
-
-        Arguments:
-            <vm uuid>               VM UUID
-
-
-    fwadm start <vm uuid>
-
-        Start the firewall for a VM.
-
-        Arguments:
-            <vm uuid>               VM UUID
-
-
-    fwadm status [-v] <vm uuid>
-
-        Get the firewall status (running, stopped) for a VM.
-
-        Options:
-            --v, --verbose          Output additional information about the
-                                    firewall
-
-        Arguments:
-            <vm uuid>               VM UUID
-
-
-    fwadm stats <vm uuid>
-
-        Get ipfilter rule statistics for a VM's firewall.
-
-        Arguments:
-            <vm uuid>               VM UUID
-
-
-    fwadm stop <vm uuid>
-
-        Stop the firewall for a VM.
-
-        Arguments:
-            <vm uuid>               VM UUID
-
-
-## REMOTE VMS
-
-    The purpose of remote VMs is to allow VMs on other SmartOS hosts to be
-    included when generating rules.  For example, if the following remote
-    VM from another SmartOS host was added:
-
-    {{#indent_and_wrap}}
-    {{{rvm_rvm1}}}
-
-    And the following rule:
-    {{{rvm_rule1}}}
-
-    {{/indent_and_wrap}}
-
-    The remote VM has the tag role with value bastion, which means that it
-    matches the rule above. All VMs on this host with firewall_enabled set
-    would then allow connections on TCP port 22 from that remote VM.
-
-    This rule would also match, since it has the remote VM's UUID as a target:
-
-    {{#indent_and_wrap}}
-    {{{rvm_rule2}}}
-    {{/indent_and_wrap}}
-
-
-## REMOTE VM PROPERTIES
-
-    Remote VMs are simplified versions of the VM objects used by vmadm(1m).
-    They are also in a JSON format, but only the properties below will be
-    stored and used by fwadm. All other properties will be discarded. The
-    properties used are:
-
-    ips:
-
-        Array of IP addresses for the remote VM. At least one IP from this
-        property or the nics property below must be specified when creating
-        or updating.
-
-    nics:
-
-        Array of nics, as per vmadm(1m). Only the "ip" property of each of
-        these nic objects is required - all other properties will be ignored.
-        This property is used for creation of remote VMs only - it is not
-        stored in the object. IPs from these objects will be added to the ips
-        array. This property is supported so the output of "vmadm get" on one
-        host can be used in the input to "fwadm add" on another host.
-
-    owner_uuid:
-
-        Owner UUID. Only rules with a matching owner_uuid can use IPs for
-        remote VMs with this property set.
-
-    tags:
-
-        vmadm(1m) tags object, mapping tag keys to values.
-
-    uuid (required):
-
-        UUID. This must not be the same as the UUID of any other remote VM or
-        local VM managed by vmadm(1m).
-
-    Note that VMs can be added and updated in this simplified representation,
-    or using the same representation as "vmadm get". This enables the output
-    of "vmadm get" or "vmadm lookup" to be input to the commands listed in the
-    "SUBCOMMANDS" section.
-
-
-## INTERACTION WITH VMADM(1M)
-
-    fwadm relies on properties of VMs from vmadm(1m) in order to generate
-    firewall rules correctly. Therefore, when vmadm is used to create a new
-    VM or update properties on an existing VM that can affect firewall rules,
-    it will update firewall rules through fwadm accordingly.
-
-    As an example, if the following rules are present on a SmartOS host:
-
-    {{#indent_and_wrap}}
-    {{{vmadm_rule1}}}
-
-    {{{vmadm_rule2}}}
-
-    And then a VM is created with these parameters:
-
-    {{{vmadm_vm1}}}
-
-    The first rule would be applied to that VM.  If the following vmadm command
-    was then run:
-
-    {{{vmadm_cmd1}}}
-
-    The second rule would then be applied to that VM in addition to the first.
-    {{/indent_and_wrap}}
-
-
-## EXIT STATUS
-
-The following exit values are returned:
-
-     0
-         Successful completion.
-
-     1
-         An error occurred.
-
-     2
-         Invalid usage.
-
-
-## SEE ALSO
-
-    vmadm(1m), fwrule(5), ipf(1m), ipfilter(5)
diff --git a/node_modules/fw/man/fwrule.5.footer b/node_modules/fw/man/fwrule.5.footer
deleted file mode 100644
index f10b991..0000000
--- a/node_modules/fw/man/fwrule.5.footer
+++ /dev/null
@@ -1,4 +0,0 @@
-
-## SEE ALSO
-
-    fwadm(1m), vmadm(1m), ipf(1m), ipfilter(5)
diff --git a/node_modules/fw/man/fwrule.5.header b/node_modules/fw/man/fwrule.5.header
deleted file mode 100644
index a87b463..0000000
--- a/node_modules/fw/man/fwrule.5.header
+++ /dev/null
@@ -1,3 +0,0 @@
-# fwrule(5) -- SmartOS fwadm firewall rule syntax
-
-
diff --git a/node_modules/fw/man/fwrule.5.md b/node_modules/fw/man/fwrule.5.md
deleted file mode 100644
index 4b38f11..0000000
--- a/node_modules/fw/man/fwrule.5.md
+++ /dev/null
@@ -1,326 +0,0 @@
-# fwrule(5) -- SmartOS fwadm firewall rule syntax
-
-
-## OVERVIEW
-
-The base policy for a VM with its firewall enabled is:
-
-* block all inbound traffic
-* allow all outbound traffic
-
-All firewall rules applied to a VM are applied on top of those defaults.
-Firewall rules can affect one VM (using the vm target) or many (using the
-tag or all vms target types).
-
-Adding and updating rules takes effect immediately.  Adding or removing
-tags on a VM causes rules that apply to those tags to be added or removed
-immediately.
-
-In the case of two rules that affect the same VM and port, the rule that
-goes counter to the default policy takes precedence.  This means:
-
-* If you have an incoming BLOCK and an incoming ALLOW rule for the
-  same VM and port, the ALLOW will override.
-* If you have an outgoing BLOCK and an outgoing ALLOW rule for the
-  same VM and port, the BLOCK will override.
-
-
-## RULE PAYLOAD
-
-Rules are created and updated using a JSON payload as in this example:
-
-    {
-        "rule": "FROM any TO all vms ALLOW tcp port 22",
-        "enabled": true,
-        "owner_uuid": "5c3ea269-75b8-42fa-badc-956684fb4d4e"
-    }
-
-The properties of this payload are:
-
-* **rule** (required): the firewall rule.  See the Rule Syntax section below
-  for the syntax.
-* **enabled** (boolean, optional): If set to true, the rule will be applied
-  to VMs.  If set to false, the rule will be added but not applied.
-* **global** (boolean, optional): If set, the rule will be applied to all VMs
-  in the datacenter, regardless of owner.
-* **owner_uuid** (UUID, optional): If set, restricts the set of VMs that
-  the rule can be applied to VMs owned by this UUID.
-
-Note that only one of **owner_uuid** or **global** can be set at a time for
-a rule.
-
-
-## RULE SYNTAX
-
-Firewall rules are in the following format:
-
-    FROM <from targets> TO <to targets> <action> <protocol> \
-         <ports or types>
-    
-The parameters are the following:
-
-**from targets** and **to targets** can be any of the following types
-(see the Target Types section below):
-
-* vm <uuid>
-* ip <IPv4 or IPv6 address>
-* subnet <subnet CIDR>
-* tag <tag name>
-* tag <tag name>=<tag value>
-* a target list of up to 32 of the above
-* all vms
-* any
-
-**action** can be one of (see the Actions section below):
-
-* ALLOW
-* BLOCK
-
-**protocol** can be one of (see the Protocols section below):
-
-* tcp
-* udp
-* icmp
-* icmp6
-
-**ports** or **types** can be one of (see the Ports section below):
-
-* port <port number> (if protocol is tcp or udp)
-* ports <port numbers and ranges> (if protocol is tcp or udp)
-* type <ICMP type> (if protocol is icmp)
-* type <ICMP type> code <ICMP code> (if protocol is icmp)
-
-
-The limits for the parameters are:
-
-* 24 from targets
-* 24 to targets
-* 8 ports or types
-
-
-## TARGET TYPES
-
-### vm
-
-    vm <uuid>
-
-Targets the VM with that UUID.
-
-**Example:**
-
-    FROM any to vm 04128191-d2cb-43fc-a970-e4deefe970d8 ALLOW tcp port 80
-
-Allows HTTP traffic from any host to VM 04128...
-
-### ip
-
-    ip <IP address>
-
-Targets the specified IPv4 or IPv6 address.
-
-**Example:**
-
-    FROM all vms to (ip 10.2.0.1 OR ip fd22::1234) BLOCK tcp port 25
-
-Blocks SMTP traffic to that IP.
-
-### subnet
-
-    subnet <subnet CIDR>
-
-Targets the specified IPv4 or IPv6 subnet range.
-
-**Example:**
-
-    FROM subnet 10.8.0.0/16 TO vm 0f570678-c007-4610-a2c0-bbfcaab9f4e6 ALLOW \
-         tcp port 443
-    
-Allows HTTPS traffic from a private IPv4 /16 to the specified VM.
-
-**Example:**
-
-    FROM subnet fd22::/64 TO vm 0f570678-c007-4610-a2c0-bbfcaab9f4e6 ALLOW \
-         tcp port 443
-    
-Allows HTTPS traffic from a private IPv6 /64 to the specified VM.
-
-### tag
-
-    tag <name>
-    tag <name> = <value>
-    tag "<name with spaces>" = "<value with spaces>"
-
-Targets all VMs with the specified tag, or all VMs with the specified tag
-and value.  Both tag name and value can be quoted if they contain spaces.
-
-**Examples:**
-
-    FROM all vms TO tag syslog ALLOW udp port 514
-
-Allows syslog traffic from all VMs to syslog servers.
-
-    FROM tag role = db TO tag role = www ALLOW tcp port 5432
-
-Allows database traffic from databases to webservers. All other VMs with
-role tags (role = staging, for example) will not be affected by this rule.
-
-    FROM all vms TO tag "VM type" = "LDAP server" ALLOW tcp PORT 389
-
-Allow LDAP access from all VMs to LDAP servers.
-
-### all vms
-
-    all vms
-
-Targets all VMs.
-
-**Example:**
-
-    FROM all vms TO all vms ALLOW tcp port 22
-
-Allows ssh traffic between all VMs.
-
-### any
-
-    any
-
-Targets any host (any IPv4 address).
-
-**Example:**
-
-    FROM any TO all vms ALLOW tcp port 80
-
-Allows HTTP traffic from any IP to all VMs.
-
-### target list
-
-    ( <target> OR <target> OR ... )
-
-The vm, ip, subnet and tag target types can be combined into a list surrounded
-by parentheses and joined by OR.
-
-**Example:**
-
-    FROM (vm 163dcedb-828d-43c9-b076-625423250ee2 OR tag db) TO (subnet \
-         10.2.2.0/24 OR ip 10.3.0.1) BLOCK tcp port 443
-    
-Blocks HTTPS traffic to an internal subnet and IP.
-
-
-## ACTIONS
-
-    ALLOW
-    BLOCK
-
-Actions can be one of ALLOW or BLOCK.  Note that certain combinations of
-actions and directions will essentially have no effect on the behaviour
-of a VM's firewall.  For example:
-
-    FROM any TO all vms BLOCK tcp port 143
-
-Since the default rule set blocks all incoming ports, this rule doesn't
-really have an effect on the VMs.  Another example:
-
-    FROM all vms TO any ALLOW tcp port 25
-
-Since the default policy allows all outbound traffic, this rule doesn't
-have an effect.
-
-
-## PROTOCOLS
-
-    tcp
-    udp
-    icmp
-    icmp6
-
-The protocol can be one of tcp, udp or icmp(6). The protocol dictates whether
-ports or types can be used (see the Ports section below).
-
-
-## PORTS
-
-    port <port number>
-    ( port <port number> AND port <port number> ... )
-    ports <port number or range>
-    ports <port number or range>, <port number or range>, ...
-    type <icmp type>
-    type <icmp type> code <icmp code>
-    ( type <icmp type> AND type <icmp type> code <icmp code> AND ... )
-
-For TCP and UDP, this specifies the port numbers that the rule applies to.
-Port numbers must be between 1 and 65535, inclusive. Ranges are written as two
-port numbers separated by a - (hyphen), with the lower number coming first, with
-optional spaces around the hyphen. Port ranges are inclusive, so writing the
-range "20 - 22" would cause the rule to apply to the ports 20, 21 and 22.
-
-For ICMP, this specifies the ICMP type and optional code that the rule
-applies to.  Types and codes must be between 0 and 255, inclusive.
-
-**Examples:**
-
-    FROM tag www TO any ALLOW tcp (port 80 AND port 443)
-
-Allows HTTP and HTTPS traffic from any IP to all webservers.
-
-    FROM tag www TO any ALLOW tcp ports 80, 443, 8000-8100
-
-Allows traffic on HTTP, HTTPS and common alternative HTTP ports from any IP to
-all webservers.
-
-    FROM any TO all vms ALLOW icmp TYPE 8 CODE 0
-
-Allows pinging all VMs. The IPv6 equivalent would be:
-
-    FROM any TO all vms ALLOW icmp6 TYPE 128 CODE 0
-
-And to block outgoing replies:
-
-    FROM all vms TO any BLOCK icmp TYPE 0
-    FROM all vms TO any BLOCK icmp6 TYPE 129
-
-
-## EXAMPLES
-
-    FROM all vms TO tag syslog ALLOW udp port 514
-
-Allows syslog traffic from all VMs to syslog servers.
-
-    FROM tag role = db TO tag role = www ALLOW tcp port 5432
-
-Allows database traffic from databases to webservers.
-
-    FROM all vms TO all vms ALLOW tcp port 22
-
-Allows ssh traffic between all VMs.
-
-    FROM any TO all vms ALLOW tcp port 80
-
-Allow HTTP traffic from any host to all VMs.
-
-
-## ERROR MESSAGES
-
-This section explains error messages.
-
-### rule does not affect VMs
-
-The rule you're trying to create doesn't contain any targets that will
-actually cause rules to be applied to VMs.  Targets that will cause rules
-to be applied are:
-
-* tag
-* vm
-* all vms
-
-Some examples of rules that would cause this message include:
-
-    FROM any TO any ALLOW tcp port 22
-
-    FROM ip 192.168.1.3 TO subnet 192.168.1.0/24 ALLOW tcp port 22
-
-
-
-## SEE ALSO
-
-    fwadm(1m), vmadm(1m), ipf(1m), ipfilter(5)
diff --git a/node_modules/fw/node_modules/assert-plus/README.md b/node_modules/fw/node_modules/assert-plus/README.md
deleted file mode 100644
index c0c3a53..0000000
--- a/node_modules/fw/node_modules/assert-plus/README.md
+++ /dev/null
@@ -1,126 +0,0 @@
-# node-assert-plus
-
-This library is a super small wrapper over node's assert module that has two
-things: (1) the ability to disable assertions with the environment variable
-NODE_NDEBUG, and (2) some API wrappers for argument testing.  Like
-`assert.string(myArg, 'myArg')`.  As a simple example, most of my code looks
-like this:
-
-    var assert = require('assert-plus');
-
-    function fooAccount(options, callback) {
-	    assert.object(options, 'options');
-		assert.number(options.id, 'options.id);
-		assert.bool(options.isManager, 'options.isManager');
-		assert.string(options.name, 'options.name');
-		assert.arrayOfString(options.email, 'options.email');
-		assert.func(callback, 'callback');
-
-        // Do stuff
-		callback(null, {});
-    }
-
-# API
-
-All methods that *aren't* part of node's core assert API are simply assumed to
-take an argument, and then a string 'name' that's not a message; `AssertionError`
-will be thrown if the assertion fails with a message like:
-
-    AssertionError: foo (string) is required
-	at test (/home/mark/work/foo/foo.js:3:9)
-	at Object.<anonymous> (/home/mark/work/foo/foo.js:15:1)
-	at Module._compile (module.js:446:26)
-	at Object..js (module.js:464:10)
-	at Module.load (module.js:353:31)
-	at Function._load (module.js:311:12)
-	at Array.0 (module.js:484:10)
-	at EventEmitter._tickCallback (node.js:190:38)
-
-from:
-
-    function test(foo) {
-	    assert.string(foo, 'foo');
-    }
-
-There you go.  You can check that arrays are of a homogenous type with `Arrayof$Type`:
-
-    function test(foo) {
-	    assert.arrayOfString(foo, 'foo');
-    }
-
-You can assert IFF an argument is not `undefined` (i.e., an optional arg):
-
-    assert.optionalString(foo, 'foo');
-
-Lastly, you can opt-out of assertion checking altogether by setting the
-environment variable `NODE_NDEBUG=1`.  This is pseudo-useful if you have
-lots of assertions, and don't want to pay `typeof ()` taxes to v8 in
-production.
-
-The complete list of APIs is:
-
-* assert.bool
-* assert.buffer
-* assert.func
-* assert.number
-* assert.object
-* assert.string
-* assert.arrayOfBool
-* assert.arrayOfFunc
-* assert.arrayOfNumber
-* assert.arrayOfObject
-* assert.arrayOfString
-* assert.optionalBool
-* assert.optionalBuffer
-* assert.optionalFunc
-* assert.optionalNumber
-* assert.optionalObject
-* assert.optionalString
-* assert.optionalArrayOfBool
-* assert.optionalArrayOfFunc
-* assert.optionalArrayOfNumber
-* assert.optionalArrayOfObject
-* assert.optionalArrayOfString
-* assert.AssertionError
-* assert.fail
-* assert.ok
-* assert.equal
-* assert.notEqual
-* assert.deepEqual
-* assert.notDeepEqual
-* assert.strictEqual
-* assert.notStrictEqual
-* assert.throws
-* assert.doesNotThrow
-* assert.ifError
-
-# Installation
-
-    npm install assert-plus
-
-## License
-
-The MIT License (MIT)
-Copyright (c) 2012 Mark Cavage
-
-Permission is hereby granted, free of charge, to any person obtaining a copy of
-this software and associated documentation files (the "Software"), to deal in
-the Software without restriction, including without limitation the rights to
-use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
-the Software, and to permit persons to whom the Software is furnished to do so,
-subject to the following conditions:
-
-The above copyright notice and this permission notice shall be included in all
-copies or substantial portions of the Software.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-SOFTWARE.
-
-## Bugs
-
-See <https://github.com/mcavage/node-assert-plus/issues>.
diff --git a/node_modules/fw/node_modules/assert-plus/index.js b/node_modules/fw/node_modules/assert-plus/index.js
deleted file mode 100644
index 70583f1..0000000
--- a/node_modules/fw/node_modules/assert-plus/index.js
+++ /dev/null
@@ -1,196 +0,0 @@
-// Copyright (c) 2012, Mark Cavage. All rights reserved.
-
-var assert = require('assert');
-var Stream = require('stream').Stream;
-var util = require('util');
-
-
-
-///--- Globals
-
-var NDEBUG = process.env.NODE_NDEBUG || false;
-
-
-
-///--- Messages
-
-var ARRAY_TYPE_REQUIRED = '%s ([%s]) required';
-var TYPE_REQUIRED = '%s (%s) is required';
-
-
-
-///--- Internal
-
-function capitalize(str) {
-        return (str.charAt(0).toUpperCase() + str.slice(1));
-}
-
-function uncapitalize(str) {
-        return (str.charAt(0).toLowerCase() + str.slice(1));
-}
-
-function _() {
-        return (util.format.apply(util, arguments));
-}
-
-
-function _assert(arg, type, name, stackFunc) {
-        if (!NDEBUG) {
-                name = name || type;
-                stackFunc = stackFunc || _assert.caller;
-                var t = typeof (arg);
-
-                if (t !== type) {
-                        throw new assert.AssertionError({
-                                message: _(TYPE_REQUIRED, name, type),
-                                actual: t,
-                                expected: type,
-                                operator: '===',
-                                stackStartFunction: stackFunc
-                        });
-                }
-        }
-}
-
-
-
-///--- API
-
-function array(arr, type, name) {
-        if (!NDEBUG) {
-                name = name || type;
-
-                if (!Array.isArray(arr)) {
-                        throw new assert.AssertionError({
-                                message: _(ARRAY_TYPE_REQUIRED, name, type),
-                                actual: typeof (arr),
-                                expected: 'array',
-                                operator: 'Array.isArray',
-                                stackStartFunction: array.caller
-                        });
-                }
-
-                for (var i = 0; i < arr.length; i++) {
-                        _assert(arr[i], type, name, array);
-                }
-        }
-}
-
-
-function bool(arg, name) {
-        _assert(arg, 'boolean', name, bool);
-}
-
-
-function buffer(arg, name) {
-        if (!Buffer.isBuffer(arg)) {
-                throw new assert.AssertionError({
-                        message: _(TYPE_REQUIRED, name, type),
-                        actual: typeof (arg),
-                        expected: 'buffer',
-                        operator: 'Buffer.isBuffer',
-                        stackStartFunction: buffer
-                });
-        }
-}
-
-
-function func(arg, name) {
-        _assert(arg, 'function', name);
-}
-
-
-function number(arg, name) {
-        _assert(arg, 'number', name);
-}
-
-
-function object(arg, name) {
-        _assert(arg, 'object', name);
-}
-
-
-function stream(arg, name) {
-        if (!(arg instanceof Stream)) {
-                throw new assert.AssertionError({
-                        message: _(TYPE_REQUIRED, name, type),
-                        actual: typeof (arg),
-                        expected: 'Stream',
-                        operator: 'instanceof',
-                        stackStartFunction: buffer
-                });
-        }
-}
-
-
-function string(arg, name) {
-        _assert(arg, 'string', name);
-}
-
-
-
-///--- Exports
-
-module.exports = {
-        bool: bool,
-        buffer: buffer,
-        func: func,
-        number: number,
-        object: object,
-        stream: stream,
-        string: string
-};
-
-
-Object.keys(module.exports).forEach(function (k) {
-        if (k === 'buffer')
-                return;
-
-        var name = 'arrayOf' + capitalize(k);
-
-        if (k === 'bool')
-                k = 'boolean';
-        if (k === 'func')
-                k = 'function';
-        module.exports[name] = function (arg, name) {
-                array(arg, k, name);
-        };
-});
-
-Object.keys(module.exports).forEach(function (k) {
-        var _name = 'optional' + capitalize(k);
-        var s = uncapitalize(k.replace('arrayOf', ''));
-        if (s === 'bool')
-                s = 'boolean';
-        if (s === 'func')
-                s = 'function';
-
-        if (k.indexOf('arrayOf') !== -1) {
-          module.exports[_name] = function (arg, name) {
-                  if (!NDEBUG && arg !== undefined) {
-                          array(arg, s, name);
-                  }
-          };
-        } else {
-          module.exports[_name] = function (arg, name) {
-                  if (!NDEBUG && arg !== undefined) {
-                          _assert(arg, s, name);
-                  }
-          };
-        }
-});
-
-
-// Reexport built-in assertions
-Object.keys(assert).forEach(function (k) {
-        if (k === 'AssertionError') {
-                module.exports[k] = assert[k];
-                return;
-        }
-
-        module.exports[k] = function () {
-                if (!NDEBUG) {
-                        assert[k].apply(assert[k], arguments);
-                }
-        };
-});
diff --git a/node_modules/fw/node_modules/carrier/LICENSE b/node_modules/fw/node_modules/carrier/LICENSE
deleted file mode 100644
index f12c32d..0000000
--- a/node_modules/fw/node_modules/carrier/LICENSE
+++ /dev/null
@@ -1,18 +0,0 @@
-Copyright 2010 Pedro Teixeira. All rights reserved.
-Permission is hereby granted, free of charge, to any person obtaining a copy
-of this software and associated documentation files (the "Software"), to
-deal in the Software without restriction, including without limitation the
-rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
-sell copies of the Software, and to permit persons to whom the Software is
-furnished to do so, subject to the following conditions:
-
-The above copyright notice and this permission notice shall be included in
-all copies or substantial portions of the Software.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
-FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
-IN THE SOFTWARE.
\ No newline at end of file
diff --git a/node_modules/fw/node_modules/carrier/index.js b/node_modules/fw/node_modules/carrier/index.js
deleted file mode 100644
index 0497f76..0000000
--- a/node_modules/fw/node_modules/carrier/index.js
+++ /dev/null
@@ -1,45 +0,0 @@
-var util    = require('util'),
-    events = require('events');
-
-function Carrier(reader, listener, encoding, separator) {
-  var self = this;
-  
-  self.reader = reader;
-
-  if (!separator) {
-    separator = /\r?\n/;
-  }
-
-  if (listener) {
-    self.addListener('line', listener);
-  }
-  
-  var buffer = '';
-  
-  reader.setEncoding(encoding || 'utf8');
-  reader.on('data', function(data) {
-    var lines = (buffer + data).split(separator);
-    buffer = lines.pop();
-
-    lines.forEach(function(line, index) {
-      self.emit('line', line);
-    });
-  });
-  
-  var ender = function() {
-    if (buffer.length > 0) {
-      self.emit('line', buffer);
-      buffer = '';
-    }
-    self.emit('end');
-  }
-  
-  reader.on('end', ender);
-}
-
-util.inherits(Carrier, events.EventEmitter);
-
-exports.carry = function(reader, listener, encoding, separator) {
-  return new Carrier(reader, listener, encoding, separator);
-}
-
diff --git a/node_modules/fw/node_modules/clone/LICENSE b/node_modules/fw/node_modules/clone/LICENSE
deleted file mode 100644
index b797b56..0000000
--- a/node_modules/fw/node_modules/clone/LICENSE
+++ /dev/null
@@ -1,18 +0,0 @@
-Copyright © 2011-2012 Paul Vorbach
-
-Permission is hereby granted, free of charge, to any person obtaining a copy of
-this software and associated documentation files (the “Software”), to deal in
-the Software without restriction, including without limitation the rights to
-use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
-the Software, and to permit persons to whom the Software is furnished to do so,
-subject to the following conditions:
-
-The above copyright notice and this permission notice shall be included in all
-copies or substantial portions of the Software.
-
-THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, OUT OF OR IN CONNECTION WITH THE
-SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
diff --git a/node_modules/fw/node_modules/clone/clonePrototype.js b/node_modules/fw/node_modules/clone/clonePrototype.js
deleted file mode 100644
index 9288c4d..0000000
--- a/node_modules/fw/node_modules/clone/clonePrototype.js
+++ /dev/null
@@ -1,17 +0,0 @@
-/**
- * Simple flat clone using prototype, accepts only objects, usefull for property
- * override on FLAT configuration object (no nested props).
- *
- * USE WITH CAUTION! This may not behave as you wish if you do not know how this
- * works.
- */
-function clonePrototype(parent) {
-  if (parent === null)
-    return null;
-
-  var ctor = function () {};
-  ctor.prototype = parent;
-  return new ctor();
-}
-
-module.exports = clonePrototype;
diff --git a/node_modules/fw/node_modules/clone/index.js b/node_modules/fw/node_modules/clone/index.js
deleted file mode 100644
index 71d4699..0000000
--- a/node_modules/fw/node_modules/clone/index.js
+++ /dev/null
@@ -1,112 +0,0 @@
-var util = require('util');
-
-module.exports = clone;
-
-/**
- * Clones (copies) an Object using deep copying.
- *
- * This function supports circular references by default, but if you are certain
- * there are no circular references in your object, you can save some CPU time
- * by calling clone(obj, false).
- *
- * Caution: if `circular` is false and `parent` contains circular references,
- * your program may enter an infinite loop and crash.
- *
- * @param `parent` - the object to be cloned
- * @param `circular` - set to true if the object to be cloned may contain
- *    circular references. (optional - true by default)
-*/
-function clone(parent, circular) {
-  if (typeof circular == 'undefined')
-    circular = true;
-  var i;
-  if (circular) {
-    var circularParent = {};
-    var circularResolved = {};
-    var circularReplace = [];
-    function _clone(parent, context, child, cIndex) {
-      var i; // Use local context within this function
-      // Deep clone all properties of parent into child
-      if (typeof parent == 'object') {
-        if (parent == null)
-          return parent;
-        // Check for circular references
-        for(i in circularParent)
-          if (circularParent[i] === parent) {
-            // We found a circular reference
-            circularReplace.push({'resolveTo': i, 'child': child, 'i': cIndex});
-            return null; //Just return null for now...
-            // we will resolve circular references later
-          }
-
-        // Add to list of all parent objects
-        circularParent[context] = parent;
-        // Now continue cloning...
-        if (util.isArray(parent)) {
-          child = [];
-          for(i in parent)
-            child[i] = _clone(parent[i], context + '[' + i + ']', child, i);
-        }
-        else if (util.isDate(parent))
-          child = new Date(parent.getTime());
-        else if (util.isRegExp(parent))
-          child = new RegExp(parent.source);
-        else {
-          child = {};
-
-          // Also copy prototype over to new cloned object
-          child.__proto__ = parent.__proto__;
-          for(i in parent)
-            child[i] = _clone(parent[i], context + '[' + i + ']', child, i);
-        }
-
-        // Add to list of all cloned objects
-        circularResolved[context] = child;
-      }
-      else
-        child = parent; //Just a simple shallow copy will do
-      return child;
-    }
-
-    var cloned = _clone(parent, '*');
-
-    // Now this object has been cloned. Let's check to see if there are any
-    // circular references for it
-    for(i in circularReplace) {
-      var c = circularReplace[i];
-      if (c && c.child && c.i in c.child) {
-        c.child[c.i] = circularResolved[c.resolveTo];
-      }
-    }
-    return cloned;
-  }
-  else {
-    // Deep clone all properties of parent into child
-    var child;
-    if (typeof parent == 'object') {
-      if (parent == null)
-        return parent;
-      if (parent.constructor.name === 'Array') {
-        child = [];
-        for(i in parent)
-          child[i] = clone(parent[i], circular);
-      }
-      else if (util.isDate(parent))
-        child = new Date(parent.getTime() );
-      else if (util.isRegExp(parent))
-        child = new RegExp(parent.source);
-      else {
-        child = {};
-        child.__proto__ = parent.__proto__;
-        for(i in parent)
-          child[i] = clone(parent[i], circular);
-      }
-    }
-    else
-      child = parent; // Just a simple shallow clone will do
-    return child;
-  }
-}
-
-// see: clonePrototype.js
-clone.clonePrototype = require('./clonePrototype.js');
diff --git a/node_modules/fw/node_modules/cmdln/LICENSE.txt b/node_modules/fw/node_modules/cmdln/LICENSE.txt
deleted file mode 100644
index 54706c6..0000000
--- a/node_modules/fw/node_modules/cmdln/LICENSE.txt
+++ /dev/null
@@ -1,24 +0,0 @@
-# This is the MIT license
-
-Copyright (c) 2013 Trent Mick. All rights reserved.
-Copyright (c) 2013 Joyent Inc. All rights reserved.
-
-Permission is hereby granted, free of charge, to any person obtaining a
-copy of this software and associated documentation files (the
-"Software"), to deal in the Software without restriction, including
-without limitation the rights to use, copy, modify, merge, publish,
-distribute, sublicense, and/or sell copies of the Software, and to
-permit persons to whom the Software is furnished to do so, subject to
-the following conditions:
-
-The above copyright notice and this permission notice shall be included
-in all copies or substantial portions of the Software.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
-OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
-IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
-CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
-TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
-SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
diff --git a/node_modules/fw/node_modules/cmdln/index.js b/node_modules/fw/node_modules/cmdln/index.js
deleted file mode 100644
index 5a6e281..0000000
--- a/node_modules/fw/node_modules/cmdln/index.js
+++ /dev/null
@@ -1,442 +0,0 @@
-/*
- * Copyright (c) 2013, Trent Mick. All rights reserved.
- * Copyright (c) 2013, Joyent, Inc. All rights reserved.
- */
-
-var DEBUG = false;
-if (DEBUG) {
-    debug = console.warn;
-} else {
-    debug = function () {};
-}
-
-var util = require('util'),
-    format = util.format;
-var p = console.warn;
-var child_process = require('child_process'),
-    spawn = child_process.spawn,
-    exec = child_process.exec;
-var os = require('os');
-var path = require('path');
-var fs = require('fs');
-
-var assert = require('assert-plus');
-var WError = require('verror').WError;
-var dashdash = require('dashdash');
-var sprintf = require('extsprintf').sprintf;
-
-
-// ---- globals
-
-var DEFAULT_OPTIONS = [
-    {
-        names: ['help', 'h'],
-        help: 'Show this help message and exit.',
-        type: 'bool'
-    }
-];
-
-
-
-// ---- internal support stuff
-
-function space(n) {
-    var s = '';
-    for (var i = 0; i < n; i++) {
-        s += ' ';
-    }
-    return s;
-}
-
-function objCopy(obj) {
-    var copy = {};
-    Object.keys(obj).forEach(function (k) {
-        copy[k] = obj[k];
-    });
-    return copy;
-}
-
-
-// ---- Errors
-
-/**
- * Base CmdlnError. Instances (including derived errors) have these attributes:
- *
- * - `message` {String} All errors will have a message.
- * - `code` {String} A CamelCase code string for this type of error. E.g.
- *   'Cmdln' (generic), 'IllegalOption', etc.
- * - `cause` {Error} Optional. An underlying cause error.
- */
-function CmdlnError(options) {
-    assert.object(options, 'options');
-    assert.string(options.message, 'options.message');
-    assert.optionalString(options.code, 'options.code');
-    if (!options.code) options.code = 'Cmdln';
-    assert.optionalObject(options.cause, 'options.cause');
-    var self = this;
-
-    var args = [];
-    if (options.cause) args.push(options.cause);
-    args.push(options.message);
-    WError.apply(this, args);
-
-    var extra = Object.keys(options).filter(
-        function (k) { return ['cause', 'message'].indexOf(k) === -1; });
-    extra.forEach(function (k) {
-        self[k] = options[k];
-    });
-}
-util.inherits(CmdlnError, WError);
-
-function OptionError(cause, subcmd) {
-    assert.object(cause, 'cause');
-    assert.optionalString(subcmd, 'subcmd');
-    CmdlnError.call(this, {
-        cause: cause,
-        message: cause.message,
-        code: 'Option',
-        exitStatus: 1,
-        subcmd: subcmd
-    });
-}
-util.inherits(OptionError, CmdlnError);
-
-function UnknownCommandError(cause, command) {
-    if (command === undefined) {
-        command = cause;
-        cause = undefined;
-    }
-    assert.string(command);
-    CmdlnError.call(this, {
-        cause: cause,
-        message: sprintf('unknown command: "%s"', command),
-        code: 'UnknownCommand',
-        exitStatus: 1
-    });
-}
-util.inherits(UnknownCommandError, CmdlnError);
-
-
-
-// ---- Cmdln object
-
-/**
- * Create a command line tool.
- *
- * @param config {Object} All keys are optional unless otherwise stated
- *      - @param name {String} Tool name. Defaults to lowercase'd constructor
- *        name.
- *      - @param desc {String} Description string to include at the top of
- *        usage information.
- *      - @param helpOpts {Object} Help output formatting options. These
- *        are the same formatting options as for `dashdash.Parser.help`:
- *        indent, maxCol, helpCol, minHelpCol, maxHelpCol (TODO:doc).
- *      - @param options {Array} Custom options (in the format used by
- *        [dashdash](https://github.com/trentm/node-dashdash)). If not
- *        specified, then it defaults to a single -h/--help option.
- *        If custom options are provided, you will often want to
- *        override the base `init(opts, args, callback)` to act on those
- *        options after being parsed.
- *
- * XXX hooks for adding help ? instead of automatic?
- *      - @param helpCmd {Boolean} Whether to include the `help` subcommand.
- *        Default true.
- *      - XXX take optional bunyan logger
- */
-function Cmdln(config) {
-    var self = this;
-    assert.optionalObject(config, 'config');
-    config = config || {};
-    assert.optionalString(config.name, 'config.name')
-    assert.optionalString(config.desc, 'config.desc')
-    assert.optionalArrayOfObject(config.options, 'config.options');
-    assert.optionalObject(config.helpOpts, 'config.helpOpts')
-
-    this.name = config.name || this.constructor.name.toLowerCase();
-    this.desc = config.desc;
-    this.options = config.options || DEFAULT_OPTIONS;
-    this.helpOpts = config.helpOpts || {};
-    if (!this.helpOpts.indent)
-        this.helpOpts.indent = space(4);
-    else if (typeof (this.helpOpts.indent) === 'number')
-        this.helpOpts.indent = space(this.helpOpts.indent);
-    if (!this.helpOpts.maxCol) this.helpOpts.maxCol = 80;
-    if (!this.helpOpts.minHelpCol) this.helpOpts.minHelpCol = 20;
-    if (!this.helpOpts.maxHelpCol) this.helpOpts.maxHelpCol = 40;
-
-    // Find the tree of constructors (typically just this and the Cmdln
-    // super class) on who's prototype to look for "do_*" and "help_*"
-    // methods.
-    var prototypes = [];
-    var ctor = this.constructor;
-    while (ctor) {
-        prototypes.push(ctor.prototype);
-        ctor = ctor.super_; // presuming `util.inherits` usage
-    }
-    prototypes.reverse();
-
-    // Load subcmds (do_* methods) and aliases (`do_*.aliases`).
-    this.subcmdOrder = [];
-    this.subcmds = {};
-    this.aliases = {};
-    prototypes.forEach(function (proto) {
-        Object.keys(proto)
-            .filter(function (funcname) { return /^do_/.test(funcname); })
-            .forEach(function (funcname) {
-                var name = funcname.slice(3);
-                var func = proto[funcname];
-                self.subcmds[name] = func;
-                self.subcmdOrder.push(name);
-                self.aliases[name] = name;
-                (func.aliases || []).forEach(function (alias) {
-                    self.aliases[alias] = name;
-                });
-            });
-    });
-    // p('subcmdOrder:', this.subcmdOrder);
-    // p('subcmds: ', this.subcmds);
-    // p('aliases: ', this.aliases);
-}
-
-
-/**
- * Cmdln mainline.
- *
- * @param argv {Array}
- * @param callback {Function} `function (err)`
- */
-Cmdln.prototype.main = function main(argv, callback) {
-    var self = this;
-    try {
-        this.optParser = new dashdash.Parser(
-            {options: this.options, interspersed: false});
-        this.opts = this.optParser.parse(argv);
-    } catch (e) {
-        callback(new OptionError(e));
-    }
-    var args = this.opts._args;
-
-    debug('-> init(%j, %j)', this.opts, args);
-    self.init(this.opts, args, function (initErr) {
-        debug('<- init(%s)', initErr)
-        if (initErr) {
-            callback(initErr);
-            return;
-        } else if (initErr === false) {
-            //XXX How to handle non-zero exit here? Special error?
-            //    StopProcessingError?
-            callback();
-            return
-        }
-
-        if (args.length === 0) {
-            self.printHelp(function (helpErr) { callback(helpErr); });
-            return;
-        }
-
-        var subcmdArgv = argv.slice(0, 2).concat(args);
-        var subcmd = args.shift();
-        try {
-            debug('-> dispatch(%j, %j)', subcmd, subcmdArgv);
-            self.dispatch(subcmd, subcmdArgv,
-                function (dispErr) { callback(dispErr); });
-        } catch (ex) {
-            callback(ex);
-        }
-    });
-};
-
-
-/**
- * Post-option processing initialization of this Cmdln instance.
- *
- * Often if custom top-level `options` are given to the constructor then
- * you may want to override this to handle those options.
- *
- * @param opts {Object} The parsed options.
- * @param args {Array} The left-over CLI arguments after options have been
- *      parsed out.
- *
- * @param callback {Function} `function (err)` where `err==false` means stop
- *      processing, `err==<error instance>` passes that error back up
- *      `!err` means continue.
- */
-Cmdln.prototype.init = function init(opts, args, callback) {
-    if (opts.help) {
-        this.do_help(args[0], opts, [], function (helpErr) {
-            callback(helpErr || false);
-        });
-        return;
-    }
-    callback();
-};
-
-
-
-/**
- * Print top-level tool help.
- *
- * @param callback {Function} `function (err)`.
- */
-Cmdln.prototype.printHelp = function printHelp(callback) {
-    assert.func(callback, 'callback');
-    var self = this;
-    var helpOpts = this.helpOpts;
-    var indent = helpOpts.indent;
-
-    var lines = [];
-    if (this.desc) {
-        lines.push(this.desc);
-        if (this.desc.slice(-1) !== '\n') {
-            lines.push('');
-        }
-    }
-
-    lines = lines.concat([
-        'Usage:',
-        format('%s%s [OPTIONS] COMMAND [ARGS...]', indent, self.name),
-        format('%s%s help COMMAND', indent, self.name),
-        ''
-    ]);
-    if (this.optParser.help) {
-        lines.push('Options:');
-        lines.push(this.optParser.help(helpOpts));
-    }
-
-    lines = lines.concat([
-        'Commands:'
-    ]);
-    // Automatic command line from `this.subcmds`.
-    // TODO: same helpCol as for the opts above, textwrap, etc.
-    var cmdTemplate = format('%s%%-%ds  %s',
-        indent, helpOpts.minHelpCol - indent.length - 2);
-    this.subcmdOrder.forEach(function (name) {
-        var func = self.subcmds[name];
-        if (func.hidden) {
-            return;
-        }
-        var names = name;
-        if (func.aliases) {
-            names += sprintf(' (%s)', func.aliases.join(', '));
-        }
-        var desc = (func.help || '').split('\n', 1)[0];
-        desc = desc.replace(/{{name}}/g, self.name);
-        var line = sprintf(cmdTemplate, names, desc);
-        lines.push(line);
-    });
-
-    console.log(lines.join('\n'));
-    callback();
-};
-
-/**
- * Dispatch to the appropriate "do_SUBCMD" function.
- */
-Cmdln.prototype.dispatch = function dispatch(subcmd, argv, callback) {
-    var name = this.aliases[subcmd];
-    if (!name) {
-        callback(new UnknownCommandError(subcmd));
-        return;
-    }
-    var func = this.subcmds[name];
-
-    var opts = null;
-    var args = argv.slice(3);
-    if (func.options) {
-        try {
-            var parser = new dashdash.Parser({options: func.options});
-            opts = parser.parse(argv, 3);
-        } catch (e) {
-            callback(new OptionError(e, subcmd));
-        }
-        args = opts._args;
-        debug('-- parse %j opts: %j', subcmd, opts);
-    }
-
-    func.call(this, subcmd, opts, args, callback);
-};
-
-Cmdln.prototype.do_help = function do_help(subcmd, opts, args, callback) {
-    var self = this;
-    if (args.length === 0) {
-        this.printHelp(callback);
-        return;
-    }
-    var alias = args[0];
-    var name = this.aliases[alias];
-    if (!name) {
-        callback(new UnknownCommandError(alias));
-        return;
-    }
-
-    var func = this.subcmds[name];
-    if (func.help) {
-        var help = func.help;
-        help = help.replace('{{name}}', name);
-        if (~help.indexOf('{{options}}')) {
-            var parser = new dashdash.Parser({options: func.options});
-            help = help.replace('{{options}}',
-                'Options:\n' + parser.help(this.helpOpts));
-        }
-        console.log(help.trimRight());
-        callback();
-    } else {
-        callback(new CmdlnError({message: format('no help for "%s"', alias)}));
-    }
-};
-Cmdln.prototype.do_help.aliases = ['?'];
-Cmdln.prototype.do_help.help = 'Help on a specific sub-command.';
-
-Cmdln.prototype.help_help = function help_help(subcmd, callback) {
-    this.printHelp(callback);
-};
-
-
-
-// ---- convenience main function for a script
-
-/**
- * Mainline for a Cmdln-using tool. E.g.,
- *
- *      function MyTool() {
- *          // ...
- *      }
- *      util.inherits(MyTool, Cmdln);
- *
- *      ...
- *      if (require.main === module) {
- *          cmdln.main(MyTool);
- *      }
- *
- * @param cmdClass {Function} The Cmdln subclass ctor.
- * @param argv {Array} The argv to process. Optional. Default is `process.argv`.0
- */
-function main(cmdClass, argv) {
-    assert.func(cmdClass, 'cmdClass');
-    assert.optionalArrayOfString(argv, 'argv');
-    if (!argv) argv = process.argv;
-
-    var cli = new cmdClass();
-    cli.main(argv, function (err) {
-        if (err) {
-            console.error('%s%s: error%s: %s',
-                cli.name,
-                (err.subcmd ? ' ' + err.subcmd : ''),
-                (false && err.code ? format(' (%s)', err.code) : ''),
-                (process.env.DEBUG ? err.stack : err.message));
-            process.exit(err.exitStatus || 1);
-        }
-        process.exit(0);
-    });
-}
-
-
-// ---- exports
-
-module.exports = {
-    Cmdln: Cmdln,
-    CmdlnError: CmdlnError,
-    OptionError: OptionError,
-    UnknownCommandError: UnknownCommandError,
-    main: main
-};
diff --git a/node_modules/fw/node_modules/dashdash/LICENSE.txt b/node_modules/fw/node_modules/dashdash/LICENSE.txt
deleted file mode 100644
index 54706c6..0000000
--- a/node_modules/fw/node_modules/dashdash/LICENSE.txt
+++ /dev/null
@@ -1,24 +0,0 @@
-# This is the MIT license
-
-Copyright (c) 2013 Trent Mick. All rights reserved.
-Copyright (c) 2013 Joyent Inc. All rights reserved.
-
-Permission is hereby granted, free of charge, to any person obtaining a
-copy of this software and associated documentation files (the
-"Software"), to deal in the Software without restriction, including
-without limitation the rights to use, copy, modify, merge, publish,
-distribute, sublicense, and/or sell copies of the Software, and to
-permit persons to whom the Software is furnished to do so, subject to
-the following conditions:
-
-The above copyright notice and this permission notice shall be included
-in all copies or substantial portions of the Software.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
-OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
-IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
-CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
-TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
-SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
diff --git a/node_modules/fw/node_modules/dashdash/index.js b/node_modules/fw/node_modules/dashdash/index.js
deleted file mode 100644
index 09ce5fe..0000000
--- a/node_modules/fw/node_modules/dashdash/index.js
+++ /dev/null
@@ -1,591 +0,0 @@
-/**
- * dashdash - yet another node.js optional parsing library
- */
-
-var p = console.log;
-var format = require('util').format;
-
-var assert = require('assert-plus');
-
-var DEBUG = true;
-if (DEBUG) {
-    var debug = console.warn;
-} else {
-    var debug = function () {};
-}
-
-
-
-// ---- internal support stuff
-
-/**
- * Return a shallow copy of the given object;
- */
-function shallowCopy(obj) {
-    if (!obj) {
-        return (obj);
-    }
-    var copy = {};
-    Object.keys(obj).forEach(function (k) {
-        copy[k] = obj[k];
-    });
-    return (copy);
-}
-
-
-function space(n) {
-    var s = '';
-    for (var i = 0; i < n; i++) {
-        s += ' ';
-    }
-    return s;
-}
-
-
-/**
- * Return an array of lines wrapping the given text to the given width.
- * This splits on whitespace. Single tokens longer than `width` are not
- * broken up.
- */
-function textwrap(s, width) {
-    var words = s.trim().split(/\s+/);
-    var lines = [];
-    var line = '';
-    words.forEach(function (w) {
-        var newLength = line.length + w.length;
-        if (line.length > 0)
-            newLength += 1;
-        if (newLength > width) {
-            lines.push(line);
-            line = '';
-        }
-        if (line.length > 0)
-            line += ' ';
-        line += w;
-    });
-    lines.push(line);
-    return lines;
-}
-
-
-/**
- * Transform an option name to a "key" that is used as the field
- * on the `opts` object returned from `<parser>.parse()`.
- *
- * Transformations:
- * - '-' -> '_': This allow one to use hyphen in option names (common)
- *   but not have to do silly things like `opt["dry-run"]` to access the
- *   parsed results.
- */
-function optionKeyFromName(name) {
-    return name.replace(/-/g, '_');
-}
-
-
-
-// ---- Option types
-
-function parseBool(option, optstr, arg) {
-    return true;
-}
-
-function parseString(option, optstr, arg) {
-    assert.string(arg, 'arg');
-    return arg;
-}
-
-function parseNumber(option, optstr, arg) {
-    assert.string(arg, 'arg');
-    var num = Number(arg);
-    if (isNaN(num)) {
-        throw new Error(format('arg for "%s" is not a number: "%s"',
-            optstr, arg));
-    }
-    return num;
-}
-
-function parseInteger(option, optstr, arg) {
-    assert.string(arg, 'arg');
-    var num = Number(arg);
-    if (!/^[0-9-]+$/.test(arg) || isNaN(num)) {
-        throw new Error(format('arg for "%s" is not an integer: "%s"',
-            optstr, arg));
-    }
-    return num;
-}
-
-function parsePositiveInteger(option, optstr, arg) {
-    assert.string(arg, 'arg');
-    var num = Number(arg);
-    if (!/^[0-9]+$/.test(arg) || isNaN(num)) {
-        throw new Error(format('arg for "%s" is not a positive integer: "%s"',
-            optstr, arg));
-    }
-    return num;
-}
-
-var types = {
-    bool: {
-        takesArg: false,
-        parseArg: parseBool
-    },
-    string: {
-        takesArg: true,
-        helpArg: 'ARG',
-        parseArg: parseString
-    },
-    number: {
-        takesArg: true,
-        helpArg: 'NUM',
-        parseArg: parseNumber
-    },
-    integer: {
-        takesArg: true,
-        helpArg: 'INT',
-        parseArg: parseInteger
-    },
-    positiveInteger: {
-        takesArg: true,
-        helpArg: 'INT',
-        parseArg: parsePositiveInteger
-    },
-    arrayOfBool: {
-        takesArg: false,
-        array: true,
-        parseArg: parseBool
-    },
-    arrayOfString: {
-        takesArg: true,
-        helpArg: 'ARG',
-        array: true,
-        parseArg: parseString
-    },
-    arrayOfNumber: {
-        takesArg: true,
-        helpArg: 'NUM',
-        array: true,
-        parseArg: parseNumber
-    },
-    arrayOfInteger: {
-        takesArg: true,
-        helpArg: 'INT',
-        array: true,
-        parseArg: parseInteger
-    },
-    arrayOfPositiveInteger: {
-        takesArg: true,
-        helpArg: 'INT',
-        array: true,
-        parseArg: parsePositiveInteger
-    },
-};
-
-
-
-// ---- Parser
-
-/**
- * Parser constructor.
- *
- * @param config {Object} The parser configuration
- *      - options {Array} Array of option specs. See the README for how to
- *        specify each option spec.
- *      - interspersed {Boolean} Default true. Whether to allow interspersed
- *        arguments (non-options) and options. E.g.:
- *              node tool.js arg1 arg2 -v
- *        '-v' is after some args here. If `interspersed: false` then '-v'
- *        would not be parsed out. Note that regardless of `interspersed`
- *        the presence of '--' will stop option parsing, as all good
- *        option parsers should.
- */
-function Parser(config) {
-    assert.object(config, 'config');
-    assert.arrayOfObject(config.options, 'config.options');
-    assert.optionalBool(config.interspersed, 'config.interspersed');
-    var self = this;
-
-    // Allow interspersed arguments (true by default).
-    this.interspersed = (config.interspersed !== undefined
-        ? config.interspersed : true);
-
-    this.options = config.options.map(function (o) { return shallowCopy(o); });
-    this.optionFromName = {};
-    this.optionFromEnv = {};
-    for (var i = 0; i < this.options.length; i++) {
-        var o = this.options[i];
-        assert.ok(types[o.type],
-            format('invalid config.options.%d.type: "%s" in %j',
-                   i, o.type, o));
-        assert.optionalString(o.name, format('config.options.%d.name', i));
-        assert.optionalArrayOfString(o.names,
-            format('config.options.%d.names', i));
-        assert.ok((o.name || o.names) && !(o.name && o.names),
-            format('exactly one of "name" or "names" required: %j', o));
-        assert.optionalString(o.help, format('config.options.%d.help', i));
-        var env = o.env || [];
-        if (typeof (env) === 'string') {
-            env = [env];
-        }
-        assert.optionalArrayOfString(env, format('config.options.%d.env', i));
-
-        if (o.name) {
-            o.names = [o.name];
-        } else {
-            assert.string(o.names[0],
-                format('config.options.%d.names is empty', i));
-        }
-        o.key = optionKeyFromName(o.names[0]);
-        o.names.forEach(function (n) {
-            if (self.optionFromName[n]) {
-                throw new Error(format(
-                    'option name collision: "%s" used in %j and %j',
-                    n, self.optionFromName[n], o));
-            }
-            self.optionFromName[n] = o;
-        });
-        env.forEach(function (n) {
-            if (self.optionFromEnv[n]) {
-                throw new Error(format(
-                    'option env collision: "%s" used in %j and %j',
-                    n, self.optionFromEnv[n], o));
-            }
-            self.optionFromEnv[n] = o;
-        });
-    }
-}
-
-Parser.prototype.optionTakesArg = function optionTakesArg(option) {
-    return types[option.type].takesArg;
-};
-
-/**
- * Parse options from the given argv.
- *
- * @param inputs {Object}
- *      - argv {Array} Optional. The argv to parse. Defaults to
- *        `process.argv`.
- *      - slice {Number} The index into argv at which options/args begin.
- *        Default is 2, as appropriate for `process.argv`.
- *      - env {Object} Optional. The env to use for 'env' entries in the
- *        option specs. Defaults to `process.env`.
- * @returns {Object} Parsed `opts`. It has special keys `_args` (the
- *      remaining args from `argv`) and `_order` (gives the order that
- *      options were specified).
- */
-Parser.prototype.parse = function parse(inputs) {
-    var self = this;
-
-    // Old API was `parse([argv, [slice]])`
-    if (Array.isArray(arguments[0])) {
-        inputs = {argv: arguments[0], slice: arguments[1]};
-    }
-
-    assert.object(inputs, 'inputs');
-    assert.optionalArrayOfString(inputs.argv, 'inputs.argv');
-    //assert.optionalNumber(slice, 'slice');
-    var argv = inputs.argv || process.argv;
-    var slice = inputs.slice !== undefined ? inputs.slice : 2;
-    var args = argv.slice(slice);
-    var env = inputs.env || process.env;
-
-    // Setup default values
-    var opts = {};
-    var _order = [];
-    this.options.forEach(function (o) {
-        if (o.default) {
-            opts[o.key] = o.default;
-        }
-    });
-
-    function addOpt(option, optstr, key, val, from) {
-        var type = types[option.type];
-        var parsedVal = type.parseArg(option, optstr, val);
-        if (type.array) {
-            if (!opts[key]) {
-                opts[key] = [];
-            }
-            opts[key].push(parsedVal);
-        } else {
-            opts[key] = parsedVal;
-        }
-        var item = { key: key, value: parsedVal, from: from };
-        _order.push(item);
-    }
-
-    // Parse args.
-    var _args = [];
-    var i = 0;
-    while (i < args.length) {
-        var arg = args[i];
-
-        // End of options marker.
-        if (arg === '--') {
-            i++;
-            break;
-
-        // Long option
-        } else if (arg.slice(0, 2) === '--') {
-            var name = arg.slice(2);
-            var val = null;
-            var idx = name.indexOf('=');
-            if (idx !== -1) {
-                val = name.slice(idx + 1);
-                name = name.slice(0, idx);
-            }
-            var option = this.optionFromName[name];
-            if (!option) {
-                throw new Error(format('unknown option: "--%s"', name));
-            }
-            var takesArg = this.optionTakesArg(option);
-            if (val !== null && !takesArg) {
-                throw new Error(format('argument given to "--%s" option '
-                    + 'that does not take one: "%s"', name, arg));
-            }
-            if (!takesArg) {
-                addOpt(option, '--'+name, option.key, true, 'argv');
-            } else if (val !== null) {
-                addOpt(option, '--'+name, option.key, val, 'argv');
-            } else if (i + 1 >= args.length) {
-                throw new Error(format('do not have enough args for "--%s" '
-                    + 'option', name));
-            } else {
-                addOpt(option, '--'+name, option.key, args[i + 1], 'argv');
-                i++;
-            }
-
-        // Short option
-        } else if (arg[0] === '-' && arg.length > 1) {
-            var j = 1;
-            while (j < arg.length) {
-                var name = arg[j];
-                var val = arg.slice(j + 1);  // option val if it takes an arg
-                // debug('name: %s (val: %s)', name, val)
-                var option = this.optionFromName[name];
-                if (!option) {
-                    if (arg.length > 2) {
-                        throw new Error(format(
-                            'unknown option: "-%s" in "%s" group',
-                            name, arg));
-                    } else {
-                        throw new Error(format('unknown option: "-%s"', name));
-                    }
-                }
-                var takesArg = this.optionTakesArg(option);
-                if (!takesArg) {
-                    addOpt(option, '-'+name, option.key, true, 'argv');
-                } else if (val) {
-                    addOpt(option, '-'+name, option.key, val, 'argv');
-                    break;
-                } else {
-                    if (i + 1 >= args.length) {
-                        throw new Error(format('do not have enough args '
-                            + 'for "-%s" option', name));
-                    }
-                    addOpt(option, '-'+name, option.key, args[i + 1], 'argv');
-                    i++;
-                    break;
-                }
-                j++;
-            }
-
-        // An interspersed arg
-        } else if (this.interspersed) {
-            _args.push(arg);
-
-        // An arg and interspersed args are not allowed, so done options.
-        } else {
-            break;
-        }
-        i++;
-    }
-    _args = _args.concat(args.slice(i));
-
-    // Parse environment.
-    Object.keys(this.optionFromEnv).forEach(function (envname) {
-        var val = env[envname];
-        if (val === undefined)
-            return;
-        var option = self.optionFromEnv[envname];
-        if (opts[option.key] !== undefined)
-            return;
-        var takesArg = self.optionTakesArg(option);
-        if (takesArg) {
-            addOpt(option, envname, option.key, val, 'env');
-        } else if (val) {
-            // For now, we make VAR=<empty-string> NOT set the value
-            // false. It is as if the VAR was not set.
-            addOpt(option, envname, option.key, true, 'env');
-        }
-    });
-
-    opts._order = _order;
-    opts._args = _args;
-    return opts;
-};
-
-
-/**
- * Return help output for the current options.
- *
- * E.g.: if the current options are:
- *      [{names: ['help', 'h'], type: 'bool', help: 'Show help and exit.'}]
- * then this would return:
- *      '  -h, --help     Show help and exit.\n'
- *
- * @param config {Object} Config for controlling the option help output.
- *      - indent {Number|String} Default 4. An indent/prefix to use for
- *        each option line.
- *      - nameSort {String} Default is 'length'. By default the names are
- *        sorted to put the short opts first (i.e. '-h, --help' preferred
- *        to '--help, -h'). Set to 'none' to not do this sorting.
- *      - maxCol {Number} Default 80. Note that long tokens in a help string
- *        can go past this.
- *      - helpCol {Number} Set to specify a specific column at which
- *        option help will be aligned. By default this is determined
- *        automatically.
- *      - minHelpCol {Number} Default 20.
- *      - maxHelpCol {Number} Default 40.
- *      - includeEnv {Boolean} Default false.
- * @returns {String}
- */
-Parser.prototype.help = function help(config) {
-    config = config || {};
-    assert.object(config, 'config');
-    var indent;
-    if (config.indent === undefined) {
-        indent = space(4);
-    } else if (typeof (config.indent) === 'number') {
-        indent = space(config.indent);
-    } else if (typeof (config.indent) === 'string') {
-        indent = config.indent;
-    } else {
-        assert.fail('invalid "config.indent": not a string or number: '
-            + config.indent);
-    }
-    assert.optionalString(config.nameSort, 'config.nameSort');
-    var nameSort = config.nameSort || 'length';
-    assert.ok(~['length', 'none'].indexOf(nameSort),
-        'invalid "config.nameSort"');
-    assert.optionalNumber(config.maxCol, 'config.maxCol');
-    assert.optionalNumber(config.maxHelpCol, 'config.maxHelpCol');
-    assert.optionalNumber(config.minHelpCol, 'config.minHelpCol');
-    assert.optionalNumber(config.helpCol, 'config.helpCol');
-    assert.optionalBool(config.includeEnv, 'config.includeEnv');
-    var maxCol = config.maxCol || 80;
-    var minHelpCol = config.minHelpCol || 20;
-    var maxHelpCol = config.maxHelpCol || 40;
-
-    var lines = [];
-    var maxWidth = 0;
-    this.options.forEach(function (o) {
-        var type = types[o.type];
-        var arg = o.helpArg || type.helpArg || 'ARG';
-        var line = '';
-        var names = o.names.slice();
-        if (nameSort === 'length') {
-            names.sort(function (a, b) {
-                if (a.length < b.length)
-                    return -1;
-                else if (b.length < a.length)
-                    return 1;
-                else
-                    return 0;
-            })
-        }
-        names.forEach(function (name, i) {
-            if (i > 0)
-                line += ', ';
-            if (name.length === 1) {
-                line += '-' + name
-                if (type.takesArg)
-                    line += ' ' + arg;
-            } else {
-                line += '--' + name
-                if (type.takesArg)
-                    line += '=' + arg;
-            }
-        });
-        maxWidth = Math.max(maxWidth, line.length);
-        lines.push(line);
-    });
-
-    // Add help strings.
-    var helpCol = config.helpCol;
-    if (!helpCol) {
-        helpCol = maxWidth + indent.length + 2;
-        helpCol = Math.min(Math.max(helpCol, minHelpCol), maxHelpCol);
-    }
-    this.options.forEach(function (o, i) {
-        if (!o.help) {
-            return;
-        }
-        var line = lines[i];
-        var n = helpCol - (indent.length + line.length);
-        if (n >= 0) {
-            line += space(n);
-        } else {
-            line += '\n' + space(helpCol);
-        }
-        var help = o.help;
-        if (o.env && o.env.length && config.includeEnv) {
-            if (help.length && !~'.!?'.indexOf(help.slice(-1))) {
-                help += '.';
-            }
-            help += ' Environment: ';
-            var type = types[o.type];
-            var arg = o.helpArg || type.helpArg || 'ARG';
-            var envs = (Array.isArray(o.env) ? o.env : [o.env]).map(function (e) {
-                if (type.takesArg) {
-                    return e + '=' + arg;
-                } else {
-                    return e + '=1';
-                }
-            });
-            help += envs.join(', ');
-        }
-        line += textwrap(help, maxCol - helpCol).join(
-            '\n' + space(helpCol));
-        lines[i] = line;
-    });
-
-    var rv = '';
-    if (lines.length > 0) {
-        rv = indent + lines.join('\n' + indent) + '\n';
-    }
-    return rv;
-};
-
-
-
-// ---- exports
-
-function createParser(config) {
-    return new Parser(config);
-}
-
-/**
- * Parse argv with the given options.
- *
- * @param config {Object} A merge of all the available fields from
- *      `dashdash.Parser` and `dashdash.Parser.parse`: options, interspersed,
- *      argv, env, slice.
- */
-function parse(config) {
-    assert.object(config, 'config');
-    assert.optionalArrayOfString(config.argv, 'config.argv');
-    assert.optionalObject(config.env, 'config.env');
-    var config = shallowCopy(config);
-    var argv = config.argv;
-    delete config.argv;
-    var env = config.env;
-    delete config.env;
-
-    var parser = new Parser(config);
-    return parser.parse({argv: argv, env: env});
-}
-
-module.exports = {
-    createParser: createParser,
-    Parser: Parser,
-    parse: parse
-};
diff --git a/node_modules/fw/node_modules/extsprintf.js b/node_modules/fw/node_modules/extsprintf.js
deleted file mode 100644
index 61ff891..0000000
--- a/node_modules/fw/node_modules/extsprintf.js
+++ /dev/null
@@ -1,166 +0,0 @@
-/*
- * extsprintf.js: extended POSIX-style sprintf
- */
-
-var mod_assert = require('assert');
-var mod_util = require('util');
-
-/*
- * Public interface
- */
-exports.sprintf = jsSprintf;
-
-/*
- * Stripped down version of s[n]printf(3c).  We make a best effort to throw an
- * exception when given a format string we don't understand, rather than
- * ignoring it, so that we won't break existing programs if/when we go implement
- * the rest of this.
- *
- * This implementation currently supports specifying
- *	- field alignment ('-' flag),
- * 	- zero-pad ('0' flag)
- *	- always show numeric sign ('+' flag),
- *	- field width
- *	- conversions for strings, decimal integers, and floats (numbers).
- *	- argument size specifiers.  These are all accepted but ignored, since
- *	  Javascript has no notion of the physical size of an argument.
- *
- * Everything else is currently unsupported, most notably precision, unsigned
- * numbers, non-decimal numbers, and characters.
- */
-function jsSprintf(fmt)
-{
-	var regex = [
-	    '([^%]*)',				/* normal text */
-	    '%',				/* start of format */
-	    '([\'\\-+ #0]*?)',			/* flags (optional) */
-	    '([1-9]\\d*)?',			/* width (optional) */
-	    '(\\.([1-9]\\d*))?',		/* precision (optional) */
-	    '[lhjztL]*?',			/* length mods (ignored) */
-	    '([diouxXfFeEgGaAcCsSp%jr])'	/* conversion */
-	].join('');
-
-	var re = new RegExp(regex);
-	var args = Array.prototype.slice.call(arguments, 1);
-	var flags, width, precision, conversion;
-	var left, pad, sign, arg, match;
-	var ret = '';
-	var argn = 1;
-
-	mod_assert.equal('string', typeof (fmt));
-
-	while ((match = re.exec(fmt)) !== null) {
-		ret += match[1];
-		fmt = fmt.substring(match[0].length);
-
-		flags = match[2] || '';
-		width = match[3] || 0;
-		precision = match[4] || '';
-		conversion = match[6];
-		left = false;
-		sign = false;
-		pad = ' ';
-
-		if (conversion == '%') {
-			ret += '%';
-			continue;
-		}
-
-		if (args.length === 0)
-			throw (new Error('too few args to sprintf'));
-
-		arg = args.shift();
-		argn++;
-
-		if (flags.match(/[\' #]/))
-			throw (new Error(
-			    'unsupported flags: ' + flags));
-
-		if (precision.length > 0)
-			throw (new Error(
-			    'non-zero precision not supported'));
-
-		if (flags.match(/-/))
-			left = true;
-
-		if (flags.match(/0/))
-			pad = '0';
-
-		if (flags.match(/\+/))
-			sign = true;
-
-		switch (conversion) {
-		case 's':
-			if (arg === undefined || arg === null)
-				throw (new Error('argument ' + argn +
-				    ': attempted to print undefined or null ' +
-				    'as a string'));
-			ret += doPad(pad, width, left, arg.toString());
-			break;
-
-		case 'd':
-			arg = Math.floor(arg);
-			/*jsl:fallthru*/
-		case 'f':
-			sign = sign && arg > 0 ? '+' : '';
-			ret += sign + doPad(pad, width, left,
-			    arg.toString());
-			break;
-
-		case 'j': /* non-standard */
-			if (width === 0)
-				width = 10;
-			ret += mod_util.inspect(arg, false, width);
-			break;
-
-		case 'r': /* non-standard */
-			ret += dumpException(arg);
-			break;
-
-		default:
-			throw (new Error('unsupported conversion: ' +
-			    conversion));
-		}
-	}
-
-	ret += fmt;
-	return (ret);
-}
-
-function doPad(chr, width, left, str)
-{
-	var ret = str;
-
-	while (ret.length < width) {
-		if (left)
-			ret += chr;
-		else
-			ret = chr + ret;
-	}
-
-	return (ret);
-}
-
-/*
- * This function dumps long stack traces for exceptions having a cause() method.
- * See node-verror for an example.
- */
-function dumpException(ex)
-{
-	var ret;
-
-	if (!(ex instanceof Error))
-		throw (new Error(jsSprintf('invalid type for %%r: %j', ex)));
-
-	/* Note that V8 prepends "ex.stack" with ex.toString(). */
-	ret = 'EXCEPTION: ' + ex.constructor.name + ': ' + ex.stack;
-
-	if (ex.cause && typeof (ex.cause) === 'function') {
-		var cex = ex.cause();
-		if (cex) {
-			ret += '\nCaused by: ' + dumpException(cex);
-		}
-	}
-
-	return (ret);
-}
diff --git a/node_modules/fw/node_modules/fwrule/index.js b/node_modules/fw/node_modules/fwrule/index.js
deleted file mode 100644
index e219748..0000000
--- a/node_modules/fw/node_modules/fwrule/index.js
+++ /dev/null
@@ -1,248 +0,0 @@
-/*
- * CDDL HEADER START
- *
- * The contents of this file are subject to the terms of the
- * Common Development and Distribution License, Version 1.0 only
- * (the "License").  You may not use this file except in compliance
- * with the License.
- *
- * You can obtain a copy of the license at http://smartos.org/CDDL
- *
- * See the License for the specific language governing permissions
- * and limitations under the License.
- *
- * When distributing Covered Code, include this CDDL HEADER in each
- * file.
- *
- * If applicable, add the following below this CDDL HEADER, with the
- * fields enclosed by brackets "[]" replaced with your own identifying
- * information: Portions Copyright [yyyy] [name of copyright owner]
- *
- * CDDL HEADER END
- *
- * Copyright (c) 2016, Joyent, Inc. All rights reserved.
- *
- *
- * firewall rule parser: entry point
- */
-
-var mod_net = require('net');
-var parser = require('./parser').parser;
-var rule = require('./rule');
-var validators = require('./validators');
-var VError = require('verror').VError;
-
-
-
-// --- Globals
-
-
-
-var uuidRE = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
-var portRE = /^[0-9]{1,5}$/;
-
-/**
- * The fwrule language is versioned so that use of new features can be
- * restricted. These versions are:
- *
- * 1 - Initial version of language
- * 2 - PORTS keyword & support for ranges of ports
- * 3 - Support for IPv6 targets, the ICMPv6 protocol, and the TYPE ALL keyword
- */
-var CURR_VERSION = 3;
-
-
-// --- Internal helper functions
-
-
-/**
- * Translates an internal parser name (usually all one word, all caps, for
- * brevity), to a friendlier user-facing name
- */
-function translateParserNames(name) {
-    var translated;
-    switch (name) {
-        case '\'ALL\'':
-        case '\'ANY\'':
-        case '\'IP\'':
-        case '\'SUBNET\'':
-        case '\'TAG\'':
-        case '\'VM\'':
-        case 'WORD':
-            translated = name.toLowerCase();
-            break;
-        default:
-            translated = name;
-            break;
-    }
-
-    return translated;
-}
-
-
-
-// --- Parser extension methods
-
-
-
-parser.yy.validateIPv4address = function validateIPv4address(ip) {
-    if (!validators.validateIPv4address(ip)) {
-        throw new validators.InvalidParamError('rule',
-            'IPv4 address "%s" is invalid', ip);
-    }
-};
-
-
-parser.yy.validateIPv4subnet = function validateIPv4subnet(subnet) {
-    if (!validators.validateIPv4subnet(subnet)) {
-        throw new validators.InvalidParamError('rule',
-            'Subnet "%s" is invalid (must be in CIDR format)', subnet);
-    }
-};
-
-
-parser.yy.validateIPv6address = function validateIPv6address(ip) {
-    if (!mod_net.isIPv6(ip)) {
-        throw new validators.InvalidParamError('rule',
-            'IPv6 address "%s" is invalid', ip);
-    }
-};
-
-
-parser.yy.validateIPv6subnet = function validateIPv6subnet(ip, subnet) {
-    if (!validators.validateIPv6subnet(ip, subnet)) {
-        throw new validators.InvalidParamError('rule',
-            'Subnet "%s" is invalid (must be in CIDR format)', subnet);
-    }
-};
-
-
-parser.yy.validatePortNumber = function validatePortNumber(num) {
-    if (isNaN(num) || Number(num) < 1 || Number(num) > 65535) {
-        throw new validators.InvalidParamError('rule',
-            'Port number "%s" is invalid', num);
-    }
-};
-
-parser.yy.validateRangeOrder = function validateRangeOrder(start, end) {
-    if (Number(end) < Number(start)) {
-        throw new validators.InvalidParamError('rule',
-            'The end of the range (%s) cannot be less than the start (%s)',
-            end, start);
-    }
-};
-
-parser.yy.createMaybePortRange = function createMaybePortRange(num) {
-    var range = num.split('-');
-
-    switch (range.length) {
-    case 1:
-            parser.yy.validatePortNumber(range[0]);
-            return Number(range[0]);
-    case 2:
-            parser.yy.validatePortNumber(range[0]);
-            parser.yy.validatePortNumber(range[1]);
-            parser.yy.validateRangeOrder(range[0], range[1]);
-            return { 'start': Number(range[0]), 'end': Number(range[1]) };
-    default:
-            throw new validators.InvalidParamError('rule',
-                '"%s" is not a valid port number or range', num);
-    }
-};
-
-
-parser.yy.validateICMPcode = function validateICMPcode(num) {
-    if (isNaN(num) || Number(num) < 0 || Number(num) > 255) {
-        throw new validators.InvalidParamError('rule',
-            'ICMP code "%s" is invalid', num);
-    }
-};
-
-
-parser.yy.validateICMPtype = function validateICMPtype(num) {
-    if (isNaN(num) || Number(num) < 0 || Number(num) > 255) {
-        throw new validators.InvalidParamError('rule',
-            'ICMP type "%s" is invalid', num);
-    }
-};
-
-
-parser.yy.validateUUID = function validateUUID(text) {
-    if (!uuidRE.test(text)) {
-        throw new validators.InvalidParamError('rule',
-            'UUID "%s" is invalid', text);
-    }
-};
-
-parser.yy.validateOKVersion = function validateOKVersion(ver, feature) {
-    if (ver > parser.yy.maxVersion) {
-        throw new validators.InvalidParamError('rule',
-            'The rule uses a feature (%s) newer than this API allows', feature);
-    }
-};
-
-
-parser.yy.parseError = function parseError(str, details) {
-    var err;
-    if (details.token === null) {
-        var pre = this.yy.lexer.pastInput();
-        var post = this.yy.lexer.upcomingInput();
-        err = new validators.InvalidParamError('rule',
-            'Error at character %d: \'%s\', found: unexpected text',
-            pre.length, post);
-        err.details = details;
-        throw err;
-    }
-
-    if (details.text === '') {
-        err = new validators.InvalidParamError('rule',
-            'Error at character 0: \'\', expected: \'FROM\', found: '
-            + 'empty string');
-        err.details = details;
-        throw err;
-    }
-
-    err = new validators.InvalidParamError('rule',
-        'Error at character %d: \'%s\', expected: %s, found: %s',
-        details.loc.last_column,
-        details.text,
-        details.expected.map(function (exp) {
-            return translateParserNames(exp);
-        }).join(', '),
-        translateParserNames(details.token));
-
-    err.details = details;
-    throw err;
-};
-
-
-
-// --- Exports
-
-
-
-function parse(input, opts) {
-    if (!opts) {
-        opts = {};
-    }
-
-    // If a version hasn't been specified, use most recent
-    parser.yy.maxVersion = opts.maxVersion || CURR_VERSION;
-
-    return parser.parse(input);
-}
-
-
-
-module.exports = {
-    ACTIONS: ['allow', 'block'],
-    DIRECTIONS: rule.DIRECTIONS,
-    FIELDS: rule.FIELDS,
-    create: rule.create,
-    FwRule: rule.FwRule,
-    generateVersion: rule.generateVersion,
-    parse: parse,
-    PROTOCOLS: ['tcp', 'udp', 'icmp', 'icmp6'],
-    TARGET_TYPES: rule.TARGET_TYPES,
-    validators: validators
-};
diff --git a/node_modules/fw/node_modules/fwrule/parser.js b/node_modules/fw/node_modules/fwrule/parser.js
deleted file mode 100644
index 4e7b590..0000000
--- a/node_modules/fw/node_modules/fwrule/parser.js
+++ /dev/null
@@ -1,561 +0,0 @@
-/*
- * CDDL HEADER START
- *
- * The contents of this file are subject to the terms of the
- * Common Development and Distribution License, Version 1.0 only
- * (the "License").  You may not use this file except in compliance
- * with the License.
- *
- * You can obtain a copy of the license at http://smartos.org/CDDL
- *
- * See the License for the specific language governing permissions
- * and limitations under the License.
- *
- * When distributing Covered Code, include this CDDL HEADER in each
- * file.
- *
- * If applicable, add the following below this CDDL HEADER, with the
- * fields enclosed by brackets "[]" replaced with your own identifying
- * information: Portions Copyright [yyyy] [name of copyright owner]
- *
- * CDDL HEADER END
- *
- * Copyright (c) 2016, Joyent, Inc. All rights reserved.
- *
- *
- * fwadm: firewall rule parser
- */
-
-
-/* parser generated by jison 0.4.2 */
-var parser = (function(){
-var parser = {trace: function trace() { },
-yy: {},
-symbols_: {"error":2,"start":3,"FROM":4,"target_list":5,"TO":6,"action":7,"protocol":8,"EOF":9,"any":10,"all":11,"(":12,"target_or_list":13,")":14,"target":15,"OR":16,"ipv4":17,"ipv4_subnet":18,"ipv6":19,"ipv6_subnet":20,"tag":21,"vm":22,"ALL":23,"VMS":24,"ANY":25,"IP":26,"IPV4ADDR":27,"SUBNET":28,"CIDRSUFFIX":29,"IPV6ADDR":30,"VM":31,"uuid":32,"WORD":33,"TAG":34,"tag_string":35,"=":36,"STRING":37,"BLOCK":38,"ALLOW":39,"TCP":40,"port_list":41,"ports":42,"UDP":43,"ICMP":44,"type_list":45,"ICMP6":46,"port_and_list":47,"port":48,"port_all":49,"AND":50,"PORT":51,"portnumber":52,"PORTS":53,"portnumbers":54,"portrange":55,"-":56,",":57,"type_and_list":58,"type":59,"type_all":60,"TYPE":61,"icmptype":62,"CODE":63,"icmpcode":64,"$accept":0,"$end":1},
-terminals_: {2:"error",4:"FROM",6:"TO",9:"EOF",12:"(",14:")",16:"OR",23:"ALL",24:"VMS",25:"ANY",26:"IP",27:"IPV4ADDR",28:"SUBNET",29:"CIDRSUFFIX",30:"IPV6ADDR",31:"VM",33:"WORD",34:"TAG",36:"=",37:"STRING",38:"BLOCK",39:"ALLOW",40:"TCP",43:"UDP",44:"ICMP",46:"ICMP6",50:"AND",51:"PORT",53:"PORTS",56:"-",57:",",61:"TYPE",63:"CODE"},
-productions_: [0,[3,7],[5,1],[5,1],[5,3],[5,1],[13,1],[13,3],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[11,2],[11,4],[10,1],[10,3],[17,2],[18,3],[19,2],[20,3],[22,2],[32,1],[21,2],[21,4],[35,1],[35,1],[7,1],[7,1],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[41,3],[41,1],[41,3],[41,1],[47,1],[47,3],[48,2],[42,2],[49,2],[52,1],[55,1],[55,3],[54,1],[54,3],[45,3],[45,1],[45,3],[45,1],[58,1],[58,3],[59,4],[59,2],[60,2],[62,1],[64,1]],
-performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {
-
-var $0 = $$.length - 1;
-switch (yystate) {
-case 1: return { 'from': $$[$0-5], 'to': $$[$0-3], 'action': $$[$0-2], 'protocol': $$[$0-1] }; 
-break;
-case 4:this.$ = $$[$0-1];
-break;
-case 7: this.$ = $$[$0-2].concat($$[$0]); 
-break;
-case 14: this.$ = [ ['wildcard', 'vmall'] ]; 
-break;
-case 15: this.$ = [ ['wildcard', 'vmall'] ]; 
-break;
-case 16: this.$ = [ ['wildcard', 'any'] ]; 
-break;
-case 17: this.$ = [ ['wildcard', 'any'] ]; 
-break;
-case 18: yy.validateIPv4address($$[$0]);
-          this.$ = [ ['ip', $$[$0]] ]; 
-break;
-case 19: yy.validateIPv4subnet($$[$0-1] + $$[$0]);
-            this.$ = [ ['subnet', $$[$0-1] + $$[$0]] ]; 
-break;
-case 20: yy.validateOKVersion(3, 'IPv6');
-          yy.validateIPv6address($$[$0]);
-          this.$ = [ ['ip', $$[$0]] ]; 
-break;
-case 21: yy.validateOKVersion(3, 'IPv6');
-          yy.validateIPv6subnet($$[$0-1] + $$[$0]);
-            this.$ = [ ['subnet', $$[$0-1] + $$[$0]] ]; 
-break;
-case 22: this.$ = [ ['vm', $$[$0]] ]; 
-break;
-case 23: yy.validateUUID($$[$0]);
-          this.$ = $$[$0]; 
-break;
-case 24: this.$ = [ ['tag', $$[$0]] ]; 
-break;
-case 25: this.$ = [ ['tag', [ $$[$0-2], $$[$0] ] ] ]; 
-break;
-case 26: this.$ = yytext; 
-break;
-case 27: this.$ = $$[$0]; 
-break;
-case 28: this.$ = $$[$0].toLowerCase() 
-break;
-case 29: this.$ = $$[$0].toLowerCase() 
-break;
-case 30: this.$ = { 'name': $$[$0-1].toLowerCase(), 'targets': $$[$0] } 
-break;
-case 31: this.$ = { 'name': $$[$0-1].toLowerCase(), 'targets': $$[$0] } 
-break;
-case 32: this.$ = { 'name': $$[$0-1].toLowerCase(), 'targets': $$[$0] } 
-break;
-case 33: this.$ = { 'name': $$[$0-1].toLowerCase(), 'targets': $$[$0] } 
-break;
-case 34: this.$ = { 'name': $$[$0-1].toLowerCase(), 'targets': $$[$0] } 
-break;
-case 35: this.$ = { 'name': $$[$0-1].toLowerCase(), 'targets': $$[$0] } 
-break;
-case 36: this.$ = $$[$0-1]; 
-break;
-case 38: this.$ = $$[$0-1]; 
-break;
-case 41: this.$ = $$[$0-2].concat(Number($$[$0])); 
-break;
-case 42: this.$ = [ $$[$0] ]; 
-break;
-case 43: yy.validateOKVersion(2, 'port ranges');
-          this.$ = $$[$0]; 
-break;
-case 44: this.$ = [ 'all' ]; 
-break;
-case 45: yy.validatePortNumber($$[$0]);
-          this.$ = Number($$[$0]); 
-break;
-case 46: this.$ = [ yy.createMaybePortRange($$[$0]) ]; 
-break;
-case 47: yy.validatePortNumber($$[$0-2]);
-          yy.validatePortNumber($$[$0]);
-          yy.validateRangeOrder($$[$0-2], $$[$0]);
-          this.$ = [{ 'start': Number($$[$0-2]), 'end': Number($$[$0]) }]; 
-break;
-case 49: this.$ = $$[$0-2].concat($$[$0]); 
-break;
-case 50: this.$ = $$[$0-1]; 
-break;
-case 52: this.$ = $$[$0-1]; 
-break;
-case 55: this.$ = $$[$0-2].concat($$[$0]); 
-break;
-case 56: this.$ = [ $$[$0-2] + ':' + $$[$0] ]; 
-break;
-case 57: this.$ = [ $$[$0] ]; 
-break;
-case 58: yy.validateOKVersion(3, 'all ICMP types');
-          this.$ = [ 'all' ]; 
-break;
-case 59: yy.validateICMPtype($$[$0]);
-          this.$ = Number($$[$0]); 
-break;
-case 60: yy.validateICMPcode($$[$0]);
-          this.$ = Number($$[$0]); 
-break;
-}
-},
-table: [{3:1,4:[1,2]},{1:[3]},{5:3,10:4,11:5,12:[1,6],15:7,17:10,18:11,19:12,20:13,21:14,22:15,23:[1,9],25:[1,8],26:[1,16],28:[1,17],31:[1,19],34:[1,18]},{6:[1,20]},{6:[2,2],38:[2,2],39:[2,2]},{6:[2,3],38:[2,3],39:[2,3]},{13:21,15:24,17:10,18:11,19:12,20:13,21:14,22:15,23:[1,23],25:[1,22],26:[1,16],28:[1,17],31:[1,19],34:[1,18]},{6:[2,5],38:[2,5],39:[2,5]},{6:[2,16],38:[2,16],39:[2,16]},{24:[1,25]},{6:[2,8],14:[2,8],16:[2,8],38:[2,8],39:[2,8]},{6:[2,9],14:[2,9],16:[2,9],38:[2,9],39:[2,9]},{6:[2,10],14:[2,10],16:[2,10],38:[2,10],39:[2,10]},{6:[2,11],14:[2,11],16:[2,11],38:[2,11],39:[2,11]},{6:[2,12],14:[2,12],16:[2,12],38:[2,12],39:[2,12]},{6:[2,13],14:[2,13],16:[2,13],38:[2,13],39:[2,13]},{27:[1,26],30:[1,27]},{27:[1,28],30:[1,29]},{33:[1,32],35:30,37:[1,31]},{32:33,33:[1,34]},{5:35,10:4,11:5,12:[1,6],15:7,17:10,18:11,19:12,20:13,21:14,22:15,23:[1,9],25:[1,8],26:[1,16],28:[1,17],31:[1,19],34:[1,18]},{14:[1,36],16:[1,37]},{14:[1,38]},{24:[1,39]},{14:[2,6],16:[2,6]},{6:[2,14],38:[2,14],39:[2,14]},{6:[2,18],14:[2,18],16:[2,18],38:[2,18],39:[2,18]},{6:[2,20],14:[2,20],16:[2,20],38:[2,20],39:[2,20]},{29:[1,40]},{29:[1,41]},{6:[2,24],14:[2,24],16:[2,24],36:[1,42],38:[2,24],39:[2,24]},{6:[2,26],14:[2,26],16:[2,26],36:[2,26],38:[2,26],39:[2,26]},{6:[2,27],14:[2,27],16:[2,27],36:[2,27],38:[2,27],39:[2,27]},{6:[2,22],14:[2,22],16:[2,22],38:[2,22],39:[2,22]},{6:[2,23],14:[2,23],16:[2,23],38:[2,23],39:[2,23]},{7:43,38:[1,44],39:[1,45]},{6:[2,4],38:[2,4],39:[2,4]},{15:46,17:10,18:11,19:12,20:13,21:14,22:15,26:[1,16],28:[1,17],31:[1,19],34:[1,18]},{6:[2,17],38:[2,17],39:[2,17]},{14:[1,47]},{6:[2,19],14:[2,19],16:[2,19],38:[2,19],39:[2,19]},{6:[2,21],14:[2,21],16:[2,21],38:[2,21],39:[2,21]},{33:[1,32],35:48,37:[1,31]},{8:49,40:[1,50],43:[1,51],44:[1,52],46:[1,53]},{40:[2,28],43:[2,28],44:[2,28],46:[2,28]},{40:[2,29],43:[2,29],44:[2,29],46:[2,29]},{14:[2,7],16:[2,7]},{6:[2,15],38:[2,15],39:[2,15]},{6:[2,25],14:[2,25],16:[2,25],38:[2,25],39:[2,25]},{9:[1,54]},{12:[1,57],41:55,42:56,48:58,49:59,51:[1,61],53:[1,60]},{12:[1,57],41:62,42:63,48:58,49:59,51:[1,61],53:[1,60]},{12:[1,65],45:64,59:66,60:67,61:[1,68]},{12:[1,65],45:69,59:66,60:67,61:[1,68]},{1:[2,1]},{9:[2,30]},{9:[2,31]},{47:70,48:72,49:71,51:[1,61]},{9:[2,37]},{9:[2,39]},{33:[1,75],54:73,55:74},{23:[1,77],33:[1,78],52:76},{9:[2,32]},{9:[2,33]},{9:[2,34]},{58:79,59:81,60:80,61:[1,68]},{9:[2,51]},{9:[2,53]},{23:[1,83],33:[1,84],62:82},{9:[2,35]},{14:[1,85],50:[1,86]},{14:[1,87]},{14:[2,40],50:[2,40]},{9:[2,43],57:[1,88]},{9:[2,48],57:[2,48]},{9:[2,46],56:[1,89],57:[2,46]},{9:[2,42],14:[2,42],50:[2,42]},{9:[2,44],14:[2,44]},{9:[2,45],14:[2,45],50:[2,45]},{14:[1,90],50:[1,91]},{14:[1,92]},{14:[2,54],50:[2,54]},{9:[2,57],14:[2,57],50:[2,57],63:[1,93]},{9:[2,58],14:[2,58]},{9:[2,59],14:[2,59],50:[2,59],63:[2,59]},{9:[2,36]},{48:94,51:[1,95]},{9:[2,38]},{33:[1,75],55:96},{33:[1,97]},{9:[2,50]},{59:98,61:[1,99]},{9:[2,52]},{33:[1,101],64:100},{14:[2,41],50:[2,41]},{33:[1,78],52:76},{9:[2,49],57:[2,49]},{9:[2,47],57:[2,47]},{14:[2,55],50:[2,55]},{33:[1,84],62:82},{9:[2,56],14:[2,56],50:[2,56]},{9:[2,60],14:[2,60],50:[2,60]}],
-defaultActions: {54:[2,1],55:[2,30],56:[2,31],58:[2,37],59:[2,39],62:[2,32],63:[2,33],64:[2,34],66:[2,51],67:[2,53],69:[2,35],85:[2,36],87:[2,38],90:[2,50],92:[2,52]},
-parseError: function parseError(str, hash) {
-    throw new Error(str);
-},
-parse: function parse(input) {
-    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
-    this.lexer.setInput(input);
-    this.lexer.yy = this.yy;
-    this.yy.lexer = this.lexer;
-    this.yy.parser = this;
-    if (typeof this.lexer.yylloc == "undefined")
-        this.lexer.yylloc = {};
-    var yyloc = this.lexer.yylloc;
-    lstack.push(yyloc);
-    var ranges = this.lexer.options && this.lexer.options.ranges;
-    if (typeof this.yy.parseError === "function")
-        this.parseError = this.yy.parseError;
-    function popStack(n) {
-        stack.length = stack.length - 2 * n;
-        vstack.length = vstack.length - n;
-        lstack.length = lstack.length - n;
-    }
-    function lex() {
-        var token;
-        token = self.lexer.lex() || 1;
-        if (typeof token !== "number") {
-            token = self.symbols_[token] || token;
-        }
-        return token;
-    }
-    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
-    while (true) {
-        state = stack[stack.length - 1];
-        if (this.defaultActions[state]) {
-            action = this.defaultActions[state];
-        } else {
-            if (symbol === null || typeof symbol == "undefined") {
-                symbol = lex();
-            }
-            action = table[state] && table[state][symbol];
-        }
-        if (typeof action === "undefined" || !action.length || !action[0]) {
-            var errStr = "";
-            if (!recovering) {
-                expected = [];
-                for (p in table[state])
-                    if (this.terminals_[p] && p > 2) {
-                        expected.push("'" + this.terminals_[p] + "'");
-                    }
-                if (this.lexer.showPosition) {
-                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
-                } else {
-                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
-                }
-                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
-            }
-        }
-        if (action[0] instanceof Array && action.length > 1) {
-            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
-        }
-        switch (action[0]) {
-        case 1:
-            stack.push(symbol);
-            vstack.push(this.lexer.yytext);
-            lstack.push(this.lexer.yylloc);
-            stack.push(action[1]);
-            symbol = null;
-            if (!preErrorSymbol) {
-                yyleng = this.lexer.yyleng;
-                yytext = this.lexer.yytext;
-                yylineno = this.lexer.yylineno;
-                yyloc = this.lexer.yylloc;
-                if (recovering > 0)
-                    recovering--;
-            } else {
-                symbol = preErrorSymbol;
-                preErrorSymbol = null;
-            }
-            break;
-        case 2:
-            len = this.productions_[action[1]][1];
-            yyval.$ = vstack[vstack.length - len];
-            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
-            if (ranges) {
-                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
-            }
-            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
-            if (typeof r !== "undefined") {
-                return r;
-            }
-            if (len) {
-                stack = stack.slice(0, -1 * len * 2);
-                vstack = vstack.slice(0, -1 * len);
-                lstack = lstack.slice(0, -1 * len);
-            }
-            stack.push(this.productions_[action[1]][0]);
-            vstack.push(yyval.$);
-            lstack.push(yyval._$);
-            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
-            stack.push(newState);
-            break;
-        case 3:
-            return true;
-        }
-    }
-    return true;
-}
-};
-/* generated by jison-lex 0.1.0 */
-var lexer = (function(){
-var lexer = {
-EOF:1,
-parseError:function parseError(str, hash) {
-        if (this.yy.parser) {
-            this.yy.parser.parseError(str, hash);
-        } else {
-            throw new Error(str);
-        }
-    },
-setInput:function (input) {
-        this._input = input;
-        this._more = this._less = this.done = false;
-        this.yylineno = this.yyleng = 0;
-        this.yytext = this.matched = this.match = '';
-        this.conditionStack = ['INITIAL'];
-        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
-        if (this.options.ranges) this.yylloc.range = [0,0];
-        this.offset = 0;
-        return this;
-    },
-input:function () {
-        var ch = this._input[0];
-        this.yytext += ch;
-        this.yyleng++;
-        this.offset++;
-        this.match += ch;
-        this.matched += ch;
-        var lines = ch.match(/(?:\r\n?|\n).*/g);
-        if (lines) {
-            this.yylineno++;
-            this.yylloc.last_line++;
-        } else {
-            this.yylloc.last_column++;
-        }
-        if (this.options.ranges) this.yylloc.range[1]++;
-
-        this._input = this._input.slice(1);
-        return ch;
-    },
-unput:function (ch) {
-        var len = ch.length;
-        var lines = ch.split(/(?:\r\n?|\n)/g);
-
-        this._input = ch + this._input;
-        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
-        //this.yyleng -= len;
-        this.offset -= len;
-        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
-        this.match = this.match.substr(0, this.match.length-1);
-        this.matched = this.matched.substr(0, this.matched.length-1);
-
-        if (lines.length-1) this.yylineno -= lines.length-1;
-        var r = this.yylloc.range;
-
-        this.yylloc = {first_line: this.yylloc.first_line,
-          last_line: this.yylineno+1,
-          first_column: this.yylloc.first_column,
-          last_column: lines ?
-              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
-              this.yylloc.first_column - len
-          };
-
-        if (this.options.ranges) {
-            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
-        }
-        return this;
-    },
-more:function () {
-        this._more = true;
-        return this;
-    },
-less:function (n) {
-        this.unput(this.match.slice(n));
-    },
-pastInput:function () {
-        var past = this.matched.substr(0, this.matched.length - this.match.length);
-        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
-    },
-upcomingInput:function () {
-        var next = this.match;
-        if (next.length < 20) {
-            next += this._input.substr(0, 20-next.length);
-        }
-        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
-    },
-showPosition:function () {
-        var pre = this.pastInput();
-        var c = new Array(pre.length + 1).join("-");
-        return pre + this.upcomingInput() + "\n" + c+"^";
-    },
-next:function () {
-        if (this.done) {
-            return this.EOF;
-        }
-        if (!this._input) this.done = true;
-
-        var token,
-            match,
-            tempMatch,
-            index,
-            col,
-            lines;
-        if (!this._more) {
-            this.yytext = '';
-            this.match = '';
-        }
-        var rules = this._currentRules();
-        for (var i=0;i < rules.length; i++) {
-            tempMatch = this._input.match(this.rules[rules[i]]);
-            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
-                match = tempMatch;
-                index = i;
-                if (!this.options.flex) break;
-            }
-        }
-        if (match) {
-            lines = match[0].match(/(?:\r\n?|\n).*/g);
-            if (lines) this.yylineno += lines.length;
-            this.yylloc = {first_line: this.yylloc.last_line,
-                           last_line: this.yylineno+1,
-                           first_column: this.yylloc.last_column,
-                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
-            this.yytext += match[0];
-            this.match += match[0];
-            this.matches = match;
-            this.yyleng = this.yytext.length;
-            if (this.options.ranges) {
-                this.yylloc.range = [this.offset, this.offset += this.yyleng];
-            }
-            this._more = false;
-            this._input = this._input.slice(match[0].length);
-            this.matched += match[0];
-            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
-            if (this.done && this._input) this.done = false;
-            if (token) return token;
-            else return;
-        }
-        if (this._input === "") {
-            return this.EOF;
-        } else {
-            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
-                    {text: "", token: null, line: this.yylineno});
-        }
-    },
-lex:function lex() {
-        var r = this.next();
-        if (typeof r !== 'undefined') {
-            return r;
-        } else {
-            return this.lex();
-        }
-    },
-begin:function begin(condition) {
-        this.conditionStack.push(condition);
-    },
-popState:function popState() {
-        return this.conditionStack.pop();
-    },
-_currentRules:function _currentRules() {
-        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
-    },
-topState:function () {
-        return this.conditionStack[this.conditionStack.length-2];
-    },
-pushState:function begin(condition) {
-        this.begin(condition);
-    },
-options: {},
-performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
-
-var YYSTATE=YY_START;
-switch($avoiding_name_collisions) {
-case 0:/* skip whitespace */
-break;
-case 1:return 9;
-break;
-case 2:return 4;
-break;
-case 3:return 4;
-break;
-case 4:return 6;
-break;
-case 5:return 6;
-break;
-case 6:return 26;
-break;
-case 7:return 26;
-break;
-case 8:return 28;
-break;
-case 9:return 28;
-break;
-case 10:return 25;
-break;
-case 11:return 25;
-break;
-case 12:return 23;
-break;
-case 13:return 23;
-break;
-case 14:return 34;
-break;
-case 15:return 34;
-break;
-case 16:return 31;
-break;
-case 17:return 31;
-break;
-case 18:return 24;
-break;
-case 19:return 24;
-break;
-case 20:return 56;
-break;
-case 21:return 57;
-break;
-case 22:return 36;
-break;
-case 23:return 12;
-break;
-case 24:return 14;
-break;
-case 25:return 16;
-break;
-case 26:return 16;
-break;
-case 27:return 50;
-break;
-case 28:return 50;
-break;
-case 29:return 38;
-break;
-case 30:return 38;
-break;
-case 31:return 39;
-break;
-case 32:return 39;
-break;
-case 33:return 51;
-break;
-case 34:return 51;
-break;
-case 35:return 53;
-break;
-case 36:return 53;
-break;
-case 37:return 40;
-break;
-case 38:return 40;
-break;
-case 39:return 43;
-break;
-case 40:return 43;
-break;
-case 41:return 44;
-break;
-case 42:return 44;
-break;
-case 43:return 46;
-break;
-case 44:return 46;
-break;
-case 45:return 61;
-break;
-case 46:return 61;
-break;
-case 47:return 63;
-break;
-case 48:return 63;
-break;
-case 49:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 37;
-break;
-case 50:return 27;
-break;
-case 51:return 30;
-break;
-case 52:return 29;
-break;
-case 53:return 33
-break;
-}
-},
-rules: [/^(?:\s+)/,/^(?:$)/,/^(?:FROM\b)/,/^(?:from\b)/,/^(?:TO\b)/,/^(?:to\b)/,/^(?:IP\b)/,/^(?:ip\b)/,/^(?:SUBNET\b)/,/^(?:subnet\b)/,/^(?:ANY\b)/,/^(?:any\b)/,/^(?:ALL\b)/,/^(?:all\b)/,/^(?:TAG\b)/,/^(?:tag\b)/,/^(?:VM\b)/,/^(?:vm\b)/,/^(?:VMS\b)/,/^(?:vms\b)/,/^(?:-)/,/^(?:,)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:OR\b)/,/^(?:or\b)/,/^(?:AND\b)/,/^(?:and\b)/,/^(?:BLOCK\b)/,/^(?:block\b)/,/^(?:ALLOW\b)/,/^(?:allow\b)/,/^(?:PORT\b)/,/^(?:port\b)/,/^(?:PORTS\b)/,/^(?:ports\b)/,/^(?:TCP\b)/,/^(?:tcp\b)/,/^(?:UDP\b)/,/^(?:udp\b)/,/^(?:ICMP\b)/,/^(?:icmp\b)/,/^(?:ICMP6\b)/,/^(?:icmp6\b)/,/^(?:TYPE\b)/,/^(?:type\b)/,/^(?:CODE\b)/,/^(?:code\b)/,/^(?:"(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])*")/,/^(?:(([0-9]){1,3})\.(([0-9]){1,3})\.(([0-9]){1,3})\.(([0-9]){1,3}))/,/^(?:([0-9a-f])*:([0-9a-f])*:[:0-9a-f]*)/,/^(?:\/([0-9]){1,3})/,/^(?:[-a-zA-Z0-9_]+)/],
-conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
-};
-return lexer;
-})();
-parser.lexer = lexer;
-function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
-return new Parser;
-})();
-if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
-exports.parser = parser;
-exports.Parser = parser.Parser;
-exports.parse = function () { return parser.parse.apply(parser, arguments); };
-exports.main = function commonjsMain(args) {
-    if (!args[1]) {
-        console.log('Usage: '+args[0]+' FILE');
-        process.exit(1);
-    }
-    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
-    return exports.parser.parse(source);
-};
-if (typeof module !== 'undefined' && require.main === module) {
-  exports.main(process.argv.slice(1));
-}
-}
diff --git a/node_modules/fw/node_modules/fwrule/rule.js b/node_modules/fw/node_modules/fwrule/rule.js
deleted file mode 100644
index 71bdf7c..0000000
--- a/node_modules/fw/node_modules/fwrule/rule.js
+++ /dev/null
@@ -1,588 +0,0 @@
-/*
- * CDDL HEADER START
- *
- * The contents of this file are subject to the terms of the
- * Common Development and Distribution License, Version 1.0 only
- * (the "License").  You may not use this file except in compliance
- * with the License.
- *
- * You can obtain a copy of the license at http://smartos.org/CDDL
- *
- * See the License for the specific language governing permissions
- * and limitations under the License.
- *
- * When distributing Covered Code, include this CDDL HEADER in each
- * file.
- *
- * If applicable, add the following below this CDDL HEADER, with the
- * fields enclosed by brackets "[]" replaced with your own identifying
- * information: Portions Copyright [yyyy] [name of copyright owner]
- *
- * CDDL HEADER END
- *
- * Copyright (c) 2016, Joyent, Inc. All rights reserved.
- *
- *
- * fwadm: firewall rule model
- */
-
-var mod_net = require('net');
-var mod_uuid = require('node-uuid');
-var sprintf = require('extsprintf').sprintf;
-var util = require('util');
-var validators = require('./validators');
-var verror = require('verror');
-
-
-
-// --- Globals
-
-
-
-var DIRECTIONS = ['to', 'from'];
-// Exported fields that can be in the serialized rule:
-var FIELDS = [
-    'created_by',
-    'description',
-    'enabled',
-    'global',
-    'owner_uuid',
-    'rule',
-    'uuid',
-    'version'
-];
-// Maximum number of targets per side:
-var MAX_TARGETS_PER_SIDE = 24;
-// Maximum number of ports:
-var MAX_PORTS = 8;
-var STRING_PROPS = ['created_by', 'description'];
-var TARGET_TYPES = ['wildcard', 'ip', 'subnet', 'tag', 'vm'];
-
-var icmpr = /^icmp6?$/;
-
-// --- Internal functions
-
-
-
-/**
- * Calls callback for all of the firewall target types
- */
-function forEachTarget(obj, callback) {
-    DIRECTIONS.forEach(function (dir) {
-        if (!obj.hasOwnProperty(dir)) {
-            return;
-        }
-
-        TARGET_TYPES.forEach(function (type) {
-            var name = type + 's';
-            if (!obj[dir].hasOwnProperty(name)) {
-                return;
-            }
-
-            callback(dir, type, type, obj[dir][name]);
-        });
-    });
-}
-
-
-/**
- * Sorts a list of ICMP types (with optional codes)
- */
-function icmpTypeSort(types) {
-    return types.map(function (type) {
-        return type.toString().split(':');
-    }).sort(function (a, b) {
-        var aTot = (Number(a[0]) << 8) + (a.length === 1 ? 0 : Number(a[1]));
-        var bTot = (Number(b[0]) << 8) + (a.length === 1 ? 0 : Number(b[1]));
-        return aTot - bTot;
-    }).map(function (typeArr) {
-        return typeArr.join(':');
-    });
-}
-
-
-/**
- * Adds a tag to an object
- */
-function addTag(obj, tag, val) {
-    if (!obj.hasOwnProperty(tag)) {
-        obj[tag] = {};
-    }
-
-    if (val === undefined || val === null) {
-        obj[tag].all = true;
-        return;
-    }
-
-    if (!obj[tag].hasOwnProperty('values')) {
-        obj[tag].values = {};
-    }
-
-    obj[tag].values[val] = true;
-}
-
-
-/**
- * Creates a list of tags based on an object populated by addTag() above
- */
-function tagList(obj) {
-    var tags = [];
-    Object.keys(obj).sort().forEach(function (tag) {
-        if (obj[tag].hasOwnProperty('all')) {
-            tags.push(tag);
-        } else {
-            Object.keys(obj[tag].values).sort().forEach(function (val) {
-                tags.push([tag, val]);
-            });
-        }
-    });
-    return tags;
-}
-
-
-/**
- * Quotes a string if it contains non-alphanumeric characters
- */
-function quote(str) {
-    var WORD_RE = /[^-a-zA-Z0-9_]/;
-    if (str.search(WORD_RE) !== -1) {
-        return '"' + str + '"';
-    }
-
-    return str;
-}
-
-
-
-// --- Firewall object and methods
-
-
-
-/**
- * Firewall rule constructor
- */
-function FwRule(data, opts) {
-    var errs = [];
-    var parsed;
-
-    if (!opts) {
-        opts = {};
-    }
-
-    // -- validation --
-
-    if (!data.rule && !data.parsed) {
-        errs.push(new validators.InvalidParamError('rule',
-            'No rule specified'));
-    } else {
-        try {
-            parsed = data.parsed || require('./').parse(data.rule, opts);
-        } catch (err) {
-            errs.push(err);
-        }
-    }
-
-    if (data.hasOwnProperty('uuid')) {
-        if (!validators.validateUUID(data.uuid)) {
-            errs.push(new validators.InvalidParamError('uuid',
-                'Invalid rule UUID'));
-        }
-
-        this.uuid = data.uuid;
-    } else {
-        this.uuid = mod_uuid.v4();
-    }
-
-    this.version = data.version || generateVersion();
-
-    if (data.hasOwnProperty('owner_uuid')) {
-        if (!validators.validateUUID(data.owner_uuid)) {
-            errs.push(new validators.InvalidParamError('owner_uuid',
-                'Invalid owner UUID'));
-        }
-        this.owner_uuid = data.owner_uuid;
-    } else {
-        // No owner: this rule will affect all VMs
-        this.global = true;
-    }
-
-    if (data.hasOwnProperty('enabled')) {
-        if (!validators.bool(data.enabled)) {
-            errs.push(new validators.InvalidParamError('enabled',
-                'enabled must be true or false'));
-        }
-
-        this.enabled = data.enabled;
-    } else {
-        this.enabled = false;
-    }
-
-    for (var s in STRING_PROPS) {
-        var str = STRING_PROPS[s];
-        if (data.hasOwnProperty(str)) {
-            try {
-                validators.validateString(str, data[str]);
-                this[str] = data[str];
-            } catch (valErr) {
-                errs.push(valErr);
-            }
-        }
-    }
-
-    if (opts.enforceGlobal) {
-        if (data.hasOwnProperty('global') && !validators.bool(data.global)) {
-            errs.push(new validators.InvalidParamError('global',
-                'global must be true or false'));
-        }
-
-        if (data.hasOwnProperty('global')
-            && data.hasOwnProperty('owner_uuid') && data.global) {
-            errs.push(new validators.InvalidParamError('global',
-                'cannot specify both global and owner_uuid'));
-        }
-
-        if (!data.hasOwnProperty('global')
-            && !data.hasOwnProperty('owner_uuid')) {
-            errs.push(new validators.InvalidParamError('owner_uuid',
-                'owner_uuid required'));
-        }
-    }
-
-    if (errs.length !== 0) {
-        if (errs.length === 1) {
-            throw errs[0];
-        }
-
-        throw new verror.MultiError(errs);
-    }
-
-    // -- translate into the internal rule format --
-
-    var d;
-    var dir;
-
-    this.action = parsed.action;
-    this.protocol = parsed.protocol.name;
-
-    if (icmpr.test(this.protocol)) {
-        this.types = icmpTypeSort(parsed.protocol.targets);
-        this.protoTargets = this.types;
-    } else {
-        this.ports = parsed.protocol.targets.sort(function (a, b) {
-            var first = a.hasOwnProperty('start') ? a.start : a;
-            var second = b.hasOwnProperty('start') ? b.start : b;
-            return Number(first) - Number(second);
-        });
-        this.protoTargets = this.ports;
-    }
-
-    if (this.protoTargets.length > MAX_PORTS) {
-        throw new validators.InvalidParamError('rule',
-            'maximum of %d %s allowed',
-            MAX_TARGETS_PER_SIDE,
-            icmpr.test(this.protocol) ? 'types' : 'ports');
-    }
-
-    this.from = {};
-    this.to = {};
-
-    this.allVMs = false;
-    this.ips = {};
-    this.tags = {};
-    this.vms = {};
-    this.subnets = {};
-    this.wildcards = {};
-
-    var dirs = {
-        'to': {},
-        'from': {}
-    };
-    var numTargets;
-
-    for (d in DIRECTIONS) {
-        dir = DIRECTIONS[d];
-        numTargets = 0;
-        for (var j in parsed[dir]) {
-            var target = parsed[dir][j];
-            var targetName;
-            var name = target[0] + 's';
-
-            numTargets++;
-            if (!dirs[dir].hasOwnProperty(name)) {
-                dirs[dir][name] = {};
-            }
-
-            if (name === 'tags') {
-                var targetVal = null;
-                if (typeof (target[1]) === 'string') {
-                    targetName = target[1];
-                } else {
-                    targetName = target[1][0];
-                    targetVal = target[1][1];
-                }
-
-                addTag(this[name], targetName, targetVal);
-                addTag(dirs[dir][name], targetName, targetVal);
-
-            } else {
-                targetName = target[1];
-                this[name][targetName] = target[1];
-                dirs[dir][name][targetName] = target[1];
-            }
-        }
-
-        if (numTargets > MAX_TARGETS_PER_SIDE) {
-            throw new validators.InvalidParamError('rule',
-                'maximum of %d targets allowed per side',
-                MAX_TARGETS_PER_SIDE);
-        }
-    }
-
-    // Now dedup and sort
-    for (d in DIRECTIONS) {
-        dir = DIRECTIONS[d];
-        for (var t in TARGET_TYPES) {
-            var type = TARGET_TYPES[t] + 's';
-            if (dirs[dir].hasOwnProperty(type)) {
-                if (type === 'tags') {
-                    this[dir][type] = tagList(dirs[dir][type]);
-
-                } else {
-                    this[dir][type] = Object.keys(dirs[dir][type]).sort();
-                }
-            } else {
-                this[dir][type] = [];
-            }
-        }
-    }
-
-    this.ips = Object.keys(this.ips).sort();
-    this.tags = tagList(this.tags);
-    this.vms = Object.keys(this.vms).sort();
-    this.subnets = Object.keys(this.subnets).sort();
-    this.wildcards = Object.keys(this.wildcards).sort();
-
-    if (this.wildcards.length !== 0 && this.wildcards.indexOf('vmall') !== -1) {
-        this.allVMs = true;
-    }
-
-    // Check for rules that obviously don't make sense
-    if (this.protocol === 'icmp') {
-        this.ips.map(function (ip) {
-            if (!mod_net.isIPv4(ip)) {
-                throw new validators.InvalidParamError('rule',
-                    'rule affects ICMPv4 but contains a non-IPv4 address');
-            }
-        });
-        this.subnets.map(function (subnet) {
-            if (!mod_net.isIPv4(subnet.split('/')[0])) {
-                throw new validators.InvalidParamError('rule',
-                    'rule affects ICMPv4 but contains a non-IPv4 subnet');
-            }
-        });
-    } else if (this.protocol === 'icmp6') {
-        this.ips.map(function (ip) {
-            if (!mod_net.isIPv6(ip)) {
-                throw new validators.InvalidParamError('rule',
-                    'rule affects ICMPv6 but contains a non-IPv6 address');
-            }
-        });
-        this.subnets.map(function (subnet) {
-            if (!mod_net.isIPv6(subnet.split('/')[0])) {
-                throw new validators.InvalidParamError('rule',
-                    'rule affects ICMPv6 but contains a non-IPv6 subnet');
-            }
-        });
-    }
-
-    // Final check: does this rule actually contain targets that can actually
-    // affect VMs?
-    if (!this.allVMs && this.tags.length === 0 && this.vms.length === 0) {
-        throw new validators.InvalidParamError('rule',
-            'rule does not affect VMs');
-    }
-}
-
-
-/**
- * Returns the internal representation of the rule
- */
-FwRule.prototype.raw = function () {
-    var raw = {
-        action: this.action,
-        enabled: this.enabled,
-        from: this.from,
-        protocol: this.protocol,
-        to: this.to,
-        uuid: this.uuid,
-        version: this.version
-    };
-
-    if (this.owner_uuid) {
-        raw.owner_uuid = this.owner_uuid;
-    }
-
-    if (icmpr.test(this.protocol)) {
-        raw.types = this.types;
-    } else {
-        raw.ports = this.ports;
-    }
-
-    for (var s in STRING_PROPS) {
-        var str = STRING_PROPS[s];
-        if (this.hasOwnProperty(str)) {
-            raw[str] = this[str];
-        }
-    }
-
-    return raw;
-};
-
-
-/**
- * Returns the serialized version of the rule, suitable for storing
- *
- * @param fields {Array}: fields to return (optional)
- */
-FwRule.prototype.serialize = function (fields) {
-    var ser = {};
-    if (!fields) {
-        fields = FIELDS;
-    }
-
-    for (var f in fields) {
-        var field = fields[f];
-        if (field === 'rule') {
-            ser.rule = this.text();
-        } else if (field === 'global') {
-            // Only display the global flag if true
-            if (this.global) {
-                ser.global = true;
-            }
-        } else {
-            if (this.hasOwnProperty(field)) {
-                ser[field] = this[field];
-            }
-        }
-    }
-
-    return ser;
-};
-
-
-/**
- * Returns the text of the rule
- */
-FwRule.prototype.text = function () {
-    var containsRange;
-    var ports;
-    var protoTxt;
-    var targets = {
-        from: [],
-        to: []
-    };
-
-    forEachTarget(this, function (dir, type, name, arr) {
-        for (var i in arr) {
-            var txt;
-            if (type === 'tag') {
-                txt = util.format('%s %s', type,
-                    typeof (arr[i]) === 'string' ? quote(arr[i])
-                    : (quote(arr[i][0]) + ' = ' + quote(arr[i][1])));
-            } else {
-                txt = util.format('%s %s', type, arr[i]);
-            }
-
-            if (type === 'wildcard') {
-                txt = arr[i] === 'vmall' ? 'all vms' : arr[i];
-            }
-            targets[dir].push(txt);
-        }
-    });
-
-    // Protocol-specific text: different for ICMP rather than TCP/UDP
-    if (icmpr.test(this.protocol)) {
-        protoTxt = util.format('%sTYPE %s%s',
-            this.types.length > 1 ? '(' : '',
-            this.types.map(function (type) {
-                return type.toString().split(':');
-            }).map(function (code) {
-                return code[0] + (code.length === 1 ? '' : ' CODE ' + code[1]);
-            }).join(' AND TYPE '),
-            this.types.length > 1 ? ')' : ''
-        );
-    } else {
-        ports = this.ports.map(function (port) {
-            if (port.hasOwnProperty('start')
-                && port.hasOwnProperty('end')) {
-                /*
-                 * We only output PORTS when we have a range, since we don't
-                 * distinguish PORTS 1, 2 from (PORT 1 AND PORT 2) after
-                 * parsing.
-                 */
-                containsRange = true;
-                return port.start + ' - ' + port.end;
-            } else {
-                return port;
-            }
-        });
-        if (containsRange) {
-            protoTxt = util.format('PORTS %s', ports.join(', '));
-        } else {
-            protoTxt = util.format('%sPORT %s%s',
-                ports.length > 1 ? '(' : '',
-                ports.join(' AND PORT '),
-                ports.length > 1 ? ')' : ''
-            );
-        }
-    }
-
-    return util.format('FROM %s%s%s TO %s%s%s %s %s',
-            targets.from.length > 1 ? '(' : '',
-            targets.from.join(' OR '),
-            targets.from.length > 1 ? ')' : '',
-            targets.to.length > 1 ? '(' : '',
-            targets.to.join(' OR '),
-            targets.to.length > 1 ? ')' : '',
-            this.action.toUpperCase(),
-            this.protocol.toLowerCase(),
-            protoTxt
-    );
-};
-
-
-/**
- * Returns the string representation of the rule
- */
-FwRule.prototype.toString = function () {
-    return util.format('[%s,%s%s] %s', this.uuid, this.enabled,
-            (this.owner_uuid ? ',' + this.owner_uuid : ''),
-            this.text());
-};
-
-
-
-// --- Exported functions
-
-
-
-/**
- * Creates a new firewall rule from the payload
- */
-function createRule(payload, opts) {
-    return new FwRule(payload, opts);
-}
-
-
-function generateVersion() {
-    return Date.now(0) + '.' + sprintf('%06d', process.pid);
-}
-
-module.exports = {
-    create: createRule,
-    generateVersion: generateVersion,
-    DIRECTIONS: DIRECTIONS,
-    FIELDS: FIELDS,
-    FwRule: FwRule,
-    TARGET_TYPES: TARGET_TYPES
-};
diff --git a/node_modules/fw/node_modules/fwrule/validators.js b/node_modules/fw/node_modules/fwrule/validators.js
deleted file mode 100644
index 73ce97e..0000000
--- a/node_modules/fw/node_modules/fwrule/validators.js
+++ /dev/null
@@ -1,220 +0,0 @@
-/*
- * CDDL HEADER START
- *
- * The contents of this file are subject to the terms of the
- * Common Development and Distribution License, Version 1.0 only
- * (the "License").  You may not use this file except in compliance
- * with the License.
- *
- * You can obtain a copy of the license at http://smartos.org/CDDL
- *
- * See the License for the specific language governing permissions
- * and limitations under the License.
- *
- * When distributing Covered Code, include this CDDL HEADER in each
- * file.
- *
- * If applicable, add the following below this CDDL HEADER, with the
- * fields enclosed by brackets "[]" replaced with your own identifying
- * information: Portions Copyright [yyyy] [name of copyright owner]
- *
- * CDDL HEADER END
- *
- * Copyright (c) 2016, Joyent, Inc. All rights reserved.
- *
- */
-
-/*
- * firewall rule parser: validation functions
- */
-
-var net = require('net');
-var util = require('util');
-var VError = require('verror').VError;
-
-
-
-// --- Globals
-
-
-
-var icmpr = /^icmp6?$/;
-var portRE = /^[0-9]{1,5}$/;
-var UUID_REGEX =
-    /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;
-
-
-
-// --- Exports
-
-
-
-/**
- * Constructor for an invalid parameter error
- */
-function InvalidParamError(field) {
-    VError.apply(this, Array.prototype.slice.call(arguments, 1));
-    this.field = field;
-}
-
-util.inherits(InvalidParamError, VError);
-
-
-/**
- * Returns true if ip is a valid IPv4 address, and not all zeroes or
- * the broadcast address
- */
-function validateIPv4address(ip) {
-    if (!net.isIPv4(ip) || (ip == '255.255.255.255') || (ip == '0.0.0.0')) {
-        return false;
-    }
-
-    return true;
-}
-
-
-/**
- * Returns true if subnet is in valid CIDR form
- */
-function validateIPv4subnet(subnet) {
-    var parts = subnet.split('/');
-    if (!validateIPv4address(parts[0])) {
-        return false;
-    }
-
-    if (!Number(parts[1]) || (parts[1] < 1) || (parts[1] > 32)) {
-        return false;
-    }
-
-    return true;
-}
-
-
-/**
- * Returns true if subnet is a valid IPv6 CIDR range
- */
-function validateIPv6subnet(subnet) {
-    var parts = subnet.split('/');
-    var plen = Number(parts[1]);
-    if (!net.isIPv6(parts[0])) {
-        return false;
-    }
-
-    if (!plen || (plen < 1) || (plen > 128)) {
-        return false;
-    }
-
-    return true;
-}
-
-
-/**
- * Returns true if port is a valid port number
- */
-function validatePort(port) {
-    if (!portRE.exec(port)) {
-        return false;
-    }
-
-    var portNum = Number(port);
-
-    if (isNaN(portNum) || portNum > 65535 || portNum < 1) {
-        return false;
-    }
-
-    return true;
-}
-
-/**
- * Returns true if port is a valid port number or 'all'
- */
-function validatePortOrAll(port) {
-    if (validatePort(port)) {
-        return true;
-    }
-
-    if (typeof (port) !== 'string') {
-        return false;
-    }
-
-    if (port.toLowerCase() === 'all') {
-        return true;
-    }
-
-    return false;
-}
-
-/**
- * Returns true if protocol is one of tcp, udp, icmp (mixing of upper
- * and lower-case allowed)
- */
-function validateProtocol(protocol) {
-    var protoLC = protocol.toLowerCase();
-    if ((protoLC != 'tcp') && (protoLC != 'udp') && (!icmpr.test(protoLC))) {
-        return false;
-    }
-    return true;
-}
-
-
-/**
- * Returns true if action is a valid firewall action ('allow' or 'block',
- * mixed case allowed)
- */
-function validateAction(action) {
-    var actionLC = action.toLowerCase();
-    if ((actionLC != 'allow') && (actionLC != 'block')) {
-        return false;
-    }
-    return true;
-}
-
-
-/**
- * Returns true if bool is a valid boolean value, false otherwise
- */
-function validateBoolean(bool) {
-    if (typeof (bool) !== 'boolean' && bool !== 'true' && bool !== 'false') {
-        return false;
-    }
-
-    return true;
-}
-
-
-/**
- * Throws an InvalidParamError if the string is invalid
- */
-function validateString(name, str) {
-    if (typeof (str) !== 'string') {
-        throw new InvalidParamError(name, name + ' must be a string');
-    }
-
-    if (str.length > 255) {
-        throw new InvalidParamError(name,
-            name + ' must be shorter than 255 characters');
-    }
-}
-
-
-/**
- * Returns true if uuid is a valid UUID
- */
-function validateUUID(uuid) {
-    return UUID_REGEX.test(uuid);
-}
-
-
-module.exports = {
-    bool: validateBoolean,
-    InvalidParamError: InvalidParamError,
-    validateAction: validateAction,
-    validateIPv4address: validateIPv4address,
-    validateIPv4subnet: validateIPv4subnet,
-    validateIPv6subnet: validateIPv6subnet,
-    validatePort: validatePort,
-    validatePortOrAll: validatePortOrAll,
-    validateProtocol: validateProtocol,
-    validateString: validateString,
-    validateUUID: validateUUID
-};
diff --git a/node_modules/fw/node_modules/mkdirp/LICENSE b/node_modules/fw/node_modules/mkdirp/LICENSE
deleted file mode 100644
index 432d1ae..0000000
--- a/node_modules/fw/node_modules/mkdirp/LICENSE
+++ /dev/null
@@ -1,21 +0,0 @@
-Copyright 2010 James Halliday (mail@substack.net)
-
-This project is free software released under the MIT/X11 license:
-
-Permission is hereby granted, free of charge, to any person obtaining a copy
-of this software and associated documentation files (the "Software"), to deal
-in the Software without restriction, including without limitation the rights
-to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-copies of the Software, and to permit persons to whom the Software is
-furnished to do so, subject to the following conditions:
-
-The above copyright notice and this permission notice shall be included in
-all copies or substantial portions of the Software.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-THE SOFTWARE.
diff --git a/node_modules/fw/node_modules/mkdirp/index.js b/node_modules/fw/node_modules/mkdirp/index.js
deleted file mode 100644
index fda6de8..0000000
--- a/node_modules/fw/node_modules/mkdirp/index.js
+++ /dev/null
@@ -1,82 +0,0 @@
-var path = require('path');
-var fs = require('fs');
-
-module.exports = mkdirP.mkdirp = mkdirP.mkdirP = mkdirP;
-
-function mkdirP (p, mode, f, made) {
-    if (typeof mode === 'function' || mode === undefined) {
-        f = mode;
-        mode = 0777 & (~process.umask());
-    }
-    if (!made) made = null;
-
-    var cb = f || function () {};
-    if (typeof mode === 'string') mode = parseInt(mode, 8);
-    p = path.resolve(p);
-
-    fs.mkdir(p, mode, function (er) {
-        if (!er) {
-            made = made || p;
-            return cb(null, made);
-        }
-        switch (er.code) {
-            case 'ENOENT':
-                mkdirP(path.dirname(p), mode, function (er, made) {
-                    if (er) cb(er, made);
-                    else mkdirP(p, mode, cb, made);
-                });
-                break;
-
-            // In the case of any other error, just see if there's a dir
-            // there already.  If so, then hooray!  If not, then something
-            // is borked.
-            default:
-                fs.stat(p, function (er2, stat) {
-                    // if the stat fails, then that's super weird.
-                    // let the original error be the failure reason.
-                    if (er2 || !stat.isDirectory()) cb(er, made)
-                    else cb(null, made);
-                });
-                break;
-        }
-    });
-}
-
-mkdirP.sync = function sync (p, mode, made) {
-    if (mode === undefined) {
-        mode = 0777 & (~process.umask());
-    }
-    if (!made) made = null;
-
-    if (typeof mode === 'string') mode = parseInt(mode, 8);
-    p = path.resolve(p);
-
-    try {
-        fs.mkdirSync(p, mode);
-        made = made || p;
-    }
-    catch (err0) {
-        switch (err0.code) {
-            case 'ENOENT' :
-                made = sync(path.dirname(p), mode, made);
-                sync(p, mode, made);
-                break;
-
-            // In the case of any other error, just see if there's a dir
-            // there already.  If so, then hooray!  If not, then something
-            // is borked.
-            default:
-                var stat;
-                try {
-                    stat = fs.statSync(p);
-                }
-                catch (err1) {
-                    throw err0;
-                }
-                if (!stat.isDirectory()) throw err0;
-                break;
-        }
-    }
-
-    return made;
-};
diff --git a/node_modules/fw/node_modules/node-uuid/LICENSE.md b/node_modules/fw/node_modules/node-uuid/LICENSE.md
deleted file mode 100644
index bcdddf9..0000000
--- a/node_modules/fw/node_modules/node-uuid/LICENSE.md
+++ /dev/null
@@ -1,3 +0,0 @@
-Copyright (c) 2010 Robert Kieffer
-
-Dual licensed under the [MIT](http://en.wikipedia.org/wiki/MIT_License) and [GPL](http://en.wikipedia.org/wiki/GNU_General_Public_License) licenses.
diff --git a/node_modules/fw/node_modules/node-uuid/index.js b/node_modules/fw/node_modules/node-uuid/index.js
deleted file mode 100644
index 76328cd..0000000
--- a/node_modules/fw/node_modules/node-uuid/index.js
+++ /dev/null
@@ -1,257 +0,0 @@
-/*
- * Generate RFC4122 (v1 and v4) UUIDs
- *
- * Documentation at https://github.com/broofa/node-uuid
- */
-(function() {
-  // Use WHATWG crypto api if available, otherwise shim it
-  // http://wiki.whatwg.org/wiki/Crypto
-  //
-  // (Create a static _rnds array here as well, which lets us avoid per-uuid
-  // array creation)
-  var crypto, _rnds;
-  if (crypto && crypto.getRandomValues) {
-    _rnds = new Uint32Array(4);
-  } else {
-    _rnds = new Array(4);
-    // Math.random does not have the cryptographic-quality guarantee for
-    // randomness that crypto.getRandomValues has, but it's the best we have.
-    crypto = {
-      getRandomValues: function(arr) {
-        for (var i = 0, l = arr.length; i < l; i++) {
-          _rnds[i] = Math.random() * 0x100000000;
-        }
-      }
-    };
-  }
-
-  // Use node.js Buffer class if available, otherwise use the Array class
-  var BufferClass = typeof(Buffer) == 'function' ? Buffer : Array;
-
-  // Maps for number <-> hex string conversion
-  var _octetToHex = [];
-  var _hexToOctet = {};
-  for (var i = 0; i < 256; i++) {
-    _octetToHex[i] = (i + 0x100).toString(16).substr(1);
-    _hexToOctet[_octetToHex[i]] = i;
-  }
-
-  /**
-   * Parse a uuid string into it's component octets.
-   *
-   * This is a loose parser.  It parses the first 16 octet pairs as hex
-   * values.  If fewer than 16 are found, any remaining entries in the array
-   * are set to zero.
-   *
-   * @param s (String) string to parse.
-   * @param buf (Array|Buffer) Optional buffer to capture parsed values in
-   * @param offset (Number) Optional starting offset into buf
-   */
-  function parse(s, buf, offset) {
-    var buf = buf || new BufferClass(16),
-        i = offset || 0,
-        ii = 0;
-    s.toLowerCase().replace(/[0-9a-f]{2}/g, function(octet) {
-      if (ii < 16) { // Don't overflow!
-        buf[i + ii++] = _hexToOctet[octet];
-      }
-    });
-
-    // Zero out remaining octets if string was short
-    while (ii < 16) {
-      buf[i + ii] = 0;
-    }
-
-    return buf;
-  }
-
-  /**
-   * Generate a uuid string from octet array
-   *
-   * @param buf (Array|Buffer) Optional buffer to pull octets from
-   * @param offset (Number) Optional starting offset into buf
-   */
-  function unparse(buf, offset) {
-    var oth = _octetToHex,
-        b = buf,
-        i = offset || 0;
-    return  oth[b[i + 0]] + oth[b[i + 1]] +
-            oth[b[i + 2]] + oth[b[i + 3]] + '-' +
-            oth[b[i + 4]] + oth[b[i + 5]] + '-' +
-            oth[b[i + 6]] + oth[b[i + 7]] + '-' +
-            oth[b[i + 8]] + oth[b[i + 9]] + '-' +
-            oth[b[i + 10]] + oth[b[i + 11]] +
-            oth[b[i + 12]] + oth[b[i + 13]] +
-            oth[b[i + 14]] + oth[b[i + 15]];
-  }
-
-  /**
-   * Create and return octets for a 48-bit node id:
-   * 47 bits random, 1 bit (multicast) set to 1
-   */
-  function _randomNodeId() {
-    crypto.getRandomValues(_rnds);
-
-    return [
-      _rnds[0] & 0xff | 0x01, // Set multicast bit, per 4.1.6 and 4.5
-      _rnds[0] >>> 8 & 0xff,
-      _rnds[0] >>> 16 & 0xff,
-      _rnds[0] >>> 24 & 0xff,
-      _rnds[1] & 0xff,
-      _rnds[1] >>> 8 & 0xff
-    ];
-  }
-
-  // Pre-allocate arrays to avoid per-uuid array creation
-  var _buf = new BufferClass(16);
-
-  //
-  // v1 UUID support
-  //
-  // Inspired by https://github.com/LiosK/UUID.js
-  // and http://docs.python.org/library/uuid.html
-  //
-
-  // Per 4.1.4 - Offset (in msecs) from JS time to UUID (gregorian) time
-  var EPOCH_OFFSET = 12219292800000;
-
-  // Per 4.1.4 - UUID time has 100ns resolution
-  // Per 4.2.1.2 - Count of uuids may be used with low resolution clocks
-  var UUIDS_PER_TICK = 10000;
-
-  // Per 4.5, use a random node id
-  var _nodeId = _randomNodeId();
-
-  // Per 4.2.2, use 14 bit random unsigned integer to initialize clock_seq
-  var _clockSeq = _rnds[2] & 0x3fff;
-
-  // Time of previous uuid creation
-  var _last = 0;
-
-  // # of UUIDs that have been created during current millisecond time tick
-  var _count = 0;
-
-  /**
-   * See docs at https://github.com/broofa/node-uuid
-   */
-  function v1(options, buf, offset) {
-    options = typeof(options) == 'string' ? {format: options} : options || {};
-
-    var b = options.format != 'binary' ? _buf :
-            (buf ? buf : new BufferClass(16));
-    var i = buf && offset || 0;
-
-    // JS Numbers don't have sufficient resolution for keeping time in
-    // 100-nanosecond units, as spec'ed by the RFC, so we kind of kludge things
-    // here by tracking time in JS-msec units, with a second var for the
-    // additional 100-nanosecond units to add to the millisecond-based time.
-    var msecs = 0; // JS time (msecs since Unix epoch)
-    var nsecs = 0; // Additional time (100-nanosecond units), added to msecs
-
-    // Get msecs & nsecs
-    if (options.msecs == null) {
-      // Per 4.2.1.2, use uuid count to simulate higher resolution clock
-      // Get current time and simulate higher clock resolution
-      msecs = new Date().getTime() + EPOCH_OFFSET;
-      _count = (msecs == _last) ? _count + 1 : 0;
-
-      // Per 4.2.1.2 If generator overruns, throw an error
-      // (*Highly* unlikely - requires generating > 10M uuids/sec)
-      if (_count == UUIDS_PER_TICK) {
-        throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
-      }
-
-      // Per 4.2.1.2, if time regresses bump the clock sequence.
-      if (msecs < _last) {
-        _clockSeq++;
-        _count = 0;
-      }
-
-      _last = msecs;
-      nsecs = _count;
-    } else {
-      msecs = options.msecs + EPOCH_OFFSET;
-      nsecs = options.nsecs || 0;
-    }
-    // Per 4.1.4, timestamp composition
-    // time is uuid epoch time in _msecs_
-    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
-    var tmh = ((msecs / 0x100000000) * 10000) & 0xfffffff;
-    var tm = tmh & 0xffff, th = tmh >> 16;
-    var thav = (th & 0xfff) | 0x1000; // Set version, per 4.1.3
-
-    // Clock sequence
-    var cs = options.clockseq != null ? options.clockseq : _clockSeq;
-
-    // time_low
-    b[i++] = tl >>> 24 & 0xff;
-    b[i++] = tl >>> 16 & 0xff;
-    b[i++] = tl >>> 8 & 0xff;
-    b[i++] = tl & 0xff;
-
-    // time_mid
-    b[i++] = tm >>> 8 & 0xff;
-    b[i++] = tm & 0xff;
-
-    // time_high_and_version
-    b[i++] = thav >>> 8 & 0xff;
-    b[i++] = thav & 0xff;
-
-    // clock_seq_hi_and_reserved (include variant, per 4.2.2)
-    b[i++] = (cs >>> 8) | 0x80;
-
-    // clock_seq_low
-    b[i++] = cs & 0xff;
-
-    // node
-    var node = options.node || _nodeId;
-    for (var n = 0; n < 6; n++) {
-      b[i + n] = node[n];
-    }
-
-    return options.format == null ? unparse(b) : b;
-  }
-
-  //
-  // v4 UUID support
-  //
-
-  /**
-   * See docs at https://github.com/broofa/node-uuid
-   */
-  function v4(options, buf, offset) {
-    options = typeof(options) == 'string' ? {format: options} : options || {};
-
-    var b = options.format != 'binary' ? _buf :
-            (buf ? buf : new BufferClass(16));
-    var i = buf && offset || 0;
-
-    var rnds = options.random || crypto.getRandomValues(_rnds);
-
-    // v4 ideas are all random bits
-    for (var c = 0 ; c < 16; c++) {
-      var ri = c >> 2,
-          rb = (c & 0x03) * 8;
-      b[i + c] = _rnds[ri] >>> rb & 0xff;
-    }
-
-    // ... except for this
-    b[i + 6] = (b[i + 6] & 0x0f) | 0x40; // Per RFC4122 sect. 4.1.3
-    b[i + 8] = (b[i + 8] & 0x3f) | 0x80; // Per RFC4122 sect. 4.4
-
-    return options.format == null ? unparse(b) : b;
-  }
-
-  var uuid = v4;
-  uuid.v1 = v1;
-  uuid.v4 = v4;
-  uuid.parse = parse;
-  uuid.unparse = unparse;
-  uuid.BufferClass = BufferClass;
-
-  if (typeof(module) != 'undefined') {
-    module.exports = uuid;
-  } else {
-    this.uuid = uuid;
-  }
-}());
diff --git a/node_modules/fw/node_modules/strsplit/LICENSE b/node_modules/fw/node_modules/strsplit/LICENSE
deleted file mode 100644
index cbc0bb3..0000000
--- a/node_modules/fw/node_modules/strsplit/LICENSE
+++ /dev/null
@@ -1,19 +0,0 @@
-Copyright (c) 2012, Joyent, Inc. All rights reserved.
-
-Permission is hereby granted, free of charge, to any person obtaining a copy
-of this software and associated documentation files (the "Software"), to deal
-in the Software without restriction, including without limitation the rights
-to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-copies of the Software, and to permit persons to whom the Software is
-furnished to do so, subject to the following conditions:
-
-The above copyright notice and this permission notice shall be included in
-all copies or substantial portions of the Software.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-THE SOFTWARE
diff --git a/node_modules/fw/node_modules/strsplit/index.js b/node_modules/fw/node_modules/strsplit/index.js
deleted file mode 100644
index 92dca0e..0000000
--- a/node_modules/fw/node_modules/strsplit/index.js
+++ /dev/null
@@ -1,64 +0,0 @@
-/*
- * strsplit.js: split a string
- */
-module.exports = strsplit;
-module.exports.strsplit = strsplit;
-
-function strsplit(str, pattern, limit)
-{
-	var i, rv, last, match;
-
-	/*
-	 * If "limit" is not specified or is negative, our behavior is exactly
-	 * the same as JavaScript's String.split function.
-	 */
-	if (arguments.length == 2 || limit < 0)
-		return (str.split(pattern));
-
-	if (limit == 1)
-		return ([ str ]);
-
-	if (limit === undefined)
-		limit = -1;
-
-	if (pattern === undefined)
-		pattern = /\s+/g;
-	else if (typeof (pattern) == 'string')
-		/* Quote the regexp. */
-		pattern = new RegExp(
-		    /* JSSTYLED */
-		    pattern.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1"), 'g');
-	else
-		pattern = new RegExp(pattern.source, 'g');
-
-	/*
-	 * The end condition is a bit unusual: if limit is 0 or negative, we're
-	 * supposed to split as many times as we can.  Otherwise, we're
-	 * constrainted by the value of "limit".
-	 */
-	rv = [];
-	last = 0;
-	for (i = 0; limit <= 0 || i < limit - 1; i++) {
-		match = pattern.exec(str);
-
-		if (!match)
-			break;
-
-		rv.push(str.substr(last, pattern.lastIndex - last -
-		    match[0].length));
-		last = pattern.lastIndex;
-	}
-
-	rv.push(str.substr(last));
-
-	if (limit === 0) {
-		for (i = rv.length - 1; i > 0; i--) {
-			if (rv[i].length > 0)
-				break;
-		}
-
-		rv = rv.slice(0, i + 1);
-	}
-
-	return (rv);
-}
diff --git a/node_modules/fw/node_modules/tab.js b/node_modules/fw/node_modules/tab.js
deleted file mode 100644
index ca1e080..0000000
--- a/node_modules/fw/node_modules/tab.js
+++ /dev/null
@@ -1,298 +0,0 @@
-/*
- * tab.js: Unix-style tables for command line utilities
- */
-
-var mod_assert = require('assert-plus');
-var mod_carrier = require('carrier');
-var mod_events = require('events');
-var mod_extsprintf = require('extsprintf');
-var mod_strsplit = require('strsplit');
-var mod_util = require('util');
-
-/* Public interface */
-exports.emitTable = emitTable;
-exports.TableOutputStream = TableOutputStream;
-exports.TableInputStream = TableInputStream;
-
-function fprintf(stream)
-{
-	var args = Array.prototype.slice.call(arguments, 1);
-	var str = mod_extsprintf.sprintf.apply(null, args);
-	stream.write(str);
-}
-
-/*
- * Named arguments:
- *
- *    columns		array of objects describing each column, each with the
- *    			following properties:
- *
- *				label		column name, used to index row
- *						fields
- *
- *				[alias]		visible column header
- *						default: same as label
- *
- *				[width]		column field width
- *						default: label length
- *
- *				[align]		"left" or "right"
- *						default: "left"
- *
- *			For convenience, you can use a string instead of an
- *			object, in which case the string becomes the label and
- *			defaults are used for "alias", "width" and "align".
- *
- *    [omitHeader]	don't emit the header row
- *    			default: false
- *
- *    [columnSeparator]	string to use to separate columns
- *    			default: ' '
- *
- *    [rowSeparator]	string to use to separate rows
- *    			default: '\n'
- *
- *    [stream]		output stream
- *    			default: process.stdout
- */
-function TableOutputStream(args)
-{
-	var out, sep, cols, label, emit;
-
-	mod_assert.object(args, 'args');
-	mod_assert.ok(Array.isArray(args.columns),
-	    'args.columns must be an array');
-	mod_assert.optionalObject(args.stream, 'args.stream');
-	mod_assert.optionalString(args.columnSeparator, 'args.columnSeparator');
-	mod_assert.optionalString(args.rowSeparator, 'args.rowSeparator');
-
-	out = args.stream || process.stdout;
-	sep = args.columnSeparator || ' ';
-	cols = [];
-
-	this.tos_out = out;
-	this.tos_cols = cols;
-	this.tos_header = args['omitHeader'] ? false : true;
-	this.tos_endrecord = args.rowSeparator || '\n';
-	this.tos_sep = sep;
-
-	args.columns.forEach(function (col, i) {
-		var fmt;
-
-		if (typeof (col) == 'string') {
-			cols.push({
-			    'label': col,
-			    'alias': col,
-			    'align': 'left',
-			    'emit': function (value, last) {
-				fprintf(out, '%s' + (last ? '' : sep), value);
-			    }
-			});
-
-			return;
-		}
-
-		label = 'args.columns[' + i + ']';
-		mod_assert.object(col, label);
-		mod_assert.optionalString(col.label, label + '.label');
-		mod_assert.optionalString(col.alias, label + '.alias');
-
-		mod_assert.optionalNumber(col.width, label + '.width');
-		if (col.hasOwnProperty('width'))
-			mod_assert.ok(col.width > 0,
-			    label + '.width must be a positive number');
-
-		mod_assert.optionalString(col.align, label + '.align');
-		if (col.hasOwnProperty('align'))
-			mod_assert.ok(col.align == 'left' ||
-			    col.align == 'right',
-			    label + '.align must be "left" or "right"');
-
-		if (!col['width'])
-			fmt = '%s';
-		else if (!col['align'] || col['align'] == 'left')
-			fmt = '%-' + col['width'] + 's';
-		else
-			fmt = '%' + col['width'] + 's';
-
-		emit = function (value, last) {
-			fprintf(out, last ? fmt : fmt + sep, value);
-		};
-
-		cols.push({
-		    'label': col.label || '',
-		    'alias': col.alias || col.label || '',
-		    'align': col.align || 'left',
-		    'width': col.width,
-		    'emit': emit
-		});
-	});
-}
-
-/*
- * Explicitly write out a header row.
- */
-TableOutputStream.prototype.writeHeader = function ()
-{
-	var cols = this.tos_cols;
-
-	cols.forEach(function (col, j) {
-		col.emit(col['alias'], j == cols.length - 1);
-	});
-
-	this.tos_out.write(this.tos_endrecord);
-};
-
-/*
- * Emit a single row.  If a header should be emitted but hasn't yet been,
- * it will be emitted before the row is emitted.  The row itself may be one of
- * the following:
- *
- * 	(1) An object with properties corresponding to the table's columns.  For
- *	    example, if the column has labels "pid" and "cmd", each row should
- *	    be an object with these properties.  Missing properties are treated
- *	    as an empty string.
- *
- * 	(2) An array of objects with a toString method.  The nth entry of the
- *	    array is taken as the value of the nth column.  Missing columns are
- *	    treated as an empty string.
- */
-TableOutputStream.prototype.writeRow = function (row)
-{
-	var cols, i, n, val;
-
-	cols = this.tos_cols;
-
-	if (this.tos_header) {
-		this.writeHeader();
-		this.tos_header = false;
-	}
-
-	if (Array.isArray(row)) {
-		n = Math.min(row.length, cols.length);
-		for (i = 0; i < n; i++)
-			cols[i].emit(row[i], i == n - 1);
-
-		for (; i < cols.length; i++)
-			cols[i].emit('', i == cols.length - 1);
-	} else {
-		for (i = 0; i < cols.length; i++) {
-			val =
-			    row.hasOwnProperty(cols[i]['label']) ?
-			    row[cols[i]['label']] : '';
-			cols[i].emit(val, i == cols.length - 1);
-		}
-	}
-
-	this.tos_out.write(this.tos_endrecord);
-};
-
-
-/*
- * Shorthand for creating a TableOutputStream and emitting a bunch of rows.  The
- * arguments are exactly the same as those for TableOutputStream, with the
- * addition of a required property:
- *
- * 	rows		Array of rows, each of which will become an argument to
- * 			TableOutputStream.writeRow().
- */
-function emitTable(args)
-{
-	mod_assert.object(args);
-	mod_assert.ok(Array.isArray(args.rows), 'args.rows must be an array');
-
-	var stream = new TableOutputStream(args);
-	args.rows.forEach(function (row) { stream.writeRow(row); });
-}
-
-/*
- * Stream tabular input.  Arguments:
- *
- *     stream			Input stream (e.g., process.stdin)
- *
- *     [columns]		Array of column names
- *     				Default: inferred from first line of input
- *
- *     [noTrimStart]		If true, leading whitespace is not trimmed from
- *     				each row.  Most Unix tools (e.g., awk, bash) do
- *     				trim whitespace.
- *     				Default: false
- *
- *     [encoding]		Text encoding
- *     				Default: 'utf8'
- *
- *     [columnSeparator]	String or regex for splitting columns.
- *     				Default: /\s+/
- *
- *     [rowSeparator]		String or regex for splitting rows
- *     				Default: '\n'
- *
- *     [format]			Format of emitted records ('object' | 'array')
- *     				Default: 'object'
- */
-function TableInputStream(args)
-{
-	mod_assert.object(args);
-	mod_assert.object(args.stream);
-
-	mod_assert.optionalString(args.format);
-	if (args.format) {
-		mod_assert.ok(args.format == 'array' ||
-		    args.format == 'object');
-	}
-
-	if (args.columns)
-		this.tis_cols = args.columns.slice(0);
-
-	this.tis_notrim = args.noTrimStart || false;
-	this.tis_stream = args.stream;
-	this.tis_encoding = args.encoding || 'utf8';
-	this.tis_colsep = args.columnSeparator;
-	if (!this.tis_colsep)
-		this.tis_colsep = /\s+/;
-
-	if (!(this.tis_colsep instanceof RegExp))
-		this.tis_colsep = new RegExp(this.tis_colsep);
-
-	this.tis_rowsep = args.rowSeparator || '\n';
-	this.tis_format = args.format || 'object';
-	this.tis_carrier = mod_carrier.carry(this.tis_stream,
-	    this.onLine.bind(this), this.tis_encoding, this.tis_rowsep);
-
-	this.tis_stream.on('close', this.emit.bind(this));
-	this.tis_stream.on('end', this.emit.bind(this));
-	this.tis_stream.on('error', this.emit.bind(this));
-
-	mod_events.EventEmitter();
-}
-
-mod_util.inherits(TableInputStream, mod_events.EventEmitter);
-
-TableInputStream.prototype.onLine = function (line)
-{
-	var parts, rv, i;
-
-	if (!this.tis_notrim)
-		line = line.replace(/^\s+/, '');
-
-	if (!this.tis_cols) {
-		this.tis_cols = mod_strsplit(line, this.tis_colsep);
-		return;
-	}
-
-	parts = mod_strsplit(line, this.tis_colsep, this.tis_cols.length);
-
-	for (i = parts.length; i < this.tis_cols.length; i++)
-		parts.push('');
-
-	if (this.tis_format == 'array') {
-		this.emit('row', parts);
-		return;
-	}
-
-	rv = {};
-	for (i = 0; i < this.tis_cols.length; i++)
-		rv[this.tis_cols[i]] = parts[i];
-
-	this.emit('row', rv);
-};
diff --git a/node_modules/fw/node_modules/vasync.js b/node_modules/fw/node_modules/vasync.js
deleted file mode 100644
index dc262ce..0000000
--- a/node_modules/fw/node_modules/vasync.js
+++ /dev/null
@@ -1,610 +0,0 @@
-/*
- * vasync.js: utilities for observable asynchronous control flow
- */
-
-var mod_assert = require('assert');
-var mod_events = require('events');
-var mod_util = require('util');
-var mod_verror = require('verror');
-
-/*
- * Public interface
- */
-exports.parallel = parallel;
-exports.forEachParallel = forEachParallel;
-exports.pipeline = pipeline;
-exports.forEachPipeline = forEachPipeline;
-exports.queue = queue;
-exports.queuev = queuev;
-exports.barrier = barrier;
-exports.waterfall = waterfall;
-
-if (!global.setImmediate) {
-	global.setImmediate = function (func) {
-		var args = Array.prototype.slice.call(arguments, 1);
-		args.unshift(0);
-		args.unshift(func);
-		setTimeout.apply(this, args);
-	};
-}
-
-/*
- * This is incorporated here from jsprim because jsprim ends up pulling in a lot
- * of dependencies.  If we end up needing more from jsprim, though, we should
- * add it back and rip out this function.
- */
-function isEmpty(obj)
-{
-	var key;
-	for (key in obj)
-		return (false);
-	return (true);
-}
-
-/*
- * Given a set of functions that complete asynchronously using the standard
- * callback(err, result) pattern, invoke them all and merge the results.  See
- * README.md for details.
- */
-function parallel(args, callback)
-{
-	var funcs, rv, doneOne, i;
-
-	mod_assert.equal(typeof (args), 'object', '"args" must be an object');
-	mod_assert.ok(Array.isArray(args['funcs']),
-	    '"args.funcs" must be specified and must be an array');
-	mod_assert.equal(typeof (callback), 'function',
-	    'callback argument must be specified and must be a function');
-
-	funcs = args['funcs'].slice(0);
-
-	rv = {
-	    'operations': new Array(funcs.length),
-	    'successes': [],
-	    'ndone': 0,
-	    'nerrors': 0
-	};
-
-	if (funcs.length === 0) {
-		setImmediate(function () { callback(null, rv); });
-		return (rv);
-	}
-
-	doneOne = function (entry) {
-		return (function (err, result) {
-			mod_assert.equal(entry['status'], 'pending');
-
-			entry['err'] = err;
-			entry['result'] = result;
-			entry['status'] = err ? 'fail' : 'ok';
-
-			if (err)
-				rv['nerrors']++;
-			else
-				rv['successes'].push(result);
-
-			if (++rv['ndone'] < funcs.length)
-				return;
-
-			var errors = rv['operations'].filter(function (ent) {
-				return (ent['status'] == 'fail');
-			}).map(function (ent) { return (ent['err']); });
-
-			if (errors.length > 0)
-				callback(new mod_verror.MultiError(errors), rv);
-			else
-				callback(null, rv);
-		});
-	};
-
-	for (i = 0; i < funcs.length; i++) {
-		rv['operations'][i] = {
-			'func': funcs[i],
-			'funcname': funcs[i].name || '(anon)',
-			'status': 'pending'
-		};
-
-		funcs[i](doneOne(rv['operations'][i]));
-	}
-
-	return (rv);
-}
-
-/*
- * Exactly like parallel, except that the input is specified as a single
- * function to invoke on N different inputs (rather than N functions).  "args"
- * must have the following fields:
- *
- *	func		asynchronous function to invoke on each input value
- *
- *	inputs		array of input values
- */
-function forEachParallel(args, callback)
-{
-	var func, funcs;
-
-	mod_assert.equal(typeof (args), 'object', '"args" must be an object');
-	mod_assert.equal(typeof (args['func']), 'function',
-	    '"args.func" must be specified and must be a function');
-	mod_assert.ok(Array.isArray(args['inputs']),
-	    '"args.inputs" must be specified and must be an array');
-
-	func = args['func'];
-	funcs = args['inputs'].map(function (input) {
-		return (function (subcallback) {
-			return (func(input, subcallback));
-		});
-	});
-
-	return (parallel({ 'funcs': funcs }, callback));
-}
-
-/*
- * Like parallel, but invokes functions in sequence rather than in parallel
- * and aborts if any function exits with failure.  Arguments include:
- *
- *    funcs	invoke the functions in parallel
- *
- *    arg	first argument to each pipeline function
- */
-function pipeline(args, callback)
-{
-	var funcs, uarg, rv, next;
-
-	mod_assert.equal(typeof (args), 'object', '"args" must be an object');
-	mod_assert.ok(Array.isArray(args['funcs']),
-	    '"args.funcs" must be specified and must be an array');
-
-	funcs = args['funcs'].slice(0);
-	uarg = args['arg'];
-
-	rv = {
-	    'operations': funcs.map(function (func) {
-		return ({
-		    'func': func,
-		    'funcname': func.name || '(anon)',
-		    'status': 'waiting'
-		});
-	    }),
-	    'successes': [],
-	    'ndone': 0,
-	    'nerrors': 0
-	};
-
-	if (funcs.length === 0) {
-		setImmediate(function () { callback(null, rv); });
-		return (rv);
-	}
-
-	next = function (err, result) {
-		if (rv['nerrors'] > 0 ||
-		    rv['ndone'] >= rv['operations'].length) {
-			throw new mod_verror.VError('pipeline callback ' +
-			    'invoked after the pipeline has already ' +
-			    'completed (%j)', rv);
-		}
-
-		var entry = rv['operations'][rv['ndone']++];
-
-		mod_assert.equal(entry['status'], 'pending');
-
-		entry['status'] = err ? 'fail' : 'ok';
-		entry['err'] = err;
-		entry['result'] = result;
-
-		if (err)
-			rv['nerrors']++;
-		else
-			rv['successes'].push(result);
-
-		if (err || rv['ndone'] == funcs.length) {
-			callback(err, rv);
-		} else {
-			var nextent = rv['operations'][rv['ndone']];
-			nextent['status'] = 'pending';
-
-			/*
-			 * We invoke the next function on the next tick so that
-			 * the caller (stage N) need not worry about the case
-			 * that the next stage (stage N + 1) runs in its own
-			 * context.
-			 */
-			setImmediate(function () {
-				nextent['func'](uarg, next);
-			});
-		}
-	};
-
-	rv['operations'][0]['status'] = 'pending';
-	funcs[0](uarg, next);
-
-	return (rv);
-}
-
-/*
- * Exactly like pipeline, except that the input is specified as a single
- * function to invoke on N different inputs (rather than N functions).  "args"
- * must have the following fields:
- *
- *	func		asynchronous function to invoke on each input value
- *
- *	inputs		array of input values
- */
-function forEachPipeline(args, callback) {
-    mod_assert.equal(typeof (args), 'object', '"args" must be an object');
-    mod_assert.equal(typeof (args['func']), 'function',
-		'"args.func" must be specified and must be a function');
-    mod_assert.ok(Array.isArray(args['inputs']),
-		'"args.inputs" must be specified and must be an array');
-    mod_assert.equal(typeof (callback), 'function',
-		'callback argument must be specified and must be a function');
-
-    var func = args['func'];
-
-    var funcs = args['inputs'].map(function (input) {
-		return (function (_, subcallback) {
-			return (func(input, subcallback));
-		});
-    });
-
-    return (pipeline({'funcs': funcs}, callback));
-}
-
-
-/*
- * async-compatible "queue" function.
- */
-function queue(worker, concurrency)
-{
-	return (new WorkQueue({
-	    'worker': worker,
-	    'concurrency': concurrency
-	}));
-}
-
-function queuev(args)
-{
-	return (new WorkQueue(args));
-}
-
-function WorkQueue(args)
-{
-	mod_assert.ok(args.hasOwnProperty('worker'));
-	mod_assert.equal(typeof (args['worker']), 'function');
-	mod_assert.ok(args.hasOwnProperty('concurrency'));
-	mod_assert.equal(typeof (args['concurrency']), 'number');
-	mod_assert.equal(Math.floor(args['concurrency']), args['concurrency']);
-	mod_assert.ok(args['concurrency'] > 0);
-
-	mod_events.EventEmitter.call(this);
-
-	this.nextid = 0;
-	this.worker = args['worker'];
-	this.worker_name = args['worker'].name || 'anon';
-	this.npending = 0;
-	this.pending = {};
-	this.queued = [];
-	this.closed = false;
-	this.ended = false;
-
-	/* user-settable fields inherited from "async" interface */
-	this.concurrency = args['concurrency'];
-	this.saturated = undefined;
-	this.empty = undefined;
-	this.drain = undefined;
-}
-
-mod_util.inherits(WorkQueue, mod_events.EventEmitter);
-
-WorkQueue.prototype.push = function (tasks, callback)
-{
-	if (!Array.isArray(tasks))
-		return (this.pushOne(tasks, callback));
-
-	var wq = this;
-	return (tasks.map(function (task) {
-	    return (wq.pushOne(task, callback));
-	}));
-};
-
-WorkQueue.prototype.updateConcurrency = function (concurrency)
-{
-	if (this.closed)
-		throw new mod_verror.VError(
-			'update concurrency invoked after queue closed');
-	this.concurrency = concurrency;
-	this.dispatchNext();
-};
-
-WorkQueue.prototype.close = function ()
-{
-	var wq = this;
-
-	if (wq.closed)
-		return;
-	wq.closed = true;
-
-	/*
-	 * If the queue is already empty, just fire the "end" event on the
-	 * next tick.
-	 */
-	if (wq.npending === 0 && wq.queued.length === 0) {
-		setImmediate(function () {
-			if (!wq.ended) {
-				wq.ended = true;
-				wq.emit('end');
-			}
-		});
-	}
-};
-
-/* private */
-WorkQueue.prototype.pushOne = function (task, callback)
-{
-	if (this.closed)
-		throw new mod_verror.VError('push invoked after queue closed');
-
-	var id = ++this.nextid;
-	var entry = { 'id': id, 'task': task, 'callback': callback };
-
-	this.queued.push(entry);
-	this.dispatchNext();
-
-	return (id);
-};
-
-/* private */
-WorkQueue.prototype.dispatchNext = function ()
-{
-	var wq = this;
-	if (wq.npending === 0 && wq.queued.length === 0) {
-		if (wq.drain)
-			wq.drain();
-		wq.emit('drain');
-		/*
-		 * The queue is closed; emit the final "end"
-		 * event before we come to rest:
-		 */
-		if (wq.closed) {
-			wq.ended = true;
-			wq.emit('end');
-		}
-	} else if (wq.queued.length > 0) {
-		while (wq.queued.length > 0 && wq.npending < wq.concurrency) {
-			var next = wq.queued.shift();
-			wq.dispatch(next);
-
-			if (wq.queued.length === 0) {
-				if (wq.empty)
-					wq.empty();
-				wq.emit('empty');
-			}
-		}
-	}
-};
-
-WorkQueue.prototype.dispatch = function (entry)
-{
-	var wq = this;
-
-	mod_assert.ok(!this.pending.hasOwnProperty(entry['id']));
-	mod_assert.ok(this.npending < this.concurrency);
-	mod_assert.ok(!this.ended);
-
-	this.npending++;
-	this.pending[entry['id']] = entry;
-
-	if (this.npending === this.concurrency) {
-		if (this.saturated)
-			this.saturated();
-		this.emit('saturated');
-	}
-
-	/*
-	 * We invoke the worker function on the next tick so that callers can
-	 * always assume that the callback is NOT invoked during the call to
-	 * push() even if the queue is not at capacity.  It also avoids O(n)
-	 * stack usage when used with synchronous worker functions.
-	 */
-	setImmediate(function () {
-		wq.worker(entry['task'], function (err) {
-			--wq.npending;
-			delete (wq.pending[entry['id']]);
-
-			if (entry['callback'])
-				entry['callback'].apply(null, arguments);
-
-			wq.dispatchNext();
-		});
-	});
-};
-
-WorkQueue.prototype.length = function ()
-{
-	return (this.queued.length);
-};
-
-WorkQueue.prototype.kill = function ()
-{
-	this.killed = true;
-	this.queued = [];
-	this.drain = undefined;
-	this.close();
-};
-
-/*
- * Barriers coordinate multiple concurrent operations.
- */
-function barrier(args)
-{
-	return (new Barrier(args));
-}
-
-function Barrier(args)
-{
-	mod_assert.ok(!args || !args['nrecent'] ||
-	    typeof (args['nrecent']) == 'number',
-	    '"nrecent" must have type "number"');
-
-	mod_events.EventEmitter.call(this);
-
-	var nrecent = args && args['nrecent'] ? args['nrecent'] : 10;
-
-	if (nrecent > 0) {
-		this.nrecent = nrecent;
-		this.recent = [];
-	}
-
-	this.pending = {};
-	this.scheduled = false;
-}
-
-mod_util.inherits(Barrier, mod_events.EventEmitter);
-
-Barrier.prototype.start = function (name)
-{
-	mod_assert.ok(!this.pending.hasOwnProperty(name),
-	    'operation "' + name + '" is already pending');
-	this.pending[name] = Date.now();
-};
-
-Barrier.prototype.done = function (name)
-{
-	mod_assert.ok(this.pending.hasOwnProperty(name),
-	    'operation "' + name + '" is not pending');
-
-	if (this.recent) {
-		this.recent.push({
-		    'name': name,
-		    'start': this.pending[name],
-		    'done': Date.now()
-		});
-
-		if (this.recent.length > this.nrecent)
-			this.recent.shift();
-	}
-
-	delete (this.pending[name]);
-
-	/*
-	 * If we executed at least one operation and we're now empty, we should
-	 * emit "drain".  But most code doesn't deal well with events being
-	 * processed while they're executing, so we actually schedule this event
-	 * for the next tick.
-	 *
-	 * We use the "scheduled" flag to avoid emitting multiple "drain" events
-	 * on consecutive ticks if the user starts and ends another task during
-	 * this tick.
-	 */
-	if (!isEmpty(this.pending) || this.scheduled)
-		return;
-
-	this.scheduled = true;
-
-	var self = this;
-
-	setImmediate(function () {
-		self.scheduled = false;
-
-		/*
-		 * It's also possible that the user has started another task on
-		 * the previous tick, in which case we really shouldn't emit
-		 * "drain".
-		 */
-		if (isEmpty(self.pending))
-			self.emit('drain');
-	});
-};
-
-/*
- * waterfall([ funcs ], callback): invoke each of the asynchronous functions
- * "funcs" in series.  Each function is passed any values emitted by the
- * previous function (none for the first function), followed by the callback to
- * invoke upon completion.  This callback must be invoked exactly once,
- * regardless of success or failure.  As conventional in Node, the first
- * argument to the callback indicates an error (if non-null).  Subsequent
- * arguments are passed to the next function in the "funcs" chain.
- *
- * If any function fails (i.e., calls its callback with an Error), then the
- * remaining functions are not invoked and "callback" is invoked with the error.
- *
- * The only difference between waterfall() and pipeline() are the arguments
- * passed to each function in the chain.  pipeline() always passes the same
- * argument followed by the callback, while waterfall() passes whatever values
- * were emitted by the previous function followed by the callback.
- */
-function waterfall(funcs, callback)
-{
-	var rv, current, next;
-
-	mod_assert.ok(Array.isArray(funcs));
-	mod_assert.ok(arguments.length == 1 || callback instanceof Function);
-	funcs = funcs.slice(0);
-
-	rv = {
-	    'operations': funcs.map(function (func) {
-	        return ({
-		    'func': func,
-		    'funcname': func.name || '(anon)',
-		    'status': 'waiting'
-		});
-	    }),
-	    'successes': [],
-	    'ndone': 0,
-	    'nerrors': 0
-	};
-
-	if (funcs.length === 0) {
-		if (callback)
-			setImmediate(function () { callback(null, rv); });
-		return (rv);
-	}
-
-	next = function (idx, err) {
-		var args, entry, nextentry;
-
-		if (err === undefined)
-			err = null;
-
-		if (idx != current) {
-			throw (new mod_verror.VError(
-			    'vasync.waterfall: function %d ("%s") invoked ' +
-			    'its callback twice', idx,
-			    rv['operations'][idx].funcname));
-		}
-
-		mod_assert.equal(idx, rv['ndone']);
-		entry = rv['operations'][rv['ndone']++];
-		args = Array.prototype.slice.call(arguments, 2);
-
-		mod_assert.equal(entry['status'], 'pending');
-		entry['status'] = err ? 'fail' : 'ok';
-		entry['err'] = err;
-		entry['results'] = args;
-
-		if (err)
-			rv['nerrors']++;
-		else
-			rv['successes'].push(args);
-
-		if (err || rv['ndone'] == funcs.length) {
-			if (callback) {
-				args.unshift(err);
-				callback.apply(null, args);
-			}
-		} else {
-			nextentry = rv['operations'][rv['ndone']];
-			nextentry['status'] = 'pending';
-			current++;
-			args.push(next.bind(null, current));
-			setImmediate(function () {
-				nextentry['func'].apply(null, args);
-			});
-		}
-	};
-
-	rv['operations'][0]['status'] = 'pending';
-	current = 0;
-	funcs[0](next.bind(null, current));
-	return (rv);
-}
diff --git a/node_modules/fw/node_modules/verror.js b/node_modules/fw/node_modules/verror.js
deleted file mode 100644
index 9ca087b..0000000
--- a/node_modules/fw/node_modules/verror.js
+++ /dev/null
@@ -1,157 +0,0 @@
-/*
- * verror.js: richer JavaScript errors
- */
-
-var mod_assert = require('assert');
-var mod_util = require('util');
-
-var mod_extsprintf = require('extsprintf');
-
-/*
- * Public interface
- */
-exports.VError = VError;
-exports.WError = WError;
-exports.MultiError = MultiError;
-
-/*
- * Like JavaScript's built-in Error class, but supports a "cause" argument and a
- * printf-style message.  The cause argument can be null.
- */
-function VError(options)
-{
-	var args, causedBy, ctor, tailmsg;
-
-	if (options instanceof Error || typeof (options) === 'object') {
-		args = Array.prototype.slice.call(arguments, 1);
-	} else {
-		args = Array.prototype.slice.call(arguments, 0);
-		options = undefined;
-	}
-
-	tailmsg = args.length > 0 ?
-	    mod_extsprintf.sprintf.apply(null, args) : '';
-	this.jse_shortmsg = tailmsg;
-	this.jse_summary = tailmsg;
-
-	if (options) {
-		causedBy = options.cause;
-
-		if (!causedBy || !(options.cause instanceof Error))
-			causedBy = options;
-
-		if (causedBy && (causedBy instanceof Error)) {
-			this.jse_cause = causedBy;
-			this.jse_summary += ': ' + causedBy.message;
-		}
-	}
-
-	this.message = this.jse_summary;
-	Error.call(this, this.jse_summary);
-
-	if (Error.captureStackTrace) {
-		ctor = options ? options.constructorOpt : undefined;
-		ctor = ctor || arguments.callee;
-		Error.captureStackTrace(this, ctor);
-	}
-}
-
-mod_util.inherits(VError, Error);
-VError.prototype.name = 'VError';
-
-VError.prototype.toString = function ve_toString()
-{
-	var str = (this.hasOwnProperty('name') && this.name ||
-		this.constructor.name || this.constructor.prototype.name);
-	if (this.message)
-		str += ': ' + this.message;
-
-	return (str);
-};
-
-VError.prototype.cause = function ve_cause()
-{
-	return (this.jse_cause);
-};
-
-
-/*
- * Represents a collection of errors for the purpose of consumers that generally
- * only deal with one error.  Callers can extract the individual errors
- * contained in this object, but may also just treat it as a normal single
- * error, in which case a summary message will be printed.
- */
-function MultiError(errors)
-{
-	mod_assert.ok(errors.length > 0);
-	this.ase_errors = errors;
-
-	VError.call(this, errors[0], 'first of %d error%s',
-	    errors.length, errors.length == 1 ? '' : 's');
-}
-
-mod_util.inherits(MultiError, VError);
-
-
-
-/*
- * Like JavaScript's built-in Error class, but supports a "cause" argument which
- * is wrapped, not "folded in" as with VError.	Accepts a printf-style message.
- * The cause argument can be null.
- */
-function WError(options)
-{
-	Error.call(this);
-
-	var args, cause, ctor;
-	if (typeof (options) === 'object') {
-		args = Array.prototype.slice.call(arguments, 1);
-	} else {
-		args = Array.prototype.slice.call(arguments, 0);
-		options = undefined;
-	}
-
-	if (args.length > 0) {
-		this.message = mod_extsprintf.sprintf.apply(null, args);
-	} else {
-		this.message = '';
-	}
-
-	if (options) {
-		if (options instanceof Error) {
-			cause = options;
-		} else {
-			cause = options.cause;
-			ctor = options.constructorOpt;
-		}
-	}
-
-	Error.captureStackTrace(this, ctor || this.constructor);
-	if (cause)
-		this.cause(cause);
-
-}
-
-mod_util.inherits(WError, Error);
-WError.prototype.name = 'WError';
-
-
-WError.prototype.toString = function we_toString()
-{
-	var str = (this.hasOwnProperty('name') && this.name ||
-		this.constructor.name || this.constructor.prototype.name);
-	if (this.message)
-		str += ': ' + this.message;
-	if (this.we_cause && this.we_cause.message)
-		str += '; caused by ' + this.we_cause.toString();
-
-	return (str);
-};
-
-WError.prototype.cause = function we_cause(c)
-{
-	if (c instanceof Error)
-		this.we_cause = c;
-
-	return (this.we_cause);
-};
diff --git a/node_modules/fw/package.json b/node_modules/fw/package.json
deleted file mode 100644
index fe52bd0..0000000
--- a/node_modules/fw/package.json
+++ /dev/null
@@ -1,32 +0,0 @@
-{
-  "name": "fw",
-  "description": "Administrative tool for managing SmartOS VM firewalls",
-  "version": "1.1.1",
-  "author": "Joyent (joyent.com)",
-  "private": true,
-  "main": "./lib/fw.js",
-  "devDependencies": {
-    "mockery": "1.2.0",
-    "nodeunit": "0.9.1",
-    "ramsey": "0.1.2"
-  },
-  "dependencies": {
-    "assert-plus": "0.1.2",
-    "bunyan": "0.14.6",
-    "clone": "0.1.4",
-    "cmdln": "1.1.1",
-    "extsprintf": "1.0.2",
-    "mkdirp": "0.3.4",
-    "node-uuid": "1.2.0",
-    "nopt": "1.0.10",
-    "tab": "0.1.0",
-    "vasync": "1.6.3",
-    "verror": "1.3.6"
-  },
-  "scripts": {
-    "test": "make test"
-  },
-  "engines": {
-    "node": ">=0.6"
-  }
-}
diff --git a/node_modules/fw/sbin/fwadm b/node_modules/fw/sbin/fwadm
deleted file mode 100755
index 526508a..0000000
--- a/node_modules/fw/sbin/fwadm
+++ /dev/null
@@ -1,29 +0,0 @@
-#!/usr/node/bin/node
-/*
- * CDDL HEADER START
- *
- * The contents of this file are subject to the terms of the
- * Common Development and Distribution License, Version 1.0 only
- * (the "License").  You may not use this file except in compliance
- * with the License.
- *
- * You can obtain a copy of the license at http://smartos.org/CDDL
- *
- * See the License for the specific language governing permissions
- * and limitations under the License.
- *
- * When distributing Covered Code, include this CDDL HEADER in each
- * file.
- *
- * If applicable, add the following below this CDDL HEADER, with the
- * fields enclosed by brackets "[]" replaced with your own identifying
- * information: Portions Copyright [yyyy] [name of copyright owner]
- *
- * CDDL HEADER END
- *
- * Copyright (c) 2012, Joyent, Inc. All rights reserved.
- *
- */
-
-var fwadm = require('../lib/fwadm');
-fwadm.main();
diff --git a/node_modules/fw/tools/bin/rebuild-node-modules b/node_modules/fw/tools/bin/rebuild-node-modules
deleted file mode 100755
index a378661..0000000
--- a/node_modules/fw/tools/bin/rebuild-node-modules
+++ /dev/null
@@ -1,205 +0,0 @@
-#!/bin/bash
-#
-# Copyright 2014, Joyent, Inc. All rights reserved.
-#
-# Creates a node modules suitable for checking in and installing in
-# the platform
-
-NM=node_modules
-NM_ORIG=node_modules.orig
-
-set -o errexit
-set -o xtrace
-
-rm -rf ${NM}
-rm -rf ${NM_ORIG}
-npm install
-mv ${NM} ${NM_ORIG}
-
-
-#
-# node_modules/
-#
-
-mkdir ${NM}
-
-# The following are all Joyent-licensed
-cp ${NM_ORIG}/extsprintf/lib/extsprintf.js \
-    ${NM_ORIG}/verror/lib/verror.js \
-    ${NM_ORIG}/vasync/lib/vasync.js \
-    ${NM_ORIG}/tab/lib/tab.js \
-    ${NM}/
-
-mkdir ${NM}/assert-plus
-cp ${NM_ORIG}/assert-plus/assert.js ${NM}/assert-plus/index.js
-cp ${NM_ORIG}/assert-plus/README.md ${NM}/assert-plus/README.md
-
-mkdir ${NM}/node-uuid
-cp ${NM_ORIG}/node-uuid/uuid.js ${NM}/node-uuid/index.js
-cp ${NM_ORIG}/node-uuid/LICENSE.md ${NM}/node-uuid/LICENSE.md
-
-mkdir ${NM}/mkdirp
-cp ${NM_ORIG}/mkdirp/index.js ${NM}/mkdirp/index.js
-cp ${NM_ORIG}/mkdirp/LICENSE ${NM}/mkdirp/LICENSE
-
-mkdir ${NM}/clone
-cp ${NM_ORIG}/clone/clone.js ${NM}/clone/index.js
-cp ${NM_ORIG}/clone/{LICENSE,clonePrototype.js} ${NM}/clone/
-
-mkdir ${NM}/fwrule
-cp tools/fwrule/lib/* ${NM}/fwrule/
-
-mkdir ${NM}/cmdln
-cp ${NM_ORIG}/cmdln/lib/cmdln.js ${NM}/cmdln/index.js
-cp ${NM_ORIG}/cmdln/LICENSE.txt ${NM}/cmdln/
-
-mkdir ${NM}/dashdash
-cp ${NM_ORIG}/cmdln/node_modules/dashdash/lib/dashdash.js ${NM}/dashdash/index.js
-cp ${NM_ORIG}/cmdln/node_modules/dashdash/LICENSE.txt ${NM}/dashdash/LICENSE.txt
-
-mkdir ${NM}/carrier
-cp ${NM_ORIG}/tab/node_modules/carrier/lib/carrier.js ${NM}/carrier/index.js
-cp ${NM_ORIG}/tab/node_modules/carrier/LICENSE ${NM}/carrier/
-
-mkdir ${NM}/strsplit
-cp ${NM_ORIG}/tab/node_modules/strsplit/lib/strsplit.js ${NM}/strsplit/index.js
-cp ${NM_ORIG}/tab/node_modules/strsplit/LICENSE ${NM}/strsplit/
-
-#
-# test/node_modules
-#
-
-TEST_MODULES=test/node_modules
-NODEUNIT_FILES="LICENSE bin index.js lib"
-TAP_FILES="LICENSE bin lib package.json"
-TAP_NM=${NM_ORIG}/nodeunit/node_modules/tap/node_modules
-# TAP dependencies that just have an index.js in their directory
-TAP_IDX_MODS="buffer-equal difflet"
-BUNKER=${TAP_NM}/runforcover/node_modules/bunker
-BURRITO=${BUNKER}/node_modules/burrito
-
-rm -rf ${TEST_MODULES}
-mkdir -p ${TEST_MODULES}/nodeunit/deps/ejs
-
-for F in ${NODEUNIT_FILES}; do
-    cp -r ${NM_ORIG}/nodeunit/$F ${TEST_MODULES}/nodeunit/
-done
-cp ${NM_ORIG}/nodeunit/deps/*.js ${TEST_MODULES}/nodeunit/deps
-cp -r ${NM_ORIG}/nodeunit/deps/ejs/lib ${TEST_MODULES}/nodeunit/deps/ejs/lib
-cp ${NM_ORIG}/nodeunit/deps/ejs/package.json ${TEST_MODULES}/nodeunit/deps/ejs/package.json
-
-mkdir -p ${TEST_MODULES}/async
-cp ${TEST_MODULES}/nodeunit/deps/async.js ${TEST_MODULES}/async/index.js
-cp ${TEST_MODULES}/nodeunit/LICENSE ${TEST_MODULES}/async/
-
-mkdir -p ${TEST_MODULES}/tap
-for F in ${TAP_FILES}; do
-    cp -r ${NM_ORIG}/nodeunit/node_modules/tap/$F ${TEST_MODULES}/tap/
-done
-for D in ${TAP_IDX_MODS}; do
-    cp -r ${TAP_NM}/$D/index.js ${TEST_MODULES}/$D.js
-done
-
-cp ${TAP_NM}/buffer-equal/index.js ${TEST_MODULES}/buffer-equal.js
-
-mkdir -p ${TEST_MODULES}/charm
-cp -r ${TAP_NM}/difflet/node_modules/charm/{index.js,lib} ${TEST_MODULES}/charm/
-cp -r ${TAP_NM}/difflet/node_modules/deep-is/index.js ${TEST_MODULES}/deep-is.js
-
-mkdir -p ${TEST_MODULES}/deep-equal/lib
-cp ${TAP_NM}/deep-equal/index.js ${TEST_MODULES}/deep-equal/index.js
-cp ${TAP_NM}/deep-equal/LICENSE ${TEST_MODULES}/deep-equal/LICENSE
-cp ${TAP_NM}/deep-equal/lib/keys.js ${TEST_MODULES}/deep-equal/lib/keys.js
-cp ${TAP_NM}/deep-equal/lib/is_arguments.js ${TEST_MODULES}/deep-equal/lib/is_arguments.js
-
-mkdir -p ${TEST_MODULES}/glob
-cp ${TAP_NM}/glob/glob.js ${TEST_MODULES}/glob/glob.js
-cp ${TAP_NM}/glob/common.js ${TEST_MODULES}/glob/common.js
-cp ${TAP_NM}/glob/sync.js ${TEST_MODULES}/glob/sync.js
-cp ${TAP_NM}/glob/package.json ${TEST_MODULES}/glob/package.json
-cp ${TAP_NM}/glob/LICENSE ${TEST_MODULES}/glob/
-
-mkdir -p ${TEST_MODULES}/inflight
-cp ${TAP_NM}/glob/node_modules/inflight/inflight.js ${TEST_MODULES}/inflight/index.js
-cp ${TAP_NM}/glob/node_modules/inflight/LICENSE ${TEST_MODULES}/inflight/LICENSE
-
-mkdir -p ${TEST_MODULES}/once
-ONCE=${TAP_NM}/glob/node_modules/once
-cp ${ONCE}/once.js ${TEST_MODULES}/once/index.js
-cp ${ONCE}/LICENSE ${TEST_MODULES}/once/LICENSE
-
-mkdir -p ${TEST_MODULES}/wrappy
-cp ${ONCE}/node_modules/wrappy/wrappy.js ${TEST_MODULES}/wrappy/index.js
-cp ${ONCE}/node_modules/wrappy/LICENSE ${TEST_MODULES}/wrappy/LICENSE
-
-mkdir -p ${TEST_MODULES}/minimatch
-MINIMATCH=${TAP_NM}/glob/node_modules/minimatch
-cp ${MINIMATCH}/minimatch.js ${TEST_MODULES}/minimatch/index.js
-cp ${MINIMATCH}/LICENSE ${TEST_MODULES}/minimatch/
-
-mkdir -p ${TEST_MODULES}/brace-expansion
-BRACE_EXPANSION=${MINIMATCH}/node_modules/brace-expansion
-cp ${BRACE_EXPANSION}/index.js ${TEST_MODULES}/brace-expansion/index.js
-cp ${BRACE_EXPANSION}/README.md ${TEST_MODULES}/brace-expansion/README.md
-
-mkdir -p ${TEST_MODULES}/balanced-match
-cp ${BRACE_EXPANSION}/node_modules/balanced-match/index.js ${TEST_MODULES}/balanced-match/index.js
-cp ${BRACE_EXPANSION}/node_modules/balanced-match/LICENSE.md ${TEST_MODULES}/balanced-match/LICENSE.md
-
-mkdir -p ${TEST_MODULES}/concat-map
-cp ${BRACE_EXPANSION}/node_modules/concat-map/index.js ${TEST_MODULES}/concat-map/index.js
-cp ${BRACE_EXPANSION}/node_modules/concat-map/LICENSE ${TEST_MODULES}/concat-map/LICENSE
-
-mkdir -p ${TEST_MODULES}/inherits
-cp ${TAP_NM}/inherits/inherits.js ${TEST_MODULES}/inherits/index.js
-
-mkdir -p ${TEST_MODULES}/nopt
-cp ${TAP_NM}/nopt/lib/nopt.js ${TEST_MODULES}/nopt/index.js
-cp ${TAP_NM}/nopt/LICENSE ${TEST_MODULES}/nopt/
-cp ${TAP_NM}/nopt/node_modules/abbrev/abbrev.js ${TEST_MODULES}/
-
-cp ${TAP_NM}/runforcover/index.js ${TEST_MODULES}/runforcover.js
-cp ${BUNKER}/index.js ${TEST_MODULES}/bunker.js
-
-mkdir -p ${TEST_MODULES}/traverse
-cp ${TAP_NM}/difflet/node_modules/traverse/{index.js,LICENSE} ${TEST_MODULES}/traverse
-mkdir -p ${TEST_MODULES}/burrito/node_modules/traverse
-cp ${BURRITO}/index.js ${TEST_MODULES}/burrito/
-cp ${BURRITO}/node_modules/traverse/{index.js,LICENSE} ${TEST_MODULES}/burrito/node_modules/traverse/
-mkdir -p ${TEST_MODULES}/uglify-js
-cp ${BURRITO}/node_modules/uglify-js/uglify-js.js ${TEST_MODULES}/uglify-js/index.js
-cp -r ${BURRITO}/node_modules/uglify-js/lib ${TEST_MODULES}/uglify-js/
-
-mkdir -p ${TEST_MODULES}/slide
-cp -r ${TAP_NM}/slide/{lib,index.js} ${TEST_MODULES}/slide/
-
-mkdir -p ${TEST_MODULES}/yamlish
-cp ${TAP_NM}/yamlish/yamlish.js ${TEST_MODULES}/yamlish/index.js
-cp ${TAP_NM}/yamlish/LICENSE ${TEST_MODULES}/yamlish/
-
-mkdir -p ${TEST_MODULES}/mockery
-cp ${NM_ORIG}/mockery/mockery.js ${TEST_MODULES}/mockery/index.js
-cp ${NM_ORIG}/mockery/LICENSE ${TEST_MODULES}/mockery/
-
-#
-# tools/ramsey
-#
-
-RAMSEY=tools/ramsey
-RAMSEY_NM=${RAMSEY}/node_modules
-RAMSEY_ORIG=${NM_ORIG}/ramsey
-
-mkdir -p ${RAMSEY_NM}/hogan.js
-
-cp -r ${RAMSEY_ORIG}/{bin,lib} ${RAMSEY}/
-cp ${RAMSEY_ORIG}/node_modules/dashdash/lib/dashdash.js ${RAMSEY_NM}
-cp ${NM_ORIG}/assert-plus/assert.js ${RAMSEY_NM}/assert-plus.js
-cp -r ${RAMSEY_ORIG}/node_modules/hogan.js/lib ${RAMSEY_NM}/hogan.js/
-cp ${RAMSEY_ORIG}/node_modules/hogan.js/{LICENSE,package.json} \
-    ${RAMSEY_NM}/hogan.js/
-
-#
-# cleanup
-#
-
-rm -rf ${NM_ORIG}
diff --git a/node_modules/fw/tools/fwrule/Makefile b/node_modules/fw/tools/fwrule/Makefile
deleted file mode 100644
index 8bf4b63..0000000
--- a/node_modules/fw/tools/fwrule/Makefile
+++ /dev/null
@@ -1,132 +0,0 @@
-#
-# CDDL HEADER START
-#
-# The contents of this file are subject to the terms of the
-# Common Development and Distribution License, Version 1.0 only
-# (the "License").  You may not use this file except in compliance
-# with the License.
-#
-# You can obtain a copy of the license at http://smartos.org/CDDL
-#
-# See the License for the specific language governing permissions
-# and limitations under the License.
-#
-# When distributing Covered Code, include this CDDL HEADER in each
-# file.
-#
-# If applicable, add the following below this CDDL HEADER, with the
-# fields enclosed by brackets "[]" replaced with your own identifying
-# information: Portions Copyright [yyyy] [name of copyright owner]
-#
-# CDDL HEADER END
-#
-# Copyright (c) 2014, Joyent, Inc. All rights reserved.
-#
-#
-# fwrule Makefile
-#
-
-
-#
-# Tools
-#
-JISON	:= ./node_modules/jison/lib/cli.js
-NODEUNIT := node_modules/nodeunit/bin/nodeunit
-RAMSEY := node_modules/ramsey/bin/ramsey
-NPM := npm
-JS_FILES	:= $(shell find lib test -name '*.js' | grep -v parser.js)
-JSL_CONF_NODE	 = tools/jsl.node.conf
-JSL_FILES_NODE   = $(JS_FILES)
-JSL_FLAGS  	?= --nologo --nosummary
-JSL_FLAGS_NODE 	 = --conf=$(JSL_CONF_NODE)
-JSSTYLE_FILES	 = $(JS_FILES)
-JSSTYLE_FLAGS    = -o indent=4,strict-indent=1,doxygen,unparenthesized-return=0,continuation-at-front=1,leading-right-paren-ok=1
-
-
-#
-# Repo-specific targets
-#
-
-.PHONY: parser
-parser: $(JISON)
-	@cp ./src/header.js ./lib/parser.js
-	@cat ./src/fwrule.jison | $(JISON)  >> ./lib/parser.js
-
-$(NODEUNIT):
-	$(NPM) install
-
-$(JISON):
-	$(NPM) install
-
-$(RAMSEY):
-	$(NPM) install
-
-
-#
-# test / check targets
-#
-
-.PHONY: test
-test: $(NODEUNIT)
-	@(for F in test/*.js; do \
-		echo "# $$F" ;\
-		$(NODEUNIT) --reporter tap $$F ;\
-		[[ $$? == "0" ]] || exit 1; \
-	done)
-
-.PHONY: check
-check: check-jsl check-jsstyle
-	@echo check ok
-
-.PHONY: prepush
-prepush: check test
-
-.PHONY: docs
-docs: $(RAMSEY) docs/examples.md docs/rules.md
-
-docs/examples.md: docs/examples.md.in
-	$(RAMSEY) -d etc/examples -f etc/examples.json docs/examples.md.in $@
-
-docs/rules.md: docs/rules.md.in
-	$(RAMSEY) -p wrap=0 docs/rules.md.in $@
-
-#
-# This rule enables other rules that use files from a git submodule to have
-# those files depend on deps/module/.git and have "make" automatically check
-# out the submodule as needed.
-#
-deps/%/.git:
-	git submodule update --init deps/$*
-
-#
-# javascriptlint
-#
-
-JSL_EXEC	?= deps/javascriptlint/build/install/jsl
-JSL		?= $(JSL_EXEC)
-
-$(JSL_EXEC): | deps/javascriptlint/.git
-	cd deps/javascriptlint && make install
-
-distclean::
-	if [[ -f deps/javascriptlint/Makefile ]]; then \
-		cd deps/javascriptlint && make clean; \
-	fi
-
-
-#
-# jsstyle
-#
-
-JSSTYLE_EXEC	?= deps/jsstyle/jsstyle
-JSSTYLE		?= $(JSSTYLE_EXEC)
-
-$(JSSTYLE_EXEC): | deps/jsstyle/.git
-
-.PHONY: check-jsl
-check-jsl: $(JSL_EXEC)
-	@$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_NODE) $(JSL_FILES_NODE)
-
-.PHONY: check-jsstyle
-check-jsstyle:  $(JSSTYLE_EXEC)
-	@$(JSSTYLE) $(JSSTYLE_FLAGS) $(JSSTYLE_FILES)
diff --git a/node_modules/fw/tools/fwrule/README.md b/node_modules/fw/tools/fwrule/README.md
deleted file mode 100644
index 4af3adb..0000000
--- a/node_modules/fw/tools/fwrule/README.md
+++ /dev/null
@@ -1,56 +0,0 @@
-# sdc-fwrule
-
-Joyent firewall rule object wrapper. This is a copy of the sdc-fwrule repo. For
-contribution guidelines, issues, and general documentation, visit the main
-[SDC](http://github.com/joyent/sdc) project page.
-
-This contains shared code for manipulating SmartDataCenter firewall rules.
-There are two parts to this package:
-
-* A Jison grammar (src/fwrule.jison) that specifies a DSL for writing
-  firewall rules. This is used to generate the parser (lib/parser.js)
-* A rule object that wraps the parser and provides various convenience
-  and serialization methods.
-
-The parser is currently checked in to avoid requiring jison to be installed
-in order to use this package.
-
-
-# Repository
-
-    docs/           Documentation (restdown format)
-    lib/            Source files
-    node_modules/   node.js dependencies (populate by running "npm install")
-    src/            Contains the jison grammar for creating the firewall rule
-                    parser
-    tools/          Tools and configuration files
-    test/           Test suite (using nodeunit)
-
-
-# Development
-
-If you update the jison grammar, run the following to regenerate the parser:
-
-    make parser
-
-Before checking in, please run:
-
-    make check
-
-and fix any warnings. Note that jsstyle will stop after the first file with an
-error, so you may need to run this multiple times while fixing.
-
-For non-trivial changes, please add a unit test that covers the functionality
-of the change. If this is a syntax change, update docs/rules.md.in and
-docs/examples.md.in accordingly.
-
-
-# Testing
-
-To run all tests:
-
-    make test
-
-To run an individual test:
-
-    ./node_modules/.bin/nodeunit <path to test file>
diff --git a/node_modules/fw/tools/fwrule/docs/examples.md b/node_modules/fw/tools/fwrule/docs/examples.md
deleted file mode 100644
index de61640..0000000
--- a/node_modules/fw/tools/fwrule/docs/examples.md
+++ /dev/null
@@ -1,184 +0,0 @@
-# Deployment Examples
-
-These examples are meant to outline some common use-cases for the firewall.
-Note that all VMs need to have their firewall property set for rules to apply
-to them:
-
-    {
-        &quot;firewall_enabled&quot;: true
-    }
-    
-Recall that for VMs that have firewall_enabled set, the default policy is
-always:
-
-* allow incoming ping requests
-* block all other incoming traffic
-* allow all outgoing traffic
-
-Note as well that all of the examples here are not mutually exclusive. You can
-combine the rules in the examples as you see fit.
-
-
-## Allow SSH traffic
-
-To allow SSH access from any IP to all VMs in a datacenter, create the
-following rule:
-
-    {
-        &quot;description&quot;: &quot;allow SSH to all VMs&quot;,
-        &quot;enabled&quot;: true,
-        &quot;rule&quot;: &quot;FROM any TO all vms ALLOW tcp PORT 22&quot;
-    }
-    
-
-To allow SSH to one VM with ID ba2c95e9-1cdf-4295-8253-3fee371374d9, create
-this rule:
-
-    {
-        &quot;description&quot;: &quot;allow SSH to all VMs&quot;,
-        &quot;enabled&quot;: true,
-        &quot;rule&quot;: &quot;FROM any TO vm ba2c95e9-1cdf-4295-8253-3fee371374d9 ALLOW tcp PORT 22&quot;
-    }
-    
-Note that if you have created the first rule in this section, you do not need
-to create this second rule - every VM will already have SSH access enabled.
-
-
-## Allow HTTP traffic
-
-To allow HTTP connections from any IP to all VMs in a datacenter, create the
-following rule:
-
-    {
-        &quot;description&quot;: &quot;allow HTTP traffic from any IP to all VMs&quot;,
-        &quot;enabled&quot;: true,
-        &quot;rule&quot;: &quot;FROM any TO all vms ALLOW tcp PORT 80&quot;
-    }
-    
-
-To allow both HTTP and HTTPS connections to all VMs in a datacenter, create the
-following rule (or update the rule above to the following):
-
-    {
-        &quot;description&quot;: &quot;allow HTTP and HTTPS traffic from any IP to all VMs&quot;,
-        &quot;enabled&quot;: true,
-        &quot;rule&quot;: &quot;FROM any TO all vms ALLOW tcp (PORT 80 AND PORT 443)&quot;
-    }
-    
-To allow HTTP to one VM with ID ba2c95e9-1cdf-4295-8253-3fee371374d9, create
-this rule:
-
-    {
-        &quot;description&quot;: &quot;allow HTTP traffic to a single VM&quot;,
-        &quot;enabled&quot;: true,
-        &quot;rule&quot;: &quot;FROM any TO vm ba2c95e9-1cdf-4295-8253-3fee371374d9 ALLOW tcp PORT 80&quot;
-    }
-    
-Note that if you have created either of the first two rules in this section,
-you do not need to create this second rule - every VM will already allow
-HTTP connections.
-
-
-## Multiple web and database server setup
-
-Say you are running a website.  You have two webservers that talk to two
-database servers.
-
-For each of the webservers, you create them with these parameters:
-
-    {
-        &quot;firewall_enabled&quot;: true,
-        &quot;tags&quot;: {
-            &quot;role&quot;: &quot;www&quot;
-        }
-    }
-    
-For each of the database servers, you create them with these parameters:
-
-    {
-        &quot;firewall_enabled&quot;: true,
-        &quot;tags&quot;: {
-            &quot;role&quot;: &quot;db&quot;
-        }
-    }
-    
-We now need to create firewall rules to control access to these VMs.  Recall
-that by default, VMs with firewalls enabled will block all incoming TCP and
-UDP traffic. We now need to open up the necessary ports for each VM role.
-
-First, we want to allow communication between the webservers and the database
-servers. We do so by creating this rule:
-
-    {
-        &quot;description&quot;: &quot;allow database traffic from web servers to database servers&quot;,
-        &quot;enabled&quot;: true,
-        &quot;rule&quot;: &quot;FROM tag role = www TO tag role = db ALLOW tcp PORT 5432&quot;
-    }
-    
-This rule allows *only* the webservers to connect to the database servers on
-the standard PostgreSQL port (5432). All other inbound traffic to the database
-servers is blocked.
-
-Second, we want to allow HTTP and HTTPS traffic to the webservers from anywhere
-on the internet. We do so by creating this rule:
-
-    {
-        &quot;description&quot;: &quot;allow HTTP and HTTPS traffic from anywhere to webservers&quot;,
-        &quot;enabled&quot;: true,
-        &quot;rule&quot;: &quot;FROM any TO tag role = www ALLOW tcp (PORT 80 AND PORT 443)&quot;
-    }
-    
-After both of these rules have been created, VMs with tag role set to "db"
-will have the following behaviour:
-
-* Allow TCP traffic on port 5432 from VMs with tag role="www"
-* Allow all outgoing traffic
-* Allow incoming ping requests
-* Block all other incoming traffic
-
-After both of these rules have been created, VMs with tag role set to "www"
-will have the following behaviour:
-
-* Allow incoming TCP traffic on ports 80 and 443 from any IP
-* Allow outgoing TCP traffic on port 5432 to VMs with tag role="www"
-* Allow all outgoing traffic
-* Allow incoming ping requests
-* Block all other incoming traffic
-
-Creating additional VMs with the role tags listed above will automatically
-apply these rules. For example, to apply the webserver rules to a new server,
-just give it tag role = "www".
-
-
-## Bastion host setup
-
-In this setup, we have the following requirements:
-
-1. VMs are allowed access from the bastion host on all ports
-2. VMs block all other connections
-3. The bastion host accepts SSH connections from only certain IP addresses and
-   no others.
-
-Recall that the default policy is to block all incoming connecions, so
-requirement 2 is taken care of. We then need two rules to handle the other
-requirements.
-
-First, let's take care of VMs allowing access from the bastion host
-cb3f80b9-d333-4521-b067-b237e748e473 by creating this rule:
-
-    {
-        &quot;description&quot;: &quot;allow access to all VMs from bastion host&quot;,
-        &quot;enabled&quot;: true,
-        &quot;rule&quot;: &quot;FROM vm cb3f80b9-d333-4521-b067-b237e748e473 TO all vms ALLOW tcp PORT all&quot;
-    }
-    
-Second, let's take care of the bastion host accepting connections from certain
-IP addresses with this rule:
-
-    {
-        &quot;description&quot;: &quot;allow access to all VMs from bastion host&quot;,
-        &quot;enabled&quot;: true,
-        &quot;rule&quot;: &quot;FROM (ip 172.1.1.110 OR ip 172.1.1.111) TO vm cb3f80b9-d333-4521-b067-b237e748e473 ALLOW tcp PORT 22&quot;
-    }
-    
-When you create new VMs, they will have access from the bastion host.
diff --git a/node_modules/fw/tools/fwrule/docs/examples.md.in b/node_modules/fw/tools/fwrule/docs/examples.md.in
deleted file mode 100644
index 5075a94..0000000
--- a/node_modules/fw/tools/fwrule/docs/examples.md.in
+++ /dev/null
@@ -1,160 +0,0 @@
-# Deployment Examples
-
-These examples are meant to outline some common use-cases for the firewall.
-Note that all VMs need to have their firewall property set for rules to apply
-to them:
-
-    {{#indent}}
-    {{vm_firewall_enabled}}
-    {{/indent}}
-
-Recall that for VMs that have firewall_enabled set, the default policy is
-always:
-
-* allow incoming ping requests
-* block all other incoming traffic
-* allow all outgoing traffic
-
-Note as well that all of the examples here are not mutually exclusive. You can
-combine the rules in the examples as you see fit.
-
-
-## Allow SSH traffic
-
-To allow SSH access from any IP to all VMs in a datacenter, create the
-following rule:
-
-    {{#indent}}
-    {{ssh_rule_all}}
-    {{/indent}}
-
-
-To allow SSH to one VM with ID {{vm1}}, create
-this rule:
-
-    {{#indent}}
-    {{ssh_rule_vm}}
-    {{/indent}}
-
-Note that if you have created the first rule in this section, you do not need
-to create this second rule - every VM will already have SSH access enabled.
-
-
-## Allow HTTP traffic
-
-To allow HTTP connections from any IP to all VMs in a datacenter, create the
-following rule:
-
-    {{#indent}}
-    {{web_rule_http_all}}
-    {{/indent}}
-
-
-To allow both HTTP and HTTPS connections to all VMs in a datacenter, create the
-following rule (or update the rule above to the following):
-
-    {{#indent}}
-    {{web_rule_https_all}}
-    {{/indent}}
-
-To allow HTTP to one VM with ID {{vm1}}, create
-this rule:
-
-    {{#indent}}
-    {{web_rule_http_vm}}
-    {{/indent}}
-
-Note that if you have created either of the first two rules in this section,
-you do not need to create this second rule - every VM will already allow
-HTTP connections.
-
-
-## Multiple web and database server setup
-
-Say you are running a website.  You have two webservers that talk to two
-database servers.
-
-For each of the webservers, you create them with these parameters:
-
-    {{#indent}}
-    {{webdb_vm_www}}
-    {{/indent}}
-
-For each of the database servers, you create them with these parameters:
-
-    {{#indent}}
-    {{webdb_vm_db}}
-    {{/indent}}
-
-We now need to create firewall rules to control access to these VMs.  Recall
-that by default, VMs with firewalls enabled will block all incoming TCP and
-UDP traffic. We now need to open up the necessary ports for each VM role.
-
-First, we want to allow communication between the webservers and the database
-servers. We do so by creating this rule:
-
-    {{#indent}}
-    {{webdb_rule_db}}
-    {{/indent}}
-
-This rule allows *only* the webservers to connect to the database servers on
-the standard PostgreSQL port (5432). All other inbound traffic to the database
-servers is blocked.
-
-Second, we want to allow HTTP and HTTPS traffic to the webservers from anywhere
-on the internet. We do so by creating this rule:
-
-    {{#indent}}
-    {{webdb_rule_http}}
-    {{/indent}}
-
-After both of these rules have been created, VMs with tag role set to "db"
-will have the following behaviour:
-
-* Allow TCP traffic on port 5432 from VMs with tag role="www"
-* Allow all outgoing traffic
-* Allow incoming ping requests
-* Block all other incoming traffic
-
-After both of these rules have been created, VMs with tag role set to "www"
-will have the following behaviour:
-
-* Allow incoming TCP traffic on ports 80 and 443 from any IP
-* Allow outgoing TCP traffic on port 5432 to VMs with tag role="www"
-* Allow all outgoing traffic
-* Allow incoming ping requests
-* Block all other incoming traffic
-
-Creating additional VMs with the role tags listed above will automatically
-apply these rules. For example, to apply the webserver rules to a new server,
-just give it tag role = "www".
-
-
-## Bastion host setup
-
-In this setup, we have the following requirements:
-
-1. VMs are allowed access from the bastion host on all ports
-2. VMs block all other connections
-3. The bastion host accepts SSH connections from only certain IP addresses and
-   no others.
-
-Recall that the default policy is to block all incoming connecions, so
-requirement 2 is taken care of. We then need two rules to handle the other
-requirements.
-
-First, let's take care of VMs allowing access from the bastion host
-{{vm2}} by creating this rule:
-
-    {{#indent}}
-    {{bastion_rule_allow_all}}
-    {{/indent}}
-
-Second, let's take care of the bastion host accepting connections from certain
-IP addresses with this rule:
-
-    {{#indent}}
-    {{bastion_rule_ips}}
-    {{/indent}}
-
-When you create new VMs, they will have access from the bastion host.
diff --git a/node_modules/fw/tools/fwrule/docs/fwrules.ebnf b/node_modules/fw/tools/fwrule/docs/fwrules.ebnf
deleted file mode 100644
index 77360ad..0000000
--- a/node_modules/fw/tools/fwrule/docs/fwrules.ebnf
+++ /dev/null
@@ -1,37 +0,0 @@
-
-/* 
-    Converted from https://mo.joyent.com/fwrule/raw/master/src/fwrule.jison
-    with http://bottlecaps.de/convert/ 
-    then elided for simplicity
-    then generated with http://bottlecaps.de/rr/ui
- */ 
-
-/* converted on Mon Dec 16, 2013, 20:22 (UTC-05) by jison-to-w3c v0.33.722 which is Copyright (c) 2011-2013 by Gunther Rademacher <grd@gmx.net> */
-
-rule     ::= 'FROM' target_list 'TO' target_list action protocol 
-target_list
-         ::= 'ANY'
-           | 'ALL VMS'
-           | '(' target ( 'OR' target )* ')'
-           | target
-target   ::= 'IP ADDRESS'
-           | 'SUBNET'
-           | 'TAG' tag_string
-           | 'TAG' tag_string '=' tag_value
-           | 'VM' uuid
-action   ::= 'BLOCK'
-           | 'ALLOW'
-protocol ::= 'TCP' port_list
-           | 'UDP' port_list
-           | 'ICMP' type_list
-port_list
-         ::= '(' port ( 'AND' port )* ')'
-           | port
-           | '(' 'PORT ALL' ')'
-           | 'PORT ALL'
-port     ::= 'PORT' '1 - 65535'
-type_list
-         ::= '(' type ( 'AND' type )* ')'
-           | type
-type     ::= 'TYPE' '0 - 255' 'CODE' '0 - 255'
-           | 'TYPE' '0 - 255'
diff --git a/node_modules/fw/tools/fwrule/docs/fwrules.xhtml b/node_modules/fw/tools/fwrule/docs/fwrules.xhtml
deleted file mode 100644
index b4c573e..0000000
--- a/node_modules/fw/tools/fwrule/docs/fwrules.xhtml
+++ /dev/null
@@ -1,419 +0,0 @@
-
-<!DOCTYPE html
-  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8" /><meta name="generator" content="Railroad Diagram Generator 1.31.721" /><style type="text/css" xml:space="preserve">
-    ::-moz-selection
-    {
-      color: #FFFAF0;
-      background: #0F0A00;
-    }
-    ::selection
-    {
-      color: #FFFAF0;
-      background: #0F0A00;
-    }      
-    .ebnf a
-    {
-      text-decoration: none;
-    }
-    .ebnf a:hover
-    {
-      color: #050300;
-      text-decoration: underline;
-    }    
-    .signature
-    {
-      color: #805500;
-      font-size: 11px;
-      text-align: right;
-    }
-    body
-    {
-      font: normal 12px Verdana, sans-serif;
-      color: #0F0A00;
-      background: #FFFAF0;
-    }
-    a:link, a:visited
-    {
-      color: #0F0A00;
-    }
-    a:link.signature, a:visited.signature
-    {
-      color: #805500;
-    }
-    a.button, #tabs li a
-    {
-      padding: 0.25em 0.5em;
-      border: 1px solid #805500;
-      background: #F1E2C6;
-      color: #805500;
-      text-decoration: none;
-      font-weight: bold;
-    }
-    a.button:hover, #tabs li a:hover
-    {
-      color: #050300;
-      background: #FFF0D1;
-      border-color: #050300;       
-    }     
-    #tabs
-    {
-      padding: 3px 10px;
-      margin-left: 0;
-      margin-top: 58px;
-      border-bottom: 1px solid #0F0A00;
-    }  
-    #tabs li
-    {
-      list-style: none;
-      margin-left: 5px;
-      display: inline;
-    }
-    #tabs li a
-    {     
-      border-bottom: 1px solid #0F0A00;
-    }
-    #tabs li a.active
-    {
-      color: #0F0A00;
-      background: #FFFAF0;
-      border-color: #0F0A00;
-      border-bottom: 1px solid #FFFAF0;
-      outline: none;
-    }
-    #divs div
-    {
-      display: none;
-      overflow:auto;
-    }
-    #divs div.active
-    {
-      display: block;
-    }
-    #text
-    {
-      border-color: #805500;
-      background: #FFFDFA;
-      color: #050300;
-    }
-    .small
-    {
-      vertical-align: top;
-      text-align: right;
-      font-size: 9px;
-      font-weight: normal;
-      line-height: 120%;
-    }
-    td.small
-    {
-      padding-top: 0px;
-    }
-    .hidden
-    {
-      visibility: hidden;
-    }
-    td:hover .hidden 
-    {
-      visibility: visible;
-    }
-    div.download
-    {
-      display: none;
-      background: #FFFAF0;
-      position: absolute;
-      right: 34px;
-      top: 94px;
-      padding: 10px;
-      border: 1px dotted #0F0A00;
-    }
-    #divs div.ebnf, div.ebnf
-    {
-      display: block;
-      padding-left: 16px;
-      padding-top: 2px; 
-      padding-bottom: 2px; 
-      background: #FFF0D1;
-    }
-    table.palette
-    {
-      border-top: 1px solid #050300;
-      border-right: 1px solid #050300;
-      margin-bottom: 4px
-    }
-    td.palette
-    {
-      border-bottom: 1px solid #050300;
-      border-left: 1px solid #050300;
-    }
-    a.palette
-    {
-      padding: 2px 3px 2px 10px;
-      text-decoration: none;
-    }
-    .palette
-    {
-      -webkit-user-select: none;
-      -khtml-user-select: none;
-      -moz-user-select: none;
-      -o-user-select: none;
-      -ms-user-select: none;
-    }
-  </style><svg xmlns="http://www.w3.org/2000/svg"><defs><style type="text/css" xml:space="preserve">
-    @namespace "http://www.w3.org/2000/svg";
-    .line                 {fill: none; stroke: #332200;}
-    .bold-line            {stroke: #140E00; shape-rendering: crispEdges; stroke-width: 2; }
-    .thin-line            {stroke: #1F1400; shape-rendering: crispEdges}
-    .filled               {fill: #332200; stroke: none;}
-    text.terminal         {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #140E00;
-                            font-weight: bold;
-                          }
-    text.nonterminal      {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #1A1100;
-                          }
-    text.regexp           {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #1F1400;
-                          }
-    rect, circle, polygon {fill: #332200; stroke: #332200;}
-    rect.terminal         {fill: #FFC34D; stroke: #332200;}
-    rect.nonterminal      {fill: #FFDF9E; stroke: #332200;}
-    rect.text             {fill: none; stroke: none;}    
-    polygon.regexp        {fill: #FFECC7; stroke: #332200;}
-  </style></defs></svg></head><body><xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml" style="font-size: 14px; font-weight:bold"><xhtml:a name="rule">rule:</xhtml:a></xhtml:p><svg xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" width="550" height="36"><defs><style type="text/css" xml:space="preserve">
-    @namespace "http://www.w3.org/2000/svg";
-    .line                 {fill: none; stroke: #332200;}
-    .bold-line            {stroke: #140E00; shape-rendering: crispEdges; stroke-width: 2; }
-    .thin-line            {stroke: #1F1400; shape-rendering: crispEdges}
-    .filled               {fill: #332200; stroke: none;}
-    text.terminal         {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #140E00;
-                            font-weight: bold;
-                          }
-    text.nonterminal      {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #1A1100;
-                          }
-    text.regexp           {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #1F1400;
-                          }
-    rect, circle, polygon {fill: #332200; stroke: #332200;}
-    rect.terminal         {fill: #FFC34D; stroke: #332200;}
-    rect.nonterminal      {fill: #FFDF9E; stroke: #332200;}
-    rect.text             {fill: none; stroke: none;}    
-    polygon.regexp        {fill: #FFECC7; stroke: #332200;}
-  </style></defs><polygon points="9 17 1 13 1 21"></polygon><polygon points="17 17 9 13 9 21"></polygon><line x1="17" y1="17" x2="19" y2="17" class="line"></line><rect x="31" y="3" width="58" height="32" rx="10"></rect><rect x="29" y="1" width="58" height="32" class="terminal" rx="10"></rect><text class="terminal" x="39" y="21">FROM</text><line x1="19" y1="17" x2="29" y2="17" class="line"></line><line x1="87" y1="17" x2="97" y2="17" class="line"></line><a xlink:href="#target_list" xlink:title="target_list" shape="rect"><rect x="109" y="3" width="84" height="32"></rect><rect x="107" y="1" width="84" height="32" class="nonterminal"></rect><text class="nonterminal" x="117" y="21">target_list</text></a><line x1="97" y1="17" x2="107" y2="17" class="line"></line><line x1="191" y1="17" x2="201" y2="17" class="line"></line><rect x="213" y="3" width="38" height="32" rx="10"></rect><rect x="211" y="1" width="38" height="32" class="terminal" rx="10"></rect><text class="terminal" x="221" y="21">TO</text><line x1="201" y1="17" x2="211" y2="17" class="line"></line><line x1="249" y1="17" x2="259" y2="17" class="line"></line><a xlink:href="#target_list" xlink:title="target_list" shape="rect"><rect x="271" y="3" width="84" height="32"></rect><rect x="269" y="1" width="84" height="32" class="nonterminal"></rect><text class="nonterminal" x="279" y="21">target_list</text></a><line x1="259" y1="17" x2="269" y2="17" class="line"></line><line x1="353" y1="17" x2="363" y2="17" class="line"></line><a xlink:href="#action" xlink:title="action" shape="rect"><rect x="375" y="3" width="58" height="32"></rect><rect x="373" y="1" width="58" height="32" class="nonterminal"></rect><text class="nonterminal" x="383" y="21">action</text></a><line x1="363" y1="17" x2="373" y2="17" class="line"></line><line x1="431" y1="17" x2="441" y2="17" class="line"></line><a xlink:href="#protocol" xlink:title="protocol" shape="rect"><rect x="453" y="3" width="70" height="32"></rect><rect x="451" y="1" width="70" height="32" class="nonterminal"></rect><text class="nonterminal" x="461" y="21">protocol</text></a><line x1="441" y1="17" x2="451" y2="17" class="line"></line><line x1="521" y1="17" x2="531" y2="17" class="line"></line><line x1="534" y1="17" x2="531" y2="17" class="line"></line><polygon points="541 17 549 13 549 21"></polygon><polygon points="541 17 533 13 533 21"></polygon></svg><xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:div class="ebnf"><xhtml:pre><a href="#rule" title="rule" shape="rect">rule</a>     ::= 'FROM' <a href="#target_list" title="target_list" shape="rect">target_list</a> 'TO' <a href="#target_list" title="target_list" shape="rect">target_list</a> <a href="#action" title="action" shape="rect">action</a> <a href="#protocol" title="protocol" shape="rect">protocol</a></xhtml:pre></xhtml:div></xhtml:p><xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml">no references</xhtml:p><xhtml:br xmlns:xhtml="http://www.w3.org/1999/xhtml" /><xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml" style="font-size: 14px; font-weight:bold"><xhtml:a name="target_list">target_list:</xhtml:a></xhtml:p><svg xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" width="288" height="212"><defs><style type="text/css" xml:space="preserve">
-    @namespace "http://www.w3.org/2000/svg";
-    .line                 {fill: none; stroke: #332200;}
-    .bold-line            {stroke: #140E00; shape-rendering: crispEdges; stroke-width: 2; }
-    .thin-line            {stroke: #1F1400; shape-rendering: crispEdges}
-    .filled               {fill: #332200; stroke: none;}
-    text.terminal         {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #140E00;
-                            font-weight: bold;
-                          }
-    text.nonterminal      {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #1A1100;
-                          }
-    text.regexp           {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #1F1400;
-                          }
-    rect, circle, polygon {fill: #332200; stroke: #332200;}
-    rect.terminal         {fill: #FFC34D; stroke: #332200;}
-    rect.nonterminal      {fill: #FFDF9E; stroke: #332200;}
-    rect.text             {fill: none; stroke: none;}    
-    polygon.regexp        {fill: #FFECC7; stroke: #332200;}
-  </style></defs><polygon points="9 17 1 13 1 21"></polygon><polygon points="17 17 9 13 9 21"></polygon><line x1="17" y1="17" x2="19" y2="17" class="line"></line><rect x="51" y="3" width="48" height="32" rx="10"></rect><rect x="49" y="1" width="48" height="32" class="terminal" rx="10"></rect><text class="terminal" x="59" y="21">ANY</text><line x1="39" y1="17" x2="49" y2="17" class="line"></line><line x1="97" y1="17" x2="107" y2="17" class="line"></line><line x1="107" y1="17" x2="249" y2="17" class="line"></line><line x1="19" y1="17" x2="39" y2="17" class="line"></line><line x1="249" y1="17" x2="269" y2="17" class="line"></line><path d="M19 17 Q29 17 29 27" class="line"></path><path d="M259 27 Q259 17 269 17" class="line"></path><line x1="29" y1="27" x2="29" y2="51" class="line"></line><line x1="259" y1="51" x2="259" y2="27" class="line"></line><path d="M29 51 Q29 61 39 61" class="line"></path><path d="M249 61 Q259 61 259 51" class="line"></path><rect x="51" y="47" width="78" height="32" rx="10"></rect><rect x="49" y="45" width="78" height="32" class="terminal" rx="10"></rect><text class="terminal" x="59" y="65">ALL VMS</text><line x1="39" y1="61" x2="49" y2="61" class="line"></line><line x1="127" y1="61" x2="137" y2="61" class="line"></line><line x1="137" y1="61" x2="249" y2="61" class="line"></line><line x1="29" y1="51" x2="29" y2="71" class="line"></line><line x1="259" y1="71" x2="259" y2="51" class="line"></line><line x1="29" y1="71" x2="29" y2="139" class="line"></line><line x1="259" y1="139" x2="259" y2="71" class="line"></line><path d="M29 139 Q29 149 39 149" class="line"></path><path d="M249 149 Q259 149 259 139" class="line"></path><rect x="51" y="135" width="26" height="32" rx="10"></rect><rect x="49" y="133" width="26" height="32" class="terminal" rx="10"></rect><text class="terminal" x="59" y="153">(</text><line x1="39" y1="149" x2="49" y2="149" class="line"></line><line x1="75" y1="149" x2="85" y2="149" class="line"></line><a xlink:href="#target" xlink:title="target" shape="rect"><rect x="117" y="135" width="58" height="32"></rect><rect x="115" y="133" width="58" height="32" class="nonterminal"></rect><text class="nonterminal" x="125" y="153">target</text></a><line x1="105" y1="149" x2="115" y2="149" class="line"></line><line x1="173" y1="149" x2="183" y2="149" class="line"></line><path d="M85 149 L105 149 M104 149 Q95 149 95 139 L95 115 Q95 105 105 105" class="line"></path><path d="M183 149 L203 149 M183 149 Q193 149 193 139 L193 115 Q193 105 183 105" class="line"></path><rect x="117" y="91" width="40" height="32" rx="10"></rect><rect x="115" y="89" width="40" height="32" class="terminal" rx="10"></rect><text class="terminal" x="125" y="109">OR</text><line x1="105" y1="105" x2="115" y2="105" class="line"></line><line x1="155" y1="105" x2="165" y2="105" class="line"></line><line x1="165" y1="105" x2="183" y2="105" class="line"></line><rect x="215" y="135" width="26" height="32" rx="10"></rect><rect x="213" y="133" width="26" height="32" class="terminal" rx="10"></rect><text class="terminal" x="223" y="153">)</text><line x1="203" y1="149" x2="213" y2="149" class="line"></line><line x1="239" y1="149" x2="249" y2="149" class="line"></line><line x1="29" y1="139" x2="29" y2="159" class="line"></line><line x1="259" y1="159" x2="259" y2="139" class="line"></line><line x1="29" y1="159" x2="29" y2="183" class="line"></line><line x1="259" y1="183" x2="259" y2="159" class="line"></line><path d="M29 183 Q29 193 39 193" class="line"></path><path d="M249 193 Q259 193 259 183" class="line"></path><a xlink:href="#target" xlink:title="target" shape="rect"><rect x="51" y="179" width="58" height="32"></rect><rect x="49" y="177" width="58" height="32" class="nonterminal"></rect><text class="nonterminal" x="59" y="197">target</text></a><line x1="39" y1="193" x2="49" y2="193" class="line"></line><line x1="107" y1="193" x2="117" y2="193" class="line"></line><line x1="117" y1="193" x2="249" y2="193" class="line"></line><line x1="272" y1="17" x2="269" y2="17" class="line"></line><polygon points="279 17 287 13 287 21"></polygon><polygon points="279 17 271 13 271 21"></polygon></svg><xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:div class="ebnf"><xhtml:pre><a href="#target_list" title="target_list" shape="rect">target_list</a>
-         ::= 'ANY'
-           | 'ALL VMS'
-           | '(' <a href="#target" title="target" shape="rect">target</a> ( 'OR' <a href="#target" title="target" shape="rect">target</a> )* ')'
-           | <a href="#target" title="target" shape="rect">target</a></xhtml:pre></xhtml:div></xhtml:p><xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml">referenced by:<xhtml:ul><xhtml:li><xhtml:a href="#rule" title="rule">rule</xhtml:a></xhtml:li></xhtml:ul></xhtml:p><xhtml:br xmlns:xhtml="http://www.w3.org/1999/xhtml" /><xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml" style="font-size: 14px; font-weight:bold"><xhtml:a name="target">target:</xhtml:a></xhtml:p><svg xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" width="400" height="212"><defs><style type="text/css" xml:space="preserve">
-    @namespace "http://www.w3.org/2000/svg";
-    .line                 {fill: none; stroke: #332200;}
-    .bold-line            {stroke: #140E00; shape-rendering: crispEdges; stroke-width: 2; }
-    .thin-line            {stroke: #1F1400; shape-rendering: crispEdges}
-    .filled               {fill: #332200; stroke: none;}
-    text.terminal         {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #140E00;
-                            font-weight: bold;
-                          }
-    text.nonterminal      {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #1A1100;
-                          }
-    text.regexp           {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #1F1400;
-                          }
-    rect, circle, polygon {fill: #332200; stroke: #332200;}
-    rect.terminal         {fill: #FFC34D; stroke: #332200;}
-    rect.nonterminal      {fill: #FFDF9E; stroke: #332200;}
-    rect.text             {fill: none; stroke: none;}    
-    polygon.regexp        {fill: #FFECC7; stroke: #332200;}
-  </style></defs><polygon points="9 17 1 13 1 21"></polygon><polygon points="17 17 9 13 9 21"></polygon><line x1="17" y1="17" x2="19" y2="17" class="line"></line><rect x="51" y="3" width="102" height="32" rx="10"></rect><rect x="49" y="1" width="102" height="32" class="terminal" rx="10"></rect><text class="terminal" x="59" y="21">IP ADDRESS</text><line x1="39" y1="17" x2="49" y2="17" class="line"></line><line x1="151" y1="17" x2="161" y2="17" class="line"></line><line x1="161" y1="17" x2="361" y2="17" class="line"></line><line x1="19" y1="17" x2="39" y2="17" class="line"></line><line x1="361" y1="17" x2="381" y2="17" class="line"></line><path d="M19 17 Q29 17 29 27" class="line"></path><path d="M371 27 Q371 17 381 17" class="line"></path><line x1="29" y1="27" x2="29" y2="51" class="line"></line><line x1="371" y1="51" x2="371" y2="27" class="line"></line><path d="M29 51 Q29 61 39 61" class="line"></path><path d="M361 61 Q371 61 371 51" class="line"></path><rect x="51" y="47" width="74" height="32" rx="10"></rect><rect x="49" y="45" width="74" height="32" class="terminal" rx="10"></rect><text class="terminal" x="59" y="65">SUBNET</text><line x1="39" y1="61" x2="49" y2="61" class="line"></line><line x1="123" y1="61" x2="133" y2="61" class="line"></line><line x1="133" y1="61" x2="361" y2="61" class="line"></line><line x1="29" y1="51" x2="29" y2="71" class="line"></line><line x1="371" y1="71" x2="371" y2="51" class="line"></line><line x1="29" y1="71" x2="29" y2="95" class="line"></line><line x1="371" y1="95" x2="371" y2="71" class="line"></line><path d="M29 95 Q29 105 39 105" class="line"></path><path d="M361 105 Q371 105 371 95" class="line"></path><rect x="51" y="91" width="46" height="32" rx="10"></rect><rect x="49" y="89" width="46" height="32" class="terminal" rx="10"></rect><text class="terminal" x="59" y="109">TAG</text><line x1="39" y1="105" x2="49" y2="105" class="line"></line><line x1="95" y1="105" x2="105" y2="105" class="line"></line><a xlink:href="#tag_string" xlink:title="tag_string" shape="rect"><rect x="117" y="91" width="84" height="32"></rect><rect x="115" y="89" width="84" height="32" class="nonterminal"></rect><text class="nonterminal" x="125" y="109">tag_string</text></a><line x1="105" y1="105" x2="115" y2="105" class="line"></line><line x1="199" y1="105" x2="209" y2="105" class="line"></line><line x1="209" y1="105" x2="361" y2="105" class="line"></line><line x1="29" y1="95" x2="29" y2="115" class="line"></line><line x1="371" y1="115" x2="371" y2="95" class="line"></line><line x1="29" y1="115" x2="29" y2="139" class="line"></line><line x1="371" y1="139" x2="371" y2="115" class="line"></line><path d="M29 139 Q29 149 39 149" class="line"></path><path d="M361 149 Q371 149 371 139" class="line"></path><rect x="51" y="135" width="46" height="32" rx="10"></rect><rect x="49" y="133" width="46" height="32" class="terminal" rx="10"></rect><text class="terminal" x="59" y="153">TAG</text><line x1="39" y1="149" x2="49" y2="149" class="line"></line><line x1="95" y1="149" x2="105" y2="149" class="line"></line><a xlink:href="#tag_string" xlink:title="tag_string" shape="rect"><rect x="117" y="135" width="84" height="32"></rect><rect x="115" y="133" width="84" height="32" class="nonterminal"></rect><text class="nonterminal" x="125" y="153">tag_string</text></a><line x1="105" y1="149" x2="115" y2="149" class="line"></line><line x1="199" y1="149" x2="209" y2="149" class="line"></line><rect x="221" y="135" width="30" height="32" rx="10"></rect><rect x="219" y="133" width="30" height="32" class="terminal" rx="10"></rect><text class="terminal" x="229" y="153">=</text><line x1="209" y1="149" x2="219" y2="149" class="line"></line><line x1="249" y1="149" x2="259" y2="149" class="line"></line><a xlink:href="#tag_value" xlink:title="tag_value" shape="rect"><rect x="271" y="135" width="82" height="32"></rect><rect x="269" y="133" width="82" height="32" class="nonterminal"></rect><text class="nonterminal" x="279" y="153">tag_value</text></a><line x1="259" y1="149" x2="269" y2="149" class="line"></line><line x1="351" y1="149" x2="361" y2="149" class="line"></line><line x1="29" y1="139" x2="29" y2="159" class="line"></line><line x1="371" y1="159" x2="371" y2="139" class="line"></line><line x1="29" y1="159" x2="29" y2="183" class="line"></line><line x1="371" y1="183" x2="371" y2="159" class="line"></line><path d="M29 183 Q29 193 39 193" class="line"></path><path d="M361 193 Q371 193 371 183" class="line"></path><rect x="51" y="179" width="40" height="32" rx="10"></rect><rect x="49" y="177" width="40" height="32" class="terminal" rx="10"></rect><text class="terminal" x="59" y="197">VM</text><line x1="39" y1="193" x2="49" y2="193" class="line"></line><line x1="89" y1="193" x2="99" y2="193" class="line"></line><a xlink:href="#uuid" xlink:title="uuid" shape="rect"><rect x="111" y="179" width="46" height="32"></rect><rect x="109" y="177" width="46" height="32" class="nonterminal"></rect><text class="nonterminal" x="119" y="197">uuid</text></a><line x1="99" y1="193" x2="109" y2="193" class="line"></line><line x1="155" y1="193" x2="165" y2="193" class="line"></line><line x1="165" y1="193" x2="361" y2="193" class="line"></line><line x1="384" y1="17" x2="381" y2="17" class="line"></line><polygon points="391 17 399 13 399 21"></polygon><polygon points="391 17 383 13 383 21"></polygon></svg><xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:div class="ebnf"><xhtml:pre><a href="#target" title="target" shape="rect">target</a>   ::= 'IP ADDRESS'
-           | 'SUBNET'
-           | 'TAG' <a href="#tag_string" title="tag_string" shape="rect">tag_string</a>
-           | 'TAG' <a href="#tag_string" title="tag_string" shape="rect">tag_string</a> '=' <a href="#tag_value" title="tag_value" shape="rect">tag_value</a>
-           | 'VM' <a href="#uuid" title="uuid" shape="rect">uuid</a></xhtml:pre></xhtml:div></xhtml:p><xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml">referenced by:<xhtml:ul><xhtml:li><xhtml:a href="#target_list" title="target_list">target_list</xhtml:a></xhtml:li></xhtml:ul></xhtml:p><xhtml:br xmlns:xhtml="http://www.w3.org/1999/xhtml" /><xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml" style="font-size: 14px; font-weight:bold"><xhtml:a name="action">action:</xhtml:a></xhtml:p><svg xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" width="168" height="80"><defs><style type="text/css" xml:space="preserve">
-    @namespace "http://www.w3.org/2000/svg";
-    .line                 {fill: none; stroke: #332200;}
-    .bold-line            {stroke: #140E00; shape-rendering: crispEdges; stroke-width: 2; }
-    .thin-line            {stroke: #1F1400; shape-rendering: crispEdges}
-    .filled               {fill: #332200; stroke: none;}
-    text.terminal         {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #140E00;
-                            font-weight: bold;
-                          }
-    text.nonterminal      {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #1A1100;
-                          }
-    text.regexp           {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #1F1400;
-                          }
-    rect, circle, polygon {fill: #332200; stroke: #332200;}
-    rect.terminal         {fill: #FFC34D; stroke: #332200;}
-    rect.nonterminal      {fill: #FFDF9E; stroke: #332200;}
-    rect.text             {fill: none; stroke: none;}    
-    polygon.regexp        {fill: #FFECC7; stroke: #332200;}
-  </style></defs><polygon points="9 17 1 13 1 21"></polygon><polygon points="17 17 9 13 9 21"></polygon><line x1="17" y1="17" x2="19" y2="17" class="line"></line><rect x="51" y="3" width="66" height="32" rx="10"></rect><rect x="49" y="1" width="66" height="32" class="terminal" rx="10"></rect><text class="terminal" x="59" y="21">BLOCK</text><line x1="39" y1="17" x2="49" y2="17" class="line"></line><line x1="115" y1="17" x2="125" y2="17" class="line"></line><line x1="125" y1="17" x2="129" y2="17" class="line"></line><line x1="19" y1="17" x2="39" y2="17" class="line"></line><line x1="129" y1="17" x2="149" y2="17" class="line"></line><path d="M19 17 Q29 17 29 27" class="line"></path><path d="M139 27 Q139 17 149 17" class="line"></path><line x1="29" y1="27" x2="29" y2="51" class="line"></line><line x1="139" y1="51" x2="139" y2="27" class="line"></line><path d="M29 51 Q29 61 39 61" class="line"></path><path d="M129 61 Q139 61 139 51" class="line"></path><rect x="51" y="47" width="70" height="32" rx="10"></rect><rect x="49" y="45" width="70" height="32" class="terminal" rx="10"></rect><text class="terminal" x="59" y="65">ALLOW</text><line x1="39" y1="61" x2="49" y2="61" class="line"></line><line x1="119" y1="61" x2="129" y2="61" class="line"></line><line x1="152" y1="17" x2="149" y2="17" class="line"></line><polygon points="159 17 167 13 167 21"></polygon><polygon points="159 17 151 13 151 21"></polygon></svg><xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:div class="ebnf"><xhtml:pre><a href="#action" title="action" shape="rect">action</a>   ::= 'BLOCK'
-           | 'ALLOW'</xhtml:pre></xhtml:div></xhtml:p><xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml">referenced by:<xhtml:ul><xhtml:li><xhtml:a href="#rule" title="rule">rule</xhtml:a></xhtml:li></xhtml:ul></xhtml:p><xhtml:br xmlns:xhtml="http://www.w3.org/1999/xhtml" /><xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml" style="font-size: 14px; font-weight:bold"><xhtml:a name="protocol">protocol:</xhtml:a></xhtml:p><svg xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" width="246" height="124"><defs><style type="text/css" xml:space="preserve">
-    @namespace "http://www.w3.org/2000/svg";
-    .line                 {fill: none; stroke: #332200;}
-    .bold-line            {stroke: #140E00; shape-rendering: crispEdges; stroke-width: 2; }
-    .thin-line            {stroke: #1F1400; shape-rendering: crispEdges}
-    .filled               {fill: #332200; stroke: none;}
-    text.terminal         {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #140E00;
-                            font-weight: bold;
-                          }
-    text.nonterminal      {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #1A1100;
-                          }
-    text.regexp           {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #1F1400;
-                          }
-    rect, circle, polygon {fill: #332200; stroke: #332200;}
-    rect.terminal         {fill: #FFC34D; stroke: #332200;}
-    rect.nonterminal      {fill: #FFDF9E; stroke: #332200;}
-    rect.text             {fill: none; stroke: none;}    
-    polygon.regexp        {fill: #FFECC7; stroke: #332200;}
-  </style></defs><polygon points="9 17 1 13 1 21"></polygon><polygon points="17 17 9 13 9 21"></polygon><line x1="17" y1="17" x2="19" y2="17" class="line"></line><rect x="51" y="3" width="46" height="32" rx="10"></rect><rect x="49" y="1" width="46" height="32" class="terminal" rx="10"></rect><text class="terminal" x="59" y="21">TCP</text><line x1="39" y1="17" x2="49" y2="17" class="line"></line><line x1="95" y1="17" x2="105" y2="17" class="line"></line><a xlink:href="#port_list" xlink:title="port_list" shape="rect"><rect x="117" y="3" width="72" height="32"></rect><rect x="115" y="1" width="72" height="32" class="nonterminal"></rect><text class="nonterminal" x="125" y="21">port_list</text></a><line x1="105" y1="17" x2="115" y2="17" class="line"></line><line x1="187" y1="17" x2="197" y2="17" class="line"></line><line x1="197" y1="17" x2="207" y2="17" class="line"></line><line x1="19" y1="17" x2="39" y2="17" class="line"></line><line x1="207" y1="17" x2="227" y2="17" class="line"></line><path d="M19 17 Q29 17 29 27" class="line"></path><path d="M217 27 Q217 17 227 17" class="line"></path><line x1="29" y1="27" x2="29" y2="51" class="line"></line><line x1="217" y1="51" x2="217" y2="27" class="line"></line><path d="M29 51 Q29 61 39 61" class="line"></path><path d="M207 61 Q217 61 217 51" class="line"></path><rect x="51" y="47" width="48" height="32" rx="10"></rect><rect x="49" y="45" width="48" height="32" class="terminal" rx="10"></rect><text class="terminal" x="59" y="65">UDP</text><line x1="39" y1="61" x2="49" y2="61" class="line"></line><line x1="97" y1="61" x2="107" y2="61" class="line"></line><a xlink:href="#port_list" xlink:title="port_list" shape="rect"><rect x="119" y="47" width="72" height="32"></rect><rect x="117" y="45" width="72" height="32" class="nonterminal"></rect><text class="nonterminal" x="127" y="65">port_list</text></a><line x1="107" y1="61" x2="117" y2="61" class="line"></line><line x1="189" y1="61" x2="199" y2="61" class="line"></line><line x1="199" y1="61" x2="207" y2="61" class="line"></line><line x1="29" y1="51" x2="29" y2="71" class="line"></line><line x1="217" y1="71" x2="217" y2="51" class="line"></line><line x1="29" y1="71" x2="29" y2="95" class="line"></line><line x1="217" y1="95" x2="217" y2="71" class="line"></line><path d="M29 95 Q29 105 39 105" class="line"></path><path d="M207 105 Q217 105 217 95" class="line"></path><rect x="51" y="91" width="54" height="32" rx="10"></rect><rect x="49" y="89" width="54" height="32" class="terminal" rx="10"></rect><text class="terminal" x="59" y="109">ICMP</text><line x1="39" y1="105" x2="49" y2="105" class="line"></line><line x1="103" y1="105" x2="113" y2="105" class="line"></line><a xlink:href="#type_list" xlink:title="type_list" shape="rect"><rect x="125" y="91" width="74" height="32"></rect><rect x="123" y="89" width="74" height="32" class="nonterminal"></rect><text class="nonterminal" x="133" y="109">type_list</text></a><line x1="113" y1="105" x2="123" y2="105" class="line"></line><line x1="197" y1="105" x2="207" y2="105" class="line"></line><line x1="230" y1="17" x2="227" y2="17" class="line"></line><polygon points="237 17 245 13 245 21"></polygon><polygon points="237 17 229 13 229 21"></polygon></svg><xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:div class="ebnf"><xhtml:pre><a href="#protocol" title="protocol" shape="rect">protocol</a> ::= 'TCP' <a href="#port_list" title="port_list" shape="rect">port_list</a>
-           | 'UDP' <a href="#port_list" title="port_list" shape="rect">port_list</a>
-           | 'ICMP' <a href="#type_list" title="type_list" shape="rect">type_list</a></xhtml:pre></xhtml:div></xhtml:p><xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml">referenced by:<xhtml:ul><xhtml:li><xhtml:a href="#rule" title="rule">rule</xhtml:a></xhtml:li></xhtml:ul></xhtml:p><xhtml:br xmlns:xhtml="http://www.w3.org/1999/xhtml" /><xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml" style="font-size: 14px; font-weight:bold"><xhtml:a name="port_list">port_list:</xhtml:a></xhtml:p><svg xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" width="278" height="212"><defs><style type="text/css" xml:space="preserve">
-    @namespace "http://www.w3.org/2000/svg";
-    .line                 {fill: none; stroke: #332200;}
-    .bold-line            {stroke: #140E00; shape-rendering: crispEdges; stroke-width: 2; }
-    .thin-line            {stroke: #1F1400; shape-rendering: crispEdges}
-    .filled               {fill: #332200; stroke: none;}
-    text.terminal         {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #140E00;
-                            font-weight: bold;
-                          }
-    text.nonterminal      {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #1A1100;
-                          }
-    text.regexp           {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #1F1400;
-                          }
-    rect, circle, polygon {fill: #332200; stroke: #332200;}
-    rect.terminal         {fill: #FFC34D; stroke: #332200;}
-    rect.nonterminal      {fill: #FFDF9E; stroke: #332200;}
-    rect.text             {fill: none; stroke: none;}    
-    polygon.regexp        {fill: #FFECC7; stroke: #332200;}
-  </style></defs><polygon points="9 61 1 57 1 65"></polygon><polygon points="17 61 9 57 9 65"></polygon><line x1="17" y1="61" x2="19" y2="61" class="line"></line><rect x="51" y="47" width="26" height="32" rx="10"></rect><rect x="49" y="45" width="26" height="32" class="terminal" rx="10"></rect><text class="terminal" x="59" y="65">(</text><line x1="39" y1="61" x2="49" y2="61" class="line"></line><line x1="75" y1="61" x2="85" y2="61" class="line"></line><a xlink:href="#port" xlink:title="port" shape="rect"><rect x="117" y="47" width="46" height="32"></rect><rect x="115" y="45" width="46" height="32" class="nonterminal"></rect><text class="nonterminal" x="125" y="65">port</text></a><line x1="105" y1="61" x2="115" y2="61" class="line"></line><line x1="161" y1="61" x2="171" y2="61" class="line"></line><line x1="171" y1="61" x2="173" y2="61" class="line"></line><path d="M85 61 L105 61 M104 61 Q95 61 95 51 L95 27 Q95 17 105 17" class="line"></path><path d="M173 61 L193 61 M173 61 Q183 61 183 51 L183 27 Q183 17 173 17" class="line"></path><rect x="117" y="3" width="48" height="32" rx="10"></rect><rect x="115" y="1" width="48" height="32" class="terminal" rx="10"></rect><text class="terminal" x="125" y="21">AND</text><line x1="105" y1="17" x2="115" y2="17" class="line"></line><line x1="163" y1="17" x2="173" y2="17" class="line"></line><rect x="205" y="47" width="26" height="32" rx="10"></rect><rect x="203" y="45" width="26" height="32" class="terminal" rx="10"></rect><text class="terminal" x="213" y="65">)</text><line x1="193" y1="61" x2="203" y2="61" class="line"></line><line x1="229" y1="61" x2="239" y2="61" class="line"></line><line x1="19" y1="61" x2="39" y2="61" class="line"></line><line x1="239" y1="61" x2="259" y2="61" class="line"></line><path d="M19 61 Q29 61 29 71" class="line"></path><path d="M249 71 Q249 61 259 61" class="line"></path><line x1="29" y1="71" x2="29" y2="95" class="line"></line><line x1="249" y1="95" x2="249" y2="71" class="line"></line><path d="M29 95 Q29 105 39 105" class="line"></path><path d="M239 105 Q249 105 249 95" class="line"></path><a xlink:href="#port" xlink:title="port" shape="rect"><rect x="51" y="91" width="46" height="32"></rect><rect x="49" y="89" width="46" height="32" class="nonterminal"></rect><text class="nonterminal" x="59" y="109">port</text></a><line x1="39" y1="105" x2="49" y2="105" class="line"></line><line x1="95" y1="105" x2="105" y2="105" class="line"></line><line x1="105" y1="105" x2="239" y2="105" class="line"></line><line x1="29" y1="95" x2="29" y2="115" class="line"></line><line x1="249" y1="115" x2="249" y2="95" class="line"></line><line x1="29" y1="115" x2="29" y2="139" class="line"></line><line x1="249" y1="139" x2="249" y2="115" class="line"></line><path d="M29 139 Q29 149 39 149" class="line"></path><path d="M239 149 Q249 149 249 139" class="line"></path><rect x="51" y="135" width="26" height="32" rx="10"></rect><rect x="49" y="133" width="26" height="32" class="terminal" rx="10"></rect><text class="terminal" x="59" y="153">(</text><line x1="39" y1="149" x2="49" y2="149" class="line"></line><line x1="75" y1="149" x2="85" y2="149" class="line"></line><rect x="97" y="135" width="86" height="32" rx="10"></rect><rect x="95" y="133" width="86" height="32" class="terminal" rx="10"></rect><text class="terminal" x="105" y="153">PORT ALL</text><line x1="85" y1="149" x2="95" y2="149" class="line"></line><line x1="181" y1="149" x2="191" y2="149" class="line"></line><rect x="203" y="135" width="26" height="32" rx="10"></rect><rect x="201" y="133" width="26" height="32" class="terminal" rx="10"></rect><text class="terminal" x="211" y="153">)</text><line x1="191" y1="149" x2="201" y2="149" class="line"></line><line x1="227" y1="149" x2="237" y2="149" class="line"></line><line x1="237" y1="149" x2="239" y2="149" class="line"></line><line x1="29" y1="139" x2="29" y2="159" class="line"></line><line x1="249" y1="159" x2="249" y2="139" class="line"></line><line x1="29" y1="159" x2="29" y2="183" class="line"></line><line x1="249" y1="183" x2="249" y2="159" class="line"></line><path d="M29 183 Q29 193 39 193" class="line"></path><path d="M239 193 Q249 193 249 183" class="line"></path><rect x="51" y="179" width="86" height="32" rx="10"></rect><rect x="49" y="177" width="86" height="32" class="terminal" rx="10"></rect><text class="terminal" x="59" y="197">PORT ALL</text><line x1="39" y1="193" x2="49" y2="193" class="line"></line><line x1="135" y1="193" x2="145" y2="193" class="line"></line><line x1="145" y1="193" x2="239" y2="193" class="line"></line><line x1="262" y1="61" x2="259" y2="61" class="line"></line><polygon points="269 61 277 57 277 65"></polygon><polygon points="269 61 261 57 261 65"></polygon></svg><xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:div class="ebnf"><xhtml:pre><a href="#port_list" title="port_list" shape="rect">port_list</a>
-         ::= '(' <a href="#port" title="port" shape="rect">port</a> ( 'AND' <a href="#port" title="port" shape="rect">port</a> )* ')'
-           | <a href="#port" title="port" shape="rect">port</a>
-           | '(' 'PORT ALL' ')'
-           | 'PORT ALL'</xhtml:pre></xhtml:div></xhtml:p><xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml">referenced by:<xhtml:ul><xhtml:li><xhtml:a href="#protocol" title="protocol">protocol</xhtml:a></xhtml:li></xhtml:ul></xhtml:p><xhtml:br xmlns:xhtml="http://www.w3.org/1999/xhtml" /><xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml" style="font-size: 14px; font-weight:bold"><xhtml:a name="port">port:</xhtml:a></xhtml:p><svg xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" width="222" height="36"><defs><style type="text/css" xml:space="preserve">
-    @namespace "http://www.w3.org/2000/svg";
-    .line                 {fill: none; stroke: #332200;}
-    .bold-line            {stroke: #140E00; shape-rendering: crispEdges; stroke-width: 2; }
-    .thin-line            {stroke: #1F1400; shape-rendering: crispEdges}
-    .filled               {fill: #332200; stroke: none;}
-    text.terminal         {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #140E00;
-                            font-weight: bold;
-                          }
-    text.nonterminal      {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #1A1100;
-                          }
-    text.regexp           {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #1F1400;
-                          }
-    rect, circle, polygon {fill: #332200; stroke: #332200;}
-    rect.terminal         {fill: #FFC34D; stroke: #332200;}
-    rect.nonterminal      {fill: #FFDF9E; stroke: #332200;}
-    rect.text             {fill: none; stroke: none;}    
-    polygon.regexp        {fill: #FFECC7; stroke: #332200;}
-  </style></defs><polygon points="9 17 1 13 1 21"></polygon><polygon points="17 17 9 13 9 21"></polygon><line x1="17" y1="17" x2="19" y2="17" class="line"></line><rect x="31" y="3" width="56" height="32" rx="10"></rect><rect x="29" y="1" width="56" height="32" class="terminal" rx="10"></rect><text class="terminal" x="39" y="21">PORT</text><line x1="19" y1="17" x2="29" y2="17" class="line"></line><line x1="85" y1="17" x2="95" y2="17" class="line"></line><rect x="107" y="3" width="88" height="32" rx="10"></rect><rect x="105" y="1" width="88" height="32" class="terminal" rx="10"></rect><text class="terminal" x="115" y="21">1 - 65535</text><line x1="95" y1="17" x2="105" y2="17" class="line"></line><line x1="193" y1="17" x2="203" y2="17" class="line"></line><line x1="206" y1="17" x2="203" y2="17" class="line"></line><polygon points="213 17 221 13 221 21"></polygon><polygon points="213 17 205 13 205 21"></polygon></svg><xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:div class="ebnf"><xhtml:pre><a href="#port" title="port" shape="rect">port</a>     ::= 'PORT' '1 - 65535'</xhtml:pre></xhtml:div></xhtml:p><xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml">referenced by:<xhtml:ul><xhtml:li><xhtml:a href="#port_list" title="port_list">port_list</xhtml:a></xhtml:li></xhtml:ul></xhtml:p><xhtml:br xmlns:xhtml="http://www.w3.org/1999/xhtml" /><xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml" style="font-size: 14px; font-weight:bold"><xhtml:a name="type_list">type_list:</xhtml:a></xhtml:p><svg xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" width="278" height="124"><defs><style type="text/css" xml:space="preserve">
-    @namespace "http://www.w3.org/2000/svg";
-    .line                 {fill: none; stroke: #332200;}
-    .bold-line            {stroke: #140E00; shape-rendering: crispEdges; stroke-width: 2; }
-    .thin-line            {stroke: #1F1400; shape-rendering: crispEdges}
-    .filled               {fill: #332200; stroke: none;}
-    text.terminal         {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #140E00;
-                            font-weight: bold;
-                          }
-    text.nonterminal      {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #1A1100;
-                          }
-    text.regexp           {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #1F1400;
-                          }
-    rect, circle, polygon {fill: #332200; stroke: #332200;}
-    rect.terminal         {fill: #FFC34D; stroke: #332200;}
-    rect.nonterminal      {fill: #FFDF9E; stroke: #332200;}
-    rect.text             {fill: none; stroke: none;}    
-    polygon.regexp        {fill: #FFECC7; stroke: #332200;}
-  </style></defs><polygon points="9 61 1 57 1 65"></polygon><polygon points="17 61 9 57 9 65"></polygon><line x1="17" y1="61" x2="19" y2="61" class="line"></line><rect x="51" y="47" width="26" height="32" rx="10"></rect><rect x="49" y="45" width="26" height="32" class="terminal" rx="10"></rect><text class="terminal" x="59" y="65">(</text><line x1="39" y1="61" x2="49" y2="61" class="line"></line><line x1="75" y1="61" x2="85" y2="61" class="line"></line><a xlink:href="#type" xlink:title="type" shape="rect"><rect x="117" y="47" width="48" height="32"></rect><rect x="115" y="45" width="48" height="32" class="nonterminal"></rect><text class="nonterminal" x="125" y="65">type</text></a><line x1="105" y1="61" x2="115" y2="61" class="line"></line><line x1="163" y1="61" x2="173" y2="61" class="line"></line><path d="M85 61 L105 61 M104 61 Q95 61 95 51 L95 27 Q95 17 105 17" class="line"></path><path d="M173 61 L193 61 M173 61 Q183 61 183 51 L183 27 Q183 17 173 17" class="line"></path><rect x="117" y="3" width="48" height="32" rx="10"></rect><rect x="115" y="1" width="48" height="32" class="terminal" rx="10"></rect><text class="terminal" x="125" y="21">AND</text><line x1="105" y1="17" x2="115" y2="17" class="line"></line><line x1="163" y1="17" x2="173" y2="17" class="line"></line><rect x="205" y="47" width="26" height="32" rx="10"></rect><rect x="203" y="45" width="26" height="32" class="terminal" rx="10"></rect><text class="terminal" x="213" y="65">)</text><line x1="193" y1="61" x2="203" y2="61" class="line"></line><line x1="229" y1="61" x2="239" y2="61" class="line"></line><line x1="19" y1="61" x2="39" y2="61" class="line"></line><line x1="239" y1="61" x2="259" y2="61" class="line"></line><path d="M19 61 Q29 61 29 71" class="line"></path><path d="M249 71 Q249 61 259 61" class="line"></path><line x1="29" y1="71" x2="29" y2="95" class="line"></line><line x1="249" y1="95" x2="249" y2="71" class="line"></line><path d="M29 95 Q29 105 39 105" class="line"></path><path d="M239 105 Q249 105 249 95" class="line"></path><a xlink:href="#type" xlink:title="type" shape="rect"><rect x="51" y="91" width="48" height="32"></rect><rect x="49" y="89" width="48" height="32" class="nonterminal"></rect><text class="nonterminal" x="59" y="109">type</text></a><line x1="39" y1="105" x2="49" y2="105" class="line"></line><line x1="97" y1="105" x2="107" y2="105" class="line"></line><line x1="107" y1="105" x2="239" y2="105" class="line"></line><line x1="262" y1="61" x2="259" y2="61" class="line"></line><polygon points="269 61 277 57 277 65"></polygon><polygon points="269 61 261 57 261 65"></polygon></svg><xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:div class="ebnf"><xhtml:pre><a href="#type_list" title="type_list" shape="rect">type_list</a>
-         ::= '(' <a href="#type" title="type" shape="rect">type</a> ( 'AND' <a href="#type" title="type" shape="rect">type</a> )* ')'
-           | <a href="#type" title="type" shape="rect">type</a></xhtml:pre></xhtml:div></xhtml:p><xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml">referenced by:<xhtml:ul><xhtml:li><xhtml:a href="#protocol" title="protocol">protocol</xhtml:a></xhtml:li></xhtml:ul></xhtml:p><xhtml:br xmlns:xhtml="http://www.w3.org/1999/xhtml" /><xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml" style="font-size: 14px; font-weight:bold"><xhtml:a name="type">type:</xhtml:a></xhtml:p><svg xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" width="410" height="80"><defs><style type="text/css" xml:space="preserve">
-    @namespace "http://www.w3.org/2000/svg";
-    .line                 {fill: none; stroke: #332200;}
-    .bold-line            {stroke: #140E00; shape-rendering: crispEdges; stroke-width: 2; }
-    .thin-line            {stroke: #1F1400; shape-rendering: crispEdges}
-    .filled               {fill: #332200; stroke: none;}
-    text.terminal         {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #140E00;
-                            font-weight: bold;
-                          }
-    text.nonterminal      {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #1A1100;
-                          }
-    text.regexp           {font-family: Verdana, Sans-serif;
-                            font-size: 12px;
-                            fill: #1F1400;
-                          }
-    rect, circle, polygon {fill: #332200; stroke: #332200;}
-    rect.terminal         {fill: #FFC34D; stroke: #332200;}
-    rect.nonterminal      {fill: #FFDF9E; stroke: #332200;}
-    rect.text             {fill: none; stroke: none;}    
-    polygon.regexp        {fill: #FFECC7; stroke: #332200;}
-  </style></defs><polygon points="9 17 1 13 1 21"></polygon><polygon points="17 17 9 13 9 21"></polygon><line x1="17" y1="17" x2="19" y2="17" class="line"></line><rect x="51" y="3" width="54" height="32" rx="10"></rect><rect x="49" y="1" width="54" height="32" class="terminal" rx="10"></rect><text class="terminal" x="59" y="21">TYPE</text><line x1="39" y1="17" x2="49" y2="17" class="line"></line><line x1="103" y1="17" x2="113" y2="17" class="line"></line><rect x="125" y="3" width="70" height="32" rx="10"></rect><rect x="123" y="1" width="70" height="32" class="terminal" rx="10"></rect><text class="terminal" x="133" y="21">0 - 255</text><line x1="113" y1="17" x2="123" y2="17" class="line"></line><line x1="193" y1="17" x2="203" y2="17" class="line"></line><rect x="215" y="3" width="58" height="32" rx="10"></rect><rect x="213" y="1" width="58" height="32" class="terminal" rx="10"></rect><text class="terminal" x="223" y="21">CODE</text><line x1="203" y1="17" x2="213" y2="17" class="line"></line><line x1="271" y1="17" x2="281" y2="17" class="line"></line><rect x="293" y="3" width="70" height="32" rx="10"></rect><rect x="291" y="1" width="70" height="32" class="terminal" rx="10"></rect><text class="terminal" x="301" y="21">0 - 255</text><line x1="281" y1="17" x2="291" y2="17" class="line"></line><line x1="361" y1="17" x2="371" y2="17" class="line"></line><line x1="19" y1="17" x2="39" y2="17" class="line"></line><line x1="371" y1="17" x2="391" y2="17" class="line"></line><path d="M19 17 Q29 17 29 27" class="line"></path><path d="M381 27 Q381 17 391 17" class="line"></path><line x1="29" y1="27" x2="29" y2="51" class="line"></line><line x1="381" y1="51" x2="381" y2="27" class="line"></line><path d="M29 51 Q29 61 39 61" class="line"></path><path d="M371 61 Q381 61 381 51" class="line"></path><rect x="51" y="47" width="54" height="32" rx="10"></rect><rect x="49" y="45" width="54" height="32" class="terminal" rx="10"></rect><text class="terminal" x="59" y="65">TYPE</text><line x1="39" y1="61" x2="49" y2="61" class="line"></line><line x1="103" y1="61" x2="113" y2="61" class="line"></line><rect x="125" y="47" width="70" height="32" rx="10"></rect><rect x="123" y="45" width="70" height="32" class="terminal" rx="10"></rect><text class="terminal" x="133" y="65">0 - 255</text><line x1="113" y1="61" x2="123" y2="61" class="line"></line><line x1="193" y1="61" x2="203" y2="61" class="line"></line><line x1="203" y1="61" x2="371" y2="61" class="line"></line><line x1="394" y1="17" x2="391" y2="17" class="line"></line><polygon points="401 17 409 13 409 21"></polygon><polygon points="401 17 393 13 393 21"></polygon></svg><xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:div class="ebnf"><xhtml:pre><a href="#type" title="type" shape="rect">type</a>     ::= 'TYPE' '0 - 255' 'CODE' '0 - 255'
-           | 'TYPE' '0 - 255'</xhtml:pre></xhtml:div></xhtml:p><xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml">referenced by:<xhtml:ul><xhtml:li><xhtml:a href="#type_list" title="type_list">type_list</xhtml:a></xhtml:li></xhtml:ul></xhtml:p><xhtml:br xmlns:xhtml="http://www.w3.org/1999/xhtml" /><xhtml:hr xmlns:xhtml="http://www.w3.org/1999/xhtml" /><xhtml:p xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:table border="0" class="signature"><xhtml:tr><xhtml:td style="width: 100%"> </xhtml:td><xhtml:td valign="top"><xhtml:nobr class="signature">... generated by <xhtml:a name="Railroad-Diagram-Generator" class="signature" title="http://www.bottlecaps.de/rr/ui" href="http://www.bottlecaps.de/rr/ui" target="_blank">Railroad Diagram Generator</xhtml:a></xhtml:nobr></xhtml:td><xhtml:td><xhtml:a name="Railroad-Diagram-Generator" title="http://www.bottlecaps.de/rr/ui" href="http://www.bottlecaps.de/rr/ui" target="_blank"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"><g transform="scale(0.177777777777777778)"><circle cx="45" cy="45" r="45" style="stroke:none; fill:#FFCC00"></circle><circle cx="45" cy="45" r="42" style="stroke:#332900; stroke-width:2px; fill:#FFCC00"></circle><line x1="15" y1="15" x2="75" y2="75" stroke="#332900" style="stroke-width:9px;"></line><line x1="15" y1="75" x2="75" y2="15" stroke="#332900" style="stroke-width:9px;"></line><text x="7" y="54" style="font-size:26px; font-family:Arial, Sans-serif; font-weight:bold; fill: #332900">R</text><text x="64" y="54" style="font-size:26px; font-family:Arial, Sans-serif; font-weight:bold; fill: #332900">R</text></g></svg></xhtml:a></xhtml:td></xhtml:tr></xhtml:table></xhtml:p></body></html>
\ No newline at end of file
diff --git a/node_modules/fw/tools/fwrule/docs/rules.md b/node_modules/fw/tools/fwrule/docs/rules.md
deleted file mode 100644
index 60f71e9..0000000
--- a/node_modules/fw/tools/fwrule/docs/rules.md
+++ /dev/null
@@ -1,314 +0,0 @@
-# Overview
-
-The base policy for a VM with its firewall enabled is:
-
-* block all inbound traffic
-* allow all outbound traffic
-
-All firewall rules applied to a VM are applied on top of those defaults.
-Firewall rules can affect one VM (using the vm target) or many (using the
-tag or all vms target types).
-
-Adding and updating rules takes effect immediately.  Adding or removing
-tags on a VM causes rules that apply to those tags to be added or removed
-immediately.
-
-In the case of two rules that affect the same VM and port, the rule that
-goes counter to the default policy takes precedence.  This means:
-
-* If you have an incoming BLOCK and an incoming ALLOW rule for the
-  same VM and port, the ALLOW will override.
-* If you have an outgoing BLOCK and an outgoing ALLOW rule for the
-  same VM and port, the BLOCK will override.
-
-
-# Rule payload
-
-Rules are created and updated using a JSON payload as in this example:
-
-    {
-        "rule": "FROM any TO all vms ALLOW tcp port 22",
-        "enabled": true,
-        "owner_uuid": "5c3ea269-75b8-42fa-badc-956684fb4d4e"
-    }
-
-The properties of this payload are:
-
-* **rule** (required): the firewall rule.  See the Rule Syntax section below
-  for the syntax.
-* **enabled** (boolean, optional): If set to true, the rule will be applied
-  to VMs.  If set to false, the rule will be added but not applied.
-* **global** (boolean, optional): If set, the rule will be applied to all VMs
-  in the datacenter, regardless of owner.
-* **owner_uuid** (UUID, optional): If set, restricts the set of VMs that
-  the rule can be applied to VMs owned by this UUID.
-
-Note that only one of **owner_uuid** or **global** can be set at a time for
-a rule.
-
-
-# Rule syntax
-
-Firewall rules are in the following format:
-
-    FROM &lt;from targets> TO &lt;to targets> &lt;action> &lt;protocol> &lt;ports or types>
-    
-The parameters are the following:
-
-**from targets** and **to targets** can be any of the following types
-(see the Target Types section below):
-
-* vm &lt;uuid>
-* ip &lt;IPv4 or IPv6 address>
-* subnet &lt;subnet CIDR>
-* tag &lt;tag name>
-* tag &lt;tag name>=&lt;tag value>
-* a target list of up to 32 of the above
-* all vms
-* any
-
-**action** can be one of (see the Actions section below):
-
-* ALLOW
-* BLOCK
-
-**protocol** can be one of (see the Protocols section below):
-
-* tcp
-* udp
-* icmp
-* icmp6
-
-**ports** or **types** can be one of (see the Ports section below):
-
-* port &lt;port number> (if protocol is tcp or udp)
-* ports &lt;port numbers and ranges> (if protocol is tcp or udp)
-* type &lt;ICMP type> (if protocol is icmp)
-* type &lt;ICMP type> code &lt;ICMP code> (if protocol is icmp)
-
-
-The limits for the parameters are:
-
-* 24 from targets
-* 24 to targets
-* 8 ports or types
-
-
-# Target types
-
-## vm
-
-    vm &lt;uuid>
-
-Targets the VM with that UUID.
-
-**Example:**
-
-    FROM any to vm 04128191-d2cb-43fc-a970-e4deefe970d8 ALLOW tcp port 80
-
-Allows HTTP traffic from any host to VM 04128...
-
-## ip
-
-    ip &lt;IP address>
-
-Targets the specified IPv4 or IPv6 address.
-
-**Example:**
-
-    FROM all vms to (ip 10.2.0.1 OR ip fd22::1234) BLOCK tcp port 25
-
-Blocks SMTP traffic to that IP.
-
-## subnet
-
-    subnet &lt;subnet CIDR>
-
-Targets the specified IPv4 or IPv6 subnet range.
-
-**Example:**
-
-    FROM subnet 10.8.0.0/16 TO vm 0f570678-c007-4610-a2c0-bbfcaab9f4e6 ALLOW tcp port 443
-    
-Allows HTTPS traffic from a private IPv4 /16 to the specified VM.
-
-**Example:**
-
-    FROM subnet fd22::/64 TO vm 0f570678-c007-4610-a2c0-bbfcaab9f4e6 ALLOW tcp port 443
-    
-Allows HTTPS traffic from a private IPv6 /64 to the specified VM.
-
-## tag
-
-    tag &lt;name>
-    tag &lt;name> = &lt;value>
-    tag "&lt;name with spaces>" = "&lt;value with spaces>"
-
-Targets all VMs with the specified tag, or all VMs with the specified tag
-and value.  Both tag name and value can be quoted if they contain spaces.
-
-**Examples:**
-
-    FROM all vms TO tag syslog ALLOW udp port 514
-
-Allows syslog traffic from all VMs to syslog servers.
-
-    FROM tag role = db TO tag role = www ALLOW tcp port 5432
-
-Allows database traffic from databases to webservers. All other VMs with
-role tags (role = staging, for example) will not be affected by this rule.
-
-    FROM all vms TO tag "VM type" = "LDAP server" ALLOW tcp PORT 389
-
-Allow LDAP access from all VMs to LDAP servers.
-
-## all vms
-
-    all vms
-
-Targets all VMs.
-
-**Example:**
-
-    FROM all vms TO all vms ALLOW tcp port 22
-
-Allows ssh traffic between all VMs.
-
-## any
-
-    any
-
-Targets any host (any IPv4 address).
-
-**Example:**
-
-    FROM any TO all vms ALLOW tcp port 80
-
-Allows HTTP traffic from any IP to all VMs.
-
-## target list
-
-    ( &lt;target> OR &lt;target> OR ... )
-
-The vm, ip, subnet and tag target types can be combined into a list surrounded
-by parentheses and joined by OR.
-
-**Example:**
-
-    FROM (vm 163dcedb-828d-43c9-b076-625423250ee2 OR tag db) TO (subnet 10.2.2.0/24 OR ip 10.3.0.1) BLOCK tcp port 443
-    
-Blocks HTTPS traffic to an internal subnet and IP.
-
-
-# Actions
-
-    ALLOW
-    BLOCK
-
-Actions can be one of ALLOW or BLOCK.  Note that certain combinations of
-actions and directions will essentially have no effect on the behaviour
-of a VM's firewall.  For example:
-
-    FROM any TO all vms BLOCK tcp port 143
-
-Since the default rule set blocks all incoming ports, this rule doesn't
-really have an effect on the VMs.  Another example:
-
-    FROM all vms TO any ALLOW tcp port 25
-
-Since the default policy allows all outbound traffic, this rule doesn't
-have an effect.
-
-
-# Protocols
-
-    tcp
-    udp
-    icmp
-    icmp6
-
-The protocol can be one of tcp, udp or icmp(6). The protocol dictates whether
-ports or types can be used (see the Ports section below).
-
-
-# Ports
-
-    port &lt;port number>
-    ( port &lt;port number> AND port &lt;port number> ... )
-    ports &lt;port number or range>
-    ports &lt;port number or range>, &lt;port number or range>, ...
-    type &lt;icmp type>
-    type &lt;icmp type> code &lt;icmp code>
-    ( type &lt;icmp type> AND type &lt;icmp type> code &lt;icmp code> AND ... )
-
-For TCP and UDP, this specifies the port numbers that the rule applies to.
-Port numbers must be between 1 and 65535, inclusive. Ranges are written as two
-port numbers separated by a - (hyphen), with the lower number coming first, with
-optional spaces around the hyphen. Port ranges are inclusive, so writing the
-range "20 - 22" would cause the rule to apply to the ports 20, 21 and 22.
-
-For ICMP, this specifies the ICMP type and optional code that the rule
-applies to.  Types and codes must be between 0 and 255, inclusive.
-
-**Examples:**
-
-    FROM tag www TO any ALLOW tcp (port 80 AND port 443)
-
-Allows HTTP and HTTPS traffic from any IP to all webservers.
-
-    FROM tag www TO any ALLOW tcp ports 80, 443, 8000-8100
-
-Allows traffic on HTTP, HTTPS and common alternative HTTP ports from any IP to
-all webservers.
-
-    FROM any TO all vms ALLOW icmp TYPE 8 CODE 0
-
-Allows pinging all VMs. The IPv6 equivalent would be:
-
-    FROM any TO all vms ALLOW icmp6 TYPE 128 CODE 0
-
-And to block outgoing replies:
-
-    FROM all vms TO any BLOCK icmp TYPE 0
-    FROM all vms TO any BLOCK icmp6 TYPE 129
-
-
-# Examples
-
-    FROM all vms TO tag syslog ALLOW udp port 514
-
-Allows syslog traffic from all VMs to syslog servers.
-
-    FROM tag role = db TO tag role = www ALLOW tcp port 5432
-
-Allows database traffic from databases to webservers.
-
-    FROM all vms TO all vms ALLOW tcp port 22
-
-Allows ssh traffic between all VMs.
-
-    FROM any TO all vms ALLOW tcp port 80
-
-Allow HTTP traffic from any host to all VMs.
-
-
-# Error Messages
-
-This section explains error messages.
-
-## rule does not affect VMs
-
-The rule you're trying to create doesn't contain any targets that will
-actually cause rules to be applied to VMs.  Targets that will cause rules
-to be applied are:
-
-* tag
-* vm
-* all vms
-
-Some examples of rules that would cause this message include:
-
-    FROM any TO any ALLOW tcp port 22
-
-    FROM ip 192.168.1.3 TO subnet 192.168.1.0/24 ALLOW tcp port 22
-
diff --git a/node_modules/fw/tools/fwrule/docs/rules.md.in b/node_modules/fw/tools/fwrule/docs/rules.md.in
deleted file mode 100644
index 51f83cb..0000000
--- a/node_modules/fw/tools/fwrule/docs/rules.md.in
+++ /dev/null
@@ -1,322 +0,0 @@
-# Overview
-
-The base policy for a VM with its firewall enabled is:
-
-* block all inbound traffic
-* allow all outbound traffic
-
-All firewall rules applied to a VM are applied on top of those defaults.
-Firewall rules can affect one VM (using the vm target) or many (using the
-tag or all vms target types).
-
-Adding and updating rules takes effect immediately.  Adding or removing
-tags on a VM causes rules that apply to those tags to be added or removed
-immediately.
-
-In the case of two rules that affect the same VM and port, the rule that
-goes counter to the default policy takes precedence.  This means:
-
-* If you have an incoming BLOCK and an incoming ALLOW rule for the
-  same VM and port, the ALLOW will override.
-* If you have an outgoing BLOCK and an outgoing ALLOW rule for the
-  same VM and port, the BLOCK will override.
-
-
-# Rule payload
-
-Rules are created and updated using a JSON payload as in this example:
-
-    {
-        "rule": "FROM any TO all vms ALLOW tcp port 22",
-        "enabled": true,
-        "owner_uuid": "5c3ea269-75b8-42fa-badc-956684fb4d4e"
-    }
-
-The properties of this payload are:
-
-* **rule** (required): the firewall rule.  See the Rule Syntax section below
-  for the syntax.
-* **enabled** (boolean, optional): If set to true, the rule will be applied
-  to VMs.  If set to false, the rule will be added but not applied.
-* **global** (boolean, optional): If set, the rule will be applied to all VMs
-  in the datacenter, regardless of owner.
-* **owner_uuid** (UUID, optional): If set, restricts the set of VMs that
-  the rule can be applied to VMs owned by this UUID.
-
-Note that only one of **owner_uuid** or **global** can be set at a time for
-a rule.
-
-
-# Rule syntax
-
-Firewall rules are in the following format:
-
-    {{#indent_and_wrap}}
-    FROM &lt;from targets> TO &lt;to targets> &lt;action> &lt;protocol> &lt;ports or types>
-    {{/indent_and_wrap}}
-
-The parameters are the following:
-
-**from targets** and **to targets** can be any of the following types
-(see the Target Types section below):
-
-* vm &lt;uuid>
-* ip &lt;IPv4 or IPv6 address>
-* subnet &lt;subnet CIDR>
-* tag &lt;tag name>
-* tag &lt;tag name>=&lt;tag value>
-* a target list of up to 32 of the above
-* all vms
-* any
-
-**action** can be one of (see the Actions section below):
-
-* ALLOW
-* BLOCK
-
-**protocol** can be one of (see the Protocols section below):
-
-* tcp
-* udp
-* icmp
-* icmp6
-
-**ports** or **types** can be one of (see the Ports section below):
-
-* port &lt;port number> (if protocol is tcp or udp)
-* ports &lt;port numbers and ranges> (if protocol is tcp or udp)
-* type &lt;ICMP type> (if protocol is icmp)
-* type &lt;ICMP type> code &lt;ICMP code> (if protocol is icmp)
-
-
-The limits for the parameters are:
-
-* 24 from targets
-* 24 to targets
-* 8 ports or types
-
-
-# Target types
-
-## vm
-
-    vm &lt;uuid>
-
-Targets the VM with that UUID.
-
-**Example:**
-
-    FROM any to vm 04128191-d2cb-43fc-a970-e4deefe970d8 ALLOW tcp port 80
-
-Allows HTTP traffic from any host to VM 04128...
-
-## ip
-
-    ip &lt;IP address>
-
-Targets the specified IPv4 or IPv6 address.
-
-**Example:**
-
-    FROM all vms to (ip 10.2.0.1 OR ip fd22::1234) BLOCK tcp port 25
-
-Blocks SMTP traffic to that IP.
-
-## subnet
-
-    subnet &lt;subnet CIDR>
-
-Targets the specified IPv4 or IPv6 subnet range.
-
-**Example:**
-
-    {{#indent_and_wrap}}
-    FROM subnet 10.8.0.0/16 TO vm 0f570678-c007-4610-a2c0-bbfcaab9f4e6 ALLOW tcp port 443
-    {{/indent_and_wrap}}
-
-Allows HTTPS traffic from a private IPv4 /16 to the specified VM.
-
-**Example:**
-
-    {{#indent_and_wrap}}
-    FROM subnet fd22::/64 TO vm 0f570678-c007-4610-a2c0-bbfcaab9f4e6 ALLOW tcp port 443
-    {{/indent_and_wrap}}
-
-Allows HTTPS traffic from a private IPv6 /64 to the specified VM.
-
-## tag
-
-    tag &lt;name>
-    tag &lt;name> = &lt;value>
-    tag "&lt;name with spaces>" = "&lt;value with spaces>"
-
-Targets all VMs with the specified tag, or all VMs with the specified tag
-and value.  Both tag name and value can be quoted if they contain spaces.
-
-**Examples:**
-
-    FROM all vms TO tag syslog ALLOW udp port 514
-
-Allows syslog traffic from all VMs to syslog servers.
-
-    FROM tag role = db TO tag role = www ALLOW tcp port 5432
-
-Allows database traffic from databases to webservers. All other VMs with
-role tags (role = staging, for example) will not be affected by this rule.
-
-    FROM all vms TO tag "VM type" = "LDAP server" ALLOW tcp PORT 389
-
-Allow LDAP access from all VMs to LDAP servers.
-
-## all vms
-
-    all vms
-
-Targets all VMs.
-
-**Example:**
-
-    FROM all vms TO all vms ALLOW tcp port 22
-
-Allows ssh traffic between all VMs.
-
-## any
-
-    any
-
-Targets any host (any IPv4 address).
-
-**Example:**
-
-    FROM any TO all vms ALLOW tcp port 80
-
-Allows HTTP traffic from any IP to all VMs.
-
-## target list
-
-    ( &lt;target> OR &lt;target> OR ... )
-
-The vm, ip, subnet and tag target types can be combined into a list surrounded
-by parentheses and joined by OR.
-
-**Example:**
-
-    {{#indent_and_wrap}}
-    FROM (vm 163dcedb-828d-43c9-b076-625423250ee2 OR tag db) TO (subnet 10.2.2.0/24 OR ip 10.3.0.1) BLOCK tcp port 443
-    {{/indent_and_wrap}}
-
-Blocks HTTPS traffic to an internal subnet and IP.
-
-
-# Actions
-
-    ALLOW
-    BLOCK
-
-Actions can be one of ALLOW or BLOCK.  Note that certain combinations of
-actions and directions will essentially have no effect on the behaviour
-of a VM's firewall.  For example:
-
-    FROM any TO all vms BLOCK tcp port 143
-
-Since the default rule set blocks all incoming ports, this rule doesn't
-really have an effect on the VMs.  Another example:
-
-    FROM all vms TO any ALLOW tcp port 25
-
-Since the default policy allows all outbound traffic, this rule doesn't
-have an effect.
-
-
-# Protocols
-
-    tcp
-    udp
-    icmp
-    icmp6
-
-The protocol can be one of tcp, udp or icmp(6). The protocol dictates whether
-ports or types can be used (see the Ports section below).
-
-
-# Ports
-
-    port &lt;port number>
-    ( port &lt;port number> AND port &lt;port number> ... )
-    ports &lt;port number or range>
-    ports &lt;port number or range>, &lt;port number or range>, ...
-    type &lt;icmp type>
-    type &lt;icmp type> code &lt;icmp code>
-    ( type &lt;icmp type> AND type &lt;icmp type> code &lt;icmp code> AND ... )
-
-For TCP and UDP, this specifies the port numbers that the rule applies to.
-Port numbers must be between 1 and 65535, inclusive. Ranges are written as two
-port numbers separated by a - (hyphen), with the lower number coming first, with
-optional spaces around the hyphen. Port ranges are inclusive, so writing the
-range "20 - 22" would cause the rule to apply to the ports 20, 21 and 22.
-
-For ICMP, this specifies the ICMP type and optional code that the rule
-applies to.  Types and codes must be between 0 and 255, inclusive.
-
-**Examples:**
-
-    FROM tag www TO any ALLOW tcp (port 80 AND port 443)
-
-Allows HTTP and HTTPS traffic from any IP to all webservers.
-
-    FROM tag www TO any ALLOW tcp ports 80, 443, 8000-8100
-
-Allows traffic on HTTP, HTTPS and common alternative HTTP ports from any IP to
-all webservers.
-
-    FROM any TO all vms ALLOW icmp TYPE 8 CODE 0
-
-Allows pinging all VMs. The IPv6 equivalent would be:
-
-    FROM any TO all vms ALLOW icmp6 TYPE 128 CODE 0
-
-And to block outgoing replies:
-
-    FROM all vms TO any BLOCK icmp TYPE 0
-    FROM all vms TO any BLOCK icmp6 TYPE 129
-
-
-# Examples
-
-    FROM all vms TO tag syslog ALLOW udp port 514
-
-Allows syslog traffic from all VMs to syslog servers.
-
-    FROM tag role = db TO tag role = www ALLOW tcp port 5432
-
-Allows database traffic from databases to webservers.
-
-    FROM all vms TO all vms ALLOW tcp port 22
-
-Allows ssh traffic between all VMs.
-
-    FROM any TO all vms ALLOW tcp port 80
-
-Allow HTTP traffic from any host to all VMs.
-
-
-# Error Messages
-
-This section explains error messages.
-
-## rule does not affect VMs
-
-The rule you're trying to create doesn't contain any targets that will
-actually cause rules to be applied to VMs.  Targets that will cause rules
-to be applied are:
-
-* tag
-* vm
-* all vms
-
-Some examples of rules that would cause this message include:
-
-    FROM any TO any ALLOW tcp port 22
-
-    FROM ip 192.168.1.3 TO subnet 192.168.1.0/24 ALLOW tcp port 22
-
diff --git a/node_modules/fw/tools/fwrule/etc/examples.json b/node_modules/fw/tools/fwrule/etc/examples.json
deleted file mode 100644
index 2ce00eb..0000000
--- a/node_modules/fw/tools/fwrule/etc/examples.json
+++ /dev/null
@@ -1,5 +0,0 @@
-{
-    "owner_uuid": "e6c73bd2-fae4-4e0a-af76-2c05d088b066",
-    "vm1": "ba2c95e9-1cdf-4295-8253-3fee371374d9",
-    "vm2": "cb3f80b9-d333-4521-b067-b237e748e473"
-}
diff --git a/node_modules/fw/tools/fwrule/etc/examples/bastion_rule_allow_all b/node_modules/fw/tools/fwrule/etc/examples/bastion_rule_allow_all
deleted file mode 100644
index edf7f6b..0000000
--- a/node_modules/fw/tools/fwrule/etc/examples/bastion_rule_allow_all
+++ /dev/null
@@ -1,5 +0,0 @@
-{
-    "description": "allow access to all VMs from bastion host",
-    "enabled": true,
-    "rule": "FROM vm cb3f80b9-d333-4521-b067-b237e748e473 TO all vms ALLOW tcp PORT all"
-}
diff --git a/node_modules/fw/tools/fwrule/etc/examples/bastion_rule_ips b/node_modules/fw/tools/fwrule/etc/examples/bastion_rule_ips
deleted file mode 100644
index ff243ab..0000000
--- a/node_modules/fw/tools/fwrule/etc/examples/bastion_rule_ips
+++ /dev/null
@@ -1,5 +0,0 @@
-{
-    "description": "allow access to all VMs from bastion host",
-    "enabled": true,
-    "rule": "FROM (ip 172.1.1.110 OR ip 172.1.1.111) TO vm cb3f80b9-d333-4521-b067-b237e748e473 ALLOW tcp PORT 22"
-}
diff --git a/node_modules/fw/tools/fwrule/etc/examples/ssh_rule_all b/node_modules/fw/tools/fwrule/etc/examples/ssh_rule_all
deleted file mode 100644
index 8f32ffa..0000000
--- a/node_modules/fw/tools/fwrule/etc/examples/ssh_rule_all
+++ /dev/null
@@ -1,5 +0,0 @@
-{
-    "description": "allow SSH to all VMs",
-    "enabled": true,
-    "rule": "FROM any TO all vms ALLOW tcp PORT 22"
-}
diff --git a/node_modules/fw/tools/fwrule/etc/examples/ssh_rule_vm b/node_modules/fw/tools/fwrule/etc/examples/ssh_rule_vm
deleted file mode 100644
index cf7c6a0..0000000
--- a/node_modules/fw/tools/fwrule/etc/examples/ssh_rule_vm
+++ /dev/null
@@ -1,5 +0,0 @@
-{
-    "description": "allow SSH to all VMs",
-    "enabled": true,
-    "rule": "FROM any TO vm ba2c95e9-1cdf-4295-8253-3fee371374d9 ALLOW tcp PORT 22"
-}
diff --git a/node_modules/fw/tools/fwrule/etc/examples/vm_firewall_enabled b/node_modules/fw/tools/fwrule/etc/examples/vm_firewall_enabled
deleted file mode 100644
index 97c7f82..0000000
--- a/node_modules/fw/tools/fwrule/etc/examples/vm_firewall_enabled
+++ /dev/null
@@ -1,3 +0,0 @@
-{
-    "firewall_enabled": true
-}
diff --git a/node_modules/fw/tools/fwrule/etc/examples/web_rule_http_all b/node_modules/fw/tools/fwrule/etc/examples/web_rule_http_all
deleted file mode 100644
index a996d23..0000000
--- a/node_modules/fw/tools/fwrule/etc/examples/web_rule_http_all
+++ /dev/null
@@ -1,5 +0,0 @@
-{
-    "description": "allow HTTP traffic from any IP to all VMs",
-    "enabled": true,
-    "rule": "FROM any TO all vms ALLOW tcp PORT 80"
-}
diff --git a/node_modules/fw/tools/fwrule/etc/examples/web_rule_http_vm b/node_modules/fw/tools/fwrule/etc/examples/web_rule_http_vm
deleted file mode 100644
index 88b8fd7..0000000
--- a/node_modules/fw/tools/fwrule/etc/examples/web_rule_http_vm
+++ /dev/null
@@ -1,5 +0,0 @@
-{
-    "description": "allow HTTP traffic to a single VM",
-    "enabled": true,
-    "rule": "FROM any TO vm ba2c95e9-1cdf-4295-8253-3fee371374d9 ALLOW tcp PORT 80"
-}
diff --git a/node_modules/fw/tools/fwrule/etc/examples/web_rule_https_all b/node_modules/fw/tools/fwrule/etc/examples/web_rule_https_all
deleted file mode 100644
index ab8c286..0000000
--- a/node_modules/fw/tools/fwrule/etc/examples/web_rule_https_all
+++ /dev/null
@@ -1,5 +0,0 @@
-{
-    "description": "allow HTTP and HTTPS traffic from any IP to all VMs",
-    "enabled": true,
-    "rule": "FROM any TO all vms ALLOW tcp (PORT 80 AND PORT 443)"
-}
diff --git a/node_modules/fw/tools/fwrule/etc/examples/webdb_rule_db b/node_modules/fw/tools/fwrule/etc/examples/webdb_rule_db
deleted file mode 100644
index 3011cd8..0000000
--- a/node_modules/fw/tools/fwrule/etc/examples/webdb_rule_db
+++ /dev/null
@@ -1,5 +0,0 @@
-{
-    "description": "allow database traffic from web servers to database servers",
-    "enabled": true,
-    "rule": "FROM tag role = www TO tag role = db ALLOW tcp PORT 5432"
-}
diff --git a/node_modules/fw/tools/fwrule/etc/examples/webdb_rule_http b/node_modules/fw/tools/fwrule/etc/examples/webdb_rule_http
deleted file mode 100644
index 9c04bea..0000000
--- a/node_modules/fw/tools/fwrule/etc/examples/webdb_rule_http
+++ /dev/null
@@ -1,5 +0,0 @@
-{
-    "description": "allow HTTP and HTTPS traffic from anywhere to webservers",
-    "enabled": true,
-    "rule": "FROM any TO tag role = www ALLOW tcp (PORT 80 AND PORT 443)"
-}
diff --git a/node_modules/fw/tools/fwrule/etc/examples/webdb_vm_db b/node_modules/fw/tools/fwrule/etc/examples/webdb_vm_db
deleted file mode 100644
index 7a2f973..0000000
--- a/node_modules/fw/tools/fwrule/etc/examples/webdb_vm_db
+++ /dev/null
@@ -1,6 +0,0 @@
-{
-    "firewall_enabled": true,
-    "tags": {
-        "role": "db"
-    }
-}
diff --git a/node_modules/fw/tools/fwrule/etc/examples/webdb_vm_www b/node_modules/fw/tools/fwrule/etc/examples/webdb_vm_www
deleted file mode 100644
index 5ff9048..0000000
--- a/node_modules/fw/tools/fwrule/etc/examples/webdb_vm_www
+++ /dev/null
@@ -1,6 +0,0 @@
-{
-    "firewall_enabled": true,
-    "tags": {
-        "role": "www"
-    }
-}
diff --git a/node_modules/fw/tools/fwrule/lib/index.js b/node_modules/fw/tools/fwrule/lib/index.js
deleted file mode 100644
index e219748..0000000
--- a/node_modules/fw/tools/fwrule/lib/index.js
+++ /dev/null
@@ -1,248 +0,0 @@
-/*
- * CDDL HEADER START
- *
- * The contents of this file are subject to the terms of the
- * Common Development and Distribution License, Version 1.0 only
- * (the "License").  You may not use this file except in compliance
- * with the License.
- *
- * You can obtain a copy of the license at http://smartos.org/CDDL
- *
- * See the License for the specific language governing permissions
- * and limitations under the License.
- *
- * When distributing Covered Code, include this CDDL HEADER in each
- * file.
- *
- * If applicable, add the following below this CDDL HEADER, with the
- * fields enclosed by brackets "[]" replaced with your own identifying
- * information: Portions Copyright [yyyy] [name of copyright owner]
- *
- * CDDL HEADER END
- *
- * Copyright (c) 2016, Joyent, Inc. All rights reserved.
- *
- *
- * firewall rule parser: entry point
- */
-
-var mod_net = require('net');
-var parser = require('./parser').parser;
-var rule = require('./rule');
-var validators = require('./validators');
-var VError = require('verror').VError;
-
-
-
-// --- Globals
-
-
-
-var uuidRE = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
-var portRE = /^[0-9]{1,5}$/;
-
-/**
- * The fwrule language is versioned so that use of new features can be
- * restricted. These versions are:
- *
- * 1 - Initial version of language
- * 2 - PORTS keyword & support for ranges of ports
- * 3 - Support for IPv6 targets, the ICMPv6 protocol, and the TYPE ALL keyword
- */
-var CURR_VERSION = 3;
-
-
-// --- Internal helper functions
-
-
-/**
- * Translates an internal parser name (usually all one word, all caps, for
- * brevity), to a friendlier user-facing name
- */
-function translateParserNames(name) {
-    var translated;
-    switch (name) {
-        case '\'ALL\'':
-        case '\'ANY\'':
-        case '\'IP\'':
-        case '\'SUBNET\'':
-        case '\'TAG\'':
-        case '\'VM\'':
-        case 'WORD':
-            translated = name.toLowerCase();
-            break;
-        default:
-            translated = name;
-            break;
-    }
-
-    return translated;
-}
-
-
-
-// --- Parser extension methods
-
-
-
-parser.yy.validateIPv4address = function validateIPv4address(ip) {
-    if (!validators.validateIPv4address(ip)) {
-        throw new validators.InvalidParamError('rule',
-            'IPv4 address "%s" is invalid', ip);
-    }
-};
-
-
-parser.yy.validateIPv4subnet = function validateIPv4subnet(subnet) {
-    if (!validators.validateIPv4subnet(subnet)) {
-        throw new validators.InvalidParamError('rule',
-            'Subnet "%s" is invalid (must be in CIDR format)', subnet);
-    }
-};
-
-
-parser.yy.validateIPv6address = function validateIPv6address(ip) {
-    if (!mod_net.isIPv6(ip)) {
-        throw new validators.InvalidParamError('rule',
-            'IPv6 address "%s" is invalid', ip);
-    }
-};
-
-
-parser.yy.validateIPv6subnet = function validateIPv6subnet(ip, subnet) {
-    if (!validators.validateIPv6subnet(ip, subnet)) {
-        throw new validators.InvalidParamError('rule',
-            'Subnet "%s" is invalid (must be in CIDR format)', subnet);
-    }
-};
-
-
-parser.yy.validatePortNumber = function validatePortNumber(num) {
-    if (isNaN(num) || Number(num) < 1 || Number(num) > 65535) {
-        throw new validators.InvalidParamError('rule',
-            'Port number "%s" is invalid', num);
-    }
-};
-
-parser.yy.validateRangeOrder = function validateRangeOrder(start, end) {
-    if (Number(end) < Number(start)) {
-        throw new validators.InvalidParamError('rule',
-            'The end of the range (%s) cannot be less than the start (%s)',
-            end, start);
-    }
-};
-
-parser.yy.createMaybePortRange = function createMaybePortRange(num) {
-    var range = num.split('-');
-
-    switch (range.length) {
-    case 1:
-            parser.yy.validatePortNumber(range[0]);
-            return Number(range[0]);
-    case 2:
-            parser.yy.validatePortNumber(range[0]);
-            parser.yy.validatePortNumber(range[1]);
-            parser.yy.validateRangeOrder(range[0], range[1]);
-            return { 'start': Number(range[0]), 'end': Number(range[1]) };
-    default:
-            throw new validators.InvalidParamError('rule',
-                '"%s" is not a valid port number or range', num);
-    }
-};
-
-
-parser.yy.validateICMPcode = function validateICMPcode(num) {
-    if (isNaN(num) || Number(num) < 0 || Number(num) > 255) {
-        throw new validators.InvalidParamError('rule',
-            'ICMP code "%s" is invalid', num);
-    }
-};
-
-
-parser.yy.validateICMPtype = function validateICMPtype(num) {
-    if (isNaN(num) || Number(num) < 0 || Number(num) > 255) {
-        throw new validators.InvalidParamError('rule',
-            'ICMP type "%s" is invalid', num);
-    }
-};
-
-
-parser.yy.validateUUID = function validateUUID(text) {
-    if (!uuidRE.test(text)) {
-        throw new validators.InvalidParamError('rule',
-            'UUID "%s" is invalid', text);
-    }
-};
-
-parser.yy.validateOKVersion = function validateOKVersion(ver, feature) {
-    if (ver > parser.yy.maxVersion) {
-        throw new validators.InvalidParamError('rule',
-            'The rule uses a feature (%s) newer than this API allows', feature);
-    }
-};
-
-
-parser.yy.parseError = function parseError(str, details) {
-    var err;
-    if (details.token === null) {
-        var pre = this.yy.lexer.pastInput();
-        var post = this.yy.lexer.upcomingInput();
-        err = new validators.InvalidParamError('rule',
-            'Error at character %d: \'%s\', found: unexpected text',
-            pre.length, post);
-        err.details = details;
-        throw err;
-    }
-
-    if (details.text === '') {
-        err = new validators.InvalidParamError('rule',
-            'Error at character 0: \'\', expected: \'FROM\', found: '
-            + 'empty string');
-        err.details = details;
-        throw err;
-    }
-
-    err = new validators.InvalidParamError('rule',
-        'Error at character %d: \'%s\', expected: %s, found: %s',
-        details.loc.last_column,
-        details.text,
-        details.expected.map(function (exp) {
-            return translateParserNames(exp);
-        }).join(', '),
-        translateParserNames(details.token));
-
-    err.details = details;
-    throw err;
-};
-
-
-
-// --- Exports
-
-
-
-function parse(input, opts) {
-    if (!opts) {
-        opts = {};
-    }
-
-    // If a version hasn't been specified, use most recent
-    parser.yy.maxVersion = opts.maxVersion || CURR_VERSION;
-
-    return parser.parse(input);
-}
-
-
-
-module.exports = {
-    ACTIONS: ['allow', 'block'],
-    DIRECTIONS: rule.DIRECTIONS,
-    FIELDS: rule.FIELDS,
-    create: rule.create,
-    FwRule: rule.FwRule,
-    generateVersion: rule.generateVersion,
-    parse: parse,
-    PROTOCOLS: ['tcp', 'udp', 'icmp', 'icmp6'],
-    TARGET_TYPES: rule.TARGET_TYPES,
-    validators: validators
-};
diff --git a/node_modules/fw/tools/fwrule/lib/parser.js b/node_modules/fw/tools/fwrule/lib/parser.js
deleted file mode 100644
index 4e7b590..0000000
--- a/node_modules/fw/tools/fwrule/lib/parser.js
+++ /dev/null
@@ -1,561 +0,0 @@
-/*
- * CDDL HEADER START
- *
- * The contents of this file are subject to the terms of the
- * Common Development and Distribution License, Version 1.0 only
- * (the "License").  You may not use this file except in compliance
- * with the License.
- *
- * You can obtain a copy of the license at http://smartos.org/CDDL
- *
- * See the License for the specific language governing permissions
- * and limitations under the License.
- *
- * When distributing Covered Code, include this CDDL HEADER in each
- * file.
- *
- * If applicable, add the following below this CDDL HEADER, with the
- * fields enclosed by brackets "[]" replaced with your own identifying
- * information: Portions Copyright [yyyy] [name of copyright owner]
- *
- * CDDL HEADER END
- *
- * Copyright (c) 2016, Joyent, Inc. All rights reserved.
- *
- *
- * fwadm: firewall rule parser
- */
-
-
-/* parser generated by jison 0.4.2 */
-var parser = (function(){
-var parser = {trace: function trace() { },
-yy: {},
-symbols_: {"error":2,"start":3,"FROM":4,"target_list":5,"TO":6,"action":7,"protocol":8,"EOF":9,"any":10,"all":11,"(":12,"target_or_list":13,")":14,"target":15,"OR":16,"ipv4":17,"ipv4_subnet":18,"ipv6":19,"ipv6_subnet":20,"tag":21,"vm":22,"ALL":23,"VMS":24,"ANY":25,"IP":26,"IPV4ADDR":27,"SUBNET":28,"CIDRSUFFIX":29,"IPV6ADDR":30,"VM":31,"uuid":32,"WORD":33,"TAG":34,"tag_string":35,"=":36,"STRING":37,"BLOCK":38,"ALLOW":39,"TCP":40,"port_list":41,"ports":42,"UDP":43,"ICMP":44,"type_list":45,"ICMP6":46,"port_and_list":47,"port":48,"port_all":49,"AND":50,"PORT":51,"portnumber":52,"PORTS":53,"portnumbers":54,"portrange":55,"-":56,",":57,"type_and_list":58,"type":59,"type_all":60,"TYPE":61,"icmptype":62,"CODE":63,"icmpcode":64,"$accept":0,"$end":1},
-terminals_: {2:"error",4:"FROM",6:"TO",9:"EOF",12:"(",14:")",16:"OR",23:"ALL",24:"VMS",25:"ANY",26:"IP",27:"IPV4ADDR",28:"SUBNET",29:"CIDRSUFFIX",30:"IPV6ADDR",31:"VM",33:"WORD",34:"TAG",36:"=",37:"STRING",38:"BLOCK",39:"ALLOW",40:"TCP",43:"UDP",44:"ICMP",46:"ICMP6",50:"AND",51:"PORT",53:"PORTS",56:"-",57:",",61:"TYPE",63:"CODE"},
-productions_: [0,[3,7],[5,1],[5,1],[5,3],[5,1],[13,1],[13,3],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[11,2],[11,4],[10,1],[10,3],[17,2],[18,3],[19,2],[20,3],[22,2],[32,1],[21,2],[21,4],[35,1],[35,1],[7,1],[7,1],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[41,3],[41,1],[41,3],[41,1],[47,1],[47,3],[48,2],[42,2],[49,2],[52,1],[55,1],[55,3],[54,1],[54,3],[45,3],[45,1],[45,3],[45,1],[58,1],[58,3],[59,4],[59,2],[60,2],[62,1],[64,1]],
-performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {
-
-var $0 = $$.length - 1;
-switch (yystate) {
-case 1: return { 'from': $$[$0-5], 'to': $$[$0-3], 'action': $$[$0-2], 'protocol': $$[$0-1] }; 
-break;
-case 4:this.$ = $$[$0-1];
-break;
-case 7: this.$ = $$[$0-2].concat($$[$0]); 
-break;
-case 14: this.$ = [ ['wildcard', 'vmall'] ]; 
-break;
-case 15: this.$ = [ ['wildcard', 'vmall'] ]; 
-break;
-case 16: this.$ = [ ['wildcard', 'any'] ]; 
-break;
-case 17: this.$ = [ ['wildcard', 'any'] ]; 
-break;
-case 18: yy.validateIPv4address($$[$0]);
-          this.$ = [ ['ip', $$[$0]] ]; 
-break;
-case 19: yy.validateIPv4subnet($$[$0-1] + $$[$0]);
-            this.$ = [ ['subnet', $$[$0-1] + $$[$0]] ]; 
-break;
-case 20: yy.validateOKVersion(3, 'IPv6');
-          yy.validateIPv6address($$[$0]);
-          this.$ = [ ['ip', $$[$0]] ]; 
-break;
-case 21: yy.validateOKVersion(3, 'IPv6');
-          yy.validateIPv6subnet($$[$0-1] + $$[$0]);
-            this.$ = [ ['subnet', $$[$0-1] + $$[$0]] ]; 
-break;
-case 22: this.$ = [ ['vm', $$[$0]] ]; 
-break;
-case 23: yy.validateUUID($$[$0]);
-          this.$ = $$[$0]; 
-break;
-case 24: this.$ = [ ['tag', $$[$0]] ]; 
-break;
-case 25: this.$ = [ ['tag', [ $$[$0-2], $$[$0] ] ] ]; 
-break;
-case 26: this.$ = yytext; 
-break;
-case 27: this.$ = $$[$0]; 
-break;
-case 28: this.$ = $$[$0].toLowerCase() 
-break;
-case 29: this.$ = $$[$0].toLowerCase() 
-break;
-case 30: this.$ = { 'name': $$[$0-1].toLowerCase(), 'targets': $$[$0] } 
-break;
-case 31: this.$ = { 'name': $$[$0-1].toLowerCase(), 'targets': $$[$0] } 
-break;
-case 32: this.$ = { 'name': $$[$0-1].toLowerCase(), 'targets': $$[$0] } 
-break;
-case 33: this.$ = { 'name': $$[$0-1].toLowerCase(), 'targets': $$[$0] } 
-break;
-case 34: this.$ = { 'name': $$[$0-1].toLowerCase(), 'targets': $$[$0] } 
-break;
-case 35: this.$ = { 'name': $$[$0-1].toLowerCase(), 'targets': $$[$0] } 
-break;
-case 36: this.$ = $$[$0-1]; 
-break;
-case 38: this.$ = $$[$0-1]; 
-break;
-case 41: this.$ = $$[$0-2].concat(Number($$[$0])); 
-break;
-case 42: this.$ = [ $$[$0] ]; 
-break;
-case 43: yy.validateOKVersion(2, 'port ranges');
-          this.$ = $$[$0]; 
-break;
-case 44: this.$ = [ 'all' ]; 
-break;
-case 45: yy.validatePortNumber($$[$0]);
-          this.$ = Number($$[$0]); 
-break;
-case 46: this.$ = [ yy.createMaybePortRange($$[$0]) ]; 
-break;
-case 47: yy.validatePortNumber($$[$0-2]);
-          yy.validatePortNumber($$[$0]);
-          yy.validateRangeOrder($$[$0-2], $$[$0]);
-          this.$ = [{ 'start': Number($$[$0-2]), 'end': Number($$[$0]) }]; 
-break;
-case 49: this.$ = $$[$0-2].concat($$[$0]); 
-break;
-case 50: this.$ = $$[$0-1]; 
-break;
-case 52: this.$ = $$[$0-1]; 
-break;
-case 55: this.$ = $$[$0-2].concat($$[$0]); 
-break;
-case 56: this.$ = [ $$[$0-2] + ':' + $$[$0] ]; 
-break;
-case 57: this.$ = [ $$[$0] ]; 
-break;
-case 58: yy.validateOKVersion(3, 'all ICMP types');
-          this.$ = [ 'all' ]; 
-break;
-case 59: yy.validateICMPtype($$[$0]);
-          this.$ = Number($$[$0]); 
-break;
-case 60: yy.validateICMPcode($$[$0]);
-          this.$ = Number($$[$0]); 
-break;
-}
-},
-table: [{3:1,4:[1,2]},{1:[3]},{5:3,10:4,11:5,12:[1,6],15:7,17:10,18:11,19:12,20:13,21:14,22:15,23:[1,9],25:[1,8],26:[1,16],28:[1,17],31:[1,19],34:[1,18]},{6:[1,20]},{6:[2,2],38:[2,2],39:[2,2]},{6:[2,3],38:[2,3],39:[2,3]},{13:21,15:24,17:10,18:11,19:12,20:13,21:14,22:15,23:[1,23],25:[1,22],26:[1,16],28:[1,17],31:[1,19],34:[1,18]},{6:[2,5],38:[2,5],39:[2,5]},{6:[2,16],38:[2,16],39:[2,16]},{24:[1,25]},{6:[2,8],14:[2,8],16:[2,8],38:[2,8],39:[2,8]},{6:[2,9],14:[2,9],16:[2,9],38:[2,9],39:[2,9]},{6:[2,10],14:[2,10],16:[2,10],38:[2,10],39:[2,10]},{6:[2,11],14:[2,11],16:[2,11],38:[2,11],39:[2,11]},{6:[2,12],14:[2,12],16:[2,12],38:[2,12],39:[2,12]},{6:[2,13],14:[2,13],16:[2,13],38:[2,13],39:[2,13]},{27:[1,26],30:[1,27]},{27:[1,28],30:[1,29]},{33:[1,32],35:30,37:[1,31]},{32:33,33:[1,34]},{5:35,10:4,11:5,12:[1,6],15:7,17:10,18:11,19:12,20:13,21:14,22:15,23:[1,9],25:[1,8],26:[1,16],28:[1,17],31:[1,19],34:[1,18]},{14:[1,36],16:[1,37]},{14:[1,38]},{24:[1,39]},{14:[2,6],16:[2,6]},{6:[2,14],38:[2,14],39:[2,14]},{6:[2,18],14:[2,18],16:[2,18],38:[2,18],39:[2,18]},{6:[2,20],14:[2,20],16:[2,20],38:[2,20],39:[2,20]},{29:[1,40]},{29:[1,41]},{6:[2,24],14:[2,24],16:[2,24],36:[1,42],38:[2,24],39:[2,24]},{6:[2,26],14:[2,26],16:[2,26],36:[2,26],38:[2,26],39:[2,26]},{6:[2,27],14:[2,27],16:[2,27],36:[2,27],38:[2,27],39:[2,27]},{6:[2,22],14:[2,22],16:[2,22],38:[2,22],39:[2,22]},{6:[2,23],14:[2,23],16:[2,23],38:[2,23],39:[2,23]},{7:43,38:[1,44],39:[1,45]},{6:[2,4],38:[2,4],39:[2,4]},{15:46,17:10,18:11,19:12,20:13,21:14,22:15,26:[1,16],28:[1,17],31:[1,19],34:[1,18]},{6:[2,17],38:[2,17],39:[2,17]},{14:[1,47]},{6:[2,19],14:[2,19],16:[2,19],38:[2,19],39:[2,19]},{6:[2,21],14:[2,21],16:[2,21],38:[2,21],39:[2,21]},{33:[1,32],35:48,37:[1,31]},{8:49,40:[1,50],43:[1,51],44:[1,52],46:[1,53]},{40:[2,28],43:[2,28],44:[2,28],46:[2,28]},{40:[2,29],43:[2,29],44:[2,29],46:[2,29]},{14:[2,7],16:[2,7]},{6:[2,15],38:[2,15],39:[2,15]},{6:[2,25],14:[2,25],16:[2,25],38:[2,25],39:[2,25]},{9:[1,54]},{12:[1,57],41:55,42:56,48:58,49:59,51:[1,61],53:[1,60]},{12:[1,57],41:62,42:63,48:58,49:59,51:[1,61],53:[1,60]},{12:[1,65],45:64,59:66,60:67,61:[1,68]},{12:[1,65],45:69,59:66,60:67,61:[1,68]},{1:[2,1]},{9:[2,30]},{9:[2,31]},{47:70,48:72,49:71,51:[1,61]},{9:[2,37]},{9:[2,39]},{33:[1,75],54:73,55:74},{23:[1,77],33:[1,78],52:76},{9:[2,32]},{9:[2,33]},{9:[2,34]},{58:79,59:81,60:80,61:[1,68]},{9:[2,51]},{9:[2,53]},{23:[1,83],33:[1,84],62:82},{9:[2,35]},{14:[1,85],50:[1,86]},{14:[1,87]},{14:[2,40],50:[2,40]},{9:[2,43],57:[1,88]},{9:[2,48],57:[2,48]},{9:[2,46],56:[1,89],57:[2,46]},{9:[2,42],14:[2,42],50:[2,42]},{9:[2,44],14:[2,44]},{9:[2,45],14:[2,45],50:[2,45]},{14:[1,90],50:[1,91]},{14:[1,92]},{14:[2,54],50:[2,54]},{9:[2,57],14:[2,57],50:[2,57],63:[1,93]},{9:[2,58],14:[2,58]},{9:[2,59],14:[2,59],50:[2,59],63:[2,59]},{9:[2,36]},{48:94,51:[1,95]},{9:[2,38]},{33:[1,75],55:96},{33:[1,97]},{9:[2,50]},{59:98,61:[1,99]},{9:[2,52]},{33:[1,101],64:100},{14:[2,41],50:[2,41]},{33:[1,78],52:76},{9:[2,49],57:[2,49]},{9:[2,47],57:[2,47]},{14:[2,55],50:[2,55]},{33:[1,84],62:82},{9:[2,56],14:[2,56],50:[2,56]},{9:[2,60],14:[2,60],50:[2,60]}],
-defaultActions: {54:[2,1],55:[2,30],56:[2,31],58:[2,37],59:[2,39],62:[2,32],63:[2,33],64:[2,34],66:[2,51],67:[2,53],69:[2,35],85:[2,36],87:[2,38],90:[2,50],92:[2,52]},
-parseError: function parseError(str, hash) {
-    throw new Error(str);
-},
-parse: function parse(input) {
-    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
-    this.lexer.setInput(input);
-    this.lexer.yy = this.yy;
-    this.yy.lexer = this.lexer;
-    this.yy.parser = this;
-    if (typeof this.lexer.yylloc == "undefined")
-        this.lexer.yylloc = {};
-    var yyloc = this.lexer.yylloc;
-    lstack.push(yyloc);
-    var ranges = this.lexer.options && this.lexer.options.ranges;
-    if (typeof this.yy.parseError === "function")
-        this.parseError = this.yy.parseError;
-    function popStack(n) {
-        stack.length = stack.length - 2 * n;
-        vstack.length = vstack.length - n;
-        lstack.length = lstack.length - n;
-    }
-    function lex() {
-        var token;
-        token = self.lexer.lex() || 1;
-        if (typeof token !== "number") {
-            token = self.symbols_[token] || token;
-        }
-        return token;
-    }
-    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
-    while (true) {
-        state = stack[stack.length - 1];
-        if (this.defaultActions[state]) {
-            action = this.defaultActions[state];
-        } else {
-            if (symbol === null || typeof symbol == "undefined") {
-                symbol = lex();
-            }
-            action = table[state] && table[state][symbol];
-        }
-        if (typeof action === "undefined" || !action.length || !action[0]) {
-            var errStr = "";
-            if (!recovering) {
-                expected = [];
-                for (p in table[state])
-                    if (this.terminals_[p] && p > 2) {
-                        expected.push("'" + this.terminals_[p] + "'");
-                    }
-                if (this.lexer.showPosition) {
-                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
-                } else {
-                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
-                }
-                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
-            }
-        }
-        if (action[0] instanceof Array && action.length > 1) {
-            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
-        }
-        switch (action[0]) {
-        case 1:
-            stack.push(symbol);
-            vstack.push(this.lexer.yytext);
-            lstack.push(this.lexer.yylloc);
-            stack.push(action[1]);
-            symbol = null;
-            if (!preErrorSymbol) {
-                yyleng = this.lexer.yyleng;
-                yytext = this.lexer.yytext;
-                yylineno = this.lexer.yylineno;
-                yyloc = this.lexer.yylloc;
-                if (recovering > 0)
-                    recovering--;
-            } else {
-                symbol = preErrorSymbol;
-                preErrorSymbol = null;
-            }
-            break;
-        case 2:
-            len = this.productions_[action[1]][1];
-            yyval.$ = vstack[vstack.length - len];
-            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
-            if (ranges) {
-                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
-            }
-            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
-            if (typeof r !== "undefined") {
-                return r;
-            }
-            if (len) {
-                stack = stack.slice(0, -1 * len * 2);
-                vstack = vstack.slice(0, -1 * len);
-                lstack = lstack.slice(0, -1 * len);
-            }
-            stack.push(this.productions_[action[1]][0]);
-            vstack.push(yyval.$);
-            lstack.push(yyval._$);
-            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
-            stack.push(newState);
-            break;
-        case 3:
-            return true;
-        }
-    }
-    return true;
-}
-};
-/* generated by jison-lex 0.1.0 */
-var lexer = (function(){
-var lexer = {
-EOF:1,
-parseError:function parseError(str, hash) {
-        if (this.yy.parser) {
-            this.yy.parser.parseError(str, hash);
-        } else {
-            throw new Error(str);
-        }
-    },
-setInput:function (input) {
-        this._input = input;
-        this._more = this._less = this.done = false;
-        this.yylineno = this.yyleng = 0;
-        this.yytext = this.matched = this.match = '';
-        this.conditionStack = ['INITIAL'];
-        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
-        if (this.options.ranges) this.yylloc.range = [0,0];
-        this.offset = 0;
-        return this;
-    },
-input:function () {
-        var ch = this._input[0];
-        this.yytext += ch;
-        this.yyleng++;
-        this.offset++;
-        this.match += ch;
-        this.matched += ch;
-        var lines = ch.match(/(?:\r\n?|\n).*/g);
-        if (lines) {
-            this.yylineno++;
-            this.yylloc.last_line++;
-        } else {
-            this.yylloc.last_column++;
-        }
-        if (this.options.ranges) this.yylloc.range[1]++;
-
-        this._input = this._input.slice(1);
-        return ch;
-    },
-unput:function (ch) {
-        var len = ch.length;
-        var lines = ch.split(/(?:\r\n?|\n)/g);
-
-        this._input = ch + this._input;
-        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
-        //this.yyleng -= len;
-        this.offset -= len;
-        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
-        this.match = this.match.substr(0, this.match.length-1);
-        this.matched = this.matched.substr(0, this.matched.length-1);
-
-        if (lines.length-1) this.yylineno -= lines.length-1;
-        var r = this.yylloc.range;
-
-        this.yylloc = {first_line: this.yylloc.first_line,
-          last_line: this.yylineno+1,
-          first_column: this.yylloc.first_column,
-          last_column: lines ?
-              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
-              this.yylloc.first_column - len
-          };
-
-        if (this.options.ranges) {
-            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
-        }
-        return this;
-    },
-more:function () {
-        this._more = true;
-        return this;
-    },
-less:function (n) {
-        this.unput(this.match.slice(n));
-    },
-pastInput:function () {
-        var past = this.matched.substr(0, this.matched.length - this.match.length);
-        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
-    },
-upcomingInput:function () {
-        var next = this.match;
-        if (next.length < 20) {
-            next += this._input.substr(0, 20-next.length);
-        }
-        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
-    },
-showPosition:function () {
-        var pre = this.pastInput();
-        var c = new Array(pre.length + 1).join("-");
-        return pre + this.upcomingInput() + "\n" + c+"^";
-    },
-next:function () {
-        if (this.done) {
-            return this.EOF;
-        }
-        if (!this._input) this.done = true;
-
-        var token,
-            match,
-            tempMatch,
-            index,
-            col,
-            lines;
-        if (!this._more) {
-            this.yytext = '';
-            this.match = '';
-        }
-        var rules = this._currentRules();
-        for (var i=0;i < rules.length; i++) {
-            tempMatch = this._input.match(this.rules[rules[i]]);
-            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
-                match = tempMatch;
-                index = i;
-                if (!this.options.flex) break;
-            }
-        }
-        if (match) {
-            lines = match[0].match(/(?:\r\n?|\n).*/g);
-            if (lines) this.yylineno += lines.length;
-            this.yylloc = {first_line: this.yylloc.last_line,
-                           last_line: this.yylineno+1,
-                           first_column: this.yylloc.last_column,
-                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
-            this.yytext += match[0];
-            this.match += match[0];
-            this.matches = match;
-            this.yyleng = this.yytext.length;
-            if (this.options.ranges) {
-                this.yylloc.range = [this.offset, this.offset += this.yyleng];
-            }
-            this._more = false;
-            this._input = this._input.slice(match[0].length);
-            this.matched += match[0];
-            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
-            if (this.done && this._input) this.done = false;
-            if (token) return token;
-            else return;
-        }
-        if (this._input === "") {
-            return this.EOF;
-        } else {
-            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
-                    {text: "", token: null, line: this.yylineno});
-        }
-    },
-lex:function lex() {
-        var r = this.next();
-        if (typeof r !== 'undefined') {
-            return r;
-        } else {
-            return this.lex();
-        }
-    },
-begin:function begin(condition) {
-        this.conditionStack.push(condition);
-    },
-popState:function popState() {
-        return this.conditionStack.pop();
-    },
-_currentRules:function _currentRules() {
-        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
-    },
-topState:function () {
-        return this.conditionStack[this.conditionStack.length-2];
-    },
-pushState:function begin(condition) {
-        this.begin(condition);
-    },
-options: {},
-performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
-
-var YYSTATE=YY_START;
-switch($avoiding_name_collisions) {
-case 0:/* skip whitespace */
-break;
-case 1:return 9;
-break;
-case 2:return 4;
-break;
-case 3:return 4;
-break;
-case 4:return 6;
-break;
-case 5:return 6;
-break;
-case 6:return 26;
-break;
-case 7:return 26;
-break;
-case 8:return 28;
-break;
-case 9:return 28;
-break;
-case 10:return 25;
-break;
-case 11:return 25;
-break;
-case 12:return 23;
-break;
-case 13:return 23;
-break;
-case 14:return 34;
-break;
-case 15:return 34;
-break;
-case 16:return 31;
-break;
-case 17:return 31;
-break;
-case 18:return 24;
-break;
-case 19:return 24;
-break;
-case 20:return 56;
-break;
-case 21:return 57;
-break;
-case 22:return 36;
-break;
-case 23:return 12;
-break;
-case 24:return 14;
-break;
-case 25:return 16;
-break;
-case 26:return 16;
-break;
-case 27:return 50;
-break;
-case 28:return 50;
-break;
-case 29:return 38;
-break;
-case 30:return 38;
-break;
-case 31:return 39;
-break;
-case 32:return 39;
-break;
-case 33:return 51;
-break;
-case 34:return 51;
-break;
-case 35:return 53;
-break;
-case 36:return 53;
-break;
-case 37:return 40;
-break;
-case 38:return 40;
-break;
-case 39:return 43;
-break;
-case 40:return 43;
-break;
-case 41:return 44;
-break;
-case 42:return 44;
-break;
-case 43:return 46;
-break;
-case 44:return 46;
-break;
-case 45:return 61;
-break;
-case 46:return 61;
-break;
-case 47:return 63;
-break;
-case 48:return 63;
-break;
-case 49:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 37;
-break;
-case 50:return 27;
-break;
-case 51:return 30;
-break;
-case 52:return 29;
-break;
-case 53:return 33
-break;
-}
-},
-rules: [/^(?:\s+)/,/^(?:$)/,/^(?:FROM\b)/,/^(?:from\b)/,/^(?:TO\b)/,/^(?:to\b)/,/^(?:IP\b)/,/^(?:ip\b)/,/^(?:SUBNET\b)/,/^(?:subnet\b)/,/^(?:ANY\b)/,/^(?:any\b)/,/^(?:ALL\b)/,/^(?:all\b)/,/^(?:TAG\b)/,/^(?:tag\b)/,/^(?:VM\b)/,/^(?:vm\b)/,/^(?:VMS\b)/,/^(?:vms\b)/,/^(?:-)/,/^(?:,)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:OR\b)/,/^(?:or\b)/,/^(?:AND\b)/,/^(?:and\b)/,/^(?:BLOCK\b)/,/^(?:block\b)/,/^(?:ALLOW\b)/,/^(?:allow\b)/,/^(?:PORT\b)/,/^(?:port\b)/,/^(?:PORTS\b)/,/^(?:ports\b)/,/^(?:TCP\b)/,/^(?:tcp\b)/,/^(?:UDP\b)/,/^(?:udp\b)/,/^(?:ICMP\b)/,/^(?:icmp\b)/,/^(?:ICMP6\b)/,/^(?:icmp6\b)/,/^(?:TYPE\b)/,/^(?:type\b)/,/^(?:CODE\b)/,/^(?:code\b)/,/^(?:"(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])*")/,/^(?:(([0-9]){1,3})\.(([0-9]){1,3})\.(([0-9]){1,3})\.(([0-9]){1,3}))/,/^(?:([0-9a-f])*:([0-9a-f])*:[:0-9a-f]*)/,/^(?:\/([0-9]){1,3})/,/^(?:[-a-zA-Z0-9_]+)/],
-conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
-};
-return lexer;
-})();
-parser.lexer = lexer;
-function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
-return new Parser;
-})();
-if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
-exports.parser = parser;
-exports.Parser = parser.Parser;
-exports.parse = function () { return parser.parse.apply(parser, arguments); };
-exports.main = function commonjsMain(args) {
-    if (!args[1]) {
-        console.log('Usage: '+args[0]+' FILE');
-        process.exit(1);
-    }
-    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
-    return exports.parser.parse(source);
-};
-if (typeof module !== 'undefined' && require.main === module) {
-  exports.main(process.argv.slice(1));
-}
-}
diff --git a/node_modules/fw/tools/fwrule/lib/rule.js b/node_modules/fw/tools/fwrule/lib/rule.js
deleted file mode 100644
index 71bdf7c..0000000
--- a/node_modules/fw/tools/fwrule/lib/rule.js
+++ /dev/null
@@ -1,588 +0,0 @@
-/*
- * CDDL HEADER START
- *
- * The contents of this file are subject to the terms of the
- * Common Development and Distribution License, Version 1.0 only
- * (the "License").  You may not use this file except in compliance
- * with the License.
- *
- * You can obtain a copy of the license at http://smartos.org/CDDL
- *
- * See the License for the specific language governing permissions
- * and limitations under the License.
- *
- * When distributing Covered Code, include this CDDL HEADER in each
- * file.
- *
- * If applicable, add the following below this CDDL HEADER, with the
- * fields enclosed by brackets "[]" replaced with your own identifying
- * information: Portions Copyright [yyyy] [name of copyright owner]
- *
- * CDDL HEADER END
- *
- * Copyright (c) 2016, Joyent, Inc. All rights reserved.
- *
- *
- * fwadm: firewall rule model
- */
-
-var mod_net = require('net');
-var mod_uuid = require('node-uuid');
-var sprintf = require('extsprintf').sprintf;
-var util = require('util');
-var validators = require('./validators');
-var verror = require('verror');
-
-
-
-// --- Globals
-
-
-
-var DIRECTIONS = ['to', 'from'];
-// Exported fields that can be in the serialized rule:
-var FIELDS = [
-    'created_by',
-    'description',
-    'enabled',
-    'global',
-    'owner_uuid',
-    'rule',
-    'uuid',
-    'version'
-];
-// Maximum number of targets per side:
-var MAX_TARGETS_PER_SIDE = 24;
-// Maximum number of ports:
-var MAX_PORTS = 8;
-var STRING_PROPS = ['created_by', 'description'];
-var TARGET_TYPES = ['wildcard', 'ip', 'subnet', 'tag', 'vm'];
-
-var icmpr = /^icmp6?$/;
-
-// --- Internal functions
-
-
-
-/**
- * Calls callback for all of the firewall target types
- */
-function forEachTarget(obj, callback) {
-    DIRECTIONS.forEach(function (dir) {
-        if (!obj.hasOwnProperty(dir)) {
-            return;
-        }
-
-        TARGET_TYPES.forEach(function (type) {
-            var name = type + 's';
-            if (!obj[dir].hasOwnProperty(name)) {
-                return;
-            }
-
-            callback(dir, type, type, obj[dir][name]);
-        });
-    });
-}
-
-
-/**
- * Sorts a list of ICMP types (with optional codes)
- */
-function icmpTypeSort(types) {
-    return types.map(function (type) {
-        return type.toString().split(':');
-    }).sort(function (a, b) {
-        var aTot = (Number(a[0]) << 8) + (a.length === 1 ? 0 : Number(a[1]));
-        var bTot = (Number(b[0]) << 8) + (a.length === 1 ? 0 : Number(b[1]));
-        return aTot - bTot;
-    }).map(function (typeArr) {
-        return typeArr.join(':');
-    });
-}
-
-
-/**
- * Adds a tag to an object
- */
-function addTag(obj, tag, val) {
-    if (!obj.hasOwnProperty(tag)) {
-        obj[tag] = {};
-    }
-
-    if (val === undefined || val === null) {
-        obj[tag].all = true;
-        return;
-    }
-
-    if (!obj[tag].hasOwnProperty('values')) {
-        obj[tag].values = {};
-    }
-
-    obj[tag].values[val] = true;
-}
-
-
-/**
- * Creates a list of tags based on an object populated by addTag() above
- */
-function tagList(obj) {
-    var tags = [];
-    Object.keys(obj).sort().forEach(function (tag) {
-        if (obj[tag].hasOwnProperty('all')) {
-            tags.push(tag);
-        } else {
-            Object.keys(obj[tag].values).sort().forEach(function (val) {
-                tags.push([tag, val]);
-            });
-        }
-    });
-    return tags;
-}
-
-
-/**
- * Quotes a string if it contains non-alphanumeric characters
- */
-function quote(str) {
-    var WORD_RE = /[^-a-zA-Z0-9_]/;
-    if (str.search(WORD_RE) !== -1) {
-        return '"' + str + '"';
-    }
-
-    return str;
-}
-
-
-
-// --- Firewall object and methods
-
-
-
-/**
- * Firewall rule constructor
- */
-function FwRule(data, opts) {
-    var errs = [];
-    var parsed;
-
-    if (!opts) {
-        opts = {};
-    }
-
-    // -- validation --
-
-    if (!data.rule && !data.parsed) {
-        errs.push(new validators.InvalidParamError('rule',
-            'No rule specified'));
-    } else {
-        try {
-            parsed = data.parsed || require('./').parse(data.rule, opts);
-        } catch (err) {
-            errs.push(err);
-        }
-    }
-
-    if (data.hasOwnProperty('uuid')) {
-        if (!validators.validateUUID(data.uuid)) {
-            errs.push(new validators.InvalidParamError('uuid',
-                'Invalid rule UUID'));
-        }
-
-        this.uuid = data.uuid;
-    } else {
-        this.uuid = mod_uuid.v4();
-    }
-
-    this.version = data.version || generateVersion();
-
-    if (data.hasOwnProperty('owner_uuid')) {
-        if (!validators.validateUUID(data.owner_uuid)) {
-            errs.push(new validators.InvalidParamError('owner_uuid',
-                'Invalid owner UUID'));
-        }
-        this.owner_uuid = data.owner_uuid;
-    } else {
-        // No owner: this rule will affect all VMs
-        this.global = true;
-    }
-
-    if (data.hasOwnProperty('enabled')) {
-        if (!validators.bool(data.enabled)) {
-            errs.push(new validators.InvalidParamError('enabled',
-                'enabled must be true or false'));
-        }
-
-        this.enabled = data.enabled;
-    } else {
-        this.enabled = false;
-    }
-
-    for (var s in STRING_PROPS) {
-        var str = STRING_PROPS[s];
-        if (data.hasOwnProperty(str)) {
-            try {
-                validators.validateString(str, data[str]);
-                this[str] = data[str];
-            } catch (valErr) {
-                errs.push(valErr);
-            }
-        }
-    }
-
-    if (opts.enforceGlobal) {
-        if (data.hasOwnProperty('global') && !validators.bool(data.global)) {
-            errs.push(new validators.InvalidParamError('global',
-                'global must be true or false'));
-        }
-
-        if (data.hasOwnProperty('global')
-            && data.hasOwnProperty('owner_uuid') && data.global) {
-            errs.push(new validators.InvalidParamError('global',
-                'cannot specify both global and owner_uuid'));
-        }
-
-        if (!data.hasOwnProperty('global')
-            && !data.hasOwnProperty('owner_uuid')) {
-            errs.push(new validators.InvalidParamError('owner_uuid',
-                'owner_uuid required'));
-        }
-    }
-
-    if (errs.length !== 0) {
-        if (errs.length === 1) {
-            throw errs[0];
-        }
-
-        throw new verror.MultiError(errs);
-    }
-
-    // -- translate into the internal rule format --
-
-    var d;
-    var dir;
-
-    this.action = parsed.action;
-    this.protocol = parsed.protocol.name;
-
-    if (icmpr.test(this.protocol)) {
-        this.types = icmpTypeSort(parsed.protocol.targets);
-        this.protoTargets = this.types;
-    } else {
-        this.ports = parsed.protocol.targets.sort(function (a, b) {
-            var first = a.hasOwnProperty('start') ? a.start : a;
-            var second = b.hasOwnProperty('start') ? b.start : b;
-            return Number(first) - Number(second);
-        });
-        this.protoTargets = this.ports;
-    }
-
-    if (this.protoTargets.length > MAX_PORTS) {
-        throw new validators.InvalidParamError('rule',
-            'maximum of %d %s allowed',
-            MAX_TARGETS_PER_SIDE,
-            icmpr.test(this.protocol) ? 'types' : 'ports');
-    }
-
-    this.from = {};
-    this.to = {};
-
-    this.allVMs = false;
-    this.ips = {};
-    this.tags = {};
-    this.vms = {};
-    this.subnets = {};
-    this.wildcards = {};
-
-    var dirs = {
-        'to': {},
-        'from': {}
-    };
-    var numTargets;
-
-    for (d in DIRECTIONS) {
-        dir = DIRECTIONS[d];
-        numTargets = 0;
-        for (var j in parsed[dir]) {
-            var target = parsed[dir][j];
-            var targetName;
-            var name = target[0] + 's';
-
-            numTargets++;
-            if (!dirs[dir].hasOwnProperty(name)) {
-                dirs[dir][name] = {};
-            }
-
-            if (name === 'tags') {
-                var targetVal = null;
-                if (typeof (target[1]) === 'string') {
-                    targetName = target[1];
-                } else {
-                    targetName = target[1][0];
-                    targetVal = target[1][1];
-                }
-
-                addTag(this[name], targetName, targetVal);
-                addTag(dirs[dir][name], targetName, targetVal);
-
-            } else {
-                targetName = target[1];
-                this[name][targetName] = target[1];
-                dirs[dir][name][targetName] = target[1];
-            }
-        }
-
-        if (numTargets > MAX_TARGETS_PER_SIDE) {
-            throw new validators.InvalidParamError('rule',
-                'maximum of %d targets allowed per side',
-                MAX_TARGETS_PER_SIDE);
-        }
-    }
-
-    // Now dedup and sort
-    for (d in DIRECTIONS) {
-        dir = DIRECTIONS[d];
-        for (var t in TARGET_TYPES) {
-            var type = TARGET_TYPES[t] + 's';
-            if (dirs[dir].hasOwnProperty(type)) {
-                if (type === 'tags') {
-                    this[dir][type] = tagList(dirs[dir][type]);
-
-                } else {
-                    this[dir][type] = Object.keys(dirs[dir][type]).sort();
-                }
-            } else {
-                this[dir][type] = [];
-            }
-        }
-    }
-
-    this.ips = Object.keys(this.ips).sort();
-    this.tags = tagList(this.tags);
-    this.vms = Object.keys(this.vms).sort();
-    this.subnets = Object.keys(this.subnets).sort();
-    this.wildcards = Object.keys(this.wildcards).sort();
-
-    if (this.wildcards.length !== 0 && this.wildcards.indexOf('vmall') !== -1) {
-        this.allVMs = true;
-    }
-
-    // Check for rules that obviously don't make sense
-    if (this.protocol === 'icmp') {
-        this.ips.map(function (ip) {
-            if (!mod_net.isIPv4(ip)) {
-                throw new validators.InvalidParamError('rule',
-                    'rule affects ICMPv4 but contains a non-IPv4 address');
-            }
-        });
-        this.subnets.map(function (subnet) {
-            if (!mod_net.isIPv4(subnet.split('/')[0])) {
-                throw new validators.InvalidParamError('rule',
-                    'rule affects ICMPv4 but contains a non-IPv4 subnet');
-            }
-        });
-    } else if (this.protocol === 'icmp6') {
-        this.ips.map(function (ip) {
-            if (!mod_net.isIPv6(ip)) {
-                throw new validators.InvalidParamError('rule',
-                    'rule affects ICMPv6 but contains a non-IPv6 address');
-            }
-        });
-        this.subnets.map(function (subnet) {
-            if (!mod_net.isIPv6(subnet.split('/')[0])) {
-                throw new validators.InvalidParamError('rule',
-                    'rule affects ICMPv6 but contains a non-IPv6 subnet');
-            }
-        });
-    }
-
-    // Final check: does this rule actually contain targets that can actually
-    // affect VMs?
-    if (!this.allVMs && this.tags.length === 0 && this.vms.length === 0) {
-        throw new validators.InvalidParamError('rule',
-            'rule does not affect VMs');
-    }
-}
-
-
-/**
- * Returns the internal representation of the rule
- */
-FwRule.prototype.raw = function () {
-    var raw = {
-        action: this.action,
-        enabled: this.enabled,
-        from: this.from,
-        protocol: this.protocol,
-        to: this.to,
-        uuid: this.uuid,
-        version: this.version
-    };
-
-    if (this.owner_uuid) {
-        raw.owner_uuid = this.owner_uuid;
-    }
-
-    if (icmpr.test(this.protocol)) {
-        raw.types = this.types;
-    } else {
-        raw.ports = this.ports;
-    }
-
-    for (var s in STRING_PROPS) {
-        var str = STRING_PROPS[s];
-        if (this.hasOwnProperty(str)) {
-            raw[str] = this[str];
-        }
-    }
-
-    return raw;
-};
-
-
-/**
- * Returns the serialized version of the rule, suitable for storing
- *
- * @param fields {Array}: fields to return (optional)
- */
-FwRule.prototype.serialize = function (fields) {
-    var ser = {};
-    if (!fields) {
-        fields = FIELDS;
-    }
-
-    for (var f in fields) {
-        var field = fields[f];
-        if (field === 'rule') {
-            ser.rule = this.text();
-        } else if (field === 'global') {
-            // Only display the global flag if true
-            if (this.global) {
-                ser.global = true;
-            }
-        } else {
-            if (this.hasOwnProperty(field)) {
-                ser[field] = this[field];
-            }
-        }
-    }
-
-    return ser;
-};
-
-
-/**
- * Returns the text of the rule
- */
-FwRule.prototype.text = function () {
-    var containsRange;
-    var ports;
-    var protoTxt;
-    var targets = {
-        from: [],
-        to: []
-    };
-
-    forEachTarget(this, function (dir, type, name, arr) {
-        for (var i in arr) {
-            var txt;
-            if (type === 'tag') {
-                txt = util.format('%s %s', type,
-                    typeof (arr[i]) === 'string' ? quote(arr[i])
-                    : (quote(arr[i][0]) + ' = ' + quote(arr[i][1])));
-            } else {
-                txt = util.format('%s %s', type, arr[i]);
-            }
-
-            if (type === 'wildcard') {
-                txt = arr[i] === 'vmall' ? 'all vms' : arr[i];
-            }
-            targets[dir].push(txt);
-        }
-    });
-
-    // Protocol-specific text: different for ICMP rather than TCP/UDP
-    if (icmpr.test(this.protocol)) {
-        protoTxt = util.format('%sTYPE %s%s',
-            this.types.length > 1 ? '(' : '',
-            this.types.map(function (type) {
-                return type.toString().split(':');
-            }).map(function (code) {
-                return code[0] + (code.length === 1 ? '' : ' CODE ' + code[1]);
-            }).join(' AND TYPE '),
-            this.types.length > 1 ? ')' : ''
-        );
-    } else {
-        ports = this.ports.map(function (port) {
-            if (port.hasOwnProperty('start')
-                && port.hasOwnProperty('end')) {
-                /*
-                 * We only output PORTS when we have a range, since we don't
-                 * distinguish PORTS 1, 2 from (PORT 1 AND PORT 2) after
-                 * parsing.
-                 */
-                containsRange = true;
-                return port.start + ' - ' + port.end;
-            } else {
-                return port;
-            }
-        });
-        if (containsRange) {
-            protoTxt = util.format('PORTS %s', ports.join(', '));
-        } else {
-            protoTxt = util.format('%sPORT %s%s',
-                ports.length > 1 ? '(' : '',
-                ports.join(' AND PORT '),
-                ports.length > 1 ? ')' : ''
-            );
-        }
-    }
-
-    return util.format('FROM %s%s%s TO %s%s%s %s %s',
-            targets.from.length > 1 ? '(' : '',
-            targets.from.join(' OR '),
-            targets.from.length > 1 ? ')' : '',
-            targets.to.length > 1 ? '(' : '',
-            targets.to.join(' OR '),
-            targets.to.length > 1 ? ')' : '',
-            this.action.toUpperCase(),
-            this.protocol.toLowerCase(),
-            protoTxt
-    );
-};
-
-
-/**
- * Returns the string representation of the rule
- */
-FwRule.prototype.toString = function () {
-    return util.format('[%s,%s%s] %s', this.uuid, this.enabled,
-            (this.owner_uuid ? ',' + this.owner_uuid : ''),
-            this.text());
-};
-
-
-
-// --- Exported functions
-
-
-
-/**
- * Creates a new firewall rule from the payload
- */
-function createRule(payload, opts) {
-    return new FwRule(payload, opts);
-}
-
-
-function generateVersion() {
-    return Date.now(0) + '.' + sprintf('%06d', process.pid);
-}
-
-module.exports = {
-    create: createRule,
-    generateVersion: generateVersion,
-    DIRECTIONS: DIRECTIONS,
-    FIELDS: FIELDS,
-    FwRule: FwRule,
-    TARGET_TYPES: TARGET_TYPES
-};
diff --git a/node_modules/fw/tools/fwrule/lib/validators.js b/node_modules/fw/tools/fwrule/lib/validators.js
deleted file mode 100644
index 73ce97e..0000000
--- a/node_modules/fw/tools/fwrule/lib/validators.js
+++ /dev/null
@@ -1,220 +0,0 @@
-/*
- * CDDL HEADER START
- *
- * The contents of this file are subject to the terms of the
- * Common Development and Distribution License, Version 1.0 only
- * (the "License").  You may not use this file except in compliance
- * with the License.
- *
- * You can obtain a copy of the license at http://smartos.org/CDDL
- *
- * See the License for the specific language governing permissions
- * and limitations under the License.
- *
- * When distributing Covered Code, include this CDDL HEADER in each
- * file.
- *
- * If applicable, add the following below this CDDL HEADER, with the
- * fields enclosed by brackets "[]" replaced with your own identifying
- * information: Portions Copyright [yyyy] [name of copyright owner]
- *
- * CDDL HEADER END
- *
- * Copyright (c) 2016, Joyent, Inc. All rights reserved.
- *
- */
-
-/*
- * firewall rule parser: validation functions
- */
-
-var net = require('net');
-var util = require('util');
-var VError = require('verror').VError;
-
-
-
-// --- Globals
-
-
-
-var icmpr = /^icmp6?$/;
-var portRE = /^[0-9]{1,5}$/;
-var UUID_REGEX =
-    /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;
-
-
-
-// --- Exports
-
-
-
-/**
- * Constructor for an invalid parameter error
- */
-function InvalidParamError(field) {
-    VError.apply(this, Array.prototype.slice.call(arguments, 1));
-    this.field = field;
-}
-
-util.inherits(InvalidParamError, VError);
-
-
-/**
- * Returns true if ip is a valid IPv4 address, and not all zeroes or
- * the broadcast address
- */
-function validateIPv4address(ip) {
-    if (!net.isIPv4(ip) || (ip == '255.255.255.255') || (ip == '0.0.0.0')) {
-        return false;
-    }
-
-    return true;
-}
-
-
-/**
- * Returns true if subnet is in valid CIDR form
- */
-function validateIPv4subnet(subnet) {
-    var parts = subnet.split('/');
-    if (!validateIPv4address(parts[0])) {
-        return false;
-    }
-
-    if (!Number(parts[1]) || (parts[1] < 1) || (parts[1] > 32)) {
-        return false;
-    }
-
-    return true;
-}
-
-
-/**
- * Returns true if subnet is a valid IPv6 CIDR range
- */
-function validateIPv6subnet(subnet) {
-    var parts = subnet.split('/');
-    var plen = Number(parts[1]);
-    if (!net.isIPv6(parts[0])) {
-        return false;
-    }
-
-    if (!plen || (plen < 1) || (plen > 128)) {
-        return false;
-    }
-
-    return true;
-}
-
-
-/**
- * Returns true if port is a valid port number
- */
-function validatePort(port) {
-    if (!portRE.exec(port)) {
-        return false;
-    }
-
-    var portNum = Number(port);
-
-    if (isNaN(portNum) || portNum > 65535 || portNum < 1) {
-        return false;
-    }
-
-    return true;
-}
-
-/**
- * Returns true if port is a valid port number or 'all'
- */
-function validatePortOrAll(port) {
-    if (validatePort(port)) {
-        return true;
-    }
-
-    if (typeof (port) !== 'string') {
-        return false;
-    }
-
-    if (port.toLowerCase() === 'all') {
-        return true;
-    }
-
-    return false;
-}
-
-/**
- * Returns true if protocol is one of tcp, udp, icmp (mixing of upper
- * and lower-case allowed)
- */
-function validateProtocol(protocol) {
-    var protoLC = protocol.toLowerCase();
-    if ((protoLC != 'tcp') && (protoLC != 'udp') && (!icmpr.test(protoLC))) {
-        return false;
-    }
-    return true;
-}
-
-
-/**
- * Returns true if action is a valid firewall action ('allow' or 'block',
- * mixed case allowed)
- */
-function validateAction(action) {
-    var actionLC = action.toLowerCase();
-    if ((actionLC != 'allow') && (actionLC != 'block')) {
-        return false;
-    }
-    return true;
-}
-
-
-/**
- * Returns true if bool is a valid boolean value, false otherwise
- */
-function validateBoolean(bool) {
-    if (typeof (bool) !== 'boolean' && bool !== 'true' && bool !== 'false') {
-        return false;
-    }
-
-    return true;
-}
-
-
-/**
- * Throws an InvalidParamError if the string is invalid
- */
-function validateString(name, str) {
-    if (typeof (str) !== 'string') {
-        throw new InvalidParamError(name, name + ' must be a string');
-    }
-
-    if (str.length > 255) {
-        throw new InvalidParamError(name,
-            name + ' must be shorter than 255 characters');
-    }
-}
-
-
-/**
- * Returns true if uuid is a valid UUID
- */
-function validateUUID(uuid) {
-    return UUID_REGEX.test(uuid);
-}
-
-
-module.exports = {
-    bool: validateBoolean,
-    InvalidParamError: InvalidParamError,
-    validateAction: validateAction,
-    validateIPv4address: validateIPv4address,
-    validateIPv4subnet: validateIPv4subnet,
-    validateIPv6subnet: validateIPv6subnet,
-    validatePort: validatePort,
-    validatePortOrAll: validatePortOrAll,
-    validateProtocol: validateProtocol,
-    validateString: validateString,
-    validateUUID: validateUUID
-};
diff --git a/node_modules/fw/tools/fwrule/package.json b/node_modules/fw/tools/fwrule/package.json
deleted file mode 100644
index 5264b57..0000000
--- a/node_modules/fw/tools/fwrule/package.json
+++ /dev/null
@@ -1,24 +0,0 @@
-{
-  "name": "fwrule",
-  "description": "Parser for Joyent firewall rules",
-  "version": "1.0.0",
-  "author": "Joyent (joyent.com)",
-  "dependencies": {
-    "node-uuid": "1.2.0",
-    "extsprintf": "1.0.1",
-    "verror": "1.3.4"
-  },
-  "devDependencies": {
-    "jison": "0.4.2",
-    "nodeunit": "0.9.1",
-    "ramsey": "0.1.2"
-  },
-  "engines": {
-    "node": ">=0.6"
-  },
-  "main": "lib/index.js",
-  "scripts": {
-    "test": "make test"
-  },
-  "license": "CDDL-1.0"
-}
diff --git a/node_modules/fw/tools/fwrule/src/fwrule.jison b/node_modules/fw/tools/fwrule/src/fwrule.jison
deleted file mode 100644
index b94118f..0000000
--- a/node_modules/fw/tools/fwrule/src/fwrule.jison
+++ /dev/null
@@ -1,316 +0,0 @@
-/*
- * CDDL HEADER START
- *
- * The contents of this file are subject to the terms of the
- * Common Development and Distribution License, Version 1.0 only
- * (the "License").  You may not use this file except in compliance
- * with the License.
- *
- * You can obtain a copy of the license at http://smartos.org/CDDL
- *
- * See the License for the specific language governing permissions
- * and limitations under the License.
- *
- * When distributing Covered Code, include this CDDL HEADER in each
- * file.
- *
- * If applicable, add the following below this CDDL HEADER, with the
- * fields enclosed by brackets "[]" replaced with your own identifying
- * information: Portions Copyright [yyyy] [name of copyright owner]
- *
- * CDDL HEADER END
- *
- * Copyright (c) 2016, Joyent, Inc. All rights reserved.
- *
- *
- * fwadm: firewall rule parser grammar
- */
-
-%lex
-
-digit                   [0-9]
-hex                     [0-9a-f]
-esc                     "\\"
-t                       {digit}{1,3}
-
-%%
-
-\s+                     /* skip whitespace */
-<<EOF>>                 return 'EOF';
-
-"FROM"                  return 'FROM';
-"from"                  return 'FROM';
-"TO"                    return 'TO';
-"to"                    return 'TO';
-
-"IP"                    return 'IP';
-"ip"                    return 'IP';
-"SUBNET"                return 'SUBNET';
-"subnet"                return 'SUBNET';
-"ANY"                   return 'ANY';
-"any"                   return 'ANY';
-"ALL"                   return 'ALL';
-"all"                   return 'ALL';
-"TAG"                   return 'TAG';
-"tag"                   return 'TAG';
-"VM"                    return 'VM';
-"vm"                    return 'VM';
-"VMS"                   return 'VMS';
-"vms"                   return 'VMS';
-
-'-'                     return '-';
-','                     return ',';
-'='                     return '=';
-'('                     return '(';
-')'                     return ')';
-"OR"                    return 'OR';
-"or"                    return 'OR';
-"AND"                   return 'AND';
-"and"                   return 'AND';
-
-"BLOCK"                 return 'BLOCK';
-"block"                 return 'BLOCK';
-"ALLOW"                 return 'ALLOW';
-"allow"                 return 'ALLOW';
-"PORT"                  return 'PORT';
-"port"                  return 'PORT';
-"PORTS"                 return 'PORTS';
-"ports"                 return 'PORTS';
-"TCP"                   return 'TCP';
-"tcp"                   return 'TCP';
-"UDP"                   return 'UDP';
-"udp"                   return 'UDP';
-"ICMP"                  return 'ICMP';
-"icmp"                  return 'ICMP';
-"ICMP6"                 return 'ICMP6';
-"icmp6"                 return 'ICMP6';
-"TYPE"                  return 'TYPE';
-"type"                  return 'TYPE';
-"CODE"                  return 'CODE';
-"code"                  return 'CODE';
-
-\"(?:{esc}["bfnrt/{esc}]|{esc}"u"[a-fA-F0-9]{4}|[^"{esc}])*\"  yytext = yytext.substr(1,yyleng-2); return 'STRING';
-{t}'.'{t}'.'{t}'.'{t}          return 'IPV4ADDR';
-{hex}*':'{hex}*':'[:0-9a-f]*   return 'IPV6ADDR';
-'/'{digit}{1,3}                return 'CIDRSUFFIX';
-
-[-a-zA-Z0-9_]+          return 'WORD'
-
-/lex
-
-%%      /* Language grammar */
-
-start
-    : FROM target_list TO target_list action protocol EOF
-        { return { 'from': $2, 'to': $4, 'action': $5, 'protocol': $6 }; }
-    ;
-
-
-/* List of targets for 'FROM' and 'TO' */
-target_list
-    : any
-    | all
-    | '(' target_or_list ')'
-        {$$ = $2;}
-    | target
-    ;
-
-target_or_list
-    : target
-    | target_or_list 'OR' target
-        { $$ = $1.concat($3); }
-    ;
-
-target
-    : ipv4
-    | ipv4_subnet
-    | ipv6
-    | ipv6_subnet
-    | tag
-    | vm
-    ;
-
-
-/* Targets for 'FROM' and 'TO' */
-all
-    : ALL VMS
-        { $$ = [ ['wildcard', 'vmall'] ]; }
-    | '(' ALL VMS ')'
-        { $$ = [ ['wildcard', 'vmall'] ]; }
-    ;
-
-any
-    : ANY
-        { $$ = [ ['wildcard', 'any'] ]; }
-    | '(' ANY ')'
-        { $$ = [ ['wildcard', 'any'] ]; }
-    ;
-
-ipv4
-    : IP IPV4ADDR
-        { yy.validateIPv4address($2);
-          $$ = [ ['ip', $2] ]; }
-    ;
-
-ipv4_subnet
-    : SUBNET IPV4ADDR CIDRSUFFIX
-        { yy.validateIPv4subnet($2 + $3);
-            $$ = [ ['subnet', $2 + $3] ]; }
-    ;
-
-ipv6
-    : IP IPV6ADDR
-        { yy.validateOKVersion(3, 'IPv6');
-          yy.validateIPv6address($2);
-          $$ = [ ['ip', $2] ]; }
-    ;
-
-ipv6_subnet
-    : SUBNET IPV6ADDR CIDRSUFFIX
-        { yy.validateOKVersion(3, 'IPv6');
-          yy.validateIPv6subnet($2 + $3);
-            $$ = [ ['subnet', $2 + $3] ]; }
-    ;
-
-vm
-    : VM uuid
-        { $$ = [ ['vm', $2] ]; }
-    ;
-
-uuid
-    : WORD
-        { yy.validateUUID($1);
-          $$ = $1; }
-    ;
-
-tag
-    : TAG tag_string
-        { $$ = [ ['tag', $2] ]; }
-    | TAG tag_string '=' tag_string
-        { $$ = [ ['tag', [ $2, $4 ] ] ]; }
-    ;
-
-tag_string
-    : STRING
-        { $$ = yytext; }
-    | WORD
-        { $$ = $1; }
-    ;
-
-action
-    : BLOCK
-        { $$ = $1.toLowerCase() }
-    | ALLOW
-        { $$ = $1.toLowerCase() }
-    ;
-
-
-protocol
-    : TCP port_list
-        { $$ = { 'name': $1.toLowerCase(), 'targets': $2 } }
-    | TCP ports
-        { $$ = { 'name': $1.toLowerCase(), 'targets': $2 } }
-    | UDP port_list
-        { $$ = { 'name': $1.toLowerCase(), 'targets': $2 } }
-    | UDP ports
-        { $$ = { 'name': $1.toLowerCase(), 'targets': $2 } }
-    | ICMP type_list
-        { $$ = { 'name': $1.toLowerCase(), 'targets': $2 } }
-    | ICMP6 type_list
-        { $$ = { 'name': $1.toLowerCase(), 'targets': $2 } }
-    ;
-
-
-/* TCP / UDP port list */
-port_list
-    : '(' port_and_list ')'
-        { $$ = $2; }
-    | port
-    | '(' port_all ')'
-        { $$ = $2; }
-    | port_all
-    ;
-
-port_and_list
-    : port
-    | port_and_list AND port
-        { $$ = $1.concat(Number($3)); }
-    ;
-
-port
-    : PORT portnumber
-        { $$ = [ $2 ]; }
-    ;
-
-ports
-    : PORTS portnumbers
-        { yy.validateOKVersion(2, 'port ranges');
-          $$ = $2; }
-    ;
-
-port_all
-    : PORT ALL
-        { $$ = [ 'all' ]; }
-    ;
-
-portnumber
-    : WORD
-        { yy.validatePortNumber($1);
-          $$ = Number($1); }
-    ;
-
-portrange
-    : WORD
-        { $$ = [ yy.createMaybePortRange($1) ]; }
-    | WORD '-' WORD
-        { yy.validatePortNumber($1);
-          yy.validatePortNumber($3);
-          yy.validateRangeOrder($1, $3);
-          $$ = [{ 'start': Number($1), 'end': Number($3) }]; }
-    ;
-
-portnumbers
-    : portrange
-    | portnumbers ',' portrange
-        { $$ = $1.concat($3); }
-    ;
-
-type_list
-    : '(' type_and_list ')'
-        { $$ = $2; }
-    | type
-    | '(' type_all ')'
-        { $$ = $2; }
-    | type_all
-    ;
-
-type_and_list
-    : type
-    | type_and_list AND type
-        { $$ = $1.concat($3); }
-    ;
-
-type
-    : TYPE icmptype CODE icmpcode
-        { $$ = [ $2 + ':' + $4 ]; }
-    | TYPE icmptype
-        { $$ = [ $2 ]; }
-    ;
-
-type_all
-    : TYPE ALL
-        { yy.validateOKVersion(3, 'all ICMP types');
-          $$ = [ 'all' ]; }
-    ;
-
-icmptype
-    : WORD
-        { yy.validateICMPtype($1);
-          $$ = Number($1); }
-    ;
-
-icmpcode
-    : WORD
-        { yy.validateICMPcode($1);
-          $$ = Number($1); }
-    ;
diff --git a/node_modules/fw/tools/fwrule/src/header.js b/node_modules/fw/tools/fwrule/src/header.js
deleted file mode 100644
index c7e8f7a..0000000
--- a/node_modules/fw/tools/fwrule/src/header.js
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
- * CDDL HEADER START
- *
- * The contents of this file are subject to the terms of the
- * Common Development and Distribution License, Version 1.0 only
- * (the "License").  You may not use this file except in compliance
- * with the License.
- *
- * You can obtain a copy of the license at http://smartos.org/CDDL
- *
- * See the License for the specific language governing permissions
- * and limitations under the License.
- *
- * When distributing Covered Code, include this CDDL HEADER in each
- * file.
- *
- * If applicable, add the following below this CDDL HEADER, with the
- * fields enclosed by brackets "[]" replaced with your own identifying
- * information: Portions Copyright [yyyy] [name of copyright owner]
- *
- * CDDL HEADER END
- *
- * Copyright (c) 2016, Joyent, Inc. All rights reserved.
- *
- *
- * fwadm: firewall rule parser
- */
-
-
diff --git a/node_modules/fw/tools/fwrule/test/invalid.test.js b/node_modules/fw/tools/fwrule/test/invalid.test.js
deleted file mode 100644
index 211fb07..0000000
--- a/node_modules/fw/tools/fwrule/test/invalid.test.js
+++ /dev/null
@@ -1,416 +0,0 @@
-/*
- * CDDL HEADER START
- *
- * The contents of this file are subject to the terms of the
- * Common Development and Distribution License, Version 1.0 only
- * (the "License").  You may not use this file except in compliance
- * with the License.
- *
- * You can obtain a copy of the license at http://smartos.org/CDDL
- *
- * See the License for the specific language governing permissions
- * and limitations under the License.
- *
- * When distributing Covered Code, include this CDDL HEADER in each
- * file.
- *
- * If applicable, add the following below this CDDL HEADER, with the
- * fields enclosed by brackets "[]" replaced with your own identifying
- * information: Portions Copyright [yyyy] [name of copyright owner]
- *
- * CDDL HEADER END
- *
- * Copyright (c) 2016, Joyent, Inc. All rights reserved.
- *
- *
- * Negative unit tests for the firewall rule object
- */
-
-var fwrule = require('../lib/index');
-var util = require('util');
-
-
-
-// Set this to any of the exports in this file to only run that test,
-// plus setup and teardown
-var runOne;
-
-
-function longStr() {
-    var str = '';
-    for (var i = 0; i < 256; i++) {
-        str += '0';
-    }
-
-    return str;
-}
-
-
-function nIPs(n) {
-    var ips = [];
-    for (var i = 0; i < n; i++) {
-        ips.push('10.0.0.' + i);
-    }
-
-    return '( ip ' + ips.join(' OR ip ') + ' )';
-}
-
-
-function nPorts(n) {
-    var ports = [];
-    for (var i = 0; i < n; i++) {
-        ports.push('1' + i);
-    }
-
-    return '( port ' + ports.join(' AND port ') + ' )';
-}
-
-
-function nTypes(n) {
-    var types = [];
-    for (var i = 0; i < n; i++) {
-        types.push(i.toString());
-    }
-
-    return '( type ' + types.join(' AND type ') + ' )';
-}
-
-
-
-var VALID_RULE = 'FROM ip 10.0.0.1 TO all vms ALLOW TCP port 53';
-var INVALID = [
-    [ 'invalid IP: too many numbers',
-        {
-            rule: 'FROM ip 10.99.99.99.254 TO tag smartdc_role ALLOW tcp '
-                + 'port 22' },
-            'rule', 'Error at character 19: \'.254 TO tag smartdc_\', '
-                            + 'found: unexpected text'],
-
-    [ 'invalid UUID',
-        { uuid: 'invalid',
-            rule: 'FROM tag foo TO ip 8.8.8.8 ALLOW udp port 53'
-        }, 'uuid', 'Invalid rule UUID' ],
-
-    [ 'invalid owner UUID',
-        { owner_uuid: 'invalid',
-            rule: 'FROM tag foo TO ip 8.8.8.8 ALLOW udp port 53'
-        }, 'owner_uuid', 'Invalid owner UUID' ],
-
-    [ 'non-target type in FROM',
-        { rule: 'FROM foo TO ip 8.8.8.8 ALLOW udp port 53' },
-        'rule', 'Error at character 4: \'foo\', '
-                        + 'expected: \'(\', \'all\', \'any\', \'ip\', '
-                        + '\'subnet\', \'vm\', \'tag\', found: word'],
-
-    [ 'invalid subnet',
-        { rule: 'FROM tag foo TO subnet 10.8.0.0/33 ALLOW udp port 53' },
-        'rule', 'Subnet "10.8.0.0/33" is invalid (must be in CIDR format)' ],
-
-    [ 'invalid port: too small',
-        { rule: 'FROM tag foo TO subnet 10.8.0.0/24 ALLOW udp port 0' },
-        'rule', 'Port number "0" is invalid' ],
-
-    [ 'invalid port: too big',
-        { rule: 'FROM tag foo TO subnet 10.8.0.0/24 ALLOW udp port 65537' },
-        'rule', 'Port number "65537" is invalid' ],
-
-    [ 'invalid port range: too small',
-        { rule: 'FROM tag foo TO subnet 10.8.0.0/24 ALLOW tcp ports 0-20' },
-        'rule', 'Port number "0" is invalid' ],
-
-    [ 'invalid port range: too big',
-        { rule: 'FROM tag foo TO subnet 10.8.0.0/24 ALLOW tcp ports 20-65537' },
-        'rule', 'Port number "65537" is invalid' ],
-
-    [ 'invalid port range: not a port (at end)',
-        { rule: 'FROM tag foo TO subnet 10.8.0.0/24 ALLOW tcp ports 20-bar' },
-        'rule', 'Port number "bar" is invalid' ],
-
-    [ 'invalid port range: not a port (at beginning)',
-        { rule: 'FROM tag foo TO subnet 10.8.0.0/24 ALLOW tcp ports bar-20' },
-        'rule', 'Port number "bar" is invalid' ],
-
-    [ 'invalid port range: incorrect range ordering',
-        { rule: 'FROM tag foo TO subnet 10.8.0.0/24 ALLOW tcp ports 20 - 10' },
-        'rule',
-        'The end of the range (10) cannot be less than the start (20)' ],
-
-    [ 'invalid VM UUID',
-        { rule: 'FROM vm asdf TO subnet 10.8.0.0/24 ALLOW udp port 50' },
-        'rule', 'UUID "asdf" is invalid'],
-
-    [ 'all vms with other targets on FROM side',
-        { rule: 'FROM (all vms OR tag one) TO ip 10.0.0.1 ALLOW udp port 53' },
-        'rule', 'Error at character 13: \'OR\', expected: \')\', found: OR' ],
-
-    [ 'all vms with other targets on TO side',
-        { rule: 'FROM tag one TO (all vms OR tag two) ALLOW udp port 53' },
-        'rule', 'Error at character 24: \'OR\', expected: \')\', found: OR' ],
-
-    [ 'any with other targets on FROM side',
-        { rule: 'FROM (any OR tag one) TO ip 10.0.0.1 ALLOW udp port 53' },
-        'rule', 'Error at character 9: \'OR\', expected: \')\', found: OR' ],
-
-    [ 'any with other targets on TO side',
-        { rule: 'FROM ip 10.0.0.1 TO (any OR tag one) ALLOW udp port 53' },
-        'rule', 'Error at character 24: \'OR\', expected: \')\', found: OR' ],
-
-    [ 'other ports listed with ALL first', {
-        rule: 'FROM ip 10.0.0.1 TO all vms ALLOW TCP (port ALL AND port 53)' },
-        'rule',
-        'Error at character 47: \'AND\', expected: \'EOF\', \')\', found: AND'
-    ],
-
-    [ 'other ports listed with ALL second', {
-        rule: 'FROM ip 10.0.0.1 TO all vms ALLOW TCP (port 53 AND port ALL)'
-        }, 'rule',
-        'Error at character 55: \'ALL\', expected: \'WORD\', found: ALL' ],
-
-    [ 'created_by: object instead of string', {
-        created_by: { },
-        rule: VALID_RULE
-        }, 'created_by',
-        'created_by must be a string'],
-
-    [ 'created_by: array instead of string', {
-        created_by: ['asdf'],
-        rule: VALID_RULE
-        }, 'created_by',
-        'created_by must be a string'],
-
-    [ 'created_by: number instead of string', {
-        created_by: 42,
-        rule: VALID_RULE
-        }, 'created_by',
-        'created_by must be a string'],
-
-    [ 'created_by: string too long', {
-        created_by: longStr(),
-        rule: VALID_RULE
-        }, 'created_by',
-        'created_by must be shorter than 255 characters'],
-
-    [ 'description: object instead of string', {
-        description: { },
-        rule: VALID_RULE
-        }, 'description',
-        'description must be a string'],
-
-    [ 'description: array instead of string', {
-        description: ['asdf'],
-        rule: VALID_RULE
-        }, 'description',
-        'description must be a string'],
-
-    [ 'description: number instead of string', {
-        description: 42,
-        rule: VALID_RULE
-        }, 'description',
-        'description must be a string'],
-
-    [ 'description: string too long', {
-        description: longStr(),
-        rule: VALID_RULE
-        }, 'description',
-        'description must be shorter than 255 characters'],
-
-    [ 'rule: from any to any', {
-        rule: 'FROM any TO any ALLOW TCP port 53'
-        }, 'rule',
-        'rule does not affect VMs'],
-
-    [ 'rule: from any to any', {
-        rule: 'FROM any TO any ALLOW TCP port 53'
-        }, 'rule',
-        'rule does not affect VMs'],
-
-    [ 'rule: from ip to subnet', {
-        rule: 'FROM ip 10.8.0.1 TO subnet 10.9.0.0/16 ALLOW TCP port 53'
-        }, 'rule',
-        'rule does not affect VMs'],
-
-    [ 'rule: from ip to any', {
-        rule: 'FROM ip 10.9.0.1 TO any ALLOW TCP port 53'
-        }, 'rule',
-        'rule does not affect VMs'],
-
-    [ 'global: not boolean', {
-        rule: VALID_RULE,
-        global: 'asdf'
-        }, 'global',
-        'global must be true or false'],
-
-    [ 'both global and owner_uuid set', {
-        rule: VALID_RULE,
-        global: true,
-        owner_uuid: 'e7d9d022-6272-11e3-a746-131978000f45'
-        }, 'global',
-        'cannot specify both global and owner_uuid'],
-
-    [ 'rule: max number per side', {
-        rule: 'FROM ' + nIPs(25) + ' TO all vms ALLOW TCP port 53'
-        }, 'rule',
-        'maximum of 24 targets allowed per side'],
-
-    [ 'rule: max number per side', {
-        rule: 'FROM all vms TO ' + nIPs(25) + ' BLOCK TCP port 53'
-        }, 'rule',
-        'maximum of 24 targets allowed per side'],
-
-    [ 'rule: max number of ports', {
-        rule: 'FROM all vms TO ip 192.168.5.4 BLOCK TCP ' + nPorts(9)
-        }, 'rule',
-        'maximum of 24 ports allowed'],
-
-    [ 'rule: bad ip target for ICMPv4', {
-        rule: 'FROM all vms TO ip fd00::45 BLOCK ICMP TYPE 8'
-        }, 'rule',
-        'rule affects ICMPv4 but contains a non-IPv4 address'],
-
-    [ 'rule: bad subnet target for ICMPv4', {
-        rule: 'FROM all vms TO subnet fe80::/64 BLOCK ICMP TYPE 8'
-        }, 'rule',
-        'rule affects ICMPv4 but contains a non-IPv4 subnet'],
-
-    [ 'rule: bad ip target for ICMPv6', {
-        rule: 'FROM all vms TO ip 1.2.3.4 BLOCK ICMP6 TYPE 128'
-        }, 'rule',
-        'rule affects ICMPv6 but contains a non-IPv6 address'],
-
-    [ 'rule: bad subnet target for ICMPv6', {
-        rule: 'FROM all vms TO subnet 10.0.0.0/8 BLOCK ICMP6 TYPE 128'
-        }, 'rule',
-        'rule affects ICMPv6 but contains a non-IPv6 subnet'],
-
-    [ 'rule: bad ICMP type', {
-        rule: 'FROM all vms TO ip 192.168.5.4 BLOCK ICMP TYPE 260'
-        }, 'rule',
-        'ICMP type \"260\" is invalid'],
-
-    [ 'rule: bad ICMP code', {
-        rule: 'FROM all vms TO ip 192.168.5.4 BLOCK ICMP TYPE 8 CODE 270'
-        }, 'rule',
-        'ICMP code \"270\" is invalid'],
-
-    [ 'rule: bad ICMPv6 type', {
-        rule: 'FROM all vms TO ip fd00::45 BLOCK ICMP6 TYPE 260'
-        }, 'rule',
-        'ICMP type \"260\" is invalid'],
-
-    [ 'rule: bad ICMPv6 code', {
-        rule: 'FROM all vms TO ip fd00::45 BLOCK ICMP6 TYPE 128 CODE 270'
-        }, 'rule',
-        'ICMP code \"270\" is invalid'],
-
-    [ 'rule: max number of ICMPv6 types', {
-        rule: 'FROM all vms TO ip fd00::45 BLOCK ICMP ' + nTypes(9)
-        }, 'rule',
-        'maximum of 24 types allowed'],
-
-    [ 'rule: max number of ICMP types', {
-        rule: 'FROM all vms TO ip 192.168.5.4 BLOCK ICMP ' + nTypes(9)
-        }, 'rule',
-        'maximum of 24 types allowed']
-];
-
-
-exports['Invalid rules'] = function (t) {
-    INVALID.forEach(function (data) {
-        var testName = data[0];
-        var expMsg = data[3];
-        var field = data[2];
-        var opts;
-        var rule = data[1];
-        var thrown = false;
-
-        try {
-            opts = (field == 'global' ? { enforceGlobal: true } : {});
-            fwrule.create(rule, opts);
-        } catch (err) {
-            thrown = true;
-            t.equal(err.message, expMsg, 'Error message correct: ' + testName);
-            t.equal(err.field, field, 'Error field correct: ' + testName);
-        }
-
-        t.ok(thrown, 'Error thrown: ' + testName);
-    });
-
-    t.done();
-};
-
-
-exports['Invalid parameters'] = function (t) {
-    var thrown = false;
-    var invalid = {
-        enabled: 'invalid',
-        rule: 'invalid',
-        owner_uuid: 'invalid',
-        uuid: 'invalid'
-    };
-
-    try {
-        fwrule.create(invalid);
-    } catch (err) {
-        thrown = true;
-
-        t.ok(err.hasOwnProperty('ase_errors'), 'multiple errors');
-        if (err.hasOwnProperty('ase_errors')) {
-            t.equal(err.ase_errors.length, 4, '4 sub-errors');
-            t.deepEqual(err.ase_errors.map(function (e) {
-                return [ e.field, e.message ];
-            }), [
-                ['rule', 'Error at character 0: \'invalid\', '
-                    + 'expected: \'FROM\', found: word'],
-                ['uuid', 'Invalid rule UUID'],
-                ['owner_uuid', 'Invalid owner UUID'],
-                ['enabled', 'enabled must be true or false']
-            ], 'sub-errors');
-        }
-    }
-
-    t.ok(thrown, 'error thrown');
-    t.done();
-};
-
-
-exports['Missing rule field'] = function (t) {
-    var thrown = false;
-
-    try {
-        fwrule.create({});
-    } catch (err) {
-        thrown = true;
-        t.equal(err.message, 'No rule specified', 'error message');
-        t.equal(err.field, 'rule', 'err.field');
-    }
-
-    t.ok(thrown, 'error thrown');
-    t.done();
-};
-
-
-exports['global and owner_uuid not set'] = function (t) {
-    var thrown = false;
-
-    try {
-        fwrule.create({
-            rule: 'FROM any to all vms ALLOW tcp port 80'
-        }, { enforceGlobal: true });
-    } catch (err) {
-        thrown = true;
-        t.equal(err.message, 'owner_uuid required', 'error message');
-        t.equal(err.field, 'owner_uuid', 'err.field');
-    }
-
-    t.ok(thrown, 'error thrown');
-    t.done();
-};
-
-
-
-// Use to run only one test in this file:
-if (runOne) {
-    module.exports = {
-        oneTest: runOne
-    };
-}
diff --git a/node_modules/fw/tools/fwrule/test/parser.test.js b/node_modules/fw/tools/fwrule/test/parser.test.js
deleted file mode 100644
index 47ac52f..0000000
--- a/node_modules/fw/tools/fwrule/test/parser.test.js
+++ /dev/null
@@ -1,360 +0,0 @@
-/*
- * CDDL HEADER START
- *
- * The contents of this file are subject to the terms of the
- * Common Development and Distribution License, Version 1.0 only
- * (the "License").  You may not use this file except in compliance
- * with the License.
- *
- * You can obtain a copy of the license at http://smartos.org/CDDL
- *
- * See the License for the specific language governing permissions
- * and limitations under the License.
- *
- * When distributing Covered Code, include this CDDL HEADER in each
- * file.
- *
- * If applicable, add the following below this CDDL HEADER, with the
- * fields enclosed by brackets "[]" replaced with your own identifying
- * information: Portions Copyright [yyyy] [name of copyright owner]
- *
- * CDDL HEADER END
- *
- * Copyright (c) 2016, Joyent, Inc. All rights reserved.
- *
- *
- * Unit tests for the firewall rule parser
- */
-
-var util = require('util');
-var parser = require('../lib/index');
-
-
-
-exports['tags'] = function (t) {
-    t.deepEqual(parser.parse(
-        'FROM ip 1.2.3.4 TO tag some-tag ALLOW tcp PORT 80'),
-        { from: [ [ 'ip', '1.2.3.4' ] ],
-            to: [ [ 'tag', 'some-tag' ] ],
-            action: 'allow',
-            protocol: {
-                name: 'tcp',
-                targets: [ 80 ]
-            }
-        }, 'tag containing dashes');
-
-    t.done();
-};
-
-
-exports['icmp'] = function (t) {
-    var vm = 'b0b92cd9-1fe7-4636-8477-81d2742566c2';
-
-    t.deepEqual(parser.parse(
-        util.format('FROM ip 10.0.0.2 TO vm %s ALLOW icmp type 8', vm)),
-        { from: [ [ 'ip', '10.0.0.2' ] ],
-            to: [ [ 'vm', vm ] ],
-            action: 'allow',
-            protocol: {
-                name: 'icmp',
-                targets: [ '8' ]
-            }
-        }, 'icmp with type');
-
-    t.deepEqual(parser.parse(
-        util.format('FROM ip 10.0.0.2 TO vm %s ALLOW icmp type 8 code 0', vm)),
-        { from: [ [ 'ip', '10.0.0.2' ] ],
-            to: [ [ 'vm', vm ] ],
-            action: 'allow',
-            protocol: {
-                name: 'icmp',
-                targets: [ '8:0' ]
-            }
-        }, 'icmp with type and code');
-
-    t.done();
-};
-
-
-exports['case insensitivity'] = function (t) {
-    var vm = 'b5ff85db-fc33-4471-b045-5688cb7fa6a8';
-    var ipToTag = {
-        from: [ [ 'ip', '1.2.3.4' ] ],
-        to: [ [ 'tag', 'some-tag' ] ],
-        action: 'allow',
-        protocol: {
-            name: 'tcp',
-            targets: [ 80 ]
-        }
-    };
-
-    var anyToVM = {
-        from: [ [ 'wildcard', 'any' ] ],
-        to: [ [ 'vm', vm ] ],
-        action: 'allow',
-        protocol: {
-            name: 'udp',
-            targets: [ 50 ]
-        }
-    };
-
-    var subnetToAll = {
-        from: [ [ 'subnet', '10.8.0.0/16' ] ],
-        to: [ [ 'wildcard', 'vmall' ] ],
-        action: 'allow',
-        protocol: {
-            name: 'icmp',
-            targets: [ 30 ]
-        }
-    };
-
-    var ipTag = {
-        from: [ [ 'subnet', '10.8.0.0/16' ],
-                        [ 'ip', '10.9.0.1' ] ],
-        to: [ [ 'wildcard', 'vmall' ] ],
-        action: 'allow',
-        protocol: {
-            name: 'icmp',
-            targets: [ '8:0', '9' ]
-        }
-    };
-
-    [
-        [ 'FROM IP 1.2.3.4 TO TAG some-tag ALLOW TCP PORTS 80', ipToTag ],
-        [ 'FROM IP 1.2.3.4 TO TAG some-tag ALLOW TCP ports 80', ipToTag ],
-        [ 'FROM IP 1.2.3.4 TO TAG some-tag ALLOW TCP PORT 80', ipToTag ],
-        [ 'from ip 1.2.3.4 to tag some-tag allow tcp port 80', ipToTag ],
-        [ util.format('from ANY to VM %s allow UDP ports 50', vm), anyToVM ],
-        [ util.format('from any to vm %s allow udp ports 50', vm), anyToVM ],
-        [ util.format('from ANY to VM %s allow UDP port 50', vm), anyToVM ],
-        [ util.format('from any to vm %s allow udp port 50', vm), anyToVM ],
-        [ 'FROM SUBNET 10.8.0.0/16 TO ALL VMS ALLOW ICMP TYPE 30',
-            subnetToAll ],
-        [ 'FROM subnet 10.8.0.0/16 TO all vms ALLOW icmp type 30',
-            subnetToAll ],
-        [ 'FROM (subnet 10.8.0.0/16 OR ip 10.9.0.1) TO all vms ALLOW '
-            + 'icmp (TYPE 8 CODE 0 AND TYPE 9)', ipTag ],
-        [ 'FROM (subnet 10.8.0.0/16 OR ip 10.9.0.1) TO all vms ALLOW '
-            + 'icmp (type 8 code 0 and type 9)', ipTag ]
-
-    ].forEach(function (data) {
-        try {
-            t.deepEqual(parser.parse(data[0]), data[1], data[0]);
-        } catch (err) {
-            t.ifError(err);
-        }
-    });
-
-    t.done();
-};
-
-exports['port ranges'] = function (t) {
-
-    var rangeA = {
-        from: [ [ 'ip', '1.2.3.4' ] ],
-        to: [ [ 'tag', 'some-tag' ] ],
-        action: 'allow',
-        protocol: {
-            name: 'tcp',
-            targets: [ { start: 20, end: 40 } ]
-        }
-    };
-
-    [
-        [ 'FROM IP 1.2.3.4 TO TAG some-tag ALLOW TCP PORTS 20-40', rangeA ],
-        [ 'FROM IP 1.2.3.4 TO TAG some-tag ALLOW TCP PORTS 20 - 40', rangeA ]
-    ].forEach(function (data) {
-        try {
-            t.deepEqual(parser.parse(data[0]), data[1], data[0]);
-        } catch (err) {
-            t.ifError(err);
-        }
-    });
-    t.done();
-};
-
-exports['version mismatch'] = function (t) {
-    try {
-        parser.parse('FROM tag foo TO tag bar ALLOW TCP PORTS 20-30',
-            { maxVersion: 1 });
-        t.ok(false,
-            'Using port ranges is a newer feature and should fail in v1');
-    } catch (err) {
-        t.deepEqual(err.message,
-            'The rule uses a feature (port ranges) newer than this API allows',
-            'Correct error message for using ports in version 1');
-    }
-    t.done();
-};
-
-exports['icmp with code'] = function (t) {
-    var vm = 'b0b92cd9-1fe7-4636-8477-81d2742566c2';
-    var ruleTxt = util.format('FROM ip 10.0.0.2 TO vm %s ALLOW icmp type 8 '
-        + 'code 0', vm);
-
-    t.deepEqual(parser.parse(ruleTxt),
-        { from: [ [ 'ip', '10.0.0.2' ] ],
-            to: [ [ 'vm', vm ] ],
-            action: 'allow',
-            protocol: {
-                name: 'icmp',
-                targets: [ '8:0' ]
-            }
-        }, 'icmp with type');
-
-    t.done();
-};
-
-exports['icmp type all'] = function (t) {
-    var vm = 'b0b92cd9-1fe7-4636-8477-81d2742566c2';
-
-    t.deepEqual(parser.parse(
-        util.format('FROM ip 10.0.0.2 TO vm %s ALLOW icmp type all', vm)),
-        { from: [ [ 'ip', '10.0.0.2' ] ],
-            to: [ [ 'vm', vm ] ],
-            action: 'allow',
-            protocol: {
-                name: 'icmp',
-                targets: [ 'all' ]
-            }
-        }, 'icmp type all');
-
-    t.deepEqual(parser.parse(
-        util.format('FROM ip 10.0.0.2 TO vm %s ALLOW icmp ( TYPE ALL )', vm)),
-        { from: [ [ 'ip', '10.0.0.2' ] ],
-            to: [ [ 'vm', vm ] ],
-            action: 'allow',
-            protocol: {
-                name: 'icmp',
-                targets: [ 'all' ]
-            }
-        }, 'icmp type all in parens');
-
-    t.done();
-};
-
-exports['icmp6 type all'] = function (t) {
-    var vm = 'b0b92cd9-1fe7-4636-8477-81d2742566c2';
-
-    t.deepEqual(parser.parse(
-        util.format('FROM ip 10.0.0.2 TO vm %s ALLOW icmp6 type all', vm)),
-        { from: [ [ 'ip', '10.0.0.2' ] ],
-            to: [ [ 'vm', vm ] ],
-            action: 'allow',
-            protocol: {
-                name: 'icmp6',
-                targets: [ 'all' ]
-            }
-        }, 'icmp6 type all');
-
-    t.deepEqual(parser.parse(
-        util.format('FROM ip 10.0.0.2 TO vm %s ALLOW icmp6 ( TYPE ALL )', vm)),
-        { from: [ [ 'ip', '10.0.0.2' ] ],
-            to: [ [ 'vm', vm ] ],
-            action: 'allow',
-            protocol: {
-                name: 'icmp6',
-                targets: [ 'all' ]
-            }
-        }, 'icmp6 type all in parens');
-
-    t.done();
-};
-
-exports['tag with value'] = function (t) {
-    var ruleTxt = 'FROM tag foo = bar TO ip 8.8.8.8 BLOCK udp PORT 53';
-
-    t.deepEqual(parser.parse(ruleTxt),
-        { from: [ [ 'tag', [ 'foo', 'bar' ] ] ],
-            to: [ [ 'ip', '8.8.8.8' ] ],
-            action: 'block',
-            protocol: {
-                name: 'udp',
-                targets: [ 53 ]
-            }
-        }, 'tag = value');
-
-    t.done();
-};
-
-
-exports['multiple tags with values'] = function (t) {
-    var ruleTxt = 'FROM (tag foo = bar OR tag some = value) TO '
-        + 'ip 8.8.8.8 BLOCK udp PORT 53';
-
-    t.deepEqual(parser.parse(ruleTxt),
-        { from: [
-            [ 'tag', [ 'foo', 'bar' ] ],
-            [ 'tag', [ 'some', 'value' ] ]
-        ],
-            to: [ [ 'ip', '8.8.8.8' ] ],
-            action: 'block',
-            protocol: {
-                name: 'udp',
-                targets: [ 53 ]
-            }
-        }, 'tag = value');
-
-    t.done();
-};
-
-
-exports['tag with quoted value'] = function (t) {
-    var ruleTxt = 'FROM tag foo = "some value" TO ip 8.8.8.8 BLOCK udp PORT 53';
-
-    t.deepEqual(parser.parse(ruleTxt),
-        { from: [ [ 'tag', [ 'foo', 'some value' ] ] ],
-            to: [ [ 'ip', '8.8.8.8' ] ],
-            action: 'block',
-            protocol: {
-                name: 'udp',
-                targets: [ 53 ]
-            }
-        }, 'tag = value');
-
-    t.done();
-};
-
-
-exports['tags with quoted name and value'] = function (t) {
-    var ruleTxt = 'FROM (tag "tag one" = "some value" OR '
-        + 'tag "tag two" = "another value")'
-        + 'TO ip 8.8.8.8 BLOCK udp PORT 53';
-
-    t.deepEqual(parser.parse(ruleTxt),
-        { from: [
-                [ 'tag', [ 'tag one', 'some value' ] ],
-                [ 'tag', [ 'tag two', 'another value' ] ]
-            ],
-            to: [ [ 'ip', '8.8.8.8' ] ],
-            action: 'block',
-            protocol: {
-                name: 'udp',
-                targets: [ 53 ]
-            }
-        }, 'tag = value');
-
-    t.done();
-};
-
-
-exports['tags with unicode characters'] = function (t) {
-    var ruleTxt = 'FROM (tag "☂" = "ທ" OR '
-        + 'tag "삼겹살" = "불고기")'
-        + 'TO ip 8.8.8.8 BLOCK udp PORT 53';
-
-    t.deepEqual(parser.parse(ruleTxt),
-        { from: [
-                [ 'tag', [ '☂', 'ທ' ] ],
-                [ 'tag', [ '삼겹살', '불고기' ] ]
-            ],
-            to: [ [ 'ip', '8.8.8.8' ] ],
-            action: 'block',
-            protocol: {
-                name: 'udp',
-                targets: [ 53 ]
-            }
-        }, 'tag = value');
-
-    t.done();
-};
diff --git a/node_modules/fw/tools/fwrule/test/rule.test.js b/node_modules/fw/tools/fwrule/test/rule.test.js
deleted file mode 100644
index e284ad6..0000000
--- a/node_modules/fw/tools/fwrule/test/rule.test.js
+++ /dev/null
@@ -1,1364 +0,0 @@
-/*
- * CDDL HEADER START
- *
- * The contents of this file are subject to the terms of the
- * Common Development and Distribution License, Version 1.0 only
- * (the "License").  You may not use this file except in compliance
- * with the License.
- *
- * You can obtain a copy of the license at http://smartos.org/CDDL
- *
- * See the License for the specific language governing permissions
- * and limitations under the License.
- *
- * When distributing Covered Code, include this CDDL HEADER in each
- * file.
- *
- * If applicable, add the following below this CDDL HEADER, with the
- * fields enclosed by brackets "[]" replaced with your own identifying
- * information: Portions Copyright [yyyy] [name of copyright owner]
- *
- * CDDL HEADER END
- *
- * Copyright (c) 2016, Joyent, Inc. All rights reserved.
- *
- *
- * Unit tests for the firewall rule object
- */
-
-var fwrule = require('../lib/index');
-var util = require('util');
-
-
-
-// Set this to any of the exports in this file to only run that test,
-// plus setup and teardown
-var runOne;
-
-
-
-// --- Tests
-
-
-
-exports['rule exports'] = function (t) {
-    ['ACTIONS', 'DIRECTIONS', 'FIELDS', 'PROTOCOLS', 'TARGET_TYPES'].forEach(
-        function (field) {
-        t.ok(fwrule[field].length > 0, 'fwrule.' + field);
-    });
-
-    t.done();
-};
-
-
-exports['all target types'] = function (t) {
-    var desc = 'all target types';
-    var ips = ['192.168.1.1', '10.2.0.3'];
-    var vms = ['9a343ca8-b42a-4a27-a9c5-800f57d1e8ed',
-        '518908b6-8299-466d-8ea5-20a0ceff63ec'];
-    var tags = ['tag1', 'tag2'];
-    var subnets = ['192.168.2.0/24', '10.2.1.0/24'];
-    var ruleTxt = util.format('FROM (ip %s OR vm %s OR tag %s OR subnet %s) ',
-        ips[0], vms[0], tags[0], subnets[0])
-        + util.format('TO (ip %s OR vm %s OR tag %s OR subnet %s)',
-        ips[1], vms[1], tags[1], subnets[1])
-        + ' ALLOW tcp port 80';
-
-    var rule = fwrule.create({
-        rule: ruleTxt,
-        created_by: 'fwadm',
-        description: desc,
-        enabled: true,
-        version: fwrule.generateVersion()
-    });
-
-    var raw = {
-        from: {
-            ips: [ips[0]],
-            subnets: [subnets[0]],
-            vms: [vms[0]],
-            tags: [tags[0]],
-            wildcards: []
-        },
-        to: {
-            ips: [ips[1]],
-            subnets: [subnets[1]],
-            vms: [vms[1]],
-            tags: [tags[1]],
-            wildcards: []
-        },
-        created_by: 'fwadm',
-        description: desc,
-        enabled: true,
-        ports: [ 80 ],
-        action: 'allow',
-        protocol: 'tcp',
-        uuid: rule.uuid,
-        version: rule.version
-    };
-
-    t.deepEqual(rule.raw(), raw, 'rule.raw()');
-    t.deepEqual(rule.from, raw.from, 'rule.from');
-    t.deepEqual(rule.to, raw.to, 'rule.to');
-    t.ok(!rule.allVMs, 'rule.allVMs');
-
-    var ser = {
-        created_by: 'fwadm',
-        description: desc,
-        enabled: true,
-        global: true,
-        rule: util.format('FROM (ip %s OR subnet %s OR tag %s OR vm %s) '
-            + 'TO (ip %s OR subnet %s OR tag %s OR vm %s) ALLOW tcp PORT 80',
-            ips[0], subnets[0], tags[0], vms[0],
-            ips[1], subnets[1], tags[1], vms[1]),
-        uuid: rule.uuid,
-        version: rule.version
-    };
-
-    t.deepEqual(rule.serialize(), ser, 'rule.serialize()');
-    t.deepEqual(rule.serialize(['enabled', 'version']),
-        { enabled: ser.enabled, version: ser.version },
-        'rule.serialize(): enabled, version');
-
-    t.done();
-};
-
-
-exports['any'] = function (t) {
-    var ip = '192.168.3.2';
-    var vm = '8a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
-    var tag = 'tag3';
-    var subnet = '192.168.0.0/16';
-
-    var ruleTxt = util.format(
-        'FROM (ip %s OR subnet %s OR tag %s OR vm %s) TO any ALLOW tcp PORT 80',
-        ip, subnet, tag, vm);
-
-    var rule = fwrule.create({
-        rule: ruleTxt,
-        enabled: true,
-        version: fwrule.generateVersion()
-    });
-
-    var raw = {
-        from: {
-            ips: [ip],
-            subnets: [subnet],
-            vms: [vm],
-            tags: [tag],
-            wildcards: []
-        },
-        to: {
-            ips: [],
-            subnets: [],
-            vms: [],
-            tags: [],
-            wildcards: ['any']
-        },
-        enabled: true,
-        ports: [ 80 ],
-        action: 'allow',
-        protocol: 'tcp',
-        uuid: rule.uuid,
-        version: rule.version
-    };
-
-    t.deepEqual(rule.raw(), raw, 'rule.raw()');
-    t.deepEqual(rule.from, raw.from, 'rule.from');
-    t.deepEqual(rule.to, raw.to, 'rule.to');
-    t.ok(!rule.allVMs, 'rule.allVMs');
-
-    t.deepEqual(rule.serialize(), {
-        enabled: true,
-        global: true,
-        rule: ruleTxt,
-        uuid: rule.uuid,
-        version: rule.version
-    }, 'rule.serialize()');
-
-    t.done();
-};
-
-
-exports['all vms'] = function (t) {
-    var ip = '192.168.3.2';
-    var owner = '50716241-ac8d-4e63-a9e4-77ff07cede61';
-
-    var ruleTxt = util.format('FROM ip %s TO all vms ALLOW tcp PORT 80', ip);
-
-    var rule = fwrule.create({
-        rule: ruleTxt,
-        enabled: true,
-        owner_uuid: owner,
-        version: fwrule.generateVersion()
-    });
-
-    var raw = {
-        from: {
-            ips: [ip],
-            subnets: [],
-            vms: [],
-            tags: [],
-            wildcards: []
-        },
-        to: {
-            ips: [],
-            subnets: [],
-            vms: [],
-            tags: [],
-            wildcards: ['vmall']
-        },
-        enabled: true,
-        owner_uuid: owner,
-        ports: [ 80 ],
-        action: 'allow',
-        protocol: 'tcp',
-        uuid: rule.uuid,
-        version: rule.version
-    };
-
-    t.deepEqual(rule.raw(), raw, 'rule.raw()');
-    t.deepEqual(rule.from, raw.from, 'rule.from');
-    t.deepEqual(rule.to, raw.to, 'rule.to');
-    t.deepEqual(rule.wildcards, raw.to.wildcards, 'rule.wildcards');
-    t.ok(rule.allVMs, 'rule.allVMs');
-
-    t.deepEqual(rule.serialize(), {
-        enabled: true,
-        // no global flag set because the rule has an owner_uuid
-        owner_uuid: owner,
-        rule: ruleTxt,
-        uuid: rule.uuid,
-        version: rule.version
-    }, 'rule.serialize()');
-
-    t.done();
-};
-
-
-exports['tags'] = function (t) {
-    var ruleTxt = 'FROM ip 1.2.3.4 TO tag some-tag ALLOW tcp PORT 80';
-    var rule = new fwrule.create({
-        rule: ruleTxt,
-        version: fwrule.generateVersion()
-    });
-
-    var raw = {
-        action: 'allow',
-        enabled: false,
-        from: {
-            ips: [ '1.2.3.4' ],
-            vms: [],
-            subnets: [],
-            tags: [],
-            wildcards: []
-        },
-        protocol: 'tcp',
-        ports: [ 80 ],
-        to: {
-            ips: [],
-            vms: [],
-            subnets: [],
-            tags: [ 'some-tag' ],
-            wildcards: []
-        },
-        uuid: rule.uuid,
-        version: rule.version
-    };
-    t.deepEqual(rule.raw(), raw, 'rule.raw()');
-
-    t.deepEqual(rule.serialize(), {
-        enabled: false,
-        global: true,
-        rule: ruleTxt,
-        uuid: rule.uuid,
-        version: rule.version
-    }, 'rule.serialize()');
-    t.ok(!rule.allVMs, 'rule.allVMs');
-
-    t.done();
-};
-
-
-exports['multiple ports and owner_uuid'] = function (t) {
-    var inRule1 = {
-        rule: 'FROM ip 10.88.88.1 TO tag tag2 ALLOW tcp '
-            + '(PORT 1002 AND PORT 1052)',
-        enabled: true,
-        owner_uuid: '930896af-bf8c-48d4-885c-6573a94b1853',
-        version: fwrule.generateVersion()
-    };
-    var inRule2 = {
-        rule: 'FROM ip 10.88.88.1 TO tag tag2 ALLOW tcp '
-            + 'PORTS 1002, 1052',
-        enabled: true,
-        owner_uuid: '930896af-bf8c-48d4-885c-6573a94b1853',
-        version: fwrule.generateVersion()
-    };
-
-
-    var rule1 = fwrule.create(inRule1);
-    var rule2 = fwrule.create(inRule2);
-    var raw = {
-        action: 'allow',
-        enabled: inRule1.enabled,
-        from: {
-            ips: [ '10.88.88.1' ],
-            vms: [],
-            subnets: [],
-            tags: [],
-            wildcards: []
-        },
-        owner_uuid: inRule1.owner_uuid,
-        protocol: 'tcp',
-        ports: [ 1002, 1052 ],
-        to: {
-            ips: [],
-            vms: [],
-            subnets: [],
-            tags: [ 'tag2' ],
-            wildcards: []
-        },
-        uuid: rule1.uuid,
-        version: rule1.version
-    };
-
-    t.deepEqual(rule1.raw(), raw, 'rule1.raw()');
-    t.deepEqual(rule1.ports, raw.ports, 'rule1.ports');
-    t.deepEqual(rule1.protoTargets, raw.ports, 'rule1.protoTargets');
-
-    t.deepEqual(rule1.serialize(), {
-        enabled: true,
-        owner_uuid: inRule1.owner_uuid,
-        rule: inRule1.rule,
-        uuid: rule1.uuid,
-        version: rule1.version
-    }, 'rule1.serialize()');
-
-    raw.uuid = rule2.uuid;
-
-    t.deepEqual(rule2.raw(), raw, 'rule2.raw()');
-    t.deepEqual(rule2.ports, raw.ports, 'rule2.ports');
-    t.deepEqual(rule2.protoTargets, raw.ports, 'rule2.protoTargets');
-
-    t.deepEqual(rule2.serialize(), {
-        enabled: true,
-        owner_uuid: inRule2.owner_uuid,
-        rule: inRule1.rule,
-        uuid: rule2.uuid,
-        version: rule2.version
-    }, 'rule2.serialize()');
-
-    t.done();
-};
-
-
-exports['icmp'] = function (t) {
-    var vm = '8a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
-
-    var ruleTxt = util.format(
-        'FROM any TO vm %s ALLOW icmp TYPE 8', vm);
-
-    var rule = fwrule.create({
-        rule: ruleTxt,
-        enabled: true,
-        version: fwrule.generateVersion()
-    });
-
-    var raw = {
-        from: {
-            ips: [],
-            subnets: [],
-            vms: [],
-            tags: [],
-            wildcards: ['any']
-        },
-        to: {
-            ips: [],
-            subnets: [],
-            vms: [vm],
-            tags: [],
-            wildcards: []
-        },
-        enabled: true,
-        types: [ '8' ],
-        action: 'allow',
-        protocol: 'icmp',
-        uuid: rule.uuid,
-        version: rule.version
-    };
-
-    t.deepEqual(rule.raw(), raw, 'rule.raw()');
-    t.deepEqual(rule.from, raw.from, 'rule.from');
-    t.deepEqual(rule.to, raw.to, 'rule.to');
-    t.ok(!rule.allVMs, 'rule.allVMs');
-
-    t.deepEqual(rule.serialize(), {
-        enabled: true,
-        global: true,
-        rule: ruleTxt,
-        uuid: rule.uuid,
-        version: rule.version
-    }, 'rule.serialize()');
-
-    t.done();
-};
-
-
-exports['icmp with code'] = function (t) {
-    var vm = '8a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
-
-    var ruleTxt = util.format(
-        'FROM any TO vm %s ALLOW icmp TYPE 8 CODE 0', vm);
-
-    var rule = fwrule.create({
-        rule: ruleTxt,
-        enabled: true,
-        version: fwrule.generateVersion()
-    });
-
-    var raw = {
-        from: {
-            ips: [],
-            subnets: [],
-            vms: [],
-            tags: [],
-            wildcards: ['any']
-        },
-        to: {
-            ips: [],
-            subnets: [],
-            vms: [vm],
-            tags: [],
-            wildcards: []
-        },
-        enabled: true,
-        types: [ '8:0' ],
-        action: 'allow',
-        protocol: 'icmp',
-        uuid: rule.uuid,
-        version: rule.version
-    };
-
-    t.deepEqual(rule.raw(), raw, 'rule.raw()');
-    t.deepEqual(rule.from, raw.from, 'rule.from');
-    t.deepEqual(rule.to, raw.to, 'rule.to');
-    t.ok(!rule.allVMs, 'rule.allVMs');
-
-    t.deepEqual(rule.serialize(), {
-        enabled: true,
-        global: true,
-        rule: ruleTxt,
-        uuid: rule.uuid,
-        version: rule.version
-    }, 'rule.serialize()');
-
-    t.done();
-};
-
-
-exports['icmp: multiple types'] = function (t) {
-    var vm = '8a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
-
-    var ruleTxt = util.format(
-        'FROM any TO vm %s ALLOW icmp (TYPE 8 CODE 0 AND TYPE 11 CODE 0 '
-        + 'AND TYPE 30)', vm);
-
-    var rule = fwrule.create({
-        rule: ruleTxt,
-        enabled: true,
-        version: fwrule.generateVersion()
-    });
-
-    var raw = {
-        from: {
-            ips: [],
-            subnets: [],
-            vms: [],
-            tags: [],
-            wildcards: ['any']
-        },
-        to: {
-            ips: [],
-            subnets: [],
-            vms: [vm],
-            tags: [],
-            wildcards: []
-        },
-        enabled: true,
-        types: [ '8:0', '11:0', '30' ],
-        action: 'allow',
-        protocol: 'icmp',
-        uuid: rule.uuid,
-        version: rule.version
-    };
-
-    t.deepEqual(rule.raw(), raw, 'rule.raw()');
-    t.deepEqual(rule.from, raw.from, 'rule.from');
-    t.deepEqual(rule.to, raw.to, 'rule.to');
-    t.ok(!rule.allVMs, 'rule.allVMs');
-
-    t.deepEqual(rule.types, raw.types, 'rule.types');
-    t.deepEqual(rule.protoTargets, raw.types, 'rule.protoTargets');
-
-    t.deepEqual(rule.serialize(), {
-        enabled: true,
-        global: true,
-        rule: ruleTxt,
-        uuid: rule.uuid,
-        version: rule.version
-    }, 'rule.serialize()');
-
-    t.done();
-};
-
-
-exports['sorting: icmp codes'] = function (t) {
-    var vm = '8a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
-
-    var rule = fwrule.create({
-        rule: util.format(
-        'FROM any TO vm %s ALLOW icmp '
-        + '(TYPE 8 CODE 0 AND TYPE 3 CODE 11 AND TYPE 40 AND TYPE 3 CODE 1 '
-        + 'AND TYPE 30 AND TYPE 3 CODE 5)', vm),
-        enabled: true,
-        version: fwrule.generateVersion()
-    });
-
-    var raw = {
-        from: {
-            ips: [],
-            subnets: [],
-            vms: [],
-            tags: [],
-            wildcards: ['any']
-        },
-        to: {
-            ips: [],
-            subnets: [],
-            vms: [vm],
-            tags: [],
-            wildcards: []
-        },
-        enabled: true,
-        types: [ '3:1', '3:5', '3:11', '8:0', '30', '40' ],
-        action: 'allow',
-        protocol: 'icmp',
-        uuid: rule.uuid,
-        version: rule.version
-    };
-
-    t.deepEqual(rule.raw(), raw, 'rule.raw()');
-    t.deepEqual(rule.from, raw.from, 'rule.from');
-    t.deepEqual(rule.to, raw.to, 'rule.to');
-    t.ok(!rule.allVMs, 'rule.allVMs');
-
-    t.deepEqual(rule.serialize(), {
-        enabled: true,
-        global: true,
-        rule: util.format(
-        'FROM any TO vm %s ALLOW icmp '
-        + '(TYPE 3 CODE 1 AND TYPE 3 CODE 5 AND TYPE 3 CODE 11 '
-        + 'AND TYPE 8 CODE 0 AND TYPE 30 AND TYPE 40)', vm),
-        uuid: rule.uuid,
-        version: rule.version
-    }, 'rule.serialize()');
-
-    t.done();
-};
-
-exports['sorting: icmp6 codes'] = function (t) {
-    var vm = '8a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
-
-    var rule = fwrule.create({
-        rule: util.format(
-        'FROM any TO vm %s ALLOW icmp6 '
-        + '(TYPE 8 CODE 0 AND TYPE 3 CODE 11 AND TYPE 40 AND TYPE 3 CODE 1 '
-        + 'AND TYPE 30 AND TYPE 3 CODE 5)', vm),
-        enabled: true,
-        version: fwrule.generateVersion()
-    });
-
-    var raw = {
-        from: {
-            ips: [],
-            subnets: [],
-            vms: [],
-            tags: [],
-            wildcards: ['any']
-        },
-        to: {
-            ips: [],
-            subnets: [],
-            vms: [vm],
-            tags: [],
-            wildcards: []
-        },
-        enabled: true,
-        types: [ '3:1', '3:5', '3:11', '8:0', '30', '40' ],
-        action: 'allow',
-        protocol: 'icmp6',
-        uuid: rule.uuid,
-        version: rule.version
-    };
-
-    t.deepEqual(rule.raw(), raw, 'rule.raw()');
-    t.deepEqual(rule.from, raw.from, 'rule.from');
-    t.deepEqual(rule.to, raw.to, 'rule.to');
-    t.ok(!rule.allVMs, 'rule.allVMs');
-
-    t.deepEqual(rule.serialize(), {
-        enabled: true,
-        global: true,
-        rule: util.format(
-        'FROM any TO vm %s ALLOW icmp6 '
-        + '(TYPE 3 CODE 1 AND TYPE 3 CODE 5 AND TYPE 3 CODE 11 '
-        + 'AND TYPE 8 CODE 0 AND TYPE 30 AND TYPE 40)', vm),
-        uuid: rule.uuid,
-        version: rule.version
-    }, 'rule.serialize()');
-
-    t.done();
-};
-
-exports['sorting: ports'] = function (t) {
-    var inRule = {
-        rule: 'FROM ip 10.88.88.1 TO tag tag2 ALLOW tcp '
-            + '(PORT 1002 AND PORT 10 AND PORT 1052 AND PORT 80 AND PORT 30245 '
-            + 'AND PORT 6)',
-        enabled: true,
-        version: fwrule.generateVersion()
-    };
-
-    var rule = fwrule.create(inRule);
-    var raw = {
-        action: 'allow',
-        enabled: inRule.enabled,
-        from: {
-            ips: [ '10.88.88.1' ],
-            vms: [],
-            subnets: [],
-            tags: [],
-            wildcards: []
-        },
-        protocol: 'tcp',
-        ports: [ 6, 10, 80, 1002, 1052, 30245 ],
-        to: {
-            ips: [],
-            vms: [],
-            subnets: [],
-            tags: [ 'tag2' ],
-            wildcards: []
-        },
-        uuid: rule.uuid,
-        version: rule.version
-    };
-
-    t.deepEqual(rule.raw(), raw, 'rule.raw()');
-
-    t.deepEqual(rule.serialize(), {
-        enabled: true,
-        global: true,
-        rule: 'FROM ip 10.88.88.1 TO tag tag2 ALLOW tcp '
-            + '(PORT 6 AND PORT 10 AND PORT 80 AND PORT 1002 AND PORT 1052 '
-            + 'AND PORT 30245)',
-        uuid: rule.uuid,
-        version: rule.version
-    }, 'rule.serialize()');
-
-    t.done();
-};
-
-exports['sorting: port ranges'] = function (t) {
-    var inRule = {
-        rule: 'FROM ip 10.88.88.1 TO tag tag2 ALLOW tcp '
-            + 'PORTS 1002, 20-40, 10, 1052, 80, 30245, 6 - 11',
-        enabled: true,
-        version: fwrule.generateVersion()
-    };
-
-    var rule = fwrule.create(inRule);
-    var raw = {
-        action: 'allow',
-        enabled: inRule.enabled,
-        from: {
-            ips: [ '10.88.88.1' ],
-            vms: [],
-            subnets: [],
-            tags: [],
-            wildcards: []
-        },
-        protocol: 'tcp',
-        ports: [ { start: 6, end: 11 }, 10, { start: 20, end: 40 },
-            80, 1002, 1052, 30245 ],
-        to: {
-            ips: [],
-            vms: [],
-            subnets: [],
-            tags: [ 'tag2' ],
-            wildcards: []
-        },
-        uuid: rule.uuid,
-        version: rule.version
-    };
-
-    t.deepEqual(rule.raw(), raw, 'rule.raw()');
-    t.strictEqual(rule.raw().ports[0].start, raw.ports[0].start,
-        'Both starts are Numbers');
-    t.strictEqual(rule.raw().ports[0].end, raw.ports[0].end,
-        'Both ends are Numbers');
-
-    t.deepEqual(rule.serialize(), {
-        enabled: true,
-        global: true,
-        rule: 'FROM ip 10.88.88.1 TO tag tag2 ALLOW tcp '
-            + 'PORTS 6 - 11, 10, 20 - 40, 80, 1002, 1052, 30245',
-        uuid: rule.uuid,
-        version: rule.version
-    }, 'rule.serialize()');
-
-    t.done();
-};
-
-exports['single port range'] = function (t) {
-    var inRule = {
-        rule: 'FROM ip 10.88.88.1 TO tag tag2 ALLOW tcp '
-            + 'PORTS 50-50',
-        enabled: true,
-        version: fwrule.generateVersion()
-    };
-
-    var rule = fwrule.create(inRule);
-    var raw = {
-        action: 'allow',
-        enabled: inRule.enabled,
-        from: {
-            ips: [ '10.88.88.1' ],
-            vms: [],
-            subnets: [],
-            tags: [],
-            wildcards: []
-        },
-        protocol: 'tcp',
-        ports: [ { start: 50, end: 50 } ],
-        to: {
-            ips: [],
-            vms: [],
-            subnets: [],
-            tags: [ 'tag2' ],
-            wildcards: []
-        },
-        uuid: rule.uuid,
-        version: rule.version
-    };
-
-    t.deepEqual(rule.raw(), raw, 'rule.raw()');
-
-    t.deepEqual(rule.serialize(), {
-        enabled: true,
-        global: true,
-        rule: 'FROM ip 10.88.88.1 TO tag tag2 ALLOW tcp '
-            + 'PORTS 50 - 50',
-        uuid: rule.uuid,
-        version: rule.version
-    }, 'rule.serialize()');
-
-    t.done();
-};
-
-exports['port ALL'] = function (t) {
-    var normalText = 'FROM ip 10.88.88.1 TO tag tag2 ALLOW tcp PORT all';
-    var parenText = 'FROM ip 10.88.88.1 TO tag tag2 ALLOW tcp ( PORT all )';
-    var ruleTexts = [ normalText, parenText ];
-
-    ruleTexts.forEach(function (ruleText) {
-        var inRule = {
-            rule: ruleText,
-            enabled: true,
-            version: fwrule.generateVersion()
-        };
-
-        var rule = fwrule.create(inRule);
-        var raw = {
-            action: 'allow',
-            enabled: inRule.enabled,
-            from: {
-                ips: [ '10.88.88.1' ],
-                vms: [],
-                subnets: [],
-                tags: [],
-                wildcards: []
-            },
-            protocol: 'tcp',
-            ports: [ 'all' ],
-            to: {
-                ips: [],
-                vms: [],
-                subnets: [],
-                tags: [ 'tag2' ],
-                wildcards: []
-            },
-            uuid: rule.uuid,
-            version: rule.version
-        };
-
-        t.deepEqual(rule.raw(), raw, 'rule.raw()');
-        t.deepEqual(rule.ports, raw.ports, 'rule.ports');
-        t.deepEqual(rule.protoTargets, raw.ports, 'rule.protoTargets');
-
-        t.deepEqual(rule.serialize(), {
-            enabled: true,
-            global: true,
-            rule: normalText,
-            uuid: rule.uuid,
-            version: rule.version
-        }, 'rule.serialize()');
-    });
-
-    t.done();
-};
-
-
-exports['tags: equal'] = function (t) {
-    var ruleTxt =
-        'FROM ip 1.2.3.4 TO tag some-tag = value ALLOW tcp PORT 80';
-    var rule = new fwrule.create({
-        rule: ruleTxt,
-        version: fwrule.generateVersion()
-    });
-
-    var raw = {
-        action: 'allow',
-        enabled: false,
-        from: {
-            ips: [ '1.2.3.4' ],
-            vms: [],
-            subnets: [],
-            tags: [],
-            wildcards: []
-        },
-        protocol: 'tcp',
-        ports: [ 80 ],
-        to: {
-            ips: [],
-            vms: [],
-            subnets: [],
-            tags: [ [ 'some-tag', 'value' ] ],
-            wildcards: []
-        },
-        uuid: rule.uuid,
-        version: rule.version
-    };
-    t.deepEqual(rule.raw(), raw, 'rule.raw()');
-
-    t.deepEqual(rule.serialize(), {
-        enabled: false,
-        global: true,
-        rule: ruleTxt,
-        uuid: rule.uuid,
-        version: rule.version
-    }, 'rule.serialize()');
-
-    t.ok(!rule.allVMs, 'rule.allVMs');
-    t.deepEqual(rule.tags, raw.to.tags, 'rule.tags');
-
-    t.done();
-};
-
-
-exports['multiple tags: equal'] = function (t) {
-    var ruleTxt = 'FROM ip 1.2.3.4 TO '
-        + '(tag some-tag = value OR tag some-tag = value2) ALLOW tcp PORT 80';
-    var rule = new fwrule.create({
-        rule: ruleTxt,
-        version: fwrule.generateVersion()
-    });
-
-    var raw = {
-        action: 'allow',
-        enabled: false,
-        from: {
-            ips: [ '1.2.3.4' ],
-            vms: [],
-            subnets: [],
-            tags: [],
-            wildcards: []
-        },
-        protocol: 'tcp',
-        ports: [ 80 ],
-        to: {
-            ips: [],
-            vms: [],
-            subnets: [],
-            tags: [
-                [ 'some-tag', 'value' ],
-                [ 'some-tag', 'value2' ]
-            ],
-            wildcards: []
-        },
-        uuid: rule.uuid,
-        version: rule.version
-    };
-    t.deepEqual(rule.raw(), raw, 'rule.raw()');
-
-    t.deepEqual(rule.serialize(), {
-        enabled: false,
-        global: true,
-        rule: ruleTxt,
-        uuid: rule.uuid,
-        version: rule.version
-    }, 'rule.serialize()');
-
-    t.ok(!rule.allVMs, 'rule.allVMs');
-    t.deepEqual(rule.tags, raw.to.tags, 'rule.tags');
-
-    t.done();
-};
-
-
-exports['multiple tags: multiple values'] = function (t) {
-    var rule = new fwrule.create({
-        rule: 'FROM (tag some-tag OR tag some-tag = value0) TO '
-            + '(tag some-tag = value OR tag some-tag = value2) '
-            + 'ALLOW tcp PORT 80',
-        version: fwrule.generateVersion()
-    });
-
-    var raw = {
-        action: 'allow',
-        enabled: false,
-        from: {
-            ips: [],
-            vms: [],
-            subnets: [],
-            tags: [ 'some-tag' ],
-            wildcards: []
-        },
-        protocol: 'tcp',
-        ports: [ 80 ],
-        to: {
-            ips: [],
-            vms: [],
-            subnets: [],
-            tags: [
-                [ 'some-tag', 'value' ],
-                [ 'some-tag', 'value2' ]
-            ],
-            wildcards: []
-        },
-        uuid: rule.uuid,
-        version: rule.version
-    };
-    t.deepEqual(rule.raw(), raw, 'rule.raw()');
-
-    t.deepEqual(rule.serialize(), {
-        enabled: false,
-        global: true,
-        // 'some-tag = value0' is a subset of 'tag some-tag', so it is not
-        // included in the rule text
-        rule: 'FROM tag some-tag TO '
-            + '(tag some-tag = value OR tag some-tag = value2) '
-            + 'ALLOW tcp PORT 80',
-        uuid: rule.uuid,
-        version: rule.version
-    }, 'rule.serialize()');
-
-    t.ok(!rule.allVMs, 'rule.allVMs');
-    t.deepEqual(rule.tags, raw.from.tags, 'rule.tags');
-
-    t.done();
-};
-
-
-exports['multiple tags: multiple quoted values'] = function (t) {
-    var owner = 'ace1da4b-9ab2-4991-8298-700bec1b70ed';
-    var rule = new fwrule.create({
-        owner_uuid: owner,
-        rule: 'FROM '
-            + '(tag "김치" = "백김치" '
-            + 'OR tag "김치" = "白김치") TO '
-            + '(tag "some tag" = value '
-            + 'OR tag some-tag = "another value") '
-            + 'ALLOW tcp PORT 80',
-        version: fwrule.generateVersion()
-    });
-
-    var raw = {
-        action: 'allow',
-        enabled: false,
-        from: {
-            ips: [],
-            vms: [],
-            subnets: [],
-            tags: [
-                [ '김치', '白김치' ],
-                [ '김치', '백김치' ]
-            ],
-            wildcards: []
-        },
-        owner_uuid: owner,
-        protocol: 'tcp',
-        ports: [ 80 ],
-        to: {
-            ips: [],
-            vms: [],
-            subnets: [],
-            tags: [
-                [ 'some tag', 'value' ],
-                [ 'some-tag', 'another value' ]
-            ],
-            wildcards: []
-        },
-        uuid: rule.uuid,
-        version: rule.version
-    };
-    t.deepEqual(rule.raw(), raw, 'rule.raw()');
-
-    t.deepEqual(rule.serialize(), {
-        enabled: false,
-        owner_uuid: owner,
-        rule: 'FROM (tag "김치" = "白김치" '
-            + 'OR tag "김치" = "백김치") TO '
-            + '(tag "some tag" = value OR tag some-tag = "another value") '
-            + 'ALLOW tcp PORT 80',
-        uuid: rule.uuid,
-        version: rule.version
-    }, 'rule.serialize()');
-
-    t.ok(!rule.allVMs, 'rule.allVMs');
-    t.deepEqual(rule.tags, [
-                [ 'some tag', 'value' ],
-                [ 'some-tag', 'another value' ],
-                [ '김치', '白김치' ],
-                [ '김치', '백김치' ]
-        ], 'rule.tags');
-
-    t.done();
-};
-
-
-exports['IPv6 sources'] = function (t) {
-    var desc = 'IPv6 sources';
-    var vm = '9a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
-    var ips = ['fd00::2', 'fe80::8:20ff:fe40:65e4'];
-    var ruleTxt = util.format('FROM (ip %s OR ip %s) ', ips[0], ips[1])
-        + util.format('TO vm %s ALLOW tcp PORT 80', vm);
-
-    var rule = fwrule.create({
-        rule: ruleTxt,
-        created_by: 'fwadm',
-        description: desc,
-        enabled: true,
-        version: fwrule.generateVersion()
-    });
-
-    var raw = {
-        from: {
-            ips: ips,
-            subnets: [],
-            vms: [],
-            tags: [],
-            wildcards: []
-        },
-        to: {
-            ips: [],
-            subnets: [],
-            vms: [vm],
-            tags: [],
-            wildcards: []
-        },
-        created_by: 'fwadm',
-        description: desc,
-        enabled: true,
-        ports: [ 80 ],
-        action: 'allow',
-        protocol: 'tcp',
-        uuid: rule.uuid,
-        version: rule.version
-    };
-
-    t.deepEqual(rule.raw(), raw, 'rule.raw()');
-    t.deepEqual(rule.from, raw.from, 'rule.from');
-    t.deepEqual(rule.to, raw.to, 'rule.to');
-    t.ok(!rule.allVMs, 'rule.allVMs');
-
-    var ser = {
-        created_by: 'fwadm',
-        description: desc,
-        enabled: true,
-        global: true,
-        rule: ruleTxt,
-        uuid: rule.uuid,
-        version: rule.version
-    };
-
-    t.deepEqual(rule.serialize(), ser, 'rule.serialize()');
-    t.deepEqual(rule.serialize(['enabled', 'version']),
-        { enabled: ser.enabled, version: ser.version },
-        'rule.serialize(): enabled, version');
-
-    t.done();
-};
-
-exports['IPv6 subnet sources'] = function (t) {
-    var desc = 'IPv6 subnet sources';
-    var vm = '9a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
-    var cidr = 'fd00::/64';
-    var ruleTxt = util.format('FROM subnet %s ', cidr)
-        + util.format('TO vm %s ALLOW tcp PORT 80', vm);
-
-    var rule = fwrule.create({
-        rule: ruleTxt,
-        created_by: 'fwadm',
-        description: desc,
-        enabled: true,
-        version: fwrule.generateVersion()
-    });
-
-    var raw = {
-        from: {
-            ips: [],
-            subnets: [cidr],
-            vms: [],
-            tags: [],
-            wildcards: []
-        },
-        to: {
-            ips: [],
-            subnets: [],
-            vms: [vm],
-            tags: [],
-            wildcards: []
-        },
-        created_by: 'fwadm',
-        description: desc,
-        enabled: true,
-        ports: [ 80 ],
-        action: 'allow',
-        protocol: 'tcp',
-        uuid: rule.uuid,
-        version: rule.version
-    };
-
-    t.deepEqual(rule.raw(), raw, 'rule.raw()');
-    t.deepEqual(rule.from, raw.from, 'rule.from');
-    t.deepEqual(rule.to, raw.to, 'rule.to');
-    t.ok(!rule.allVMs, 'rule.allVMs');
-
-    var ser = {
-        created_by: 'fwadm',
-        description: desc,
-        enabled: true,
-        global: true,
-        rule: ruleTxt,
-        uuid: rule.uuid,
-        version: rule.version
-    };
-
-    t.deepEqual(rule.serialize(), ser, 'rule.serialize()');
-    t.deepEqual(rule.serialize(['enabled', 'version']),
-        { enabled: ser.enabled, version: ser.version },
-        'rule.serialize(): enabled, version');
-
-    t.done();
-};
-
-exports['IPv6 destinations'] = function (t) {
-    var desc = 'IPv6 destinations';
-    var vm = '9a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
-    var ips = ['fd00::1', 'fd00::2'];
-    var ruleTxt = util.format('FROM vm %s ', vm)
-        + util.format('TO (ip %s OR ip %s) ALLOW tcp PORT 80', ips[0], ips[1]);
-
-    var rule = fwrule.create({
-        rule: ruleTxt,
-        created_by: 'fwadm',
-        description: desc,
-        enabled: true,
-        version: fwrule.generateVersion()
-    });
-
-    var raw = {
-        from: {
-            ips: [],
-            subnets: [],
-            vms: [vm],
-            tags: [],
-            wildcards: []
-        },
-        to: {
-            ips: ips,
-            subnets: [],
-            vms: [],
-            tags: [],
-            wildcards: []
-        },
-        created_by: 'fwadm',
-        description: desc,
-        enabled: true,
-        ports: [ 80 ],
-        action: 'allow',
-        protocol: 'tcp',
-        uuid: rule.uuid,
-        version: rule.version
-    };
-
-    t.deepEqual(rule.raw(), raw, 'rule.raw()');
-    t.deepEqual(rule.from, raw.from, 'rule.from');
-    t.deepEqual(rule.to, raw.to, 'rule.to');
-    t.ok(!rule.allVMs, 'rule.allVMs');
-
-    var ser = {
-        created_by: 'fwadm',
-        description: desc,
-        enabled: true,
-        global: true,
-        rule: ruleTxt,
-        uuid: rule.uuid,
-        version: rule.version
-    };
-
-    t.deepEqual(rule.serialize(), ser, 'rule.serialize()');
-    t.deepEqual(rule.serialize(['enabled', 'version']),
-        { enabled: ser.enabled, version: ser.version },
-        'rule.serialize(): enabled, version');
-
-    t.done();
-};
-
-exports['IPv6 subnet destinations'] = function (t) {
-    var desc = 'IPv6 subnet destinations';
-    var vm = '9a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
-    var cidr = 'fd00::/64';
-    var ruleTxt = util.format('FROM vm %s ', vm)
-        + util.format('TO subnet %s BLOCK tcp PORT 80', cidr);
-
-    var rule = fwrule.create({
-        rule: ruleTxt,
-        created_by: 'fwadm',
-        description: desc,
-        enabled: true,
-        version: fwrule.generateVersion()
-    });
-
-    var raw = {
-        from: {
-            ips: [],
-            subnets: [],
-            vms: [vm],
-            tags: [],
-            wildcards: []
-        },
-        to: {
-            ips: [],
-            subnets: [cidr],
-            vms: [],
-            tags: [],
-            wildcards: []
-        },
-        created_by: 'fwadm',
-        description: desc,
-        enabled: true,
-        ports: [ 80 ],
-        action: 'block',
-        protocol: 'tcp',
-        uuid: rule.uuid,
-        version: rule.version
-    };
-
-    t.deepEqual(rule.raw(), raw, 'rule.raw()');
-    t.deepEqual(rule.from, raw.from, 'rule.from');
-    t.deepEqual(rule.to, raw.to, 'rule.to');
-    t.ok(!rule.allVMs, 'rule.allVMs');
-
-    var ser = {
-        created_by: 'fwadm',
-        description: desc,
-        enabled: true,
-        global: true,
-        rule: ruleTxt,
-        uuid: rule.uuid,
-        version: rule.version
-    };
-
-    t.deepEqual(rule.serialize(), ser, 'rule.serialize()');
-    t.deepEqual(rule.serialize(['enabled', 'version']),
-        { enabled: ser.enabled, version: ser.version },
-        'rule.serialize(): enabled, version');
-
-    t.done();
-};
-
-exports['Mixed IPv4 and IPv6'] = function (t) {
-    var desc = 'Mixed IPv4 and IPv6';
-    var vm1 = '9a343ca8-b42a-4a27-a9c5-800f57d1e8ed';
-    var vm2 = '518908b6-8299-466d-8ea5-20a0ceff63ec';
-    var ips = ['10.10.10.5', 'fd00::1'];
-    var ruleTxt =
-        util.format('FROM (ip %s OR ip %s OR vm %s) ', ips[0], ips[1], vm1)
-        + util.format('TO vm %s ALLOW tcp PORT 80', vm2);
-
-    var rule = fwrule.create({
-        rule: ruleTxt,
-        created_by: 'fwadm',
-        description: desc,
-        enabled: true,
-        version: fwrule.generateVersion()
-    });
-
-    var raw = {
-        from: {
-            ips: ips,
-            subnets: [],
-            vms: [vm1],
-            tags: [],
-            wildcards: []
-        },
-        to: {
-            ips: [],
-            subnets: [],
-            vms: [vm2],
-            tags: [],
-            wildcards: []
-        },
-        created_by: 'fwadm',
-        description: desc,
-        enabled: true,
-        ports: [ 80 ],
-        action: 'allow',
-        protocol: 'tcp',
-        uuid: rule.uuid,
-        version: rule.version
-    };
-
-    t.deepEqual(rule.raw(), raw, 'rule.raw()');
-    t.deepEqual(rule.from, raw.from, 'rule.from');
-    t.deepEqual(rule.to, raw.to, 'rule.to');
-    t.ok(!rule.allVMs, 'rule.allVMs');
-
-    var ser = {
-        created_by: 'fwadm',
-        description: desc,
-        enabled: true,
-        global: true,
-        rule: ruleTxt,
-        uuid: rule.uuid,
-        version: rule.version
-    };
-
-    t.deepEqual(rule.serialize(), ser, 'rule.serialize()');
-    t.deepEqual(rule.serialize(['enabled', 'version']),
-        { enabled: ser.enabled, version: ser.version },
-        'rule.serialize(): enabled, version');
-
-    t.done();
-};
-
-
-
-// Use to run only one test in this file:
-if (runOne) {
-    module.exports = {
-        oneTest: runOne
-    };
-}
diff --git a/node_modules/fw/tools/fwrule/test/validators.test.js b/node_modules/fw/tools/fwrule/test/validators.test.js
deleted file mode 100644
index d86d319..0000000
--- a/node_modules/fw/tools/fwrule/test/validators.test.js
+++ /dev/null
@@ -1,154 +0,0 @@
-/*
- * CDDL HEADER START
- *
- * The contents of this file are subject to the terms of the
- * Common Development and Distribution License, Version 1.0 only
- * (the "License").  You may not use this file except in compliance
- * with the License.
- *
- * You can obtain a copy of the license at http://smartos.org/CDDL
- *
- * See the License for the specific language governing permissions
- * and limitations under the License.
- *
- * When distributing Covered Code, include this CDDL HEADER in each
- * file.
- *
- * If applicable, add the following below this CDDL HEADER, with the
- * fields enclosed by brackets "[]" replaced with your own identifying
- * information: Portions Copyright [yyyy] [name of copyright owner]
- *
- * CDDL HEADER END
- *
- * Copyright (c) 2015, Joyent, Inc. All rights reserved.
- *
- */
-
-/*
- * Unit tests for the firewall rule validators
- */
-
-var validator = require('../lib/validators.js');
-
-
-
-// --- Globals
-
-
-
-var IS_NODE_08 = (process.version.indexOf('v0.8') === 0);
-
-
-
-// --- Tests
-
-
-
-exports['IPv4 addresses'] = function (t) {
-    var i;
-    var valid = [
-        '1.2.3.4',
-        '1.0.0.0'
-    ];
-
-    var invalid = [
-        '1',
-        'asdf',
-        '0.0.0.0',
-        '255.255.255.255',
-        '256.0.0.1'
-    ];
-
-    if (IS_NODE_08) {
-        // net.isIPv4 thinks this is valid in node 0.8:
-        valid.push('01.02.03.04');
-    } else {
-        invalid.push('01.02.03.04');
-    }
-
-    for (i in valid) {
-        t.ok(validator.validateIPv4address(valid[i]), valid[i]);
-    }
-
-    for (i in invalid) {
-        t.ok(!validator.validateIPv4address(invalid[i]), invalid[i]);
-    }
-
-    t.done();
-};
-
-
-exports['IPv4 subnets'] = function (t) {
-    var i;
-    var valid = [
-        '1.2.3.4/24',
-        '1.0.0.0/32',
-        '10.88.88.24/32',
-        '10.88.88.24/1'
-    ];
-
-    var invalid = [
-        '1',
-        'asdf',
-        '0.0.0.0/32',
-        '1.0.0.0/33',
-        '1.0.0.0/0'
-    ];
-
-    if (IS_NODE_08) {
-        // net.isIPv4 thinks this is valid in node 0.8:
-        valid.push('01.02.03.04/24');
-    } else {
-        invalid.push('01.02.03.04/24');
-    }
-
-    for (i in valid) {
-        t.ok(validator.validateIPv4subnet(valid[i]), 'valid: ' + valid[i]);
-    }
-
-    for (i in invalid) {
-        t.ok(!validator.validateIPv4subnet(invalid[i]),
-            'invalid: ' + invalid[i]);
-    }
-
-    t.done();
-};
-
-
-exports['ports'] = function (t) {
-    var i;
-    var valid = [
-        1,
-        20,
-        200,
-        2000,
-        65535,
-        '1',
-        '65535',
-        'all',
-        'All',
-        'ALL'
-    ];
-
-    var invalid = [
-        0,
-        {},
-        65536,
-        '65536',
-        '',
-        [],
-        -1,
-        'something'
-    ];
-
-    for (i in valid) {
-        t.ok(validator.validatePortOrAll(valid[i]), 'valid: ' + valid[i]);
-    }
-
-    for (i in invalid) {
-        t.ok(!validator.validatePortOrAll(invalid[i]),
-            'invalid: ' + invalid[i]);
-    }
-
-    return t.done();
-};
diff --git a/node_modules/fw/tools/fwrule/tools/jsl.node.conf b/node_modules/fw/tools/fwrule/tools/jsl.node.conf
deleted file mode 100644
index 0b8ae95..0000000
--- a/node_modules/fw/tools/fwrule/tools/jsl.node.conf
+++ /dev/null
@@ -1,138 +0,0 @@
-#
-# Configuration File for JavaScript Lint 
-#
-# This configuration file can be used to lint a collection of scripts, or to enable
-# or disable warnings for scripts that are linted via the command line.
-#
-
-### Warnings
-# Enable or disable warnings based on requirements.
-# Use "+WarningName" to display or "-WarningName" to suppress.
-#
-+ambiguous_else_stmt          # the else statement could be matched with one of multiple if statements (use curly braces to indicate intent
-+ambiguous_nested_stmt        # block statements containing block statements should use curly braces to resolve ambiguity
-+ambiguous_newline            # unexpected end of line; it is ambiguous whether these lines are part of the same statement
-+anon_no_return_value         # anonymous function does not always return value
-+assign_to_function_call      # assignment to a function call
--block_without_braces         # block statement without curly braces
-+comma_separated_stmts        # multiple statements separated by commas (use semicolons?)
-+comparison_type_conv         # comparisons against null, 0, true, false, or an empty string allowing implicit type conversion (use === or !==)
-+default_not_at_end           # the default case is not at the end of the switch statement
-+dup_option_explicit          # duplicate "option explicit" control comment
-+duplicate_case_in_switch     # duplicate case in switch statement
-+duplicate_formal             # duplicate formal argument {name}
-+empty_statement              # empty statement or extra semicolon
-+identifier_hides_another     # identifer {name} hides an identifier in a parent scope
--inc_dec_within_stmt          # increment (++) and decrement (--) operators used as part of greater statement
-+incorrect_version            # Expected /*jsl:content-type*/ control comment. The script was parsed with the wrong version.
-+invalid_fallthru             # unexpected "fallthru" control comment
-+invalid_pass                 # unexpected "pass" control comment
-+jsl_cc_not_understood        # couldn't understand control comment using /*jsl:keyword*/ syntax
-+leading_decimal_point        # leading decimal point may indicate a number or an object member
-+legacy_cc_not_understood     # couldn't understand control comment using /*@keyword@*/ syntax
-+meaningless_block            # meaningless block; curly braces have no impact
-+mismatch_ctrl_comments       # mismatched control comment; "ignore" and "end" control comments must have a one-to-one correspondence
-+misplaced_regex              # regular expressions should be preceded by a left parenthesis, assignment, colon, or comma
-+missing_break                # missing break statement
-+missing_break_for_last_case  # missing break statement for last case in switch
-+missing_default_case         # missing default case in switch statement
-+missing_option_explicit      # the "option explicit" control comment is missing
-+missing_semicolon            # missing semicolon
-+missing_semicolon_for_lambda # missing semicolon for lambda assignment
-+multiple_plus_minus          # unknown order of operations for successive plus (e.g. x+++y) or minus (e.g. x---y) signs
-+nested_comment               # nested comment
-+no_return_value              # function {name} does not always return a value
-+octal_number                 # leading zeros make an octal number
-+parseint_missing_radix       # parseInt missing radix parameter
-+partial_option_explicit      # the "option explicit" control comment, if used, must be in the first script tag
-+redeclared_var               # redeclaration of {name}
-+trailing_comma_in_array      # extra comma is not recommended in array initializers
-+trailing_decimal_point       # trailing decimal point may indicate a number or an object member
-+undeclared_identifier        # undeclared identifier: {name}
-+unreachable_code             # unreachable code
--unreferenced_argument        # argument declared but never referenced: {name}
--unreferenced_function        # function is declared but never referenced: {name}
-+unreferenced_variable        # variable is declared but never referenced: {name}
-+unsupported_version          # JavaScript {version} is not supported
-+use_of_label                 # use of label
-+useless_assign               # useless assignment
-+useless_comparison           # useless comparison; comparing identical expressions
--useless_quotes               # the quotation marks are unnecessary
-+useless_void                 # use of the void type may be unnecessary (void is always undefined)
-+var_hides_arg                # variable {name} hides argument
-+want_assign_or_call          # expected an assignment or function call
-+with_statement               # with statement hides undeclared variables; use temporary variable instead
-
-
-### Output format
-# Customize the format of the error message.
-#    __FILE__ indicates current file path
-#    __FILENAME__ indicates current file name
-#    __LINE__ indicates current line
-#    __COL__ indicates current column
-#    __ERROR__ indicates error message (__ERROR_PREFIX__: __ERROR_MSG__)
-#    __ERROR_NAME__ indicates error name (used in configuration file)
-#    __ERROR_PREFIX__ indicates error prefix
-#    __ERROR_MSG__ indicates error message
-#
-# For machine-friendly output, the output format can be prefixed with
-# "encode:". If specified, all items will be encoded with C-slashes.
-#
-# Visual Studio syntax (default):
-+output-format __FILE__(__LINE__): __ERROR__
-# Alternative syntax:
-#+output-format __FILE__:__LINE__: __ERROR__
-
-
-### Context
-# Show the in-line position of the error.
-# Use "+context" to display or "-context" to suppress.
-#
-+context
-
-
-### Control Comments
-# Both JavaScript Lint and the JScript interpreter confuse each other with the syntax for
-# the /*@keyword@*/ control comments and JScript conditional comments. (The latter is
-# enabled in JScript with @cc_on@). The /*jsl:keyword*/ syntax is preferred for this reason,
-# although legacy control comments are enabled by default for backward compatibility.
-#
--legacy_control_comments
-
-
-### Defining identifiers
-# By default, "option explicit" is enabled on a per-file basis.
-# To enable this for all files, use "+always_use_option_explicit"
--always_use_option_explicit
-
-# Define certain identifiers of which the lint is not aware.
-# (Use this in conjunction with the "undeclared identifier" warning.)
-#
-# Common uses for webpages might be:
-+define __dirname
-+define clearInterval
-+define clearTimeout
-+define console
-+define exports
-+define global
-+define module
-+define process
-+define require
-+define setInterval
-+define setTimeout
-+define Buffer
-+define JSON
-+define Math
-
-### JavaScript Version
-# To change the default JavaScript version:
-#+default-type text/javascript;version=1.5
-#+default-type text/javascript;e4x=1
-
-### Files
-# Specify which files to lint
-# Use "+recurse" to enable recursion (disabled by default).
-# To add a set of files, use "+process FileName", "+process Folder\Path\*.js",
-# or "+process Folder\Path\*.htm".
-#
-
diff --git a/node_modules/fw/tools/jsl.node.conf b/node_modules/fw/tools/jsl.node.conf
deleted file mode 100644
index 0b8e8ea..0000000
--- a/node_modules/fw/tools/jsl.node.conf
+++ /dev/null
@@ -1,138 +0,0 @@
-#
-# Configuration File for JavaScript Lint
-#
-# This configuration file can be used to lint a collection of scripts, or to enable
-# or disable warnings for scripts that are linted via the command line.
-#
-
-### Warnings
-# Enable or disable warnings based on requirements.
-# Use "+WarningName" to display or "-WarningName" to suppress.
-#
-+ambiguous_else_stmt          # the else statement could be matched with one of multiple if statements (use curly braces to indicate intent
-+ambiguous_nested_stmt        # block statements containing block statements should use curly braces to resolve ambiguity
-+ambiguous_newline            # unexpected end of line; it is ambiguous whether these lines are part of the same statement
--anon_no_return_value         # anonymous function does not always return value
-+assign_to_function_call      # assignment to a function call
--block_without_braces         # block statement without curly braces
-+comma_separated_stmts        # multiple statements separated by commas (use semicolons?)
-+comparison_type_conv         # comparisons against null, 0, true, false, or an empty string allowing implicit type conversion (use === or !==)
-+default_not_at_end           # the default case is not at the end of the switch statement
-+dup_option_explicit          # duplicate "option explicit" control comment
-+duplicate_case_in_switch     # duplicate case in switch statement
-+duplicate_formal             # duplicate formal argument {name}
-+empty_statement              # empty statement or extra semicolon
-+identifier_hides_another     # identifer {name} hides an identifier in a parent scope
--inc_dec_within_stmt          # increment (++) and decrement (--) operators used as part of greater statement
-+incorrect_version            # Expected /*jsl:content-type*/ control comment. The script was parsed with the wrong version.
-+invalid_fallthru             # unexpected "fallthru" control comment
-+invalid_pass                 # unexpected "pass" control comment
-+jsl_cc_not_understood        # couldn't understand control comment using /*jsl:keyword*/ syntax
-+leading_decimal_point        # leading decimal point may indicate a number or an object member
-+legacy_cc_not_understood     # couldn't understand control comment using /*@keyword@*/ syntax
-+meaningless_block            # meaningless block; curly braces have no impact
-+mismatch_ctrl_comments       # mismatched control comment; "ignore" and "end" control comments must have a one-to-one correspondence
-+misplaced_regex              # regular expressions should be preceded by a left parenthesis, assignment, colon, or comma
-+missing_break                # missing break statement
-+missing_break_for_last_case  # missing break statement for last case in switch
-+missing_default_case         # missing default case in switch statement
-+missing_option_explicit      # the "option explicit" control comment is missing
-+missing_semicolon            # missing semicolon
-+missing_semicolon_for_lambda # missing semicolon for lambda assignment
-+multiple_plus_minus          # unknown order of operations for successive plus (e.g. x+++y) or minus (e.g. x---y) signs
-+nested_comment               # nested comment
--no_return_value              # function {name} does not always return a value
-+octal_number                 # leading zeros make an octal number
-+parseint_missing_radix       # parseInt missing radix parameter
-+partial_option_explicit      # the "option explicit" control comment, if used, must be in the first script tag
-+redeclared_var               # redeclaration of {name}
-+trailing_comma_in_array      # extra comma is not recommended in array initializers
-+trailing_decimal_point       # trailing decimal point may indicate a number or an object member
-+undeclared_identifier        # undeclared identifier: {name}
-+unreachable_code             # unreachable code
--unreferenced_argument        # argument declared but never referenced: {name}
--unreferenced_function        # function is declared but never referenced: {name}
-+unreferenced_variable        # variable is declared but never referenced: {name}
-+unsupported_version          # JavaScript {version} is not supported
-+use_of_label                 # use of label
-+useless_assign               # useless assignment
-+useless_comparison           # useless comparison; comparing identical expressions
--useless_quotes               # the quotation marks are unnecessary
-+useless_void                 # use of the void type may be unnecessary (void is always undefined)
-+var_hides_arg                # variable {name} hides argument
-+want_assign_or_call          # expected an assignment or function call
-+with_statement               # with statement hides undeclared variables; use temporary variable instead
-
-
-### Output format
-# Customize the format of the error message.
-#    __FILE__ indicates current file path
-#    __FILENAME__ indicates current file name
-#    __LINE__ indicates current line
-#    __COL__ indicates current column
-#    __ERROR__ indicates error message (__ERROR_PREFIX__: __ERROR_MSG__)
-#    __ERROR_NAME__ indicates error name (used in configuration file)
-#    __ERROR_PREFIX__ indicates error prefix
-#    __ERROR_MSG__ indicates error message
-#
-# For machine-friendly output, the output format can be prefixed with
-# "encode:". If specified, all items will be encoded with C-slashes.
-#
-# Visual Studio syntax (default):
-+output-format __FILE__(__LINE__): __ERROR__
-# Alternative syntax:
-#+output-format __FILE__:__LINE__: __ERROR__
-
-
-### Context
-# Show the in-line position of the error.
-# Use "+context" to display or "-context" to suppress.
-#
-+context
-
-
-### Control Comments
-# Both JavaScript Lint and the JScript interpreter confuse each other with the syntax for
-# the /*@keyword@*/ control comments and JScript conditional comments. (The latter is
-# enabled in JScript with @cc_on@). The /*jsl:keyword*/ syntax is preferred for this reason,
-# although legacy control comments are enabled by default for backward compatibility.
-#
--legacy_control_comments
-
-
-### Defining identifiers
-# By default, "option explicit" is enabled on a per-file basis.
-# To enable this for all files, use "+always_use_option_explicit"
--always_use_option_explicit
-
-# Define certain identifiers of which the lint is not aware.
-# (Use this in conjunction with the "undeclared identifier" warning.)
-#
-# Common uses for webpages might be:
-+define __dirname
-+define clearInterval
-+define clearTimeout
-+define console
-+define exports
-+define global
-+define module
-+define process
-+define require
-+define setInterval
-+define setTimeout
-+define Buffer
-+define JSON
-+define Math
-
-### JavaScript Version
-# To change the default JavaScript version:
-#+default-type text/javascript;version=1.5
-#+default-type text/javascript;e4x=1
-
-### Files
-# Specify which files to lint
-# Use "+recurse" to enable recursion (disabled by default).
-# To add a set of files, use "+process FileName", "+process Folder\Path\*.js",
-# or "+process Folder\Path\*.htm".
-#
-
diff --git a/node_modules/fw/tools/ramsey/bin/ramsey b/node_modules/fw/tools/ramsey/bin/ramsey
deleted file mode 100755
index 1aaae64..0000000
--- a/node_modules/fw/tools/ramsey/bin/ramsey
+++ /dev/null
@@ -1,104 +0,0 @@
-#!/usr/bin/env node
-
-/*
- * Copyright (c) 2014 Rob Gulewich. All rights reserved.
- *
- * Ramsey: the suburban commando for templating your text files
- */
-
-var dashdash = require('dashdash');
-var template = require('../lib/template');
-
-
-
-// --- Globals
-
-
-
-var OPTIONS = [
-    {
-        names: ['dir', 'd'],
-        type: 'string',
-        help: 'directory of input files'
-    },
-    {
-        names: ['file', 'f'],
-        type: 'string',
-        help: 'JSON input file'
-    },
-    {
-        names: ['param', 'p'],
-        type: 'arrayOfString',
-        help: 'parameter(s) that control template rendering'
-    }
-];
-
-
-
-// --- Main
-
-
-function usage(msg) {
-    var text = [
-        'ramsey [-d <template directory>] [-f <JSON file>] ' +
-        '<input file> <output file>'
-    ];
-
-    if (msg) {
-        text.unshift(msg);
-    }
-
-    console.error(text.join('\n'));
-    process.exit(1);
-}
-
-
-
-// --- Main
-
-
-
-var opts;
-var params = {};
-var parser = dashdash.createParser({ options: OPTIONS });
-
-try {
-    opts = parser.parse(process.argv);
-} catch (e) {
-    console.error('error: %s', e.message);
-    process.exit(1);
-}
-
-// console.log(JSON.stringify(opts, null, 2));
-
-if (opts._args.length === 0) {
-    usage('Must specify input file!');
-}
-
-if (opts.hasOwnProperty('param')) {
-    opts.param.forEach(function (p) {
-        var parts = p.split('=', 2);
-        if (parts.length != 2) {
-            usage('Invalid parameter: ' + p);
-        }
-
-        params[parts[0]] = parts[1];
-    });
-}
-
-// console.log(JSON.stringify(params, null, 2));
-
-if (params.hasOwnProperty('wrap')) {
-    params.wrap = Number(params.wrap);
-    if (isNaN(params.wrap)) {
-        usage('wrap parameter must be a number!');
-    }
-}
-
-template.generateFile({
-    dir: opts.dir,
-    file: opts.file,
-    inFile: opts._args[0],
-    outFile: opts._args[1],
-    params: params
-});
diff --git a/node_modules/fw/tools/ramsey/lib/template.js b/node_modules/fw/tools/ramsey/lib/template.js
deleted file mode 100644
index 53d2936..0000000
--- a/node_modules/fw/tools/ramsey/lib/template.js
+++ /dev/null
@@ -1,183 +0,0 @@
-/*
- * Copyright (c) 2014 Robert Gulewich. All rights reserved.
- *
- * Template generation
- */
-
-var fs = require('fs');
-var hogan = require('hogan.js');
-var path = require('path');
-var util = require('util');
-
-
-
-// --- Globals
-
-
-
-// configurable with -p wrap=<number>:
-var WRAP_LIMIT = 80;
-
-
-
-// --- Internal
-
-
-
-/**
- * Indent lines and optionall wrap them at 80 characters
- */
-function doIndent(sectionText, wrap) {
-    // Remove the initial newline
-    var text = sectionText.replace(/^\n/, '');
-    var initialIndent = getIndent(text);
-
-    // For variables that have newlines in them, we need to indent each
-    // line in that variable the initial amount
-    var templateVars = {};
-    for (var v in this) {
-        if (typeof (this[v]) === 'string') {
-            templateVars[v] = this[v].split('\n').join('\n' + initialIndent);
-        }
-    }
-
-    // The post-rendered string is needed to do the line wrapping
-    var expanded = render(text, templateVars);
-
-    if (!wrap || WRAP_LIMIT === 0) {
-        return expanded;
-    }
-
-    var after = [];
-    expanded.split('\n').forEach(function (line) {
-        if (line.length <= WRAP_LIMIT) {
-            after.push(line);
-            return;
-        }
-
-        // Continuation lines for commands: add " \" at the end of the line,
-        // and all subsequent lines have the same indent + 4 spaces
-        var indent = getIndent(line) + '    ';
-        while (line.length > WRAP_LIMIT) {
-            var lastSpace = line.substr(0, WRAP_LIMIT - 2).lastIndexOf(' ');
-            after.push(line.substr(0, lastSpace) + ' \\');
-            line = indent + line.substr(lastSpace);
-        }
-
-        after.push(line);
-    });
-
-    return after.join('\n');
-}
-
-
-/**
- * Returns the indent portion of a line
- */
-function getIndent(line) {
-    return line.substr(0, /[^ ]/.exec(line).index);
-}
-
-
-/**
- * Render a hogan.js template, converting HTML escaped text back into plain
- * text (for the charaters we care about, anyway)
- */
-function render(templateText, data) {
-    var template = hogan.compile(templateText);
-    return template.render(data);
-}
-
-
-/**
- * Read a directory of files, and add their contents to templateData
- */
-function readDir(dir, templateData) {
-    var files;
-    files = fs.readdirSync(dir);
-    files.forEach(function (file) {
-        if (templateData.hasOwnProperty(file)) {
-            return;
-        }
-
-        templateData[file] = fs.readFileSync(path.join(
-            dir, file)).toString().replace(/\n$/, '');
-    });
-}
-
-
-/**
- * Read a JSON file
- */
-function readFile(file, templateData) {
-    var fileData = JSON.parse(fs.readFileSync(file).toString());
-
-    for (var f in fileData) {
-        if (!templateData.hasOwnProperty(f)) {
-            templateData[f] = fileData[f];
-        }
-    }
-}
-
-
-
-// --- hogan.js section tags
-
-
-
-/**
- * Indent lines by the amount that the initial section tag is at.
- */
-function indent(text) {
-    return doIndent.call(this, text, false);
-}
-
-
-/**
- * Wrap lines at 80 characters with a "\" at the end, indenting the leftover
- * text by 4 spaces.
- */
-function indentAndWrap(text) {
-    return doIndent.call(this, text, true);
-}
-
-
-
-// --- Exports
-
-
-
-function generateFile(opts) {
-    var inFile;
-    var templateData = {
-        indent: indent,
-        indent_and_wrap: indentAndWrap
-    };
-
-    inFile = fs.readFileSync(opts.inFile).toString();
-
-    if (opts.file) {
-        readFile(opts.file, templateData);
-    }
-
-    if (opts.dir) {
-        readDir(opts.dir, templateData);
-    }
-
-    if (opts.params.hasOwnProperty('wrap')) {
-        WRAP_LIMIT = opts.params.wrap;
-    }
-
-    var result = render(inFile, templateData);
-    if (opts.outFile) {
-        fs.writeFileSync(opts.outFile, result);
-    } else {
-        console.log(result);
-    }
-}
-
-
-
-module.exports = {
-    generateFile: generateFile
-};
diff --git a/node_modules/fw/tools/ramsey/node_modules/assert-plus.js b/node_modules/fw/tools/ramsey/node_modules/assert-plus.js
deleted file mode 100644
index 70583f1..0000000
--- a/node_modules/fw/tools/ramsey/node_modules/assert-plus.js
+++ /dev/null
@@ -1,196 +0,0 @@
-// Copyright (c) 2012, Mark Cavage. All rights reserved.
-
-var assert = require('assert');
-var Stream = require('stream').Stream;
-var util = require('util');
-
-
-
-///--- Globals
-
-var NDEBUG = process.env.NODE_NDEBUG || false;
-
-
-
-///--- Messages
-
-var ARRAY_TYPE_REQUIRED = '%s ([%s]) required';
-var TYPE_REQUIRED = '%s (%s) is required';
-
-
-
-///--- Internal
-
-function capitalize(str) {
-        return (str.charAt(0).toUpperCase() + str.slice(1));
-}
-
-function uncapitalize(str) {
-        return (str.charAt(0).toLowerCase() + str.slice(1));
-}
-
-function _() {
-        return (util.format.apply(util, arguments));
-}
-
-
-function _assert(arg, type, name, stackFunc) {
-        if (!NDEBUG) {
-                name = name || type;
-                stackFunc = stackFunc || _assert.caller;
-                var t = typeof (arg);
-
-                if (t !== type) {
-                        throw new assert.AssertionError({
-                                message: _(TYPE_REQUIRED, name, type),
-                                actual: t,
-                                expected: type,
-                                operator: '===',
-                                stackStartFunction: stackFunc
-                        });
-                }
-        }
-}
-
-
-
-///--- API
-
-function array(arr, type, name) {
-        if (!NDEBUG) {
-                name = name || type;
-
-                if (!Array.isArray(arr)) {
-                        throw new assert.AssertionError({
-                                message: _(ARRAY_TYPE_REQUIRED, name, type),
-                                actual: typeof (arr),
-                                expected: 'array',
-                                operator: 'Array.isArray',
-                                stackStartFunction: array.caller
-                        });
-                }
-
-                for (var i = 0; i < arr.length; i++) {
-                        _assert(arr[i], type, name, array);
-                }
-        }
-}
-
-
-function bool(arg, name) {
-        _assert(arg, 'boolean', name, bool);
-}
-
-
-function buffer(arg, name) {
-        if (!Buffer.isBuffer(arg)) {
-                throw new assert.AssertionError({
-                        message: _(TYPE_REQUIRED, name, type),
-                        actual: typeof (arg),
-                        expected: 'buffer',
-                        operator: 'Buffer.isBuffer',
-                        stackStartFunction: buffer
-                });
-        }
-}
-
-
-function func(arg, name) {
-        _assert(arg, 'function', name);
-}
-
-
-function number(arg, name) {
-        _assert(arg, 'number', name);
-}
-
-
-function object(arg, name) {
-        _assert(arg, 'object', name);
-}
-
-
-function stream(arg, name) {
-        if (!(arg instanceof Stream)) {
-                throw new assert.AssertionError({
-                        message: _(TYPE_REQUIRED, name, type),
-                        actual: typeof (arg),
-                        expected: 'Stream',
-                        operator: 'instanceof',
-                        stackStartFunction: buffer
-                });
-        }
-}
-
-
-function string(arg, name) {
-        _assert(arg, 'string', name);
-}
-
-
-
-///--- Exports
-
-module.exports = {
-        bool: bool,
-        buffer: buffer,
-        func: func,
-        number: number,
-        object: object,
-        stream: stream,
-        string: string
-};
-
-
-Object.keys(module.exports).forEach(function (k) {
-        if (k === 'buffer')
-                return;
-
-        var name = 'arrayOf' + capitalize(k);
-
-        if (k === 'bool')
-                k = 'boolean';
-        if (k === 'func')
-                k = 'function';
-        module.exports[name] = function (arg, name) {
-                array(arg, k, name);
-        };
-});
-
-Object.keys(module.exports).forEach(function (k) {
-        var _name = 'optional' + capitalize(k);
-        var s = uncapitalize(k.replace('arrayOf', ''));
-        if (s === 'bool')
-                s = 'boolean';
-        if (s === 'func')
-                s = 'function';
-
-        if (k.indexOf('arrayOf') !== -1) {
-          module.exports[_name] = function (arg, name) {
-                  if (!NDEBUG && arg !== undefined) {
-                          array(arg, s, name);
-                  }
-          };
-        } else {
-          module.exports[_name] = function (arg, name) {
-                  if (!NDEBUG && arg !== undefined) {
-                          _assert(arg, s, name);
-                  }
-          };
-        }
-});
-
-
-// Reexport built-in assertions
-Object.keys(assert).forEach(function (k) {
-        if (k === 'AssertionError') {
-                module.exports[k] = assert[k];
-                return;
-        }
-
-        module.exports[k] = function () {
-                if (!NDEBUG) {
-                        assert[k].apply(assert[k], arguments);
-                }
-        };
-});
diff --git a/node_modules/fw/tools/ramsey/node_modules/dashdash.js b/node_modules/fw/tools/ramsey/node_modules/dashdash.js
deleted file mode 100644
index 837da6a..0000000
--- a/node_modules/fw/tools/ramsey/node_modules/dashdash.js
+++ /dev/null
@@ -1,628 +0,0 @@
-/**
- * dashdash - A light, featureful and explicit option parsing library for
- * node.js.
- */
-
-var p = console.log;
-var format = require('util').format;
-
-var assert = require('assert-plus');
-
-var DEBUG = true;
-if (DEBUG) {
-    var debug = console.warn;
-} else {
-    var debug = function () {};
-}
-
-
-
-// ---- internal support stuff
-
-/**
- * Return a shallow copy of the given object;
- */
-function shallowCopy(obj) {
-    if (!obj) {
-        return (obj);
-    }
-    var copy = {};
-    Object.keys(obj).forEach(function (k) {
-        copy[k] = obj[k];
-    });
-    return (copy);
-}
-
-
-function space(n) {
-    var s = '';
-    for (var i = 0; i < n; i++) {
-        s += ' ';
-    }
-    return s;
-}
-
-
-/**
- * Return an array of lines wrapping the given text to the given width.
- * This splits on whitespace. Single tokens longer than `width` are not
- * broken up.
- */
-function textwrap(s, width) {
-    var words = s.trim().split(/\s+/);
-    var lines = [];
-    var line = '';
-    words.forEach(function (w) {
-        var newLength = line.length + w.length;
-        if (line.length > 0)
-            newLength += 1;
-        if (newLength > width) {
-            lines.push(line);
-            line = '';
-        }
-        if (line.length > 0)
-            line += ' ';
-        line += w;
-    });
-    lines.push(line);
-    return lines;
-}
-
-
-/**
- * Transform an option name to a "key" that is used as the field
- * on the `opts` object returned from `<parser>.parse()`.
- *
- * Transformations:
- * - '-' -> '_': This allow one to use hyphen in option names (common)
- *   but not have to do silly things like `opt["dry-run"]` to access the
- *   parsed results.
- */
-function optionKeyFromName(name) {
-    return name.replace(/-/g, '_');
-}
-
-
-
-// ---- Option types
-
-function parseBool(option, optstr, arg) {
-    return Boolean(arg);
-}
-
-function parseString(option, optstr, arg) {
-    assert.string(arg, 'arg');
-    return arg;
-}
-
-function parseNumber(option, optstr, arg) {
-    assert.string(arg, 'arg');
-    var num = Number(arg);
-    if (isNaN(num)) {
-        throw new Error(format('arg for "%s" is not a number: "%s"',
-            optstr, arg));
-    }
-    return num;
-}
-
-function parseInteger(option, optstr, arg) {
-    assert.string(arg, 'arg');
-    var num = Number(arg);
-    if (!/^[0-9-]+$/.test(arg) || isNaN(num)) {
-        throw new Error(format('arg for "%s" is not an integer: "%s"',
-            optstr, arg));
-    }
-    return num;
-}
-
-function parsePositiveInteger(option, optstr, arg) {
-    assert.string(arg, 'arg');
-    var num = Number(arg);
-    if (!/^[0-9]+$/.test(arg) || isNaN(num)) {
-        throw new Error(format('arg for "%s" is not a positive integer: "%s"',
-            optstr, arg));
-    }
-    return num;
-}
-
-var types = {
-    bool: {
-        takesArg: false,
-        parseArg: parseBool
-    },
-    string: {
-        takesArg: true,
-        helpArg: 'ARG',
-        parseArg: parseString
-    },
-    number: {
-        takesArg: true,
-        helpArg: 'NUM',
-        parseArg: parseNumber
-    },
-    integer: {
-        takesArg: true,
-        helpArg: 'INT',
-        parseArg: parseInteger
-    },
-    positiveInteger: {
-        takesArg: true,
-        helpArg: 'INT',
-        parseArg: parsePositiveInteger
-    },
-    arrayOfBool: {
-        takesArg: false,
-        array: true,
-        parseArg: parseBool
-    },
-    arrayOfString: {
-        takesArg: true,
-        helpArg: 'ARG',
-        array: true,
-        parseArg: parseString
-    },
-    arrayOfNumber: {
-        takesArg: true,
-        helpArg: 'NUM',
-        array: true,
-        parseArg: parseNumber
-    },
-    arrayOfInteger: {
-        takesArg: true,
-        helpArg: 'INT',
-        array: true,
-        parseArg: parseInteger
-    },
-    arrayOfPositiveInteger: {
-        takesArg: true,
-        helpArg: 'INT',
-        array: true,
-        parseArg: parsePositiveInteger
-    },
-};
-
-
-
-// ---- Parser
-
-/**
- * Parser constructor.
- *
- * @param config {Object} The parser configuration
- *      - options {Array} Array of option specs. See the README for how to
- *        specify each option spec.
- *      - allowUnknown {Boolean} Default false. Whether to throw on unknown
- *        options. If false, then unknown args are included in the _args array.
- *      - interspersed {Boolean} Default true. Whether to allow interspersed
- *        arguments (non-options) and options. E.g.:
- *              node tool.js arg1 arg2 -v
- *        '-v' is after some args here. If `interspersed: false` then '-v'
- *        would not be parsed out. Note that regardless of `interspersed`
- *        the presence of '--' will stop option parsing, as all good
- *        option parsers should.
- */
-function Parser(config) {
-    assert.object(config, 'config');
-    assert.arrayOfObject(config.options, 'config.options');
-    assert.optionalBool(config.interspersed, 'config.interspersed');
-    var self = this;
-
-    // Allow interspersed arguments (true by default).
-    this.interspersed = (config.interspersed !== undefined
-        ? config.interspersed : true);
-
-    // Don't allow unknown flags (true by default).
-    this.allowUnknown = (config.allowUnknown !== undefined
-        ? config.allowUnknown : false);
-
-    this.options = config.options.map(function (o) { return shallowCopy(o); });
-    this.optionFromName = {};
-    this.optionFromEnv = {};
-    for (var i = 0; i < this.options.length; i++) {
-        var o = this.options[i];
-        assert.ok(types[o.type],
-            format('invalid config.options.%d.type: "%s" in %j',
-                   i, o.type, o));
-        assert.optionalString(o.name, format('config.options.%d.name', i));
-        assert.optionalArrayOfString(o.names,
-            format('config.options.%d.names', i));
-        assert.ok((o.name || o.names) && !(o.name && o.names),
-            format('exactly one of "name" or "names" required: %j', o));
-        assert.optionalString(o.help, format('config.options.%d.help', i));
-        var env = o.env || [];
-        if (typeof (env) === 'string') {
-            env = [env];
-        }
-        assert.optionalArrayOfString(env, format('config.options.%d.env', i));
-
-        if (o.name) {
-            o.names = [o.name];
-        } else {
-            assert.string(o.names[0],
-                format('config.options.%d.names is empty', i));
-        }
-        o.key = optionKeyFromName(o.names[0]);
-        o.names.forEach(function (n) {
-            if (self.optionFromName[n]) {
-                throw new Error(format(
-                    'option name collision: "%s" used in %j and %j',
-                    n, self.optionFromName[n], o));
-            }
-            self.optionFromName[n] = o;
-        });
-        env.forEach(function (n) {
-            if (self.optionFromEnv[n]) {
-                throw new Error(format(
-                    'option env collision: "%s" used in %j and %j',
-                    n, self.optionFromEnv[n], o));
-            }
-            self.optionFromEnv[n] = o;
-        });
-    }
-}
-
-Parser.prototype.optionTakesArg = function optionTakesArg(option) {
-    return types[option.type].takesArg;
-};
-
-/**
- * Parse options from the given argv.
- *
- * @param inputs {Object}
- *      - argv {Array} Optional. The argv to parse. Defaults to
- *        `process.argv`.
- *      - slice {Number} The index into argv at which options/args begin.
- *        Default is 2, as appropriate for `process.argv`.
- *      - env {Object} Optional. The env to use for 'env' entries in the
- *        option specs. Defaults to `process.env`.
- * @returns {Object} Parsed `opts`. It has special keys `_args` (the
- *      remaining args from `argv`) and `_order` (gives the order that
- *      options were specified).
- */
-Parser.prototype.parse = function parse(inputs) {
-    var self = this;
-
-    // Old API was `parse([argv, [slice]])`
-    if (Array.isArray(arguments[0])) {
-        inputs = {argv: arguments[0], slice: arguments[1]};
-    }
-
-    assert.object(inputs, 'inputs');
-    assert.optionalArrayOfString(inputs.argv, 'inputs.argv');
-    //assert.optionalNumber(slice, 'slice');
-    var argv = inputs.argv || process.argv;
-    var slice = inputs.slice !== undefined ? inputs.slice : 2;
-    var args = argv.slice(slice);
-    var env = inputs.env || process.env;
-    var opts = {};
-    var _order = [];
-
-    function addOpt(option, optstr, key, val, from) {
-        var type = types[option.type];
-        var parsedVal = type.parseArg(option, optstr, val);
-        if (type.array) {
-            if (!opts[key]) {
-                opts[key] = [];
-            }
-            opts[key].push(parsedVal);
-        } else {
-            opts[key] = parsedVal;
-        }
-        var item = { key: key, value: parsedVal, from: from };
-        _order.push(item);
-    }
-
-    // Parse args.
-    var _args = [];
-    var i = 0;
-    outer: while (i < args.length) {
-        var arg = args[i];
-
-        // End of options marker.
-        if (arg === '--') {
-            i++;
-            break;
-
-        // Long option
-        } else if (arg.slice(0, 2) === '--') {
-            var name = arg.slice(2);
-            var val = null;
-            var idx = name.indexOf('=');
-            if (idx !== -1) {
-                val = name.slice(idx + 1);
-                name = name.slice(0, idx);
-            }
-            var option = this.optionFromName[name];
-            if (!option) {
-                if (!this.allowUnknown)
-                    throw new Error(format('unknown option: "--%s"', name));
-                else if (this.interspersed)
-                    _args.push(arg);
-                else
-                    break outer;
-            } else {
-                var takesArg = this.optionTakesArg(option);
-                if (val !== null && !takesArg) {
-                    throw new Error(format('argument given to "--%s" option '
-                        + 'that does not take one: "%s"', name, arg));
-                }
-                if (!takesArg) {
-                    addOpt(option, '--'+name, option.key, true, 'argv');
-                } else if (val !== null) {
-                    addOpt(option, '--'+name, option.key, val, 'argv');
-                } else if (i + 1 >= args.length) {
-                    throw new Error(format('do not have enough args for "--%s" '
-                        + 'option', name));
-                } else {
-                    addOpt(option, '--'+name, option.key, args[i + 1], 'argv');
-                    i++;
-                }
-            }
-
-        // Short option
-        } else if (arg[0] === '-' && arg.length > 1) {
-            var j = 1;
-            var allFound = true;
-            while (j < arg.length) {
-                var name = arg[j];
-                // debug('name: %s (val: %s)', name, val)
-                var option = this.optionFromName[name];
-                if (!option) {
-                    allFound = false;
-                    if (this.allowUnknown) {
-                        if (this.interspersed) {
-                            _args.push(arg);
-                            break;
-                        } else
-                            break outer;
-                    } else if (arg.length > 2) {
-                        throw new Error(format(
-                            'unknown option: "-%s" in "%s" group',
-                            name, arg));
-                    } else {
-                        throw new Error(format('unknown option: "-%s"', name));
-                    }
-                } else if (this.optionTakesArg(option)) {
-                  break;
-                }
-                j++;
-            }
-
-            j = 1;
-            while (allFound && j < arg.length) {
-                var name = arg[j];
-                var val = arg.slice(j + 1);  // option val if it takes an arg
-                var takesArg = this.optionTakesArg(option);
-                var option = this.optionFromName[name];
-                if (!takesArg) {
-                    addOpt(option, '-'+name, option.key, true, 'argv');
-                } else if (val) {
-                    addOpt(option, '-'+name, option.key, val, 'argv');
-                    break;
-                } else {
-                    if (i + 1 >= args.length) {
-                        throw new Error(format('do not have enough args '
-                            + 'for "-%s" option', name));
-                    }
-                    addOpt(option, '-'+name, option.key, args[i + 1], 'argv');
-                    i++;
-                    break;
-                }
-                j++;
-            }
-
-        // An interspersed arg
-        } else if (this.interspersed) {
-            _args.push(arg);
-
-        // An arg and interspersed args are not allowed, so done options.
-        } else {
-            break outer;
-        }
-        i++;
-    }
-    _args = _args.concat(args.slice(i));
-
-    // Parse environment.
-    Object.keys(this.optionFromEnv).forEach(function (envname) {
-        var val = env[envname];
-        if (val === undefined)
-            return;
-        var option = self.optionFromEnv[envname];
-        if (opts[option.key] !== undefined)
-            return;
-        var takesArg = self.optionTakesArg(option);
-        if (takesArg) {
-            addOpt(option, envname, option.key, val, 'env');
-        } else if (val !== '') {
-            // Boolean envvar handling:
-            // - VAR=<empty-string>     not set (as if the VAR was not set)
-            // - VAR=0                  false
-            // - anything else          true
-            addOpt(option, envname, option.key, (val !== '0'), 'env');
-        }
-    });
-
-    // Apply default values.
-    this.options.forEach(function (o) {
-        if (o.default !== undefined && opts[o.key] === undefined) {
-            opts[o.key] = o.default;
-        }
-    });
-
-    opts._order = _order;
-    opts._args = _args;
-    return opts;
-};
-
-
-/**
- * Return help output for the current options.
- *
- * E.g.: if the current options are:
- *      [{names: ['help', 'h'], type: 'bool', help: 'Show help and exit.'}]
- * then this would return:
- *      '  -h, --help     Show help and exit.\n'
- *
- * @param config {Object} Config for controlling the option help output.
- *      - indent {Number|String} Default 4. An indent/prefix to use for
- *        each option line.
- *      - nameSort {String} Default is 'length'. By default the names are
- *        sorted to put the short opts first (i.e. '-h, --help' preferred
- *        to '--help, -h'). Set to 'none' to not do this sorting.
- *      - maxCol {Number} Default 80. Note that long tokens in a help string
- *        can go past this.
- *      - helpCol {Number} Set to specify a specific column at which
- *        option help will be aligned. By default this is determined
- *        automatically.
- *      - minHelpCol {Number} Default 20.
- *      - maxHelpCol {Number} Default 40.
- *      - includeEnv {Boolean} Default false.
- * @returns {String}
- */
-Parser.prototype.help = function help(config) {
-    config = config || {};
-    assert.object(config, 'config');
-    var indent;
-    if (config.indent === undefined) {
-        indent = space(4);
-    } else if (typeof (config.indent) === 'number') {
-        indent = space(config.indent);
-    } else if (typeof (config.indent) === 'string') {
-        indent = config.indent;
-    } else {
-        assert.fail('invalid "config.indent": not a string or number: '
-            + config.indent);
-    }
-    assert.optionalString(config.nameSort, 'config.nameSort');
-    var nameSort = config.nameSort || 'length';
-    assert.ok(~['length', 'none'].indexOf(nameSort),
-        'invalid "config.nameSort"');
-    assert.optionalNumber(config.maxCol, 'config.maxCol');
-    assert.optionalNumber(config.maxHelpCol, 'config.maxHelpCol');
-    assert.optionalNumber(config.minHelpCol, 'config.minHelpCol');
-    assert.optionalNumber(config.helpCol, 'config.helpCol');
-    assert.optionalBool(config.includeEnv, 'config.includeEnv');
-    var maxCol = config.maxCol || 80;
-    var minHelpCol = config.minHelpCol || 20;
-    var maxHelpCol = config.maxHelpCol || 40;
-
-    var lines = [];
-    var maxWidth = 0;
-    this.options.forEach(function (o) {
-        var type = types[o.type];
-        var arg = o.helpArg || type.helpArg || 'ARG';
-        var line = '';
-        var names = o.names.slice();
-        if (nameSort === 'length') {
-            names.sort(function (a, b) {
-                if (a.length < b.length)
-                    return -1;
-                else if (b.length < a.length)
-                    return 1;
-                else
-                    return 0;
-            })
-        }
-        names.forEach(function (name, i) {
-            if (i > 0)
-                line += ', ';
-            if (name.length === 1) {
-                line += '-' + name
-                if (type.takesArg)
-                    line += ' ' + arg;
-            } else {
-                line += '--' + name
-                if (type.takesArg)
-                    line += '=' + arg;
-            }
-        });
-        maxWidth = Math.max(maxWidth, line.length);
-        lines.push(line);
-    });
-
-    // Add help strings.
-    var helpCol = config.helpCol;
-    if (!helpCol) {
-        helpCol = maxWidth + indent.length + 2;
-        helpCol = Math.min(Math.max(helpCol, minHelpCol), maxHelpCol);
-    }
-    this.options.forEach(function (o, i) {
-        if (!o.help && !(config.includeEnv && o.env)) {
-            return;
-        }
-        var line = lines[i];
-        var n = helpCol - (indent.length + line.length);
-        if (n >= 0) {
-            line += space(n);
-        } else {
-            line += '\n' + space(helpCol);
-        }
-        var help = (o.help || '').trim();
-        if (o.env && o.env.length && config.includeEnv) {
-            if (help.length && !~'.!?'.indexOf(help.slice(-1))) {
-                help += '.';
-            }
-            if (help.length) {
-                help += ' ';
-            }
-            help += 'Environment: ';
-            var type = types[o.type];
-            var arg = o.helpArg || type.helpArg || 'ARG';
-            var envs = (Array.isArray(o.env) ? o.env : [o.env]).map(
-                function (e) {
-                    if (type.takesArg) {
-                        return e + '=' + arg;
-                    } else {
-                        return e + '=1';
-                    }
-                }
-            );
-            help += envs.join(', ');
-        }
-        line += textwrap(help, maxCol - helpCol).join(
-            '\n' + space(helpCol));
-        lines[i] = line;
-    });
-
-    var rv = '';
-    if (lines.length > 0) {
-        rv = indent + lines.join('\n' + indent) + '\n';
-    }
-    return rv;
-};
-
-
-
-// ---- exports
-
-function createParser(config) {
-    return new Parser(config);
-}
-
-/**
- * Parse argv with the given options.
- *
- * @param config {Object} A merge of all the available fields from
- *      `dashdash.Parser` and `dashdash.Parser.parse`: options, interspersed,
- *      argv, env, slice.
- */
-function parse(config) {
-    assert.object(config, 'config');
-    assert.optionalArrayOfString(config.argv, 'config.argv');
-    assert.optionalObject(config.env, 'config.env');
-    var config = shallowCopy(config);
-    var argv = config.argv;
-    delete config.argv;
-    var env = config.env;
-    delete config.env;
-
-    var parser = new Parser(config);
-    return parser.parse({argv: argv, env: env});
-}
-
-module.exports = {
-    createParser: createParser,
-    Parser: Parser,
-    parse: parse
-};
diff --git a/node_modules/fw/tools/ramsey/node_modules/hogan.js/LICENSE b/node_modules/fw/tools/ramsey/node_modules/hogan.js/LICENSE
deleted file mode 100644
index 4947287..0000000
--- a/node_modules/fw/tools/ramsey/node_modules/hogan.js/LICENSE
+++ /dev/null
@@ -1,177 +0,0 @@
-
-                                 Apache License
-                           Version 2.0, January 2004
-                        http://www.apache.org/licenses/
-
-   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
-
-   1. Definitions.
-
-      "License" shall mean the terms and conditions for use, reproduction,
-      and distribution as defined by Sections 1 through 9 of this document.
-
-      "Licensor" shall mean the copyright owner or entity authorized by
-      the copyright owner that is granting the License.
-
-      "Legal Entity" shall mean the union of the acting entity and all
-      other entities that control, are controlled by, or are under common
-      control with that entity. For the purposes of this definition,
-      "control" means (i) the power, direct or indirect, to cause the
-      direction or management of such entity, whether by contract or
-      otherwise, or (ii) ownership of fifty percent (50%) or more of the
-      outstanding shares, or (iii) beneficial ownership of such entity.
-
-      "You" (or "Your") shall mean an individual or Legal Entity
-      exercising permissions granted by this License.
-
-      "Source" form shall mean the preferred form for making modifications,
-      including but not limited to software source code, documentation
-      source, and configuration files.
-
-      "Object" form shall mean any form resulting from mechanical
-      transformation or translation of a Source form, including but
-      not limited to compiled object code, generated documentation,
-      and conversions to other media types.
-
-      "Work" shall mean the work of authorship, whether in Source or
-      Object form, made available under the License, as indicated by a
-      copyright notice that is included in or attached to the work
-      (an example is provided in the Appendix below).
-
-      "Derivative Works" shall mean any work, whether in Source or Object
-      form, that is based on (or derived from) the Work and for which the
-      editorial revisions, annotations, elaborations, or other modifications
-      represent, as a whole, an original work of authorship. For the purposes
-      of this License, Derivative Works shall not include works that remain
-      separable from, or merely link (or bind by name) to the interfaces of,
-      the Work and Derivative Works thereof.
-
-      "Contribution" shall mean any work of authorship, including
-      the original version of the Work and any modifications or additions
-      to that Work or Derivative Works thereof, that is intentionally
-      submitted to Licensor for inclusion in the Work by the copyright owner
-      or by an individual or Legal Entity authorized to submit on behalf of
-      the copyright owner. For the purposes of this definition, "submitted"
-      means any form of electronic, verbal, or written communication sent
-      to the Licensor or its representatives, including but not limited to
-      communication on electronic mailing lists, source code control systems,
-      and issue tracking systems that are managed by, or on behalf of, the
-      Licensor for the purpose of discussing and improving the Work, but
-      excluding communication that is conspicuously marked or otherwise
-      designated in writing by the copyright owner as "Not a Contribution."
-
-      "Contributor" shall mean Licensor and any individual or Legal Entity
-      on behalf of whom a Contribution has been received by Licensor and
-      subsequently incorporated within the Work.
-
-   2. Grant of Copyright License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      copyright license to reproduce, prepare Derivative Works of,
-      publicly display, publicly perform, sublicense, and distribute the
-      Work and such Derivative Works in Source or Object form.
-
-   3. Grant of Patent License. Subject to the terms and conditions of
-      this License, each Contributor hereby grants to You a perpetual,
-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
-      (except as stated in this section) patent license to make, have made,
-      use, offer to sell, sell, import, and otherwise transfer the Work,
-      where such license applies only to those patent claims licensable
-      by such Contributor that are necessarily infringed by their
-      Contribution(s) alone or by combination of their Contribution(s)
-      with the Work to which such Contribution(s) was submitted. If You
-      institute patent litigation against any entity (including a
-      cross-claim or counterclaim in a lawsuit) alleging that the Work
-      or a Contribution incorporated within the Work constitutes direct
-      or contributory patent infringement, then any patent licenses
-      granted to You under this License for that Work shall terminate
-      as of the date such litigation is filed.
-
-   4. Redistribution. You may reproduce and distribute copies of the
-      Work or Derivative Works thereof in any medium, with or without
-      modifications, and in Source or Object form, provided that You
-      meet the following conditions:
-
-      (a) You must give any other recipients of the Work or
-          Derivative Works a copy of this License; and
-
-      (b) You must cause any modified files to carry prominent notices
-          stating that You changed the files; and
-
-      (c) You must retain, in the Source form of any Derivative Works
-          that You distribute, all copyright, patent, trademark, and
-          attribution notices from the Source form of the Work,
-          excluding those notices that do not pertain to any part of
-          the Derivative Works; and
-
-      (d) If the Work includes a "NOTICE" text file as part of its
-          distribution, then any Derivative Works that You distribute must
-          include a readable copy of the attribution notices contained
-          within such NOTICE file, excluding those notices that do not
-          pertain to any part of the Derivative Works, in at least one
-          of the following places: within a NOTICE text file distributed
-          as part of the Derivative Works; within the Source form or
-          documentation, if provided along with the Derivative Works; or,
-          within a display generated by the Derivative Works, if and
-          wherever such third-party notices normally appear. The contents
-          of the NOTICE file are for informational purposes only and
-          do not modify the License. You may add Your own attribution
-          notices within Derivative Works that You distribute, alongside
-          or as an addendum to the NOTICE text from the Work, provided
-          that such additional attribution notices cannot be construed
-          as modifying the License.
-
-      You may add Your own copyright statement to Your modifications and
-      may provide additional or different license terms and conditions
-      for use, reproduction, or distribution of Your modifications, or
-      for any such Derivative Works as a whole, provided Your use,
-      reproduction, and distribution of the Work otherwise complies with
-      the conditions stated in this License.
-
-   5. Submission of Contributions. Unless You explicitly state otherwise,
-      any Contribution intentionally submitted for inclusion in the Work
-      by You to the Licensor shall be under the terms and conditions of
-      this License, without any additional terms or conditions.
-      Notwithstanding the above, nothing herein shall supersede or modify
-      the terms of any separate license agreement you may have executed
-      with Licensor regarding such Contributions.
-
-   6. Trademarks. This License does not grant permission to use the trade
-      names, trademarks, service marks, or product names of the Licensor,
-      except as required for reasonable and customary use in describing the
-      origin of the Work and reproducing the content of the NOTICE file.
-
-   7. Disclaimer of Warranty. Unless required by applicable law or
-      agreed to in writing, Licensor provides the Work (and each
-      Contributor provides its Contributions) on an "AS IS" BASIS,
-      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
-      implied, including, without limitation, any warranties or conditions
-      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
-      PARTICULAR PURPOSE. You are solely responsible for determining the
-      appropriateness of using or redistributing the Work and assume any
-      risks associated with Your exercise of permissions under this License.
-
-   8. Limitation of Liability. In no event and under no legal theory,
-      whether in tort (including negligence), contract, or otherwise,
-      unless required by applicable law (such as deliberate and grossly
-      negligent acts) or agreed to in writing, shall any Contributor be
-      liable to You for damages, including any direct, indirect, special,
-      incidental, or consequential damages of any character arising as a
-      result of this License or out of the use or inability to use the
-      Work (including but not limited to damages for loss of goodwill,
-      work stoppage, computer failure or malfunction, or any and all
-      other commercial damages or losses), even if such Contributor
-      has been advised of the possibility of such damages.
-
-   9. Accepting Warranty or Additional Liability. While redistributing
-      the Work or Derivative Works thereof, You may choose to offer,
-      and charge a fee for, acceptance of support, warranty, indemnity,
-      or other liability obligations and/or rights consistent with this
-      License. However, in accepting such obligations, You may act only
-      on Your own behalf and on Your sole responsibility, not on behalf
-      of any other Contributor, and only if You agree to indemnify,
-      defend, and hold each Contributor harmless for any liability
-      incurred by, or claims asserted against, such Contributor by reason
-      of your accepting any such warranty or additional liability.
-
-   END OF TERMS AND CONDITIONS
\ No newline at end of file
diff --git a/node_modules/fw/tools/ramsey/node_modules/hogan.js/lib/compiler.js b/node_modules/fw/tools/ramsey/node_modules/hogan.js/lib/compiler.js
deleted file mode 100644
index f72a0b2..0000000
--- a/node_modules/fw/tools/ramsey/node_modules/hogan.js/lib/compiler.js
+++ /dev/null
@@ -1,344 +0,0 @@
-/*
- *  Copyright 2011 Twitter, Inc.
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *  http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-(function (Hogan) {
-  // Setup regex  assignments
-  // remove whitespace according to Mustache spec
-  var rIsWhitespace = /\S/,
-      rQuot = /\"/g,
-      rNewline =  /\n/g,
-      rCr = /\r/g,
-      rSlash = /\\/g,
-      tagTypes = {
-        '#': 1, '^': 2, '/': 3,  '!': 4, '>': 5,
-        '<': 6, '=': 7, '_v': 8, '{': 9, '&': 10
-      };
-
-  Hogan.scan = function scan(text, delimiters) {
-    var len = text.length,
-        IN_TEXT = 0,
-        IN_TAG_TYPE = 1,
-        IN_TAG = 2,
-        state = IN_TEXT,
-        tagType = null,
-        tag = null,
-        buf = '',
-        tokens = [],
-        seenTag = false,
-        i = 0,
-        lineStart = 0,
-        otag = '{{',
-        ctag = '}}';
-
-    function addBuf() {
-      if (buf.length > 0) {
-        tokens.push(new String(buf));
-        buf = '';
-      }
-    }
-
-    function lineIsWhitespace() {
-      var isAllWhitespace = true;
-      for (var j = lineStart; j < tokens.length; j++) {
-        isAllWhitespace =
-          (tokens[j].tag && tagTypes[tokens[j].tag] < tagTypes['_v']) ||
-          (!tokens[j].tag && tokens[j].match(rIsWhitespace) === null);
-        if (!isAllWhitespace) {
-          return false;
-        }
-      }
-
-      return isAllWhitespace;
-    }
-
-    function filterLine(haveSeenTag, noNewLine) {
-      addBuf();
-
-      if (haveSeenTag && lineIsWhitespace()) {
-        for (var j = lineStart, next; j < tokens.length; j++) {
-          if (!tokens[j].tag) {
-            if ((next = tokens[j+1]) && next.tag == '>') {
-              // set indent to token value
-              next.indent = tokens[j].toString()
-            }
-            tokens.splice(j, 1);
-          }
-        }
-      } else if (!noNewLine) {
-        tokens.push({tag:'\n'});
-      }
-
-      seenTag = false;
-      lineStart = tokens.length;
-    }
-
-    function changeDelimiters(text, index) {
-      var close = '=' + ctag,
-          closeIndex = text.indexOf(close, index),
-          delimiters = trim(
-            text.substring(text.indexOf('=', index) + 1, closeIndex)
-          ).split(' ');
-
-      otag = delimiters[0];
-      ctag = delimiters[1];
-
-      return closeIndex + close.length - 1;
-    }
-
-    if (delimiters) {
-      delimiters = delimiters.split(' ');
-      otag = delimiters[0];
-      ctag = delimiters[1];
-    }
-
-    for (i = 0; i < len; i++) {
-      if (state == IN_TEXT) {
-        if (tagChange(otag, text, i)) {
-          --i;
-          addBuf();
-          state = IN_TAG_TYPE;
-        } else {
-          if (text.charAt(i) == '\n') {
-            filterLine(seenTag);
-          } else {
-            buf += text.charAt(i);
-          }
-        }
-      } else if (state == IN_TAG_TYPE) {
-        i += otag.length - 1;
-        tag = tagTypes[text.charAt(i + 1)];
-        tagType = tag ? text.charAt(i + 1) : '_v';
-        if (tagType == '=') {
-          i = changeDelimiters(text, i);
-          state = IN_TEXT;
-        } else {
-          if (tag) {
-            i++;
-          }
-          state = IN_TAG;
-        }
-        seenTag = i;
-      } else {
-        if (tagChange(ctag, text, i)) {
-          tokens.push({tag: tagType, n: trim(buf), otag: otag, ctag: ctag,
-                       i: (tagType == '/') ? seenTag - ctag.length : i + otag.length});
-          buf = '';
-          i += ctag.length - 1;
-          state = IN_TEXT;
-          if (tagType == '{') {
-            if (ctag == '}}') {
-              i++;
-            } else {
-              cleanTripleStache(tokens[tokens.length - 1]);
-            }
-          }
-        } else {
-          buf += text.charAt(i);
-        }
-      }
-    }
-
-    filterLine(seenTag, true);
-
-    return tokens;
-  }
-
-  function cleanTripleStache(token) {
-    if (token.n.substr(token.n.length - 1) === '}') {
-      token.n = token.n.substring(0, token.n.length - 1);
-    }
-  }
-
-  function trim(s) {
-    if (s.trim) {
-      return s.trim();
-    }
-
-    return s.replace(/^\s*|\s*$/g, '');
-  }
-
-  function tagChange(tag, text, index) {
-    if (text.charAt(index) != tag.charAt(0)) {
-      return false;
-    }
-
-    for (var i = 1, l = tag.length; i < l; i++) {
-      if (text.charAt(index + i) != tag.charAt(i)) {
-        return false;
-      }
-    }
-
-    return true;
-  }
-
-  function buildTree(tokens, kind, stack, customTags) {
-    var instructions = [],
-        opener = null,
-        token = null;
-
-    while (tokens.length > 0) {
-      token = tokens.shift();
-      if (token.tag == '#' || token.tag == '^' || isOpener(token, customTags)) {
-        stack.push(token);
-        token.nodes = buildTree(tokens, token.tag, stack, customTags);
-        instructions.push(token);
-      } else if (token.tag == '/') {
-        if (stack.length === 0) {
-          throw new Error('Closing tag without opener: /' + token.n);
-        }
-        opener = stack.pop();
-        if (token.n != opener.n && !isCloser(token.n, opener.n, customTags)) {
-          throw new Error('Nesting error: ' + opener.n + ' vs. ' + token.n);
-        }
-        opener.end = token.i;
-        return instructions;
-      } else {
-        instructions.push(token);
-      }
-    }
-
-    if (stack.length > 0) {
-      throw new Error('missing closing tag: ' + stack.pop().n);
-    }
-
-    return instructions;
-  }
-
-  function isOpener(token, tags) {
-    for (var i = 0, l = tags.length; i < l; i++) {
-      if (tags[i].o == token.n) {
-        token.tag = '#';
-        return true;
-      }
-    }
-  }
-
-  function isCloser(close, open, tags) {
-    for (var i = 0, l = tags.length; i < l; i++) {
-      if (tags[i].c == close && tags[i].o == open) {
-        return true;
-      }
-    }
-  }
-
-  Hogan.generate = function (tree, text, options) {
-    var code = 'var _=this;_.b(i=i||"");' + walk(tree) + 'return _.fl();';
-    if (options.asString) {
-      return 'function(c,p,i){' + code + ';}';
-    }
-
-    return new Hogan.Template(new Function('c', 'p', 'i', code), text, Hogan, options);
-  }
-
-  function esc(s) {
-    return s.replace(rSlash, '\\\\')
-            .replace(rQuot, '\\\"')
-            .replace(rNewline, '\\n')
-            .replace(rCr, '\\r');
-  }
-
-  function chooseMethod(s) {
-    return (~s.indexOf('.')) ? 'd' : 'f';
-  }
-
-  function walk(tree) {
-    var code = '';
-    for (var i = 0, l = tree.length; i < l; i++) {
-      var tag = tree[i].tag;
-      if (tag == '#') {
-        code += section(tree[i].nodes, tree[i].n, chooseMethod(tree[i].n),
-                        tree[i].i, tree[i].end, tree[i].otag + " " + tree[i].ctag);
-      } else if (tag == '^') {
-        code += invertedSection(tree[i].nodes, tree[i].n,
-                                chooseMethod(tree[i].n));
-      } else if (tag == '<' || tag == '>') {
-        code += partial(tree[i]);
-      } else if (tag == '{' || tag == '&') {
-        code += tripleStache(tree[i].n, chooseMethod(tree[i].n));
-      } else if (tag == '\n') {
-        code += text('"\\n"' + (tree.length-1 == i ? '' : ' + i'));
-      } else if (tag == '_v') {
-        code += variable(tree[i].n, chooseMethod(tree[i].n));
-      } else if (tag === undefined) {
-        code += text('"' + esc(tree[i]) + '"');
-      }
-    }
-    return code;
-  }
-
-  function section(nodes, id, method, start, end, tags) {
-    return 'if(_.s(_.' + method + '("' + esc(id) + '",c,p,1),' +
-           'c,p,0,' + start + ',' + end + ',"' + tags + '")){' +
-           '_.rs(c,p,' +
-           'function(c,p,_){' +
-           walk(nodes) +
-           '});c.pop();}';
-  }
-
-  function invertedSection(nodes, id, method) {
-    return 'if(!_.s(_.' + method + '("' + esc(id) + '",c,p,1),c,p,1,0,0,"")){' +
-           walk(nodes) +
-           '};';
-  }
-
-  function partial(tok) {
-    return '_.b(_.rp("' +  esc(tok.n) + '",c,p,"' + (tok.indent || '') + '"));';
-  }
-
-  function tripleStache(id, method) {
-    return '_.b(_.t(_.' + method + '("' + esc(id) + '",c,p,0)));';
-  }
-
-  function variable(id, method) {
-    return '_.b(_.v(_.' + method + '("' + esc(id) + '",c,p,0)));';
-  }
-
-  function text(id) {
-    return '_.b(' + id + ');';
-  }
-
-  Hogan.parse = function(tokens, text, options) {
-    options = options || {};
-    return buildTree(tokens, '', [], options.sectionTags || []);
-  },
-
-  Hogan.cache = {};
-
-  Hogan.compile = function(text, options) {
-    // options
-    //
-    // asString: false (default)
-    //
-    // sectionTags: [{o: '_foo', c: 'foo'}]
-    // An array of object with o and c fields that indicate names for custom
-    // section tags. The example above allows parsing of {{_foo}}{{/foo}}.
-    //
-    // delimiters: A string that overrides the default delimiters.
-    // Example: "<% %>"
-    //
-    options = options || {};
-
-    var key = text + '||' + !!options.asString;
-
-    var t = this.cache[key];
-
-    if (t) {
-      return t;
-    }
-
-    t = this.generate(this.parse(this.scan(text, options.delimiters), text, options), text, options);
-    return this.cache[key] = t;
-  };
-})(typeof exports !== 'undefined' ? exports : Hogan);
diff --git a/node_modules/fw/tools/ramsey/node_modules/hogan.js/lib/hogan.js b/node_modules/fw/tools/ramsey/node_modules/hogan.js/lib/hogan.js
deleted file mode 100644
index f0119b5..0000000
--- a/node_modules/fw/tools/ramsey/node_modules/hogan.js/lib/hogan.js
+++ /dev/null
@@ -1,20 +0,0 @@
-/*
- *  Copyright 2011 Twitter, Inc.
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *  http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-// This file is for use with Node.js. See dist/ for browser files.
-
-var Hogan = require('./compiler');
-Hogan.Template = require('./template').Template;
-module.exports = Hogan; 
\ No newline at end of file
diff --git a/node_modules/fw/tools/ramsey/node_modules/hogan.js/lib/template.js b/node_modules/fw/tools/ramsey/node_modules/hogan.js/lib/template.js
deleted file mode 100644
index c28ce44..0000000
--- a/node_modules/fw/tools/ramsey/node_modules/hogan.js/lib/template.js
+++ /dev/null
@@ -1,241 +0,0 @@
-/*
- *  Copyright 2011 Twitter, Inc.
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *  http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-var Hogan = {};
-
-(function (Hogan, useArrayBuffer) {
-  Hogan.Template = function (renderFunc, text, compiler, options) {
-    this.r = renderFunc || this.r;
-    this.c = compiler;
-    this.options = options;
-    this.text = text || '';
-    this.buf = (useArrayBuffer) ? [] : '';
-  }
-
-  Hogan.Template.prototype = {
-    // render: replaced by generated code.
-    r: function (context, partials, indent) { return ''; },
-
-    // variable escaping
-    v: hoganEscape,
-
-    // triple stache
-    t: coerceToString,
-
-    render: function render(context, partials, indent) {
-      return this.ri([context], partials || {}, indent);
-    },
-
-    // render internal -- a hook for overrides that catches partials too
-    ri: function (context, partials, indent) {
-      return this.r(context, partials, indent);
-    },
-
-    // tries to find a partial in the curent scope and render it
-    rp: function(name, context, partials, indent) {
-      var partial = partials[name];
-
-      if (!partial) {
-        return '';
-      }
-
-      if (this.c && typeof partial == 'string') {
-        partial = this.c.compile(partial, this.options);
-      }
-
-      return partial.ri(context, partials, indent);
-    },
-
-    // render a section
-    rs: function(context, partials, section) {
-      var tail = context[context.length - 1];
-
-      if (!isArray(tail)) {
-        section(context, partials, this);
-        return;
-      }
-
-      for (var i = 0; i < tail.length; i++) {
-        context.push(tail[i]);
-        section(context, partials, this);
-        context.pop();
-      }
-    },
-
-    // maybe start a section
-    s: function(val, ctx, partials, inverted, start, end, tags) {
-      var pass;
-
-      if (isArray(val) && val.length === 0) {
-        return false;
-      }
-
-      if (typeof val == 'function') {
-        val = this.ls(val, ctx, partials, inverted, start, end, tags);
-      }
-
-      pass = (val === '') || !!val;
-
-      if (!inverted && pass && ctx) {
-        ctx.push((typeof val == 'object') ? val : ctx[ctx.length - 1]);
-      }
-
-      return pass;
-    },
-
-    // find values with dotted names
-    d: function(key, ctx, partials, returnFound) {
-      var names = key.split('.'),
-          val = this.f(names[0], ctx, partials, returnFound),
-          cx = null;
-
-      if (key === '.' && isArray(ctx[ctx.length - 2])) {
-        return ctx[ctx.length - 1];
-      }
-
-      for (var i = 1; i < names.length; i++) {
-        if (val && typeof val == 'object' && names[i] in val) {
-          cx = val;
-          val = val[names[i]];
-        } else {
-          val = '';
-        }
-      }
-
-      if (returnFound && !val) {
-        return false;
-      }
-
-      if (!returnFound && typeof val == 'function') {
-        ctx.push(cx);
-        val = this.lv(val, ctx, partials);
-        ctx.pop();
-      }
-
-      return val;
-    },
-
-    // find values with normal names
-    f: function(key, ctx, partials, returnFound) {
-      var val = false,
-          v = null,
-          found = false;
-
-      for (var i = ctx.length - 1; i >= 0; i--) {
-        v = ctx[i];
-        if (v && typeof v == 'object' && key in v) {
-          val = v[key];
-          found = true;
-          break;
-        }
-      }
-
-      if (!found) {
-        return (returnFound) ? false : "";
-      }
-
-      if (!returnFound && typeof val == 'function') {
-        val = this.lv(val, ctx, partials);
-      }
-
-      return val;
-    },
-
-    // higher order templates
-    ho: function(val, cx, partials, text, tags) {
-      var compiler = this.c;
-      var options = this.options;
-      options.delimiters = tags;
-      var text = val.call(cx, text);
-      text = (text == null) ? String(text) : text.toString();
-      this.b(compiler.compile(text, options).render(cx, partials));
-      return false;
-    },
-
-    // template result buffering
-    b: (useArrayBuffer) ? function(s) { this.buf.push(s); } :
-                          function(s) { this.buf += s; },
-    fl: (useArrayBuffer) ? function() { var r = this.buf.join(''); this.buf = []; return r; } :
-                           function() { var r = this.buf; this.buf = ''; return r; },
-
-    // lambda replace section
-    ls: function(val, ctx, partials, inverted, start, end, tags) {
-      var cx = ctx[ctx.length - 1],
-          t = null;
-
-      if (!inverted && this.c && val.length > 0) {
-        return this.ho(val, cx, partials, this.text.substring(start, end), tags);
-      }
-
-      t = val.call(cx);
-
-      if (typeof t == 'function') {
-        if (inverted) {
-          return true;
-        } else if (this.c) {
-          return this.ho(t, cx, partials, this.text.substring(start, end), tags);
-        }
-      }
-
-      return t;
-    },
-
-    // lambda replace variable
-    lv: function(val, ctx, partials) {
-      var cx = ctx[ctx.length - 1];
-      var result = val.call(cx);
-
-      if (typeof result == 'function') {
-        result = coerceToString(result.call(cx));
-        if (this.c && ~result.indexOf("{\u007B")) {
-          return this.c.compile(result, this.options).render(cx, partials);
-        }
-      }
-
-      return coerceToString(result);
-    }
-
-  };
-
-  var rAmp = /&/g,
-      rLt = /</g,
-      rGt = />/g,
-      rApos =/\'/g,
-      rQuot = /\"/g,
-      hChars =/[&<>\"\']/;
-
-
-  function coerceToString(val) {
-    return String((val === null || val === undefined) ? '' : val);
-  }
-
-  function hoganEscape(str) {
-    str = coerceToString(str);
-    return hChars.test(str) ?
-      str
-        .replace(rAmp,'&amp;')
-        .replace(rLt,'&lt;')
-        .replace(rGt,'&gt;')
-        .replace(rApos,'&#39;')
-        .replace(rQuot, '&quot;') :
-      str;
-  }
-
-  var isArray = Array.isArray || function(a) {
-    return Object.prototype.toString.call(a) === '[object Array]';
-  };
-
-})(typeof exports !== 'undefined' ? exports : Hogan);
-
diff --git a/node_modules/fw/tools/ramsey/node_modules/hogan.js/package.json b/node_modules/fw/tools/ramsey/node_modules/hogan.js/package.json
deleted file mode 100644
index 966099a..0000000
--- a/node_modules/fw/tools/ramsey/node_modules/hogan.js/package.json
+++ /dev/null
@@ -1,68 +0,0 @@
-{
-  "name": "hogan.js",
-  "description": "A mustache compiler.",
-  "version": "2.0.0",
-  "keywords": [
-    "mustache",
-    "template"
-  ],
-  "main": "./lib/hogan.js",
-  "homepage": "http://twitter.github.com/hogan.js/",
-  "author": {
-    "name": "Twitter Inc."
-  },
-  "repository": {
-    "type": "git",
-    "url": "git://github.com/twitter/hogan.js.git"
-  },
-  "licenses": [
-    {
-      "type": "Apache-2.0",
-      "url": "http://www.apache.org/licenses/LICENSE-2.0"
-    }
-  ],
-  "devDependencies": {
-    "uglify-js": "*",
-    "jsdom": "0.2.10",
-    "step": "0.0.5"
-  },
-  "bin": {
-    "hulk": "./bin/hulk"
-  },
-  "_npmUser": {
-    "name": "sayrer",
-    "email": "sayrer@gmail.com"
-  },
-  "_id": "hogan.js@2.0.0",
-  "dependencies": {},
-  "optionalDependencies": {},
-  "engines": {
-    "node": "*"
-  },
-  "_engineSupported": true,
-  "_npmVersion": "1.1.0-3",
-  "_nodeVersion": "v0.6.10",
-  "_defaultsLoaded": true,
-  "dist": {
-    "shasum": "3a5b04186d51737fd2035792d419a9f5a82f9d0e",
-    "tarball": "http://registry.npmjs.org/hogan.js/-/hogan.js-2.0.0.tgz"
-  },
-  "maintainers": [
-    {
-      "name": "fat",
-      "email": "jacobthornton@gmail.com"
-    },
-    {
-      "name": "sayrer",
-      "email": "sayrer@gmail.com"
-    }
-  ],
-  "directories": {},
-  "_shasum": "3a5b04186d51737fd2035792d419a9f5a82f9d0e",
-  "_from": "hogan.js@2.0.0",
-  "_resolved": "https://registry.npmjs.org/hogan.js/-/hogan.js-2.0.0.tgz",
-  "bugs": {
-    "url": "https://github.com/twitter/hogan.js/issues"
-  },
-  "readme": "ERROR: No README data found!"
-}
