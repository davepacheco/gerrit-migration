commit 31d7780c5f89f861d8e7dff222ac6c079ef569ba (refs/changes/30/5630/1)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2019-02-22T22:41:13+00:00 (8 months ago)
    
    joyent/bugview#30 Add support for linting and style checking

diff --git a/.eslintrc b/.eslintrc
new file mode 100644
index 0000000..753ccf3
--- /dev/null
+++ b/.eslintrc
@@ -0,0 +1,29 @@
+{
+    "plugins": [ "joyent" ],
+    "extends": [
+        "eslint:recommended",
+        "plugin:joyent/style",
+        "plugin:joyent/lint"
+    ],
+    "parserOptions": {
+        "ecmaVersion": 5,
+        "sourceType": "script",
+        "ecmaFeatures": {
+        }
+    },
+    "env": {
+        "node": true
+    },
+    "rules": {
+        // Lint:
+        "strict": [ "error", "global" ],
+
+        // Style:
+        "func-style": [ "error", "declaration" ],
+        "multiline-comment-style": [ "error", "starred-block" ],
+
+        // Disabled style checks:
+        "brace-style": "off",
+        "no-mixed-spaces-and-tabs": "off"
+    }
+}
diff --git a/.gitignore b/.gitignore
index ad31461..ff79cc6 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,4 +1,7 @@
-config.json
-node_modules/
 0-*-stamp
-.*.swp
+*.s[a-w][a-z]
+*.tgz
+config.json
+/build
+/coverage
+/node_modules
diff --git a/.gitmodules b/.gitmodules
new file mode 100644
index 0000000..6998f69
--- /dev/null
+++ b/.gitmodules
@@ -0,0 +1,3 @@
+[submodule "deps/jsstyle"]
+	path = deps/jsstyle
+	url = https://github.com/joyent/jsstyle.git
diff --git a/.jshintrc b/.jshintrc
deleted file mode 100644
index 8a5125e..0000000
--- a/.jshintrc
+++ /dev/null
@@ -1,13 +0,0 @@
-{
-	"smarttabs": true,
-	"sub": true,
-	"node": true,
-	"unused": "vars",
-	"undef": true,
-	"eqeqeq": true,
-	"latedef": "nofunc",
-	"quotmark": "single",
-	"trailing": true,
-	"maxlen": 80,
-	"funcscope": true
-}
diff --git a/Makefile b/Makefile
index b3ce882..09361aa 100644
--- a/Makefile
+++ b/Makefile
@@ -1,21 +1,59 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright 2019, Joyent, Inc.
+#
+
+#
+# bugview Makefile
+#
+
+#
+# Tools
+#
+
 
-JSHINT = ./node_modules/.bin/jshint
 
 JS_FILES = \
 	jirapub.js
+JSSTYLE_FILES	= $(JS_FILES)
+JSSTYLE_FLAGS	= -f tools/jsstyle.conf
+ESLINT_FILES	= $(JS_FILES)
 
-.PHONY: all
-all: 0-npm-stamp
+ifeq ($(shell uname -s),SunOS)
+	NODE_PREBUILT_VERSION =	v4.6.1
+	NODE_PREBUILT_TAG =	zone
+	NODE_PREBUILT_IMAGE =	18b094b0-eb01-11e5-80c1-175dac7ddf02
+endif
+
+include ./tools/mk/Makefile.defs
+ifeq ($(shell uname -s),SunOS)
+	include ./tools/mk/Makefile.node_prebuilt.defs
+else
+	NODE := node
+	NPM := $(shell which npm)
+	NPM_EXEC=$(NPM)
+endif
 
-.PHONY: check
-check: $(JSHINT)
-	$(JSHINT) $(JS_FILES)
+#
+# Repo-specific targets
+#
 
-$(JSHINT):
-	npm install \
-	    jshint@`json -f package.json devDependencies.jshint`
+.PHONY: all
+all: 0-npm-stamp | $(NPM_EXEC)
 
 0-npm-stamp:
 	npm install
 	touch $@
 
+CLEAN_FILES += ./node_modules/
+
+include ./tools/mk/Makefile.deps
+ifeq ($(shell uname -s),SunOS)
+	include ./tools/mk/Makefile.node_prebuilt.targ
+endif
+include ./tools/mk/Makefile.targ
diff --git a/deps/jsstyle b/deps/jsstyle
new file mode 160000
index 0000000..52dc973
--- /dev/null
+++ b/deps/jsstyle
@@ -0,0 +1 @@
+Subproject commit 52dc973cf64da11834eca7cf46ebce8518e3ee88
diff --git a/jirapub.js b/jirapub.js
index 0a3ef64..ad40cc3 100644
--- a/jirapub.js
+++ b/jirapub.js
@@ -1,6 +1,8 @@
 #!/usr/bin/env node
 /* vim: set ts=8 sts=8 sw=8 noet: */
 
+'use strict';
+
 var mod_assert = require('assert-plus');
 var mod_restify = require('restify');
 var mod_bunyan = require('bunyan');
@@ -27,7 +29,7 @@ var ALLOWED_DOMAINS = CONFIG.allowed_domains;
 var ALLOWED_LABELS = CONFIG.allowed_labels;
 
 var JIRA;
-var SERVER;
+var SERVER; // eslint-disable-line
 
 /*
  * Initialisation Routines:
@@ -104,7 +106,7 @@ create_http_server(log, callback)
 	s.get('/bugview/json/:key', handle_issue_json);
 	s.get('/bugview/:key', handle_issue);
 
-	s.on('uncaughtException', function (req, res, route, err) {
+	s.on('uncaughtException', function (req, res, _route, err) {
 		req.log.error(err, 'uncaught exception!');
 	});
 
@@ -197,7 +199,8 @@ make_issue_index(log, label, req, res, next)
 	var offset;
 	var url;
 
-	mod_assert(label === CONFIG.label || ALLOWED_LABELS.indexOf(label) !== -1);
+	mod_assert.ok(label === CONFIG.label ||
+	    ALLOWED_LABELS.indexOf(label) !== -1);
 
 	if (req.query && req.query.offset) {
 		offset = parseInt(req.query.offset, 10);
@@ -207,7 +210,8 @@ make_issue_index(log, label, req, res, next)
 	}
 	offset = Math.floor(offset / 50) * 50;
 
-	url = CONFIG.url.path + '/search?jql=labels%20%3D%20%22' + label + '%22';
+	url = CONFIG.url.path +
+	    '/search?jql=labels%20%3D%20%22' + label + '%22';
 	if (label !== CONFIG.label) {
 		url += '%20AND%20labels%20%3D%20%22' + CONFIG.label + '%22';
 	}
@@ -252,11 +256,12 @@ make_issue_index(log, label, req, res, next)
 		if (ALLOWED_LABELS.indexOf(label) === -1) {
 			container = container.replace(/%%LABEL%%/g, '');
 		} else {
-			container = container.replace(/%%LABEL%%/g, ': ' + label);
+			container = container.replace(/%%LABEL%%/g,
+			    ': ' + label);
 		}
 		var labelindex = ALLOWED_LABELS.map(function make_link(_label) {
-				return make_label_link(_label, label === _label);
-			}).join(', ');
+			return make_label_link(_label, label === _label);
+		}).join(', ');
 		container = container.replace(/%%LABEL_INDEX%%/, labelindex);
 		var tbody = '';
 		for (var i = 0; i < results.issues.length; i++) {
@@ -277,7 +282,7 @@ make_issue_index(log, label, req, res, next)
 				resolution,
 				'</td><td>',
 				issue.fields.summary,
-				'</td></tr>',
+				'</td></tr>'
 			].join('') + '\n';
 		}
 		container = container.replace(/%%TABLE_BODY%%/g, tbody);
@@ -395,7 +400,6 @@ handle_issue_json(req, res, next)
 		next();
 		return;
 	});
-
 }
 
 function
@@ -606,8 +610,9 @@ repeat_char(c, n)
 {
 	var out = '';
 
-	while (out.length < n)
+	while (out.length < n) {
 		out += c;
+	}
 
 	return (out);
 }
@@ -629,12 +634,12 @@ parse_jira_markup(desc, ps)
 
 	ps.ps_heading = null;
 
-	var commit_text = function () {
+	function commit_text() {
 		if (text !== '') {
 			out.push(mod_ent.encode(text));
 			text = '';
 		}
-	};
+	}
 
 	for (var i = 0; i < desc.length; i++) {
 		var c = desc[i];
@@ -761,6 +766,9 @@ parse_jira_markup(desc, ps)
 				link_url += c;
 			}
 			continue;
+		default:
+			throw new Error(
+			    'unknown state: ' + JSON.stringify(state));
 		}
 
 		if (c === '*' && formats[0] !== 'CODE') {
@@ -999,7 +1007,6 @@ format_issue(opts, callback)
 		} }, function (err) {
 			next(err);
 		});
-
 	}, function get_remote_links(next) {
 		var url = CONFIG.url.path +
 		    '/issue/' + issue.id + '/remotelink';
@@ -1039,7 +1046,6 @@ format_issue(opts, callback)
 	}, function do_format(next) {
 		next(null,
 		    format_issue_finalise(issue, remotelinks, other_issues));
-
 	} ], callback);
 }
 
@@ -1082,8 +1088,8 @@ format_issue_finalise(issue, remotelinks, other_issues)
 			if (il.outwardIssue &&
 			    allow_issue(il.outwardIssue.key, other_issues)) {
 				ild = other_issues[il.outwardIssue.key] ?
-				    ' ' + other_issues[il.outwardIssue.key].
-				    fields.summary : '';
+				    ' ' + other_issues[il.outwardIssue.key]
+				    .fields.summary : '';
 				links.push('<li>' + il.type.outward +
 				    ' <a href="' + il.outwardIssue.key + '">' +
 				    il.outwardIssue.key + '</a>' + ild +
@@ -1093,8 +1099,8 @@ format_issue_finalise(issue, remotelinks, other_issues)
 			if (il.inwardIssue &&
 			    allow_issue(il.inwardIssue.key, other_issues)) {
 				ild = other_issues[il.inwardIssue.key] ?
-				    ' ' + other_issues[il.inwardIssue.key].
-				    fields.summary : '';
+				    ' ' + other_issues[il.inwardIssue.key]
+				    .fields.summary : '';
 				links.push('<li>' + il.type.inward +
 				    ' <a href="' + il.inwardIssue.key + '">' +
 				    il.inwardIssue.key + '</a>' + ild +
@@ -1130,7 +1136,8 @@ format_issue_finalise(issue, remotelinks, other_issues)
 			return make_label_link(label, false);
 		});
 	if (labellinks.length > 0) {
-		out += '<h2>Labels</h2>\n<p>' + labellinks.join(', ') + '</p>\n';
+		out += '<h2>Labels</h2>\n';
+		out += '<p>' + labellinks.join(', ') + '</p>\n';
 	}
 
 	if (issue.fields.description) {
@@ -1170,8 +1177,10 @@ format_issue_finalise(issue, remotelinks, other_issues)
 			out += '<div style="background-color: ' +
 			    (dark ? '#DDDDDD' : '#EEEEEE') + ';">\n';
 			out += '<b>';
-			out += 'Comment by ' + com.author.displayName + '<br>\n';
-			out += 'Created at ' + cdtc.toISOString() + '<br>\n';
+			out += 'Comment by ' + com.author.displayName;
+			out += '<br>\n';
+			out += 'Created at ' + cdtc.toISOString();
+			out += '<br>\n';
 			if (com.updated && com.updated !== com.created) {
 				out += 'Updated at ' +
 				    new Date(com.updated).toISOString() +
diff --git a/package.json b/package.json
index c508f11..3cf033d 100644
--- a/package.json
+++ b/package.json
@@ -14,6 +14,7 @@
     "vasync": "^1.6.4"
   },
   "devDependencies": {
-    "jshint": "^2.5.6"
+    "eslint": "4.13.1",
+    "eslint-plugin-joyent": "~2.1.0"
   }
 }
diff --git a/tools/jsstyle.conf b/tools/jsstyle.conf
new file mode 100644
index 0000000..41bb677
--- /dev/null
+++ b/tools/jsstyle.conf
@@ -0,0 +1,14 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2018, Joyent, Inc.
+#
+
+indent=tab
+doxygen
+unparenthesized-return=0
+strict-indent=true
diff --git a/tools/mk/Makefile.defs b/tools/mk/Makefile.defs
new file mode 100644
index 0000000..73dd612
--- /dev/null
+++ b/tools/mk/Makefile.defs
@@ -0,0 +1,105 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2018, Joyent, Inc.
+#
+
+#
+# Makefile.defs: common defines.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This makefile defines some useful defines. Include it at the top of
+# your Makefile.
+#
+# Definitions in this Makefile:
+#
+#	TOP 		The absolute path to the project directory. The top dir.
+#	BRANCH 		The current git branch.
+#	TIMESTAMP	The timestamp for the build. This can be set via
+#			the TIMESTAMP envvar (used by MG-based builds).
+#	STAMP		A build stamp to use in built package names.
+#
+#	MAKE_STAMPS_DIR	The directory in which make stamp files are to be
+#			created.  See comments below on expensive targets.
+#
+#	CACHE_DIR	A directory tree in which temporary files may be
+#			collected by download, tarball extraction, etc.  This
+#			directory is completely removed by "make distclean".
+#			Files in this directory are not intended to be shipped.
+#
+
+TOP := $(shell pwd)
+
+#
+# Mountain Gorilla-spec'd versioning.
+# See "Package Versioning" in MG's README.md:
+# <https://mo.joyent.com/mountain-gorilla/blob/master/README.md#L139-200>
+#
+# Need GNU awk for multi-char arg to "-F".
+_AWK := $(shell (which gawk >/dev/null && echo gawk) \
+	|| (which nawk >/dev/null && echo nawk) \
+	|| echo awk)
+BRANCH := $(shell git symbolic-ref HEAD | $(_AWK) -F/ '{print $$3}')
+ifeq ($(TIMESTAMP),)
+	TIMESTAMP := $(shell date -u "+%Y%m%dT%H%M%SZ")
+endif
+_GITDESCRIBE := g$(shell git describe --all --long --dirty | $(_AWK) -F'-g' '{print $$NF}')
+STAMP := $(BRANCH)-$(TIMESTAMP)-$(_GITDESCRIBE)
+
+# node-gyp will print build info useful for debugging with V=1
+export V=1
+
+CACHE_DIR ?=		cache
+DISTCLEAN_FILES +=	$(CACHE_DIR)
+
+#
+# EXPENSIVE TARGETS AND MAKE STAMP FILES
+#
+# Targets which are expensive to run and lack a single file that marks
+# completion are difficult to track with make; e.g., "npm install".  One
+# solution to this problem is to create "stamp" files with symbolic names which
+# are created as the final step in a complex make rule in order to mark
+# completion.
+#
+# In order to make these more uniform, and easier to target with "make clean",
+# we will attempt to store them under a single directory.  Note that these
+# files are never targets for shipping in build artefacts.
+#
+# Stamp-backed targets come in several parts.  First, a macro should be defined
+# which names a file in the MAKE_STAMPS_DIR directory.  Then, a target which
+# creates this stamp file must be provided.  The recipe for this target should
+# use MAKE_STAMP_REMOVE and MAKE_STAMP_CREATE to perform the appropriate stamp
+# management.
+#
+# For example:
+#
+# --- Makefile.*.defs:
+#
+#	$(STAMP_EXPENSIVE_RESULT) := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# --- Makefile.*.targ:
+#
+#	$(STAMP_EXPENSIVE_RESULT): input/file another/input/file
+#		$(MAKE_STAMP_REMOVE)
+#		rm -rf output_tree/  # <--- ensure a clean slate
+#		expensive_program -o output_tree/ $^
+#		$(MAKE_STAMP_CREATE)
+#
+# NOTE: Every stamp file is exposed as an implicit "stamp-$STAMP_NAME" target.
+# The example above could be built manually by invoking:
+#
+#	make stamp-expensive-result
+#
+MAKE_STAMPS_DIR ?=	make_stamps
+CLEAN_FILES +=		$(MAKE_STAMPS_DIR)
+
+MAKE_STAMP_REMOVE =	mkdir -p $(@D); rm -f $(@)
+MAKE_STAMP_CREATE =	mkdir -p $(@D); touch $(@)
diff --git a/tools/mk/Makefile.deps b/tools/mk/Makefile.deps
new file mode 100644
index 0000000..91f8346
--- /dev/null
+++ b/tools/mk/Makefile.deps
@@ -0,0 +1,87 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.deps: Makefile for including common tools as dependencies
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This file is separate from Makefile.targ so that teams can choose
+# independently whether to use the common targets in Makefile.targ and the
+# common tools here.
+#
+
+#
+# javascriptlint
+#
+JSL_EXEC	?= deps/javascriptlint/build/install/jsl
+JSL		?= $(JSL_EXEC)
+
+$(JSL_EXEC): | deps/javascriptlint/.git
+	cd deps/javascriptlint && make install
+
+distclean::
+	if [[ -f deps/javascriptlint/Makefile ]]; then \
+		cd deps/javascriptlint && make clean; \
+	fi
+
+#
+# jsstyle
+#
+JSSTYLE_EXEC	?= deps/jsstyle/jsstyle
+JSSTYLE		?= $(JSSTYLE_EXEC)
+
+$(JSSTYLE_EXEC): | deps/jsstyle/.git
+
+#
+# eslint
+#
+ESLINT_EXEC	?= node_modules/.bin/eslint
+ifdef NODE
+    ESLINT	:= $(NODE) $(ESLINT_EXEC)
+else
+    ESLINT	?= $(ESLINT_EXEC)
+endif
+
+# Install eslint.
+#
+# The install of specific modules is to allow running "make check"
+# without having to do a complete install of all npm dependencies.
+#
+# NPM_EXEC will be defined if either of "Makefile.{node,node_prebuilt}.defs"
+# is included.
+ifdef NPM
+$(ESLINT_EXEC): package.json | $(NPM_EXEC)
+	ESLINT_VER=$$($(NODE) -e 'console.log(require("./package.json").devDependencies["eslint"] || "")') && \
+	    ESLINT_JOY_VER=$$($(NODE) -e 'console.log(require("./package.json").devDependencies["eslint-plugin-joyent"] || "")') && \
+	    [[ -n $$ESLINT_VER && -n $$ESLINT_JOY_VER ]] && \
+	    $(NPM) install --no-save eslint@$$ESLINT_VER eslint-plugin-joyent@$$ESLINT_JOY_VER && \
+	    touch $(ESLINT_EXEC)
+else
+$(ESLINT_EXEC): package.json
+	ESLINT_VER=$$(node -e 'console.log(require("./package.json").devDependencies["eslint"] || "")') && \
+	    ESLINT_JOY_VER=$$(node -e 'console.log(require("./package.json").devDependencies["eslint-plugin-joyent"] || "")') && \
+	    [[ -n $$ESLINT_VER && -n $$ESLINT_JOY_VER ]] && \
+	    npm install --no-save eslint@$$ESLINT_VER eslint-plugin-joyent@$$ESLINT_JOY_VER && \
+	    touch $(ESLINT_EXEC)
+endif
+
+#
+# restdown
+#
+RESTDOWN_EXEC	?= deps/restdown/bin/restdown
+RESTDOWN	?= python $(RESTDOWN_EXEC)
+$(RESTDOWN_EXEC): | deps/restdown/.git
+
+EXTRA_DOC_DEPS	?=
diff --git a/tools/mk/Makefile.node.defs b/tools/mk/Makefile.node.defs
new file mode 100644
index 0000000..487824d
--- /dev/null
+++ b/tools/mk/Makefile.node.defs
@@ -0,0 +1,110 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.node.defs: Makefile for building and bundling your own Node.js.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile facilitates building and bundling your own copy of Node.js in
+# your repo.  All it does is define variables for node, node-waf, and npm for
+# you to use elsewhere in your Makefile and rules to build these tools when
+# needed.
+#
+# To use this facility, include "Makefile.node.defs", use the variables as
+# described below to define targets, and then include "Makefile.node.targ".
+#
+# There are two use cases addressed here:
+#
+# (1) Invoking node, node-waf, or npm as part of the build process, as in "npm
+#     install" and "node-waf configure build".  To facilitate this, this
+#     Makefile defines Make variables NODE, NODE_WAF, and NPM that you can use
+#     to invoke these commands during the build process.  You MUST NOT assume
+#     that these variables just evaluate to the filenames themselves, as they
+#     may have environment variable definitions and other things that prevent
+#     you from using them directly as a filename.  If you want that, see (2).
+#
+#     Wherever you use one of these variables, you MUST include a dependency on
+#     the corresponding *_EXEC variable as well, like so:
+#
+#	node_modules/restify: deps/restify $(NPM_EXEC)
+#		$(NPM) install deps/restify
+#
+#     or better, use an order-only dependency to avoid spurious rebuilds:
+#
+#	node_modules/restify: deps/restify | $(NPM_EXEC)
+#		$(NPM) install deps/restify
+#
+#     Otherwise, the underlying file will not get built.  We don't
+#     automatically build them as part of "all" because that approach is
+#     brittle.
+#
+# (2) Specifying paths for invoking node, node-waf, or npm at RUNTIME, as in
+#     specifying the path to node used for the start method of your service's
+#     SMF manifest.  For this, this Makefile defines variables NODE_EXEC,
+#     NODE_WAF_EXEC, and NPM_EXEC, which represent the relative paths of these
+#     files from the root of the workspace.  You MUST NOT use these variables
+#     to invoke these commands during the build process.  See (1) instead.
+#
+#     However, in order to work at runtime, you must build the tool as well.
+#     That is, if you use NODE_EXEC to specify the path to node, you must
+#     depend on NODE_EXEC somewhere. This usually happens anyway because you
+#     usually need them during the build process too, but if you don't then
+#     you need to explicitly add NODE_EXEC (or whichever) to your "all"
+#     target.
+#
+# When including this Makefile, you MAY also specify:
+#
+#	BUILD			top-level directory for built binaries
+#				(default: "build")
+#
+#	NODE_INSTALL		where node should install its built items
+#				(default: "$BUILD/node")
+#
+#	NODE_CONFIG_FLAGS	extra flags to pass to Node's "configure"
+#				(default: "--with-dtrace" on SmartOS; empty
+#				otherwise.)
+#
+
+TOP ?= $(error You must include Makefile.defs before this makefile)
+
+BUILD		?= build
+NODE_INSTALL 	?= $(BUILD)/node
+DISTCLEAN_FILES	+= $(NODE_INSTALL)
+
+NODE_CONFIG_FLAGS += --prefix=$(TOP)/$(NODE_INSTALL)
+
+ifeq ($(shell uname -s),SunOS)
+	NODE_CONFIG_FLAGS += 	--with-dtrace \
+				--openssl-libpath=/opt/local/lib \
+				--openssl-includes=/opt/local/include
+endif
+
+NODE_EXEC	= $(NODE_INSTALL)/bin/node
+NODE_WAF_EXEC	= $(NODE_INSTALL)/bin/node-waf
+NPM_EXEC	= $(NODE_INSTALL)/bin/npm
+
+#
+# These paths should be used during the build process to invoke Node and
+# Node-related build tools like NPM.  All paths are fully qualified so that
+# they work regardless of the current working directory at the point of
+# invocation.
+#
+# Note that where PATH is overridden, the value chosen must cause execution of
+# "node" to find the same binary to which the NODE macro refers.
+#
+NODE		:= $(TOP)/$(NODE_EXEC)
+NODE_WAF	:= $(TOP)/$(NODE_WAF_EXEC)
+NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) $(NODE) $(TOP)/$(NPM_EXEC)
diff --git a/tools/mk/Makefile.node.targ b/tools/mk/Makefile.node.targ
new file mode 100644
index 0000000..bf53f78
--- /dev/null
+++ b/tools/mk/Makefile.node.targ
@@ -0,0 +1,42 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.node.targ: See Makefile.node.defs.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+ifneq ($(shell uname -s),SunOS)
+NODE_PREBUILT_VERSION ?= $(error You must define NODE_PREBUILT_VERSION to use Makefile.node.targ on non-SunOS)
+endif
+
+ifeq ($(shell uname -s),SunOS)
+$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC): | deps/node/.git
+	(cd deps/node; ./configure $(NODE_CONFIG_FLAGS) && $(MAKE) && $(MAKE) install)
+else
+$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC):
+	(mkdir -p $(BUILD) \
+		&& cd $(BUILD) \
+		&& [[ -d src-node ]] && (cd src-node && git checkout master && git pull) || git clone https://github.com/joyent/node.git src-node \
+		&& cd src-node \
+		&& git checkout $(NODE_PREBUILT_VERSION) \
+		&& ./configure $(NODE_CONFIG_FLAGS) \
+		&& $(MAKE) && $(MAKE) install)
+endif
+
+DISTCLEAN_FILES += $(NODE_INSTALL) $(BUILD)/src-node
+
+distclean::
+	-([[ ! -d deps/node ]] || (cd deps/node && $(MAKE) distclean))
diff --git a/tools/mk/Makefile.node_deps.defs b/tools/mk/Makefile.node_deps.defs
new file mode 100644
index 0000000..29a83f7
--- /dev/null
+++ b/tools/mk/Makefile.node_deps.defs
@@ -0,0 +1,43 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.node_deps.defs: Makefile for including npm modules whose sources
+# reside inside the repo.  This should NOT be used for modules in the npm
+# public repo or modules that could be specified with git SHAs.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile takes as input the following make variable:
+#
+#    REPO_MODULES	List of relative paths to node modules (i.e., npm
+#    			packages) inside this repo.  For example:
+#    			src/node-canative, where there's a binary npm package
+#    			in src/node-canative.
+#
+# Based on the above, this Makefile defines the following new variables:
+#
+#    REPO_DEPS		List of relative paths to the installed modules.  For
+#    			example: "node_modules/canative".
+#
+# The accompanying Makefile.node_deps.targ defines a target that will install
+# each of REPO_MODULES into REPO_DEPS and remove REPO_DEPS with "make clean".
+# The top-level Makefile is responsible for depending on REPO_DEPS where
+# appropriate (usually the "deps" or "all" target).
+#
+
+REPO_DEPS    = $(REPO_MODULES:src/node-%=node_modules/%)
+CLEAN_FILES += $(REPO_DEPS)
diff --git a/tools/mk/Makefile.node_deps.targ b/tools/mk/Makefile.node_deps.targ
new file mode 100644
index 0000000..bb2ab4f
--- /dev/null
+++ b/tools/mk/Makefile.node_deps.targ
@@ -0,0 +1,24 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.node_deps.targ: targets for Makefile.node_deps.defs.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+NPM_EXEC  ?= $(error NPM_EXEC must be defined for Makefile.node_deps.targ)
+
+node_modules/%: src/node-% | $(NPM_EXEC)
+	$(NPM) install $<
diff --git a/tools/mk/Makefile.node_prebuilt.defs b/tools/mk/Makefile.node_prebuilt.defs
new file mode 100644
index 0000000..2129742
--- /dev/null
+++ b/tools/mk/Makefile.node_prebuilt.defs
@@ -0,0 +1,159 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.node_prebuilt.defs: Makefile for including a prebuilt Node.js build.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile facilitates downloading and bundling a prebuilt node.js
+# build (using the 'sdcnode' distro builds). This is an alternative to
+# the "Makefile.node.*" makefiles for *building* a node from source.
+#
+# Usage:
+#
+# - Define `NODE_PREBUILT_VERSION` in your Makefile to choose a node version.
+#   E.g.: `NODE_PREBUILT_VERSION=v0.6.19`. See other optional variables
+#   below.
+# - `include tools/mk/Makefile.node_prebuilt.defs` after this in your Makefile.
+# - `include tools/mk/Makefile.node_prebuilt.targ` near the end of your
+#   Makefile.
+# - Have at least one of your Makefile targets depend on either `$(NODE_EXEC)`
+#   or `$(NPM_EXEC)`. E.g.:
+#
+#		node_modules/restify: deps/restify $(NPM_EXEC)
+#			$(NPM) install deps/restify
+#
+#   or better, use an order-only dependency to avoid spurious rebuilds:
+#
+#		node_modules/restify: deps/restify | $(NPM_EXEC)
+#			$(NPM) install deps/restify
+#
+# - Use `$(NPM)` or `$(NODE)` to use your node build.
+# - Include the "$(NODE_INSTALL)" tree in your release package.
+#
+#
+# When including this Makefile, you MUST also specify:
+#
+#	NODE_PREBUILT_VERSION 	The node version in the prebuilt 'sdcnode'
+#				package to use. Typically this is one of the
+#				node version tags, e.g. "v0.6.18" but it
+#				can be any commitish.
+#
+# When including this Makefile, you MAY also specify:
+#
+#	NODE_PREBUILT_DIR 	The dir in which to find sdcnode builds. This
+#				can either be a *local directory* or *a
+#				URL* dir (with trailing '/') which serves
+#				Apache/Nginx dir listing HTML.
+#				(default: sdcnode master build dir on stuff)
+#
+#	NODE_PREBUILT_TAG	The 'sdcnode' project supports special
+#				configuration builds of node, e.g. say a
+#				build configured `--without-ssl`. These
+#				special configurations are given a tag, e.g.
+#				'gz', that is used in the filename. Optionally
+#				specify a tag name here.
+#				(default: empty)
+#
+#	NODE_PREBUILT_BRANCH	Specify a particular branch of 'sdcnode' builds
+#				from which to pull. Generally one should stick
+#				with the default.
+#				(default: master)
+#
+#	NODE_PREBUILT_IMAGE		If you have a zone image that differs from that
+#				for an sdcnode build that you want to use (potential compat
+#				issues be damned), then set this to the UUID of the sdcnode
+#				build you want. See here for available build image uuids:
+#				<https://download.joyent.com/pub/build/sdcnode/master-latest/sdcnode/>
+#
+#	BUILD			top-level directory for built binaries
+#				(default: "build")
+#
+#	NODE_INSTALL		where node should install its built items
+#				(default: "$BUILD/node")
+#
+#
+# Dev Notes:
+#
+# This works by getting "NODE_PREBUILT_NAME" from the provided "NODE_PREBUILT_*"
+# vars and the image version (via 'mdata-get sdc:image_uuid'). The image uuid is
+# included to ensure an exact match with the build machine. This name (e.g.
+# "v0.6.18-zone-$uuid") is used to find a matching "sdcnode-$name-*.tgz" build
+# in "NODE_PREBUILT_DIR" (either a local directory or a URL). That tarball is
+# downloaded and extracted into "NODE_INSTALL".
+#
+# The "*_EXEC" vars are set to named symlinks, e.g.
+# "build/prebuilt-node-v0.6.18-$uuid", so that a change of selected node
+# build (say the developer changes NODE_PREBUILT_VERSION) will recreate the
+# node install.
+#
+# See <https://mo.joyent.com/docs/sdcnode/master/> for details on 'sdcnode-*'
+# package naming.
+#
+
+TOP ?= $(error You must include Makefile.defs before this makefile)
+NODE_PREBUILT_VERSION ?= $(error NODE_PREBUILT_VERSION is not set.)
+
+
+BUILD		?= build
+NODE_INSTALL	?= $(BUILD)/node
+DISTCLEAN_FILES	+= $(NODE_INSTALL) \
+	$(BUILD)/prebuilt-node-* $(BUILD)/prebuilt-npm-*
+
+NODE_PREBUILT_BRANCH ?= master
+NODE_PREBUILT_IMAGE ?= $(shell pfexec mdata-get sdc:image_uuid)
+ifeq ($(NODE_PREBUILT_TAG),)
+	NODE_PREBUILT_NAME := $(NODE_PREBUILT_VERSION)-$(NODE_PREBUILT_IMAGE)
+else
+	NODE_PREBUILT_NAME := $(NODE_PREBUILT_VERSION)-$(NODE_PREBUILT_TAG)-$(NODE_PREBUILT_IMAGE)
+endif
+NODE_PREBUILT_PATTERN := sdcnode-$(NODE_PREBUILT_NAME)-$(NODE_PREBUILT_BRANCH)-.*\.tgz
+NODE_PREBUILT_DIR ?= https://download.joyent.com/pub/build/sdcnode/$(NODE_PREBUILT_IMAGE)/$(NODE_PREBUILT_BRANCH)-latest/sdcnode/
+ifeq ($(shell echo $(NODE_PREBUILT_DIR) | cut -c 1-4),http)
+	NODE_PREBUILT_BASE := $(shell curl -ksS --fail --connect-timeout 30 $(NODE_PREBUILT_DIR) | grep 'href=' | cut -d'"' -f2 | grep "^$(NODE_PREBUILT_PATTERN)$$" | sort | tail -1)
+	ifneq ($(NODE_PREBUILT_BASE),)
+		NODE_PREBUILT_TARBALL := $(NODE_PREBUILT_DIR)$(NODE_PREBUILT_BASE)
+	endif
+else
+	NODE_PREBUILT_BASE := $(shell ls -1 $(NODE_PREBUILT_DIR)/ | grep "^$(NODE_PREBUILT_PATTERN)$$" 2>/dev/null | sort | tail -1)
+	ifneq ($(NODE_PREBUILT_BASE),)
+		NODE_PREBUILT_TARBALL := $(NODE_PREBUILT_DIR)/$(NODE_PREBUILT_BASE)
+	endif
+endif
+ifeq ($(NODE_PREBUILT_TARBALL),)
+	NODE_PREBUILT_TARBALL = $(error NODE_PREBUILT_TARBALL is empty: no '$(NODE_PREBUILT_DIR)/$(NODE_PREBUILT_PATTERN)' found)
+endif
+
+
+# Prebuild-specific paths for the "*_EXEC" vars to ensure that
+# a prebuild change (e.g. if master Makefile's NODE_PREBUILT_VERSION
+# choice changes) causes a install of the new node.
+NODE_EXEC	:= $(BUILD)/prebuilt-node-$(NODE_PREBUILT_NAME)
+NODE_WAF_EXEC	:= $(BUILD)/prebuilt-node-waf-$(NODE_PREBUILT_NAME)
+NPM_EXEC	:= $(BUILD)/prebuilt-npm-$(NODE_PREBUILT_NAME)
+
+#
+# These paths should be used during the build process to invoke Node and
+# Node-related build tools like NPM.  All paths are fully qualified so that
+# they work regardless of the current working directory at the point of
+# invocation.
+#
+# Note that where PATH is overridden, the value chosen must cause execution of
+# "node" to find the same binary to which the NODE macro refers.
+#
+NODE		:= $(TOP)/$(NODE_INSTALL)/bin/node
+NODE_WAF	:= $(TOP)/$(NODE_INSTALL)/bin/node-waf
+NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) $(NODE) $(TOP)/$(NODE_INSTALL)/bin/npm
diff --git a/tools/mk/Makefile.node_prebuilt.targ b/tools/mk/Makefile.node_prebuilt.targ
new file mode 100644
index 0000000..6877333
--- /dev/null
+++ b/tools/mk/Makefile.node_prebuilt.targ
@@ -0,0 +1,42 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.node_prebuilt.targ: Makefile for including a prebuilt Node.js
+# build.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+
+
+NODE_PREBUILT_TARBALL ?= $(error NODE_PREBUILT_TARBALL is not set: was Makefile.node_prebuilt.defs included?)
+
+
+# TODO: remove this limitation
+# Limitation: currently presuming that the NODE_INSTALL basename is
+# 'node' and that sdcnode tarballs have a 'node' top-level dir.
+$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC):
+	[[ $(shell basename $(NODE_INSTALL)) == "node" ]] \
+		|| (echo "Limitation: 'basename NODE_INSTALL' is not 'node'" && exit 1)
+	rm -rf $(NODE_INSTALL) \
+		$(BUILD)/prebuilt-node-* $(BUILD)/prebuilt-npm-*
+	mkdir -p $(shell dirname $(NODE_INSTALL))
+	if [[ $(shell echo $(NODE_PREBUILT_TARBALL) | cut -c 1-4) == "http" ]]; then \
+		echo "Downloading '$(NODE_PREBUILT_BASE)'."; \
+		curl -ksS --fail --connect-timeout 30 -o $(shell dirname $(NODE_INSTALL))/$(NODE_PREBUILT_BASE) $(NODE_PREBUILT_TARBALL); \
+		(cd $(shell dirname $(NODE_INSTALL)) && $(TAR) xf $(NODE_PREBUILT_BASE)); \
+	else \
+		(cd $(shell dirname $(NODE_INSTALL)) && $(TAR) xf $(NODE_PREBUILT_TARBALL)); \
+	fi
+	ln -s $(TOP)/$(NODE_INSTALL)/bin/node $(NODE_EXEC)
+	ln -s $(TOP)/$(NODE_INSTALL)/bin/npm $(NPM_EXEC)
diff --git a/tools/mk/Makefile.targ b/tools/mk/Makefile.targ
new file mode 100644
index 0000000..dac448a
--- /dev/null
+++ b/tools/mk/Makefile.targ
@@ -0,0 +1,345 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.targ: common targets.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This Makefile defines several useful targets and rules. You can use it by
+# including it from a Makefile that specifies some of the variables below.
+#
+# Targets defined in this Makefile:
+#
+#	check	Checks JavaScript files for lint and style
+#		Checks bash scripts for syntax
+#		Checks SMF manifests for validity against the SMF DTD
+#
+#	clean	Removes built files
+#
+#	docs	Builds restdown documentation in docs/
+#
+#	prepush	Depends on "check" and "test"
+#
+#	test	Does nothing (you should override this)
+#
+#	xref	Generates cscope (source cross-reference index)
+#
+# For details on what these targets are supposed to do, see the Joyent
+# Engineering Guide.
+#
+# To make use of these targets, you'll need to set some of these variables. Any
+# variables left unset will simply not be used.
+#
+#	BASH_FILES	Bash scripts to check for syntax
+#			(paths relative to top-level Makefile)
+#
+#	CLEAN_FILES	Files to remove as part of the "clean" target.  Note
+#			that files generated by targets in this Makefile are
+#			automatically included in CLEAN_FILES.  These include
+#			restdown-generated HTML and JSON files.
+#
+#	DOC_FILES	Restdown (documentation source) files. These are
+#			assumed to be contained in "docs/", and must NOT
+#			contain the "docs/" prefix.
+#
+#	JSL_CONF_NODE	Specify JavaScriptLint configuration files
+#	JSL_CONF_WEB	(paths relative to top-level Makefile)
+#
+#			Node.js and Web configuration files are separate
+#			because you'll usually want different global variable
+#			configurations.  If no file is specified, none is given
+#			to jsl, which causes it to use a default configuration,
+#			which probably isn't what you want.
+#
+#	JSL_FILES_NODE	JavaScript files to check with Node config file.
+#	JSL_FILES_WEB	JavaScript files to check with Web config file.
+#
+#	JSON_FILES	JSON files to be validated
+#
+#	JSSTYLE_FILES	JavaScript files to be style-checked
+#
+# You can also override these variables:
+#
+#	BASH		Path to bash (default: "bash")
+#
+#	CSCOPE_DIRS	Directories to search for source files for the cscope
+#			index. (default: ".")
+#
+#	ESLINT		Path to eslint (default: "eslint")
+#
+#	ESLINT_FLAGS	Additional flags to pass through to eslint
+#
+#	JSL		Path to JavaScriptLint (default: "jsl")
+#
+#	JSL_FLAGS_NODE	Additional flags to pass through to JSL
+#	JSL_FLAGS_WEB
+#	JSL_FLAGS
+#
+#	JSON		Path to json tool (default: "json")
+#
+#	JSSTYLE		Path to jsstyle (default: "jsstyle")
+#
+#	JSSTYLE_FLAGS	Additional flags to pass through to jsstyle
+#
+#	RESTDOWN_EXT	By default '.md' is required for DOC_FILES (see above).
+#			If you want to use, say, '.restdown' instead, then set
+#			'RESTDOWN_EXT=.restdown' in your Makefile.
+#
+
+#
+# Defaults for the various tools we use.
+#
+BASH		?= bash
+BASHSTYLE   ?= $(NODE) tools/bashstyle
+CP		?= cp
+CSCOPE		?= cscope
+CSCOPE_DIRS	?= .
+ESLINT		?= eslint
+JSL		?= jsl
+JSON		?= json
+JSSTYLE		?= jsstyle
+MKDIR		?= mkdir -p
+MV		?= mv
+RESTDOWN_FLAGS	?=
+RESTDOWN_EXT	?= .md
+RMTREE		?= rm -rf
+JSL_FLAGS  	?= --nologo --nosummary
+
+ifeq ($(shell uname -s),SunOS)
+	TAR	?= gtar
+else
+	TAR	?= tar
+endif
+
+
+#
+# Defaults for other fixed values.
+#
+BUILD		= build
+DISTCLEAN_FILES += $(BUILD)
+DOC_BUILD	= $(BUILD)/docs/public
+
+#
+# Configure JSL_FLAGS_{NODE,WEB} based on JSL_CONF_{NODE,WEB}.
+#
+ifneq ($(origin JSL_CONF_NODE), undefined)
+	JSL_FLAGS_NODE += --conf=$(JSL_CONF_NODE)
+endif
+
+ifneq ($(origin JSL_CONF_WEB), undefined)
+	JSL_FLAGS_WEB += --conf=$(JSL_CONF_WEB)
+endif
+
+#
+# Targets. For descriptions on what these are supposed to do, see the
+# Joyent Engineering Guide.
+#
+
+#
+# Instruct make to keep around temporary files. We have rules below that
+# automatically update git submodules as needed, but they employ a deps/*/.git
+# temporary file. Without this directive, make tries to remove these .git
+# directories after the build has completed.
+#
+.SECONDARY: $($(wildcard deps/*):%=%/.git)
+
+#
+# This rule enables other rules that use files from a git submodule to have
+# those files depend on deps/module/.git and have "make" automatically check
+# out the submodule as needed.
+#
+deps/%/.git:
+	git submodule update --init deps/$*
+
+#
+# These recipes make heavy use of dynamically-created phony targets. The parent
+# Makefile defines a list of input files like BASH_FILES. We then say that each
+# of these files depends on a fake target called filename.bashchk, and then we
+# define a pattern rule for those targets that runs bash in check-syntax-only
+# mode. This mechanism has the nice properties that if you specify zero files,
+# the rule becomes a noop (unlike a single rule to check all bash files, which
+# would invoke bash with zero files), and you can check individual files from
+# the command line with "make filename.bashchk".
+#
+.PHONY: check-bash
+check-bash: $(BASH_FILES:%=%.bashchk) $(BASH_FILES:%=%.bashstyle)
+
+%.bashchk: %
+	$(BASH) -n $^
+
+%.bashstyle: %
+	$(BASHSTYLE) $^
+
+.PHONY: check-json
+check-json: $(JSON_FILES:%=%.jsonchk)
+
+%.jsonchk: %
+	$(JSON) --validate -f $^
+
+#
+# The above approach can be slow when there are many files to check because it
+# requires that "make" invoke the check tool once for each file, rather than
+# passing in several files at once.  For the JavaScript check targets, we define
+# a variable for the target itself *only if* the list of input files is
+# non-empty.  This avoids invoking the tool if there are no files to check.
+#
+
+ESLINT_TARGET = $(if $(ESLINT_FILES), check-eslint)
+.PHONY: check-eslint
+check-eslint: $(ESLINT_EXEC)
+	$(ESLINT) $(ESLINT_FLAGS) $(ESLINT_FILES)
+
+JSL_NODE_TARGET = $(if $(JSL_FILES_NODE), check-jsl-node)
+.PHONY: check-jsl-node
+check-jsl-node: $(JSL_EXEC)
+	$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_NODE) $(JSL_FILES_NODE)
+
+JSL_WEB_TARGET = $(if $(JSL_FILES_WEB), check-jsl-web)
+.PHONY: check-jsl-web
+check-jsl-web: $(JSL_EXEC)
+	$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_WEB) $(JSL_FILES_WEB)
+
+.PHONY: check-jsl
+check-jsl: $(JSL_NODE_TARGET) $(JSL_WEB_TARGET)
+
+JSSTYLE_TARGET = $(if $(JSSTYLE_FILES), check-jsstyle)
+.PHONY: check-jsstyle
+check-jsstyle:  $(JSSTYLE_EXEC)
+	$(JSSTYLE) $(JSSTYLE_FLAGS) $(JSSTYLE_FILES)
+
+.PHONY: check
+check:: $(ESLINT_TARGET) check-jsl check-json $(JSSTYLE_TARGET) check-bash
+	@echo check ok
+
+.PHONY: clean
+clean::
+	-$(RMTREE) $(CLEAN_FILES)
+
+.PHONY: distclean
+distclean:: clean
+	-$(RMTREE) $(DISTCLEAN_FILES)
+
+CSCOPE_FILES = cscope.in.out cscope.out cscope.po.out
+CLEAN_FILES += $(CSCOPE_FILES)
+
+.PHONY: xref
+xref: cscope.files
+	$(CSCOPE) -bqR
+
+.PHONY: cscope.files
+cscope.files:
+	find $(CSCOPE_DIRS) -name '*.c' -o -name '*.h' -o -name '*.cc' \
+	    -o -name '*.js' -o -name '*.s' -o -name '*.cpp' > $@
+
+#
+# The "docs" target is complicated because we do several things here:
+#
+#    (1) Use restdown to build HTML and JSON files from each of DOC_FILES.
+#
+#    (2) Copy these files into $(DOC_BUILD) (build/docs/public), which
+#        functions as a complete copy of the documentation that could be
+#        mirrored or served over HTTP.
+#
+#    (3) Then copy any directories and media from docs/media into
+#        $(DOC_BUILD)/media. This allows projects to include their own media,
+#        including files that will override same-named files provided by
+#        restdown.
+#
+# Step (3) is the surprisingly complex part: in order to do this, we need to
+# identify the subdirectories in docs/media, recreate them in
+# $(DOC_BUILD)/media, then do the same with the files.
+#
+DOC_MEDIA_DIRS := $(shell find docs/media -type d 2>/dev/null | grep -v "^docs/media$$")
+DOC_MEDIA_DIRS := $(DOC_MEDIA_DIRS:docs/media/%=%)
+DOC_MEDIA_DIRS_BUILD := $(DOC_MEDIA_DIRS:%=$(DOC_BUILD)/media/%)
+
+DOC_MEDIA_FILES := $(shell find docs/media -type f 2>/dev/null)
+DOC_MEDIA_FILES := $(DOC_MEDIA_FILES:docs/media/%=%)
+DOC_MEDIA_FILES_BUILD := $(DOC_MEDIA_FILES:%=$(DOC_BUILD)/media/%)
+
+#
+# Like the other targets, "docs" just depends on the final files we want to
+# create in $(DOC_BUILD), leveraging other targets and recipes to define how
+# to get there.
+#
+.PHONY: docs
+docs::							\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.html)		\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.json)		\
+	$(DOC_MEDIA_FILES_BUILD)
+
+#
+# We keep the intermediate files so that the next build can see whether the
+# files in DOC_BUILD are up to date.
+#
+.PRECIOUS:					\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.html)		\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%json)
+
+#
+# We do clean those intermediate files, as well as all of DOC_BUILD.
+#
+CLEAN_FILES +=					\
+	$(DOC_BUILD)				\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.html)		\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.json)
+
+#
+# Before installing the files, we must make sure the directories exist. The |
+# syntax tells make that the dependency need only exist, not be up to date.
+# Otherwise, it might try to rebuild spuriously because the directory itself
+# appears out of date.
+#
+$(DOC_MEDIA_FILES_BUILD): | $(DOC_MEDIA_DIRS_BUILD)
+
+$(DOC_BUILD)/%: docs/% | $(DOC_BUILD)
+	$(MKDIR) $(shell dirname $@)
+	$(CP) $< $@
+
+docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC) \
+    $(EXTRA_DOC_DEPS)
+	$(RESTDOWN) $(RESTDOWN_FLAGS) -m $(DOC_BUILD) $<
+
+$(DOC_BUILD):
+	$(MKDIR) $@
+
+$(DOC_MEDIA_DIRS_BUILD):
+	$(MKDIR) $@
+
+#
+# The default "test" target does nothing. This should usually be overridden by
+# the parent Makefile. It's included here so we can define "prepush" without
+# requiring the repo to define "test".
+#
+.PHONY: test
+test:
+
+.PHONY: prepush
+prepush: check test
+
+#
+# This rule automatically exposes every "stamp" file as a target that can be
+# invoked manually as "stamp-$STAMP_NAME".  For example, if a stamp has been
+# defined thus:
+#
+#	STAMP_EXPENSIVE_RESULT := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# ... this can be invoked manually as "make stamp-expensive-result".  Note that
+# these phony targets are essentially just for interactive usage.  Targets
+# should be specified to depend on the macro containing the stamp file name.
+#
+# See also the comments in "Makefile.defs".
+#
+stamp-%: $(MAKE_STAMPS_DIR)/%
+	@:
