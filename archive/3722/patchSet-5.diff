From 64df0211f2032b8e7177e36b0c06007da6ea6b03 Mon Sep 17 00:00:00 2001
From: Josh Wilsdon <josh@wilsdon.ca>
Date: Wed, 28 Mar 2018 19:32:23 -0700
Subject: [PATCH] OS-6828 "vmadm sysrq <uuid> nmi" should send NMI to bhyve
 guest Reviewed by: Marsell Kukuljevic <marsell@joyent.com> Approved by: Jason
 King <jason.king@joyent.com>

---
 src/vm/etc/vmadm.completion                  |  9 ++-
 src/vm/man/vmadm.1m.md                       | 13 ++++
 src/vm/node_modules/VM.js                    | 82 +++++++++++++++++---
 src/vm/node_modules/vmload/index.js          |  4 +
 src/vm/node_modules/vmload/vmload-zoneadm.js | 10 ++-
 src/vm/sbin/vmadm.js                         |  4 +-
 src/vm/tests/test-defaults.js                |  4 +-
 src/vm/tests/test-send-recv.js               | 10 ++-
 src/vm/tests/test-vmload-zoneadm.js          |  3 +-
 9 files changed, 117 insertions(+), 22 deletions(-)

diff --git a/src/vm/etc/vmadm.completion b/src/vm/etc/vmadm.completion
index 3d20c7e9..0e9fbc78 100644
--- a/src/vm/etc/vmadm.completion
+++ b/src/vm/etc/vmadm.completion
@@ -5,7 +5,7 @@ _vmadm()
     # NOTE: we don't want the aliases boot,halt,destroy,etc here because we
     # want people to use the 'proper' commands when they can.
     COMMANDS="console create create-snapshot delete delete-snapshot get info list lookup reboot receive reprovision rollback-snapshot send start stop sysrq update validate"
-    BRANDS="joyent joyent-minimal kvm"
+    BRANDS="bhyve joyent joyent-minimal kvm lx"
     cur="${COMP_WORDS[COMP_CWORD]}"
     prev="${COMP_WORDS[COMP_CWORD-1]}"
 
@@ -31,8 +31,9 @@ _vmadm()
     elif [[ ${prev} == 'info'
           || ${prev} == 'sysrq' ]]; then
 
-        # KVM only commands
-        vms_uuids=$(zoneadm list -cp | grep -v ':global:' | grep ":kvm:excl:" | \
+        # kvm/bhyve only commands
+        vms_uuids=$(zoneadm list -cp | grep -v ':global:' | \
+            grep ":[bh]*[ky]v[em]:excl:" | \
             cut -d':' -f5 | sort | uniq)
         COMPREPLY=( $(compgen -W "${vms_uuids}" -- ${cur}) )
 
@@ -42,7 +43,7 @@ _vmadm()
 
         # OS only commands
         vms_uuids=$(zoneadm list -cp | grep -v ':global:' \
-            | grep -v ":kvm:excl:" | cut -d':' -f5 | sort | uniq)
+            | grep -v ":[bh]*[ky]v[em]:excl:" | cut -d':' -f5 | sort | uniq)
         COMPREPLY=( $(compgen -W "${vms_uuids}" -- ${cur}) )
 
     elif [[ ${prev} == 'validate' ]]; then
diff --git a/src/vm/man/vmadm.1m.md b/src/vm/man/vmadm.1m.md
index 9f834232..fe8ff157 100644
--- a/src/vm/man/vmadm.1m.md
+++ b/src/vm/man/vmadm.1m.md
@@ -2175,6 +2175,19 @@ tab-complete UUIDs rather than having to type them out for every command.
         update: no
         default: value of uuid
 
+    zonedid:
+
+        This property will show up in a JSON payload and can be included in
+        list output. It is a value that is used internally to the system and
+        primarily exists to aid debugging. This value will not change when the
+        VM is started/stopped.
+
+        type: integer
+        vmtype: OS,KVM
+        listable: yes
+        create: no
+        update: no
+
     zoneid:
 
         This property will show up in a JSON payload and can be included in
diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index 3c65bb78..ee4fbe72 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -307,10 +307,20 @@ exports.INFO_TYPES = [
     'vnc'
 ];
 
-exports.SYSRQ_TYPES = [
-    'nmi',
-    'screenshot'
-];
+exports.SYSRQ_TYPES = {
+    // all: is used when we're just validating at vmadm, for fail fast
+    all: [
+        'nmi',
+        'screenshot'
+    ],
+    bhyve: [
+        'nmi'
+    ],
+    kvm: [
+        'nmi',
+        'screenshot'
+    ]
+};
 
 exports.COMPRESSION_TYPES = [
     'on',
@@ -14734,6 +14744,47 @@ exports.reboot = function (uuid, options, callback)
     ], callback);
 };
 
+function doBhyveSysrq(vmobj, req, options, callback) {
+    assert.object(vmobj, 'vmobj');
+    assert.number(vmobj.zonedid, 'vmobj.zonedid');
+    assert.string(req, 'req');
+    assert.object(options, 'options');
+    assert.object(options.log, 'options.log');
+    assert.func(callback, 'callback');
+
+    var args = [];
+    var log = options.log;
+    var logLevel = 'debug';
+
+    if (req !== 'nmi') {
+        callback(new Error('Unsupported sysrq "' + req + '"'));
+        return;
+    }
+
+    log.info({vmobj: vmobj}, 'sending NMI to bhyve VM');
+
+    args = [
+        '--vm=SYSbhyve-' + vmobj.zonedid,
+        '--inject-nmi'
+    ];
+
+    execFile('/usr/sbin/bhyvectl', args,
+        function _onBhyvectl(err, stdout, stderr) {
+            if (err) {
+                logLevel = 'error';
+            }
+            log[logLevel]({
+                args: args,
+                err: err,
+                stderr: stderr,
+                stdout: stdout
+            }, 'called bhyvectl to send NMI');
+
+            callback(err);
+        }
+    );
+}
+
 // options is *REQUIRED* for VM.sysrq
 exports.sysrq = function (uuid, req, options, callback)
 {
@@ -14760,7 +14811,8 @@ exports.sysrq = function (uuid, req, options, callback)
     load_fields = [
         'brand',
         'state',
-        'uuid'
+        'uuid',
+        'zonedid'
     ];
 
     /* We load here to ensure this vm exists. */
@@ -14776,17 +14828,29 @@ exports.sysrq = function (uuid, req, options, callback)
             return;
         }
 
-        if (BRAND_OPTIONS[vmobj.brand].features.type !== 'KVM') {
-            callback(new Error('The sysrq command is only supported for KVM.'));
+        if (['bhyve', 'kvm'].indexOf(vmobj.brand) === -1) {
+            callback(new Error('The sysrq command is only supported for VMs '
+                + ' with brand "bhyve" or "kvm".'));
             return;
         }
 
-        if (VM.SYSRQ_TYPES.indexOf(req) === -1) {
+        if (VM.SYSRQ_TYPES[vmobj.brand].indexOf(req) === -1) {
             callback(new Error('Invalid sysrq "' + req + '" valid values: '
-                + '"' + VM.SYSRQ_TYPES.join('","') + '".'));
+                + '"' + VM.SYSRQ_TYPES[vmobj.brand].join('","') + '".'));
             return;
         }
 
+        if (vmobj.brand === 'bhyve') {
+            // ensure we have a logger in the options
+            if (!options.log) {
+                options.log = log;
+            }
+            doBhyveSysrq(vmobj, req, options, callback);
+            return;
+        }
+
+        // else, we're kvm
+
         postVmadmd(vmobj.uuid, 'sysrq', {'request': req}, log, function (e) {
             if (e) {
                 callback(new Error('Unable to post "sysrq" to vmadmd: '
diff --git a/src/vm/node_modules/vmload/index.js b/src/vm/node_modules/vmload/index.js
index fe2daeeb..962e2a41 100644
--- a/src/vm/node_modules/vmload/index.js
+++ b/src/vm/node_modules/vmload/index.js
@@ -697,6 +697,10 @@ function getVmobj(uuid, options, callback)
                 vmobj.zoneid = zoneadm_info.zoneid;
             }
 
+            if (wantField(options, 'zonedid') && zoneadm_info.zonedid !== '-') {
+                vmobj.zonedid = zoneadm_info.zonedid;
+            }
+
             if (wantField(options, 'last_modified')) {
                 if (cache.hasOwnProperty('last_modified')
                     && cache.last_modified.hasOwnProperty(vmobj.uuid)) {
diff --git a/src/vm/node_modules/vmload/vmload-zoneadm.js b/src/vm/node_modules/vmload/vmload-zoneadm.js
index 69ce0d78..76033b7f 100644
--- a/src/vm/node_modules/vmload/vmload-zoneadm.js
+++ b/src/vm/node_modules/vmload/vmload-zoneadm.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright (c) 2014, Joyent, Inc. All rights reserved.
+ * Copyright (c) 2018, Joyent, Inc. All rights reserved.
  *
  */
 
@@ -63,7 +63,8 @@ var rtrim = utils.rtrim;
  *    zonepath: string (path)
  *    uuid: string (UUID)
  *    brand: string
- *    ip_type: string ("exclusive"|"shared")
+ *    ip_type: string ("exclusive"|"shared"),
+ *    zonedid: integer
  * }
  *
  * the passed in callback function will be called with:
@@ -93,6 +94,7 @@ function getZoneRecords(uuid, options, callback)
         var fields;
         var line;
         var obj;
+        var zonedid;
         var zoneid;
 
         buffer += data.toString();
@@ -102,6 +104,7 @@ function getZoneRecords(uuid, options, callback)
             line_count++;
             fields = rtrim(line).split(':');
             if (fields.length === 8) {
+                zonedid = Number(fields[7]);
                 zoneid = Number(fields[0]);
                 obj = {
                     'zoneid': isNaN(zoneid) ? null : zoneid,
@@ -110,7 +113,8 @@ function getZoneRecords(uuid, options, callback)
                     'zonepath': fields[3],
                     'uuid': fields[4],
                     'brand': fields[5],
-                    'ip_type': fields[6]
+                    'ip_type': fields[6],
+                    'zonedid': isNaN(zonedid) ? null : zonedid
                 };
                 log.trace({object: obj}, 'loaded zoneadm object');
                 /*
diff --git a/src/vm/sbin/vmadm.js b/src/vm/sbin/vmadm.js
index 0f2a731a..f6043a54 100755
--- a/src/vm/sbin/vmadm.js
+++ b/src/vm/sbin/vmadm.js
@@ -1075,12 +1075,14 @@ function main(callback)
             usage('Wrong number of parameters to "sysrq"');
         } else {
             type = parsed.argv.remain[0];
-            if (VM.SYSRQ_TYPES.indexOf(type) === -1) {
+            if (VM.SYSRQ_TYPES['all'].indexOf(type) === -1) {
                 usage('Invalid sysrq type: ' + type);
             } else {
                 VM.sysrq(uuid, type, {}, function (err) {
                     if (err) {
                         callback(err);
+                    } else if (type === 'nmi') {
+                        callback(null, 'Sent NMI to VM ' + uuid);
                     } else {
                         callback(null, 'Sent ' + type + ' sysrq to VM ' + uuid);
                     }
diff --git a/src/vm/tests/test-defaults.js b/src/vm/tests/test-defaults.js
index 19a5669a..c541a850 100644
--- a/src/vm/tests/test-defaults.js
+++ b/src/vm/tests/test-defaults.js
@@ -1,4 +1,4 @@
-// Copyright 2014 Joyent, Inc.  All rights reserved.
+// Copyright 2018 Joyent, Inc.  All rights reserved.
 //
 // These tests ensure that default values don't change accidentally.
 //
@@ -216,7 +216,7 @@ function check_values(t, state)
         // the only remaining members we expect are state and zoneid
         if (prop === 'state' || prop === 'zone_state') {
             continue;
-        } else if (prop === 'zoneid') {
+        } else if (prop === 'zoneid' || prop === 'zonedid') {
             continue;
         } else if (state.brand === 'kvm' && prop === 'pid') {
             continue;
diff --git a/src/vm/tests/test-send-recv.js b/src/vm/tests/test-send-recv.js
index 6749fc62..f1d19c1f 100644
--- a/src/vm/tests/test-send-recv.js
+++ b/src/vm/tests/test-send-recv.js
@@ -1,4 +1,4 @@
-// Copyright 2015 Joyent, Inc.  All rights reserved.
+// Copyright 2018 Joyent, Inc.  All rights reserved.
 
 var async = require('/usr/node/node_modules/async');
 var cp = require('child_process');
@@ -179,7 +179,13 @@ var smartos_payload = {
                                     t.ok(true, 'Zone went to state: ' + obj.state);
 
                                     for (prop in vmobj) {
-                                        if (['boot_timestamp', 'last_modified', 'pid', 'zoneid'].indexOf(prop) !== -1) {
+                                        if ([
+                                            'boot_timestamp',
+                                            'last_modified',
+                                            'pid',
+                                            'zonedid',
+                                            'zoneid'
+                                        ].indexOf(prop) !== -1) {
                                             // we expect these properties to be different.
                                             continue;
                                         }
diff --git a/src/vm/tests/test-vmload-zoneadm.js b/src/vm/tests/test-vmload-zoneadm.js
index c871d76c..d1be4385 100644
--- a/src/vm/tests/test-vmload-zoneadm.js
+++ b/src/vm/tests/test-vmload-zoneadm.js
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2014, Joyent, Inc. All rights reserved.
+ * Copyright (c) 2018, Joyent, Inc. All rights reserved.
  *
  */
 
@@ -32,6 +32,7 @@ var simple_tests = [
             + '1:c0f63bf1-aa36-4c78-8c3c-a9cfe3b0001e:running:/zones/c0f63bf1-aa36-4c78-8c3c-a9cfe3b0001e:c0f63bf1-aa36-4c78-8c3c-a9cfe3b0001e:joyent-minimal:excl:1\n',
         json: {
             "c0f63bf1-aa36-4c78-8c3c-a9cfe3b0001e" : {
+                "zonedid" : 1,
                 "zoneid" : 1,
                 "zonename" : "c0f63bf1-aa36-4c78-8c3c-a9cfe3b0001e",
                 "state" : "running",
-- 
2.21.0

