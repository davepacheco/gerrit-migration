From 0445b6ca40c6bd9f71652a40f32f5641b3acc204 Mon Sep 17 00:00:00 2001
From: Dan McDonald <danmcd@joyent.com>
Date: Thu, 31 May 2018 10:11:41 -0400
Subject: [PATCH] Version bump SVP to 2

---
 usr/src/lib/varpd/svp/common/libvarpd_svp.c   |  32 +--
 usr/src/lib/varpd/svp/common/libvarpd_svp.h   |   8 +-
 .../lib/varpd/svp/common/libvarpd_svp_conn.c  | 221 +++++++++++++-----
 .../lib/varpd/svp/common/libvarpd_svp_prot.h  |  27 ++-
 .../varpd/svp/common/libvarpd_svp_remote.c    |  50 +++-
 5 files changed, 252 insertions(+), 86 deletions(-)

diff --git a/usr/src/lib/varpd/svp/common/libvarpd_svp.c b/usr/src/lib/varpd/svp/common/libvarpd_svp.c
index 756199c0e4..946678f1c3 100644
--- a/usr/src/lib/varpd/svp/common/libvarpd_svp.c
+++ b/usr/src/lib/varpd/svp/common/libvarpd_svp.c
@@ -217,20 +217,24 @@
  *                               |
  *                               v                                Socket Error,
  *                       +----------------+                       still in DNS
- *  +----------------<---| SVP_CS_INITIAL |<----------------------*-----+
- *  |                    +----------------+                             |
- *  |                            System  |                              |
- *  | Connection . . . . .       success *               Successful     |
- *  | failed             .               |               connect()      |
- *  |               +----*---------+     |        +-----------*--+      |
- *  |               |              |     |        |              |      |
- *  |               V              ^     v        ^              V      ^
- *  |  +----------------+         +-------------------+     +---------------+
- *  +<-| SVP_CS_BACKOFF |         | SVP_CS_CONNECTING |     | SVP_CS_ACTIVE |
- *  |  +----------------+         +-------------------+     +---------------+
- *  |               V              ^  V                       V  V
- *  | Backoff wait  *              |  |                       |  * Removed
- *  v interval      +--------------+  +-----------------<-----+  | from DNS
+ *  +----------------<---| SVP_CS_INITIAL |<----------------------*--------+
+ *  |                    +----------------+                                |
+ *  |                            System  |                                 |
+ *  | Connection . . . . .       success *     Successful                  |
+ *  | failed             .               |     connect()                   |
+ *  |                    .               |        +-------------------+    |
+ *  |               +----*---------+     |    +-*>| SVP_CS_VERSIONING +    |
+ *  |               |              |     |    |   +-------------------+    |
+ *  |               |              |     |    |          V   V Set version |
+ *  |               |              |     |    |          |   * based on    |
+ *  |               |              |     |    |          |   | SVP_R_PONG  |
+ *  |               V              ^     v    ^          |   V             ^
+ *  |  +----------------+         +-------------------+  |  +---------------+
+ *  +<-| SVP_CS_BACKOFF |         | SVP_CS_CONNECTING |  |  | SVP_CS_ACTIVE |
+ *  |  +----------------+         +-------------------+  |  +---------------+
+ *  |               V              ^  V                  |    V  V
+ *  | Backoff wait  *              |  |                  |    |  * Removed
+ *  v interval      +--------------+  +-----------------<+----+  | from DNS
  *  | finished                        |                          |
  *  |                                 V                          |
  *  |                                 |                          V
diff --git a/usr/src/lib/varpd/svp/common/libvarpd_svp.h b/usr/src/lib/varpd/svp/common/libvarpd_svp.h
index e44f720468..bb3556ba32 100644
--- a/usr/src/lib/varpd/svp/common/libvarpd_svp.h
+++ b/usr/src/lib/varpd/svp/common/libvarpd_svp.h
@@ -118,14 +118,16 @@ typedef enum svp_conn_state {
 	SVP_CS_CONNECTING	= 0x02,
 	SVP_CS_BACKOFF		= 0x03,
 	SVP_CS_ACTIVE		= 0x04,
-	SVP_CS_WINDDOWN		= 0x05
+	SVP_CS_WINDDOWN		= 0x05,
+	SVP_CS_VERSIONING	= 0x06
 } svp_conn_state_t;
 
 typedef enum svp_conn_error {
 	SVP_CE_NONE		= 0x00,
 	SVP_CE_ASSOCIATE	= 0x01,
 	SVP_CE_NOPOLLOUT	= 0x02,
-	SVP_CE_SOCKET		= 0x03
+	SVP_CE_SOCKET		= 0x03,
+	SVP_CE_VERSION_PONG	= 0x04
 } svp_conn_error_t;
 
 typedef enum svp_conn_flags {
@@ -166,6 +168,7 @@ struct svp_conn {
 	list_t			sc_queries;
 	svp_conn_out_t		sc_output;
 	svp_conn_in_t		sc_input;
+	uint_t			sc_version;
 };
 
 typedef enum svp_remote_state {
@@ -345,6 +348,7 @@ extern void svp_remote_resolved(svp_remote_t *, struct addrinfo *);
 extern void svp_host_queue(svp_remote_t *);
 extern void svp_query_release(svp_query_t *);
 extern void svp_query_crc32(svp_req_t *, void *, size_t);
+extern id_t svp_id_alloc(void);
 
 /*
  * Shootdown related
diff --git a/usr/src/lib/varpd/svp/common/libvarpd_svp_conn.c b/usr/src/lib/varpd/svp/common/libvarpd_svp_conn.c
index 5d19f8a388..64f9e64518 100644
--- a/usr/src/lib/varpd/svp/common/libvarpd_svp_conn.c
+++ b/usr/src/lib/varpd/svp/common/libvarpd_svp_conn.c
@@ -40,9 +40,12 @@ typedef enum svp_conn_act {
 	SVP_RA_DEGRADE	= 0x01,
 	SVP_RA_RESTORE	= 0x02,
 	SVP_RA_ERROR	= 0x03,
-	SVP_RA_CLEANUP	= 0x04
+	SVP_RA_CLEANUP	= 0x04,
+	SVP_RA_FIND_VERSION = 0x05
 } svp_conn_act_t;
 
+static svp_conn_act_t svp_conn_poll_connect(port_event_t *, svp_conn_t *);
+
 static void
 svp_conn_inject(svp_conn_t *scp)
 {
@@ -90,6 +93,75 @@ svp_conn_restore(svp_conn_t *scp)
 	srp->sr_ndconns--;
 }
 
+static svp_conn_act_t
+svp_conn_pong_handler(svp_conn_t *scp, svp_query_t *sqp)
+{
+	uint16_t remote_version = ntohs(scp->sc_input.sci_req.svp_ver);
+
+	if (scp->sc_cstate == SVP_CS_VERSIONING) {
+		/* Transition VERSIONING -> ACTIVE. */
+		assert(scp->sc_version == 0);
+		if (remote_version == 0 || remote_version > SVP_CURRENT_VERSION)
+			return (SVP_RA_ERROR);
+		scp->sc_version = remote_version;
+		scp->sc_cstate = SVP_CS_ACTIVE;
+	}
+
+	return (SVP_RA_NONE);
+}
+
+static void
+svp_conn_ping_cb(svp_query_t *sqp, void *arg)
+{
+	size_t len = (size_t)arg;
+
+	assert(len == sizeof (svp_query_t));
+	umem_free(sqp, len);
+}
+
+static svp_conn_act_t
+svp_conn_ping_version(svp_conn_t *scp)
+{
+	svp_remote_t *srp = scp->sc_remote;
+	svp_query_t *sqp = umem_zalloc(sizeof (svp_query_t), UMEM_DEFAULT);
+	int ret;
+
+	assert(MUTEX_HELD(&srp->sr_lock));
+	assert(MUTEX_HELD(&scp->sc_lock));
+	assert(scp->sc_cstate == SVP_CS_CONNECTING);
+
+	if (sqp == NULL)
+		return (SVP_RA_ERROR);
+
+	/* Only set things that need to be non-0/non-NULL. */
+	sqp->sq_state = SVP_QUERY_INIT;
+	sqp->sq_func = svp_conn_ping_cb;
+	sqp->sq_arg = (void *)sizeof (svp_query_t);
+	sqp->sq_header.svp_op = htons(SVP_R_PING);
+	sqp->sq_header.svp_ver = htons(SVP_CURRENT_VERSION);
+	sqp->sq_header.svp_id = svp_id_alloc();
+	if (sqp->sq_header.svp_id == -1) {
+		umem_free(sqp, sizeof (svp_query_t));
+		return (SVP_RA_ERROR);
+	}
+
+	scp->sc_cstate = SVP_CS_VERSIONING;
+	/* Set the event flags now... */
+	scp->sc_event.se_events = POLLIN | POLLRDNORM | POLLHUP | POLLOUT;
+	/* ...so I can just queue it up directly... */
+	svp_conn_queue(scp, sqp);
+	/* ... and then associate the event port myself. */
+	ret = svp_event_associate(&scp->sc_event, scp->sc_socket);
+	if (ret == 0)
+		return (SVP_RA_RESTORE);
+	scp->sc_error = SVP_CE_ASSOCIATE;
+	scp->sc_errno = ret;
+	scp->sc_cstate = SVP_CS_ERROR;
+	list_remove(&scp->sc_queries, sqp);
+	umem_free(sqp, sizeof (svp_query_t));
+	return (SVP_RA_DEGRADE);
+}
+
 static void
 svp_conn_add(svp_conn_t *scp)
 {
@@ -180,6 +252,9 @@ svp_conn_connect(svp_conn_t *scp)
 	if (scp->sc_cstate == SVP_CS_INITIAL)
 		scp->sc_nbackoff = 0;
 
+	/* New connect means we need to know the version. */
+	scp->sc_version = 0;
+
 	scp->sc_socket = socket(AF_INET6, SOCK_STREAM | SOCK_NONBLOCK, 0);
 	if (scp->sc_socket == -1) {
 		scp->sc_error = SVP_CE_SOCKET;
@@ -252,57 +327,54 @@ svp_conn_connect(svp_conn_t *scp)
 		}
 	}
 
-	/*
-	 * We've connected. Successfully move ourselves to the bound
-	 * state and start polling.
-	 */
-	scp->sc_cstate = SVP_CS_ACTIVE;
-	scp->sc_event.se_events = POLLIN | POLLRDNORM | POLLHUP;
-	ret = svp_event_associate(&scp->sc_event, scp->sc_socket);
-	if (ret == 0)
-		return (SVP_RA_RESTORE);
-	scp->sc_error = SVP_CE_ASSOCIATE;
-	scp->sc_cstate = SVP_CS_ERROR;
-
-	return (SVP_RA_DEGRADE);
+	/* Immediately successful connection, move to SVP_CS_VERSIONING. */
+	return (svp_conn_poll_connect(NULL, scp));
 }
 
 /*
- * This should be the first call we get after a connect. If we have successfully
- * connected, we should see a writeable event. We may also see an error or a
- * hang up. In either of these cases, we transition to error mode. If there is
- * also a readable event, we ignore it at the moment and just let a
- * reassociation pick it up so we can simplify the set of state transitions that
- * we have.
+ * This should be the first call we get after a successful synchronous
+ * connect, or a completed (failed or successful) asynchronous connect.  A
+ * non-NULL port-event indicates asynchronous completion, a NULL port-event
+ * indicates a successful synchronous connect.
+ * 
+ * If we have successfully connected, we should see a writeable event.  In the
+ * asynchronous case, we may also see an error or a hang up. For either hang
+ * up or error, we transition to error mode. If there is also a readable event
+ * (i.e. incoming data), we ignore it at the moment and just let a
+ * reassociation pick it up so we can simplify the set of state transitions
+ * that we have.
  */
 static svp_conn_act_t
 svp_conn_poll_connect(port_event_t *pe, svp_conn_t *scp)
 {
-	int ret, err;
-	socklen_t sl = sizeof (err);
-	if (!(pe->portev_events & POLLOUT)) {
-		scp->sc_errno = 0;
-		scp->sc_error = SVP_CE_NOPOLLOUT;
-		scp->sc_cstate = SVP_CS_ERROR;
-		return (SVP_RA_DEGRADE);
-	}
+	int ret;
+	svp_conn_error_t version_error;
 
-	ret = getsockopt(scp->sc_socket, SOL_SOCKET, SO_ERROR, &err, &sl);
-	if (ret != 0)
-		libvarpd_panic("unanticipated getsockopt error");
-	if (err != 0) {
-		return (svp_conn_backoff(scp));
+	if (pe != NULL) {
+		int err;
+		socklen_t sl = sizeof (err);
+
+		/*
+		 * These bits only matter if we're notified of an
+		 * asynchronous connection completion.
+		 */
+		if (!(pe->portev_events & POLLOUT)) {
+			scp->sc_errno = 0;
+			scp->sc_error = SVP_CE_NOPOLLOUT;
+			scp->sc_cstate = SVP_CS_ERROR;
+			return (SVP_RA_DEGRADE);
+		}
+
+		ret = getsockopt(scp->sc_socket, SOL_SOCKET, SO_ERROR, &err,
+		    &sl);
+		if (ret != 0)
+			libvarpd_panic("unanticipated getsockopt error");
+		if (err != 0) {
+			return (svp_conn_backoff(scp));
+		}
 	}
 
-	scp->sc_cstate = SVP_CS_ACTIVE;
-	scp->sc_event.se_events = POLLIN | POLLRDNORM | POLLHUP;
-	ret = svp_event_associate(&scp->sc_event, scp->sc_socket);
-	if (ret == 0)
-		return (SVP_RA_RESTORE);
-	scp->sc_error = SVP_CE_ASSOCIATE;
-	scp->sc_errno = ret;
-	scp->sc_cstate = SVP_CS_ERROR;
-	return (SVP_RA_DEGRADE);
+	return (SVP_RA_FIND_VERSION);
 }
 
 static svp_conn_act_t
@@ -357,7 +429,7 @@ svp_conn_pollout(svp_conn_t *scp)
 
 	do {
 		ret = writev(scp->sc_socket, iov, nvecs);
-	} while (ret == -1 && errno == EAGAIN);
+	} while (ret == -1 && errno == EINTR);
 	if (ret == -1) {
 		switch (errno) {
 		case EAGAIN:
@@ -387,7 +459,7 @@ static boolean_t
 svp_conn_pollin_validate(svp_conn_t *scp)
 {
 	svp_query_t *sqp;
-	uint32_t nsize;
+	uint32_t nsize, expected_size = 0;
 	uint16_t nvers, nop;
 	svp_req_t *resp = &scp->sc_input.sci_req;
 
@@ -397,19 +469,40 @@ svp_conn_pollin_validate(svp_conn_t *scp)
 	nop = ntohs(resp->svp_op);
 	nsize = ntohl(resp->svp_size);
 
-	if (nvers != SVP_CURRENT_VERSION) {
-		(void) bunyan_warn(svp_bunyan, "unsupported version",
+	/*
+	 * A peer that's messing with post-connection version changes is
+	 * likely a broken peer.
+	 */
+	if (scp->sc_cstate != SVP_CS_VERSIONING && nvers != scp->sc_version) {
+		(void) bunyan_warn(svp_bunyan, "version mismatch",
 		    BUNYAN_T_IP, "remote_ip", &scp->sc_addr,
 		    BUNYAN_T_INT32, "remote_port", scp->sc_remote->sr_rport,
-		    BUNYAN_T_INT32, "version", nvers,
+		    BUNYAN_T_INT32, "peer version", nvers,
+		    BUNYAN_T_INT32, "our version", scp->sc_version,
 		    BUNYAN_T_INT32, "operation", nop,
 		    BUNYAN_T_INT32, "response_id", resp->svp_id,
 		    BUNYAN_T_END);
 		return (B_FALSE);
 	}
 
-	if (nop != SVP_R_VL2_ACK && nop != SVP_R_VL3_ACK &&
-	    nop != SVP_R_LOG_ACK && nop != SVP_R_LOG_RM_ACK) {
+	switch (nop) {
+	case SVP_R_VL2_ACK:
+		expected_size = sizeof (svp_vl2_ack_t);
+		break;
+	case SVP_R_VL3_ACK:
+		expected_size = sizeof (svp_vl3_ack_t);
+		break;
+	case SVP_R_LOG_RM_ACK:
+		expected_size = sizeof (svp_lrm_ack_t);
+		break;
+	case SVP_R_ROUTE_ACK:
+		expected_size = sizeof (svp_route_ack_t);
+		break;
+	case SVP_R_LOG_ACK:
+	case SVP_R_PONG:
+		/* No expected size (LOG_ACK) or size is 0 (PONG). */
+		break;
+	default:
 		(void) bunyan_warn(svp_bunyan, "unsupported operation",
 		    BUNYAN_T_IP, "remote_ip", &scp->sc_addr,
 		    BUNYAN_T_INT32, "remote_port", scp->sc_remote->sr_rport,
@@ -445,9 +538,7 @@ svp_conn_pollin_validate(svp_conn_t *scp)
 		return (B_FALSE);
 	}
 
-	if ((nop == SVP_R_VL2_ACK && nsize != sizeof (svp_vl2_ack_t)) ||
-	    (nop == SVP_R_VL3_ACK && nsize != sizeof (svp_vl3_ack_t)) ||
-	    (nop == SVP_R_LOG_RM_ACK && nsize != sizeof (svp_lrm_ack_t))) {
+	if (nop != SVP_R_LOG_RM_ACK && nsize != expected_size) {
 		(void) bunyan_warn(svp_bunyan, "response size too large",
 		    BUNYAN_T_IP, "remote_ip", &scp->sc_addr,
 		    BUNYAN_T_INT32, "remote_port", scp->sc_remote->sr_rport,
@@ -492,7 +583,8 @@ svp_conn_pollin_validate(svp_conn_t *scp)
 	sqp->sq_size = nsize;
 	scp->sc_input.sci_query = sqp;
 	if (nop == SVP_R_VL2_ACK || nop == SVP_R_VL3_ACK ||
-	    nop == SVP_R_LOG_RM_ACK) {
+	    nop == SVP_R_LOG_RM_ACK || nop == SVP_R_ROUTE_ACK ||
+	    nop == SVP_R_PONG) {
 		sqp->sq_wdata = &sqp->sq_wdun;
 		sqp->sq_wsize = sizeof (svp_query_data_t);
 	} else {
@@ -582,7 +674,7 @@ svp_conn_pollin(svp_conn_t *scp)
 		default:
 			libvarpd_panic("unexpeted read errno: %d", errno);
 		}
-	} else if (ret == 0) {
+	} else if (ret == 0 && total - off > 0) {
 		/* Try to reconnect to the remote host */
 		return (SVP_RA_ERROR);
 	}
@@ -626,6 +718,20 @@ svp_conn_pollin(svp_conn_t *scp)
 	} else if (nop == SVP_R_LOG_RM_ACK) {
 		svp_lrm_ack_t *svra = sqp->sq_wdata;
 		sqp->sq_status = ntohl(svra->svra_status);
+	} else if (nop == SVP_R_ROUTE_ACK) {
+		svp_route_ack_t *sra = sqp->sq_wdata;
+		sqp->sq_status = ntohl(sra->sra_status);
+	} else if (nop == SVP_R_PONG) {
+		/*
+		 * Handle the PONG versioning-capture here, as we need
+		 * the version number, the scp_lock held, and the ability
+		 * to error out.
+		 */
+		svp_conn_act_t cbret;
+
+		cbret = svp_conn_pong_handler(scp, sqp);
+		if (cbret != SVP_RA_NONE)
+			return (cbret);
 	} else {
 		libvarpd_panic("unhandled nop: %d", nop);
 	}
@@ -737,6 +843,7 @@ svp_conn_handler(port_event_t *pe, void *arg)
 		assert(pe != NULL);
 		ret = svp_conn_poll_connect(pe, scp);
 		break;
+	case SVP_CS_VERSIONING:
 	case SVP_CS_ACTIVE:
 	case SVP_CS_WINDDOWN:
 		assert(pe != NULL);
@@ -774,6 +881,9 @@ out:
 
 	mutex_enter(&srp->sr_lock);
 	mutex_enter(&scp->sc_lock);
+	if (ret == SVP_RA_FIND_VERSION)
+		ret = svp_conn_ping_version(scp);
+
 	if (ret == SVP_RA_ERROR)
 		ret = svp_conn_reset(scp);
 
@@ -1015,7 +1125,8 @@ void
 svp_conn_queue(svp_conn_t *scp, svp_query_t *sqp)
 {
 	assert(MUTEX_HELD(&scp->sc_lock));
-	assert(scp->sc_cstate == SVP_CS_ACTIVE);
+	assert(scp->sc_cstate == SVP_CS_ACTIVE ||
+	    scp->sc_cstate == SVP_CS_VERSIONING);
 
 	sqp->sq_acttime = -1;
 	list_insert_tail(&scp->sc_queries, sqp);
diff --git a/usr/src/lib/varpd/svp/common/libvarpd_svp_prot.h b/usr/src/lib/varpd/svp/common/libvarpd_svp_prot.h
index ca16c21886..7a3f47f979 100644
--- a/usr/src/lib/varpd/svp/common/libvarpd_svp_prot.h
+++ b/usr/src/lib/varpd/svp/common/libvarpd_svp_prot.h
@@ -35,8 +35,12 @@ extern "C" {
 
 #define	SVP_VERSION_ONE	1
 #define	SVP_VERSION_TWO	2
-/* XXX KEBE SAYS -- we are not yet ready to bump this. */
-#define	SVP_CURRENT_VERSION	SVP_VERSION_ONE
+/*
+ * Bump this to 2.  Version 1 SVP is a subset of version 2, and can be
+ * determined using an SVP_R_PING as part of connection establishment.
+ * Version-2 specific changes will be highlighed (look for "v2").
+ */
+#define	SVP_CURRENT_VERSION	SVP_VERSION_TWO
 
 typedef struct svp_req {
 	uint16_t	svp_ver;
@@ -46,6 +50,10 @@ typedef struct svp_req {
 	uint32_t	svp_crc32;
 } svp_req_t;
 
+/*
+ * Unless specified, all message types function identically between v1 and v2
+ * of SVP.
+ */
 typedef enum svp_op {
 	SVP_R_UNKNOWN		= 0x00,
 	SVP_R_PING		= 0x01,
@@ -56,13 +64,13 @@ typedef enum svp_op {
 	SVP_R_VL3_ACK		= 0x06,
 	SVP_R_BULK_REQ		= 0x07,
 	SVP_R_BULK_ACK		= 0x08,
-	SVP_R_LOG_REQ		= 0x09,
-	SVP_R_LOG_ACK		= 0x0A,
+	SVP_R_LOG_REQ		= 0x09,	/* v2 introduces new log type */
+	SVP_R_LOG_ACK		= 0x0A, /* See svp_log_route_t */
 	SVP_R_LOG_RM		= 0x0B,
 	SVP_R_LOG_RM_ACK	= 0x0C,
 	SVP_R_SHOOTDOWN		= 0x0D,
-	SVP_R_ROUTE_REQ		= 0x0E,
-	SVP_R_ROUTE_ACK		= 0x0F
+	SVP_R_ROUTE_REQ		= 0x0E,	/* v2 only */
+	SVP_R_ROUTE_ACK		= 0x0F	/* v2 only */
 } svp_op_t;
 
 typedef enum svp_status {
@@ -174,7 +182,7 @@ typedef struct svp_log_req {
 typedef enum svp_log_type {
 	SVP_LOG_VL2	= 0x01,
 	SVP_LOG_VL3	= 0x02,
-	SVP_LOG_ROUTE	= 0x03
+	SVP_LOG_ROUTE	= 0x03	/* v2 only */
 } svp_log_type_t;
 
 typedef struct svp_log_vl2 {
@@ -194,6 +202,9 @@ typedef struct svp_log_vl3 {
 	uint32_t	svl3_vnetid;
 } svp_log_vl3_t;
 
+/*
+ * This log entry only appears on v2 connections.
+ */
 typedef struct svp_log_route {
 	uint32_t	svlr_type;	/* Should be SVP_LOG_ROUTE */
 	uint8_t		svlr_id[16];	/* 16-byte UUID */
@@ -255,6 +266,8 @@ typedef struct svp_shootdown {
  * far-remote networks.  Modern overlay modules will request IP destinations
  * for remote-Triton networks, but they must know how to reach the
  * remote-Triton SVP server.
+ *
+ * NOTE: SVP_R_ROUTE_{REQ,ACK} are only present in SVP v2.
  */
 typedef struct svp_route_req {
 	uint32_t	srr_vnetid;	/* Requester's vnet ID. */
diff --git a/usr/src/lib/varpd/svp/common/libvarpd_svp_remote.c b/usr/src/lib/varpd/svp/common/libvarpd_svp_remote.c
index 50e31b6e97..5a951f1888 100644
--- a/usr/src/lib/varpd/svp/common/libvarpd_svp_remote.c
+++ b/usr/src/lib/varpd/svp/common/libvarpd_svp_remote.c
@@ -48,6 +48,12 @@ static svp_timer_t svp_dns_timer;
 static id_space_t *svp_idspace;
 static int svp_dns_timer_rate = 30;	/* seconds */
 
+id_t
+svp_id_alloc(void)
+{
+	return (id_alloc(svp_idspace));
+}
+
 static void
 svp_remote_mkfmamsg(svp_remote_t *srp, svp_degrade_state_t state, char *buf,
     size_t buflen)
@@ -279,8 +285,40 @@ svp_remote_detach(svp_t *svp)
 }
 
 /*
- * Walk the list of connections and find the first one that's available, the
- * move it to the back of the list so it's less likely to be used again.
+ * See if the request can be sent over the connection's supported version.
+ * Scribble the version in the request itself.  NOTE that we do not check the
+ * version that already exists in sqp->sq_header.svp_ver, as we may be called
+ * from svp_remote_reassign() (and change versions when arriving at a new
+ * connection).
+ */
+static boolean_t
+svp_outbound_version_check(int version, svp_query_t *sqp)
+{
+	uint16_t op = htons(sqp->sq_header.svp_op);
+
+	/*
+	 * As of v1 -> v2, we really only need to restrict SVP_R_ROUTE_REQ
+	 * as v2-only.  Reflect that here.
+	 *
+	 * NOTE that if any message semantics change between future versions,
+	 * (e.g. "in v3 SVP_R_VL2_REQ takes on additional work"), we'll
+	 * need to more-deeply inspect the query.  It's possible that the
+	 * svp_op space is big enough to just continue op-only inspections.
+	 */
+
+	assert(version > 0 && version <= SVP_CURRENT_VERSION);
+
+	if (op != SVP_R_ROUTE_REQ || version >= SVP_VERSION_TWO) {
+		sqp->sq_header.svp_ver = htons(version);
+		return (B_TRUE);
+	}
+	return (B_FALSE);
+}
+
+/*
+ * Walk the list of connections and find the first one that's available AND
+ * version-appropriate for the message, then move the matched connection to
+ * the back of the list so it's less likely to be used again.
  */
 static boolean_t
 svp_remote_conn_queue(svp_remote_t *srp, svp_query_t *sqp)
@@ -291,7 +329,8 @@ svp_remote_conn_queue(svp_remote_t *srp, svp_query_t *sqp)
 	for (scp = list_head(&srp->sr_conns); scp != NULL;
 	    scp = list_next(&srp->sr_conns, scp)) {
 		mutex_enter(&scp->sc_lock);
-		if (scp->sc_cstate != SVP_CS_ACTIVE) {
+		if (scp->sc_cstate != SVP_CS_ACTIVE ||
+		    !svp_outbound_version_check(scp->sc_version, sqp)) {
 			mutex_exit(&scp->sc_lock);
 			continue;
 		}
@@ -331,7 +370,6 @@ svp_remote_vl2_lookup(svp_t *svp, svp_query_t *sqp, const uint8_t *mac,
 	sqp->sq_arg = arg;
 	sqp->sq_svp = svp;
 	sqp->sq_state = SVP_QUERY_INIT;
-	sqp->sq_header.svp_ver = htons(SVP_CURRENT_VERSION);
 	sqp->sq_header.svp_op = htons(SVP_R_VL2_REQ);
 	sqp->sq_header.svp_size = htonl(sizeof (svp_vl2_req_t));
 	sqp->sq_header.svp_id = id_alloc(svp_idspace);
@@ -383,7 +421,6 @@ svp_remote_route_lookup(svp_t *svp, svp_query_t *sqp,
 	sqp->sq_arg = arg;
 	sqp->sq_svp = svp;
 	sqp->sq_state = SVP_QUERY_INIT;
-	sqp->sq_header.svp_ver = htons(SVP_CURRENT_VERSION);
 	sqp->sq_header.svp_op = htons(SVP_R_ROUTE_REQ);
 	sqp->sq_header.svp_size = htonl(sizeof (svp_route_req_t));
 	sqp->sq_header.svp_id = id_alloc(svp_idspace);
@@ -435,7 +472,6 @@ svp_remote_vl3_common(svp_remote_t *srp, svp_query_t *sqp,
 	sqp->sq_func = func;
 	sqp->sq_arg = arg;
 	sqp->sq_state = SVP_QUERY_INIT;
-	sqp->sq_header.svp_ver = htons(SVP_CURRENT_VERSION);
 	sqp->sq_header.svp_op = htons(SVP_R_VL3_REQ);
 	sqp->sq_header.svp_size = htonl(sizeof (svp_vl3_req_t));
 	sqp->sq_header.svp_id = id_alloc(svp_idspace);
@@ -517,7 +553,6 @@ svp_remote_log_request(svp_remote_t *srp, svp_query_t *sqp, void *buf,
 	sqp->sq_func = svp_remote_log_request_cb;
 	sqp->sq_state = SVP_QUERY_INIT;
 	sqp->sq_arg = srp;
-	sqp->sq_header.svp_ver = htons(SVP_CURRENT_VERSION);
 	sqp->sq_header.svp_op = htons(SVP_R_LOG_REQ);
 	sqp->sq_header.svp_size = htonl(sizeof (svp_log_req_t));
 	sqp->sq_header.svp_id = id_alloc(svp_idspace);
@@ -563,7 +598,6 @@ svp_remote_lrm_request(svp_remote_t *srp, svp_query_t *sqp, void *buf,
 	sqp->sq_func = svp_remote_lrm_request_cb;
 	sqp->sq_state = SVP_QUERY_INIT;
 	sqp->sq_arg = srp;
-	sqp->sq_header.svp_ver = htons(SVP_CURRENT_VERSION);
 	sqp->sq_header.svp_op = htons(SVP_R_LOG_RM);
 	sqp->sq_header.svp_size = htonl(buflen);
 	sqp->sq_header.svp_id = id_alloc(svp_idspace);
-- 
2.21.0

