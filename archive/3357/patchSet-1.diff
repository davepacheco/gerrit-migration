commit 464c959ceb13ce147a25ca522dce9d04d9691276 (refs/changes/57/3357/1)
Author: Orlando Vazquez <ovazquez@gmail.com>
Date:   2018-02-13T13:06:51-08:00 (1 year, 8 months ago)
    
    TRITON-122 docker tests can end up with a lot of binary data in the output process invoked by execPlus function fails

diff --git a/test/integration/cli-copy.test.js b/test/integration/cli-copy.test.js
index 37ac311..4949f74 100644
--- a/test/integration/cli-copy.test.js
+++ b/test/integration/cli-copy.test.js
@@ -615,7 +615,8 @@ function copyFileOut(tt, remotefn, localfn, containerName, callback) {
         'cp "%s:%s" - | tar xOf - "%s"',
         containerName, remotefn, localfn);
     var execOpts = { maxBuffer: 1024*1024+1, encoding: 'binary' };
-    cli.docker(args, { execOpts: execOpts }, onDocker);
+    cli.docker(args, {
+        noStdoutOnError: true, execOpts: execOpts }, onDocker);
     function onDocker(err, stdout, stderr) {
         tt.ifErr(err);
         var str = stdout.toString();
diff --git a/test/integration/helpers.js b/test/integration/helpers.js
index 8536f23..9596a90 100644
--- a/test/integration/helpers.js
+++ b/test/integration/helpers.js
@@ -828,6 +828,8 @@ GzDockerEnv.prototype.exec = function denvExec(cmd, opts, cb) {
         // TODO: escaping single-quotes
         command: fmt('zlogin %s \'%s\'', this.clientZone.uuid, cmd),
         log: this.log,
+        noStdoutOnError: opts.noStdoutOnError,
+        noStderrOnError: opts.noStderrOnError,
         execOpts: opts.execOpts
     }, cb);
 };
diff --git a/test/lib/common.js b/test/lib/common.js
index c6f2e69..aef6a42 100644
--- a/test/lib/common.js
+++ b/test/lib/common.js
@@ -93,6 +93,8 @@ function execPlus(args, cb) {
     assert.string(args.command, 'args.command');
     assert.optionalString(args.errMsg, 'args.errMsg');
     assert.optionalObject(args.execOpts, 'args.execOpts');
+    assert.optionalBool(args.noStdoutOnErr, 'args.noStdoutOnErr');
+    assert.optionalBool(args.noStderrOnErr, 'args.noStderrOnErr');
     assert.object(args.log, 'args.log');
     assert.func(cb);
     var command = args.command;
@@ -104,6 +106,13 @@ function execPlus(args, cb) {
         args.log.trace({exec: true, command: command, execOpts: execOpts,
             err: err, stdout: stdout, stderr: stderr}, 'exec done');
         if (err) {
+
+            var renderedStdout = (args.noStdoutOnError
+                ? '<stdout elided>' : stdout.trim());
+
+            var renderedStderr = (args.noStderrOnError
+                ? '<stderr elided>' : stderr.trim());
+
             cb(
                 new VError(err,
                     '%s:\n'
@@ -112,7 +121,7 @@ function execPlus(args, cb) {
                     + '\tstdout:\n%s\n'
                     + '\tstderr:\n%s',
                     args.errMsg || 'exec error', command, err.code,
-                    stdout.trim(), stderr.trim()),
+                    renderedStdout, renderedStderr),
                 stdout, stderr);
         } else {
             cb(null, stdout, stderr);
