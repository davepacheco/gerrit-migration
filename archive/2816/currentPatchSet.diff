From 9db250f68cf0998917fdc9224b900c9f743e40eb Mon Sep 17 00:00:00 2001
From: Mike Zeller <mike@mikezeller.net>
Date: Thu, 19 Oct 2017 03:19:52 +0000
Subject: [PATCH] OS-5815 lxbrand should support MCAST_JOIN_GROUP

---
 .../uts/common/brand/lx/syscall/lx_socket.c   | 93 ++++++++++++++++++-
 1 file changed, 91 insertions(+), 2 deletions(-)

diff --git a/usr/src/uts/common/brand/lx/syscall/lx_socket.c b/usr/src/uts/common/brand/lx/syscall/lx_socket.c
index 891dd33d1a..d17bb8914c 100644
--- a/usr/src/uts/common/brand/lx/syscall/lx_socket.c
+++ b/usr/src/uts/common/brand/lx/syscall/lx_socket.c
@@ -48,6 +48,7 @@
 #include <netpacket/packet.h>
 #include <sockcommon.h>
 #include <socktpi_impl.h>
+#include <sys/socket_impl.h>
 #include <netinet/udp.h>
 #include <sys/sdt.h>
 #include <netinet/tcp.h>
@@ -82,6 +83,32 @@ typedef struct lx_socket_aux_data
 	uint_t lxsad_flags;
 } lx_socket_aux_data_t;
 
+#define	LX_SS_MAXSIZE	128
+
+typedef struct lx_sockaddr_storage {
+	unsigned short	lxss_family;
+	char		lxdata[LX_SS_MAXSIZE - sizeof (unsigned short)];
+} lx_sockaddr_storage_t;
+
+typedef struct lx_group_req {
+	uint32_t	lxgr_interface;
+#ifdef _LP64  /* 64-bit kernel compilation */
+	uint32_t	lxgr_reserved;  /* satisfy Linux 64-bit requirements. */
+#endif
+	lx_sockaddr_storage_t	lxgr_group;
+} lx_group_req_t;
+
+#if defined(_SYSCALL32_IMPL)
+
+#pragma pack(4)
+typedef struct lx_group_req32 {
+	uint32_t		lxgr_interface;
+	lx_sockaddr_storage_t	lxgr_group;
+} lx_group_req32_t;
+#pragma pack()
+
+#endif /* defined(_SYSCALL32_IMPL) */
+
 /* lxsad_flags */
 #define	LXSAD_FL_STRCRED	0x1
 #define	LXSAD_FL_EMULSEQPKT	0x2
@@ -2469,10 +2496,10 @@ static const lx_sockopt_map_t ltos_ip_sockopts[LX_IP_UNICAST_IF + 1] = {
 	{ IP_ADD_SOURCE_MEMBERSHIP, 0 },	/* IP_ADD_SOURCE_MEMBERSHIP */
 	{ OPTNOTSUP, 0 },			/* IP_DROP_SOURCE_MEMBERSHIP */
 	{ OPTNOTSUP, 0 },			/* IP_MSFILTER		*/
-	{ OPTNOTSUP, 0 },			/* MCAST_JOIN_GROUP	*/
+	{ MCAST_JOIN_GROUP, sizeof (int) },	/* MCAST_JOIN_GROUP	*/
 	{ OPTNOTSUP, 0 },			/* MCAST_BLOCK_SOURCE	*/
 	{ OPTNOTSUP, 0 },			/* MCAST_UNBLOCK_SOURCE	*/
-	{ OPTNOTSUP, 0 },			/* MCAST_LEAVE_GROUP	*/
+	{ MCAST_LEAVE_GROUP, sizeof (int) },	/* MCAST_LEAVE_GROUP	*/
 	{ OPTNOTSUP, 0 },			/* MCAST_JOIN_SOURCE_GROUP */
 	{ OPTNOTSUP, 0 },			/* MCAST_LEAVE_SOURCE_GROUP */
 	{ OPTNOTSUP, 0 },			/* MCAST_MSFILTER	*/
@@ -2827,6 +2854,68 @@ lx_setsockopt_ip(sonode_t *so, int optname, void *optval, socklen_t optlen)
 		optlen = sizeof (uchar_t);
 		break;
 
+	case LX_MCAST_JOIN_GROUP:
+	case LX_MCAST_LEAVE_GROUP: {
+		struct group_req gr;
+		lx_sockaddr_storage_t *lxss;
+		sa_family_t ss_family;
+
+		/*
+		 * For MCAST_JOIN_GROUP and MCAST_LEAVE_GROUP, Linux uses a
+		 * gr_group that has a different size from the native gr_group.
+		 * We need to translate to the native gr_group taking special
+		 * care to do the right thing when dealing with a 32bit program
+		 * making a call into a 64bit kernel.
+		 */
+
+		bzero(&gr, sizeof (gr));
+
+#if defined(_SYSCALL32_IMPL)
+		if (get_udatamodel() != DATAMODEL_NATIVE) {
+			if (optlen != sizeof (lx_group_req32_t)) {
+				return (EINVAL);
+			}
+
+			lx_group_req32_t *lxgr = optval;
+
+			/* use the 32-bit type */
+			gr.gr_interface = lxgr->lxgr_interface;
+			lxss = &lxgr->lxgr_group;
+		} else
+#endif /* defined(_SYSCALL32_IMPL) */
+		{
+			if (optlen != sizeof (lx_group_req_t)) {
+				return (EINVAL);
+			}
+
+			lx_group_req_t *lxgr = optval;
+
+			/* use the "native" type */
+			gr.gr_interface = lxgr->lxgr_interface;
+			lxss = &lxgr->lxgr_group;
+		}
+
+		/* translate ss_family from lx to native */
+		switch (lxss->lxss_family) {
+		case LX_AF_INET:
+			lxss->lxss_family = AF_INET;
+		case LX_AF_INET6:
+			lxss->lxss_family = AF_INET6;
+		default:
+			return (EINVAL);
+		}
+
+		bcopy(lxss, &(gr.gr_group), sizeof (lxss));
+
+		optlen = sizeof (gr);
+		optname = (optname == LX_MCAST_JOIN_GROUP) ?
+		    MCAST_JOIN_GROUP : MCAST_LEAVE_GROUP;
+
+		error = socket_setsockopt(so, IPPROTO_IP, optname, &gr,
+		    optlen, CRED());
+		return (error);
+	}
+
 	default:
 		break;
 	}
-- 
2.21.0

