From 109b303f5617b5ac2cbc55c7862b4226c8ba0882 Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Wed, 21 Dec 2016 14:36:04 +0100
Subject: [PATCH] WORKFLOW-215 error when creating jobs: "j.workflow" is
 required Reviewed by: Richard Kiene <richard.kiene@joyent.com>

---
 CHANGES.md       |  6 ++++++
 lib/wf-client.js | 28 ++++++++++++++++++++++------
 package.json     |  2 +-
 3 files changed, 29 insertions(+), 7 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index acb7faa..a90d75b 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -2,6 +2,12 @@
 
 ## not yet released
 
+## 0.2.1
+
+- Always log details about the preloaded workflows uuids. Avoid hitting wf-api
+when we do not have a workflow uuid for `createJob`.
+
+
 ## 0.2.0
 
 - Support for building against node v4 without build errors/warnings.
diff --git a/lib/wf-client.js b/lib/wf-client.js
index 0dff752..857c3e3 100644
--- a/lib/wf-client.js
+++ b/lib/wf-client.js
@@ -69,7 +69,9 @@ WfClient.prototype.initWorkflows = function (callback) {
             log.debug('wfapi: connected');
         }
 
-        callback(err);
+        if (callback) {
+            callback(err);
+        }
     });
 
     retry.setStrategy(new backoff.ExponentialStrategy({
@@ -122,7 +124,9 @@ WfClient.prototype.loadWorkflow = function (wf, cb) {
     var wfName = (wf + '-' + file.version) || file.name;
 
     function callback(err) {
-        if (cb) { cb(err); }
+        if (cb) {
+            cb(err);
+        }
     }
 
     function create() {
@@ -130,7 +134,7 @@ WfClient.prototype.loadWorkflow = function (wf, cb) {
             if (aerr) {
                 self.log.error(aerr, 'Error adding ' + wfName);
             } else {
-                self.log.debug(wfName + ' workflow added');
+                self.log.info(wfName + ' workflow added (' + uuid + ')');
                 self.uuids[wf] = uuid;
             }
 
@@ -144,7 +148,7 @@ WfClient.prototype.loadWorkflow = function (wf, cb) {
             if (aerr) {
                 self.log.error(aerr, 'Error updating ' + wfName);
             } else {
-                self.log.debug(wfName + ' workflow updated');
+                self.log.info(wfName + ' workflow updated (' + uuid + ')');
                 self.uuids[wf] = uuid;
             }
 
@@ -162,7 +166,7 @@ WfClient.prototype.loadWorkflow = function (wf, cb) {
                 self.log.debug('Updating ' + wfName);
                 update(obj.uuid);
             } else {
-                self.log.debug(wfName + ' workflow exists');
+                self.log.info(wfName + ' workflow exists (' + obj.uuid + ')');
                 self.uuids[wf] = obj.uuid;
                 callback(null);
             }
@@ -423,11 +427,23 @@ WfClient.prototype.createJob = function () {
     var self = this;
     params.workflow = params.workflow || self.uuids[wf];
 
+    // If the workflow is missing at this point, we will fail here without
+    // hitting wf-api:
+    if (!params.workflow) {
+        self.log.error({
+            wf: wf,
+            uuids: self.uuids
+        }, 'Cannot load wf uuid');
+
+        return cb(new Error('workflow uuid is not specified and cannot be ' +
+            'loaded from wfapi client uuids'));
+    }
+
     opts = { path: '/jobs' };
     if (options && options.headers) {
         opts.headers = options.headers;
     }
-    this.client.post(opts, params, function (err, req, res, job) {
+    return this.client.post(opts, params, function (err, req, res, job) {
         if (err) {
             return cb(err);
         }
diff --git a/package.json b/package.json
index b6525d9..32d403a 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "wf-client",
   "description": "a node.js client for the Triton core Workflow API service",
-  "version": "0.2.0",
+  "version": "0.2.1",
   "author": "Joyent (joyent.com)",
   "main": "./lib/wf-client.js",
   "dependencies": {
-- 
2.21.0

