From df9f9d2bd826e2c8ff13ce4b0d07647a838c6296 Mon Sep 17 00:00:00 2001
From: Orlando Vazquez <ovazquez@gmail.com>
Date: Thu, 15 Dec 2016 14:16:59 -0800
Subject: [PATCH] AGENT-1050 docker exec interactive terminal hangs after a
 while

---
 bin/docker-build.js | 121 +++++++++++++++++++++++++-------------------
 lib/docker-stdio.js |  83 ++++++++++++++++--------------
 lib/linestream.js   |  72 --------------------------
 package.json        |   1 +
 4 files changed, 117 insertions(+), 160 deletions(-)
 delete mode 100644 lib/linestream.js

diff --git a/bin/docker-build.js b/bin/docker-build.js
index cdacea1..ec7c5e7 100644
--- a/bin/docker-build.js
+++ b/bin/docker-build.js
@@ -30,7 +30,7 @@ var rimraf = require('rimraf');
 var sprintf = require('sprintf').sprintf;
 var zfs = require('zfs').zfs;
 
-var LineStream = require('../lib/linestream');
+var LineStream = require('lstream');
 var smartDcConfig = require('../lib/task_agent/smartdc-config');
 
 
@@ -330,31 +330,41 @@ function buildFromContext(opts, callback) {
     // to a request the build system has made.
     var buildEventStream = new LineStream();
     socket.pipe(buildEventStream);
-    buildEventStream.on('line', function (event) {
-        log.debug('client event received: %j', event);
-        var id;
-        var cbEvent;
-        try {
-            event = JSON.parse(event);
-        } catch (e) {
-            log.error('Build: invalid json: %s - ignoring', event);
-            return;
-        }
-        switch (event.type) {
-            case 'callback':
-                id = event.messageId;
-                cbEvent = pendingCallbackEvents[id];
-                assert.object(cbEvent, 'cbEvent with messageId ' + id);
-                delete pendingCallbackEvents[id];
-                if (event.error) {
-                    cbEvent.callback(new Error(event.error));
-                } else {
-                    cbEvent.callback(null, event.result);
-                }
-                break;
-            default:
-                log.error('Unhandled socket event - ignoring: %j', event);
-                break;
+
+    buildEventStream.on('readable', function buildFromContextOnReadable() {
+        var line;
+
+        while ((line = buildEventStream.read()) != null) {
+            line = line.trim();
+            if (!line) {
+                continue;
+            }
+
+            log.debug('client event received: %j', event);
+            var id;
+            var cbEvent;
+            try {
+                event = JSON.parse(event);
+            } catch (e) {
+                log.error('Build: invalid json: %s - ignoring', event);
+                continue;
+            }
+            switch (event.type) {
+                case 'callback':
+                    id = event.messageId;
+                    cbEvent = pendingCallbackEvents[id];
+                    assert.object(cbEvent, 'cbEvent with messageId ' + id);
+                    delete pendingCallbackEvents[id];
+                    if (event.error) {
+                        cbEvent.callback(new Error(event.error));
+                    } else {
+                        cbEvent.callback(null, event.result);
+                    }
+                    break;
+                default:
+                    log.error('Unhandled socket event - ignoring: %j', event);
+                    break;
+            }
         }
     });
 
@@ -544,31 +554,40 @@ function commitImage(opts, callback) {
     // to a request the build system has made.
     var commitEventStream = new LineStream();
     socket.pipe(commitEventStream);
-    commitEventStream.on('line', function (event) {
-        log.debug('client event received: %j', event);
-        var id;
-        var cbEvent;
-        try {
-            event = JSON.parse(event);
-        } catch (e) {
-            log.error('Build: invalid json: %s - ignoring', event);
-            return;
-        }
-        switch (event.type) {
-            case 'callback':
-                id = event.messageId;
-                cbEvent = pendingCallbackEvents[id];
-                assert.object(cbEvent, 'cbEvent with messageId ' + id);
-                delete pendingCallbackEvents[id];
-                if (event.error) {
-                    cbEvent.callback(new Error(event.error));
-                } else {
-                    cbEvent.callback(null, event.result);
-                }
-                break;
-            default:
-                log.error('Unhandled socket event - ignoring: %j', event);
-                break;
+
+    commitEventStream.on('readable', function commitImageOnReadable() {
+        var line;
+
+        while ((line = commitEventStream.read()) != null) {
+            line = line.trim();
+            if (!line) {
+                continue;
+            }
+            log.debug('client event received: %j', event);
+            var id;
+            var cbEvent;
+            try {
+                event = JSON.parse(event);
+            } catch (e) {
+                log.error('Build: invalid json: %s - ignoring', event);
+                return;
+            }
+            switch (event.type) {
+                case 'callback':
+                    id = event.messageId;
+                    cbEvent = pendingCallbackEvents[id];
+                    assert.object(cbEvent, 'cbEvent with messageId ' + id);
+                    delete pendingCallbackEvents[id];
+                    if (event.error) {
+                        cbEvent.callback(new Error(event.error));
+                    } else {
+                        cbEvent.callback(null, event.result);
+                    }
+                    break;
+                default:
+                    log.error('Unhandled socket event - ignoring: %j', event);
+                    break;
+            }
         }
     });
 
diff --git a/lib/docker-stdio.js b/lib/docker-stdio.js
index a882d6f..784116b 100644
--- a/lib/docker-stdio.js
+++ b/lib/docker-stdio.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
 /*
@@ -30,7 +30,7 @@ var spawn = child_process.spawn;
 var execFile = child_process.execFile;
 var vmadm = require('vmadm');
 
-var LineStream = require('./linestream');
+var LineStream = require('lstream');
 var wait_flag = require('./update-wait-flag');
 
 var commands = {};
@@ -780,33 +780,38 @@ function _createLinestreamParser(opts, stream) {
         opts.log.error({ err: err }, 'LineStream threw an error');
     });
 
-    lstream.on('line', function (line) {
-        line = line.trim();
-        if (!line) {
-            return;
-        }
+    lstream.on('readable', function createLineStreamParserOnReadable() {
+        var line;
+
+        while ((line = lstream.read()) != null) {
+            line = line.trim();
+            if (!line) {
+                continue;
+            }
 
-        var parsed = JSON.parse(line);
+            var parsed = JSON.parse(line);
 
-        if (parsed.type === 'tty') {
-            if (parsed.resize) {
-                stream.resize(parsed.resize.w, parsed.resize.h);
-            } else if (parsed.data) {
+            if (parsed.type === 'tty') {
+                if (parsed.resize) {
+                    stream.resize(parsed.resize.w, parsed.resize.h);
+                } else if (parsed.data) {
+                    handleDataEvent(parsed.data);
+                }
+            } else if (parsed.type === 'stdin') {
                 handleDataEvent(parsed.data);
-            }
-        } else if (parsed.type === 'stdin') {
-            handleDataEvent(parsed.data);
-        } else if (parsed.type === 'end') {
-            tryEnd(stream);
-        } else {
-            opts.log.error({
-                parsed: parsed
-            }, 'LineStream received unrecognized data');
-            if (stream.kill) {
-                stream.kill();
-            } else {
+            } else if (parsed.type === 'end') {
                 tryEnd(stream);
+            } else {
+                opts.log.error({
+                    parsed: parsed
+                }, 'LineStream received unrecognized data');
+                if (stream.kill) {
+                    stream.kill();
+                } else {
+                    tryEnd(stream);
+                }
             }
+
         }
     });
 
@@ -1101,21 +1106,25 @@ function runContainerLogsCommand(container, params, socket) {
         log.error('LineStream threw an error %s', err.toString());
     });
 
-    lstream.on('line', function (line) {
-        line = line.trim();
-        if (!line) {
-            return;
-        }
+    lstream.on('readable', function runContainerLogsCommandOnReadable() {
+        var line;
 
-        var rec = JSON.parse(line);
-        var data;
-        if (params.Timestamps) {
-            data = rec.time + ' ' + rec.log;
-        } else {
-            data = rec.log;
-        }
+        while ((line = lstream.read()) != null) {
+            line = line.trim();
+            if (!line) {
+                continue;
+            }
 
-        writeData(rec.stream, socket, data.toString());
+            var rec = JSON.parse(line);
+            var data;
+            if (params.Timestamps) {
+                data = rec.time + ' ' + rec.log;
+            } else {
+                data = rec.log;
+            }
+
+            writeData(rec.stream, socket, data.toString());
+        }
     });
 
     cmdSpawn.on('exit', function (code, signal) {
diff --git a/lib/linestream.js b/lib/linestream.js
deleted file mode 100644
index 01a3ee8..0000000
--- a/lib/linestream.js
+++ /dev/null
@@ -1,72 +0,0 @@
-// Copyright 2013 Timothy J Fontaine <tjfontaine@gmail.com>
-//
-// Permission is hereby granted, free of charge, to any person obtaining a copy
-// of this software and associated documentation files (the 'Software'), to deal
-// in the Software without restriction, including without limitation the rights
-// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-// copies of the Software, and to permit persons to whom the Software is
-// furnished to do so, subject to the following conditions:
-//
-// The above copyright notice and this permission notice shall be included in
-// all copies or substantial portions of the Software.
-//
-// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-// THE SOFTWARE
-
-/**
- * cn-agent note: Copied from
- * <https://github.com/tjfontaine/node-lstream/blob/master/linestream.js>
- * manually to not get the readable-stream dep needed only for node 0.8.
- */
-
-/*jsl:ignore*/
-/* BEGIN JSSTYLED */
-var stream = require('stream');
-var util = require('util');
-
-if (!stream.Transform)
-  stream = require('readable-stream');
-
-var LineStream = module.exports = function LineStream(opts) {
-  if (!(this instanceof LineStream)) return new LineStream(opts);
-  opts = opts || {};
-  opts.objectMode = true;
-  stream.Transform.call(this, opts);
-  this._buff = '';
-};
-util.inherits(LineStream, stream.Transform);
-
-
-LineStream.prototype._transform = function(chunk, encoding, done) {
-  var data = this._buff + chunk.toString('utf8');
-  var lines = data.split(/\r?\n|\r(?!\n)/);
-
-  this._buff = lines.pop();
-
-  var self = this;
-
-  lines.forEach(function (line) {
-    self._line(line);
-  });
-
-  done();
-};
-
-
-LineStream.prototype._flush = function(done) {
-  if (this._buff) this._line(this._buff);
-  done();
-};
-
-
-LineStream.prototype._line = function(line) {
-  this.push(line);
-  this.emit('line', line);
-};
-/* END JSSTYLED */
-/*jsl:end*/
\ No newline at end of file
diff --git a/package.json b/package.json
index 5665617..999afef 100644
--- a/package.json
+++ b/package.json
@@ -16,6 +16,7 @@
     "lazy-property": "1.0.0",
     "libuuid": "0.2.1",
     "lockfd": "1.2.0",
+    "lstream": "0.0.4",
     "mkdirp": "^0.3.4",
     "nodeunit": "0.9.1",
     "once": "1.3.0",
-- 
2.21.0

