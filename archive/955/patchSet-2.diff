From db977aa805de83fdcb08cb2a2faa388b15f32594 Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Thu, 3 Nov 2016 20:58:28 +0000
Subject: [PATCH] FWAPI-267 Escape Unicode whitespace characters in tag names
 and values Reviewed by: Alex Wilson <alex.wilson@joyent.com>

---
 lib/rule.js       |  84 ++++++++++++++++++++++++++++++----
 package.json      |   2 +-
 test/rule.test.js | 113 +++++++++++++++++++++++++++++++++++++++++++++-
 3 files changed, 189 insertions(+), 10 deletions(-)

diff --git a/lib/rule.js b/lib/rule.js
index 263f8ef..d9eab02 100644
--- a/lib/rule.js
+++ b/lib/rule.js
@@ -172,14 +172,82 @@ var escapes = {
 };
 
 
-var unescapes = {};
-Object.keys(escapes).forEach(function (key) {
-    if (key === '/') {
-        return;
-    }
-
-    unescapes[escapes[key]] = key;
-});
+/**
+ * When producing text versions of a rule, we escape Unicode whitespace
+ * characters. These characters don't need to be escaped, but we do so
+ * to reduce the chance that an operator will look at a rule and mistake
+ * any of them for the ASCII space character (\u0020), or not see them
+ * because they're non-printing.
+ */
+var unescapes = {
+    // Things that need to be escaped for the fwrule parser
+    '"': '"',
+    '(': '(',
+    ')': ')',
+    '\\': '\\',
+
+    // Special ASCII characters we don't want to print
+    '\u0000': 'u0000', // null (NUL)
+    '\u0001': 'u0001', // start of heading (SOH)
+    '\u0002': 'u0002', // start of text (STX)
+    '\u0003': 'u0003', // end of text (ETX)
+    '\u0004': 'u0004', // end of transmission (EOT)
+    '\u0005': 'u0005', // enquiry (ENQ)
+    '\u0006': 'u0006', // acknowledgement (ACK)
+    '\u0007': 'u0007', // bell (BEL)
+    '\u0008': 'b',     // backspace (BS)
+    '\u0009': 't',     // horizontal tab (HT)
+    '\u000A': 'n',     // newline (NL)
+    '\u000B': 'u000B', // vertical tab (VT)
+    '\u000C': 'f',     // form feed/next page (NP)
+    '\u000D': 'r',     // carriage return (CR)
+    '\u000E': 'u000E', // shift out (SO)
+    '\u000F': 'u000F', // shift in (SI)
+    '\u0010': 'u0010', // data link escape (DLE)
+    '\u0011': 'u0011', // device control 1 (DC1)/XON
+    '\u0012': 'u0012', // device control 2 (DC2)
+    '\u0013': 'u0013', // device control 3 (DC3)/XOFF
+    '\u0014': 'u0014', // device control 4 (DC4)
+    '\u0015': 'u0015', // negative acknowledgement (NAK)
+    '\u0016': 'u0016', // synchronous idle (SYN)
+    '\u0017': 'u0017', // end of transmission block (ETB)
+    '\u0018': 'u0018', // cancel (CAN)
+    '\u0019': 'u0019', // end of medium (EM)
+    '\u001A': 'u001A', // substitute (SUB)
+    '\u001B': 'u001B', // escape (ESC)
+    '\u001C': 'u001C', // file separator (FS)
+    '\u001D': 'u001D', // group separator (GS)
+    '\u001E': 'u001E', // record separator (RS)
+    '\u001F': 'u001F', // unit separator (US)
+    '\u007F': 'u007F', // delete (DEL)
+
+    // Unicode whitespace characters
+    '\u0085': 'u0085', // next line
+    '\u00A0': 'u00A0', // non-breaking space
+    '\u1680': 'u1680', // ogham space mark
+    '\u180E': 'u180E', // mongolian vowel separator
+    '\u2000': 'u2000', // en quad
+    '\u2001': 'u2001', // em quad
+    '\u2002': 'u2002', // en space
+    '\u2003': 'u2003', // em space
+    '\u2004': 'u2004', // three-per-em space
+    '\u2005': 'u2005', // four-per-em space
+    '\u2006': 'u2006', // six-per-em space
+    '\u2007': 'u2007', // figure space
+    '\u2008': 'u2008', // punctuation space
+    '\u2009': 'u2009', // thin space
+    '\u200A': 'u200A', // hair space
+    '\u200B': 'u200B', // zero width space
+    '\u200C': 'u200C', // zero width non-joiner
+    '\u200D': 'u200D', // zero width joiner
+    '\u2028': 'u2028', // line separator
+    '\u2029': 'u2029', // paragraph separator
+    '\u202F': 'u202F', // narrow no-break space
+    '\u205F': 'u205F', // medium mathematical space
+    '\u2060': 'u2060', // word joiner
+    '\u3000': 'u3000', // ideographic space
+    '\uFEFF': 'uFEFF'  // zero width no-break space
+};
 
 
 /**
diff --git a/package.json b/package.json
index c068281..e3660f4 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "fwrule",
   "description": "Parser for Joyent firewall rules",
-  "version": "1.3.0",
+  "version": "1.3.1",
   "author": "Joyent (joyent.com)",
   "keywords": [ "smartos", "triton" ],
   "repository": {
diff --git a/test/rule.test.js b/test/rule.test.js
index f510945..a855982 100644
--- a/test/rule.test.js
+++ b/test/rule.test.js
@@ -36,8 +36,20 @@ var TAG_TEST =
     'FROM tag "%s" = "%s" TO tag "%s" = "%s" ALLOW tcp PORT 80';
 var TAG_TEST_UNQUOTED = 'FROM tag %s = %s TO tag %s = %s ALLOW tcp PORT 80';
 
+
+function stringify(val) {
+    switch (val) {
+    case '\u0085':
+        return '"\\u0085"';
+    default:
+        return JSON.stringify(val);
+    }
+}
+
+
 function testTagInRules(t, unquotedOK, txtIn, txtOut, val) {
-    var desc = util.format('txtIn=%j, txtOut=%j, val=%j', txtIn, txtOut, val);
+    var desc = util.format('txtIn=%s, txtOut=%s, val=%s',
+        stringify(txtIn), stringify(txtOut), stringify(val));
     var ruleOut = util.format(TAG_TEST, txtOut, txtOut, txtOut, txtOut);
     var toParse = [ util.format(TAG_TEST, txtIn, txtIn, txtIn, txtIn) ];
 
@@ -1554,14 +1566,23 @@ test('Tag names and values: Keywords', function (t) {
 
 test('Tag names and values: Escaped characters', function (t) {
     checkTagsInRules(t, [
+        { val: ' ', in: ' ', out: ' ' },
+        { val: ' ', in: '\\u0020', out: ' ' },
         { val: '\t', in: '\t', out: '\\t' },
         { val: '\t', in: '\\t', out: '\\t' },
+        { val: '\t', in: '\\u0009', out: '\\t' },
         { val: '\n', in: '\n', out: '\\n' },
         { val: '\n', in: '\\n', out: '\\n' },
+        { val: '\n', in: '\\u000A', out: '\\n' },
         { val: '\b', in: '\b', out: '\\b' },
         { val: '\b', in: '\\b', out: '\\b' },
+        { val: '\b', in: '\\u0008', out: '\\b' },
         { val: '\f', in: '\f', out: '\\f' },
         { val: '\f', in: '\\f', out: '\\f' },
+        { val: '\f', in: '\\u000C', out: '\\f' },
+        { val: '\r', in: '\r', out: '\\r' },
+        { val: '\r', in: '\\r', out: '\\r' },
+        { val: '\r', in: '\\u000D', out: '\\r' },
         { val: '/', in: '/', out: '/' },
         { val: '/', in: '\\/', out: '/' },
         { val: '(', in: '(', out: '\\(' },
@@ -1587,3 +1608,93 @@ test('Tag names and values: Odd characters', function (t) {
 
     checkTagsInRules(t, check);
 });
+
+
+test('Tag names and values: ASCII control characters', function (t) {
+    var chars = [
+        '0000', // null (NUL)
+        '0001', // start of heading (SOH)
+        '0002', // start of text (STX)
+        '0003', // end of text (ETX)
+        '0004', // end of transmission (EOT)
+        '0005', // enquiry (ENQ)
+        '0006', // acknowledgement (ACK)
+        '0007', // bell (BEL)
+        '000B', // vertical tab (VT)
+        '000E', // shift out (SO)
+        '000F', // shift in (SI)
+        '0010', // data link escape (DLE)
+        '0011', // device control 1 (DC1)/XON
+        '0012', // device control 2 (DC2)
+        '0013', // device control 3 (DC3)/XOFF
+        '0014', // device control 4 (DC4)
+        '0015', // negative acknowledgement (NAK)
+        '0016', // synchronous idle (SYN)
+        '0017', // end of transmission block (ETB)
+        '0018', // cancel (CAN)
+        '0019', // end of medium (EM)
+        '001A', // substitute (SUB)
+        '001B', // escape (ESC)
+        '001C', // file separator (FS)
+        '001D', // group separator (GS)
+        '001E', // record separator (RS)
+        '001F', // unit separator (US)
+        '007F'  // delete (DEL)
+    ];
+
+    var check = [];
+    chars.forEach(function (str) {
+        var space = String.fromCharCode(parseInt(str, 16));
+        var escaped = '\\u' + str;
+        var escapedLC = '\\u' + str.toLowerCase();
+        check.push({ in: space, out: escaped, val: space });
+        check.push({ in: escaped, out: escaped, val: space });
+        check.push({ in: escapedLC, out: escaped, val: space });
+    });
+
+    checkTagsInRules(t, check);
+});
+
+
+test('Tag names and values: Unicode whitespace characters', function (t) {
+    var chars = [
+        '000B', // vertical tab
+        '0085', // next line
+        '00A0', // non-breaking space
+        '1680', // ogham space mark
+        '180E', // mongolian vowel separator
+        '2000', // en quad
+        '2001', // em quad
+        '2002', // en space
+        '2003', // em space
+        '2004', // three-per-em space
+        '2005', // four-per-em space
+        '2006', // six-per-em space
+        '2007', // figure space
+        '2008', // punctuation space
+        '2009', // thin space
+        '200A', // hair space
+        '200B', // zero width space
+        '200C', // zero width non-joiner
+        '200D', // zero width joiner
+        '2028', // line separator
+        '2029', // paragraph separator
+        '202F', // narrow no-break space
+        '205F', // medium mathematical space
+        '2060', // word joiner
+        '3000', // ideographic space
+        'FEFF'  // zero width no-break space
+    ];
+
+    var check = [];
+    chars.forEach(function (str) {
+        var space = String.fromCharCode(parseInt(str, 16));
+        var escaped = '\\u' + str;
+        var escapedLC = '\\u' + str.toLowerCase();
+        check.push({ in: space, out: escaped, val: space });
+        check.push({ in: escaped, out: escaped, val: space });
+        check.push({ in: escapedLC, out: escaped, val: space });
+    });
+
+    checkTagsInRules(t, check);
+});
-- 
2.21.0

