commit 0dddd18ae5665565e5e5f8a9dcec0ed2ceb504cf (refs/changes/96/4996/8)
Author: Jan Wyszynski <jan.wyszynski@joyent.com>
Date:   2019-01-11T00:45:16+00:00 (9 months ago)
    
    MANTA-3977 improve manta-garbage-collector documentation

diff --git a/README.md b/README.md
index f6031cc..32d108d 100644
--- a/README.md
+++ b/README.md
@@ -14,10 +14,20 @@ This repository is part of the Joyent Manta project.  For contribution
 guidelines, issues, and general documentation, visit the main
 [Manta](http://github.com/joyent/manta) project page.
 
-This is the garbage collection system for Manta. It comprises of a
-service for processing metadata records pointing to deleted objects
-and then ensuring the corresponding backing files are removed from the
-appropriate Mako zones.
+# Overview
+
+The garbage-collector is an extension added to Manta in [RFD
+143](https://github.com/joyent/rfd/blob/master/rfd/0143/README.md). It is
+responsible for reading delete records added to the `manta_fastdelete_queue` and
+producing instructions to delete backing files from the storage nodes on which the
+objects exists. These instructions are syntactically identical to those
+generated by the backup-based GC pipeline, and they are still processed by a cron job
+that runs on all storage nodes in Manta.
+
+**Garbage-collector processes are intended to be used only in deployments with
+snaplink-disabled accounts**. To avoid any confusion, garbage-collector instances
+will not start (the SMF service will enter the 'maintenance' state) if the Manta
+deployment has no snaplink-disabled accounts.
 
 # Running the Server
 
@@ -29,23 +39,53 @@ root of the repository with `$ LOG_LEVEL=<level> bin/server`.
 
 The garbage-collector uses [catest](https://github.com/joyent/catest) for auto
 tests. Each major component has a corresponding test script in the `test/`
-directory. To run all the tests with the most verbose logging run:
+directory. Running the tests requires that you have a working Triton/Manta
+deployment with a recently updated metadata schema (each metadata node must have
+a `manta_fastdelete_queue`).
+
+In order to run the test, you'll need to set up a `etc/testconfig.json`
+to match your environment (use `etc/testconfig.json.template` as a guide). This
+file closely mimcs the configuration that is passed to a garbage-collector in
+a real deployment. For further discussion of what these fields mean, see the
+"Configuration" section.
+
+To run the tests, you'll want to make the following changes to
+`etc/testconfig.json.template` and rename it to `etc/testconfig.json`:
+- Replace all instances of "orbit.example.com" with the `DOMAIN_NAME` of your
+  Manta application. The appropriate value can be found by running: `sdc-sapi
+  /applications?name=manta | json -Ha metadata.DOMAIN_NAME` on your Triton
+  headnode.
+- Replace `manta.user` with the user you're testing with. This must be a
+  snaplink-disabled user.
+- Replace `manta.sign.key` with a private key for the Manta user you're testing
+  with.
+- Replace `manta.sign.keyId` with the value of `ssh-keygen -l -f
+  ~/.ssh/id_rsa.pub | awk '{print $2}' | tr -d '\n'`, for the public key
+  corresponding to the private key in the previous step.
+- Replace the `shards` array with a similarly formatted array pointing to at
+  least one metadata shard in your deployment. To find the
+  appropriately-formatted list of index shards (along with their urls) run:
+  `sdc-sapi /applications?name=manta | json -Ha metadata.INDEX_MORAY_SHARDS`
+  on your Triton headnode (it is recommended you use only one of these during
+  testing). The tests will create rows in the `manta_fastdelete_queue` on this
+  shard. It is recommended that this shard not see too much (if any) other
+  accelerated gc delete traffic while you run the tests.
+- Replace the `allowed_creators` array with a similarly formatted array
+  containing at least one reference to the uuid of your `manta.user`.
+  `etc/testconfig.json.template` contains an example of what this array should
+  look like.
+
+Once you've set up the test configuration, run the tests with:
 ```
 $ LOG_LEVEL=debug make test
 ```
 from the root of the repository.
 
 To run a specific test, edit the Makefile variable `CATEST_FILES` to be a
-space-separated list of test files that should be run on each `make test`. Each
-`*.test.js` is a self-contained test that exercises multiple use-cases of that
+space-separated list of test files to be run on each `make test`. Each
+`*.test.js` is a self-contained test that exercises multiple use-cases of the
 component.
 
-Running the auto tests will require a Manta deployment with at a Muskie that has
-picked up the change introduced in
-[this](https://github.com/joyent/node-libmanta/commit/2ab2c0c7596ac003e2169b634924784b8f6a268a)
-commit. Some tests may fail if the `manta_fastdelete_queue`s in your deployment
-have a very large number of entries which are not otherwise being processed.
-
 # Node Version
 
 The garbage collector targets and has been tested with node-4.8.7.
@@ -54,45 +94,36 @@ The garbage collector targets and has been tested with node-4.8.7.
 
 ## Process Level Configuration File Structure
 
-The configuration in `etc/config.json` is an example of how the garbage
+The configuration in `etc/config.json.template` is an example of how the garbage
 collector is configured. Some chunks of this configuration are described below:
 * `manta`: A JSON object passed to node-manta's `createClient`.
 * `moray`: A JSON object with options passed to node-moray's `createClient`. At
 minimum, this must include a resolver.
-* `shards`: A JSON object describing which shards, and which buckets on each of
-those shards, to process delete records from.
-* `creators`: An array of objects with a single field, `uuid`. Any delete
+* `shards`: A JSON array of objects. Each object has a "host" field which is the
+SRV domain for a given metadata shard. The last object in this array must have a
+"last" boolean field set to true. This syntax is required by
+[Mustache](https://mustache.github.io/), Manta's template system.
+* `buckets`: A JSON array of objects. Each object must have a "name" field whose
+value is the name of the Moray bucket from which the garbage-collector should
+stream records. This bucket must be present on all shards in the `shards` array.
+* `allowed_creators`: An array of objects with a single field, `uuid`. Any delete
 records whose `value.creator` field doesn't match the `uuid` field of some
 object in this array will be ignored. This field will be initialized with the
-SAPI value `ACCOUNTS_SNAPLINKS_DISABLED`, introduced
-[here](https://github.com/joyent/manta-muskie/commit/760857dbf5d30f5734b4ac21e097628824bb6569).
-* `params`: A JSON object with two principal sub-objects describing
-how records should be read from Moray shards, and how Mako instruction
-objects should be uploaded to Manta.
+SAPI value `ACCOUNTS_SNAPLINKS_DISABLED`, which originates from the Manta SAPI
+application.
+* `tunables`: A JSON object. This object consists of performance-tunables such
+as batch-sizes and various delays. The next section contains more detailed
+descriptions of each of the fields in this object.
 * `address`/`port`: The address and port on which to start the HTTP management
 interface described above.
-* `capacity`: The total cache capacity (readable and configurable via the
-`/cache` endpoint described above). Configuration
 
-The configuration in `etc/config.json` is an example of how the garbage
-collector is configured. Some chunks of this configuration are described below:
-* `manta`: A JSON object passed to node-manta's `createClient`.
-* `moray`: A JSON object with options passed to node-moray's `createClient`. At
-minimum, this must include a resolver.
-* `shards`: A JSON object describing which shards, and which buckets on each of
-those shards, to process delete records from.
-* `creators`: An array of objects with a single field, `uuid`. Any delete
-records whose `value.creator` field doesn't match the `uuid` field of some
-object in this array will be ignored. This field will be initialized with the
-SAPI value `ACCOUNTS_SNAPLINKS_DISABLED`, introduced
-[here](https://github.com/joyent/manta-muskie/commit/760857dbf5d30f5734b4ac21e097628824bb6569).
-* `params`: A JSON object with two principal sub-objects describing
-how records should be read from Moray shards, and how Mako instruction
-objects should be uploaded to Manta.
-* `address`/`port`: The address and port on which to start the HTTP management
-interface described above.
-* `capacity`: The total cache capacity (readable and configurable via the
-`/cache` endpoint described above).
+## Deploying Garbage-Collectors
+
+Accelerated garbage-collection is delpoyed with the `manta-adm accel-gc`
+subcommand. Documentation of this process can be foudn in the Manta
+[operator guide](https://joyent.github.io/manta/). For information about
+`manta-adm accel-gc`, see:
+[manta-adm(1)](https://github.com/joyent/sdc-manta/blob/master/docs/man/man1/manta-adm.md).
 
 ## Operating Garbage-Collectors
 
@@ -100,6 +131,32 @@ Garbage-collectors are configured with SAPI. The default values for the tunables
 vary by deployment size, but the following metadata values are installed in the
 garbage-collector service object on `manta-init`:
 
+### Basics
+
+* `GC_ASSIGNED_SHARDS` - A list of json objects, each with the single string
+  field `host`, containing the URL of a shard the collector will poll records
+  from. The last element of this array must contain a boolean `last` field
+  set to true.
+* `GC_ASSIGNED_BUCKETS` - A list of json objects, each with the single string
+  field `name`, containing the name of the Moray bucket on each shard (from
+  `GC_ASSIGNED_SHARDS`) from which delete records will be read. The last element
+  of this array must contain a boolean `last` field set to true.
+* `GC_CONCURRENCY` - A positive integer indicating the concurrency with which to
+  read records, upload instructions, and delete records for each assigned shard.
+
+One limitation of the configuration is that garbage-collectors must poll records
+from the same buckets on each shard it is assigned. While this does constrain
+the collectors, it also helps ensure that the collectors in a deployment are
+configured consistently.
+
+Another note here is that `GC_CONCURRENCY` applies to each bucket on each shard
+the collector is assigned, meaning the total concurrency for a given collector
+is `GC_ASSIGNED_SHARDS * GC_CONCURRENCY * GC_ASSIGNED_BUCKETS`. Manta operators
+should exercise caution when setting these tunables, taking care not to
+overwhelm the CN on which garbage-collectors are deployed (the `manta-adm
+accel-gc` attempts to help with these decisions -- see
+[manta-adm(1)](https://github.com/joyent/sdc-manta/blob/master/docs/man/man1/manta-adm.md)).
+
 ### Record Ingest
 
 * `GC_RECORD_READ_BATCH_SIZE` - The number of `manta_fastdelete_queue` records
@@ -118,7 +175,8 @@ garbage-collector service object on `manta-init`:
 * `GC_INSTR_UPLOAD_FLUSH_DELAY` - The number of milliseconds to wait between
   attempt to upload an instruction object.
 * `GC_INSTR_UPLOAD_PATH_PREFIX` - The location in which to upload delete
-  instructions. This should always be "/poseidon/stor/manta_gc/mako".
+  instructions. In order to maintain interoperability with the offline GC, the
+  value of this variable should always be `poseidon/stor/manta_gc/mako`.
 
 ### Record Delete
 
@@ -127,21 +185,14 @@ garbage-collector service object on `manta-init`:
 * `GC_RECORD_DELETE_DELAY` - The number of milliseconds to wait between deletes
   from the `manta_fastdelete_queue`.
 
-### Concurrency and Memory
+### Memory
 
 * `GC_CACHE_CAPACITY` - A global cap on the nubmer of entities a collector can
   have cached at once. This is a coarse limit intended to limit the memory
   consumption of a collector on a system experiencing memory pressure.
-* `GC_MANTA_FASTDELETE_QUEUE_CONCURRENCY` - The number of workers to allocate to
-  reading processing records from the `manta_fastdelete_queue`.
-* `[GC_SHARD_NUM_LO, GC_SHARD_NUM_HI]` - The inclusive numeric range of shards
-  from which the garbage-collector will read records from.
 
 Each of these SAPI values can be overridden in the instance object of a single
-collector. By default, `[GC_SHARD_NUM_LO, GC_SHARD_NUM_HI] = [0,0]`. When
-collectors start up and find this to be the case, they will print an explanatory
-log message and remain idle. Operators should use SAPI tools to set the ranges
-appropriately and restart the garbage-collectors.
+collector.
 
 # Metrics
 
@@ -158,10 +209,13 @@ to node-fast metrics for the two RPCs it uses: `findObjects`, and `batch`.
 
 # HTTP Management Interface
 
-Each garbage collector process starts a restify http server listening on port
-2020 by default (this is configurable). The server supports the following
-endpoints:
+Each garbage-collector process starts a restify http server listening on port
+2020 by default (this is configurable). **Any configuration changes made through
+this interface will not persist**. This interface is intended for
+one-off experiments with tunable changes. To persist changes, make them via
+SAPI.
 
+The server supports the following endpoints:
 ```
 Request:
 
@@ -179,7 +233,6 @@ Endpoints listed under `/workers` implement worker control. Supported
 actions include **listing**, **pausing**, and **resuming** the
 workers. Newly created workers start in the running phase, even if
 other workers are paused.
-
 ```
 Request:
 
@@ -248,70 +301,16 @@ Response:
 }
 ```
 
-Retrieve tunables relevant to the upload of Mako GC instructions:
+Retrieve performance tunables:
 ```
-GET /mako
+GET /tunables
 
 Response:
 
 {
 	"instr_upload_batch_size": integer,
 	"instr_upload_flush_delay": integer,
-	"instr_upload_path_prefix": string
-}
-```
-
-* `instr_upload_batch_size`:  the target number of lines to include in each
-instruction object.
-* `instr_upload_flush_delay`: number of milliseconds between periodic cached
-  instruction uploads. Used to prevent cache entries from waiting around too
-long if there aren't sufficient enough delete records in the bucket we're
-reading from to reach the batch size.
-* `instr_upload_path_prefix`: The Manta path to which the garbage collector will
-upload Mako GC instruction objects. If the value of this tunable is `$PATH`,
-then the garbage collector will upload objects for shark `$SHARK` in
-`$PATH/$SHARK`, creating the `$SHARK` directory if necessary. In practice, we'll
-set this to `/poseidon/stor/manta_gc/mako`, which is where instruction objects
-are uploaded by the offline GC process.
-
-The following request allows an operator to modify any of the tunables returned
-by the previous endpoint.
-```
-POST /mako
-Content-Type: application/json
-
-{
-	"instr_upload_batch_size": integer,
-	"instr_upload_flush_delay": integer,
-	"instr_upload_path_prefix": string
-}
-
-Response:
-
-{
-	ok: boolean,
-	when: ISO timestamp
-}
-```
-
-Retrieve shard-specific GC configuration. This configuration is used by all GC
-workers that are retrieving records from the shard identified in the url.
-Broadly, the configuration describes what buckets on the shard to read, and how
-to read them. The `:shard` url parameter is a number describing which shards
-configuration to read.
-```
-GET /shards/:shard
-
-Response:
-
-{
-	"buckets": [
-		{
-			"bucket": "manta_fastdelete_queue|manta_delete_log",
-			"concurrency": integer
-		}
-		...
-	],
+	"instr_upload_path_prefix": string,
 	"record_read_batch_size": integer,
 	"record_read_wait_interval": integer (ms),
 	"record_read_sort_attr": "_mtime",
@@ -319,199 +318,27 @@ Response:
 	"record_delete_batch_size": integer,
 	"record_delete_delay": integer (ms)
 }
-
-Failure:
-
-{
-	ok: false,
-	err: 'No GC worker for shard ":shard"'
-}
 ```
-* `buckets`: An array of objects, each of which describes how many GC workers
-should be allocated to processing records in that bucket. Today, we only support
-reading records from `manta_fastdelete_queue` and `manta_delete_log`.
-* `record_read_batch_size`: The number of records to read with each Moray
-`findObjects` RPC. This is fed into the `limit` option passed to that RPC.
-* `record_read_sort_attr`: Which attribute to sort by when processing records.
-* `record_read_sort_ord`: What order to use when sorting records.
-* `record_delete_batch_size`: How many records to delete with a single Moray
-`batch` RPC.
-* `record_delete_delay`: The threshold amount of time a worker will wait since
-the last successful `batch` RPC before issuing a 'periodic' `batch`.
-
-Modify any of the tunables returned by the previous endpoint by passing a JSON
-object describing the new desired values. This will affect the behavior of all
-workers reading records from shard `:shard`, creating or destroying workers if
-an entry is added to, or removed from, the `buckets` array.
-```
-POST /shards/:shard
-Content-Type: application/json
-
-{
-	"buckets": [
-		{
-			"bucket": "manta_fastdelete_queue|manta_delete_log",
-			"concurrency": integer
-		}
-		...
-	],
-	"record_read_batch_size": integer,
-	"record_read_wait_interval": integer (ms),
-	"record_read_sort_attr": "_mtime",
-	"record_read_sort_order": "asc|ASC|desc|DESC",
-	"record_delete_batch_size": integer,
-	"record_delete_delay": integer (ms)
-
-}
-
-Response:
-
-{
-	ok: boolean,
-	when: ISO timestamp
-}
-
-Failure:
-
-{
-	ok: false,
-	err: 'No GC worker for shard ":shard"'
-}
-```
-
-The `/shards` endpoint, described below should be used for two purposes:
-1. To modify the configuration of all shards. This is equivalent to applying the
-changes included in the JSON body to all shards the garbage collector is
-processing via the `/shards/:shard` endpoint. Changes applied in this manner
-affect the 'default' shard configuration which is used by any newly created
-workers.
-2. To modify the range of shards that the garbage collector is responsible for
-processing.
 
+The following request allows an operator to modify any of the tunables returned
+by the previous endpoint.
 ```
-POST /shards
+POST /tunables
 Content-Type: application/json
 
 {
-	"interval": [lo, hi],
-	"buckets": [
-		{
-			"bucket": "manta_fastdelete_queue|manta_delete_log",
-			"concurrency": integer
-		}
-		...
-	],
+	"instr_upload_batch_size": integer,
+	"instr_upload_flush_delay": integer,
+	"instr_upload_path_prefix": string
 	"record_read_batch_size": integer,
 	"record_read_wait_interval": integer (ms),
 	"record_read_sort_attr": "_mtime",
 	"record_read_sort_order": "asc|ASC|desc|DESC",
 	"record_delete_batch_size": integer,
 	"record_delete_delay": integer (ms)
-
-}
-
-Response:
-
-{
-	ok: boolean
-	when: ISO timestamp
 }
-```
-As described above, changes to configuration applied via this endpoint are
-applied to all existing and future workers.
-
-* `interval`: specifies a range of shard numbers the garbage collector should
-process delete records from. This endpoint enforces that `lo` is less than or
-equal to `hi`.
-	* If `lo == hi`, then only the one shard identified by `lo` will be
-	  GC'd.
-	* If `lo < hi`, all shards in the range `lo..hi` will be GC'd from.
-
-If the range includes a shard number that does not exist in the Manta
-deployment, or the request triggers the creation of some number of workers for
-shards that are unresponsive, no change to the range of shards processed be the
-GC process will occur.
-
-```
-GET /shards
 
 Response:
-{
-	"interval": [lo, hi],
-	"buckets": [...]
-}
-```
-Note: the configuration returned by this endpoint may differ from the
-configuration returned by `GET /shards/:shard` for a specific `:shard` if the
-operator has overridden configuration for that shard specifically.
-
-The garbage collector supports a global limit on the total number of cache
-entries that garbage collector can hold. The admin interface exposes two
-endpoints for reading and modifying this information.
-
-### Some Examples
-
-For example, if the garbage collector were running on the local host and the
-operator wanted to change the read batch size for all shards the process is
-reading records from, that would look like this:
-```
-$ curl -X POST -H 'content-type: application/json' localhost:2020/shards \
-	-d '{"record_read_batch_size": 10}'
-```
-If the operator wanted the garbage collector to only process records from the
-`manta_fastdelete_queue` on all shards, that would look like this:
-```
-$ curl -X POST -H 'content-type: application/json' localhost:2020/shards \
-	-d '{
-	"buckets":[
-		{"bucket": "manta_fastdelete_queue", "concurrency": 1},
-		{"bucket": "manta_delete_log", "concurrency": 0}
-	]}'
-```
-If the operator wanted to also process `manta_delete_log` records on shard 47,
-that would look like this:
-```
-$ curl -X POST -H 'content-type: application/json' localhost:2020/shards/47 \
-	-d '{
-		"buckets":[
-			{"bucket": "manta_fastdelete_queue", "concurrency": 1},
-			{"bucket": "manta_delete_log", "concurrency": 1}
-		]
-	}'
-```
-
-If the operator wanted to GC objects in the shard range [5-10], that command
-would look like this:
-```
-$ curl -X POST -H 'content-type: application/json' localhost:2020/shards \
-	-d '{"interval": [5, 10]}'
-```
-
-```
-GET /cache
-
-Response:
-
-{
-	"cache": {
-		"capacity": integer,
-		"used": integer
-	}
-}
-```
-* `cache`: number of allowed cache entries
-* `used`: number of cache entries currently used by the collector
-
-```
-POST /cache
-Content-Type: application/json
-
-{
-	"capacity": integer
-}
-
-Response:
-
 {
 	ok: boolean,
 	when: ISO timestamp
