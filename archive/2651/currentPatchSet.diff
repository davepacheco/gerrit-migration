From 7594ea98bba375e1e68d63422d49e7bd2f1fff38 Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Wed, 30 Aug 2017 00:10:43 +0000
Subject: [PATCH] MORAY-428 Make it safer to use reindexing buckets Reviewed
 by: Patrick Mooney <patrick.mooney@joyent.com> Reviewed by: Julien Gilli
 <julien.gilli@joyent.com> Approved by: Julien Gilli <julien.gilli@joyent.com>

---
 docs/index.md           | 292 +++++++++++++++++++++++++++-------------
 lib/control.js          |   2 +-
 lib/objects/common.js   |  60 +++++++--
 lib/objects/del_many.js |   1 +
 lib/objects/find.js     |   9 +-
 lib/objects/get.js      |  30 ++++-
 lib/objects/reindex.js  |  14 +-
 lib/objects/update.js   |  11 ++
 lib/schema.js           |  22 +++
 package.json            |   2 +-
 10 files changed, 325 insertions(+), 118 deletions(-)

diff --git a/docs/index.md b/docs/index.md
index 59c9f7a..9a01e88 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -87,6 +87,102 @@ client library interfaces.  It's worth reviewing `moray(1)` and `moray(3)` to
 understand the basic conventions used below.
 
 
+# Common Options
+
+There are some options that can be used with several RPCs. They are documented
+here, and linked to from each of the RPCs where they are valid to use.
+
+##### <a name="option-etag">etag</a>
+
+An `etag` that an already existing object must first have before being affected.
+If the `etag` on the existing object differs from the one specified in the
+options, then the server will return an `EtagConflictError`. See
+[PutObject](#putobject) for further details.
+
+##### <a name="option-limit">limit</a>
+
+A number that limits the number of records that are processed by the request.
+Default is `1000`, unless `noLimit` is set to `true`.
+
+Using large values (> 1000, or setting `noLimit` to `true`) is considered
+dangerous. The design center of Moray is around short-lived requests, and there
+are serious consequences in PostgreSQL for leaving connections open in
+transactions for extended periods while other transactions are making changes.
+
+##### <a name="option-nobucketcache">noBucketCache</a>
+
+A boolean which, when set to `true`, makes Moray refresh its bucket cache before
+handling the request. Default is `false`.
+
+The bucket cache should generally not be be disabled (i.e `noBucketCache` set to
+`true`). It is key to ensuring that the performance of a Moray server scales
+with the number of requests. This feature primarily exists to write internal
+Moray tests.
+
+##### <a name="option-no_count">no_count</a>
+
+A boolean which, when set to `true`, makes Moray not include a `_count` property
+on each record sent with the response. Default is `false`.
+
+The purpose of this option is to avoid performing a potentially expensive
+`COUNT` query in addition to the query that fetches data records.
+
+##### <a name="option-nolimit">noLimit</a>
+
+A boolean which, when set to `true` and `limit` is not set, makes Moray not have
+a maximum number of records processed by the request. Default is `false`.
+
+Using this option is __considered dangerous__. The design center of Moray is
+around short-lived requests, and there are serious consequences in PostgreSQL
+for leaving connections open in transactions for extended periods while other
+transactions are making changes.
+
+##### <a name="option-offset">offset</a>
+
+A number which indicates the offset at which Moray starts processing records
+that would be returned by the same request with no `offset`. Default is `0`.
+
+##### <a name="option-requireonlinereindexing">requireOnlineReindexing</a>
+
+When passing `requireOnlineReindexing: true`, the client will make sure that
+the server supports safely reading the contents of a reindexing bucket. Recent
+versions of the server will always behave correctly here. This option is to
+allow clients to make certain that they receive an `UnhandledOptionsError`
+instead of having their data corrupted if they suspect that they are talking
+to an older server.
+
+##### <a name="option-req_id">req_id</a>
+
+A string that can be used to track a request. Default is an automatically
+generated V4 UUID.
+
+##### <a name="option-sort">sort</a>
+
+An object or an array of objects with the following properties:
+
+* `attribute`: a required property of type string representing a field name on
+  which to sort the result
+
+* `order`: an optional property of type string that is either `ASC` or `DESC` to
+  sort with ascending or descending order respectively. Default value is `ASC`.
+
+Default value is `undefined`.
+
+##### <a name="option-timeout">timeout</a>
+
+A number that represents the delay in milliseconds that the request waits on a
+reply from its underlying Postgres query before it errors with a
+`QueryTimeoutError`. Default is `30000` (30 seconds).
+
+Using this option is __strongly discouraged__. For identifying network failures,
+TCP keep-alive, which is what the node-moray client library uses, is a better
+fit. Otherwise, if the request hasn't completed, then the database is stuck
+processing that request, and applications cannot generally do anything safely
+except to wait (or possibly raise an alarm). Moreover, expiration of this
+timeout does not cancel the underlying PostgreSQL query and the corresponding
+PostgreSQL resources remain in use until the query ultimately does complete.
+
+
 # Buckets
 
 ## CreateBucket
@@ -141,9 +237,14 @@ A "fully loaded" config (without post triggers) would look like this:
 | -------- | -------- | ----------------------------------------------- |
 | name     | string   | globally unique name for the bucket             |
 | config   | object   | configuration (indexes/pre/post) for the bucket |
-| options  | object   | any optional parameters (req\_id)               |
+| options  | object   | any optional parameters, see below              |
 | callback | function | only argument is `err`                          |
 
+#### Options
+
+- [req_id](#option-req_id)
+- [timeout](#option-timeout)
+
 ### Errors
 
 * `InvalidBucketConfigError`
@@ -184,9 +285,14 @@ besides the name of the bucket you want to fetch (and of course request\_id).
 | Field    | Type     | Description                         |
 | -------- | -------- | ----------------------------------- |
 | name     | string   | globally unique name for the bucket |
-| options  | object   | any optional parameters (req\_id)   |
+| options  | object   | any optional parameters, see below  |
 | callback | function | only argument is `err`              |
 
+#### Options
+
+- [req_id](#option-req_id)
+- [timeout](#option-timeout)
+
 ### Errors
 
 * `BucketNotFoundError`
@@ -243,10 +349,15 @@ Returns the configuration for all buckets.
 
 ### Inputs
 
-| Field    | Type     | Description                       |
-| -------- | -------- | --------------------------------- |
-| options  | object   | any optional parameters (req\_id) |
-| callback | function | only argument is `err`            |
+| Field    | Type     | Description                        |
+| -------- | -------- | ---------------------------------- |
+| options  | object   | any optional parameters, see below |
+| callback | function | only argument is `err`             |
+
+#### Options
+
+- [req_id](#option-req_id)
+- [timeout](#option-timeout)
 
 ### Errors
 
@@ -343,9 +454,14 @@ Or alternatively:
 | -------- | -------- | ----------------------------------------------- |
 | name     | string   | globally unique name for the bucket             |
 | config   | object   | configuration (indexes/pre/post) for the bucket |
-| options  | object   | any optional parameters (req\_id)               |
+| options  | object   | any optional parameters, see below              |
 | callback | function | only argument is `err`                          |
 
+#### Options
+
+- [req_id](#option-req_id)
+- [timeout](#option-timeout)
+
 ### Errors
 
 * `BucketNotFoundError`
@@ -365,7 +481,7 @@ Deletes a bucket, *and all data in that bucket!*
 
 ### API
 
-     client.delBucket('foo', function (err) {
+    client.delBucket('foo', function (err) {
         assert.ifError(err);
     });
 
@@ -374,9 +490,14 @@ Deletes a bucket, *and all data in that bucket!*
 | Field    | Type     | Description                         |
 | -------- | -------- | ----------------------------------- |
 | name     | string   | globally unique name for the bucket |
-| options  | object   | any optional parameters (req\_id)   |
+| options  | object   | any optional parameters, see below  |
 | callback | function | only argument is `err`              |
 
+#### Options
+
+- [req_id](#option-req_id)
+- [timeout](#option-timeout)
+
 ### Errors
 
 * `BucketNotFoundError`
@@ -439,9 +560,15 @@ looks like:
 | bucket   | string   | bucket to write this key in             |
 | key      | string   | bucket to write this key in             |
 | value    | object   | free-form JS object                     |
-| options  | object   | any optional parameters (req\_id, etag) |
+| options  | object   | any optional parameters, see below      |
 | callback | function | only argument is `err`                  |
 
+#### Options
+
+- [etag](#option-etag)
+- [req_id](#option-req_id)
+- [timeout](#option-timeout)
+
 ### Errors
 
 * `BucketNotFoundError`
@@ -489,9 +616,16 @@ for a full example.
 | -------- | -------- | ------------------------------------------ |
 | bucket   | string   | bucket to write this key in                |
 | key      | string   | bucket to write this key in                |
-| options  | object   | any optional parameters (req\_id, noCache) |
+| options  | object   | any optional parameters, see below         |
 | callback | function | arguments of `err` and `obj`               |
 
+#### Options
+
+- [noBucketCache](#option-nobucketcache)
+- [requireOnlineReindexing](#option-requireonlinereindexing)
+- [req_id](#option-req_id)
+- [timeout](#option-timeout)
+
 ### Errors
 
 * `BucketNotFoundError`
@@ -572,57 +706,17 @@ expect to receive back up to N records from this call.
 | ------- | ------ | ------------------------------------------------------ |
 | bucket  | string | bucket to search in                                    |
 | filter  | string | search filter string                                   |
-| options | object | any optional parameters, see below |
+| options | object | any optional parameters, see below                     |
 
 #### Options
 
-##### limit
-
-A number that limits the number of records that are processed by the request.
-Default is `1000`, unless `noLimit` is set to `true`.
-
-Using large values (> 1000, or setting `noLimit` to `true`) is considered
-dangerous. The design center of Moray is around short-lived requests, and there
-are serious consequences in PostgreSQL for leaving connections open in
-transactions for extended periods while other transactions are making changes.
-
-##### noBucketCache
-
-A boolean which, when set to `true`, makes Moray refresh its bucket cache before
-handling the request. Default is `false`.
-
-The bucket cache should generally not be be disabled (i.e `noBucketCache` set to
-`true`). It is key to ensuring that the performance of a Moray server scales
-with the number of requests. This feature primarily exists to write internal
-Moray tests.
-
-##### no_count
-
-A boolean which, when set to `true`, makes Moray not include a `_count` property
-on each record sent with the response. Default is `false`.
-
-The purpose of this option is to avoid performing a potentially expensive
-`COUNT` query in addition to the query that fetches data records.
-
-##### noLimit
-
-A boolean which, when set to `true` and `limit` is not set, makes Moray not have
-a maximum number of records processed by the request. Default is `false`.
-
-Using this option is __considered dangerous__. The design center of Moray is
-around short-lived requests, and there are serious consequences in PostgreSQL
-for leaving connections open in transactions for extended periods while other
-transactions are making changes.
-
-##### offset
-
-A number which indicates the offset at which Moray starts processing records
-that would be returned by the same request with no `offset`. Default is `0`.
-
-##### req_id
-
-A string that can be used to track a request. Default is an automatically
-generated V4 UUID.
+- [limit](#option-limit)
+- [noBucketCache](#option-nobucketcache)
+- [noLimit](#option-nolimit)
+- [offset](#option-offset)
+- [requireOnlineReindexing](#option-requireonlinereindexing)
+- [req_id](#option-req_id)
+- [timeout](#option-timeout)
 
 ##### requireIndexes
 
@@ -630,38 +724,12 @@ When passing `requireIndexes: true`, `findObjects` requests will respond with a
 `NotIndexedError` error if at least one of the fields included in the search
 filter has an index that can't be used.
 
-##### sort
-
-An object or an array of objects with the following properties:
-
-* `attribute`: a required property of type string representing a field name on
-  which to sort the result
-
-* `order`: an optional property of type string that is either `ASC` or `DESC` to
-  sort with ascending or descending order respectively. Default value is `ASC`.
-
-Default value is `undefined`.
-
 ##### sql_only
 
 A boolean which, if `true`, makes Moray send the SQL statement that would be
 executed in the response instead of sending actual data records. Default is
 `false`.
 
-##### timeout
-
-A number that represents the delay in milliseconds that the request waits on a
-reply from its underlying Postgres query before it errors with a
-`QueryTimeoutError`. Default is `30000` (30 seconds).
-
-Using this option is __strongly discouraged__. For identifying network failures,
-TCP keep-alive, which is what the node-moray client library uses, is a better
-fit. Otherwise, if the request hasn't completed, then the database is stuck
-processing that request, and applications cannot generally do anything safely
-except to wait (or possibly raise an alarm). Moreover, expiration of this
-timeout does not cancel the underlying PostgreSQL query and the corresponding
-PostgreSQL resources remain in use until the query ultimately does complete.
-
 ### Errors
 
 * `BucketNotFoundError`
@@ -732,9 +800,15 @@ options to get `test/set` semantics.
 | -------- | -------- | --------------------------------------- |
 | bucket   | string   | bucket to delete this key from          |
 | key      | string   | key to delete                           |
-| options  | object   | any optional parameters (req\_id, etag) |
+| options  | object   | any optional parameters, see below      |
 | callback | function | only argument is `err`                  |
 
+#### Options
+
+- [etag](#option-etag)
+- [req_id](#option-req_id)
+- [timeout](#option-timeout)
+
 ### Errors
 
 * `BucketNotFoundError`
@@ -792,7 +866,17 @@ A few caveats:
 | bucket  | string | bucket to write this key in                            |
 | fields  | object | keys and values to update                              |
 | filter  | string | search filter string                                   |
-| options | object | any optional parameters (req\_id, limit, offset, sort) |
+| options | object | any optional parameters, see below                     |
+
+#### Options
+
+- [limit](#option-limit)
+- [noBucketCache](#option-nobucketcache)
+- [noLimit](#option-nolimit)
+- [offset](#option-offset)
+- [req_id](#option-req_id)
+- [sort](#option-sort)
+- [timeout](#option-timeout)
 
 ## ReindexObjects
 
@@ -830,7 +914,13 @@ the same bucket but it's likely to race on rows and incur rollbacks/slowdowns.
 | ------- | ------ | -------------------------------------------- |
 | bucket  | string | bucket to reindex                            |
 | count   | object | max rows to reindex                          |
-| options | object | any optional parameters (req\_id, no\_count) |
+| options | object | any optional parameters, see below           |
+
+#### Options
+
+- [no_count](#option-no_count)
+- [req_id](#option-req_id)
+- [timeout](#option-timeout)
 
 ### Errors
 
@@ -860,8 +950,17 @@ API with a bucket and a filter, that is exactly the same syntax as
 | ------- | ------ | ------------------------------------------------------ |
 | bucket  | string | bucket to delete from                                  |
 | filter  | string | search filter string                                   |
-| options | object | any optional parameters (req\_id, limit, offset, sort) |
+| options | object | any optional parameters, see below                     |
 
+#### Options
+
+- [limit](#option-limit)
+- [noBucketCache](#option-nobucketcache)
+- [noLimit](#option-nolimit)
+- [offset](#option-offset)
+- [req_id](#option-req_id)
+- [sort](#option-sort)
+- [timeout](#option-timeout)
 
 ## Batch
 
@@ -913,9 +1012,15 @@ The default operation is `put`.
 | Field    | Type     | Description                                                       |
 | -------- | -------- | ----------------------------------------------------------------- |
 | objects  | object   | bucket/key/value tuples to store                                  |
-| options  | object   | any optional parameters (req\_id, etag)                           |
+| options  | object   | any optional parameters, see below                                |
 | callback | function | only argument is `err` and `meta` which will have a list of etags |
 
+#### Options
+
+- [etag](#option-etag)
+- [req_id](#option-req_id)
+- [timeout](#option-timeout)
+
 ### Errors
 
 * `BucketNotFoundError`
@@ -956,7 +1061,12 @@ The latter use-case (filling in gaps in the Moray API) is considered deprecated.
 | --------- | ------ | ------------------------------------ |
 | statement | string | SQL statement to run                 |
 | values    | Array  | values to insert (see node-postgres) |
-| options   | object | any optional parameters (req\_id)    |
+| options   | object | any optional parameters, see below   |
+
+#### Options
+
+- [req_id](#option-req_id)
+- [timeout](#option-timeout)
 
 ### CLI
 
diff --git a/lib/control.js b/lib/control.js
index 61f9534..f7b8b39 100644
--- a/lib/control.js
+++ b/lib/control.js
@@ -181,7 +181,7 @@ function buildReq(opts, rpc, serverOpts) {
         msgid: msgid,
         route: route,
         req_id: reqid
-    });
+    }, true);
 
     var req = {
         log: log,
diff --git a/lib/objects/common.js b/lib/objects/common.js
index 3b53eb4..39c98f2 100644
--- a/lib/objects/common.js
+++ b/lib/objects/common.js
@@ -868,10 +868,30 @@ function verifyBucket(req, cb) {
 }
 
 
-function rowToObject(bucket, row, ignore) {
+/**
+ * Fetch all of the fields being reindexed for a bucket, so that we can
+ * more easily error out when they're used, or ignore them when converting
+ * a row fetched from Postgres into an object.
+ */
+function getReindexingFields(bucket) {
     assert.object(bucket, 'bucket');
+
+    var ignore = [];
+
+    if (bucket.reindex_active) {
+        Object.keys(bucket.reindex_active).forEach(function (ver) {
+            ignore = ignore.concat(bucket.reindex_active[ver]);
+        });
+    }
+
+    return ignore;
+}
+
+
+function rowToObject(bucket, ignore, row) {
+    assert.object(bucket, 'bucket');
+    assert.arrayOfString(ignore, 'ignore');
     assert.object(row, 'row');
-    ignore = ignore || [];
 
     var obj = {
         bucket: bucket.name,
@@ -1058,10 +1078,9 @@ function getUnusableIndexes(filter, bucket, log) {
     assert.object(bucket, 'bucket');
 
     var bucketIndex = [];
-    var bucketReindexActive = [];
-    var bucketVersion;
     var unindexedFields = [];
     var reindexingFields = [];
+    var bucketReindexActive = getReindexingFields(bucket);
 
     log.debug({bucket: bucket}, 'bucket object');
 
@@ -1069,14 +1088,6 @@ function getUnusableIndexes(filter, bucket, log) {
         bucketIndex = Object.keys(bucket.index);
     }
 
-    if (bucket.reindex_active !== undefined) {
-        for (bucketVersion in bucket.reindex_active) {
-            bucketReindexActive =
-                bucketReindexActive.concat(
-                    bucket.reindex_active[bucketVersion]);
-        }
-    }
-
     var fieldsUsedInFilter = {};
 
     filter.forEach(function addUsedFields(filterItem) {
@@ -1130,6 +1141,29 @@ function getUnusableIndexes(filter, bucket, log) {
 }
 
 
+function checkOnlyUsableIndexes(req, cb) {
+    assert.object(req, 'req');
+    assert.func(cb, 'cb');
+
+    var log = req.log;
+    var unusable = getUnusableIndexes(req.filter, req.bucket, log);
+
+    if (unusable.unindexedFields.length > 0 ||
+        unusable.reindexingFields.length > 0) {
+        log.error({ unusable: unusable }, 'filter references unusable indexes');
+        cb(new NotIndexedError({}, req.bucket.name, req.rawFilter, {
+            unindexedFields: unusable.unindexedFields,
+            reindexingFields: unusable.reindexingFields
+        }));
+        return;
+    }
+
+    log.trace('filter does not reference unusable indexes');
+
+    cb();
+}
+
+
 ///--- Exports
 
 module.exports = {
@@ -1147,5 +1181,7 @@ module.exports = {
     runPostChain: runPostChain,
     selectForUpdate: selectForUpdate,
     indexObject: indexObject,
+    checkOnlyUsableIndexes: checkOnlyUsableIndexes,
+    getReindexingFields: getReindexingFields,
     getUnusableIndexes: getUnusableIndexes
 };
diff --git a/lib/objects/del_many.js b/lib/objects/del_many.js
index bb6c9bf..4eb789d 100644
--- a/lib/objects/del_many.js
+++ b/lib/objects/del_many.js
@@ -29,6 +29,7 @@ var PIPELINE = [
     control.getPGHandleAndTransaction,
     common.parseFilter,
     common.loadBucket,
+    common.checkOnlyUsableIndexes,
     common.decorateFilter,
     common.buildWhereClause,
     drop
diff --git a/lib/objects/find.js b/lib/objects/find.js
index 74c99e2..3eb6995 100644
--- a/lib/objects/find.js
+++ b/lib/objects/find.js
@@ -48,6 +48,7 @@ var HANDLED_FINDOBJECTS_OPTIONS = [
     'sql_only',
     'noBucketCache',
     'timeout',
+    'requireOnlineReindexing',
     'requireIndexes'
 ];
 
@@ -63,7 +64,9 @@ function checkRequiredIndexes(req, cb) {
     var log = req.log;
     var unusableIndexes;
 
-    if (req.opts && req.opts.requireIndexes === true) {
+    if (req.opts && (
+        req.opts.requireIndexes === true ||
+        req.opts.requireOnlineReindexing === true)) {
         unusableIndexes =
             common.getUnusableIndexes(req.filter, req.bucket, log);
 
@@ -184,6 +187,8 @@ function getRecords(req, cb) {
     }, 'getRecords: entered');
 
     var query = req.pg.query(sql, req.where.args);
+    var ignore = common.getReindexingFields(req.bucket);
+
     query.on('error', function (err) {
         query.removeAllListeners('end');
         query.removeAllListeners('row');
@@ -202,7 +207,7 @@ function getRecords(req, cb) {
         var obj;
 
         try {
-            obj = common.rowToObject(req.bucket, row);
+            obj = common.rowToObject(req.bucket, ignore, row);
         } catch (e) {
             log.error({
                 bucket: req.bucket.name,
diff --git a/lib/objects/get.js b/lib/objects/get.js
index c0aa9f2..0b50340 100644
--- a/lib/objects/get.js
+++ b/lib/objects/get.js
@@ -44,9 +44,18 @@ var PIPELINE = [
             common.loadBucket(r, cb);
         }
     },
+    sendHandledOptions,
     loadObject
 ];
 
+var HANDLED_GETOBJECT_OPTIONS = [
+    'noBucketCache',
+    'noCache',
+    'req_id',
+    'requireOnlineReindexing',
+    'timeout'
+];
+
 
 ///--- Handlers
 
@@ -62,6 +71,24 @@ function checkCache(req, cb) {
     cb();
 }
 
+
+/**
+ * Sends a record that contains the list of getObject request options that the
+ * server handles. This allows Moray clients to compare this set of handled
+ * options with what they expect the server to handle.
+ */
+function sendHandledOptions(req, cb) {
+    var res = req.rpc;
+
+    if (req.opts && req.opts.internalOpts &&
+        req.opts.internalOpts.sendHandledOptions === true) {
+        res.write({ _handledOptions: HANDLED_GETOBJECT_OPTIONS });
+    }
+
+    cb();
+}
+
+
 function loadObject(req, cb) {
     if (req.object) {
         cb();
@@ -98,7 +125,8 @@ function loadObject(req, cb) {
         if (!row) {
             cb(new ObjectNotFoundError(bucket, req.key));
         } else {
-            req.object = common.rowToObject(req.bucket, row);
+            var ignore = common.getReindexingFields(req.bucket);
+            req.object = common.rowToObject(req.bucket, ignore, row);
             req.cache.set(req.cacheKey, req.object);
             log.debug({
                 object: req.object
diff --git a/lib/objects/reindex.js b/lib/objects/reindex.js
index 58ca424..33068db 100644
--- a/lib/objects/reindex.js
+++ b/lib/objects/reindex.js
@@ -134,24 +134,18 @@ function processRows(req, cb) {
     var result = req.pg.query(sql);
     var queue = vasync.queue(indexObject, 1);
 
-
-    // Ignore field being reindexed when performing row->obj conversion.
-    // This prevents empty/stale fields from clobbering good data.
-    var ignore = [];
-    if (req.bucket.reindex_active) {
-        Object.keys(req.bucket.reindex_active).forEach(function (ver) {
-            ignore = ignore.concat(req.bucket.reindex_active[ver]);
-        });
-    }
+    var ignore = common.getReindexingFields(req.bucket);
 
     result.on('row', function (row) {
-        var obj = common.rowToObject(req.bucket, row, ignore);
+        var obj = common.rowToObject(req.bucket, ignore, row);
         queue.push(obj);
     });
+
     result.once('error', function (err) {
         log.debug(err, 'reindexRows: failed');
         cb(err);
     });
+
     result.once('end', queue.close.bind(queue));
 
     queue.once('end', function () {
diff --git a/lib/objects/update.js b/lib/objects/update.js
index 47ab8c7..b8487a4 100644
--- a/lib/objects/update.js
+++ b/lib/objects/update.js
@@ -36,6 +36,7 @@ var PIPELINE = [
     control.getPGHandleAndTransaction,
     common.parseFilter,
     common.loadBucket,
+    common.checkOnlyUsableIndexes,
     common.decorateFilter,
     common.buildWhereClause,
     updateRows
@@ -72,6 +73,8 @@ function updateRows(req, cb) {
         return;
     }
 
+    var reindexing = common.getReindexingFields(req.bucket);
+
     for (i = 0; i < req.fieldKeys.length; i++) {
         k = req.fieldKeys[i];
         if (!req.bucket.index[k]) {
@@ -79,6 +82,14 @@ function updateRows(req, cb) {
             return;
         }
 
+        if (reindexing.indexOf(k) !== -1) {
+            cb(new NotIndexedError({}, b.name, JSON.stringify(req.fields), {
+                unindexedFields: [],
+                reindexingFields: reindexing
+            }));
+            return;
+        }
+
         if (args[k] === null) {
             cb(new NotNullableError(k, req.bucket.index[k].type));
             return;
diff --git a/lib/schema.js b/lib/schema.js
index b1904e6..8196018 100644
--- a/lib/schema.js
+++ b/lib/schema.js
@@ -164,6 +164,11 @@ AJV_ENV.addSchema({
             description: 'Information to pass to pre/post-triggers',
             allOf: [ { '$ref': 'object' } ]
         },
+        'requireOnlineReindexing': {
+            description: 'Return fields being reindexed ' +
+                'instead of dropping their value',
+            type: 'boolean'
+        },
 
         // Filter options
         'noLimit': {
@@ -198,6 +203,10 @@ AJV_ENV.addSchema({
                 'instead of running it',
             type: 'boolean'
         },
+        'requireIndexes': {
+            description: 'Check the filter for unindexed or reindexing fields',
+            type: 'boolean'
+        },
 
         // Misc options
         'no_reindex': {
@@ -205,6 +214,19 @@ AJV_ENV.addSchema({
         },
         'deep': {
             type: 'boolean'
+        },
+
+        // Internal options
+        'internalOpts': {
+            description: 'Internal options sent by the client',
+            type: 'object',
+            properties: {
+                'sendHandledOptions': {
+                    description: 'Whether the client expects the server to ' +
+                        'report which options were honored',
+                    type: 'boolean'
+                }
+            }
         }
     }
 });
diff --git a/package.json b/package.json
index 666f675..9ef41db 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
     "name": "moray-server",
     "description": "SmartDataCenter H/A Key/Value store",
-    "version": "2.2.0",
+    "version": "2.3.0",
     "author": "Joyent (joyent.com)",
     "private": true,
     "main": "lib/index.js",
-- 
2.21.0

