From 898048fa3509c250f5deee3ad9154668caf09723 Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Fri, 28 Sep 2018 15:17:30 -0700
Subject: [PATCH] MANTA-3962 allow use of aperture resource '*' or 'all'
 Reviewed by: Jan Wyszynski <jan.wyszynski@joyent.com> Reviewed by: Joshua M.
 Clulow <jmc@joyent.com> Approved by: Jan Wyszynski <jan.wyszynski@joyent.com>

---
 package.json    |   2 +-
 test/ac.test.js | 113 ++++++++++++++++++++++++++++++++++++++++++++++++
 test/acsetup.js |  12 +++++
 3 files changed, 126 insertions(+), 1 deletion(-)

diff --git a/package.json b/package.json
index 59136e1..baa5714 100644
--- a/package.json
+++ b/package.json
@@ -31,7 +31,7 @@
         "libuuid": "0.1.2",
         "lru-cache": "2.3.1",
         "lstream": "0.0.4",
-        "mahi": "2.1.0",
+        "mahi": "2.2.0",
         "marlin": "git+https://github.com/joyent/manta-marlin.git#master",
         "mime": "1.2.11",
         "moray": "3.4.1",
diff --git a/test/ac.test.js b/test/ac.test.js
index d42bd2f..d6efa91 100644
--- a/test/ac.test.js
+++ b/test/ac.test.js
@@ -424,6 +424,119 @@ test('mchmod', function (t) {
     });
 });
 
+/*
+ * Tests for scenarios around rules with the "*"" or "all" aperture
+ * resource (support added with MANTA-3962).
+ */
+test('all-resource rules (untagged)', function (t) {
+    var self = this;
+    var path = sprintf('/%s/stor/muskie_test_obj', self.client.user);
+    var role = 'muskie_test_role_star';
+    /* First, create a test object, with no role tags. */
+    writeObject(self.client, path, function (err) {
+        if (err) {
+            t.fail(err);
+            t.end();
+            return;
+        }
+        self.paths.push(path);
+
+        /*
+         * This should not work: we haven't activated the role and we have
+         * no default roles that are tagged on the object, so we have no
+         * right to read it.
+         */
+        self.userClient.info(path, function (err2) {
+            if (!err2) {
+                t.fail('error expected');
+                t.end();
+                return;
+            }
+
+            /*
+             * This should not work either: the role has a rule "Can putobject"
+             * but without the * this doesn't apply to all objects, only role-
+             * tagged ones, and this object has no role-tag.
+             */
+            writeObject(self.userClient, path, {
+                'role': role
+            }, function (err3) {
+                if (!err3) {
+                    t.fail('error expected');
+                    t.end();
+                    return;
+                }
+
+                /*
+                 * This should work, though: the "Can getobject *" rule kicks
+                 * in, even though this object isn't tagged (thanks to the *).
+                 */
+                self.userClient.info(path, {
+                    headers: {
+                        'role': role
+                    }
+                }, function (err4, info) {
+                    if (err4) {
+                        t.fail(err4);
+                        t.end();
+                        return;
+                    }
+                    t.strictEqual(info.headers['role-tag'], undefined);
+                    t.end();
+                });
+            });
+        });
+    });
+});
+
+test('all-resource rules (tagged)', function (t) {
+    var self = this;
+    var path = sprintf('/%s/stor/muskie_test_obj', self.client.user);
+    var role = 'muskie_test_role_star';
+    /* First, create a test object, this time tagged to the role. */
+    writeObject(self.client, path, role, function (err) {
+        if (err) {
+            t.fail(err);
+            t.end();
+            return;
+        }
+        self.paths.push(path);
+
+        /*
+         * We should be able to write it, since it's role-tagged so the
+         * "Can putobject" rule applies.
+         */
+        writeObject(self.userClient, path, {
+            'role': role,
+            'role-tag': role
+        }, function (err2) {
+            if (err2) {
+                t.fail(err2);
+                t.end();
+                return;
+            }
+
+            /*
+             * And we should also be able to read it thanks to the
+             * "Can getobject *" rule.
+             */
+            self.userClient.info(path, {
+                headers: {
+                    'role': role
+                }
+            }, function (err3, info) {
+                if (err3) {
+                    t.fail(err3);
+                    t.end();
+                    return;
+                }
+                t.equal(info.headers['role-tag'], role);
+                t.end();
+            });
+        });
+    });
+});
+
 test('cross-account role access (denied)', function (t) {
     var self = this;
     var path = sprintf('/%s/stor', self.operClient.user);
diff --git a/test/acsetup.js b/test/acsetup.js
index 64a06ac..938216c 100644
--- a/test/acsetup.js
+++ b/test/acsetup.js
@@ -66,6 +66,13 @@ var POLICIES = [
         rules: [
             'Can mlogin'
         ]
+    },
+    {
+        name: 'muskie_test_star',
+        rules: [
+            'Can getobject *',
+            'Can putobject'
+        ]
     }
 ];
 
@@ -110,6 +117,11 @@ var ROLES = [
         members: [ 'muskie_test_user' ],
         policies: [ 'muskie_test_fromjob' ]
     },
+    {
+        name: 'muskie_test_role_star',
+        members: [ 'muskie_test_user' ],
+        policies: [ 'muskie_test_star' ]
+    },
     {
         name: 'muskie_test_role_all',
         members: [ 'muskie_test_user' ],
-- 
2.21.0

