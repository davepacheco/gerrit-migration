From 49b7adec70babb310155b2bfbdd18375b233ba5d Mon Sep 17 00:00:00 2001
From: Richard Bradley <richard.bradley@joyent.com>
Date: Mon, 12 Aug 2019 15:43:57 +0100
Subject: [PATCH] MANTA-4318 pgstatsmon needs to be able to talk to buckets
 postgres MANTA-4378 pgstatsmon should consider schema when gathering
 relation-specific data

---
 etc/vmapi.json                     | 12 +++++-
 lib/dbinit.js                      |  9 ++++-
 lib/pgclient.js                    |  5 ++-
 lib/pgstatsmon.js                  | 60 +++++++++++++++++++++++-------
 lib/queries.js                     | 51 +++++++++++++------------
 package.json                       |  2 +-
 sapi_manifests/pgstatsmon/template |  7 ++++
 7 files changed, 104 insertions(+), 42 deletions(-)

diff --git a/etc/vmapi.json b/etc/vmapi.json
index 16dee4b..be6b57b 100644
--- a/etc/vmapi.json
+++ b/etc/vmapi.json
@@ -13,8 +13,16 @@
         "pollInterval": 600000,
         "tags": {
             "vm_tag_name": "manta_role",
-            "vm_tag_value": "postgres",
-            "nic_tag_name": "manta"
+            "vm_tag_value": "*postgres",
+            "nic_tag": "manta"
+        }
+    },
+    "roles": {
+        "buckets-postgres": {
+            "database": "boray"
+        },
+        "postgres": {
+            "database": "moray"
         }
     },
     "target": {
diff --git a/lib/dbinit.js b/lib/dbinit.js
index fe73458..cdabe4c 100644
--- a/lib/dbinit.js
+++ b/lib/dbinit.js
@@ -237,7 +237,9 @@ function create_progress_vacuum_function(args, callback) {
 	var query;
 	query = 'DROP FUNCTION IF EXISTS get_stat_progress_vacuum(); '
 	+ 'CREATE FUNCTION public.get_stat_progress_vacuum('
+	+ 'out schemaname name, '
 	+ 'out relname name, '
+	+ 'out relid oid, '
 	+ 'out vacuum_mode text, '
 	+ 'out query_start double precision, '
 	+ 'out phase bigint, '
@@ -249,7 +251,10 @@ function create_progress_vacuum_function(args, callback) {
 	+ 'out num_dead_tuples bigint) '
 	+ ' RETURNS SETOF record'
 	+ ' AS $$'
-	+ ' SELECT T.relname AS relname,'
+	+ ' SELECT'
+	+ '	  N.nspname AS schemaname,'
+	+ '	  T.relname AS relname,'
+	+ '	  T.relid AS relid,'
 	+ '	  CASE'
 	+ '	    WHEN'
 	+ '	      A.query ~ \'^autovacuum.*(to prevent wraparound)\''
@@ -274,6 +279,8 @@ function create_progress_vacuum_function(args, callback) {
 	+ ' JOIN pg_database D ON (S.datid = D.oid) '
 	+ ' JOIN pg_stat_all_tables As T ON (T.relid = S.relid)'
 	+ ' JOIN pg_stat_activity A ON (S.pid = A.pid)'
+	+ ' JOIN pg_class C ON (C.oid = S.relid)'
+	+ ' JOIN pg_namespace N ON (N.oid = C.relnamespace) '
 	+ ' $$'
 	+ ' LANGUAGE SQL VOLATILE'
 	+ ' SECURITY DEFINER;';
diff --git a/lib/pgclient.js b/lib/pgclient.js
index af6611e..758cb1c 100644
--- a/lib/pgclient.js
+++ b/lib/pgclient.js
@@ -3,7 +3,7 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/.
  *
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 /*
@@ -107,7 +107,8 @@ PGClient.prototype.isDestroyed = function () {
  */
 PGClient.prototype._handleClientError = function (err) {
 	this.log.error({
-		err: err
+		err: err,
+		backend: this.name
 	}, 'pg: client emitted an error');
 
 	this.client_had_err = err;
diff --git a/lib/pgstatsmon.js b/lib/pgstatsmon.js
index 5ac72f1..9cad9d4 100644
--- a/lib/pgstatsmon.js
+++ b/lib/pgstatsmon.js
@@ -89,6 +89,24 @@ function pgstatsmon(config)
 		    'config.vmapi.tags.vm_tag_value');
 		mod_assertplus.string(vmapi.tags.nic_tag,
 		    'config.vmapi.tags.nic_tag');
+
+		/*
+		 * Required only if we're expecting to receive multiple
+		 * different role tag values from the vmapi resolver.
+		 *
+		 * If this is not supplied, assume that config.database applies
+		 * to all of the backends.
+		 */
+		if (config.roles) {
+			mod_assertplus.object(config.roles, 'config.roles');
+			Object.keys(config.roles).forEach(function (name) {
+				var role = config.roles[name];
+				mod_assertplus.object(role,
+				    'roles["' + name + '"]');
+				mod_assertplus.string(role.database,
+				    'roles["' + name + '"].database');
+			});
+		}
 	} else {
 		/* use static backends if not using VMAPI */
 		var static_conf = config.static;
@@ -131,6 +149,7 @@ function PgMon(config)
 	this.pm_interval_rate = config.interval;
 	this.pm_targets = [];
 	this.pm_prometheus_target = null;
+	this.pm_roles = config.roles || {};
 
 	this.pm_query_timeout = config.connections.query_timeout;
 	this.pm_connect_timeout = config.connections.connect_timeout;
@@ -164,13 +183,6 @@ function PgMon(config)
 	this.pm_dbuser = config.user;
 	this.pm_database = config.database;
 
-	this.pm_client_constructor = mod_pgclient.pgCreate({
-		'queryTimeout': this.pm_query_timeout,
-		'user': this.pm_dbuser,
-		'database': this.pm_database,
-		'log': this.pm_log
-	});
-
 	/* interval returned from setInterval */
 	this.pm_interval_object = null;
 
@@ -241,7 +253,7 @@ PgMon.prototype.connect = function ()
 {
 	var mon = this;
 	var log = mon.pm_log;
-	var resolver, pool;
+	var resolver, pg_client_constructor, pool;
 	var ind;
 
 	var delay = 1000; /* initial delay between reconnect tries */
@@ -272,7 +284,21 @@ PgMon.prototype.connect = function ()
 		mod_assertplus.string(backend.name, 'backend.name');
 		mod_assertplus.string(backend.address, 'backend.address');
 
-		log.info('backend discovered', backend);
+		log.info({
+		    'backend': backend
+		}, 'backend discovered');
+
+		var database;
+		if (backend.tag &&
+		    mon.pm_roles.hasOwnProperty(backend.tag.value)) {
+			database = mon.pm_roles[backend.tag.value].database;
+		} else {
+			database = mon.pm_database;
+			log.warn({
+			    'backend': backend
+			}, 'unable to determine backend database.  using ' +
+			    'default.');
+		}
 
 		/* start a staticIpResolver for each backend */
 		resolver = new mod_cueball.StaticIpResolver({
@@ -283,8 +309,15 @@ PgMon.prototype.connect = function ()
 		});
 		resolver.start();
 
+		pg_client_constructor = mod_pgclient.pgCreate({
+		    'queryTimeout': mon.pm_query_timeout,
+		    'user': mon.pm_dbuser,
+		    'database': database,
+		    'log': mon.pm_log
+		});
+
 		pool = new mod_cueball.ConnectionPool({
-			'constructor': mon.pm_client_constructor,
+			'constructor': pg_client_constructor,
 			'domain': backend.name, /* not actually used */
 			'recovery': {
 				'default': {
@@ -307,6 +340,7 @@ PgMon.prototype.connect = function ()
 			'pool': pool,
 			'resolver': resolver,
 			'backend': backend,
+			'database': database,
 			'needs_setup': true,
 			'setting_up': false
 		});
@@ -378,7 +412,7 @@ PgMon.prototype.setup_backend = function setup_backend(pi)
 
 	mod_dbinit.setup_monitoring_user({
 		'user': mon.pm_dbuser,
-		'targetdb': mon.pm_database,
+		'targetdb': mon.pm_pools[pi].database,
 		'name': mon.pm_pools[pi].backend.name,
 		'hostname': mon.pm_pools[pi].backend.address,
 		'port': mon.pm_pools[pi].backend.port,
@@ -391,7 +425,7 @@ PgMon.prototype.setup_backend = function setup_backend(pi)
 			mon.pm_pools[pi].needs_setup = true;
 			mon.pm_log.error({
 				'error': err,
-				'backend': mon.pm_pools[pi].name
+				'backend': mon.pm_pools[pi].backend.name
 			}, 'error setting up backend');
 			return;
 		}
@@ -733,7 +767,7 @@ PgMon.prototype.tick = function (callback)
 			if (error && mod_verror.hasCauseWithName(error,
 			    'QueryTimeoutError')) {
 
-				mon.pm_log.info({
+				mon.pm_log.warn({
 					'error': error.message,
 					'backend': backend
 				}, 'query timeout, destroying connection');
diff --git a/lib/queries.js b/lib/queries.js
index 4008930..6b559d6 100644
--- a/lib/queries.js
+++ b/lib/queries.js
@@ -131,8 +131,8 @@ var QUERY_SCHEMA = {
  */
 var QUERIES = [ {
     'name': 'pg_stat_user_tables',
-    'statkey': 'relname',
-    'metadata': [ 'relname' ],
+    'statkey': 'relid',
+    'metadata': [ 'schemaname', 'relname' ],
     'versionToSql': { 'all': 'SELECT * FROM pg_stat_user_tables;' },
     'counters': [ {
 	'attr': 'analyze_count',
@@ -180,8 +180,8 @@ var QUERIES = [ {
     } ]
 }, {
     'name': 'pg_statio_user_tables',
-    'statkey': 'relname',
-    'metadata': [ 'relname' ],
+    'statkey': 'relid',
+    'metadata': [ 'schemaname', 'relname' ],
     'versionToSql': { 'all': 'SELECT * FROM pg_statio_user_tables;' },
     'counters': [ {
 	'attr': 'heap_blks_read',
@@ -198,8 +198,8 @@ var QUERIES = [ {
     } ]
 }, {
     'name': 'pg_statio_user_indexes',
-    'statkey': 'indexrelname',
-    'metadata': [ 'indexrelname', 'relname' ],
+    'statkey': 'indexrelid',
+    'metadata': [ 'indexrelname', 'schemaname', 'relname' ],
     'versionToSql': { 'all': 'SELECT * FROM pg_statio_user_indexes;' },
     'counters': [ {
 	'attr': 'idx_blks_read',
@@ -391,10 +391,11 @@ var QUERIES = [ {
     } ]
 }, {
     'name': 'pg_relation_size',
-    'statkey': 'relname',
-    'metadata': [ 'relname' ],
+    'statkey': 'relfilenode',
+    'metadata': [ 'schemaname', 'relname' ],
     'versionToSql': { 'all': [
-	'SELECT relname, ',
+	'SELECT relname, relfilenode, ',
+	'		n.nspname AS schemaname,',
 	'		c.reltuples AS row_estimate,',
 	'		pg_total_relation_size(c.oid) AS total_bytes,',
 	'		pg_indexes_size(c.oid) AS index_bytes,',
@@ -402,7 +403,9 @@ var QUERIES = [ {
 	'               toast_bytes ',
 	'FROM pg_class c ',
 	'LEFT JOIN pg_namespace n ON n.oid = c.relnamespace ',
-	'WHERE relkind = \'r\' AND nspname LIKE \'public\';' ].join('\n') },
+	'WHERE relkind = \'r\' ',
+	'AND (n.nspname LIKE \'public\' ',
+	'    OR n.nspname LIKE \'manta%\');' ].join('\n') },
     'gauges': [ {
 	'attr': 'row_estimate',
 	'help': 'estimated number of tuples'
@@ -457,19 +460,21 @@ var QUERIES = [ {
     } ]
 }, {
     'name': 'pg_vacuum',
-    'statkey': 'relname',
-    'metadata': [ 'relname' ],
+    'statkey': 'relfilenode',
+    'metadata': [ 'schemaname', 'relname' ],
     'versionToSql': { 'all': [
 	// relowner 10 is hard-coded to be the 'postgres' superuser
-	'SELECT ',
-	'	     relname, age(relfrozenxid) AS xid_age, ',
-	'	     (SELECT ',
-	'		 setting::int FROM pg_settings ',
-	'		 WHERE',
-	'		 name = \'autovacuum_freeze_max_age\') - ',
-	'            age(relfrozenxid)',
-	'	     AS tx_until_wraparound_autovacuum ',
-	'FROM pg_class WHERE relowner != 10 AND relkind = \'r\';' ].join('\n')
+	'SELECT relname, relfilenode, ',
+	'	age(relfrozenxid) AS xid_age, ',
+	'	(SELECT ',
+	'	    setting::int FROM pg_settings ',
+	'	    WHERE',
+	'	    name = \'autovacuum_freeze_max_age\') - ',
+	'	    age(relfrozenxid) AS tx_until_wraparound_autovacuum, ',
+	'	n.nspname AS schemaname ',
+	'FROM pg_class c ',
+	'LEFT JOIN pg_namespace n on n.oid = c.relnamespace ',
+	'WHERE relowner != 10 AND relkind = \'r\';' ].join('\n')
     },
     'gauges': [ {
 	'attr': 'xid_age',
@@ -480,8 +485,8 @@ var QUERIES = [ {
     } ]
 }, {
     'name': 'pg_stat_progress_vacuum',
-    'statkey': 'relname',
-    'metadata': [ 'relname', 'vacuum_mode' ],
+    'statkey': 'relid',
+    'metadata': [ 'schemaname', 'relname', 'vacuum_mode' ],
     'versionToSql': {
 	'90600': 'SELECT * FROM get_stat_progress_vacuum();'
     },
diff --git a/package.json b/package.json
index 64be016..f2ffa42 100644
--- a/package.json
+++ b/package.json
@@ -18,7 +18,7 @@
 		"restify": "6.3.4",
 		"vasync": "2.2.0",
 		"verror": "1.10.0",
-		"vmapi-resolver": "2.0.0"
+		"vmapi-resolver": "git+https://github.com/chudley/node-vmapi-resolver.git#tags"
 	},
 	"author": "Joyent, Inc",
 	"license": "MPL-2.0"
diff --git a/sapi_manifests/pgstatsmon/template b/sapi_manifests/pgstatsmon/template
index feb0f01..64c7bdf 100644
--- a/sapi_manifests/pgstatsmon/template
+++ b/sapi_manifests/pgstatsmon/template
@@ -17,6 +17,13 @@
             "nic_tag": "{{NIC_TAG}}"
         }
     },
+    "roles": {
+        {{#VM_ROLES}}
+            "{{name}}": {
+                "database": "{{database}}"
+            }{{^last}},{{/last}}
+        {{/VM_ROLES}}
+    },
     "target": {
         "ip": "0.0.0.0",
         "port": 8881,
-- 
2.17.2 (Apple Git-113)

