commit 9ef3d2a93cc1c8cea29e8e2df60463fc9b848fa3 (refs/changes/65/4965/1)
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2018-10-16T21:29:42+02:00 (12 months ago)
    
    TRITON-883 `sdcadm up SVC` should update image_uuid associated with the service

diff --git a/lib/cli/do_update.js b/lib/cli/do_update.js
index 7afc075..3890633 100644
--- a/lib/cli/do_update.js
+++ b/lib/cli/do_update.js
@@ -86,7 +86,7 @@ Update.prototype.execute = function cExecute(opts, args, cb) {
          *
          *      [
          *          {"service": "cnapi", "image": "<uuid-or-local-path>"},
-         *          {"service": "provisioner", "image": "<uuid-or-local-path>"},
+         *          {"service": "cn-agent", "image": "<uuid-or-local-path>"},
          *          ...
          *      ]
          */
diff --git a/lib/procedures/index.js b/lib/procedures/index.js
index dfc3bf3..fbed497 100644
--- a/lib/procedures/index.js
+++ b/lib/procedures/index.js
@@ -43,8 +43,6 @@ var ALL_HA_READY_SVCS = HA_READY_SIMPLE_SVCS.concat([
     'moray'
 ]);
 
-// --- Disallowed agents
-var DISALLOWED_AGENTS = ['provisioner', 'heartbeater', 'zonetracker'];
 
 // --- From this version, SAPI can be updated w/o using a temporary instance:
 var FIRST_NON_CIRCULAR_SAPI_VERSION = '20180622T144529Z';
@@ -742,18 +740,11 @@ function coordinatePlan(opts, cb) {
                     return;
                 }
 
-                if (DISALLOWED_AGENTS.indexOf(change.service.name) !== -1) {
-                    errs.push(new UsageError(format(
-                        'Update of the agent "%s" is not supported.\n' +
-                        'Please consider using `sdcadm experimental ' +
-                        'update-agents` (deprecated) instead.',
-                        change.service.name
-                    )));
-                    return;
-                }
-
                 var svcInsts = [];
                 if (change.type === 'update-service') {
+                    if (!opts.servers || !opts.servers.length) {
+                        change.update_sapi_image = true;
+                    }
                     svcInsts = instsFromSvcName[change.service.name] || [];
                     // If we have a given set of servers, just filter instances
                     // present on the given list:
@@ -891,16 +882,6 @@ function coordinatePlan(opts, cb) {
                     return;
                 }
 
-                if (DISALLOWED_AGENTS.indexOf(change.service.name) !== -1) {
-                    errs.push(new errors.UsageError(format(
-                            'Creation of agent "%s" ' +
-                            'instances is not supported.',
-                            change.service.name)));
-                    remaining.push(change);
-                    nextChange();
-                    return;
-                }
-
                 var arg = {
                     insts: [],
                     serverFromUuidOrHostname: opts.serverFromUuidOrHostname
diff --git a/lib/procedures/update-agent-v1.js b/lib/procedures/update-agent-v1.js
index e611040..08401f5 100644
--- a/lib/procedures/update-agent-v1.js
+++ b/lib/procedures/update-agent-v1.js
@@ -26,6 +26,7 @@ var common = require('../common');
 var steps = require('../steps');
 
 var Procedure = require('./procedure').Procedure;
+var s = require('./shared');
 
 /**
  * Procedure for updating the different agent services.
@@ -147,6 +148,24 @@ UpdateAgentV1.prototype.execute = function uaExecute(opts, callback) {
                     }
                 });
             },
+
+            /*
+             * We will bump Service Image only when a request to update the
+             * agent in all the servers have been made
+             */
+            function updateSapiSvcImage(_, next) {
+                if (!change.update_sapi_image) {
+                    next();
+                    return;
+                }
+                s.updateSapiSvc({
+                    change: change,
+                    opts: {
+                        sdcadm: sdcadm,
+                        progress: progress
+                    }
+                }, next);
+            },
             /*
              * Unless CNAPI has been updated to a version newer than
              * MIN_CNAPI_VERSION, tell the user about the CNAPI version
diff --git a/lib/sdcadm.js b/lib/sdcadm.js
index 156d743..7952262 100644
--- a/lib/sdcadm.js
+++ b/lib/sdcadm.js
@@ -577,7 +577,7 @@ SdcAdm.prototype.getCurrServerUuid = function getCurrServerUuid(cb) {
  *      type            type of service, one of 'vm' or 'agent'
  *      instance        (Note: Agents don't current have a instance UUID
  *                      exposed.)
- *      service         name of service, e.g. 'vmapi, 'provisioner'
+ *      service         name of service, e.g. 'vmapi, 'cn-agent'
  *      image           image UUID (Note: Agents aren't
  *                      currently distributed as separate "images" in
  *                      updates.joyent.com. Until they are `image === null`.)
@@ -999,103 +999,53 @@ SdcAdm.prototype.getServices = function getServices(opts, cb) {
     assert.func(cb, 'cb');
 
     var svcs = [];
-    vasync.pipeline({funcs: [
-        function ensureSdcApp(_, next) {
-            self.ensureSdcApp({}, next);
-        },
-        function getSapiSvcs(_, next) {
-            // 'cloudapi' zones typically don't have `tags.smartdc_core=true`
-            // so we can't filter on that. And VMAPI doesn't support filtering
-            // on presence of a tag (e.g. `smartdc_role`.)
-            var filters = {
-                application_uuid: self.sdcApp.uuid
-            };
+    self.ensureSdcApp({}, function ensureAppCb(err) {
+        if (err) {
+            cb(err);
+            return;
+        }
 
-            if (opts.type) {
-                filters.type = opts.type;
-            }
-            self.sapi.listServices(filters, function (svcsErr, svcs_) {
-                if (svcsErr) {
-                    next(new errors.SDCClientError(svcsErr, 'sapi'));
-                    return;
-                }
-                svcs = svcs_;
-                var haveAssets = false;
-                svcs.forEach(function (svc) {
-                    // TODO(trent): want SAPI to have this eventually.
-                    // TOOLS-724: new SAPI instances will have this type
-                    // member. Do not override it when already present.
-                    if (!svc.type) {
-                        svc.type = 'vm';
-                    }
-                    if (svc.name === 'assets') {
-                        haveAssets = true;
-                    }
-                });
-                // TODO: get assets service in SAPI. Hack it in for now.
-                // Not having 'assets' service mucks up update type guessing
-                // in 'sdcadm update assets', for example.
-                if (!haveAssets) {
-                    svcs.push({
-                        type: 'vm',
-                        name: 'assets'
-                    });
-                }
+        // 'cloudapi' zones typically don't have `tags.smartdc_core=true`
+        // so we can't filter on that. And VMAPI doesn't support filtering
+        // on presence of a tag (e.g. `smartdc_role`.)
+        var filters = {
+            application_uuid: self.sdcApp.uuid
+        };
 
-                next();
-            });
-        },
-        function getAgents(_, next) {
-            // TODO: Remove these hardcoded values
-            // Hardcode "known" agents for now until SAPI handles agents.
-            // Excluding "marlin". Should we include hagfish-watcher?
-            [
-                {
-                    'name': 'cabase'
-                },
-                {
-                    'name': 'hagfish-watcher'
-                },
-                {
-                    'name': 'agents_core'
-                },
-                {
-                    'name': 'firewaller'
-                },
-                {
-                    'name': 'amon-agent'
-                },
-                {
-                    'name': 'cainstsvc'
-                },
-                {
-                    'name': 'provisioner'
-                },
-                {
-                    'name': 'amon-relay'
-                },
-                {
-                    'name': 'heartbeater'
-                },
-                {
-                    'name': 'smartlogin'
-                },
-                {
-                    'name': 'zonetracker'
+        if (opts.type) {
+            filters.type = opts.type;
+        }
+        self.sapi.listServices(filters, function (svcsErr, svcs_) {
+            if (svcsErr) {
+                cb(new errors.SDCClientError(svcsErr, 'sapi'));
+                return;
+            }
+            svcs = svcs_;
+            var haveAssets = false;
+            svcs.forEach(function (svc) {
+                // TODO(trent): want SAPI to have this eventually.
+                // TOOLS-724: new SAPI instances will have this type
+                // member. Do not override it when already present.
+                if (!svc.type) {
+                    svc.type = 'vm';
                 }
-            ].forEach(function (agent) {
-                var exists = svcs.filter(function (s) {
-                    return (s.name === agent.name);
-                }).length;
-                if (!exists) {
-                    agent.type = 'agent';
-                    svcs.push(agent);
+                if (svc.name === 'assets') {
+                    haveAssets = true;
                 }
             });
-            next();
-        }
-    ]}, function (err) {
-        cb(err, svcs);
+            // TODO: get assets service in SAPI. Hack it in for now.
+            // Not having 'assets' service mucks up update type guessing
+            // in 'sdcadm update assets', for example.
+            if (!haveAssets) {
+                svcs.push({
+                    type: 'vm',
+                    name: 'assets'
+                });
+            }
+
+            cb(err, svcs);
+        });
+
     });
 };
 
@@ -1640,7 +1590,7 @@ SdcAdm.prototype.reprovFailLock_Unlock = function reprovFailLock_Unlock(cb) {
  *    or
  *          'type:delete-instance' and 'instance'
  *    Where 'instance' for an agent is '$server/$service', e.g.
- *    'c26c3aba-405b-d04b-b51d-5a68d8f950d7/provisioner'.
+ *    'c26c3aba-405b-d04b-b51d-5a68d8f950d7/cn-agent'.
  * 3. vm delete-instance: 'type:delete' and 'instance' (the VM uuid or alias)
  * 4. delete-service: 'type:delete-service' and 'service'
  * 5. vm update-instance: 'instance', optional 'type:update-instance'
