commit 583c0b07bd60b4592ba04d50d28ca40762181b0b
Author: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
Date:   2019-08-05T15:35:35-06:00 (9 weeks ago)
    
    MANTA-4443 Update electric-boray to pull the hash ring image from imgapi
    Reviewed by: Dave Eddy <dave.eddy@joyent.com>
    Reviewed by: Isaac Davis <isaac.davis@joyent.com>
    Approved by: Isaac Davis <isaac.davis@joyent.com>

diff --git a/boot/setup.sh b/boot/setup.sh
index bd821e9..21b96d8 100755
--- a/boot/setup.sh
+++ b/boot/setup.sh
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright (c) 2019, Joyent, Inc.
+# Copyright 2019, Joyent, Inc.
 #
 
 #
@@ -31,9 +31,9 @@ source ${DIR}/scripts/services.sh
 export PATH=$SVC_ROOT/bin:$SVC_ROOT/build/node/bin:/opt/local/bin:/usr/sbin/:/usr/bin:$PATH
 export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
 
-FASH=/opt/smartdc/electric-boray/node_modules/.bin/fash
-LEVELDB_DIR_PARENT=/electric-boray/chash
-LEVELDB_DIR=$LEVELDB_DIR_PARENT/leveldb-
+FASH=$SVC_ROOT/node_modules/.bin/fash
+SDC_IMGADM=$SVC_ROOT/node_modules/.bin/sdc-imgadm
+RING_DIR=/electric-boray/data_placement
 SAPI_URL=$(mdata-get SAPI_URL)
 [[ -n $SAPI_URL ]] || fatal "no SAPI_URL found"
 sleep 10 # wait 10 seconds for dns to setup, this is so lame but otherwise will resolve in dns resolution errors.
@@ -67,8 +67,8 @@ while :; do
     break
 done
 
-HASH_RING_IMAGE=$(json metadata.HASH_RING_IMAGE <<< "$manta_app")
-[[ -n $HASH_RING_IMAGE ]] || fatal "no HASH_RING_IMAGE found"
+HASH_RING_IMAGE=$(json metadata.BUCKETS_HASH_RING_IMAGE <<< "$manta_app")
+[[ -n $HASH_RING_IMAGE ]] || fatal "no BUCKETS_HASH_RING_IMAGE found"
 HASH_RING_FILE=/var/tmp/$(uuid -v4).tar.gz
 export SDC_IMGADM_URL=$(json metadata.HASH_RING_IMGAPI_SERVICE <<< "$manta_app")
 [[ -n $SDC_IMGADM_URL ]] || fatal "no SDC_IMGADM_URL found"
@@ -94,49 +94,35 @@ function manta_setup_determine_instances {
     fi
 }
 
-function manta_setup_leveldb_hash_ring {
+function manta_setup_electric_boray_hash_ring {
     # get the hash ring image
-    /opt/smartdc/electric-boray/node_modules/.bin/sdc-imgadm get-file $HASH_RING_IMAGE -o $HASH_RING_FILE
-    local leveldb_ring_parent_dir=/var/tmp/$(uuid -v4)
-    local leveldb_ring=$leveldb_ring_parent_dir/hash_ring
-    mkdir -p $leveldb_ring_parent_dir
-    tar -xzf $HASH_RING_FILE -C $leveldb_ring_parent_dir
+    $SDC_IMGADM get-file $HASH_RING_IMAGE -o $HASH_RING_FILE
+    local ring_parent_dir=/var/tmp/$(uuid -v4)
+    local ring=$ring_parent_dir/hash_ring_serialized/ring.json
+    mkdir -p $ring_parent_dir
+    tar -xzf $HASH_RING_FILE -C $ring_parent_dir
     # delete the dataset if it already exists
     set +o errexit
     zfs destroy -rf $ZFS_DATASET
     set -o errexit
     # create the dataset
     zfs create -o canmount=noauto $ZFS_DATASET
-    [[ $? -eq 0 ]] || fatal "unable to setup leveldb"
+    [[ $? -eq 0 ]] || fatal "unable to setup buckets hash ring"
     # create the mountpoint dir
-    mkdir -p $LEVELDB_DIR_PARENT
-    [[ $? -eq 0 ]] || fatal "unable to setup leveldb"
+    mkdir -p $RING_DIR
+    [[ $? -eq 0 ]] || fatal "unable to setup buckets hash ring"
     # set the mountpoint
-    zfs set mountpoint=$LEVELDB_DIR_PARENT $ZFS_DATASET
-    [[ $? -eq 0 ]] || fatal "unable to setup leveldb"
+    zfs set mountpoint=$RING_DIR $ZFS_DATASET
+    [[ $? -eq 0 ]] || fatal "unable to setup buckets hash ring"
     # mount the dataset
     zfs mount $ZFS_DATASET
-    [[ $? -eq 0 ]] || fatal "unable to setup leveldb"
-    # build the list of leveldb locations
-    local leveldb_dirs
-    for (( i=1; i<=$ELECTRIC_BORAY_INSTANCES; i++ ))
-    do
-        leveldb_dirs[$i]=$LEVELDB_DIR$(expr 2020 + $i)
-    done
+    [[ $? -eq 0 ]] || fatal "unable to setup buckets hash ring"
+
+    cp -R $ring $RING_DIR
 
-    # try and load the topology from disk, if the load fails, we should error
-    # out since we expect the topology to be there in the configure script
-    for dir in "${leveldb_dirs[@]}"
-    do
-        cp -R $leveldb_ring $dir
-        [[ $? -eq 0 ]] || fatal "unable to setup leveldb"
-        # test with get-node on the newly created ring
-        $FASH get-node -l $dir -b leveldb yunong
-        [[ $? -eq 0 ]] || fatal "unable to setup leveldb"
-    done
     ZFS_SNAPSHOT=$ZFS_DATASET@$(date +%s)000
     zfs snapshot $ZFS_SNAPSHOT
-    [[ $? -eq 0 ]] || fatal "unable to setup leveldb"
+    [[ $? -eq 0 ]] || fatal "unable to setup buckets hash ring"
 }
 
 function manta_setup_electric_boray {
@@ -283,8 +269,8 @@ manta_common_setup "electric-boray" 0
 
 manta_setup_determine_instances
 
-# echo "Setting up leveldb"
-# manta_setup_leveldb_hash_ring
+echo "Setting up hash ring"
+manta_setup_electric_boray_hash_ring
 
 echo "Setting up e-boray"
 manta_setup_electric_boray
diff --git a/lib/boray_client.js b/lib/boray_client.js
index 12afbf9..39211c0 100644
--- a/lib/boray_client.js
+++ b/lib/boray_client.js
@@ -48,7 +48,7 @@ function createClient(options, callback) {
             borayargs.cueballOptions = {};
         }
         borayargs.unwrapErrors = true;
-        borayargs.host = pnodeUrl.hostname;
+        borayargs.srvDomain = pnodeUrl.hostname;
         borayargs.cueballOptions.defaultPort = parseInt(pnodeUrl.port, 10);
         borayargs.log = options.log.child({
             component: 'boray-client-' + pnodeUrl.hostname
diff --git a/lib/data_placement.js b/lib/data_placement.js
index b22cfc8..ae161d9 100644
--- a/lib/data_placement.js
+++ b/lib/data_placement.js
@@ -5,13 +5,14 @@
  */
 
 /*
- * Copyright (c) 2019, Joyent, Inc.
+ * Copyright 2019, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
 var bignum = require('bignum');
 var crypto = require('crypto');
 var fash = require('fash');
+var fs = require('fs');
 var vasync = require('vasync');
 var schema = require('./schema/index');
 
@@ -19,8 +20,6 @@ var schema = require('./schema/index');
 function DataDirector(options, cb) {
     assert.object(options, 'options');
     assert.object(options.log, 'options.log');
-    // assert.string(options.dataPlacementServerUrl,
-    //     'options.dataPlacementServerUrl');
     assert.func(cb, 'callback');
 
     var self = this;
@@ -59,9 +58,21 @@ function getPlacementData(self, callback) {
     if (self.dataPlacement.version === '1.0.0') {
         //TODO: Eventually this should call out to a separate function per
         // version
-        var ring =  require('../ring.json');
-        self.dataPlacement.ring = ring;
+        var ring;
+        try {
+            var file_data =
+                fs.readFileSync('/electric-boray/data_placement/ring.json');
+            ring = JSON.parse(file_data, 'utf8');
+
+        } catch (ex) {
+            var parse_err =
+                new Error('Failed to parse data placement information: ' +
+                    ex.message);
+            return callback(parse_err);
+        }
 
+        ring.pnodes = Object.keys(ring.pnodeToVnodeMap);
+        self.dataPlacement.ring = ring;
         return callback(null, self.dataPlacement);
     } else {
         var err = new Error('Invalid data placement version: ' +
@@ -70,15 +81,6 @@ function getPlacementData(self, callback) {
     }
 }
 
-// //TODO: Eventually this should call out to data placement service
-// function getVnodePnodeMapping(options, callback) {
-//     var mapping = { 1: "1.moray",
-//                     2: "2.moray"
-//                   };
-//     return callback(null, mapping);
-// }
-
-
 ///--- API
 
 /**
@@ -107,42 +109,21 @@ DataDirector.prototype.getObjectLocation =
         tkey: tkey
     }, 'DataDirector.getNode: key transformed');
 
-    var value = crypto.createHash(this.dataPlacement.ring.algorithm_.NAME).
+    var value = crypto.createHash(this.dataPlacement.ring.algorithm.NAME).
         update(tkey).digest('hex');
     // find the node that corresponds to this hash.
     var vnodeHashInterval =
-        this.dataPlacement.ring.algorithm_.VNODE_HASH_INTERVAL;
+        this.dataPlacement.ring.algorithm.VNODE_HASH_INTERVAL;
 
     var vnode = parseInt(bignum(value, 16).div(bignum(vnodeHashInterval, 16)),
         10);
 
-    var pnode = this.dataPlacement.ring.vnodeToPnodeMap_[vnode].pnode;
-    var data = this.dataPlacement.ring.pnodeToVnodeMap_[pnode][vnode];
-    // dtrace._fash_probes['getnode-done'].fire(function () {
-    //     return ([null, key, value, pnode, vnode, data]);
-    // });
+    var pnode = this.dataPlacement.ring.vnodeToPnodeMap[vnode].pnode;
+    var data = this.dataPlacement.ring.pnodeToVnodeMap[pnode][vnode];
 
     return callback(null, {vnode: vnode, pnode: pnode, data: data});
-
-    // self.chash_.getNode(tkey, function (err, hashedNode) {
-    //     log.debug({
-    //         err: err,
-    //         bucket: bucket,
-    //         key: key,
-    //         tkey: tkey,
-    //         hashedNode: hashedNode
-    //     }, 'DataDirector.getNode: exiting');
-
-    //     return callback(err, hashedNode);
-    // });
 };
 
-    // dtrace._fash_probes['getnode-start'].fire(function () {
-    //     return ([key]);
-    // });
-    // assert.optionalFunc(cb, 'callback');
-
-
 
 /**
  * Gets the hashed pnode for a bucket given an owner and bucket.
@@ -169,11 +150,11 @@ DataDirector.prototype.getBucketLocation =
         tkey: tkey
     }, 'DataDirector.getNode: key transformed');
 
-    var value = crypto.createHash(this.dataPlacement.ring.algorithm_.NAME).
+    var value = crypto.createHash(this.dataPlacement.ring.algorithm.NAME).
         update(tkey).digest('hex');
     // find the node that corresponds to this hash.
     var vnodeHashInterval =
-        this.dataPlacement.ring.algorithm_.VNODE_HASH_INTERVAL;
+        this.dataPlacement.ring.algorithm.VNODE_HASH_INTERVAL;
     console.log('hash interval: ' + vnodeHashInterval);
     console.log('value: ' + value);
 
@@ -181,25 +162,10 @@ DataDirector.prototype.getBucketLocation =
         10);
     console.log('Map to vnode: ' + vnode);
 
-    var pnode = this.dataPlacement.ring.vnodeToPnodeMap_[vnode].pnode;
-    var data = this.dataPlacement.ring.pnodeToVnodeMap_[pnode][vnode];
-    // dtrace._fash_probes['getnode-done'].fire(function () {
-    //     return ([null, key, value, pnode, vnode, data]);
-    // });
+    var pnode = this.dataPlacement.ring.vnodeToPnodeMap[vnode].pnode;
+    var data = this.dataPlacement.ring.pnodeToVnodeMap[pnode][vnode];
 
     return callback(null, {vnode: vnode, pnode: pnode, data: data});
-
-    // self.chash_.getNode(tkey, function (err, hashedNode) {
-    //     log.debug({
-    //         err: err,
-    //         bucket: bucket,
-    //         key: key,
-    //         tkey: tkey,
-    //         hashedNode: hashedNode
-    //     }, 'DataDirector.getNode: exiting');
-
-    //     return callback(err, hashedNode);
-    // });
 };
 
 
@@ -218,7 +184,7 @@ DataDirector.prototype.getPnodes = function getPnodes() {
     log.debug('DataDirectory.getPnodes: entered');
 
     if (self.dataPlacement.version === '1.0.0') {
-        return (self.dataPlacement.ring.pnodes_);
+        return (self.dataPlacement.ring.pnodes);
     } else {
         return ([]);
     }
@@ -232,7 +198,7 @@ DataDirector.prototype.getVnodes = function getVnodes(pnode) {
     log.debug('DataDirectory.getVnodes (%s): entered', pnode);
 
     if (self.dataPlacement.version === '1.0.0') {
-        return (Object.keys(self.dataPlacement.ring.pnodeToVnodeMap_[pnode]));
+        return (Object.keys(self.dataPlacement.ring.pnodeToVnodeMap[pnode]));
     } else {
         return ([]);
     }
@@ -249,7 +215,7 @@ DataDirector.prototype.getAllNodes = function getAllNodes() {
 
     log.debug('DataDirectory.getAllNodes(): entered');
 
-    var map = self.dataPlacement.ring.vnodeToPnodeMap_;
+    var map = self.dataPlacement.ring.vnodeToPnodeMap;
     Object.keys(map).forEach(function (vnode) {
         vnode = parseInt(vnode, 10);
         assert.number(vnode, 'vnode');
@@ -267,38 +233,6 @@ DataDirector.prototype.getAllNodes = function getAllNodes() {
 
 ///--- Privates
 
-
-// function loadRing(options, callback) {
-//     assert.object(options, 'options');
-//     assert.object(options.log, 'options.log');
-//     assert.string(options.location, 'options.location');
-//     assert.object(options.leveldbCfg, 'options.leveldbCfg');
-//     assert.func(callback, 'callback');
-
-//     options.log = options.log.child({component: 'ring'});
-
-//     // Loading the db from disk, so of course we want to turn this error off
-//     var leveldbCfg = {
-//         errorIfExists: false
-//     };
-
-//     options.ring = fash.load({
-//         log: options.log,
-//         backend: fash.BACKEND.LEVEL_DB,
-//         location: options.location,
-//         leveldbCfg: options.leveldbCfg || leveldbCfg
-//     }, function (err, chash) {
-//         if (err) {
-//             return callback(err);
-//         }
-//         options.chash = chash;
-
-//         var r = new Ring(options, function (_err) {
-//             return callback(err, r);
-//         });
-//     });
-// }
-
 function createDataDirector(options, cb) {
     assert.object(options, 'options');
     assert.object(options.log, 'options.log');
@@ -308,36 +242,8 @@ function createDataDirector(options, cb) {
     return (new DataDirector(options, cb));
 }
 
-// function deserializeRing(options, callback) {
-//     assert.object(options, 'options');
-//     assert.object(options.log, 'options.log');
-//     assert.string(options.topology, 'options.topology');
-//     assert.string(options.location, 'options.location');
-
-//     options.log = options.log.child({component: 'fash'});
-
-//     fash.deserialize({
-//         log: options.log,
-//         topology: options.topology,
-//         backend: fash.BACKEND.LEVEL_DB,
-//         location: options.location
-//     }, function (err, chash) {
-//         if (err) {
-//             return callback(err);
-//         }
-//         options.chash = chash;
-
-//         var r = new Ring(options, function (_err) {
-//             return callback(err, r);
-//         });
-//     });
-// }
-
-
 ///--- Exports
 
 module.exports = {
     createDataDirector: createDataDirector
-    // getObjectLocation: getObjectLocation,
-    // getBucketLocation: getBucketLocation
 };
diff --git a/lib/server.js b/lib/server.js
index 5b2f6d4..64ab062 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -369,7 +369,6 @@ function createServer(options, callback) {
             }
 
             opts.clients = clients;
-            // opts.indexShards = options.ringCfg.indexShards;
 
             var labels = {
                 datacenter: options.datacenter,
