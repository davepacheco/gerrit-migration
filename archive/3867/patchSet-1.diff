commit f7cbb23e5918fdfd903906aacb8432a86685f94c (refs/changes/67/3867/1)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2018-04-24T18:04:40-07:00 (1 year, 5 months ago)
    
    OS-6906 LX not setting "accessed" bit in GDT, KPTI sadness ensues

diff --git a/usr/src/uts/common/brand/lx/sys/lx_ldt.h b/usr/src/uts/common/brand/lx/sys/lx_ldt.h
index 825933e86c..993a880695 100644
--- a/usr/src/uts/common/brand/lx/sys/lx_ldt.h
+++ b/usr/src/uts/common/brand/lx/sys/lx_ldt.h
@@ -63,7 +63,7 @@ struct ldt_info {
 	USEGD_SETBASE(desc, (info)->base_addr);				\
 	USEGD_SETLIMIT(desc, (info)->limit);				\
 	(desc)->usd_type = ((info)->contents << 2) | 			\
-	    ((info)->read_exec_only ^ 1) << 1 | 0x10;			\
+	    ((info)->read_exec_only ^ 1) << 1 | 0x10 | SDT_A;		\
 	(desc)->usd_dpl = SEL_UPL;					\
 	(desc)->usd_p = (info)->seg_not_present ^ 1;			\
 	(desc)->usd_def32 = (info)->seg_32bit;				\
diff --git a/usr/src/uts/intel/ia32/os/desctbls.c b/usr/src/uts/intel/ia32/os/desctbls.c
index 5ef56b034c..01e272a73d 100644
--- a/usr/src/uts/intel/ia32/os/desctbls.c
+++ b/usr/src/uts/intel/ia32/os/desctbls.c
@@ -205,6 +205,14 @@ set_usegd(user_desc_t *dp, uint_t lmode, void *base, size_t size,
 		 */
 		dp->usd_def32 = defopsz;	/* 0 = 16, 1 = 32-bit ops */
 
+	/*
+	 * We should always set the "accessed" bit (SDT_A), otherwise the CPU
+	 * will write to the GDT whenever we change segment registers around.
+	 * With KPTI on, the GDT is read-only in the user page table, which
+	 * causes crashes if we don't set this.
+	 */
+	ASSERT3U(type & SDT_A, !=, 0);
+
 	dp->usd_long = lmode;	/* 64-bit mode */
 	dp->usd_type = type;
 	dp->usd_dpl = dpl;
@@ -234,6 +242,8 @@ set_usegd(user_desc_t *dp, void *base, size_t size, uint_t type,
 	dp->usd_midbase = (uintptr_t)base >> 16;
 	dp->usd_hibase = (uintptr_t)base >> (16 + 8);
 
+	ASSERT3U(type & SDT_A, !=, 0);
+
 	dp->usd_type = type;
 	dp->usd_dpl = dpl;
 	dp->usd_p = 1;
@@ -261,6 +271,8 @@ set_syssegd(system_desc_t *dp, void *base, size_t size, uint_t type,
 	dp->ssd_hibase = (uintptr_t)base >> (16 + 8);
 	dp->ssd_hi64base = (uintptr_t)base >> (16 + 8 + 8);
 
+	ASSERT3U(type & SDT_A, !=, 0);
+
 	dp->ssd_type = type;
 	dp->ssd_zero1 = 0;	/* must be zero */
 	dp->ssd_zero2 = 0;
@@ -294,6 +306,8 @@ set_syssegd(system_desc_t *dp, void *base, size_t size, uint_t type,
 	dp->ssd_midbase = (uintptr_t)base >> 16;
 	dp->ssd_hibase = (uintptr_t)base >> (16 + 8);
 
+	ASSERT3U(type & SDT_A, !=, 0);
+
 	dp->ssd_type = type;
 	dp->ssd_zero = 0;	/* must be zero */
 	dp->ssd_dpl = dpl;
@@ -400,6 +414,14 @@ gdt_update_usegd(uint_t sidx, user_desc_t *udp)
 
 #else	/* __xpv */
 
+	/*
+	 * We should always set the "accessed" bit (SDT_A), otherwise the CPU
+	 * will write to the GDT whenever we change segment registers around.
+	 * With KPTI on, the GDT is read-only in the user page table, which
+	 * causes crashes if we don't set this.
+	 */
+	if (udp->usd_p != 0)
+		ASSERT3U(udp->usd_type & SDT_A, !=, 0);
 	CPU->cpu_gdt[sidx] = *udp;
 
 #endif	/* __xpv */
@@ -428,6 +450,14 @@ ldt_update_segd(user_desc_t *ldp, user_desc_t *udp)
 
 #else	/* __xpv */
 
+	/*
+	 * We should always set the "accessed" bit (SDT_A), otherwise the CPU
+	 * will write to the LDT whenever we change segment registers around.
+	 * With KPTI on, the LDT is read-only in the user page table, which
+	 * causes crashes if we don't set this.
+	 */
+	if (udp->usd_p != 0)
+		ASSERT3U(udp->usd_type & SDT_A, !=, 0);
 	*ldp = *udp;
 
 #endif	/* __xpv */
diff --git a/usr/src/uts/intel/ia32/os/sysi86.c b/usr/src/uts/intel/ia32/os/sysi86.c
index cd1129ea1f..f0cba7d7d5 100644
--- a/usr/src/uts/intel/ia32/os/sysi86.c
+++ b/usr/src/uts/intel/ia32/os/sysi86.c
@@ -284,9 +284,12 @@ ssd_to_usd(struct ssd *ssd, user_desc_t *usd)
 	USEGD_SETLIMIT(usd, ssd->ls);
 
 	/*
-	 * set type, dpl and present bits.
+	 * Set type, dpl and present bits.
+	 *
+	 * Force the "accessed" bit to on so that we don't run afoul of
+	 * KPTI.
 	 */
-	usd->usd_type = ssd->acc1;
+	usd->usd_type = ssd->acc1 | SDT_A;
 	usd->usd_dpl = ssd->acc1 >> 5;
 	usd->usd_p = ssd->acc1 >> (5 + 2);
 
diff --git a/usr/src/uts/intel/sys/segments.h b/usr/src/uts/intel/sys/segments.h
index 84eb363f00..cd9c3e9895 100644
--- a/usr/src/uts/intel/sys/segments.h
+++ b/usr/src/uts/intel/sys/segments.h
@@ -482,6 +482,8 @@ void init_boot_gdt(user_desc_t *);
 #define	SDT_MEMERC	30	/* execute read conforming */
 #define	SDT_MEMERAC	31	/* execute read accessed conforming */
 
+#define	SDT_A		1	/* accessed bit */
+
 /*
  * Entries in the Interrupt Descriptor Table (IDT)
  */
