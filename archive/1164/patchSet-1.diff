commit 9560465f65c4843621b95b64008761cff9c9fa18 (refs/changes/64/1164/1)
Author: Orlando Vazquez <ovazquez@gmail.com>
Date:   2016-12-22T11:17:58-08:00 (2 years, 10 months ago)
    
    DOCKER-988 sdc-docker contains one more incorrect usage of LineStream module

diff --git a/lib/backends/sdc/build.js b/lib/backends/sdc/build.js
index 9e4fe33..94b1627 100644
--- a/lib/backends/sdc/build.js
+++ b/lib/backends/sdc/build.js
@@ -1115,62 +1115,69 @@ function commitImage(req, opts, callback) {
 
         commitEventStream = new LineStream();
         commitSocket.pipe(commitEventStream);
-        commitEventStream.on('line', function _commitLineCb(event) {
-            log.debug('commit: got commit event:', String(event));
-            try {
-                event = JSON.parse(event);
-            } catch (e) {
-                log.error('Commit: invalid json: %s - ignoring', event);
-                return;
-            }
-            switch (event.type) {
-                case 'end':
-                    if (event.error) {
-                        // Will be passed to callback `cb`.
-                        commitError = new Error(event.error);
-                    }
-                    break;
-                case 'message':
-                case 'stdout':
-                    log.info('Commit event message: %s', event.message);
-                    break;
-                case 'image_create':
-                    createImage(event.payload, { rat: rat, req: req },
-                        function _imageCreateCb(err, result)
-                    {
-                        sendEventResponse(event, err, result);
-                    });
-                    break;
-                case 'commit_finished':
-                    finalImageId = event.finalId;
-                    vasync.pipeline({ funcs: [
-                        function _doAddBaseImageHead(_result, next) {
-                            addBaseImageHead(baseImageId, finalImageId,
-                            {
-                                baseImageIndexName: baseImg.index_name,
-                                req: req,
-                                scratchImage: scratchImage
-                            }, next);
-                        },
-                        function _doTagImage(_result, next) {
-                            tagImage({
-                                    docker_id: finalImageId,
-                                    name: opts.tag,
-                                    req: req
-                                }, next);
-                        }
-                    ]}, function commitFinishPipeCb(err) {
-                        if (!err) {
-                            commitFinishedSuccessfully = true;
+
+        commitEventStream.on('readable', function () {
+            var line;
+            var event;
+            while ((line = commitEventStream.read()) != null) {
+                log.debug('commit: got commit event:', String(line));
+                try {
+                    event = JSON.parse(line);
+                } catch (e) {
+                    log.error('Commit: invalid json: %s - ignoring', event);
+                    continue;
+                }
+                switch (event.type) {
+                    case 'end':
+                        if (event.error) {
+                            // Will be passed to callback `cb`.
+                            commitError = new Error(event.error);
                         }
-                        sendEventResponse(event, err);
-                    });
-                    break;
-                default:
-                    log.error('Unhandled commit event: %j', event);
-                    break;
+                        break;
+                    case 'message':
+                    case 'stdout':
+                        log.info('Commit event message: %s', event.message);
+                        break;
+                    case 'image_create':
+                        createImage(event.payload, { rat: rat, req: req },
+                            function _imageCreateCb(err, result)
+                        {
+                            sendEventResponse(event, err, result);
+                        });
+                        break;
+                    case 'commit_finished':
+                        finalImageId = event.finalId;
+                        vasync.pipeline({ funcs: [
+                            function _doAddBaseImageHead(_result, next) {
+                                addBaseImageHead(baseImageId, finalImageId,
+                                {
+                                    baseImageIndexName: baseImg.index_name,
+                                    req: req,
+                                    scratchImage: scratchImage
+                                }, next);
+                            },
+                            function _doTagImage(_result, next) {
+                                tagImage({
+                                        docker_id: finalImageId,
+                                        name: opts.tag,
+                                        req: req
+                                    }, next);
+                            }
+                        ]}, function commitFinishPipeCb(err) {
+                            if (!err) {
+                                commitFinishedSuccessfully = true;
+                            }
+                            sendEventResponse(event, err);
+                        });
+                        break;
+                    default:
+                        log.error('Unhandled commit event: %j', event);
+                        break;
+                }
+
             }
         });
+
         commitEventStream.on('close', function _eventStreamCloseCb() {
             log.debug('commit: commitEventStream.close - closing socket');
         });
