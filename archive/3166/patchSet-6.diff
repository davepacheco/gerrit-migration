From 29c57edb17022de3f0eb66a683803a8f0acc8ab2 Mon Sep 17 00:00:00 2001
From: Jan Wyszynski <jan.wyszynski@joyent.com>
Date: Sun, 7 Jan 2018 09:18:44 +0000
Subject: [PATCH] MANTA-3536 registrar broken by MANTA-3223

---
 README.md            | 22 +++++++++++-----------
 etc/config.coal.json |  4 ++--
 lib/index.js         |  2 +-
 lib/register.js      |  7 ++++---
 main.js              | 40 +++++++++++++++++++++++++++++++++++++---
 5 files changed, 55 insertions(+), 20 deletions(-)

diff --git a/README.md b/README.md
index 050e749..f8065af 100644
--- a/README.md
+++ b/README.md
@@ -188,9 +188,9 @@ not recommended.
 **zookeeper:** Service discovery records are maintained in a
 ZooKeeper cluster.  The `"zookeeper"` top-level property describes how to reach
 that cluster.  This should be a configuration block appropriate for
-[node-zkplus](http://github.com/mcavage/node-zkplus).  See that project for
-details, but there's an example below that includes `"timeout"` and `"servers"`
-properties.
+[node-zkstream](http://github.com/joyent/node-zkstream).  See that project for
+details, but there's an example below that includes `"sessionTimeout"` and
+`"servers"` properties.
 
 **registration:** The `"registration"` object describes the service discovery
 records that will be inserted into ZooKeeper.  These control the DNS names that
@@ -320,10 +320,10 @@ record.  This is not common.
         },
         "adminIp": "172.27.10.72",
         "zookeeper": {
-            "timeout": 60000,
-            "servers": [ { "host": "172.27.10.35", "port": 2181 },
-                         { "host": "172.27.10.32", "port": 2181 },
-                         { "host": "172.27.10.33", "port": 2181 } ]
+            "sessionTimeout": 60000,
+            "servers": [ { "address": "172.27.10.35", "port": 2181 },
+                         { "address": "172.27.10.32", "port": 2181 },
+                         { "address": "172.27.10.33", "port": 2181 } ]
         }
     }
 
@@ -392,10 +392,10 @@ Let's augment the configuration above to specify a service record:
         },
         "adminIp": "172.27.10.72",
         "zookeeper": {
-            "timeout": 60000,
-            "servers": [ { "host": "172.27.10.35", "port": 2181 },
-                         { "host": "172.27.10.32", "port": 2181 },
-                         { "host": "172.27.10.33", "port": 2181 } ]
+            "sessionTimeout": 60000,
+            "servers": [ { "address": "172.27.10.35", "port": 2181 },
+                         { "address": "172.27.10.32", "port": 2181 },
+                         { "address": "172.27.10.33", "port": 2181 } ]
         }
     }
 
diff --git a/etc/config.coal.json b/etc/config.coal.json
index 4be4862..e7e3cb8 100644
--- a/etc/config.coal.json
+++ b/etc/config.coal.json
@@ -9,10 +9,10 @@
     "zookeeper": {
         "connectTimeout": 1000,
         "servers": [ {
-            "host": "10.99.99.11",
+            "address": "10.99.99.11",
             "port": 2181
         } ],
-        "timeout": 6000
+        "sessionTimeout": 30000
     },
     "maxAttempts": 10
 }
diff --git a/lib/index.js b/lib/index.js
index e8a9604..9134976 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -139,7 +139,7 @@ Registrar.prototype.createHealthCheck = function () {
                         log: log,
                         zk: zk,
                     };
-                    register.unregister(u_opts, function (u_err) {
+                    register.unregister(u_opts, self, function (u_err) {
                         if (u_err) {
                             log.debug(u_err, 'healthcheck: unregister failed');
                             ee.emit('error', u_err);
diff --git a/lib/register.js b/lib/register.js
index 539636e..41b8fdd 100644
--- a/lib/register.js
+++ b/lib/register.js
@@ -318,10 +318,11 @@ function register(opts, registrar, cb, newSession) {
 }
 
 
-function unregister(opts, cb) {
+function unregister(opts, registrar, cb) {
     assert.object(opts, 'options');
     assert.object(opts.log, 'options.log');
     assert.object(opts.zk, 'options.zk');
+    assert.object(registrar, 'registrar');
     assert.func(cb, 'callback');
 
     cb = once(cb);
@@ -334,8 +335,8 @@ function unregister(opts, cb) {
     log.debug('unregister: entered');
 
     zk.on('close', function () {
-        opts.registrar.ephemerals = {};
-        opts.registrar.zk = null;
+        registrar.ephemerals = {};
+        registrar.zk = null;
         log.debug('unregister: done');
         cb();
     });
diff --git a/main.js b/main.js
index de2da5f..cf80682 100644
--- a/main.js
+++ b/main.js
@@ -78,6 +78,41 @@ function configure(argv) {
     assert.object(cfg.zookeeper, 'config.zookeeper');
     assert.optionalObject(cfg.healthCheck, 'config.healthCheck');
 
+    /*
+     * MANTA-3536 - if registrar is passed a config that specifies the ip
+     * address of zookeeper server(s) with the 'host' field, copy the value into
+     * a new 'address' field, which is what node-zkstream expects.
+     */
+    var servers = cfg.zookeeper.servers;
+
+    if (servers) {
+        servers.forEach(function (server) {
+            if (!server.address) {
+                LOG.warn('read configuration that specifies zookeeper ' +
+                    'servers without an \'address\' field.');
+                server.address = server.host;
+            }
+        });
+    } else {
+        if (!cfg.zookeeper.address) {
+            LOG.warn('read configuration that specifies zookeeper ' +
+                'servers without an \'address\' field.');
+            cfg.zookeeper.address = cfg.zookeeper.host;
+        }
+    }
+
+    /*
+     * MANTA-3536 - node-zkstream uses the option 'sessionTimeout' instead of
+     * 'timeout'. Older configs aimed at node-zkplus will specify the timeout
+     * using 'timeout' field, so we translate it here for backwards
+     * compatibility.
+     */
+    if (!cfg.zookeeper.sessionTimeout) {
+        LOG.warn('read configuration without a \'sessionTimeout\' ' +
+                'field.');
+        cfg.zookeeper.sessionTimeout = cfg.zookeeper.timeout;
+    }
+
     cfg.zookeeper.log = LOG;
 
     return (cfg);
@@ -154,10 +189,9 @@ function usage(help, msg) {
                     'ephemeral nodes.');
             var unregisterOpts = {
                 log: LOG,
-                zk: zk,
-                registrar: registrar
+                zk: zk
             };
-            app.unregister(unregisterOpts, function (err) {
+            app.unregister(unregisterOpts, registrar, function (err) {
                 if (err) {
                     LOG.debug(err, 'registrar: unexpected error ' +
                         'unregistering nodes');
-- 
2.21.0

