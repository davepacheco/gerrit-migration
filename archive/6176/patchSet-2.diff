commit 62e7b83cc4595c720f2c5c64edcac7deb1de5d52
Author: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
Date:   2019-04-29T16:14:53-06:00 (5 months ago)
    
    MANTA-4241 Cleanup node-boray API interface and code documentation

diff --git a/lib/client.js b/lib/client.js
index 747d272..d984e72 100644
--- a/lib/client.js
+++ b/lib/client.js
@@ -540,15 +540,15 @@ BorayClient.prototype.releaseWhenDone = function releaseOnEnd(rpcctx, emitter) {
  */
 
 /**
- * Creates a Bucket
+ * Creates a bucket
  *
- * `cfg` allows you to pass in index information, as well as pre/post triggers.
- * See https://mo.joyent.com/docs/boray/master/#CreateBucket for more info.
+ * This function should be used when the virtual node for the bucket has already
+ * been determined.
  *
- * @param {String} b    - Bucket name
- * @param {Object} cfg  - configuration
- * @param {Object} opts - request parameters
- * @param {Function} cb - callback
+ * @param {String} owner  - Account owner
+ * @param {String} bucket - Bucket name
+ * @param {Number} vnode  - Virtual node identifier
+ * @param {Function} cb   - callback
  */
 BorayClient.prototype.createBucket =
     function createBucket(owner, bucket, vnode, cb) {
@@ -560,6 +560,16 @@ BorayClient.prototype.createBucket =
     }
 };
 
+/**
+ * Creates a bucket
+ *
+ * This function should be used when the virtual node for the bucket has not yet
+ * been determined.
+ *
+ * @param {String} owner  - Account owner
+ * @param {String} bucket - Bucket name
+ * @param {Function} cb   - callback
+ */
 BorayClient.prototype.createBucketNoVnode =
     function createBucketNoVnode(owner, bucket, cb) {
 
@@ -572,21 +582,33 @@ BorayClient.prototype.createBucketNoVnode =
 
 
 /**
- * Fetches a Bucket
+ * Fetches a bucket
  *
- * See https://mo.joyent.com/docs/boray/master/#GetBucket for more info.
+ * This function should be used when the virtual node for the bucket has already
+ * been determined.
  *
- * @param {String} b    - Bucket name
- * @param {Object} opts - request parameters
- * @param {Function} cb - callback
+ * @param {String} owner  - Account owner
+ * @param {String} bucket - Bucket name
+ * @param {Number} vnode  - Virtual node identifier
  */
-BorayClient.prototype.getBucket = function getBucket(o, b, vnode, cb) {
+BorayClient.prototype.getBucket = function getBucket(owner, bucket, vnode, cb) {
     var rpcctx = this.ctxCreateForCallback(cb);
-    if (rpcctx)
-        buckets.getBucket(rpcctx, o, b, vnode, this.makeReleaseCb(rpcctx, cb));
+    if (rpcctx) {
+        buckets.getBucket(rpcctx, owner, bucket, vnode,
+            this.makeReleaseCb(rpcctx, cb));
+    }
 };
 
-
+/**
+ * Fetches a bucket
+ *
+ * This function should be used when the virtual node for the bucket has not yet
+ * been determined.
+ *
+ * @param {String} owner  - Account owner
+ * @param {String} bucket - Bucket name
+ * @param {Function} cb - callback
+ */
 BorayClient.prototype.getBucketNoVnode = function getBucketNoVnode(o, b, cb) {
     var rpcctx = this.ctxCreateForCallback(cb);
     if (rpcctx)
@@ -594,7 +616,14 @@ BorayClient.prototype.getBucketNoVnode = function getBucketNoVnode(o, b, cb) {
 };
 
 /**
- * Lists buckets
+ * Lists buckets for an account at a specific virtual node
+ *
+ * @param {String} owner     - Account owner
+ * @param {String} order_by  - An ordering clause for the resulting buckets
+ * @param {String} prefix    - A prefix to use to group buckets
+ * @param {Number} limit     - The maximum number of buckets to return
+ * @param {Number} offset    - An starting offset into the buckets set
+ * @param {Number} vnode     - Virtual node identifier
  */
 BorayClient.prototype.listBuckets =
     function listBuckets(owner, order_by, prefix, limit, offset, vnode) {
@@ -613,9 +642,17 @@ BorayClient.prototype.listBuckets =
     return (rv);
 };
 
+/**
+ * Lists buckets for an account
+ *
+ * @param {String} owner     - Account owner
+ * @param {Boolean} sorted   - Indicates if the results should be sorted
+ * @param {String} order_by  - An ordering clause for the resulting buckets
+ * @param {String} prefix    - A prefix to use to group buckets
+ * @param {Number} limit     - The maximum number of buckets to return
+ */
 BorayClient.prototype.listBucketsNoVnode =
     function listBucketsNoVnode(owner, sorted, order_by, prefix, limit) {
-
     var rpcctx = this.ctxCreateForEmitter();
     var rv;
 
@@ -632,98 +669,68 @@ BorayClient.prototype.listBucketsNoVnode =
 
 
 /**
- * Updates an existing Bucket
+ * Deletes a bucket
  *
- * `cfg` allows you to pass in index information, as well as pre/post triggers.
- * See https://mo.joyent.com/docs/boray/master/#UpdateBucket for more info.
+ * This function should be used when the virtual node for the bucket has already
+ * been determined.
  *
- * @param {String} b    - Bucket name
- * @param {Object} cfg  - configuration
- * @param {Object} opts - request parameters
- * @param {Function} cb - callback
+ * @param {String} owner  - Account owner
+ * @param {String} bucket - Bucket name
+ * @param {Number} vnode  - Virtual node identifier
+ * @param {Function} cb   - callback
  */
-BorayClient.prototype.updateBucket = function updateBucket(b, cfg, opts, cb) {
-    if (typeof (opts) === 'function') {
-        cb = opts;
-        opts = {};
-    }
+BorayClient.prototype.deleteBucket = function deleteBucket(owner, bucket, vnode,
+    cb) {
     var rpcctx = this.ctxCreateForCallback(cb);
-    if (rpcctx)
-        buckets.updateBucket(rpcctx, b, cfg, opts,
+    if (rpcctx) {
+        buckets.deleteBucket(rpcctx, owner, bucket, vnode,
             this.makeReleaseCb(rpcctx, cb));
+    }
 };
 
 
 /**
- * Deletes a Bucket
+ * Deletes a bucket
  *
- * See https://mo.joyent.com/docs/boray/master/#DeleteBucket for more info.
+ * This function should be used when the virtual node for the bucket has not yet
+ * been determined.
  *
- * @param {String} b    - Bucket name
- * @param {Object} opts - request parameters
- * @param {Function} cb - callback
+ * @param {String} owner  - Account owner
+ * @param {String} bucket - Bucket name
+ * @param {Function} cb   - callback
  */
-BorayClient.prototype.deleteBucket = function deleteBucket(o, b, vnode, cb) {
-    var rpcctx = this.ctxCreateForCallback(cb);
-    if (rpcctx) {
-        buckets.deleteBucket(rpcctx, o, b, vnode,
-            this.makeReleaseCb(rpcctx, cb));
-    }
-};
-
-
 BorayClient.prototype.deleteBucketNoVnode =
-    function deleteBucketNoVnode(o, b, cb) {
+    function deleteBucketNoVnode(owner, bucket, cb) {
 
     var rpcctx = this.ctxCreateForCallback(cb);
     if (rpcctx) {
-        buckets.deleteBucketNoVnode(rpcctx, o, b,
+        buckets.deleteBucketNoVnode(rpcctx, owner, bucket,
             this.makeReleaseCb(rpcctx, cb));
     }
 };
 
 
 /**
- * Creates or replaces a Bucket.
- *
- * Note that this is actually just a client shim, and simply calls
- * get, followed by create || update.  This is not transactional,
- * and there are races, so you probably just want to call this once
- * at startup in your code.
- *
- * @param {String} b    - Bucket name
- * @param {Object} opts - request parameters
- * @param {Function} cb - callback
- */
-BorayClient.prototype.putBucket = function putBucket(b, cfg, opts, cb) {
-    assert.string(b, 'bucket');
-    assert.object(cfg, 'config');
-    if (typeof (opts) === 'function') {
-        cb = opts;
-        opts = {};
-    }
-    assert.object(opts, 'options');
-    assert.func(cb, 'callback');
-
-    var rpcctx = this.ctxCreateForCallback(cb);
-    if (rpcctx)
-        buckets.putBucket(rpcctx, b, cfg, opts, this.makeReleaseCb(rpcctx, cb));
-};
-
-/**
- * Idempotently Creates or Replaces an Object.
+ * Creates an object. If an object already exists at the key it is overwritten.
  *
- * See https://mo.joyent.com/docs/boray/master/#PutObject for more info.
+ * This function is used when the destination virtual node for the object has
+ * already been determined.
  *
- * @param {String} b    - Bucket name
- * @param {String} k    - Key name
- * @param {Object} v    - Value
- * @param {Object} opts - request parameters
- * @param {Function} cb - callback
+ * @param {String} owner           - Account owner
+ * @param {String} bucket_id       - Bucket id
+ * @param {String} name            - Object key name
+ * @param {Number} content_length  - The size of the object
+ * @param {String} content_md5     - MD5 digest of the object
+ * @param {String} content_type    - Content-Type of the object
+ * @param {Object} headers         - Value
+ * @param {Object} sharks          - Value
+ * @param {Object} props           - Value
+ * @param {Number} vnode           - Virtual node identifier
+ * @param {Function} cb            - callback
  */
-BorayClient.prototype.putObject = function putObject(owner, bucket_id, name,
-    content_length, content_md5, content_type, headers, sharks, props, vnode,
-    cb) {
+BorayClient.prototype.createObject = function createObject(owner, bucket_id,
+    name, content_length, content_md5, content_type, headers, sharks, props,
+    vnode, cb) {
     assert.string(owner, 'owner');
     assert.string(bucket_id, 'bucket_id');
     assert.string(name, 'name');
@@ -737,13 +744,31 @@ BorayClient.prototype.putObject = function putObject(owner, bucket_id, name,
 
     var rpcctx = this.ctxCreateForCallback(cb);
     if (rpcctx) {
-        objects.putObject(rpcctx, owner, bucket_id, name,
+        objects.createObject(rpcctx, owner, bucket_id, name,
             content_length, content_md5, content_type, headers, sharks, props,
             vnode, this.makeReleaseCb(rpcctx, cb));
     }
 };
 
-BorayClient.prototype.putObjectNoVnode = function putObjectNoVnode(owner,
+
+/**
+ * Creates an object. If an object already exists at the key it is overwritten.
+ *
+ * This function is intended to be used when the destination virtual node for an
+ * object has not been determined.
+ *
+ * @param {String} owner           - Account owner
+ * @param {String} bucket_id       - Bucket id
+ * @param {String} name            - Object key name
+ * @param {Number} content_length  - The size of the object
+ * @param {String} content_md5     - MD5 digest of the object
+ * @param {String} content_type    - Content-Type of the object
+ * @param {Object} headers         - Value
+ * @param {Object} sharks          - Value
+ * @param {Object} props           - Value
+ * @param {Function} cb            - callback
+ */
+BorayClient.prototype.createObjectNoVnode = function createObjectNoVnode(owner,
     bucket_id, name, content_length, content_md5, content_type, headers,
     sharks, props, cb) {
 
@@ -759,7 +784,7 @@ BorayClient.prototype.putObjectNoVnode = function putObjectNoVnode(owner,
 
     var rpcctx = this.ctxCreateForCallback(cb);
     if (rpcctx) {
-        objects.putObjectNoVnode(rpcctx, owner, bucket_id, name,
+        objects.createObjectNoVnode(rpcctx, owner, bucket_id, name,
             content_length, content_md5, content_type, headers, sharks, props,
             this.makeReleaseCb(rpcctx, cb));
     }
@@ -767,14 +792,16 @@ BorayClient.prototype.putObjectNoVnode = function putObjectNoVnode(owner,
 
 
 /**
- * Fetches an Object
+ * Fetches an object.
  *
- * See https://mo.joyent.com/docs/boray/master/#GetObject for more info.
+ * This function is intended to be used when the virtual node where the object
+ * resides has already been determined.
  *
- * @param {String} b    - Bucket name
- * @param {String} k    - Key name
- * @param {Object} opts - request parameters
- * @param {Function} cb - callback
+ * @param {String} owner           - Account owner
+ * @param {String} bucket_id       - Bucket id
+ * @param {String} name            - Object key name
+ * @param {Number} vnode           - Virtual node identifier
+ * @param {Function} cb            - callback
  */
 BorayClient.prototype.getObject =
     function getObject(owner, bucket_id, name, vnode, cb) {
@@ -792,6 +819,17 @@ BorayClient.prototype.getObject =
     }
 };
 
+/**
+ * Fetches an object.
+ *
+ * This function is intended to be used when the virtual node where the object
+ * resides has not been determined.
+ *
+ * @param {String} owner           - Account owner
+ * @param {String} bucket_id       - Bucket id
+ * @param {String} name            - Object key name
+ * @param {Function} cb            - callback
+ */
 BorayClient.prototype.getObjectNoVnode =
     function getObjectNoVnode(owner, bucket_id, name, cb) {
 
@@ -808,7 +846,12 @@ BorayClient.prototype.getObjectNoVnode =
 };
 
 /**
- * List objects - talks to boray
+ * Lists objects for the bucket belonging to the owner account at a particular
+ * virtual node.
+ *
+ * @param {String} owner           - Account owner
+ * @param {String} bucket_id       - Bucket id
+ * @param {Number} vnode           - Virtual node identifier
  */
 BorayClient.prototype.listObjects =
     function listObjects(owner, bucket_id, order_by, prefix, limit, offset,
@@ -829,7 +872,10 @@ BorayClient.prototype.listObjects =
 };
 
 /**
- * Lists objects - talks to electric-boray
+ * Lists objects for the bucket belonging to the owner account.
+ *
+ * @param {String} owner           - Account owner
+ * @param {String} bucket_id       - Bucket id
  */
 BorayClient.prototype.listObjectsNoVnode =
     function listObjectsNoVnode(owner, bucket_id, sorted, order_by, prefix,
@@ -850,14 +896,16 @@ BorayClient.prototype.listObjectsNoVnode =
 };
 
 /**
- * Deletes an Object
+ * Deletes an object.
  *
- * See https://mo.joyent.com/docs/boray/master/#DeleteObject for more info.
+ * This function is intended to be used when the virtual node where the object
+ * resides has already been determined.
  *
- * @param {String} b    - Bucket name
- * @param {String} k    - Key name
- * @param {Object} opts - request parameters
- * @param {Function} cb - callback
+ * @param {String} owner           - Account owner
+ * @param {String} bucket_id       - Bucket id
+ * @param {String} name            - Object key name
+ * @param {Number} vnode           - Virtual node identifier
+ * @param {Function} cb            - callback
  */
 BorayClient.prototype.deleteObject =
     function deleteObject(owner, bucket_id, name, vnode, cb) {
@@ -875,6 +923,17 @@ BorayClient.prototype.deleteObject =
     }
 };
 
+/**
+ * Deletes an object.
+ *
+ * This function is intended to be used when the virtual node where the object
+ * resides has not been determined.
+ *
+ * @param {String} owner           - Account owner
+ * @param {String} bucket_id       - Bucket id
+ * @param {String} name            - Object key name
+ * @param {Function} cb            - callback
+ */
 BorayClient.prototype.deleteObjectNoVnode =
     function deleteObjectNoVnode(owner, bucket_id, name, cb) {
 
diff --git a/lib/objects.js b/lib/objects.js
index 5d4611e..de54a58 100644
--- a/lib/objects.js
+++ b/lib/objects.js
@@ -28,8 +28,8 @@ var rpc = require('./rpc');
 
 ///--- API
 
-function putObject(rpcctx, owner, bucket_id, name, content_length, content_md5,
-    content_type, headers, sharks, props, vnode, callback) {
+function createObject(rpcctx, owner, bucket_id, name, content_length,
+    content_md5, content_type, headers, sharks, props, vnode, callback) {
     var opts, log;
 
     assert.object(rpcctx, 'rpcctx');
@@ -61,7 +61,7 @@ function putObject(rpcctx, owner, bucket_id, name, content_length, content_md5,
     rpc.rpcCommonBufferData({
         'rpcctx': rpcctx,
         'log': log,
-        'rpcmethod': 'putobject',
+        'rpcmethod': 'createobject',
         'rpcargs': [arg]
     }, function (err, data) {
         if (!err && data.length > 1) {
@@ -77,7 +77,7 @@ function putObject(rpcctx, owner, bucket_id, name, content_length, content_md5,
     });
 }
 
-function putObjectNoVnode(rpcctx, owner, bucket_id, name, content_length,
+function createObjectNoVnode(rpcctx, owner, bucket_id, name, content_length,
     content_md5, content_type, headers, sharks, props, callback) {
     var opts, log;
 
@@ -108,7 +108,7 @@ function putObjectNoVnode(rpcctx, owner, bucket_id, name, content_length,
     rpc.rpcCommonBufferData({
         'rpcctx': rpcctx,
         'log': log,
-        'rpcmethod': 'putobject',
+        'rpcmethod': 'createObject',
         'rpcargs': args
     }, function (err, data) {
         if (!err && data.length > 1) {
@@ -379,10 +379,10 @@ function makeOptions(options, value) {
 ///--- Exports
 
 module.exports = {
-    putObject: putObject,
+    createObject: createObject,
     getObject: getObject,
     deleteObject: deleteObject,
-    putObjectNoVnode: putObjectNoVnode,
+    createObjectNoVnode: createObjectNoVnode,
     getObjectNoVnode: getObjectNoVnode,
     deleteObjectNoVnode: deleteObjectNoVnode,
     listObjects: listObjects,
