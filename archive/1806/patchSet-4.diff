commit 65f130746d77e94272bd9c4c9e38d7b9114fb859 (refs/changes/06/1806/4)
Author: Todd Whiteman <todd.whiteman@joyent.com>
Date:   2017-05-03T12:44:35-07:00 (2 years, 5 months ago)
    
    DOCKER-929 Support the docker v2.2 manifest format

diff --git a/lib/build.js b/lib/build.js
index 15784a6..665ea09 100644
--- a/lib/build.js
+++ b/lib/build.js
@@ -24,13 +24,12 @@ var url = require('url');
 
 var assert = require('assert-plus');
 var async = require('async');
-var bunyan = require('bunyan');
 var dockerFileParser = require('docker-file-parser');
 var jsprim = require('jsprim');
 var lazyProperty = require('lazy-property');
-var libuuid = require('libuuid');
 var minimatch = require('minimatch');
 var mkdirp = require('mkdirp');
+var uuid = require('uuid');
 
 var magic = require('./magic');
 var shellparser = require('./shellparser');
@@ -115,7 +114,6 @@ util.inherits(ForbiddenPathException, Error);
  *    - 'image_reprovision', to reprovision the vm with the given image
  *    - 'run', which means to run the given cmd inside of the vm
  *    - 'commands_finished', notify build has finished all dockerfile commands
- *  'image_reprovisioned' - fn(event) when image reprovision has completed
  */
 function Builder(opts) {
     assert.object(opts, 'opts');
@@ -125,7 +123,6 @@ function Builder(opts) {
     assert.string(opts.contextFilepath, 'opts.contextFilepath');
     assert.optionalString(opts.dockerfile, 'opts.dockerfile');
     assert.optionalBool(opts.suppressSuccessMsg, 'opts.suppressSuccessMsg');
-    assert.optionalArrayOfObject(opts.existingImages, 'opts.existingImages');
     assert.optionalString(opts.buildargs, 'opts.buildargs'); // JSON-encod array
     assert.optionalString(opts.labels, 'opts.labels'); // JSON encoded object
     assert.optionalBool(opts.nocache, 'opts.nocache');
@@ -148,7 +145,6 @@ function Builder(opts) {
     this.suppressSuccessMsg = opts.suppressSuccessMsg || false;
     this.cliBuildArgs = JSON.parse(opts.buildargs || '[]');
     this.cliLabels = JSON.parse(opts.labels || '{}');
-    this._existingImages = opts.existingImages || [];
     this.log = opts.log;
     this.zoneUuid = opts.uuid;
     // Caching variables.
@@ -181,6 +177,7 @@ function Builder(opts) {
         'os': 'linux',
         'parent': null
     };
+    this.imageDigest = null;
 }
 
 util.inherits(Builder, EventEmitter);
@@ -190,11 +187,12 @@ util.inherits(Builder, EventEmitter);
  */
 Builder.prototype.setImageId = function setImageId(id) {
     if (typeof (id) == 'undefined') {
-        id = util.format('%s%s', libuuid.create(), libuuid.create());
+        id = util.format('%s%s', uuid.v4(), uuid.v4());
         id = id.replace(/-/g, '');
+        id = 'sha256:' + id;
     }
     this.log.debug('Setting image id to: %s', id);
-    this.image.id = id;
+    this.imageDigest = id;
     return id;
 };
 
@@ -210,23 +208,13 @@ Builder.prototype.setParentId = function setParentId(id) {
 
 Builder.prototype.getShortId = function getShortId(id) {
     if (!id) {
-        id = this.image.id;
+        id = this.imageDigest;
     }
     id = id || '';
+    id = id.split(':').slice(-1)[0]; // remove the 'sha256:' prefix
     return id.replace('-', '', 'g').substr(0, 12);
 };
 
-/**
- * Array of known docker images (objects are in the docker inspect format).
- */
-lazyProperty(Builder.prototype, 'existingImages',
-function builder_existingImages()
-{
-    return this._existingImages.map(function (img) {
-        return jsprim.mergeObjects(img, null, DEFAULT_IMAGE_CONFIG);
-    });
-});
-
 Builder.prototype.start = function start() {
     var builder = this;
     var log = builder.log;
@@ -288,11 +276,7 @@ Builder.prototype.start = function start() {
         },
         function checkImagesCreated(next) {
             // Check if it's empty.
-            if ((builder.layers.length === 0)
-                // Or it's just the scratch image layer.
-                || (builder.layers.length === 1
-                    && builder.layers[0].cmd.name === 'FROM'
-                    && builder.layers[0].cmd.args === 'scratch')) {
+            if (builder.layers.length === 0) {
                 next(new Error('No image was generated. Is your '
                                 + 'Dockerfile empty?'));
                 return;
@@ -316,14 +300,13 @@ Builder.prototype.start = function start() {
     });
 };
 
-Builder.prototype.startCommit = function startCommit(fromImage, changes) {
+Builder.prototype.startCommit = function startCommit(fromImg, changes) {
     var builder = this;
     var log = builder.log;
 
     var dockerfileContents = changes.join('\n');
 
-    builder.setFromInspectImage(jsprim.deepCopy(fromImage));
-    builder.storeImageLayer(null);
+    builder.setBaseImg(null, fromImg);
 
     async.waterfall([
         function parse(next) {
@@ -360,7 +343,7 @@ Builder.prototype.startCommit = function startCommit(fromImage, changes) {
         },
         // Generate a unique id for the committed image.
         function generateFinalImage(next) {
-            builder.setParentId(builder.image.id);
+            builder.setParentId(builder.imageDigest);
             builder.setImageId();
             builder.image.created = (new Date()).toISOString();
             builder.storeImageLayer(null);
@@ -473,14 +456,19 @@ Builder.prototype.readDockerfile = function readDockerfile(callback) {
 };
 
 Builder.prototype.storeImageLayer = function storeImageLayer(cmd) {
-    // Docker images use a 256-bit id value, general uuid's are 128-bits.
     var builder = this;
 
+    // Don't store a layer for the FROM command.
+    if (cmd && cmd.name === 'FROM') {
+        return;
+    }
+
     builder.log.debug('Storing config for buildstep %d', builder.stepNo);
 
     builder.layers.push({
         cmd: cmd,
-        image: jsprim.deepCopy(builder.image)
+        image: jsprim.deepCopy(builder.image),
+        imageDigest: builder.imageDigest
     });
 };
 
@@ -520,7 +508,6 @@ Builder.prototype.getNopCmdForCommand = function getNopCmdForCommand(cmd) {
     var cmdArray = [];
     var cmdString = getCommandString(cmd);
     var keys;
-    var str;
 
     // NOP commands are percucilar in docker... and we follow their
     // formatting designs below (see builder/dockerfile/dispatchers.go).
@@ -547,44 +534,27 @@ Builder.prototype.getNopCmdForCommand = function getNopCmdForCommand(cmd) {
         var typeHash = generateHashForCopyInfos(cmd.ctx.copyInfos);
         var inDir = cmd.args.slice(-1)[0];
         cmdString = util.format('%s %s in %s', cmd.name, typeHash, inDir);
-    } else if (cmd.name === 'ENTRYPOINT' || cmd.name === 'CMD') {
-        str = cmd.args.map(function (arg) {
-            return '"' + arg + '"';
-        }).join(' ');
-        cmdString = '[' + str + ']';
     }
 
     return ['/bin/sh', '-c', '#(nop) ' + cmdString];
 };
 
-Builder.prototype.getCachedImage = function getCachedImage(cmd) {
+Builder.prototype.getCachedImage = function getCachedImage(cmd, callback) {
     var builder = this;
     var log = builder.log;
 
     var configNopCmd = builder.getNopCmdForCommand(cmd);
-    var parentId = builder.image.parent;
     log.debug('getCachedImage: looking for image with parent %s, nop cmd %j',
-        parentId, configNopCmd);
-
-    var cfgs = builder.existingImages.filter(function existCfgFilter(img) {
-        // Images must have the same parent and Cmd entry.
-        if ((img.ContainerConfig.Image !== parentId)
-            || !(jsprim.deepEqual(configNopCmd, img.ContainerConfig.Cmd)))
-        {
-            return false;
-        }
-
-        // Some fields (like Labels) can also be set from the client, check that
-        // these fields remain the same.
-        if (!(jsprim.deepEqual(builder.image.config.Labels, img.Config.Labels)))
-        {
-            return false;
-        }
+        builder.image.parent, configNopCmd);
 
-        return true;
-    });
-
-    return cfgs[0];
+    var event = {
+        callback: callback,
+        cmd: configNopCmd.join(' '),
+        labels: builder.image.config.Labels,
+        parentDigest: builder.image.parent,
+        type: 'find_cached_image'
+    };
+    builder.emitTask(event);
 };
 
 function getMergedEnvArgArray(envArray, argMap) {
@@ -974,7 +944,7 @@ Builder.prototype.step = function step(cmd, callback) {
     builder.stepNo += 1;
     builder.log.debug('Starting build step %d', builder.stepNo);
 
-    builder.setParentId(builder.image.id);
+    builder.setParentId(builder.imageDigest);
     builder.setImageId();
 
     builder.doStep(cmd, function _doStepCb(err) {
@@ -1003,7 +973,7 @@ Builder.prototype.doStep = function doStep(cmd, callback) {
         return;
     }
 
-    async.waterfall([
+    async.series([
         function preStep(next) {
             builder.doPreStep(cmd, next);
         },
@@ -1090,36 +1060,51 @@ Builder.prototype.doCheckCache = function doCheckCache(cmd, callback) {
     }
 
     var lastCmdWasCached = builder.cacheLastCmdCached;
-    var cachedImage = builder.getCachedImage(cmd);
-    if (!cachedImage) {
+    builder.getCachedImage(cmd, function _getCachedImageCb(err, cachedImg) {
+        if (err) {
+            callback(err);
+            return;
+        }
+        if (cachedImg) {
+            // Cached image - note that cachedImg is an ImageV2 model instance.
+            log.info('doCheckCache: found cached image %s', cachedImg.digest);
+            cmd.ctx.isCached = true;
+            builder.emitStdout(' ---> Using cache\n');
+            builder.setBaseImg(cmd, cachedImg);
+            callback();
+            return;
+        }
+
         // Not cached.
         log.debug('doCheckCache: no cached image');
         builder.cacheLastCmdCached = false;
         var lastLayer = builder.layers[builder.layers.length-1];
-        if (lastLayer && lastCmdWasCached && lastLayer.cmd.name !== 'FROM') {
+        if (!lastLayer) {
+            // Last command must have been a FROM scratch command.
+            callback();
+            return;
+        }
+
+        assert.object(lastLayer, 'lastLayer');
+        if (lastCmdWasCached && lastLayer.cmd.name !== 'FROM') {
             // The last command was cached, so reprovision to the last image.
             log.debug('doCheckCache: reprovisioning onto step %d, cmd: %s',
                 (builder.stepNo - 1), lastLayer.cmd.raw);
-            builder.reprovisionImage(cmd, builder.image.parent, function (err) {
-                if (!err) {
-                    // Update the config.Image (parent).
-                    builder.setParentId(builder.image.parent);
+            builder.reprovisionImage(cmd, builder.image.parent,
+                    function _reprovImageCb(reprovErr) {
+                if (reprovErr) {
+                    callback(reprovErr);
+                    return;
                 }
-                callback(err);
+                // Start a new image layer for the current build step.
+                builder.setParentId(builder.imageDigest);
+                builder.setImageId();
+                callback();
             });
             return;
         }
         callback();
-        return;
-    }
-
-    // Cached image - note that cachedImage is in the inspect object format.
-    log.info('doCheckCache: found cached image %s', cachedImage.Id);
-    cmd.ctx.isCached = true;
-    builder.emitStdout(' ---> Using cache\n');
-    builder.setFromInspectImage(cachedImage);
-
-    callback();
+    });
 };
 
 
@@ -1186,14 +1171,14 @@ Builder.prototype.sendCommandDetails = function sendCommandDetails(cmd) {
     var builder = this;
 
     var cmdString = getCommandString(cmd);
-    builder.emitStdout(util.format('Step %d : %s\n',
-                                (builder.stepNo + 1), cmdString));
+    builder.emitStdout(util.format('Step %d/%d : %s\n',
+        (builder.stepNo + 1), builder.totalNumSteps, cmdString));
 };
 
 
 Builder.prototype.sendLayerId = function sendLayerId() {
     var builder = this;
-    if (builder.image.id === null) {
+    if (builder.imageDigest === null) {
         builder.emitStdout(' --->\n');
     } else {
         builder.emitStdout(util.format(' ---> %s\n', builder.getShortId()));
@@ -1969,7 +1954,7 @@ Builder.prototype.performCopy = function performCopy(cmd, copyInfos, callback) {
 
     log.debug('performCopy: %d copyInfos', copyInfos.length);
 
-    async.waterfall([
+    async.series([
         // Special handling for ADD with a tar file.
         function detectAddTarFile(next) {
             if (cmd.name !== 'ADD' || copyInfos.length !== 1
@@ -2022,7 +2007,6 @@ Builder.prototype.performCopy = function performCopy(cmd, copyInfos, callback) {
                 builder.emitTask(event);
                 return;
             }
-
             var copyFn = builder.doCopy.bind(builder);
             async.eachSeries(copyInfos, copyFn, next);
         }
@@ -2119,33 +2103,18 @@ function reprovisionImage(cmd, imageName, callback)
 
     log.info('reprovisionImage: %s', imageName);
 
-    function reprovisionCb(err, result) {
+    function reprovisionImageCb(err, img) {
         if (err) {
             callback(err);
             return;
         }
-        // This image config becomes the builder's base config.
-        // Note: result.image is in docker inspect format.
-        builder.image.config = result.image.Config;
-        builder.image.container_config = result.image.ContainerConfig;
-        // Re-apply any cliLabels, otherwise they'll be lost.
-        if (builder.isLastStep() && !jsprim.isEmpty(builder.cliLabels)) {
-            builder.log.debug('re-adding builder cliLabels: %j',
-                builder.cliLabels);
-            builder.addConfigMap(builder.cliLabels, 'Labels');
-        }
 
-        var event2 = {
-            callback: function reprovisionImageEventCb(err2) {
-                callback(err2, result.image);
-            },
-            cmdName: cmd.name
-        };
-        builder.emit('image_reprovisioned', event2);
+        builder.setBaseImg(cmd, img);
+        callback(null, img);
     }
 
     var event = {
-        callback: reprovisionCb,
+        callback: reprovisionImageCb,
         cmdName: cmd.name,
         imageName: imageName,
         type: 'image_reprovision'
@@ -2153,24 +2122,56 @@ function reprovisionImage(cmd, imageName, callback)
     builder.emitTask(event);
 };
 
+/**
+ * Set img.image as the builder's base image.
+ *
+ * Note: img is a docker ImageV2 model instance.
+ */
+Builder.prototype.setBaseImg = function setBaseImg(cmd, img) {
+    assert.object(img, 'img');
+    assert.object(img.image, 'img.image');
+    assert.arrayOfObject(img.image.history, 'img.image.history');
+
+    var builder = this;
+
+    builder.layers = img.image.history.map(function (history) {
+        return {
+            cmd: null,
+            image: null,
+            imageDigest: null
+        };
+    });
+    // Update last layer.
+    builder.layers[builder.layers.length - 1].cmd = cmd;
+    builder.layers[builder.layers.length - 1].image = img.image;
+    builder.layers[builder.layers.length - 1].imageDigest = img.digest;
+
+    // Update current image.
+    builder.image = jsprim.deepCopy(img.image);
+    builder.setImageId(img.digest);
+
+    // Re-apply any cliLabels, otherwise they'll be lost.
+    if (builder.isLastStep() && !jsprim.isEmpty(builder.cliLabels)) {
+        builder.log.debug('re-adding builder cliLabels: %j',
+            builder.cliLabels);
+        builder.addConfigMap(builder.cliLabels, 'Labels');
+    }
+};
+
 Builder.prototype.handleFromImage = function handleFromImage(cmd, callback)
 {
     var builder = this;
 
-    builder.reprovisionImage(cmd, cmd.args, function reprovisionCb(err, image) {
-        // Note: image is in docker inspect format.
+    builder.reprovisionImage(cmd, cmd.args, function reprovisionCb(err, img) {
         if (err) {
             callback(err);
             return;
         }
-        var config = builder.image.config;
 
-        builder.setImageId(image.Id);
-        builder.setParentId(config.Image || null);
-        builder.onBuildTriggers = config.OnBuild;
         // Remove OnBuild triggers from the config when done, since the config
         // will be committed.
-        config.OnBuild = null;
+        builder.onBuildTriggers = builder.image.config.OnBuild;
+        builder.image.config.OnBuild = null;
 
         callback();
     });
diff --git a/package.json b/package.json
index 914f9f7..6838a8c 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "sdc-docker-build",
-  "version": "0.2.0",
+  "version": "0.3.0",
   "description": "Docker build helper module for sdc-docker",
   "private": true,
   "keywords": [
@@ -32,17 +32,17 @@
   },
   "dependencies": {
     "assert-plus": "1.0.0",
-    "async": "0.9.0",
-    "bunyan": "1.8.5",
+    "async": "2.1.2",
     "docker-file-parser": "git+https://github.com/joyent/node-docker-file-parser.git#ba6b4ce0e09a1432b200a55851d2899109d68ae2",
     "jsprim": "1.3.1",
     "lazy-property": "1.0.0",
-    "libuuid": "0.2.1",
     "minimatch": "3.0.3",
     "mkdirp": "0.5.1",
-    "once": "1.4.0"
+    "once": "1.4.0",
+    "uuid": "3.0.1"
   },
   "devDependencies": {
+    "bunyan": "1.8.5",
     "rimraf": "2.4.3",
     "tape": "4.6.3",
     "tar-stream": "1.3.1",
diff --git a/test/test_build.js b/test/test_build.js
index b23d337..3a98ccb 100644
--- a/test/test_build.js
+++ b/test/test_build.js
@@ -16,8 +16,8 @@ var util = require('util');
 var assert = require('assert-plus');
 var bunyan = require('bunyan');
 var jsprim = require('jsprim');
-var libuuid = require('libuuid');
 var mkdirp = require('mkdirp');
+var mod_uuid = require('uuid');
 var rimraf = require('rimraf');
 var tape = require('tape');
 var tar = require('tar-stream');
@@ -73,7 +73,8 @@ function testBuildContext(t, fpath, opts, callback) {
     });
     log.rbuffer = ringbuffer;
 
-    var uuid = libuuid.create();
+    var existingImages = opts.existingImages || [];
+    var uuid = mod_uuid.v4();
     var tmpDir = os.tmpDir();
     // Ensure the tmpDir is the full real path.
     tmpDir = fs.realpathSync(tmpDir);
@@ -91,8 +92,7 @@ function testBuildContext(t, fpath, opts, callback) {
         commandType: 'build',
         contextFilepath: fpath,
         workDir: configDir,
-        containerRootDir: zoneRoot,
-        existingImages: opts.existingImages
+        containerRootDir: zoneRoot
     };
 
     var messages = [];
@@ -104,10 +104,6 @@ function testBuildContext(t, fpath, opts, callback) {
         messages.push(event);
     });
 
-    builder.on('image_reprovisioned', function (event) {
-        event.callback.apply(builder, [null]);
-    });
-
     builder.on('task', function (task) {
         var result = [null];
 
@@ -116,21 +112,42 @@ function testBuildContext(t, fpath, opts, callback) {
             return;
         }
 
+        if (task.type === 'find_cached_image') {
+            result = [null, existingImages.filter(function (img) {
+                return task.cmd === img.image.container_config.Cmd.join(' ');
+            })[0]];
+            task.callback.apply(builder, result);
+            return;
+        }
+
         if (t.hasOwnProperty('buildTaskHandler')) {
             result = t.buildTaskHandler(builder, task);
 
         } else if (task.type === 'image_reprovision') {
             // Return a result for the busybox image task.
             result = [null, {
+                'digest': 'sha256:cfa753dfea5e68a24366dfba16e6edf573'
+                            + 'daa447abf65bc11619c1a98a3aff54',
                 'image': {
-                    'Config': {
+                    'config': {
                         'Cmd': [ 'sh' ]
                     },
-                    'ContainerConfig': {
+                    'container_config': {
                         'Cmd': [ '/bin/sh', '-c', '#(nop) CMD ["sh"]' ]
                     },
-                    'Id': 'cfa753dfea5e68a24366dfba16e6edf573'
-                                + 'daa447abf65bc11619c1a98a3aff54'
+                    'history': [
+                        {
+                                'created': '2016-10-07T21:03:58.16783626Z',
+                                'created_by': '/bin/sh -c #(nop) ADD file:ced3'
+                                    + 'aa7577c8f970403004e45dd91e9240b1e3ee8bd'
+                                    + '109178822310bb5c4a4f7 in / '
+                            },
+                            {
+                                'created': '2016-10-07T21:03:58.469866982Z',
+                                'created_by': '/bin/sh -c #(nop)  CMD [\'sh\']',
+                                'empty_layer': true
+                        }
+                    ]
                 }
             }];
         } else if (task.type === 'run') {
@@ -358,19 +375,24 @@ function simpleRunTaskHandler(builder, task) {
 }
 
 
+function dumpLogs(builder) {
+    var records = builder.log.rbuffer.records;
+    records = records.map(function (log) {
+        return util.format('%s: %s', bunyan.nameFromLevel[log.level],
+            log.msg);
+    });
+    if (records.length > 0) {
+        console.log('  ---\n');
+        console.log('    Last %d log messages:\n', records.length, records);
+        console.log('  ...\n');
+    }
+}
+
+
 function showError(t, err, builder) {
     t.ifErr(err, 'check build successful');
     if (err) {
-        var records = builder.log.rbuffer.records;
-        records = records.map(function (log) {
-            return util.format('%s: %s', bunyan.nameFromLevel[log.level],
-                log.msg);
-        });
-        if (records.length > 0) {
-            console.log('  ---\n');
-            console.log('    Last %d log messages:\n', records.length, records);
-            console.log('  ...\n');
-        }
+        dumpLogs(builder);
         testEnd(t, builder, err);
         return true;
     }
@@ -378,8 +400,9 @@ function showError(t, err, builder) {
 }
 
 function getBuildStepOutput(builder, stepNo) {
+    var idx = (stepNo-1) - (builder.totalNumSteps - builder.layers.length);
     return util.format(' ---> %s\n',
-        builder.getShortId(builder.layers[stepNo-1].image.id));
+        builder.getShortId(builder.layers[idx].imageDigest));
 }
 
 
@@ -397,13 +420,13 @@ tape('helloWorldRun', function (t) {
         var messages = result.messages;
         var vmId = builder.zoneUuid;
         var expectedMessages = [
-            { type: 'stdout', message: 'Step 1 : FROM scratch\n' },
+            { type: 'stdout', message: 'Step 1/4 : FROM scratch\n' },
             { type: 'stdout', message: ' --->\n' },
-            { type: 'stdout', message: 'Step 2 : COPY hello /\n' },
+            { type: 'stdout', message: 'Step 2/4 : COPY hello /\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 2) },
-            { type: 'stdout', message: 'Step 3 : CMD /hello\n' },
+            { type: 'stdout', message: 'Step 3/4 : CMD /hello\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 3) },
-            { type: 'stdout', message: 'Step 4 : RUN /hello how are you\n' },
+            { type: 'stdout', message: 'Step 4/4 : RUN /hello how are you\n' },
             { type: 'stdout', message: util.format(' ---> Running in %s\n',
                                                     builder.getShortId(vmId)) },
             { type: 'stdout', message: getBuildStepOutput(builder, 4) },
@@ -427,7 +450,7 @@ tape('helloWorldRun', function (t) {
         t.deepEqual(task, expectedHelloTask, 'check tasks');
 
         // Ensure the Cmd in ContainerConfig differs slightly from Config.
-        var img = builder.layers[3].image;
+        var img = builder.layers[2].image;
         t.notDeepEqual(img.container_config.Cmd, img.config.Cmd);
 
         testEnd(t, builder);
@@ -453,14 +476,14 @@ tape('busybox', function (t) {
         var builder = result.builder;
         var messages = result.messages;
         var expectedMessages = [
-            { type: 'stdout', message: 'Step 1 : FROM scratch\n' },
+            { type: 'stdout', message: 'Step 1/4 : FROM scratch\n' },
             { type: 'stdout', message: ' --->\n' },
-            { type: 'stdout', message: 'Step 2 : LABEL version="1.0"\n' },
+            { type: 'stdout', message: 'Step 2/4 : LABEL version="1.0"\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 2) },
-            { type: 'stdout', message: 'Step 3 : MAINTAINER Jérôme Petazzoni'
-                                        + ' <jerome@docker.com>\n' },
+            { type: 'stdout', message: 'Step 3/4 : '
+                + 'MAINTAINER Jérôme Petazzoni <jerome@docker.com>\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 3) },
-            { type: 'stdout', message: 'Step 4 : ADD rootfs.tar /\n' },
+            { type: 'stdout', message: 'Step 4/4 : ADD rootfs.tar /\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 4) },
             { type: 'stdout', message: util.format('Successfully built %s\n',
                                                     builder.getShortId()) }
@@ -493,9 +516,9 @@ tape('fromBusyboxLabel', function (t) {
         var builder = result.builder;
         var messages = result.messages;
         var expectedMessages = [
-            { type: 'stdout', message: 'Step 1 : FROM busybox\n' },
+            { type: 'stdout', message: 'Step 1/2 : FROM busybox\n' },
             { type: 'stdout', message: ' ---> cfa753dfea5e\n' },
-            { type: 'stdout', message: 'Step 2 : LABEL sdcdocker="true"\n' },
+            { type: 'stdout', message: 'Step 2/2 : LABEL sdcdocker="true"\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 2) },
             { type: 'stdout', message: util.format('Successfully built %s\n',
                                                     builder.getShortId()) }
@@ -518,9 +541,9 @@ tape('addDirectory', function (t) {
         var builder = result.builder;
         var messages = result.messages;
         var expectedMessages = [
-            { type: 'stdout', message: 'Step 1 : FROM scratch\n' },
+            { type: 'stdout', message: 'Step 1/2 : FROM scratch\n' },
             { type: 'stdout', message: ' --->\n' },
-            { type: 'stdout', message: 'Step 2 : ADD data /data/\n' },
+            { type: 'stdout', message: 'Step 2/2 : ADD data /data/\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 2) },
             { type: 'stdout', message: util.format('Successfully built %s\n',
                                                     builder.getShortId()) }
@@ -543,9 +566,9 @@ tape('addDirectoryRoot', function (t) {
         var builder = result.builder;
         var messages = result.messages;
         var expectedMessages = [
-            { type: 'stdout', message: 'Step 1 : FROM scratch\n' },
+            { type: 'stdout', message: 'Step 1/2 : FROM scratch\n' },
             { type: 'stdout', message: ' --->\n' },
-            { type: 'stdout', message: 'Step 2 : COPY . /\n' },
+            { type: 'stdout', message: 'Step 2/2 : COPY . /\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 2) },
             { type: 'stdout', message: util.format('Successfully built %s\n',
                                                     builder.getShortId()) }
@@ -568,9 +591,9 @@ tape('addMulti', function (t) {
         var builder = result.builder;
         var messages = result.messages;
         var expectedMessages = [
-            { type: 'stdout', message: 'Step 1 : FROM scratch\n' },
+            { type: 'stdout', message: 'Step 1/2 : FROM scratch\n' },
             { type: 'stdout', message: ' --->\n' },
-            { type: 'stdout', message: 'Step 2 : COPY /foo/bar /other/dir '
+            { type: 'stdout', message: 'Step 2/2 : COPY /foo/bar /other/dir '
                 + '/dest/\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 2) },
             { type: 'stdout', message: util.format('Successfully built %s\n',
@@ -604,68 +627,68 @@ tape('addTarfile', function (t) {
         var messages = result.messages;
         var vmId = builder.zoneUuid;
         var expectedMessages = [
-            { type: 'stdout', message: 'Step 1 : FROM busybox\n' },
+            { type: 'stdout', message: 'Step 1/14 : FROM busybox\n' },
             { type: 'stdout', message: ' ---> cfa753dfea5e\n' },
 
-            { type: 'stdout', message: 'Step 2 : ADD test.tar /\n' },
+            { type: 'stdout', message: 'Step 2/14 : ADD test.tar /\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 2) },
-            { type: 'stdout', message: 'Step 3 : RUN cat /test/foo '
+            { type: 'stdout', message: 'Step 3/14 : RUN cat /test/foo '
                 + '| grep Hi\n' },
             { type: 'stdout', message: util.format(' ---> Running in %s\n',
                                                     builder.getShortId(vmId)) },
             { type: 'stdout', message: 'Hi\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 3) },
 
-            { type: 'stdout', message: 'Step 4 : ADD test.tar /test.tar\n' },
+            { type: 'stdout', message: 'Step 4/14 : ADD test.tar /test.tar\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 4) },
-            { type: 'stdout', message: 'Step 5 : RUN cat /test.tar/test/foo '
+            { type: 'stdout', message: 'Step 5/14 : RUN cat /test.tar/test/foo '
                 + '| grep Hi\n' },
             { type: 'stdout', message: util.format(' ---> Running in %s\n',
                                                     builder.getShortId(vmId)) },
             { type: 'stdout', message: 'Hi\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 5) },
 
-            { type: 'stdout', message: 'Step 6 : ADD test.tar /unlikely-to-'
+            { type: 'stdout', message: 'Step 6/14 : ADD test.tar /unlikely-to-'
                 + 'exist\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 6) },
-            { type: 'stdout', message: 'Step 7 : RUN cat /unlikely-to-exist/'
+            { type: 'stdout', message: 'Step 7/14 : RUN cat /unlikely-to-exist/'
                 + 'test/foo | grep Hi\n' },
             { type: 'stdout', message: util.format(' ---> Running in %s\n',
                                                     builder.getShortId(vmId)) },
             { type: 'stdout', message: 'Hi\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 7) },
 
-            { type: 'stdout', message: 'Step 8 : ADD test.tar /unlikely-to-'
+            { type: 'stdout', message: 'Step 8/14 : ADD test.tar /unlikely-to-'
                 + 'exist-trailing-slash/\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 8) },
-            { type: 'stdout', message: 'Step 9 : RUN cat /unlikely-to-exist'
+            { type: 'stdout', message: 'Step 9/14 : RUN cat /unlikely-to-exist'
                 + '-trailing-slash/test/foo | grep Hi\n' },
             { type: 'stdout', message: util.format(' ---> Running in %s\n',
                                                     builder.getShortId(vmId)) },
             { type: 'stdout', message: 'Hi\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 9) },
 
-            { type: 'stdout', message: 'Step 10 : RUN mkdir /existing-directory'
-                + '\n' },
+            { type: 'stdout', message: 'Step 10/14 : '
+                + 'RUN mkdir /existing-directory\n' },
             { type: 'stdout', message: util.format(' ---> Running in %s\n',
                                                     builder.getShortId(vmId)) },
             { type: 'stdout', message: getBuildStepOutput(builder, 10) },
 
-            { type: 'stdout', message: 'Step 11 : ADD test.tar /existing-'
+            { type: 'stdout', message: 'Step 11/14 : ADD test.tar /existing-'
                 + 'directory\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 11) },
-            { type: 'stdout', message: 'Step 12 : RUN cat /existing-directory/'
-                + 'test/foo | grep Hi\n' },
+            { type: 'stdout', message: 'Step 12/14 : '
+                + 'RUN cat /existing-directory/test/foo | grep Hi\n' },
             { type: 'stdout', message: util.format(' ---> Running in %s\n',
                                                     builder.getShortId(vmId)) },
             { type: 'stdout', message: 'Hi\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 12) },
 
-            { type: 'stdout', message: 'Step 13 : ADD test.tar /existing-'
+            { type: 'stdout', message: 'Step 13/14 : ADD test.tar /existing-'
                 + 'directory-trailing-slash/\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 13) },
-            { type: 'stdout', message: 'Step 14 : RUN cat /existing-directory-'
-                + 'trailing-slash/test/foo | grep Hi\n' },
+            { type: 'stdout', message: 'Step 14/14 : RUN cat '
+                + '/existing-directory-trailing-slash/test/foo | grep Hi\n' },
             { type: 'stdout', message: util.format(' ---> Running in %s\n',
                                                     builder.getShortId(vmId)) },
             { type: 'stdout', message: 'Hi\n' },
@@ -693,12 +716,12 @@ tape('addTarfileAsFile', function (t) {
         var messages = result.messages;
         var vmId = builder.zoneUuid;
         var expectedMessages = [
-            { type: 'stdout', message: 'Step 1 : FROM busybox\n' },
+            { type: 'stdout', message: 'Step 1/3 : FROM busybox\n' },
             { type: 'stdout', message: ' ---> cfa753dfea5e\n' },
 
-            { type: 'stdout', message: 'Step 2 : ADD test.tar /test.tar\n' },
+            { type: 'stdout', message: 'Step 2/3 : ADD test.tar /test.tar\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 2) },
-            { type: 'stdout', message: 'Step 3 : RUN [[ -d /test.tar ]]\n' },
+            { type: 'stdout', message: 'Step 3/3 : RUN [[ -d /test.tar ]]\n' },
             { type: 'stdout', message: util.format(' ---> Running in %s\n',
                                                     builder.getShortId(vmId)) },
             { type: 'stdout', message: getBuildStepOutput(builder, 3) },
@@ -728,39 +751,39 @@ tape('addWildcard', function (t) {
         var messages = result.messages;
         var vmId = builder.zoneUuid;
         var expectedMessages = [
-            { type: 'stdout', message: 'Step 1 : FROM busybox\n' },
+            { type: 'stdout', message: 'Step 1/10 : FROM busybox\n' },
             { type: 'stdout', message: ' ---> cfa753dfea5e\n' },
-            { type: 'stdout', message: 'Step 2 : COPY file*.txt /tmp/\n' },
+            { type: 'stdout', message: 'Step 2/10 : COPY file*.txt /tmp/\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 2) },
-            { type: 'stdout', message: 'Step 3 : RUN ls /tmp/file1.txt '
+            { type: 'stdout', message: 'Step 3/10 : RUN ls /tmp/file1.txt '
                 + '/tmp/file2.txt\n' },
             { type: 'stdout', message: util.format(' ---> Running in %s\n',
                                                     builder.getShortId(vmId)) },
             { type: 'stdout', message: getBuildStepOutput(builder, 3) },
-            { type: 'stdout', message: 'Step 4 : RUN mkdir /tmp1\n' },
+            { type: 'stdout', message: 'Step 4/10 : RUN mkdir /tmp1\n' },
             { type: 'stdout', message: util.format(' ---> Running in %s\n',
                                                     builder.getShortId(vmId)) },
             { type: 'stdout', message: getBuildStepOutput(builder, 4) },
-            { type: 'stdout', message: 'Step 5 : COPY dir* /tmp1/\n' },
+            { type: 'stdout', message: 'Step 5/10 : COPY dir* /tmp1/\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 5) },
-            { type: 'stdout', message: 'Step 6 : RUN ls /tmp1\n' },
+            { type: 'stdout', message: 'Step 6/10 : RUN ls /tmp1\n' },
             { type: 'stdout', message: util.format(' ---> Running in %s\n',
                                                     builder.getShortId(vmId)) },
             { type: 'stdout', message: getBuildStepOutput(builder, 6) },
-            { type: 'stdout', message: 'Step 7 : RUN ls /tmp1/dirt '
+            { type: 'stdout', message: 'Step 7/10 : RUN ls /tmp1/dirt '
                 + '/tmp1/nested_file /tmp1/nested_dir/nest_nest_file\n' },
             { type: 'stdout', message: util.format(' ---> Running in %s\n',
                                                     builder.getShortId(vmId)) },
             { type: 'stdout', message: getBuildStepOutput(builder, 7) },
-            { type: 'stdout', message: 'Step 8 : RUN mkdir /tmp2\n' },
+            { type: 'stdout', message: 'Step 8/10 : RUN mkdir /tmp2\n' },
             { type: 'stdout', message: util.format(' ---> Running in %s\n',
                                                     builder.getShortId(vmId)) },
             { type: 'stdout', message: getBuildStepOutput(builder, 8) },
-            { type: 'stdout', message: 'Step 9 : ADD dir/*dir robots.txt '
+            { type: 'stdout', message: 'Step 9/10 : ADD dir/*dir robots.txt '
                 + '/tmp2/\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 9) },
-            { type: 'stdout', message: 'Step 10 : RUN ls /tmp2/nest_nest_file '
-                + '/tmp2/robots.txt\n' },
+            { type: 'stdout', message: 'Step 10/10 : '
+                + 'RUN ls /tmp2/nest_nest_file /tmp2/robots.txt\n' },
             { type: 'stdout', message: util.format(' ---> Running in %s\n',
                                                     builder.getShortId(vmId)) },
             { type: 'stdout', message: getBuildStepOutput(builder, 10) },
@@ -959,11 +982,11 @@ tape('addFileNonexistingDir', function (t) {
         var builder = result.builder;
         var messages = result.messages;
         var expectedMessages = [
-            { type: 'stdout', message: 'Step 1 : FROM scratch\n' },
+            { type: 'stdout', message: 'Step 1/3 : FROM scratch\n' },
             { type: 'stdout', message: ' --->\n' },
-            { type: 'stdout', message: 'Step 2 : WORKDIR /foo/bar\n' },
+            { type: 'stdout', message: 'Step 2/3 : WORKDIR /foo/bar\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 2) },
-            { type: 'stdout', message: 'Step 3 : ADD file.txt .\n' },
+            { type: 'stdout', message: 'Step 3/3 : ADD file.txt .\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 3) },
             { type: 'stdout', message: util.format('Successfully built %s\n',
                                                     builder.getShortId()) }
@@ -1004,8 +1027,12 @@ tape('variables', function (t) {
 
         // Check the command variables were properly updated.
         var builder = result.builder;
-        builder.layers.forEach(function (layer) {
+        builder.layers.forEach(function (layer, idx) {
             var cmd = layer.cmd;
+            if (cmd === null) {
+                t.ok(idx <= 1, 'Cmd only null for inherited entries');
+                return;
+            }
             if (cmd.lineno === 16) {
                 t.equal(cmd.name, 'ADD', 'Line 16 should be an ADD command');
                 t.deepEqual(cmd.args,
@@ -1090,16 +1117,35 @@ tape('caching', function (t) {
     var buildOpts = {
         existingImages: [
             {
-                'Config': configWorkdir,
-                'ContainerConfig': configWorkdir,
-                'Id': '4672e708a636d238f3af151d33c9aeee14d7eabd60b5646'
-                    + '04d050ec200917177'
+                digest: 'sha256:4672e708a636d238f3af151d33c9aeee14d7eabd60b5646'
+                    + '04d050ec200917177',
+                image: {
+                    config: configWorkdir,
+                    container_config: configWorkdir,
+                    history: [
+                        {
+                            created: '2016-05-05T18:13:29.963947682Z',
+                            created_by: '/bin/sh -c #(nop) ENV foo=bar',
+                            empty_layer: true
+                        }
+                    ]
+                }
             },
             {
-                'Config': configAddFile,
-                'ContainerConfig': configAddFile,
-                'Id': '6530e406dfec6ea95412afc1495226896eb9c8e0bea695b'
-                    + '29102bca1f04ee205'
+                digest: 'sha256:6530e406dfec6ea95412afc1495226896eb9c8e0bea695b'
+                    + '29102bca1f04ee205',
+                image: {
+                    config: configAddFile,
+                    container_config: configAddFile,
+                    history: [
+                        {
+                            created: '2016-05-05T18:13:29.963947682Z',
+                            created_by: '/bin/sh -c #(nop) '
+                                + 'WORKDIR /Me Now <me@now.com>/foo/bar',
+                            empty_layer: true
+                        }
+                    ]
+                }
             }
         ]
     };
@@ -1112,12 +1158,12 @@ tape('caching', function (t) {
         var builder = result.builder;
         var messages = result.messages;
         var expectedMessages = [
-            { type: 'stdout', message: 'Step 1 : FROM scratch\n' },
+            { type: 'stdout', message: 'Step 1/3 : FROM scratch\n' },
             { type: 'stdout', message: ' --->\n' },
-            { type: 'stdout', message: 'Step 2 : WORKDIR /foo/bar\n' },
+            { type: 'stdout', message: 'Step 2/3 : WORKDIR /foo/bar\n' },
             { type: 'stdout', message: ' ---> Using cache\n' },
             { type: 'stdout', message: ' ---> 4672e708a636\n' },
-            { type: 'stdout', message: 'Step 3 : ADD file.txt .\n' },
+            { type: 'stdout', message: 'Step 3/3 : ADD file.txt .\n' },
             { type: 'stdout', message: ' ---> Using cache\n' },
             { type: 'stdout', message: ' ---> 6530e406dfec\n' },
             { type: 'stdout', message: 'Successfully built 6530e406dfec\n' }
@@ -1156,10 +1202,19 @@ tape('partialcaching', function (t) {
     var buildOpts = {
         existingImages: [
             {
-                'Config': config,
-                'ContainerConfig': config,
-                'Id': '4672e708a636d238f3af151d33c9aeee14d7eabd60b5646'
-                    + '04d050ec200917177'
+                digest: 'sha256:4672e708a636d238f3af151d33c9aeee14d7eabd60b5646'
+                    + '04d050ec200917177',
+                image: {
+                    config: config,
+                    container_config: config,
+                    history: [
+                        {
+                            created: '2016-05-05T18:13:29.963947682Z',
+                            created_by: '/bin/sh -c #(nop) ENV foo=bar',
+                            empty_layer: true
+                        }
+                    ]
+                }
             }
         ]
     };
@@ -1172,12 +1227,12 @@ tape('partialcaching', function (t) {
         var builder = result.builder;
         var messages = result.messages;
         var expectedMessages = [
-            { type: 'stdout', message: 'Step 1 : FROM scratch\n' },
+            { type: 'stdout', message: 'Step 1/3 : FROM scratch\n' },
             { type: 'stdout', message: ' --->\n' },
-            { type: 'stdout', message: 'Step 2 : WORKDIR /foo/bar\n' },
+            { type: 'stdout', message: 'Step 2/3 : WORKDIR /foo/bar\n' },
             { type: 'stdout', message: ' ---> Using cache\n' },
             { type: 'stdout', message: ' ---> 4672e708a636\n' },
-            { type: 'stdout', message: 'Step 3 : ADD file.txt .\n' },
+            { type: 'stdout', message: 'Step 3/3 : ADD file.txt .\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 3) },
             { type: 'stdout', message: util.format('Successfully built %s\n',
                                                     builder.getShortId()) }
