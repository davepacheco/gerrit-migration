commit 2ea3e20279158c6af23d8b9001448afb951f2245 (refs/changes/05/4505/1)
Author: Kody A Kantor <kody@kkantor.com>
Date:   2018-07-11T21:34:33+00:00 (1 year, 3 months ago)
    
    MANTA-3808 add functionality to disable mackerel and mola jobs

diff --git a/bin/gc_create_links.js b/bin/gc_create_links.js
index 19f6120..f3aaf48 100755
--- a/bin/gc_create_links.js
+++ b/bin/gc_create_links.js
@@ -7,7 +7,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -19,6 +19,7 @@ require('../lib/maxsockets')(256);
 
 var assert = require('assert-plus');
 var bunyan = require('bunyan');
+var fs = require('fs');
 var common = require('../lib').common;
 var getopt = require('posix-getopt');
 var manta = require('manta');
@@ -26,8 +27,9 @@ var path = require('path');
 var vasync = require('vasync');
 var stream = require('stream');
 var lstream = require('lstream');
+var verror = require('verror');
 
-var VE = require('verror').VError;
+var VE = verror.VError;
 
 
 var NAME = 'moray_gc_create_links';
@@ -38,6 +40,9 @@ var LOG = bunyan.createLogger({
 });
 var MANTA_CONFIG = (process.env.MANTA_CONFIG ||
                     '/opt/smartdc/common/etc/config.json');
+var MOLA_CONFIG = (process.env.MOLA_CONFIG ||
+                    '/opt/smartdc/mola/etc/config.json');
+var MOLA_CONFIG_OBJ = JSON.parse(fs.readFileSync(MOLA_CONFIG));
 var MANTA_CLIENT = manta.createClientFromFileSync(MANTA_CONFIG, LOG);
 var MANTA_USER = MANTA_CLIENT.user;
 var MANTA_DIR = '/' + MANTA_USER + '/stor/manta_gc/all/do';
@@ -73,6 +78,8 @@ function parseOptions() {
 
         //Set up some defaults...
         opts.mantaDir = opts.mantaDir || MANTA_DIR;
+        opts.jobEnabled = MOLA_CONFIG_OBJ.gcEnabled;
+        opts.disableAllJobs = MOLA_CONFIG_OBJ.disableAllJobs;
 
         return (opts);
 }
@@ -301,6 +308,16 @@ function createGcLinks(opts, cb) {
                 'client': MANTA_CLIENT,
                 'dir': opts.mantaDir
         };
+
+        if (opts.disableAllJobs === true) {
+                cb(new VE({ 'name': 'JobDisabled' }, 'all jobs are disabled'));
+                return;
+        }
+        if (opts.jobEnabled === false) {
+                cb(new VE({ 'name': 'JobDisabled' }, 'GC job is disabled'));
+                return;
+        }
+
         common.getObjectsInDir(gopts, function (err, objs) {
                 if (err && err.code === 'ResourceNotFound') {
                         LOG.info('GC not ready yet: ' + opts.mantaDir +
@@ -336,7 +353,11 @@ var _opts = parseOptions();
 
 createGcLinks(_opts, function (err) {
         if (err) {
-                LOG.fatal(err, 'Error.');
+                if (verror.hasCauseWithName(err, 'JobDisabled')) {
+                        LOG.info(err);
+                } else {
+                        LOG.fatal(err, 'Error.');
+                }
         } else {
                 AUDIT.cronFailed = 0;
         }
diff --git a/bin/kick_off_audit.js b/bin/kick_off_audit.js
index 7e6e39d..328d373 100755
--- a/bin/kick_off_audit.js
+++ b/bin/kick_off_audit.js
@@ -6,7 +6,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -147,6 +147,7 @@ function parseOptions() {
         opts.assetFile = opts.assetFile ||
                 '/opt/smartdc/common/bundle/mola.tar.gz';
 
+        opts.jobEnabled = opts.auditEnabled;
         opts.auditMapDisk = opts.auditMapDisk || 32;
         opts.auditReduceMemory = opts.auditReduceMemory || 4096;
         opts.auditReduceDisk = opts.auditReduceDisk || 16;
diff --git a/bin/kick_off_gc.js b/bin/kick_off_gc.js
index c483baa..982c232 100755
--- a/bin/kick_off_gc.js
+++ b/bin/kick_off_gc.js
@@ -6,7 +6,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var bunyan = require('bunyan');
@@ -164,6 +164,7 @@ function parseOptions() {
         opts.assetFile = opts.assetFile ||
                 '/opt/smartdc/common/bundle/mola.tar.gz';
 
+        opts.jobEnabled = opts.gcEnabled;
         opts.gcMapDisk = opts.gcMapDisk || 32;
         opts.gcReduceMemory = opts.gcReduceMemory || 8192;
         opts.gcReduceDisk = opts.gcReduceDisk || 32;
diff --git a/bin/kick_off_mpu_cleanup.js b/bin/kick_off_mpu_cleanup.js
index bd06b98..2b0d0dd 100755
--- a/bin/kick_off_mpu_cleanup.js
+++ b/bin/kick_off_mpu_cleanup.js
@@ -23,7 +23,6 @@ var util = require('util');
 var vasync = require('vasync');
 var vstream = require('vstream');
 
-var lib = require('../lib');
 var mpu = require('../lib/mpu');
 
 /*
@@ -900,6 +899,16 @@ var toCleanup;
  */
 var completed;
 
+if (CONFIG.disableAllJobs === true) {
+        LOG.info('All jobs are disabled, exiting.');
+        process.exit(exitCode);
+}
+
+if (CONFIG.gcEnabled === false) {
+        LOG.info('GC is disabled, exiting.');
+        process.exit(exitCode);
+}
+
 if (!userOpts.file) {
         /*
          * Typical production case. Possible fatal errors are:
diff --git a/bin/kick_off_mpu_gc.js b/bin/kick_off_mpu_gc.js
index bb46f97..6cc7061 100755
--- a/bin/kick_off_mpu_gc.js
+++ b/bin/kick_off_mpu_gc.js
@@ -211,6 +211,7 @@ function parseOptions() {
         opts.assetFile = opts.assetFile ||
                 '/opt/smartdc/common/bundle/mola.tar.gz';
 
+        opts.jobEnabled = opts.gcEnabled;
         opts.gcMapDisk = opts.gcMapDisk || 32;
         opts.gcReduceMemory = opts.gcReduceMemory || 8192;
         opts.gcReduceDisk = opts.gcReduceDisk || 32;
diff --git a/bin/kick_off_pg_job.js b/bin/kick_off_pg_job.js
deleted file mode 100755
index b692107..0000000
--- a/bin/kick_off_pg_job.js
+++ /dev/null
@@ -1,242 +0,0 @@
-#!/usr/bin/env node
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2017, Joyent, Inc.
- */
-
-var bunyan = require('bunyan');
-var fs = require('fs');
-var getopt = require('posix-getopt');
-var lib = require('../lib');
-var manta = require('manta');
-var path = require('path');
-
-
-
-///--- Global Objects
-
-var NAME = 'pg_job';
-var LOG = bunyan.createLogger({
-        level: (process.env.LOG_LEVEL || 'info'),
-        name: NAME,
-        stream: process.stdout
-});
-var MOLA_CONFIG = (process.env.MOLA_CONFIG ||
-                   '/opt/smartdc/mola/etc/config.json');
-var MOLA_CONFIG_OBJ = JSON.parse(fs.readFileSync(MOLA_CONFIG));
-var MANTA_CLIENT = manta.createClientFromFileSync(MOLA_CONFIG, LOG);
-var MANTA_USER = MANTA_CLIENT.user;
-
-
-
-///--- Global Constants
-
-var MP = '/' + MANTA_USER + '/stor';
-
-
-
-///--- Helpers
-
-/* BEGIN JSSTYLED */
-function getEnvCommon(opts) {
-        return (' \
-set -o pipefail && \
-cd /assets/ && gtar -xzf ' + opts.marlinPathToAsset + ' && cd mola && \
-');
-}
-/* END JSSTYLED */
-
-
-/* BEGIN JSSTYLED */
-function getMapCmd(opts) {
-        var cmd = getEnvCommon(opts) + ' \
-gzcat -f | ./build/node/bin/node ./bin/pg_transform.js | \
-   ' + opts.map + ' \
-';
-        return (cmd);
-}
-/* END JSSTYLED */
-
-
-/* BEGIN JSSTYLED */
-function getReduceCmd(opts, red) {
-        var cmd = getEnvCommon(opts) + ' \
-' + red + ' \
-';
-        return (cmd);
-}
-/* END JSSTYLED */
-
-
-function parseOptions() {
-        var option;
-        //First take what's in the config file, override what's on the
-        // command line, and use the defaults if all else fails.
-        var opts = MOLA_CONFIG_OBJ;
-        opts.shards = opts.shards || [];
-        opts.reduces = opts.reduces || [];
-        opts.tablePrefixes = opts.tablePrefixes || [];
-        var parser = new getopt.BasicParser('a:c:e:m:np:r:st:', process.argv);
-
-        while ((option = parser.getopt()) !== undefined) {
-                if (option.error) {
-                        usage();
-                }
-
-                switch (option.option) {
-                case 'a':
-                        opts.assetFile = option.optarg;
-                        break;
-                case 'c':
-                        opts.reduces.push(option.optarg);
-                        break;
-                case 'e':
-                        opts.numberReducers = lib.common.parseNumberOption(
-                            option.optarg, '-e', 1, null, usage);
-                        break;
-                case 'm':
-                        opts.shards.push(option.optarg);
-                        break;
-                case 'n':
-                        opts.noJobStart = true;
-                        break;
-                case 'p':
-                        opts.map = option.optarg;
-                        break;
-                case 'r':
-                        opts.pgJobReduceMemory = lib.common.parseNumberOption(
-                            option.optarg, '-r', 1, null, usage);
-                        break;
-                case 's':
-                        opts.readFromStdin = true;
-                        break;
-                case 't':
-                        opts.tablePrefixes.push(option.optarg);
-                        break;
-                default:
-                        usage('Unknown option: ' + option.option);
-                        break;
-                }
-        }
-
-        if (!opts.map && !opts.readFromStdin) {
-                usage('map or reading from stdin must be specified');
-        }
-
-        if (opts.tablePrefixes.length === 0) {
-                usage('table prefixes is required (perhaps manta-)?');
-        }
-
-        //Set up some defaults...
-        opts.jobName = opts.jobName || 'manta_pg_job';
-        opts.jobRoot = opts.jobRoot || MP + '/manta_pg_job';
-
-        opts.assetDir = opts.jobRoot + '/assets';
-        opts.assetObject = opts.assetDir + '/mola.tar.gz';
-        opts.assetFile = opts.assetFile ||
-                '/opt/smartdc/common/bundle/mola.tar.gz';
-
-        opts.pgJobReduceMemory = opts.pgJobReduceMemory || 4096;
-        opts.marlinPathToAsset = opts.assetObject.substring(1);
-        opts.marlinAssetObject = opts.assetObject;
-
-        opts.numberReducers = opts.numberReducers || 1;
-
-        return (opts);
-}
-
-
-function usage(msg) {
-        if (msg) {
-                console.error(msg);
-        }
-        var str  = 'usage: ' + path.basename(process.argv[1]);
-        str += ' [-a asset_file]';
-        str += ' [-c reduce_command (can be repeated)]';
-        str += ' [-e number of reducers]';
-        str += ' [-m moray_shard (can be repeated)]';
-        str += ' [-n no_job_start]';
-        str += ' [-p map_command (only once)]';
-        str += ' [-r marlin_reducer_memory]';
-        str += ' [-s read job from stdin]';
-        str += ' [-t table_prefix]';
-        console.error(str);
-        process.exit(1);
-}
-
-
-function getJob(opts, cb) {
-        if (opts.readFromStdin) {
-                var jobString = '';
-                process.stdin.setEncoding('utf8');
-                process.stdin.on('data', function (chunk) {
-                        jobString += chunk;
-                });
-
-                process.stdin.on('end', function () {
-                        try {
-                                var j = JSON.parse(jobString);
-                        } catch (e) {
-                                cb(e);
-                                return;
-                        }
-                        cb(null, j);
-                });
-                process.stdin.resume();
-        } else {
-                var job = {
-                        phases: []
-                };
-
-                job.phases.push({
-                        type: 'map',
-                        exec: getMapCmd(opts)
-                });
-                for (var i = 0; i < opts.reduces.length; ++i) {
-                        job.phases.push({
-                                type: 'reduce',
-                                count: opts.numberReducers,
-                                memory: opts.pgJobReduceMemory,
-                                exec: getReduceCmd(opts, opts.reduces[i])
-                        });
-                }
-                cb(null, job);
-        }
-}
-
-
-function getObjects(opts, cb) {
-        LOG.info({ opts: opts }, 'Running Test.');
-        var shards = opts.shards;
-
-        if (shards.length === 0) {
-                cb(new Error('No shards specified.'));
-                return;
-        }
-
-        lib.common.findObjectsForShards({
-                'log': LOG,
-                'shards': shards,
-                'client': MANTA_CLIENT,
-                'tablePrefixes': opts.tablePrefixes
-        }, cb);
-}
-
-
-///--- Main
-
-var _opts = parseOptions();
-
-_opts.getJobDefinition = getJob;
-_opts.getJobObjects = getObjects;
-
-var jobManager = lib.createJobManager(_opts, MANTA_CLIENT, LOG);
-jobManager.run(function () {
-        MANTA_CLIENT.close();
-        LOG.info('Done for now.');
-});
diff --git a/bin/kick_off_pg_transform.js b/bin/kick_off_pg_transform.js
index af30228..3b9f73a 100755
--- a/bin/kick_off_pg_transform.js
+++ b/bin/kick_off_pg_transform.js
@@ -6,7 +6,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -130,6 +130,7 @@ function parseOptions() {
         opts.assetFile = opts.assetFile ||
                 '/opt/smartdc/common/bundle/mola.tar.gz';
 
+        opts.jobEnabled = opts.pgEnabled;
         opts.marlinPathToAsset = opts.assetObject.substring(1);
         opts.marlinAssetObject = opts.assetObject;
 
@@ -213,6 +214,8 @@ function startJobForObject(opts, cb) {
         var jopts = {
                 'jobName': jobName,
                 'jobRoot': jjobRoot,
+                'jobEnabled': opts.jobEnabled,
+                'disableAllJobs': opts.disableAllJobs,
                 'morayDumpObject': object,
                 'getJobObjects': function (_, subcb) {
                         return (subcb(null, [ object.path ]));
diff --git a/bin/moray_gc.js b/bin/moray_gc.js
index 98487f6..d420999 100755
--- a/bin/moray_gc.js
+++ b/bin/moray_gc.js
@@ -40,17 +40,15 @@ var LOG = bunyan.createLogger({
 });
 var MANTA_CONFIG = (process.env.MANTA_CONFIG ||
                     '/opt/smartdc/common/etc/config.json');
+var MOLA_CONFIG = (process.env.MOLA_CONFIG ||
+                    '/opt/smartdc/mola/etc/config.json');
+var MOLA_CONFIG_OBJ = JSON.parse(fs.readFileSync(MOLA_CONFIG));
 var MANTA_CLIENT = manta.createClientFromFileSync(MANTA_CONFIG, LOG);
 var MANTA_USER = MANTA_CLIENT.user;
 var MORAY_CLEANUP_PATH = '/' + MANTA_USER + '/stor/manta_gc/moray';
 var PID_FILE = '/var/tmp/moray_gc.pid';
 var CRON_START = new Date();
-var MORAY_CLEANER = lib.createMorayCleaner({ log: LOG, batchSize: 1000 });
-MORAY_CLEANER.on('error', function (err) {
-        LOG.fatal(err);
-        var returnCode = auditCron(err);
-        process.exit(returnCode);
-});
+
 
 
 /*
@@ -356,6 +354,25 @@ function auditCron(err) {
         return (audit.cronFailed);
 }
 
+///--- Main
+
+if (MOLA_CONFIG_OBJ.disableAllJobs === true) {
+        LOG.info('All jobs are disabled, exiting.');
+        process.exit(0);
+}
+
+if (MOLA_CONFIG_OBJ.gcEnabled === false) {
+        LOG.info('GC is disabled, exiting.');
+        process.exit(0);
+}
+
+
+var MORAY_CLEANER = lib.createMorayCleaner({ log: LOG, batchSize: 1000 });
+MORAY_CLEANER.on('error', function (err) {
+        LOG.fatal(err);
+        var returnCode = auditCron(err);
+        process.exit(returnCode);
+});
 
 checkAlreadyRunning(function (err) {
         if (err) {
diff --git a/deps/jsstyle b/deps/jsstyle
index da42b50..52dc973 160000
--- a/deps/jsstyle
+++ b/deps/jsstyle
@@ -1 +1 @@
-Subproject commit da42b50ceb12d431437b32efd4c411a8e2fac0c8
+Subproject commit 52dc973cf64da11834eca7cf46ebce8518e3ee88
diff --git a/lib/job_manager.js b/lib/job_manager.js
index e1603d0..2f2fcf9 100644
--- a/lib/job_manager.js
+++ b/lib/job_manager.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -17,6 +17,7 @@ var MemoryStream = require('memorystream');
 var path = require('path');
 var util = require('util');
 var vasync = require('vasync');
+var verror = require('verror');
 
 
 
@@ -113,6 +114,22 @@ JobManager.prototype.run = function run(cb) {
                 'startTime': new Date()
         };
 
+
+        var jobDisabled = 'JobDisabled';
+        function stopIfDisabled(m_opts, subcb) {
+                if (m_opts.disableAllJobs === true) {
+                        subcb(new verror.VError({ 'name': jobDisabled },
+                                'all jobs are disabled'));
+                        return;
+                }
+
+                if (m_opts.jobEnabled === false) {
+                        subcb(new verror.VError({ 'name': jobDisabled },
+                                '%s is disabled', m_opts.jobName));
+                        return;
+                }
+        }
+
         function invokeGetJobObjects(_, subcb) {
                 opts.getJobObjects(opts, function (err, objects) {
                         if (err) {
@@ -173,8 +190,21 @@ JobManager.prototype.run = function run(cb) {
                 });
         }
 
+        function writeAuditRecord() {
+                if (opts.noJobStart === undefined ||
+                    opts.noJobStart === false) {
+                        var a = self.audit;
+                        a.endTime = new Date();
+                        a.cronRunMillis = (a.endTime.getTime() -
+                                           a.startTime.getTime());
+                        a.opts = self.opts;
+                        self.log.info(a, 'audit');
+                }
+        }
+
         vasync.pipeline({
                 'funcs': [
+                        stopIfDisabled,
                         self.auditPreviousJobs.bind(self),
                         self.checkRunningJobs.bind(self),
                         self.setupDirectories.bind(self),
@@ -185,6 +215,12 @@ JobManager.prototype.run = function run(cb) {
                 ],
                 'arg': this.opts
         }, function (err) {
+                if (err && verror.hasCauseWithName(err, jobDisabled)) {
+                        self.log.info(err);
+                        writeAuditRecord();
+                        cb();
+                        return;
+                }
                 if (err && (err.shouldNotFatal === undefined)) {
                         self.log.fatal(err, 'Error.');
                 } else {
@@ -197,16 +233,8 @@ JobManager.prototype.run = function run(cb) {
                                 self.log.info(err2, 'Error saving audit.');
                         }
 
-                        //Write out audit record.
-                        if (opts.noJobStart === undefined ||
-                            opts.noJobStart === false) {
-                                var a = self.audit;
-                                a.endTime = new Date();
-                                a.cronRunMillis = (a.endTime.getTime() -
-                                                   a.startTime.getTime());
-                                a.opts = self.opts;
-                                self.log.info(a, 'audit');
-                        }
+                        writeAuditRecord();
+
                         //Send back original error
                         cb(err);
                 });
diff --git a/sapi_manifests/mola/template b/sapi_manifests/mola/template
index 81e1393..8a4ca3c 100644
--- a/sapi_manifests/mola/template
+++ b/sapi_manifests/mola/template
@@ -31,16 +31,20 @@
     "auditMapDisk": {{AUDIT_MAP_DISK}}{{/AUDIT_MAP_DISK}}{{#AUDIT_REDUCE_DISK}},
     "auditReduceDisk": {{AUDIT_REDUCE_DISK}}{{/AUDIT_REDUCE_DISK}}{{#AUDIT_REDUCE_MEMORY}},
     "auditReduceMemory": {{AUDIT_REDUCE_MEMORY}}{{/AUDIT_REDUCE_MEMORY}}{{#AUDIT_REDUCER_COUNT}},
-    "auditReducerCount": {{AUDIT_REDUCER_COUNT}}{{/AUDIT_REDUCER_COUNT}}{{#CRUFT_MAP_DISK}},
+    "auditReducerCount": {{AUDIT_REDUCER_COUNT}}{{/AUDIT_REDUCER_COUNT}}{{#AUDIT_ENABLED}}
+    "auditEnabled": {{AUDIT_ENABLED}}{{/AUDIT_ENABLED}}{{#CRUFT_MAP_DISK}},
     "cruftMapDisk": {{CRUFT_MAP_DISK}}{{/CRUFT_MAP_DISK}}{{#CRUFT_REDUCE_DISK}},
     "cruftReduceDisk": {{CRUFT_REDUCE_DISK}}{{/CRUFT_REDUCE_DISK}}{{#CRUFT_REDUCE_MEMORY}},
     "cruftReduceMemory": {{CRUFT_REDUCE_MEMORY}}{{/CRUFT_REDUCE_MEMORY}}{{#CRUFT_REDUCER_COUNT}},
-    "cruftReducerCount": {{CRUFT_REDUCER_COUNT}}{{/CRUFT_REDUCER_COUNT}}{{#GC_MAP_DISK}},
+    "cruftReducerCount": {{CRUFT_REDUCER_COUNT}}{{/CRUFT_REDUCER_COUNT}}{{#CRUFT_ENABLED}},
+    "cruftEnabled": {{CRUFT_ENABLED}}{{/CRUFT_ENABLED}}{{#GC_MAP_DISK}},
     "gcMapDisk": {{GC_MAP_DISK}}{{/GC_MAP_DISK}}{{#GC_REDUCE_DISK}},
     "gcReduceDisk": {{GC_REDUCE_DISK}}{{/GC_REDUCE_DISK}}{{#GC_REDUCE_MEMORY}},
-    "gcReduceMemory": {{GC_REDUCE_MEMORY}}{{/GC_REDUCE_MEMORY}}{{#PG_JOB_REDUCE_MEMORY}},
-    "pgJobReduceMemory": {{PG_JOB_REDUCE_MEMORY}}{{/PG_JOB_REDUCE_MEMORY}}{{#REBALANCE_MEMORY}},
+    "gcReduceMemory": {{GC_REDUCE_MEMORY}}{{/GC_REDUCE_MEMORY}}{{#GC_ENABLED}},
+    "gcEnabled": {{GC_ENABLED}}{{/GC_ENABLED}}{{#REBALANCE_MEMORY}},
     "rebalanceMemory": {{REBALANCE_MEMORY}}{{/REBALANCE_MEMORY}}{{#PG_MAP_DISK}},
     "pgMapDisk": {{PG_MAP_DISK}}{{/PG_MAP_DISK}}{{#PG_MAP_MEMORY}},
-    "pgMapMemory": {{PG_MAP_MEMORY}}{{/PG_MAP_MEMORY}}
+    "pgMapMemory": {{PG_MAP_MEMORY}}{{/PG_MAP_MEMORY}}{{#PG_ENABLED}},
+    "pgEnabled": {{PG_ENABLED}}{{/PG_ENABLED}}{{#DISABLE_ALL_JOBS}},
+    "disableAllJobs": {{DISABLE_ALL_JOBS}}{{/DISABLE_ALL_JOBS}}
 }
