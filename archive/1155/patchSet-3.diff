From 6fb3b95b91fa9a3585448060a6f4f04327103c6c Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Wed, 21 Dec 2016 11:33:14 -0800
Subject: [PATCH] MANTA-3064 binder not serving host TTLs properly Reviewed by:
 David Pacheco <dap@joyent.com>

---
 lib/server.js | 61 ++++++++++++++++++++++++++++++++++++++++++++++-----
 1 file changed, 55 insertions(+), 6 deletions(-)

diff --git a/lib/server.js b/lib/server.js
index c517713..26ac1be 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -171,15 +171,35 @@ function resolve(options, query, cb) {
                          */
                         query.setError('servfail');
                 } else {
+                        if (typeof (record.type) !== 'string' ||
+                            record[record.type] === undefined ||
+                            record[record.type] === null ||
+                            typeof (record[record.type]) !== 'object') {
+                                req.log.error({
+                                        record: record
+                                }, 'invalid ZK service record');
+                                query.setError('servfail');
+                                req.stamp('pre-resp');
+                                query.respond();
+                                cb();
+                                return;
+                        }
+
                         var addr;
 
-                        var ttl = (record[record.type] || {}).ttl;
                         /*
                          * Default the TTL to 30 seconds (the default ZK
-                         * session timeout)
+                         * session timeout). If the record has an explicit TTL,
+                         * it may be written on the root object, or on the
+                         * type-specific sub-object (record[record.type]).
+                         * This is all an historical mess, but we take the TTL
+                         * from the deepest object.
                          */
-                        if (ttl === undefined)
-                                ttl = 30;
+                        var ttl = 30;
+                        if (record.ttl !== undefined)
+                            ttl = record.ttl;
+                        if (record[record.type].ttl !== undefined)
+                            ttl = record[record.type].ttl;
 
                         if (service !== undefined &&
                             record.type !== 'service') {
@@ -194,7 +214,7 @@ function resolve(options, query, cb) {
                                 req.stamp('build_response');
                                 query.respond();
                                 cb();
-                                return (null);
+                                return;
                         }
                         switch (record.type) {
                         case 'database':
@@ -214,6 +234,20 @@ function resolve(options, query, cb) {
 
                         case 'service':
                                 var s = record.service.service;
+                                if (!s || typeof (s) !== 'object') {
+                                        req.log.error({
+                                                record: record
+                                        }, 'invalid ZK service record');
+                                        query.setError('servfail');
+                                        break;
+                                }
+                                /*
+                                 * For service-type records, the TTL may also
+                                 * be written on record.service.service.
+                                 */
+                                if (s.ttl !== undefined)
+                                    ttl = s.ttl;
+
                                 if (service !== undefined &&
                                     (service !== s.srvce ||
                                     protocol !== s.proto)) {
@@ -257,7 +291,11 @@ function resolve(options, query, cb) {
                                             ports.length < 1)
                                                 ports = [s.port];
                                         var ar, sr, nm;
-                                        var rttl = host.ttl || 30;
+                                        var rttl = 30;
+                                        if (host.ttl !== undefined)
+                                            rttl = host.ttl;
+                                        if (host[host.type].ttl !== undefined)
+                                            rttl = host[host.type].ttl;
                                         if (service !== undefined) {
                                                 nm = host.name + '.' + domain;
                                                 ports.forEach(function (p) {
@@ -271,6 +309,17 @@ function resolve(options, query, cb) {
                                                 query.addAdditional(nm, ar,
                                                     rttl);
                                         } else {
+                                                /*
+                                                 * If we're serving plain A
+                                                 * records for a service, they
+                                                 * represent both the list of
+                                                 * who's in the service AND
+                                                 * what IP they have. So we
+                                                 * need to use the smallest
+                                                 * of the two TTLs.
+                                                 */
+                                                if (ttl < rttl)
+                                                        rttl = ttl;
                                                 ar = new ARecord(a);
                                                 query.addAnswer(domain, ar,
                                                     rttl);
-- 
2.21.0

