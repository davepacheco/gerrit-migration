From 49fd077d47fce4b0842adae86e7f8c3426ec2bb1 Mon Sep 17 00:00:00 2001
From: Jason King <jason.king@joyent.com>
Date: Thu, 3 Jan 2019 18:01:07 +0000
Subject: [PATCH] OS-7449 Add custom allocators to libcustr

---
 usr/src/lib/libcustr/common/custr.c      | 99 +++++++++++++++++++++---
 usr/src/lib/libcustr/common/libcustr.h   | 10 +++
 usr/src/lib/libcustr/common/mapfile-vers |  2 +
 3 files changed, 102 insertions(+), 9 deletions(-)

diff --git a/usr/src/lib/libcustr/common/custr.c b/usr/src/lib/libcustr/common/custr.c
index 5c5b0e370a..692afdf1c1 100644
--- a/usr/src/lib/libcustr/common/custr.c
+++ b/usr/src/lib/libcustr/common/custr.c
@@ -36,10 +36,23 @@ struct custr {
 	size_t cus_datalen;
 	char *cus_data;
 	custr_flags_t cus_flags;
+	custr_alloc_t *cus_alloc;
 };
+#define	CUSTR_ALLOC(_cus, _len) \
+	(_cus)->cus_alloc->custr_ao_alloc((_cus)->cus_alloc, (_len))
+#define	CUSTR_FREE(_cus, _p, _len) \
+	(_cus)->cus_alloc->custr_ao_free((_cus)->cus_alloc, (_p), (_len))
 
 #define	STRING_CHUNK_SIZE	64
 
+static void *custr_def_alloc(custr_alloc_t *, size_t);
+static void custr_def_free(custr_alloc_t *, void *, size_t);
+
+static custr_alloc_t custr_alloc_default = {
+	.custr_ao_alloc = custr_def_alloc,
+	.custr_ao_free = custr_def_free
+};
+
 void
 custr_reset(custr_t *cus)
 {
@@ -97,7 +110,7 @@ custr_append_vprintf(custr_t *cus, const char *fmt, va_list ap)
 		/*
 		 * Allocate replacement memory:
 		 */
-		if ((new_data = malloc(new_datalen)) == NULL) {
+		if ((new_data = CUSTR_ALLOC(cus, new_datalen)) == NULL) {
 			return (-1);
 		}
 
@@ -108,7 +121,7 @@ custr_append_vprintf(custr_t *cus, const char *fmt, va_list ap)
 		if (cus->cus_data != NULL) {
 			(void) memcpy(new_data, cus->cus_data,
 			    cus->cus_strlen + 1);
-			free(cus->cus_data);
+			CUSTR_FREE(cus, cus->cus_data, cus->cus_datalen);
 		}
 
 		/*
@@ -154,23 +167,63 @@ custr_append(custr_t *cus, const char *name)
 	return (custr_append_printf(cus, "%s", name));
 }
 
-int
-custr_alloc(custr_t **cus)
+static int
+custr_vxalloc(custr_t **cus, custr_alloc_t *cao, va_list ap)
 {
 	custr_t *t;
 
-	if ((t = calloc(1, sizeof (*t))) == NULL) {
+	if (cao == NULL)
+		cao = &custr_alloc_default;
+
+	if (cao->custr_ao_alloc == NULL || cao->custr_ao_free == NULL) {
+		errno = EINVAL;
+		return (-1);
+	}
+
+	if (cao->custr_ao_init != NULL) {
+		int ret = cao->custr_ao_init(cao, ap);
+
+		if (ret != 0)
+			return (ret);
+	}
+
+	if ((t = cao->custr_ao_alloc(cao, sizeof (*t))) == NULL) {
+		if (cao->custr_ao_fini != NULL)
+			cao->custr_ao_fini(cao);
 		*cus = NULL;
 		return (-1);
 	}
+	(void) memset(t, 0, sizeof (*t));
 
+	t->cus_alloc = cao;
 	*cus = t;
 	return (0);
 }
 
 int
-custr_alloc_buf(custr_t **cus, void *buf, size_t buflen)
+custr_xalloc(custr_t **cus, custr_alloc_t *cao, ...)
+{
+	va_list ap;
+	int ret;
+
+	va_start(ap, cao);
+	ret = custr_vxalloc(cus, cao, ap);
+	va_end(ap);
+
+	return (ret);
+}
+
+int
+custr_alloc(custr_t **cus)
+{
+	return (custr_xalloc(cus, NULL));
+}
+
+int
+custr_xalloc_buf(custr_t **cus, void *buf, size_t buflen,
+    custr_alloc_t *cao, ...)
 {
+	va_list ap;
 	int ret;
 
 	if (buflen == 0 || buf == NULL) {
@@ -178,7 +231,11 @@ custr_alloc_buf(custr_t **cus, void *buf, size_t buflen)
 		return (-1);
 	}
 
-	if ((ret = custr_alloc(cus)) != 0)
+	va_start(ap, cao);
+	ret = custr_vxalloc(cus, cao, ap);
+	va_end(ap);
+
+	if (ret != 0)
 		return (ret);
 
 	(*cus)->cus_data = buf;
@@ -190,6 +247,12 @@ custr_alloc_buf(custr_t **cus, void *buf, size_t buflen)
 	return (0);
 }
 
+int
+custr_alloc_buf(custr_t **cus, void *buf, size_t buflen)
+{
+	return (custr_xalloc_buf(cus, buf, buflen, NULL));
+}
+
 void
 custr_free(custr_t *cus)
 {
@@ -197,6 +260,24 @@ custr_free(custr_t *cus)
 		return;
 
 	if ((cus->cus_flags & CUSTR_FIXEDBUF) == 0)
-		free(cus->cus_data);
-	free(cus);
+		CUSTR_FREE(cus, cus->cus_data, cus->cus_datalen);
+
+	custr_alloc_t *cao = cus->cus_alloc;
+
+	cao->custr_ao_free(cao, cus, sizeof (*cus));
+
+	if (cao->custr_ao_fini != NULL)
+		cao->custr_ao_fini(cao);
+}
+
+static void *
+custr_def_alloc(custr_alloc_t *cao __unused, size_t len)
+{
+	return (malloc(len));
+}
+
+static void
+custr_def_free(custr_alloc_t *cao __unused, void *p, size_t len __unused)
+{
+	free(p);
 }
diff --git a/usr/src/lib/libcustr/common/libcustr.h b/usr/src/lib/libcustr/common/libcustr.h
index 7671390d7f..b075f32a59 100644
--- a/usr/src/lib/libcustr/common/libcustr.h
+++ b/usr/src/lib/libcustr/common/libcustr.h
@@ -26,12 +26,21 @@ extern "C" {
 #endif
 
 typedef struct custr custr_t;
+typedef struct custr_alloc custr_alloc_t;
+
+struct custr_alloc {
+	int (*custr_ao_init)(custr_alloc_t *, va_list);
+	void (*custr_ao_fini)(custr_alloc_t *);
+	void *(*custr_ao_alloc)(custr_alloc_t *, size_t);
+	void (*custr_ao_free)(custr_alloc_t *, void *, size_t);
+};
 
 /*
  * Allocate and free a "custr_t" dynamic string object.  Returns 0 on success
  * and -1 otherwise.
  */
 int custr_alloc(custr_t **);
+int custr_xalloc(custr_t **, custr_alloc_t *, ...);
 void custr_free(custr_t *);
 
 /*
@@ -39,6 +48,7 @@ void custr_free(custr_t *);
  * buffer.
  */
 int custr_alloc_buf(custr_t **, void *, size_t);
+int custr_xalloc_buf(custr_t **, void *, size_t, custr_alloc_t *, ...);
 
 /*
  * Append a single character, or a NUL-terminated string of characters, to a
diff --git a/usr/src/lib/libcustr/common/mapfile-vers b/usr/src/lib/libcustr/common/mapfile-vers
index 369771929a..87454a0d47 100644
--- a/usr/src/lib/libcustr/common/mapfile-vers
+++ b/usr/src/lib/libcustr/common/mapfile-vers
@@ -41,6 +41,8 @@ SYMBOL_VERSION ILLUMOSprivate {
 	custr_free;
 	custr_len;
 	custr_reset;
+	custr_xalloc;
+	custr_xalloc_buf;
     local:
 	*;
 };
-- 
2.21.0

