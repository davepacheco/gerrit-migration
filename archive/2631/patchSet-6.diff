From 42a5581051507d73236d6868d5f7ff8170fcd9d4 Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Mon, 18 Sep 2017 18:47:10 +0000
Subject: [PATCH] MORAY-437 Limit the maximum number of queued requests for now

---
 lib/errors.js                     |  5 +++--
 lib/manatee.js                    |  4 +++-
 lib/pg.js                         | 13 +++++++++++++
 lib/standalone.js                 |  4 +++-
 sapi_manifests/moray/template     |  3 +++
 sdc/sapi_manifests/moray/template |  3 +++
 6 files changed, 28 insertions(+), 4 deletions(-)

diff --git a/lib/errors.js b/lib/errors.js
index b74fbe8..d1bb039 100644
--- a/lib/errors.js
+++ b/lib/errors.js
@@ -222,8 +222,9 @@ function NoDatabaseError(cause) {
 util.inherits(NoDatabaseError, WError);
 
 
-function NoDatabasePeersError(cause) {
-    WError.call(this, (cause || {}), 'no manatee peers available');
+function NoDatabasePeersError(msg) {
+    assert.string(msg, 'msg');
+    WError.call(this, msg);
     this.name = this.constructor.name;
 }
 util.inherits(NoDatabasePeersError, WError);
diff --git a/lib/manatee.js b/lib/manatee.js
index a7263b3..e11b341 100644
--- a/lib/manatee.js
+++ b/lib/manatee.js
@@ -135,7 +135,8 @@ Manatee.prototype.pg = function pg(callback) {
     var log = self._log;
 
     if (!db) {
-        callback(new NoDatabasePeersError());
+        setImmediate(callback, new NoDatabasePeersError(
+            'no manatee peers available'));
         return;
     }
 
@@ -251,6 +252,7 @@ Manatee.prototype._refresh = function _refresh(topology) {
             connectTimeout: opts.pgConfig.connectTimeout,
             maxConnections: opts.pgConfig.maxConnections,
             maxIdleTime: opts.pgConfig.maxIdleTime,
+            maxQueueLength: opts.pgConfig.maxQueueLength,
             role: 'primary',
             queryTimeout: opts.pgConfig.queryTimeout,
             url: opts.url
diff --git a/lib/pg.js b/lib/pg.js
index 2f2f2ef..2e64d18 100644
--- a/lib/pg.js
+++ b/lib/pg.js
@@ -28,6 +28,7 @@ var mod_errors = require('./errors');
 var ConnectTimeoutError = mod_errors.ConnectTimeoutError;
 var InternalError = mod_errors.InternalError;
 var InvalidIndexDefinitionError = mod_errors.InvalidIndexDefinitionError;
+var NoDatabasePeersError = mod_errors.NoDatabasePeersError;
 var QueryTimeoutError = mod_errors.QueryTimeoutError;
 var UniqueAttributeError = mod_errors.UniqueAttributeError;
 
@@ -524,6 +525,7 @@ function PGPool(options) {
     assert.number(options.maxConnections, 'options.maxConnections');
     assert.number(options.maxIdleTime, 'options.maxIdleTime');
     assert.number(options.queryTimeout, 'options.queryTimeout');
+    assert.number(options.maxQueueLength, 'options.maxQueueLength');
 
     var self = this;
 
@@ -540,6 +542,7 @@ function PGPool(options) {
     this.maxConnections = options.maxConnections;
     this.maxIdleTime = options.maxIdleTime;
     this.queryTimeout = options.queryTimeout;
+    this.maxQueueLength = options.maxQueueLength;
 
     var pgOpts = {
         connectTimeout: self.connectTimeout,
@@ -599,10 +602,19 @@ PGPool.prototype.close = function close(cb) {
 
 PGPool.prototype.checkout = function checkout(callback) {
     assert.func(callback, 'callback');
+    assert.array(this.pool.queue, 'this.pool.queue');
 
     var log = this.log;
 
     log.trace({pool: this.pool}, 'checkout: entered');
+
+    if (this.pool.queue.length >= this.maxQueueLength) {
+        setImmediate(callback, new NoDatabasePeersError(
+            'unable to acquire backend connection due to ' +
+            'service being overloaded'));
+        return;
+    }
+
     this.pool.acquire(function (err, client) {
         if (err) {
             log.trace(err, 'checkout: failed');
@@ -709,6 +721,7 @@ module.exports = {
         number('maxIdleTime', 120000);
         number('maxConnections', 5);
         number('queryTimeout', 0);
+        number('maxQueueLength', 2000);
 
         return (new PGPool(opts));
     },
diff --git a/lib/standalone.js b/lib/standalone.js
index 0e9e080..81716a2 100644
--- a/lib/standalone.js
+++ b/lib/standalone.js
@@ -71,6 +71,7 @@ function createPGPool(opts) {
         connectTimeout: opts.pgConfig.connectTimeout,
         maxConnections: opts.pgConfig.maxConnections,
         maxIdleTime: opts.pgConfig.maxIdleTime,
+        maxQueueLength: opts.pgConfig.maxQueueLength,
         role: opts.role,
         queryTimeout: opts.pgConfig.queryTimeout,
         url: opts.url
@@ -118,7 +119,8 @@ Standalone.prototype.pg = function pg(callback) {
     var log = this.log;
 
     if (!db) {
-        callback(new NoDatabasePeersError());
+        setImmediate(callback, new NoDatabasePeersError(
+            'standalone database not available'));
         return;
     }
 
diff --git a/sapi_manifests/moray/template b/sapi_manifests/moray/template
index 939d73c..150cf17 100644
--- a/sapi_manifests/moray/template
+++ b/sapi_manifests/moray/template
@@ -23,6 +23,9 @@
       "connectTimeout": 4000,
       "checkInterval": 90000,
       "maxConnections": {{MORAY_MAX_PG_CONNS}},
+{{#MORAY_MAX_QUEUE_LENGTH}}
+      "maxQueueLength": {{MORAY_MAX_QUEUE_LENGTH}},
+{{/MORAY_MAX_QUEUE_LENGTH}}
       "maxIdleTime": 270000,
       "user": "moray"
     }
diff --git a/sdc/sapi_manifests/moray/template b/sdc/sapi_manifests/moray/template
index 89ee0eb..e431f14 100644
--- a/sdc/sapi_manifests/moray/template
+++ b/sdc/sapi_manifests/moray/template
@@ -23,6 +23,9 @@
       "connectTimeout": 4000,
       "checkInterval": 90000,
       "maxConnections": {{MORAY_MAX_PG_CONNS}},
+{{#MORAY_MAX_QUEUE_LENGTH}}
+      "maxQueueLength": {{MORAY_MAX_QUEUE_LENGTH}},
+{{/MORAY_MAX_QUEUE_LENGTH}}
       "maxIdleTime": 270000,
       "user": "moray"
     }
-- 
2.21.0

