commit 02475989f340227c253508fd05dce60356f19345 (refs/changes/31/2631/7)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2017-10-09T22:44:35+00:00 (2 years ago)
    
    MORAY-437 Limit the maximum number of queued requests for now

diff --git a/lib/errors.js b/lib/errors.js
index b74fbe8..d1bb039 100644
--- a/lib/errors.js
+++ b/lib/errors.js
@@ -222,8 +222,9 @@ function NoDatabaseError(cause) {
 util.inherits(NoDatabaseError, WError);
 
 
-function NoDatabasePeersError(cause) {
-    WError.call(this, (cause || {}), 'no manatee peers available');
+function NoDatabasePeersError(msg) {
+    assert.string(msg, 'msg');
+    WError.call(this, msg);
     this.name = this.constructor.name;
 }
 util.inherits(NoDatabasePeersError, WError);
diff --git a/lib/manatee.js b/lib/manatee.js
index 649e3ca..451022a 100644
--- a/lib/manatee.js
+++ b/lib/manatee.js
@@ -147,7 +147,8 @@ Manatee.prototype.pg = function pg(callback) {
     var log = self._log;
 
     if (!db) {
-        callback(new NoDatabasePeersError());
+        setImmediate(callback, new NoDatabasePeersError(
+            'no manatee peers available'));
         return;
     }
 
@@ -263,6 +264,7 @@ Manatee.prototype._refresh = function _refresh(topology) {
             connectTimeout: opts.pgConfig.connectTimeout,
             maxConnections: opts.pgConfig.maxConnections,
             maxIdleTime: opts.pgConfig.maxIdleTime,
+            maxQueueLength: opts.pgConfig.maxQueueLength,
             role: 'primary',
             queryTimeout: opts.pgConfig.queryTimeout,
             url: opts.url,
diff --git a/lib/pg.js b/lib/pg.js
index 27f4b79..44c2ae6 100644
--- a/lib/pg.js
+++ b/lib/pg.js
@@ -28,6 +28,7 @@ var mod_errors = require('./errors');
 var ConnectTimeoutError = mod_errors.ConnectTimeoutError;
 var InternalError = mod_errors.InternalError;
 var InvalidIndexDefinitionError = mod_errors.InvalidIndexDefinitionError;
+var NoDatabasePeersError = mod_errors.NoDatabasePeersError;
 var QueryTimeoutError = mod_errors.QueryTimeoutError;
 var UniqueAttributeError = mod_errors.UniqueAttributeError;
 
@@ -524,6 +525,7 @@ function PGPool(options) {
     assert.number(options.maxConnections, 'options.maxConnections');
     assert.number(options.maxIdleTime, 'options.maxIdleTime');
     assert.number(options.queryTimeout, 'options.queryTimeout');
+    assert.number(options.maxQueueLength, 'options.maxQueueLength');
     assert.object(options.collector, 'options.collector');
 
     var self = this;
@@ -541,6 +543,7 @@ function PGPool(options) {
     this.maxConnections = options.maxConnections;
     this.maxIdleTime = options.maxIdleTime;
     this.queryTimeout = options.queryTimeout;
+    this.maxQueueLength = options.maxQueueLength;
     this.collector = options.collector;
 
     /*
@@ -622,10 +625,19 @@ PGPool.prototype.close = function close(cb) {
 
 PGPool.prototype.checkout = function checkout(callback) {
     assert.func(callback, 'callback');
+    assert.array(this.pool.queue, 'this.pool.queue');
 
     var log = this.log;
 
     log.trace({pool: this.pool}, 'checkout: entered');
+
+    if (this.pool.queue.length >= this.maxQueueLength) {
+        setImmediate(callback, new NoDatabasePeersError(
+            'unable to acquire backend connection due to ' +
+            'service being overloaded'));
+        return;
+    }
+
     this.pool.acquire(function (err, client) {
         if (err) {
             log.trace(err, 'checkout: failed');
@@ -744,6 +756,7 @@ module.exports = {
         number('maxIdleTime', 120000);
         number('maxConnections', 5);
         number('queryTimeout', 0);
+        number('maxQueueLength', 2000);
 
         return (new PGPool(opts));
     },
diff --git a/lib/standalone.js b/lib/standalone.js
index e9bb9b2..8ac0f29 100644
--- a/lib/standalone.js
+++ b/lib/standalone.js
@@ -72,6 +72,7 @@ function createPGPool(opts) {
         connectTimeout: opts.pgConfig.connectTimeout,
         maxConnections: opts.pgConfig.maxConnections,
         maxIdleTime: opts.pgConfig.maxIdleTime,
+        maxQueueLength: opts.pgConfig.maxQueueLength,
         role: opts.role,
         queryTimeout: opts.pgConfig.queryTimeout,
         url: opts.url,
@@ -133,7 +134,8 @@ Standalone.prototype.pg = function pg(callback) {
     var log = this.log;
 
     if (!db) {
-        callback(new NoDatabasePeersError());
+        setImmediate(callback, new NoDatabasePeersError(
+            'standalone database not available'));
         return;
     }
 
diff --git a/sapi_manifests/moray/template b/sapi_manifests/moray/template
index de32380..97ce216 100644
--- a/sapi_manifests/moray/template
+++ b/sapi_manifests/moray/template
@@ -23,6 +23,9 @@
       "connectTimeout": 4000,
       "checkInterval": 90000,
       "maxConnections": {{MORAY_MAX_PG_CONNS}},
+{{#MORAY_MAX_QUEUE_LENGTH}}
+      "maxQueueLength": {{MORAY_MAX_QUEUE_LENGTH}},
+{{/MORAY_MAX_QUEUE_LENGTH}}
       "maxIdleTime": 270000,
       "user": "moray"
     }
diff --git a/sdc/sapi_manifests/moray/template b/sdc/sapi_manifests/moray/template
index 6172f91..991ccbe 100644
--- a/sdc/sapi_manifests/moray/template
+++ b/sdc/sapi_manifests/moray/template
@@ -23,6 +23,9 @@
       "connectTimeout": 4000,
       "checkInterval": 90000,
       "maxConnections": {{MORAY_MAX_PG_CONNS}},
+{{#MORAY_MAX_QUEUE_LENGTH}}
+      "maxQueueLength": {{MORAY_MAX_QUEUE_LENGTH}},
+{{/MORAY_MAX_QUEUE_LENGTH}}
       "maxIdleTime": 270000,
       "user": "moray"
     }
