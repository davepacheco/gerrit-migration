commit 268fe7827fe4ab4a01a1a037d2799ea883b7390c (refs/changes/28/5328/5)
Author: Dave Eddy <dave@daveeddy.com>
Date:   2019-01-09T16:34:29-05:00 (9 months ago)
    
    OS-7489 create_snapshot potential race when updating last_modified
    Reviewed by: Mike Gerdts <mike.gerdts@joyent.com>
    Approved by: Mike Gerdts <mike.gerdts@joyent.com>

diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index c8af75c2..a458cacf 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -13640,6 +13640,10 @@ exports.create_snapshot = function (uuid, snapname, options, callback)
             ]}, function (err2) {
                 cb(err2);
             });
+        }, function (cb) {
+            vs.stop();
+            vs = null;
+            cb();
         }, function (cb) {
             if (vmobj.brand === 'bhyve') {
                 mount_snapshot = false;
@@ -13732,6 +13736,28 @@ exports.create_snapshot = function (uuid, snapname, options, callback)
                 cb();
             });
         }, function (cb) {
+            /*
+             * Recreate the vminfod event stream to ensure we have the latest
+             * version of the vmobj available and can optionally block on the
+             * last_modified property being updated.
+             */
+            vs = new vminfod.VminfodEventStream({
+                name: sprintf('VM.js create_snapshot last_modified (%s)', uuid),
+                parseReady: true,
+                log: log
+            });
+
+            vs.once('ready', function (ready_ev) {
+                try {
+                    vmobj = vminfodEventGetVM(uuid, ready_ev);
+                } catch (e) {
+                    cb(e);
+                    return;
+                }
+
+                cb();
+            });
+        }, function (cb) {
             var cancelFn;
             var now = new Date();
             var lastModified = new Date(vmobj.last_modified);
@@ -13756,14 +13782,23 @@ exports.create_snapshot = function (uuid, snapname, options, callback)
                     var nowSecs = Math.floor(now.getTime() / 1000);
                     var thenSecs = Math.floor(lastModified.getTime() / 1000);
 
-                    if (thenSecs !== nowSecs) {
-                        changes.push({
-                            path: ['last_modified'],
-                            action: 'changed',
-                            newValue: new Date(nowSecs * 1000).toISOString()
-                        });
+                    if (thenSecs === nowSecs) {
+                        log.debug({now: now, then: lastModified},
+                            'last_modified values are the same - '
+                            + 'skipping vminfod');
+                        cb2();
+                        return;
                     }
 
+                    log.debug({now: now, then: lastModified},
+                        'waiting on vminfod for change to be seen');
+
+                    changes.push({
+                        path: ['last_modified'],
+                        action: 'changed',
+                        newValue: new Date(nowSecs * 1000).toISOString()
+                    });
+
                     var opts = {
                         timeout: VMINFOD_TIMEOUT,
                         catchErrors: true,
