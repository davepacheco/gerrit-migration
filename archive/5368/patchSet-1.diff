From 409c1e5a07359c9724bcabc886875e6fda671157 Mon Sep 17 00:00:00 2001
From: Josh Wilsdon <josh@wilsdon.ca>
Date: Tue, 15 Jan 2019 11:53:08 -0800
Subject: [PATCH] AGENT-997 hermes-actor should use sdcnode

---
 Makefile                             |  61 +++--
 actor/actor.js                       |  51 +++-
 lib/httpserver.js                    |  15 +-
 lib/servers.js                       |  37 ++-
 package.json                         |  22 +-
 tools/mk/Makefile.ctf.defs           |  49 ++++
 tools/mk/Makefile.ctf.targ           |  29 +++
 tools/mk/Makefile.defs               | 105 ++++++++
 tools/mk/Makefile.deps               |  87 +++++++
 tools/mk/Makefile.go_prebuilt.defs   | 132 ++++++++++
 tools/mk/Makefile.go_prebuilt.targ   |  55 +++++
 tools/mk/Makefile.manpages.defs      | 128 ++++++++++
 tools/mk/Makefile.manpages.targ      |  28 +++
 tools/mk/Makefile.node.defs          | 110 +++++++++
 tools/mk/Makefile.node.targ          |  42 ++++
 tools/mk/Makefile.node_modules.defs  |  68 ++++++
 tools/mk/Makefile.node_modules.targ  |  31 +++
 tools/mk/Makefile.node_prebuilt.defs | 159 ++++++++++++
 tools/mk/Makefile.node_prebuilt.targ |  42 ++++
 tools/mk/Makefile.smf.defs           |  40 +++
 tools/mk/Makefile.smf.targ           |  29 +++
 tools/mk/Makefile.targ               | 348 +++++++++++++++++++++++++++
 22 files changed, 1612 insertions(+), 56 deletions(-)
 create mode 100644 tools/mk/Makefile.ctf.defs
 create mode 100644 tools/mk/Makefile.ctf.targ
 create mode 100644 tools/mk/Makefile.defs
 create mode 100644 tools/mk/Makefile.deps
 create mode 100644 tools/mk/Makefile.go_prebuilt.defs
 create mode 100644 tools/mk/Makefile.go_prebuilt.targ
 create mode 100644 tools/mk/Makefile.manpages.defs
 create mode 100644 tools/mk/Makefile.manpages.targ
 create mode 100644 tools/mk/Makefile.node.defs
 create mode 100644 tools/mk/Makefile.node.targ
 create mode 100644 tools/mk/Makefile.node_modules.defs
 create mode 100644 tools/mk/Makefile.node_modules.targ
 create mode 100644 tools/mk/Makefile.node_prebuilt.defs
 create mode 100644 tools/mk/Makefile.node_prebuilt.targ
 create mode 100644 tools/mk/Makefile.smf.defs
 create mode 100644 tools/mk/Makefile.smf.targ
 create mode 100644 tools/mk/Makefile.targ

diff --git a/Makefile b/Makefile
index b85d02c..8c23d9d 100644
--- a/Makefile
+++ b/Makefile
@@ -5,21 +5,32 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2019, Joyent, Inc.
 #
 
 TOP =			$(PWD)
 
 #
-# Use a build of node compiled on the oldest supported SDC 6.5 platform:
+# Use a build of node compiled to work in the global zone.
 #
-MANTA_BASE =		http://us-east.manta.joyent.com
-NODE_VERSION =		v0.10.26
-NODE_TARBALL =		node-$(NODE_VERSION)-sdc65.tar.gz
-NODE_BASE_URL =		$(MANTA_BASE)/Joyent_Dev/public/old_node_builds
-
-NODE_EXEC =		$(PWD)/node/bin/node
-NPM_EXEC =		$(NODE_EXEC) $(PWD)/node/bin/npm
+NODE_PREBUILT_VERSION = v6.15.1
+NODE_PREBUILT_TAG = gz
+ifeq ($(shell uname -s),SunOS)
+	NODE_PREBUILT_IMAGE =   18b094b0-eb01-11e5-80c1-175dac7ddf02
+endif
+
+# Included definitions
+include ./tools/mk/Makefile.defs
+ifeq ($(shell uname -s),SunOS)
+    include ./tools/mk/Makefile.node_prebuilt.defs
+else
+    NPM=npm
+    NODE=node
+    NPM_EXEC=$(shell which npm)
+    NODE_EXEC=$(shell which node)
+endif
+include ./tools/mk/Makefile.node_deps.defs
+include ./tools/mk/Makefile.smf.defs
 
 DESTDIR =		$(PWD)/proto
 
@@ -83,6 +94,8 @@ INSTALL_FILES = \
 	$(addprefix $(DESTDIR)$(PREFIX)/,$(COMMON_JS_FILES)) \
 	$(addprefix $(DESTDIR)$(PREFIX)/scripts/,$(SCRIPTS)) \
 	$(DESTDIR)$(PREFIX)/bin/node \
+	$(DESTDIR)$(PREFIX)/lib/libgcc_s.so.1 \
+	$(DESTDIR)$(PREFIX)/lib/libstdc++.so.6 \
 	$(DESTDIR)$(PREFIX)/smf/hermes.xml \
 	$(DESTDIR)$(PREFIX)/smf/hermes-proxy.xml \
 	$(addprefix $(DESTDIR)$(PREFIX)/sapi_manifests/,$(SAPI_FILES)) \
@@ -109,10 +122,14 @@ install: $(INSTALL_DIRS) $(DESTDIR)$(PREFIX)/node_modules $(INSTALL_FILES)
 
 $(DESTDIR)$(PREFIX)/actor.tar.gz: $(ACTOR_JS_FILES:%=actor/%) \
     $(COMMON_JS_FILES) $(DESTDIR)$(PREFIX)/bin/node \
+    $(DESTDIR)$(PREFIX)/lib/libgcc_s.so.1 \
+    $(DESTDIR)$(PREFIX)/lib/libstdc++.so.6 \
     $(DESTDIR)$(PREFIX)/node_modules
 	/usr/bin/tar cfz $@ \
 	    -C $(DESTDIR)$(PREFIX) node_modules \
 	    -C $(DESTDIR)$(PREFIX) bin/node \
+	    -C $(DESTDIR)$(PREFIX) lib/libgcc_s.so.1 \
+	    -C $(DESTDIR)$(PREFIX) lib/libstdc++.so.6 \
 	    $(ACTOR_JS_FILES:%=-C $(TOP)/actor %) \
 	    $(COMMON_JS_FILES:%=-C $(TOP) %)
 
@@ -131,6 +148,9 @@ $(DESTDIR)$(PREFIX)/%.js: $(PWD)/%.js
 $(DESTDIR)$(PREFIX)/bin/node: $(PWD)/node/bin/node
 	cp $^ $@
 
+$(DESTDIR)$(PREFIX)/lib/lib%: $(PWD)/node/lib/lib%
+	cp $^ $@
+
 $(DESTDIR)$(PREFIX)/smf/%.xml: $(PWD)/smf/manifests/%.xml.in
 	sed -e 's,@@NODE@@,@@PREFIX@@/bin/node,g' \
 	    -e 's,@@PREFIX@@,$(PREFIX),g' \
@@ -149,16 +169,16 @@ $(DESTDIR)$(PREFIX)/node_modules: 0-npm-stamp
 	rm -rf $@
 	cp -r $(PWD)/node_modules $@
 
-downloads/$(NODE_TARBALL):
-	@echo "downloading node $(NODE_VERSION) ..."
-	mkdir -p `dirname $@`
-	curl -fsS -kL -o $@ '$(NODE_BASE_URL)/$(NODE_TARBALL)'
+#$(NODE_TARBALL):
+	#@echo "downloading sdcnode $(NODE_VARIANT) ..."
+	#mkdir -p $(@D)
+	#./tools/download_sdcnode $(NODE_IMAGE) $(NODE_VARIANT) $(@D)
 
-$(NODE_EXEC): downloads/$(NODE_TARBALL)
-	@echo "extracting node $(NODE_VERSION) ..."
-	mkdir -p node
-	gtar -xz -C node -f downloads/$(NODE_TARBALL)
-	[[ -f $(NODE_EXEC) ]] && touch $(NODE_EXEC)
+#$(NODE_EXEC): $(NODE_TARBALL)
+	#@echo "extracting node $(NODE_VERSION) ..."
+	#-rm -rf node
+	#gtar -xz -f $(NODE_TARBALL)
+	#[[ -f $(NODE_EXEC) ]] && touch $(NODE_EXEC)
 
 clean:
 	rm -rf $(PWD)/node_modules
@@ -168,3 +188,8 @@ clobber: clean
 	rm -rf $(PWD)/downloads
 	rm -rf $(PWD)/node
 
+include ./tools/mk/Makefile.deps
+ifeq ($(shell uname -s),SunOS)
+	include ./tools/mk/Makefile.node_prebuilt.targ
+endif
+include ./tools/mk/Makefile.node_deps.targ
diff --git a/actor/actor.js b/actor/actor.js
index 9c36f19..a62b6d1 100644
--- a/actor/actor.js
+++ b/actor/actor.js
@@ -5,18 +5,21 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
-var mod_os = require('os');
-var mod_fs = require('fs');
 var mod_child = require('child_process');
+var mod_fs = require('fs');
+var mod_http = require('http');
+var mod_https = require('https');
+var mod_os = require('os');
 var mod_path = require('path');
 
 var mod_assert = require('assert-plus');
-var mod_vasync = require('vasync');
-var mod_manta = require('manta');
 var mod_backoff = require('backoff');
+var mod_jsprim = require('jsprim');
+var mod_manta = require('manta');
+var mod_vasync = require('vasync');
 
 var lib_utils = require('./lib/utils');
 var lib_conn = require('./lib/conn');
@@ -65,7 +68,10 @@ var GS = {
 	gs_backoff: null,
 	gs_heartbeat_timeout: null,
 
+	gs_proxy: null,
+
 	gs_manta: {
+		agent: null,
 		client: null,
 		user: null
 	}
@@ -320,9 +326,33 @@ handle_message(msg)
 			http_proxy: msg.http_proxy,
 			https_proxy: msg.https_proxy
 		}, 'received manta configuration from server');
-		if (GS.gs_manta.client)
+
+		if (GS.gs_manta.client) {
 			GS.gs_manta.client.close();
+		}
+		if (GS.gs_manta.agent) {
+			GS.gs_manta.agent.destroy();
+		}
+
 		GS.gs_manta.user = msg.config.user;
+
+		/*
+		* We create a keepAlive Agent and give it to the Manta client
+		* for outbound requests.  If the URL is not obviously an
+		* insecure HTTP URL, we assume HTTPS.
+		 */
+		if (mod_jsprim.startsWith(msg.config.url, 'http:')) {
+			GS.gs_proxy = msg.http_proxy;
+			GS.gs_manta.agent = new mod_http.Agent({
+				keepAlive: true
+			});
+		} else {
+			GS.gs_proxy = msg.https_proxy;
+			GS.gs_manta.agent = new mod_https.Agent({
+				keepAlive: true
+			});
+		}
+
 		GS.gs_manta.client = mod_manta.createClient({
 			sign: mod_manta.privateKeySigner({
 				key: msg.private_key,
@@ -333,7 +363,14 @@ handle_message(msg)
 			url: msg.config.url,
 			connectTimeout: msg.config.connect_timeout,
 			retry: false,
-			proxy: msg.https_proxy || msg.http_proxy
+			agent: GS.gs_manta.agent,
+			/*
+			* In order to funnel Manta requests through the hermes
+			* proxy, we pass the appropriate proxy (determined above
+			* based on the URL) to the Manta client for outbound
+			* requests.
+			*/
+			proxy: GS.gs_proxy
 		});
 		break;
 
diff --git a/lib/httpserver.js b/lib/httpserver.js
index 5766eca..d63d4a4 100644
--- a/lib/httpserver.js
+++ b/lib/httpserver.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 var mod_net = require('net');
@@ -53,7 +53,8 @@ _init()
 	self.hs_server = mod_restify.createServer({
 		name: 'hermes',
 		log: self.hs_log,
-		handleUpgrades: true
+		handleUpgrades: true,
+		handleUncaughtExceptions: false
 	});
 
 	var attach = function (req, res, next) {
@@ -117,16 +118,6 @@ _init()
 	self.hs_server.get('/actor.tar.gz', get_actor_tarball);
 	self.hs_server.get('/attach', attach);
 
-	self.hs_server.on('uncaughtException', function (req, res, route, err) {
-		var __panic = {
-			__restify_panic_error: err
-		};
-		self.hs_log.error({
-			err: __panic.__restify_panic_error
-		}, 'httpserver restify panic');
-		process.abort();
-	});
-
 	self.hs_server.listen(self.hs_port, self.hs_ip, function () {
 		self.hs_log.info({
 			address: self.hs_server.address()
diff --git a/lib/servers.js b/lib/servers.js
index 7e1cc17..1d6890b 100644
--- a/lib/servers.js
+++ b/lib/servers.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2019, Joyent, Inc.
  */
 
 var mod_assert = require('assert-plus');
@@ -16,8 +16,12 @@ var mod_verror = require('verror');
 var lib_utils = require('./utils');
 
 
+// The minimum platform onto which we'll install/update the agent.
+var MIN_PLATFORM = '20151126T062538Z';
+
+
 function
-Server(mgr, server_uuid, hostname, dcname, version)
+Server(mgr, server_uuid, hostname, dcname)
 {
 	var self = this;
 
@@ -25,7 +29,6 @@ Server(mgr, server_uuid, hostname, dcname, version)
 	mod_assert.string(server_uuid, 'server_uuid');
 	mod_assert.string(hostname, 'hostname');
 	mod_assert.string(dcname, 'dcname');
-	mod_assert.string(version, 'version');
 
 	self.s_mgr = mgr;
 	self.s_log = mgr.sm_log.child({
@@ -36,7 +39,6 @@ Server(mgr, server_uuid, hostname, dcname, version)
 	self.s_uuid = server_uuid;
 	self.s_hostname = hostname;
 	self.s_datacenter = dcname;
-	self.s_version = version;
 
 	self.s_lastseen = Date.now();
 	self.s_generation = mgr.sm_generation;
@@ -344,14 +346,14 @@ lookup(server)
 };
 
 ServerManager.prototype._update = function
-_update(server_uuid, dcname, hostname, version)
+_update(server_uuid, dcname, hostname)
 {
 	var self = this;
 
 	var s = self.lookup(server_uuid);
 
 	if (!s) {
-		s = new Server(self, server_uuid, hostname, dcname, version);
+		s = new Server(self, server_uuid, hostname, dcname);
 		self.sm_servers.push(s);
 	} else {
 		s.s_lastseen = Date.now();
@@ -449,6 +451,26 @@ _cnapi_poll(callback)
 				continue;
 			}
 
+			if (!server.sysinfo['Live Image']) {
+				log.warn('Unable to determine platform ' +
+				    'version from CNAPI "sysinfo".');
+				continue;
+			}
+
+			/*
+			 * With other agents (e.g. cn-agent and vm-agent) we use
+			 * a preinstall hook to ensure we're on as supported
+			 * platform.  Since hermes has its own bespoke
+			 * installation mechanism, we instead perform that same
+			 * check here.
+			 */
+			if (server.sysinfo['Live Image'] < MIN_PLATFORM) {
+				log.warn('server running ancient platform (' +);
+				    server.sysinfo['Live Image'] + ' < ' +
+				    MIN_PLATFORM + ')');
+				continue;
+			}
+
 			if (!server.datacenter || !server.datacenter.trim()) {
 				log.warn('server has no "datacenter" in CNAPI');
 				continue;
@@ -462,8 +484,7 @@ _cnapi_poll(callback)
 			}
 
 			self._update(server.uuid, server.datacenter,
-			    server.hostname,
-			    server.sysinfo['SDC Version'] || '6.5');
+			    server.hostname);
 		}
 
 		self._expire();
diff --git a/package.json b/package.json
index 3e6f1fd..8e80b12 100644
--- a/package.json
+++ b/package.json
@@ -1,24 +1,24 @@
 {
   "name": "hermes",
-  "version": "0.2.0",
+  "version": "0.3.0",
   "description": "Centralised tool to upload SDC logs to Manta",
   "main": "hermes.js",
   "author": "Joshua M. Clulow <jmc@joyent.com>",
   "private": true,
   "dependencies": {
-    "sdc-clients": "~9.1",
-    "manta": "git://github.com/joyent/node-manta.git#8a05470b64d57aafab840320863214c8b82ba161",
-    "bunyan": "^0.22.1",
-    "restify": "^2.6.3",
-    "assert-plus": "~0.1.5",
+    "sdc-clients": "^10.2.0",
+    "manta": "^4.3.0",
+    "bunyan": "^1.8.10",
+    "restify": "^4.3.0",
+    "assert-plus": "^1.0.0",
     "once": "~1.2.0",
-    "watershed": "^0.3.0",
-    "vasync": "^1.4.3",
-    "verror": "^1.4.0",
+    "watershed": "^0.3.3",
+    "vasync": "^1.6.4",
+    "verror": "^1.9.0",
     "lstream": "^0.0.4",
     "backoff": "^2.3.0",
-    "jsprim": "^0.5.1",
-    "cueball": "^2.0.1"
+    "jsprim": "^1.4.0",
+    "cueball": "^2.9.0"
   },
   "devDependencies": {
     "jshint": "^2.5.6"
diff --git a/tools/mk/Makefile.ctf.defs b/tools/mk/Makefile.ctf.defs
new file mode 100644
index 0000000..bf16601
--- /dev/null
+++ b/tools/mk/Makefile.ctf.defs
@@ -0,0 +1,49 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2018, Joyent, Inc.
+#
+
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This Makefile uses the following definitions:
+#
+# 	CTFTOOLS	Directory in which to install ctftools once downloaded
+# 			extracted.
+#
+# 	CTFCONVERT	Path for the ctfconvert utility which converts debug
+# 			information from a binary file to CTF data and replaces
+# 			the debug section of that file with a CTF section called
+# 			SUNW_ctf.
+#
+# See the rule for helloctf in the Makefile located at the root of this
+# repository for an example of how to use ctfconvert to include CTF information
+# in a desired binary.
+#
+# To use this file, be sure to also include Makefile.ctf.targ after defining
+# targets.
+#
+ifndef TOP
+$(error You must include Makefile.defs before this makefile.)
+endif
+
+ifndef CACHE_DIR
+$(error You must include Makefile.defs before this makefile.)
+endif
+
+CTFTOOLS := $(TOP)/$(CACHE_DIR)/ctftools
+CTFCONVERT := $(CTFTOOLS)/bin/ctfconvert
+CTFDIFF := $(CTFTOOLS)/bin/ctfdiff
+CTFDUMP := $(CTFTOOLS)/bin/ctfdump
+CTFMERGE := $(CTFTOOLS)/bin/ctfmerge
+CTFSTRIP := $(CTFTOOLS)/bin/ctfstrip
+
+STAMP_CTF_TOOLS :=	$(MAKE_STAMPS_DIR)/ctftools.stamp
diff --git a/tools/mk/Makefile.ctf.targ b/tools/mk/Makefile.ctf.targ
new file mode 100644
index 0000000..bc5eb12
--- /dev/null
+++ b/tools/mk/Makefile.ctf.targ
@@ -0,0 +1,29 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2018, Joyent, Inc.
+#
+
+#
+# Makefile.ctf.targ: see Makefile.ctf.defs.
+#
+# We need to build some C software, and to make it debuggable we should
+# include CTF information.  Download the program used to download and deploy
+# the Manta CTF tools.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+$(STAMP_CTF_TOOLS):
+	$(MAKE_STAMP_REMOVE)
+	rm -rf $(CTFTOOLS)
+	mkdir -p $(CTFTOOLS)
+	tools/download_ctftools $(CACHE_DIR)
+	touch $@
+	$(MAKE_STAMP_CREATE)
diff --git a/tools/mk/Makefile.defs b/tools/mk/Makefile.defs
new file mode 100644
index 0000000..73dd612
--- /dev/null
+++ b/tools/mk/Makefile.defs
@@ -0,0 +1,105 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2018, Joyent, Inc.
+#
+
+#
+# Makefile.defs: common defines.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This makefile defines some useful defines. Include it at the top of
+# your Makefile.
+#
+# Definitions in this Makefile:
+#
+#	TOP 		The absolute path to the project directory. The top dir.
+#	BRANCH 		The current git branch.
+#	TIMESTAMP	The timestamp for the build. This can be set via
+#			the TIMESTAMP envvar (used by MG-based builds).
+#	STAMP		A build stamp to use in built package names.
+#
+#	MAKE_STAMPS_DIR	The directory in which make stamp files are to be
+#			created.  See comments below on expensive targets.
+#
+#	CACHE_DIR	A directory tree in which temporary files may be
+#			collected by download, tarball extraction, etc.  This
+#			directory is completely removed by "make distclean".
+#			Files in this directory are not intended to be shipped.
+#
+
+TOP := $(shell pwd)
+
+#
+# Mountain Gorilla-spec'd versioning.
+# See "Package Versioning" in MG's README.md:
+# <https://mo.joyent.com/mountain-gorilla/blob/master/README.md#L139-200>
+#
+# Need GNU awk for multi-char arg to "-F".
+_AWK := $(shell (which gawk >/dev/null && echo gawk) \
+	|| (which nawk >/dev/null && echo nawk) \
+	|| echo awk)
+BRANCH := $(shell git symbolic-ref HEAD | $(_AWK) -F/ '{print $$3}')
+ifeq ($(TIMESTAMP),)
+	TIMESTAMP := $(shell date -u "+%Y%m%dT%H%M%SZ")
+endif
+_GITDESCRIBE := g$(shell git describe --all --long --dirty | $(_AWK) -F'-g' '{print $$NF}')
+STAMP := $(BRANCH)-$(TIMESTAMP)-$(_GITDESCRIBE)
+
+# node-gyp will print build info useful for debugging with V=1
+export V=1
+
+CACHE_DIR ?=		cache
+DISTCLEAN_FILES +=	$(CACHE_DIR)
+
+#
+# EXPENSIVE TARGETS AND MAKE STAMP FILES
+#
+# Targets which are expensive to run and lack a single file that marks
+# completion are difficult to track with make; e.g., "npm install".  One
+# solution to this problem is to create "stamp" files with symbolic names which
+# are created as the final step in a complex make rule in order to mark
+# completion.
+#
+# In order to make these more uniform, and easier to target with "make clean",
+# we will attempt to store them under a single directory.  Note that these
+# files are never targets for shipping in build artefacts.
+#
+# Stamp-backed targets come in several parts.  First, a macro should be defined
+# which names a file in the MAKE_STAMPS_DIR directory.  Then, a target which
+# creates this stamp file must be provided.  The recipe for this target should
+# use MAKE_STAMP_REMOVE and MAKE_STAMP_CREATE to perform the appropriate stamp
+# management.
+#
+# For example:
+#
+# --- Makefile.*.defs:
+#
+#	$(STAMP_EXPENSIVE_RESULT) := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# --- Makefile.*.targ:
+#
+#	$(STAMP_EXPENSIVE_RESULT): input/file another/input/file
+#		$(MAKE_STAMP_REMOVE)
+#		rm -rf output_tree/  # <--- ensure a clean slate
+#		expensive_program -o output_tree/ $^
+#		$(MAKE_STAMP_CREATE)
+#
+# NOTE: Every stamp file is exposed as an implicit "stamp-$STAMP_NAME" target.
+# The example above could be built manually by invoking:
+#
+#	make stamp-expensive-result
+#
+MAKE_STAMPS_DIR ?=	make_stamps
+CLEAN_FILES +=		$(MAKE_STAMPS_DIR)
+
+MAKE_STAMP_REMOVE =	mkdir -p $(@D); rm -f $(@)
+MAKE_STAMP_CREATE =	mkdir -p $(@D); touch $(@)
diff --git a/tools/mk/Makefile.deps b/tools/mk/Makefile.deps
new file mode 100644
index 0000000..91f8346
--- /dev/null
+++ b/tools/mk/Makefile.deps
@@ -0,0 +1,87 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.deps: Makefile for including common tools as dependencies
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This file is separate from Makefile.targ so that teams can choose
+# independently whether to use the common targets in Makefile.targ and the
+# common tools here.
+#
+
+#
+# javascriptlint
+#
+JSL_EXEC	?= deps/javascriptlint/build/install/jsl
+JSL		?= $(JSL_EXEC)
+
+$(JSL_EXEC): | deps/javascriptlint/.git
+	cd deps/javascriptlint && make install
+
+distclean::
+	if [[ -f deps/javascriptlint/Makefile ]]; then \
+		cd deps/javascriptlint && make clean; \
+	fi
+
+#
+# jsstyle
+#
+JSSTYLE_EXEC	?= deps/jsstyle/jsstyle
+JSSTYLE		?= $(JSSTYLE_EXEC)
+
+$(JSSTYLE_EXEC): | deps/jsstyle/.git
+
+#
+# eslint
+#
+ESLINT_EXEC	?= node_modules/.bin/eslint
+ifdef NODE
+    ESLINT	:= $(NODE) $(ESLINT_EXEC)
+else
+    ESLINT	?= $(ESLINT_EXEC)
+endif
+
+# Install eslint.
+#
+# The install of specific modules is to allow running "make check"
+# without having to do a complete install of all npm dependencies.
+#
+# NPM_EXEC will be defined if either of "Makefile.{node,node_prebuilt}.defs"
+# is included.
+ifdef NPM
+$(ESLINT_EXEC): package.json | $(NPM_EXEC)
+	ESLINT_VER=$$($(NODE) -e 'console.log(require("./package.json").devDependencies["eslint"] || "")') && \
+	    ESLINT_JOY_VER=$$($(NODE) -e 'console.log(require("./package.json").devDependencies["eslint-plugin-joyent"] || "")') && \
+	    [[ -n $$ESLINT_VER && -n $$ESLINT_JOY_VER ]] && \
+	    $(NPM) install --no-save eslint@$$ESLINT_VER eslint-plugin-joyent@$$ESLINT_JOY_VER && \
+	    touch $(ESLINT_EXEC)
+else
+$(ESLINT_EXEC): package.json
+	ESLINT_VER=$$(node -e 'console.log(require("./package.json").devDependencies["eslint"] || "")') && \
+	    ESLINT_JOY_VER=$$(node -e 'console.log(require("./package.json").devDependencies["eslint-plugin-joyent"] || "")') && \
+	    [[ -n $$ESLINT_VER && -n $$ESLINT_JOY_VER ]] && \
+	    npm install --no-save eslint@$$ESLINT_VER eslint-plugin-joyent@$$ESLINT_JOY_VER && \
+	    touch $(ESLINT_EXEC)
+endif
+
+#
+# restdown
+#
+RESTDOWN_EXEC	?= deps/restdown/bin/restdown
+RESTDOWN	?= python $(RESTDOWN_EXEC)
+$(RESTDOWN_EXEC): | deps/restdown/.git
+
+EXTRA_DOC_DEPS	?=
diff --git a/tools/mk/Makefile.go_prebuilt.defs b/tools/mk/Makefile.go_prebuilt.defs
new file mode 100644
index 0000000..23c2ed8
--- /dev/null
+++ b/tools/mk/Makefile.go_prebuilt.defs
@@ -0,0 +1,132 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2018, Joyent, Inc.
+#
+
+#
+# Makefile.go_prebuilt.defs: Makefile for obtaining a prebuilt Go toolchain.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile aids in the download and operation of a Go toolchain when
+# building software written in the Go language.  It provides as much isolation
+# from the broader build host as possible, including the provision of a
+# project-local GOPATH and GOROOT.
+#
+# This Makefile is intended to be used along with "Makefile.go_prebuilt.targ".
+#
+# When using this Makefile, you MUST define these variables before the include
+# directive:
+#
+#	GO_PREBUILT_VERSION	The version of the Go toolchain to download
+#				and use.  For example, "1.9".
+#
+# You MAY also specify the following variables:
+#
+#	GO_ENV			A list of environment variable specifications
+#				in shell syntax which will be prepended to Go
+#				toolchain invocations.  Using the "+=" operator,
+#				it is possible to add to the list without
+#				overriding the base environment specified by
+#				this Makefile.
+#
+# This Makefile provides definitions for the following variables:
+#
+#	GO_INSTALL		The location of the Go toolchain, relative
+#				to $(TOP).
+#
+#	GO_GOPATH		The location of the project-local GOPATH
+#				directory, relative to $(TOP).
+#
+#	GO			To be used in place of a bare invocation of
+#				"go"; e.g., "go build" would become
+#				"$(GO) build".  This invocation uses env(1)
+#				and $(GO_ENV) to construct an isolated
+#				environment.
+#
+
+ifndef TOP
+$(error You must include Makefile.defs before this makefile.)
+endif
+
+ifndef CACHE_DIR
+$(error You must include Makefile.defs before this makefile.)
+endif
+
+ifndef GO_PREBUILT_VERSION
+$(error GO_PREBUILT_VERSION must be set before including this makefile.)
+endif
+
+GO_VERSION =			$(GO_PREBUILT_VERSION)
+
+#
+# This Makefile is presently used to build programs written in the Go language
+# to be shipped in zone images.  As such, we default to a target specification
+# which is appropriate for an illumos host.
+#
+GO_GOOS ?=			solaris
+GO_GOARCH ?=			amd64
+
+#
+# The "tools/download_go" script will obtain a Go toolchain tar archive, which
+# we will store in the $(CACHE_DIR).  This directory is be removed entirely by
+# "make distclean".
+#
+GO_TARBALL =			$(CACHE_DIR)/go-$(GO_PREBUILT_VERSION).tar.bz2
+
+#
+# The downloaded Go toolchain will be extracted into a directory under
+# $(CACHE_DIR) by the $(STAMP_GO_TOOLCHAIN) target.  This directory becomes
+# the value of $GOROOT for toolchain invocations.
+#
+GO_INSTALL =			$(CACHE_DIR)/go-$(GO_VERSION)
+
+#
+# Parts of the Go toolchain store intermediate build artefacts in the GOPATH
+# directory.  At the time of writing, at least some of these intermediate
+# artefacts cannot be reused by different versions of the toolchain.  There
+# does not appear to be any mechanism in place to _prevent_ an error of this
+# type, so we include the Go toolchain version in the project-local GOPATH
+# directory name.
+#
+GO_GOPATH =			$(CACHE_DIR)/gopath-$(GO_VERSION)
+
+#
+# The Go toolchain derives some amount of behaviour from the environment.  In
+# order to precisely control that behaviour, we build up our own environment
+# containing only the expected values and run the tool under "env -i", thus
+# precluding any other variables from leaking in:
+#
+GO_ENV +=			GOROOT="$(TOP)/$(GO_INSTALL)"
+GO_ENV +=			GOPATH="$(TOP)/$(GO_GOPATH)"
+GO_ENV +=			GOARCH="$(GO_GOARCH)"
+GO_ENV +=			GOOS="$(GO_GOOS)"
+GO_ENV +=			PATH="$(TOP)/$(GO_INSTALL)/bin:$$PATH"
+
+#
+# The $(GO) variable should be used in place of bare invocations of "go".
+# For example, instead of "go build", use "$(GO) build".
+#
+GO =				env -i $(GO_ENV) $(TOP)/$(GO_INSTALL)/bin/go
+
+#
+# If the version of Go is changed in the Makefile, or interactively, we need
+# to make sure the new version is downloaded and installed.  As such, the
+# stamp name needs to include the version.
+#
+STAMP_GO_TOOLCHAIN =		$(MAKE_STAMPS_DIR)/go-toolchain-$(GO_VERSION)
+
+#
+# A regular "make clean" should remove any cached build artefacts from GOPATH.
+#
+CLEAN_FILES +=			$(GO_GOPATH)
diff --git a/tools/mk/Makefile.go_prebuilt.targ b/tools/mk/Makefile.go_prebuilt.targ
new file mode 100644
index 0000000..d0f998c
--- /dev/null
+++ b/tools/mk/Makefile.go_prebuilt.targ
@@ -0,0 +1,55 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2018, Joyent, Inc.
+#
+
+#
+# Makefile.go_prebuilt.targ: Makefile for obtaining a prebuilt Go toolchain.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# For usage documentation, see the comments in "Makefile.go_prebuilt.defs".
+#
+
+ifndef GO_TARBALL
+$(error You must include Makefile.go_prebuilt.defs first.)
+endif
+
+#
+# Download a prebuilt copy of the Go toolchain.  There are not presently builds
+# available for illumos systems on the official Go site, so we have an
+# appropriate build stored on a Joyent server.
+#
+# Note that the GOOS and GOARCH values provided here are for the toolchain to
+# run on this machine: the build machine.  The Go toolchain is a cross
+# compiler, and the GO_GOOS and GO_GOARCH make variables represent the intended
+# _target_ for any executables built with the Go compiler.  Though it is
+# likely, at least for now, that these values are the same in our environment
+# for the build and target machines, they are nonetheless distinct concepts and
+# the use of GO_GOOS and GO_GOARCH here would not be correct.
+#
+$(GO_TARBALL):
+	rm -f $@
+	mkdir -p $(@D)
+	tools/download_go $(GO_PREBUILT_VERSION) solaris amd64 $(CACHE_DIR)
+
+#
+# Extract the Go toolchain.  This stamp includes the version number of the
+# Go toolchain, ensuring a new download and extraction if the version changes.
+#
+$(STAMP_GO_TOOLCHAIN): $(GO_TARBALL)
+	$(MAKE_STAMP_REMOVE)
+	rm -rf $(GO_INSTALL)
+	mkdir $(GO_INSTALL)
+	cd $(GO_INSTALL) && tar xfj $(TOP)/$(GO_TARBALL)
+	$(MAKE_STAMP_CREATE)
diff --git a/tools/mk/Makefile.manpages.defs b/tools/mk/Makefile.manpages.defs
new file mode 100644
index 0000000..6da7876
--- /dev/null
+++ b/tools/mk/Makefile.manpages.defs
@@ -0,0 +1,128 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2016, Joyent, Inc.
+#
+
+#
+# Makefile.manpages.defs: targets for building manual pages.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile is used along with Makefile.manpages.targ to build section
+# manpages for the current repository from Markdown sources using the md2man
+# tool.  You can build several different sections of manpages with this
+# Makefile, but you'll need to include the Makefile once for each section with a
+# different value of MAN_SECTION.  Required input variables include:
+#
+#     MAN_SECTION	defines which section's manpages will be built
+#     			(e.g., "1")
+#
+#     MAN_INROOT	defines the root of a directory tree containing man
+#     			pages source files in Markdown format.  The directory
+#     			tree should be organized as:
+#
+#     			    $(MAN_INROOT)/man$(MAN_SECTION)/*.md
+#
+#     MAN_OUTROOT	defines the root of a directory tree that will contain
+#     			the generated man pages.  The directory tree will be
+#     			organized as:
+#
+#     			    $(MAN_OUTROOT)/man$(MAN_SECTION)/*.$(MAN_SECTION)
+#
+#			This should mirror the typical man page directory
+#			structure, and should probably be alongside a
+#			corresponding "bin" directory to leverage the way
+#			man(1)'s looks up man pages for binaries.
+#
+# A common configuration would be to set MAN_INROOT = "docs/man" and
+# MAN_OUTROOT = "man".  In that case, you might have source files:
+#
+#     ./bin/mytool
+#     ./bin/my-other-tool
+#     ./docs/man/man1/mytool.md
+#     ./docs/man/man1/my-other-tool.md
+#
+# and that will generate files:
+#
+#     ./man/man1/mytool.1
+#     ./man/man1/my-other-tool.1
+#
+# Optional input variables include:
+#
+#     MD2MAN		tool to generate man pages from Markdown sources
+#     			The recommended tool is md2man-roff, available at
+#     			https://github.com/sunaku/md2man.
+#
+#     MKDIRP		should generally be "mkdir -p"
+#
+# This Makefile produces Make variables:
+#
+#     MAN_$(MAN_SECTION)_OUTPUTS	generated manual pages.  You can depend
+#     					on these in order to build them in
+#     					whatever top-level targets you want.
+#
+#     MAN_OUTPUTS			will be extended to include
+#     					MAN_$(MAN_SECTION)_OUTPUTS.
+#
+# There are two basic ways this tends to be used:
+#
+#     (1) Building manpages is part of the normal build.  Have the default
+#         target (usually "all") depends on either "manpages" or the built man
+#         pages directly (via MAN_OUTPAGES).  In this case, only the man pages
+#         _sources_ would be checked into source control.
+#
+#     (2) Building manpages is an ad-hoc operation outside the normal build
+#         process.  Developers that change the man page sources are expected to
+#         build the man pages and commit the generated pages into source
+#         control.
+#
+# Option (1) is preferred, since option (2) violates the basic tenets of
+# software engineering that processes should generally be automated and that
+# generated files should not be checked into source control.  The problem is
+# that in practice, the tools that we use to generate man pages are not widely
+# installed on most users' systems, even developers' systems, so it's less than
+# ideal to require them for the main build.  This is especially true for many of
+# our Node modules, where there's traditionally no difference between the
+# published npm package and the repository source itself.  As a result, we use
+# option (2) in most places.  However, this Makefile supports both modes.
+#
+
+MAN_SECTION			?= $(error MAN_SECTION is not defined)
+MAN_INROOT			?= $(error MAN_INROOT is not defined)
+MAN_OUTROOT			?= $(error MAN_OUTROOT is not defined)
+MD2MAN				?= md2man-roff
+MKDIRP				?= mkdir -p
+
+#
+# Define some convenience variables for referring to the input and output
+# directories for this section's man pages.  These variables must have
+# MAN_SECTION in the name, and must use eager binding (":="), since MAN_SECTION
+# may change after this file is included.
+#
+MAN_INDIR_$(MAN_SECTION)	:= $(MAN_INROOT)/man$(MAN_SECTION)
+MAN_OUTDIR_$(MAN_SECTION)	:= $(MAN_OUTROOT)/man$(MAN_SECTION)
+
+#
+# Define the lists of input and output files for this section's man pages.  The
+# list of inputs is just the list of Markdown files in the input directory.  We
+# construct the list of outputs by taking that same list and replacing the
+# section-specific input directory with the section-specific output directory
+# and changing the file extension.
+#
+MAN_$(MAN_SECTION)_INPUTS	:= $(wildcard $(MAN_INDIR_$(MAN_SECTION))/*.md)
+MAN_$(MAN_SECTION)_OUTPUTS_TMP  := \
+    $(MAN_$(MAN_SECTION)_INPUTS:$(MAN_INDIR_$(MAN_SECTION))/%=$(MAN_OUTDIR_$(MAN_SECTION))/%)
+MAN_$(MAN_SECTION)_OUTPUTS	:= \
+    $(MAN_$(MAN_SECTION)_OUTPUTS_TMP:%.md=%.$(MAN_SECTION))
+
+MAN_OUTPUTS			:= $(MAN_OUTPUTS) $(MAN_$(MAN_SECTION)_OUTPUTS)
diff --git a/tools/mk/Makefile.manpages.targ b/tools/mk/Makefile.manpages.targ
new file mode 100644
index 0000000..11f242b
--- /dev/null
+++ b/tools/mk/Makefile.manpages.targ
@@ -0,0 +1,28 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2016, Joyent, Inc.
+#
+
+#
+# Makefile.manpages.targ: targets for building manual pages.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# See Makefile.manpages.defs.
+#
+
+$(MAN_$(MAN_SECTION)_OUTPUTS): $(MAN_OUTDIR_$(MAN_SECTION))/%.$(MAN_SECTION): $(MAN_INDIR_$(MAN_SECTION))/%.md | $(MAN_OUTDIR_$(MAN_SECTION))
+	$(MD2MAN) $^ > $@
+
+$(MAN_OUTDIR_$(MAN_SECTION)):
+	$(MKDIRP) $@
diff --git a/tools/mk/Makefile.node.defs b/tools/mk/Makefile.node.defs
new file mode 100644
index 0000000..487824d
--- /dev/null
+++ b/tools/mk/Makefile.node.defs
@@ -0,0 +1,110 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.node.defs: Makefile for building and bundling your own Node.js.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile facilitates building and bundling your own copy of Node.js in
+# your repo.  All it does is define variables for node, node-waf, and npm for
+# you to use elsewhere in your Makefile and rules to build these tools when
+# needed.
+#
+# To use this facility, include "Makefile.node.defs", use the variables as
+# described below to define targets, and then include "Makefile.node.targ".
+#
+# There are two use cases addressed here:
+#
+# (1) Invoking node, node-waf, or npm as part of the build process, as in "npm
+#     install" and "node-waf configure build".  To facilitate this, this
+#     Makefile defines Make variables NODE, NODE_WAF, and NPM that you can use
+#     to invoke these commands during the build process.  You MUST NOT assume
+#     that these variables just evaluate to the filenames themselves, as they
+#     may have environment variable definitions and other things that prevent
+#     you from using them directly as a filename.  If you want that, see (2).
+#
+#     Wherever you use one of these variables, you MUST include a dependency on
+#     the corresponding *_EXEC variable as well, like so:
+#
+#	node_modules/restify: deps/restify $(NPM_EXEC)
+#		$(NPM) install deps/restify
+#
+#     or better, use an order-only dependency to avoid spurious rebuilds:
+#
+#	node_modules/restify: deps/restify | $(NPM_EXEC)
+#		$(NPM) install deps/restify
+#
+#     Otherwise, the underlying file will not get built.  We don't
+#     automatically build them as part of "all" because that approach is
+#     brittle.
+#
+# (2) Specifying paths for invoking node, node-waf, or npm at RUNTIME, as in
+#     specifying the path to node used for the start method of your service's
+#     SMF manifest.  For this, this Makefile defines variables NODE_EXEC,
+#     NODE_WAF_EXEC, and NPM_EXEC, which represent the relative paths of these
+#     files from the root of the workspace.  You MUST NOT use these variables
+#     to invoke these commands during the build process.  See (1) instead.
+#
+#     However, in order to work at runtime, you must build the tool as well.
+#     That is, if you use NODE_EXEC to specify the path to node, you must
+#     depend on NODE_EXEC somewhere. This usually happens anyway because you
+#     usually need them during the build process too, but if you don't then
+#     you need to explicitly add NODE_EXEC (or whichever) to your "all"
+#     target.
+#
+# When including this Makefile, you MAY also specify:
+#
+#	BUILD			top-level directory for built binaries
+#				(default: "build")
+#
+#	NODE_INSTALL		where node should install its built items
+#				(default: "$BUILD/node")
+#
+#	NODE_CONFIG_FLAGS	extra flags to pass to Node's "configure"
+#				(default: "--with-dtrace" on SmartOS; empty
+#				otherwise.)
+#
+
+TOP ?= $(error You must include Makefile.defs before this makefile)
+
+BUILD		?= build
+NODE_INSTALL 	?= $(BUILD)/node
+DISTCLEAN_FILES	+= $(NODE_INSTALL)
+
+NODE_CONFIG_FLAGS += --prefix=$(TOP)/$(NODE_INSTALL)
+
+ifeq ($(shell uname -s),SunOS)
+	NODE_CONFIG_FLAGS += 	--with-dtrace \
+				--openssl-libpath=/opt/local/lib \
+				--openssl-includes=/opt/local/include
+endif
+
+NODE_EXEC	= $(NODE_INSTALL)/bin/node
+NODE_WAF_EXEC	= $(NODE_INSTALL)/bin/node-waf
+NPM_EXEC	= $(NODE_INSTALL)/bin/npm
+
+#
+# These paths should be used during the build process to invoke Node and
+# Node-related build tools like NPM.  All paths are fully qualified so that
+# they work regardless of the current working directory at the point of
+# invocation.
+#
+# Note that where PATH is overridden, the value chosen must cause execution of
+# "node" to find the same binary to which the NODE macro refers.
+#
+NODE		:= $(TOP)/$(NODE_EXEC)
+NODE_WAF	:= $(TOP)/$(NODE_WAF_EXEC)
+NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) $(NODE) $(TOP)/$(NPM_EXEC)
diff --git a/tools/mk/Makefile.node.targ b/tools/mk/Makefile.node.targ
new file mode 100644
index 0000000..bf53f78
--- /dev/null
+++ b/tools/mk/Makefile.node.targ
@@ -0,0 +1,42 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.node.targ: See Makefile.node.defs.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+ifneq ($(shell uname -s),SunOS)
+NODE_PREBUILT_VERSION ?= $(error You must define NODE_PREBUILT_VERSION to use Makefile.node.targ on non-SunOS)
+endif
+
+ifeq ($(shell uname -s),SunOS)
+$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC): | deps/node/.git
+	(cd deps/node; ./configure $(NODE_CONFIG_FLAGS) && $(MAKE) && $(MAKE) install)
+else
+$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC):
+	(mkdir -p $(BUILD) \
+		&& cd $(BUILD) \
+		&& [[ -d src-node ]] && (cd src-node && git checkout master && git pull) || git clone https://github.com/joyent/node.git src-node \
+		&& cd src-node \
+		&& git checkout $(NODE_PREBUILT_VERSION) \
+		&& ./configure $(NODE_CONFIG_FLAGS) \
+		&& $(MAKE) && $(MAKE) install)
+endif
+
+DISTCLEAN_FILES += $(NODE_INSTALL) $(BUILD)/src-node
+
+distclean::
+	-([[ ! -d deps/node ]] || (cd deps/node && $(MAKE) distclean))
diff --git a/tools/mk/Makefile.node_modules.defs b/tools/mk/Makefile.node_modules.defs
new file mode 100644
index 0000000..ec8cc8e
--- /dev/null
+++ b/tools/mk/Makefile.node_modules.defs
@@ -0,0 +1,68 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.node_modules.defs: Makefile for using NPM modules.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile provides a target for building NPM modules from the dependency
+# information in the "package.json" file.  The "npm install" operation is
+# expensive and produces a complex (multi-file) result which is difficult for
+# make to use in dependency analysis.  As such, we use a "stamp" file to track
+# successful completion of module installation.
+#
+# This variable allows the consumer to influence the environment used to run
+# NPM commands.
+#
+#	NPM_ENV			This string should be set to a list of
+#				environment variables in the syntax used
+#				by bash; e.g.,
+#
+#					NPM_ENV =	TESTING=yes V=1
+#
+# Consumers should, for targets which depend on the installation of NPM
+# modules, depend on the stamp file using the $(STAMP_NODE_MODULES) variable,
+# e.g.:
+#
+#	.PHONY: all
+#	all: $(STAMP_NODE_MODULES)
+#
+# A phony target, "make stamp-node-modules", is also provided to allow the
+# engineer to manually perform NPM module installation without invoking other
+# targets.  Note that this target should _not_ be used as a dependency for
+# other targets in consuming Makefiles; using phony targets to represent
+# intermediate build stages can inhibit the ability of make to determine
+# when no additional actions are required.
+#
+
+TOP ?= $(error You must include Makefile.defs before this makefile)
+NPM ?= $(error You must include either Makefile.node.defs or \
+    Makefile.node_prebuilt.defs before this makefile)
+
+BUILD ?=		build
+
+#
+# Invoking "npm install" at the top-level will create a "node_modules"
+# directory into which NPM modules will be installed.
+#
+CLEAN_FILES +=		node_modules
+
+#
+# To avoid repeatedly reinstalling from NPM, we create a "stamp" file to track
+# successful runs of "npm install".  Note that MAKE_STAMPS_DIR is included
+# in CLEAN_FILES already.
+#
+STAMP_NODE_MODULES ?=	$(MAKE_STAMPS_DIR)/node-modules
diff --git a/tools/mk/Makefile.node_modules.targ b/tools/mk/Makefile.node_modules.targ
new file mode 100644
index 0000000..0156bce
--- /dev/null
+++ b/tools/mk/Makefile.node_modules.targ
@@ -0,0 +1,31 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.node_modules.targ: See comments in Makefile.node_modules.defs.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+STAMP_NODE_MODULES ?= $(error You must include Makefile.node_modules.defs \
+    before this file)
+
+#
+# If the "package.json" file changes, we need to rebuild the contents of
+# the "node_modules" directory.
+#
+$(STAMP_NODE_MODULES): package.json | $(NPM_EXEC)
+	$(MAKE_STAMP_REMOVE)
+	rm -rf node_modules
+	$(NPM_ENV) $(NPM) install
+	$(MAKE_STAMP_CREATE)
diff --git a/tools/mk/Makefile.node_prebuilt.defs b/tools/mk/Makefile.node_prebuilt.defs
new file mode 100644
index 0000000..2129742
--- /dev/null
+++ b/tools/mk/Makefile.node_prebuilt.defs
@@ -0,0 +1,159 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.node_prebuilt.defs: Makefile for including a prebuilt Node.js build.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile facilitates downloading and bundling a prebuilt node.js
+# build (using the 'sdcnode' distro builds). This is an alternative to
+# the "Makefile.node.*" makefiles for *building* a node from source.
+#
+# Usage:
+#
+# - Define `NODE_PREBUILT_VERSION` in your Makefile to choose a node version.
+#   E.g.: `NODE_PREBUILT_VERSION=v0.6.19`. See other optional variables
+#   below.
+# - `include tools/mk/Makefile.node_prebuilt.defs` after this in your Makefile.
+# - `include tools/mk/Makefile.node_prebuilt.targ` near the end of your
+#   Makefile.
+# - Have at least one of your Makefile targets depend on either `$(NODE_EXEC)`
+#   or `$(NPM_EXEC)`. E.g.:
+#
+#		node_modules/restify: deps/restify $(NPM_EXEC)
+#			$(NPM) install deps/restify
+#
+#   or better, use an order-only dependency to avoid spurious rebuilds:
+#
+#		node_modules/restify: deps/restify | $(NPM_EXEC)
+#			$(NPM) install deps/restify
+#
+# - Use `$(NPM)` or `$(NODE)` to use your node build.
+# - Include the "$(NODE_INSTALL)" tree in your release package.
+#
+#
+# When including this Makefile, you MUST also specify:
+#
+#	NODE_PREBUILT_VERSION 	The node version in the prebuilt 'sdcnode'
+#				package to use. Typically this is one of the
+#				node version tags, e.g. "v0.6.18" but it
+#				can be any commitish.
+#
+# When including this Makefile, you MAY also specify:
+#
+#	NODE_PREBUILT_DIR 	The dir in which to find sdcnode builds. This
+#				can either be a *local directory* or *a
+#				URL* dir (with trailing '/') which serves
+#				Apache/Nginx dir listing HTML.
+#				(default: sdcnode master build dir on stuff)
+#
+#	NODE_PREBUILT_TAG	The 'sdcnode' project supports special
+#				configuration builds of node, e.g. say a
+#				build configured `--without-ssl`. These
+#				special configurations are given a tag, e.g.
+#				'gz', that is used in the filename. Optionally
+#				specify a tag name here.
+#				(default: empty)
+#
+#	NODE_PREBUILT_BRANCH	Specify a particular branch of 'sdcnode' builds
+#				from which to pull. Generally one should stick
+#				with the default.
+#				(default: master)
+#
+#	NODE_PREBUILT_IMAGE		If you have a zone image that differs from that
+#				for an sdcnode build that you want to use (potential compat
+#				issues be damned), then set this to the UUID of the sdcnode
+#				build you want. See here for available build image uuids:
+#				<https://download.joyent.com/pub/build/sdcnode/master-latest/sdcnode/>
+#
+#	BUILD			top-level directory for built binaries
+#				(default: "build")
+#
+#	NODE_INSTALL		where node should install its built items
+#				(default: "$BUILD/node")
+#
+#
+# Dev Notes:
+#
+# This works by getting "NODE_PREBUILT_NAME" from the provided "NODE_PREBUILT_*"
+# vars and the image version (via 'mdata-get sdc:image_uuid'). The image uuid is
+# included to ensure an exact match with the build machine. This name (e.g.
+# "v0.6.18-zone-$uuid") is used to find a matching "sdcnode-$name-*.tgz" build
+# in "NODE_PREBUILT_DIR" (either a local directory or a URL). That tarball is
+# downloaded and extracted into "NODE_INSTALL".
+#
+# The "*_EXEC" vars are set to named symlinks, e.g.
+# "build/prebuilt-node-v0.6.18-$uuid", so that a change of selected node
+# build (say the developer changes NODE_PREBUILT_VERSION) will recreate the
+# node install.
+#
+# See <https://mo.joyent.com/docs/sdcnode/master/> for details on 'sdcnode-*'
+# package naming.
+#
+
+TOP ?= $(error You must include Makefile.defs before this makefile)
+NODE_PREBUILT_VERSION ?= $(error NODE_PREBUILT_VERSION is not set.)
+
+
+BUILD		?= build
+NODE_INSTALL	?= $(BUILD)/node
+DISTCLEAN_FILES	+= $(NODE_INSTALL) \
+	$(BUILD)/prebuilt-node-* $(BUILD)/prebuilt-npm-*
+
+NODE_PREBUILT_BRANCH ?= master
+NODE_PREBUILT_IMAGE ?= $(shell pfexec mdata-get sdc:image_uuid)
+ifeq ($(NODE_PREBUILT_TAG),)
+	NODE_PREBUILT_NAME := $(NODE_PREBUILT_VERSION)-$(NODE_PREBUILT_IMAGE)
+else
+	NODE_PREBUILT_NAME := $(NODE_PREBUILT_VERSION)-$(NODE_PREBUILT_TAG)-$(NODE_PREBUILT_IMAGE)
+endif
+NODE_PREBUILT_PATTERN := sdcnode-$(NODE_PREBUILT_NAME)-$(NODE_PREBUILT_BRANCH)-.*\.tgz
+NODE_PREBUILT_DIR ?= https://download.joyent.com/pub/build/sdcnode/$(NODE_PREBUILT_IMAGE)/$(NODE_PREBUILT_BRANCH)-latest/sdcnode/
+ifeq ($(shell echo $(NODE_PREBUILT_DIR) | cut -c 1-4),http)
+	NODE_PREBUILT_BASE := $(shell curl -ksS --fail --connect-timeout 30 $(NODE_PREBUILT_DIR) | grep 'href=' | cut -d'"' -f2 | grep "^$(NODE_PREBUILT_PATTERN)$$" | sort | tail -1)
+	ifneq ($(NODE_PREBUILT_BASE),)
+		NODE_PREBUILT_TARBALL := $(NODE_PREBUILT_DIR)$(NODE_PREBUILT_BASE)
+	endif
+else
+	NODE_PREBUILT_BASE := $(shell ls -1 $(NODE_PREBUILT_DIR)/ | grep "^$(NODE_PREBUILT_PATTERN)$$" 2>/dev/null | sort | tail -1)
+	ifneq ($(NODE_PREBUILT_BASE),)
+		NODE_PREBUILT_TARBALL := $(NODE_PREBUILT_DIR)/$(NODE_PREBUILT_BASE)
+	endif
+endif
+ifeq ($(NODE_PREBUILT_TARBALL),)
+	NODE_PREBUILT_TARBALL = $(error NODE_PREBUILT_TARBALL is empty: no '$(NODE_PREBUILT_DIR)/$(NODE_PREBUILT_PATTERN)' found)
+endif
+
+
+# Prebuild-specific paths for the "*_EXEC" vars to ensure that
+# a prebuild change (e.g. if master Makefile's NODE_PREBUILT_VERSION
+# choice changes) causes a install of the new node.
+NODE_EXEC	:= $(BUILD)/prebuilt-node-$(NODE_PREBUILT_NAME)
+NODE_WAF_EXEC	:= $(BUILD)/prebuilt-node-waf-$(NODE_PREBUILT_NAME)
+NPM_EXEC	:= $(BUILD)/prebuilt-npm-$(NODE_PREBUILT_NAME)
+
+#
+# These paths should be used during the build process to invoke Node and
+# Node-related build tools like NPM.  All paths are fully qualified so that
+# they work regardless of the current working directory at the point of
+# invocation.
+#
+# Note that where PATH is overridden, the value chosen must cause execution of
+# "node" to find the same binary to which the NODE macro refers.
+#
+NODE		:= $(TOP)/$(NODE_INSTALL)/bin/node
+NODE_WAF	:= $(TOP)/$(NODE_INSTALL)/bin/node-waf
+NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) $(NODE) $(TOP)/$(NODE_INSTALL)/bin/npm
diff --git a/tools/mk/Makefile.node_prebuilt.targ b/tools/mk/Makefile.node_prebuilt.targ
new file mode 100644
index 0000000..6877333
--- /dev/null
+++ b/tools/mk/Makefile.node_prebuilt.targ
@@ -0,0 +1,42 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.node_prebuilt.targ: Makefile for including a prebuilt Node.js
+# build.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+
+
+NODE_PREBUILT_TARBALL ?= $(error NODE_PREBUILT_TARBALL is not set: was Makefile.node_prebuilt.defs included?)
+
+
+# TODO: remove this limitation
+# Limitation: currently presuming that the NODE_INSTALL basename is
+# 'node' and that sdcnode tarballs have a 'node' top-level dir.
+$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC):
+	[[ $(shell basename $(NODE_INSTALL)) == "node" ]] \
+		|| (echo "Limitation: 'basename NODE_INSTALL' is not 'node'" && exit 1)
+	rm -rf $(NODE_INSTALL) \
+		$(BUILD)/prebuilt-node-* $(BUILD)/prebuilt-npm-*
+	mkdir -p $(shell dirname $(NODE_INSTALL))
+	if [[ $(shell echo $(NODE_PREBUILT_TARBALL) | cut -c 1-4) == "http" ]]; then \
+		echo "Downloading '$(NODE_PREBUILT_BASE)'."; \
+		curl -ksS --fail --connect-timeout 30 -o $(shell dirname $(NODE_INSTALL))/$(NODE_PREBUILT_BASE) $(NODE_PREBUILT_TARBALL); \
+		(cd $(shell dirname $(NODE_INSTALL)) && $(TAR) xf $(NODE_PREBUILT_BASE)); \
+	else \
+		(cd $(shell dirname $(NODE_INSTALL)) && $(TAR) xf $(NODE_PREBUILT_TARBALL)); \
+	fi
+	ln -s $(TOP)/$(NODE_INSTALL)/bin/node $(NODE_EXEC)
+	ln -s $(TOP)/$(NODE_INSTALL)/bin/npm $(NPM_EXEC)
diff --git a/tools/mk/Makefile.smf.defs b/tools/mk/Makefile.smf.defs
new file mode 100644
index 0000000..b988bbe
--- /dev/null
+++ b/tools/mk/Makefile.smf.defs
@@ -0,0 +1,40 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.smf.defs: common targets for SMF manifests
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This Makefile uses the following definitions:
+#
+#	SMF_MANIFESTS_IN	Source files for SMF manifests.  The following
+#				substitutions will be made on these files:
+#
+#		@@NODE@@	path to installed node
+#
+# It updates SMF_MANIFESTS with the set of files generated by SMF_MANIFESTS_IN.
+# It also updates the "check" target to check the XML syntax of all manifests,
+# generated or otherwise.
+#
+# To use this file, be sure to also include Makefile.smf.targ after defining
+# targets.
+#
+
+SED 		?= sed
+SMF_DTD		?= tools/service_bundle.dtd.1
+XMLLINT		?= xmllint --noout
+
+SMF_MANIFESTS	+= $(SMF_MANIFESTS_IN:%.in=%)
+CLEAN_FILES	+= $(SMF_MANIFESTS_IN:%.in=%)
diff --git a/tools/mk/Makefile.smf.targ b/tools/mk/Makefile.smf.targ
new file mode 100644
index 0000000..f78de96
--- /dev/null
+++ b/tools/mk/Makefile.smf.targ
@@ -0,0 +1,29 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.smf.targ: see Makefile.smf.defs.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+.PHONY: check-manifests
+check-manifests: $(SMF_MANIFESTS:%=%.smfchk)
+
+%.smfchk: %
+	$(XMLLINT) --path $(dir $(SMF_DTD)) --dtdvalid $(SMF_DTD) $^
+
+check:: check-manifests
+
+$(SMF_MANIFESTS): %: %.in
+	$(SED) -e 's#@@NODE@@#@@PREFIX@@/$(NODE_INSTALL)/bin/node#' $< > $@
diff --git a/tools/mk/Makefile.targ b/tools/mk/Makefile.targ
new file mode 100644
index 0000000..8ae89c2
--- /dev/null
+++ b/tools/mk/Makefile.targ
@@ -0,0 +1,348 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.targ: common targets.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This Makefile defines several useful targets and rules. You can use it by
+# including it from a Makefile that specifies some of the variables below.
+#
+# Targets defined in this Makefile:
+#
+#	check	Checks JavaScript files for lint and style
+#		Checks bash scripts for syntax
+#		Checks SMF manifests for validity against the SMF DTD
+#
+#	clean	Removes built files
+#
+#	docs	Builds restdown documentation in docs/
+#
+#	prepush	Depends on "check" and "test"
+#
+#	test	Does nothing (you should override this)
+#
+#	xref	Generates cscope (source cross-reference index)
+#
+# For details on what these targets are supposed to do, see the Joyent
+# Engineering Guide.
+#
+# To make use of these targets, you'll need to set some of these variables. Any
+# variables left unset will simply not be used.
+#
+#	BASH_FILES	Bash scripts to check for syntax
+#			(paths relative to top-level Makefile)
+#
+#	CLEAN_FILES	Files to remove as part of the "clean" target.  Note
+#			that files generated by targets in this Makefile are
+#			automatically included in CLEAN_FILES.  These include
+#			restdown-generated HTML and JSON files.
+#
+#	DOC_FILES	Restdown (documentation source) files. These are
+#			assumed to be contained in "docs/", and must NOT
+#			contain the "docs/" prefix.
+#
+#	JSL_CONF_NODE	Specify JavaScriptLint configuration files
+#	JSL_CONF_WEB	(paths relative to top-level Makefile)
+#
+#			Node.js and Web configuration files are separate
+#			because you'll usually want different global variable
+#			configurations.  If no file is specified, none is given
+#			to jsl, which causes it to use a default configuration,
+#			which probably isn't what you want.
+#
+#	JSL_FILES_NODE	JavaScript files to check with Node config file.
+#	JSL_FILES_WEB	JavaScript files to check with Web config file.
+#
+#	JSON_FILES	JSON files to be validated
+#
+#	JSSTYLE_FILES	JavaScript files to be style-checked
+#
+# You can also override these variables:
+#
+#	BASH		Path to bash (default: "bash")
+#
+#	BUILD		top-level directory for node binaries, generated docs,
+#			and any other build output (default: "build")
+#
+#	CSCOPE_DIRS	Directories to search for source files for the cscope
+#			index. (default: ".")
+#
+#	ESLINT		Path to eslint (default: "eslint")
+#
+#	ESLINT_FLAGS	Additional flags to pass through to eslint
+#
+#	JSL		Path to JavaScriptLint (default: "jsl")
+#
+#	JSL_FLAGS_NODE	Additional flags to pass through to JSL
+#	JSL_FLAGS_WEB
+#	JSL_FLAGS
+#
+#	JSON		Path to json tool (default: "json")
+#
+#	JSSTYLE		Path to jsstyle (default: "jsstyle")
+#
+#	JSSTYLE_FLAGS	Additional flags to pass through to jsstyle
+#
+#	RESTDOWN_EXT	By default '.md' is required for DOC_FILES (see above).
+#			If you want to use, say, '.restdown' instead, then set
+#			'RESTDOWN_EXT=.restdown' in your Makefile.
+#
+
+#
+# Defaults for the various tools we use.
+#
+BASH		?= bash
+BASHSTYLE   ?= $(NODE) tools/bashstyle
+CP		?= cp
+CSCOPE		?= cscope
+CSCOPE_DIRS	?= .
+ESLINT		?= eslint
+JSL		?= jsl
+JSON		?= json
+JSSTYLE		?= jsstyle
+MKDIR		?= mkdir -p
+MV		?= mv
+RESTDOWN_FLAGS	?=
+RESTDOWN_EXT	?= .md
+RMTREE		?= rm -rf
+JSL_FLAGS  	?= --nologo --nosummary
+
+ifeq ($(shell uname -s),SunOS)
+	TAR	?= gtar
+else
+	TAR	?= tar
+endif
+
+
+#
+# Defaults for other fixed values.
+#
+BUILD		?= build
+DISTCLEAN_FILES += $(BUILD)
+DOC_BUILD	= $(BUILD)/docs/public
+
+#
+# Configure JSL_FLAGS_{NODE,WEB} based on JSL_CONF_{NODE,WEB}.
+#
+ifneq ($(origin JSL_CONF_NODE), undefined)
+	JSL_FLAGS_NODE += --conf=$(JSL_CONF_NODE)
+endif
+
+ifneq ($(origin JSL_CONF_WEB), undefined)
+	JSL_FLAGS_WEB += --conf=$(JSL_CONF_WEB)
+endif
+
+#
+# Targets. For descriptions on what these are supposed to do, see the
+# Joyent Engineering Guide.
+#
+
+#
+# Instruct make to keep around temporary files. We have rules below that
+# automatically update git submodules as needed, but they employ a deps/*/.git
+# temporary file. Without this directive, make tries to remove these .git
+# directories after the build has completed.
+#
+.SECONDARY: $($(wildcard deps/*):%=%/.git)
+
+#
+# This rule enables other rules that use files from a git submodule to have
+# those files depend on deps/module/.git and have "make" automatically check
+# out the submodule as needed.
+#
+deps/%/.git:
+	git submodule update --init deps/$*
+
+#
+# These recipes make heavy use of dynamically-created phony targets. The parent
+# Makefile defines a list of input files like BASH_FILES. We then say that each
+# of these files depends on a fake target called filename.bashchk, and then we
+# define a pattern rule for those targets that runs bash in check-syntax-only
+# mode. This mechanism has the nice properties that if you specify zero files,
+# the rule becomes a noop (unlike a single rule to check all bash files, which
+# would invoke bash with zero files), and you can check individual files from
+# the command line with "make filename.bashchk".
+#
+.PHONY: check-bash
+check-bash: $(BASH_FILES:%=%.bashchk) $(BASH_FILES:%=%.bashstyle)
+
+%.bashchk: %
+	$(BASH) -n $^
+
+%.bashstyle: %
+	$(BASHSTYLE) $^
+
+.PHONY: check-json
+check-json: $(JSON_FILES:%=%.jsonchk)
+
+%.jsonchk: %
+	$(JSON) --validate -f $^
+
+#
+# The above approach can be slow when there are many files to check because it
+# requires that "make" invoke the check tool once for each file, rather than
+# passing in several files at once.  For the JavaScript check targets, we define
+# a variable for the target itself *only if* the list of input files is
+# non-empty.  This avoids invoking the tool if there are no files to check.
+#
+
+ESLINT_TARGET = $(if $(ESLINT_FILES), check-eslint)
+.PHONY: check-eslint
+check-eslint: $(ESLINT_EXEC)
+	$(ESLINT) $(ESLINT_FLAGS) $(ESLINT_FILES)
+
+JSL_NODE_TARGET = $(if $(JSL_FILES_NODE), check-jsl-node)
+.PHONY: check-jsl-node
+check-jsl-node: $(JSL_EXEC)
+	$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_NODE) $(JSL_FILES_NODE)
+
+JSL_WEB_TARGET = $(if $(JSL_FILES_WEB), check-jsl-web)
+.PHONY: check-jsl-web
+check-jsl-web: $(JSL_EXEC)
+	$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_WEB) $(JSL_FILES_WEB)
+
+.PHONY: check-jsl
+check-jsl: $(JSL_NODE_TARGET) $(JSL_WEB_TARGET)
+
+JSSTYLE_TARGET = $(if $(JSSTYLE_FILES), check-jsstyle)
+.PHONY: check-jsstyle
+check-jsstyle:  $(JSSTYLE_EXEC)
+	$(JSSTYLE) $(JSSTYLE_FLAGS) $(JSSTYLE_FILES)
+
+.PHONY: check
+check:: $(ESLINT_TARGET) check-jsl check-json $(JSSTYLE_TARGET) check-bash
+	@echo check ok
+
+.PHONY: clean
+clean::
+	-$(RMTREE) $(CLEAN_FILES)
+
+.PHONY: distclean
+distclean:: clean
+	-$(RMTREE) $(DISTCLEAN_FILES)
+
+CSCOPE_FILES = cscope.in.out cscope.out cscope.po.out
+CLEAN_FILES += $(CSCOPE_FILES)
+
+.PHONY: xref
+xref: cscope.files
+	$(CSCOPE) -bqR
+
+.PHONY: cscope.files
+cscope.files:
+	find $(CSCOPE_DIRS) -name '*.c' -o -name '*.h' -o -name '*.cc' \
+	    -o -name '*.js' -o -name '*.s' -o -name '*.cpp' > $@
+
+#
+# The "docs" target is complicated because we do several things here:
+#
+#    (1) Use restdown to build HTML and JSON files from each of DOC_FILES.
+#
+#    (2) Copy these files into $(DOC_BUILD) (build/docs/public), which
+#        functions as a complete copy of the documentation that could be
+#        mirrored or served over HTTP.
+#
+#    (3) Then copy any directories and media from docs/media into
+#        $(DOC_BUILD)/media. This allows projects to include their own media,
+#        including files that will override same-named files provided by
+#        restdown.
+#
+# Step (3) is the surprisingly complex part: in order to do this, we need to
+# identify the subdirectories in docs/media, recreate them in
+# $(DOC_BUILD)/media, then do the same with the files.
+#
+DOC_MEDIA_DIRS := $(shell find docs/media -type d 2>/dev/null | grep -v "^docs/media$$")
+DOC_MEDIA_DIRS := $(DOC_MEDIA_DIRS:docs/media/%=%)
+DOC_MEDIA_DIRS_BUILD := $(DOC_MEDIA_DIRS:%=$(DOC_BUILD)/media/%)
+
+DOC_MEDIA_FILES := $(shell find docs/media -type f 2>/dev/null)
+DOC_MEDIA_FILES := $(DOC_MEDIA_FILES:docs/media/%=%)
+DOC_MEDIA_FILES_BUILD := $(DOC_MEDIA_FILES:%=$(DOC_BUILD)/media/%)
+
+#
+# Like the other targets, "docs" just depends on the final files we want to
+# create in $(DOC_BUILD), leveraging other targets and recipes to define how
+# to get there.
+#
+.PHONY: docs
+docs::							\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.html)		\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.json)		\
+	$(DOC_MEDIA_FILES_BUILD)
+
+#
+# We keep the intermediate files so that the next build can see whether the
+# files in DOC_BUILD are up to date.
+#
+.PRECIOUS:					\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.html)		\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%json)
+
+#
+# We do clean those intermediate files, as well as all of DOC_BUILD.
+#
+CLEAN_FILES +=					\
+	$(DOC_BUILD)				\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.html)		\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.json)
+
+#
+# Before installing the files, we must make sure the directories exist. The |
+# syntax tells make that the dependency need only exist, not be up to date.
+# Otherwise, it might try to rebuild spuriously because the directory itself
+# appears out of date.
+#
+$(DOC_MEDIA_FILES_BUILD): | $(DOC_MEDIA_DIRS_BUILD)
+
+$(DOC_BUILD)/%: docs/% | $(DOC_BUILD)
+	$(MKDIR) $(shell dirname $@)
+	$(CP) $< $@
+
+docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC) \
+    $(EXTRA_DOC_DEPS)
+	$(RESTDOWN) $(RESTDOWN_FLAGS) -m $(DOC_BUILD) $<
+
+$(DOC_BUILD):
+	$(MKDIR) $@
+
+$(DOC_MEDIA_DIRS_BUILD):
+	$(MKDIR) $@
+
+#
+# The default "test" target does nothing. This should usually be overridden by
+# the parent Makefile. It's included here so we can define "prepush" without
+# requiring the repo to define "test".
+#
+.PHONY: test
+test:
+
+.PHONY: prepush
+prepush: check test
+
+#
+# This rule automatically exposes every "stamp" file as a target that can be
+# invoked manually as "stamp-$STAMP_NAME".  For example, if a stamp has been
+# defined thus:
+#
+#	STAMP_EXPENSIVE_RESULT := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# ... this can be invoked manually as "make stamp-expensive-result".  Note that
+# these phony targets are essentially just for interactive usage.  Targets
+# should be specified to depend on the macro containing the stamp file name.
+#
+# See also the comments in "Makefile.defs".
+#
+stamp-%: $(MAKE_STAMPS_DIR)/%
+	@:
-- 
2.21.0

