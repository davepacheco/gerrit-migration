From c1a28d6de9c27ed4fa1cdd15a654f3ca1fcb1e85 Mon Sep 17 00:00:00 2001
From: Patrick Mooney <pmooney@pfmooney.com>
Date: Thu, 15 Dec 2016 20:15:28 +0000
Subject: [PATCH] OS-5848 procfs lacks adequate access checks for CREAT actions
 Reviewed by: Jerry Jelinek <jerry.jelinek@joyent.com> Reviewed by: Alex
 Wilson <alex.wilson@joyent.com> Approved by: Alex Wilson
 <alex.wilson@joyent.com>

---
 usr/src/uts/common/fs/proc/prvnops.c | 46 ++++++++++++++++++----------
 1 file changed, 30 insertions(+), 16 deletions(-)

diff --git a/usr/src/uts/common/fs/proc/prvnops.c b/usr/src/uts/common/fs/proc/prvnops.c
index cc494535a4..9ac5639d94 100644
--- a/usr/src/uts/common/fs/proc/prvnops.c
+++ b/usr/src/uts/common/fs/proc/prvnops.c
@@ -21,7 +21,7 @@
 
 /*
  * Copyright (c) 1989, 2010, Oracle and/or its affiliates. All rights reserved.
- * Copyright 2015, Joyent, Inc.
+ * Copyright 2016 Joyent, Inc.
  */
 
 /*	Copyright (c) 1984,	 1986, 1987, 1988, 1989 AT&T	*/
@@ -3582,21 +3582,34 @@ prcreate(vnode_t *dp, char *comp, vattr_t *vap, vcexcl_t excl,
 
 	if ((error = prlookup(dp, comp, vpp, NULL, 0, NULL, cr,
 	    ct, NULL, NULL)) != 0) {
-		if (error == ENOENT)	/* can't O_CREAT nonexistent files */
-			error = EACCES;		/* unwriteable directories */
-	} else {
-		if (excl == EXCL)			/* O_EXCL */
-			error = EEXIST;
-		else if (vap->va_mask & AT_SIZE) {	/* O_TRUNC */
+		if (error == ENOENT) {
+			/* One can't O_CREAT nonexistent files in /proc. */
+			error = EACCES;
+		}
+		return (error);
+	}
+
+	if (excl == EXCL) {
+		/* Disallow the O_EXCL case */
+		error = EEXIST;
+	} else if ((error = praccess(*vpp, mode, 0, cr, ct)) == 0) {
+		/* Before proceeding, handle O_TRUNC if necessary. */
+		if (vap->va_mask & AT_SIZE) {
 			vnode_t *vp = *vpp;
-			uint_t mask;
 
-			if (vp->v_type == VDIR)
+			if (vp->v_type == VDIR) {
+				/* Only allow O_TRUNC on files */
 				error = EISDIR;
-			else if (vp->v_type != VPROC ||
-			    VTOP(vp)->pr_type != PR_FD)
+			} else if (vp->v_type != VPROC ||
+			    VTOP(vp)->pr_type != PR_FD) {
+				/*
+				 * Disallow for files outside of the
+				 * /proc/<pid>/fd/<n> entries
+				 */
 				error = EACCES;
-			else {		/* /proc/<pid>/fd/<n> */
+			} else {
+				uint_t mask;
+
 				vp = VTOP(vp)->pr_realvp;
 				mask = vap->va_mask;
 				vap->va_mask = AT_SIZE;
@@ -3604,10 +3617,11 @@ prcreate(vnode_t *dp, char *comp, vattr_t *vap, vcexcl_t excl,
 				vap->va_mask = mask;
 			}
 		}
-		if (error) {
-			VN_RELE(*vpp);
-			*vpp = NULL;
-		}
+	}
+
+	if (error) {
+		VN_RELE(*vpp);
+		*vpp = NULL;
 	}
 	return (error);
 }
-- 
2.21.0

