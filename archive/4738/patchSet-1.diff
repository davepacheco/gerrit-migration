From 4fa1acadace82eb78370e417651c29900755bdd3 Mon Sep 17 00:00:00 2001
From: Robert Mustacchi <rm@joyent.com>
Date: Fri, 24 Aug 2018 01:08:50 +0000
Subject: [PATCH] OS-7172 FPU related cpuid checks shouldn't be Intel only
 OS-7171 AMD EPYC doesn't need *save_ctxt FP exceptions

---
 usr/src/uts/i86pc/os/cpuid.c | 17 +++++++----------
 1 file changed, 7 insertions(+), 10 deletions(-)

diff --git a/usr/src/uts/i86pc/os/cpuid.c b/usr/src/uts/i86pc/os/cpuid.c
index 3f9132ba4e..027f1d3ab4 100644
--- a/usr/src/uts/i86pc/os/cpuid.c
+++ b/usr/src/uts/i86pc/os/cpuid.c
@@ -1437,10 +1437,10 @@ cpuid_pass1(cpu_t *cpu, uchar_t *featureset)
 	platform_cpuid_mangle(cpi->cpi_vendor, 1, cp);
 
 	/*
-	 * In addition to ecx and edx, Intel is storing a bunch of instruction
-	 * set extensions in leaf 7's ebx, ecx, and edx.
+	 * In addition to ecx and edx, Intel and AMD are storing a bunch of
+	 * instruction set extensions in leaf 7's ebx, ecx, and edx.
 	 */
-	if (cpi->cpi_vendor == X86_VENDOR_Intel && cpi->cpi_maxeax >= 7) {
+	if (cpi->cpi_maxeax >= 7) {
 		struct cpuid_regs *ecp;
 		ecp = &cpi->cpi_std[7];
 		ecp->cp_eax = 7;
@@ -1743,8 +1743,7 @@ cpuid_pass1(cpu_t *cpu, uchar_t *featureset)
 		cpi->cpi_ncpu_per_chip = 1;
 	}
 
-	if (cpi->cpi_vendor == X86_VENDOR_Intel && cpi->cpi_maxeax >= 0xD &&
-	    !xsave_force_disable) {
+	if (cpi->cpi_maxeax >= 0xD && !xsave_force_disable) {
 		struct cpuid_regs r, *ecp;
 
 		ecp = &r;
@@ -3773,15 +3772,13 @@ cpuid_get_xsave_size()
  * floating point error pointer exception handling. In the past, this has been
  * true for all AMD K7 & K8 CPUs, although newer AMD CPUs have been changed to
  * behave the same as Intel. This is checked via the CPUID_AMD_EBX_ERR_PTR_ZERO
- * feature bit and is reflected in the cpi_fp_amd_save member. Once this has
- * been confirmed on hardware which supports that feature, this test should be
- * narrowed. In the meantime, we always follow the existing behavior on any AMD
- * CPU.
+ * feature bit and is reflected in the cpi_fp_amd_save member.
  */
 boolean_t
 cpuid_need_fp_excp_handling()
 {
-	return (cpuid_info0.cpi_vendor == X86_VENDOR_AMD);
+	return (cpuid_info0.cpi_vendor == X86_VENDOR_AMD &&
+	    cpuid_info0.cpi_fp_amd_save != 0);
 }
 
 /*
-- 
2.21.0

