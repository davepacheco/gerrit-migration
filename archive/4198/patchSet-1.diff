commit ace4a0fe0ceb8c256a04370fb39a3f051ac56f97 (refs/changes/98/4198/1)
Author: Mike Gerdts <mike.gerdts@joyent.com>
Date:   2018-06-13T01:56:08+00:00 (1 year, 4 months ago)
    
    OS-6717 bhyve brand boot should not succeed until bhyve allocates resources

diff --git a/overlay/generic/usr/lib/brand/jcommon/statechange b/overlay/generic/usr/lib/brand/jcommon/statechange
index c332716f..e2a0cfbd 100644
--- a/overlay/generic/usr/lib/brand/jcommon/statechange
+++ b/overlay/generic/usr/lib/brand/jcommon/statechange
@@ -47,6 +47,9 @@ export PATH
 # forcemount			7
 # unmount			8
 
+set -A cmdname ready boot forecboot reboot halt uninstalling mount forcemount \
+    unmount
+
 subcommand=$1
 ZONENAME=$2
 ZONEPATH=$3
@@ -883,30 +886,30 @@ function fix_forced_attrs {
 
 case $subcommand in
 pre)
-	case $cmd in
-	0)	# pre-ready
+	case ${cmdname[$cmd]} in
+	ready)
 		fix_forced_attrs
 		setup_fs
 		;;
-	4)	# pre-halt
+	halt)
 		[[ -n "$jst_snowsnap" ]] && cleanup_snapshots
 		cleanup_net
 		;;
 	esac
 	;;
 post)
-	case $cmd in
-	0)	# post-ready
+	case ${cmdname[$cmd]} in
+	ready)
 		[[ -n "$jst_showsnap" ]] && setup_snapshots
 		setup_net
 		setup_fw
 		;;
-	1)	# post-boot
+	boot)
 		# We can't set a rctl until we have a process in the zone to
 		# grab
 		setup_cpu_baseline
 		;;
-	8)	# post-unmount
+	unmount)
 		# Zone halt is hung unmounting, try to recover
 		if [[ $state == 6 ]]; then
 			cleanup_mount "$6"
@@ -916,4 +919,14 @@ post)
 	;;
 esac
 
+# Brands may define their own <brand>_<pre|post>_<ready|boot|...> functions.
+# If such a function exists for this state change, execute it.
+# The return value of the brand hook is not propagated as the exit value because
+# vmadm create does not handle non-zero exits from vmadm gracefully during
+# provisioning.  This should be fixed.
+brandhook=${ps_brand}_${subcommand}_${cmdname[$cmd]}
+if type -f "$brandhook" >/dev/null 2>&1; then
+	$brandhook
+fi
+
 exit 0
diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index 5ee8e9a1..cd88b59c 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -10751,6 +10751,10 @@ function startZone(vmobj, opts, callback)
                     cancel = VM.waitForZoneState(vmobj, 'running', _opts,
                         function (err, result) {
 
+                        // Prevent failed assertions in vasync.parallel() caused
+                        // by calling this function multiple times.
+                        cancel = undefined;
+
                         if (err) {
                             if (err.code === 'ETIMEOUT') {
                                 log.info({err: err},
@@ -10761,7 +10765,6 @@ function startZone(vmobj, opts, callback)
                                     'unknown error waiting for zone to '
                                     + 'go to "running"');
                             }
-                            cb2(err);
                             return;
                         }
 
@@ -10778,7 +10781,7 @@ function startZone(vmobj, opts, callback)
                                 stderr: boot_fds.stderr},
                                 'zoneadm failed to boot VM');
                             if (cancel) {
-                                cancel();
+                                cancel(err);
                             }
                             cb2(err);
                             return;
