From a738bc35baebda5bde4a5383a28c801b671353d3 Mon Sep 17 00:00:00 2001
From: Dave Eddy <dave@daveeddy.com>
Date: Tue, 13 Nov 2018 16:12:32 -0500
Subject: [PATCH] OS-7366 vminfod failure messages should be more descriptive

---
 src/vm/node_modules/vminfod/client.js |  23 ++++--
 src/vm/tests/test-vminfod.js          | 108 +++++++++++++++++++++++++-
 2 files changed, 122 insertions(+), 9 deletions(-)

diff --git a/src/vm/node_modules/vminfod/client.js b/src/vm/node_modules/vminfod/client.js
index 605cca78..928b4a79 100644
--- a/src/vm/node_modules/vminfod/client.js
+++ b/src/vm/node_modules/vminfod/client.js
@@ -162,6 +162,7 @@ var stream = require('stream');
 var os = require('os');
 var util = require('util');
 var qs = require('querystring');
+var f = util.format;
 
 var assert = require('/usr/node/node_modules/assert-plus');
 var bunyan = require('/usr/node/node_modules/bunyan');
@@ -622,11 +623,13 @@ VminfodEventStream.prototype.watchForEvent =
 
     if (opts.timeout) {
         timeout = setTimeout(function vminfodEventStreamWatchForEventTimeout() {
-            isDone = true;
-            self.stop();
+            var msg = f('vminfod watchForEvent "%s" timeout exceeded',
+                self.vs_name);
+
             self.vs_logger.error({obj: obj, events: events},
-                'vminfod watchForEvent timeout exceeded - unmatched events');
-            var err = new Error('vminfod watchForEvent timeout exceeded');
+                '%s - unmatched events', msg);
+
+            var err = new Error(msg);
             err.code = 'ETIMEOUT';
             done(err);
         }, opts.timeout);
@@ -780,11 +783,15 @@ VminfodEventStream.prototype.watchForChanges =
         timeout = setTimeout(
             function vminfodEventStreamWatchForChangesTimeout() {
 
+            var msg = f('vminfod watchForChanges "%s" timeout exceeded',
+                self.vs_name);
+
             self.vs_logger.error({changes: changes, events: events},
-                'vminfod watchForChanges timeout exceeded - unmatched events');
-            var e = new Error('vminfod watchForChanges timeout exceeded');
-            e.code = 'ETIMEOUT';
-            done(e);
+                '%s - unmatched events', msg);
+
+            var err = new Error(msg);
+            err.code = 'ETIMEOUT';
+            done(err);
         }, opts.timeout);
     }
 
diff --git a/src/vm/tests/test-vminfod.js b/src/vm/tests/test-vminfod.js
index 81d7dbef..7ff22165 100644
--- a/src/vm/tests/test-vminfod.js
+++ b/src/vm/tests/test-vminfod.js
@@ -25,6 +25,7 @@
  */
 
 var assert = require('/usr/node/node_modules/assert-plus');
+var bunyan = require('/usr/vm/node_modules/bunyan');
 var common = require('./common');
 var f = require('util').format;
 var libuuid = require('/usr/node/node_modules/uuid');
@@ -33,6 +34,13 @@ var vasync = require('/usr/vm/node_modules/vasync');
 var vminfod = require('/usr/vm/node_modules/vminfod/client');
 var vmtest = require('../common/vmtest.js');
 
+var log = bunyan.createLogger({
+    level: 'fatal',
+    name: 'vminfod-test-dummy',
+    stream: process.stderr,
+    serializers: bunyan.stdSerializers
+});
+
 // this puts test stuff in global, so we need to tell jsl about that:
 /* jsl:import ../node_modules/nodeunit-plus/index.js */
 require('nodeunit-plus');
@@ -59,6 +67,103 @@ test('create VminfodClient object and test /status', function (t) {
     });
 });
 
+/*
+ * Ensure that errors created as a result of a vminfod timeout contain specific
+ * bits of information.
+ */
+test('vminfod event stream timeout errors', function (t) {
+    var vs;
+    var name = f('test-vminfod.js custom-vminfod-identifier-%d', process.pid);
+
+    vasync.pipeline({funcs: [
+        // create an event stream
+        function (_, cb) {
+            vs = new vminfod.VminfodEventStream({
+                name: name,
+                log: log
+            });
+
+            vs.on('ready', function () {
+                cb();
+            });
+        },
+
+        // watchForEvent timeout
+        function (_, cb) {
+            // watch for an event that will never happen
+            var obj = {
+                invalid_root_key: 'foo'
+            };
+
+            var opts = {
+                timeout: 1 // 1 ms
+            };
+
+            vs.watchForEvent(obj, opts, function (err, ev) {
+                t.ok(err, 'error set');
+
+                if (!err) {
+                    cb();
+                    return;
+                }
+
+                assert.string(err.message, 'err.message');
+                var msg = err.message.trim();
+
+                t.ok(msg, 'error message: ' + msg);
+                t.ok(msg.match(/watchForEvent/), 'watchForEvent message');
+                t.ok(msg.match(/timeout exceeded/), 'timeout exceeded message');
+                t.ok(msg.indexOf(name) >= 0, 'name in error message');
+
+                cb();
+            });
+        },
+
+        // watchForChanges timeout
+        function (_, cb) {
+            // watch for changes that will never happen
+            var obj = {
+                uuid: '00000000-0000-0000-0000-000000000000'
+            };
+
+            var changes = [
+                {
+                    path: ['invalid_root_key'],
+                    newValue: 'foo'
+                }
+            ];
+
+            var opts = {
+                timeout: 1 // 1 ms
+            };
+
+            vs.watchForChanges(obj, changes, opts, function (err) {
+                t.ok(err, 'error set');
+
+                if (!err) {
+                    cb();
+                    return;
+                }
+
+                assert.string(err.message, 'err.message');
+                var msg = err.message.trim();
+
+                t.ok(msg, 'error message: ' + msg);
+                t.ok(msg.match(/watchForChanges/), 'watchForEvent message');
+                t.ok(msg.match(/timeout exceeded/), 'timeout exceeded message');
+                t.ok(msg.indexOf(name) >= 0, 'name in error message');
+
+                cb();
+            });
+        }
+    ]}, function (err) {
+        common.ifError(t, err, 'cleanup');
+
+        vs.stop();
+        t.end();
+    });
+});
+
 /*
  * OS-7365: vminfod crashes when restarting watches for nonexistent zone
  *
@@ -129,7 +234,8 @@ test('test vminfod zfs rollback', function (t) {
         // Create a vminfod stream
         function (_, cb) {
             vs = new vminfod.VminfodEventStream({
-                name: 'test-vminfod.js'
+                name: 'test-vminfod.js',
+                log: log
             });
             vs.on('ready', function () {
                 cb();
-- 
2.21.0

