From 4b2d2ec333e92fd243e86aafdf1acb8c09637236 Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Wed, 1 May 2019 19:01:27 +0200
Subject: [PATCH] TRITON-1631 CloudAPI CreateMachineDisk should be able to
 accept a size of "remaining"

---
 lib/endpoints/disks.js   |   55 +-
 test/machines.94.test.js | 1786 +++++++++++++++++++-------------------
 2 files changed, 937 insertions(+), 904 deletions(-)

diff --git a/lib/endpoints/disks.js b/lib/endpoints/disks.js
index f24c535..232eb43 100644
--- a/lib/endpoints/disks.js
+++ b/lib/endpoints/disks.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2019, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 /*
@@ -13,12 +13,13 @@
  * bhyve VMs.
  */
 
-
+var util = require('util'),
+    format = util.format;
 
 var assert  = require('assert-plus');
 var restify = require('restify');
 var string2uuid = require('uuid-by-string');
-var vasync  = require('vasync');
+// var vasync  = require('vasync');
 
 
 
@@ -31,7 +32,7 @@ var MissingParameterError = restify.MissingParameterError;
 var ResourceNotFoundError = restify.ResourceNotFoundError;
 
 var UUID_RE = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
-var PCI_SLOT_RE = /^[0-9]{1,3}\:[0-9]{1,2}\:[0-7]$/;
+var PCI_SLOT_RE = /^[0-9]{1,3}:[0-9]{1,2}:[0-7]$/;
 
 
 
@@ -55,6 +56,12 @@ function createDisk(req, res, next) {
     var size      = req.params.size;
     var pciSlot   = req.params.pci_slot;
 
+    if (req.vm.brand !== 'bhyve') {
+        next(InvalidArgumentError('Disk Creation is supported only for ' +
+            'BHYVE VMs'));
+        return;
+    }
+
     if (req.vm.state !== 'stopped') {
         next(new InvalidArgumentError('VM must be stopped'));
         return;
@@ -65,7 +72,7 @@ function createDisk(req, res, next) {
         return;
     }
 
-    if (isNaN(+size)) {
+    if (size !== 'remaining' && isNaN(+size)) {
         next(new InvalidArgumentError('size must be a number'));
         return;
     }
@@ -79,6 +86,19 @@ function createDisk(req, res, next) {
         var diskId = getDiskUuid(vmUuid, pciSlot);
     }
 
+    if (size === 'remaining' && !req.vm.flexible_disk_size) {
+        next(new InvalidArgumentError('remaining is only supported for ' +
+            'VMs created with flexible_disk_size packages'));
+        return;
+    }
+
+    if (size === 'remaining') {
+        var disksSum = req.vm.disks.reduce(function sumDisk(sum, disk) {
+            return (sum + disk.size);
+        }, 0);
+        size = req.vm.flexible_disk_size - disksSum;
+    }
+
     req.sdc.vmapi.createDisk({
         uuid: vmUuid,
         owner_uuid: ownerUuid,
@@ -97,7 +117,10 @@ function createDisk(req, res, next) {
         }
 
         var login = req.account.login;
-        log.debug('POST /%s/machines/%s/disks -> ok', login, vmUuid);
+        log.debug({
+            request: format('POST /%s/machines/%s/disks -> ok', login, vmUuid),
+            job: job
+        });
 
         if (!pciSlot) {
             res.send(202);
@@ -105,7 +128,7 @@ function createDisk(req, res, next) {
             return;
         }
 
-        var location = '/' + login + '/machines/' + vmUuid + '/' + diskId;
+        var location = '/' + login + '/machines/' + vmUuid + '/disks/' + diskId;
         res.header('Location', location);
 
         var disk = {
@@ -174,14 +197,18 @@ function resizeDisk(req, res, next) {
     }, {
         log: log,
         headers: headers
-    }, function resizeDiskCb(err, _job) {
+    }, function resizeDiskCb(err, job) {
         if (err) {
             next(err);
             return;
         }
 
-        log.debug('POST /%s/machines/%s/disks/%s -> ok',
-                    req.account.login, vmUuid, req.disk.uuid);
+
+        log.debug({
+            request: format('POST /%s/machines/%s/disks/%s -> ok',
+                req.account.login, vmUuid, req.disk.uuid),
+            job: job
+        });
 
         req.disk.state = 'resizing';
 
@@ -225,8 +252,12 @@ function deleteDisk(req, res, next) {
             return;
         }
 
-        log.debug('DELETE /%s/machines/%s/disks/%s -> ok',
-                    req.account.login, vmUuid, req.disk.uuid);
+        log.debug({
+            request: format('DELETE /%s/machines/%s/disks/%s -> ok',
+                req.account.login, vmUuid, req.disk.uuid),
+            job: job
+        });
+
         res.send(204);
         next();
     });
diff --git a/test/machines.94.test.js b/test/machines.94.test.js
index 944f34d..ae04ff9 100644
--- a/test/machines.94.test.js
+++ b/test/machines.94.test.js
@@ -24,7 +24,8 @@ var BHYVE_128 = Object.assign({}, common.bhyve_128_package, {
 var BHYVE_128_INFLEXIBLE = Object.assign({}, BHYVE_128, {
     uuid: '48653cc1-e9a2-448f-a245-b361c8c5a6f9',
     name: 'sdc_128_bhyve_inflexible',
-    flexible_disk: false
+    flexible_disk: false,
+    quota: 10240
 });
 
 var BHYVE_128_FLEXIBLE = Object.assign({}, BHYVE_128, {
@@ -202,8 +203,7 @@ test('CreateMachine - 9 disks and flexible disk package', function (t) {
     });
 });
 
-test('CreateMachine - Multiple `remaining` disks',
-    function (t) {
+test('CreateMachine - Multiple `remaining` disks', function (t) {
     if (!BHYVE_IMAGE_UUID) {
         t.ok(true, 'No bhyve images. Test skipped');
         t.end();
@@ -231,8 +231,7 @@ test('CreateMachine - Multiple `remaining` disks',
     });
 });
 
-test('CreateMachine - Disks size is greater than quota',
-    function (t) {
+test('CreateMachine - Disks size is greater than quota', function (t) {
     if (!BHYVE_IMAGE_UUID) {
         t.ok(true, 'No bhyve images. Test skipped');
         t.end();
@@ -258,1129 +257,1132 @@ test('CreateMachine - Disks size is greater than quota',
     });
 });
 
-test('CreateMachine - No disks/inflexible disk package', function (t) {
+function stopMachine(t) {
     if (!BHYVE_IMAGE_UUID) {
         t.ok(true, 'No bhyve images. Test skipped');
         t.end();
         return;
     }
 
-    var obj = {
-        image: BHYVE_IMAGE_UUID,
-        name: 'bhyve-no-disks-inflex-package-test-' + process.pid,
-        package: BHYVE_128_INFLEXIBLE.uuid
-    };
-
-    CLIENT.post('/my/machines', obj,
-        function createdMachine(err, req, res, body) {
-            t.ifError(err, 'POST /my/machines error');
-            t.equal(res.statusCode, 201, 'POST /my/machines status');
-            common.checkHeaders(t, res.headers);
-            t.equal(res.headers.location,
-                util.format('/%s/machines/%s', CLIENT.login, body.id));
-            t.ok(body, 'POST /my/machines body');
-            checkMachine(t, body);
-
-            BHYVE_MACHINE_UUID = body.id;
-
-            t.ok(true, 'Requested provision of bhyve machine: ' +
-                BHYVE_MACHINE_UUID);
-            t.end();
-    });
-});
-
-test('Wait For bhyve machine running - no disks/inflexible disk package',
-    function (t) {
-    if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
+    if (!BHYVE_MACHINE_UUID) {
+        t.ok(true, 'No bhyve VM provisioned. Test skipped');
         t.end();
         return;
     }
 
-    machinesCommon.waitForRunningMachine(CLIENT, BHYVE_MACHINE_UUID,
-        function waitForMachineCb(err) {
-            t.ifError(err);
+    CLIENT.post('/my/machines/' + BHYVE_MACHINE_UUID, {
+        action: 'stop'
+    }, function onStop(err) {
+        t.ifError(err, 'err');
 
-            if (err) {
-                // Skip machine tests when machine creation fails
-                BHYVE_MACHINE_UUID = false;
-            }
+        CLIENT.vmapi.listJobs({
+            vm_uuid: BHYVE_MACHINE_UUID,
+            task: 'stop'
+        }, function listJobsCb(err2, jobs) {
+            t.ifError(err2, 'list jobs error');
 
-            t.end();
+            var jobUuid = jobs[0].uuid;
+            machinesCommon.waitForJob(CLIENT, jobUuid, function onWaitCb(err3) {
+                t.ifError(err3, 'Check state error');
+                t.end();
+            });
+        });
     });
-});
+}
 
-test('GetMachine has disks - no disks/inflexible disk package',
-    function (t) {
+test('No disks/inflexible disk package', function (suite) {
     if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
+        suite.ok(true, 'No bhyve images. Test skipped');
+        suite.end();
         return;
     }
 
-    var expectedDisks = [
-        {
-            boot: true,
-            image: BHYVE_IMAGE_UUID,
-            size: BHYVE_IMAGE.image_size
-        },
-        {
-            size: BHYVE_128_INFLEXIBLE.quota
-        }
-    ];
+    BHYVE_MACHINE_UUID = false;
+    var diskPath, vmPath;
 
-    CLIENT.get('/my/machines/' + BHYVE_MACHINE_UUID,
-        function gotMachine(err, req, res, body) {
-            t.ifError(err);
-            checkDisks(t, expectedDisks, body.disks);
-            t.strictEqual(body.flexible, false);
-            t.end();
+    suite.test('CreateMachine', function (t) {
+        var obj = {
+            image: BHYVE_IMAGE_UUID,
+            name: 'bhyve-no-disks-inflex-package-test-' + process.pid,
+            package: BHYVE_128_INFLEXIBLE.uuid
+        };
+
+        CLIENT.post('/my/machines', obj,
+            function createdMachine(err, req, res, body) {
+                t.ifError(err, 'POST /my/machines error');
+                t.equal(res.statusCode, 201, 'POST /my/machines status');
+                common.checkHeaders(t, res.headers);
+                t.equal(res.headers.location,
+                    util.format('/%s/machines/%s', CLIENT.login, body.id));
+                t.ok(body, 'POST /my/machines body');
+                checkMachine(t, body);
+
+                BHYVE_MACHINE_UUID = body.id;
+                vmPath = '/my/machines/' + BHYVE_MACHINE_UUID;
+
+                t.ok(true, 'Requested provision of bhyve machine: ' +
+                    BHYVE_MACHINE_UUID);
+                t.end();
+        });
     });
-});
 
-test('ListMachineDisks has disks - no disks/inflexible disk package',
-    function listMachineDisksTest(t) {
-    if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
-        return;
-    }
 
-    var expectedDisks = [
-        {
-            boot: true,
-            pci_slot: '0:4:0',
-            size: BHYVE_IMAGE.image_size,
-            state: 'running'
-        },
-        {
-            boot: false,
-            pci_slot: '0:4:1',
-            size: BHYVE_128_INFLEXIBLE.quota,
-            state: 'running'
-        }
-    ];
+    suite.test('Wait For bhyve machine running', function (t) {
+        machinesCommon.waitForRunningMachine(CLIENT, BHYVE_MACHINE_UUID,
+            function waitForMachineCb(err) {
+                if (err) {
+                    // Skip machine tests when machine creation fails
+                    BHYVE_MACHINE_UUID = false;
+                }
+                t.ifError(err);
+                t.end();
+        });
+    });
 
-    CLIENT.get('/my/machines/' + BHYVE_MACHINE_UUID + '/disks',
-        function gotDisks(err, req, res, disks) {
-            t.ifError(err);
+    suite.test('Test disks', function (tt) {
+        if (!BHYVE_MACHINE_UUID) {
+            suite.ok(true, 'No vm provisioned. Test skipped');
+            tt.end();
+            return;
+        }
 
-            checkDisks(t, expectedDisks, disks);
-            t.ok(disks[0].id, 'disks[0].id');
-            t.ok(disks[1].id, 'disks[1].id');
 
-            DISK_UUID = disks[1].id;
+        tt.test('GetMachine has disks', function (t) {
+            var expectedDisks = [
+                {
+                    boot: true,
+                    image: BHYVE_IMAGE_UUID,
+                    size: BHYVE_IMAGE.image_size
+                },
+                {
+                    size: BHYVE_128_INFLEXIBLE.quota
+                }
+            ];
 
-            t.end();
-    });
-});
+            CLIENT.get(vmPath, function gotMachine(err, req, res, body) {
+                    t.ifError(err);
+                    checkDisks(t, expectedDisks, body.disks);
+                    t.strictEqual(body.flexible, false);
+                    t.end();
+            });
+        });
 
-test('ListMachineDisks OTHER - no access',
-    function listMachineDisksOtherTest(t) {
-    if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
-        return;
-    }
+        tt.test('ListMachineDisks has disks', function listMachineDisksTest(t) {
+            var expectedDisks = [
+                {
+                    boot: true,
+                    pci_slot: '0:4:0',
+                    size: BHYVE_IMAGE.image_size,
+                    state: 'running'
+                },
+                {
+                    boot: false,
+                    pci_slot: '0:4:1',
+                    size: BHYVE_128_INFLEXIBLE.quota,
+                    state: 'running'
+                }
+            ];
 
-    OTHER.get('/my/machines/' + BHYVE_MACHINE_UUID + '/disks',
-        function gotDisks(err, req, res, disks) {
-            t.ok(err, 'err');
-            t.equal(err.statusCode, 404, 'statusCode');
-            t.end();
-    });
-});
+            CLIENT.get(vmPath + '/disks',
+                function gotDisks(err, req, res, disks) {
+                    t.ifError(err);
 
-test('GetMachineDisk has disk - no disks/inflexible disk package',
-    function getMachineDiskTest(t) {
-    if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
-        return;
-    }
+                    checkDisks(t, expectedDisks, disks);
+                    t.ok(disks[0].id, 'disks[0].id');
+                    t.ok(disks[1].id, 'disks[1].id');
 
-    CLIENT.get('/my/machines/' + BHYVE_MACHINE_UUID + '/disks/' + DISK_UUID,
-        function gotDisk(err, req, res, disk) {
-            t.ifError(err);
+                    DISK_UUID = disks[1].id;
 
-            t.deepEqual(disk, {
-                id: DISK_UUID,
-                boot: false,
-                pci_slot: '0:4:1',
-                size: BHYVE_128_INFLEXIBLE.quota,
-                state: 'running'
+                    t.end();
             });
+        });
 
-            t.end();
-    });
-});
+        tt.test('ListMachineDisks OTHER - no access',
+            function listMachineDisksOtherTest(t) {
+            OTHER.get(vmPath + '/disks',
+                function gotDisks(err, req, res, _disks) {
+                    t.ok(err, 'err');
+                    t.equal(err.statusCode, 404, 'statusCode');
+                    t.end();
+            });
+        });
 
-test('GetMachineDisks OTHER - no access',
-    function getMachineDisksOtherTest(t) {
-    if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
-        return;
-    }
+        tt.test('GetMachineDisk has disk', function getMachineDiskTest(t) {
 
-    OTHER.get('/my/machines/' + BHYVE_MACHINE_UUID + '/disks/' + DISK_UUID,
-        function gotDisk(err, req, res, disks) {
-            t.ok(err, 'err');
-            t.equal(err.statusCode, 404, 'statusCode');
-            t.end();
-    });
-});
+            diskPath = vmPath + '/disks/' + DISK_UUID;
 
-function stopMachine(t) {
-    if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
-        return;
-    }
+            CLIENT.get(diskPath, function gotDisk(err, req, res, disk) {
+                    t.ifError(err);
 
-    CLIENT.post('/my/machines/' + BHYVE_MACHINE_UUID, {
-        action: 'stop'
-    }, function onStop(err) {
-        t.ifError(err, 'err');
+                    t.deepEqual(disk, {
+                        id: DISK_UUID,
+                        boot: false,
+                        pci_slot: '0:4:1',
+                        size: BHYVE_128_INFLEXIBLE.quota,
+                        state: 'running'
+                    });
 
-        CLIENT.vmapi.listJobs({
-            vm_uuid: BHYVE_MACHINE_UUID,
-            task: 'stop'
-        }, function listJobsCb(err2, jobs) {
-            t.ifError(err2, 'list jobs error');
+                    t.end();
+            });
+        });
 
-            var jobUuid = jobs[0].uuid;
-            machinesCommon.waitForJob(CLIENT, jobUuid, function onWaitCb(err3) {
-                t.ifError(err3, 'Check state error');
-                t.end();
+        tt.test('GetMachineDisks OTHER - no access',
+            function getMachineDisksOtherTest(t) {
+            OTHER.get(diskPath, function gotDisk(err, req, res, _disks) {
+                    t.ok(err, 'err');
+                    t.equal(err.statusCode, 404, 'statusCode');
+                    t.end();
             });
         });
-    });
-}
 
-test('Stop machine 1', stopMachine);
 
-test('CreateMachineDisk cannot create disk - no disks/inflexible disk package',
-    function createMachineDiskCannotCreateTest(t) {
-    if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
-        return;
-    }
+        tt.test('Stop machine', stopMachine);
 
-    CLIENT.post('/my/machines/' + BHYVE_MACHINE_UUID + '/disks', {
-        size: 128
-    }, function createDisk(err, req, res, disk) {
-        t.ok(err);
+        tt.test('CreateMachineDisk cannot create disk',
+            function createMachineDiskCannotCreateTest(t) {
+            CLIENT.post(vmPath + '/disks', {
+                size: 128
+            }, function createDisk(err, req, res, disk) {
+                t.ok(err);
 
-        t.equal(err.name, 'VmWithoutFlexibleDiskSizeError', 'disk.name');
-        t.equal(disk.code, 'VmWithoutFlexibleDiskSize', 'disk.code');
+                t.equal(err.name, 'VmWithoutFlexibleDiskSizeError',
+                    'disk.name');
+                t.equal(disk.code, 'VmWithoutFlexibleDiskSize', 'disk.code');
 
-        t.end();
-    });
-});
+                t.end();
+            });
+        });
 
-test('ResizeMachineDisk cannot resize disk - no disks/inflexible disk package',
-    function resizeMachineDiskTest(t) {
-    if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
-        return;
-    }
+        tt.test('ResizeMachineDisk cannot resize disk',
+            function resizeMachineDiskTest(t) {
+            CLIENT.post(diskPath, {
+                size: BHYVE_128_INFLEXIBLE.quota - 128
+            }, function resizeDisk(err, req, res, disk) {
+                t.ok(err);
 
-    CLIENT.post('/my/machines/' + BHYVE_MACHINE_UUID + '/disks/' + DISK_UUID, {
-        size: BHYVE_128_INFLEXIBLE.quota - 128
-    }, function resizeDisk(err, req, res, disk) {
-        t.ok(err);
+                t.equal(err.name, 'VmWithoutFlexibleDiskSizeError',
+                    'disk.name');
+                t.equal(disk.code, 'VmWithoutFlexibleDiskSize', 'disk.code');
 
-        t.equal(err.name, 'VmWithoutFlexibleDiskSizeError', 'disk.name');
-        t.equal(disk.code, 'VmWithoutFlexibleDiskSize', 'disk.code');
+                t.end();
+            });
+        });
 
-        t.end();
-    });
-});
+        tt.test('DeleteMachineDisk cannot delete disk',
+            function deleteMachineDisk(t) {
+            CLIENT.del(diskPath, function gotDisk(err, req, res, disk) {
+                    t.ok(err);
 
-test('DeleteMachineDisk cannot delete disk - no disks/inflexible disk package',
-    function deleteMachineDisk(t) {
-    if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
-        return;
-    }
+                    t.equal(err.name, 'VmWithoutFlexibleDiskSizeError',
+                        'err.name');
+                    t.equal(disk.code, 'VmWithoutFlexibleDiskSize',
+                        'disk.code');
 
-    CLIENT.del('/my/machines/' + BHYVE_MACHINE_UUID + '/disks/' + DISK_UUID,
-        function gotDisk(err, req, res, disk) {
-            t.ok(err);
+                    t.end();
+            });
+        });
 
-            t.equal(err.name, 'VmWithoutFlexibleDiskSizeError', 'disk.name');
-            t.equal(disk.code, 'VmWithoutFlexibleDiskSize', 'disk.code');
+        tt.test('Delete bhyve test vm', function (t) {
+            deleteMachine(t, CLIENT, OTHER, BHYVE_MACHINE_UUID,
+                function onDel() {
+                    BHYVE_MACHINE_UUID = undefined;
+                    t.end();
+            });
+        });
 
-            t.end();
+        tt.end();
     });
-});
 
-test('Delete bhyve test vm - no disks/inflexible disk package',
-    function (t) {
-    if (!BHYVE_MACHINE_UUID) {
-        t.end();
-        return;
-    }
+    suite.end();
 
-    deleteMachine(t, CLIENT, OTHER, BHYVE_MACHINE_UUID, function onDelete() {
-            BHYVE_MACHINE_UUID = undefined;
-            t.end();
-    });
 });
 
-test('CreateMachine - No disks/package has disks', function (t) {
+
+test('No disks/package has disks', function (suite) {
     if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
+        suite.ok(true, 'No bhyve images. Test skipped');
+        suite.end();
         return;
     }
 
-    var obj = {
-        image: BHYVE_IMAGE_UUID,
-        name: 'bhyve-package-test-' + process.pid,
-        package: BHYVE_128_FLEXIBLE_DISKS.uuid
-    };
 
-    CLIENT.post('/my/machines', obj,
-        function createdMachine(err, req, res, body) {
-            t.ifError(err, 'POST /my/machines error');
-            t.equal(res.statusCode, 201, 'POST /my/machines status');
-            common.checkHeaders(t, res.headers);
-            t.equal(res.headers.location,
-                util.format('/%s/machines/%s', CLIENT.login, body.id));
-            t.ok(body, 'POST /my/machines body');
-            checkMachine(t, body);
-
-            BHYVE_MACHINE_UUID = body.id;
-
-            t.ok(true, 'Requested provision of bhyve machine: ' +
-                BHYVE_MACHINE_UUID);
-            t.end();
+    BHYVE_MACHINE_UUID = false;
+
+    suite.test('CreateMachine', function (t) {
+        var obj = {
+            image: BHYVE_IMAGE_UUID,
+            name: 'bhyve-package-test-' + process.pid,
+            package: BHYVE_128_FLEXIBLE_DISKS.uuid
+        };
+
+        CLIENT.post('/my/machines', obj,
+            function createdMachine(err, req, res, body) {
+                t.ifError(err, 'POST /my/machines error');
+                t.equal(res.statusCode, 201, 'POST /my/machines status');
+                common.checkHeaders(t, res.headers);
+                t.equal(res.headers.location,
+                    util.format('/%s/machines/%s', CLIENT.login, body.id));
+                t.ok(body, 'POST /my/machines body');
+                checkMachine(t, body);
+
+                BHYVE_MACHINE_UUID = body.id;
+
+                t.ok(true, 'Requested provision of bhyve machine: ' +
+                    BHYVE_MACHINE_UUID);
+                t.end();
+        });
     });
-});
 
-test('Wait For bhyve machine running - No disks/package has disks',
-    function (t) {
-    if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
-        return;
-    }
 
-    machinesCommon.waitForRunningMachine(CLIENT, BHYVE_MACHINE_UUID,
-        function waitForMachineCb(err) {
-            t.ifError(err);
+    suite.test('Wait For bhyve machine running', function (t) {
+        machinesCommon.waitForRunningMachine(CLIENT, BHYVE_MACHINE_UUID,
+            function waitForMachineCb(err) {
+                if (err) {
+                    // Skip machine tests when machine creation fails
+                    BHYVE_MACHINE_UUID = false;
+                }
 
-            if (err) {
-                // Skip machine tests when machine creation fails
-                BHYVE_MACHINE_UUID = false;
-            }
+                t.ifError(err);
+                t.end();
+        });
+    });
 
+    suite.test('GetMachine has disks', function (t) {
+        if (!BHYVE_MACHINE_UUID) {
+            suite.ok(true, 'No vm provisioned. Test skipped');
             t.end();
-    });
-});
+            return;
+        }
 
-test('GetMachine has disks - No disks/package has disks', function (t) {
-    if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
-        return;
-    }
+        var expectedDisks = [
+            {
+                boot: true,
+                image: BHYVE_IMAGE_UUID,
+                size: BHYVE_IMAGE.image_size
+            },
+            {
+                size: BHYVE_128_FLEXIBLE_DISKS.disks[1].size
+            }
+        ];
 
-    var expectedDisks = [
-        {
-            boot: true,
-            image: BHYVE_IMAGE_UUID,
-            size: BHYVE_IMAGE.image_size
-        },
-        {
-            size: BHYVE_128_FLEXIBLE_DISKS.disks[1].size
-        }
-    ];
-
-    var pkg = BHYVE_128_FLEXIBLE_DISKS;
-    var usedSpace = pkg.disks[1].size + BHYVE_IMAGE.image_size;
-    var expectedFree = pkg.quota - usedSpace;
-
-    CLIENT.get('/my/machines/' + BHYVE_MACHINE_UUID,
-        function gotMachine(err, req, res, body) {
-            t.ifError(err);
-            checkDisks(t, expectedDisks, body.disks);
-            checkDisksQuota(t, body.disks,
-                BHYVE_128_FLEXIBLE_DISKS.quota - body.free_space);
-            t.strictEqual(body.flexible, true);
-            t.equal(body.free_space, expectedFree);
-            t.end();
-    });
-});
+        var pkg = BHYVE_128_FLEXIBLE_DISKS;
+        var usedSpace = pkg.disks[1].size + BHYVE_IMAGE.image_size;
+        var expectedFree = pkg.quota - usedSpace;
 
-test('Delete bhyve test vm - No disks/package has disks', function (t) {
-    if (!BHYVE_MACHINE_UUID) {
-        t.end();
-        return;
-    }
+        CLIENT.get('/my/machines/' + BHYVE_MACHINE_UUID,
+            function gotMachine(err, req, res, body) {
+                t.ifError(err);
+                checkDisks(t, expectedDisks, body.disks);
+                checkDisksQuota(t, body.disks,
+                    BHYVE_128_FLEXIBLE_DISKS.quota - body.free_space);
+                t.strictEqual(body.flexible, true);
+                t.equal(body.free_space, expectedFree);
+                t.end();
+        });
+    });
 
-    deleteMachine(t, CLIENT, OTHER, BHYVE_MACHINE_UUID,
-        function onDelete() {
-            BHYVE_MACHINE_UUID = undefined;
+    suite.test('Delete bhyve test vm', function (t) {
+        if (!BHYVE_MACHINE_UUID) {
+            suite.ok(true, 'No vm provisioned. Test skipped');
             t.end();
+            return;
+        }
+
+        deleteMachine(t, CLIENT, OTHER, BHYVE_MACHINE_UUID,
+            function onDelete() {
+                BHYVE_MACHINE_UUID = undefined;
+                t.end();
+        });
     });
+
+    suite.end();
 });
 
-test('CreateMachine - Disks/flexible disk package', function (t) {
+test('Disks/flexible disk package', function (suite) {
     if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
+        suite.ok(true, 'No bhyve images. Test skipped');
+        suite.end();
         return;
     }
 
-    DISK_UUID = 'dea91a7f-5fe3-4408-b25a-994c97a7975e';
+    BHYVE_MACHINE_UUID = false;
+    var diskPath, vmPath;
 
-    var obj = {
-        disks: [
-            { id: 'eea4e223-dee6-44dc-a7e1-71f996e534f0' },
-            { id: DISK_UUID, size: 512},
-            { id: 'c41ce11e-bed2-45d2-bdb8-8dc889ed8ced', size: 'remaining' }
-        ],
-        image: BHYVE_IMAGE_UUID,
-        name: 'bhyve-disks-flex-package-test-' + process.pid,
-        package: BHYVE_128_FLEXIBLE.uuid
-    };
+    suite.test('CreateMachine', function (t) {
 
-    CLIENT.post('/my/machines', obj,
-        function createdMachine(err, req, res, body) {
-            t.ifError(err, 'POST /my/machines error');
-            t.equal(res.statusCode, 201, 'POST /my/machines status');
-            common.checkHeaders(t, res.headers);
-            t.equal(res.headers.location,
-                util.format('/%s/machines/%s', CLIENT.login, body.id));
-            t.ok(body, 'POST /my/machines body');
-            checkMachine(t, body);
-
-            BHYVE_MACHINE_UUID = body.id;
-
-            // Handy to output this to stdout in order to poke around COAL:
-            t.ok(true, 'Requested provision of bhyve machine: ' +
-                BHYVE_MACHINE_UUID);
-            t.end();
-    });
-});
+        DISK_UUID = 'dea91a7f-5fe3-4408-b25a-994c97a7975e';
 
-test('Wait For bhyve machine running - Disks/flexible disk package',
-    function (t) {
-        if (!BHYVE_IMAGE_UUID) {
-            t.ok(true, 'No bhyve images. Test skipped');
-            t.end();
-            return;
-        }
+        var obj = {
+            disks: [
+                { id: 'eea4e223-dee6-44dc-a7e1-71f996e534f0' },
+                { id: DISK_UUID, size: 512},
+                {
+                    id: 'c41ce11e-bed2-45d2-bdb8-8dc889ed8ced',
+                    size: 'remaining'
+                }
+            ],
+            image: BHYVE_IMAGE_UUID,
+            name: 'bhyve-disks-flex-package-test-' + process.pid,
+            package: BHYVE_128_FLEXIBLE.uuid
+        };
+
+        CLIENT.post('/my/machines', obj,
+            function createdMachine(err, req, res, body) {
+                t.ifError(err, 'POST /my/machines error');
+                t.equal(res.statusCode, 201, 'POST /my/machines status');
+                common.checkHeaders(t, res.headers);
+                t.equal(res.headers.location,
+                    util.format('/%s/machines/%s', CLIENT.login, body.id));
+                t.ok(body, 'POST /my/machines body');
+                checkMachine(t, body);
+
+                BHYVE_MACHINE_UUID = body.id;
+
+                // Handy to output this to stdout in order to poke around COAL:
+                t.ok(true, 'Requested provision of bhyve machine: ' +
+                    BHYVE_MACHINE_UUID);
+                t.end();
+        });
+    });
 
+    suite.test('Wait For bhyve machine running', function (t) {
         machinesCommon.waitForRunningMachine(CLIENT, BHYVE_MACHINE_UUID,
             function waitForMachineCb(err) {
-                t.ifError(err);
-
                 if (err) {
                     // Skip machine tests when machine creation fails
                     BHYVE_MACHINE_UUID = false;
                 }
 
+                t.ifError(err);
                 t.end();
         });
-    }
-);
-
-test('GetMachine has disks - Disks/flexible disk package', function (t) {
-    if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
-        return;
-    }
-
-    var expectedDisks = [
-        {
-            boot: true,
-            image: BHYVE_IMAGE_UUID,
-            size: BHYVE_IMAGE.image_size,
-            id: 'eea4e223-dee6-44dc-a7e1-71f996e534f0'
-        },
-        {
-            size: 512,
-            id: DISK_UUID
-        },
-        {
-            size: BHYVE_128_FLEXIBLE.quota - BHYVE_IMAGE.image_size - 512,
-            id: 'c41ce11e-bed2-45d2-bdb8-8dc889ed8ced'
-        }
-    ];
-
-    CLIENT.get('/my/machines/' + BHYVE_MACHINE_UUID,
-        function gotMachine(err, req, res, body) {
-            t.ifError(err);
-            t.strictEqual(body.flexible, true);
-            checkDisksQuota(t, body.disks,
-                BHYVE_128_FLEXIBLE.quota - body.free_space);
-            t.deepEqual(body.disks, expectedDisks);
-            t.end();
     });
-});
-
-test('Stop machine 2', stopMachine);
 
-test('ResizeMachineDisk OTHER - no access',
-    function resizeMachineDiskOtherTest(t) {
-    if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
-        return;
-    }
+    suite.test('Disks', function (tt) {
+        if (!BHYVE_MACHINE_UUID) {
+            suite.ok(true, 'No vm provisioned. Test skipped');
+            tt.end();
+            return;
+        }
 
-    OTHER.post('/my/machines/' + BHYVE_MACHINE_UUID + '/disks/' + DISK_UUID, {
-        size: 128
-    }, function resizeDisk(err, req, res, disk) {
-        t.ok(err, 'err');
 
-        t.equal(err.statusCode, 404, 'statusCode');
-        t.equal(err.name, 'ResourceNotFoundError');
+        tt.test('GetMachine has disks', function (t) {
+            vmPath = '/my/machines/' + BHYVE_MACHINE_UUID;
+            var expectedDisks = [
+                {
+                    boot: true,
+                    image: BHYVE_IMAGE_UUID,
+                    size: BHYVE_IMAGE.image_size,
+                    id: 'eea4e223-dee6-44dc-a7e1-71f996e534f0'
+                },
+                {
+                    size: 512,
+                    id: DISK_UUID
+                },
+                {
+                    size: BHYVE_128_FLEXIBLE.quota -
+                            BHYVE_IMAGE.image_size - 512,
+                    id: 'c41ce11e-bed2-45d2-bdb8-8dc889ed8ced'
+                }
+            ];
+
+            CLIENT.get(vmPath,
+                function gotMachine(err, req, res, body) {
+                    t.ifError(err);
+                    t.strictEqual(body.flexible, true);
+                    checkDisksQuota(t, body.disks,
+                        BHYVE_128_FLEXIBLE.quota - body.free_space);
+                    t.deepEqual(body.disks, expectedDisks);
+                    t.end();
+            });
+        });
 
-        t.end();
-    });
-});
+        tt.test('Stop machine', stopMachine);
 
-test('ResizeMachineDisk resize disk down - Disks/flexible disk package',
-    function resizeMachineDiskDownTest(t) {
-    if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
-        return;
-    }
+        tt.test('ResizeMachineDisk OTHER - no access',
+            function resizeMachineDiskOtherTest(t) {
+            diskPath = '/my/machines/' + BHYVE_MACHINE_UUID +
+                    '/disks/' + DISK_UUID;
+            OTHER.post(diskPath, {
+                size: 128
+            }, function resizeDisk(err, req, res, _disk) {
+                t.ok(err, 'err');
 
-    CLIENT.post('/my/machines/' + BHYVE_MACHINE_UUID + '/disks/' + DISK_UUID, {
-        size: 128
-    }, function resizeDisk(err, req, res, disk) {
-        t.ok(err, 'err');
+                t.equal(err.statusCode, 404, 'statusCode');
+                t.equal(err.name, 'ResourceNotFoundError');
 
-        t.equal(err.name, 'ValidationFailedError', 'err.name');
-        t.equal(disk.errors[0].field, 'size', 'size');
-        t.equal(disk.errors[0].message,
-            'Reducing disk size is a dangerous operation');
+                t.end();
+            });
+        });
 
-        t.end();
-    });
-});
+        tt.test('ResizeMachineDisk resize disk down',
+            function resizeMachineDiskDownTest(t) {
+            CLIENT.post(diskPath, {
+                size: 128
+            }, function resizeDisk(err, req, res, disk) {
+                t.ok(err, 'err');
 
-test('ResizeMachineDisk resize disk down 2 - Disks/flexible disk package',
-    function resizeMachineDisk2Test(t) {
-    if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
-        return;
-    }
+                t.equal(err.name, 'ValidationFailedError', 'err.name');
+                t.equal(disk.errors[0].field, 'size', 'size');
+                t.equal(disk.errors[0].message,
+                    'Reducing disk size is a dangerous operation');
 
-    var path = '/my/machines/' + BHYVE_MACHINE_UUID + '/disks/' + DISK_UUID;
+                t.end();
+            });
+        });
 
-    CLIENT.post(path, {
-        size: 128,
-        dangerous_allow_shrink: true
-    }, function resizeDisk(err, req, res, disk) {
-        t.ifError(err, 'err');
+        tt.test('ResizeMachineDisk resize disk down 2',
+            function resizeMachineDisk2Test(t) {
+            CLIENT.post(diskPath, {
+                size: 128,
+                dangerous_allow_shrink: true
+            }, function resizeDisk(err, req, res, disk) {
+                t.ifError(err, 'err');
+
+                t.deepEqual(disk, {
+                    id: DISK_UUID,
+                    pci_slot: '0:4:1',
+                    size: 512,
+                    boot: false,
+                    state: 'resizing'
+                }, 'disk');
+
+                poll();
+            });
 
-        t.deepEqual(disk, {
-            id: DISK_UUID,
-            pci_slot: '0:4:1',
-            size: 512,
-            boot: false,
-            state: 'resizing'
-        }, 'disk');
+            var count = 0;
+            function poll() {
+                if (count > 10) {
+                    t.fail('Failed to resize disk in time');
+                    t.end();
+                    return;
+                }
 
-        poll();
-    });
+                count += 1;
 
-    var count = 0;
-    function poll() {
-        if (count > 10) {
-            t.fail('Failed to resize disk in time');
-            t.end();
-            return;
-        }
+                CLIENT.get(diskPath, function getCb(err, req, res, disk) {
+                    t.ifError(err, 'err');
 
-        count += 1;
+                    if (disk.state !== 'stopped') {
+                        setTimeout(poll, 2000);
+                        return;
+                    }
 
-        CLIENT.get(path, function getCb(err, req, res, disk) {
-            t.ifError(err, 'err');
+                    t.deepEqual(disk, {
+                        id: DISK_UUID,
+                        pci_slot: '0:4:1',
+                        size: 128,
+                        boot: false,
+                        state: 'stopped'
+                    }, 'disk');
 
-            if (disk.state !== 'stopped') {
-                setTimeout(poll, 2000);
-                return;
+                    t.end();
+                });
             }
+        });
 
-            t.deepEqual(disk, {
-                id: DISK_UUID,
-                pci_slot: '0:4:1',
-                size: 128,
-                boot: false,
-                state: 'stopped'
-            }, 'disk');
+        tt.test('DeleteMachineDisk OTHER - no access',
+            function deleteMachineDiskOtherTest(t) {
+            OTHER.del(diskPath,
+                function deleteDisk(err, req, res) {
+                t.ok(err, 'err');
 
-            t.end();
-        });
-    }
-});
+                t.equal(err.statusCode, 404, 'statusCode');
+                t.equal(err.name, 'ResourceNotFoundError');
 
-test('DeleteMachineDisk OTHER - no access',
-    function deleteMachineDiskOtherTest(t) {
-    if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
-        return;
-    }
+                t.end();
+            });
+        });
 
-    OTHER.del('/my/machines/' + BHYVE_MACHINE_UUID + '/disks/' + DISK_UUID,
-        function deleteDisk(err, req, res, disk) {
-        t.ok(err, 'err');
+        tt.test('DeleteMachineDisk delete disk',
+            function deleteMachineDisk2(t) {
+            CLIENT.del(diskPath, function gotDisk(err, req, res) {
+                t.ifError(err);
+                t.equal(res.statusCode, 204, 'statusCode');
+                poll();
+            });
 
-        t.equal(err.statusCode, 404, 'statusCode');
-        t.equal(err.name, 'ResourceNotFoundError');
+            var count = 0;
+            function poll() {
+                if (count > 10) {
+                    t.fail('Failed to delete disk in time');
+                    t.end();
+                    return;
+                }
 
-        t.end();
-    });
-});
+                count += 1;
+
+                CLIENT.get(diskPath, function getCb(err, req, res, disk) {
+                    if (err && res.statusCode === 404) {
+                        t.end();
+                        return;
+                    }
+
+                    t.ifError(err, 'err');
+                    t.deepEqual(disk, {
+                        id: DISK_UUID,
+                        pci_slot: '0:4:1',
+                        size: 128,
+                        boot: false,
+                        state: 'deleting'
+                    }, 'disk');
+
+                    setTimeout(poll, 2000);
+                });
+            }
+        });
 
-test('DeleteMachineDisk delete disk - Disks/flexible disk package',
-    function deleteMachineDisk2(t) {
-    if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
-        return;
-    }
+        tt.test('CreateMachineDisk OTHER - no access',
+            function createMachineDiskOtherTest(t) {
+            OTHER.post(vmPath + '/disks', {
+                pci_slot: '0:4:9',
+                size: 128
+            }, function createDisk(err, req, res, _disk) {
+                t.ok(err);
+                t.equal(res.statusCode, 404, 'statusCode');
+                t.equal(err.name, 'ResourceNotFoundError', 'err.name');
+                t.end();
+            });
+        });
 
-    var path = '/my/machines/' + BHYVE_MACHINE_UUID + '/disks/' + DISK_UUID;
+        tt.test('CreateMachineDisk', function createMachineDiskTest(t) {
+            CLIENT.post(vmPath + '/disks', {
+                pci_slot: '0:4:4',
+                size: 256
+            }, function createDisk(err, req, res, disk) {
+                t.ifError(err, 'err');
 
-    CLIENT.del(path, function gotDisk(err, req, res, disk) {
-        t.ifError(err);
-        t.equal(res.statusCode, 204, 'statusCode');
-        poll();
-    });
+                DISK_UUID = disk.id;
+                diskPath = vmPath + '/disks/' + DISK_UUID;
 
-    var count = 0;
-    function poll() {
-        if (count > 10) {
-            t.fail('Failed to delete disk in time');
-            t.end();
-            return;
-        }
+                poll();
+            });
 
-        count += 1;
+            var count = 0;
+            function poll() {
+                if (count > 10) {
+                    t.fail('Failed to create disk in time');
+                    t.end();
+                    return;
+                }
 
-        CLIENT.get(path, function getCb(err, req, res, disk) {
-            if (err && res.statusCode === 404) {
-                t.end();
-                return;
-            }
+                count += 1;
 
-            t.ifError(err, 'err');
-            t.deepEqual(disk, {
-                id: DISK_UUID,
-                pci_slot: '0:4:1',
-                size: 128,
-                boot: false,
-                state: 'deleting'
-            }, 'disk');
+                CLIENT.get(diskPath, function getCb(err, req, res, disk) {
+                    if (res.statusCode === 404) {
+                        setTimeout(poll, 2000);
+                        return;
+                    }
 
-            setTimeout(poll, 2000);
-        });
-    }
-});
+                    t.ifError(err, 'err');
 
-test('CreateMachineDisk OTHER - no access',
-    function createMachineDiskOtherTest(t) {
-    if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
-        return;
-    }
+                    t.deepEqual(disk, {
+                        id: DISK_UUID,
+                        pci_slot: '0:4:4',
+                        size: 256,
+                        boot: false,
+                        state: 'stopped'
+                    }, 'disk');
 
-    OTHER.post('/my/machines/' + BHYVE_MACHINE_UUID + '/disks', {
-        pci_slot: '0:4:9',
-        size: 128
-    }, function createDisk(err, req, res, disk) {
-        t.ok(err);
-        t.equal(res.statusCode, 404, 'statusCode');
-        t.equal(err.name, 'ResourceNotFoundError', 'err.name');
-        t.end();
-    });
-});
+                    t.end();
+                });
+            }
+        });
 
-test('CreateMachineDisk - Disks/flexible disk package',
-    function createMachineDiskTest(t) {
-    if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
-        return;
-    }
+        // Need to make room for a 'remaining' size disk now:
+        tt.test('DeleteMachineDisk Ok', function delDiskcb(t) {
+            // Need to explicitly delete the disk created with a size of
+            // 'remaining':
+            DISK_UUID = 'c41ce11e-bed2-45d2-bdb8-8dc889ed8ced';
+
+            diskPath = '/my/machines/' + BHYVE_MACHINE_UUID +
+                '/disks/' + DISK_UUID;
+
+            var count = 0;
+            function poll() {
+                if (count > 10) {
+                    t.fail('Failed to delete disk in time');
+                    t.end();
+                    return;
+                }
 
-    CLIENT.post('/my/machines/' + BHYVE_MACHINE_UUID + '/disks', {
-        pci_slot: '0:4:4',
-        size: 256
-    }, function createDisk(err, req, res, disk) {
-        t.ifError(err, 'err');
+                count += 1;
 
-        DISK_UUID = disk.id;
+                CLIENT.get(diskPath, function getCb(err, req, res, _disk) {
+                    if (err && res.statusCode === 404) {
+                        t.end();
+                        return;
+                    }
 
-        poll();
-    });
+                    t.ifError(err, 'err');
+                    setTimeout(poll, 2000);
+                });
+            }
 
-    var count = 0;
-    function poll() {
-        if (count > 10) {
-            t.fail('Failed to create disk in time');
-            t.end();
-            return;
-        }
+            CLIENT.del(diskPath, function delCb(err, req, res) {
+                t.ifError(err);
+                t.equal(res.statusCode, 204, 'statusCode');
+                poll();
+            });
 
-        count += 1;
+        });
 
-        var path = '/my/machines/' + BHYVE_MACHINE_UUID + '/disks/' + DISK_UUID;
+        tt.test('CreateMachineDisk - size remaining',
+            function createDiskTest(t) {
+            CLIENT.post(vmPath + '/disks', {
+                pci_slot: '0:4:2',
+                size: 'remaining'
+            }, function createDisk(err, req, res, disk) {
+                t.ifError(err, 'err');
 
-        CLIENT.get(path, function getCb(err, req, res, disk) {
-            if (res.statusCode === 404) {
-                setTimeout(poll, 2000);
-                return;
-            }
+                DISK_UUID = disk.id;
 
-            t.ifError(err, 'err');
+                poll();
+            });
 
-            t.deepEqual(disk, {
-                id: DISK_UUID,
-                pci_slot: '0:4:4',
-                size: 256,
-                boot: false,
-                state: 'stopped'
-            }, 'disk');
+            var count = 0;
+            function poll() {
+                if (count > 60) {
+                    t.fail('Failed to create disk in time');
+                    t.end();
+                    return;
+                }
 
-            t.end();
+                count += 1;
+
+                var path = vmPath + '/disks/' + DISK_UUID;
+
+                CLIENT.get(path, function getCb(err, req, res, disk) {
+                    if (res.statusCode === 404) {
+                        setTimeout(poll, 2000);
+                        return;
+                    }
+
+                    t.ifError(err, 'err');
+                    if (count === 1) {
+                        t.deepEqual(disk, {
+                            id: DISK_UUID,
+                            pci_slot: '0:4:2',
+                            size: BHYVE_128_FLEXIBLE.quota -
+                                BHYVE_IMAGE.image_size - 128,
+                            boot: false,
+                            state: 'stopped'
+                        }, 'disk');
+                    }
+                    t.end();
+                });
+            }
         });
-    }
-});
 
-test('Delete bhyve test vm - Disks/flexible disk package', function (t) {
-    if (!BHYVE_MACHINE_UUID) {
-        t.end();
-        return;
-    }
+        tt.test('Delete bhyve test vm', function (t) {
+            deleteMachine(t, CLIENT, OTHER, BHYVE_MACHINE_UUID,
+                function onDelete() {
+                    BHYVE_MACHINE_UUID = undefined;
+                    t.end();
+            });
+        });
 
-    deleteMachine(t, CLIENT, OTHER, BHYVE_MACHINE_UUID,
-        function onDelete() {
-            BHYVE_MACHINE_UUID = undefined;
-            t.end();
+        tt.end();
     });
+
+    suite.end();
+
 });
 
-test('CreateMachine - Disks sum to quota/flex disk package', function (t) {
+
+test('Disks sum to quota/flex disk package', function (suite) {
     if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
+        suite.ok(true, 'No bhyve images. Test skipped');
+        suite.end();
         return;
     }
 
-    var obj = {
-        disks: [
-            { id: 'eea4e223-dee6-44dc-a7e1-71f996e534f0', size: 14336 },
-            { id: 'dea91a7f-5fe3-4408-b25a-994c97a7975e', size: 512},
-            { id: 'c41ce11e-bed2-45d2-bdb8-8dc889ed8ced', size: 512 }
-        ],
-        image: BHYVE_IMAGE_UUID,
-        name: 'bhyve-disks-max-test-' + process.pid,
-        package: BHYVE_128_FLEXIBLE.uuid
-    };
-
-    CLIENT.post('/my/machines', obj,
-        function createdMachine(err, req, res, body) {
-            t.ifError(err, 'POST /my/machines error');
-            t.equal(res.statusCode, 201, 'POST /my/machines status');
-            common.checkHeaders(t, res.headers);
-            t.equal(res.headers.location,
-                util.format('/%s/machines/%s', CLIENT.login, body.id));
-            t.ok(body, 'POST /my/machines body');
-            checkMachine(t, body);
-
-            BHYVE_MACHINE_UUID = body.id;
-
-            // Handy to output this to stdout in order to poke around COAL:
-            t.ok(true, 'Requested provision of bhyve machine: ' +
-                BHYVE_MACHINE_UUID);
-            t.end();
+    suite.test('CreateMachine', function (t) {
+        var obj = {
+            disks: [
+                { id: 'eea4e223-dee6-44dc-a7e1-71f996e534f0', size: 14336 },
+                { id: 'dea91a7f-5fe3-4408-b25a-994c97a7975e', size: 512},
+                { id: 'c41ce11e-bed2-45d2-bdb8-8dc889ed8ced', size: 512 }
+            ],
+            image: BHYVE_IMAGE_UUID,
+            name: 'bhyve-disks-max-test-' + process.pid,
+            package: BHYVE_128_FLEXIBLE.uuid
+        };
+
+        CLIENT.post('/my/machines', obj,
+            function createdMachine(err, req, res, body) {
+                t.ifError(err, 'POST /my/machines error');
+                t.equal(res.statusCode, 201, 'POST /my/machines status');
+                common.checkHeaders(t, res.headers);
+                t.equal(res.headers.location,
+                    util.format('/%s/machines/%s', CLIENT.login, body.id));
+                t.ok(body, 'POST /my/machines body');
+                checkMachine(t, body);
+
+                BHYVE_MACHINE_UUID = body.id;
+
+                // Handy to output this to stdout in order to poke around COAL:
+                t.ok(true, 'Requested provision of bhyve machine: ' +
+                    BHYVE_MACHINE_UUID);
+                t.end();
+        });
     });
-});
 
-test('Wait For bhyve machine running - Disks sum to quota/flex disk package',
-    function (t) {
-        if (!BHYVE_IMAGE_UUID) {
-            t.ok(true, 'No bhyve images. Test skipped');
-            t.end();
-            return;
-        }
 
+    suite.test('Wait For bhyve machine running', function (t) {
         machinesCommon.waitForRunningMachine(CLIENT, BHYVE_MACHINE_UUID,
             function waitForMachineCb(err) {
-                t.ifError(err);
-
                 if (err) {
                     // Skip machine tests when machine creation fails
                     BHYVE_MACHINE_UUID = false;
                 }
 
+                t.ifError(err);
                 t.end();
         });
-    }
-);
+    });
 
-test('GetMachine has disks - Disks sum to quota/flex disk package',
-    function (t) {
-    if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
-        return;
-    }
 
-    var expectedDisks = [
-        {
-            boot: true,
-            image: BHYVE_IMAGE_UUID,
-            size: 14336,
-            id: 'eea4e223-dee6-44dc-a7e1-71f996e534f0'
-        },
-        {
-            size: 512,
-            id: 'dea91a7f-5fe3-4408-b25a-994c97a7975e'
-        },
-        {
-            size: 512,
-            id: 'c41ce11e-bed2-45d2-bdb8-8dc889ed8ced'
-        }
-    ];
-
-    CLIENT.get('/my/machines/' + BHYVE_MACHINE_UUID,
-        function gotMachine(err, req, res, body) {
-            t.ifError(err);
-            t.strictEqual(body.flexible, true);
-            checkDisksQuota(t, body.disks,
-                BHYVE_128_FLEXIBLE.quota);
-            t.deepEqual(body.disks, expectedDisks);
+    suite.test('GetMachine has disks', function (t) {
+        if (!BHYVE_MACHINE_UUID) {
+            t.ok(true, 'No bhyve VM provisioned. Test skipped');
             t.end();
-    });
-});
+            return;
+        }
 
-test('Delete bhyve test vm - Disks sum to quota/flexible disk package',
-    function (t) {
-    if (!BHYVE_MACHINE_UUID) {
-        t.end();
-        return;
-    }
+        var expectedDisks = [
+            {
+                boot: true,
+                image: BHYVE_IMAGE_UUID,
+                size: 14336,
+                id: 'eea4e223-dee6-44dc-a7e1-71f996e534f0'
+            },
+            {
+                size: 512,
+                id: 'dea91a7f-5fe3-4408-b25a-994c97a7975e'
+            },
+            {
+                size: 512,
+                id: 'c41ce11e-bed2-45d2-bdb8-8dc889ed8ced'
+            }
+        ];
+
+        CLIENT.get('/my/machines/' + BHYVE_MACHINE_UUID,
+            function gotMachine(err, req, res, body) {
+                t.ifError(err);
+                t.strictEqual(body.flexible, true);
+                checkDisksQuota(t, body.disks,
+                    BHYVE_128_FLEXIBLE.quota);
+                t.deepEqual(body.disks, expectedDisks);
+                t.end();
+        });
+    });
 
-    deleteMachine(t, CLIENT, OTHER, BHYVE_MACHINE_UUID,
-        function onDelete() {
-            BHYVE_MACHINE_UUID = undefined;
+    suite.test('Delete bhyve test vm', function (t) {
+        if (!BHYVE_MACHINE_UUID) {
             t.end();
+            return;
+        }
+
+        deleteMachine(t, CLIENT, OTHER, BHYVE_MACHINE_UUID,
+            function onDelete() {
+                BHYVE_MACHINE_UUID = undefined;
+                t.end();
+        });
     });
+
+    suite.end();
 });
 
-test('CreateMachine - Disks with remaining/flex disk package',
-    function (t) {
+
+test('Disks with remaining/flex disk package', function (suite) {
     if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
+        suite.ok(true, 'No bhyve images. Test skipped');
+        suite.end();
         return;
     }
 
-    var obj = {
-        disks: [
-            { id: 'eea4e223-dee6-44dc-a7e1-71f996e534f0' },
-            { id: 'dea91a7f-5fe3-4408-b25a-994c97a7975e', size: 'remaining'},
-            { id: 'c41ce11e-bed2-45d2-bdb8-8dc889ed8ced', size: 512 }
-        ],
-        image: BHYVE_IMAGE_UUID,
-        name: 'bhyve-disks-flex-package-test-' + process.pid,
-        package: BHYVE_128_FLEXIBLE.uuid
-    };
-
-    CLIENT.post('/my/machines', obj,
-        function createdMachine(err, req, res, body) {
-            t.ifError(err, 'POST /my/machines error');
-            t.equal(res.statusCode, 201, 'POST /my/machines status');
-            common.checkHeaders(t, res.headers);
-            t.equal(res.headers.location,
-                util.format('/%s/machines/%s', CLIENT.login, body.id));
-            t.ok(body, 'POST /my/machines body');
-            checkMachine(t, body);
-
-            BHYVE_MACHINE_UUID = body.id;
-
-            // Handy to output this to stdout in order to poke around COAL:
-            t.ok(true, 'Requested provision of bhyve machine: ' +
-                BHYVE_MACHINE_UUID);
-            t.end();
+    suite.test('CreateMachine', function (t) {
+        var obj = {
+            disks: [
+                { id: 'eea4e223-dee6-44dc-a7e1-71f996e534f0' },
+                {
+                    id: 'dea91a7f-5fe3-4408-b25a-994c97a7975e',
+                    size: 'remaining'
+                },
+                { id: 'c41ce11e-bed2-45d2-bdb8-8dc889ed8ced', size: 512 }
+            ],
+            image: BHYVE_IMAGE_UUID,
+            name: 'bhyve-disks-flex-package-test-' + process.pid,
+            package: BHYVE_128_FLEXIBLE.uuid
+        };
+
+        CLIENT.post('/my/machines', obj,
+            function createdMachine(err, req, res, body) {
+                t.ifError(err, 'POST /my/machines error');
+                t.equal(res.statusCode, 201, 'POST /my/machines status');
+                common.checkHeaders(t, res.headers);
+                t.equal(res.headers.location,
+                    util.format('/%s/machines/%s', CLIENT.login, body.id));
+                t.ok(body, 'POST /my/machines body');
+                checkMachine(t, body);
+
+                BHYVE_MACHINE_UUID = body.id;
+
+                // Handy to output this to stdout in order to poke around COAL:
+                t.ok(true, 'Requested provision of bhyve machine: ' +
+                    BHYVE_MACHINE_UUID);
+                t.end();
+        });
     });
-});
 
-test('Wait For bhyve machine running - Disks with remaining/flex disk package',
-    function (t) {
-        if (!BHYVE_IMAGE_UUID) {
-            t.ok(true, 'No bhyve images. Test skipped');
-            t.end();
-            return;
-        }
 
+    suite.test('Wait For bhyve machine running', function (t) {
         machinesCommon.waitForRunningMachine(CLIENT, BHYVE_MACHINE_UUID,
             function waitForMachineCb(err) {
-                t.ifError(err);
-
                 if (err) {
                     // Skip machine tests when machine creation fails
                     BHYVE_MACHINE_UUID = false;
                 }
 
+                t.ifError(err);
                 t.end();
         });
-    }
-);
-
-test('GetMachine has disks - Disks with remaining/flex disk package',
-    function (t) {
-    if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
-        return;
-    }
+    });
 
-    var expectedDisks = [
-        {
-            boot: true,
-            image: BHYVE_IMAGE_UUID,
-            size: BHYVE_IMAGE.image_size,
-            id: 'eea4e223-dee6-44dc-a7e1-71f996e534f0'
-        },
-        {
-            size: BHYVE_128_FLEXIBLE.quota - BHYVE_IMAGE.image_size - 512,
-            id: 'dea91a7f-5fe3-4408-b25a-994c97a7975e'
-        },
-        {
-            size: 512,
-            id: 'c41ce11e-bed2-45d2-bdb8-8dc889ed8ced'
-        }
-    ];
-
-    CLIENT.get('/my/machines/' + BHYVE_MACHINE_UUID,
-        function gotMachine(err, req, res, body) {
-            t.ifError(err);
-            t.strictEqual(body.flexible, true);
-            checkDisksQuota(t, body.disks,
-                BHYVE_128_FLEXIBLE.quota - body.free_space);
-            t.deepEqual(body.disks, expectedDisks);
+    suite.test('GetMachine has disks', function (t) {
+        if (!BHYVE_MACHINE_UUID) {
+            t.ok(true, 'No bhyve VM provisioned. Test skipped');
             t.end();
-    });
-});
+            return;
+        }
 
-test('Delete bhyve test vm - Disks with remaining/flex disk package',
-    function (t) {
-    if (!BHYVE_MACHINE_UUID) {
-        t.end();
-        return;
-    }
+        var expectedDisks = [
+            {
+                boot: true,
+                image: BHYVE_IMAGE_UUID,
+                size: BHYVE_IMAGE.image_size,
+                id: 'eea4e223-dee6-44dc-a7e1-71f996e534f0'
+            },
+            {
+                size: BHYVE_128_FLEXIBLE.quota - BHYVE_IMAGE.image_size - 512,
+                id: 'dea91a7f-5fe3-4408-b25a-994c97a7975e'
+            },
+            {
+                size: 512,
+                id: 'c41ce11e-bed2-45d2-bdb8-8dc889ed8ced'
+            }
+        ];
+
+        CLIENT.get('/my/machines/' + BHYVE_MACHINE_UUID,
+            function gotMachine(err, req, res, body) {
+                t.ifError(err);
+                t.strictEqual(body.flexible, true);
+                checkDisksQuota(t, body.disks,
+                    BHYVE_128_FLEXIBLE.quota - body.free_space);
+                t.deepEqual(body.disks, expectedDisks);
+                t.end();
+        });
+    });
 
-    deleteMachine(t, CLIENT, OTHER, BHYVE_MACHINE_UUID,
-        function onDelete() {
-            BHYVE_MACHINE_UUID = undefined;
+    suite.test('Delete bhyve test vm', function (t) {
+        if (!BHYVE_MACHINE_UUID) {
             t.end();
+            return;
+        }
+
+        deleteMachine(t, CLIENT, OTHER, BHYVE_MACHINE_UUID,
+            function onDelete() {
+                BHYVE_MACHINE_UUID = undefined;
+                t.end();
+        });
     });
+
+    suite.end();
+
 });
 
-test('CreateMachine - No disks/flexible disk package', function (t) {
+
+test('No disks/flexible disk package', function (suite) {
     if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
+        suite.ok(true, 'No bhyve images. Test skipped');
+        suite.end();
         return;
     }
 
-    var obj = {
-        image: BHYVE_IMAGE_UUID,
-        name: 'bhyve-no-disks-flex-package-test-' + process.pid,
-        package: BHYVE_128_FLEXIBLE.uuid
-    };
-
-    CLIENT.post('/my/machines', obj,
-        function createdMachine(err, req, res, body) {
-            t.ifError(err, 'POST /my/machines error');
-            t.equal(res.statusCode, 201, 'POST /my/machines status');
-            common.checkHeaders(t, res.headers);
-            t.equal(res.headers.location,
-                util.format('/%s/machines/%s', CLIENT.login, body.id));
-            t.ok(body, 'POST /my/machines body');
-            checkMachine(t, body);
-
-            BHYVE_MACHINE_UUID = body.id;
-
-            t.ok(true, 'Requested provision of bhyve machine: ' +
-                BHYVE_MACHINE_UUID);
-            t.end();
+    suite.test('CreateMachine', function (t) {
+        var obj = {
+            image: BHYVE_IMAGE_UUID,
+            name: 'bhyve-no-disks-flex-package-test-' + process.pid,
+            package: BHYVE_128_FLEXIBLE.uuid
+        };
+
+        CLIENT.post('/my/machines', obj,
+            function createdMachine(err, req, res, body) {
+                t.ifError(err, 'POST /my/machines error');
+                t.equal(res.statusCode, 201, 'POST /my/machines status');
+                common.checkHeaders(t, res.headers);
+                t.equal(res.headers.location,
+                    util.format('/%s/machines/%s', CLIENT.login, body.id));
+                t.ok(body, 'POST /my/machines body');
+                checkMachine(t, body);
+
+                BHYVE_MACHINE_UUID = body.id;
+
+                t.ok(true, 'Requested provision of bhyve machine: ' +
+                    BHYVE_MACHINE_UUID);
+                t.end();
+        });
     });
-});
 
-test('Wait For bhyve machine running - No disks/flexible disk package',
-    function (t) {
-        if (!BHYVE_IMAGE_UUID) {
-            t.ok(true, 'No bhyve images. Test skipped');
-            t.end();
-            return;
-        }
 
+    suite.test('Wait For bhyve machine running', function (t) {
         machinesCommon.waitForRunningMachine(CLIENT, BHYVE_MACHINE_UUID,
             function waitForMachineCb(err) {
-                t.ifError(err);
-
                 if (err) {
                     // Skip machine tests when machine creation fails
                     BHYVE_MACHINE_UUID = false;
                 }
 
+                t.ifError(err);
                 t.end();
         });
-    }
-);
-
-test('GetMachine has disks - No disks/flexible disk package', function (t) {
-    if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
-        return;
-    }
+    });
 
-    var expectedDisks = [
-        {
-            boot: true,
-            image: BHYVE_IMAGE_UUID,
-            size: BHYVE_IMAGE.image_size
-        },
-        {
-            size: BHYVE_128_FLEXIBLE.quota - BHYVE_IMAGE.image_size
-        }
-    ];
-
-    CLIENT.get('/my/machines/' + BHYVE_MACHINE_UUID,
-        function gotMachine(err, req, res, body) {
-            t.ifError(err);
-            checkDisksQuota(t, body.disks,
-                BHYVE_128_FLEXIBLE.quota - body.free_space);
-            checkDisks(t, expectedDisks, body.disks);
-            t.strictEqual(body.flexible, true);
+    suite.test('GetMachine has disks', function (t) {
+        if (!BHYVE_MACHINE_UUID) {
+            t.ok(true, 'No bhyve VM provisioned. Test skipped');
             t.end();
-    });
-});
+            return;
+        }
 
-test('Delete bhyve test vm - No disks/flexible disk package', function (t) {
-    if (!BHYVE_MACHINE_UUID) {
-        t.end();
-        return;
-    }
+        var expectedDisks = [
+            {
+                boot: true,
+                image: BHYVE_IMAGE_UUID,
+                size: BHYVE_IMAGE.image_size
+            },
+            {
+                size: BHYVE_128_FLEXIBLE.quota - BHYVE_IMAGE.image_size
+            }
+        ];
+
+        CLIENT.get('/my/machines/' + BHYVE_MACHINE_UUID,
+            function gotMachine(err, req, res, body) {
+                t.ifError(err);
+                checkDisksQuota(t, body.disks,
+                    BHYVE_128_FLEXIBLE.quota - body.free_space);
+                checkDisks(t, expectedDisks, body.disks);
+                t.strictEqual(body.flexible, true);
+                t.end();
+        });
+    });
 
-    deleteMachine(t, CLIENT, OTHER, BHYVE_MACHINE_UUID,
-        function onDelete() {
-            BHYVE_MACHINE_UUID = undefined;
+    suite.test('Delete bhyve test vm', function (t) {
+        if (!BHYVE_MACHINE_UUID) {
             t.end();
+            return;
+        }
+
+        deleteMachine(t, CLIENT, OTHER, BHYVE_MACHINE_UUID,
+            function onDelete() {
+                BHYVE_MACHINE_UUID = undefined;
+                t.end();
+        });
     });
+
+    suite.end();
+
 });
 
-test('CreateMachine - Package has remaining boot disk', function (t) {
+
+test('Package has remaining boot disk', function (suite) {
     if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
+        suite.ok(true, 'No bhyve images. Test skipped');
+        suite.end();
         return;
     }
 
-    var obj = {
-        image: BHYVE_IMAGE_UUID,
-        name: 'bhyve-remaining-test-' + process.pid,
-        package: BHYVE_128_FLEXIBLE_REMAINING.uuid
-    };
-
-    CLIENT.post('/my/machines', obj,
-        function createdMachine(err, req, res, body) {
-            t.ifError(err, 'POST /my/machines error');
-            t.equal(res.statusCode, 201, 'POST /my/machines status');
-            common.checkHeaders(t, res.headers);
-            t.equal(res.headers.location,
-                util.format('/%s/machines/%s', CLIENT.login, body.id));
-            t.ok(body, 'POST /my/machines body');
-            checkMachine(t, body);
-
-            BHYVE_MACHINE_UUID = body.id;
-
-            t.ok(true, 'Requested provision of bhyve machine: ' +
-                BHYVE_MACHINE_UUID);
-            t.end();
+    suite.test('CreateMachine', function (t) {
+        var obj = {
+            image: BHYVE_IMAGE_UUID,
+            name: 'bhyve-remaining-test-' + process.pid,
+            package: BHYVE_128_FLEXIBLE_REMAINING.uuid
+        };
+
+        CLIENT.post('/my/machines', obj,
+            function createdMachine(err, req, res, body) {
+                t.ifError(err, 'POST /my/machines error');
+                t.equal(res.statusCode, 201, 'POST /my/machines status');
+                common.checkHeaders(t, res.headers);
+                t.equal(res.headers.location,
+                    util.format('/%s/machines/%s', CLIENT.login, body.id));
+                t.ok(body, 'POST /my/machines body');
+                checkMachine(t, body);
+
+                BHYVE_MACHINE_UUID = body.id;
+
+                t.ok(true, 'Requested provision of bhyve machine: ' +
+                    BHYVE_MACHINE_UUID);
+                t.end();
+        });
     });
-});
 
-test('Wait For bhyve machine running - Package has remaining boot disk',
-    function (t) {
-    if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
-        return;
-    }
+    suite.test('Wait For bhyve machine running', function (t) {
+        machinesCommon.waitForRunningMachine(CLIENT, BHYVE_MACHINE_UUID,
+            function waitForMachineCb(err) {
+                if (err) {
+                    // Skip machine tests when machine creation fails
+                    BHYVE_MACHINE_UUID = false;
+                }
+
+                t.ifError(err);
+                t.end();
+        });
+    });
 
-    machinesCommon.waitForRunningMachine(CLIENT, BHYVE_MACHINE_UUID,
-        function waitForMachineCb(err) {
-            t.ifError(err);
+    suite.test('GetMachine has disks', function (t) {
+        if (!BHYVE_MACHINE_UUID) {
+            t.ok(true, 'No bhyve VM provisioned. Test skipped');
+            t.end();
+            return;
+        }
 
-            if (err) {
-                // Skip machine tests when machine creation fails
-                BHYVE_MACHINE_UUID = false;
+        var expectedDisks = [
+            {
+                boot: true,
+                image: BHYVE_IMAGE_UUID,
+                size: BHYVE_128_FLEXIBLE_REMAINING.quota
             }
+        ];
 
-            t.end();
+        CLIENT.get('/my/machines/' + BHYVE_MACHINE_UUID,
+            function gotMachine(err, req, res, body) {
+                t.ifError(err);
+                checkDisks(t, expectedDisks, body.disks);
+                checkDisksQuota(t, body.disks,
+                    BHYVE_128_FLEXIBLE_REMAINING.quota);
+                t.strictEqual(body.flexible, true);
+                t.strictEqual(body.free_space, 0);
+                t.end();
+        });
     });
-});
-
-test('GetMachine has disks - Package has remaining boot disk', function (t) {
-    if (!BHYVE_IMAGE_UUID) {
-        t.ok(true, 'No bhyve images. Test skipped');
-        t.end();
-        return;
-    }
 
-    var expectedDisks = [
-        {
-            boot: true,
-            image: BHYVE_IMAGE_UUID,
-            size: BHYVE_128_FLEXIBLE_REMAINING.quota
-        }
-    ];
-
-    CLIENT.get('/my/machines/' + BHYVE_MACHINE_UUID,
-        function gotMachine(err, req, res, body) {
-            t.ifError(err);
-            checkDisks(t, expectedDisks, body.disks);
-            checkDisksQuota(t, body.disks, BHYVE_128_FLEXIBLE_REMAINING.quota);
-            t.strictEqual(body.flexible, true);
-            t.strictEqual(body.free_space, 0);
+    suite.test('Delete bhyve test vm', function (t) {
+        if (!BHYVE_MACHINE_UUID) {
             t.end();
+            return;
+        }
+
+        deleteMachine(t, CLIENT, OTHER, BHYVE_MACHINE_UUID,
+            function onDelete() {
+                BHYVE_MACHINE_UUID = undefined;
+                t.end();
+        });
     });
-});
 
-test('Delete bhyve test vm - Package has remaining boot disk', function (t) {
-    if (!BHYVE_MACHINE_UUID) {
-        t.end();
-        return;
-    }
+    suite.end();
 
-    deleteMachine(t, CLIENT, OTHER, BHYVE_MACHINE_UUID,
-        function onDelete() {
-            BHYVE_MACHINE_UUID = undefined;
-            t.end();
-    });
 });
 
 test('teardown', function (t) {
-- 
2.21.0

