commit 76eb504392f8267fb47d8d890d6266f386c028da (refs/changes/59/5559/3)
Author: Trent Mick <trentm@gmail.com>
Date:   2019-02-08T16:30:04-08:00 (8 months ago)
    
    TRITON-1203 test-sapi fails in nightly-1 in instances.test.js "invalid zone parameters" case
    Reviewed by: Josh Wilsdon <josh@wilsdon.ca>

diff --git a/CHANGES.md b/CHANGES.md
index 3a8bc0c..f356cee 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -1,5 +1,10 @@
 # sdc-sapi changelog
 
+# 2.1.1
+
+- TRITON-1035, TRITON-1203: Fixing the SAPI test suite to work when there
+  are mockcloud CNs in play.
+
 # 2.1.0
 
 - SAPI-294 This is a significant change to SAPI zone setup and config handling.
diff --git a/package.json b/package.json
index dc29e1c..f3d7b06 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "sapi",
   "description": "Triton Services and Configuration API",
-  "version": "2.1.0",
+  "version": "2.1.1",
   "author": "Joyent (joyent.com)",
   "license": "MPL-2.0",
   "private": true,
diff --git a/test/instances.test.js b/test/instances.test.js
index dd30284..3d90e3d 100644
--- a/test/instances.test.js
+++ b/test/instances.test.js
@@ -762,12 +762,12 @@ test('invalid zone parameters', function (t) {
     inst.params = {};
 
     /*
-     * This setting for the instance's RAM will pass initial VMAPI
-     * validation but ultimately cause VMAPI.createVm() to fail.
+     * To test VMAPI CreateVm failure in server allocation (aka DAPI) we
+     * can use `internal_metadata.force_designation_failure = true`.
      */
-    inst.params.ram = 10 * 1024 * 1024 * 1024 * 1024;  // 10 TB
-    inst.params.networks = [ { name: 'admin', ip: '192.168.1.1'} ];
-    inst.params.alias = common.getUniqueTestResourceName('sapitest-invalidram');
+    inst.params.internal_metadata = {force_designation_failure: true};
+    inst.params.networks = [ { name: 'admin' } ];
+    inst.params.alias = common.getUniqueTestResourceName('invalid-zone-params');
 
     var uri_inst = '/instances/' + inst.uuid;
 
@@ -780,19 +780,24 @@ test('invalid zone parameters', function (t) {
         },
         function (_, cb) {
             client.post(URI, inst, function (err, req, res, obj) {
-                if (process.env.TEST_SAPI_PROTO_MODE === 'true')
+                if (process.env.TEST_SAPI_PROTO_MODE === 'true') {
                     t.equal(res.statusCode, 200);
-                else
-                    t.equal(res.statusCode, 500);
+                } else {
+                    t.equal(res.statusCode, 500,
+                        sprintf('expected 500 status code from SAPI ' +
+                            'CreateInstance: got %s, instance uuid %s',
+                            res.statusCode, inst.uuid));
+                }
                 cb();
             });
         },
         function (_, cb) {
             client.get(uri_inst, function (err, req, res, obj) {
-                if (process.env.TEST_SAPI_PROTO_MODE === 'true')
+                if (process.env.TEST_SAPI_PROTO_MODE === 'true') {
                     t.equal(res.statusCode, 200);
-                else
+                } else {
                     t.equal(res.statusCode, 404);
+                }
                 cb();
             });
         },
