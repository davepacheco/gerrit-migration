commit 7babace383e3f0a542c66617dcec7577888247a2 (refs/changes/59/5559/1)
Author: Trent Mick <trentm@gmail.com>
Date:   2019-02-08T16:06:08-08:00 (8 months ago)
    
    TRITON-1203 test-sapi fails in nightly-1 in instances.test.js "invalid zone parameters" case

diff --git a/test/instances.test.js b/test/instances.test.js
index dd30284..a8bdd46 100644
--- a/test/instances.test.js
+++ b/test/instances.test.js
@@ -762,12 +762,21 @@ test('invalid zone parameters', function (t) {
     inst.params = {};
 
     /*
-     * This setting for the instance's RAM will pass initial VMAPI
-     * validation but ultimately cause VMAPI.createVm() to fail.
+     * Use VM params that we expect will cause VMAPI CreateVm to fail.
+     *
+     * We can't use just any param and set it bogus because SAPI's
+     * CreateInstance doesn't use a VM payload params from the SAPI instance
+     * params (e.g. it hardcodes brand=joyent-minimal).
+     *
+     * We can't use a large RAM and expect DAPI server selection to fail,
+     * because if `ALLOC_FILTER_MIN_RESOURCES` is configured on CNAPI
+     * (https://github.com/joyent/sdc-cnapi/blob/master/docs/index.md#sapi-configuration),
+     * which is done by 'sdcadm post-setup dev-headnode-prov', then large
+     * RAM will not stop a provision.
      */
-    inst.params.ram = 10 * 1024 * 1024 * 1024 * 1024;  // 10 TB
-    inst.params.networks = [ { name: 'admin', ip: '192.168.1.1'} ];
-    inst.params.alias = common.getUniqueTestResourceName('sapitest-invalidram');
+    inst.params.ram = -1;
+    inst.params.networks = [ { name: 'admin' } ];
+    inst.params.alias = common.getUniqueTestResourceName('invalid-zone-params');
 
     var uri_inst = '/instances/' + inst.uuid;
 
@@ -780,19 +789,26 @@ test('invalid zone parameters', function (t) {
         },
         function (_, cb) {
             client.post(URI, inst, function (err, req, res, obj) {
-                if (process.env.TEST_SAPI_PROTO_MODE === 'true')
+                if (process.env.TEST_SAPI_PROTO_MODE === 'true') {
                     t.equal(res.statusCode, 200);
-                else
-                    t.equal(res.statusCode, 500);
+                } else {
+                    // We expect a 409 here because we expect VMAPI CreateVm
+                    // to fail.
+                    t.equal(res.statusCode, 409,
+                        sprintf('expected 409 status code from SAPI ' +
+                            'CreateInstance: got %s, instance uuid %s',
+                            res.statusCode, inst.uuid));
+                }
                 cb();
             });
         },
         function (_, cb) {
             client.get(uri_inst, function (err, req, res, obj) {
-                if (process.env.TEST_SAPI_PROTO_MODE === 'true')
+                if (process.env.TEST_SAPI_PROTO_MODE === 'true') {
                     t.equal(res.statusCode, 200);
-                else
+                } else {
                     t.equal(res.statusCode, 404);
+                }
                 cb();
             });
         },
