commit 4608bbf7078383cf8ddbffab33cf9cf87000c620 (refs/changes/96/1796/3)
Author: Marsell Kukuljevic <marsell@joyent.com>
Date:   2017-04-19T21:10:13+12:00 (2 years, 6 months ago)
    
    CNAPI-706: Add a command in bin/ which shows the reasoning behind dapi's most recent allocation

diff --git a/bin/alloc-reasons.sh b/bin/alloc-reasons.sh
new file mode 100755
index 0000000..9f38171
--- /dev/null
+++ b/bin/alloc-reasons.sh
@@ -0,0 +1,52 @@
+#!/bin/bash
+
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+# This command shows the reasoning that dapi (embedded within cnapi)
+# used when deciding where the most recent allocation should go. When
+# dapi makes an allocation, it dumps a gzipped & base64-encoded JSON
+# blob into cnapi's logs which includes a great deal of information about
+# the allocation, including the 'steps' attribute; that attribute is what
+# we seek to extract here.
+#
+# If this command receives an argument, it is assumed to be a VM UUID
+# (which the command converts to a request_id), or a request_id. The request_id
+# is used to search through cnapi's logs.
+#
+# If the VM UUID isn't provided, the command will only display the most
+# recent dapi dump -- this may omit details if an allocation took several
+# trips through dapi to complete.
+
+if [[ -n "$TRACE" ]]; then
+    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
+    set -o xtrace
+fi
+set -o errexit
+set -o pipefail
+
+MAX_RESULTS=1
+ID=snapshot
+
+if [[ $1 ]]; then
+    MAX_RESULTS=9999
+
+    UUID=$1
+    WFAPI_URL=$(json wfapi.url < /opt/smartdc/cnapi/config/config.json)
+    ID=$(curl -s $WFAPI_URL/jobs?vm_uuid=$UUID | json -Ha params.x-request-id | tail -1)
+
+    if [[ -z "$ID" ]]; then
+        ID=$UUID
+    fi
+fi
+
+grep -h $ID $(ls /var/log/sdc/upload/cnapi_* 2> /dev/null | sort) $(svcs -L cnapi) \
+    | bunyan -c this.snapshot -o bunyan --strict \
+    | tail -$MAX_RESULTS \
+    | json -ga snapshot \
+| while read snap; do
+    echo "$snap" | /opt/local/bin/base64 -d | gunzip - | json steps
+done
