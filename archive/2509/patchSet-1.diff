From 0bbff91de2cac0b6b3d8ac3e5dd3838411dc943f Mon Sep 17 00:00:00 2001
From: Jerry Jelinek <jerry.jelinek@joyent.com>
Date: Thu, 7 Sep 2017 17:27:03 +0000
Subject: [PATCH] OS-6276 lx set TCP_KEEPINTVL fails

---
 .../uts/common/brand/lx/syscall/lx_socket.c   | 35 +++++++++++++++++++
 1 file changed, 35 insertions(+)

diff --git a/usr/src/uts/common/brand/lx/syscall/lx_socket.c b/usr/src/uts/common/brand/lx/syscall/lx_socket.c
index 81e39199cf..2c8cec5819 100644
--- a/usr/src/uts/common/brand/lx/syscall/lx_socket.c
+++ b/usr/src/uts/common/brand/lx/syscall/lx_socket.c
@@ -2905,6 +2905,41 @@ lx_setsockopt_tcp(sonode_t *so, int optname, void *optval, socklen_t optlen)
 		return (error);
 	}
 
+	if (optname == LX_TCP_KEEPINTVL) {
+		/*
+		 * When setting TCP_KEEPINTVL there is an unfortunate set of
+		 * dependencies. TCP_KEEPINTVL must be <= TCP_RTO_MAX and
+		 * TCP_RTO_MAX must be <= TCP_ABORT_THRESHOLD. Thus, we may
+		 * have to increase one or both of these in order to increase
+		 * TCP_KEEPINTVL. Note that TCP_KEEPINTVL is passed in seconds
+		 * but TCP_RTO_MAX and TCP_ABORT_THRESHOLD are in milliseconds.
+		 */
+		uint32_t new_val = *(uint_t *)optval * 1000;
+		uint32_t rto_max, abrt_thresh;
+		uint32_t rto_len = sizeof (rto_max);
+		uint32_t at_len = sizeof (abrt_thresh);
+
+		if ((error = socket_getsockopt(so, IPPROTO_TCP, TCP_RTO_MAX,
+		    &rto_max, &rto_len, 0, CRED())) != 0)
+			return (error);
+		if ((error = socket_getsockopt(so, IPPROTO_TCP,
+		    TCP_ABORT_THRESHOLD, &abrt_thresh, &at_len, 0,
+		    CRED())) != 0)
+			return (error);
+		if (new_val > abrt_thresh) {
+			if ((error = socket_setsockopt(so, IPPROTO_TCP,
+			    TCP_ABORT_THRESHOLD, &new_val, sizeof (new_val),
+			    CRED())) != 0)
+				return (error);
+		}
+		if (new_val > rto_max) {
+			if ((error = socket_setsockopt(so, IPPROTO_TCP,
+			    TCP_RTO_MAX, &new_val, sizeof (new_val),
+			    CRED())) != 0)
+				return (error);
+		}
+	}
+
 	if (!lx_sockopt_lookup(sockopts_tbl, &optname, &optlen)) {
 		return (ENOPROTOOPT);
 	}
-- 
2.21.0

