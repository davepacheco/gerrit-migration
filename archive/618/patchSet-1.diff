commit 940b9bb482ed4b59b3b5edb5079b9f4b77a40cba (refs/changes/18/618/1)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2016-10-06T14:44:05-07:00 (3 years ago)
    
    joyent/node-cueball#11 improve general test coverage

diff --git a/test/basic.test.js b/test/basic.test.js
index f7c2f57..6f9b022 100644
--- a/test/basic.test.js
+++ b/test/basic.test.js
@@ -161,3 +161,245 @@ test('substates', function (t) {
 		t.end();
 	});
 });
+
+test('validTransitions', function (t) {
+	var Class = function () {
+		FSM.call(this, 'initial');
+	};
+	util.inherits(Class, FSM);
+	Class.prototype.state_initial = function (S) {
+		S.validTransitions(['next']);
+		S.on(this, 'foo', function () {
+			S.gotoState('next');
+		});
+		S.on(this, 'foo2', function () {
+			S.gotoState('next2');
+		});
+	};
+	Class.prototype.state_next = function (S) {
+		S.validTransitions([]);
+	};
+	Class.prototype.state_next2 = function (S) {
+		S.validTransitions([]);
+	};
+
+	var c = new Class();
+	var history = [];
+	c.on('stateChanged', function (st) {
+		history.push(st);
+	});
+	t.ok(c.isInState('initial'));
+	c.emit('foo');
+	setImmediate(function () {
+		t.ok(c.isInState('next'));
+		t.deepEqual(history, ['initial', 'next']);
+
+		var c2 = new Class();
+		history = [];
+		c2.on('stateChanged', function (st) {
+			history.push(st);
+		});
+
+		t.throws(function () {
+			c2.emit('foo2');
+		});
+
+		setImmediate(function () {
+			t.ok(c2.isInState('initial'));
+			t.deepEqual(history, ['initial']);
+			t.end();
+		});
+	});
+});
+
+test('unknown state', function (t) {
+	var Class = function () {
+		FSM.call(this, 'initial');
+	};
+	util.inherits(Class, FSM);
+	Class.prototype.state_initial = function (S) {
+		S.on(this, 'foo', function () {
+			S.gotoState('next');
+		});
+		S.on(this, 'bar', function () {
+			S.gotoState('initial.bad');
+		});
+	};
+
+	var c = new Class();
+	t.ok(c.isInState('initial'));
+	t.throws(function () {
+		c.emit('foo');
+	});
+	c = new Class();
+	t.throws(function () {
+		c.emit('bar');
+	});
+	t.end();
+});
+
+test('callbacks', function (t) {
+	var e = new EventEmitter();
+
+	var Class = function () {
+		FSM.call(this, 'initial');
+	};
+	util.inherits(Class, FSM);
+	Class.prototype.state_initial = function (S) {
+		e.on('foo', S.callback(function () {
+			S.gotoState('next');
+		}));
+		e.on('foobar', S.callback(function () {
+			S.gotoState('next2');
+		}));
+	};
+	Class.prototype.state_next = function (S) {
+		S.validTransitions([]);
+	};
+	Class.prototype.state_next2 = function (S) {
+		S.validTransitions([]);
+	};
+
+	var c = new Class();
+	t.ok(c.isInState('initial'));
+	e.emit('foo');
+	t.ok(c.isInState('next'));
+	e.emit('foobar');
+	t.ok(c.isInState('next'));
+	t.end();
+});
+
+test('timeouts', function (t) {
+	var Class = function () {
+		FSM.call(this, 's1');
+	};
+	util.inherits(Class, FSM);
+	Class.prototype.state_s1 = function (S) {
+		S.on(this, 'foo', function () {
+			S.gotoState('s2');
+		});
+		S.timeout(50, function () {
+			S.gotoState('s3');
+		});
+	};
+	Class.prototype.state_s2 = function (S) {
+		S.timeout(50, function () {
+			S.gotoState('s1');
+		});
+	};
+	Class.prototype.state_s3 = function (S) {
+		S.on(this, 'foo', function () {
+			S.gotoState('s1');
+		});
+	};
+
+	var c = new Class();
+	t.ok(c.isInState('s1'));
+	c.emit('foo');
+	t.ok(c.isInState('s2'));
+
+	setTimeout(function () {
+		t.ok(c.isInState('s1'));
+
+		setTimeout(function () {
+			t.ok(c.isInState('s3'));
+			t.end();
+		}, 70);
+	}, 70);
+});
+
+test('all state events', function (t) {
+	var Class = function () {
+		this.allStateEvent('foo');
+		FSM.call(this, 's1');
+	};
+	util.inherits(Class, FSM);
+	Class.prototype.state_s1 = function (S) {
+		S.on(this, 'foo', function () {
+			S.gotoState('s2');
+		});
+		S.on(this, 'bar', function () {
+			S.gotoState('s3');
+		});
+	};
+	Class.prototype.state_s2 = function (S) {
+		S.timeout(50, function () {
+			S.gotoState('s1');
+		});
+	};
+	Class.prototype.state_s3 = function (S) {
+		S.on(this, 'foo', function () {
+			S.gotoState('s1');
+		});
+	};
+
+	var c = new Class();
+	t.ok(c.isInState('s1'));
+	c.emit('bar');
+	t.ok(c.isInState('s3'));
+	c.emit('foo');
+	t.ok(c.isInState('s1'));
+	t.throws(function () {
+		c.emit('foo');
+	});
+	t.end();
+});
+
+test('interacting FSMs', function (t) {
+	var ClassA = function () {
+		this.other = new ClassB(this);
+		FSM.call(this, 's1');
+	};
+	util.inherits(ClassA, FSM);
+	ClassA.prototype.state_s1 = function (S) {
+		S.on(this, 'foo', function () {
+			S.gotoState('s2');
+		});
+	};
+	ClassA.prototype.state_s2 = function (S) {
+		S.on(this.other, 'baz', function () {
+			S.gotoState('s3');
+		});
+		this.emit('bar');
+	};
+	ClassA.prototype.state_s3 = function (S) {
+		this.emit('baz');
+		S.gotoState('s1');
+	};
+
+	var ClassB = function (other) {
+		this.other = other;
+		FSM.call(this, 's1');
+	};
+	util.inherits(ClassB, FSM);
+	ClassB.prototype.state_s1 = function (S) {
+		S.on(this.other, 'bar', function () {
+			S.gotoState('s2');
+		});
+	};
+	ClassB.prototype.state_s2 = function (S) {
+		S.on(this.other, 'baz', function () {
+			S.gotoState('s3');
+		});
+		this.emit('baz');
+	};
+	ClassB.prototype.state_s3 = function (S) {
+		S.gotoState('s1');
+	};
+
+	var a = new ClassA();
+	var b = a.other;
+
+	t.ok(a.isInState('s1'));
+	t.ok(b.isInState('s1'));
+
+	a.emit('foo');
+
+	t.ok(a.isInState('s1'));
+	t.ok(b.isInState('s1'));
+
+	t.deepEqual(a.fsm_history, ['s1', 's2', 's3', 's1']);
+	t.deepEqual(b.fsm_history, ['s1', 's2', 's3', 's1']);
+
+	t.end();
+});
