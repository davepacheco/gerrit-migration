From eb5b80ab222dc0bc4e20ff309a5b6896c4cf89b5 Mon Sep 17 00:00:00 2001
From: Tim Foster <tim.foster@joyent.com>
Date: Fri, 14 Jun 2019 12:29:04 +0100
Subject: [PATCH] TOOLS-2264 buildimage should write a sane etc/motd

---
 tools/buildimage/bin/buildimage | 71 +++++++++++++++++++++++++++++++++
 tools/buildimage/package.json   |  1 +
 tools/mk/Makefile.targ          | 11 +++++
 3 files changed, 83 insertions(+)

diff --git a/tools/buildimage/bin/buildimage b/tools/buildimage/bin/buildimage
index 1b7b08f..d793f38 100755
--- a/tools/buildimage/bin/buildimage
+++ b/tools/buildimage/bin/buildimage
@@ -17,6 +17,7 @@ var url = require('url');
 
 var assert = require('assert-plus');
 var dashdash = require('dashdash');
+var extsprintf = require('extsprintf');
 var uuidv4 = require('uuid/v4');
 var vasync = require('vasync');
 
@@ -24,6 +25,7 @@ var CLI = require('../lib/imgadm/lib/cli');
 var imgadmCommon = require('../lib/imgadm/lib/common');
 var indent = imgadmCommon.indent;
 
+var sprintf = extsprintf.sprintf;
 
 var CHROOT_MOUNT_DIRS = ['/dev', '/lib', '/proc', '/sbin', '/usr'];
 var CLI_OPTIONS = [
@@ -50,6 +52,11 @@ var CLI_OPTIONS = [
         help: 'A JSON object with manifest data. Must have at least name and version. [required]',
         helpArg: '{"name": "blah", "version": "1.0.0", ...}'
     },
+    {   names: ['motd', 'M'],
+        type: 'bool',
+        help: 'write an image motd file based on image metadata, origin image and git info',
+        default: false
+    },
     {
         names: ['upgrade_first', 'u'],
         type: 'bool',
@@ -74,6 +81,12 @@ var CLI_OPTIONS = [
         help: 'prefix name for output zfs and imgmanifest files.',
         helpArg: 'PREFIX'
     },
+    {
+        names: ['source_repo', 'S'],
+        type: 'string',
+        help: 'git repo source, for use in -M motd message',
+        helpArg: 'URL'
+    },
     {
         names: ['verbose', 'v'],
         type: 'bool',
@@ -514,6 +527,61 @@ function removeZonerootConfigDir(opts, callback) {
     });
 }
 
+function writeMotd(opts, callback) {
+    assert.object(opts, 'opts');
+    assert.bool(opts.motd, 'opts.motd');
+    assert.optionalString(opts.source_repo, 'opts.source_repo');
+    assert.string(opts.image, 'opts.image');
+    assert.string(opts.mountpoint, 'opts.mountpoint');
+    assert.string(opts.manifest.description, 'opts.manifest.description');
+    assert.string(opts.manifest.version, 'opts.manifest.version');
+
+    assert.func(callback, 'callback');
+
+    if (!opts.motd) {
+        return callback();
+    }
+
+    logLine('writing motd...');
+
+    var motd_data = {};
+    motd_data['desc'] = opts.manifest.description;
+    motd_data['stamp'] = opts.manifest.version;
+    motd_data['source_repo'] = opts.source_repo;
+
+    // setup imgadm in order to obtain information about the origin image,
+    // which we should have downloaded by the time we're calling this function.
+    var cli = new CLI();
+    opts.cli = cli;
+
+    cli.init({}, {}, function _onInit(imgadm_err) {
+        if (imgadm_err) {
+            callback(imgadm_err);
+            return;
+        }
+        opts.dataroot = cli.tool.DEFAULT_ZPOOL;
+        var getOpts = {uuid: opts.image, zpool: opts.dataroot, children: false};
+        cli.tool.getImage(getOpts, function (err, imageInfo) {
+            if (err) {
+                callback(err);
+                return;
+            }
+            motd_data['origin_desc'] = (
+                imageInfo.manifest.name + '@' + imageInfo.manifest.version);
+
+            // bikeshed here.
+            var motd = ' =  J O Y E N T  =\n\n';
+            motd += sprintf(
+                '    %s (%s)\n', motd_data['desc'], motd_data['stamp']);
+            motd += sprintf('    %s\n', motd_data['source_repo']);
+            motd += sprintf('    %s\n\n', motd_data['origin_desc']);
+            fs.writeFileSync(opts.mountpoint + '/root/etc/motd', motd);
+            callback();
+            return;
+        });
+    });
+}
+
 function doChrootUmount(mountObj, callback) {
     assert.object(mountObj, 'mountObj');
     assert.string(mountObj.dest, 'mountObj.dest');
@@ -727,6 +795,7 @@ function buildImage(opts, callback) {
             pkgAudit,
             pkginCleanup,
             removeZonerootConfigDir,
+            writeMotd,
             unsetupChroot,
             cleanupZoneAnalog,
             createImage,
@@ -864,9 +933,11 @@ function main() {
         image: opts.image,
         image_prefix: opts.image_prefix,
         manifest: manifest,
+        motd: opts.motd,
         upgrade_first: opts.upgrade_first,
         packages: packages,
         pkg_audit: opts.pkg_audit,
+        source_repo: opts.source_repo,
         verbose: opts.verbose
     }, function _onBuild(err) {
         if (err) {
diff --git a/tools/buildimage/package.json b/tools/buildimage/package.json
index cc90e35..dc2bba8 100644
--- a/tools/buildimage/package.json
+++ b/tools/buildimage/package.json
@@ -7,6 +7,7 @@
     "dependencies": {
         "assert-plus": "1.0.0",
         "dashdash": "1.14.1",
+        "extsprintf": "1.4.0",
         "uuid": "3.3.2",
         "vasync": "2.2.0"
     },
diff --git a/tools/mk/Makefile.targ b/tools/mk/Makefile.targ
index 2b8734b..a6f42d7 100644
--- a/tools/mk/Makefile.targ
+++ b/tools/mk/Makefile.targ
@@ -464,6 +464,16 @@ else
 BUILDIMAGE_PKGSRC_ARGS =
 endif
 
+#
+# If buildimage should not create an etc/motd file for the image, set
+# BUILDIMAGE_SKIP_MOTD.
+#
+ifndef BUILDIMAGE_SKIP_MOTD
+BUILDIMAGE_MOTD_ARGS = -M -S "$$(git -C $(TOP) remote get-url origin)"
+else
+BUILDIMAGE_MOTD_ARGS =
+endif
+
 #
 # BUILDIMAGE_PKG should nearly always be set to $(TOP)/$(RELEASE_TARBALL),
 # but ensure RELEASE_TARBALL is set before setting that default.
@@ -504,6 +514,7 @@ buildimage: stamp-buildimage-prep release $(AGENTS:%=%-prebuilt)
 		-m '$(BUILDIMAGE_MF)' \
 		$(BUILDIMAGE_DO_PKGSRC_UPGRADE_ARGS) \
 		$(BUILDIMAGE_PKGSRC_ARGS) \
+		$(BUILDIMAGE_MOTD_ARGS) \
 		-a \
 		-P $(NAME)-zfs
 	cp /tmp/$(NAME)-zfs-$(BUILDIMAGE_VERSION).zfs.gz $(ENGBLD_BITS_DIR)/$(NAME)
-- 
2.21.0

