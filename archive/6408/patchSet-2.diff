commit d227f151e2a61ea5a24a25503264e94eea2c6017
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2019-06-06T18:20:47-07:00 (4 months ago)
    
    joyent/node-zkstream#46 ZKConnectionFSM does not emit anything on outstanding requests when closing

diff --git a/lib/connection-fsm.js b/lib/connection-fsm.js
index f568bb7..93552af 100644
--- a/lib/connection-fsm.js
+++ b/lib/connection-fsm.js
@@ -337,6 +337,16 @@ ZKConnectionFSM.prototype.state_closed = function (S) {
 	var self = this;
 	S.immediate(function () {
 		self.emit('close');
+
+		/*
+		 * Emit errors on any remaining outstanding requests. If we
+		 * don't do this they could hang forever.
+		 */
+		var err = new mod_errors.ZKProtocolError('CONNECTION_LOSS',
+		    'Connection closed.');
+		Object.keys(self.zcf_reqs).forEach(function (xid) {
+			self.zcf_reqs[xid].emit('error', err);
+		});
 	});
 };
 
diff --git a/package.json b/package.json
index 3b2dabe..10b30d8 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "zkstream",
-  "version": "0.11.5",
+  "version": "0.11.6",
   "description": "",
   "repository": {
     "type": "git",
diff --git a/test/basic.test.js b/test/basic.test.js
index c863756..3981802 100644
--- a/test/basic.test.js
+++ b/test/basic.test.js
@@ -1313,6 +1313,46 @@ mod_tape.test('session resumption with watcher (cod)', function (t) {
 	}
 });
 
+mod_tape.test('clean close cancelled request error (#46)', function (t) {
+	var zkc2 = new mod_zkc.Client({
+		log: log,
+		address: '127.0.0.1',
+		port: 2181
+	});
+
+	var ev2 = [];
+	zkc2.on('connect', ev2.push.bind(ev2, 'connect'));
+	zkc2.on('session', ev2.push.bind(ev2, 'session'));
+	zkc2.on('expire', ev2.push.bind(ev2, 'expire'));
+	zkc2.on('disconnect', ev2.push.bind(ev2, 'disconnect'));
+
+	zkc2.on('close', function () {
+		t.deepEqual(ev2,
+		    ['session', 'connect', 'disconnect']);
+		t.end();
+	});
+
+	zkc2.once('connect', function () {
+		var conn = zkc2.getSession().getConnection();
+		var sock = conn.zcf_socket;
+		t.ok(sock.listeners('error').length > 0);
+		sock.unpipe();
+
+		var data = new Buffer('hello again');
+		zkc2.create('/foo5', data, {}, function (err) {
+			t.ok(err);
+			t.ok(/Connection closed\./.test(err.toString()));
+			zkc2.close();
+		});
+		setImmediate(function () {
+			conn.close();
+		});
+		setTimeout(function () {
+			sock.emit('error', new Error('dead'));
+		}, 1000);
+	});
+});
+
 mod_tape.test('stop zk server', function (t) {
 	zk.on('stateChanged', function (st) {
 		if (st === 'stopped')
