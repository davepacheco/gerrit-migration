commit 897dd77b4135aec3b670e5fd29b0d1775ce27c6d (refs/changes/39/3839/5)
Author: Hans Rosenfeld <hans.rosenfeld@joyent.com>
Date:   2018-05-09T14:20:16+02:00 (1 year, 5 months ago)
    
    OS-6793 vmm malloc/free are inefficient

diff --git a/usr/src/uts/i86pc/io/vmm/vmm_sol_glue.c b/usr/src/uts/i86pc/io/vmm/vmm_sol_glue.c
index a58e77bb02..042b92b19a 100644
--- a/usr/src/uts/i86pc/io/vmm/vmm_sol_glue.c
+++ b/usr/src/uts/i86pc/io/vmm/vmm_sol_glue.c
@@ -51,6 +51,7 @@
 #include <sys/id_space.h>
 #include <sys/psm_defs.h>
 #include <sys/smp_impldefs.h>
+#include <sys/modhash.h>
 
 #include <sys/x86_archext.h>
 
@@ -144,12 +145,56 @@ smp_rendezvous(void (* setup_func)(void *), void (* action_func)(void *),
 
 struct kmem_item {
 	void			*addr;
-	void			*paddr;
 	size_t			size;
-	LIST_ENTRY(kmem_item)	next;
 };
 static kmutex_t kmem_items_lock;
-static LIST_HEAD(, kmem_item) kmem_items;
+
+static mod_hash_t *vmm_alloc_hash;
+unsigned int vmm_alloc_hash_nchains = 16381;
+unsigned int vmm_alloc_hash_size = PAGESIZE;
+
+static void
+vmm_alloc_hash_valdtor(mod_hash_val_t val)
+{
+	struct kmem_item *i = (struct kmem_item *)val;
+
+	kmem_free(i->addr, i->size);
+	kmem_free(i, sizeof (struct kmem_item));
+}
+
+static void
+vmm_alloc_init(void)
+{
+	vmm_alloc_hash = mod_hash_create_ptrhash("vmm_alloc_hash",
+	    vmm_alloc_hash_nchains, vmm_alloc_hash_valdtor,
+	    vmm_alloc_hash_size);
+
+	VERIFY(vmm_alloc_hash != NULL);
+}
+
+static uint_t vmm_alloc_check(mod_hash_key_t key, mod_hash_val_t *val, void *ret)
+{
+	struct kmem_item *i = (struct kmem_item *)val;
+	boolean_t *empty = (boolean_t *)ret;
+
+	cmn_err(CE_WARN, "!vmm_alloc_check: hash not empty: %p, %d", i->addr,
+	    i->size);
+
+	*empty = B_FALSE;
+
+	return (MH_WALK_CONTINUE);
+}
+
+static void
+vmm_alloc_cleanup(void)
+{
+	boolean_t empty = B_TRUE;
+
+	mod_hash_walk(vmm_alloc_hash, vmm_alloc_check, (void *)&empty);
+	ASSERT(empty);
+
+	mod_hash_destroy_ptrhash(vmm_alloc_hash);
+}
 
 void *
 malloc(unsigned long size, struct malloc_type *mtp, int flags)
@@ -162,18 +207,28 @@ malloc(unsigned long size, struct malloc_type *mtp, int flags)
 		kmem_flag = KM_NOSLEEP;
 
 	if (flags & M_ZERO) {
-		p = kmem_zalloc(size + sizeof (struct kmem_item), kmem_flag);
+		p = kmem_zalloc(size, kmem_flag);
 	} else {
-		p = kmem_alloc(size + sizeof (struct kmem_item), kmem_flag);
+		p = kmem_alloc(size, kmem_flag);
+	}
+
+	if (p == NULL)
+		return (NULL);
+
+	i = kmem_zalloc(sizeof (struct kmem_item), kmem_flag);
+
+	if (i == NULL) {
+		kmem_free(p, size);
+		return (NULL);
 	}
 
 	mutex_enter(&kmem_items_lock);
-	i = p + size;
 	i->addr = p;
-	i->paddr = (void *)PHYS_TO_DMAP(vtophys(p));
 	i->size = size;
 
-	LIST_INSERT_HEAD(&kmem_items, i, next);
+	VERIFY(mod_hash_insert(vmm_alloc_hash,
+	    (mod_hash_key_t)PHYS_TO_DMAP(vtophys(p)), (mod_hash_val_t)i) == 0);
+
 	mutex_exit(&kmem_items_lock);
 
 	return (p);
@@ -182,19 +237,10 @@ malloc(unsigned long size, struct malloc_type *mtp, int flags)
 void
 free(void *addr, struct malloc_type *mtp)
 {
-	struct kmem_item	*i;
-
 	mutex_enter(&kmem_items_lock);
-	LIST_FOREACH(i, &kmem_items, next) {
-		if (i->addr == addr ||
-		    i->paddr == addr)
-			break;
-	}
-	VERIFY(i != NULL);
-	LIST_REMOVE(i, next);
+	VERIFY(mod_hash_destroy(vmm_alloc_hash,
+	    (mod_hash_key_t)PHYS_TO_DMAP(vtophys(addr))) == 0);
 	mutex_exit(&kmem_items_lock);
-
-	kmem_free(i->addr, i->size + sizeof (struct kmem_item));
 }
 
 extern void *contig_alloc(size_t, ddi_dma_attr_t *, uintptr_t, int);
@@ -609,6 +655,7 @@ fpusave(void *arg)
 void
 vmm_sol_glue_init(void)
 {
+	vmm_alloc_init();
 	vmm_cpuid_init();
 	fpu_save_area_init();
 	unr_idx = 0;
@@ -618,6 +665,7 @@ void
 vmm_sol_glue_cleanup(void)
 {
 	fpu_save_area_cleanup();
+	vmm_alloc_cleanup();
 }
 
 
