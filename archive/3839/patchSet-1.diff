commit de0fbcf31663f47c0bab4663d4638d987ca96780 (refs/changes/39/3839/1)
Author: Hans Rosenfeld <hans.rosenfeld@joyent.com>
Date:   2018-04-18T22:26:35+02:00 (1 year, 6 months ago)
    
    OS-6793 vmm malloc/free are inefficient

diff --git a/usr/src/uts/i86pc/io/vmm/vmm_sol_glue.c b/usr/src/uts/i86pc/io/vmm/vmm_sol_glue.c
index a58e77bb02..2b09e10c15 100644
--- a/usr/src/uts/i86pc/io/vmm/vmm_sol_glue.c
+++ b/usr/src/uts/i86pc/io/vmm/vmm_sol_glue.c
@@ -51,6 +51,7 @@
 #include <sys/id_space.h>
 #include <sys/psm_defs.h>
 #include <sys/smp_impldefs.h>
+#include <sys/modhash.h>
 
 #include <sys/x86_archext.h>
 
@@ -146,10 +147,35 @@ struct kmem_item {
 	void			*addr;
 	void			*paddr;
 	size_t			size;
-	LIST_ENTRY(kmem_item)	next;
 };
 static kmutex_t kmem_items_lock;
-static LIST_HEAD(, kmem_item) kmem_items;
+
+static mod_hash_t *alloc_hash;
+static volatile int alloc_hash_nchains = 16381;
+static volatile int alloc_hash_size = PAGESIZE;
+
+void
+vmm_alloc_hash_valdtor(mod_hash_val_t val)
+{
+	struct kmem_item *i = (struct kmem_item *)val;
+
+	kmem_free(i->addr, i->size + sizeof (struct kmem_item));
+}
+
+void
+vmm_alloc_init(void)
+{
+	alloc_hash = mod_hash_create_ptrhash("vmm_alloc_hash",
+	    alloc_hash_nchains, vmm_alloc_hash_valdtor, alloc_hash_size);
+
+	VERIFY(alloc_hash != NULL);
+}
+
+void
+vmm_alloc_cleanup(void)
+{
+	mod_hash_destroy_ptrhash(alloc_hash);
+}
 
 void *
 malloc(unsigned long size, struct malloc_type *mtp, int flags)
@@ -173,7 +199,9 @@ malloc(unsigned long size, struct malloc_type *mtp, int flags)
 	i->paddr = (void *)PHYS_TO_DMAP(vtophys(p));
 	i->size = size;
 
-	LIST_INSERT_HEAD(&kmem_items, i, next);
+	VERIFY(mod_hash_insert(alloc_hash, (mod_hash_key_t)i->paddr,
+	   (mod_hash_val_t)i) == 0);
+
 	mutex_exit(&kmem_items_lock);
 
 	return (p);
@@ -182,19 +210,10 @@ malloc(unsigned long size, struct malloc_type *mtp, int flags)
 void
 free(void *addr, struct malloc_type *mtp)
 {
-	struct kmem_item	*i;
-
 	mutex_enter(&kmem_items_lock);
-	LIST_FOREACH(i, &kmem_items, next) {
-		if (i->addr == addr ||
-		    i->paddr == addr)
-			break;
-	}
-	VERIFY(i != NULL);
-	LIST_REMOVE(i, next);
+	VERIFY(mod_hash_destroy(alloc_hash,
+	    (mod_hash_key_t)PHYS_TO_DMAP(vtophys(addr))) == 0);
 	mutex_exit(&kmem_items_lock);
-
-	kmem_free(i->addr, i->size + sizeof (struct kmem_item));
 }
 
 extern void *contig_alloc(size_t, ddi_dma_attr_t *, uintptr_t, int);
@@ -609,6 +628,7 @@ fpusave(void *arg)
 void
 vmm_sol_glue_init(void)
 {
+	vmm_alloc_init();
 	vmm_cpuid_init();
 	fpu_save_area_init();
 	unr_idx = 0;
@@ -618,6 +638,7 @@ void
 vmm_sol_glue_cleanup(void)
 {
 	fpu_save_area_cleanup();
+	vmm_alloc_cleanup();
 }
 
 
