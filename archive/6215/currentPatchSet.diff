commit cc5b96cd9426cafb4ebc919b882c3f530a447c4b
Author: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
Date:   2019-05-08T17:02:27-06:00 (5 months ago)
    
    MANTA-4254 Store sharks data as a text array in postgres

diff --git a/Cargo.lock b/Cargo.lock
index d22f9f6..a96ee19 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -139,6 +139,7 @@ dependencies = [
  "slog-bunyan 2.1.1-pre (git+https://github.com/kellymclaughlin/bunyan?branch=build-on-smartos)",
  "slog-term 2.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "tokio 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)",
+ "tokio-postgres 0.4.0-rc.2 (registry+https://github.com/rust-lang/crates.io-index)",
  "url 1.7.2 (registry+https://github.com/rust-lang/crates.io-index)",
  "uuid 0.7.4 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
diff --git a/Cargo.toml b/Cargo.toml
index f59f9a4..60292bb 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -24,6 +24,7 @@ serde_json = "1.0.36"
 slog = { version = "2.4.1", features = [ "max_level_trace" ] }
 slog-bunyan = { git = "https://github.com/kellymclaughlin/bunyan", branch = "build-on-smartos" }
 tokio = "0.1.14"
+tokio-postgres = "0.4.0-rc.2"
 uuid = { version = "0.7", features = ["serde", "v4"] }
 
 [patch.crates-io]
diff --git a/src/object.rs b/src/object.rs
index 6916666..f2ac6fb 100644
--- a/src/object.rs
+++ b/src/object.rs
@@ -3,28 +3,89 @@
  */
 
 use std::collections::HashMap;
+use std::error::Error;
 use std::io::Error as IOError;
 use std::io::ErrorKind as IOErrorKind;
 use std::vec::Vec;
 
 use base64;
 use chrono;
+use postgres::types::{FromSql, IsNull, ToSql, Type};
+use tokio_postgres::{accepts, to_sql_checked};
+use serde_derive::{Deserialize, Serialize};
+use serde_json::{Value, json};
+use slog::{Logger, debug};
+use uuid::Uuid;
+
 use cueball::connection_pool::ConnectionPool;
 use cueball::backend::Backend;
 use cueball_static_resolver::StaticIpResolver;
 use cueball_postgres_connection::PostgresConnection;
 use rust_fast::protocol::{FastMessage, FastMessageData};
-use serde_derive::{Deserialize, Serialize};
-use serde_json::{Value, json};
-use slog::{Logger, debug};
-use uuid::Uuid;
 
 use crate::util::Rows;
 
 type Hstore = HashMap<String, Option<String>>;
-type TextArray = Vec<String>;
 type Timestamptz = chrono::DateTime<chrono::Utc>;
 
+
+/// A type that represents the information about the datacenter and storage node
+/// id of a copy of an object's data.
+///
+/// The incoming representation of the sharks data is a JSON array of objects
+/// where each object has two keys: datacenter and manta_storage_id. The custom
+/// ToSQL instance for the this type converts the each object in this
+/// representation into a String that represents the same data in fewer
+/// bytes. The postgres column type for the sharks column is a text array.
+///
+/// Likewise, the custom FromSql instance for the type converts the members of
+/// the text array format stored in the database back into an instance of
+/// StorageNodeIdentifier.
+#[derive(Debug, Serialize, Deserialize)]
+pub struct StorageNodeIdentifier {
+    pub datacenter: String,
+    pub manta_storage_id: String
+}
+
+impl ToString for StorageNodeIdentifier {
+    fn to_string(&self) -> String {
+        [&self.datacenter, ":", &self.manta_storage_id].concat()
+    }
+}
+
+impl From<String> for StorageNodeIdentifier {
+    fn from(s: String) -> Self {
+        let v: Vec<&str> = s.split(':').collect();
+        StorageNodeIdentifier {
+            datacenter: String::from(v[0]),
+            manta_storage_id: String::from(v[1])
+        }
+    }
+}
+
+impl ToSql for StorageNodeIdentifier {
+    fn to_sql(&self, ty: &Type, w: &mut Vec<u8>) ->
+        Result<IsNull, Box<dyn Error + Sync + Send>> {
+            <String as ToSql>::to_sql(&self.to_string(), ty, w)
+    }
+
+    accepts!(TEXT);
+
+    to_sql_checked!();
+}
+
+impl<'a> FromSql<'a> for StorageNodeIdentifier {
+    fn from_sql(ty: &Type, raw: &'a [u8]) ->
+        Result<StorageNodeIdentifier, Box<dyn Error + Sync + Send>> {
+            String::from_sql(ty, raw)
+                .and_then(|s| {
+                    Ok(StorageNodeIdentifier::from(s))
+                })
+    }
+
+    accepts!(TEXT);
+}
+
 #[derive(Debug, Serialize, Deserialize)]
 pub struct GetObjectPayload {
     pub owner     : Uuid,
@@ -47,7 +108,7 @@ pub struct ObjectResponse {
     pub content_md5    : String,
     pub content_type   : String,
     pub headers        : Hstore,
-    pub sharks         : TextArray,
+    pub sharks         : Vec<StorageNodeIdentifier>,
     pub properties     : Option<Value>
 }
 
@@ -61,7 +122,7 @@ pub struct PutObjectPayload {
     pub content_md5    : String,
     pub content_type   : String,
     pub headers        : Hstore,
-    pub sharks         : TextArray,
+    pub sharks         : Vec<StorageNodeIdentifier>,
     pub properties     : Option<Value>
 }
 
diff --git a/tests/rpc_handlers.rs b/tests/rpc_handlers.rs
index 38b295f..307005d 100644
--- a/tests/rpc_handlers.rs
+++ b/tests/rpc_handlers.rs
@@ -246,6 +246,15 @@ fn verify_rpc_handlers() {
 
 
     // Create an object
+    let shark1 = object::StorageNodeIdentifier {
+        datacenter: "us-east-1".into(),
+        manta_storage_id: "1.stor.us-east.joyent.com".into(),
+    };
+    let shark2 = object::StorageNodeIdentifier {
+        datacenter: "us-east-2".into(),
+        manta_storage_id: "3.stor.us-east.joyent.com".into(),
+    };
+
     let put_object_payload = object::PutObjectPayload {
         owner: owner_id,
         bucket_id,
@@ -255,8 +264,8 @@ fn verify_rpc_handlers() {
         content_md5: "xzY5jJbR9rcrMRhlcmi/8g==".into(),
         content_type: "text/plain".into(),
         headers: HashMap::new(),
-        sharks: Vec::new(),
-        properties: None
+        sharks: vec![shark1, shark2],
+        properties: None,
     };
 
     let put_object_json = serde_json::to_value(put_object_payload).unwrap();
