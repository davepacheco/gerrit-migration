From 1c83c53f31a7a4ed2e41ccfc827661273de9cc00 Mon Sep 17 00:00:00 2001
From: Dave Eddy <dave@daveeddy.com>
Date: Tue, 28 Mar 2017 17:24:17 -0400
Subject: [PATCH] OS-6006 VM.start fails for zones that don't stay running very
 long Reviewed by: Josh Wilsdon <josh@wilsdon.ca> Reviewed by: Dave Eddy
 <dave.eddy@joyent.com>

---
 src/vm/node_modules/VM.js | 389 ++++++++++++++++++++++----------------
 1 file changed, 228 insertions(+), 161 deletions(-)

diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index 358d6d1f..2d3a510a 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -92,6 +92,7 @@ var properties = require('./props');
 var Qmp = require('/usr/vm/node_modules/qmp').Qmp;
 var spawn = cp.spawn;
 var sprintf = require('/usr/node/node_modules/sprintf').sprintf;
+var SyseventStream = require('/usr/vm/node_modules/sysevent-stream');
 var tty = require('tty');
 var util = require('util');
 var utils = require('./utils');
@@ -117,6 +118,10 @@ exports.KVM_MEM_OVERHEAD = KVM_MEM_OVERHEAD;
 
 // global handle for the zoneevent watcher
 var zoneevent;
+var zonewatcher = {
+    ref: 0,
+    stream: null
+};
 
 /*
  * zone states from libzonecfg/common/zonecfg_impl.h
@@ -3477,15 +3482,26 @@ exports.getSysinfo = function (args, options, callback)
  *
  * payload needs to have at least .zonename and .uuid
  *
+ * returns a function that can be called to cancel the waiter (will result
+ * in the callback being called as well)
+ *
  */
 exports.waitForZoneState = function (payload, state, options, callback)
 {
+    assert.object(payload, 'payload');
+    assert.string(payload.uuid, 'payload.uuid');
+    assert.string(payload.zonename, 'payload.zonename');
+    assert.string(state, 'state');
+    assert.object(options, 'options');
+    assert.func(callback, 'func');
+
     var log;
     var sysevent_state;
     var timeout;
     var timeout_secs = PROVISION_TIMEOUT;
     var tracers_obj;
     var watcher;
+    var transitions_opts;
 
     // options is optional
     if (arguments.length === 3) {
@@ -3517,7 +3533,7 @@ exports.waitForZoneState = function (payload, state, options, callback)
         sysevent_state = 'uninitialized';
     }
 
-    function done() {
+    function done(err) {
         if (watcher) {
             watcher.cleanup();
         }
@@ -3525,20 +3541,24 @@ exports.waitForZoneState = function (payload, state, options, callback)
             clearTimeout(timeout);
             timeout = null;
         }
+        callback(err);
     }
 
-    function waitForZoneStateHandler(err, obj) {
-        if (err) {
-            done();
-            callback(err);
-            return;
-        }
+    function waitForZoneStateHandler(obj) {
         log.trace('handler got: ' + JSON.stringify(obj));
         if (obj.zonename !== payload.zonename) {
             return;
         }
 
         if (obj.newstate === sysevent_state) {
+            log.debug('event seen: zone_state "%s" -> "%s"',
+                obj.oldstate, obj.newstate);
+
+            if (options.skipConfirmation) {
+                done();
+                return;
+            }
+
             // Load again to confirm
             VM.lookup({'zonename': obj.zonename},
                 {fields: ['zone_state'], log: log},
@@ -3546,14 +3566,12 @@ exports.waitForZoneState = function (payload, state, options, callback)
                     var handler_retry;
 
                     if (error) {
-                        done();
-                        callback(error);
+                        done(error);
                         return;
                     }
 
                     if (res.length !== 1) {
-                        done();
-                        callback(new Error('lookup could no find VM '
+                        done(new Error('lookup could not find VM '
                             + obj.zonename));
                         return;
                     }
@@ -3565,7 +3583,6 @@ exports.waitForZoneState = function (payload, state, options, callback)
                         log.debug('saw zone go to ' + obj.newstate + ' ('
                             + state + ') calling callback()');
                         done();
-                        callback();
                     } else if (timeout) {
                         // we saw a state change to a state we don't care about
                         // so if we've not timed out try reloading again in a
@@ -3574,7 +3591,7 @@ exports.waitForZoneState = function (payload, state, options, callback)
                             handler_retry = setTimeout(function () {
                                 if (timeout) {
                                     // try again if wait timeout is still set
-                                    waitForZoneStateHandler(null, obj);
+                                    waitForZoneStateHandler(obj);
                                 }
                                 handler_retry = null;
                             }, 1000);
@@ -3587,22 +3604,33 @@ exports.waitForZoneState = function (payload, state, options, callback)
                     } else {
                         // no timeout set and we're not at the correct state
                         log.error('failed to reach state: ' + state);
-                        callback(new Error('failed to reach state: ' + state));
+                        done(new Error('failed to reach state: ' + state));
                     }
                 }
             );
         }
     }
 
-    watcher = watchZoneTransitions(waitForZoneStateHandler, log);
+    transitions_opts = {
+        log: log,
+        stream: options.stream
+    };
+    watcher = watchZoneTransitions(transitions_opts, waitForZoneStateHandler,
+        function (err) {
+
+        if (err) {
+            // there was an error creating the zone watcher, we can't continue
+            done(err);
+        }
+    });
 
     timeout = setTimeout(function () {
         var err;
 
-        done();
         err = new Error('timed out waiting for zone to transition to ' + state);
         err.code = 'ETIMEOUT';
-        callback(err);
+
+        done(err);
     }, timeout_secs * 1000);
 
     // after we've started the watcher (if we checked before there'd be a race)
@@ -3612,16 +3640,16 @@ exports.waitForZoneState = function (payload, state, options, callback)
         function (err, obj) {
 
         if (err) {
-            done();
-            callback(err);
+            done(err);
         } else if (obj.hasOwnProperty('zone_state')
             && obj.zone_state === state) {
 
-            done();
             log.info('VM is in state ' + state);
-            callback(); // at correct state!
+            done(); // at correct state!
         }
     });
+
+    return done;
 };
 
 // handler() will be called with an object describing the transition for any
@@ -3631,108 +3659,100 @@ exports.waitForZoneState = function (payload, state, options, callback)
 // This function returns an object that includes a 'cleanup' property. The
 // value of this property is a function that must be called to free the listener
 // when the caller is done with it.
-function watchZoneTransitions(handler, log) {
-    var buffer = '';
-    var chunks;
-
-    assert(log, 'no logger passed to watchZoneTransitions()');
-
-    if (!zoneevent) {
-        zoneevent = new EventEmitter();
-
-        log.debug('/usr/vm/sbin/zoneevent');
-        zoneevent.watcher = spawn('/usr/vm/sbin/zoneevent', [],
-            {'customFds': [-1, -1, -1]});
-        log.debug('zoneevent running with pid ' + zoneevent.watcher.pid);
-
-        zoneevent.watcher.stdout.on('data', function (data) {
-            var chunk;
-            var obj;
-            var prev_msg;
-
-            buffer += data.toString();
-            chunks = buffer.split('\n');
-            while (chunks.length > 1) {
-                chunk = chunks.shift();
-                obj = JSON.parse(chunk);
-
-                if (obj === prev_msg) {
-                    // Note: sometimes sysevent emits multiple events for the
-                    // same status, we only want the first one here because just
-                    // because sysevent does it, doesn't make it right.
-                    log.debug('duplicate zoneevent message! '
-                        + JSON.stringify(obj));
-                } else if (zoneevent) {
-                    zoneevent.emit('zoneevent', null, obj);
-                }
-            }
-            buffer = chunks.pop();
-        });
+function watchZoneTransitions(opts, handler, cb) {
+    var stream;
 
-        // doesn't take input.
-        zoneevent.watcher.stdin.end();
-
-        zoneevent.watcher.on('exit', function (code) {
-            log.warn('zoneevent watcher ' + zoneevent.watcher.pid + ' exited: ',
-                JSON.stringify(code));
+    assert.object(opts, 'opts');
+    assert.object(opts.log, 'opts.log');
+    assert.optionalObject(opts.zonewatcher, 'opts.zonewatcher');
+    assert.func(handler, 'handler');
+    assert.func(cb, 'cb');
 
-            // watcher is dead.
-            zoneevent.watcher = null;
+    var log = opts.log;
 
-            // tell all the listeners of this zoneevent (if there are any) that
-            // we exited.  Then null it out so next time we'll make a new one.
-            if (zoneevent) {
-                zoneevent.emit('zoneevent', new Error('zoneevent watcher exited'
-                    + ' prematurely with code: ' + code));
-                zoneevent = null;
+    if (opts.stream) {
+        stream = opts.stream;
+        ready();
+    } else {
+        getZoneWatcher({log: log}, function (err, _stream) {
+            if (err) {
+                log.error({err: err}, 'getZoneWatcher failed');
+                cb(err);
+                return;
             }
+
+            stream = _stream;
+            ready();
         });
+    }
+
+    function ready() {
+        stream.on('data', ondata);
+        cb();
+    }
+
+    function ondata(ev) {
+        var obj = ev.data;
+        handler(obj);
+    }
+
+    // return a closure that includes the handler that was passed in
+    return ({
+        cleanup: function _handlerCleanup() {
+            if (stream) {
+                stream.removeListener('data', ondata);
+            }
+            freeZoneWatcher({log: log});
+        }
+    });
+}
 
-        zoneevent.cleanup = function _zoneeventCleanup(_handler) {
-            var res;
+function getZoneWatcher(opts, cb) {
+    assert.object(opts, 'opts');
+    assert.object(opts.log, 'opts.log');
+    assert.func(cb, 'cb');
 
-            log.debug('cleanup called w/ listeners: '
-                + util.inspect(zoneevent.listeners('zoneevent')));
-            zoneevent.removeListener('zoneevent', _handler);
-            if (zoneevent.listeners('zoneevent').length === 0) {
-                assert.ok(zoneevent.watcher, 'should have zoneevent.watcher');
+    var log = opts.log;
 
-                log.debug('zoneevent watcher ' + zoneevent.watcher.pid
-                    + ' cleanup called');
+    if (zonewatcher.ref++ > 0) {
+        assert(zonewatcher.stream, 'ref > 0 but no zone watcher');
+        log.debug({ref: zonewatcher.ref},
+            'getZoneWatcher using existing zone watcher');
+        cb(null, zonewatcher.stream);
+        return;
+    }
 
-                // destroy std{out,err} so we don't send more 'data' events
-                zoneevent.watcher.stdout.destroy();
-                zoneevent.watcher.stderr.destroy();
+    var ses_opts = {
+        logger: opts.log,
+        class: 'status',
+        channel: 'com.sun:zones:status'
+    };
+    zonewatcher.stream = new SyseventStream(ses_opts);
+    zonewatcher.stream.on('ready', function () {
+        log.debug('getZoneWatcher new zone watcher ready');
+        cb(null, zonewatcher.stream);
+    });
+}
 
-                // remove 'exit' listener so we don't fail on kill
-                zoneevent.watcher.removeAllListeners('exit');
+function freeZoneWatcher(opts) {
+    assert.object(opts, 'opts');
+    assert.object(opts.log, 'opts.log');
 
-                // kill the watcher so zoneevent child doesn't leak
-                log.debug({watcher_pid: zoneevent.watcher.pid},
-                    'killing watcher');
-                res = zoneevent.watcher.kill();
-                assert.ok(res, 'expected zoneevent.watcher.kill() to succeed');
-                assert.ok(zoneevent.watcher.killed,
-                    'expected watcher to be killed');
+    var log = opts.log;
 
-                zoneevent = null;
-            } else {
-                log.debug({
-                    watcher_pid: zoneevent.watcher.pid,
-                    listeners: zoneevent.listeners('zoneevent').length
-                }, 'still have listeners on this zoneevent');
-            }
-        };
+    if (zonewatcher.ref === 0) {
+        log.debug('freeZoneWatcher no zone watchers allocated');
+        assert(!zonewatcher.stream, 'stream exists while ref count is 0');
+        return;
     }
 
-    zoneevent.on('zoneevent', handler);
+    zonewatcher.ref--;
 
-    // return a closure that includes the handler that was passed in
-    return ({
-        cleanup: function _handlerCleanup() {
-            zoneevent.cleanup(handler);
-        }
-    });
+    if (zonewatcher.ref === 0) {
+        log.debug('freeZoneWatcher ref count is zero, stopping stream');
+        zonewatcher.stream.stop();
+        delete zonewatcher.stream;
+    }
 }
 
 function fixPayloadMemory(payload, vmobj, log)
@@ -10318,6 +10338,7 @@ function startZone(vmobj, opts, callback)
     var uuid = vmobj.uuid;
     var waited = false;
     var waitErr;
+    var zonestream;
 
     assert(log, 'no logger passed to startZone()');
 
@@ -10352,18 +10373,84 @@ function startZone(vmobj, opts, callback)
             }
             cb();
         }, function (cb) {
-            // do the booting
-            zoneadm(['-u', uuid, 'boot', '-X'], log, function (err, boot_fds) {
+            // get a zone watcher object if not passed in a waiting function
+            if (opts.state_waiter) {
+                cb();
+                return;
+            }
+
+            getZoneWatcher({log: log}, function (err, _stream) {
                 if (err) {
-                    log.error({err: err, stdout: boot_fds.stdout,
-                        stderr: boot_fds.stderr}, 'zoneadm failed to boot '
-                        + 'VM');
-                } else {
-                    log.debug({stdout: boot_fds.stdout,
-                        stderr: boot_fds.stderr}, 'zoneadm booted VM');
+                    cb(err);
+                    return;
                 }
-                cb(err);
+
+                zonestream = _stream;
+                cb();
             });
+        }, function (cb) {
+            var cancel;
+
+            vasync.parallel({funcs: [
+                function (cb2) {
+                    // if we already have a state_waiter we can skip blocking
+                    // on waitForZoneState
+                    if (opts.state_waiter) {
+                        assert(!zonestream,
+                            'zone stream set with state_waiter');
+                        cb2();
+                        return;
+                    }
+
+                    var _opts = {
+                        timeout: 30,
+                        log: log,
+                        skipConfirmation: true,
+                        stream: zonestream
+                    };
+                    cancel = VM.waitForZoneState(vmobj, 'running', _opts,
+                        function (err, result) {
+
+                        if (err) {
+                            if (err.code === 'ETIMEOUT') {
+                                log.info({err: err},
+                                    'timeout waiting for zone to go to '
+                                    + '"running"');
+                            } else {
+                                log.error({err: err},
+                                    'unknown error waiting for zone to '
+                                    + 'go to "running"');
+                            }
+                            cb2(err);
+                            return;
+                        }
+
+                        log.info('VM switched to "running"');
+                        cb2();
+                    });
+                }, function (cb2) {
+                    // do the booting
+                    zoneadm(['-u', uuid, 'boot', '-X'], log,
+                        function (err, boot_fds) {
+
+                        if (err) {
+                            log.error({err: err, stdout: boot_fds.stdout,
+                                stderr: boot_fds.stderr},
+                                'zoneadm failed to boot VM');
+                            if (cancel) {
+                                cancel();
+                            }
+                            cb2(err);
+                            return;
+                        }
+
+                        log.debug({stdout: boot_fds.stdout,
+                            stderr: boot_fds.stderr},
+                            'zoneadm booted VM');
+                        cb2();
+                    });
+                }
+            ]}, cb);
         }, function (cb) {
             // Ensure it booted. If caller passed in a function that can wait
             // for a zone to go to a state, we'll just call that.
@@ -10379,24 +10466,7 @@ function startZone(vmobj, opts, callback)
                 return;
             }
 
-            // with no opts.state_waiter, we use our own VM.waitForZoneState
-            VM.waitForZoneState(vmobj, 'running', {timeout: 30, log: log},
-                function (err, result) {
-
-                if (err) {
-                    if (err.code === 'ETIMEOUT') {
-                        log.info(err, 'timeout waiting for zone to go to '
-                            + '"running"');
-                    } else {
-                        log.error(err, 'unknown error waiting for zone to go'
-                            + ' "running"');
-                    }
-                } else {
-                    // zone got to running
-                    log.info('VM seems to have switched to "running"');
-                }
-                cb(err);
-            });
+            cb();
         }, function (cb) {
             if (vmobj.docker && vmobj.internal_metadata
                 && !vmobj.internal_metadata['docker:restartpolicy']) {
@@ -14291,38 +14361,35 @@ function doReboot(vmobj, options, callback)
     }
 
     async.series([function (cb) {
-        if (!reboot_async) {
-            watcherobj = watchZoneTransitions(function _rebootHandler(err, ze) {
-                if (!err && ze.zonename !== vmobj.zonename) {
-                    // not something we need to handle
-                    return;
-                }
+        if (reboot_async) {
+            cb();
+            return;
+        }
 
-                if (err) {
-                    // XXX what should we do here?
-                    log.error(err);
-                    return;
-                }
+        watcherobj = watchZoneTransitions({log: log},
+            function _rebootHandler(ze) {
+
+            if (ze.zonename !== vmobj.zonename) {
+                // not something we need to handle
+                return;
+            }
 
-                log.debug(ze); // TODO move to trace
+            log.trace(ze);
 
-                if (ze.newstate === 'running' && ze.oldstate !== 'running') {
-                    if (watcherobj) {
-                        // cleanup our watcher since we found what we're
-                        // looking for.
-                        if (cleanup) {
-                            cleanup();
-                            cleanup = null;
-                        }
+            if (ze.newstate === 'running' && ze.oldstate !== 'running') {
+                if (watcherobj) {
+                    // cleanup our watcher since we found what we're
+                    // looking for.
+                    if (cleanup) {
+                        cleanup();
+                        cleanup = null;
                     }
-
-                    reboot_complete = true;
                 }
-            }, log);
-            cleanup = watcherobj.cleanup;
-        }
 
-        cb();
+                reboot_complete = true;
+            }
+        }, cb);
+        cleanup = watcherobj.cleanup;
     }, function (cb) {
         var args;
 
-- 
2.21.0

