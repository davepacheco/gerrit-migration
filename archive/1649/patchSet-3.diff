From 81557891c54302b9a33eba126cce3eb03e98b490 Mon Sep 17 00:00:00 2001
From: Dave Eddy <dave@daveeddy.com>
Date: Thu, 16 Mar 2017 12:34:27 -0400
Subject: [PATCH] OS-6006 VM.start fails for zones that don't stay running very
 long

---
 src/vm/node_modules/VM.js | 122 ++++++++++++++++++++++++--------------
 1 file changed, 78 insertions(+), 44 deletions(-)

diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index 358d6d1f..004f707c 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -3477,6 +3477,9 @@ exports.getSysinfo = function (args, options, callback)
  *
  * payload needs to have at least .zonename and .uuid
  *
+ * returns a function that can be called to cancel the waiter (will result
+ * in the callback being called as well)
+ *
  */
 exports.waitForZoneState = function (payload, state, options, callback)
 {
@@ -3517,7 +3520,7 @@ exports.waitForZoneState = function (payload, state, options, callback)
         sysevent_state = 'uninitialized';
     }
 
-    function done() {
+    function done(err) {
         if (watcher) {
             watcher.cleanup();
         }
@@ -3525,12 +3528,12 @@ exports.waitForZoneState = function (payload, state, options, callback)
             clearTimeout(timeout);
             timeout = null;
         }
+        callback(err);
     }
 
     function waitForZoneStateHandler(err, obj) {
         if (err) {
-            done();
-            callback(err);
+            done(err);
             return;
         }
         log.trace('handler got: ' + JSON.stringify(obj));
@@ -3539,6 +3542,14 @@ exports.waitForZoneState = function (payload, state, options, callback)
         }
 
         if (obj.newstate === sysevent_state) {
+            log.debug('event seen: zone_state "%s" -> "%s"',
+                obj.oldstate, obj.newstate);
+
+            if (options.skipConfirmation) {
+                done();
+                return;
+            }
+
             // Load again to confirm
             VM.lookup({'zonename': obj.zonename},
                 {fields: ['zone_state'], log: log},
@@ -3546,14 +3557,12 @@ exports.waitForZoneState = function (payload, state, options, callback)
                     var handler_retry;
 
                     if (error) {
-                        done();
-                        callback(error);
+                        done(error);
                         return;
                     }
 
                     if (res.length !== 1) {
-                        done();
-                        callback(new Error('lookup could no find VM '
+                        done(new Error('lookup could not find VM '
                             + obj.zonename));
                         return;
                     }
@@ -3565,7 +3574,6 @@ exports.waitForZoneState = function (payload, state, options, callback)
                         log.debug('saw zone go to ' + obj.newstate + ' ('
                             + state + ') calling callback()');
                         done();
-                        callback();
                     } else if (timeout) {
                         // we saw a state change to a state we don't care about
                         // so if we've not timed out try reloading again in a
@@ -3587,7 +3595,7 @@ exports.waitForZoneState = function (payload, state, options, callback)
                     } else {
                         // no timeout set and we're not at the correct state
                         log.error('failed to reach state: ' + state);
-                        callback(new Error('failed to reach state: ' + state));
+                        done(new Error('failed to reach state: ' + state));
                     }
                 }
             );
@@ -3599,10 +3607,10 @@ exports.waitForZoneState = function (payload, state, options, callback)
     timeout = setTimeout(function () {
         var err;
 
-        done();
         err = new Error('timed out waiting for zone to transition to ' + state);
         err.code = 'ETIMEOUT';
-        callback(err);
+
+        done(err);
     }, timeout_secs * 1000);
 
     // after we've started the watcher (if we checked before there'd be a race)
@@ -3612,16 +3620,16 @@ exports.waitForZoneState = function (payload, state, options, callback)
         function (err, obj) {
 
         if (err) {
-            done();
-            callback(err);
+            done(err);
         } else if (obj.hasOwnProperty('zone_state')
             && obj.zone_state === state) {
 
-            done();
             log.info('VM is in state ' + state);
-            callback(); // at correct state!
+            done(); // at correct state!
         }
     });
+
+    return done;
 };
 
 // handler() will be called with an object describing the transition for any
@@ -10352,18 +10360,61 @@ function startZone(vmobj, opts, callback)
             }
             cb();
         }, function (cb) {
-            // do the booting
-            zoneadm(['-u', uuid, 'boot', '-X'], log, function (err, boot_fds) {
-                if (err) {
-                    log.error({err: err, stdout: boot_fds.stdout,
-                        stderr: boot_fds.stderr}, 'zoneadm failed to boot '
-                        + 'VM');
-                } else {
-                    log.debug({stdout: boot_fds.stdout,
-                        stderr: boot_fds.stderr}, 'zoneadm booted VM');
+            var cancel;
+
+            vasync.parallel({funcs: [
+                function (cb2) {
+                    // if we already have a state_waiter we can skip blocking
+                    // on waitForZoneState
+                    if (opts.state_waiter) {
+                        cb2();
+                        return;
+                    }
+
+                    cancel = VM.waitForZoneState(vmobj, 'running',
+                        {timeout: 30, log: log, skipConfirmation: true},
+                        function (err, result) {
+
+                        if (err) {
+                            if (err.code === 'ETIMEOUT') {
+                                log.info({err: err},
+                                    'timeout waiting for zone to go to '
+                                    + '"running"');
+                            } else {
+                                log.error({err: err},
+                                    'unknown error waiting for zone to '
+                                    + 'go to "running"');
+                            }
+                            cb2(err);
+                            return;
+                        }
+
+                        log.info('VM switched to "running"');
+                        cb2();
+                    });
+                }, function (cb2) {
+                    // do the booting
+                    zoneadm(['-u', uuid, 'boot', '-X'], log,
+                        function (err, boot_fds) {
+
+                        if (err) {
+                            log.error({err: err, stdout: boot_fds.stdout,
+                                stderr: boot_fds.stderr},
+                                'zoneadm failed to boot VM');
+                            if (cancel) {
+                                cancel();
+                            }
+                            cb2(err);
+                            return;
+                        }
+
+                        log.debug({stdout: boot_fds.stdout,
+                            stderr: boot_fds.stderr},
+                            'zoneadm booted VM');
+                        cb2();
+                    });
                 }
-                cb(err);
-            });
+            ]}, cb);
         }, function (cb) {
             // Ensure it booted. If caller passed in a function that can wait
             // for a zone to go to a state, we'll just call that.
@@ -10379,24 +10430,7 @@ function startZone(vmobj, opts, callback)
                 return;
             }
 
-            // with no opts.state_waiter, we use our own VM.waitForZoneState
-            VM.waitForZoneState(vmobj, 'running', {timeout: 30, log: log},
-                function (err, result) {
-
-                if (err) {
-                    if (err.code === 'ETIMEOUT') {
-                        log.info(err, 'timeout waiting for zone to go to '
-                            + '"running"');
-                    } else {
-                        log.error(err, 'unknown error waiting for zone to go'
-                            + ' "running"');
-                    }
-                } else {
-                    // zone got to running
-                    log.info('VM seems to have switched to "running"');
-                }
-                cb(err);
-            });
+            cb();
         }, function (cb) {
             if (vmobj.docker && vmobj.internal_metadata
                 && !vmobj.internal_metadata['docker:restartpolicy']) {
-- 
2.21.0

