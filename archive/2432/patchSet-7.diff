From 57d64d38902294cfe22883c3bcbfb4cda519c614 Mon Sep 17 00:00:00 2001
From: Jan Wyszynski <jan.wyszynski@joyent.com>
Date: Thu, 17 Aug 2017 21:27:53 +0000
Subject: [PATCH] MANTA-3220 MPU shark selection should try to connect to
 several sets of sharks

---
 lib/uploads/create.js | 116 +++++++++++++++++++++++++++++++++++++++---
 package.json          |   2 +-
 2 files changed, 111 insertions(+), 7 deletions(-)

diff --git a/lib/uploads/create.js b/lib/uploads/create.js
index 5b35117..69a702d 100644
--- a/lib/uploads/create.js
+++ b/lib/uploads/create.js
@@ -16,6 +16,7 @@ var path = require('path');
 var restify = require('restify');
 var util = require('util');
 var verror = require('verror');
+var vasync = require('vasync');
 
 var auth = require('../auth');
 var common = require('../common');
@@ -32,6 +33,84 @@ var sprintf = util.format;
 
 ///--- Helpers
 
+
+/*
+ * Attempts to grab a running pool for a given shark from cueball
+ * to check whether muskie had a recent active connection to the
+ * shark. This function is used in chooseSharks to pick an appropriate
+ * shark for a new mpu-create operation.
+ */
+function ensureSharkHasPool(req, shark, callback) {
+    var host = shark.manta_storage_id;
+    var pool = req.sharkAgent.getPool(host);
+    if (pool) {
+        req.log.debug({
+            shark: shark,
+            pool: pool.getState()
+        }, 'ensureSharkHasPool: got existing pool');
+    }
+    var createdPool = false;
+    if (pool === undefined) {
+        req.sharkAgent.createPool(shark.manta_storage_id);
+        pool = req.sharkAgent.getPool(host);
+        req.log.debug({
+            shark: shark,
+            pool: pool.getState()
+        }, 'ensureSharkHasPool: created pool for shark');
+        createdPool = true;
+    }
+
+    function cleanUpPool() {
+        if (createdPool && pool.isInState('failed')) {
+            req.log.debug({
+                shark: shark
+            }, 'ensureSharkHasPool: cleanUpPool: stopping failed pool');
+            pool.stop();
+        } else if (pool.isInState('stopping') || pool.isInState('stopped')) {
+            req.log.debug({
+                shark: shark,
+                state: pool.getState()
+            }, 'ensureSharkHasPool: cleanUpPool: pool stopping');
+        }
+    }
+
+    if (pool.isInState('running')) {
+        setImmediate(callback.bind(null, null, shark));
+    } else if (pool.isInState('starting')) {
+        var once = false;
+        pool.on('stateChanged', function (st) {
+            req.log.debug({
+                shark: shark,
+                state: st
+            }, 'ensureSharkHasPool: pool state changed');
+            if (!once && st === 'running') {
+                once = true;
+                callback(null, shark);
+            }
+        });
+        setTimeout(function () {
+            if (once) {
+                return;
+            }
+            once = true;
+            req.log.debug({
+                shark: shark,
+                state: pool.getState()
+            }, 'ensureSharkHasPool: pool state change timeout');
+            cleanUpPool();
+            callback(new Error('invalid state'));
+        }, req.sharkConfig.connectTimeout);
+    } else {
+        req.log.debug({
+            shark: shark,
+            pool: pool.getState()
+        }, 'ensureSharkHasPool: pool neither running nor starting');
+        cleanUpPool();
+        setImmediate(callback.bind(null, new Error('invalid pool state')));
+    }
+}
+
+
 /*
  * Selects the sharks for the upload through the picker.choose interface.
  *
@@ -39,7 +118,7 @@ var sprintf = util.format;
  * the durability-level and the content-length headers, respectively, or
  * set to a default value.
  */
-function chooseSharks(req, size, copies, cb) {
+function chooseSharks(req, res, size, copies, cb) {
     assert.object(req, 'req');
     assert.number(size, 'size');
     assert.number(copies, 'copies');
@@ -55,14 +134,39 @@ function chooseSharks(req, size, copies, cb) {
             replicas: copies,
             size: size
         };
+
         req.picker.choose(opts, function (err, sharks) {
             if (err) {
                 cb(err);
             } else {
-                log.debug({
-                    sharks: sharks[0]
-                }, 'upload: sharks chosen');
-                cb(null, sharks[0]);
+                var ndx = 0;
+                var attempted = [];
+
+                function attempt(inputs) {
+                    vasync.forEachParallel({
+                        func: ensureSharkHasPool.bind(null, req),
+                        inputs: inputs
+                    }, function (err2, results) {
+                        if (err || results.successes.length < copies) {
+                            attempted.concat(results.successes);
+                            if (ndx < sharks.length) {
+                                attempt(sharks[ndx++]);
+                            } else {
+                                cb(new SharksExhaustedError(res), null);
+                            }
+                            return;
+                        }
+                        log.info({
+                            sharks: attempted
+                        }, 'chooseSharks: unsuccessfully attempted sharks');
+                        log.info({
+                            sharks: results.successes
+                        }, 'chooseSharks: sharks chosen');
+                        cb(null, results.successes);
+                    });
+                }
+
+                attempt(sharks[ndx++]);
             }
         });
     }
@@ -285,7 +389,7 @@ function createUpload(req, res, next) {
     var s = req.upload.mpuSize;
     var c = req.upload.mpuCopies;
 
-    chooseSharks(req, s, c, function (err, sharks) {
+    chooseSharks(req, res, s, c, function (err, sharks) {
         if (err) {
             next(err);
         } else {
diff --git a/package.json b/package.json
index 4c9e8a7..66918c8 100644
--- a/package.json
+++ b/package.json
@@ -14,7 +14,7 @@
         "backoff": "2.3.0",
         "bunyan": "0.22.1",
         "bunyan-syslog": "0.2.2",
-        "cueball": "2.2.9",
+        "cueball": "file:../node-cueball",
         "dashdash": "1.3.2",
         "deep-equal": "0.0.0",
         "dtrace-provider": "0.2.8",
-- 
2.21.0

