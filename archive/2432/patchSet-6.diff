commit 3c30e9b4c01b56bc466c2a1da42f7fa0387a00db (refs/changes/32/2432/6)
Author: Jan Wyszynski <jan.wyszynski@joyent.com>
Date:   2017-08-24T17:14:58+00:00 (2 years, 1 month ago)
    
    MANTA-3220 MPU shark selection should try to connect to several sets of sharks

diff --git a/lib/uploads/create.js b/lib/uploads/create.js
index 5b35117..285e146 100644
--- a/lib/uploads/create.js
+++ b/lib/uploads/create.js
@@ -16,6 +16,7 @@ var path = require('path');
 var restify = require('restify');
 var util = require('util');
 var verror = require('verror');
+var vasync = require('vasync');
 
 var auth = require('../auth');
 var common = require('../common');
@@ -32,6 +33,7 @@ var sprintf = util.format;
 
 ///--- Helpers
 
+
 /*
  * Selects the sharks for the upload through the picker.choose interface.
  *
@@ -39,7 +41,7 @@ var sprintf = util.format;
  * the durability-level and the content-length headers, respectively, or
  * set to a default value.
  */
-function chooseSharks(req, size, copies, cb) {
+function chooseSharks(req, res, size, copies, cb) {
     assert.object(req, 'req');
     assert.number(size, 'size');
     assert.number(copies, 'copies');
@@ -55,14 +57,88 @@ function chooseSharks(req, size, copies, cb) {
             replicas: copies,
             size: size
         };
+
+        /*
+         * Attempts to grab a running pool for a given shark from cueball
+         * to check whether muskie had a recent active connection to the
+         * shark. This function is used in chooseSharks to pick an appropriate
+         * shark for a new mpu-create operation.
+         */
+         function tryShark(shark, callback) {
+            var host = shark.manta_storage_id;
+            var pool = req.sharkAgent.getPool(host);
+            if (pool === undefined) {
+                try {
+                    req.sharkAgent.createPool(
+                        shark.manta_storage_id);
+                } catch (err) {
+                    callback(err, null);
+                }
+            }
+            pool = req.sharkAgent.getPool(host);
+            assert.ok(pool);
+
+            if (pool.isInState('running')) {
+                callback(null, shark);
+            } else if (pool.isInState('failed')) {
+                callback(new Error('failed pool'), null);
+            } else if (pool.isInState('waiting')) {
+                callback(new Error('waiting pool'), null);
+                var timedOut = false;
+                pool.on('stateChanged', function (state) {
+                    if (timedOut) {
+                        return;
+                    }
+                    if (state === 'running') {
+                        callback(null, shark);
+                    } else {
+                        callback(new Error('failed pool'),
+                            null);
+                    }
+                });
+                setTimeout(function () {
+                    timedOut = true;
+                    callback(new Error('pool timeout'), null);
+                }, req.sharkConfig.connectTimeout);
+            }
+        }
+
         req.picker.choose(opts, function (err, sharks) {
             if (err) {
                 cb(err);
             } else {
+                var ndx = 0;
+                var attempted = [];
+
                 log.debug({
-                    sharks: sharks[0]
-                }, 'upload: sharks chosen');
-                cb(null, sharks[0]);
+                    sharks: sharks
+                }, 'mpu-create : sharks given');
+
+                function attempt(inputs) {
+                    vasync.forEachParallel({
+                        func: tryShark,
+                        inputs: inputs
+                    }, function (err2, results) {
+                        if (err || results.successes.length < copies) {
+                            attempted.concat(results.successes);
+                            if (ndx < sharks.length) {
+                                attempt(sharks[ndx++]);
+                            } else {
+                                cb(new SharksExhaustedError(res), null);
+                            }
+                            return;
+                        }
+                        log.info({
+                            sharks: attempted
+                        }, 'mpu-create : unsuccessfully attempted sharks');
+                        log.info({
+                            sharks: results.successes
+                        }, 'mpu-create: sharks chosen');
+                        cb(null, results.successes);
+                    });
+                }
+
+                attempt(sharks[ndx++]);
             }
         });
     }
@@ -285,7 +361,7 @@ function createUpload(req, res, next) {
     var s = req.upload.mpuSize;
     var c = req.upload.mpuCopies;
 
-    chooseSharks(req, s, c, function (err, sharks) {
+    chooseSharks(req, res, s, c, function (err, sharks) {
         if (err) {
             next(err);
         } else {
diff --git a/package.json b/package.json
index 4c9e8a7..66918c8 100644
--- a/package.json
+++ b/package.json
@@ -14,7 +14,7 @@
         "backoff": "2.3.0",
         "bunyan": "0.22.1",
         "bunyan-syslog": "0.2.2",
-        "cueball": "2.2.9",
+        "cueball": "file:../node-cueball",
         "dashdash": "1.3.2",
         "deep-equal": "0.0.0",
         "dtrace-provider": "0.2.8",
