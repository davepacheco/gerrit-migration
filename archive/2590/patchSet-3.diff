From 4a7bb7a8336a8c92de68a83c7017bd88d41ecaf5 Mon Sep 17 00:00:00 2001
From: Todd Whiteman <todd.whiteman@joyent.com>
Date: Fri, 15 Sep 2017 17:17:03 -0700
Subject: [PATCH] DOCKER-1104 support docker manifest lists

---
 CHANGES.md                |  4 ++
 lib/index.js              |  2 +
 lib/registry-client-v2.js | 92 +++++++++++++++++++++++++++------------
 package.json              |  2 +-
 test/v2.dockerio.test.js  | 59 ++++++++++++++++++++++---
 5 files changed, 125 insertions(+), 34 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index 7757280..a528569 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -4,6 +4,10 @@
 
 (nothing yet)
 
+## 3.2.10
+
+- DOCKER-1104 support docker manifest lists
+
 ## 3.2.9
 
 - DOCKER-1097 docker pull fails for registry server that has no auth setup
diff --git a/lib/index.js b/lib/index.js
index ed776e0..8e414a9 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -132,6 +132,8 @@ module.exports = {
     pingV2: reg2.ping,
     loginV2: reg2.login,
     digestFromManifestStr: reg2.digestFromManifestStr,
+    MEDIATYPE_MANIFEST_V2: reg2.MEDIATYPE_MANIFEST_LIST_V2,
+    MEDIATYPE_MANIFEST_LIST_V2: reg2.MEDIATYPE_MANIFEST_LIST_V2,
 
     createClientV1: reg1.createClient,
     pingIndexV1: reg1.pingIndex,
diff --git a/lib/registry-client-v2.js b/lib/registry-client-v2.js
index d4177ec..7390b9f 100644
--- a/lib/registry-client-v2.js
+++ b/lib/registry-client-v2.js
@@ -38,6 +38,10 @@ var errors = require('./errors');
 // https://github.com/docker/docker/blob/77da5d8/registry/config_unix.go#L10
 var DEFAULT_V2_REGISTRY = 'https://registry-1.docker.io';
 
+var MEDIATYPE_MANIFEST_V2
+    = 'application/vnd.docker.distribution.manifest.v2+json';
+var MEDIATYPE_MANIFEST_LIST_V2
+    = 'application/vnd.docker.distribution.manifest.list.v2+json';
 
 
 // --- internal support functions
@@ -953,6 +957,7 @@ function RegistryClientV2(opts) {
     assert.optionalString(opts.token, 'opts.token');  // for Bearer auth
     assert.optionalBool(opts.insecure, 'opts.insecure');
     assert.optionalString(opts.scheme, 'opts.scheme');
+    assert.optionalBool(opts.acceptManifestLists, 'opts.acceptManifestLists');
     assert.optionalNumber(opts.maxSchemaVersion, 'opts.maxSchemaVersion');
     // TODO: options to control the trust db for CA verification
     // TODO add passing through other restify options: userAgent, ...
@@ -980,6 +985,7 @@ function RegistryClientV2(opts) {
         this.repo.index.scheme = 'http';
     }
 
+    this.acceptManifestLists = opts.acceptManifestLists || false;
     this.maxSchemaVersion = opts.maxSchemaVersion || 1;
     this.username = opts.username;
     this.password = opts.password;
@@ -1232,11 +1238,15 @@ RegistryClientV2.prototype.getManifest = function getManifest(opts, cb) {
     var self = this;
     assert.object(opts, 'opts');
     assert.string(opts.ref, 'opts.ref');
+    assert.optionalBool(opts.acceptManifestLists, 'opts.acceptManifestLists');
     assert.optionalNumber(opts.maxSchemaVersion, 'opts.maxSchemaVersion');
     assert.func(cb, 'cb');
 
-    var res, manifest, manifestStr;
+    var acceptManifestLists = (
+        opts.acceptManifestLists || self.acceptManifestLists);
     var maxSchemaVersion = (opts.maxSchemaVersion || self.maxSchemaVersion);
+    var res, manifest, manifestStr;
+
     vasync.pipeline({arg: this, funcs: [
         function doLogin(_, next) {
             self.login(next);
@@ -1244,12 +1254,20 @@ RegistryClientV2.prototype.getManifest = function getManifest(opts, cb) {
         function call(_, next) {
             var headers = self._headers;
             if (maxSchemaVersion === 2) {
-                // TODO: Eventually we may want to allow fatties (aka manifest
-                //       lists) too, which uses:
-                // 'application/vnd.docker.distribution.manifest.list.v2+json'
-                headers = common.objMerge({}, self._headers, {accept: [
-                    'application/vnd.docker.distribution.manifest.v2+json'
-                ]});
+                var accept = [];
+                if (self._headers.accept) {
+                    // Accept may be a string or an array - we want an array.
+                    if (Array.isArray(self._headers.accept)) {
+                        accept = self._headers.accept.slice(); // a copy
+                    } else {
+                        accept = [self._headers.accept];
+                    }
+                }
+                accept.push(MEDIATYPE_MANIFEST_V2);
+                if (acceptManifestLists) {
+                    accept.push(MEDIATYPE_MANIFEST_LIST_V2);
+                }
+                headers = common.objMerge({}, self._headers, {accept: accept});
             }
             self._api.get({
                 path: fmt('/v2/%s/manifests/%s',
@@ -1261,11 +1279,12 @@ RegistryClientV2.prototype.getManifest = function getManifest(opts, cb) {
                     return next(err);
                 }
 
+                manifest = manifest_;
                 manifestStr = String(body);
 
-                if (manifest_.schemaVersion === 1) {
+                if (manifest.schemaVersion === 1) {
                     try {
-                        var jws = _jwsFromManifest(manifest_, body);
+                        var jws = _jwsFromManifest(manifest, body);
                         // Some v2 registries (Amazon ECR) do not provide the
                         // 'docker-content-digest' header.
                         if (res_.headers['docker-content-digest']) {
@@ -1281,32 +1300,47 @@ RegistryClientV2.prototype.getManifest = function getManifest(opts, cb) {
                     }
                 }
 
-                if (manifest_.schemaVersion > maxSchemaVersion) {
-                    throw new restifyErrors.InvalidContentError(fmt(
+                if (manifest.schemaVersion > maxSchemaVersion) {
+                    cb(new restifyErrors.InvalidContentError(fmt(
                         'unsupported schema version %s in %s:%s manifest',
-                        manifest_.schemaVersion, self.repo.localName,
-                        opts.ref));
+                        manifest.schemaVersion, self.repo.localName,
+                        opts.ref)));
+                    return;
                 }
-                var layers = manifest_.fsLayers;
-                if (manifest_.schemaVersion === 1) {
-                    if (layers.length !== manifest_.history.length) {
-                        throw new restifyErrors.InvalidContentError(fmt(
-                            'history length not equal to layers length in ' +
-                            '%s:%s manifest', self.repo.localName, opts.ref));
+
+                // Verify the manifest contents.
+                if (manifest.mediaType === MEDIATYPE_MANIFEST_LIST_V2) {
+                    if (!Array.isArray(manifest.manifests) ||
+                            manifest.manifests.length === 0) {
+                        cb(new restifyErrors.InvalidContentError(fmt(
+                            'no manifests in %s:%s manifest list',
+                            self.repo.localName, opts.ref)));
+                        return;
+                    }
+                } else {
+                    var layers = manifest.fsLayers;
+                    if (manifest.schemaVersion === 1) {
+                        if (layers.length !== manifest.history.length) {
+                            cb(new restifyErrors.InvalidContentError(fmt(
+                                'history length not equal to layers length in '
+                                + '%s:%s manifest',
+                                self.repo.localName, opts.ref)));
+                            return;
+                        }
+                    } else if (manifest.schemaVersion === 2) {
+                        layers = manifest.layers;
+                    }
+                    if (!layers || layers.length === 0) {
+                        cb(new restifyErrors.InvalidContentError(fmt(
+                            'no layers in %s:%s manifest', self.repo.localName,
+                            opts.ref)));
+                        return;
                     }
-                } else if (manifest_.schemaVersion === 2) {
-                    layers = manifest_.layers;
-                }
-                if (layers.length === 0) {
-                    throw new restifyErrors.InvalidContentError(fmt(
-                        'no layers in %s:%s manifest', self.repo.localName,
-                        opts.ref));
                 }
 
                 // TODO: `verifyTrustedKeys` from
                 // docker/graph/pull_v2.go#validateManifest()
 
-                manifest = manifest_;
                 res = res_;
                 next();
             });
@@ -1566,5 +1600,7 @@ module.exports = {
     createClient: createClient,
     ping: ping,
     login: login,
-    digestFromManifestStr: digestFromManifestStr
+    digestFromManifestStr: digestFromManifestStr,
+    MEDIATYPE_MANIFEST_V2: MEDIATYPE_MANIFEST_V2,
+    MEDIATYPE_MANIFEST_LIST_V2: MEDIATYPE_MANIFEST_LIST_V2
 };
diff --git a/package.json b/package.json
index bfad19f..e9e5ded 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
     "name": "docker-registry-client",
-    "version": "3.2.9",
+    "version": "3.2.10",
     "description": "node.js client for the Docker Registry API",
     "author": "Joyent (joyent.com)",
     "main": "./lib/index.js",
diff --git a/test/v2.dockerio.test.js b/test/v2.dockerio.test.js
index 4cf109f..a9839f8 100644
--- a/test/v2.dockerio.test.js
+++ b/test/v2.dockerio.test.js
@@ -32,11 +32,12 @@ function getFirstLayerDigestFromManifest(manifest_) {
     return manifest_.layers[0].digest;
 }
 
-
 // --- Tests
 
 test('v2 docker.io', function (tt) {
     var client;
+    var manifest;
+    var manifestDigest;
     var repo = drc.parseRepo(REPO);
 
     tt.test('  createClient', function (t) {
@@ -107,6 +108,49 @@ test('v2 docker.io', function (tt) {
         });
     });
 
+    /*
+     * {
+     *   "schemaVersion": 2,
+     *   "mediaType": "application/vnd.docker.dis...ion.manifest.list.v2+json",
+     *   "manifests": [
+     *     {
+     *       "mediaType": "application/vnd.docker.dis...ion.manifest.v2+json",
+     *       "size": 528,
+     *       "digest": "sha256:4b920400cf4c9...29ab9dd64eaa652837cd39c2cdf",
+     *       "platform": {
+     *         "architecture": "amd64",
+     *         "os": "linux"
+     *       }
+     *     }
+     *   ]
+     * }
+     */
+    tt.test('  getManifest (v2.2 list)', function (t) {
+        var getOpts = {
+            acceptManifestLists: true,
+            maxSchemaVersion: 2,
+            ref: TAG
+        };
+        client.getManifest(getOpts, function (err, manifest_, res,
+                manifestStr) {
+            t.ifErr(err);
+            t.ok(manifest_);
+            t.equal(manifest_.schemaVersion, 2);
+            t.equal(manifest_.mediaType, drc.MEDIATYPE_MANIFEST_LIST_V2,
+                'mediaType should be manifest list');
+            t.ok(Array.isArray(manifest_.manifests), 'manifests is an array');
+            manifest_.manifests.forEach(function (m) {
+                t.ok(m.digest, 'm.digest');
+                t.ok(m.platform, 'm.platform');
+                t.ok(m.platform.architecture, 'm.platform.architecture');
+                t.ok(m.platform.os, 'os.platform.os');
+            });
+            // Take the first manifest (for testing purposes).
+            manifestDigest = manifest_.manifests[0].digest;
+            t.end();
+        });
+    });
+
     /*
      * {
      *   "schemaVersion": 2,
@@ -125,14 +169,12 @@ test('v2 docker.io', function (tt) {
      *   ]
      * }
      */
-    var manifest;
-    var manifestDigest;
     tt.test('  getManifest (v2.2)', function (t) {
         var getOpts = {ref: TAG, maxSchemaVersion: 2};
-        client.getManifest(getOpts, function (err, manifest_, res) {
+        client.getManifest(getOpts, function (err, manifest_, res,
+                manifestStr) {
             t.ifErr(err);
             manifest = manifest_;
-            manifestDigest = res.headers['docker-content-digest'];
             t.ok(manifest);
             t.equal(manifest.schemaVersion, 2);
             t.ok(manifest.config);
@@ -140,6 +182,13 @@ test('v2 docker.io', function (tt) {
             t.ok(manifest.layers);
             t.ok(manifest.layers.length > 0);
             t.ok(manifest.layers[0].digest);
+
+            var computedDigest = drc.digestFromManifestStr(manifestStr);
+            t.equal(computedDigest, manifestDigest,
+                'compare computedDigest to expected manifest digest');
+            // Note that res.headers['docker-content-digest'] may be incorrect,
+            // c.f. https://github.com/docker/distribution/issues/2395
+
             t.end();
         });
     });
-- 
2.21.0

