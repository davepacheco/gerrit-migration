commit fad5b90b894286d49e5c2ea764918ab415730e1d (refs/changes/42/1042/2)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2016-12-01T23:19:06+00:00 (2 years, 10 months ago)
    
    FWAPI-260 Tag names and values in rules need to be unescaped for comparisons
    FWAPI-259 Moray queries need to be escaped

diff --git a/Makefile b/Makefile
index d0edd30..8ee01b0 100644
--- a/Makefile
+++ b/Makefile
@@ -16,7 +16,7 @@
 #
 # Tools
 #
-NODEUNIT		:= ./node_modules/.bin/nodeunit
+TAPE		:= ./node_modules/.bin/tape
 
 
 #
@@ -29,6 +29,9 @@ EXTRA_DOC_DEPS	= deps/restdown-brand-remora/.git
 JS_FILES	:= $(shell ls *.js) $(shell find lib test -name '*.js')
 JSL_CONF_NODE	 = tools/jsl.node.conf
 JSL_FILES_NODE   = $(JS_FILES)
+ESLINT		= ./node_modules/.bin/eslint
+ESLINT_CONF	= tools/eslint.node.conf
+ESLINT_FILES	= $(JS_FILES)
 JSON_FILES	:= config.json.sample package.json
 JSSTYLE_FILES	 = $(JS_FILES)
 JSSTYLE_FLAGS    = -o indent=4,doxygen,unparenthesized-return=0
@@ -59,10 +62,13 @@ INSTDIR         := $(PKGDIR)/root/opt/smartdc/fwapi
 # Repo-specific targets
 #
 .PHONY: all
-all: $(SMF_MANIFESTS) | $(NODEUNIT) $(REPO_DEPS) sdc-scripts
+all: $(SMF_MANIFESTS) | $(NPM_EXEC) $(REPO_DEPS) sdc-scripts
 	$(NPM) install
 
-$(NODEUNIT): | $(NPM_EXEC)
+$(ESLINT): | $(NPM_EXEC)
+	$(NPM) install
+
+$(TAPE): | $(NPM_EXEC)
 	$(NPM) install
 
 .PHONY: test
@@ -73,7 +79,7 @@ test: $(NODEUNIT)
 teststop:
 	@(for F in test/unit/*.test.js; do \
 		echo "# $$F" ;\
-		$(NODEUNIT) --reporter tap $$F ;\
+		$(TAPE) $$F ;\
 		[[ $$? == "0" ]] || exit 1; \
 	done)
 
@@ -150,6 +156,11 @@ publish: release
 	cp $(TOP)/$(RELEASE_TARBALL) $(BITS_DIR)/fwapi/$(RELEASE_TARBALL)
 
 
+.PHONY: check
+check:: $(ESLINT)
+	$(ESLINT) -c $(ESLINT_CONF) $(ESLINT_FILES)
+
+
 #
 # Includes
 #
diff --git a/deps/jsstyle b/deps/jsstyle
index da42b50..9600c7e 160000
--- a/deps/jsstyle
+++ b/deps/jsstyle
@@ -1 +1 @@
-Subproject commit da42b50ceb12d431437b32efd4c411a8e2fac0c8
+Subproject commit 9600c7e56c84f3a74d6e3d70c336e86f7a3e3769
diff --git a/lib/app.js b/lib/app.js
index a744872..9c0c4b4 100644
--- a/lib/app.js
+++ b/lib/app.js
@@ -12,6 +12,8 @@
  * Firewall API server application
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var clone = require('clone');
 var endpoints = require('./endpoints');
@@ -29,7 +31,6 @@ var path = require('path');
 var restify = require('restify');
 var trace_event = require('trace-event');
 var UFDS = require('ufds');
-var verror = require('verror');
 var VMAPI = require('sdc-clients').VMAPI;
 
 
@@ -101,7 +102,7 @@ function FWAPI(opts) {
 
         if (errs.length !== 0) {
             var err = new restify.ServiceUnavailableError(
-                errs.length == 1 ? errs[0].message : 'Services unavailable');
+                errs.length === 1 ? errs[0].message : 'Services unavailable');
             err.errors = errs;
             return next(err);
         }
@@ -134,7 +135,7 @@ function FWAPI(opts) {
         }
         next();
     });
-    server.on('after', function (req, res, route, err) {
+    server.on('after', function (req, res, route, _err) {
         if (route && !EVT_SKIP_ROUTES[route.name]) {
             req.trace.end({name: route.name, req_seq: req.trace.seq_id});
         }
@@ -156,7 +157,7 @@ function FWAPI(opts) {
 
     server.on('after', function _filteredAuditLog(req, res, route, err) {
         // Don't log ping requests, to avoid filling up the log
-        if (route && (route.name == 'getping' || route.name == 'headping')) {
+        if (route && (route.name === 'getping' || route.name === 'headping')) {
             return;
         }
 
@@ -167,7 +168,7 @@ function FWAPI(opts) {
             }, true),
             // Successful GET res bodies are uninteresting and *big*.
             body: !((req.method === 'GET') &&
-                Math.floor(res.statusCode/100) === 2)
+                Math.floor(res.statusCode / 100) === 2)
         })(req, res, route, err);
     });
 
@@ -197,7 +198,8 @@ FWAPI.prototype.close = function close(callback) {
     var self = this;
     this.server.on('close', function () {
         if (!self.ufds) {
-            return callback();
+            callback();
+            return;
         }
 
         self.ufds.close(function (err) {
@@ -220,17 +222,23 @@ FWAPI.prototype.initializeClients = function initializeClients() {
             function initUFDS(cb) {
                 if (self.ufds === null) {
                     self.ufdsClientInit(cb);
-                } else return cb();
+                } else {
+                    cb();
+                }
             },
             function initVMAPI(cb) {
                 if (self.vmapi === null) {
                     self.vmapiClientInit(cb);
-                } else return cb();
+                } else {
+                    cb();
+                }
             },
             function initMoray(cb) {
                 if (self.moray === null) {
                     self.morayClientInit(cb);
-                } else return cb();
+                } else {
+                    cb();
+                }
             }
         ]
     }, function (err) {
@@ -365,7 +373,7 @@ function addFluentdHost(log, host) {
  * - `log` {Object}: bunyan logger (required)
  * @param callback {Function} `function (err, app) {...}`.
  */
-function createApp(opts, callback) {
+function createApp(opts) {
     assert.object(opts, 'opts');
     assert.object(opts.config, 'opts.config');
     assert.object(opts.config.ufds, 'opts.config.ufds');
diff --git a/lib/cli.js b/lib/cli.js
index a0e36f3..fc2e5c0 100644
--- a/lib/cli.js
+++ b/lib/cli.js
@@ -25,6 +25,8 @@
  * fwadm: CLI shared logic
  */
 
+'use strict';
+
 var fs = require('fs');
 var tty = require('tty');
 var util = require('util');
@@ -50,11 +52,13 @@ var UUID_REGEX =
  */
 function displayRules(err, res, opts) {
     if (err) {
-        return outputError(err, opts);
+        outputError(err, opts);
+        return;
     }
 
     if (opts.json) {
-        return console.log(json(res));
+        console.log(json(res));
+        return;
     }
 
     console.log('UUID                                 ENABLED RULE');
@@ -102,7 +106,8 @@ function getPayload(opts, args, callback) {
             }
         });
 
-        return callback(null, payload);
+        callback(null, payload);
+        return;
     }
 
     if (!file && !tty.isatty(0)) {
@@ -110,7 +115,8 @@ function getPayload(opts, args, callback) {
     }
 
     if (!file) {
-        return callback(new verror.VError('Must supply file!'));
+        callback(new verror.VError('Must supply file!'));
+        return;
     }
 
     if (file === '-') {
@@ -156,7 +162,8 @@ function json(obj) {
  */
 function outputError(err, opts) {
     if (opts && opts.json) {
-        return console.error(json(err));
+        console.error(json(err));
+        return;
     }
 
     var code = '';
diff --git a/lib/endpoints/common.js b/lib/endpoints/common.js
index cdca006..c8b1a47 100644
--- a/lib/endpoints/common.js
+++ b/lib/endpoints/common.js
@@ -12,12 +12,14 @@
  * Shared code between restify endpoints
  */
 
-var fw = require('../rule');
+'use strict';
+
 var mod_err = require('../errors');
-var mod_filter = require('../ufds/filter');
 var mod_persist = require('../persist');
 
 
+var hasKey = require('jsprim').hasKey;
+
 
 // --- Exports
 
@@ -33,8 +35,8 @@ function ruleBefore(req, res, next) {
             return next(err);
         }
 
-        if (req.params.hasOwnProperty('owner_uuid') &&
-            rule.hasOwnProperty('owner_uuid') &&
+        if (hasKey(req.params, 'owner_uuid') &&
+            hasKey(rule, 'owner_uuid') &&
             req.params.owner_uuid !== rule.owner_uuid) {
             return next(new mod_err.PermissionDeniedError(
                 'owner does not match', [
diff --git a/lib/endpoints/firewalls/vms.js b/lib/endpoints/firewalls/vms.js
index b5be7d9..454a336 100644
--- a/lib/endpoints/firewalls/vms.js
+++ b/lib/endpoints/firewalls/vms.js
@@ -12,10 +12,11 @@
  * Restify handlers for listing rules applied to vms
  */
 
+'use strict';
+
+var hasKey = require('jsprim').hasKey;
 var mod_err = require('../../errors');
 var mod_persist = require('../../persist');
-var restify = require('restify');
-var util = require('util');
 var validators = require('fwrule/lib/validators');
 
 
@@ -30,17 +31,19 @@ var validators = require('fwrule/lib/validators');
  */
 function validateParams(req, res, next) {
     if (!validators.validateUUID(req.params.uuid)) {
-        return next(new mod_err.InvalidParamsError(mod_err.INVALID_MSG,
+        next(new mod_err.InvalidParamsError(mod_err.INVALID_MSG,
             [ mod_err.invalidParam('uuid', 'Invalid UUID') ]));
+        return;
     }
 
-    if (req.params.hasOwnProperty('owner_uuid') &&
-            !validators.validateUUID(req.params.owner_uuid)) {
-        return next(new mod_err.InvalidParamsError(mod_err.INVALID_MSG,
+    if (hasKey(req.params, 'owner_uuid') &&
+        !validators.validateUUID(req.params.owner_uuid)) {
+        next(new mod_err.InvalidParamsError(mod_err.INVALID_MSG,
             [ mod_err.invalidParam('owner_uuid', 'Invalid UUID') ]));
+        return;
     }
 
-    return next();
+    next();
 }
 
 
@@ -55,8 +58,10 @@ function validateParams(req, res, next) {
 function getVMrules(req, res, next) {
     req._vmapi.getVm(req.params, function (err, vm) {
         if (err) {
-            return next(err);
+            next(err);
+            return;
         }
+
         var filter = {
             owner_uuid: vm.owner_uuid,
             tags: vm.tags,
diff --git a/lib/endpoints/index.js b/lib/endpoints/index.js
index 81926be..e34ef17 100644
--- a/lib/endpoints/index.js
+++ b/lib/endpoints/index.js
@@ -13,6 +13,8 @@
  */
 
 
+'use strict';
+
 
 /*
  * Endpoints are in their own individual files, in a directory structure
diff --git a/lib/endpoints/ping.js b/lib/endpoints/ping.js
index b7a6ec2..b34ab50 100644
--- a/lib/endpoints/ping.js
+++ b/lib/endpoints/ping.js
@@ -13,6 +13,8 @@
  */
 
 
+'use strict';
+
 
 // --- Endpoints
 
diff --git a/lib/endpoints/resolve.js b/lib/endpoints/resolve.js
index b81d105..bb45d3d 100644
--- a/lib/endpoints/resolve.js
+++ b/lib/endpoints/resolve.js
@@ -12,12 +12,16 @@
  * Restify handlers for retrieving VM rules
  */
 
+'use strict';
+
 var fw = require('../rule');
 var mod_persist = require('../persist');
 var restify = require('restify');
 var util = require('util');
 
 
+var hasKey = require('jsprim').hasKey;
+
 
 // --- Internal helpers
 
@@ -46,7 +50,7 @@ function resolveTargets(rules, params, log, callback) {
         tags: {},
         vms: {}
     };
-    if (params.hasOwnProperty('vms')) {
+    if (hasKey(params, 'vms')) {
         params.vms = params.vms.reduce(function (acc, vm) {
             acc[vm] = 1;
             return acc;
@@ -62,7 +66,7 @@ function resolveTargets(rules, params, log, callback) {
             return;
         }
 
-        var otherSide = d == 'from' ? 'to' : 'from';
+        var otherSide = (d === 'from' ? 'to' : 'from');
 
         if (rule[otherSide].wildcards.indexOf('vmall') !== -1) {
             allVMs = true;
@@ -73,7 +77,7 @@ function resolveTargets(rules, params, log, callback) {
                 sideData.tags[tag] = true;
             } else {
                 if (sideData.tags[tag[0]] !== true) {
-                    if (!sideData.tags.hasOwnProperty(tag[0])) {
+                    if (!hasKey(sideData.tags, tag[0])) {
                         sideData.tags[tag[0]] = [];
                     }
 
@@ -97,10 +101,11 @@ function resolveTargets(rules, params, log, callback) {
                 log.debug('resolveTargets: matched rule=%s, dir=%s, allVMs',
                     rule.uuid, dir);
                 matched = true;
-                return addOtherSideData(rule, dir);
+                addOtherSideData(rule, dir);
+                return;
             }
 
-            if (params.hasOwnProperty('tags')) {
+            if (hasKey(params, 'tags')) {
                 rule[dir].tags.forEach(function (tag) {
                     var tagKey = tag;
                     var tagVal = true;
@@ -113,18 +118,18 @@ function resolveTargets(rules, params, log, callback) {
                         matched = true;
                         log.debug('resolveTargets: matched rule=%s, dir=%s, '
                             + 'tag=%s', rule.uuid, dir, tag);
-                        return addOtherSideData(rule, dir);
+                        addOtherSideData(rule, dir);
                     }
                 });
             }
 
-            if (params.hasOwnProperty('vms')) {
+            if (hasKey(params, 'vms')) {
                 rule[dir].vms.forEach(function (vm) {
-                    if (params.vms.hasOwnProperty(vm)) {
+                    if (hasKey(params.vms, vm)) {
                         matched = true;
                         log.debug('resolveTargets: matched rule=%s, dir=%s, '
                             + 'vm=%s', rule.uuid, dir, vm);
-                        return addOtherSideData(rule, dir);
+                        addOtherSideData(rule, dir);
                     }
                 });
             }
@@ -144,7 +149,7 @@ function resolveTargets(rules, params, log, callback) {
     }
 
     sideData.allVMs = allVMs;
-    if (params.hasOwnProperty('owner_uuid')) {
+    if (hasKey(params, 'owner_uuid')) {
         sideData.owner_uuid = params.owner_uuid;
     }
 
@@ -161,7 +166,7 @@ function resolveTargets(rules, params, log, callback) {
  *     no value)
  */
 function tagMatches(key, val, tagsWanted) {
-    if (!tagsWanted.hasOwnProperty(key)) {
+    if (!hasKey(tagsWanted, key)) {
         return false;
     }
 
@@ -183,7 +188,7 @@ function tagMatches(key, val, tagsWanted) {
     }
 
     for (var v in wantedVals) {
-        if (wantedVals[v] == val) {
+        if (wantedVals[v] === val) {
             return true;
         }
     }
@@ -213,7 +218,8 @@ function resolve(req, res, next) {
     mod_persist.vmRules(req._app, req.log, req.params,
         function (err, rules) {
         if (err) {
-            return next(err);
+            next(err);
+            return;
         }
 
         resolveTargets(rules, req.params, req.log, function (err2, sideData) {
diff --git a/lib/endpoints/rules/index.js b/lib/endpoints/rules/index.js
index 1d1729c..2855e4a 100644
--- a/lib/endpoints/rules/index.js
+++ b/lib/endpoints/rules/index.js
@@ -12,17 +12,19 @@
  * Restify handlers for firewall rules
  */
 
+'use strict';
+
 var clone = require('clone');
 var common = require('../common');
-var filter = require('../../ufds/filter');
 var mod_err = require('../../errors');
 var mod_persist = require('../../persist');
 var restify = require('restify');
 var Rule = require('../../rule').Rule;
-var util = require('util');
 var util_validate = require('../../util/validate');
 
 
+var hasKey = require('jsprim').hasKey;
+
 
 // --- Internal
 
@@ -32,11 +34,11 @@ var util_validate = require('../../util/validate');
  * Turns a fwrule error into an InvalidParamsError
  */
 function createParamErr(err) {
-    if (!err.hasOwnProperty('ase_errors') && !err.hasOwnProperty('field')) {
+    if (!hasKey(err, 'ase_errors') && !hasKey(err, 'field')) {
         return err;
     }
 
-    var errs = err.hasOwnProperty('ase_errors') ? err.ase_errors : [ err ];
+    var errs = hasKey(err, 'ase_errors') ? err.ase_errors : [ err ];
     return new mod_err.InvalidParamsError(mod_err.INVALID_MSG,
         errs.map(function (e) {
             return mod_err.invalidParam(e.field, e.message);
@@ -51,18 +53,18 @@ function createParamErr(err) {
  */
 function disallowOwnerForGlobal(req, res, next) {
     var rule = req._rule;
-    if (!rule.hasOwnProperty('global') || !rule.global) {
-        return next();
+    if (!hasKey(rule, 'global') || !rule.global) {
+        next();
+        return;
     }
 
-    if (!req.params.hasOwnProperty('owner_uuid')) {
-        return next();
+    if (!hasKey(req.params, 'owner_uuid')) {
+        next();
+        return;
     }
 
-    return next(new mod_err.PermissionDeniedError(
-        'owner does not match', [
-        mod_err.invalidParam('owner_uuid',
-            'owner_uuid does not match') ]));
+    next(new mod_err.PermissionDeniedError('owner does not match',
+        [ mod_err.invalidParam('owner_uuid', 'owner_uuid does not match') ]));
 }
 
 
@@ -121,14 +123,16 @@ function getRule(req, res, next) {
  */
 function createRule(req, res, next) {
     if (!req.params.rule) {
-        return next(new restify.MissingParameterError(
+        next(new restify.MissingParameterError(
             '"rule" parameter required'));
+        return;
     }
 
     mod_persist.createRule(req._app, req.log, req.params,
         function (err, rule) {
         if (err) {
-            return next(createParamErr(err));
+            next(createParamErr(err));
+            return;
         }
 
         req._update.queue('fw.add_rule', rule.serialize(),
@@ -164,7 +168,8 @@ function updateRule(req, res, next) {
     try {
         newRule = new Rule(updateParams, req._app);
     } catch (e) {
-        return next(createParamErr(e));
+        next(createParamErr(e));
+        return;
     }
 
     newRule.incrementVersion();
@@ -172,7 +177,8 @@ function updateRule(req, res, next) {
     mod_persist.updateRule(req._app, req.log, newRule, req._rule,
         function (err, rule) {
         if (err) {
-            return next(err);
+            next(err);
+            return;
         }
 
         req._update.queue('fw.update_rule', rule.serialize(),
@@ -195,7 +201,8 @@ function updateRule(req, res, next) {
 function deleteRule(req, res, next) {
     mod_persist.deleteRule(req._app, req.log, req.params.uuid, function (err) {
         if (err) {
-            return next(err);
+            next(err);
+            return;
         }
 
         req._update.queue('fw.del_rule', req._rule.serialize(),
diff --git a/lib/endpoints/rules/vms.js b/lib/endpoints/rules/vms.js
index c00894f..3a34d39 100644
--- a/lib/endpoints/rules/vms.js
+++ b/lib/endpoints/rules/vms.js
@@ -12,6 +12,8 @@
  * Restify handlers for vms affected by firewall rules
  */
 
+'use strict';
+
 var common = require('../common');
 var restify = require('restify');
 var util = require('util');
@@ -27,8 +29,9 @@ var util = require('util');
  */
 function getRuleVMs(req, res, next) {
     if (!req.params.owner_uuid) {
-        return next(new restify.MissingParameterError(
+        next(new restify.MissingParameterError(
             '"owner_uuid" parameter required'));
+        return;
     }
 
     var filter = [];
diff --git a/lib/endpoints/updates.js b/lib/endpoints/updates.js
index d16f896..e24ecfd 100644
--- a/lib/endpoints/updates.js
+++ b/lib/endpoints/updates.js
@@ -12,8 +12,10 @@
  * Restify handlers for firewall data updates
  */
 
+'use strict';
+
+var hasKey = require('jsprim').hasKey;
 var restify = require('restify');
-var util = require('util');
 
 
 
@@ -68,19 +70,22 @@ function createUpdate(req, res, next) {
     var updateParams;
 
     if (!req.params.type) {
-        return next(new restify.MissingParameterError(
+        next(new restify.MissingParameterError(
             '"type" parameter required'));
+        return;
     }
 
-    if (!UPDATES.hasOwnProperty(req.params.type)) {
-        return next(new restify.MissingParameterError(
+    if (!hasKey(UPDATES, req.params.type)) {
+        next(new restify.MissingParameterError(
             'Unknown update type'));
+        return;
     }
 
     try {
         updateParams = UPDATES[req.params.type](req.params);
     } catch (validationErr) {
-        return next(validationErr);
+        next(validationErr);
+        return;
     }
 
     req._update.queue(req.params.type, updateParams, function (err, res2) {
diff --git a/lib/errors.js b/lib/errors.js
index 7308105..7d6a317 100644
--- a/lib/errors.js
+++ b/lib/errors.js
@@ -12,6 +12,8 @@
  * Error classes and helpers
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var restify = require('restify');
 var util = require('util');
diff --git a/lib/fwapi-cli.js b/lib/fwapi-cli.js
index b6711d5..0833ecc 100644
--- a/lib/fwapi-cli.js
+++ b/lib/fwapi-cli.js
@@ -12,6 +12,10 @@
  * The Firewall API control application
  */
 
+/* eslint-disable no-unused-vars */
+
+'use strict';
+
 var assert = require('assert-plus');
 var cli = require('./cli');
 var cmdln = require('cmdln');
@@ -89,16 +93,16 @@ function getKeyValParams(args, idx) {
 
     for (var i = idx; i < args.length; i++) {
         var split = args[i].split('=');
-        if (split.length != 2) {
+        if (split.length !== 2) {
             errs.push(args[i]);
             continue;
         }
         params[split[0]] = split[1];
     }
 
-    if (errs.length != 0) {
+    if (errs.length !== 0) {
         exit('Invalid parameter%s: %s',
-                (errs.length == 1 ? '' : 's'), errs.join(', '));
+            (errs.length === 1 ? '' : 's'), errs.join(', '));
     }
 
     return params;
@@ -242,6 +246,7 @@ function enableDisable(subcmd, opts, args, callback) {
         return callback(new Error('Error: must supply rule UUID!'));
     }
 
+    // eslint-disable-next-line no-invalid-this
     return this.fwapi.updateRule(args[0], { enabled: subcmd === 'enable' },
         standardHandler.bind(null, opts));
 }
@@ -327,7 +332,8 @@ FwapiCLI.prototype.do_rules.help = 'List the rules affecting a VM.';
  */
 FwapiCLI.prototype['do_start'] = function (subcmd, opts, args, callback) {
     if (!args[0]) {
-        return callback(new Error('Must specify VM UUID'));
+        callback(new Error('Must specify VM UUID'));
+        return;
     }
 
     CONFIG.vmapi.agent = false;
@@ -344,7 +350,8 @@ FwapiCLI.prototype['do_start'].help = 'Start a VM\'s firewall';
  */
 FwapiCLI.prototype['do_stop'] = function (subcmd, opts, args, callback) {
     if (!args[0]) {
-        return callback(new Error('Must specify VM UUID'));
+        callback(new Error('Must specify VM UUID'));
+        return;
     }
 
     CONFIG.vmapi.agent = false;
@@ -413,7 +420,8 @@ FwapiCLI.prototype['do_update-post'].help = 'Post a raw VM update';
 FwapiCLI.prototype['do_update-vm'] = function (subcmd, opts, args, callback) {
     var self = this;
     if (!args[0]) {
-        return callback(new Error('Must specify VM UUID'));
+        callback(new Error('Must specify VM UUID'));
+        return;
     }
 
     CONFIG.vmapi.agent = false;
diff --git a/lib/moray-migration.js b/lib/moray-migration.js
index 4c621fe..e9e8e78 100644
--- a/lib/moray-migration.js
+++ b/lib/moray-migration.js
@@ -12,6 +12,8 @@
  * These functions are for migrating firewall rules out of UFDS and into Moray
  */
 
+'use strict';
+
 var fw = require('./rule');
 
 var fmt = require('util').format;
@@ -83,13 +85,15 @@ function migrateBatch(app, log, marker, callback) {
     });
     req.on('end', function () {
         if (count === 0) {
-            return callback();
+            callback();
+            return;
         }
 
         createRules(app, log, rules, function (err) {
             if (err) {
                 log.error(err, info, 'Batch failed');
-                return callback(err);
+                callback(err);
+                return;
             }
 
             log.info(info, 'Batch succeeded; migrated %d rules.', count);
@@ -100,13 +104,15 @@ function migrateBatch(app, log, marker, callback) {
 
 function migrate(app, log, callback) {
     if (app.config.fwrule_version <= 2) {
-        return callback();
+        callback();
+        return;
     }
 
     log.info('Starting migration');
     migrateBatch(app, log, null, function (err) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         log.info('Migration completed successfully; deleting rules in UFDS');
diff --git a/lib/persist.js b/lib/persist.js
index 7149a15..c0ce018 100644
--- a/lib/persist.js
+++ b/lib/persist.js
@@ -8,17 +8,22 @@
  * Copyright (c) 2016, Joyent, Inc.
  */
 
+'use strict';
+
 var async = require('async');
 var fw = require('./rule');
 var mod_err = require('./errors');
 var mod_filter = require('./ufds/filter');
+var mod_jsprim = require('jsprim');
 var restify = require('restify');
 var ufdsmodel = require('./ufds/model');
-var util_obj = require('./util/obj');
 var util_validate = require('./util/validate');
 
+
+var hasKey = mod_jsprim.hasKey;
 var Rule = fw.Rule;
 
+
 /*
  * Returns a nicely formatted error, rather than the generic UFDS or Moray not
  * found error.
@@ -98,17 +103,15 @@ function updateRuleUFDS(app, log, newRule, oldRule, callback) {
 
     for (var r in newRaw) {
         // If the old raw object has the item, we only need to do a 'replace'
-        if (oldRaw.hasOwnProperty(r)) {
+        if (hasKey(oldRaw, r)) {
             delete oldRaw[r];
         }
     }
 
-    if (log.debug()) {
-        log.debug({ oldRaw: oldRaw, newRaw: newRaw },
-            'Updating rule %s', oldRule.uuid);
-    }
+    log.debug({ oldRaw: oldRaw, newRaw: newRaw },
+        'Updating rule %s', oldRule.uuid);
 
-    if (util_obj.isEmpty(oldRaw)) {
+    if (mod_jsprim.isEmpty(oldRaw)) {
         change = {
             operation: 'replace',
             modification: newRaw
@@ -135,14 +138,15 @@ function updateRule(app, log, newRule, oldRule, callback) {
         app.moray.putObject(fw.BUCKET.name, newRule.uuid, newRule.raw(),
             function (err) { callback(err, newRule); });
     } else {
-        return updateRuleUFDS(app, log, newRule, oldRule, callback);
+        updateRuleUFDS(app, log, newRule, oldRule, callback);
     }
 }
 
 function deleteRule(app, log, uuid, callback) {
     if (!util_validate.uuid(uuid)) {
-        return callback(new mod_err.InvalidParamsError(mod_err.INVALID_MSG,
+        callback(new mod_err.InvalidParamsError(mod_err.INVALID_MSG,
             [ mod_err.invalidParam('uuid', 'Invalid UUID') ]));
+        return;
     }
 
     callback = checkNotFound(app, uuid, callback);
@@ -156,23 +160,25 @@ function deleteRule(app, log, uuid, callback) {
 
 function getRule(app, log, uuid, callback) {
     if (!util_validate.uuid(uuid)) {
-        return callback(new mod_err.InvalidParamsError(mod_err.INVALID_MSG,
+        callback(new mod_err.InvalidParamsError(mod_err.INVALID_MSG,
             [ mod_err.invalidParam('uuid', 'Invalid UUID') ]));
+        return;
     }
 
     callback = checkNotFound(app, uuid, callback);
 
     if (app.config.fwrule_version > 2) {
-        return app.moray.getObject(fw.BUCKET.name, uuid, function (err, obj) {
+        app.moray.getObject(fw.BUCKET.name, uuid, function (err, obj) {
             if (err) {
                 log.error(err, 'Error getting rule from Moray');
-                return callback(err);
+                callback(err);
+                return;
             }
 
             mkRule(obj.value, app, callback);
         });
     } else {
-        return ufdsmodel.modelGet(app, Rule, Rule.dn(uuid), log, callback);
+        ufdsmodel.modelGet(app, Rule, Rule.dn(uuid), log, callback);
     }
 }
 
@@ -206,15 +212,15 @@ function vmRules(app, log, params, callback) {
     };
     var ruleFilter;
 
-    if (params.hasOwnProperty('vms')) {
+    if (hasKey(params, 'vms')) {
         filter.params.vm = params.vms;
     }
 
-    if (params.hasOwnProperty('tags')) {
+    if (hasKey(params, 'tags')) {
         filter.params.tag = params.tags;
     }
 
-    if (params.hasOwnProperty('owner_uuid')) {
+    if (hasKey(params, 'owner_uuid')) {
         filter.params.owner_uuid = params.owner_uuid;
     }
 
@@ -222,7 +228,8 @@ function vmRules(app, log, params, callback) {
         try {
             ruleFilter = mod_filter.morayRules(filter);
         } catch (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         log.debug('vmRules (Moray): filter=%s', ruleFilter);
@@ -242,13 +249,14 @@ function vmRules(app, log, params, callback) {
         try {
             ruleFilter = mod_filter.ufdsRules(filter);
         } catch (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         var parentDn = Rule.parentDn();
         log.debug('vmRules (UFDS): parentDn=%s, filter=%s',
             parentDn, ruleFilter);
-        return ufdsmodel.modelListFiltered(app, fw.Rule, parentDn, ruleFilter,
+        ufdsmodel.modelListFiltered(app, Rule, parentDn, ruleFilter,
             log, callback);
     }
 }
@@ -264,7 +272,8 @@ function findRules(app, log, params, callback) {
         try {
             ruleFilter = mod_filter.morayRules(filter);
         } catch (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         log.debug('findRules (Moray): filter=%s', ruleFilter);
@@ -284,13 +293,14 @@ function findRules(app, log, params, callback) {
         try {
             ruleFilter = mod_filter.ufdsRules(filter);
         } catch (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         var parentDn = Rule.parentDn();
-        log.debug('vmRules (UFDS): parentDn=%s, filter=%s',
+        log.debug('findRules (UFDS): parentDn=%s, filter=%s',
             parentDn, ruleFilter);
-        return ufdsmodel.modelListFiltered(app, fw.Rule, parentDn, ruleFilter,
+        ufdsmodel.modelListFiltered(app, fw.Rule, parentDn, ruleFilter,
             log, callback);
     }
 }
diff --git a/lib/rule.js b/lib/rule.js
index 00d261a..36f17dd 100644
--- a/lib/rule.js
+++ b/lib/rule.js
@@ -12,16 +12,17 @@
  * Firewall rule model
  */
 
+'use strict';
+
 var assert = require('assert-plus');
-var clone = require('clone');
 var mod_err = require('./errors');
 var mod_rule = require('fwrule');
-var restify = require('restify');
 var util = require('util');
 var util_ip = require('./util/ip');
 var util_validate = require('./util/validate');
 
 var fmt = util.format;
+var hasKey = require('jsprim').hasKey;
 
 // --- Globals
 
@@ -97,23 +98,6 @@ var BUCKET = {
 
 
 
-/**
- * Calls callback for all of the firewall target types
- */
-function forEachTarget(obj, callback) {
-    for (var i in mod_rule.DIRECTIONS) {
-        var dir = mod_rule.DIRECTIONS[i];
-        for (var j in mod_rule.TARGET_TYPES) {
-            var type = mod_rule.TARGET_TYPES[j];
-            var targetName = dir + type;
-            if (!obj.hasOwnProperty(targetName)) {
-                continue;
-            }
-            callback(dir, type, targetName, obj[targetName]);
-        }
-    }
-}
-
 /**
  * Converts a rule from Moray to raw format
  */
@@ -134,12 +118,12 @@ function ruleFromMoray(raw) {
         version: raw.version
     };
 
-    if (raw.hasOwnProperty('ports')) {
+    if (hasKey(raw, 'ports')) {
         // See "Port storage in Moray" for how ports get represented
         data.parsed.protocol.targets = raw.ports.map(function (port) {
-            /*JSSTYLED*/
+            /* JSSTYLED */
             var matched = /^\[(\d+),(\d+)\]$/.exec(port);
-            if (matched != null) {
+            if (matched !== null) {
                 var start = Number(matched[1]);
                 var end = Number(matched[2]);
 
@@ -160,11 +144,11 @@ function ruleFromMoray(raw) {
 
     }
 
-    if (raw.hasOwnProperty('types')) {
+    if (hasKey(raw, 'types')) {
         data.parsed.protocol.targets = raw.types;
     }
 
-    if (raw.hasOwnProperty('description')) {
+    if (hasKey(raw, 'description')) {
         data.description = raw.description;
     }
 
@@ -172,14 +156,14 @@ function ruleFromMoray(raw) {
         data.enabled = raw.enabled;
     }
 
-    if (raw.hasOwnProperty('owner')) {
+    if (hasKey(raw, 'owner')) {
         data.owner_uuid = raw.owner;
     }
 
     mod_rule.DIRECTIONS.forEach(function (dir) {
         mod_rule.TARGET_TYPES.forEach(function (type) {
             var key = dir + type + 's';
-            if (!raw.hasOwnProperty(key)) {
+            if (!hasKey(raw, key)) {
                 return;
             }
             var targets = raw[key];
@@ -227,12 +211,12 @@ function ruleFromUFDS(raw) {
         version: raw.version
     };
 
-    if (raw.hasOwnProperty('ports')) {
+    if (hasKey(raw, 'ports')) {
         data.parsed.protocol.targets =
             (typeof (raw.ports) === 'object' ?  raw.ports  : [ raw.ports ])
             .map(function (port) {
                 var matched = /^(\d+)-(\d+)$/.exec(port);
-                if (matched != null) {
+                if (matched !== null) {
                     return {
                         start: Number(matched[1]),
                         end: Number(matched[2])
@@ -243,12 +227,12 @@ function ruleFromUFDS(raw) {
             });
     }
 
-    if (raw.hasOwnProperty('types')) {
+    if (hasKey(raw, 'types')) {
         data.parsed.protocol.targets = typeof (raw.types) === 'object' ?
             raw.types : [ raw.types ];
     }
 
-    if (raw.hasOwnProperty('description')) {
+    if (hasKey(raw, 'description')) {
         data.description = raw.description;
     }
 
@@ -256,14 +240,14 @@ function ruleFromUFDS(raw) {
         data.enabled = raw.enabled;
     }
 
-    if (raw.hasOwnProperty('owner')) {
+    if (hasKey(raw, 'owner')) {
         data.owner_uuid = raw.owner;
     }
 
     mod_rule.DIRECTIONS.forEach(function (dir) {
         mod_rule.TARGET_TYPES.forEach(function (type) {
             var key = dir + type;
-            if (!raw.hasOwnProperty(key)) {
+            if (!hasKey(raw, key)) {
                 return;
             }
             var targets =
@@ -351,7 +335,7 @@ function Rule(data, app) {
     } else if (data.objectclass) {
         // Data is from UFDS:
         assert.equal(data.objectclass, Rule.objectclass,
-                'Incorrect objectclass returned from UFDS');
+            'Incorrect objectclass returned from UFDS');
         mod_rule.FwRule.call(this, ruleFromUFDS(data));
     } else {
         // Only require the global flag when coming in via the API:
@@ -387,11 +371,11 @@ Rule.prototype.rawMoray = function _ruleRawMoray() {
         _v: MORAY_RAW_VERSION
     };
 
-    if (this.hasOwnProperty('description')) {
+    if (hasKey(this, 'description')) {
         raw.description = this.description;
     }
 
-    if (this.hasOwnProperty('owner_uuid')) {
+    if (hasKey(this, 'owner_uuid')) {
         raw.owner = this.owner_uuid;
     }
 
@@ -405,10 +389,10 @@ Rule.prototype.rawMoray = function _ruleRawMoray() {
      * that uses the range 20-30. Because of this, we store 'PORT ALL' as the
      * full range of possible port numbers.
      */
-    if (this.hasOwnProperty('ports')) {
+    if (hasKey(this, 'ports')) {
         raw.ports = this.ports.map(function (port) {
-            if (port.hasOwnProperty('start') &&
-                port.hasOwnProperty('end')) {
+            if (hasKey(port, 'start') &&
+                hasKey(port, 'end')) {
                 if (port.start === 1 && port.end === 65535)
                     allPorts = true;
                 return fmt('[%s,%s]', port.start, port.end);
@@ -423,7 +407,7 @@ Rule.prototype.rawMoray = function _ruleRawMoray() {
         raw.ports = ['[1,65535]'];
     }
 
-    if (this.hasOwnProperty('types')) {
+    if (hasKey(this, 'types')) {
         raw.types = this.types;
     }
 
@@ -433,7 +417,7 @@ Rule.prototype.rawMoray = function _ruleRawMoray() {
             var keys = {};
             var val;
 
-            if (self[dir].hasOwnProperty(name) &&
+            if (hasKey(self[dir], name) &&
                 self[dir][name].length !== 0) {
                 if (type === 'tag') {
                     /*
@@ -487,24 +471,24 @@ Rule.prototype.rawUFDS = function _ruleRawUFDS() {
         version: this.version
     };
 
-    if (this.hasOwnProperty('description')) {
+    if (hasKey(this, 'description')) {
         raw.description = this.description;
     }
 
-    if (this.hasOwnProperty('owner_uuid')) {
+    if (hasKey(this, 'owner_uuid')) {
         raw.owner = this.owner_uuid;
     }
 
-    if (this.hasOwnProperty('ports')) {
+    if (hasKey(this, 'ports')) {
         raw.ports = this.ports.map(function (port) {
-            if (port.hasOwnProperty('start') &&
-                port.hasOwnProperty('end')) {
+            if (hasKey(port, 'start') &&
+                hasKey(port, 'end')) {
                 return port.start + '-' + port.end;
             } else return port;
         });
     }
 
-    if (this.hasOwnProperty('types')) {
+    if (hasKey(this, 'types')) {
         raw.types = this.types;
     }
 
@@ -513,7 +497,7 @@ Rule.prototype.rawUFDS = function _ruleRawUFDS() {
             var name = type + 's';
             var val;
 
-            if (self[dir].hasOwnProperty(name) &&
+            if (hasKey(self[dir], name) &&
                 self[dir][name].length !== 0) {
                 if (type === 'ip') {
                     val = self[dir][name].map(function (ip) {
@@ -542,7 +526,7 @@ Rule.prototype.rawUFDS = function _ruleRawUFDS() {
                     val = self[dir][name];
                 }
 
-                raw [dir + type] = val;
+                raw[dir + type] = val;
             }
         });
     });
@@ -568,7 +552,7 @@ Rule.prototype.serialize = function _ruleSerialize(opts) {
     }
 
     function addParsed() {
-        if (!ser.hasOwnProperty('parsed')) {
+        if (!hasKey(ser, 'parsed')) {
             ser.parsed = {};
         }
     }
diff --git a/lib/ufds/filter.js b/lib/ufds/filter.js
index 0b8fbc9..a152a99 100644
--- a/lib/ufds/filter.js
+++ b/lib/ufds/filter.js
@@ -12,15 +12,19 @@
  * Helpers for filtering UFDS data
  */
 
+'use strict';
+
 var fw = require('../rule');
-var isEmpty = require('../util/obj').isEmpty;
 var mod_err = require('../errors');
+var mod_jsprim = require('jsprim');
 var mod_rule = require('../rule');
 var restify = require('restify');
 var util = require('util');
 var validators = require('fwrule').validators;
 
 var fmt = util.format;
+var hasKey = mod_jsprim.hasKey;
+var isEmpty = mod_jsprim.isEmpty;
 
 
 // --- Internal helpers
@@ -41,20 +45,20 @@ function arrayify(obj) {
 function ruleCommonFilter(opts, filter) {
     var params = opts.params;
 
-    if (opts.hasOwnProperty('operation') && (opts.operation !== 'OR')) {
+    if (hasKey(opts, 'operation') && (opts.operation !== 'OR')) {
         throw new restify.InvalidArgumentError(
             'Invalid operation "%s" for filter', opts.operation);
     }
 
-    if (params.hasOwnProperty('enabled')) {
-        if ((params.enabled != 'true') && (params.enabled != 'false')) {
+    if (hasKey(params, 'enabled')) {
+        if ((params.enabled !== 'true') && (params.enabled !== 'false')) {
             throw new restify.InvalidArgumentError(
                 'Invalid value for enabled: must be true or false');
         }
         filter.push(fmt('(enabled=%s)', params.enabled));
     }
 
-    if (params.hasOwnProperty('port')) {
+    if (hasKey(params, 'port')) {
         if (!validators.validatePortOrAll(params.port)) {
             throw new restify.InvalidArgumentError(
                 'port is invalid');
@@ -62,7 +66,7 @@ function ruleCommonFilter(opts, filter) {
         filter.push(fmt('(port=%s)', params.port.toLowerCase()));
     }
 
-    if (params.hasOwnProperty('protocol')) {
+    if (hasKey(params, 'protocol')) {
         if (!validators.validateProtocol(params.protocol)) {
             throw new restify.InvalidArgumentError(
                 fmt('Invalid value for protocol: must be one of: %s',
@@ -71,7 +75,7 @@ function ruleCommonFilter(opts, filter) {
         filter.push(fmt('(protocol=%s)', params.protocol));
     }
 
-    if (params.hasOwnProperty('action')) {
+    if (hasKey(params, 'action')) {
         if (!validators.validateAction(params.action)) {
             throw new restify.InvalidArgumentError(
                 fmt('Invalid value for action: must be one of: %s',
@@ -137,7 +141,7 @@ function ruleMorayFilter(opts) {
 
     // tags are a special case: we can filter on tag key alone, or both
     // key and value
-    if (params.hasOwnProperty('tag')) {
+    if (hasKey(params, 'tag')) {
         if (typeof (params.tag === 'string')) {
             params.tag = arrayify(params.tag);
         }
@@ -193,7 +197,7 @@ function ruleMorayFilter(opts) {
             return;
         }
 
-        if (params.hasOwnProperty(type)) {
+        if (hasKey(params, type)) {
             var types = arrayify(params[type]);
             if (types.length !== 0) {
                 beginOR();
@@ -217,7 +221,7 @@ function ruleMorayFilter(opts) {
      *     '(fromvms=X)', '(tovms=X)', '(fromtags=Y)', '(totags=Y)'
      */
     var needsAND = false;
-    if (params.hasOwnProperty('owner_uuid')) {
+    if (hasKey(params, 'owner_uuid')) {
         var ownerFilter = [ fmt('(owner=%s)', params.owner_uuid) ];
 
         if (opts.ownerlessRules) {
@@ -307,7 +311,7 @@ function ruleUFDSFilter(opts) {
 
     // tags are a special case: we can filter on tag key alone, or both
     // key and value
-    if (params.hasOwnProperty('tag')) {
+    if (hasKey(params, 'tag')) {
         if (typeof (params.tag === 'string')) {
             params.tag = arrayify(params.tag);
         }
@@ -361,7 +365,7 @@ function ruleUFDSFilter(opts) {
             return;
         }
 
-        if (params.hasOwnProperty(type)) {
+        if (hasKey(params, type)) {
             var types = arrayify(params[type]);
             if (types.length !== 0) {
                 beginOR();
@@ -396,7 +400,7 @@ function ruleUFDSFilter(opts) {
     //     '(fromvm=X)', '(tovm=X)', '(fromtag=Y)', '(totag=Y)'
 
     var needsAND = false;
-    if (params.hasOwnProperty('owner_uuid')) {
+    if (hasKey(params, 'owner_uuid')) {
         var ownerFilter = [ fmt('(owner=%s)', params.owner_uuid) ];
 
         if (opts.ownerlessRules) {
diff --git a/lib/ufds/model.js b/lib/ufds/model.js
index 9526ad3..0914e2f 100644
--- a/lib/ufds/model.js
+++ b/lib/ufds/model.js
@@ -25,10 +25,10 @@
  *     <instance>.dn      s# the UFDS DN for this object
  */
 
-var clone = require('clone');
+'use strict';
+
 var mod_err = require('../errors');
 var restify = require('restify');
-var RestCodes = restify.RestCodes;
 
 
 
@@ -118,7 +118,8 @@ function modelPost(app, Model, data, log, callback) {
         item = new Model(data, app);
     } catch (e) {
         log.error(e, 'modelPost: <%s> constructor error', Model.name);
-        return callback(e);
+        callback(e);
+        return;
     }
 
     var dn = item.dn;
@@ -128,18 +129,20 @@ function modelPost(app, Model, data, log, callback) {
                 'modelPost: Error saving dn=%s', dn);
 
             // XXX: should change sdc-clients to use WError instead
-            if (err.name == 'InvalidArgumentError' &&
+            if (err.name === 'InvalidArgumentError' &&
                 err.message.indexOf('already exists') !== -1) {
                 err = new mod_err.createExistsErr(Model.name, item.idName);
             }
 
-            return callback(err);
+            callback(err);
+            return;
         }
 
         if (log.trace()) {
             log.trace(item.serialize(), 'modelPost: <%s> create', Model.name);
         }
-        return callback(null, item);
+
+        callback(null, item);
     });
 }
 
@@ -171,7 +174,8 @@ function modify(app, Model, dn, change, log, callback) {
         if (err) {
             log.error({ err: err, change: change },
                 'modify: Error updating <%s> (dn=%s)', Model.name, dn);
-            return callback(err);
+            callback(err);
+            return;
         }
 
         if (log.debug()) {
@@ -229,174 +233,12 @@ function modelGet(app, Model, dn, log, callback) {
 }
 
 
-function modelDelete(app, Model, dn, log, callback) {
+function modelDelete(app, _Model, dn, _log, callback) {
     // TODO: could validate the 'dn'
     app.ufds.del(dn, callback);
 }
 
 
-
-// --- request/response wrappers around the above helpers
-
-
-
-function requestList(req, res, next, Model) {
-    req.log.trace('<%s> list entered: params=%o, uriParams=%o',
-        Model.name, req.params, req.uriParams);
-
-    var parentDn;
-    try {
-        parentDn = Model.parentDnFromRequest(req);
-    } catch (err) {
-        req.log.error({ err: err, params: req.params},
-                'requestList: <%s>: error getting parent DN', Model.name);
-        return next(err);
-    }
-
-    modelList(req._app, Model, parentDn, req.log, function (err, items) {
-        if (err) {
-            return next(err);
-        }
-
-        var serialized = [];
-        for (var i in items) {
-            serialized.push(items[i].serialize());
-        }
-        res.send(200, serialized);
-        return next();
-    });
-}
-
-
-function requestListFiltered(opts, next) {
-    var req = opts.req;
-    var res = opts.res;
-    var Model = opts.model;
-    var filter = opts.filter;
-    var serializeOpts = opts.serializeOpts;
-
-    req.log.trace({
-        filter: filter,
-        params: req.params,
-        uriParams: req.uriParams
-    }, '<%s> list filtered entered', Model.name);
-
-    var parentDn;
-    try {
-        parentDn = Model.parentDnFromRequest(req);
-    } catch (err) {
-        req.log.error({ err: err, params: req.params},
-            'requestListFiltered: <%s>: error getting parent DN', Model.name);
-        return next(err);
-    }
-
-    modelListFiltered(req._app, Model, parentDn, filter, req.log,
-        function (err, items) {
-        if (err) {
-            return next(err);
-        }
-
-        res.send(200, items.map(function (it) {
-            if (serializeOpts) {
-                return it.serialize(serializeOpts);
-            }
-
-            return it.serialize();
-        }));
-
-        return next();
-    });
-}
-
-
-function requestPost(req, res, next, Model, populateCallback) {
-    req.log.trace('<%s> create entered: params=%o, uriParams=%o',
-        Model.name, req.params, req.uriParams);
-
-    // Note this means that the *route variable names* need to match the
-    // expected `data` key names in the models (e.g. `monitors.Monitor`).
-    var data = clone(req.params);
-    if (populateCallback) {
-        populateCallback(req, data);
-    }
-
-    modelPost(req._app, Model, data, req.log, function (err, item) {
-        if (err) {
-            return next(err);
-        }
-
-        res.send(200, item.serialize());
-        return next();
-    });
-}
-
-
-function requestPut(req, res, next, Model, populateCallback) {
-    req.log.trace(req.params, 'requestPut: <%s> update entered', Model.name);
-
-    // Note this means that the *route variable names* need to match the
-    // expected `data` key names in the models (e.g. `monitors.Monitor`).
-    var data = clone(req.params);
-    if (populateCallback) {
-        populateCallback(req, data);
-    }
-
-    var dn;
-    try {
-        dn = Model.dnFromRequest(req);
-    } catch (err) {
-        return next(err);
-    }
-
-    modelPut(req._app, Model, dn, data, req.log, function (err, item) {
-        if (err) {
-            return next(err);
-        }
-
-        res.send(200, item.serialize());
-        return next();
-    });
-}
-
-
-function requestGet(req, res, next, Model) {
-    req.log.trace(req.params, '<%s> get entered', Model.name);
-
-    var dn;
-    try {
-        dn = Model.dnFromRequest(req);
-    } catch (err) {
-        return next(err);
-    }
-
-    modelGet(req._app, Model, dn, req.log, function (err, item) {
-        if (err) {
-            return next(err);
-        }
-
-        res.send(200, item.serialize());
-        return next();
-    });
-}
-
-
-function requestDelete(req, res, next, Model) {
-    req.log.trace('<%s> delete entered: params=%o, uriParams=%o',
-        Model.name, req.params, req.uriParams);
-
-    var dn = Model.dnFromRequest(req);
-    modelDelete(req._app, Model, dn, req.log, function (err) {
-        if (err) {
-            return next(err);
-        }
-
-        res.send(204);
-        return next();
-    });
-}
-
-
-
 module.exports = {
     modelDelete: modelDelete,
     modelGet: modelGet,
@@ -404,11 +246,5 @@ module.exports = {
     modelListFiltered: modelListFiltered,
     modelPost: modelPost,
     modelPut: modelPut,
-    modify: modify,
-    requestDelete: requestDelete,
-    requestGet: requestGet,
-    requestList: requestList,
-    requestListFiltered: requestListFiltered,
-    requestPost: requestPost,
-    requestPut: requestPut
+    modify: modify
 };
diff --git a/lib/update.js b/lib/update.js
index 56e81fe..0f1f7cb 100644
--- a/lib/update.js
+++ b/lib/update.js
@@ -19,6 +19,8 @@ var util = require('util');
 var uuid = require('node-uuid');
 
 
+var hasKey = require('jsprim').hasKey;
+
 
 // --- Globals
 
@@ -193,7 +195,7 @@ UpdateServer.prototype.poll = function poll() {
         };
 
         // For backwards compat
-        if (rec.value.hasOwnProperty('payload')) {
+        if (hasKey(rec.value, 'payload')) {
             toSend.value = rec.value.payload;
         }
 
diff --git a/lib/util/array.js b/lib/util/array.js
index b0e9c27..d030374 100644
--- a/lib/util/array.js
+++ b/lib/util/array.js
@@ -12,6 +12,8 @@
  * Array utilities
  */
 
+'use strict';
+
 var util = require('util');
 
 
diff --git a/lib/util/constants.js b/lib/util/constants.js
index 6d5d903..fb3ff79 100644
--- a/lib/util/constants.js
+++ b/lib/util/constants.js
@@ -13,6 +13,8 @@
  */
 
 
+'use strict';
+
 
 // --- Globals
 
diff --git a/lib/util/ip.js b/lib/util/ip.js
index a8e2e81..4a6e752 100644
--- a/lib/util/ip.js
+++ b/lib/util/ip.js
@@ -12,10 +12,9 @@
  * IP-related utilities
  */
 
-var net = require('net');
-
+'use strict';
 
-var MAX_IP = 4294967295;
+var net = require('net');
 
 
 /*
@@ -53,40 +52,7 @@ function numberToAddress(num) {
 }
 
 
-/*
- * Converts CIDR (/xx) bits to netmask
- */
-function bitsToNetmask(bits) {
-    var n = 0;
-
-    for (var i = 0; i < (32 - bits); i++) {
-        n |= 1 << i;
-    }
-    return numberToAddress(MAX_IP - n);
-}
-
-
-/*
- * Converts netmask to CIDR (/xx) bits
- */
-function netmaskToBits(netmask) {
-    var num = ~addressToNumber(netmask);
-    var b = 0;
-    for (b = 0; b < 32; b++) {
-        if (num === 0) {
-            break;
-        }
-        num = num >>> 1;
-    }
-    return 32 - b;
-}
-
-
 module.exports = {
-    addressToNumber: addressToNumber,
     aton: addressToNumber,
-    bitsToNetmask: bitsToNetmask,
-    netmaskToBits: netmaskToBits,
-    numberToAddress: numberToAddress,
     ntoa: numberToAddress
 };
diff --git a/lib/util/obj.js b/lib/util/obj.js
deleted file mode 100644
index 4f6882b..0000000
--- a/lib/util/obj.js
+++ /dev/null
@@ -1,40 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2014, Joyent, Inc.
- */
-
-/*
- * Object utilities
- */
-
-
-
-// --- Exports
-
-
-
-/**
- * Returns true if the object has no keys
- */
-function isEmpty(obj) {
-    /* JSSTYLED */
-    /*jsl:ignore*/
-    for (var k in obj) {
-        return false;
-    }
-    /* JSSTYLED */
-    /*jsl:end*/
-
-    return true;
-}
-
-
-
-module.exports = {
-    isEmpty: isEmpty
-};
diff --git a/lib/util/validate.js b/lib/util/validate.js
index d7a04c7..be7b4da 100644
--- a/lib/util/validate.js
+++ b/lib/util/validate.js
@@ -12,6 +12,8 @@
  * Validation functions
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var constants = require('./constants');
 var mod_arr = require('./array');
diff --git a/package.json b/package.json
index d05cf32..3f27e85 100644
--- a/package.json
+++ b/package.json
@@ -6,6 +6,8 @@
   "private": true,
   "devDependencies": {
     "ldapjs": "0.6.3",
+    "eslint": "2.13.1",
+    "eslint-plugin-joyent": "1.0.1",
     "mockery": "1.4.0"
   },
   "dependencies": {
@@ -18,11 +20,12 @@
     "extsprintf": "1.0.2",
     "fast-stream": "git+https://github.com/joyent/sdc-fast-stream.git#893d59d",
     "fwrule": "git+https://github.com/joyent/sdc-fwrule.git#d1174be",
+    "jsprim": "1.3.1",
     "moray": "git+https://github.com/joyent/node-moray.git#b84ef0e",
     "tape": "4.2.2",
     "node-uuid": "1.2.0",
-    "sdc-clients": "git+https://github.com/joyent/node-sdc-clients.git#5b10072",
-    "ufds": "git+https://github.com/joyent/node-ufds.git#a7c674b76696fe7ab0fff1e2486f20d3af6a0d1a",
+    "sdc-clients": "9.5.0",
+    "ufds": "1.2.0",
     "restify": "git+https://github.com/mcavage/node-restify.git#0d7b4ba",
     "trace-event": "1.3.0",
     "vasync": "1.3",
diff --git a/server.js b/server.js
index dcc76fb..2ded0a5 100644
--- a/server.js
+++ b/server.js
@@ -12,6 +12,8 @@
  * Main entry-point for the firewall API.
  */
 
+'use strict';
+
 var fwapi = require('./lib/app');
 var assert = require('assert-plus');
 var bunyan = require('bunyan');
diff --git a/test/integration/get.test.js b/test/integration/get.test.js
index 3a7a084..258a424 100644
--- a/test/integration/get.test.js
+++ b/test/integration/get.test.js
@@ -12,6 +12,8 @@
  * Integration tests for getting rules
  */
 
+'use strict';
+
 var test = require('tape');
 var mod_rule = require('../lib/rule');
 var mod_uuid = require('node-uuid');
diff --git a/test/integration/global.test.js b/test/integration/global.test.js
index ddc021f..18cc44b 100644
--- a/test/integration/global.test.js
+++ b/test/integration/global.test.js
@@ -12,12 +12,11 @@
  * Integration tests for global rules
  */
 
+'use strict';
+
 var test = require('tape');
-var async = require('async');
-var h = require('./helpers');
 var mod_rule = require('../lib/rule');
 var mod_uuid = require('node-uuid');
-var util = require('util');
 
 
 
@@ -26,12 +25,12 @@ var util = require('util');
 
 
 var FORBIDDEN_BODY = {
-    code : 'Forbidden',
-    message : 'owner does not match',
-    errors : [ {
-        'field' : 'owner_uuid',
-        'code' : 'InvalidParameter',
-        'message' : 'owner_uuid does not match'
+    code: 'Forbidden',
+    message: 'owner does not match',
+    errors: [ {
+        'field': 'owner_uuid',
+        'code': 'InvalidParameter',
+        'message': 'owner_uuid does not match'
     } ]
 };
 var OWNERS = [ mod_uuid.v4() ];
diff --git a/test/integration/helpers.js b/test/integration/helpers.js
index 1167407..c67161b 100644
--- a/test/integration/helpers.js
+++ b/test/integration/helpers.js
@@ -12,6 +12,8 @@
  * Test helpers for FWAPI integration tests
  */
 
+'use strict';
+
 var common = require('../lib/common');
 
 
diff --git a/test/integration/list.test.js b/test/integration/list.test.js
index 0968f52..e211e05 100644
--- a/test/integration/list.test.js
+++ b/test/integration/list.test.js
@@ -12,14 +12,13 @@
  * Integration tests for listing rules
  */
 
+'use strict';
+
 var test = require('tape');
-var async = require('async');
 var constants = require('../../lib/util/constants');
 var extend = require('xtend');
-var h = require('./helpers');
 var mod_rule = require('../lib/rule');
 var mod_uuid = require('node-uuid');
-var util = require('util');
 
 
 
diff --git a/test/integration/provision.multi-test.js b/test/integration/provision.multi-test.js
index 4093e92..8370177 100644
--- a/test/integration/provision.multi-test.js
+++ b/test/integration/provision.multi-test.js
@@ -12,14 +12,12 @@
  * Provision workflow and FWAPI integration tests
  */
 
+'use strict';
+
 var test = require('tape');
-var async = require('async');
 var config = require('../lib/config');
-var fmt = require('util').format;
-var log = require('../lib/log');
 var mod_cn = require('../lib/cn');
 var mod_rule = require('../lib/rule');
-var mod_uuid = require('node-uuid');
 var mod_vm = require('../lib/vm');
 var util = require('util');
 
@@ -146,7 +144,8 @@ test('Provision VMs', function (t) {
             VMS = res;
         }
 
-        return t.end();
+        t.ifError(err, 'Provisioning VMs should succeed');
+        t.end();
     });
 });
 
diff --git a/test/integration/resolve.test.js b/test/integration/resolve.test.js
index f0721bb..01389a9 100644
--- a/test/integration/resolve.test.js
+++ b/test/integration/resolve.test.js
@@ -12,14 +12,14 @@
  * Unit tests for /resolve endpoint
  */
 
+'use strict';
+
 var test = require('tape');
 var assert = require('assert-plus');
 var async = require('async');
 var fmt = require('util').format;
-var helpers = require('./helpers');
 var mod_rule = require('../lib/rule');
 var mod_uuid = require('node-uuid');
-var util = require('util');
 
 
 
@@ -216,7 +216,8 @@ test('setup', function (t) {
             exp: rule
         }, cb);
     }, function (err) {
-        return t.end();
+        t.ifError(err, 'All creates and gets should succeed');
+        t.end();
     });
 });
 
@@ -534,7 +535,8 @@ test('resolve', function (t) {
         }, cb);
 
     }, function (err) {
-        return t.end();
+        t.ifError(err, 'All queries should resolve');
+        t.end();
     });
 });
 
@@ -579,7 +581,8 @@ test('list', function (t) {
         }, cb);
 
     }, function (err) {
-        return t.end();
+        t.ifError(err, 'Querying rules should succeed');
+        t.end();
     });
 });
 
diff --git a/test/integration/update.test.js b/test/integration/update.test.js
index 4bbf13d..5c1cd70 100644
--- a/test/integration/update.test.js
+++ b/test/integration/update.test.js
@@ -12,11 +12,12 @@
  * Update tests for /rules endpoints
  */
 
+'use strict';
+
 var test = require('tape');
 var async = require('async');
 var mod_rule = require('../lib/rule');
 var mod_uuid = require('node-uuid');
-var util = require('util');
 
 
 
diff --git a/test/integration/vm-update.multi-test.js b/test/integration/vm-update.multi-test.js
index 5b8ca88..945917a 100644
--- a/test/integration/vm-update.multi-test.js
+++ b/test/integration/vm-update.multi-test.js
@@ -12,6 +12,8 @@
  * Provision workflow and FWAPI integration tests
  */
 
+'use strict';
+
 var test = require('tape');
 var config = require('../lib/config');
 var mod_cn = require('../lib/cn');
diff --git a/test/lib/client.js b/test/lib/client.js
index 1790d19..e5e6c84 100644
--- a/test/lib/client.js
+++ b/test/lib/client.js
@@ -12,6 +12,8 @@
  * Test helpers for dealing with SDC clients
  */
 
+'use strict';
+
 var config = require('./config');
 var RestifyClient = require('sdc-clients/lib/restifyclient');
 var FWAPI = require('sdc-clients/lib/fwapi');
diff --git a/test/lib/cn.js b/test/lib/cn.js
index 4ad7091..2f3dc29 100644
--- a/test/lib/cn.js
+++ b/test/lib/cn.js
@@ -12,6 +12,8 @@
  * CN interaction helpers
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var clone = require('clone');
 var common = require('./common');
@@ -20,8 +22,8 @@ var done = common.done;
 var ifErr = common.ifErr;
 var fmt = require('util').format;
 var mod_client = require('./client');
+var mod_jsprim = require('jsprim');
 var mod_log = require('./log');
-var mod_obj = require('../../lib/util/obj.js');
 var restify = require('restify');
 var vasync = require('vasync');
 var VError = require('verror').VError;
@@ -67,36 +69,34 @@ function checkUrl(t, opts, callback) {
 
     getClient(t, opts.server_uuid, function (err, client) {
         if (err) {
-            return callback(err);
+            callback(err);
+            return;
         }
 
         var start = Date.now();
-        /*jsl:ignore*/
-        var timeout;
-        /*jsl:end*/
 
         function checkIt() {
             client.get(opts.url, function (err2, req, res, obj) {
                 var elapsed = Date.now() - start;
 
-                if (err2 && err2.body && err2.body.code == opts.errCode &&
+                if (err2 && err2.body && err2.body.code === opts.errCode &&
                     (elapsed < POLL_TIMEOUT)) {
 
                     // We haven't hit our timeout yet, so keep trying
                     LOG.trace({ start: start.toString(), elapsed: elapsed },
                         'timeout not hit: retrying' + opts.desc);
-                    timeout = setTimeout(checkIt, POLL_INTERVAL);
+                    setTimeout(checkIt, POLL_INTERVAL);
                     return;
                 }
 
                 LOG.debug({ start: start.toString(), elapsed: elapsed },
                     'poll timeout exceeded' + opts.desc);
 
-                return callback(err2, req, res, obj);
+                callback(err2, req, res, obj);
             });
         }
 
-        timeout = setTimeout(checkIt, POLL_INTERVAL);
+        setTimeout(checkIt, POLL_INTERVAL);
     });
 }
 
@@ -132,7 +132,7 @@ function createRemoteVM(vm) {
         });
     }
 
-    if (mod_obj.isEmpty(ips)) {
+    if (mod_jsprim.isEmpty(ips)) {
         err = new VError(
             'Remote VM "%s": missing IPs', uuid);
         err.details = vm;
@@ -141,7 +141,7 @@ function createRemoteVM(vm) {
 
     rvm.ips = Object.keys(ips).sort();
 
-    if (vm.hasOwnProperty('tags') && !mod_obj.isEmpty(vm.tags)) {
+    if (mod_jsprim.hasKey(vm, 'tags') && !mod_jsprim.isEmpty(vm.tags)) {
         rvm.tags = {};
         for (var t in vm.tags) {
             rvm.tags[t] = vm.tags[t];
@@ -162,7 +162,8 @@ function createRemoteVM(vm) {
  */
 function getAdminIP(t, uuid, callback) {
     if (ADMIN_IPS.hasOwnProperty(uuid)) {
-        return callback(null, ADMIN_IPS[uuid]);
+        callback(null, ADMIN_IPS[uuid]);
+        return;
     }
 
     var napi = mod_client.get('napi');
diff --git a/test/lib/common.js b/test/lib/common.js
index d58b2b6..35d74fd 100644
--- a/test/lib/common.js
+++ b/test/lib/common.js
@@ -13,6 +13,8 @@
  */
 
 
+'use strict';
+
 
 // --- Exports
 
diff --git a/test/lib/config.js b/test/lib/config.js
index c617dba..4b99e57 100644
--- a/test/lib/config.js
+++ b/test/lib/config.js
@@ -12,15 +12,30 @@
  * Test helpers for dealing with the NAPI client
  */
 
+'use strict';
 
 var fs = require('fs');
 var path = require('path');
 var VError = require('verror').VError;
 
 
+// --- Globals
 
-// --- Internal
 
+var CFG_ERR;
+var testFile = path.join(path.resolve(__dirname, '..'), 'config.json');
+var config = {};
+var HAVE_VARS;
+
+try {
+    config.test = JSON.parse(fs.readFileSync(testFile).toString());
+} catch (err) {
+    console.error('# Error loading test config %s: %s', testFile, err.message);
+    config.test = {};
+}
+
+
+// --- Internal
 
 
 function apiConfig(apiName) {
@@ -31,23 +46,9 @@ function apiConfig(apiName) {
 }
 
 
-
 // --- Exports
 
 
-
-var CFG_ERR;
-var testFile = path.join(path.resolve(__dirname, '..'), 'config.json');
-var config = {};
-var HAVE_VARS;
-
-try {
-    config.test = JSON.parse(fs.readFileSync(testFile).toString());
-} catch (err) {
-    console.error('# Error loading test config %s: %s', testFile, err.message);
-    config.test = {};
-}
-
 config.fwapi = apiConfig('fwapi');
 config.napi = apiConfig('napi');
 config.vmapi = apiConfig('vmapi');
diff --git a/test/lib/log.js b/test/lib/log.js
index 6436794..344e58f 100644
--- a/test/lib/log.js
+++ b/test/lib/log.js
@@ -12,6 +12,8 @@
  * bunyan logger for tests
  */
 
+'use strict';
+
 var bunyan = require('bunyan');
 
 module.exports = bunyan.createLogger({
diff --git a/test/lib/rule.js b/test/lib/rule.js
index 90803ee..d0c9b0c 100644
--- a/test/lib/rule.js
+++ b/test/lib/rule.js
@@ -12,6 +12,8 @@
  * Helpers for manipulating FWAPI rules
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var async = require('async');
 var clone = require('clone');
@@ -223,7 +225,8 @@ function del(t, opts, callback) {
 function delAllCreated(t, callback) {
     var toDel = Object.keys(RULES);
     if (toDel.length === 0) {
-        return done(null, toDel, t, callback);
+        done(null, toDel, t, callback);
+        return;
     }
 
     LOG.debug({ toDel: toDel }, 'deleting all created rules');
@@ -246,13 +249,18 @@ function delAllCreated(t, callback) {
  */
 function delAndGet(t, opts, callback) {
     del(t, opts, function (err, res) {
+        if (ifErr(t, err, 'Failed to delete rule')) {
+            callback(err);
+            return;
+        }
+
         opts.expErr = {
             code: 'ResourceNotFound',
             message: 'Rule not found'
         };
         opts.expCode = 404;
 
-        return get(t, opts, callback);
+        get(t, opts, callback);
     });
 }
 
@@ -396,7 +404,8 @@ function resolve(t, opts, callback) {
 
     getGlobalRules(t, client, function (gErr, globalRules) {
         if (gErr) {
-            return done(gErr, null, t, callback);
+            done(gErr, null, t, callback);
+            return;
         }
 
         var postParams = {
@@ -551,7 +560,8 @@ function vmRules(t, opts, callback) {
 
     getGlobalRules(t, client, function (gErr, globalRules) {
         if (gErr) {
-            return done(gErr, null, t, callback);
+            done(gErr, null, t, callback);
+            return;
         }
 
         client.getVMrules(opts.uuid, {}, function (err, obj, req, res) {
diff --git a/test/lib/vm.js b/test/lib/vm.js
index 0fa6685..21c923a 100644
--- a/test/lib/vm.js
+++ b/test/lib/vm.js
@@ -12,6 +12,8 @@
  * Helpers for manipulating VMs
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var async = require('async');
 var clone = require('clone');
@@ -73,7 +75,8 @@ function provisionOne(t, opts, callback) {
         if (ifErr(t, err, 'provision VM' + desc)) {
             t.deepEqual(vmParams, {}, 'VM params');
             LOG.error({ params: vmParams }, 'failed to create VM');
-            return callback(err);
+            callback(err);
+            return;
         }
 
         LOG.info({ vm: opts.vm, vm_uuid: job.vm_uuid, job_uuid: job.job_uuid },
@@ -83,14 +86,16 @@ function provisionOne(t, opts, callback) {
         function checkState() {
             client.getVm({ uuid: job.vm_uuid }, function (err2, res) {
                 if (err2) {
-                    return callback(err2);
+                    callback(err2);
+                    return;
                 }
 
                 if (res.state === 'running') {
                     VMS[res.uuid] = clone(res);
                     LOG.debug({ vm_uuid: job.vm_uuid, vm: res },
                         'successfully provisioned VM');
-                    return callback(null, res);
+                    callback(null, res);
+                    return;
                 }
 
                 if (res.state === 'failed') {
@@ -100,9 +105,10 @@ function provisionOne(t, opts, callback) {
                         vm_uuid: job.vm_uuid
                     }, 'failed to provision VM');
 
-                    return callback(new VError(
+                    callback(new VError(
                         'failed to provision VM %s (job %s)',
                         job.vm_uuid, job.job_uuid));
+                    return;
                 }
 
                 if (Date.now() - startTime > PROV_TIMEOUT) {
@@ -112,9 +118,10 @@ function provisionOne(t, opts, callback) {
                         vm_uuid: job.vm_uuid
                     }, 'timeout provisioning VM');
 
-                    return callback(new VError(
+                    callback(new VError(
                         'provision of VM %s (job %s) timed out',
                         job.vm_uuid, job.job_uuid));
+                    return;
                 }
 
                 setTimeout(checkState, POLL_INTERVAL);
diff --git a/test/unit/helpers.js b/test/unit/helpers.js
index 8359552..c0f11b1 100644
--- a/test/unit/helpers.js
+++ b/test/unit/helpers.js
@@ -12,6 +12,8 @@
  * Test helpers for FWAPI unit tests
  */
 
+'use strict';
+
 var assert = require('assert-plus');
 var async = require('async');
 var app;
@@ -19,6 +21,7 @@ var clone = require('clone');
 var fwapiClient = require('sdc-clients/lib/fwapi');
 var mockery = require('mockery');
 var mocks = require('./mocks');
+var mod_common = require('../lib/common');
 var mod_uuid = require('node-uuid');
 var os = require('os');
 var restify = require('restify');
@@ -172,7 +175,7 @@ function setupMocks() {
 
 
 /**
- * Stops the test NAPI server
+ * Stops the test FWAPI server
  */
 function stopServer(callback) {
     if (!SERVER) {
@@ -194,6 +197,7 @@ function uuidSort(a, b) {
 
 module.exports = {
     createClientAndServer: createClientAndServer,
+    ifErr: mod_common.ifErr,
     generateVM: generateVM,
     getMorayUpdates: getMorayUpdates,
     morayUpdate: morayUpdate,
diff --git a/test/unit/mocks.js b/test/unit/mocks.js
index 5898d62..b72c751 100644
--- a/test/unit/mocks.js
+++ b/test/unit/mocks.js
@@ -12,6 +12,8 @@
  * Mock objects for FWAPI unit tests
  */
 
+'use strict';
+
 var EventEmitter = require('events').EventEmitter;
 var mockMoray = require('../lib/mock-moray');
 var mod_uuid = require('node-uuid');
@@ -22,18 +24,14 @@ var VError = require('verror').VError;
 
 // --- Globals
 
-
-
-var LOG;
 var UFDS_RULES = {};
 
 
-
 // --- sdc-clients: UFDS
 
 
 
-function fakeUFDSclient() {
+function FakeUFDSclient() {
     var self = this;
     EventEmitter.call(this);
     process.nextTick(function () {
@@ -41,7 +39,7 @@ function fakeUFDSclient() {
     });
 }
 
-util.inherits(fakeUFDSclient, EventEmitter);
+util.inherits(FakeUFDSclient, EventEmitter);
 
 
 function ruleUUIDfromDN(dn) {
@@ -51,7 +49,7 @@ function ruleUUIDfromDN(dn) {
 }
 
 
-fakeUFDSclient.prototype.add = function (dn, raw, callback) {
+FakeUFDSclient.prototype.add = function (dn, raw, callback) {
     var ruleUUID = ruleUUIDfromDN(dn);
     if (ruleUUID) {
         UFDS_RULES[ruleUUID] = raw;
@@ -61,7 +59,7 @@ fakeUFDSclient.prototype.add = function (dn, raw, callback) {
 };
 
 
-fakeUFDSclient.prototype.del = function (dn, callback) {
+FakeUFDSclient.prototype.del = function (dn, callback) {
     var ruleUUID = ruleUUIDfromDN(dn);
     if (ruleUUID) {
         if (!UFDS_RULES.hasOwnProperty(ruleUUID)) {
@@ -75,12 +73,12 @@ fakeUFDSclient.prototype.del = function (dn, callback) {
 };
 
 
-fakeUFDSclient.prototype.close = function (callback) {
+FakeUFDSclient.prototype.close = function (callback) {
     return callback();
 };
 
 
-fakeUFDSclient.prototype.modify = function (dn, change, callback) {
+FakeUFDSclient.prototype.modify = function (dn, change, callback) {
     var ruleUUID = ruleUUIDfromDN(dn);
     if (ruleUUID) {
         UFDS_RULES[ruleUUID] = change.modification;
@@ -90,7 +88,7 @@ fakeUFDSclient.prototype.modify = function (dn, change, callback) {
 };
 
 
-fakeUFDSclient.prototype.search = function (dn, opts, callback) {
+FakeUFDSclient.prototype.search = function (dn, opts, callback) {
     if (opts.scope === 'base') {
         var ruleUUID = ruleUUIDfromDN(dn);
         var rule = UFDS_RULES[ruleUUIDfromDN(dn)];
@@ -124,14 +122,5 @@ module.exports = {
         VMAPI: fakeVMAPIclient
     },
 
-    ufds: fakeUFDSclient,
-
-    // -- mock data
-    set _LOGGER(val) {
-        LOG = val;
-    },
-
-    get _BUCKETS() {
-        return mockMoray._buckets;
-    }
+    ufds: FakeUFDSclient
 };
diff --git a/test/unit/rule.test.js b/test/unit/rule.test.js
index 11a5dc9..8a15a02 100644
--- a/test/unit/rule.test.js
+++ b/test/unit/rule.test.js
@@ -12,6 +12,8 @@
  * Unit tests for the firewall rule object
  */
 
+'use strict';
+
 var test = require('tape');
 var mod_rule = require('../../lib/rule');
 var mod_uuid = require('node-uuid');
@@ -220,7 +222,7 @@ test('global', function (t) {
             owner_uuid: mod_uuid.v4(),
             global: true
         });
-    } catch (pErr) {
+    } catch (_) {
         caught = true;
     }
 
diff --git a/test/unit/update.test.js b/test/unit/update.test.js
index 6948b3d..7f0a8e5 100644
--- a/test/unit/update.test.js
+++ b/test/unit/update.test.js
@@ -12,9 +12,10 @@
  * Unit tests for /rules endpoints
  */
 
+'use strict';
+
 var test = require('tape');
 var h = require('./helpers');
-var mocks = require('./mocks');
 var util = require('util');
 
 
@@ -23,9 +24,6 @@ var util = require('util');
 
 
 
-// Set this to any of the exports in this file to only run that test,
-// plus setup and teardown
-var runOne;
 var FWAPI;
 var RULES = [];
 var VMS = [ h.generateVM(), h.generateVM() ];
@@ -60,9 +58,9 @@ test('Add rule', function (t) {
     });
 
     FWAPI.createRule(RULES[0], function (err, obj, req, res) {
-        t.ifError(err, 'rule create');
-        if (err) {
-            return t.end();
+        if (h.ifErr(t, err, 'rule create')) {
+            t.end();
+            return;
         }
 
         t.equal(res.statusCode, 202, 'status code');
@@ -97,9 +95,9 @@ test('Update rule', function (t) {
     RULES[0].rule = payload.rule;
 
     FWAPI.updateRule(RULES[0].uuid, payload, function (err, obj, req, res) {
-        t.ifError(err, 'rule update');
-        if (err) {
-            return t.end();
+        if (h.ifErr(t, err, 'rule update')) {
+            t.end();
+            return;
         }
 
         t.equal(res.statusCode, 202, 'status code');
@@ -125,10 +123,10 @@ test('Update rule', function (t) {
 
 
 test('Delete rule', function (t) {
-    FWAPI.deleteRule(RULES[0].uuid, function (err, obj, req, res) {
-        t.ifError(err, 'rule delete');
-        if (err) {
-            return t.end();
+    FWAPI.deleteRule(RULES[0].uuid, function (err, _, req, res) {
+        if (h.ifErr(t, err, 'rule delete')) {
+            t.end();
+            return;
         }
 
         t.equal(res.statusCode, 204, 'status code');
diff --git a/tools/eslint.node.conf b/tools/eslint.node.conf
new file mode 100644
index 0000000..95fcdd8
--- /dev/null
+++ b/tools/eslint.node.conf
@@ -0,0 +1,21 @@
+{
+    "plugins": [ "joyent" ],
+    "extends": [
+        "eslint:recommended",
+        "plugin:joyent/style",
+        "plugin:joyent/lint"
+    ],
+    "parserOptions": {
+        "ecmaVersion": 5,
+        "sourceType": "script",
+        "ecmaFeatures": {
+        }
+    },
+    "env": {
+        "node": true
+    },
+    "rules": {
+        "strict": [ "error", "global" ],
+        "object-curly-newline": "off"
+    }
+}
diff --git a/tools/jsl.node.conf b/tools/jsl.node.conf
index c7eed92..b8354e4 100644
--- a/tools/jsl.node.conf
+++ b/tools/jsl.node.conf
@@ -32,7 +32,7 @@
 +legacy_cc_not_understood     # couldn't understand control comment using /*@keyword@*/ syntax
 +meaningless_block            # meaningless block; curly braces have no impact
 +mismatch_ctrl_comments       # mismatched control comment; "ignore" and "end" control comments must have a one-to-one correspondence
-+misplaced_regex              # regular expressions should be preceded by a left parenthesis, assignment, colon, or comma
+-misplaced_regex              # regular expressions should be preceded by a left parenthesis, assignment, colon, or comma
 +missing_break                # missing break statement
 +missing_break_for_last_case  # missing break statement for last case in switch
 +missing_default_case         # missing default case in switch statement
@@ -52,7 +52,7 @@
 +unreachable_code             # unreachable code
 -unreferenced_argument        # argument declared but never referenced: {name}
 -unreferenced_function        # function is declared but never referenced: {name}
-+unreferenced_variable        # variable is declared but never referenced: {name}
+-unreferenced_variable        # variable is declared but never referenced: {name}
 +unsupported_version          # JavaScript {version} is not supported
 +use_of_label                 # use of label
 +useless_assign               # useless assignment
@@ -60,7 +60,7 @@
 -useless_quotes               # the quotation marks are unnecessary
 +useless_void                 # use of the void type may be unnecessary (void is always undefined)
 +var_hides_arg                # variable {name} hides argument
-+want_assign_or_call          # expected an assignment or function call
+-want_assign_or_call          # expected an assignment or function call
 +with_statement               # with statement hides undeclared variables; use temporary variable instead
 
 
@@ -118,6 +118,7 @@
 +define module
 +define process
 +define require
++define setImmediate
 +define setInterval
 +define setTimeout
 +define Buffer
