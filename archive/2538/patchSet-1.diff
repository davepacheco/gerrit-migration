From 19f1035b60053f3e827aa0f2a81aa9c9d3c2ff04 Mon Sep 17 00:00:00 2001
From: Todd Whiteman <todd.whiteman@joyent.com>
Date: Sun, 10 Sep 2017 10:05:14 -0700
Subject: [PATCH] IMGAPI-645 create a simple and fast imgapiadm check-files

---
 CHANGES.md   |  4 ++++
 lib/adm.js   | 52 +++++++++++++++++++++++++++++++++++++++++++++++++---
 package.json |  2 +-
 3 files changed, 54 insertions(+), 4 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index 277d000..a42adff 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -1,5 +1,9 @@
 # IMGAPI changelog
 
+## 4.0.9
+
+- IMGAPI-645 create a simple and fast imgapiadm check-files
+
 ## 4.0.8
 
 - IMGAPI-644 the docker image cache must clear activated image entries
diff --git a/lib/adm.js b/lib/adm.js
index 6d6f1fb..283c14c 100644
--- a/lib/adm.js
+++ b/lib/adm.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -177,6 +177,9 @@ function do_check_files(subcmd, opts, args, cb) {
     }
 
     var cachePath = '/data/imgapiadm/cache/check-files.json';
+    if (opts.dockerV2) {
+        cachePath = '/data/imgapiadm/cache/check-files-v2.json';
+    }
     function saveCacheSync(obj) {
         var dir = path.dirname(cachePath);
         if (! fs.existsSync(dir)) {
@@ -312,6 +315,29 @@ function do_check_files(subcmd, opts, args, cb) {
             next();
         },
 
+        function filterDockerV2(ctx, next) {
+            if (!opts.dockerV2) {
+                return next();
+            }
+
+            var filtered = [];
+            for (var i = 0; i < ctx.imgs.length; i++) {
+                var img = ctx.imgs[i];
+                if (typeof (img.tags) !== 'object') {
+                    continue;
+                }
+                var dockerId = img.tags['docker:id'];
+                if (!dockerId || dockerId.substr(0, 7) !== 'sha256:') {
+                    continue;
+                }
+                filtered.push(img);
+            }
+            log.info('%d of %d docker manifest v2 image layers were found',
+                filtered.length, ctx.imgs.length);
+            ctx.imgs = filtered;
+            next();
+        },
+
         function filterAlreadyCheckedFiles(ctx, next) {
             if (opts.force) {
                 return next();
@@ -377,7 +403,8 @@ function do_check_files(subcmd, opts, args, cb) {
                     var uuid = todo.img.uuid;
                     self._checkLocalImageFile({
                         manifest: todo.img,
-                        path: todo.path
+                        path: todo.path,
+                        simpleCheck: opts.simple
                     }, function (err) {
                         bar.advance(1);
                         if (err) {
@@ -438,6 +465,16 @@ Adm.prototype.do_check_files.options = [
         names: ['force', 'f'],
         type: 'bool',
         help: 'Do not skip image files that have already been checked.'
+    },
+    {
+        names: ['dockerV2', 'd'],
+        type: 'bool',
+        help: 'Only check docker manifest v2 image layers'
+    },
+    {
+        names: ['simple', 's'],
+        type: 'bool',
+        help: 'Simple check for file existance and correct file size'
     }
 ];
 Adm.prototype.do_check_files.help = (
@@ -455,6 +492,7 @@ Adm.prototype.do_check_files.help = (
 Adm.prototype._checkLocalImageFile = function _checkLocalImageFile(opts, cb) {
     assert.string(opts.path, 'opts.path');
     assert.object(opts.manifest, 'opts.manifest');
+    assert.optionalBool(opts.simpleCheck, 'opts.simpleCheck');
     assert.func(cb, 'cb');
 
     var self = this;
@@ -472,6 +510,8 @@ Adm.prototype._checkLocalImageFile = function _checkLocalImageFile(opts, cb) {
             if (ctx.stat.size !== manFile.size) {
                 next(new Error('invalid size (actual %s != manifest %s)',
                     ctx.stat.size, manFile.size));
+            } else if (opts.simpleCheck) {
+                next(true);  /* early abort */
             } else {
                 next();
             }
@@ -540,7 +580,13 @@ Adm.prototype._checkLocalImageFile = function _checkLocalImageFile(opts, cb) {
                 }
             });
         }
-    ]}, cb);
+    ]}, function (err) {
+        if (err === true) {
+            /* the early abort marker */
+            err = null;
+        }
+        cb(err);
+    });
 };
 
 
diff --git a/package.json b/package.json
index 21f37c1..a67ae66 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "imgapi",
   "description": "Image API to manage images for SDC 7",
-  "version": "4.0.8",
+  "version": "4.0.9",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
-- 
2.21.0

