From a822edc4b273f06e0bc5d7636d0eb877b1ade810 Mon Sep 17 00:00:00 2001
From: Tim Foster <tim.foster@joyent.com>
Date: Fri, 31 Aug 2018 11:18:32 +0100
Subject: [PATCH] TOOLS-2228 convert headnode build to engbld framework
 TOOLS-2071 headnode build should work with a local manta-style BITS_DIR

---
 .gitignore                                |   3 +
 .gitmodules                               |   3 +
 Makefile                                  | 239 +++++++++++++++++++---
 README.md                                 |  49 ++++-
 bin/build-coal-image                      |   5 +-
 bin/build-usb-image                       |   5 +-
 bin/convert-configure-branches.js         | 138 +++++++++++++
 bin/include-tar-generic                   |  11 +-
 bin/unique-branches                       |   5 +
 buildtools/lib/common.sh                  |   7 +
 buildtools/mk/Makefile.defs               |  51 -----
 buildtools/mk/Makefile.deps               |  52 -----
 buildtools/mk/Makefile.node.defs          | 104 ----------
 buildtools/mk/Makefile.node.targ          |  42 ----
 buildtools/mk/Makefile.node_deps.defs     |  43 ----
 buildtools/mk/Makefile.node_deps.targ     |  24 ---
 buildtools/mk/Makefile.node_prebuilt.defs | 153 --------------
 buildtools/mk/Makefile.smf.defs           |  40 ----
 buildtools/mk/Makefile.smf.targ           |  29 ---
 buildtools/novus/cmd/downloader.js        |  45 +++-
 buildtools/novus/cmd/unique-branches.js   |  88 ++++++++
 buildtools/novus/lib/bits_from/dir.js     |   6 +-
 deps/eng                                  |   1 +
 23 files changed, 562 insertions(+), 581 deletions(-)
 create mode 100755 bin/convert-configure-branches.js
 create mode 100755 bin/unique-branches
 delete mode 100644 buildtools/mk/Makefile.defs
 delete mode 100644 buildtools/mk/Makefile.deps
 delete mode 100644 buildtools/mk/Makefile.node.defs
 delete mode 100644 buildtools/mk/Makefile.node.targ
 delete mode 100644 buildtools/mk/Makefile.node_deps.defs
 delete mode 100644 buildtools/mk/Makefile.node_deps.targ
 delete mode 100644 buildtools/mk/Makefile.node_prebuilt.defs
 delete mode 100644 buildtools/mk/Makefile.smf.defs
 delete mode 100644 buildtools/mk/Makefile.smf.targ
 create mode 100644 buildtools/novus/cmd/unique-branches.js
 create mode 160000 deps/eng

diff --git a/.gitignore b/.gitignore
index 69ae1ac6..a6c6d10c 100644
--- a/.gitignore
+++ b/.gitignore
@@ -10,6 +10,7 @@
 /config/*.local
 /config/root.authorized_keys
 /build.spec.local
+/configure-branches
 /*.vmwarevm
 /*.img
 /log
@@ -23,6 +24,7 @@
 /answers.json
 /tools.tar.gz
 /cn_tools.tar.gz
+/bits
 /build
 /proto
 /docs/*.html
@@ -32,3 +34,4 @@ usb_key.manifest
 root.password.*
 config/config.inc/root.authorized_keys
 /0-*-stamp
+/release.json
diff --git a/.gitmodules b/.gitmodules
index da3ef7d7..30956c12 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -4,3 +4,6 @@
 [submodule "deps/jsstyle"]
 	path = deps/jsstyle
 	url = https://github.com/joyent/jsstyle.git
+[submodule "deps/eng"]
+	path = deps/eng
+	url = https://github.com/joyent/eng.git
diff --git a/Makefile b/Makefile
index 2bd46912..695675b7 100644
--- a/Makefile
+++ b/Makefile
@@ -11,6 +11,40 @@
 
 PERCENT := %
 
+#
+# The headnode build the following variants, declared by the $(HEADNODE_VARIANT)
+# variable:
+# 'debug'           use a debug platform image
+# 'joyent'          include specific firmware for Joyent deployments
+# 'joyent-debug'    a combination of the above
+#
+ifdef HEADNODE_VARIANT
+    HEADNODE_VARIANT_SUFFIX=-$(HEADNODE_VARIANT)
+endif
+
+NAME = headnode$(HEADNODE_VARIANT_SUFFIX)
+
+ifeq ($(HEADNODE_VARIANT), debug)
+    DEBUG_BUILD=true
+endif
+
+ifeq ($(HEADNODE_VARIANT), joyent)
+    JOYENT_BUILD=true
+    # this is an internal build.
+    ENGBLD_DEST_OUT_PATH ?= /stor/builds
+endif
+
+ifeq ($(HEADNODE_VARIANT), joyent-debug)
+    JOYENT_BUILD=true
+    DEBUG_BUILD=true
+    # this is an internal build.
+    ENGBLD_DEST_OUT_PATH ?= /stor/builds
+endif
+
+ifdef DEBUG_BUILD
+    DEBUG_SUFFIX=-debug
+endif
+
 #
 # Files
 #
@@ -18,9 +52,11 @@ PERCENT := %
 ifeq ($(shell uname -s),SunOS)
 GREP = /usr/xpg4/bin/grep
 TAR = gtar
+TAR_COMPRESSION = pigz
 else
 GREP = grep
 TAR = tar
+TAR_COMPRESSION = gzip
 endif
 
 BASH_FILES := \
@@ -197,36 +233,113 @@ TOOLS_DEPS = \
 #
 # Included definitions
 #
-include ./buildtools/mk/Makefile.defs
-
+ENGBLD_REQUIRE          := $(shell git submodule update --init deps/eng)
+include ./deps/eng/tools/mk/Makefile.defs
+TOP ?= $(error Unable to access eng.git submodule Makefiles.)
 
 #
 # usb-headnode-specific targets
 #
 
 .PHONY: all
-all: coal
+all: coal gz-tools
+
+check:: $(ESLINT_TARGET) check-jsl check-json $(JSSTYLE_TARGET) check-bash \
+    $(EXTRA_CHECK_TARGETS)
 
 0-npm-stamp: package.json
 	npm install
 	touch $@
 
+#
+# Primarily a convenience for developers, we convert a simple
+# 'configure-branches' file into a 'build.spec.local' file if a
+# configure-branches file is present. This allows developers to declare which
+# branches should be used for the build without having to write JSON manually.
+#
+# If both a configure-branches and a build.spec.local file exist, we ensure
+# they are identical before proceeding (to prevent confusion where we may
+# otherwise assemble a headnode based on a now-stale build.spec.local file)
+# We use diff rather than a logical compare, but it will do.
+#
+# The format of configure-branches (also used by the platform build) is:
+#
+# <key> <colon> <value>
+# <hash comment> [any text]
+#
+.PHONY: convert-configure-branches
+convert-configure-branches:
+	@if [ -f configure-branches ]; then \
+	    if [ ! -f build.spec.local ]; then \
+	        echo "converting configure-branches to build.spec.local"; \
+	        ./bin/convert-configure-branches.js > build.spec.local; \
+	    else \
+	        ./bin/convert-configure-branches.js > /tmp/b.s.local.$$$$; \
+	        DIFF=$$(diff /tmp/b.s.local.$$$$ build.spec.local); \
+	        RES=$$?; \
+	        rm /tmp/b.s.local.$$$$; \
+	        if [ $$RES -ne 0 ]; then \
+	            echo "WARNING: an existing build.spec.local was found and"; \
+	            echo "differs from configure-branches."; \
+	            echo "Delete either the stale build.spec.local or the"; \
+	            echo "configure-branches file to resolve this."; \
+	            echo "$$DIFF"; \
+	        fi \
+	    fi \
+	fi
+
+#
+# If a specific build.spec.local file does not exist, create a default
+# using the $(BRANCH), likely passed to us from jenkins, denoting the branch
+# of smartos-live we're using. As eng.git already converts that into a
+# short-form branch name, we don't need to worry about long form branch names
+# e.g. refs/remotes/origin/master
+#
+.PHONY: build-spec-local
+build-spec-local: convert-configure-branches
+	if [ ! -f build.spec.local ]; then \
+	    echo "{\"bits-branch\": \"$(BRANCH)\"}" > build.spec.local; \
+	fi
+
+#
+# Delete any failed image files that might be sitting around before building.
+# This is safe because only one headnode build runs at a time. Also cleanup any
+# unused lofi devices (used ones will just fail)
+#
+.PHONY: clean-img-cruft
+clean-img-cruft:
+ifeq ($(shell uname -s),SunOS)
+	pfexec rm -vf /tmp/*4gb.img
+	for dev in $(shell lofiadm | cut -d ' ' -f1 | grep -v "^Block"); do  \
+	    mount | grep "on $${dev}" | cut -d' ' -f1 | while read mntpath; do \
+	        pfexec umount $${mntpath}; \
+	        done; \
+	    pfexec lofiadm -d $${dev}; \
+	done
+endif
+
 CLEAN_FILES += 0-npm-stamp
 
 .PHONY: deps
-deps: 0-npm-stamp
+deps: 0-npm-stamp clean-img-cruft build-spec-local
 
 .PHONY: coal
 coal: deps download $(TOOLS_DEPS)
-	bin/build-image coal
+	TIMESTAMP=$(TIMESTAMP) \
+	DEBUG_BUILD=$(DEBUG_BUILD) \
+	JOYENT_BUILD=$(JOYENT_BUILD) bin/build-image coal
 
 .PHONY: usb
 usb: deps download $(TOOLS_DEPS)
-	bin/build-image usb
+	TIMESTAMP=$(TIMESTAMP) \
+	DEBUG_BUILD=$(DEBUG_BUILD) \
+	JOYENT_BUILD=$(JOYENT_BUILD) bin/build-image usb
 
 .PHONY: boot
 boot: deps download $(TOOLS_DEPS)
-	bin/build-image tar
+	TIMESTAMP=$(TIMESTAMP) \
+	DEBUG_BUILD=$(DEBUG_BUILD) \
+	JOYENT_BUILD=$(JOYENT_BUILD) bin/build-image tar
 
 .PHONY: tar
 tar: boot
@@ -241,7 +354,9 @@ download: deps
 	mkdir -p log
 	$(CHECKER)
 	if [ -z $${NO_DOWNLOAD} ]; then \
-		$(DOWNLOADER) -d -w "log/artefacts.json"; \
+		DEBUG_BUILD=$(DEBUG_BUILD) \
+		JOYENT_BUILD=$(JOYENT_BUILD) \
+		    $(DOWNLOADER) -d -w "log/artefacts.json"; \
 	else \
 		true; \
 	fi
@@ -258,6 +373,11 @@ coal-and-open: coal
 update-tools-modules:
 	./bin/mk-sdc-clients-light.sh v11.3.1 tools/node_modules/sdc-clients
 
+#
+# Unlike the rest of the headnode artifacts, $(STAMP) here really does reflect
+# the contents of the gz-tools bits. Elsewhere, we use ${PUB_STAMP} to take
+# account of any build.spec.local changes
+#
 GZ_TOOLS_STAMP := gz-tools-$(STAMP)
 GZ_TOOLS_MANIFEST := $(GZ_TOOLS_STAMP).manifest
 GZ_TOOLS_TARBALL := $(GZ_TOOLS_STAMP).tgz
@@ -274,7 +394,7 @@ gz-tools: $(TOOLS_DEPS)
 		$(TOP)/default \
 		$(TOP)/scripts \
 		build/$(GZ_TOOLS_STAMP)/gz-tools
-	(cd build/$(GZ_TOOLS_STAMP) && tar czf ../../$(GZ_TOOLS_TARBALL) gz-tools)
+	(cd build/$(GZ_TOOLS_STAMP) && $(TAR) -I $(TAR_COMPRESSION) -cf ../../$(GZ_TOOLS_TARBALL) gz-tools)
 	cat $(PROTO)/opt/smartdc/etc/gz-tools.image > build/$(GZ_TOOLS_STAMP)/image_uuid
 	cat $(TOP)/manifests/gz-tools.manifest.tmpl | sed \
 		-e "s/UUID/$$(cat build/$(GZ_TOOLS_STAMP)/image_uuid)/" \
@@ -287,18 +407,7 @@ gz-tools: $(TOOLS_DEPS)
 		> $(TOP)/$(GZ_TOOLS_MANIFEST)
 	rm -rf build/$(GZ_TOOLS_STAMP)
 
-CLEAN_FILES += build/gz-tools
-
-.PHONY: gz-tools-publish
-gz-tools-publish: gz-tools
-	@if [[ -z "$(BITS_DIR)" ]]; then \
-		@echo "error: 'BITS_DIR' must be set for 'gz-tools-publish' target"; \
-		exit 1; \
-	fi
-	mkdir -p $(BITS_DIR)/gz-tools
-	cp $(TOP)/$(GZ_TOOLS_TARBALL) $(BITS_DIR)/gz-tools/$(GZ_TOOLS_TARBALL)
-	cp $(TOP)/$(GZ_TOOLS_MANIFEST) $(BITS_DIR)/gz-tools/$(GZ_TOOLS_MANIFEST)
-
+CLEAN_FILES += build/gz-tools *.tgz $(GZ_TOOLS_MANIFEST) release.json
 
 #
 # Tools tarball
@@ -306,7 +415,7 @@ gz-tools-publish: gz-tools
 
 tools.tar.gz: tools
 	rm -f $(TOP)/tools.tar.gz
-	cd $(PROTO)/opt/smartdc && tar cfz $(TOP)/$(@F) \
+	cd $(PROTO)/opt/smartdc && $(TAR) -I $(TAR_COMPRESSION) -cf $(TOP)/$(@F) \
 	    bin cmd share lib man node_modules etc
 
 #
@@ -315,7 +424,7 @@ tools.tar.gz: tools
 
 cn_tools.tar.gz: tools
 	rm -f $(TOP)/cn_tools.tar.gz
-	cd $(PROTO)/opt/smartdc && tar cfz $(TOP)/$(@F) \
+	cd $(PROTO)/opt/smartdc && $(TAR) -I $(TAR_COMPRESSION) -cf $(TOP)/$(@F) \
 	    $(CN_TOOLS_FILES)
 
 #
@@ -367,7 +476,7 @@ USBKEY_SCRIPTS = \
 
 USBKEY_TARBALLS = \
 	cache/file.ipxe.tar.gz \
-	cache/file.platboot.tgz
+	cache/file.platboot$(DEBUG_SUFFIX).tgz
 
 $(USBKEY_TARBALLS): download
 
@@ -419,11 +528,89 @@ $(SDC_ZONE_MAN_LINKS):
 	rm -f $@
 	ln -s ../../sdc/man/man1/$(@F) $@
 
+#
+# Artifact publication, typically used for Jenkins builds. We compute
+# PUB_STAMP and BRANCH_STAMP in the target rather than as a Makefile macro
+# since its value depends on us possibly generating a build.spec.local file
+# first.
+#
+.PHONY: release-json
+release-json:
+	UNIQUE_BRANCHES=$$(./bin/unique-branches $(BRANCH)); \
+	PUB_STAMP=$(BRANCH)$$UNIQUE_BRANCHES-$(TIMESTAMP)-$(_GITDESCRIBE); \
+	BRANCH_STAMP=$(BRANCH)$$UNIQUE_BRANCHES; \
+	echo "{ \
+	   \"date\": \"$(TIMESTAMP)\", \
+	   \"branch\": \"$$BRANCH_STAMP\", \
+	   \"coal\": \"coal$(HEADNODE_VARIANT_SUFFIX)-$$PUB_STAMP-4g.tgz\", \
+	   \"boot\": \"boot$(HEADNODE_VARIANT_SUFFIX)-$$PUB_STAMP.tgz\", \
+	   \"usb\": \"usb$(HEADNODE_VARIANT_SUFFIX)-$$PUB_STAMP.tgz\" \
+	}" | json > release.json
 
+#
+# This publish target rewrites 'latest-build-stamp' overriding what
+# Makefile.targ does in its 'prepublish' target. This is here so that we can
+# invoke 'bits-upload-latest', and get a Manta directory path that includes
+# the timestamp annotated with the output from 'unique-branches'. This serves
+# to disambiguate headnode builds that were assembled from different sets
+# of component images.
+#
+.PHONY: publish
+publish: release-json
+	mkdir -p $(ENGBLD_BITS_DIR)/$(NAME)
+	mv $(GZ_TOOLS_MANIFEST) $(ENGBLD_BITS_DIR)/$(NAME)
+	mv $(GZ_TOOLS_TARBALL) $(ENGBLD_BITS_DIR)/$(NAME)
+	UNIQUE_BRANCHES=$$(./bin/unique-branches $(BRANCH)); \
+	PUB_STAMP=$(BRANCH)$$UNIQUE_BRANCHES-$(TIMESTAMP)-$(_GITDESCRIBE); \
+	BRANCH_STAMP=$(BRANCH)$$UNIQUE_BRANCHES; \
+	mv coal-$(STAMP)-4gb.tgz \
+	    $(ENGBLD_BITS_DIR)/$(NAME)/coal$(HEADNODE_VARIANT_SUFFIX)-$$PUB_STAMP-4gb.tgz && \
+	mv boot-$(STAMP).tgz \
+	    $(ENGBLD_BITS_DIR)/$(NAME)/boot$(HEADNODE_VARIANT_SUFFIX)-$$PUB_STAMP.tgz && \
+	mv usb-$(STAMP).tgz \
+	    $(ENGBLD_BITS_DIR)/$(NAME)/usb$(HEADNODE_VARIANT_SUFFIX)-$$PUB_STAMP.tgz && \
+	echo "$$PUB_STAMP" > \
+	    $(ENGBLD_BITS_DIR)/$(NAME)/latest-build-stamp
+	cp build.spec.local $(ENGBLD_BITS_DIR)/$(NAME)
+	cp release.json $(ENGBLD_BITS_DIR)/$(NAME)
+
+ENGBLD_BITS_UPLOAD_OVERRIDE=true
+
+#
+# We override bits-upload and bits-upload latest so that we can pass extended
+# branch information via $PUB_STAMP and $BRANCH_STAMP, which we need to compute
+# in the target rather than a Makefile macro, as that information gets
+# generated by the 'build-spec-local' target.
+#
+.PHONY: bits-upload
+bits-upload: build-spec-local publish $(BUILDIMAGE_TARG)
+	UNIQUE_BRANCHES=$$(./bin/unique-branches $(BRANCH)); \
+	PUB_STAMP=$(BRANCH)$$UNIQUE_BRANCHES-$(TIMESTAMP)-$(_GITDESCRIBE); \
+	BRANCH_STAMP=$(BRANCH)$$UNIQUE_BRANCHES; \
+	$(TOP)/deps/eng/tools/bits-upload.sh \
+	    -b $$BRANCH_STAMP \
+	    $(BITS_UPLOAD_LOCAL_ARG) \
+	    $(BITS_UPLOAD_IMGAPI_ARG) \
+	    -d $(ENGBLD_DEST_OUT_PATH)/$(NAME) \
+	    -D $(ENGBLD_BITS_DIR) \
+	    -n $(NAME) \
+	    -t $$PUB_STAMP
+
+.PHONY: bits-upload-latest
+bits-upload-latest: build-spec-local
+	BRANCH_STAMP=$(BRANCH)$$(./bin/unique-branches $(BRANCH)); \
+	$(TOP)/deps/eng/tools/bits-upload.sh \
+	    -b $$BRANCH_STAMP \
+	    $(BITS_UPLOAD_LOCAL_ARG) \
+	    $(BITS_UPLOAD_IMGAPI_ARG) \
+	    -d $(ENGBLD_DEST_OUT_PATH)/$(NAME) \
+	    -D $(ENGBLD_BITS_DIR) \
+	    -n $(NAME)
 
 #
 # Includes
 #
 
-include ./buildtools/mk/Makefile.deps
-include ./buildtools/mk/Makefile.targ
+include ./deps/eng/tools/mk/Makefile.deps
+include ./deps/eng/tools/mk/Makefile.targ
+
diff --git a/README.md b/README.md
index 8e26c4b0..b8e2daa9 100644
--- a/README.md
+++ b/README.md
@@ -75,6 +75,7 @@ First you must create a suitable build zone:
 Then to set up the zone:
   - A recent version of node (>= 0.10.26, preferably latest).
   - The [json](http://trentm.com/json/) CLI tool.
+  - The 'pigz' program available somewhere on $PATH
 
 ### Build Specification: `build.spec` and `build.spec.local`
 
@@ -187,10 +188,16 @@ Images may also be obtained from a local directory using the `"bits-dir"`
 source.  This is primarily used by MG when building headnode images under
 automation, where MG assembles the build artefacts in a local directory
 structure.  If `"bits-dir"` is used, either through `"source"` for a specific
-zone or via the `"override-all-sources"` top-level key, the `BITS_DIR`
+zone or via the `"override-all-sources"` top-level key, the `SOURCE_BITS_DIR`
 environment variable must contain the path of a MG-style bits directory.  See
 the source and documentation for [Mountain Gorilla][mg] for more details.
 
+An alternate local directory layout is also supported and can be used by
+setting the `"override-all-sources"` key to the value `"mbits-dir"`. This
+layout matches the layout of the manta directory structure, rather than the
+one created by Mountain Gorilla. As above, the `SOURCE_BITS_DIR` environment
+variable points to the local directory containing these images.
+
 All of the above definitions will cause the download phase of the build to
 store a local copy of the zone dataset stream and manifest in the `cache/`
 directory, using the original filename of the image, e.g. for `manatee`:
@@ -226,7 +233,7 @@ build artefact.
 In addition to zone images and the base images on which they depend, the build
 also includes various individual files.  These files are generally also the
 output of [Mountain Gorilla (MG)][mg] build targets and are obtained either
-from Manta (by default) or an MG-style `BITS_DIR`.
+from Manta (by default) or either an MG-style or Manta-style `SOURCE_BITS_DIR`.
 
 Files are specified in the `"files"` key of `build.spec`.  For example, the
 Triton Agents are bundled together in a shell archive (shar) installer.  This
@@ -303,11 +310,15 @@ The default branch may be overridden by specifying the `"bits-branch"` key.
 The build branch for an individual zone or file may be overriden by specifying
 `"branch"` in the artefact definition.  For example, to obtain artefacts from
 the `release-20150514` branch for everything except the platform (and platform
-boot tarball), the following could be used in `build.spec.local`:
+boot tarball) and cnapi zone, the following could be used in
+`build.spec.local`:
 
 ```
 {
     "bits-branch": "release-20150514",
+    "zones": {
+        "cnapi": {"branch": "master"}
+    }
     "files": {
         "platform": { "branch": "master" },
         "platboot": { "branch": "master" }
@@ -315,6 +326,38 @@ boot tarball), the following could be used in `build.spec.local`:
 }
 ```
 
+As a convenience, the build will first look for a file called
+`configure-branches` and will convert that to a `build.spec.local` file if
+one does not already exist. This allows users to supply simple `component`
+and `branch` data in an easier form. The above `build.spec.local` fragment
+would be written:
+
+```
+bits-branch: release-20150514
+cnapi: master
+platform: master
+```
+
+Note here, that since the `platform` and `platboot` artifacts should always
+be matched, the tool which converts the `configure-branches` file will
+set the complementary values automatically. Any keys that do not map directly
+to a component (for example, `bits-branches` in the above snippet) are taken
+as top-level keys for the `build.spec.local` file.
+
+If more complicated `build.spec.local` content is required, for example the
+alternative build timestamp selection we discuss below, users should write a
+full `build.spec.local` file instead.
+
+If a `build.spec.local` file does not exist, then the build defaults to
+creating the following file:
+
+```
+{"bits-branches": "$(BRANCH)"}
+```
+
+where `$(BRANCH)` is the current branch of sdc-headnode.git that is being
+built.
+
 #### Alternative build timestamp selection
 
 By default, the build artifacts used for inclusion in the headnode
diff --git a/bin/build-coal-image b/bin/build-coal-image
index 82052870..f9cde65f 100755
--- a/bin/build-coal-image
+++ b/bin/build-coal-image
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright (c) 2019, Joyent, Inc.
+# Copyright 2019 Joyent, Inc.
 #
 
 ROOT=$(cd $(dirname $0)/../; pwd)
@@ -302,7 +302,8 @@ function create_output
         (cd $STAGE \
             && mv USB-headnode.vmwarevm \
             coal-${THIS_BUILDSTAMP}-${USB_SIZE}.vmwarevm \
-            && ${TAR} -zcf ${ROOT}/coal-${THIS_BUILDSTAMP}-${USB_SIZE}.tgz \
+            && ${TAR} -I ${TAR_COMPRESSION} \
+                -cf ${ROOT}/coal-${THIS_BUILDSTAMP}-${USB_SIZE}.tgz \
             root.password.${LIVEIMG_VERSION} \
             coal-${THIS_BUILDSTAMP}-${USB_SIZE}.vmwarevm *.manifest)
         [[ $? -eq 0 ]] || fatal "Unable to create .tgz image."
diff --git a/bin/build-usb-image b/bin/build-usb-image
index f7d14a6d..147ae36a 100755
--- a/bin/build-usb-image
+++ b/bin/build-usb-image
@@ -185,9 +185,10 @@ function create_output
             usb-${THIS_BUILDSTAMP}-${OUTPUT_IMG} \
             && mv $IMG_TMP_DIR/$PARTMAP \
             usb-${THIS_BUILDSTAMP}-$PARTMAP \
-            && ${TAR} -zcf ${ROOT}/usb-${THIS_BUILDSTAMP}.tgz \
+            && ${TAR} -I ${TAR_COMPRESSION} \
+                -cf ${ROOT}/usb-${THIS_BUILDSTAMP}.tgz \
             root.password.${LIVEIMG_VERSION} \
-	    usb-${THIS_BUILDSTAMP}-$PARTMAP \
+            usb-${THIS_BUILDSTAMP}-$PARTMAP \
             usb-${THIS_BUILDSTAMP}-${OUTPUT_IMG} *.manifest)
         [[ $? -eq 0 ]] || fatal "Unable to create .tgz image."
 
diff --git a/bin/convert-configure-branches.js b/bin/convert-configure-branches.js
new file mode 100755
index 00000000..a69f74d9
--- /dev/null
+++ b/bin/convert-configure-branches.js
@@ -0,0 +1,138 @@
+#!/usr/bin/env node
+
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2019 Joyent, Inc.
+ */
+
+var mod_fs = require('fs');
+
+/*
+ * This script loads a build.spec file, then parses a configure-branches file
+ * and emits a build.spec.local with that data. There is minimal error checking
+ * here.
+ *
+ * The 'configure-branches' file is assumed to consist of lines of
+ * colon-separated component:branch pairs, and that component names are not
+ * allowed to contain colons. Comments are allowed, by starting a line with
+ * a '#' character.
+ *
+ * Duplicate keys in configure-branches are not allowed. Some 'files'
+ * components should have matching branch values, so we enforce that.
+ */
+
+function main() {
+    mod_fs.readFile('build.spec', 'utf-8', function readbs(err, bs_file) {
+        if (err) {
+            console.error('Error loading build.spec file: %s', err);
+            process.exit(3);
+        }
+
+        var bs_data = JSON.parse(bs_file);
+        var known_zones = Object.keys(bs_data.zones);
+        var known_files = Object.keys(bs_data.files);
+        var out_buildspec = {};
+
+        mod_fs.readFile('configure-branches', 'utf-8',
+                function read(cerr, data) {
+            if (cerr) {
+                console.error(
+                    'Error reading configure-branches file: %s', err);
+                process.exit(3);
+            }
+            var vals = data.split('\n');
+            for (var i=0; i < vals.length; i++) {
+                var line = vals[i].trim();
+                if (line.length === 0) {
+                    continue;
+                }
+
+                // ignore comments
+                if (line.lastIndexOf('#') === 0) {
+                    continue;
+                }
+
+                // we're not using split() because we want exactly two fields
+                // but don't want to throw away branch names which may include
+                // colons.
+                var colon_index = line.indexOf(':');
+                if (colon_index === line.length - 1 || colon_index === -1) {
+                    console.error(
+                        'Expected key:val pair on line %s, got: %s', i + 1,
+                        line);
+                    process.exit(3);
+                }
+                var key = line.slice(0, colon_index).trim();
+                var val = line.slice(colon_index + 1, line.length).trim();
+
+                if (key.length === 0 || val.length === 0) {
+                    console.error(
+                        'Invalid key/val pair on line %s: %s', i + 1, line);
+                    process.exit(3);
+                }
+
+                // zones
+                if (known_zones.lastIndexOf(key) > -1) {
+                    if (out_buildspec.zones === undefined) {
+                        out_buildspec.zones = {};
+                    }
+                    if (out_buildspec.zones[key] === undefined) {
+                        out_buildspec.zones[key] = {'branch': val};
+                    } else {
+                        console.log(out_buildspec.zones[key]);
+                        console.error(
+                            'Duplicate key on line %s: %s', i + 1, line);
+                        process.exit(3);
+                    }
+
+                // files
+                } else if (known_files.lastIndexOf(key) > -1) {
+                    if (out_buildspec.files === undefined) {
+                        out_buildspec.files = {};
+                    }
+                    if (out_buildspec.files[key] === undefined) {
+                        out_buildspec.files[key] = {'branch': val};
+                    } else {
+                        console.error(
+                            'Duplicate key on line %s: %s', i + 1, line);
+                        process.exit(3);
+                    }
+
+                    // some files components should have the same branch set
+                    // if either appear in the configure-branches file.
+                    var same_branches = [
+                        ['platform', 'platboot'],
+                        ['agents', 'agents_md5']
+                    ];
+                    same_branches.forEach(function dup(dup_pair) {
+                        if (dup_pair.indexOf(key) !== -1) {
+                            console.error(
+                                'Note: setting common branch for %s', dup_pair);
+                            dup_pair.forEach(function set_val(comp) {
+                                out_buildspec.files[comp] = {'branch': val};
+                            });
+                        }
+                    });
+
+                // any other fields
+                } else {
+                    if (bs_data[key] === undefined) {
+                        console.error(
+                            'Unknown build.spec key in configure-branches ' +
+                            'file, line %s: %s', i + 1, key);
+                        process.exit(3);
+                    }
+                    out_buildspec[key] = val;
+                }
+            }
+            console.log(JSON.stringify(out_buildspec, null, 4));
+        });
+    });
+}
+
+main();
\ No newline at end of file
diff --git a/bin/include-tar-generic b/bin/include-tar-generic
index 38bb7318..b292b2ce 100644
--- a/bin/include-tar-generic
+++ b/bin/include-tar-generic
@@ -6,12 +6,15 @@
 #
 
 #
-# Copyright (c) 2017, Joyent, Inc.
+# Copyright (c) 2019, Joyent, Inc.
 #
 
 PLATFORM=$(uname -s)
 MNT_DIR="${ROOT}/mnt"
 GZCAT="zcat"
+if [[ -z "$TAR_COMPRESSION" ]]; then
+    TAR_COMPRESSION=gzip
+fi
 [ -z "$IMG_TYPE" ] && IMG_TYPE="usb"
 case "$PLATFORM" in
   Darwin)
@@ -38,6 +41,9 @@ case "$PLATFORM" in
     TAR_ROOT="--owner=root --group=root"
     unset MACHINE_THAT_GOES_PING
     PING="/usr/sbin/ping"
+    if [[ -z "$TAR_COMPRESSION" ]]; then
+        TAR_COMPRESSION=pigz
+    fi
     ;;
   *)
     echo "Platform $PLATFORM not supported."
@@ -115,7 +121,8 @@ function create_output
     else
         echo "==> Creating boot-${THIS_BUILDSTAMP}.tgz"
         ${SUCMD} chown -R ${USER} ${MNT_DIR}
-        ${TAR} $TAR_HARD_DEREF -zchf ${ROOT}/boot-${THIS_BUILDSTAMP}.tgz \
+        ${TAR} $TAR_HARD_DEREF -I ${TAR_COMPRESSION} \
+            -chf ${ROOT}/boot-${THIS_BUILDSTAMP}.tgz \
             -C ${MNT_DIR} .
     fi
     rm -rf $MNT_DIR || true
diff --git a/bin/unique-branches b/bin/unique-branches
new file mode 100755
index 00000000..a2b9a4d0
--- /dev/null
+++ b/bin/unique-branches
@@ -0,0 +1,5 @@
+#!/bin/ksh
+
+dir="$(dirname "$(whence "$0")")"
+
+exec node "${dir}/../buildtools/novus/cmd/unique-branches.js" "$@"
diff --git a/buildtools/lib/common.sh b/buildtools/lib/common.sh
index cadfe7e7..0acc9c41 100755
--- a/buildtools/lib/common.sh
+++ b/buildtools/lib/common.sh
@@ -18,6 +18,9 @@ if [[ "$PLATFORM" == "SunOS" ]]; then
     SUCMD="pfexec"
     TAR="gtar"
     PCFSTAR="gtar"
+    if [[ -z "$TAR_COMPRESSION" ]]; then
+        TAR_COMPRESSION=pigz
+    fi
 elif [[ "$PLATFORM" == "Darwin" ]]; then
     SUCMD=""
     #
@@ -32,6 +35,10 @@ elif [[ "$PLATFORM" == "Linux" ]]; then
     SUCMD="sudo"
 fi
 
+if [[ -z "$TAR_COMPRESSION" ]]; then
+    TAR_COMPRESSION=pigz
+fi
+
 function fatal
 {
     echo "$(basename $0): fatal error: $*"
diff --git a/buildtools/mk/Makefile.defs b/buildtools/mk/Makefile.defs
deleted file mode 100644
index 85139d75..00000000
--- a/buildtools/mk/Makefile.defs
+++ /dev/null
@@ -1,51 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.defs: common defines.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-# This makefile defines some useful defines. Include it at the top of
-# your Makefile.
-#
-# Definitions in this Makefile:
-#
-#	TOP 		The absolute path to the project directory. The top dir.
-#	BRANCH 		The current git branch.
-#	TIMESTAMP	The timestamp for the build. This can be set via
-#			the TIMESTAMP envvar (used by MG-based builds).
-#	STAMP		A build stamp to use in built package names.
-#
-
-TOP := $(shell pwd)
-
-#
-# Mountain Gorilla-spec'd versioning.
-# See "Package Versioning" in MG's README.md:
-# <https://mo.joyent.com/mountain-gorilla/blob/master/README.md#L139-200>
-#
-# Need GNU awk for multi-char arg to "-F".
-_AWK := $(shell (which gawk >/dev/null && echo gawk) \
-	|| (which nawk >/dev/null && echo nawk) \
-	|| echo awk)
-BRANCH := $(shell git symbolic-ref HEAD | $(_AWK) -F/ '{print $$3}')
-ifeq ($(TIMESTAMP),)
-	TIMESTAMP := $(shell date -u "+%Y%m%dT%H%M%SZ")
-endif
-_GITDESCRIBE := g$(shell git describe --all --long --dirty | $(_AWK) -F'-g' '{print $$NF}')
-STAMP := $(BRANCH)-$(TIMESTAMP)-$(_GITDESCRIBE)
-
-# node-gyp will print build info useful for debugging with V=1
-export V=1
diff --git a/buildtools/mk/Makefile.deps b/buildtools/mk/Makefile.deps
deleted file mode 100644
index 2d92ec36..00000000
--- a/buildtools/mk/Makefile.deps
+++ /dev/null
@@ -1,52 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.deps: Makefile for including common tools as dependencies
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-# This file is separate from Makefile.targ so that teams can choose
-# independently whether to use the common targets in Makefile.targ and the
-# common tools here.
-#
-
-#
-# javascriptlint
-#
-JSL_EXEC	?= deps/javascriptlint/build/install/jsl
-JSL		?= $(JSL_EXEC)
-
-$(JSL_EXEC): | deps/javascriptlint/.git
-	cd deps/javascriptlint && make install
-
-distclean::
-	if [[ -f deps/javascriptlint/Makefile ]]; then \
-		cd deps/javascriptlint && make clean; \
-	fi
-
-#
-# jsstyle
-#
-JSSTYLE_EXEC	?= deps/jsstyle/jsstyle
-JSSTYLE		?= $(JSSTYLE_EXEC)
-
-$(JSSTYLE_EXEC): | deps/jsstyle/.git
-
-#
-# restdown
-#
-RESTDOWN_EXEC	?= deps/restdown/bin/restdown
-RESTDOWN	?= python $(RESTDOWN_EXEC)
-$(RESTDOWN_EXEC): | deps/restdown/.git
diff --git a/buildtools/mk/Makefile.node.defs b/buildtools/mk/Makefile.node.defs
deleted file mode 100644
index 93768417..00000000
--- a/buildtools/mk/Makefile.node.defs
+++ /dev/null
@@ -1,104 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.node.defs: Makefile for building and bundling your own Node.js.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-#
-# This Makefile facilitates building and bundling your own copy of Node.js in
-# your repo.  All it does is define variables for node, node-waf, and npm for
-# you to use elsewhere in your Makefile and rules to build these tools when
-# needed.
-#
-# To use this facility, include "Makefile.node.defs", use the variables as
-# described below to define targets, and then include "Makefile.node.targ".
-#
-# There are two use cases addressed here:
-#
-# (1) Invoking node, node-waf, or npm as part of the build process, as in "npm
-#     install" and "node-waf configure build".  To facilitate this, this
-#     Makefile defines Make variables NODE, NODE_WAF, and NPM that you can use
-#     to invoke these commands during the build process.  You MUST NOT assume
-#     that these variables just evaluate to the filenames themselves, as they
-#     may have environment variable definitions and other things that prevent
-#     you from using them directly as a filename.  If you want that, see (2).
-#
-#     Wherever you use one of these variables, you MUST include a dependency on
-#     the corresponding *_EXEC variable as well, like so:
-#
-#	node_modules/restify: deps/restify $(NPM_EXEC)
-#		$(NPM) install deps/restify
-#
-#     or better, use an order-only dependency to avoid spurious rebuilds:
-#
-#	node_modules/restify: deps/restify | $(NPM_EXEC)
-#		$(NPM) install deps/restify
-#
-#     Otherwise, the underlying file will not get built.  We don't
-#     automatically build them as part of "all" because that approach is
-#     brittle.
-#
-# (2) Specifying paths for invoking node, node-waf, or npm at RUNTIME, as in
-#     specifying the path to node used for the start method of your service's
-#     SMF manifest.  For this, this Makefile defines variables NODE_EXEC,
-#     NODE_WAF_EXEC, and NPM_EXEC, which represent the relative paths of these
-#     files from the root of the workspace.  You MUST NOT use these variables
-#     to invoke these commands during the build process.  See (1) instead.
-#
-#     However, in order to work at runtime, you must build the tool as well.
-#     That is, if you use NODE_EXEC to specify the path to node, you must
-#     depend on NODE_EXEC somewhere. This usually happens anyway because you
-#     usually need them during the build process too, but if you don't then
-#     you need to explicitly add NODE_EXEC (or whichever) to your "all"
-#     target.
-#
-# When including this Makefile, you MAY also specify:
-#
-#	BUILD			top-level directory for built binaries
-#				(default: "build")
-#
-#	NODE_INSTALL		where node should install its built items
-#				(default: "$BUILD/node")
-#
-#	NODE_CONFIG_FLAGS	extra flags to pass to Node's "configure"
-#				(default: "--with-dtrace" on SmartOS; empty
-#				otherwise.)
-#
-
-TOP ?= $(error You must include Makefile.defs before this makefile)
-
-BUILD		?= build
-NODE_INSTALL 	?= $(BUILD)/node
-DISTCLEAN_FILES	+= $(NODE_INSTALL)
-
-NODE_CONFIG_FLAGS += --prefix=$(TOP)/$(NODE_INSTALL)
-
-ifeq ($(shell uname -s),SunOS)
-	NODE_CONFIG_FLAGS += 	--with-dtrace \
-				--openssl-libpath=/opt/local/lib \
-				--openssl-includes=/opt/local/include
-endif
-
-NODE_EXEC	= $(NODE_INSTALL)/bin/node
-NODE_WAF_EXEC	= $(NODE_INSTALL)/bin/node-waf
-NPM_EXEC	= $(NODE_INSTALL)/bin/npm
-
-# Ensure these use absolute paths to the executables to allow running
-# from a dir other than the project top.
-NODE		:= $(TOP)/$(NODE_EXEC)
-NODE_WAF	:= $(TOP)/$(NODE_WAF_EXEC)
-NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) node $(TOP)/$(NPM_EXEC)
diff --git a/buildtools/mk/Makefile.node.targ b/buildtools/mk/Makefile.node.targ
deleted file mode 100644
index abdc6166..00000000
--- a/buildtools/mk/Makefile.node.targ
+++ /dev/null
@@ -1,42 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.node.targ: See Makefile.node.defs.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-ifneq ($(shell uname -s),SunOS)
-NODE_PREBUILT_VERSION ?= $(error You must define NODE_PREBUILT_VERSION to use Makefile.node.targ on non-SunOS)
-endif
-
-ifeq ($(shell uname -s),SunOS)
-$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC): | deps/node/.git
-	(cd deps/node; ./configure $(NODE_CONFIG_FLAGS) && $(MAKE) && $(MAKE) install)
-else
-$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC):
-	(mkdir -p $(BUILD) \
-		&& cd $(BUILD) \
-		&& [[ -d src-node ]] && (cd src-node && git checkout master && git pull) || git clone git://github.com/joyent/node.git src-node \
-		&& cd src-node \
-		&& git checkout $(NODE_PREBUILT_VERSION) \
-		&& ./configure $(NODE_CONFIG_FLAGS) \
-		&& $(MAKE) && $(MAKE) install)
-endif
-
-DISTCLEAN_FILES += $(NODE_INSTALL) $(BUILD)/src-node
-
-distclean::
-	-([[ ! -d deps/node ]] || (cd deps/node && $(MAKE) distclean))
diff --git a/buildtools/mk/Makefile.node_deps.defs b/buildtools/mk/Makefile.node_deps.defs
deleted file mode 100644
index 29a83f72..00000000
--- a/buildtools/mk/Makefile.node_deps.defs
+++ /dev/null
@@ -1,43 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.node_deps.defs: Makefile for including npm modules whose sources
-# reside inside the repo.  This should NOT be used for modules in the npm
-# public repo or modules that could be specified with git SHAs.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-#
-# This Makefile takes as input the following make variable:
-#
-#    REPO_MODULES	List of relative paths to node modules (i.e., npm
-#    			packages) inside this repo.  For example:
-#    			src/node-canative, where there's a binary npm package
-#    			in src/node-canative.
-#
-# Based on the above, this Makefile defines the following new variables:
-#
-#    REPO_DEPS		List of relative paths to the installed modules.  For
-#    			example: "node_modules/canative".
-#
-# The accompanying Makefile.node_deps.targ defines a target that will install
-# each of REPO_MODULES into REPO_DEPS and remove REPO_DEPS with "make clean".
-# The top-level Makefile is responsible for depending on REPO_DEPS where
-# appropriate (usually the "deps" or "all" target).
-#
-
-REPO_DEPS    = $(REPO_MODULES:src/node-%=node_modules/%)
-CLEAN_FILES += $(REPO_DEPS)
diff --git a/buildtools/mk/Makefile.node_deps.targ b/buildtools/mk/Makefile.node_deps.targ
deleted file mode 100644
index bb2ab4f5..00000000
--- a/buildtools/mk/Makefile.node_deps.targ
+++ /dev/null
@@ -1,24 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.node_deps.targ: targets for Makefile.node_deps.defs.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-NPM_EXEC  ?= $(error NPM_EXEC must be defined for Makefile.node_deps.targ)
-
-node_modules/%: src/node-% | $(NPM_EXEC)
-	$(NPM) install $<
diff --git a/buildtools/mk/Makefile.node_prebuilt.defs b/buildtools/mk/Makefile.node_prebuilt.defs
deleted file mode 100644
index eb0dacbd..00000000
--- a/buildtools/mk/Makefile.node_prebuilt.defs
+++ /dev/null
@@ -1,153 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.node_prebuilt.defs: Makefile for including a prebuilt Node.js build.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-
-#
-# This Makefile facilitates downloading and bundling a prebuilt node.js
-# build (using the 'sdcnode' distro builds). This is an alternative to
-# the "Makefile.node.*" makefiles for *building* a node from source.
-#
-# Usage:
-#
-# - Define `NODE_PREBUILT_VERSION` in your Makefile to choose a node version.
-#   E.g.: `NODE_PREBUILT_VERSION=v0.6.19`. See other optional variables
-#   below.
-# - `include tools/mk/Makefile.node_prebuilt.defs` after this in your Makefile.
-# - `include tools/mk/Makefile.node_prebuilt.targ` near the end of your
-#   Makefile.
-# - Have at least one of your Makefile targets depend on either `$(NODE_EXEC)`
-#   or `$(NPM_EXEC)`. E.g.:
-#
-#		node_modules/restify: deps/restify $(NPM_EXEC)
-#			$(NPM) install deps/restify
-#
-#   or better, use an order-only dependency to avoid spurious rebuilds:
-#
-#		node_modules/restify: deps/restify | $(NPM_EXEC)
-#			$(NPM) install deps/restify
-#
-# - Use `$(NPM)` or `$(NODE)` to use your node build.
-# - Include the "$(NODE_INSTALL)" tree in your release package.
-#
-#
-# When including this Makefile, you MUST also specify:
-#
-#	NODE_PREBUILT_VERSION 	The node version in the prebuilt 'sdcnode'
-#				package to use. Typically this is one of the
-#				node version tags, e.g. "v0.6.18" but it
-#				can be any commitish.
-#
-# When including this Makefile, you MAY also specify:
-#
-#	NODE_PREBUILT_DIR 	The dir in which to find sdcnode builds. This
-#				can either be a *local directory* or *a
-#				URL* dir (with trailing '/') which serves
-#				Apache/Nginx dir listing HTML.
-#				(default: sdcnode master build dir on stuff)
-#
-#	NODE_PREBUILT_TAG	The 'sdcnode' project supports special
-#				configuration builds of node, e.g. say a
-#				build configured `--without-ssl`. These
-#				special configurations are given a tag, e.g.
-#				'gz', that is used in the filename. Optionally
-#				specify a tag name here.
-#				(default: empty)
-#
-#	NODE_PREBUILT_BRANCH	Specify a particular branch of 'sdcnode' builds
-#				from which to pull. Generally one should stick
-#				with the default.
-#				(default: master)
-#
-#	NODE_PREBUILT_IMAGE		If you have a zone image that differs from that
-#				for an sdcnode build that you want to use (potential compat
-#				issues be damned), then set this to the UUID of the sdcnode
-#				build you want. See here for available build image uuids:
-#				<https://download.joyent.com/pub/build/sdcnode/master-latest/sdcnode/>
-#
-#	BUILD			top-level directory for built binaries
-#				(default: "build")
-#
-#	NODE_INSTALL		where node should install its built items
-#				(default: "$BUILD/node")
-#
-#
-# Dev Notes:
-#
-# This works by getting "NODE_PREBUILT_NAME" from the provided "NODE_PREBUILT_*"
-# vars and the image version (via 'mdata-get sdc:image_uuid'). The image uuid is
-# included to ensure an exact match with the build machine. This name (e.g.
-# "v0.6.18-zone-$uuid") is used to find a matching "sdcnode-$name-*.tgz" build
-# in "NODE_PREBUILT_DIR" (either a local directory or a URL). That tarball is
-# downloaded and extracted into "NODE_INSTALL".
-#
-# The "*_EXEC" vars are set to named symlinks, e.g.
-# "build/prebuilt-node-v0.6.18-$uuid", so that a change of selected node
-# build (say the developer changes NODE_PREBUILT_VERSION) will recreate the
-# node install.
-#
-# See <https://mo.joyent.com/docs/sdcnode/master/> for details on 'sdcnode-*'
-# package naming.
-#
-
-TOP ?= $(error You must include Makefile.defs before this makefile)
-NODE_PREBUILT_VERSION ?= $(error NODE_PREBUILT_VERSION is not set.)
-
-
-BUILD		?= build
-NODE_INSTALL	?= $(BUILD)/node
-DISTCLEAN_FILES	+= $(NODE_INSTALL) \
-	$(BUILD)/prebuilt-node-* $(BUILD)/prebuilt-npm-*
-
-NODE_PREBUILT_BRANCH ?= master
-NODE_PREBUILT_IMAGE ?= $(shell pfexec mdata-get sdc:image_uuid)
-ifeq ($(NODE_PREBUILT_TAG),)
-	NODE_PREBUILT_NAME := $(NODE_PREBUILT_VERSION)-$(NODE_PREBUILT_IMAGE)
-else
-	NODE_PREBUILT_NAME := $(NODE_PREBUILT_VERSION)-$(NODE_PREBUILT_TAG)-$(NODE_PREBUILT_IMAGE)
-endif
-NODE_PREBUILT_PATTERN := sdcnode-$(NODE_PREBUILT_NAME)-$(NODE_PREBUILT_BRANCH)-.*\.tgz
-NODE_PREBUILT_DIR ?= https://download.joyent.com/pub/build/sdcnode/$(NODE_PREBUILT_IMAGE)/$(NODE_PREBUILT_BRANCH)-latest/sdcnode/
-ifeq ($(shell echo $(NODE_PREBUILT_DIR) | cut -c 1-4),http)
-	NODE_PREBUILT_BASE := $(shell curl -ksS --fail --connect-timeout 5 $(NODE_PREBUILT_DIR) | grep 'href=' | cut -d'"' -f2 | grep "^$(NODE_PREBUILT_PATTERN)$$" | sort | tail -1)
-	ifneq ($(NODE_PREBUILT_BASE),)
-		NODE_PREBUILT_TARBALL := $(NODE_PREBUILT_DIR)$(NODE_PREBUILT_BASE)
-	endif
-else
-	NODE_PREBUILT_BASE := $(shell ls -1 $(NODE_PREBUILT_DIR)/ | grep "^$(NODE_PREBUILT_PATTERN)$$" 2>/dev/null | sort | tail -1)
-	ifneq ($(NODE_PREBUILT_BASE),)
-		NODE_PREBUILT_TARBALL := $(NODE_PREBUILT_DIR)/$(NODE_PREBUILT_BASE)
-	endif
-endif
-ifeq ($(NODE_PREBUILT_TARBALL),)
-	NODE_PREBUILT_TARBALL = $(error NODE_PREBUILT_TARBALL is empty: no '$(NODE_PREBUILT_DIR)/$(NODE_PREBUILT_PATTERN)' found)
-endif
-
-
-# Prebuild-specific paths for the "*_EXEC" vars to ensure that
-# a prebuild change (e.g. if master Makefile's NODE_PREBUILT_VERSION
-# choice changes) causes a install of the new node.
-NODE_EXEC	:= $(BUILD)/prebuilt-node-$(NODE_PREBUILT_NAME)
-NODE_WAF_EXEC	:= $(BUILD)/prebuilt-node-waf-$(NODE_PREBUILT_NAME)
-NPM_EXEC	:= $(BUILD)/prebuilt-npm-$(NODE_PREBUILT_NAME)
-
-# Ensure these use absolute paths to the executables to allow running
-# from a dir other than the project top.
-NODE		:= $(TOP)/$(NODE_INSTALL)/bin/node
-NODE_WAF	:= $(TOP)/$(NODE_INSTALL)/bin/node-waf
-NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) node $(TOP)/$(NODE_INSTALL)/bin/npm
diff --git a/buildtools/mk/Makefile.smf.defs b/buildtools/mk/Makefile.smf.defs
deleted file mode 100644
index b988bbed..00000000
--- a/buildtools/mk/Makefile.smf.defs
+++ /dev/null
@@ -1,40 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.smf.defs: common targets for SMF manifests
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-# This Makefile uses the following definitions:
-#
-#	SMF_MANIFESTS_IN	Source files for SMF manifests.  The following
-#				substitutions will be made on these files:
-#
-#		@@NODE@@	path to installed node
-#
-# It updates SMF_MANIFESTS with the set of files generated by SMF_MANIFESTS_IN.
-# It also updates the "check" target to check the XML syntax of all manifests,
-# generated or otherwise.
-#
-# To use this file, be sure to also include Makefile.smf.targ after defining
-# targets.
-#
-
-SED 		?= sed
-SMF_DTD		?= tools/service_bundle.dtd.1
-XMLLINT		?= xmllint --noout
-
-SMF_MANIFESTS	+= $(SMF_MANIFESTS_IN:%.in=%)
-CLEAN_FILES	+= $(SMF_MANIFESTS_IN:%.in=%)
diff --git a/buildtools/mk/Makefile.smf.targ b/buildtools/mk/Makefile.smf.targ
deleted file mode 100644
index 0fa03ce4..00000000
--- a/buildtools/mk/Makefile.smf.targ
+++ /dev/null
@@ -1,29 +0,0 @@
-# -*- mode: makefile -*-
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Makefile.smf.targ: see Makefile.smf.defs.
-#
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
-#
-.PHONY: check-manifests
-check-manifests: $(SMF_MANIFESTS:%=%.smfchk)
-
-%.smfchk: %
-	$(XMLLINT) --path $(dir $(SMF_DTD)) --dtdvalid $(SMF_DTD) $^
-
-check: check-manifests
-
-$(SMF_MANIFESTS): %: %.in
-	$(SED) -e 's#@@NODE@@#@@PREFIX@@/$(NODE_INSTALL)/bin/node#' $< > $@
diff --git a/buildtools/novus/cmd/downloader.js b/buildtools/novus/cmd/downloader.js
index 0f1f7385..9205f704 100644
--- a/buildtools/novus/cmd/downloader.js
+++ b/buildtools/novus/cmd/downloader.js
@@ -254,12 +254,29 @@ bit_enum_zone(be, next) {
 		return;
 
 	case 'bits-dir':
-		mod_assert.string(process.env.BITS_DIR, '$BITS_DIR');
+	case 'mbits-dir':
+		var bits_from_dir = null;
+		/*
+		 * We implement very slightly different behaviour
+		 * between bits-dir and mbits-dir, the former uses
+		 * an MG-style directory layout, the latter uses
+		 * Manta-style directory layout.
+		 */
+		if (source === 'mbits-dir') {
+			bits_from_dir = mod_path.join(
+				process.env.SOURCE_BITS_DIR,
+				jobname, branch + '-latest', jobname);
+		} else {
+			bits_from_dir = mod_path.join(
+				process.env.SOURCE_BITS_DIR, jobname);
+		}
+
+		mod_assert.string(
+			process.env.SOURCE_BITS_DIR, '$SOURCE_BITS_DIR');
 
 		bits = [];
 		lib_bits_from_dir(bits, {
-			bfd_dir: mod_path.join(process.env.BITS_DIR,
-			    jobname),
+			bfd_dir: bits_from_dir,
 			bfd_prefix: 'zone.' + name,
 			bfd_jobname: jobname,
 			bfd_branch: branch,
@@ -358,11 +375,27 @@ bit_enum_file(be, next)
 		return;
 
 	case 'bits-dir':
-		mod_assert.string(process.env.BITS_DIR, '$BITS_DIR');
+	case 'mbits-dir':
+		mod_assert.string(
+			process.env.SOURCE_BITS_DIR, '$SOURCE_BITS_DIR');
+
+		var bits_from_dir = null;
+		/* We implement very slightly different behaviour between
+		 * bits-dir and mbits-dir, the former uses an MG-style
+		 * directory layout, the latter uses Manta-style directory
+		 * layout.
+		 */
+		if (source === 'mbits-dir') {
+			bits_from_dir = mod_path.join(
+				process.env.SOURCE_BITS_DIR,
+				jobname, branch + '-latest', jobname);
+		} else {
+			bits_from_dir = mod_path.join(
+				process.env.SOURCE_BITS_DIR, jobname);
+		}
 
 		lib_bits_from_dir(be.be_out, {
-			bfd_dir: mod_path.join(process.env.BITS_DIR,
-			    jobname),
+			bfd_dir: bits_from_dir,
 			bfd_prefix: 'file.' + name,
 			bfd_jobname: jobname,
 			bfd_branch: branch,
diff --git a/buildtools/novus/cmd/unique-branches.js b/buildtools/novus/cmd/unique-branches.js
new file mode 100644
index 00000000..67d800df
--- /dev/null
+++ b/buildtools/novus/cmd/unique-branches.js
@@ -0,0 +1,88 @@
+#!/bin/env node
+
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2019 Joyent, Inc.
+ */
+
+ /*
+  * This is used by the top level sdc-headnode Makefile to determine
+  * part of the path name for build artifacts. If the branches
+  * declared by components in the combined build.spec/build.spec.local
+  * configuration differ from the branch passed in as the first argument
+  * (in our case, the branch of sdc-headnode.git itself), emit a
+  * hyphen-separated list of all branches used.
+  *
+  * This lets us differentiate development headnode builds from each other.
+  */
+var util = require('util');
+
+var lib_common = require('../lib/common');
+var lib_buildspec = require('../lib/buildspec');
+
+function main() {
+
+    if (process.argv.length !== 3) {
+        console.error('Usage: unique-branches [branch]');
+        process.exit(2);
+    }
+
+    var headnode_branch = process.argv[2];
+
+    lib_buildspec.load_build_specs(lib_common.root_path('build.spec'),
+        lib_common.root_path('build.spec.local'), function (err, bs) {
+        if (err) {
+            console.error('ERROR loading build specs: %s', err.stack);
+            process.exit(3);
+        }
+
+        var branches = {};
+
+        // get each of the build.spec sections that may have branch specifiers
+        var zones = bs.get('zones');
+        var files = bs.get('files');
+
+        var bits_branch = bs.get('bits-branch', true);
+        if (bits_branch !== undefined) {
+            branches[bits_branch] = null;
+        }
+
+        function find_branches(branch_dic, component_dic, component_name) {
+            Object.keys(component_dic).forEach(function find_branches(item) {
+                var branch_name = bs.get(
+                    util.format('%s|%s|branch', component_name, item), true);
+                if (branch_name !== undefined) {
+                    branch_dic[branch_name] = null;
+                }
+            });
+        }
+        find_branches(branches, zones, 'zones');
+        find_branches(branches, files, 'files');
+
+        // if the only branches found were the same as the branch we were
+        // given on the command line, then emit nothing and return. This
+        // allows build artifacts of the form:
+        // [name]-[headnode branch]-[timestamp]-[githash]
+        delete branches[headnode_branch];
+        var known_branches = Object.keys(branches);
+        if (known_branches.length === 1 &&
+                known_branches[0] === headnode_branch) {
+            process.exit(0);
+        }
+
+        // otherwise our artifacts take the form:
+        // [name]-[headnode branch]-[branch-list]-[timestamp]-[githash]
+        var branch_string = known_branches.sort().join('-');
+        if (branch_string.length !== 0) {
+            console.log('-' + branch_string);
+        }
+        process.exit(0);
+    });
+}
+
+main();
diff --git a/buildtools/novus/lib/bits_from/dir.js b/buildtools/novus/lib/bits_from/dir.js
index 9e45c7d1..86ab11e1 100755
--- a/buildtools/novus/lib/bits_from/dir.js
+++ b/buildtools/novus/lib/bits_from/dir.js
@@ -82,10 +82,12 @@ bfd_find_build_files(bfd, next)
 	mod_assert.func(next, 'next');
 
 	/*
-	 * Build artefacts are arranged in a simple directory structure by MG
+	 * Build artefacts are arranged in a simple directory structure
 	 * during the configure step, e.g.
 	 *
-	 *   ${BITS_DIR}/sapi/sapi-zfs-master-20150421T182802Z-g983d6be.zfs.gz
+	 * ${SOURCE_BITS_DIR}/
+	 *     sapi/
+	 *         sapi-zfs-master-20150421T182802Z-g983d6be.zfs.gz
 	 *
 	 * The build artefact we are interested in copying generally
 	 * has a filename of the form:
diff --git a/deps/eng b/deps/eng
new file mode 160000
index 00000000..37cdb9f1
--- /dev/null
+++ b/deps/eng
@@ -0,0 +1 @@
+Subproject commit 37cdb9f1576310f0788fbaabef5e5da17e156f1d
-- 
2.21.0

