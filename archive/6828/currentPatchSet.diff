commit d3a17851123b3f978325cc83af3d11ef22c48ac3
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2019-08-23T11:08:20+02:00 (7 weeks ago)
    
    TRITON-1854 Triton CLI hangs during instance start from snapshot with wrong snapshot argument
    Reviewed by: Mike Gerdts <mike.gerdts@joyent.com>
    Approved by: Mike Gerdts <mike.gerdts@joyent.com>

diff --git a/lib/do_instance/gen_do_ACTION.js b/lib/do_instance/gen_do_ACTION.js
index 41ed069..26abed6 100644
--- a/lib/do_instance/gen_do_ACTION.js
+++ b/lib/do_instance/gen_do_ACTION.js
@@ -98,10 +98,15 @@ function _doTheAction(action, subcmd, opts, args, callback) {
             state = 'deleted';
             break;
         default:
-            callback(new Error('unknown action: ' + action));
+            // Do nothing. Want explicit return call after callback invocation.
             break;
     }
 
+    if (!command) {
+        callback(new Error('unknown action: ' + action));
+        return;
+    }
+
     if (opts.help) {
         this.do_help('help', {}, [subcmd], callback);
         return;
@@ -118,7 +123,7 @@ function _doTheAction(action, subcmd, opts, args, callback) {
     });
 }
 
-function _doOnEachInstance(self, action, command, state, instances,
+function _doOnEachInstance(target, action, command, state, instances,
                            opts, callback) {
     var now = Date.now();
     vasync.forEachParallel({
@@ -127,8 +132,9 @@ function _doOnEachInstance(self, action, command, state, instances,
             if (common.isUUID(arg)) {
                 uuid = arg;
                 done();
+                return;
             } else {
-                self.top.tritonapi.getInstance(arg, function (err, inst) {
+                target.top.tritonapi.getInstance(arg, function (err, inst) {
                     if (err) {
                         perror(err);
                         cb(err);
@@ -136,7 +142,21 @@ function _doOnEachInstance(self, action, command, state, instances,
                     }
                     alias = arg;
                     uuid = inst.id;
-                    done();
+                    if (!opts.snap) {
+                        done();
+                        return;
+                    }
+                    target.top.tritonapi.getInstanceSnapshot({
+                        id: uuid,
+                        name: opts.snapshot
+                    }, function getSnapCb(snapErr, _snap, _snapRes) {
+                        if (snapErr) {
+                            perror(snapErr);
+                            cb(snapErr);
+                            return;
+                        }
+                        done();
+                    });
                 });
             }
 
@@ -147,9 +167,7 @@ function _doOnEachInstance(self, action, command, state, instances,
                     cOpts = { id: uuid, name: opts.snapshot };
                 }
 
-                self.top.tritonapi.cloudapi[command](cOpts,
-                    function (err, body, res) {
-
+                target.top.tritonapi.cloudapi[command](cOpts, function (err) {
                     if (err) {
                         perror(err);
                         cb(err);
@@ -157,20 +175,21 @@ function _doOnEachInstance(self, action, command, state, instances,
                     }
 
                     if (!opts.wait) {
-                        if (alias)
+                        if (alias) {
                             console.log('%s (async) instance %s (%s)',
                                 common.capitalize(action), alias, uuid);
-                        else
+                        } else {
                             console.log('%s (async) instance %s',
                                 common.capitalize(action), uuid);
+                        }
                         cb();
                         return;
                     }
 
-                    self.top.tritonapi.cloudapi.waitForMachineStates({
+                    target.top.tritonapi.cloudapi.waitForMachineStates({
                         id: uuid,
                         states: [state]
-                    }, function (err2, inst2, res2) {
+                    }, function (err2, _, res2) {
                         if (action === 'delete' &&
                             res2 && res2.statusCode === 410) {
                             // This is success, fall through to bottom.
@@ -182,12 +201,13 @@ function _doOnEachInstance(self, action, command, state, instances,
                         }
 
                         var dur = common.humanDurationFromMs(Date.now() - now);
-                        if (alias)
+                        if (alias) {
                             console.log('%s instance %s (%s, %s)',
                                 common.capitalize(action), alias, uuid, dur);
-                        else
+                        } else {
                             console.log('%s instance %s (%s)',
                                 common.capitalize(action), uuid, dur);
+                        }
 
                         cb();
                     });
