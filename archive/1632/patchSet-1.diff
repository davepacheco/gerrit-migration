From 56a15a6d5cf5802990e67bdf2143cdc6f70c9fd6 Mon Sep 17 00:00:00 2001
From: Dave Eddy <dave@daveeddy.com>
Date: Wed, 8 Mar 2017 14:46:01 -0500
Subject: [PATCH] OS-6002 test-tmpfs race condition with the mdata:fetch
 service

---
 src/vm/tests/test-tmpfs.js | 235 ++++++++++++++++++++++++++++++++++---
 1 file changed, 216 insertions(+), 19 deletions(-)

diff --git a/src/vm/tests/test-tmpfs.js b/src/vm/tests/test-tmpfs.js
index 20531dba..ffcf3fb4 100644
--- a/src/vm/tests/test-tmpfs.js
+++ b/src/vm/tests/test-tmpfs.js
@@ -1,13 +1,20 @@
-// Copyright 2015 Joyent, Inc.  All rights reserved.
+// Copyright 2017 Joyent, Inc.
 //
 // These tests ensure that tmpfs works as expected when setting/unsetting
 //
 
+var assert = require('/usr/node/node_modules/assert-plus');
 var async = require('/usr/node/node_modules/async');
-var exec = require('child_process').exec;
+var cp = require('child_process');
+var util = require('util');
 var VM = require('/usr/vm/node_modules/VM');
 var vmtest = require('../common/vmtest.js');
 
+// will try a default of 60 times with a delay of 1s for a service to enter a
+// specific state
+var WAIT_FOR_SVC_MAX_ITERATIONS = 60;
+var WAIT_FOR_SVC_DELAY = 1 * 1000;
+
 // this puts test stuff in global, so we need to tell jsl about that:
 /* jsl:import ../node_modules/nodeunit-plus/index.js */
 require('nodeunit-plus');
@@ -26,7 +33,7 @@ function grabZoneInfo(zonename, callback) {
     // /tmp on swap read/write/setuid/nodevices/xattr/size=4096m/zone=47a8ae00-014b-4b69-97d8-7bed6fe02c7a/dev=89c003e on Mon Sep 22 20:56:57 2014
     // swap        -   /tmp                tmpfs    -   yes    size=4096m
     /* END JSSTYLED */
-    exec(cmd, function (error, stdout, stderr) {
+    cp.exec(cmd, function (error, stdout, stderr) {
         if (error) {
             callback(error);
             return;
@@ -54,23 +61,177 @@ function grabZoneInfo(zonename, callback) {
     });
 }
 
-function waitForSvc(t, zonename, svc, state, callback) {
-    var cmd = '/usr/bin/svcs -z ' + zonename + ' -Ho state ' + svc;
-    var cur_state = '';
+/*
+ * Get service information for a given service name or FMRI
+ *
+ * Arguments:
+ *   'opts'
+ *     'opts.svc'        service name or FMRI
+ *     'opts.zonename'   [optional] defaults to current zone
+ *   'cb'                called with function (err, obj)
+ *
+ * Example object
+ * var opts = {
+ *   zonename: 'foobar',
+ *   svc: 'mdata:fetch'
+ * };
+ * svcs(opts, function (err, obj) {
+ *   console.log(obj);
+ * });
+ *
+ * yields
+ *
+ * {
+ *   "fmri": "svc:/smartdc/mdata:fetch",
+ *   "name": "Joyent SDC metadata handler",
+ *   "zone": "a242f713-0fb0-4fcd-9579-f63e9783d2e0",
+ *   "enabled": "true",
+ *   "state": "online",
+ *   "next_state": "none",
+ *   "state_time": "2017-03-07T03:24:16.000Z",
+ *   "logfile": "/zones/foobar/root/var/svc/log/smartdc-mdata:fetch.log",
+ *   "restarter": "svc:/system/svc/restarter:default",
+ *   "dependency": [
+ *     "optional_all/error svc:/system/rmtmpfiles (online)",
+ *     "require_all/error svc:/system/filesystem/minimal (online)"
+ *   ]
+ * }
+ */
+function svcs(opts, cb) {
+    assert.object(opts, 'opts');
+    assert.string(opts.svc, 'opts.svc');
+    assert.optionalString(opts.zonename, 'opts.zonename');
+    assert.func(cb, 'cb');
+
+    var obj = {};
+    var cmd = '/usr/bin/svcs';
+    var args = [];
+    if (opts.zonename) {
+        args.push('-z');
+        args.push(opts.zonename);
+    }
+    args.push('-l');
+    args.push(opts.svc);
+
+    cp.execFile(cmd, args, {encoding: 'utf8'},
+        function (err, stdout, stderr) {
+
+        if (err) {
+            cb(err);
+            return;
+        }
+
+        // make sure we only match 1 service
+        if (stdout.match(/\n\n/)) {
+            err = new Error('matched multiple services: ' + opts.svc);
+            cb(err);
+            return;
+        }
+
+        /*
+         * Parse svcs stdout - example:
+         *
+         * fmri         svc:/smartdc/mdata:fetch
+         * name         Joyent SDC metadata handler
+         * zone         a242f713-0fb0-4fcd-9579-f63e9783d2e0
+         * enabled      true
+         * state        online
+         * next_state   none
+         * state_time   March  7, 2017 03:24:16 AM UTC
+         * logfile      /zones/<uuid>/root/var/svc/log/smartdc-mdata:fetch.log
+         * restarter    svc:/system/svc/restarter:default
+         * dependency   optional_all/error svc:/system/rmtmpfiles (online)
+         */
+        stdout.trim().split('\n').forEach(function (line) {
+            var match = line.match(/^([^\s]+)\s+(.*)$/);
+            if (!match) {
+                return;
+            }
+            var key = match[1];
+            var value = match[2].trim();
+
+            if (obj.hasOwnProperty(key)) {
+                if (!Array.isArray(obj[key])) {
+                    obj[key] = [obj[key]];
+                }
+                obj[key].push(value);
+            } else {
+                obj[key] = value;
+            }
+        });
+
+        // transform data as needed
+        obj.state_time = new Date(obj.state_time);
+
+        cb(null, obj);
+    });
+}
+
+/*
+ * Wait for an SMF service to enter a given state
+ *
+ * Arguments:
+ *   't'                nodeunit test object
+ *   'opts'
+ *     'opts.svc'       service name or FMRI
+ *     'opts.zonename'  zonename
+ *     'opts.state'     desired state
+ *     'opts.after'     Date object to compare against service start time
+ *   'callback'         callback function
+ */
+function waitForSvc(t, opts, callback) {
+    assert(t, 't');
+    assert.object(opts, 'opts');
+    assert.string(opts.state, 'opts.state');
+    assert.string(opts.svc, 'opts.state');
+    assert.string(opts.zonename, 'opts.zonename');
+    assert.optionalDate(opts.after, 'opts.after');
+    assert.optionalNumber(opts.max_iterations, 'opts.max_iterations');
+    assert.optionalNumber(opts.delay, 'opts.delay');
+    assert.func(callback, 'callback');
+
+    var max_iterations = opts.max_iterations || WAIT_FOR_SVC_MAX_ITERATIONS;
+    var delay = opts.delay || WAIT_FOR_SVC_DELAY;
 
+    var obj = {};
+    var iterations = 0;
     async.until(function () {
-        return (cur_state === state);
+        // if the states are different we must try again
+        if (obj.state !== opts.state)
+            return (false);
+
+        // if we are here the states are the same
+        // if no "after" timestamp is given, we're done
+        if (!opts.after)
+            return (true);
+
+        // finally, we check to make sure the service start time is after the
+        // "after" timestamp given
+        return (obj.state_time > opts.after);
     }, function (cb) {
-        exec(cmd, function (error, stdout, stderr) {
-            var result = stdout.split('\n')[0];
-            if (result && result.length > 0) {
-                cur_state = result;
+        // first check to make sure we shouldn't just give up right away
+        if (iterations++ >= max_iterations) {
+            cb(new Error('max iterations exceeded'));
+            return;
+        }
+
+        var svcs_opts = {
+            svc: opts.svc,
+            zonename: opts.zonename
+        };
+        svcs(svcs_opts, function (err, _obj) {
+            // we purposefully ignore an errors here, as a zone might
+            // be currently rebooting
+            if (!err && _obj) {
+                obj = _obj;
             }
-            cb();
+
+            setTimeout(cb, delay);
         });
     }, function (err) {
-        t.equal(cur_state, state, svc + ' went "' + cur_state + '"');
-        callback(err);
+        t.equal(obj.state, opts.state,
+            util.format('%s went "%s"', opts.svc, obj.state));
+        callback(err, obj);
     });
 }
 
@@ -129,7 +290,12 @@ test('test with default tmpfs', function (t) {
             });
         }, function (cb) {
             // wait for mdata:fetch
-            waitForSvc(t, state.uuid, 'svc:/smartdc/mdata:fetch', 'online', cb);
+            var opts = {
+                zonename: state.uuid,
+                svc: 'svc:/smartdc/mdata:fetch',
+                state: 'online'
+            };
+            waitForSvc(t, opts, cb);
         }, function (cb) {
             // Should be 0 value in the object
             checkTmpfs(0, 'check that tmpfs === 0 after update', cb);
@@ -189,19 +355,46 @@ test('test with tmpfs=0', function (t) {
         });
     }
 
+    var svc_state;
     vmtest.on_new_vm(t, image_uuid, payload, state, [
         function (cb) {
+            // the zone is running, wait for mdata:fetch to come online
+            var opts = {
+                zonename: state.uuid,
+                svc: 'svc:/smartdc/mdata:fetch',
+                state: 'online'
+            };
+            waitForSvc(t, opts, function (err, _svc_state) {
+                if (err) {
+                    cb(err);
+                    return;
+                }
+
+                // store the service state for later (contains the start time
+                // of the service)
+                svc_state = _svc_state;
+
+                cb();
+            });
+        }, function (cb) {
             checkTmpfs(0, 'check that tmpfs === 0', cb);
         }, function (cb) {
             checkZoneState({}, 'zone files/mounts have no tmpfs', cb);
         }, function (cb) {
+            // this will trigger a restart of mdata:fetch
             VM.update(state.uuid, {tmpfs: 256}, function (err) {
                 t.ok(!err, 'updated VM with tmpfs=256');
                 cb(err);
             });
         }, function (cb) {
-            // wait for mdata:fetch
-            waitForSvc(t, state.uuid, 'svc:/smartdc/mdata:fetch', 'online', cb);
+            // wait for mdata:fetch to restart
+            var opts = {
+                zonename: state.uuid,
+                svc: 'svc:/smartdc/mdata:fetch',
+                state: 'online',
+                after: svc_state.state_time
+            };
+            waitForSvc(t, opts, cb);
         }, function (cb) {
             // Should be 256 value in the object
             checkTmpfs(256, 'check that tmpfs === 256 after update', cb);
@@ -217,8 +410,12 @@ test('test with tmpfs=0', function (t) {
             });
         }, function (cb) {
             // wait for filesystem/minimal:default to mount /tmp
-            waitForSvc(t, state.uuid, 'svc:/system/filesystem/minimal:default',
-                'online', cb);
+            var opts = {
+                zonename: state.uuid,
+                svc: 'svc:/system/filesystem/minimal:default',
+                state: 'online'
+            };
+            waitForSvc(t, opts, cb);
         }, function (cb) {
             checkZoneState({
                 tmp_mounted: true,
-- 
2.21.0

