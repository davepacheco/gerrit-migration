From 38867e73b2cf5c3bbe27b1d6428c8e2762bfd87a Mon Sep 17 00:00:00 2001
From: Trent Mick <trentm@gmail.com>
Date: Thu, 2 Feb 2017 06:15:05 -0800
Subject: [PATCH] =?UTF-8?q?TOOLS-1665=20Updating=20agents=20fails=20if=20"?=
 =?UTF-8?q?cmon-agent"=20service=20doesn't=20exist=20in=20SAPI=20Reviewed?=
 =?UTF-8?q?=20by:=20Pedro=20Palaz=C3=B3n=20Candel=20<pedro@joyent.com>=20A?=
 =?UTF-8?q?pproved=20by:=20Pedro=20Palaz=C3=B3n=20Candel=20<pedro@joyent.c?=
 =?UTF-8?q?om>?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 CHANGES.md                        |   7 +
 docs/index.md                     |   6 -
 lib/cli/do_add_new_agent_svcs.js  | 260 +++------------------------
 lib/cli/do_update_other.js        |   5 +-
 lib/procedures/update-agent-v1.js |   8 +-
 lib/sdcadm.js                     |   3 +
 lib/steps/agent-services.js       | 283 ++++++++++++++++++++++++++++++
 lib/steps/index.js                |   3 +-
 package.json                      |   2 +-
 9 files changed, 326 insertions(+), 251 deletions(-)
 create mode 100644 lib/steps/agent-services.js

diff --git a/CHANGES.md b/CHANGES.md
index b4d5931..73d86eb 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -10,6 +10,13 @@
 
 # sdcadm Changelog
 
+## 1.15.3
+
+- Deprecate 'sdcadm experimental add-new-agent-svcs' and roll its functionality
+  into 'sdcadm experimental update-other' and 'sdcadm experimental
+  update-agent'. This allows the documented upgrade procedure to work
+  unchanged, and not hit TOOLS-1665.
+
 ## 1.15.2
 
 - TOOLS-1662: Fix 'sdcadm experimental add-new-agent-svcs' when adding new
diff --git a/docs/index.md b/docs/index.md
index 5ea8c7f..f3b902f 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -721,12 +721,6 @@ which will be eventually integrated into `sdcadm update --all` or moved into
 different sdcadm sub-commands. In the meanwhile, the following is the list
 of these experimental sub-commands involved into SDC update tasks.
 
-## sdcadm experimental add-new-agent-svcs
-
-Create SAPI services for new global zone agents, if required.
-
-    sdcadm experimental add-new-agent-svcs
-
 ## sdcadm experimental update-other
 
 This subcommand is used to perform little modifications of SDC setups,
diff --git a/lib/cli/do_add_new_agent_svcs.js b/lib/cli/do_add_new_agent_svcs.js
index dadffc2..e582a58 100644
--- a/lib/cli/do_add_new_agent_svcs.js
+++ b/lib/cli/do_add_new_agent_svcs.js
@@ -5,243 +5,25 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
-var fs = require('fs');
-var util = require('util');
-var vasync = require('vasync');
-
 var errors = require('../errors');
+var steps = require('../steps');
 
 /*
  * The 'sdcadm experimental add-new-agent-svcs' CLI subcommand.
  */
 function do_add_new_agent_svcs(subcmd, opts, args, cb) {
-    var self = this;
-    var progress = self.progress;
-    var execStart = Date.now();
-
-    if (opts.help) {
-        this.do_help('help', {}, [subcmd], cb);
-        return;
-    } else if (args.length > 1) {
-        return cb(new errors.UsageError('too many args: ' + args));
-    }
-
-    // We need at least a MIN_VALID_SAPI_VERSION image so
-    // type=agent suport is there.
-    var MIN_VALID_SAPI_VERSION = '20140703';
-    var app = self.sdcadm.sdc;
-
-    var img;
-    var agentNames = ['vm-agent', 'net-agent', 'cn-agent',
-        'agents_core',
-        'cmon-agent',
-        'amon-agent', 'amon-relay', 'cabase', 'cainstsvc', 'config-agent',
-        'firewaller', 'hagfish-watcher', 'smartlogin'
-    ];
-    var agentServices = {};
-    agentNames.forEach(function (n) {
-        var logLevelKey = n.toUpperCase().replace('-', '_') + '_LOG_LEVEL';
-        agentServices[n] = {
-            type: 'agent',
-            params: {
-                tags: {
-                    smartdc_role: n,
-                    smartdc_type: 'core'
-                }
-            },
-            metadata: {
-                SERVICE_NAME: n
-            },
-            manifests: {
-            }
-        };
-
-        agentServices[n].metadata[logLevelKey] = 'info';
-    });
-
-
-    // The first time we add agent services to SAPI we'll use the HN image
-    // version to create the service, assuming that's the version installed
-    // everywhere across the whole SDC setup
-    function getAgentImages(callback) {
-        vasync.forEachPipeline({
-            func: function (agent, next) {
-                var name = agent.name;
-                var imgUUIDPath = util.format(
-                    '/opt/smartdc/agents/lib/node_modules/%s/image_uuid',
-                    name);
-                fs.readFile(imgUUIDPath, {
-                    encoding: 'utf8'
-                }, function (err, data) {
-                    if (err) {
-                        self.sdcadm.log.error({err: err},
-                            'Error reading agent image uuid');
-                        next();
-                        return;
-                    }
-                    agentServices[name].params.image_uuid = data.trim();
-                    next();
-                });
-            },
-            inputs: agentNames.map(function (agent) {
-                return agentServices[agent];
-            })
-        }, callback);
-    }
-
-    var newAgentServices = [];
-    var updateAgentServices = [];
-    // Used by history:
-    var history;
-    var changes = [];
-
-    vasync.pipeline({funcs: [
-        function getSapiVmImgs(_, next) {
-            self.sdcadm.getImgsForSvcVms({
-                svc: 'sapi'
-            }, function (err, obj) {
-                if (err) {
-                    return next(err);
-                }
-                img = obj.imgs[0];
-                return next();
-            });
-        },
-        function checkMinSapiVersion(_, next) {
-            progress('Checking for minimum SAPI version');
-            var splitVersion = img.version.split('-');
-            var validSapi = false;
-
-            if (splitVersion[0] === 'master') {
-                validSapi = splitVersion[1].substr(0, 8) >=
-                    MIN_VALID_SAPI_VERSION;
-            } else if (splitVersion[0] === 'release') {
-                validSapi = splitVersion[1] >= MIN_VALID_SAPI_VERSION;
-            }
-
-            if (!validSapi) {
-                return next(new errors.SDCClientError(new Error('Datacenter ' +
-                    'does not have the minimum SAPI version needed for adding' +
-                    ' service agents. ' +
-                    'Please try again after upgrading SAPI')));
-            }
-
-            return next();
-        },
-
-        function checkExistingAgents(_, next) {
-            vasync.forEachParallel({
-                func: function checkAgentExist(agent, callback) {
-                    progress('Checking if service \'%s\' exists', agent);
-                    self.sdcadm.sapi.listServices({
-                        name: agent,
-                        type: 'agent',
-                        application_uuid: app.uuid
-                    }, function (svcErr, svcs) {
-                        if (svcErr) {
-                            return callback(svcErr);
-                        }
-                        if (!svcs.length) {
-                            newAgentServices.push(agent);
-                        } else if (!svcs[0].params.image_uuid) {
-                            agentServices[agent] = svcs[0];
-                            updateAgentServices.push(agent);
-                        }
-                        return callback();
-                    });
-                },
-                inputs: Object.keys(agentServices)
-            }, next);
-        },
-
-        function getAgentImgVersions(_, next) {
-            getAgentImages(next);
-        },
-
-        function saveChangesToHistory(_, next) {
-            newAgentServices.forEach(function (s) {
-                changes.push({
-                    service: {
-                        name: s,
-                        type: 'agent'
-                    },
-                    type: 'create-service'
-                });
-            });
-
-            updateAgentServices.forEach(function (s) {
-                changes.push({
-                    service: {
-                        name: s,
-                        type: 'agent'
-                    },
-                    type: 'update-service'
-                });
-            });
-
-            self.sdcadm.history.saveHistory({
-                changes: changes
-            }, function (err, hst) {
-                if (err) {
-                    return next(err);
-                }
-                history = hst;
-                return next();
-            });
-        },
-        function addAgentsServices(_, next) {
-            vasync.forEachParallel({
-                inputs: newAgentServices,
-                func: function addAgentSvc(agent, callback) {
-                    progress('Adding service for agent \'%s\'', agent);
-                    self.log.trace({
-                        service: agent,
-                        params: agentServices[agent]
-                    }, 'Adding new agent service');
-                    self.sdcadm.sapi.createService(agent, app.uuid,
-                        agentServices[agent], callback);
-                }
-            }, next);
-        },
-
-        function updateAgentsServices(_, next) {
-            vasync.forEachParallel({
-                inputs: updateAgentServices,
-                func: function updateAgentSvc(agent, callback) {
-                    progress('Updating service for agent \'%s\'', agent);
-                    self.log.trace({
-                        service: agent,
-                        params: agentServices[agent]
-                    }, 'Updating agent service');
-                    self.sdcadm.sapi.updateService(agentServices[agent].uuid, {
-                        params: agentServices[agent].params
-                    }, callback);
-                }
-            }, next);
-        }
-    ]}, function (err) {
-        progress('Add new agent services finished (elapsed %ds).',
-            Math.floor((Date.now() - execStart) / 1000));
-        if (!history) {
-            self.sdcadm.log.warn('History not set for add-new-agent-svcs');
-            return cb(err);
-        }
-        if (err) {
-            history.error = err;
-        }
-        self.sdcadm.history.updateHistory(history, function (err2) {
-            if (err) {
-                return cb(err);
-            } else if (err2) {
-                return cb(err2);
-            } else {
-                return cb();
-            }
-        });
-    });
+    console.error(
+        'Warning: "sdcadm experimental add-new-agent-svcs" is deprecated.');
+    console.error('Use "sdcadm experimental update-other" or');
+    console.error('"sdcadm experimental update-agents".\n');
+    steps.agentServicesEnsureCreated({
+        progress: this.progress,
+        sdcadm: this.sdcadm,
+        log: this.log
+    }, cb);
 }
 
 do_add_new_agent_svcs.options = [ {
@@ -250,15 +32,19 @@ do_add_new_agent_svcs.options = [ {
     help: 'Show this help.'
 }];
 
-do_add_new_agent_svcs.help = (
-    'Temporary grabbag for installing the SDC global zone new agents.\n' +
-    'The eventual goal is to integrate all of this into "sdcadm update".\n' +
-    '\n' +
-    'Usage:\n' +
-    '     {{name}} add-new-agent-svcs\n' +
-    '\n' +
+do_add_new_agent_svcs.help = [
+    'DEPRECATED. Ensure a SAPI service exists for each core Triton agent.',
+    '',
+    'This is deprecated, both "sdcadm experimental update-agents" and',
+    '"sdcadm experimental update-other" now provide this functionality.',
+    '',
+    'Usage:',
+    '     {{name}} add-new-agent-svcs\n',
+    '',
     '{{options}}'
-);
+].join('\n');
+do_add_new_agent_svcs.hidden = true;
+
 
 // --- exports
 
diff --git a/lib/cli/do_update_other.js b/lib/cli/do_update_other.js
index f027bcf..7e33b65 100644
--- a/lib/cli/do_update_other.js
+++ b/lib/cli/do_update_other.js
@@ -750,7 +750,10 @@ function do_update_other(subcmd, opts, args, cb) {
                 inputs: svcsToUpdate,
                 func: updateAgentImage
             }, next);
-        }
+        },
+
+        steps.agentServicesEnsureCreated
+
     ]}, function (err) {
         if (!history) {
             self.sdcadm.log.warn('History not set for update-other');
diff --git a/lib/procedures/update-agent-v1.js b/lib/procedures/update-agent-v1.js
index 913e361..40629f9 100644
--- a/lib/procedures/update-agent-v1.js
+++ b/lib/procedures/update-agent-v1.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017, Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 
@@ -105,7 +105,7 @@ UpdateAgentV1.prototype.execute = function uaExecute(opts, callback) {
                     } else if (!svc) {
                         next(new UpdateError(
                             'cn-agent service does not exist. Please run:\n' +
-                            '\n    sdcadm experimental add-new-agent-svcs\n' +
+                            '\n    sdcadm experimental update-other\n' +
                             '\nand install latest agentsshar using:\n\n    ' +
                             'sdcadm experimental upate-agents --all --latest' +
                             '\n\nbefore trying to update individual agents'));
@@ -148,9 +148,7 @@ UpdateAgentV1.prototype.execute = function uaExecute(opts, callback) {
                             next(new UpdateError('cn-agent is not installed ' +
                                 'on any Compute Node.\nIn order to be able to' +
                                 'update individual agents you need to run:\n' +
-                                'sdcadm experimental add-new-agent-svcs\n' +
-                                'and update agentsshar using:\n' +
-                                'sdcadm experimental update-agents'));
+                                '    sdcadm experimental update-agents'));
                         } else {
                             next();
                         }
diff --git a/lib/sdcadm.js b/lib/sdcadm.js
index 4f38e8f..fc226a4 100644
--- a/lib/sdcadm.js
+++ b/lib/sdcadm.js
@@ -1533,6 +1533,7 @@ SdcAdm.prototype.updateAgents = function updateAgents(options, callback) {
 
         function confirm(ctx, next) {
             progress('\nThis update will make the following changes:');
+            progress(common.indent('Ensure core agent SAPI services exist'));
             if (!filepath) {
                 assert.object(image, 'image');
                 progress(common.indent(format(
@@ -1585,6 +1586,8 @@ SdcAdm.prototype.updateAgents = function updateAgents(options, callback) {
             });
         },
 
+        steps.agentServicesEnsureCreated,
+
         function downloadAgentsshar(ctx, next) {
             if (filepath) {
                 return next();
diff --git a/lib/steps/agent-services.js b/lib/steps/agent-services.js
new file mode 100644
index 0000000..38e8c70
--- /dev/null
+++ b/lib/steps/agent-services.js
@@ -0,0 +1,283 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2017 Joyent, Inc.
+ */
+
+/*
+ * Steps for ensuring that SAPI has all the core type=agent services.
+ * By "core" agents, we mean those installed by default on node setup
+ * (which currently is those in the agentsshar) -- with the exception of the
+ * marlin agent.
+ */
+
+var assert = require('assert-plus');
+var fs = require('fs');
+var mod_uuid = require('node-uuid');
+var util = require('util');
+var vasync = require('vasync');
+
+var errors = require('../errors');
+
+var DRY_RUN = false; // An off-switch for dev/testing.
+
+
+/**
+ * Ensure that SAPI has a service entry for the core agents.
+ *
+ * Note on history: If changes are made, this will add a SAPI history item.
+ * However, because the current sdcadm `History` API isn't that convenient
+ * for building up changes for a single history item, we will NOT use the
+ * `sdcadm.uuid` for this run. Doing so can easily result in the this history
+ * item getting overwritten by a separate `sdcadm.history.saveHistory`
+ * during this same command. It would be good to improve this at some point.
+ */
+function agentServicesEnsureCreated(arg, cb) {
+    assert.object(arg, 'arg');
+    assert.func(arg.progress, 'arg.progress');
+    assert.object(arg.log, 'arg.log');
+    assert.object(arg.sdcadm, 'arg.sdcadm');
+    assert.func(cb, 'cb');
+
+    var log = arg.log.child({component: 'agentServicesEnsureCreated'}, true);
+    var sdcadm = arg.sdcadm;
+    var progress = arg.progress;
+
+    // We need at least a MIN_VALID_SAPI_VERSION image so
+    // type=agent suport is there.
+    var MIN_VALID_SAPI_VERSION = '20140703';
+    var app = sdcadm.sdc;
+    var historyItem = null;
+
+    var img;
+    var agentNames = [
+        'agents_core',
+        'amon-agent',
+        'amon-relay',
+        'cabase',
+        'cainstsvc',
+        'cmon-agent',
+        'cn-agent',
+        'config-agent',
+        'firewaller',
+        'hagfish-watcher',
+        'net-agent',
+        'smartlogin',
+        'vm-agent'
+    ];
+    var agentServices = {};
+    agentNames.forEach(function (n) {
+        var logLevelKey = n.toUpperCase().replace('-', '_') + '_LOG_LEVEL';
+        agentServices[n] = {
+            type: 'agent',
+            params: {
+                tags: {
+                    smartdc_role: n,
+                    smartdc_type: 'core'
+                }
+            },
+            metadata: {
+                SERVICE_NAME: n
+            },
+            manifests: {
+            }
+        };
+
+        agentServices[n].metadata[logLevelKey] = 'info';
+    });
+
+
+    // The first time we add agent services to SAPI we'll use the HN image
+    // version to create the service, assuming that's the version installed
+    // everywhere across the whole SDC setup
+    function getAgentImages(callback) {
+        vasync.forEachPipeline({
+            func: function (agent, next) {
+                var name = agent.name;
+                var imgUUIDPath = util.format(
+                    '/opt/smartdc/agents/lib/node_modules/%s/image_uuid',
+                    name);
+                fs.readFile(imgUUIDPath, {
+                    encoding: 'utf8'
+                }, function (err, data) {
+                    if (err) {
+                        log.error({err: err}, 'Error reading agent image uuid');
+                        next();
+                        return;
+                    }
+                    agentServices[name].params.image_uuid = data.trim();
+                    next();
+                });
+            },
+            inputs: agentNames.map(function (agent) {
+                return agentServices[agent];
+            })
+        }, callback);
+    }
+
+    var newAgentServices = [];
+    var updateAgentServices = [];
+
+    vasync.pipeline({funcs: [
+        function getSapiVmImgs(_, next) {
+            sdcadm.getImgsForSvcVms({
+                svc: 'sapi'
+            }, function (err, obj) {
+                if (err) {
+                    return next(err);
+                }
+                img = obj.imgs[0];
+                return next();
+            });
+        },
+        function checkMinSapiVersion(_, next) {
+            var splitVersion = img.version.split('-');
+            var validSapi = false;
+
+            if (splitVersion[0] === 'master') {
+                validSapi = splitVersion[1].substr(0, 8) >=
+                    MIN_VALID_SAPI_VERSION;
+            } else if (splitVersion[0] === 'release') {
+                validSapi = splitVersion[1] >= MIN_VALID_SAPI_VERSION;
+            }
+
+            if (!validSapi) {
+                return next(new errors.SDCClientError(new Error('Datacenter ' +
+                    'does not have the minimum SAPI version needed for adding' +
+                    ' service agents. ' +
+                    'Please try again after upgrading SAPI')));
+            }
+
+            return next();
+        },
+
+        function checkExistingAgents(_, next) {
+            vasync.forEachParallel({
+                func: function checkAgentExist(agent, callback) {
+                    sdcadm.sapi.listServices({
+                        name: agent,
+                        type: 'agent',
+                        application_uuid: app.uuid
+                    }, function (svcErr, svcs) {
+                        if (svcErr) {
+                            return callback(svcErr);
+                        }
+                        if (!svcs.length) {
+                            newAgentServices.push(agent);
+                        } else if (!svcs[0].params.image_uuid) {
+                            agentServices[agent] = svcs[0];
+                            updateAgentServices.push(agent);
+                        }
+                        return callback();
+                    });
+                },
+                inputs: Object.keys(agentServices)
+            }, next);
+        },
+
+        function getAgentImgVersions(_, next) {
+            getAgentImages(next);
+        },
+
+        function saveChangesToHistory(_, next) {
+            var changes = [];
+            newAgentServices.forEach(function (s) {
+                changes.push({
+                    service: {
+                        name: s,
+                        type: 'agent'
+                    },
+                    type: 'create-service'
+                });
+            });
+
+            updateAgentServices.forEach(function (s) {
+                changes.push({
+                    service: {
+                        name: s,
+                        type: 'agent'
+                    },
+                    type: 'update-service'
+                });
+            });
+
+            if (changes.length) {
+                sdcadm.history.saveHistory({
+                    uuid: mod_uuid.v4(),
+                    changes: changes
+                }, function (err, historyItem_) {
+                    if (err) {
+                        next(err);
+                        return;
+                    }
+                    historyItem = historyItem_;
+                    next();
+                });
+            } else {
+                next();
+            }
+        },
+        function addAgentsServices(_, next) {
+            vasync.forEachParallel({
+                inputs: newAgentServices,
+                func: function addAgentSvc(agent, callback) {
+                    progress('Adding service for agent \'%s\'', agent);
+                    log.trace({
+                        service: agent,
+                        params: agentServices[agent]
+                    }, 'Adding new agent service');
+                    if (DRY_RUN) {
+                        callback();
+                    } else {
+                        sdcadm.sapi.createService(agent, app.uuid,
+                            agentServices[agent], callback);
+                    }
+                }
+            }, next);
+        },
+
+        function updateAgentsServices(_, next) {
+            vasync.forEachParallel({
+                inputs: updateAgentServices,
+                func: function updateAgentSvc(agent, callback) {
+                    progress('Updating service for agent \'%s\'', agent);
+                    log.trace({
+                        service: agent,
+                        params: agentServices[agent]
+                    }, 'Updating agent service');
+                    if (DRY_RUN) {
+                        callback();
+                    } else {
+                        sdcadm.sapi.updateService(agentServices[agent].uuid, {
+                            params: agentServices[agent].params
+                        }, callback);
+                    }
+                }
+            }, next);
+        }
+    ]}, function (err) {
+        if (historyItem) {
+            if (err) {
+                historyItem.error = err;
+            }
+            sdcadm.history.updateHistory(historyItem, function (histErr) {
+                cb(err || histErr);
+            });
+        } else {
+            cb(err);
+        }
+    });
+}
+
+
+//---- exports
+
+module.exports = {
+    agentServicesEnsureCreated: agentServicesEnsureCreated
+};
+
+// vim: set softtabstop=4 shiftwidth=4:
diff --git a/lib/steps/index.js b/lib/steps/index.js
index c0f110c..eb5f994 100644
--- a/lib/steps/index.js
+++ b/lib/steps/index.js
@@ -23,7 +23,8 @@ module.exports = {};
 
 [
     'no-rabbit',
-    'update_vm_size'
+    'update_vm_size',
+    'agent-services'
 ].forEach(function (modName) {
     var mod = require('./' + modName);
     Object.keys(mod).forEach(function (symbol) {
diff --git a/package.json b/package.json
index 4f49452..a79a142 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "sdcadm",
   "description": "Administer a SmartDataCenter (SDC) standup",
-  "version": "1.15.2",
+  "version": "1.15.3",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
-- 
2.21.0

