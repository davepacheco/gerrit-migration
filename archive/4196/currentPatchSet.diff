From 1c73575f3123c1fc91e9fe5704a2aa61c36ee0eb Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Fri, 8 Jun 2018 15:44:04 -0700
Subject: [PATCH] MANTA-3719 Need Firewall Rules for Postgres Reviewed by: Cody
 Peter Mello <cody.mello@joyent.com> Reviewed by: Trent Mick
 <trent.mick@joyent.com> Approved by: Trent Mick <trent.mick@joyent.com>

---
 .eslintrc                                 |   20 +
 .gitignore                                |   13 +
 .gitmodules                               |    3 +
 Makefile                                  |  157 +++
 README.md                                 |   20 +
 deps/jsstyle                              |    1 +
 etc/config.json.example                   |   16 +
 etc/ipf.conf                              |   24 +
 lib/ipf.js                                |  345 +++++++
 lib/zk.js                                 |  167 ++++
 package.json                              |   37 +
 sapi_manifests/waferlock/manifest.json.in |    5 +
 sapi_manifests/waferlock/template         |   30 +
 server.js                                 |  210 ++++
 smf/manifests/waferlock.xml.in            |   41 +
 tools/bashstyle                           |  175 ++++
 tools/jsstyle.conf                        |   14 +
 tools/mk/Makefile.defs                    |  105 ++
 tools/mk/Makefile.deps                    |   87 ++
 tools/mk/Makefile.manpages.defs           |  128 +++
 tools/mk/Makefile.manpages.targ           |   28 +
 tools/mk/Makefile.node.defs               |  110 +++
 tools/mk/Makefile.node.targ               |   42 +
 tools/mk/Makefile.node_modules.defs       |   68 ++
 tools/mk/Makefile.node_modules.targ       |   31 +
 tools/mk/Makefile.node_prebuilt.defs      |  159 +++
 tools/mk/Makefile.node_prebuilt.targ      |   42 +
 tools/mk/Makefile.smf.defs                |   40 +
 tools/mk/Makefile.smf.targ                |   32 +
 tools/mk/Makefile.targ                    |  345 +++++++
 tools/service_bundle.dtd.1                | 1091 +++++++++++++++++++++
 31 files changed, 3586 insertions(+)
 create mode 100644 .eslintrc
 create mode 100644 .gitignore
 create mode 100644 .gitmodules
 create mode 100644 Makefile
 create mode 100644 README.md
 create mode 160000 deps/jsstyle
 create mode 100644 etc/config.json.example
 create mode 100644 etc/ipf.conf
 create mode 100644 lib/ipf.js
 create mode 100644 lib/zk.js
 create mode 100644 package.json
 create mode 100644 sapi_manifests/waferlock/manifest.json.in
 create mode 100644 sapi_manifests/waferlock/template
 create mode 100644 server.js
 create mode 100644 smf/manifests/waferlock.xml.in
 create mode 100755 tools/bashstyle
 create mode 100644 tools/jsstyle.conf
 create mode 100644 tools/mk/Makefile.defs
 create mode 100644 tools/mk/Makefile.deps
 create mode 100644 tools/mk/Makefile.manpages.defs
 create mode 100644 tools/mk/Makefile.manpages.targ
 create mode 100644 tools/mk/Makefile.node.defs
 create mode 100644 tools/mk/Makefile.node.targ
 create mode 100644 tools/mk/Makefile.node_modules.defs
 create mode 100644 tools/mk/Makefile.node_modules.targ
 create mode 100644 tools/mk/Makefile.node_prebuilt.defs
 create mode 100644 tools/mk/Makefile.node_prebuilt.targ
 create mode 100644 tools/mk/Makefile.smf.defs
 create mode 100644 tools/mk/Makefile.smf.targ
 create mode 100644 tools/mk/Makefile.targ
 create mode 100644 tools/service_bundle.dtd.1

diff --git a/.eslintrc b/.eslintrc
new file mode 100644
index 0000000..a32a631
--- /dev/null
+++ b/.eslintrc
@@ -0,0 +1,20 @@
+{
+    "plugins": [ "joyent" ],
+    "extends": [
+        "eslint:recommended",
+        "plugin:joyent/style",
+        "plugin:joyent/lint"
+    ],
+    "parserOptions": {
+        "ecmaVersion": 5,
+        "sourceType": "script",
+        "ecmaFeatures": {
+        }
+    },
+    "env": {
+        "node": true
+    },
+    "rules": {
+        "no-mixed-spaces-and-tabs": ["off"]
+    }
+}
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..7498c96
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,13 @@
+/node_modules
+/tmp
+/cache/
+build
+/make_stamps
+docs/*.json
+docs/*.html
+cscope.in.out
+cscope.po.out
+cscope.out
+man
+smf/manifests/waferlock.xml
+sapi_manifests/waferlock/manifest.json
diff --git a/.gitmodules b/.gitmodules
new file mode 100644
index 0000000..14e5f4b
--- /dev/null
+++ b/.gitmodules
@@ -0,0 +1,3 @@
+[submodule "deps/jsstyle"]
+	path = deps/jsstyle
+	url = https://github.com/davepacheco/jsstyle.git
diff --git a/Makefile b/Makefile
new file mode 100644
index 0000000..d34a229
--- /dev/null
+++ b/Makefile
@@ -0,0 +1,157 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2018, Joyent, Inc.
+#
+
+#
+# Tools
+#
+TAPE :=			./node_modules/.bin/tape
+
+#
+# Makefile.defs defines variables used as part of the build process.
+#
+include ./tools/mk/Makefile.defs
+
+SAPI_MANIFESTS_IN =	sapi_manifests/waferlock/manifest.json.in
+SAPI_MANIFESTS +=	$(SAPI_MANIFESTS_IN:%.in=%)
+CLEAN_FILES +=		$(SAPI_MANIFESTS_IN:%.in=%)
+
+#
+# Configuration used by Makefile.defs and Makefile.targ to generate
+# "check" and "docs" targets.
+#
+#DOC_FILES =		index.md boilerplateapi.md
+JSON_FILES =		package.json $(SAPI_MANIFESTS)
+JS_FILES :=		$(shell find lib test -name '*.js') server.js
+ESLINT_FILES =		$(JS_FILES)
+JSSTYLE_FILES =		$(JS_FILES)
+
+JSSTYLE_FLAGS =		-f tools/jsstyle.conf
+
+PREFIX ?=		/opt/smartdc/waferlock
+
+#
+# Configuration used by Makefile.smf.defs to generate "check" and "all" targets
+# for SMF manifest files.
+#
+SMF_MANIFESTS_IN =	smf/manifests/waferlock.xml.in
+include ./tools/mk/Makefile.smf.defs
+
+#
+# Historically, Node packages that make use of binary add-ons must ship their
+# own Node built with the same compiler, compiler options, and Node version that
+# the add-on was built with.  On SmartOS systems, we use prebuilt Node images
+# via Makefile.node_prebuilt.defs.  On other systems, we build our own Node
+# binary as part of the build process.  Other options are possible -- it depends
+# on the need of your repository.
+#
+NODE_PREBUILT_VERSION =	v4.9.0
+NODE_PREBUILT_IMAGE = 18b094b0-eb01-11e5-80c1-175dac7ddf02
+ifeq ($(shell uname -s),SunOS)
+	NODE_PREBUILT_TAG = zone
+	include ./tools/mk/Makefile.node_prebuilt.defs
+else
+	NODE := $(shell which node)
+	NPM := $(shell which npm)
+	NPM_EXEC=$(NPM)
+endif
+
+#
+# Makefile.node_modules.defs provides a common target for installing modules
+# with NPM from a dependency specification in a "package.json" file.  By
+# including this Makefile, we can depend on $(STAMP_NODE_MODULES) to drive "npm
+# install" correctly.
+#
+include ./tools/mk/Makefile.node_modules.defs
+
+
+#
+# MG Variables
+#
+
+RELEASE_TARBALL         := waferlock-pkg-$(STAMP).tar.bz2
+ROOT                    := $(shell pwd)
+RELSTAGEDIR             := /tmp/$(STAMP)
+
+#
+# Repo-specific targets
+#
+.PHONY: all
+all: $(SMF_MANIFESTS) $(STAMP_NODE_MODULES) $(SAPI_MANIFESTS) | $(REPO_DEPS)
+
+#
+# This example Makefile defines a special target for building manual pages.  You
+# may want to make these dependencies part of "all" instead.
+#
+.PHONY: manpages
+manpages: $(MAN_OUTPUTS)
+
+.PHONY: test
+test: $(STAMP_NODE_MODULES)
+	$(NODE) $(TAPE) test/*.test.js
+
+#
+# MG targets
+#
+.PHONY: release
+release: all
+	@echo "Building $(RELEASE_TARBALL)"
+	mkdir -p $(RELSTAGEDIR)/root/$(PREFIX)
+	mkdir -p $(RELSTAGEDIR)/site
+	touch $(RELSTAGEDIR)/site/.do-not-delete-me
+	mkdir -p $(RELSTAGEDIR)/root
+	mkdir -p $(RELSTAGEDIR)/root/$(PREFIX)/etc
+	cp	$(ROOT)/etc/ipf.conf \
+		$(RELSTAGEDIR)/root/$(PREFIX)/etc
+	cp -r   $(ROOT)/lib \
+		$(ROOT)/server.js \
+		$(ROOT)/node_modules \
+		$(ROOT)/package.json \
+		$(ROOT)/smf \
+		$(ROOT)/sapi_manifests \
+		$(RELSTAGEDIR)/root/$(PREFIX)
+	mkdir -p $(RELSTAGEDIR)/root/$(PREFIX)/build
+	cp -r \
+		$(ROOT)/build/node \
+		$(RELSTAGEDIR)/root/$(PREFIX)/build
+	(cd $(RELSTAGEDIR) && $(TAR) -jcf $(ROOT)/$(RELEASE_TARBALL) root site)
+	rm -rf $(RELSTAGEDIR)
+
+
+.PHONY: publish
+publish: release
+	@if [[ -z "$(BITS_DIR)" ]]; then \
+		@echo "error: 'BITS_DIR' must be set for 'publish' target"; \
+		exit 1; \
+	fi
+	mkdir -p $(BITS_DIR)/waferlock
+	cp $(ROOT)/$(RELEASE_TARBALL) $(BITS_DIR)/waferlock/$(RELEASE_TARBALL)
+
+#
+# Target definitions.  This is where we include the target Makefiles for
+# the "defs" Makefiles we included above.
+#
+
+include ./tools/mk/Makefile.deps
+
+ifeq ($(shell uname -s),SunOS)
+	include ./tools/mk/Makefile.node_prebuilt.targ
+else
+	include ./tools/mk/Makefile.node.targ
+endif
+
+include ./tools/mk/Makefile.smf.targ
+include ./tools/mk/Makefile.node_modules.targ
+include ./tools/mk/Makefile.targ
+
+$(SAPI_MANIFESTS): %: %.in
+	$(SED) \
+	    -e 's#@@NODE@@#@@PREFIX@@/$(NODE_INSTALL)/bin/node#g' \
+	    -e 's#@@PREFIX@@#$(PREFIX)#g' \
+	    $< > $@
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..e66fb24
--- /dev/null
+++ b/README.md
@@ -0,0 +1,20 @@
+<!--
+    This Source Code Form is subject to the terms of the Mozilla Public
+    License, v. 2.0. If a copy of the MPL was not distributed with this
+    file, You can obtain one at http://mozilla.org/MPL/2.0/.
+-->
+
+<!--
+    Copyright (c) 2018, Joyent, Inc.
+-->
+
+# waferlock
+
+This repository is part of the Joyent Triton project. See the [contribution
+guidelines](https://github.com/joyent/triton/blob/master/CONTRIBUTING.md) --
+*Triton does not use GitHub PRs* -- and general documentation at the main
+[Triton project](https://github.com/joyent/triton) page.
+
+The waferlock agent runs inside other service zones in Triton and Manta and
+manages their ipfilter firewalls to block access from IPs that aren't a
+registered part of the installation.
diff --git a/deps/jsstyle b/deps/jsstyle
new file mode 160000
index 0000000..52dc973
--- /dev/null
+++ b/deps/jsstyle
@@ -0,0 +1 @@
+Subproject commit 52dc973cf64da11834eca7cf46ebce8518e3ee88
diff --git a/etc/config.json.example b/etc/config.json.example
new file mode 100644
index 0000000..2812541
--- /dev/null
+++ b/etc/config.json.example
@@ -0,0 +1,16 @@
+{
+	"zookeeper": {
+		"sessionTimeout": 60000,
+		"servers": [
+			{"address": "127.0.0.1", "port": 2181}
+		]
+	},
+	"holdTime": 30,
+	"paths": [
+		"/foo",
+		"/moray"
+	],
+	"domains": [
+		"moray.coal-1.joyent.us"
+	]
+}
diff --git a/etc/ipf.conf b/etc/ipf.conf
new file mode 100644
index 0000000..0741bf2
--- /dev/null
+++ b/etc/ipf.conf
@@ -0,0 +1,24 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+# Copyright (c) 2018, Joyent, Inc.
+#
+
+#
+# output rules
+#
+pass out quick proto tcp from any to any flags S/SA keep state
+pass out proto tcp from any to any
+pass out proto udp from any to any keep state
+pass out quick proto icmp from any to any keep state
+pass out proto icmp from any to any
+
+#
+# input rules
+#
+pass in quick proto icmp from any to any keep frags
+pass in quick proto udp from any to any keep frags
+pass in quick proto tcp from pool/100 to any keep frags
+block in log all
diff --git a/lib/ipf.js b/lib/ipf.js
new file mode 100644
index 0000000..38e84a2
--- /dev/null
+++ b/lib/ipf.js
@@ -0,0 +1,345 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+var mod_assert = require('assert-plus');
+var mod_vasync = require('vasync');
+var mod_verror = require('verror');
+var mod_forkexec = require('forkexec');
+var mod_util = require('util');
+var mod_ipaddr = require('ipaddr.js');
+var mod_cproc = require('child_process');
+var mod_lstream = require('lstream');
+var mod_fsm = require('mooremachine');
+
+var VError = mod_verror.VError;
+
+var Ipf = {};
+Ipf.flushAll = function (cb) {
+	mod_forkexec.forkExecWait({
+		argv: ['pfexec', 'ipf', '-F', 'a']
+	}, function (err, info) {
+		if (info.status === 1 &&
+		    info.stderr.indexOf('I/O error') !== -1) {
+			err = new VError({ cause: err,
+			    name: 'IpfDisabledError' }, 'ipf is disabled');
+			cb(err);
+			return;
+		}
+		if (info.status !== 0) {
+			cb(err);
+			return;
+		}
+		cb();
+	});
+};
+Ipf.enable = function (cb) {
+	mod_forkexec.forkExecWait({
+		argv: ['pfexec', 'ipf', '-E']
+	}, cb);
+};
+Ipf.disable = function (cb) {
+	mod_forkexec.forkExecWait({
+		argv: ['pfexec', 'ipf', '-D']
+	}, cb);
+};
+Ipf.loadRulesFile = function (path, cb) {
+	mod_forkexec.forkExecWait({
+		argv: ['pfexec', 'ipf', '-I', '-f', path, '-s']
+	}, cb);
+};
+
+function IpMon(options) {
+	mod_assert.object(options, 'options');
+	mod_assert.object(options.log, 'options.log');
+
+	this.im_kid = undefined;
+	this.im_log = options.log.child({
+		component: 'IpMon'
+	});
+	this.im_outls = new mod_lstream();
+	this.im_errls = new mod_lstream();
+
+	mod_fsm.FSM.call(this, 'spawning');
+}
+mod_util.inherits(IpMon, mod_fsm.FSM);
+
+IpMon.prototype.state_spawning = function (S) {
+	var self = this;
+
+	var opts = {};
+	opts.env = {};
+	try {
+		this.im_kid = mod_cproc.spawn('pfexec', ['ipmon', '-p'], opts);
+	} catch (e) {
+		this.im_lastError = new VError(e,
+		    'failed to spawn ipmon command');
+		S.gotoState('error');
+		return;
+	}
+
+	S.on(this.im_kid, 'error', function (err) {
+		self.im_lastError = new VError(err, 'ipmon command failed');
+		self.gotoState('error');
+	});
+
+	this.im_kid.stderr.pipe(this.im_errls);
+	this.im_kid.stdout.pipe(this.im_outls);
+
+	S.on(this.im_errls, 'line', function (line) {
+		self.im_lastError = new VError(new Error(line), 'ipmon ' +
+		    'command error');
+		S.gotoState('error');
+	});
+
+	S.on(this.im_outls, 'line', function () {
+		S.gotoState('running');
+	});
+
+	S.on(this.im_kid, 'close', function (code) {
+		self.im_lastError = new VError('ipmon command exited ' +
+		    'unexpectedly with error code %d', code);
+		S.gotoState('error');
+	});
+};
+
+IpMon.prototype.state_running = function (S) {
+	var self = this;
+
+	S.on(this.im_kid, 'error', function (err) {
+		self.im_lastError = new VError(err, 'ipmon command failed');
+		self.gotoState('error');
+	});
+
+	S.on(this.im_errls, 'line', function (line) {
+		self.im_lastError = new VError(new Error(line), 'ipmon ' +
+		    'command error');
+		S.gotoState('error');
+	});
+
+	S.on(this.im_outls, 'readable', function () {
+		var line;
+		while ((line = self.im_outls.read()) !== null) {
+			self.emit('line', line);
+		}
+	});
+
+	S.on(this.im_kid, 'close', function (code) {
+		if (code !== 0) {
+			self.im_lastError = new VError('ipmon command exited ' +
+			    'unexpectedly with error code %d', code);
+			S.gotoState('error');
+		} else {
+			S.gotoState('stopped');
+		}
+	});
+
+	S.on(this, 'stopAsserted', function () {
+		S.gotoState('stopping');
+	});
+};
+
+IpMon.prototype.state_stopping = function (S) {
+	S.on(this.im_kid, 'error', function (_err) {
+	});
+	S.on(this.im_kid, 'close', function (_code) {
+		S.gotoState('stopped');
+	});
+	this.im_kid.kill();
+};
+
+IpMon.prototype.stop = function () {
+	mod_assert.ok(this.isInState('running'));
+	this.emit('stopAsserted');
+};
+
+IpMon.prototype.state_stopped = function (S) {
+	S.validTransitions([]);
+};
+
+IpMon.prototype.state_error = function (S) {
+	S.validTransitions([]);
+	this.emit('error', this.im_lastError);
+	this.im_kid.kill();
+};
+
+function IpfPool(options) {
+	mod_assert.object(options, 'options');
+	mod_assert.object(options.log, 'options.log');
+	mod_assert.string(options.name, 'options.name');
+	mod_assert.number(options.holdTime, 'options.holdTime');
+
+	this.ipp_log = options.log.child({
+		component: 'IpfPool',
+		pool: options.name
+	});
+	this.ipp_name = options.name;
+	this.ipp_hold = options.holdTime * 1000;
+	this.ipp_addrs = {};
+	this.ipp_tags = {};
+	this.ipp_timers = {};
+}
+IpfPool.prototype.init = function (cb) {
+	var self = this;
+	this.ipp_log.info('setting up ipf pool');
+	IpfPool.create(this.ipp_name, 'tree', function (err) {
+		if (err && err.name === 'PoolExistsError') {
+			IpfPool.destroy(self.ipp_name, 'tree', function (err2) {
+				if (err2) {
+					cb(err2);
+					return;
+				}
+				IpfPool.create(self.ipp_name, 'tree', cb);
+			});
+			return;
+		}
+		cb(err);
+	});
+};
+IpfPool.prototype.expire = function (key) {
+	var self = this;
+	delete (this.ipp_timers[key]);
+	IpfPool.removeMask(this.ipp_name, key, function (err) {
+		if (err) {
+			self.ipp_log.error(err, 'failed to remove expiring ip');
+			return;
+		}
+		self.ipp_log.debug('expired address %s', key);
+	});
+};
+IpfPool.prototype.refreshTag = function (tag, addrs, cb) {
+	var self = this;
+
+	var keys = addrs.map(function (addr) {
+		var ipaddr = mod_ipaddr.parse(addr);
+		return (ipaddr.toNormalizedString());
+	});
+
+	var oldKeys = this.ipp_tags[tag];
+	if (oldKeys === undefined)
+		oldKeys = [];
+	this.ipp_tags[tag] = keys;
+
+	var added = keys.filter(function (k) {
+		return (oldKeys.indexOf(k) === -1);
+	});
+	var removed = oldKeys.filter(function (k) {
+		return (keys.indexOf(k) === -1);
+	});
+
+	var held = [];
+	removed.forEach(function (k) {
+		var tags = self.ipp_addrs[k];
+		mod_assert.arrayOfString(tags);
+		mod_assert.ok(tags.length > 0);
+		var idx = tags.indexOf(tag);
+		mod_assert.notStrictEqual(idx, -1);
+		tags.splice(idx, 1);
+		if (tags.length === 0) {
+			delete (self.ipp_addrs[k]);
+			held.push(k);
+		}
+	});
+
+	if (held.length > 0) {
+		var now = (new Date()).getTime();
+		var expiry = Math.ceil((now + this.ipp_hold) / 5000) * 5000;
+		var timeout = expiry - now;
+
+		held.forEach(function (k) {
+			mod_assert.strictEqual(self.ipp_timers[k], undefined);
+			self.ipp_timers[k] = setTimeout(
+			    self.expire.bind(self, k), timeout);
+		});
+
+		self.ipp_log.debug({ addrs: held, tag: tag }, 'holding %d ' +
+		    'addresses for %d ms', held.length, timeout);
+	}
+
+	var news = [];
+	added.forEach(function (k) {
+		var timer = self.ipp_timers[k];
+		if (timer !== undefined) {
+			clearTimeout(timer);
+			delete (self.ipp_timers[k]);
+			mod_assert.strictEqual(self.ipp_addrs[k], undefined);
+			self.ipp_addrs[k] = [tag];
+			return;
+		}
+		var tags = self.ipp_addrs[k];
+		if (tags === undefined) {
+			tags = (self.ipp_addrs[k] = []);
+			news.push(k);
+		}
+		tags.push(tag);
+	});
+
+	if (news.length > 0) {
+		self.ipp_log.debug({ addrs: news, tag: tag },
+		    'adding new addresses');
+		mod_vasync.forEachPipeline({
+			inputs: news,
+			func: function (k, ccb) {
+				IpfPool.addMask(self.ipp_name, k, ccb);
+			}
+		}, function (err, res) {
+			if (cb)
+				cb(err);
+		});
+	} else if (cb) {
+		setImmediate(cb);
+	}
+};
+
+IpfPool.create = function (name, type, cb) {
+	mod_forkexec.forkExecWait({
+		argv: [
+			'pfexec', 'ippool', '-A', '-o', 'ipf', '-t', type,
+			'-m', name
+		]
+	}, function (err, info) {
+		if (info.status === 255 &&
+		    info.stderr.indexOf(': File exists') !== -1) {
+			err = new VError({ cause: err,
+			    name: 'PoolExistsError' },
+			    'pool "%s" already exists', name);
+			cb(err);
+			return;
+		}
+		if (info.status !== 0) {
+			cb(err);
+			return;
+		}
+		cb();
+	});
+};
+IpfPool.destroy = function (name, type, cb) {
+	mod_forkexec.forkExecWait({
+		argv: [
+			'pfexec', 'ippool', '-R', '-o', 'ipf', '-t', type,
+			'-m', name
+		]
+	}, cb);
+};
+IpfPool.addMask = function (name, addr, cb) {
+	mod_forkexec.forkExecWait({
+		argv: ['pfexec', 'ippool', '-a', '-m', name, '-i', addr]
+	}, cb);
+};
+IpfPool.removeMask = function (name, addr, cb) {
+	mod_forkexec.forkExecWait({
+		argv: ['pfexec', 'ippool', '-r', '-m', name, '-i', addr]
+	}, cb);
+};
+
+module.exports = {
+	Ipf: Ipf,
+	IpfPool: IpfPool,
+	IpMon: IpMon
+};
diff --git a/lib/zk.js b/lib/zk.js
new file mode 100644
index 0000000..b532450
--- /dev/null
+++ b/lib/zk.js
@@ -0,0 +1,167 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+var mod_assert = require('assert-plus');
+var mod_zkstream = require('zkstream');
+
+function ZKCache(options) {
+	mod_assert.object(options, 'options');
+	mod_assert.object(options.log, 'options.log');
+	mod_assert.object(options.pool, 'options.pool');
+	mod_assert.arrayOfString(options.roots, 'options.roots');
+	mod_assert.object(options.zkConfig, 'options.zkConfig');
+
+	var conf = Object.create(options.zkConfig);
+	conf.log = options.log;
+	this.ca_zk = new mod_zkstream.Client(conf);
+	this.ca_log = options.log.child({
+		component: 'ZKCache'
+	});
+	this.ca_roots = options.roots;
+	this.ca_pool = options.pool;
+	this.ca_nodes = {};
+
+	var self = this;
+	this.ca_zk.on('session', function () {
+		self.rebuildCache();
+	});
+}
+ZKCache.prototype.rebuildCache = function () {
+	var self = this;
+	this.ca_roots.forEach(function (path) {
+		var tn = self.ca_nodes[path];
+		if (tn === undefined) {
+			var parts = path.split('/');
+			tn = new ZKNode(self,
+			    parts.slice(0, parts.length - 1).join('/'),
+			    parts[parts.length - 1]);
+		}
+		tn.rebind(self.ca_zk);
+	});
+};
+
+function ZKNode(cache, dir, name) {
+	this.zn_name = name;
+	this.zn_dir = dir;
+	this.zn_path = this.zn_dir + '/' + this.zn_name;
+
+	this.zn_cache = cache;
+	this.zn_kids = {};
+	this.zn_data = null;
+	this.zn_watcher = undefined;
+	this.zn_log = cache.ca_log.child({
+		component: 'ZKNode',
+		path: this.zn_path
+	});
+	this.zn_log.trace('adding node to cache at "%s"', this.zn_path);
+	this.zn_cache.ca_nodes[this.zn_path] = this;
+}
+ZKNode.prototype.rebind = function (zk) {
+	var self = this;
+	if (this.zn_watcher) {
+		this.zn_watcher.removeAllListeners('childrenChanged');
+		this.zn_watcher.removeAllListeners('dataChanged');
+		this.zn_watcher = undefined;
+	}
+	this.zn_watcher = zk.watcher(this.zn_path);
+	this.zn_watcher.on('childrenChanged',
+	    this.onChildrenChanged.bind(this, zk));
+	this.zn_watcher.on('dataChanged',
+	    this.onDataChanged.bind(this, zk));
+	Object.keys(this.zn_kids).forEach(function (k) {
+		self.zn_kids[k].rebind(zk);
+	});
+};
+ZKNode.prototype.unbind = function (_zk) {
+	var self = this;
+	if (this.zn_watcher) {
+		this.zn_watcher.removeAllListeners('childrenChanged');
+		this.zn_watcher.removeAllListeners('dataChanged');
+		this.zn_watcher = undefined;
+	}
+	Object.keys(this.zn_kids).forEach(function (k) {
+		self.zn_kids[k].unbind();
+	});
+	if (this.zn_cache.ca_nodes[this.zn_path] === this) {
+		delete (this.zn_cache.ca_nodes[this.zn_path]);
+		this.zn_cache.ca_pool.refreshTag(this.zn_path, []);
+	}
+};
+ZKNode.prototype.onChildrenChanged = function (zk, kids, _stat) {
+	var self = this;
+
+	var newKids = {};
+	kids.forEach(function (kid) {
+		if (self.zn_kids[kid] !== undefined) {
+			newKids[kid] = self.zn_kids[kid];
+			delete (self.zn_kids[kid]);
+		} else {
+			newKids[kid] = new ZKNode(self.zn_cache,
+			    self.zn_path, kid);
+			newKids[kid].rebind(zk);
+		}
+	});
+	Object.keys(this.zn_kids).forEach(function (oldKid) {
+		self.zn_kids[oldKid].unbind();
+	});
+	this.zn_kids = newKids;
+};
+ZKNode.prototype.onDataChanged = function (_zk, data, _stat) {
+	var parsedData;
+	try {
+		var str = data.toString('utf-8');
+		parsedData = JSON.parse(str);
+	} catch (e) {
+		/* Ignore data in a node that we can't parse */
+		this.zn_log.warn(e, 'ignoring node %s: failed to parse data',
+		    this.zn_path);
+		this.zn_cache.ca_pool.refreshTag(this.zn_path, []);
+		return;
+	}
+	if (typeof (parsedData) !== 'object') {
+		var er = new Error('Parsed JSON data is not an object');
+		this.zn_log.warn(er, 'ignoring node %s: failed to parse data',
+		    this.zn_path);
+		this.zn_cache.ca_pool.refreshTag(this.zn_path, []);
+		return;
+	}
+	this.zn_data = parsedData;
+
+	if (parsedData === null || typeof (parsedData.type) !== 'string') {
+		this.zn_cache.ca_pool.refreshTag(this.zn_path, []);
+		return;
+	}
+
+	switch (parsedData.type) {
+	case 'db_host':
+	case 'host':
+	case 'load_balancer':
+	case 'moray_host':
+	case 'redis_host':
+	case 'ops_host':
+	case 'rr_host':
+		var record = parsedData[parsedData.type];
+		if (typeof (record) !== 'object' || record === null) {
+			this.zn_cache.ca_pool.refreshTag(this.zn_path, []);
+			break;
+		}
+		var addr = record.address;
+		this.zn_cache.ca_pool.refreshTag(this.zn_path, [addr]);
+		break;
+
+	default:
+		this.zn_cache.ca_pool.refreshTag(this.zn_path, []);
+		break;
+	}
+};
+
+module.exports = {
+	ZKCache: ZKCache
+};
diff --git a/package.json b/package.json
new file mode 100644
index 0000000..057c6b8
--- /dev/null
+++ b/package.json
@@ -0,0 +1,37 @@
+{
+  "name": "waferlock",
+  "version": "1.0.0",
+  "description": "In-zone firewall control agent for manatee zones",
+  "main": "server.js",
+  "scripts": {
+    "test": "tape test/*.test.js",
+    "start": "node server.js"
+  },
+  "repository": {
+    "type": "git",
+    "url": "git+https://github.com/joyent/waferlock.git"
+  },
+  "author": "Joyent (joyent.com)",
+  "private": true,
+  "license": "MPL-2.0",
+  "bugs": {
+    "url": "https://github.com/joyent/waferlock/issues"
+  },
+  "homepage": "https://github.com/joyent/waferlock#readme",
+  "dependencies": {
+    "assert-plus": "^1.0.0",
+    "bunyan": "^1.8.12",
+    "forkexec": "^1.1.0",
+    "ipaddr.js": "^1.7.0",
+    "lstream": "0.0.4",
+    "mooremachine": "^2.2.1",
+    "vasync": "^2.2.0",
+    "verror": "^1.10.0",
+    "zkstream": "^0.10.1"
+  },
+  "devDependencies": {
+    "eslint": "4.19.1",
+    "eslint-plugin-joyent": "~2.0.0",
+    "tape": "^4.9.1"
+  }
+}
diff --git a/sapi_manifests/waferlock/manifest.json.in b/sapi_manifests/waferlock/manifest.json.in
new file mode 100644
index 0000000..6b33347
--- /dev/null
+++ b/sapi_manifests/waferlock/manifest.json.in
@@ -0,0 +1,5 @@
+{
+	"name": "waferlock",
+	"path": "@@PREFIX@@/etc/config.json",
+	"post_cmd": "/usr/sbin/svcadm restart waferlock"
+}
diff --git a/sapi_manifests/waferlock/template b/sapi_manifests/waferlock/template
new file mode 100644
index 0000000..5f06195
--- /dev/null
+++ b/sapi_manifests/waferlock/template
@@ -0,0 +1,30 @@
+{
+	"zookeeper": {
+		"sessionTimeout": 60000,
+		"servers": [
+			{{#ZK_SERVERS}}
+				{ "address": "{{{host}}}", "port": {{{port}}} }
+				{{^last}},{{/last}}
+			{{/ZK_SERVERS}}
+		]
+	},
+	"holdTime": 600,
+	"paths": [
+		{{! "dns_domain" being set means we are in Triton (not Manta) }}
+		{{#dns_domain}}
+			"/moray"
+		{{/dns_domain}}
+	],
+	"domains": [
+		{{#dns_domain}}
+			"{{{moray_domain}}}"
+		{{/dns_domain}}
+		{{^dns_domain}}
+			"moray.{{{DOMAIN_NAME}}}",
+			"ops.{{{DOMAIN_NAME}}}",
+			"madtom.{{{DOMAIN_NAME}}}",
+			"pgstatsmon.{{{DOMAIN_NAME}}}",
+			"reshard.{{{DOMAIN_NAME}}}"
+		{{/dns_domain}}
+	]
+}
diff --git a/server.js b/server.js
new file mode 100644
index 0000000..5f20dde
--- /dev/null
+++ b/server.js
@@ -0,0 +1,210 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+var mod_assert = require('assert-plus');
+var mod_verror = require('verror');
+var mod_bunyan = require('bunyan');
+var mod_fs = require('fs');
+var mod_util = require('util');
+var mod_path = require('path');
+var mod_fsm = require('mooremachine');
+
+var lib_ipf = require('./lib/ipf');
+var Ipf = lib_ipf.Ipf;
+var IpfPool = lib_ipf.IpfPool;
+var IpMon = lib_ipf.IpMon;
+
+var lib_zk = require('./lib/zk');
+var ZKCache = lib_zk.ZKCache;
+
+var VError = mod_verror.VError;
+
+var confDir = mod_path.join(__dirname, 'etc');
+var confFile = mod_path.join(confDir, 'config.json');
+var ipfConfigFile = mod_path.join(confDir, 'ipf.conf');
+var config = JSON.parse(mod_fs.readFileSync(confFile, 'utf-8'));
+
+mod_assert.object(config, 'config');
+mod_assert.object(config.zookeeper, 'config.zookeeper');
+mod_assert.number(config.holdTime, 'config.holdTime');
+mod_assert.optionalArrayOfString(config.paths, 'config.paths');
+mod_assert.optionalArrayOfString(config.domains, 'config.domains');
+
+if (config.paths === undefined)
+	config.paths = [];
+if (config.domains) {
+	config.domains.forEach(function (domain) {
+		var parts = domain.split('.').map(function (label) {
+			return (label.toLowerCase());
+		});
+		parts.push('');
+		parts.reverse();
+		config.paths.push(parts.join('/'));
+	});
+}
+
+var log = mod_bunyan.createLogger({
+	name: 'waferlock',
+	level: process.env.LOG_LEVEL || 'debug'
+});
+
+function AppFSM() {
+	this.af_err = null;
+	this.af_denials = {};
+	this.af_log = log;
+	mod_fsm.FSM.call(this, 'init');
+}
+mod_util.inherits(AppFSM, mod_fsm.FSM);
+
+AppFSM.prototype.state_init = function (S) {
+	var self = this;
+	Ipf.flushAll(S.callback(function (err) {
+		if (err && err.name === 'IpfDisabledError') {
+			S.gotoState('enableIpf');
+			return;
+		}
+		if (err) {
+			self.af_err = new VError(
+			    { cause: err, name: 'IpfFlushError' },
+			    'failed to flush ipf rules');
+			S.gotoState('fatal');
+			return;
+		}
+		S.gotoState('setupPool');
+	}));
+};
+
+AppFSM.prototype.state_enableIpf = function (S) {
+	var self = this;
+	Ipf.enable(S.callback(function (err) {
+		if (err) {
+			self.af_err = err;
+			S.gotoState('fatal');
+			return;
+		}
+		S.gotoState('setupPool');
+	}));
+};
+
+AppFSM.prototype.state_setupPool = function (S) {
+	var self = this;
+	this.af_pool = new IpfPool({
+		log: log,
+		name: '100',
+		holdTime: config.holdTime
+	});
+	this.af_pool.init(S.callback(function (err) {
+		if (err) {
+			self.af_err = err;
+			S.gotoState('fatal');
+			return;
+		}
+		S.gotoState('setupCache');
+	}));
+};
+
+AppFSM.prototype.state_setupCache = function (S) {
+	this.af_cache = new ZKCache({
+		log: log,
+		pool: this.af_pool,
+		zkConfig: config.zookeeper,
+		roots: config.paths
+	});
+	S.gotoState('waitInitialData');
+};
+
+AppFSM.prototype.state_waitInitialData = function (S) {
+	var self = this;
+	this.af_log.info('waiting for initial data set sync');
+
+	var lastNodes = Object.keys(self.af_cache.ca_nodes).length;
+	var roots = config.paths.length;
+	S.interval(2000, function () {
+		var nodes = Object.keys(self.af_cache.ca_nodes).length;
+		if (nodes === lastNodes && nodes > roots) {
+			/* Wait an extra sec just in case */
+			S.timeout(1000, function () {
+				S.gotoState('loadRules');
+			});
+		}
+		lastNodes = nodes;
+	});
+};
+
+AppFSM.prototype.state_loadRules = function (S) {
+	var self = this;
+	Ipf.loadRulesFile(ipfConfigFile, S.callback(function (err) {
+		if (err) {
+			self.af_err = err;
+			S.gotoState('fatal');
+			return;
+		}
+		S.gotoState('enforcing');
+	}));
+};
+
+/* eslint-disable */
+/* JSSTYLED */
+var TUPLE_RE = / ([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+),([0-9]+) -> ([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+),([0-9]+) /;
+/* eslint-enable */
+
+AppFSM.prototype.state_enforcing = function (S) {
+	var self = this;
+	this.af_log.info('ipf rules loaded, now enforcing');
+	this.af_mon = new IpMon({
+		log: log
+	});
+	S.on(this.af_mon, 'line', function (line) {
+		var m = TUPLE_RE.exec(line);
+		if (!m) {
+			self.af_log.trace({ ipmonLine: line }, 'unparseable ' +
+			    'ipmon output line');
+			return;
+		}
+		var fromIp = m[1];
+		var fromPort = parseInt(m[2], 10);
+		var toIp = m[3];
+		var toPort = parseInt(m[4], 10);
+		if (typeof (fromPort) !== 'number' || !isFinite(fromPort) ||
+		    typeof (toPort) !== 'number' || !isFinite(toPort)) {
+			return;
+		}
+		var ds = self.af_denials[fromIp];
+		if (ds === undefined) {
+			ds = (self.af_denials[fromIp] = {});
+		}
+		if (ds[toPort] === undefined) {
+			self.af_log.debug({ fromIp: fromIp, fromPort: fromPort,
+			    toIp: toIp, toPort: toPort },
+			    'denied access from %s to port %d',
+			    fromIp, toPort);
+			ds[toPort] = 0;
+		}
+		ds[toPort]++;
+	});
+};
+
+AppFSM.prototype.state_fatal = function (S) {
+	S.validTransitions([]);
+	log.error(this.af_err, 'fatal error');
+	throw (this.af_err);
+};
+
+var app = new AppFSM();
+
+function disableIpfAndExit() {
+	if (app.af_mon && app.af_mon.isInState('running'))
+		app.af_mon.stop();
+	Ipf.disable(function () {
+		process.exit(0);
+	});
+}
+process.on('SIGINT', disableIpfAndExit);
+process.on('SIGTERM', disableIpfAndExit);
diff --git a/smf/manifests/waferlock.xml.in b/smf/manifests/waferlock.xml.in
new file mode 100644
index 0000000..70211bb
--- /dev/null
+++ b/smf/manifests/waferlock.xml.in
@@ -0,0 +1,41 @@
+<?xml version="1.0"?>
+<!DOCTYPE service_bundle SYSTEM "/usr/share/lib/xml/dtd/service_bundle.dtd.1">
+<!--
+    This Source Code Form is subject to the terms of the Mozilla Public
+    License, v. 2.0. If a copy of the MPL was not distributed with this
+    file, You can obtain one at http://mozilla.org/MPL/2.0/.
+-->
+
+<!--
+    Copyright (c) 2018, Joyent, Inc.
+-->
+
+<!--
+  This is a sample SMF manifest. If you want to actually use it, you'll
+  need to update this block comment and replace @@PREFIX@@ in the *generated*
+  file with the path to whereever this package gets installed.
+ -->
+
+<service_bundle type="manifest" name="smartdc-waferlock">
+<service name="smartdc/application/waferlock" type="service" version="1">
+
+<dependency name="network" grouping="require_all" restart_on="error" type="service">
+	<service_fmri value="svc:/network/physical" />
+</dependency>
+<dependency name="filesystem" grouping="require_all" restart_on="error" type="service">
+	<service_fmri value="svc:/system/filesystem/local" />
+</dependency>
+
+<exec_method type="method" name="start" exec="@@NODE@@ --abort-on-uncaught-exception @@PREFIX@@/server.js &amp;" timeout_seconds="30" />
+<exec_method type="method" name="stop" exec=":kill" timeout_seconds="30" />
+
+<instance name="default" enabled="true" />
+
+<stability value='Unstable' />
+
+<template>
+	<common_name><loctext xml:lang="C">Waferlock firewall manager</loctext></common_name>
+</template>
+
+</service>
+</service_bundle>
diff --git a/tools/bashstyle b/tools/bashstyle
new file mode 100755
index 0000000..3ea6622
--- /dev/null
+++ b/tools/bashstyle
@@ -0,0 +1,175 @@
+#!/usr/bin/env node
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2014, Joyent, Inc.
+ */
+
+/*
+ * bashstyle: check bash scripts for adherence to style guidelines, including:
+ *
+ *    o no lines longer than 80 characters
+ *    o file does not end with a blank line
+ *    o Do not use 'local' and var initialization *using a subshell* in the
+ *      same statement. See
+ *      <http://www.tldp.org/LDP/abs/html/localvar.html#EXITVALANOMALY01>
+ *      for why not. Arguably this belongs in a separate 'bashlint'.
+ *
+ * Future enhancements could include:
+ *    o indents consistent with respect to tabs, spaces
+ *    o indents consistently sized (all are some multiple of the smallest
+ *      indent, which must be a tab or 4 or 8 spaces)
+ */
+
+var VERSION = '2.0.0';
+
+var mod_assert = require('assert');
+var mod_fs = require('fs');
+
+var nerrors = 0;
+
+main();
+process.exit(0);
+
+function main()
+{
+	var files = process.argv.slice(2);
+
+	if (files.length === 0) {
+		console.error('usage: %s file1 [...]',
+		    process.argv.slice(0, 2).join(' '));
+		process.exit(2);
+	}
+
+	files.forEach(checkFile);
+
+	if (nerrors != 0)
+		process.exit(1);
+}
+
+function checkFile(filename)
+{
+	var text = mod_fs.readFileSync(filename, 'utf-8');
+	var lines = text.split('\n');
+	var i;
+	var styled = false;
+	var styleStart;
+
+	mod_assert.ok(lines.length > 0);
+
+	/*
+	 * Expand tabs in each line and check for long lines.
+	 */
+	for (i = 1; i <= lines.length; i++) {
+		var line = expandTabs(lines[i - 1]);
+
+		if (i > 1 && lines[i-2].match(/# BASHSTYLED/)) {
+			continue;
+		}
+
+		if (line.match(/# BEGIN BASHSTYLED/)) {
+			styleStart = i;
+			styled = true;
+		}
+
+		if (line.match(/# END BASHSTYLED/)) {
+			if (styled != true) {
+				nerrors++;
+				console.log('%s: %d: END BASHSTYLED ' +
+				    'w/o corresponding BEGIN', filename, i);
+			}
+			styled = false;
+		}
+
+		/*JSSTYLED*/
+		if (!styled && line.match(/^\s*local\s+(\w+)\s*=.*\$\(/)) {
+			nerrors++;
+			/*JSSTYLED*/
+			var m = line.match(/^\s*local\s+(\w+)\s*=/);
+			console.log('%s: %d: declaring and setting a "local" ' +
+				'var in the same statement ' +
+				'ignores a subshell return code ' +
+				'<http://www.tldp.org/LDP/abs/html/' +
+				'localvar.html#EXITVALANOMALY01>: ' +
+				'local %s=...',
+				filename, i, m[1]);
+		}
+
+		// Regexplanation: non-[, [, space (contents) space, ], non-]
+		// groups before and after brackets to ease search/replace.
+		if (!styled && line.match(/(^|[^\[])\[(\s.+\s)\]([^\]])/)) {
+			nerrors++;
+			console.log('%s: %d: prefer [[ to [ for tests.',
+			    filename, i);
+		}
+
+		if (!styled && line.length > 80) {
+			nerrors++;
+			console.log('%s: %d: line exceeds 80 columns',
+			    filename, i);
+		}
+
+		if (!styled && line.match(/\s+$/)) {
+			nerrors++;
+			console.log('%s: %d: line ends in whitespace',
+			    filename, i);
+		}
+	}
+
+	if (styled) {
+		nerrors++;
+		console.log('%s: %d: BEGIN BASHSTYLED that does not END',
+		            filename, styleStart);
+	}
+
+
+	/*
+	 * No sane editor lets you save a file without a newline at the
+	 * very end.
+	 */
+	if (lines[lines.length - 1].length !== 0) {
+		nerrors++;
+		console.log('%s: %d: file does not end with newline',
+			filename, lines.length);
+	}
+
+	/*
+	 * Since the file will always end with a newline, the last entry of
+	 * "lines" will actually be blank.
+	 */
+	if (lines.length > 1 && lines[lines.length - 2].length === 0) {
+		nerrors++;
+		console.log('%s: %d: file ends with a blank line',
+		    filename, lines.length - 1);
+	}
+}
+
+function expandTabs(text)
+{
+	var out = '';
+	var col = 0;
+	var j, k;
+
+	for (j = 0; j < text.length; j++) {
+		if (text[j] != '\t') {
+			out += text[j];
+			col++;
+			continue;
+		}
+
+		k = 8 - (col % 8);
+		col += k;
+
+		do {
+			out += ' ';
+		} while (--k > 0);
+
+		col += k;
+	}
+
+	return (out);
+}
diff --git a/tools/jsstyle.conf b/tools/jsstyle.conf
new file mode 100644
index 0000000..2d13d5d
--- /dev/null
+++ b/tools/jsstyle.conf
@@ -0,0 +1,14 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+unparenthesized-return=1
+indent=tab
+line-length=80
+literal-string-quote=single
diff --git a/tools/mk/Makefile.defs b/tools/mk/Makefile.defs
new file mode 100644
index 0000000..73dd612
--- /dev/null
+++ b/tools/mk/Makefile.defs
@@ -0,0 +1,105 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2018, Joyent, Inc.
+#
+
+#
+# Makefile.defs: common defines.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This makefile defines some useful defines. Include it at the top of
+# your Makefile.
+#
+# Definitions in this Makefile:
+#
+#	TOP 		The absolute path to the project directory. The top dir.
+#	BRANCH 		The current git branch.
+#	TIMESTAMP	The timestamp for the build. This can be set via
+#			the TIMESTAMP envvar (used by MG-based builds).
+#	STAMP		A build stamp to use in built package names.
+#
+#	MAKE_STAMPS_DIR	The directory in which make stamp files are to be
+#			created.  See comments below on expensive targets.
+#
+#	CACHE_DIR	A directory tree in which temporary files may be
+#			collected by download, tarball extraction, etc.  This
+#			directory is completely removed by "make distclean".
+#			Files in this directory are not intended to be shipped.
+#
+
+TOP := $(shell pwd)
+
+#
+# Mountain Gorilla-spec'd versioning.
+# See "Package Versioning" in MG's README.md:
+# <https://mo.joyent.com/mountain-gorilla/blob/master/README.md#L139-200>
+#
+# Need GNU awk for multi-char arg to "-F".
+_AWK := $(shell (which gawk >/dev/null && echo gawk) \
+	|| (which nawk >/dev/null && echo nawk) \
+	|| echo awk)
+BRANCH := $(shell git symbolic-ref HEAD | $(_AWK) -F/ '{print $$3}')
+ifeq ($(TIMESTAMP),)
+	TIMESTAMP := $(shell date -u "+%Y%m%dT%H%M%SZ")
+endif
+_GITDESCRIBE := g$(shell git describe --all --long --dirty | $(_AWK) -F'-g' '{print $$NF}')
+STAMP := $(BRANCH)-$(TIMESTAMP)-$(_GITDESCRIBE)
+
+# node-gyp will print build info useful for debugging with V=1
+export V=1
+
+CACHE_DIR ?=		cache
+DISTCLEAN_FILES +=	$(CACHE_DIR)
+
+#
+# EXPENSIVE TARGETS AND MAKE STAMP FILES
+#
+# Targets which are expensive to run and lack a single file that marks
+# completion are difficult to track with make; e.g., "npm install".  One
+# solution to this problem is to create "stamp" files with symbolic names which
+# are created as the final step in a complex make rule in order to mark
+# completion.
+#
+# In order to make these more uniform, and easier to target with "make clean",
+# we will attempt to store them under a single directory.  Note that these
+# files are never targets for shipping in build artefacts.
+#
+# Stamp-backed targets come in several parts.  First, a macro should be defined
+# which names a file in the MAKE_STAMPS_DIR directory.  Then, a target which
+# creates this stamp file must be provided.  The recipe for this target should
+# use MAKE_STAMP_REMOVE and MAKE_STAMP_CREATE to perform the appropriate stamp
+# management.
+#
+# For example:
+#
+# --- Makefile.*.defs:
+#
+#	$(STAMP_EXPENSIVE_RESULT) := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# --- Makefile.*.targ:
+#
+#	$(STAMP_EXPENSIVE_RESULT): input/file another/input/file
+#		$(MAKE_STAMP_REMOVE)
+#		rm -rf output_tree/  # <--- ensure a clean slate
+#		expensive_program -o output_tree/ $^
+#		$(MAKE_STAMP_CREATE)
+#
+# NOTE: Every stamp file is exposed as an implicit "stamp-$STAMP_NAME" target.
+# The example above could be built manually by invoking:
+#
+#	make stamp-expensive-result
+#
+MAKE_STAMPS_DIR ?=	make_stamps
+CLEAN_FILES +=		$(MAKE_STAMPS_DIR)
+
+MAKE_STAMP_REMOVE =	mkdir -p $(@D); rm -f $(@)
+MAKE_STAMP_CREATE =	mkdir -p $(@D); touch $(@)
diff --git a/tools/mk/Makefile.deps b/tools/mk/Makefile.deps
new file mode 100644
index 0000000..91f8346
--- /dev/null
+++ b/tools/mk/Makefile.deps
@@ -0,0 +1,87 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.deps: Makefile for including common tools as dependencies
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This file is separate from Makefile.targ so that teams can choose
+# independently whether to use the common targets in Makefile.targ and the
+# common tools here.
+#
+
+#
+# javascriptlint
+#
+JSL_EXEC	?= deps/javascriptlint/build/install/jsl
+JSL		?= $(JSL_EXEC)
+
+$(JSL_EXEC): | deps/javascriptlint/.git
+	cd deps/javascriptlint && make install
+
+distclean::
+	if [[ -f deps/javascriptlint/Makefile ]]; then \
+		cd deps/javascriptlint && make clean; \
+	fi
+
+#
+# jsstyle
+#
+JSSTYLE_EXEC	?= deps/jsstyle/jsstyle
+JSSTYLE		?= $(JSSTYLE_EXEC)
+
+$(JSSTYLE_EXEC): | deps/jsstyle/.git
+
+#
+# eslint
+#
+ESLINT_EXEC	?= node_modules/.bin/eslint
+ifdef NODE
+    ESLINT	:= $(NODE) $(ESLINT_EXEC)
+else
+    ESLINT	?= $(ESLINT_EXEC)
+endif
+
+# Install eslint.
+#
+# The install of specific modules is to allow running "make check"
+# without having to do a complete install of all npm dependencies.
+#
+# NPM_EXEC will be defined if either of "Makefile.{node,node_prebuilt}.defs"
+# is included.
+ifdef NPM
+$(ESLINT_EXEC): package.json | $(NPM_EXEC)
+	ESLINT_VER=$$($(NODE) -e 'console.log(require("./package.json").devDependencies["eslint"] || "")') && \
+	    ESLINT_JOY_VER=$$($(NODE) -e 'console.log(require("./package.json").devDependencies["eslint-plugin-joyent"] || "")') && \
+	    [[ -n $$ESLINT_VER && -n $$ESLINT_JOY_VER ]] && \
+	    $(NPM) install --no-save eslint@$$ESLINT_VER eslint-plugin-joyent@$$ESLINT_JOY_VER && \
+	    touch $(ESLINT_EXEC)
+else
+$(ESLINT_EXEC): package.json
+	ESLINT_VER=$$(node -e 'console.log(require("./package.json").devDependencies["eslint"] || "")') && \
+	    ESLINT_JOY_VER=$$(node -e 'console.log(require("./package.json").devDependencies["eslint-plugin-joyent"] || "")') && \
+	    [[ -n $$ESLINT_VER && -n $$ESLINT_JOY_VER ]] && \
+	    npm install --no-save eslint@$$ESLINT_VER eslint-plugin-joyent@$$ESLINT_JOY_VER && \
+	    touch $(ESLINT_EXEC)
+endif
+
+#
+# restdown
+#
+RESTDOWN_EXEC	?= deps/restdown/bin/restdown
+RESTDOWN	?= python $(RESTDOWN_EXEC)
+$(RESTDOWN_EXEC): | deps/restdown/.git
+
+EXTRA_DOC_DEPS	?=
diff --git a/tools/mk/Makefile.manpages.defs b/tools/mk/Makefile.manpages.defs
new file mode 100644
index 0000000..6da7876
--- /dev/null
+++ b/tools/mk/Makefile.manpages.defs
@@ -0,0 +1,128 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2016, Joyent, Inc.
+#
+
+#
+# Makefile.manpages.defs: targets for building manual pages.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile is used along with Makefile.manpages.targ to build section
+# manpages for the current repository from Markdown sources using the md2man
+# tool.  You can build several different sections of manpages with this
+# Makefile, but you'll need to include the Makefile once for each section with a
+# different value of MAN_SECTION.  Required input variables include:
+#
+#     MAN_SECTION	defines which section's manpages will be built
+#     			(e.g., "1")
+#
+#     MAN_INROOT	defines the root of a directory tree containing man
+#     			pages source files in Markdown format.  The directory
+#     			tree should be organized as:
+#
+#     			    $(MAN_INROOT)/man$(MAN_SECTION)/*.md
+#
+#     MAN_OUTROOT	defines the root of a directory tree that will contain
+#     			the generated man pages.  The directory tree will be
+#     			organized as:
+#
+#     			    $(MAN_OUTROOT)/man$(MAN_SECTION)/*.$(MAN_SECTION)
+#
+#			This should mirror the typical man page directory
+#			structure, and should probably be alongside a
+#			corresponding "bin" directory to leverage the way
+#			man(1)'s looks up man pages for binaries.
+#
+# A common configuration would be to set MAN_INROOT = "docs/man" and
+# MAN_OUTROOT = "man".  In that case, you might have source files:
+#
+#     ./bin/mytool
+#     ./bin/my-other-tool
+#     ./docs/man/man1/mytool.md
+#     ./docs/man/man1/my-other-tool.md
+#
+# and that will generate files:
+#
+#     ./man/man1/mytool.1
+#     ./man/man1/my-other-tool.1
+#
+# Optional input variables include:
+#
+#     MD2MAN		tool to generate man pages from Markdown sources
+#     			The recommended tool is md2man-roff, available at
+#     			https://github.com/sunaku/md2man.
+#
+#     MKDIRP		should generally be "mkdir -p"
+#
+# This Makefile produces Make variables:
+#
+#     MAN_$(MAN_SECTION)_OUTPUTS	generated manual pages.  You can depend
+#     					on these in order to build them in
+#     					whatever top-level targets you want.
+#
+#     MAN_OUTPUTS			will be extended to include
+#     					MAN_$(MAN_SECTION)_OUTPUTS.
+#
+# There are two basic ways this tends to be used:
+#
+#     (1) Building manpages is part of the normal build.  Have the default
+#         target (usually "all") depends on either "manpages" or the built man
+#         pages directly (via MAN_OUTPAGES).  In this case, only the man pages
+#         _sources_ would be checked into source control.
+#
+#     (2) Building manpages is an ad-hoc operation outside the normal build
+#         process.  Developers that change the man page sources are expected to
+#         build the man pages and commit the generated pages into source
+#         control.
+#
+# Option (1) is preferred, since option (2) violates the basic tenets of
+# software engineering that processes should generally be automated and that
+# generated files should not be checked into source control.  The problem is
+# that in practice, the tools that we use to generate man pages are not widely
+# installed on most users' systems, even developers' systems, so it's less than
+# ideal to require them for the main build.  This is especially true for many of
+# our Node modules, where there's traditionally no difference between the
+# published npm package and the repository source itself.  As a result, we use
+# option (2) in most places.  However, this Makefile supports both modes.
+#
+
+MAN_SECTION			?= $(error MAN_SECTION is not defined)
+MAN_INROOT			?= $(error MAN_INROOT is not defined)
+MAN_OUTROOT			?= $(error MAN_OUTROOT is not defined)
+MD2MAN				?= md2man-roff
+MKDIRP				?= mkdir -p
+
+#
+# Define some convenience variables for referring to the input and output
+# directories for this section's man pages.  These variables must have
+# MAN_SECTION in the name, and must use eager binding (":="), since MAN_SECTION
+# may change after this file is included.
+#
+MAN_INDIR_$(MAN_SECTION)	:= $(MAN_INROOT)/man$(MAN_SECTION)
+MAN_OUTDIR_$(MAN_SECTION)	:= $(MAN_OUTROOT)/man$(MAN_SECTION)
+
+#
+# Define the lists of input and output files for this section's man pages.  The
+# list of inputs is just the list of Markdown files in the input directory.  We
+# construct the list of outputs by taking that same list and replacing the
+# section-specific input directory with the section-specific output directory
+# and changing the file extension.
+#
+MAN_$(MAN_SECTION)_INPUTS	:= $(wildcard $(MAN_INDIR_$(MAN_SECTION))/*.md)
+MAN_$(MAN_SECTION)_OUTPUTS_TMP  := \
+    $(MAN_$(MAN_SECTION)_INPUTS:$(MAN_INDIR_$(MAN_SECTION))/%=$(MAN_OUTDIR_$(MAN_SECTION))/%)
+MAN_$(MAN_SECTION)_OUTPUTS	:= \
+    $(MAN_$(MAN_SECTION)_OUTPUTS_TMP:%.md=%.$(MAN_SECTION))
+
+MAN_OUTPUTS			:= $(MAN_OUTPUTS) $(MAN_$(MAN_SECTION)_OUTPUTS)
diff --git a/tools/mk/Makefile.manpages.targ b/tools/mk/Makefile.manpages.targ
new file mode 100644
index 0000000..11f242b
--- /dev/null
+++ b/tools/mk/Makefile.manpages.targ
@@ -0,0 +1,28 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2016, Joyent, Inc.
+#
+
+#
+# Makefile.manpages.targ: targets for building manual pages.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# See Makefile.manpages.defs.
+#
+
+$(MAN_$(MAN_SECTION)_OUTPUTS): $(MAN_OUTDIR_$(MAN_SECTION))/%.$(MAN_SECTION): $(MAN_INDIR_$(MAN_SECTION))/%.md | $(MAN_OUTDIR_$(MAN_SECTION))
+	$(MD2MAN) $^ > $@
+
+$(MAN_OUTDIR_$(MAN_SECTION)):
+	$(MKDIRP) $@
diff --git a/tools/mk/Makefile.node.defs b/tools/mk/Makefile.node.defs
new file mode 100644
index 0000000..487824d
--- /dev/null
+++ b/tools/mk/Makefile.node.defs
@@ -0,0 +1,110 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.node.defs: Makefile for building and bundling your own Node.js.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile facilitates building and bundling your own copy of Node.js in
+# your repo.  All it does is define variables for node, node-waf, and npm for
+# you to use elsewhere in your Makefile and rules to build these tools when
+# needed.
+#
+# To use this facility, include "Makefile.node.defs", use the variables as
+# described below to define targets, and then include "Makefile.node.targ".
+#
+# There are two use cases addressed here:
+#
+# (1) Invoking node, node-waf, or npm as part of the build process, as in "npm
+#     install" and "node-waf configure build".  To facilitate this, this
+#     Makefile defines Make variables NODE, NODE_WAF, and NPM that you can use
+#     to invoke these commands during the build process.  You MUST NOT assume
+#     that these variables just evaluate to the filenames themselves, as they
+#     may have environment variable definitions and other things that prevent
+#     you from using them directly as a filename.  If you want that, see (2).
+#
+#     Wherever you use one of these variables, you MUST include a dependency on
+#     the corresponding *_EXEC variable as well, like so:
+#
+#	node_modules/restify: deps/restify $(NPM_EXEC)
+#		$(NPM) install deps/restify
+#
+#     or better, use an order-only dependency to avoid spurious rebuilds:
+#
+#	node_modules/restify: deps/restify | $(NPM_EXEC)
+#		$(NPM) install deps/restify
+#
+#     Otherwise, the underlying file will not get built.  We don't
+#     automatically build them as part of "all" because that approach is
+#     brittle.
+#
+# (2) Specifying paths for invoking node, node-waf, or npm at RUNTIME, as in
+#     specifying the path to node used for the start method of your service's
+#     SMF manifest.  For this, this Makefile defines variables NODE_EXEC,
+#     NODE_WAF_EXEC, and NPM_EXEC, which represent the relative paths of these
+#     files from the root of the workspace.  You MUST NOT use these variables
+#     to invoke these commands during the build process.  See (1) instead.
+#
+#     However, in order to work at runtime, you must build the tool as well.
+#     That is, if you use NODE_EXEC to specify the path to node, you must
+#     depend on NODE_EXEC somewhere. This usually happens anyway because you
+#     usually need them during the build process too, but if you don't then
+#     you need to explicitly add NODE_EXEC (or whichever) to your "all"
+#     target.
+#
+# When including this Makefile, you MAY also specify:
+#
+#	BUILD			top-level directory for built binaries
+#				(default: "build")
+#
+#	NODE_INSTALL		where node should install its built items
+#				(default: "$BUILD/node")
+#
+#	NODE_CONFIG_FLAGS	extra flags to pass to Node's "configure"
+#				(default: "--with-dtrace" on SmartOS; empty
+#				otherwise.)
+#
+
+TOP ?= $(error You must include Makefile.defs before this makefile)
+
+BUILD		?= build
+NODE_INSTALL 	?= $(BUILD)/node
+DISTCLEAN_FILES	+= $(NODE_INSTALL)
+
+NODE_CONFIG_FLAGS += --prefix=$(TOP)/$(NODE_INSTALL)
+
+ifeq ($(shell uname -s),SunOS)
+	NODE_CONFIG_FLAGS += 	--with-dtrace \
+				--openssl-libpath=/opt/local/lib \
+				--openssl-includes=/opt/local/include
+endif
+
+NODE_EXEC	= $(NODE_INSTALL)/bin/node
+NODE_WAF_EXEC	= $(NODE_INSTALL)/bin/node-waf
+NPM_EXEC	= $(NODE_INSTALL)/bin/npm
+
+#
+# These paths should be used during the build process to invoke Node and
+# Node-related build tools like NPM.  All paths are fully qualified so that
+# they work regardless of the current working directory at the point of
+# invocation.
+#
+# Note that where PATH is overridden, the value chosen must cause execution of
+# "node" to find the same binary to which the NODE macro refers.
+#
+NODE		:= $(TOP)/$(NODE_EXEC)
+NODE_WAF	:= $(TOP)/$(NODE_WAF_EXEC)
+NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) $(NODE) $(TOP)/$(NPM_EXEC)
diff --git a/tools/mk/Makefile.node.targ b/tools/mk/Makefile.node.targ
new file mode 100644
index 0000000..bf53f78
--- /dev/null
+++ b/tools/mk/Makefile.node.targ
@@ -0,0 +1,42 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.node.targ: See Makefile.node.defs.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+ifneq ($(shell uname -s),SunOS)
+NODE_PREBUILT_VERSION ?= $(error You must define NODE_PREBUILT_VERSION to use Makefile.node.targ on non-SunOS)
+endif
+
+ifeq ($(shell uname -s),SunOS)
+$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC): | deps/node/.git
+	(cd deps/node; ./configure $(NODE_CONFIG_FLAGS) && $(MAKE) && $(MAKE) install)
+else
+$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC):
+	(mkdir -p $(BUILD) \
+		&& cd $(BUILD) \
+		&& [[ -d src-node ]] && (cd src-node && git checkout master && git pull) || git clone https://github.com/joyent/node.git src-node \
+		&& cd src-node \
+		&& git checkout $(NODE_PREBUILT_VERSION) \
+		&& ./configure $(NODE_CONFIG_FLAGS) \
+		&& $(MAKE) && $(MAKE) install)
+endif
+
+DISTCLEAN_FILES += $(NODE_INSTALL) $(BUILD)/src-node
+
+distclean::
+	-([[ ! -d deps/node ]] || (cd deps/node && $(MAKE) distclean))
diff --git a/tools/mk/Makefile.node_modules.defs b/tools/mk/Makefile.node_modules.defs
new file mode 100644
index 0000000..ec8cc8e
--- /dev/null
+++ b/tools/mk/Makefile.node_modules.defs
@@ -0,0 +1,68 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.node_modules.defs: Makefile for using NPM modules.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile provides a target for building NPM modules from the dependency
+# information in the "package.json" file.  The "npm install" operation is
+# expensive and produces a complex (multi-file) result which is difficult for
+# make to use in dependency analysis.  As such, we use a "stamp" file to track
+# successful completion of module installation.
+#
+# This variable allows the consumer to influence the environment used to run
+# NPM commands.
+#
+#	NPM_ENV			This string should be set to a list of
+#				environment variables in the syntax used
+#				by bash; e.g.,
+#
+#					NPM_ENV =	TESTING=yes V=1
+#
+# Consumers should, for targets which depend on the installation of NPM
+# modules, depend on the stamp file using the $(STAMP_NODE_MODULES) variable,
+# e.g.:
+#
+#	.PHONY: all
+#	all: $(STAMP_NODE_MODULES)
+#
+# A phony target, "make stamp-node-modules", is also provided to allow the
+# engineer to manually perform NPM module installation without invoking other
+# targets.  Note that this target should _not_ be used as a dependency for
+# other targets in consuming Makefiles; using phony targets to represent
+# intermediate build stages can inhibit the ability of make to determine
+# when no additional actions are required.
+#
+
+TOP ?= $(error You must include Makefile.defs before this makefile)
+NPM ?= $(error You must include either Makefile.node.defs or \
+    Makefile.node_prebuilt.defs before this makefile)
+
+BUILD ?=		build
+
+#
+# Invoking "npm install" at the top-level will create a "node_modules"
+# directory into which NPM modules will be installed.
+#
+CLEAN_FILES +=		node_modules
+
+#
+# To avoid repeatedly reinstalling from NPM, we create a "stamp" file to track
+# successful runs of "npm install".  Note that MAKE_STAMPS_DIR is included
+# in CLEAN_FILES already.
+#
+STAMP_NODE_MODULES ?=	$(MAKE_STAMPS_DIR)/node-modules
diff --git a/tools/mk/Makefile.node_modules.targ b/tools/mk/Makefile.node_modules.targ
new file mode 100644
index 0000000..0156bce
--- /dev/null
+++ b/tools/mk/Makefile.node_modules.targ
@@ -0,0 +1,31 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.node_modules.targ: See comments in Makefile.node_modules.defs.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+STAMP_NODE_MODULES ?= $(error You must include Makefile.node_modules.defs \
+    before this file)
+
+#
+# If the "package.json" file changes, we need to rebuild the contents of
+# the "node_modules" directory.
+#
+$(STAMP_NODE_MODULES): package.json | $(NPM_EXEC)
+	$(MAKE_STAMP_REMOVE)
+	rm -rf node_modules
+	$(NPM_ENV) $(NPM) install
+	$(MAKE_STAMP_CREATE)
diff --git a/tools/mk/Makefile.node_prebuilt.defs b/tools/mk/Makefile.node_prebuilt.defs
new file mode 100644
index 0000000..2129742
--- /dev/null
+++ b/tools/mk/Makefile.node_prebuilt.defs
@@ -0,0 +1,159 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.node_prebuilt.defs: Makefile for including a prebuilt Node.js build.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+
+#
+# This Makefile facilitates downloading and bundling a prebuilt node.js
+# build (using the 'sdcnode' distro builds). This is an alternative to
+# the "Makefile.node.*" makefiles for *building* a node from source.
+#
+# Usage:
+#
+# - Define `NODE_PREBUILT_VERSION` in your Makefile to choose a node version.
+#   E.g.: `NODE_PREBUILT_VERSION=v0.6.19`. See other optional variables
+#   below.
+# - `include tools/mk/Makefile.node_prebuilt.defs` after this in your Makefile.
+# - `include tools/mk/Makefile.node_prebuilt.targ` near the end of your
+#   Makefile.
+# - Have at least one of your Makefile targets depend on either `$(NODE_EXEC)`
+#   or `$(NPM_EXEC)`. E.g.:
+#
+#		node_modules/restify: deps/restify $(NPM_EXEC)
+#			$(NPM) install deps/restify
+#
+#   or better, use an order-only dependency to avoid spurious rebuilds:
+#
+#		node_modules/restify: deps/restify | $(NPM_EXEC)
+#			$(NPM) install deps/restify
+#
+# - Use `$(NPM)` or `$(NODE)` to use your node build.
+# - Include the "$(NODE_INSTALL)" tree in your release package.
+#
+#
+# When including this Makefile, you MUST also specify:
+#
+#	NODE_PREBUILT_VERSION 	The node version in the prebuilt 'sdcnode'
+#				package to use. Typically this is one of the
+#				node version tags, e.g. "v0.6.18" but it
+#				can be any commitish.
+#
+# When including this Makefile, you MAY also specify:
+#
+#	NODE_PREBUILT_DIR 	The dir in which to find sdcnode builds. This
+#				can either be a *local directory* or *a
+#				URL* dir (with trailing '/') which serves
+#				Apache/Nginx dir listing HTML.
+#				(default: sdcnode master build dir on stuff)
+#
+#	NODE_PREBUILT_TAG	The 'sdcnode' project supports special
+#				configuration builds of node, e.g. say a
+#				build configured `--without-ssl`. These
+#				special configurations are given a tag, e.g.
+#				'gz', that is used in the filename. Optionally
+#				specify a tag name here.
+#				(default: empty)
+#
+#	NODE_PREBUILT_BRANCH	Specify a particular branch of 'sdcnode' builds
+#				from which to pull. Generally one should stick
+#				with the default.
+#				(default: master)
+#
+#	NODE_PREBUILT_IMAGE		If you have a zone image that differs from that
+#				for an sdcnode build that you want to use (potential compat
+#				issues be damned), then set this to the UUID of the sdcnode
+#				build you want. See here for available build image uuids:
+#				<https://download.joyent.com/pub/build/sdcnode/master-latest/sdcnode/>
+#
+#	BUILD			top-level directory for built binaries
+#				(default: "build")
+#
+#	NODE_INSTALL		where node should install its built items
+#				(default: "$BUILD/node")
+#
+#
+# Dev Notes:
+#
+# This works by getting "NODE_PREBUILT_NAME" from the provided "NODE_PREBUILT_*"
+# vars and the image version (via 'mdata-get sdc:image_uuid'). The image uuid is
+# included to ensure an exact match with the build machine. This name (e.g.
+# "v0.6.18-zone-$uuid") is used to find a matching "sdcnode-$name-*.tgz" build
+# in "NODE_PREBUILT_DIR" (either a local directory or a URL). That tarball is
+# downloaded and extracted into "NODE_INSTALL".
+#
+# The "*_EXEC" vars are set to named symlinks, e.g.
+# "build/prebuilt-node-v0.6.18-$uuid", so that a change of selected node
+# build (say the developer changes NODE_PREBUILT_VERSION) will recreate the
+# node install.
+#
+# See <https://mo.joyent.com/docs/sdcnode/master/> for details on 'sdcnode-*'
+# package naming.
+#
+
+TOP ?= $(error You must include Makefile.defs before this makefile)
+NODE_PREBUILT_VERSION ?= $(error NODE_PREBUILT_VERSION is not set.)
+
+
+BUILD		?= build
+NODE_INSTALL	?= $(BUILD)/node
+DISTCLEAN_FILES	+= $(NODE_INSTALL) \
+	$(BUILD)/prebuilt-node-* $(BUILD)/prebuilt-npm-*
+
+NODE_PREBUILT_BRANCH ?= master
+NODE_PREBUILT_IMAGE ?= $(shell pfexec mdata-get sdc:image_uuid)
+ifeq ($(NODE_PREBUILT_TAG),)
+	NODE_PREBUILT_NAME := $(NODE_PREBUILT_VERSION)-$(NODE_PREBUILT_IMAGE)
+else
+	NODE_PREBUILT_NAME := $(NODE_PREBUILT_VERSION)-$(NODE_PREBUILT_TAG)-$(NODE_PREBUILT_IMAGE)
+endif
+NODE_PREBUILT_PATTERN := sdcnode-$(NODE_PREBUILT_NAME)-$(NODE_PREBUILT_BRANCH)-.*\.tgz
+NODE_PREBUILT_DIR ?= https://download.joyent.com/pub/build/sdcnode/$(NODE_PREBUILT_IMAGE)/$(NODE_PREBUILT_BRANCH)-latest/sdcnode/
+ifeq ($(shell echo $(NODE_PREBUILT_DIR) | cut -c 1-4),http)
+	NODE_PREBUILT_BASE := $(shell curl -ksS --fail --connect-timeout 30 $(NODE_PREBUILT_DIR) | grep 'href=' | cut -d'"' -f2 | grep "^$(NODE_PREBUILT_PATTERN)$$" | sort | tail -1)
+	ifneq ($(NODE_PREBUILT_BASE),)
+		NODE_PREBUILT_TARBALL := $(NODE_PREBUILT_DIR)$(NODE_PREBUILT_BASE)
+	endif
+else
+	NODE_PREBUILT_BASE := $(shell ls -1 $(NODE_PREBUILT_DIR)/ | grep "^$(NODE_PREBUILT_PATTERN)$$" 2>/dev/null | sort | tail -1)
+	ifneq ($(NODE_PREBUILT_BASE),)
+		NODE_PREBUILT_TARBALL := $(NODE_PREBUILT_DIR)/$(NODE_PREBUILT_BASE)
+	endif
+endif
+ifeq ($(NODE_PREBUILT_TARBALL),)
+	NODE_PREBUILT_TARBALL = $(error NODE_PREBUILT_TARBALL is empty: no '$(NODE_PREBUILT_DIR)/$(NODE_PREBUILT_PATTERN)' found)
+endif
+
+
+# Prebuild-specific paths for the "*_EXEC" vars to ensure that
+# a prebuild change (e.g. if master Makefile's NODE_PREBUILT_VERSION
+# choice changes) causes a install of the new node.
+NODE_EXEC	:= $(BUILD)/prebuilt-node-$(NODE_PREBUILT_NAME)
+NODE_WAF_EXEC	:= $(BUILD)/prebuilt-node-waf-$(NODE_PREBUILT_NAME)
+NPM_EXEC	:= $(BUILD)/prebuilt-npm-$(NODE_PREBUILT_NAME)
+
+#
+# These paths should be used during the build process to invoke Node and
+# Node-related build tools like NPM.  All paths are fully qualified so that
+# they work regardless of the current working directory at the point of
+# invocation.
+#
+# Note that where PATH is overridden, the value chosen must cause execution of
+# "node" to find the same binary to which the NODE macro refers.
+#
+NODE		:= $(TOP)/$(NODE_INSTALL)/bin/node
+NODE_WAF	:= $(TOP)/$(NODE_INSTALL)/bin/node-waf
+NPM		:= PATH=$(TOP)/$(NODE_INSTALL)/bin:$(PATH) $(NODE) $(TOP)/$(NODE_INSTALL)/bin/npm
diff --git a/tools/mk/Makefile.node_prebuilt.targ b/tools/mk/Makefile.node_prebuilt.targ
new file mode 100644
index 0000000..6877333
--- /dev/null
+++ b/tools/mk/Makefile.node_prebuilt.targ
@@ -0,0 +1,42 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.node_prebuilt.targ: Makefile for including a prebuilt Node.js
+# build.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+
+
+NODE_PREBUILT_TARBALL ?= $(error NODE_PREBUILT_TARBALL is not set: was Makefile.node_prebuilt.defs included?)
+
+
+# TODO: remove this limitation
+# Limitation: currently presuming that the NODE_INSTALL basename is
+# 'node' and that sdcnode tarballs have a 'node' top-level dir.
+$(NODE_EXEC) $(NPM_EXEC) $(NODE_WAF_EXEC):
+	[[ $(shell basename $(NODE_INSTALL)) == "node" ]] \
+		|| (echo "Limitation: 'basename NODE_INSTALL' is not 'node'" && exit 1)
+	rm -rf $(NODE_INSTALL) \
+		$(BUILD)/prebuilt-node-* $(BUILD)/prebuilt-npm-*
+	mkdir -p $(shell dirname $(NODE_INSTALL))
+	if [[ $(shell echo $(NODE_PREBUILT_TARBALL) | cut -c 1-4) == "http" ]]; then \
+		echo "Downloading '$(NODE_PREBUILT_BASE)'."; \
+		curl -ksS --fail --connect-timeout 30 -o $(shell dirname $(NODE_INSTALL))/$(NODE_PREBUILT_BASE) $(NODE_PREBUILT_TARBALL); \
+		(cd $(shell dirname $(NODE_INSTALL)) && $(TAR) xf $(NODE_PREBUILT_BASE)); \
+	else \
+		(cd $(shell dirname $(NODE_INSTALL)) && $(TAR) xf $(NODE_PREBUILT_TARBALL)); \
+	fi
+	ln -s $(TOP)/$(NODE_INSTALL)/bin/node $(NODE_EXEC)
+	ln -s $(TOP)/$(NODE_INSTALL)/bin/npm $(NPM_EXEC)
diff --git a/tools/mk/Makefile.smf.defs b/tools/mk/Makefile.smf.defs
new file mode 100644
index 0000000..b988bbe
--- /dev/null
+++ b/tools/mk/Makefile.smf.defs
@@ -0,0 +1,40 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.smf.defs: common targets for SMF manifests
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This Makefile uses the following definitions:
+#
+#	SMF_MANIFESTS_IN	Source files for SMF manifests.  The following
+#				substitutions will be made on these files:
+#
+#		@@NODE@@	path to installed node
+#
+# It updates SMF_MANIFESTS with the set of files generated by SMF_MANIFESTS_IN.
+# It also updates the "check" target to check the XML syntax of all manifests,
+# generated or otherwise.
+#
+# To use this file, be sure to also include Makefile.smf.targ after defining
+# targets.
+#
+
+SED 		?= sed
+SMF_DTD		?= tools/service_bundle.dtd.1
+XMLLINT		?= xmllint --noout
+
+SMF_MANIFESTS	+= $(SMF_MANIFESTS_IN:%.in=%)
+CLEAN_FILES	+= $(SMF_MANIFESTS_IN:%.in=%)
diff --git a/tools/mk/Makefile.smf.targ b/tools/mk/Makefile.smf.targ
new file mode 100644
index 0000000..3e403ef
--- /dev/null
+++ b/tools/mk/Makefile.smf.targ
@@ -0,0 +1,32 @@
+# -*- mode: makefile -*-
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2014, Joyent, Inc.
+#
+
+#
+# Makefile.smf.targ: see Makefile.smf.defs.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+.PHONY: check-manifests
+check-manifests: $(SMF_MANIFESTS:%=%.smfchk)
+
+%.smfchk: %
+	$(XMLLINT) --path $(dir $(SMF_DTD)) --dtdvalid $(SMF_DTD) $^
+
+check:: check-manifests
+
+$(SMF_MANIFESTS): %: %.in
+	$(SED) \
+	    -e 's#@@NODE@@#@@PREFIX@@/$(NODE_INSTALL)/bin/node#g' \
+	    -e 's#@@PREFIX@@#$(PREFIX)#g' \
+	    $< > $@
diff --git a/tools/mk/Makefile.targ b/tools/mk/Makefile.targ
new file mode 100644
index 0000000..cc5ae95
--- /dev/null
+++ b/tools/mk/Makefile.targ
@@ -0,0 +1,345 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2017, Joyent, Inc.
+#
+
+#
+# Makefile.targ: common targets.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This Makefile defines several useful targets and rules. You can use it by
+# including it from a Makefile that specifies some of the variables below.
+#
+# Targets defined in this Makefile:
+#
+#	check	Checks JavaScript files for lint and style
+#		Checks bash scripts for syntax
+#		Checks SMF manifests for validity against the SMF DTD
+#
+#	clean	Removes built files
+#
+#	docs	Builds restdown documentation in docs/
+#
+#	prepush	Depends on "check" and "test"
+#
+#	test	Does nothing (you should override this)
+#
+#	xref	Generates cscope (source cross-reference index)
+#
+# For details on what these targets are supposed to do, see the Joyent
+# Engineering Guide.
+#
+# To make use of these targets, you'll need to set some of these variables. Any
+# variables left unset will simply not be used.
+#
+#	BASH_FILES	Bash scripts to check for syntax
+#			(paths relative to top-level Makefile)
+#
+#	CLEAN_FILES	Files to remove as part of the "clean" target.  Note
+#			that files generated by targets in this Makefile are
+#			automatically included in CLEAN_FILES.  These include
+#			restdown-generated HTML and JSON files.
+#
+#	DOC_FILES	Restdown (documentation source) files. These are
+#			assumed to be contained in "docs/", and must NOT
+#			contain the "docs/" prefix.
+#
+#	JSL_CONF_NODE	Specify JavaScriptLint configuration files
+#	JSL_CONF_WEB	(paths relative to top-level Makefile)
+#
+#			Node.js and Web configuration files are separate
+#			because you'll usually want different global variable
+#			configurations.  If no file is specified, none is given
+#			to jsl, which causes it to use a default configuration,
+#			which probably isn't what you want.
+#
+#	JSL_FILES_NODE	JavaScript files to check with Node config file.
+#	JSL_FILES_WEB	JavaScript files to check with Web config file.
+#
+#	JSON_FILES	JSON files to be validated
+#
+#	JSSTYLE_FILES	JavaScript files to be style-checked
+#
+# You can also override these variables:
+#
+#	BASH		Path to bash (default: "bash")
+#
+#	CSCOPE_DIRS	Directories to search for source files for the cscope
+#			index. (default: ".")
+#
+#	ESLINT		Path to eslint (default: "eslint")
+#
+#	ESLINT_FLAGS	Additional flags to pass through to eslint
+#
+#	JSL		Path to JavaScriptLint (default: "jsl")
+#
+#	JSL_FLAGS_NODE	Additional flags to pass through to JSL
+#	JSL_FLAGS_WEB
+#	JSL_FLAGS
+#
+#	JSON		Path to json tool (default: "json")
+#
+#	JSSTYLE		Path to jsstyle (default: "jsstyle")
+#
+#	JSSTYLE_FLAGS	Additional flags to pass through to jsstyle
+#
+#	RESTDOWN_EXT	By default '.md' is required for DOC_FILES (see above).
+#			If you want to use, say, '.restdown' instead, then set
+#			'RESTDOWN_EXT=.restdown' in your Makefile.
+#
+
+#
+# Defaults for the various tools we use.
+#
+BASH		?= bash
+BASHSTYLE	?= tools/bashstyle
+CP		?= cp
+CSCOPE		?= cscope
+CSCOPE_DIRS	?= .
+ESLINT		?= eslint
+JSL		?= jsl
+JSON		?= json
+JSSTYLE		?= jsstyle
+MKDIR		?= mkdir -p
+MV		?= mv
+RESTDOWN_FLAGS	?=
+RESTDOWN_EXT	?= .md
+RMTREE		?= rm -rf
+JSL_FLAGS  	?= --nologo --nosummary
+
+ifeq ($(shell uname -s),SunOS)
+	TAR	?= gtar
+else
+	TAR	?= tar
+endif
+
+
+#
+# Defaults for other fixed values.
+#
+BUILD		= build
+DISTCLEAN_FILES += $(BUILD)
+DOC_BUILD	= $(BUILD)/docs/public
+
+#
+# Configure JSL_FLAGS_{NODE,WEB} based on JSL_CONF_{NODE,WEB}.
+#
+ifneq ($(origin JSL_CONF_NODE), undefined)
+	JSL_FLAGS_NODE += --conf=$(JSL_CONF_NODE)
+endif
+
+ifneq ($(origin JSL_CONF_WEB), undefined)
+	JSL_FLAGS_WEB += --conf=$(JSL_CONF_WEB)
+endif
+
+#
+# Targets. For descriptions on what these are supposed to do, see the
+# Joyent Engineering Guide.
+#
+
+#
+# Instruct make to keep around temporary files. We have rules below that
+# automatically update git submodules as needed, but they employ a deps/*/.git
+# temporary file. Without this directive, make tries to remove these .git
+# directories after the build has completed.
+#
+.SECONDARY: $($(wildcard deps/*):%=%/.git)
+
+#
+# This rule enables other rules that use files from a git submodule to have
+# those files depend on deps/module/.git and have "make" automatically check
+# out the submodule as needed.
+#
+deps/%/.git:
+	git submodule update --init deps/$*
+
+#
+# These recipes make heavy use of dynamically-created phony targets. The parent
+# Makefile defines a list of input files like BASH_FILES. We then say that each
+# of these files depends on a fake target called filename.bashchk, and then we
+# define a pattern rule for those targets that runs bash in check-syntax-only
+# mode. This mechanism has the nice properties that if you specify zero files,
+# the rule becomes a noop (unlike a single rule to check all bash files, which
+# would invoke bash with zero files), and you can check individual files from
+# the command line with "make filename.bashchk".
+#
+.PHONY: check-bash
+check-bash: $(BASH_FILES:%=%.bashchk) $(BASH_FILES:%=%.bashstyle)
+
+%.bashchk: %
+	$(BASH) -n $^
+
+%.bashstyle: %
+	$(BASHSTYLE) $^
+
+.PHONY: check-json
+check-json: $(JSON_FILES:%=%.jsonchk)
+
+%.jsonchk: %
+	$(JSON) --validate -f $^
+
+#
+# The above approach can be slow when there are many files to check because it
+# requires that "make" invoke the check tool once for each file, rather than
+# passing in several files at once.  For the JavaScript check targets, we define
+# a variable for the target itself *only if* the list of input files is
+# non-empty.  This avoids invoking the tool if there are no files to check.
+#
+
+ESLINT_TARGET = $(if $(ESLINT_FILES), check-eslint)
+.PHONY: check-eslint
+check-eslint: $(ESLINT_EXEC)
+	$(ESLINT) $(ESLINT_FLAGS) $(ESLINT_FILES)
+
+JSL_NODE_TARGET = $(if $(JSL_FILES_NODE), check-jsl-node)
+.PHONY: check-jsl-node
+check-jsl-node: $(JSL_EXEC)
+	$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_NODE) $(JSL_FILES_NODE)
+
+JSL_WEB_TARGET = $(if $(JSL_FILES_WEB), check-jsl-web)
+.PHONY: check-jsl-web
+check-jsl-web: $(JSL_EXEC)
+	$(JSL) $(JSL_FLAGS) $(JSL_FLAGS_WEB) $(JSL_FILES_WEB)
+
+.PHONY: check-jsl
+check-jsl: $(JSL_NODE_TARGET) $(JSL_WEB_TARGET)
+
+JSSTYLE_TARGET = $(if $(JSSTYLE_FILES), check-jsstyle)
+.PHONY: check-jsstyle
+check-jsstyle:  $(JSSTYLE_EXEC)
+	$(JSSTYLE) $(JSSTYLE_FLAGS) $(JSSTYLE_FILES)
+
+.PHONY: check
+check:: $(ESLINT_TARGET) check-jsl check-json $(JSSTYLE_TARGET) check-bash
+	@echo check ok
+
+.PHONY: clean
+clean::
+	-$(RMTREE) $(CLEAN_FILES)
+
+.PHONY: distclean
+distclean:: clean
+	-$(RMTREE) $(DISTCLEAN_FILES)
+
+CSCOPE_FILES = cscope.in.out cscope.out cscope.po.out
+CLEAN_FILES += $(CSCOPE_FILES)
+
+.PHONY: xref
+xref: cscope.files
+	$(CSCOPE) -bqR
+
+.PHONY: cscope.files
+cscope.files:
+	find $(CSCOPE_DIRS) -name '*.c' -o -name '*.h' -o -name '*.cc' \
+	    -o -name '*.js' -o -name '*.s' -o -name '*.cpp' > $@
+
+#
+# The "docs" target is complicated because we do several things here:
+#
+#    (1) Use restdown to build HTML and JSON files from each of DOC_FILES.
+#
+#    (2) Copy these files into $(DOC_BUILD) (build/docs/public), which
+#        functions as a complete copy of the documentation that could be
+#        mirrored or served over HTTP.
+#
+#    (3) Then copy any directories and media from docs/media into
+#        $(DOC_BUILD)/media. This allows projects to include their own media,
+#        including files that will override same-named files provided by
+#        restdown.
+#
+# Step (3) is the surprisingly complex part: in order to do this, we need to
+# identify the subdirectories in docs/media, recreate them in
+# $(DOC_BUILD)/media, then do the same with the files.
+#
+DOC_MEDIA_DIRS := $(shell find docs/media -type d 2>/dev/null | grep -v "^docs/media$$")
+DOC_MEDIA_DIRS := $(DOC_MEDIA_DIRS:docs/media/%=%)
+DOC_MEDIA_DIRS_BUILD := $(DOC_MEDIA_DIRS:%=$(DOC_BUILD)/media/%)
+
+DOC_MEDIA_FILES := $(shell find docs/media -type f 2>/dev/null)
+DOC_MEDIA_FILES := $(DOC_MEDIA_FILES:docs/media/%=%)
+DOC_MEDIA_FILES_BUILD := $(DOC_MEDIA_FILES:%=$(DOC_BUILD)/media/%)
+
+#
+# Like the other targets, "docs" just depends on the final files we want to
+# create in $(DOC_BUILD), leveraging other targets and recipes to define how
+# to get there.
+#
+.PHONY: docs
+docs::							\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.html)		\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.json)		\
+	$(DOC_MEDIA_FILES_BUILD)
+
+#
+# We keep the intermediate files so that the next build can see whether the
+# files in DOC_BUILD are up to date.
+#
+.PRECIOUS:					\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.html)		\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%json)
+
+#
+# We do clean those intermediate files, as well as all of DOC_BUILD.
+#
+CLEAN_FILES +=					\
+	$(DOC_BUILD)				\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.html)		\
+	$(DOC_FILES:%$(RESTDOWN_EXT)=docs/%.json)
+
+#
+# Before installing the files, we must make sure the directories exist. The |
+# syntax tells make that the dependency need only exist, not be up to date.
+# Otherwise, it might try to rebuild spuriously because the directory itself
+# appears out of date.
+#
+$(DOC_MEDIA_FILES_BUILD): | $(DOC_MEDIA_DIRS_BUILD)
+
+$(DOC_BUILD)/%: docs/% | $(DOC_BUILD)
+	$(MKDIR) $(shell dirname $@)
+	$(CP) $< $@
+
+docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC) \
+    $(EXTRA_DOC_DEPS)
+	$(RESTDOWN) $(RESTDOWN_FLAGS) -m $(DOC_BUILD) $<
+
+$(DOC_BUILD):
+	$(MKDIR) $@
+
+$(DOC_MEDIA_DIRS_BUILD):
+	$(MKDIR) $@
+
+#
+# The default "test" target does nothing. This should usually be overridden by
+# the parent Makefile. It's included here so we can define "prepush" without
+# requiring the repo to define "test".
+#
+.PHONY: test
+test:
+
+.PHONY: prepush
+prepush: check test
+
+#
+# This rule automatically exposes every "stamp" file as a target that can be
+# invoked manually as "stamp-$STAMP_NAME".  For example, if a stamp has been
+# defined thus:
+#
+#	STAMP_EXPENSIVE_RESULT := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# ... this can be invoked manually as "make stamp-expensive-result".  Note that
+# these phony targets are essentially just for interactive usage.  Targets
+# should be specified to depend on the macro containing the stamp file name.
+#
+# See also the comments in "Makefile.defs".
+#
+stamp-%: $(MAKE_STAMPS_DIR)/%
+	@:
diff --git a/tools/service_bundle.dtd.1 b/tools/service_bundle.dtd.1
new file mode 100644
index 0000000..e5c2380
--- /dev/null
+++ b/tools/service_bundle.dtd.1
@@ -0,0 +1,1091 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ Copyright (c) 2004, 2010, Oracle and/or its affiliates. All rights reserved.
+
+ CDDL HEADER START
+
+ The contents of this file are subject to the terms of the
+ Common Development and Distribution License (the "License").
+ You may not use this file except in compliance with the License.
+
+ You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
+ or http://www.opensolaris.org/os/licensing.
+ See the License for the specific language governing permissions
+ and limitations under the License.
+
+ When distributing Covered Code, include this CDDL HEADER in each
+ file and include the License file at usr/src/OPENSOLARIS.LICENSE.
+ If applicable, add the following below this CDDL HEADER, with the
+ fields enclosed by brackets "[]" replaced with your own identifying
+ information: Portions Copyright [yyyy] [name of copyright owner]
+
+ CDDL HEADER END
+-->
+
+<!--
+  Service description DTD
+
+    Most attributes are string values (or an individual string from a
+    restricted set), but attributes with a specific type requirement are
+    noted in the comment describing the element.
+-->
+
+<!--
+  XInclude support
+
+    A series of service bundles may be composed via the xi:include tag.
+    smf(5) tools enforce that all bundles be of the same type.
+-->
+
+<!--
+     These entities are used for the property, propval and property_group
+     elements, that require type attributes for manifest, while for profiles
+     the type attributes are only implied.
+-->
+
+<!ENTITY % profile "IGNORE">
+<!ENTITY % manifest "INCLUDE">
+
+<!ELEMENT xi:include
+  (xi:fallback)
+  >
+<!ATTLIST xi:include
+  href CDATA #REQUIRED
+  parse (xml|text) "xml"
+  encoding CDATA #IMPLIED
+  xmlns:xi CDATA #FIXED "http://www.w3.org/2001/XInclude"
+  >
+
+<!ELEMENT xi:fallback
+  ANY
+  >
+<!ATTLIST xi:fallback
+  xmlns:xi CDATA #FIXED "http://www.w3.org/2001/XInclude"
+  >
+
+<!--
+  stability
+
+    This element associates an SMI stability level with the parent
+    element.  See attributes(5) for an explanation of interface
+    stability levels.
+
+    Its attribute is
+
+	value	The stability level of the parent element.
+-->
+
+<!ELEMENT stability EMPTY>
+
+<!ATTLIST stability
+	value		( Standard | Stable | Evolving | Unstable |
+			External | Obsolete ) #REQUIRED >
+
+<!-- Property value lists -->
+
+<!--
+  value_node
+
+    This element represents a single value within any of the typed
+    property value lists.
+
+    Its attribute is
+
+	value	The value for this node in the list.
+-->
+
+<!ELEMENT value_node EMPTY>
+
+<!ATTLIST value_node
+	value CDATA #REQUIRED>
+
+<!--
+  count_list
+  integer_list
+  opaque_list
+  host_list
+  hostname_list
+  net_address_list
+  net_address_v4_list
+  net_address_v6_list
+  time_list
+  astring_list
+  ustring_list
+  boolean_list
+  fmri_list
+  uri_list
+
+    These elements represent the typed lists of values for a property.
+    Each contains one or more value_node elements representing each
+    value on the list.
+
+    None of these elements has attributes.
+-->
+
+<!ELEMENT count_list
+	( value_node+ )>
+
+<!ATTLIST count_list>
+
+<!ELEMENT integer_list
+	( value_node+ )>
+
+<!ATTLIST integer_list>
+
+<!ELEMENT opaque_list
+	( value_node+ )>
+
+<!ATTLIST opaque_list>
+
+<!ELEMENT host_list
+	( value_node+ )>
+
+<!ATTLIST host_list>
+
+<!ELEMENT hostname_list
+	( value_node+ )>
+
+<!ATTLIST hostname_list>
+
+<!ELEMENT net_address_list
+	( value_node+ )>
+
+<!ATTLIST net_address_list>
+
+<!ELEMENT net_address_v4_list
+	( value_node+ )>
+
+<!ATTLIST net_address_v4_list>
+
+<!ELEMENT net_address_v6_list
+	( value_node+ )>
+
+<!ATTLIST net_address_v6_list>
+
+<!ELEMENT time_list
+	( value_node+ )>
+
+<!ATTLIST time_list>
+
+<!ELEMENT astring_list
+	( value_node+ )>
+
+<!ATTLIST astring_list>
+
+<!ELEMENT ustring_list
+	( value_node+ )>
+
+<!ATTLIST ustring_list>
+
+<!ELEMENT boolean_list
+	( value_node+ )>
+
+<!ATTLIST boolean_list>
+
+<!ELEMENT fmri_list
+	( value_node+ )>
+
+<!ATTLIST fmri_list>
+
+<!ELEMENT uri_list
+	( value_node+ )>
+
+<!ATTLIST uri_list>
+
+<!-- Properties and property groups -->
+
+<!--
+   property
+
+     This element is for a singly or multiply valued property within a
+     property group.  It contains an appropriate value list element,
+     which is expected to be consistent with the type attribute.
+
+     Its attributes are
+
+	name	The name of this property.
+
+	type	The data type for this property.
+
+	override These values should replace values already in the
+		repository.
+-->
+
+<![%profile;[
+<!ELEMENT property
+	( count_list | integer_list | opaque_list | host_list | hostname_list |
+	net_address_list | net_address_v4_list | net_address_v6_list |
+	time_list | astring_list | ustring_list | boolean_list | fmri_list |
+	uri_list )? >
+
+<!ATTLIST property
+	name		CDATA #REQUIRED
+	type		( count | integer | opaque | host | hostname |
+			net_address | net_address_v4 | net_address_v6 | time |
+			astring | ustring | boolean | fmri | uri ) #IMPLIED
+	override	( true | false ) "false" >
+]]>
+	
+<![%manifest;[
+<!ELEMENT property
+	( count_list | integer_list | opaque_list | host_list | hostname_list |
+	net_address_list | net_address_v4_list | net_address_v6_list |
+	time_list | astring_list | ustring_list | boolean_list | fmri_list |
+	uri_list )? >
+
+<!ATTLIST property
+	name		CDATA #REQUIRED
+	type		( count | integer | opaque | host | hostname |
+			net_address | net_address_v4 | net_address_v6 | time |
+			astring | ustring | boolean | fmri | uri ) #REQUIRED
+	override	( true | false ) "false" >
+]]>
+
+<!--
+   propval
+
+     This element is for a singly valued property within a property
+     group.  List-valued properties must use the property element above.
+
+     Its attributes are
+
+	name	The name of this property.
+
+	type	The data type for this property.
+
+	value	The value for this property.  Must match type
+		restriction of type attribute.
+
+	override This value should replace any values already in the
+		repository.
+-->
+
+<![%profile;[
+<!ELEMENT propval EMPTY>
+
+<!ATTLIST propval
+	name		CDATA #REQUIRED
+	type		( count | integer | opaque | host | hostname |
+			net_address | net_address_v4 | net_address_v6 | time |
+			astring | ustring | boolean | fmri | uri ) #IMPLIED
+	value		CDATA #REQUIRED
+	override	( true | false ) "false" >
+]]>
+
+<![%manifest;[
+<!ELEMENT propval EMPTY>
+
+<!ATTLIST propval
+	name		CDATA #REQUIRED
+	type		( count | integer | opaque | host | hostname |
+			net_address | net_address_v4 | net_address_v6 | time |
+			astring | ustring | boolean | fmri | uri ) #REQUIRED
+	value		CDATA #REQUIRED
+	override	( true | false ) "false" >
+]]>
+
+<!--
+  property_group
+
+    This element is for a set of related properties on a service or
+    instance.  It contains an optional stability element, as well as
+    zero or more property-containing elements.
+
+    Its attributes are
+
+	name	The name of this property group.
+
+	type	A category for this property group.  Groups of type
+		"framework", "implementation" or "template" are primarily
+		of interest to the service management facility, while
+		groups of type "application" are expected to be only of
+		interest to the service to which this group is attached.
+		Other types may be introduced using the service symbol
+		namespace conventions.
+
+	delete	If in the repository, this property group should be removed.
+-->
+
+<![%profile;[
+<!ELEMENT property_group
+	( stability?, ( propval | property )* )>
+
+<!ATTLIST property_group
+	name		CDATA #REQUIRED
+	type		CDATA #IMPLIED
+	delete		( true | false ) "false" >
+]]>
+
+<![%manifest;[
+<!ELEMENT property_group
+	( stability?, ( propval | property )* )>
+
+<!ATTLIST property_group
+	name		CDATA #REQUIRED
+	type		CDATA #REQUIRED
+	delete		( true | false ) "false" >
+]]>
+
+<!--
+  service_fmri
+
+    This element defines a reference to a service FMRI (for either a
+    service or an instance).
+
+    Its attribute is
+
+	value	The FMRI.
+-->
+
+<!ELEMENT service_fmri EMPTY>
+
+<!ATTLIST service_fmri
+	value		CDATA #REQUIRED>
+
+<!-- Dependencies -->
+
+<!--
+  dependency
+
+    This element identifies a group of FMRIs upon which the service is
+    in some sense dependent.  Its interpretation is left to the
+    restarter to which a particular service instance is delegated.  It
+    contains a group of service FMRIs, as well as a block of properties.
+
+    Its attributes are
+
+	name	The name of this dependency.
+
+	grouping The relationship between the various FMRIs grouped
+		here; "require_all" of the FMRIs to be online, "require_any"
+		of the FMRIs to be online, or "exclude_all" of the FMRIs
+		from being online or in maintenance for the dependency to
+		be satisfied.  "optional_all" dependencies are satisfied
+		when all of the FMRIs are either online or unable to come
+		online (because they are disabled, misconfigured, or one
+		of their dependencies is unable to come online).
+
+	restart_on The type of events from the FMRIs that the service should
+		be restarted for.  "error" restarts the service if the
+		dependency is restarted due to hardware fault.  "restart"
+		restarts the service if the dependency is restarted for
+		any reason, including hardware fault.  "refresh" restarts
+		the service if the dependency is refreshed or restarted for
+		any reason.  "none" will never restart the service due to
+		dependency state changes.
+
+	type	The type of dependency: on another service ('service'), on
+		a filesystem path ('path'), or another dependency type.
+
+	delete	This dependency should be deleted.
+-->
+
+<!ELEMENT dependency
+	( service_fmri*, stability?, ( propval | property )* ) >
+
+<!ATTLIST dependency
+	name		CDATA #REQUIRED
+	grouping	( require_all | require_any | exclude_all |
+			optional_all ) #REQUIRED
+	restart_on	( error | restart | refresh | none ) #REQUIRED
+	type		CDATA #REQUIRED
+	delete		( true | false ) "false" >
+
+<!-- Dependents -->
+
+<!--
+  dependent
+
+    This element identifies a service which should depend on this service.  It
+    corresponds to a dependency in the named service.  The grouping and type
+    attributes of that dependency are implied to be "require_all" and
+    "service", respectively.
+
+    Its attributes are
+
+	name	The name of the dependency property group to create in the
+		dependent entity.
+
+	grouping The grouping relationship of the dependency property
+		group to create in the dependent entity.  See "grouping"
+		attribute on the dependency element.
+
+	restart_on The type of events from this service that the named service
+		should be restarted for.
+
+	delete	True if this dependent should be deleted.
+
+	override Whether to replace an existing dependent of the same name.
+
+-->
+
+<!ELEMENT dependent
+	( service_fmri, stability?, ( propval | property )* ) >
+
+<!ATTLIST dependent
+	name		CDATA #REQUIRED
+	grouping	( require_all | require_any | exclude_all |
+			optional_all) #REQUIRED
+	restart_on	( error | restart | refresh | none) #REQUIRED
+	delete		( true | false ) "false"
+	override	( true | false ) "false" >
+
+<!-- Method execution context, security profile, and credential definitions -->
+
+<!--
+  envvar
+
+    An environment variable. It has two attributes:
+
+	name	The name of the environment variable.
+	value	The value of the environment variable.
+-->
+
+<!ELEMENT envvar EMPTY>
+
+<!ATTLIST envvar
+	name		CDATA #REQUIRED
+	value		CDATA #REQUIRED >
+
+<!--
+  method_environment
+
+    This element defines the environment for a method. It has no
+    attributes, and one or more envvar child elements.
+-->
+
+<!ELEMENT method_environment (envvar+) >
+
+<!ATTLIST method_environment>
+
+<!--
+  method_profile
+
+    This element indicates which exec_attr(5) profile applies to the
+    method context being defined.
+
+    Its attribute is
+
+	name	The name of the profile.
+-->
+
+<!ELEMENT method_profile EMPTY>
+
+<!ATTLIST method_profile
+	name		CDATA #REQUIRED >
+
+<!--
+  method_credential
+
+    This element specifies credential attributes for the execution
+    method to use.
+
+    Its attributes are
+
+	user	The user ID, in numeric or text form.
+
+	group	The group ID, in numeric or text form.  If absent or
+		":default", the group associated with the user in the
+		passwd database.
+
+	supp_groups Supplementary group IDs to be associated with the
+		method, separated by commas or spaces.  If absent or
+		":default", initgroups(3C) will be used.
+
+	privileges An optional string specifying the privilege set.
+
+	limit_privileges An optional string specifying the limit
+		privilege set.
+-->
+
+<!ELEMENT method_credential EMPTY>
+
+<!ATTLIST method_credential
+	user		CDATA #REQUIRED
+	group		CDATA #IMPLIED
+	supp_groups	CDATA #IMPLIED
+	privileges	CDATA #IMPLIED
+	limit_privileges CDATA #IMPLIED >
+
+<!--
+  method_context
+
+    This element combines credential and resource management attributes
+    for execution methods.  It may contain a method_environment, or
+    a method_profile or method_credential element.
+
+    Its attributes are
+
+	working_directory The home directory to launch the method from.
+		":default" can be used as a token to indicate use of the
+		user specified by the credential or profile specified.
+
+	project	The project ID, in numeric or text form.  ":default" can
+		be used as a token to indicate use of the project
+		identified by getdefaultproj(3PROJECT) for the non-root
+		user specified by the credential or profile specified.
+		If the user is root, ":default" designates the project
+		the restarter is running in.
+
+	resource_pool The resource pool name to launch the method on.
+		":default" can be used as a token to indicate use of the
+		pool specified in the project(4) entry given in the
+		"project" attribute above.
+-->
+<!ELEMENT method_context
+	( (method_profile | method_credential)?, method_environment? ) >
+
+<!ATTLIST method_context
+	working_directory	CDATA #IMPLIED
+	project			CDATA #IMPLIED
+	resource_pool		CDATA #IMPLIED >
+
+<!-- Restarter delegation, methods, and monitors -->
+
+<!--
+  exec_method
+
+    This element describes one of the methods used by the designated
+    restarter to act on the service instance.  Its interpretation is
+    left to the restarter to which a particular service instance is
+    delegated.  It contains a set of attributes, an optional method
+    context, and an optional stability element for the optional
+    properties that can be included.
+
+    Its attributes are
+
+	type	The type of method, either "method" or "monitor".
+
+	name	Name of this execution method.  The method names are
+		usually a defined interface of the restarter to which an
+		instance of this service is delegated.
+
+	exec	The string identifying the action to take.  For
+		svc.startd(1M), this is a string suitable to pass to
+		exec(2).
+
+	timeout_seconds [integer] Duration, in seconds, to wait for this
+		method to complete.  A '0' or '-1' denotes an infinite
+		timeout.
+
+	delete	If in the repository, the property group for this method
+		should be removed.
+-->
+
+<!ELEMENT exec_method
+	( method_context?, stability?, ( propval | property )* ) >
+
+<!ATTLIST exec_method
+	type		( method | monitor ) #REQUIRED
+	name		CDATA #REQUIRED
+	exec		CDATA #REQUIRED
+	timeout_seconds	CDATA #REQUIRED
+	delete		( true | false ) "false" >
+
+<!--
+  restarter
+
+    A flag element identifying the restarter to which this service or
+    service instance is delegated.  Contains the FMRI naming the
+    delegated restarter.
+
+    This element has no attributes.
+-->
+
+<!ELEMENT restarter
+	( service_fmri ) >
+
+<!ATTLIST restarter>
+
+<!--
+  Templates
+-->
+
+<!--
+  doc_link
+
+    The doc_link relates a resource described by the given URI to the
+    service described by the containing template.  The resource is
+    expected to be a documentation or elucidatory reference of some
+    kind.
+
+    Its attributes are
+
+      name      A label for this resource.
+
+      uri       A URI to the resource.
+-->
+
+<!ELEMENT doc_link EMPTY>
+
+<!ATTLIST doc_link
+	name		CDATA #REQUIRED
+	uri		CDATA #REQUIRED >
+
+<!--
+  manpage
+
+    The manpage element connects the reference manual page to the
+    template's service.
+
+    Its attributes are
+
+      title     The manual page title.
+
+      section   The manual page's section.
+
+      manpath   The MANPATH environment variable, as described in man(1)
+                that is required to reach the named manual page
+-->
+
+<!ELEMENT manpage EMPTY>
+
+<!ATTLIST manpage
+	title		CDATA #REQUIRED
+	section		CDATA #REQUIRED
+	manpath		CDATA ":default" >
+
+<!--
+  documentation
+
+    The documentation element groups an arbitrary number of doc_link
+    and manpage references.
+
+    It has no attributes.
+-->
+
+<!ELEMENT documentation
+	( doc_link | manpage )* >
+
+<!ATTLIST documentation>
+
+<!--
+  loctext
+
+    The loctext element is a container for localized text.
+
+    Its sole attribute is
+
+	xml:lang The name of the locale, in the form accepted by LC_ALL,
+		etc.  See locale(5).
+-->
+<!ELEMENT loctext
+        (#PCDATA) >
+
+<!ATTLIST loctext
+        xml:lang	CDATA #REQUIRED >
+
+<!--
+  description
+
+    The description holds a set of potentially longer, localized strings that
+    consist of a short description of the service.
+
+    The description has no attributes.
+-->
+<!ELEMENT description
+        ( loctext+ ) >
+
+<!ATTLIST description>
+
+<!--
+  common_name
+
+    The common_name holds a set of short, localized strings that
+    represent a well-known name for the service in the given locale.
+
+    The common_name has no attributes.
+-->
+<!ELEMENT common_name
+        ( loctext+ ) >
+
+<!ATTLIST common_name>
+
+<!--
+  units
+
+    The units a numerical property is expressed in.
+-->
+
+<!ELEMENT units
+	( loctext+ ) >
+
+<!ATTLIST units>
+
+<!--
+  visibility
+
+    Expresses how a property is typically accessed.  This isn't
+    intended as access control, but as an indicator as to how a
+    property is used.
+
+    Its attributes are:
+
+      value     'hidden', 'readonly', or 'readwrite' indicating that
+		the property should be hidden from the user, shown but
+		read-only, or modifiable.
+-->
+
+<!ELEMENT visibility EMPTY>
+
+<!ATTLIST visibility
+	value	( hidden | readonly | readwrite ) #REQUIRED >
+
+<!--
+  value
+
+    Describes a legal value for a property value, and optionally contains a
+    human-readable name and description for the specified property
+    value.
+
+    Its attributes are:
+
+      name	A string representation of the value.
+-->
+
+<!ELEMENT value
+	( common_name?, description? ) >
+
+<!ATTLIST value
+	name	CDATA #REQUIRED >
+
+<!--
+  values
+
+    Human-readable names and descriptions for valid values of a property.
+-->
+
+<!ELEMENT values
+	(value+) >
+
+<!ATTLIST values>
+
+<!--
+  cardinality
+
+    Places a constraint on the number of values the property can take
+    on.
+
+    Its attributes are:
+	min	minimum number of values
+	max	maximum number of values
+
+    Both attributes are optional.  If min is not specified, it defaults to
+    0.  If max is not specified it indicates an unlimited number of values.
+    If neither is specified this indicates 0 or more values.
+-->
+
+<!ELEMENT cardinality EMPTY>
+
+<!ATTLIST cardinality
+	min	CDATA "0"
+	max	CDATA "18446744073709551615">
+
+<!--
+  internal_separators
+
+    Indicates the separators used within a property's value used to
+    separate the actual values.  Used in situations where multiple
+    values are packed into a single property value instead of using a
+    multi-valued property.
+-->
+
+<!ELEMENT internal_separators
+	(#PCDATA) >
+
+<!ATTLIST internal_separators>
+
+<!--
+  range
+
+    Indicates a range of possible integer values.
+
+    Its attributes are:
+
+      min	The minimum value of the range (inclusive).
+      max	The maximum value of the range (inclusive).
+-->
+
+<!ELEMENT range EMPTY>
+
+<!ATTLIST range
+	min	CDATA #REQUIRED
+	max	CDATA #REQUIRED >
+
+<!--
+  constraints
+
+    Provides a set of constraints on the values a property can take on.
+-->
+
+<!ELEMENT constraints
+	( value*, range* ) >
+<!ATTLIST constraints>
+
+<!--
+  include_values
+
+    Includes an entire set of values in the choices block.
+
+    Its attributes are:
+
+	type    Either "constraints" or "values", indicating an
+		inclusion of all values allowed by the property's
+		constraints or all values for which there are
+		human-readable names and descriptions, respectively.
+-->
+
+<!ELEMENT include_values EMPTY>
+
+<!ATTLIST include_values
+	type	( constraints | values ) #REQUIRED >
+
+<!--
+  choices
+
+    Provides a set of common choices for the values a property can take
+    on.  Useful in those cases where the possibilities are unenumerable
+    or merely inconveniently legion, and a manageable subset is desired
+    for presentation in a user interface.
+-->
+
+<!ELEMENT choices
+	( value*, range*, include_values* ) >
+
+<!ATTLIST choices>
+
+<!--
+  prop_pattern
+
+
+    The prop_pattern describes one property of the enclosing property group
+    pattern.
+
+    Its attributes are:
+
+	name    The property's name.
+	type    The property's type.
+	required
+		If the property group is present, this property is required.
+
+	type can be omitted if required is false.
+-->
+
+<!ELEMENT prop_pattern
+	( common_name?, description?, units?, visibility?, cardinality?,
+	  internal_separators?, values?, constraints?, choices? ) >
+
+<!ATTLIST prop_pattern
+	name		CDATA	#REQUIRED
+	type		( count | integer | opaque | host | hostname |
+			net_address | net_address_v4 | net_address_v6 | time |
+			astring | ustring | boolean | fmri | uri ) #IMPLIED
+	required	( true | false )	"false" >
+
+<!--
+  pg_pattern
+
+    The pg_pattern describes one property group.
+    Depending on the element's attributes, these descriptions may apply
+    to just the enclosing service/instance, instances of the enclosing
+    service, delegates of the service (assuming it is a restarter), or
+    all services.
+
+    Its attributes are:
+
+	name    The property group's name.  If not specified, it
+		matches all property groups with the specified type.
+	type    The property group's type.  If not specified, it
+		matches all property groups with the specified name.
+	required
+		If the property group is required.
+	target	The scope of the pattern, which may be all, delegate,
+		instance, or this.  'all' is reserved for framework use
+		and applies the template to all services on the system.
+		'delegate' is reserved for restarters, and means the
+		template applies to all services which use the restarter.
+		'this' would refer to the defining service or instance.
+		'instance' can only be used in a service's template block,
+		and means the definition applies to all instances of this
+		service.
+
+-->
+
+<!ELEMENT pg_pattern
+	( common_name?, description?, prop_pattern* ) >
+
+<!ATTLIST pg_pattern
+	name		CDATA	""
+	type		CDATA	""
+	required	( true | false )	"false"
+	target		( this | instance | delegate | all )	"this" >
+
+<!--
+  template
+
+    The template contains a collection of metadata about the service.
+    It contains a localizable string that serves as a common,
+    human-readable name for the service.  (This name should be less than
+    60 characters in a single byte locale.)  The template may optionally
+    contain a longer localizable description of the service, a
+    collection of links to documentation, either in the form of manual
+    pages or in the form of URI specifications to external documentation
+    sources (such as docs.sun.com).
+
+    The template has no attributes.
+-->
+<!ELEMENT template
+        ( common_name, description?, documentation?, pg_pattern* ) >
+
+<!ATTLIST template>
+
+<!-- Notification Parameters -->
+
+<!ELEMENT paramval EMPTY>
+
+<!ATTLIST paramval
+	name		CDATA #REQUIRED
+	value		CDATA #REQUIRED>
+
+<!ELEMENT parameter
+	( value_node* )>
+
+<!ATTLIST parameter
+	name		CDATA #REQUIRED>
+
+<!ELEMENT event EMPTY>
+
+<!ATTLIST event
+	value		CDATA #REQUIRED>
+
+<!ELEMENT type
+	( ( parameter | paramval )* )>
+
+<!ATTLIST type
+	name		CDATA #REQUIRED
+	active		( true | false ) "true" >
+
+<!--
+  notification parameters
+
+    This element sets the notification parameters for Software Events and
+    Fault Management problem lifecycle events.
+-->
+
+<!ELEMENT notification_parameters
+	( event, type+ )>
+
+<!ATTLIST notification_parameters>
+
+<!-- Services and instances -->
+
+<!--
+  create_default_instance
+
+    A flag element indicating that an otherwise empty default instance
+    of this service (named "default") should be created at install, with
+    its enabled property set as given.
+
+    Its attribute is
+
+	enabled	[boolean] The initial value for the enabled state of
+		this instance.
+-->
+
+<!ELEMENT create_default_instance EMPTY >
+
+<!ATTLIST create_default_instance
+	enabled		( true | false ) #REQUIRED >
+
+<!--
+  single_instance
+
+    A flag element stating that this service can only have a single
+    instance on a particular system.
+-->
+
+<!ELEMENT single_instance EMPTY>
+
+<!ATTLIST single_instance>
+
+<!--
+  instance
+
+    The service instance is the object representing a software component
+    that will run on the system if enabled.  It contains an enabled
+    element, a set of dependencies on other services, potentially
+    customized methods or configuration data, an optional method
+    context, and a pointer to its restarter.  (If no restarter is
+    specified, the master restarter, svc.startd(1M), is assumed to be
+    responsible for the service.)
+
+    Its attributes are
+
+	name	The canonical name for this instance of the service.
+
+	enabled	[boolean] The initial value for the enabled state of
+		this instance.
+-->
+
+<!ELEMENT instance
+	( restarter?, dependency*, dependent*, method_context?,
+	exec_method*, notification_parameters*, property_group*,
+	template? ) >
+
+<!ATTLIST instance
+	name		CDATA #REQUIRED
+	enabled		( true | false ) #REQUIRED >
+
+<!--
+  service
+
+    The service contains the set of instances defined by default for
+    this service, an optional method execution context, any default
+    methods, the template, and various restrictions or advice applicable
+    at installation.  The method execution context and template elements
+    are required for service_bundle documents with type "manifest", but
+    are optional for "profile" or "archive" documents.
+
+    Its attributes are
+
+	name	The canonical name for the service.
+
+	version	[integer] The integer version for this service.
+
+	type	Whether this service is a simple service, a delegated
+		restarter, or a milestone (a synthetic service that
+		collects a group of dependencies).
+-->
+
+<!ELEMENT service
+	( create_default_instance?, single_instance?, restarter?,
+	dependency*, dependent*, method_context?, exec_method*,
+	notification_parameters*, property_group*, instance*,
+	stability?, template? ) >
+
+<!ATTLIST service
+	name		CDATA #REQUIRED
+	version		CDATA #REQUIRED
+	type		( service | restarter | milestone ) #REQUIRED >
+
+<!--
+  service_bundle
+
+    The bundle possesses two attributes:
+
+	type	How this file is to be understood by the framework (or
+		used in a non-framework compliant way). Standard types
+		are 'archive', 'manifest', and 'profile'.
+	
+	name	A name for the bundle.  Manifests should be named after
+		the package which delivered them; profiles should be
+		named after the "feature set nickname" they intend to
+		enable.
+-->
+
+<!ELEMENT service_bundle
+	( service_bundle* | service* | xi:include* )>
+
+<!ATTLIST service_bundle
+	type		CDATA #REQUIRED
+	name		CDATA #REQUIRED>
-- 
2.21.0

