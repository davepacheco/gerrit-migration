From b3ed39173cfbc1c85bda302bab7f89e010620139 Mon Sep 17 00:00:00 2001
From: Josh Wilsdon <josh@wilsdon.ca>
Date: Tue, 5 Jun 2018 16:42:16 -0700
Subject: [PATCH] TRITON-469 CNAPI should be able to connect to cn-agent
 listening on non-default port

---
 lib/models/server.js | 103 ++++++++++++++++++++++++++++++++++---------
 package.json         |   2 +-
 2 files changed, 83 insertions(+), 22 deletions(-)

diff --git a/lib/models/server.js b/lib/models/server.js
index 76377cc..e87de0d 100644
--- a/lib/models/server.js
+++ b/lib/models/server.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -2100,10 +2100,13 @@ function (opts) {
     assert.optionalFunc(opts.cb, 'opts.cb');
 
     var task, params, callback, origreq, persist;
-    var synccb;
-    var serverAdminIp;
+
     var client;
     var req_id;
+    var serverAdminIp;
+    var serverAdminPort = 5309;
+    var synccb;
+    var sysinfo;
 
     if (opts.req_id) {
         req_id = opts.req_id;
@@ -2142,28 +2145,54 @@ function (opts) {
      */
 
     async.waterfall([
-        function (wfcb) {
+        // XXX this code is the same as ModelServer.prototype.sendRequest
+        // could use some deduplication
+        function getSysinfo(wfcb) {
             self.getRaw(function (err, server) {
                 if (err) {
                     wfcb(new VError(err, err));
-                   return;
+                    return;
                 }
 
                 if (!server) {
                     wfcb(new VError('server not found'));
-                   return;
+                    return;
                 }
+                sysinfo = server.sysinfo;
 
+                log.info('sysinfo for %s before task %s', self.uuid, task);
+
+                wfcb();
+            });
+        },
+        function getCnapiLocationFromSysinfo(wfcb) {
+            if (sysinfo.hasOwnProperty('CN Agent IP')) {
+                // Allow sysinfo to include an IP that we'll use to connect to
+                // instead of trying to fish the IP out of the networks.
+                serverAdminIp = sysinfo['CN Agent IP'];
+            } else {
                 try {
-                    serverAdminIp = firstAdminIp(server.sysinfo);
+                    serverAdminIp = firstAdminIp(sysinfo);
                 } catch (e) {
                     wfcb(new VError(e, 'parsing server ip address'));
                     return;
                 }
+            }
 
-                log.info('sysinfo for %s before task %s', self.uuid, task);
-                wfcb();
-            });
+            if (sysinfo.hasOwnProperty('CN Agent Port')) {
+                // XXX TODO make sure this is a number before we replace
+                // serverAdminPort with it.
+                serverAdminPort = sysinfo['CN Agent Port'];
+            }
+
+            log.info({
+                serverAdminIp: serverAdminIp,
+                serverAdminPort: serverAdminPort,
+                serverUuid: self.uuid,
+                task: task
+            }, 'found server location before task request');
+
+            wfcb();
         },
         function (wfcb) {
             if (persist) {
@@ -2174,7 +2203,7 @@ function (opts) {
         },
         function (wfcb) {
             var cOpts = {
-                url: 'http://' + serverAdminIp + ':' + 5309,
+                url: 'http://' + serverAdminIp + ':' + serverAdminPort,
                 requestTimeout: 3600 * 1000,
                 connectTimeout: 3600 * 1000
             };
@@ -2314,44 +2343,76 @@ ModelServer.prototype.sendRequest = function (opts, cb) {
     assert.optionalObject(opts.params, 'opts.params');
     assert.func(cb, 'cb');
 
+    var client;
     var method = opts.method.toLowerCase();
     var params = opts.params || {};
     var serverAdminIp;
-    var client;
+    var serverAdminPort = 5309;
+    var sysinfo;
 
     var log = self.log;
 
     async.waterfall([
-        function getAdminIpFromSysinfo(wfcb) {
+        // XXX this code is the same as ModelServer.prototype.sendTaskRequest
+        // could use some deduplication
+        function getSysinfo(wfcb) {
             self.getRaw(function (err, server) {
                 if (err) {
                     wfcb(new VError(err, err));
-                   return;
+                    return;
                 }
 
                 if (!server) {
                     wfcb(new VError('server not found'));
-                   return;
+                    return;
                 }
+                sysinfo = server.sysinfo;
 
+                log.info('sysinfo for %s before HTTP request', self.uuid);
+
+                wfcb();
+            });
+        },
+        function getCnapiLocationFromSysinfo(wfcb) {
+            if (sysinfo.hasOwnProperty('CN Agent IP')) {
+                // Allow sysinfo to include an IP that we'll use to connect to
+                // instead of trying to fish the IP out of the networks.
+                serverAdminIp = sysinfo['CN Agent IP'];
+            } else {
                 try {
-                    serverAdminIp = firstAdminIp(server.sysinfo);
+                    serverAdminIp = firstAdminIp(sysinfo);
                 } catch (e) {
                     wfcb(new VError(e, 'parsing server ip address'));
                     return;
                 }
+            }
 
-                log.info('sysinfo for %s before HTTP request', self.uuid);
-                wfcb();
-            });
+            if (sysinfo.hasOwnProperty('CN Agent Port')) {
+                // XXX TODO make sure this is a number before we replace
+                // serverAdminPort with it.
+                serverAdminPort = sysinfo['CN Agent Port'];
+            }
+
+            log.info({
+                serverAdminIp: serverAdminIp,
+                serverAdminPort: serverAdminPort,
+                serverUuid: self.uuid
+            }, 'found server location before HTTP request');
+
+            wfcb();
         },
         function executeRequest(wfcb) {
             var cOpts = {
-                url: 'http://' + serverAdminIp + ':' + 5309,
+                url: 'http://' + serverAdminIp + ':' + serverAdminPort,
                 requestTimeout: 3600 * 1000,
                 connectTimeout: 3600 * 1000
             };
-            var rOpts = { path: opts.path };
+            var rOpts = {
+                headers: {
+                    'x-server-uuid': self.uuid
+                },
+                path: opts.path
+            };
 
             client = restify.createJsonClient(cOpts);
 
diff --git a/package.json b/package.json
index ce250f5..7439b87 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "cnapi",
   "description": "SmartDataCenter Compute Node API",
-  "version": "1.9.0",
+  "version": "1.10.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
-- 
2.21.0

