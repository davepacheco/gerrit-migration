From f4df040525dddbd67ca1e28aa2cea3fe3864a7fa Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Wed, 28 Dec 2016 16:58:59 -0800
Subject: [PATCH] joyent/node-cueball#67 want way to turn off
 Error.captureStackTrace calls Reviewed by: David Pacheco <dap@joyent.com>

---
 lib/connection-fsm.js |  6 ++--
 lib/index.js          |  4 +++
 lib/pool.js           |  3 +-
 lib/utils.js          | 76 ++++++++++++++++++++++++++++++++++++++++++-
 package.json          |  5 ++-
 5 files changed, 86 insertions(+), 8 deletions(-)

diff --git a/lib/connection-fsm.js b/lib/connection-fsm.js
index cace7d3..bcbd5a1 100644
--- a/lib/connection-fsm.js
+++ b/lib/connection-fsm.js
@@ -150,8 +150,7 @@ ConnectionFSM.prototype.claim = function (stack, cb) {
 	}
 	mod_assert.func(cb, 'callback');
 	if (stack === undefined) {
-		var e = {};
-		Error.captureStackTrace(e);
+		var e = mod_utils.maybeCaptureStackTrace();
 		stack = e.stack;
 	}
 	this.cf_claimStack = stack.split('\n').slice(1).
@@ -187,8 +186,7 @@ ConnectionFSM.prototype.release = function (cb) {
 	mod_assert.ok(['busy', 'ping'].indexOf(this.getState()) !== -1,
 	    'connection is not held');
 
-	var e = {};
-	Error.captureStackTrace(e);
+	var e = mod_utils.maybeCaptureStackTrace();
 	this.cf_releaseStack = e.stack.split('\n').slice(1).
 	    map(function (l) { return (l.replace(/^[ ]*at /, '')); });
 	this.once('stateChanged', function (st) {
diff --git a/lib/index.js b/lib/index.js
index 3e584cd..dcbdd57 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -12,6 +12,7 @@ const mod_resolver = require('./resolver');
 const mod_pmonitor = require('./pool-monitor');
 const mod_errors = require('./errors');
 const mod_cset = require('./set');
+const mod_utils = require('./utils');
 
 module.exports = {
 	HttpAgent: mod_agent.HttpAgent,
@@ -23,6 +24,9 @@ module.exports = {
 	resolverForIpOrDomain: mod_resolver.resolverForIpOrDomain,
 
 	poolMonitor: mod_pmonitor.monitor,
+	enableStackTraces: function () {
+		mod_utils.stackTracesEnabled.ENABLED = true;
+	},
 
 	ClaimTimeoutError: mod_errors.ClaimTimeoutError,
 	NoBackendsError: mod_errors.NoBackendsError,
diff --git a/lib/pool.js b/lib/pool.js
index e4120bf..de42c04 100644
--- a/lib/pool.js
+++ b/lib/pool.js
@@ -715,8 +715,7 @@ CueBallConnectionPool.prototype.claim = function (options, cb) {
 		});
 	}
 
-	var e = {};
-	Error.captureStackTrace(e);
+	var e = mod_utils.maybeCaptureStackTrace();
 
 	/* If there are idle connections sitting around, take one. */
 	while (this.p_idleq.length > 0) {
diff --git a/lib/utils.js b/lib/utils.js
index 28ff071..2c6db69 100644
--- a/lib/utils.js
+++ b/lib/utils.js
@@ -10,11 +10,85 @@ module.exports = {
 	shuffle: shuffle,
 	planRebalance: planRebalance,
 	assertRecovery: assertRecovery,
-	assertRecoverySet: assertRecoverySet
+	assertRecoverySet: assertRecoverySet,
+	stackTracesEnabled: stackTracesEnabled,
+	maybeCaptureStackTrace: maybeCaptureStackTrace
 };
 
 const mod_assert = require('assert-plus');
 
+stackTracesEnabled.ENABLED = false;
+var mod_dtrace, dtProvider, dtProbe;
+
+/*
+ * Returns true if cueball should collect stack traces at every claim() and
+ * release() from a Pool.
+ *
+ * By default, stack traces are disabled for performance reasons. There are two
+ * ways they can be enabled:
+ *   * by calling mod_cueball.enableStackTraces(), which sets the
+ *     stackTracesEnabled.ENABLED above to true
+ *   * by enabling the dtrace probe "capture-stack", e.g.
+ *     $ dtrace -n 'cueball$pid:::capture-stack { }' -p 12345
+ */
+function stackTracesEnabled() {
+	if (mod_dtrace === null)
+		return (stackTracesEnabled.ENABLED);
+
+	if (mod_dtrace === undefined) {
+		/*
+		 * We might not have built dtrace-provider at all, so the
+		 * require here might fail (e.g. we're on a platform without
+		 * dtrace).
+		 */
+		try {
+			mod_dtrace = require('dtrace-provider');
+		} catch (e) {
+			mod_dtrace = null;
+			return (stackTracesEnabled.ENABLED);
+		}
+		/*
+		 * We create one probe, named "capture-stack". If anybody
+		 * enables it by hooking into it, we start returning true.
+		 */
+		dtProvider = mod_dtrace.createDTraceProvider('cueball');
+		dtProbe = dtProvider.addProbe('capture-stack', 'int');
+		dtProvider.enable();
+	}
+
+	/*
+	 * dtrace-provider (apparently on a point of principle) does not have
+	 * any kind of isEnabled() method to tell if a probe has an enabling
+	 * attached to it or not.
+	 *
+	 * However, fire() will only call its callback in the case where the
+	 * probe is enabled, so we can use this property and a closure
+	 * to achieve our check.
+	 */
+	var en = stackTracesEnabled.ENABLED;
+	dtProbe.fire(function () {
+		en = true;
+		return ([1]);
+	});
+	return (en);
+}
+
+/*
+ * Returns an object with a .stack property, either the real stack (if stack
+ * traces are enabled) or a fake one two frames long (since this is the
+ * shortest length a real stack trace would be).
+ */
+function maybeCaptureStackTrace() {
+	var e = {};
+	if (stackTracesEnabled()) {
+		Error.captureStackTrace(e);
+	} else {
+		e.stack = 'Error\n at unknown (stack traces disabled)\n' +
+		    ' at unknown (stack traces disabled)\n';
+	}
+	return (e);
+}
+
 function assertRecoverySet(obj) {
 	mod_assert.object(obj, 'recovery');
 	var keys = Object.keys(obj);
diff --git a/package.json b/package.json
index ca476eb..c1000b6 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "cueball",
-  "version": "1.2.4",
+  "version": "1.3.0",
   "description": "",
   "main": "lib/index.js",
   "dependencies": {
@@ -17,6 +17,9 @@
     "vasync": ">=1.6.3 <2.0.0",
     "verror": ">=1.6.1 <2.0.0"
   },
+  "optionalDependencies": {
+    "dtrace-provider": "~0.8"
+  },
   "devDependencies": {
     "jsprim": ">=1.3.0 <2.0.0",
     "tape": ">=4.4.0 <5.0.0",
-- 
2.21.0

