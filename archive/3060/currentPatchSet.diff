From 4cc7a6e916fb3ca417e3d290f74f13d2931af19f Mon Sep 17 00:00:00 2001
From: Jonathan Perkin <jperkin@joyent.com>
Date: Thu, 7 Dec 2017 10:05:36 +0000
Subject: [PATCH] OS-6505 Improve ctfconvert error messages

---
 usr/src/lib/libctf/common/ctf_dwarf.c | 62 +++++++++++++--------------
 1 file changed, 29 insertions(+), 33 deletions(-)

diff --git a/usr/src/lib/libctf/common/ctf_dwarf.c b/usr/src/lib/libctf/common/ctf_dwarf.c
index 811a55bc64..ef9cc6f206 100644
--- a/usr/src/lib/libctf/common/ctf_dwarf.c
+++ b/usr/src/lib/libctf/common/ctf_dwarf.c
@@ -318,10 +318,7 @@ ctf_dwarf_error(ctf_die_t *cdp, ctf_file_t *cfp, int err, const char *fmt, ...)
 
 	off += ret;
 	rem = MAX(rem - ret, 0);
-	if (fmt[strlen(fmt) - 1] != '\n') {
-		(void) snprintf(cdp->cd_errbuf + off, rem,
-		    ": %s\n", ctf_errmsg(err));
-	}
+	(void) snprintf(cdp->cd_errbuf + off, rem, ": %s", ctf_errmsg(err));
 	va_end(ap);
 	return (ECTF_CONVBKERR);
 
@@ -345,7 +342,7 @@ ctf_dwarf_void(ctf_die_t *cdp)
 		    "void", &enc);
 		if (cdp->cd_voidtid == CTF_ERR) {
 			(void) snprintf(cdp->cd_errbuf, cdp->cd_errlen,
-			    "failed to create void type: %s\n",
+			    "failed to create void type: %s",
 			    ctf_errmsg(ctf_errno(cdp->cd_ctfp)));
 		}
 	}
@@ -372,7 +369,7 @@ ctf_dwarf_long(ctf_die_t *cdp)
 		    "long", &enc);
 		if (cdp->cd_longtid == CTF_ERR) {
 			(void) snprintf(cdp->cd_errbuf, cdp->cd_errlen,
-			    "failed to create long type: %s\n",
+			    "failed to create long type: %s",
 			    ctf_errmsg(ctf_errno(cdp->cd_ctfp)));
 		}
 
@@ -435,7 +432,7 @@ ctf_dwarf_attribute(ctf_die_t *cdp, Dwarf_Die die, Dwarf_Half name,
 		return (ENOENT);
 	}
 	(void) snprintf(cdp->cd_errbuf, cdp->cd_errlen,
-	    "failed to get attribute for type: %s\n",
+	    "failed to get attribute for type: %s",
 	    dwarf_errmsg(derr));
 	return (ECTF_CONVBKERR);
 }
@@ -456,7 +453,7 @@ ctf_dwarf_ref(ctf_die_t *cdp, Dwarf_Die die, Dwarf_Half name, Dwarf_Off *refp)
 	}
 
 	(void) snprintf(cdp->cd_errbuf, cdp->cd_errlen,
-	    "failed to get unsigned attribute for type: %s\n",
+	    "failed to get unsigned attribute for type: %s",
 	    dwarf_errmsg(derr));
 	return (ECTF_CONVBKERR);
 }
@@ -476,7 +473,7 @@ ctf_dwarf_refdie(ctf_die_t *cdp, Dwarf_Die die, Dwarf_Half name,
 	if ((ret = dwarf_offdie(cdp->cd_dwarf, off, diep, &derr)) !=
 	    DW_DLV_OK) {
 		(void) snprintf(cdp->cd_errbuf, cdp->cd_errlen,
-		    "failed to get die from offset %llu: %s\n",
+		    "failed to get die from offset %llu: %s",
 		    off, dwarf_errmsg(derr));
 		return (ECTF_CONVBKERR);
 	}
@@ -501,7 +498,7 @@ ctf_dwarf_signed(ctf_die_t *cdp, Dwarf_Die die, Dwarf_Half name,
 	}
 
 	(void) snprintf(cdp->cd_errbuf, cdp->cd_errlen,
-	    "failed to get unsigned attribute for type: %s\n",
+	    "failed to get unsigned attribute for type: %s",
 	    dwarf_errmsg(derr));
 	return (ECTF_CONVBKERR);
 }
@@ -523,7 +520,7 @@ ctf_dwarf_unsigned(ctf_die_t *cdp, Dwarf_Die die, Dwarf_Half name,
 	}
 
 	(void) snprintf(cdp->cd_errbuf, cdp->cd_errlen,
-	    "failed to get unsigned attribute for type: %s\n",
+	    "failed to get unsigned attribute for type: %s",
 	    dwarf_errmsg(derr));
 	return (ECTF_CONVBKERR);
 }
@@ -545,7 +542,7 @@ ctf_dwarf_boolean(ctf_die_t *cdp, Dwarf_Die die, Dwarf_Half name,
 	}
 
 	(void) snprintf(cdp->cd_errbuf, cdp->cd_errlen,
-	    "failed to get boolean attribute for type: %s\n",
+	    "failed to get boolean attribute for type: %s",
 	    dwarf_errmsg(derr));
 
 	return (ECTF_CONVBKERR);
@@ -573,7 +570,7 @@ ctf_dwarf_string(ctf_die_t *cdp, Dwarf_Die die, Dwarf_Half name, char **strp)
 	}
 
 	(void) snprintf(cdp->cd_errbuf, cdp->cd_errlen,
-	    "failed to get string attribute for type: %s\n",
+	    "failed to get string attribute for type: %s",
 	    dwarf_errmsg(derr));
 	return (ECTF_CONVBKERR);
 }
@@ -625,7 +622,7 @@ ctf_dwarf_offset(ctf_die_t *cdp, Dwarf_Die die, Dwarf_Off *offsetp)
 		return (0);
 
 	(void) snprintf(cdp->cd_errbuf, cdp->cd_errlen,
-	    "failed to get die offset: %s\n",
+	    "failed to get die offset: %s",
 	    dwarf_errmsg(derr));
 	return (ECTF_CONVBKERR);
 }
@@ -639,7 +636,7 @@ ctf_dwarf_tag(ctf_die_t *cdp, Dwarf_Die die, Dwarf_Half *tagp)
 		return (0);
 
 	(void) snprintf(cdp->cd_errbuf, cdp->cd_errlen,
-	    "failed to get tag type: %s\n",
+	    "failed to get tag type: %s",
 	    dwarf_errmsg(derr));
 	return (ECTF_CONVBKERR);
 }
@@ -656,7 +653,7 @@ ctf_dwarf_sib(ctf_die_t *cdp, Dwarf_Die base, Dwarf_Die *sibp)
 		return (0);
 
 	(void) snprintf(cdp->cd_errbuf, cdp->cd_errlen,
-	    "failed to sibling from die: %s\n",
+	    "failed to sibling from die: %s",
 	    dwarf_errmsg(derr));
 	return (ECTF_CONVBKERR);
 }
@@ -673,7 +670,7 @@ ctf_dwarf_child(ctf_die_t *cdp, Dwarf_Die base, Dwarf_Die *childp)
 		return (0);
 
 	(void) snprintf(cdp->cd_errbuf, cdp->cd_errlen,
-	    "failed to child from die: %s\n",
+	    "failed to child from die: %s",
 	    dwarf_errmsg(derr));
 	return (ECTF_CONVBKERR);
 }
@@ -716,7 +713,7 @@ ctf_dwarf_die_elfenc(Elf *elf, ctf_die_t *cdp, char *errbuf, size_t errlen)
 
 	if (gelf_getehdr(elf, &ehdr) == NULL) {
 		(void) snprintf(errbuf, errlen,
-		    "failed to get ELF header: %s\n",
+		    "failed to get ELF header: %s",
 		    elf_errmsg(elf_errno()));
 		return (ECTF_CONVBKERR);
 	}
@@ -806,7 +803,7 @@ ctf_dwarf_float_base(ctf_die_t *cdp, Dwarf_Signed type, ctf_encoding_t *enc)
 
 	if (map->cdf_mach == EM_NONE) {
 		(void) snprintf(cdp->cd_errbuf, cdp->cd_errlen,
-		    "Unsupported machine type: %d\n", cdp->cd_mach);
+		    "Unsupported machine type: %d", cdp->cd_mach);
 		return (ENOTSUP);
 	}
 
@@ -827,7 +824,7 @@ ctf_dwarf_float_base(ctf_die_t *cdp, Dwarf_Signed type, ctf_encoding_t *enc)
 	}
 
 	(void) snprintf(cdp->cd_errbuf, cdp->cd_errlen,
-	    "failed to find valid fp mapping for encoding %d, size %d bits\n",
+	    "failed to find valid fp mapping for encoding %d, size %d bits",
 	    type, enc->cte_bits);
 	return (EINVAL);
 }
@@ -1461,7 +1458,7 @@ ctf_dwarf_create_array(ctf_die_t *cdp, Dwarf_Die die, ctf_id_t *idp, int isroot)
 		return (ret);
 	if (rtag != DW_TAG_subrange_type) {
 		(void) snprintf(cdp->cd_errbuf, cdp->cd_errlen,
-		    "encountered array without DW_TAG_subrange_type child\n");
+		    "encountered array without DW_TAG_subrange_type child");
 		return (ECTF_CONVBKERR);
 	}
 
@@ -1587,7 +1584,7 @@ ctf_dwarf_create_enum(ctf_die_t *cdp, Dwarf_Die die, ctf_id_t *idp, int isroot)
 			eval = (int)uval;
 		} else {
 			(void) snprintf(cdp->cd_errbuf, cdp->cd_errlen,
-			    "encountered enumration without constant value\n");
+			    "encountered enumration without constant value");
 			return (ECTF_CONVBKERR);
 		}
 
@@ -1601,7 +1598,7 @@ ctf_dwarf_create_enum(ctf_die_t *cdp, Dwarf_Die die, ctf_id_t *idp, int isroot)
 		ret = ctf_add_enumerator(cdp->cd_ctfp, id, name, eval);
 		if (ret == CTF_ERR) {
 			(void) snprintf(cdp->cd_errbuf, cdp->cd_errlen,
-			    "failed to add enumarator %s (%d) to %d\n",
+			    "failed to add enumarator %s (%d) to %d",
 			    name, eval, id);
 			ctf_free(name, strlen(name) + 1);
 			return (ctf_errno(cdp->cd_ctfp));
@@ -1692,7 +1689,7 @@ ctf_dwarf_convert_type(ctf_die_t *cdp, Dwarf_Die die, ctf_id_t *idp,
 
 	if (offset > cdp->cd_maxoff) {
 		(void) snprintf(cdp->cd_errbuf, cdp->cd_errlen,
-		    "die offset %llu beyond maximum for header %llu\n",
+		    "die offset %llu beyond maximum for header %llu",
 		    offset, cdp->cd_maxoff);
 		return (ECTF_CONVBKERR);
 	}
@@ -2053,7 +2050,7 @@ ctf_dwarf_walk_toplevel(ctf_die_t *cdp, Dwarf_Die die)
 
 	if (offset > cdp->cd_maxoff) {
 		(void) snprintf(cdp->cd_errbuf, cdp->cd_errlen,
-		    "die offset %llu beyond maximum for header %llu\n",
+		    "die offset %llu beyond maximum for header %llu",
 		    offset, cdp->cd_maxoff);
 		return (ECTF_CONVBKERR);
 	}
@@ -2670,14 +2667,14 @@ ctf_dwarf_count_dies(Dwarf_Debug dw, Dwarf_Error *derr, int *ndies,
 	    &nexthdr, derr)) != DW_DLV_NO_ENTRY) {
 		if (ret != DW_DLV_OK) {
 			(void) snprintf(errbuf, errlen,
-			    "file does not contain valid DWARF data: %s\n",
+			    "file does not contain valid DWARF data: %s",
 			    dwarf_errmsg(*derr));
 			return (ECTF_CONVBKERR);
 		}
 
 		if (vers != DWARF_VERSION_TWO) {
 			(void) snprintf(errbuf, errlen,
-			    "unsupported DWARF version: %d\n", vers);
+			    "unsupported DWARF version: %d", vers);
 			return (ECTF_CONVBKERR);
 		}
 		*ndies = *ndies + 1;
@@ -2685,8 +2682,7 @@ ctf_dwarf_count_dies(Dwarf_Debug dw, Dwarf_Error *derr, int *ndies,
 
 	if (*ndies == 0) {
 		(void) snprintf(errbuf, errlen,
-		    "file does not contain valid DWARF data: %s\n",
-		    dwarf_errmsg(*derr));
+		    "file does not contain any valid DWARF data");
 		return (ECTF_CONVBKERR);
 	}
 
@@ -2757,7 +2753,7 @@ ctf_dwarf_init_die(int fd, Elf *elf, ctf_die_t *cdp, int ndie, char *errbuf,
 		}
 		if (cu == NULL) {
 			(void) snprintf(errbuf, errlen,
-			    "file does not contain DWARF data\n");
+			    "file does not contain DWARF data");
 			avl_destroy(&cdp->cd_map);
 			ctf_free(cdp, sizeof (ctf_die_t));
 			return (ECTF_CONVBKERR);
@@ -2770,7 +2766,7 @@ ctf_dwarf_init_die(int fd, Elf *elf, ctf_die_t *cdp, int ndie, char *errbuf,
 		}
 		if (child == NULL) {
 			(void) snprintf(errbuf, errlen,
-			    "file does not contain DWARF data\n");
+			    "file does not contain DWARF data");
 			avl_destroy(&cdp->cd_map);
 			ctf_free(cdp, sizeof (ctf_die_t));
 			return (ECTF_CONVBKERR);
@@ -2828,7 +2824,7 @@ ctf_dwarf_convert(int fd, Elf *elf, uint_t nthrs, int *errp, ctf_file_t **fpp,
 			    CTF_CONV_ERROR);
 		}
 		(void) snprintf(errmsg, errlen,
-		    "failed to initialize DWARF: %s\n",
+		    "failed to initialize DWARF: %s",
 		    dwarf_errmsg(derr));
 		*errp = ECTF_CONVBKERR;
 		return (CTF_CONV_ERROR);
@@ -2855,7 +2851,7 @@ ctf_dwarf_convert(int fd, Elf *elf, uint_t nthrs, int *errp, ctf_file_t **fpp,
 		if (ret != 0) {
 			ctf_free(cdies, sizeof (ctf_die_t) * ndies);
 			(void) snprintf(errmsg, errlen,
-			    "failed to initialize DWARF: %s\n",
+			    "failed to initialize DWARF: %s",
 			    dwarf_errmsg(derr));
 			*errp = ECTF_CONVBKERR;
 			return (CTF_CONV_ERROR);
-- 
2.21.0

