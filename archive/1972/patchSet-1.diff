commit bf77080277250656e1bf6783f5ae8518d78140aa (refs/changes/72/1972/1)
Author: Trent Mick <trentm@gmail.com>
Date:   2017-05-18T10:39:48-07:00 (2 years, 5 months ago)
    
    TOOLS-1779 sdcadm refactor: move "ensure SAPI is in full mode" common handling to lib/steps/sapi.js

diff --git a/lib/post-setup/cmon.js b/lib/post-setup/cmon.js
index 5e90117..830770e 100644
--- a/lib/post-setup/cmon.js
+++ b/lib/post-setup/cmon.js
@@ -24,6 +24,8 @@ var errors = require('../errors'),
 var DownloadImages = require('../procedures/download-images').DownloadImages;
 var shared = require('../procedures/shared');
 var common = require('../common');
+var steps = require('../steps');
+
 
 function do_cmon(subcmd, opts, args, cb) {
     var self = this;
@@ -70,6 +72,7 @@ function do_cmon(subcmd, opts, args, cb) {
 
 
     var context = {
+        sdcadm: self.sdcadm,
         imgsToDownload: [],
         didSomething: false,
         serversToUpdate: null,
@@ -78,18 +81,7 @@ function do_cmon(subcmd, opts, args, cb) {
     };
 
     vasync.pipeline({arg: context, funcs: [
-        function ensureSapiMode(_, next) {
-            self.sdcadm.sapi.getMode(function (err, mode) {
-                if (err) {
-                    next(new errors.SDCClientError(err, 'sapi'));
-                } else if (mode !== 'full') {
-                    next(new errors.UpdateError(format(
-                        'SAPI is not in "full" mode: mode=%s', mode)));
-                } else {
-                    next();
-                }
-            });
-        },
+        steps.sapiAssertFullMode,
 
         function ensureCnsSvc(ctx, next) {
             self.sdcadm.sapi.listServices({
diff --git a/lib/post-setup/cns.js b/lib/post-setup/cns.js
index a9eff6d..6fb1517 100644
--- a/lib/post-setup/cns.js
+++ b/lib/post-setup/cns.js
@@ -20,6 +20,8 @@ var errors = require('../errors');
 var DownloadImages = require('../procedures/download-images').DownloadImages;
 var shared = require('../procedures/shared');
 var common = require('../common');
+var steps = require('../steps');
+
 
 function do_cns(subcmd, opts, args, cb) {
     var self = this;
@@ -63,10 +65,13 @@ function do_cns(subcmd, opts, args, cb) {
 
 
     var context = {
+        sdcadm: self.sdcadm,
         imgsToDownload: [],
         didSomething: false
     };
     vasync.pipeline({arg: context, funcs: [
+        steps.sapiAssertFullMode,
+
         /* @field ctx.cnsPkg */
         function getPkg(ctx, next) {
             var filter = {name: svcData.params.package_name,
@@ -85,20 +90,6 @@ function do_cns(subcmd, opts, args, cb) {
             });
         },
 
-        function ensureSapiMode(_, next) {
-            // Bail if SAPI not in 'full' mode.
-            self.sdcadm.sapi.getMode(function (err, mode) {
-                if (err) {
-                    next(new errors.SDCClientError(err, 'sapi'));
-                } else if (mode !== 'full') {
-                    next(new errors.UpdateError(format(
-                        'SAPI is not in "full" mode: mode=%s', mode)));
-                } else {
-                    next();
-                }
-            });
-        },
-
         function getSvc(ctx, next) {
             self.sdcadm.sapi.listServices({
                 name: 'cns',
diff --git a/lib/post-setup/docker.js b/lib/post-setup/docker.js
index 720b270..4ca5c33 100644
--- a/lib/post-setup/docker.js
+++ b/lib/post-setup/docker.js
@@ -70,6 +70,7 @@ function do_docker(subcmd, opts, args, cb) {
     };
 
     var context = {
+        sdcadm: self.sdcadm,
         imgsToDownload: [],
         downloadDir: '/var/tmp',
         serverFromUuidOrHostname: [],
@@ -77,6 +78,8 @@ function do_docker(subcmd, opts, args, cb) {
         urConnection: null
     };
     vasync.pipeline({arg: context, funcs: [
+        steps.sapiAssertFullMode,
+
         /* @field ctx.dockerPkg */
         function getDockerPkg(ctx, next) {
             var filter = {name: dockerSvcData.params.package_name,
@@ -95,20 +98,6 @@ function do_docker(subcmd, opts, args, cb) {
             });
         },
 
-        function ensureSapiMode(_, next) {
-            // Bail if SAPI not in 'full' mode.
-            self.sdcadm.sapi.getMode(function (err, mode) {
-                if (err) {
-                    next(new errors.SDCClientError(err, 'sapi'));
-                } else if (mode !== 'full') {
-                    next(new errors.UpdateError(format(
-                        'SAPI is not in "full" mode: mode=%s', mode)));
-                } else {
-                    next();
-                }
-            });
-        },
-
         function getSdcApp(ctx, next) {
             ctx.app = self.sdcadm.sdc;
             ctx.sdcadm = self.sdcadm;
diff --git a/lib/steps/sapi.js b/lib/steps/sapi.js
index cc0431d..bf7c6f3 100644
--- a/lib/steps/sapi.js
+++ b/lib/steps/sapi.js
@@ -6,13 +6,8 @@
 
 /*
  * Copyright 2017 Joyent, Inc.
- */
-
-/*
- * Steps for ensuring that SAPI has all the core type=agent services.
- * By "core" agents, we mean those installed by default on node setup
- * (which currently is those in the agentsshar) -- with the exception of the
- * marlin agent.
+ *
+ * Steps for doing some things with SAPI.
  */
 
 var assert = require('assert-plus');
@@ -29,6 +24,10 @@ var DRY_RUN = false; // An off-switch for dev/testing.
 /**
  * Ensure that SAPI has a service entry for the core agents.
  *
+ * By "core" agents, we mean those installed by default on node setup
+ * (which currently is those in the agentsshar) -- with the exception of the
+ * marlin agent.
+ *
  * Note on history: If changes are made, this will add a SAPI history item.
  * However, because the current sdcadm `History` API isn't that convenient
  * for building up changes for a single history item, we will NOT use the
@@ -297,10 +296,28 @@ function sapiEnsureAgentServices(arg, cb) {
 }
 
 
+function sapiAssertFullMode(arg, cb) {
+    assert.object(arg, 'arg');
+    assert.object(arg.sdcadm, 'arg.sdcadm');
+    assert.func(cb, 'cb');
+
+    arg.sdcadm.sapi.getMode(function (err, mode) {
+        if (err) {
+            cb(new errors.SDCClientError(err, 'sapi'));
+        } else if (mode !== 'full') {
+            cb(new errors.UpdateError(util.format(
+                'SAPI is not in "full" mode: mode=%s', mode)));
+        } else {
+            cb();
+        }
+    });
+}
+
 //---- exports
 
 module.exports = {
-    sapiEnsureAgentServices: sapiEnsureAgentServices
+    sapiEnsureAgentServices: sapiEnsureAgentServices,
+    sapiAssertFullMode: sapiAssertFullMode
 };
 
 // vim: set softtabstop=4 shiftwidth=4:
