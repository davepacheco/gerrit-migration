From 8bfc8e4fe6228cbe30ea4016de0858ec594879ec Mon Sep 17 00:00:00 2001
From: Dave Eddy <dave@daveeddy.com>
Date: Fri, 16 Nov 2018 14:10:39 -0500
Subject: [PATCH] OS-7368 vminfod has naive logic for determining zone deletion

---
 src/vm/node_modules/vminfod/vminfod.js |  82 +++++++++++--
 src/vm/tests/test-vminfod.js           | 159 ++++++++++++++++++++++++-
 2 files changed, 230 insertions(+), 11 deletions(-)

diff --git a/src/vm/node_modules/vminfod/vminfod.js b/src/vm/node_modules/vminfod/vminfod.js
index b59a2e60..6fe11e36 100644
--- a/src/vm/node_modules/vminfod/vminfod.js
+++ b/src/vm/node_modules/vminfod/vminfod.js
@@ -145,6 +145,7 @@
  */
 
 var EventEmitter = require('events').EventEmitter;
+var fs = require('fs');
 var http = require('http');
 var path = require('path');
 var url = require('url');
@@ -2046,12 +2047,80 @@ Vminfod.prototype.handleFsEvent = function handleFsEvent(obj) {
 
                 switch (obj.type) {
                 case 'delete':
-                    // delete the zone from the cache
-                    extras.log.debug('%s deleted', obj.pathname);
-                    self.deleteVmobj(zonename, callback);
+                    /*
+                     * A delete event has been seen for the zone's XML file.  It
+                     * is possible however that the zone has not actually
+                     * been deleted - this can happen in the event where a file
+                     * is moved to the location of the zones XML file, for
+                     * example:
+                     *
+                     * # cp /etc/zones/<uuid>.xml /var/tmp/
+                     * # mv /var/tmp/<uuid>.xml /etc/zones/
+                     *
+                     * This will trigger a delete event for the zone's XML file.
+                     *
+                     * To handle this situation, we follow up with a stat(2) on
+                     * the file to see if it is actually gone.  If the file is
+                     * gone, we delete the vmobj from our cache and emit a
+                     * "delete" event.  If it is still present, we treat this
+                     * event as a "change" and not "delete" event.
+                     *
+                     * Because there is a delay from when the delete event is
+                     * seen, and when the stat(2) of the file is done, it is
+                     * possible that the zone could have been deleted and then a
+                     * new zone with the same name (zonename, not alias) was
+                     * created immediately after.  In this specific scenario,
+                     * vminfod will *not* be aware of that change, nor will
+                     * it notify its subscribers of it.  This is similar to how
+                     * if a ZFS modification (or really, any VM modification) is
+                     * done and then reverted right after, vminfod may miss the
+                     * transient state.
+                     *
+                     * This is OK, because tools like `vmadm` are vminfod-aware,
+                     * and will properly block on certain events (like "create"
+                     * or "delete") being seen by vminfod before proceeding.  If
+                     * a tool like `zonecfg` is used, or even just editing the
+                     * raw zone XML file (not advised), you are on your own.
+                     * vminfod will guarantee eventual consistency, but can't
+                     * guarantee that intermediate states will be seen or
+                     * reported.
+                     */
+                    extras.log.debug('%s delete event, checking file existence',
+                        obj.pathname);
+
+                    fs.stat(obj.pathname, function (err, stats) {
+                        if (err && err.code === 'ENOENT') {
+                            extras.log.debug('%s deleted, removing VM',
+                                obj.pathname);
+                            self.deleteVmobj(zonename, callback);
+                            return;
+                        }
+
+                        if (err) {
+                            extras.log.error(err, 'unexpected error stating %s',
+                                obj.pathname);
+                            callback();
+                            return;
+                        }
+
+                        extras.log.debug('%s still exists, updating zone data',
+                            obj.pathname);
+                        handleChange();
+                    });
                     break;
                 case 'change':
                     extras.log.debug('%s modified', obj.pathname);
+                    handleChange();
+                    break;
+                default:
+                    extras.log.warn({obj: obj},
+                        'unhandled fs change type "%s"',
+                        obj.type);
+                    callback();
+                    break;
+                }
+
+                function handleChange() {
                     self.cloneVmDatasets(zonename);
                     vm_datasets = self.vmDatasets(zonename);
 
@@ -2065,13 +2134,6 @@ Vminfod.prototype.handleFsEvent = function handleFsEvent(obj) {
                     self.invalidateZoneDataCache(zonename, vm_datasets,
                         contexts);
                     self.refreshVmobj(zonename, vm_datasets, callback);
-                    break;
-                default:
-                    extras.log.warn({obj: obj},
-                        'unhandled fs change type "%s"',
-                        obj.type);
-                    callback();
-                    break;
                 }
             }
         });
diff --git a/src/vm/tests/test-vminfod.js b/src/vm/tests/test-vminfod.js
index 7ff22165..999b0768 100644
--- a/src/vm/tests/test-vminfod.js
+++ b/src/vm/tests/test-vminfod.js
@@ -28,6 +28,7 @@ var assert = require('/usr/node/node_modules/assert-plus');
 var bunyan = require('/usr/vm/node_modules/bunyan');
 var common = require('./common');
 var f = require('util').format;
+var fs = require('fs');
 var libuuid = require('/usr/node/node_modules/uuid');
 var VM = require('/usr/vm/node_modules/VM');
 var vasync = require('/usr/vm/node_modules/vasync');
@@ -48,7 +49,7 @@ require('nodeunit-plus');
 var IMAGE_UUID = vmtest.CURRENT_SMARTOS_UUID;
 var PAYLOAD = {
     alias: f('test-vminfod-%d', process.pid),
-    autoboot: true,
+    autoboot: false,
     brand: 'joyent-minimal',
     do_not_inventory: true,
     image_uuid: IMAGE_UUID,
@@ -164,6 +165,162 @@ test('vminfod event stream timeout errors', function (t) {
     });
 });
 
+test('test vminfod zone XML delete event', function (t) {
+    var vmobj;
+    var xmlFile;
+    var tmpXmlFile;
+    var vs;
+
+    vasync.pipeline({funcs: [
+        // Create a vminfod stream
+        function (_, cb) {
+            vs = new vminfod.VminfodEventStream({
+                name: 'test-vminfod.js',
+                log: log
+            });
+            vs.on('ready', function () {
+                cb();
+            });
+        },
+
+        // Create a new VM
+        function (_, cb) {
+            VM.create(PAYLOAD, function (err, _vmobj) {
+                common.ifError(t, err, 'VM.create');
+
+                if (err) {
+                    cb(err);
+                    return;
+                }
+
+                vmobj = _vmobj;
+                assert.object(vmobj, 'vmobj');
+                assert.uuid(vmobj.zonename, 'vmobj.zonename');
+
+                xmlFile = f('/etc/zones/%s.xml', vmobj.zonename);
+                tmpXmlFile = f('/etc/zones/.%s.vminfod-test.xml',
+                    vmobj.zonename);
+                cb();
+            });
+        },
+
+        // Copy the zone's XML file
+        function (_, cb) {
+            var opts = {
+                encoding: 'utf8'
+            };
+
+            fs.readFile(xmlFile, opts, function (err, data) {
+                common.ifError(t, err, f('read %s', xmlFile));
+                if (err) {
+                    cb(err);
+                    return;
+                }
+
+                fs.writeFile(tmpXmlFile, data, opts, function (_err) {
+                    common.ifError(t, _err, f('write %s', tmpXmlFile));
+                    cb(_err);
+                });
+            });
+        },
+
+        /*
+         * Rename the temporary XML file to the zone's XML file location.  This
+         * will cause a "delete" event to be emmited via event ports and seen by
+         * vminfod.  vminfod should then stat(2) the XML file itself to see that
+         * it still exists, and *not* emit a delete event for the VM.
+         *
+         * This logic will simultaneously block on vminfod for the delete event
+         * to be seen (which shouldn't happen), and ensure that instead a
+         * timeout is seen.
+         */
+        function (_, cb) {
+            var cancelFn;
+
+            vasync.parallel({funcs: [
+                function (cb2) {
+                    // This event should *not* happen - we expect a timeout
+                    var obj = {
+                        type: 'delete',
+                        uuid: vmobj.uuid
+                    };
+                    var opts = {
+                        timeout: 5 * 1000,
+                        catchErrors: true,
+                        startFresh: true
+                    };
+
+                    cancelFn = vs.watchForEvent(obj, opts, function (err) {
+                        if (err && err.code === 'ETIMEOUT') {
+                            t.ok(true, 'vminfod watchForEvent timeout');
+                            cb2();
+                            return;
+                        }
+
+                        // if we are here, something is wrong
+                        if (err) {
+                            common.ifError(t, err,
+                                'vminfod watchForEvent delete');
+                        } else {
+                            t.ok(false, 'vminfod delete event seen!');
+                        }
+
+                        cb2(err);
+                    });
+                }, function (cb2) {
+                    fs.rename(tmpXmlFile, xmlFile, function (err) {
+                        common.ifError(t, err, f('rename %s -> %s',
+                            tmpXmlFile, xmlFile));
+
+                        if (err) {
+                            cancelFn(err);
+                            cb2(err);
+                            return;
+                        }
+
+                        cb2();
+                    });
+                }]
+            }, cb);
+        }
+
+    ]}, function (e) {
+        // catch any error above
+        common.ifError(t, e, 'test-vminfod-zone-xml-delete-event');
+
+        /*
+         * Cleanup
+         *
+         * Errors are handled by the test suite but ignored inside this call to
+         * vasync.pipeline to ensure all tasks are run.
+         */
+        vasync.pipeline({funcs: [
+            // Stop the vminfod stream
+            function (_, cb) {
+                if (vs) {
+                    vs.stop();
+                    vs = null;
+                }
+                cb();
+            },
+            // Remove the VM
+            function (_, cb) {
+                if (!vmobj) {
+                    cb();
+                    return;
+                }
+
+                VM.delete(vmobj.uuid, function (err) {
+                    common.ifError(t, err, 'VM.delete');
+                    cb();
+                });
+            }
+        ]}, function () {
+            t.end();
+        });
+    });
+});
+
 /*
  * OS-7365: vminfod crashes when restarting watches for nonexistent zone
  *
-- 
2.21.0

