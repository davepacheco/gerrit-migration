From d69e2ca89f32a9f9c2acefa0d37a0ef560f472dd Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Fri, 17 May 2019 19:11:52 +0200
Subject: [PATCH] TRITON-1325 node-triton fwrule support for cloud firewall
 logging

---
 lib/cloudapi2.js                     |   5 +
 lib/do_fwrule/do_create.js           |  18 +++-
 lib/do_fwrule/do_list.js             |   6 +-
 lib/do_fwrule/do_update.js           |   7 +-
 lib/do_instance/do_fwrule/do_list.js |   6 +-
 lib/do_instance/do_fwrule/index.js   |   2 +
 lib/do_instance/do_fwrules.js        |   2 +
 lib/tritonapi.js                     |   5 +-
 test/integration/cli-fwrules.test.js | 136 +++++++++++++++++++--------
 9 files changed, 134 insertions(+), 53 deletions(-)

diff --git a/lib/cloudapi2.js b/lib/cloudapi2.js
index 965c124..932d94c 100644
--- a/lib/cloudapi2.js
+++ b/lib/cloudapi2.js
@@ -2081,6 +2081,7 @@ function waitForNicStates(opts, cb) {
  * @param {Object} options object containing:
  *      - {String} rule (required) the fwrule text.
  *      - {Boolean} enabled (optional) default to false.
+ *      - {Boolean} log (optional) default to false.
  *      - {String} description (optional)
  * @param {Function} callback of the form f(err, fwrule, res).
  */
@@ -2090,6 +2091,7 @@ function createFirewallRule(opts, cb) {
     assert.string(opts.rule, 'opts.rule');
     assert.optionalString(opts.description, 'opts.description');
     assert.optionalBool(opts.enabled, 'opts.enabled');
+    assert.optionalBool(opts.log, 'opts.log');
 
     var data = {};
     Object.keys(this.UPDATE_FWRULE_FIELDS).forEach(function (attr) {
@@ -2145,6 +2147,7 @@ function getFirewallRule(id, cb) {
 // <updatable account field> -> <expected typeof>
 CloudApi.prototype.UPDATE_FWRULE_FIELDS = {
     enabled: 'boolean',
+    log: 'boolean',
     rule: 'string',
     description: 'string'
 };
@@ -2160,6 +2163,7 @@ CloudApi.prototype.UPDATE_FWRULE_FIELDS = {
  *      - {UUID} id: The fwrule id. Required.
  *      - {String} rule: The fwrule text. Required.
  *      - {Boolean} enabled: Optional.
+ *      - {Boolean} log: Optional.
  *      - {String} description: Description of the rule. Optional.
  * @param {Function} callback of the form `function (err, fwrule, res)`
  */
@@ -2169,6 +2173,7 @@ function updateFirewallRule(opts, cb) {
     assert.uuid(opts.id, 'opts.id');
     assert.string(opts.rule, 'opts.rule');
     assert.optionalBool(opts.enabled, 'opts.enabled');
+    assert.optionalBool(opts.log, 'opts.log');
     assert.optionalString(opts.description, 'opts.description');
     assert.func(cb, 'cb');
 
diff --git a/lib/do_fwrule/do_create.js b/lib/do_fwrule/do_create.js
index 8405f84..517f9fc 100644
--- a/lib/do_fwrule/do_create.js
+++ b/lib/do_fwrule/do_create.js
@@ -5,14 +5,12 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  *
  * `triton fwrule create ...`
  */
 
 var assert = require('assert-plus');
-var format = require('util').format;
-var vasync = require('vasync');
 
 var common = require('../common');
 var errors = require('../errors');
@@ -21,6 +19,7 @@ var errors = require('../errors');
 function do_create(subcmd, opts, args, cb) {
     assert.optionalString(opts.description, 'opts.description');
     assert.optionalBool(opts.disabled, 'opts.disabled');
+    assert.optionalBool(opts.log, 'opts.log');
     assert.func(cb, 'cb');
 
     if (opts.help) {
@@ -38,9 +37,15 @@ function do_create(subcmd, opts, args, cb) {
     var createOpts = {
         rule: args[0]
     };
+
     if (!opts.disabled) {
         createOpts.enabled = true;
     }
+
+    if (typeof (opts.log) !== undefined) {
+        createOpts.log = opts.log;
+    }
+
     if (opts.description) {
         createOpts.description = opts.description;
     }
@@ -76,6 +81,11 @@ do_create.options = [
         type: 'bool',
         help: 'JSON stream output.'
     },
+    {
+        names: ['log', 'l'],
+        type: 'bool',
+        help: 'Enable logging of all the TCP traffic matching rule.'
+    },
     {
         names: ['disabled', 'd'],
         type: 'bool',
@@ -95,6 +105,7 @@ do_create.synopses = ['{{name}} {{cmd}} [OPTIONS] RULE-TEXT'];
 
 do_create.help = [
     /* BEGIN JSSTYLED */
+    /* eslint-disable */
     'Create a firewall rule.',
     '',
     '{{usage}}',
@@ -111,6 +122,7 @@ do_create.help = [
     // https://github.com/joyent/sdc-fwrule/blob/master/docs/examples.md
     // or docs.jo Cloud Firewall examples? What link? Ditto in parent.
     /* END JSSTYLED */
+    /* eslint enable */
 ].join('\n');
 
 do_create.helpOpts = {
diff --git a/lib/do_fwrule/do_list.js b/lib/do_fwrule/do_list.js
index 78d6f23..fa8819b 100644
--- a/lib/do_fwrule/do_list.js
+++ b/lib/do_fwrule/do_list.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  *
  * `triton fwrule list ...`
  */
@@ -17,8 +17,8 @@ var common = require('../common');
 var errors = require('../errors');
 
 
-var COLUMNS_DEFAULT = 'shortid,enabled,global,rule';
-var COLUMNS_LONG = 'id,enabled,global,rule,description';
+var COLUMNS_DEFAULT = 'shortid,enabled,global,log,rule';
+var COLUMNS_LONG = 'id,enabled,global,log,rule,description';
 var SORT_DEFAULT = 'rule';
 
 
diff --git a/lib/do_fwrule/do_update.js b/lib/do_fwrule/do_update.js
index 99f1304..5e1c907 100644
--- a/lib/do_fwrule/do_update.js
+++ b/lib/do_fwrule/do_update.js
@@ -5,20 +5,19 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  *
  * `triton fwrule update ...`
  */
 
-var assert = require('assert-plus');
 var format = require('util').format;
 var fs = require('fs');
 var vasync = require('vasync');
 
 var common = require('../common');
 var errors = require('../errors');
-var UPDATE_FWRULE_FIELDS
-    = require('../cloudapi2').CloudApi.prototype.UPDATE_FWRULE_FIELDS;
+var UPDATE_FWRULE_FIELDS =
+    require('../cloudapi2').CloudApi.prototype.UPDATE_FWRULE_FIELDS;
 
 
 function do_update(subcmd, opts, args, cb) {
diff --git a/lib/do_instance/do_fwrule/do_list.js b/lib/do_instance/do_fwrule/do_list.js
index 5c01873..d44fc35 100644
--- a/lib/do_instance/do_fwrule/do_list.js
+++ b/lib/do_instance/do_fwrule/do_list.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  *
  * `triton instance fwrules ...`
  */
@@ -17,8 +17,8 @@ var common = require('../../common');
 var errors = require('../../errors');
 
 
-var COLUMNS_DEFAULT = 'shortid,enabled,global,rule';
-var COLUMNS_LONG = 'id,enabled,global,rule,description';
+var COLUMNS_DEFAULT = 'shortid,enabled,global,log,rule';
+var COLUMNS_LONG = 'id,enabled,global,log,rule,description';
 var SORT_DEFAULT = 'rule';
 
 
diff --git a/lib/do_instance/do_fwrule/index.js b/lib/do_instance/do_fwrule/index.js
index a2d974e..8213c1a 100644
--- a/lib/do_instance/do_fwrule/index.js
+++ b/lib/do_instance/do_fwrule/index.js
@@ -5,6 +5,8 @@
  */
 
 /*
+ * Copyright 2019 Joyent, Inc.
+ *
  * `triton instance fwrule ...`
  */
 
diff --git a/lib/do_instance/do_fwrules.js b/lib/do_instance/do_fwrules.js
index 62d9516..0b3ed72 100644
--- a/lib/do_instance/do_fwrules.js
+++ b/lib/do_instance/do_fwrules.js
@@ -5,6 +5,8 @@
  */
 
 /*
+ * Copyright 2019 Joyent, Inc.
+ *
  * `triton instance fwrules ...` shortcut for
  * `triton instance fwrule list ...`.
  */
diff --git a/lib/tritonapi.js b/lib/tritonapi.js
index 1e561da..c21d36b 100644
--- a/lib/tritonapi.js
+++ b/lib/tritonapi.js
@@ -2663,7 +2663,8 @@ TritonApi.prototype.getFirewallRule = function getFirewallRule(id, cb) {
     } else {
         this.cloudapi.listFirewallRules({}, function (err, fwrules) {
             if (err) {
-                return cb(err);
+                cb(err);
+                return;
             }
 
             var shortIdMatches = fwrules.filter(function (fwrule) {
@@ -2764,6 +2765,7 @@ function listFirewallRuleInstances(opts, cb) {
  *      - {String} id: The fwrule ID, or short ID. Required.
  *      - {String} rule: The fwrule text. Optional.
  *      - {Boolean} enabled: Default to false. Optional.
+ *      - {Boolean} log: Default to false. Optional.
  *      - {String} description: Description of the rule. Optional.
  *      At least one of the fields must be provided.
  * @param {Function} callback `function (err, fwrule, res)`
@@ -2773,6 +2775,7 @@ TritonApi.prototype.updateFirewallRule = function updateFirewallRule(opts, cb) {
     assert.string(opts.id, 'opts.id');
     assert.optionalString(opts.rule, 'opts.rule');
     assert.optionalBool(opts.enabled, 'opts.enabled');
+    assert.optionalBool(opts.log, 'opts.log');
     assert.optionalString(opts.description, 'opts.description');
     assert.ok(opts.rule !== undefined || opts.enabled !== undefined ||
         opts.description !== undefined, 'at least one of opts.rule, '
diff --git a/test/integration/cli-fwrules.test.js b/test/integration/cli-fwrules.test.js
index 312dec3..4856d3c 100644
--- a/test/integration/cli-fwrules.test.js
+++ b/test/integration/cli-fwrules.test.js
@@ -44,8 +44,10 @@ test('triton fwrule', testOpts, function (suite) {
 
     suite.test('  setup: triton create', function (t) {
         h.createTestInst(t, INST_ALIAS, {}, function onInst(err2, instId) {
-            if (h.ifErr(t, err2, 'triton instance create'))
-                return t.end();
+            if (h.ifErr(t, err2, 'triton instance create')) {
+                t.end();
+                return;
+            }
 
             INST = instId;
             RULE = RULE.replace('$id', INST);
@@ -58,10 +60,14 @@ test('triton fwrule', testOpts, function (suite) {
     suite.test('  triton fwrule create --disabled', function (t) {
         var cmd = f('fwrule create -d "%s"', RULE);
         h.triton(cmd, function (err, stdout, stderr) {
-            if (h.ifErr(t, err, 'triton fwrule create --disabled'))
-                return t.end();
+            if (h.ifErr(t, err, 'triton fwrule create --disabled')) {
+                t.end();
+                return;
+            }
+            /* eslint-disable max-len */
             /* JSSTYLED */
             var expected = /^Created firewall rule ([a-f0-9-]{36}) \(disabled\)$/m;
+            /* eslint-enable */
             var match = expected.exec(stdout);
             t.ok(match, f('stdout matches %s: %j', expected, stdout));
 
@@ -77,22 +83,27 @@ test('triton fwrule', testOpts, function (suite) {
         var cmd = 'fwrule get ' + ID;
 
         h.triton(cmd, function (err, stdout, stderr) {
-            if (h.ifErr(t, err, 'triton fwrule get'))
-                return t.end();
+            if (h.ifErr(t, err, 'triton fwrule get')) {
+                t.end();
+                return;
+            }
 
             var obj = JSON.parse(stdout);
             t.equal(obj.rule, RULE, 'fwrule rule is correct');
             t.equal(obj.enabled, false, 'fwrule is disabled');
+            t.equal(obj.log, false, 'fwrule is not logging');
             t.end();
         });
     });
 
     suite.test('  triton fwrule create', function (t) {
-        var cmd = f('fwrule create -D "%s" "%s"', DESC, RULE);
+        var cmd = f('fwrule create -D "%s" "%s" --log=true', DESC, RULE);
 
         h.triton(cmd, function (err, stdout, stderr) {
-            if (h.ifErr(t, err, 'triton fwrule create'))
-                return t.end();
+            if (h.ifErr(t, err, 'triton fwrule create')) {
+                t.end();
+                return;
+            }
 
             /* JSSTYLED */
             var expected = /^Created firewall rule ([a-f0-9-]{36})$/m;
@@ -111,13 +122,16 @@ test('triton fwrule', testOpts, function (suite) {
         var cmd = 'fwrule get ' + ID;
 
         h.triton(cmd, function (err, stdout, stderr) {
-            if (h.ifErr(t, err, 'triton fwrule get'))
-                return t.end();
+            if (h.ifErr(t, err, 'triton fwrule get')) {
+                t.end();
+                return;
+            }
 
             var obj = JSON.parse(stdout);
             t.equal(obj.rule, RULE, 'fwrule rule is correct');
             t.equal(obj.description, DESC, 'fwrule was properly created');
             t.equal(obj.enabled, true, 'fwrule enabled defaults to true');
+            t.equal(obj.log, true, 'fwrule log is to true');
             t.end();
         });
     });
@@ -126,8 +140,10 @@ test('triton fwrule', testOpts, function (suite) {
         var cmd = 'fwrule enable ' + ID;
 
         h.triton(cmd, function (err, stdout, stderr) {
-            if (h.ifErr(t, err, 'triton fwrule enable'))
-                return t.end();
+            if (h.ifErr(t, err, 'triton fwrule enable')) {
+                t.end();
+                return;
+            }
 
             t.ok(stdout.match('Enabled firewall rule ' + ID));
 
@@ -139,8 +155,10 @@ test('triton fwrule', testOpts, function (suite) {
         var cmd = 'fwrule disable ' + ID;
 
         h.triton(cmd, function (err, stdout, stderr) {
-            if (h.ifErr(t, err, 'triton fwrule disable'))
-                return t.end();
+            if (h.ifErr(t, err, 'triton fwrule disable')) {
+                t.end();
+                return;
+            }
 
             t.ok(stdout.match('Disabled firewall rule ' + ID));
 
@@ -152,8 +170,10 @@ test('triton fwrule', testOpts, function (suite) {
         var cmd = 'fwrule update ' + ID + ' rule="' + RULE2 + '"';
 
         h.triton(cmd, function (err, stdout, stderr) {
-            if (h.ifErr(t, err, 'triton fwrule update'))
-                return t.end();
+            if (h.ifErr(t, err, 'triton fwrule update')) {
+                t.end();
+                return;
+            }
 
             t.ok(stdout.match('Updated firewall rule ' + ID +
                  ' \\(fields: rule\\)'));
@@ -162,10 +182,28 @@ test('triton fwrule', testOpts, function (suite) {
         });
     });
 
+    suite.test('  triton fwrule update log', function (t) {
+        var cmd = 'fwrule update ' + ID + ' log=false';
+
+        h.triton(cmd, function (err, stdout, stderr) {
+            if (h.ifErr(t, err, 'triton fwrule update log')) {
+                t.end();
+                return;
+            }
+
+            t.ok(stdout.match('Updated firewall rule ' + ID +
+                 ' \\(fields: log\\)'));
+
+            t.end();
+        });
+    });
+
     suite.test('  triton fwrule list', function (t) {
         h.triton('fwrule list -l', function (err, stdout, stderr) {
-            if (h.ifErr(t, err, 'triton fwrule list'))
-                return t.end();
+            if (h.ifErr(t, err, 'triton fwrule list')) {
+                t.end();
+                return;
+            }
 
             var rules = stdout.split('\n');
             t.ok(rules[0].match(/ID\s+ENABLED\s+GLOBAL\s+RULE\s+DESCRIPTION/));
@@ -185,8 +223,10 @@ test('triton fwrule', testOpts, function (suite) {
 
     suite.test('  triton fwrules', function (t) {
         h.triton('fwrules -l', function (err, stdout, stderr) {
-            if (h.ifErr(t, err, 'triton fwrule list'))
-                return t.end();
+            if (h.ifErr(t, err, 'triton fwrule list')) {
+                t.end();
+                return;
+            }
 
             var rules = stdout.split('\n');
             t.ok(rules[0].match(/ID\s+ENABLED\s+GLOBAL\s+RULE\s+DESCRIPTION/));
@@ -206,8 +246,10 @@ test('triton fwrule', testOpts, function (suite) {
 
     suite.test('  triton fwrule instances', function (t) {
         h.triton('fwrule instances -l ' + ID, function (err, stdout, stderr) {
-            if (h.ifErr(t, err, 'triton fwrule instances'))
-                return t.end();
+            if (h.ifErr(t, err, 'triton fwrule instances')) {
+                t.end();
+                return;
+            }
 
             var machines = stdout.split('\n').filter(function (machine) {
                 return machine !== '';
@@ -215,8 +257,10 @@ test('triton fwrule', testOpts, function (suite) {
             t.ok(machines[0].match(/ID\s+NAME\s+IMG\s+BRAND/));
             machines.shift();
 
-            if (!INST)
-                return t.end();
+            if (!INST) {
+                t.end();
+                return;
+            }
 
             t.equal(machines.length, 1, 'triton fwrule instances expected ' +
                     'num machines');
@@ -234,8 +278,10 @@ test('triton fwrule', testOpts, function (suite) {
 
     suite.test('  triton instance fwrules', function (t) {
         h.triton('instance fwrules -l ' + INST, function (err, stdout, stderr) {
-            if (h.ifErr(t, err, 'triton fwrule list'))
-                return t.end();
+            if (h.ifErr(t, err, 'triton fwrule list')) {
+                t.end();
+                return;
+            }
 
             var rules = stdout.split('\n');
             t.ok(rules[0].match(/ID\s+ENABLED\s+GLOBAL\s+RULE\s+DESCRIPTION/));
@@ -256,8 +302,10 @@ test('triton fwrule', testOpts, function (suite) {
     suite.test('  triton instance fwrule list', function (t) {
         h.triton('instance fwrule list -l ' + INST,
             function (err, stdout, stderr) {
-            if (h.ifErr(t, err, 'triton fwrule list'))
-                return t.end();
+            if (h.ifErr(t, err, 'triton fwrule list')) {
+                t.end();
+                return;
+            }
 
             var rules = stdout.split('\n');
             t.ok(rules[0].match(/ID\s+ENABLED\s+GLOBAL\s+RULE\s+DESCRIPTION/));
@@ -278,8 +326,10 @@ test('triton fwrule', testOpts, function (suite) {
     suite.test('  triton fwrule delete', function (t) {
         var cmd = 'fwrule delete ' + ID + ' --force';
         h.triton(cmd, function (err, stdout, stderr) {
-            if (h.ifErr(t, err, 'triton fwrule delete'))
-                return t.end();
+            if (h.ifErr(t, err, 'triton fwrule delete')) {
+                t.end();
+                return;
+            }
 
             t.ok(stdout.match('Deleted rule ' + ID + ''), 'rule deleted');
 
@@ -290,15 +340,19 @@ test('triton fwrule', testOpts, function (suite) {
     suite.test('  triton instance enable-firewall', function (t) {
         var cmd = 'instance enable-firewall ' + INST + ' -w';
         h.triton(cmd, function (err, stdout, stderr) {
-            if (h.ifErr(t, err, 'triton instance enable-firewall'))
-                return t.end();
+            if (h.ifErr(t, err, 'triton instance enable-firewall')) {
+                t.end();
+                return;
+            }
 
             t.ok(stdout.match('Enabled firewall for instance "' + INST + '"'),
                  'firewall enabled');
 
             h.triton('instance get -j ' + INST, function (err2, stdout2) {
-                if (h.ifErr(t, err2, 'triton instance get'))
-                    return t.end();
+                if (h.ifErr(t, err2, 'triton instance get')) {
+                    t.end();
+                    return;
+                }
 
                 var inst = JSON.parse(stdout2);
                 t.equal(inst.firewall_enabled, true);
@@ -311,15 +365,19 @@ test('triton fwrule', testOpts, function (suite) {
     suite.test('  triton instance disable-firewall', function (t) {
         var cmd = 'instance disable-firewall ' + INST + ' -w';
         h.triton(cmd, function (err, stdout, stderr) {
-            if (h.ifErr(t, err, 'triton instance disable-firewall'))
-                return t.end();
+            if (h.ifErr(t, err, 'triton instance disable-firewall')) {
+                t.end();
+                return;
+            }
 
             t.ok(stdout.match('Disabled firewall for instance "' + INST + '"'),
                  'firewall disabled');
 
             h.triton('instance get -j ' + INST, function (err2, stdout2) {
-                if (h.ifErr(t, err2, 'triton instance get'))
-                    return t.end();
+                if (h.ifErr(t, err2, 'triton instance get')) {
+                    t.end();
+                    return;
+                }
 
                 var inst = JSON.parse(stdout2);
                 t.equal(inst.firewall_enabled, false);
-- 
2.21.0

