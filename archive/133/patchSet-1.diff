From 5fdb7f9c3b68f27bd3437d00e2309fc36a6c13eb Mon Sep 17 00:00:00 2001
From: Todd Whiteman <todd.whiteman@joyent.com>
Date: Fri, 22 Jul 2016 15:53:22 -0700
Subject: [PATCH] DOCKER-892: docker history: add Tag information to returned
 history entries

---
 lib/backends/sdc/images.js          | 38 +++++++++++++++++++----------
 lib/backends/sdc/index.js           |  1 +
 lib/endpoints/images.js             | 30 ++++++++++++++++++++---
 lib/models/image.js                 | 19 ++++++++++++---
 test/integration/api-images.test.js | 14 +++++++++++
 5 files changed, 82 insertions(+), 20 deletions(-)

diff --git a/lib/backends/sdc/images.js b/lib/backends/sdc/images.js
index b266573..4037b0d 100644
--- a/lib/backends/sdc/images.js
+++ b/lib/backends/sdc/images.js
@@ -118,6 +118,26 @@ function dockerImageJsonToModel(imageJson, opts) {
 }
 
 
+/**
+ * Return the list of tags for the given image.
+ */
+function getTagsForImage(img, opts, callback) {
+    assert.object(img, 'img');
+    assert.object(opts, 'opts');
+    assert.object(opts.app, 'opts.app');
+    assert.object(opts.log, 'opts.log');
+    assert.func(callback, 'callback');
+    var filter = {
+        docker_id: img.docker_id,
+        owner_uuid: img.owner_uuid,
+        // Note: There is currently a sdc-docker limitation that an image can
+        // only be tagged in one registry (i.e. index_name).
+        index_name: img.index_name
+    };
+    ImageTag.list(opts.app, opts.log, filter, callback);
+}
+
+
 /**
  * Get all the images available to the given account.
  *
@@ -339,12 +359,8 @@ function listImages(opts, callback) {
                 return;
             }
 
-            var getParams = {
-                owner_uuid: img.owner_uuid,
-                index_name: img.index_name,
-                docker_id: img.docker_id
-            };
-            ImageTag.list(app, log, getParams, function (err, imgTag) {
+            getTagsForImage(serialized, { app: app, log: log },
+                function (err, imgTag) {
                 if (err) {
                     cb(err);
                     return;
@@ -1343,13 +1359,8 @@ function inspectImage(opts, callback) {
                 'No such image: ' + opts.name));
         } else {
             // Get tags and return inspect info.
-            var filter = [
-                {owner_uuid: opts.account.uuid, docker_id: img.docker_id}
-            ];
-            if (opts.index_name) {
-                filter[0].index_name = opts.index_name;
-            }
-            ImageTag.list(opts.app, opts.log, filter, function (err2, imgTags) {
+            getTagsForImage(img, { app: opts.app, log: opts.log },
+                function (err2, imgTags) {
                 if (err2) {
                     callback(err2);
                     return;
@@ -1731,6 +1742,7 @@ module.exports = {
     getDockerImageForUuid: getDockerImageForUuid,
     getImageHistory: getImageHistory,
     getScratchImage: getScratchImage,
+    getTagsForImage: getTagsForImage,
     listImages: listImages,
     inspectImage: inspectImage,
     pullImage: pullImage,
diff --git a/lib/backends/sdc/index.js b/lib/backends/sdc/index.js
index ca536d0..caa9ae5 100644
--- a/lib/backends/sdc/index.js
+++ b/lib/backends/sdc/index.js
@@ -74,6 +74,7 @@ SdcBackend.prototype.inspectImage = images.inspectImage;
 SdcBackend.prototype.pullImage = images.pullImage;
 SdcBackend.prototype.imgFromName = images.imgFromName;
 SdcBackend.prototype.tagImage = images.tagImage;
+SdcBackend.prototype.getTagsForImage = images.getTagsForImage;
 
 // build.js
 SdcBackend.prototype.buildImage = build.buildImage;
diff --git a/lib/endpoints/images.js b/lib/endpoints/images.js
index 5d3f081..f3ec3db 100644
--- a/lib/endpoints/images.js
+++ b/lib/endpoints/images.js
@@ -161,10 +161,32 @@ function imageHistory(req, res, next) {
             next(histErr);
             return;
         }
-        var historyItems = history.map(
-            function (i) { return i.toHistoryItem(); });
-        res.send(historyItems);
-        next();
+
+        // Need to fetch the tags for each image as well.
+        var tagOpts = {
+            app: req.app,
+            log: req.log
+        };
+        vasync.forEachPipeline({
+            func: function (histImg, cb) {
+                req.backend.getTagsForImage(histImg, tagOpts,
+                    function (tagErr, tags) {
+                    if (tagErr) {
+                        cb(tagErr);
+                        return;
+                    }
+                    cb(null, histImg.toHistoryItem(tags));
+                });
+            },
+            inputs: history
+        }, function (vErr, results) {
+            if (vErr) {
+                next(vErr);
+                return;
+            }
+            res.send(results.successes);
+            next();
+        });
     });
 }
 
diff --git a/lib/models/image.js b/lib/models/image.js
index 87d7146..63c66b2 100644
--- a/lib/models/image.js
+++ b/lib/models/image.js
@@ -186,18 +186,31 @@ Image.prototype.toJSON =
 };
 
 
-Image.prototype.toHistoryItem = function toHistoryItem() {
+/**
+ * Converts the Image and ImageTags to the docker history object format.
+ */
+Image.prototype.toHistoryItem = function toHistoryItem(imgTags) {
     var createdBy = '';
     if (this.container_config && this.container_config.Cmd) {
         createdBy = this.container_config.Cmd.join(' ');
     }
     var created = Math.floor((new Date(this.created)).getTime() / 1000);
-    return {
+    var item = {
         Id: this.docker_id,
         Created: created,
         CreatedBy: createdBy,
-        Size: this.size
+        Tags: null,
+        Size: this.size,
+        Comment: this.comment
     };
+    if (imgTags) {
+        item.Tags = imgTags.map(
+            function (it) {
+                return it.repo + ':' + it.tag;
+            }
+        );
+    }
+    return item;
 };
 
 
diff --git a/test/integration/api-images.test.js b/test/integration/api-images.test.js
index bdb25f7..57a711a 100644
--- a/test/integration/api-images.test.js
+++ b/test/integration/api-images.test.js
@@ -115,6 +115,20 @@ test('docker images', function (tt) {
     });
 
 
+    // Make sure image history includes the tags - DOCKER-892.
+    tt.test('ensure ubuntu image has valid history', function (t) {
+        DOCKER_ALICE.get('/images/ubuntu:latest/history',
+                function (err, req, res, history) {
+            t.error(err, 'should be no error retrieving image history');
+            t.ok(history.length, 'history array should not be empty');
+            var tags = history[0].Tags;
+            t.ok(tags && tags.indexOf('ubuntu:latest') !== -1,
+                'history tags should include "ubuntu:latest", got ' + tags);
+            t.end();
+        });
+    });
+
+
     tt.test('delete image', function (t) {
         DOCKER_ALICE.del('/images/ubuntu', ondel);
         function ondel(err, req, res) {
-- 
2.21.0

