From f8bf325b5e6822f1aefd006d91fa5ebef183af49 Mon Sep 17 00:00:00 2001
From: Julien Gilli <julien.gilli@joyent.com>
Date: Fri, 11 Aug 2017 15:20:19 -0700
Subject: [PATCH] DOCKER-1088 sdc-docker should not modify VMs' internal
 docker:nfsvolumes metadata

---
 lib/endpoints/volumes.js |  5 +++--
 volapi-updater.js        | 28 ++++++++++++++++++----------
 2 files changed, 21 insertions(+), 12 deletions(-)

diff --git a/lib/endpoints/volumes.js b/lib/endpoints/volumes.js
index 52befeb..b65818c 100644
--- a/lib/endpoints/volumes.js
+++ b/lib/endpoints/volumes.js
@@ -363,8 +363,9 @@ function validateCreateVolume(req, res, next) {
         validationErrs.push(validationErr);
     }
 
-    if (!Array.isArray(req.params.networks)) {
-        validationErrs.push(new Error('networks must be an array'));
+    if (!Array.isArray(req.params.networks) ||
+        req.params.networks.length === 0) {
+        validationErrs.push(new Error('networks must be a non-empty array'));
     } else {
         networkValidationErrs =
             req.params.networks
diff --git a/volapi-updater.js b/volapi-updater.js
index 95ddf84..d62e550 100644
--- a/volapi-updater.js
+++ b/volapi-updater.js
@@ -839,7 +839,7 @@ function updateReferencesAndReservationsForVm(vmUuid, options, callback) {
                     next(getVmErr);
                 });
             },
-            function loadVolumesRefedByAbsentVm(ctx, next) {
+            function loadVolumesRefedByVmWithNoVolumesInfo(ctx, next) {
                 var listVolumesParams;
 
                 if (ctx.shouldAddReferences !== true &&
@@ -854,13 +854,16 @@ function updateReferencesAndReservationsForVm(vmUuid, options, callback) {
 
                 /*
                  * When the VM for which we update its volume references and
-                 * reservations does not exist, we can't load the volumes that
-                 * it might have referenced if and when it existed. Moreover,
-                 * since VMAPI doesn't delete VMs, the VM can only be absent
-                 * from VMAPI when we're updating references and reservations as
-                 * a result of a workflow failing or being in the state
-                 * "executing" for too long, and that somehow the VM object was
-                 * not created in VMAPI. So we're in either of two cases:
+                 * reservations does not exist, or does not have any data about
+                 * the volumes it requires, we can't load the volumes that
+                 * it might have referenced if and when it existed.
+                 *
+                 * If we're dealing with a non-existent VM, and since VMAPI
+                 * doesn't delete VMs, the VM can only be absent from VMAPI when
+                 * we're updating references and reservations as a result of a
+                 * workflow failing or being in the state "executing" for too
+                 * long, and that somehow the VM object was not created in
+                 * VMAPI. So we're in either of two cases:
                  *
                  * 1. The VM actually exists on a CN, and will eventually show
                  *    up in VMAPI because vm-agent will PUT it. References may
@@ -876,7 +879,7 @@ function updateReferencesAndReservationsForVm(vmUuid, options, callback) {
                  *
                  * In both cases, it is fine to delete any reservation.
                  */
-                if (ctx.vm !== undefined) {
+                if (ctx.vm !== undefined && ctx.vm.volumes !== undefined) {
                     next();
                     return;
                 }
@@ -909,6 +912,7 @@ function updateReferencesAndReservationsForVm(vmUuid, options, callback) {
             },
             function loadVolumesRefedByExistentVm(ctx, next) {
                 var requiredVolumes = [];
+                var volumeNames;
                 var volumeOwnerUuid;
 
                 if (ctx.shouldAddReferences !== true &&
@@ -927,6 +931,10 @@ function updateReferencesAndReservationsForVm(vmUuid, options, callback) {
                     return;
                 }
 
+                volumeNames = ctx.vm.volumes.map(function getVolNames(volume) {
+                    mod_assert.string(volume.name, 'volume.name');
+                    return volume.name;
+                });
                 volumeOwnerUuid = ctx.vm.owner_uuid;
 
                 log.info({
@@ -981,7 +989,7 @@ function updateReferencesAndReservationsForVm(vmUuid, options, callback) {
                             done();
                         });
                     },
-                    inputs: ctx.vm.volumes
+                    inputs: volumeNames
                 }, function onRequiredVolsLoaded(loadErr) {
                     ctx.volumesToProcess = requiredVolumes;
                     next(loadErr);
-- 
2.21.0

