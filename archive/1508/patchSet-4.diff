commit 889164a8b1c89c233307f3488f71978ef7e2578d
Author: YangYong3 <yy1111.yang@samsung.com>
Date:   2017-03-02T12:29:45+09:00 (2 years, 7 months ago)
    
    joyent/node-triton#171 Add support for instance metadata to node-triton.

diff --git a/lib/cloudapi2.js b/lib/cloudapi2.js
index f872baa..01b693f 100644
--- a/lib/cloudapi2.js
+++ b/lib/cloudapi2.js
@@ -1412,6 +1412,120 @@ function deleteMachineSnapshot(opts, cb) {
     });
 };
 
+// --- metadatas
+
+/**
+ * Updates a new metadata for a given machine.
+ *
+ * Returns a metadata object.
+ *
+ * @param {Object} options object containing:
+ *      - {String} id (required) the machine's id.
+ *      - {String} name (optional) name for new metadata
+ * @param {Function} callback of the form f(err, metadata, res).
+ */
+CloudApi.prototype.updateMachineMetadata =
+function updateMachineMetadata(opts, cb) {
+    assert.object(opts, 'opts');
+    assert.uuid(opts.id, 'opts.id');
+    assert.object(opts.metas, 'opts.metas');
+    assert.func(cb, 'cb');
+
+    this._request({
+        method: 'POST',
+        path: format('/%s/machines/%s/metadata', this.account, opts.id),
+        data: opts.metas
+    }, function (err, req, res, body) {
+        cb(err, body, res);
+    });
+};
+
+/**
+ * Lists all metadatas for a given machine.
+ *
+ * Returns a list of metadata objects.
+ *
+ * @param {Object} options object containing:
+ *      - {String} id (required) the machine's id.
+ * @param {Function} callback of the form f(err, metadata, res).
+ */
+CloudApi.prototype.listMachineMetadatas =
+function listMachineMetadatas(opts, cb) {
+    assert.object(opts, 'opts');
+    assert.uuid(opts.id, 'opts.id');
+    assert.func(cb, 'cb');
+
+    var endpoint = format('/%s/machines/%s/metadata', this.account, opts.id);
+    this._passThrough(endpoint, opts, cb);
+};
+
+/**
+ * Get a single metadata for a given machine.
+ *
+ * Returns a metadata object.
+ *
+ * @param {Object} options object containing:
+ *      - {String} id (required) the machine's id.
+ *      - {String} name (required) the metadata's name.
+ * @param {Function} callback of the form f(err, metadata, res).
+ */
+CloudApi.prototype.getMachineMetadata =
+function getMachineMetadata(opts, cb) {
+    assert.object(opts, 'opts');
+    assert.uuid(opts.id, 'opts.id');
+    assert.string(opts.name, 'opts.name');
+    assert.func(cb, 'cb');
+
+    var endpoint = format('/%s/machines/%s/metadata/%s',
+        this.account, opts.id, opts.name);
+    this._passThrough(endpoint, opts, cb);
+};
+
+/**
+ * Deletes a machine metadata.
+ *
+ * @param {Object} options object containing:
+ *      - {String} id (required) the machine's id.
+ *      - {String} key(required).
+ * @param {Function} callback of the form f(err, res).
+ */
+CloudApi.prototype.deleteMachineMetadata =
+function deleteMachineMetadata(opts, cb) {
+    assert.object(opts, 'opts');
+    assert.uuid(opts.id, 'opts.id');
+    assert.string(opts.key, 'opts.key');
+    assert.func(cb, 'cb');
+
+    this._request({
+        method: 'DELETE',
+        path: format('/%s/machines/%s/metadata/%s',
+            this.account, opts.id, opts.key)
+    }, function (err, req, res) {
+        cb(err, res);
+    });
+};
+
+/**
+ * DeleteAll a machine metadata.
+ *
+ * @param {Object} options object containing:
+ *      - {String} id (required) the machine's id.
+ * @param {Function} callback of the form f(err, res).
+ */
+CloudApi.prototype.deleteAllMachineMetadata =
+function deleteAllMachineMetadata(opts, cb) {
+    assert.object(opts, 'opts');
+    assert.uuid(opts.id, 'opts.id');
+    assert.func(cb, 'cb');
+
+    this._request({
+        method: 'DELETE',
+        path: format('/%s/machines/%s/metadata', this.account, opts.id)
+    }, function (err, req, res) {
+        cb(err, res);
+    });
+};
+
 
 // --- firewall rules
 
diff --git a/lib/do_instance/do_metadata/do_delete.js b/lib/do_instance/do_metadata/do_delete.js
new file mode 100644
index 0000000..a9a2ac5
--- /dev/null
+++ b/lib/do_instance/do_metadata/do_delete.js
@@ -0,0 +1,154 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2016 Joyent, Inc.
+ *
+ * `triton metadata delete ...`
+ */
+
+var assert = require('assert-plus');
+var format = require('util').format;
+var vasync = require('vasync');
+
+var common = require('../../common');
+var errors = require('../../errors');
+
+
+function do_delete(subcmd, opts, args, cb) {
+    assert.func(cb, 'cb');
+    if (opts.help) {
+        this.do_help('help', {}, [subcmd], cb);
+        return;
+    }
+    if (!opts.all && args.length < 2) {
+        cb(new errors.UsageError('missing INST and METADATA argument(s)'));
+        return;
+    }
+
+    var cli = this.top;
+    var inst = args[0];
+    var names = args.slice(1, args.length);
+
+    vasync.pipeline({arg: {cli: this.top}, funcs: [
+        common.cliSetupTritonApi,
+        function confirm(_, next) {
+            if (opts.force) {
+                return next();
+            }
+
+            var msg;
+            if (opts.all) {
+                msg = 'Delete All metadata ? [y/n]';
+            } else if (names.length === 1) {
+                msg = 'Delete metadata "' + names[0] + '"? [y/n] ';
+            } else {
+                msg = format('Delete %d metadatas (%s)? [y/n] ',
+                    names.length, names.join(', '));
+            }
+
+            common.promptYesNo({msg: msg}, function (answer) {
+                if (answer !== 'y') {
+                    console.error('Aborting');
+                    next(true); // early abort signal
+                } else {
+                    next();
+                }
+            });
+        },
+
+        function deleteThem(ctx, next) {
+            if (opts.all) {
+                cli.tritonapi.deleteAllInstanceMetadata({
+                    id: inst,
+                    wait: opts.wait,
+                    waitTimeout: opts.wait_timeout * 1000
+                }, function (err) {
+                    console.log('Deleted all metadatas on instance %s', inst);
+                    next(err);
+                });
+
+           } else {
+                vasync.forEachParallel({
+                    inputs: names,
+                    func: function deleteOne(name, nextName) {
+                        cli.tritonapi.deleteInstanceMetadata({
+                            id: inst,
+                            key: name,
+                            wait: opts.wait,
+                            waitTimeout: opts.wait_timeout * 1000
+                        }, function (err, res) {
+                            if (err) {
+                                next(err);
+                                return;
+                            }
+                            var instId = res.instId;
+                            var msg = 'Deleted metadata %s of instance "%s"';
+                            console.log(msg, name, instId);
+                        });
+                    }
+                }, next);
+            }
+        }
+    ]}, function (err) {
+        if (err === true) {
+            err = null;
+        }
+        cb(err);
+    });
+}
+
+
+do_delete.options = [
+    {
+        names: ['help', 'h'],
+        type: 'bool',
+        help: 'Show this help.'
+    },
+    {
+        names: ['force', 'f'],
+        type: 'bool',
+        help: 'Skip confirmation of delete.'
+    },
+    {
+        names: ['all', 'a'],
+        type: 'bool',
+        help: 'Remove all metadatas on this instance.'
+    },
+    {
+        names: ['wait', 'w'],
+        type: 'bool',
+        help: 'Block until renaming instance is complete.'
+    },
+    {
+        names: ['wait-timeout'],
+        type: 'positiveInteger',
+        default: 120,
+        help: 'The number of seconds to wait before timing out with an error. '
+            + 'The default is 120 seconds.'
+    }
+];
+
+do_delete.synopses = ['{{name}} {{cmd}} [OPTIONS] INST KEY',
+                      '{{name}} {{cmd}} [OPTIONS] --all INST'];
+
+do_delete.help = [
+    'Delete one or more instance metadatas.',
+    '',
+    '{{usage}}',
+    '',
+    '{{options}}',
+    '',
+    'Where INST is an instance id, name, or shortid and NAME ' +
+    'is a metadata name.'
+
+].join('\n');
+
+do_delete.aliases = ['rm'];
+
+do_delete.completionArgtypes = ['tritoninstance', 'none'];
+
+module.exports = do_delete;
diff --git a/lib/do_instance/do_metadata/do_get.js b/lib/do_instance/do_metadata/do_get.js
new file mode 100644
index 0000000..e08f9c7
--- /dev/null
+++ b/lib/do_instance/do_metadata/do_get.js
@@ -0,0 +1,87 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2016 Joyent, Inc.
+ *
+ * `triton metadata get ...`
+ */
+
+var assert = require('assert-plus');
+
+var common = require('../../common');
+var errors = require('../../errors');
+
+
+function do_get(subcmd, opts, args, cb) {
+    assert.func(cb, 'cb');
+
+    if (opts.help) {
+        this.do_help('help', {}, [subcmd], cb);
+        return;
+    }
+
+    if (args.length < 2) {
+        cb(new errors.UsageError('missing INST and/or METANAME arguments'));
+        return;
+    } else if (args.length > 2) {
+        cb(new errors.UsageError('incorrect number of arguments'));
+        return;
+    }
+
+    var id = args[0];
+    var name = args[1];
+    var cli = this.top;
+
+    common.cliSetupTritonApi({cli: this.top}, function onSetup(setupErr) {
+        if (setupErr) {
+            cb(setupErr);
+        }
+        cli.tritonapi.getInstanceMetadata({
+            id: id,
+            name: name
+        }, function onMetadata(err, metadata) {
+            if (err) {
+                cb(err);
+                return;
+            }
+            if (opts.json) {
+                console.log(JSON.stringify(metadata));
+            } else {
+                console.log(metadata);
+            }
+            cb();
+        });
+    });
+}
+
+do_get.options = [
+    {
+        names: ['help', 'h'],
+        type: 'bool',
+        help: 'Show this help.'
+    },
+    {
+        names: ['json', 'j'],
+        type: 'bool',
+        help: 'JSON output.'
+    }
+];
+
+do_get.synopses = ['{{name}} {{cmd}} [OPTIONS] INST NAME'];
+
+do_get.help = [
+    'Get an instance metadata.',
+    '',
+    '{{usage}}',
+    '',
+    '{{options}}',
+    'where INST is an instance id, name, or shortid and NAME is a meta name.'
+].join('\n');
+
+do_get.completionArgtypes = ['tritoninstance', 'none'];
+
+module.exports = do_get;
diff --git a/lib/do_instance/do_metadata/do_list.js b/lib/do_instance/do_metadata/do_list.js
new file mode 100644
index 0000000..63f27f9
--- /dev/null
+++ b/lib/do_instance/do_metadata/do_list.js
@@ -0,0 +1,97 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2016 Joyent, Inc.
+ *
+ * `triton metadata list ...`
+ */
+
+var assert = require('assert-plus');
+var tabula = require('tabula');
+
+var common = require('../../common');
+var errors = require('../../errors');
+
+
+var COLUMNS_DEFAULT = 'name,state,created';
+var SORT_DEFAULT = 'name';
+
+
+function do_list(subcmd, opts, args, cb) {
+    assert.func(cb, 'cb');
+
+    if (opts.help) {
+        this.do_help('help', {}, [subcmd], cb);
+        return;
+    }
+
+    if (args.length === 0) {
+        cb(new errors.UsageError('missing INST argument'));
+        return;
+    } else if (args.length > 1) {
+        cb(new errors.UsageError('incorrect number of arguments'));
+        return;
+    }
+
+    var cli = this.top;
+    var machineId = args[0];
+
+    common.cliSetupTritonApi({cli: this.top}, function onSetup(setupErr) {
+        if (setupErr) {
+            cb(setupErr);
+        }
+        cli.tritonapi.listInstanceMetadatas({
+            id: machineId
+        }, function onMetadatas(err, metadatas) {
+            if (err) {
+                cb(err);
+                return;
+            }
+            if (opts.json) {
+                 console.log(JSON.stringify(metadatas));
+            } else {
+                 console.log(JSON.stringify(metadatas, 4, null));
+            }
+            cb();
+        });
+    });
+}
+
+
+do_list.options = [
+    {
+        names: ['help', 'h'],
+        type: 'bool',
+        help: 'Show this help.'
+    },
+    {
+        names: ['json', 'j'],
+        type: 'bool',
+        help: 'JSON output.'
+    }
+];
+
+do_list.synopses = ['{{name}} {{cmd}} [OPTIONS] INST'];
+
+do_list.help = [
+    'Show all of an instance\'s metadatas.',
+    '',
+    '{{usage}}',
+    '',
+    '{{options}}',
+    'Where INST is an instance id, name, or shortid.',
+    '',
+    'Note: Currently this dumps prettified JSON by default. That might change',
+    'in the future. Use "-j" to explicitly get JSON output.'
+
+].join('\n');
+
+do_list.completionArgtypes = ['tritoninstance', 'none'];
+
+do_list.aliases = ['ls'];
+
+module.exports = do_list;
diff --git a/lib/do_instance/do_metadata/do_update.js b/lib/do_instance/do_metadata/do_update.js
new file mode 100644
index 0000000..d89abac
--- /dev/null
+++ b/lib/do_instance/do_metadata/do_update.js
@@ -0,0 +1,137 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2016 Joyent, Inc.
+ *
+ * `triton metadata create ...`
+ */
+
+var assert = require('assert-plus');
+var format = require('util').format;
+var vasync = require('vasync');
+
+var common = require('../../common');
+var errors = require('../../errors');
+var mat = require('../../metadataandtags');
+
+function do_update(subcmd, opts, args, cb) {
+    assert.func(cb, 'cb');
+
+    if (opts.help) {
+        this.do_help('help', {}, [subcmd], cb);
+        return;
+    }
+    if (args.length < 1) {
+        cb(new errors.UsageError('incorrect number of arguments'));
+        return;
+    }
+
+    var inst = args[0];
+    var cli = this.top;
+    var log = this.log;
+
+    vasync.pipeline({arg: {cli: this.top}, funcs: [
+        common.cliSetupTritonApi,
+        function gatherMetas(ctx, next) {
+            mat.metadatasFromSetArgs(opts, args.slice(1), log,
+                function (err, metas) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+                log.trace({metas: metas || '<none>'},
+                    'metadatas loaded from opts and args');
+                ctx.metas = metas;
+                next();
+            });
+        },
+
+        function updateMetadata(ctx, next) {
+            ctx.start = Date.now();
+            cli.tritonapi.updateInstanceMetadata({
+                id: inst,
+                metas: ctx.metas,
+                wait: opts.wait,
+                waitTimeout: opts.wait_timeout * 1000
+            }, function (err, metadata, res) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+                if (!opts.quiet) {
+                    if (opts.json) {
+                        console.log(JSON.stringify(metadata));
+                    } else {
+                        console.log(JSON.stringify(metadata, null, 4));
+                    }
+                }
+                cb();
+            });
+        }
+    ]}, cb);
+}
+
+
+do_update.options = [
+    {
+        names: ['help', 'h'],
+        type: 'bool',
+        help: 'Show this help.'
+    },
+    {
+        names: ['json', 'j'],
+        type: 'bool',
+        help: 'JSON stream output.'
+    },
+    {   names: ['file', 'f'],
+        type: 'arrayOfString',
+        helpArg: 'FILE',
+        help: 'Load metadata name/value pairs from the given file path.' +
+              'The file contain a JSON object. this option can be used ' +
+              'multiple times.'
+    },
+    {
+        names: ['quiet', 'q'],
+        type: 'bool',
+        help: 'Quieter output. Specifically do not dump the updated set of '
+            + 'metadatas on successful completion.'
+    },
+    {
+        names: ['wait', 'w'],
+        type: 'bool',
+        help: 'Block until renaming instance is complete.'
+    },
+    {
+        names: ['wait-timeout'],
+        type: 'positiveInteger',
+        default: 120,
+        help: 'The number of seconds to wait before timing out with an error. '
+            + 'The default is 120 seconds.'
+    }
+];
+
+do_update.synopses = ['{{name}} {{cmd}} [OPTIONS] INST [KEY=VALUE ...]',
+                      '{{name}} {{cmd}} [OPTIONS] INST -f FILE'];
+
+do_update.help = [
+    'update one or more an instance.',
+    '',
+    '{{usage}}',
+    '',
+    '{{options}}',
+    'Where INST is an instance id, name, or shortid; KEY is a metadata name;',
+    'and VALUE is a metadata value (bool and numeric "value" are converted to ',
+    'that type).',
+    '',
+    'Currently this dumps prettified JSON by default. That might change in the',
+    'future. Use "-j" to explicitly get JSON output.'
+
+].join('\n');
+
+do_update.completionArgtypes = ['tritoninstance', 'none'];
+
+module.exports = do_update;
diff --git a/lib/do_instance/do_metadata/index.js b/lib/do_instance/do_metadata/index.js
new file mode 100644
index 0000000..420972d
--- /dev/null
+++ b/lib/do_instance/do_metadata/index.js
@@ -0,0 +1,49 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2016 Joyent, Inc.
+ *
+ * `triton metadata ...`
+ */
+
+var Cmdln = require('cmdln').Cmdln;
+var util = require('util');
+
+
+
+// ---- CLI class
+
+function MetadataCLI(top) {
+    this.top = top.top;
+
+    Cmdln.call(this, {
+        name: top.name + ' metadata',
+        desc: 'List, get, update and delete Triton instance metadatas.',
+        helpSubcmds: [
+            'help',
+            'update',
+            'list',
+            'get',
+            'delete'
+        ],
+        helpBody: 'Instances can be rolled back to a metadata using\n' +
+                  '`triton instance start --metadata=METANAME`.'
+    });
+}
+util.inherits(MetadataCLI, Cmdln);
+
+MetadataCLI.prototype.init = function init(opts, args, cb) {
+    this.log = this.top.log;
+    Cmdln.prototype.init.apply(this, arguments);
+};
+
+MetadataCLI.prototype.do_update = require('./do_update');
+MetadataCLI.prototype.do_get = require('./do_get');
+MetadataCLI.prototype.do_list = require('./do_list');
+MetadataCLI.prototype.do_delete = require('./do_delete');
+
+module.exports = MetadataCLI;
diff --git a/lib/do_instance/do_metadatas.js b/lib/do_instance/do_metadatas.js
new file mode 100644
index 0000000..a11980f
--- /dev/null
+++ b/lib/do_instance/do_metadatas.js
@@ -0,0 +1,26 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2016 Joyent, Inc.
+ *
+ * `triton instance metadatas ...` shortcut for
+ * `triton instance metadata list ...`.
+ */
+
+function do_metadatas(subcmd, opts, args, callback) {
+    this.handlerFromSubcmd('metadata').dispatch({
+        subcmd: 'list',
+        opts: opts,
+        args: args
+    }, callback);
+}
+
+do_metadatas.help = 'A shortcut for "triton instance metadata list".';
+do_metadatas.options = require('./do_metadata/do_list').options;
+do_metadatas.hidden = true;
+
+module.exports = do_metadatas;
diff --git a/lib/do_instance/index.js b/lib/do_instance/index.js
index d8f1513..85f0c30 100644
--- a/lib/do_instance/index.js
+++ b/lib/do_instance/index.js
@@ -50,6 +50,7 @@ function InstanceCLI(top) {
             'wait',
             'audit',
             'snapshot',
+            'metadata',
             'tag'
         ]
     });
@@ -83,6 +84,8 @@ InstanceCLI.prototype.do_wait = require('./do_wait');
 InstanceCLI.prototype.do_audit = require('./do_audit');
 InstanceCLI.prototype.do_snapshot = require('./do_snapshot');
 InstanceCLI.prototype.do_snapshots = require('./do_snapshots');
+InstanceCLI.prototype.do_metadata = require('./do_metadata');
+InstanceCLI.prototype.do_metadatas = require('./do_metadatas');
 InstanceCLI.prototype.do_tag = require('./do_tag');
 InstanceCLI.prototype.do_tags = require('./do_tags');
 
diff --git a/lib/metadataandtags.js b/lib/metadataandtags.js
index e9438a6..7c56251 100644
--- a/lib/metadataandtags.js
+++ b/lib/metadataandtags.js
@@ -176,6 +176,61 @@ function tagsFromSetArgs(opts, args, log, cb) {
     });
 }
 
+/*
+ * Load and validate tags from (a) these options:
+ *      -f,--file FILE
+ * and (b) these args:
+ *      name=value ...
+ *
+ * Later ones win, so *args* will win over file-loaded tags.
+ *
+ * <https://github.com/joyent/sdc-vmapi/blob/master/docs/index.md#vm-metadata>
+ * says values may be string, num or bool.
+ */
+function metadatasFromSetArgs(opts, args, log, cb) {
+    assert.arrayOfObject(opts._order, 'opts._order');
+    assert.arrayOfString(args, 'args');
+    assert.object(log, 'log');
+    assert.func(cb, 'cb');
+
+    var metadatas = {};
+
+    vasync.pipeline({funcs: [
+        function metadatasFromOpts(_, next) {
+            vasync.forEachPipeline({
+                inputs: opts._order,
+                func: function metadatasFromOpt(o, nextOpt) {
+                    log.trace({opt: o}, 'metadatasFromOpt');
+                    if (o.key === 'file') {
+                        _addMetadataFromFile('metadatas',
+                            metadatas, o.value, nextOpt);
+                    } else {
+                        nextOpt();
+                    }
+                }
+            }, next);
+        },
+        function metadatasFromArgs(_, next) {
+            vasync.forEachPipeline({
+                inputs: args,
+                func: function metadatasFromArg(a, nextArg) {
+                    log.trace({arg: a}, 'metadataFromArg');
+                    _addMetadataFromKvStr('metadata',
+                        metadatas, a, null, nextArg);
+                }
+            }, next);
+        }
+    ]}, function (err) {
+        if (err) {
+            cb(err);
+        } else if (Object.keys(metadatas).length) {
+            cb(null, metadatas);
+        } else {
+            cb();
+        }
+    });
+}
+
 
 var allowedTypes = ['string', 'number', 'boolean'];
 function _addMetadatum(ilk, metadata, key, value, from, cb) {
@@ -344,5 +399,6 @@ function _addMetadatumFromFile(ilk, metadata, key, file, from, cb) {
 module.exports = {
     metadataFromOpts: metadataFromOpts,
     tagsFromCreateOpts: tagsFromCreateOpts,
-    tagsFromSetArgs: tagsFromSetArgs
+    tagsFromSetArgs: tagsFromSetArgs,
+    metadatasFromSetArgs: metadatasFromSetArgs
 };
diff --git a/lib/tritonapi.js b/lib/tritonapi.js
index c5f159a..b579445 100644
--- a/lib/tritonapi.js
+++ b/lib/tritonapi.js
@@ -1164,6 +1164,294 @@ function deleteInstanceSnapshot(opts, cb) {
     });
 };
 
+// ---- instance metadatas
+
+/**
+ * Update a metadata of an instance.
+ *
+ * @param {Object} opts
+ *      - {String} id: The instance ID, name, or short ID. Required.
+ *      - {Object} metas: The name for new metadata. Required.
+ * @param {Function} callback `function (err, metadatas, res)`
+ */
+TritonApi.prototype.updateInstanceMetadata =
+function updateInstanceMetadata(opts, cb) {
+    assert.string(opts.id, 'opts.id');
+    assert.object(opts.metas, 'opts.metas');
+    assert.optionalBool(opts.wait, 'opts.wait');
+    assert.optionalNumber(opts.waitTimeout, 'opts.waitTimeout');
+    assert.func(cb, 'cb');
+
+    var self = this;
+    var res;
+    var metadata;
+
+    vasync.pipeline({arg: {client: self, id: opts.id}, funcs: [
+        _stepInstId,
+
+        function updateMetadata(arg, next) {
+            self.cloudapi.updateMachineMetadata({
+                id: arg.instId,
+                metas: opts.metas
+            }, function (err, meta, _res) {
+                res = _res;
+                res.instId = arg.instId; // gross hack, in case caller needs it
+                metadata = meta;
+                next(err);
+            });
+        },
+        function waitForMetadataChanges(arg, next) {
+            if (!opts.wait) {
+                next();
+                return;
+            }
+            self._waitForInstanceMetadataChanges({
+                id: arg.instId,
+                timeout: opts.waitTimeout,
+                action: 'update'
+            }, next);
+        }
+    ]}, function (err) {
+        cb(err, metadata, res);
+    });
+};
+
+/**
+ * List an instance's metadatas
+ *
+ * @param {Object} opts
+ *      - {String} id: The instance ID, name, or short ID. Required.
+ * @param {Function} callback `function (err, snapshots, res)`
+ */
+TritonApi.prototype.listInstanceMetadatas =
+function listInstanceMetadatas(opts, cb) {
+    assert.string(opts.id, 'opts.id');
+    assert.func(cb, 'cb');
+
+    var self = this;
+    var res;
+    var metadatas;
+
+    vasync.pipeline({arg: {client: self, id: opts.id}, funcs: [
+        _stepInstId,
+
+        function listMetadatas(arg, next) {
+            self.cloudapi.listMachineMetadatas({
+                id: arg.instId
+            }, function (err, datas, _res) {
+                res = _res;
+                res.instId = arg.instId; // gross hack, in case caller needs it
+                metadatas = datas;
+                next(err);
+            });
+        }
+    ]}, function (err) {
+        cb(err, metadatas, res);
+    });
+};
+
+/**
+ * Get an instance's metadata
+ *
+ * @param {Object} opts
+ *      - {String} id: The instance ID, name, or short ID. Required.
+ *      - {String} name: The name of the metadata. Required.
+ * @param {Function} callback `function (err, metadata, res)`
+ */
+TritonApi.prototype.getInstanceMetadata =
+function getInstanceMetadata(opts, cb) {
+    assert.string(opts.id, 'opts.id');
+    assert.string(opts.name, 'opts.name');
+    assert.func(cb, 'cb');
+
+    var self = this;
+    var res;
+    var metadata;
+
+    vasync.pipeline({arg: {client: self, id: opts.id}, funcs: [
+        _stepInstId,
+
+        function getMetadata(arg, next) {
+            self.cloudapi.getMachineMetadata({
+                id: arg.instId,
+                name: opts.name
+            }, function (err, _meta, _res) {
+                res = _res;
+                res.instId = arg.instId; // gross hack, in case caller needs it
+                metadata = _meta;
+                next(err);
+            });
+        }
+    ]}, function (err) {
+        cb(err, metadata, res);
+    });
+};
+
+/**
+ * Delete an instance's metadata.
+ *
+ * @param {Object} opts
+ *      - {String} id: The instance ID, name, or short ID. Required.
+ *      - {String} key: The key of the metadata. Required.
+ * @param {Function} callback `function (err, res)`
+ *
+ */
+TritonApi.prototype.deleteInstanceMetadata =
+function deleteInstanceMetadata(opts, cb) {
+    assert.string(opts.id, 'opts.id');
+    assert.string(opts.key, 'opts.key');
+    assert.optionalBool(opts.wait, 'opts.wait');
+    assert.optionalNumber(opts.waitTimeout, 'opts.waitTimeout');
+    assert.func(cb, 'cb');
+
+    var self = this;
+    var res;
+
+    vasync.pipeline({arg: {client: self, id: opts.id}, funcs: [
+        _stepInstId,
+
+        function deleteMetadata(arg, next) {
+            self.cloudapi.deleteMachineMetadata({
+                id: arg.instId,
+                key: opts.key
+            }, function (err, _res) {
+                res = _res;
+                res.instId = arg.instId; // gross hack, in case caller needs it
+                next(err);
+            });
+        },
+        function waitForMetadataChanges(arg, next) {
+            if (!opts.wait) {
+                next();
+                return;
+            }
+            self._waitForInstanceMetadataChanges({
+                id: arg.instId,
+                timeout: opts.waitTimeout,
+                action: 'delete'
+            }, next);
+        }
+
+    ]}, function (err) {
+        cb(err, res);
+    });
+};
+
+/**
+ * DeleteAll an instance's metadata.
+ *
+ * @param {Object} opts
+ *      - {String} id: The instance ID, name, or short ID. Required.
+ * @param {Function} callback `function (err, res)`
+ *
+ */
+TritonApi.prototype.deleteAllInstanceMetadata =
+function deleteAllInstanceMetadata(opts, cb) {
+    assert.string(opts.id, 'opts.id');
+    assert.optionalBool(opts.wait, 'opts.wait');
+    assert.optionalNumber(opts.waitTimeout, 'opts.waitTimeout');
+    assert.func(cb, 'cb');
+
+    var self = this;
+    var res;
+
+    vasync.pipeline({arg: {client: self, id: opts.id}, funcs: [
+        _stepInstId,
+
+        function deleteAllMetadata(arg, next) {
+            self.cloudapi.deleteAllMachineMetadata({
+                id: arg.instId
+            }, function (err, _res) {
+                res = _res;
+                res.instId = arg.instId; // gross hack, in case caller needs it
+                next(err);
+            });
+        },
+        function waitForMetadataChanges(arg, next) {
+            if (!opts.wait) {
+                next();
+                return;
+            }
+            self._waitForInstanceMetadataChanges({
+                id: arg.instId,
+                timeout: opts.waitTimeout,
+                action: 'deleteAll'
+            }, next);
+        }
+
+    ]}, function (err) {
+        cb(err, res);
+    });
+};
+
+TritonApi.prototype._waitForInstanceMetadataChanges =
+function _waitForInstanceMetadataChanges(opts, cb) {
+    var self = this;
+    assert.object(opts, 'opts');
+    assert.uuid(opts.id, 'opts.id');
+    assert.optionalNumber(opts.timeout, 'opts.timeout');
+    var timeout = opts.hasOwnProperty('timeout') ? opts.timeout : Infinity;
+    assert.ok(timeout > 0, 'opts.timeout must be greater than zero');
+    assert.string(opts.action, 'opts.action');
+    assert.func(cb, 'cb');
+
+    /*
+     * Hardcoded 2s poll interval for now. Not yet configurable, being mindful
+     * of avoiding lots of clients naively swamping a CloudAPI and hitting
+     * throttling.
+     */
+    var POLL_INTERVAL = 2 * 1000;
+    var startTime = Date.now();
+
+    var poll = function () {
+        self.cloudapi.machineAudit(opts.id, function (err, audit) {
+            if (err) {
+                cb(err);
+                return;
+            }
+            var incomplete = false;
+            var auditAction = audit[0].action;
+            var auditTime = audit[0].time;
+            var auditSuccess = audit[0].success;
+
+            switch (opts.action) {
+                case 'update':
+                    if (auditAction === 'set_metadata') {
+                        incomplete = true;
+                    }
+                    break;
+                case 'delete':
+                    if (auditAction === 'remove_metadata') {
+                         incomplete = true;
+                    }
+                    break;
+                case 'deleteAll':
+                    if (auditAction === 'replace_metadata') {
+                        incomplete = true;
+                    }
+                    break;
+                default:
+                    throw new Error('unexpected action: ' + opts.action);
+            }
+            if (incomplete && auditSuccess &&
+                (startTime < Date.parse(auditTime))) {
+                cb();
+                return;
+            } else {
+                var elapsedTime = Date.now() - startTime;
+                if (elapsedTime > timeout) {
+                    cb(new errors.TimeoutError(format('timeout waiting for '
+                        + 'instance %s %s (elapsed %ds)',
+                        opts.id, opts.action, Math.round(elapsedTime / 1000))));
+                } else {
+                    setTimeout(poll, POLL_INTERVAL);
+                }
+            }
+        });
+    };
+
+    setImmediate(poll);
+};
 
 // ---- instance tags
 
diff --git a/test/integration/cli-subcommands.test.js b/test/integration/cli-subcommands.test.js
index 3c83c37..0ce4a9f 100644
--- a/test/integration/cli-subcommands.test.js
+++ b/test/integration/cli-subcommands.test.js
@@ -56,6 +56,11 @@ var subs = [
     ['instance snapshot list', 'instance snapshot ls', 'instance snapshots'],
     ['instance snapshot get'],
     ['instance snapshot delete', 'instance snapshot rm'],
+    ['instance metadata'],
+    ['instance metadata update'],
+    ['instance metadata list', 'instance metadata ls', 'instance metadatas'],
+    ['instance metadata get'],
+    ['instance metadata delete', 'instance metadata rm'],
     ['ip'],
     ['ssh'],
     ['network'],
