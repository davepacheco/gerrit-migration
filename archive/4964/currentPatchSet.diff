commit 3ac9e7b078eaeefc44e47d7cb20337ae379af709 (refs/changes/64/4964/2)
Author: Dave Eddy <dave@daveeddy.com>
Date:   2018-10-16T16:47:59-04:00 (12 months ago)
    
    OS-7311 vmadm update timeout when setting firewall_enabled
    Reviewed by: Todd Whiteman <todd.whiteman@joyent.com>
    Approved by: Todd Whiteman <todd.whiteman@joyent.com>

diff --git a/src/Makefile b/src/Makefile
index e465286f..680649c4 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -109,6 +109,7 @@ JS_CHECK_TARGETS=\
 	vm/tests/test-create.js \
 	vm/tests/test-defaults.js \
 	vm/tests/test-docker.js \
+	vm/tests/test-firewall.js \
 	vm/tests/test-fswatcher.js \
 	vm/tests/test-hrtime.js \
 	vm/tests/test-indestructible.js \
diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index ac72b7b2..5cbe43f5 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -15391,8 +15391,16 @@ exports.update = function (uuid, payload, options, callback)
                 /*
                  * If we are here, the key being modified does not require any
                  * special processing, so we will just watch for it to change
-                 * to the value specified in the payload.
+                 * to the value specified in the payload if it is not already
+                 * set on the existing vmobj.
                  */
+                if (vmobj.hasOwnProperty(key) && vmobj[key] === value) {
+                    log.debug({key: key, value: vmobj[key]},
+                        'key "%s" already set to %j - discarding',
+                        key, vmobj[key]);
+                    return;
+                }
+
                 change = {
                     path: [key],
                     newValue: value
@@ -15438,6 +15446,9 @@ exports.update = function (uuid, payload, options, callback)
                     || (change.action !== 'removed'
                     && vmobj.hasOwnProperty(key)
                     && vmobj[key] === value)) {
+
+                    log.debug({change: change, key: key, value: vmobj[key]},
+                        'no effective vmobj change will happen - discarding');
                     return;
                 }
 
diff --git a/src/vm/tests/test-firewall.js b/src/vm/tests/test-firewall.js
new file mode 100644
index 00000000..a2fa5613
--- /dev/null
+++ b/src/vm/tests/test-firewall.js
@@ -0,0 +1,154 @@
+/*
+ * CDDL HEADER START
+ *
+ * The contents of this file are subject to the terms of the
+ * Common Development and Distribution License, Version 1.0 only
+ * (the "License").  You may not use this file except in compliance
+ * with the License.
+ *
+ * You can obtain a copy of the license at http://smartos.org/CDDL
+ *
+ * See the License for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * When distributing Covered Code, include this CDDL HEADER in each
+ * file.
+ *
+ * If applicable, add the following below this CDDL HEADER, with the
+ * fields enclosed by brackets "[]" replaced with your own identifying
+ * information: Portions Copyright [yyyy] [name of copyright owner]
+ *
+ * CDDL HEADER END
+ *
+ * Copyright (c) 2018, Joyent, Inc.
+ *
+ */
+
+var assert = require('/usr/node/node_modules/assert-plus');
+var common = require('./common');
+var f = require('util').format;
+var VM = require('/usr/vm/node_modules/VM');
+var vmtest = require('../common/vmtest.js');
+
+// this puts test stuff in global, so we need to tell jsl about that:
+/* jsl:import ../node_modules/nodeunit-plus/index.js */
+require('nodeunit-plus');
+
+var IMAGE_UUID = vmtest.CURRENT_SMARTOS_UUID;
+var PAYLOAD = {
+    alias: f('test-firewall-%d', process.pid),
+    autoboot: true,
+    brand: 'joyent-minimal',
+    do_not_inventory: true,
+    ram: 64
+};
+
+/*
+ * Updates the `firewall_enabled` property of the `uuid` VM.
+ */
+function setVmFirewallEnabled(t, uuid, want, cb) {
+    assert.ok(t, 't');
+    assert.uuid(uuid, 'uuid');
+    assert.bool(want, 'want');
+    assert.func(cb, 'cb');
+
+    var obj = {
+        firewall_enabled: want
+    };
+
+    VM.update(uuid, obj, function (err) {
+        common.ifError(t, err, f('VM.update firewall_enabled=%j', want));
+        cb(err);
+    });
+}
+
+/*
+ * Checks to see if the `firewall_enabled` property of the `uuid` VM is set to
+ * `want`.
+ */
+function checkVmFirewallEnabled(t, uuid, want, cb) {
+    assert.ok(t, 't');
+    assert.uuid(uuid, 'uuid');
+    assert.bool(want, 'want');
+    assert.func(cb, 'cb');
+
+    VM.load(uuid, function (err, vmobj) {
+        common.ifError(t, err, f('VM.load firewall_enabled=%j', want));
+        if (err) {
+            cb(err);
+            return;
+        }
+
+        t.deepEqual(vmobj.firewall_enabled, want,
+            f('vmobj.firewall_enabled === %j', want));
+        cb();
+    });
+}
+
+test('test firewall default value', function (t) {
+    var state = {
+        brand: PAYLOAD.brand
+    };
+
+    vmtest.on_new_vm(t, IMAGE_UUID, PAYLOAD, state, [
+        // Ensure firewall disabled (default value)
+        function (cb) {
+            checkVmFirewallEnabled(t, state.uuid, false, cb);
+        }
+    ]);
+});
+
+
+// TRITON-881 vminfod watchForChanges timeout exceeded during vmadm update
+test('test firewall update (TRITON-881)', function (t) {
+    var state = {
+        brand: PAYLOAD.brand
+    };
+
+    vmtest.on_new_vm(t, IMAGE_UUID, PAYLOAD, state, [
+        // Ensure firewall disabled (default value)
+        function (cb) {
+            checkVmFirewallEnabled(t, state.uuid, false, cb);
+        },
+
+        // Enable firewall
+        function (cb) {
+            setVmFirewallEnabled(t, state.uuid, true, cb);
+        },
+
+        // Ensure firewall enabled
+        function (cb) {
+            checkVmFirewallEnabled(t, state.uuid, true, cb);
+        },
+
+        // Enable firewall (again - no effective change)
+        function (cb) {
+            setVmFirewallEnabled(t, state.uuid, true, cb);
+        },
+
+        // Ensure firewall enabled
+        function (cb) {
+            checkVmFirewallEnabled(t, state.uuid, true, cb);
+        },
+
+        // Disable firewall
+        function (cb) {
+            setVmFirewallEnabled(t, state.uuid, false, cb);
+        },
+
+        // Ensure firewall disabled
+        function (cb) {
+            checkVmFirewallEnabled(t, state.uuid, false, cb);
+        },
+
+        // Disable firewall (again - no effective change)
+        function (cb) {
+            setVmFirewallEnabled(t, state.uuid, false, cb);
+        },
+
+        // Ensure firewall disabled
+        function (cb) {
+            checkVmFirewallEnabled(t, state.uuid, false, cb);
+        }
+    ]);
+});
