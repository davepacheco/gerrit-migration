From 3fe6a823ef5bc5207a0d8f9d466c29e8ed7d4441 Mon Sep 17 00:00:00 2001
From: Robert Bogart <robert.bogart@joyent.com>
Date: Thu, 2 Aug 2018 00:15:12 +0000
Subject: [PATCH] MANTA-3854 Mako sometimes fails to create manifests due to
 limitations in 'find'

---
 Makefile                   |  29 ++++++-
 bin/upload_mako_ls.sh      |  21 +++--
 src/makofind.c             | 155 +++++++++++++++++++++++++++++++++++++
 tools/download_ctftools    |  90 +++++++++++++++++++++
 tools/mk/Makefile.ctf.defs |  49 ++++++++++++
 tools/mk/Makefile.ctf.targ |  29 +++++++
 tools/mk/Makefile.defs     |  58 +++++++++++++-
 tools/mk/Makefile.targ     |  48 +++++++++---
 8 files changed, 459 insertions(+), 20 deletions(-)
 create mode 100644 src/makofind.c
 create mode 100755 tools/download_ctftools
 create mode 100644 tools/mk/Makefile.ctf.defs
 create mode 100644 tools/mk/Makefile.ctf.targ

diff --git a/Makefile b/Makefile
index 400083a..a397d5e 100644
--- a/Makefile
+++ b/Makefile
@@ -5,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2017, Joyent, Inc.
+# Copyright (c) 2018, Joyent, Inc.
 #
 
 #
@@ -58,6 +58,7 @@ else
 endif
 include ./tools/mk/Makefile.node_deps.defs
 include ./tools/mk/Makefile.nginx.defs
+include ./tools/mk/Makefile.ctf.defs
 
 #
 # MG Variables
@@ -73,6 +74,16 @@ RELSTAGEDIR          := /tmp/$(STAMP)
 #
 NPM_ENV          = MAKE_OVERRIDES="CTFCONVERT=/bin/true CTFMERGE=/bin/true"
 
+#
+# makofind specific defines
+#
+MAKOFIND_OBJS =		makofind.o
+MAKOFIND_CFLAGS =	-gdwarf-2 -m64 -std=c99 -D__EXTENSIONS__ \
+			-Wall -Wextra -Werror \
+			-Wno-unused-parameter \
+			-Isrc/
+MAKOFIND_OBJDIR =	$(CACHE_DIR)/makofind.obj
+
 #
 # Repo-specific targets
 #
@@ -103,6 +114,18 @@ check-nginx: $(NGINX_EXEC)
 	$(NGXSYMCHECK) $(NGINX_EXEC)
 prepush: check-nginx
 
+makofind: $(MAKOFIND_OBJS:%=$(MAKOFIND_OBJDIR)/%) $(STAMP_CTF_TOOLS)
+	gcc -o $@ $(MAKOFIND_OBJS:%=$(MAKOFIND_OBJDIR)/%) $(MAKOFIND_CFLAGS)
+	$(CTFCONVERT) -l $@ $@
+
+CLEAN_FILES += $(MAKOFIND_OBJDIR) makofind
+
+$(MAKOFIND_OBJDIR)/%.o: src/%.c
+	@mkdir -p $(@D)
+	gcc -o $@ -c $(MAKOFIND_CFLAGS) $<
+
+CLEAN_FILES += $(MAKOFIND_OBJDIR) makofind
+
 #
 # The eng.git makefiles define the clean target using a :: rule. This
 # means that we're allowed to have multiple bodies that define the rule
@@ -115,7 +138,7 @@ clean::
 	-(cd deps/nginx && $(MAKE) clean)
 
 .PHONY: release
-release: all deps docs $(SMF_MANIFESTS) check-nginx
+release: all deps docs $(SMF_MANIFESTS) check-nginx makofind
 	@echo "Building $(RELEASE_TARBALL)"
 	@mkdir -p $(RELSTAGEDIR)/root/opt/smartdc/mako
 	@mkdir -p $(RELSTAGEDIR)/root/opt/smartdc/boot
@@ -131,6 +154,7 @@ release: all deps docs $(SMF_MANIFESTS) check-nginx
 	    $(ROOT)/smf \
 	    $(RELSTAGEDIR)/root/opt/smartdc/mako/
 	cp -r $(ROOT)/build/scripts $(RELSTAGEDIR)/root/opt/smartdc/mako/boot
+	cp $(ROOT)/makofind $(RELSTAGEDIR)/root/opt/smartdc/mako
 	ln -s /opt/smartdc/mako/boot/setup.sh \
 	    $(RELSTAGEDIR)/root/opt/smartdc/boot/setup.sh
 	chmod 755 $(RELSTAGEDIR)/root/opt/smartdc/mako/boot/setup.sh
@@ -156,3 +180,4 @@ endif
 include ./tools/mk/Makefile.node_deps.targ
 include ./tools/mk/Makefile.nginx.targ
 include ./tools/mk/Makefile.targ
+include ./tools/mk/Makefile.ctf.targ
diff --git a/bin/upload_mako_ls.sh b/bin/upload_mako_ls.sh
index 658150f..37b6c05 100755
--- a/bin/upload_mako_ls.sh
+++ b/bin/upload_mako_ls.sh
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright (c) 2017, Joyent, Inc.
+# Copyright (c) 2018, Joyent, Inc.
 #
 
 ###############################################################################
@@ -35,7 +35,11 @@ PID=$$
 PID_FILE=/tmp/upload_mako_ls.pid
 TMP_DIR=/var/tmp/mako_dir
 LISTING_FILE=$TMP_DIR/$MANTA_STORAGE_ID
+LISTING_FILE_PARTIAL=${LISTING_FILE}.${PID}
 MANTA_DIR=/mako
+MAKO_DIR=/opt/smartdc/mako
+MAKOFIND=$MAKO_DIR/makofind
+TARGET_DIR=/manta
 START_TIME=`date -u +"%Y-%m-%dT%H:%M:%SZ"` # Time that this script started.
 
 
@@ -119,13 +123,18 @@ log "starting directory listing upload"
 
 mkdir -p $TMP_DIR
 
-# %p is filename, %s is *logical* size in *bytes*, %T@ is last modified time,
-# %unix time, %k is the *physical* size in *kilobytes*
-find /manta -type f -printf '%p\t%s\t%T@\t%k\n' >$LISTING_FILE
+"$MAKOFIND" "$TARGET_DIR" > "$LISTING_FILE_PARTIAL"
+
+if [[ $? -ne 0 ]]; then
+	fatal "Error: makofind failed to obtain a complete listing"
+fi
+
+# Rename the file to reflect that makofind completed successfully
+mv "$LISTING_FILE_PARTIAL" "$LISTING_FILE"
 
 log "Going to upload $LISTING_FILE to $MANTA_DIR/$MANTA_STORAGE_ID"
-manta_put_directory $MANTA_DIR
-manta_put $MANTA_DIR/$MANTA_STORAGE_ID $LISTING_FILE
+manta_put_directory "$MANTA_DIR"
+manta_put "$MANTA_DIR/$MANTA_STORAGE_ID" "$LISTING_FILE"
 
 log "Cleaning up..."
 rm -rf $TMP_DIR
diff --git a/src/makofind.c b/src/makofind.c
new file mode 100644
index 0000000..6200f19
--- /dev/null
+++ b/src/makofind.c
@@ -0,0 +1,155 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+/*
+ * This is a tool intended to mimic a lot of the behavior of find(1) when
+ * invoked from the command line and supplied with one or more paths.
+ *
+ * It will traverse the entirety of one or more caller-supplied directory trees,
+ * and for each object discovered of type file, it will print the logical size
+ * (in bytes), the time of last data modification (epoch time) and the physical
+ * size in kilobytes.
+ *
+ * This utility uses nftw(3C).  The creation of this program was born out of
+ * necessity.  Apparently GNU find (version 4.2.33) builds out an internal
+ * representation of a directory tree in memory which is obviously problematic
+ * in systems where the number of objects in the tree is sufficiently high.  In
+ * a situation where GNU find taps out, our file listing is truncated, giving an
+ * incomplete picture of the tree's contents.  As a mitigation to this problem,
+ * makofind was created.  It was written with nftw(3C) at the foundation which
+ * does not make over-gratuitous use of memory during directory tree traversal.
+ */
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
+#include <err.h>
+#include <errno.h>
+#include <stdarg.h>
+#include <ftw.h>
+#include <unistd.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+
+/*
+ * The directory structure currently used in mako is as follows:
+ *
+ * /manta/<account uuid>/<object uuid>
+ *
+ * Since nftw(3C) uses one file descriptor for each level in the tree, this
+ * should be more than enough to traverse the depths of /manta.
+ */
+#define	MAX_DESCRIPTORS	10
+
+static void nftw_warn(const char *, ...);
+static int nftw_cb(const char *, const struct stat *, int, struct FTW *);
+
+/* Globals */
+static int error;
+
+int
+main(int argc, char *argv[])
+{
+	int i, ret, flags;
+
+	if (argc < 2) {
+		(void) fprintf(stderr, "usage: %s dir1 dir2 ... dirN\n",
+		    argv[0]);
+		exit(1);
+	}
+
+	flags = (FTW_PHYS | FTW_MOUNT);
+
+	/*
+	 * Roll through the list of caller-supplied directories and call
+	 * `nftw()' on each.  Record any errors along the way.
+	 */
+	for (i = 1; i < argc; i++) {
+		ret = nftw(argv[i], nftw_cb, MAX_DESCRIPTORS, flags);
+
+		if (ret == -1) {
+			warn("An error occured traversing %s", argv[i]);
+			error = 1;
+		}
+
+		/*
+		 * The only way that something like this can happen is if
+		 * something deemed as really pathological takes place.  See
+		 * `nftw_cb()' for possibilies.
+		 */
+		if (ret == 1)
+			break;
+	}
+
+	return (error);
+}
+
+static void
+nftw_warn(const char *fmt, ...)
+{
+	va_list args;
+
+	va_start(args, fmt);
+	vwarnx(fmt, args);
+	va_end(args);
+
+	error = 1;
+}
+
+static int
+nftw_cb(const char *path, const struct stat *st, int objtype, struct FTW *ftw)
+{
+	int ret = 0;
+	blkcnt_t logical;
+
+	switch (objtype) {
+	case FTW_F:
+		logical = st->st_blocks / 2;
+		if (st->st_blocks % 2 > 0)
+			logical++;
+
+		/*
+		 * If we fail to print even one line of the manifest, it more
+		 * or less renders the entire manifest inaccurate especially if
+		 * it happens to be on an object that is large.
+		 */
+		if (printf("%s\t%ld\t%ld\t%ld\n", path, st->st_size,
+		    st->st_mtime, logical) < 0) {
+			nftw_warn("Failed to print information for: %s", path);
+			ret = 1;
+		}
+		break;
+
+	/* We are not interested in directories or symlinks */
+	case FTW_D:
+	case FTW_SL:
+		break;
+
+	case FTW_DNR:
+		nftw_warn("Unable to read directory: %s", path);
+		break;
+
+	case FTW_NS:
+		nftw_warn("stat failed at %s", path);
+		break;
+
+	default:
+		/*
+		 * In the pratically impossible case that objtype is of a value
+		 * that's not known at all, it could be a sign of something
+		 * more systemic.
+		 */
+		nftw_warn("%s: unknown type (%d)", path, objtype);
+		ret = 1;
+		break;
+	}
+
+	return (ret);
+}
diff --git a/tools/download_ctftools b/tools/download_ctftools
new file mode 100755
index 0000000..3f6b633
--- /dev/null
+++ b/tools/download_ctftools
@@ -0,0 +1,90 @@
+#!/bin/bash
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2018, Joyent, Inc.
+#
+
+#
+# This program will download a prebuilt copy of the CTF tools from Manta.
+# These tools have been built using a technique to ensure they can be run on a
+# sufficiently old platform.  More details are available at:
+#
+#	https://github.com/jclulow/ctftools
+#
+
+MANTA_URL='https://us-east.manta.joyent.com'
+BASE_PATH='/Joyent_Dev/public/ctftools'
+TARBALL='ctftools.20141030T081701Z.9543159.tar.gz'
+
+if [[ -z $1 ]]; then
+	printf 'ERROR: usage: download_ctftools <destination dir>\n' 2>&1
+	exit 1
+fi
+
+TOP=$(cd "$(dirname "$0")/.." && pwd)
+CACHE_DIR=$1
+TMPDIR="$TOP/$CACHE_DIR"
+CTFDIR="$TOP/$CACHE_DIR/ctftools"
+
+if ! /usr/bin/mkdir -p "$TMPDIR"; then
+	printf 'ERROR: could not mkdir "%s"\n' "$TMPDIR" >&2
+	exit 1
+fi
+
+if [[ ! -f "$TMPDIR/$TARBALL" ]]; then
+	#
+	# Try to download the tarball from Manta.
+	#
+	start_time=$SECONDS
+	rm -f "$TMPDIR/$TARBALL.tmp"
+	while :; do
+		if (( $SECONDS > start_time + 120 )); then
+			printf 'ERROR: timed out trying to download tools\n' >&2
+			exit 1
+		fi
+
+		if ! curl -sSf -o "$TMPDIR/$TARBALL.tmp" \
+		    "$MANTA_URL/$BASE_PATH/$TARBALL"; then
+			printf 'WARNING: download failure (retrying)\n' >&2
+			sleep 5
+			continue
+		fi
+
+		if ! /usr/bin/gzip -t "$TMPDIR/$TARBALL.tmp"; then
+			printf 'WARNING: download gzip invalid (retrying)\n' >&2
+			sleep 5
+			continue
+		fi
+
+		if ! /usr/bin/mv "$TMPDIR/$TARBALL.tmp" "$TMPDIR/$TARBALL"; then
+			printf 'ERROR: could not move tarball into place\n' >&2
+			exit 1
+		fi
+
+		break
+	done
+fi
+
+#
+# Extract the tarball
+#
+if ! /usr/bin/mkdir -p "$CTFDIR"; then
+	printf 'ERROR: could not mkdir "%s"\n' "$CTFDIR" >&2
+	exit 1
+fi
+
+if ! cd "$CTFDIR"; then
+	exit 1
+fi
+
+if ! /usr/bin/tar xfz "$TMPDIR/$TARBALL"; then
+	printf 'ERROR: could not extract tarball\n' >&2
+	exit 1
+fi
+
+exit 0
diff --git a/tools/mk/Makefile.ctf.defs b/tools/mk/Makefile.ctf.defs
new file mode 100644
index 0000000..bf16601
--- /dev/null
+++ b/tools/mk/Makefile.ctf.defs
@@ -0,0 +1,49 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2018, Joyent, Inc.
+#
+
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+# This Makefile uses the following definitions:
+#
+# 	CTFTOOLS	Directory in which to install ctftools once downloaded
+# 			extracted.
+#
+# 	CTFCONVERT	Path for the ctfconvert utility which converts debug
+# 			information from a binary file to CTF data and replaces
+# 			the debug section of that file with a CTF section called
+# 			SUNW_ctf.
+#
+# See the rule for helloctf in the Makefile located at the root of this
+# repository for an example of how to use ctfconvert to include CTF information
+# in a desired binary.
+#
+# To use this file, be sure to also include Makefile.ctf.targ after defining
+# targets.
+#
+ifndef TOP
+$(error You must include Makefile.defs before this makefile.)
+endif
+
+ifndef CACHE_DIR
+$(error You must include Makefile.defs before this makefile.)
+endif
+
+CTFTOOLS := $(TOP)/$(CACHE_DIR)/ctftools
+CTFCONVERT := $(CTFTOOLS)/bin/ctfconvert
+CTFDIFF := $(CTFTOOLS)/bin/ctfdiff
+CTFDUMP := $(CTFTOOLS)/bin/ctfdump
+CTFMERGE := $(CTFTOOLS)/bin/ctfmerge
+CTFSTRIP := $(CTFTOOLS)/bin/ctfstrip
+
+STAMP_CTF_TOOLS :=	$(MAKE_STAMPS_DIR)/ctftools.stamp
diff --git a/tools/mk/Makefile.ctf.targ b/tools/mk/Makefile.ctf.targ
new file mode 100644
index 0000000..bc5eb12
--- /dev/null
+++ b/tools/mk/Makefile.ctf.targ
@@ -0,0 +1,29 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2018, Joyent, Inc.
+#
+
+#
+# Makefile.ctf.targ: see Makefile.ctf.defs.
+#
+# We need to build some C software, and to make it debuggable we should
+# include CTF information.  Download the program used to download and deploy
+# the Manta CTF tools.
+#
+# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
+# into other repos as-is without requiring any modifications. If you find
+# yourself changing this file, you should instead update the original copy in
+# eng.git and then update your repo to use the new version.
+#
+$(STAMP_CTF_TOOLS):
+	$(MAKE_STAMP_REMOVE)
+	rm -rf $(CTFTOOLS)
+	mkdir -p $(CTFTOOLS)
+	tools/download_ctftools $(CACHE_DIR)
+	touch $@
+	$(MAKE_STAMP_CREATE)
diff --git a/tools/mk/Makefile.defs b/tools/mk/Makefile.defs
index 85139d7..73dd612 100644
--- a/tools/mk/Makefile.defs
+++ b/tools/mk/Makefile.defs
@@ -1,4 +1,3 @@
-# -*- mode: makefile -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2018, Joyent, Inc.
 #
 
 #
@@ -28,6 +27,14 @@
 #			the TIMESTAMP envvar (used by MG-based builds).
 #	STAMP		A build stamp to use in built package names.
 #
+#	MAKE_STAMPS_DIR	The directory in which make stamp files are to be
+#			created.  See comments below on expensive targets.
+#
+#	CACHE_DIR	A directory tree in which temporary files may be
+#			collected by download, tarball extraction, etc.  This
+#			directory is completely removed by "make distclean".
+#			Files in this directory are not intended to be shipped.
+#
 
 TOP := $(shell pwd)
 
@@ -49,3 +56,50 @@ STAMP := $(BRANCH)-$(TIMESTAMP)-$(_GITDESCRIBE)
 
 # node-gyp will print build info useful for debugging with V=1
 export V=1
+
+CACHE_DIR ?=		cache
+DISTCLEAN_FILES +=	$(CACHE_DIR)
+
+#
+# EXPENSIVE TARGETS AND MAKE STAMP FILES
+#
+# Targets which are expensive to run and lack a single file that marks
+# completion are difficult to track with make; e.g., "npm install".  One
+# solution to this problem is to create "stamp" files with symbolic names which
+# are created as the final step in a complex make rule in order to mark
+# completion.
+#
+# In order to make these more uniform, and easier to target with "make clean",
+# we will attempt to store them under a single directory.  Note that these
+# files are never targets for shipping in build artefacts.
+#
+# Stamp-backed targets come in several parts.  First, a macro should be defined
+# which names a file in the MAKE_STAMPS_DIR directory.  Then, a target which
+# creates this stamp file must be provided.  The recipe for this target should
+# use MAKE_STAMP_REMOVE and MAKE_STAMP_CREATE to perform the appropriate stamp
+# management.
+#
+# For example:
+#
+# --- Makefile.*.defs:
+#
+#	$(STAMP_EXPENSIVE_RESULT) := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# --- Makefile.*.targ:
+#
+#	$(STAMP_EXPENSIVE_RESULT): input/file another/input/file
+#		$(MAKE_STAMP_REMOVE)
+#		rm -rf output_tree/  # <--- ensure a clean slate
+#		expensive_program -o output_tree/ $^
+#		$(MAKE_STAMP_CREATE)
+#
+# NOTE: Every stamp file is exposed as an implicit "stamp-$STAMP_NAME" target.
+# The example above could be built manually by invoking:
+#
+#	make stamp-expensive-result
+#
+MAKE_STAMPS_DIR ?=	make_stamps
+CLEAN_FILES +=		$(MAKE_STAMPS_DIR)
+
+MAKE_STAMP_REMOVE =	mkdir -p $(@D); rm -f $(@)
+MAKE_STAMP_CREATE =	mkdir -p $(@D); touch $(@)
diff --git a/tools/mk/Makefile.targ b/tools/mk/Makefile.targ
index ea19000..dac448a 100644
--- a/tools/mk/Makefile.targ
+++ b/tools/mk/Makefile.targ
@@ -1,4 +1,3 @@
-# -*- mode: makefile -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,7 +5,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2017, Joyent, Inc.
 #
 
 #
@@ -77,6 +76,10 @@
 #	CSCOPE_DIRS	Directories to search for source files for the cscope
 #			index. (default: ".")
 #
+#	ESLINT		Path to eslint (default: "eslint")
+#
+#	ESLINT_FLAGS	Additional flags to pass through to eslint
+#
 #	JSL		Path to JavaScriptLint (default: "jsl")
 #
 #	JSL_FLAGS_NODE	Additional flags to pass through to JSL
@@ -89,26 +92,27 @@
 #
 #	JSSTYLE_FLAGS	Additional flags to pass through to jsstyle
 #
-#	RESTDOWN_EXT	By default '.restdown' is required for DOC_FILES
-#			(see above). If you want to use, say, '.md' instead, then
-#			set 'RESTDOWN_EXT=.md' in your Makefile.
+#	RESTDOWN_EXT	By default '.md' is required for DOC_FILES (see above).
+#			If you want to use, say, '.restdown' instead, then set
+#			'RESTDOWN_EXT=.restdown' in your Makefile.
 #
 
 #
 # Defaults for the various tools we use.
 #
 BASH		?= bash
-BASHSTYLE	?= tools/bashstyle
+BASHSTYLE   ?= $(NODE) tools/bashstyle
 CP		?= cp
 CSCOPE		?= cscope
 CSCOPE_DIRS	?= .
+ESLINT		?= eslint
 JSL		?= jsl
 JSON		?= json
 JSSTYLE		?= jsstyle
 MKDIR		?= mkdir -p
 MV		?= mv
 RESTDOWN_FLAGS	?=
-RESTDOWN_EXT	?= .restdown
+RESTDOWN_EXT	?= .md
 RMTREE		?= rm -rf
 JSL_FLAGS  	?= --nologo --nosummary
 
@@ -190,6 +194,12 @@ check-json: $(JSON_FILES:%=%.jsonchk)
 # a variable for the target itself *only if* the list of input files is
 # non-empty.  This avoids invoking the tool if there are no files to check.
 #
+
+ESLINT_TARGET = $(if $(ESLINT_FILES), check-eslint)
+.PHONY: check-eslint
+check-eslint: $(ESLINT_EXEC)
+	$(ESLINT) $(ESLINT_FLAGS) $(ESLINT_FILES)
+
 JSL_NODE_TARGET = $(if $(JSL_FILES_NODE), check-jsl-node)
 .PHONY: check-jsl-node
 check-jsl-node: $(JSL_EXEC)
@@ -209,7 +219,7 @@ check-jsstyle:  $(JSSTYLE_EXEC)
 	$(JSSTYLE) $(JSSTYLE_FLAGS) $(JSSTYLE_FILES)
 
 .PHONY: check
-check: check-jsl check-json $(JSSTYLE_TARGET) check-bash
+check:: $(ESLINT_TARGET) check-jsl check-json $(JSSTYLE_TARGET) check-bash
 	@echo check ok
 
 .PHONY: clean
@@ -264,7 +274,7 @@ DOC_MEDIA_FILES_BUILD := $(DOC_MEDIA_FILES:%=$(DOC_BUILD)/media/%)
 # to get there.
 #
 .PHONY: docs
-docs:							\
+docs::							\
 	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.html)		\
 	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.json)		\
 	$(DOC_MEDIA_FILES_BUILD)
@@ -294,9 +304,11 @@ CLEAN_FILES +=					\
 $(DOC_MEDIA_FILES_BUILD): | $(DOC_MEDIA_DIRS_BUILD)
 
 $(DOC_BUILD)/%: docs/% | $(DOC_BUILD)
+	$(MKDIR) $(shell dirname $@)
 	$(CP) $< $@
 
-docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC)
+docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC) \
+    $(EXTRA_DOC_DEPS)
 	$(RESTDOWN) $(RESTDOWN_FLAGS) -m $(DOC_BUILD) $<
 
 $(DOC_BUILD):
@@ -315,3 +327,19 @@ test:
 
 .PHONY: prepush
 prepush: check test
+
+#
+# This rule automatically exposes every "stamp" file as a target that can be
+# invoked manually as "stamp-$STAMP_NAME".  For example, if a stamp has been
+# defined thus:
+#
+#	STAMP_EXPENSIVE_RESULT := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# ... this can be invoked manually as "make stamp-expensive-result".  Note that
+# these phony targets are essentially just for interactive usage.  Targets
+# should be specified to depend on the macro containing the stamp file name.
+#
+# See also the comments in "Makefile.defs".
+#
+stamp-%: $(MAKE_STAMPS_DIR)/%
+	@:
-- 
2.21.0

