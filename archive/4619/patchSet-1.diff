commit 047a25b2148d3343519d0bf518197095d7f406e5 (refs/changes/19/4619/1)
Author: Robert Bogart <robert.bogart@joyent.com>
Date:   2018-08-02T00:15:12+00:00 (1 year, 2 months ago)
    
    MANTA-3854 Mako sometimes fails to create manifests due to limitations in 'find'

diff --git a/Makefile b/Makefile
index 400083a..3ef3d41 100644
--- a/Makefile
+++ b/Makefile
@@ -66,6 +66,11 @@ ROOT            := $(shell pwd)
 RELEASE_TARBALL := mako-pkg-$(STAMP).tar.bz2
 RELSTAGEDIR          := /tmp/$(STAMP)
 
+#
+# Tools
+#
+CTFCONVERT :=	$(ROOT)/tmp/ctftools/bin/ctfconvert
+
 #
 # v8plus uses the CTF tools as part of its build, but they can safely be
 # overridden here so that this works in dev zones without them.
@@ -73,6 +78,37 @@ RELSTAGEDIR          := /tmp/$(STAMP)
 #
 NPM_ENV          = MAKE_OVERRIDES="CTFCONVERT=/bin/true CTFMERGE=/bin/true"
 
+#
+# We need to build some C software, and to make it debuggable we should
+# include CTF information.  Download the CTF tools:
+#
+STAMP_CTF :=		tmp/ctftools/.stamp
+$(STAMP_CTF):
+	rm -rf tmp/ctftools
+	./tools/download_ctftools
+	touch $@
+
+CLEAN_FILES += tmp/ctftools tmp/ctftools.*.tar.gz
+
+MAKOFIND_OBJS =	makofind.o
+
+MAKOFIND_CFLAGS =	-gdwarf-2 -m32 -std=c99 -D__EXTENSIONS__ \
+			-Wall -Wextra -Werror \
+			-Wno-unused-parameter \
+			-Isrc/
+
+MAKOFIND_OBJDIR =	tmp/makofind.obj
+
+CLEAN_FILES +=		tmp/makofind.obj makofind
+
+makofind: $(MAKOFIND_OBJS:%=$(MAKOFIND_OBJDIR)/%) | $(STAMP_CTF)
+	gcc -o $@ $^ $(MAKOFIND_CFLAGS)
+	$(CTFCONVERT) -l $@ $@
+
+$(MAKOFIND_OBJDIR)/%.o: src/%.c
+	@mkdir -p $(@D)
+	gcc -o $@ -c $(MAKOFIND_CFLAGS) $<
+
 #
 # Repo-specific targets
 #
@@ -115,7 +151,7 @@ clean::
 	-(cd deps/nginx && $(MAKE) clean)
 
 .PHONY: release
-release: all deps docs $(SMF_MANIFESTS) check-nginx
+release: all deps docs $(SMF_MANIFESTS) check-nginx makofind
 	@echo "Building $(RELEASE_TARBALL)"
 	@mkdir -p $(RELSTAGEDIR)/root/opt/smartdc/mako
 	@mkdir -p $(RELSTAGEDIR)/root/opt/smartdc/boot
@@ -131,6 +167,7 @@ release: all deps docs $(SMF_MANIFESTS) check-nginx
 	    $(ROOT)/smf \
 	    $(RELSTAGEDIR)/root/opt/smartdc/mako/
 	cp -r $(ROOT)/build/scripts $(RELSTAGEDIR)/root/opt/smartdc/mako/boot
+	cp $(ROOT)/makofind $(RELSTAGEDIR)/root/opt/smartdc/mako
 	ln -s /opt/smartdc/mako/boot/setup.sh \
 	    $(RELSTAGEDIR)/root/opt/smartdc/boot/setup.sh
 	chmod 755 $(RELSTAGEDIR)/root/opt/smartdc/mako/boot/setup.sh
diff --git a/bin/upload_mako_ls.sh b/bin/upload_mako_ls.sh
index 658150f..69075b9 100755
--- a/bin/upload_mako_ls.sh
+++ b/bin/upload_mako_ls.sh
@@ -121,7 +121,7 @@ mkdir -p $TMP_DIR
 
 # %p is filename, %s is *logical* size in *bytes*, %T@ is last modified time,
 # %unix time, %k is the *physical* size in *kilobytes*
-find /manta -type f -printf '%p\t%s\t%T@\t%k\n' >$LISTING_FILE
+../makofind /manta >$LISTING_FILE
 
 log "Going to upload $LISTING_FILE to $MANTA_DIR/$MANTA_STORAGE_ID"
 manta_put_directory $MANTA_DIR
diff --git a/src/makofind.c b/src/makofind.c
new file mode 100644
index 0000000..7b0623a
--- /dev/null
+++ b/src/makofind.c
@@ -0,0 +1,105 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2018, Joyent, Inc.
+ */
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
+#include <errno.h>
+#include <stdarg.h>
+#include <ftw.h>
+#include <unistd.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+
+/* This should be more than enough to traverse the depth of /manta */
+#define	MAX_DESCRIPTORS	10
+
+static void usage(const char *);
+static void nftw_error(const char *, ...);
+static int ntfw_cb(const char *, const struct stat *, int, struct FTW *);
+
+int
+main(int argc, char **argv)
+{
+	int i;
+	int errors = 0;
+
+	if (argc < 2)
+		usage(argv[0]);
+
+	/*
+	 * Roll through the list of caller-supplied directories and call
+	 * `nftw()' on each.  Record any errors along the way.
+	 */
+	for (i = 1; i < argc; i++) {
+		if (nftw(argv[i], ntfw_cb, MAX_DESCRIPTORS, FTW_PHYS) != 0) {
+			fprintf(stderr, "%s: %s: encountered an error\n",
+				argv[0], argv[i]);
+			errors++;
+		}
+	}
+
+	return (errors != 0);
+}
+
+static void
+usage(const char *name)
+{
+	fprintf(stderr, "usage: %s dir1 dir2 ... dirN\n", name);
+	exit(1);
+}
+
+static void
+nftw_error(const char *fmt, ...)
+{
+	va_list args;
+
+	va_start(args, fmt);
+	vfprintf(stderr, fmt, args);
+	va_end(args);
+}
+
+static int
+ntfw_cb(const char *path, const struct stat *st, int objtype, struct FTW *ftw)
+{
+	int ret = 0;
+	unsigned int logical;
+	const char *name = path + ftw->base;
+
+	switch (objtype) {
+	case FTW_F:
+		logical = st->st_blocks / 2;
+		if (st->st_blocks % 2 > 0)
+			logical++;
+		printf("%s\t%lu\t%lu\t%d\n", path, st->st_size, st->st_mtime,
+		    logical);
+		break;
+
+	/* We are not interested in directories or sym links */
+	case FTW_D:
+	case FTW_SL:
+		break;
+
+	case FTW_DNR:
+		nftw_error("%s: unable to read\n", name);
+		break;
+
+	case FTW_NS:
+		nftw_error("%s: stat failed: %s\n", name, strerror(errno));
+		break;
+
+	default:
+		nftw_error("%s: unknown type (%s)", name, objtype);
+		ret = 1;
+		break;
+	}
+
+	return (ret);
+}
diff --git a/tools/download_ctftools b/tools/download_ctftools
new file mode 100755
index 0000000..7b1f6c1
--- /dev/null
+++ b/tools/download_ctftools
@@ -0,0 +1,84 @@
+#!/bin/bash
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright (c) 2018, Joyent, Inc.
+#
+
+#
+# This program will download a prebuilt copy of the CTF tools from Manta.
+# These tools have been built using a technique to ensure they can be run on a
+# sufficiently old platform.  More details are available at:
+#
+#	https://github.com/jclulow/ctftools
+#
+
+MANTA_URL='https://us-east.manta.joyent.com'
+BASE_PATH='/Joyent_Dev/public/ctftools'
+TARBALL='ctftools.20141030T081701Z.9543159.tar.gz'
+
+TOP=$(cd "$(dirname "$0")/.." && pwd)
+TMPDIR="$TOP/tmp"
+CTFDIR="$TOP/tmp/ctftools"
+
+if ! /usr/bin/mkdir -p "$TMPDIR"; then
+	printf 'ERROR: could not mkdir "%s"\n' "$TMPDIR" >&2
+	exit 1
+fi
+
+if [[ ! -f "$TMPDIR/$TARBALL" ]]; then
+	#
+	# Try to download the tarball from Manta.
+	#
+	start_time=$SECONDS
+	rm -f "$TMPDIR/$TARBALL.tmp"
+	while :; do
+		if (( $SECONDS > start_time + 120 )); then
+			printf 'ERROR: timed out trying to download tools\n' >&2
+			exit 1
+		fi
+
+		if ! curl -sSf -o "$TMPDIR/$TARBALL.tmp" \
+		    "$MANTA_URL/$BASE_PATH/$TARBALL"; then
+			printf 'WARNING: download failure (retrying)\n' >&2
+			sleep 5
+			continue
+		fi
+
+		if ! /usr/bin/gzip -t "$TMPDIR/$TARBALL.tmp"; then
+			printf 'WARNING: download gzip invalid (retrying)\n' >&2
+			sleep 5
+			continue
+		fi
+
+		if ! /usr/bin/mv "$TMPDIR/$TARBALL.tmp" "$TMPDIR/$TARBALL"; then
+			printf 'ERROR: could not move tarball into place\n' >&2
+			exit 1
+		fi
+
+		break
+	done
+fi
+
+#
+# Extract the tarball
+#
+if ! /usr/bin/mkdir -p "$CTFDIR"; then
+	printf 'ERROR: could not mkdir "%s"\n' "$CTFDIR" >&2
+	exit 1
+fi
+
+if ! cd "$CTFDIR"; then
+	exit 1
+fi
+
+if ! /usr/bin/tar xfz "$TMPDIR/$TARBALL"; then
+	printf 'ERROR: could not extract tarball\n' >&2
+	exit 1
+fi
+
+exit 0
