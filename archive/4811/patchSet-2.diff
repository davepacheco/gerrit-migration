From 8d12df988b15fd2587eeed6e1a6d7a380f63a5d6 Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Wed, 12 Sep 2018 15:33:19 +0200
Subject: [PATCH] TRITON-762 Remove incremental upgrade scripts from
 sdc-headnode

---
 Makefile                                      |  18 -
 README.md                                     |   2 -
 incr-upgrade-scripts/NOTES.md                 |  70 ---
 incr-upgrade-scripts/README.md                | 495 ------------------
 incr-upgrade-scripts/add-agent-services.sh    |  75 ---
 incr-upgrade-scripts/add-amonredis.sh         |  68 ---
 incr-upgrade-scripts/add-mahi.sh              |  98 ----
 incr-upgrade-scripts/add-papi.sh              | 121 -----
 incr-upgrade-scripts/add-sdc.sh               | 124 -----
 incr-upgrade-scripts/add-zk.sh                | 109 ----
 .../backfill-for-ufds-upgrade                 | 319 -----------
 incr-upgrade-scripts/capi-305.sql             |  21 -
 incr-upgrade-scripts/changelog-platform.sh    | 116 ----
 incr-upgrade-scripts/dc-maint-end.sh          |  42 --
 incr-upgrade-scripts/dc-maint-start.sh        |  45 --
 incr-upgrade-scripts/delete-dapi.sh           |  41 --
 incr-upgrade-scripts/download-all.sh          |  57 --
 incr-upgrade-scripts/download-image.sh        | 117 -----
 incr-upgrade-scripts/gen-changelog.sh         | 149 ------
 incr-upgrade-scripts/gen-upgrade-images.sh    | 106 ----
 incr-upgrade-scripts/get-changes.sh           |  76 ---
 incr-upgrade-scripts/libupgrade.sh            | 260 ---------
 .../manatee-v2-in-situ-upgrade.sh             |  78 ---
 .../manatee-v2-remote-upgrade.sh              | 220 --------
 incr-upgrade-scripts/manatee-v2-upgrade.sh    | 247 ---------
 incr-upgrade-scripts/rollback-imgapi.sh       |  13 -
 incr-upgrade-scripts/rollback-rabbitmq.sh     |  12 -
 incr-upgrade-scripts/rollback-ufds.sh         | 115 ----
 .../sapi/amonredis/amonredis_svc.json         |  31 --
 .../sapi/amonredis/manifest.json              |   6 -
 .../sapi/cn-agent/service.json                |  16 -
 incr-upgrade-scripts/sapi/mahi/mahi_svc.json  |  27 -
 .../sapi/net-agent/service.json               |  16 -
 incr-upgrade-scripts/sapi/papi/papi_svc.json  |  28 -
 incr-upgrade-scripts/sapi/sdc/sdc_svc.json    |  31 --
 .../sapi/vm-agent/service.json                |  16 -
 .../sapi/zookeeper/zookeeper_svc.json         |  30 --
 incr-upgrade-scripts/sdc-agent-healthcheck.sh |  50 --
 incr-upgrade-scripts/upgrade-all.sh           | 183 -------
 incr-upgrade-scripts/upgrade-binder.sh        |  94 ----
 incr-upgrade-scripts/upgrade-imgapi.sh        | 112 ----
 incr-upgrade-scripts/upgrade-mahi.sh          |  87 ---
 incr-upgrade-scripts/upgrade-moray.sh         | 167 ------
 incr-upgrade-scripts/upgrade-one-agent.sh     | 137 -----
 incr-upgrade-scripts/upgrade-other.sh         | 305 -----------
 incr-upgrade-scripts/upgrade-rabbitmq.sh      |  81 ---
 incr-upgrade-scripts/upgrade-sapi.sh          | 167 ------
 incr-upgrade-scripts/upgrade-tools.sh         |  93 ----
 incr-upgrade-scripts/upgrade-ufds.sh          | 261 ---------
 incr-upgrade-scripts/version-list.sh          |  55 --
 50 files changed, 5207 deletions(-)
 delete mode 100644 incr-upgrade-scripts/NOTES.md
 delete mode 100644 incr-upgrade-scripts/README.md
 delete mode 100755 incr-upgrade-scripts/add-agent-services.sh
 delete mode 100755 incr-upgrade-scripts/add-amonredis.sh
 delete mode 100755 incr-upgrade-scripts/add-mahi.sh
 delete mode 100755 incr-upgrade-scripts/add-papi.sh
 delete mode 100755 incr-upgrade-scripts/add-sdc.sh
 delete mode 100755 incr-upgrade-scripts/add-zk.sh
 delete mode 100755 incr-upgrade-scripts/backfill-for-ufds-upgrade
 delete mode 100644 incr-upgrade-scripts/capi-305.sql
 delete mode 100755 incr-upgrade-scripts/changelog-platform.sh
 delete mode 100755 incr-upgrade-scripts/dc-maint-end.sh
 delete mode 100755 incr-upgrade-scripts/dc-maint-start.sh
 delete mode 100755 incr-upgrade-scripts/delete-dapi.sh
 delete mode 100755 incr-upgrade-scripts/download-all.sh
 delete mode 100755 incr-upgrade-scripts/download-image.sh
 delete mode 100755 incr-upgrade-scripts/gen-changelog.sh
 delete mode 100755 incr-upgrade-scripts/gen-upgrade-images.sh
 delete mode 100755 incr-upgrade-scripts/get-changes.sh
 delete mode 100755 incr-upgrade-scripts/libupgrade.sh
 delete mode 100755 incr-upgrade-scripts/manatee-v2-in-situ-upgrade.sh
 delete mode 100755 incr-upgrade-scripts/manatee-v2-remote-upgrade.sh
 delete mode 100755 incr-upgrade-scripts/manatee-v2-upgrade.sh
 delete mode 100644 incr-upgrade-scripts/rollback-imgapi.sh
 delete mode 100644 incr-upgrade-scripts/rollback-rabbitmq.sh
 delete mode 100755 incr-upgrade-scripts/rollback-ufds.sh
 delete mode 100644 incr-upgrade-scripts/sapi/amonredis/amonredis_svc.json
 delete mode 100644 incr-upgrade-scripts/sapi/amonredis/manifest.json
 delete mode 100644 incr-upgrade-scripts/sapi/cn-agent/service.json
 delete mode 100644 incr-upgrade-scripts/sapi/mahi/mahi_svc.json
 delete mode 100644 incr-upgrade-scripts/sapi/net-agent/service.json
 delete mode 100644 incr-upgrade-scripts/sapi/papi/papi_svc.json
 delete mode 100644 incr-upgrade-scripts/sapi/sdc/sdc_svc.json
 delete mode 100644 incr-upgrade-scripts/sapi/vm-agent/service.json
 delete mode 100644 incr-upgrade-scripts/sapi/zookeeper/zookeeper_svc.json
 delete mode 100755 incr-upgrade-scripts/sdc-agent-healthcheck.sh
 delete mode 100755 incr-upgrade-scripts/upgrade-all.sh
 delete mode 100755 incr-upgrade-scripts/upgrade-binder.sh
 delete mode 100755 incr-upgrade-scripts/upgrade-imgapi.sh
 delete mode 100755 incr-upgrade-scripts/upgrade-mahi.sh
 delete mode 100755 incr-upgrade-scripts/upgrade-moray.sh
 delete mode 100755 incr-upgrade-scripts/upgrade-one-agent.sh
 delete mode 100755 incr-upgrade-scripts/upgrade-other.sh
 delete mode 100755 incr-upgrade-scripts/upgrade-rabbitmq.sh
 delete mode 100755 incr-upgrade-scripts/upgrade-sapi.sh
 delete mode 100755 incr-upgrade-scripts/upgrade-tools.sh
 delete mode 100755 incr-upgrade-scripts/upgrade-ufds.sh
 delete mode 100755 incr-upgrade-scripts/version-list.sh

diff --git a/Makefile b/Makefile
index 118c8b82..0636ec5e 100644
--- a/Makefile
+++ b/Makefile
@@ -260,24 +260,6 @@ coal-and-open: coal
 update-tools-modules:
 	./bin/mk-sdc-clients-light.sh v11.3.1 tools/node_modules/sdc-clients
 
-.PHONY: incr-upgrade
-incr-upgrade: $(TOOLS_DEPS)
-	@echo building incr-upgrade-$(STAMP).tgz
-	rm -rf build/incr-upgrade
-	mkdir -p build
-	cp -r $(TOP)/incr-upgrade-scripts build/incr-upgrade-$(STAMP)
-	cp -r \
-		$(TOP)/zones \
-		$(TOP)/tools.tar.gz \
-		$(TOP)/cn_tools.tar.gz \
-		$(TOP)/default \
-		$(TOP)/scripts \
-		build/incr-upgrade-$(STAMP)
-	(cd build && tar czf ../incr-upgrade-$(STAMP).tgz incr-upgrade-$(STAMP))
-
-CLEAN_FILES += build/incr-upgrade
-
-
 GZ_TOOLS_STAMP := gz-tools-$(STAMP)
 GZ_TOOLS_MANIFEST := $(GZ_TOOLS_STAMP).manifest
 GZ_TOOLS_TARBALL := $(GZ_TOOLS_STAMP).tgz
diff --git a/README.md b/README.md
index 44f2bee6..96ade27c 100644
--- a/README.md
+++ b/README.md
@@ -47,8 +47,6 @@ There are three main build products from this repo:
 
   - `make usb` - outputs a USB image tarball
   - `make coal` - outputs a coal image for use with VMware
-  - `make incr-upgrade` - outputs a tarball with scripts and tools for incremental upgrades of services on existing headnodes.
-
 
 ### Build prerequisites
 
diff --git a/incr-upgrade-scripts/NOTES.md b/incr-upgrade-scripts/NOTES.md
deleted file mode 100644
index 60f35e4a..00000000
--- a/incr-upgrade-scripts/NOTES.md
+++ /dev/null
@@ -1,70 +0,0 @@
-<!--
-    This Source Code Form is subject to the terms of the Mozilla Public
-    License, v. 2.0. If a copy of the MPL was not distributed with this
-    file, You can obtain one at http://mozilla.org/MPL/2.0/.
--->
-
-<!--
-    Copyright (c) 2014, Joyent, Inc.
--->
-
-# Some notes from Trent which you can ignore now
-
-A possible new flow here, using a JSON spec file for to upgrade.
-
--   Write a upgrade spec JSON file
-
-        $ cat foo.json   # should have a meaningful name, this is the "foo" upgrade
-        {
-            "imgapi": "4803c1cd-5882-9c48-bc2a-fc81c1429a89",
-            "adminui": "latest"
-        }
-
-    Note: This doesn't capture agents, platforms.
-
--   Fill in the 'latest' markers in there. That is done lazily and cached
-    to ${specfile}.1
-
--   Prepare. Still presuming only one instance of each service
-    considered.
-
-        $ ./prepare.sh foo.json
-        ... make a clean fresh /var/tmp/upgrade-foo dir (or perhaps require it to be clean)
-        ... bail if we have two instances of any of the services listed
-        ... gets the current image for current instance of each image
-        Wrote '/var/tmp/upgrade-foo/rollback.json'
-        ... fills in "latest" markers in the spec file
-        ... order the images to be upgraded (hardcoded list of bottom stack to top)
-        Wrote '/var/tmp/upgrade-foo/spec.json'
-
--   Get the images.
-
-        $ ./download-images.sh foo[.json]
-        ... get each image in '/var/tmp/upgrade-foo/spec.json' into IMGAPI if necessary
-
--   Upgrade
-
-        $ ./upgrade.sh foo[.json]
-        ... perhaps bail if not healthy, or at least note starting healthcheck state
-        ... confirmation of what is going to be done
-        ... upgrade-setup and upgrade-zone for each service in order from spec.json
-        ... pause after each zone
-
--   Rollback if necessary.
-
-        # Optionally can just roll back a particular service.
-        $ ./rollback.sh foo[.json] [<service> ...]
-        ... confirmation
-        ... rollback-setup and rollback-zone for each service in spec.json
-            backwards
-
-This should be a package on updates.joyent.com for self-update as first step of upgrade.
-The usb-headnode/{tools,default,zones,config} should be a "gzbits" (or
-whatever) release tarball and used to update bits in the headnode GZ (and perhaps on CNs?)
-as part of the upgrade.
-
-Should grab logs from the old zone before reprovision. Should perhaps snapshot and send
-to a file before reprovision.
-
-Reprovision of each zone should be followed up by waiting for setup_complete...
-and timeout on that (as headnode.sh).
diff --git a/incr-upgrade-scripts/README.md b/incr-upgrade-scripts/README.md
deleted file mode 100644
index 0c4d3648..00000000
--- a/incr-upgrade-scripts/README.md
+++ /dev/null
@@ -1,495 +0,0 @@
-<!--
-    This Source Code Form is subject to the terms of the Mozilla Public
-    License, v. 2.0. If a copy of the MPL was not distributed with this
-    file, You can obtain one at http://mozilla.org/MPL/2.0/.
--->
-
-<!--
-    Copyright (c) 2014, Joyent, Inc.
--->
-
-# SDC (Incremental) Upgrade Scripts
-
-These scripts can be used to drive incremental upgrades of SDC 7 (as opposed
-to usb-headnode.git/bin/upgrade.sh which is about the major SDC 6.5 -> 7 upgrade).
-See HEAD-1795 for intended improvements to this process.
-
-
-
-## A note for ancient SDC7's
-
-You have an "ancient" SDC7 install if any of the following are true:
-
-- You don't have an 'amonredis' zone, i.e. `vmadm list | grep amonredis` on
-  the HN GZ is empty.
-- You don't have an 'sdc' zone, i.e. `vmadm list | grep sdc` on the HN GZ is
-  empty.
-
-If you have an ancient SDC7, then the following instructions have pitfalls.
-You need to speak with Trent Mick or others knowing SDC incr-upgrades to
-proceed.
-
-
-## Prepare for upgrades (all zones)
-
-Get the latest 'incr-upgrade' package
-
-Where you have the node-manta client tools:
-
-    latest=$(mls /Joyent_Dev/public/builds/incr-upgrade | grep 'master-2' | sort | tail -1)
-    pkg=$(mls /Joyent_Dev/public/builds/incr-upgrade/$latest/incr-upgrade | grep tgz)
-    mget -O /Joyent_Dev/public/builds/incr-upgrade/$latest/incr-upgrade/$pkg
-    scp $pkg us-beta-4:/var/tmp
-
-Then crack it in the your working dir on the GZ:
-
-    ssh us-beta-4
-    cd /var/tmp
-    tar xf incr-upgrade-VERSION.tgz
-    cd incr-upgrade-VERSION
-
-Become root if not already:
-
-    p su -
-
-Capture current image versions in case we need to rollback.
-
-    ./version-list.sh > rollback-images
-
-Specify the roles and images that will be upgraded in "upgrade-images" file:
-
-    # Either get a list of the latest versions of all roles via
-    #       ./gen-upgrade-images.sh [SERVICES...] | tee upgrade-images
-    #
-    # E.g.: If you just want to upgrade the sdc and amon zones:
-    #
-    ./gen-upgrade-images.sh amon sdc | tee upgrade-images
-
-    # or manually create such a list with relevant roles and specific
-    # image UUIDs in the format:
-    #
-    #       export ${ROLE}_IMAGE=$UUID
-    #       ...
-    #
-    # E.g.:
-    #       export IMGAPI_IMAGE=99bb26b5-cd93-9447-a1d0-70191d78690b
-    #       export VMAPI_IMAGE=f9b40a06-7e87-3b4d-832a-faf38eb34506
-    vi upgrade-images
-
-Pre-download all the images to be used if you like. If you skip this,
-it'll be lazily done by 'upgrade-all.sh'.
-
-    ./download-all.sh upgrade-images 2>&1 | tee download-$(date +%s).log
-
-Update GZ tools (in /opt/smartdc/bin) and headnode scripts (in /usbkey/scripts)
-and zone defaults (/usbkey/default).
-WARNING: If you don't have an "sdc" zone (see "ancient" notes section above),
-then you cannot run this step until you've added it.
-
-    cp -r /usbkey/default ./olddefault
-    cp -r /usbkey/scripts ./oldscripts
-    (cd /opt/smartdc && /usr/bin/tar cvf - bin lib man node_modules | gzip) \
-        > ./oldtools.tar.gz
-    ./upgrade-tools.sh 2>&1 | tee tools-$(date +%s).log
-
-
-
-
-## Upgrading all agents
-
-Getting the latest agentsshar:
-
-    latest=$(mls /Joyent_Dev/public/builds/agentsshar | grep 'master-2' | sort | tail -1)
-    pkg=$(mls /Joyent_Dev/public/builds/agentsshar/$latest/agentsshar | grep '\.sh$')
-    mget -O /Joyent_Dev/public/builds/agentsshar/$latest/agentsshar/$pkg
-    scp $pkg us-beta-4:/var/tmp
-
-Upgrade the SDC7 agents.
-
-    /usbkey/scripts/update_agents agents-master-DATE-gSHA.sh
-
-
-## other upgrades
-
-This is a catch-all script that applies other upgrades (typically things
-like SAPI service definition tweaks):
-
-    ./upgrade-other.sh 2>&1 | tee other-$(date +%s).log
-
-This script *can* block and prompt for information.
-
-
-
-## add new zone: amonredis, sdc, papi, mahi
-
-If you don't have one or more of the following zones, then you should add them:
-
-    ./add-sdc.sh 2>&1 | tee sdc-$(date +%s).log
-    ./add-amonredis.sh 2>&1 | tee amonredis-$(date +%s).log
-    ./add-papi.sh PAPI_IMAGE_UUID 2>&1 | tee papi-$(date +%s).log
-    ./add-mahi.sh $(source upgrade-images; echo $MAHI_IMAGE) 2>&1 | tee mahi-$(date +%s).log
-
-*One time* manual import of 'sdcpackage' data (see PAPI-72)
-
-    # in the GZ
-    sdc-ldap s '(objectclass=sdcpackage)' > packages.ldif
-    cp packages.ldif /zones/$(vmadm lookup -1 alias=papi0)/root/var/tmp
-    sdc-login papi0
-
-    # in the papi0 zone
-    /opt/smartdc/papi/build/node/bin/node /opt/smartdc/papi/bin/importer --ldif=/var/tmp/packages.ldif
-
-Then, all 'sdcpackage' objects should be removed from UFDS to ensure that other
-scripts are not depending on this being up to date.
-
-    # This packages.ldif dump should be stored somewhere for backup.
-    sdc-ldap s '(objectclass=sdcpackage)' > packages.ldif
-
-    sdc-ufds search objectclass=sdcpackage dn | json -ga dn \
-        | while read dn; do echo "# delete '$dn'"; sdc-ufds delete "$dn"; done
-
-
-## put the DC in maint mode (optional)
-
-The DC can be put in "maintenance mode": cloudapi in readonly mode, wait
-for workflow to clear finish its current queue of jobs. This is recommended
-for upgrades of the following: rabbitmq, ufds.
-
-    ./dc-maint-start.sh 2>&1 | tee dc-main-start-$(date +%s).log
-
-
-
-## upgrade zone: rabbitmq
-
-    ./upgrade-rabbitmq.sh upgrade-images 2>&1 | tee rabbitmq-$(date +%s).log
-
-To rollback rabbitmq:
-
-    ./rollback-rabbitmq.sh rollback-images 2>&1 | tee rabbitmq-rollback-$(date +%s).log
-
-
-
-## upgrade zone: moray
-
-**Limitation:** Currently this just knows how to upgrade a moray zone on the
-headnode. If you have HA moray running on other CNs, this cannot yet upgrade
-them.
-
-    ./upgrade-moray.sh upgrade-images 2>&1 | tee moray-$(date +%s).log
-
-To rollback moray:
-
-    ./upgrade-moray.sh rollback-images 2>&1 | tee moray-rollback-$(date +%s).log
-
-
-
-## upgrade zone: imgapi
-
-Note: We are doing imgapi before ufds to avoid the problem here:
-https://jabber.joyent.com/logs/sdc@conference.joyent.com/2014/12/02.html#21:45:02.679453
-
-
-    ./upgrade-imgapi.sh upgrade-images 2>&1 | tee imgapi-$(date +%s).log
-
-After the switch from UFDS to moray is complete (after an upgrade to an
-imgapi build after 20140301) then old image manifest data in UFDS should be
-removed:
-
-    # Get a backup.
-    sdc-ldap search objectclass=sdcimage >sdcimage.dump
-    # Delete them all.
-    sdc sdc-ufds search objectclass=sdcimage | json -ga dn \
-        | while read dn; do sdc-ldap rm "$dn"; done
-
-
-To rollback (however note that the imgapi migrations don't currently have
-rollback support):
-
-    ./rollback-imgapi.sh rollback-images 2>&1 | tee imgapi-rollback-$(date +%s).log
-
-
-
-## upgrade zone: ufds
-
-Currently the UFDS upgrade requires that the moray zone on the HN have
-a recent "backfill" script. Check that via:
-
-    for uuid in $(vmadm lookup state=running tags.smartdc_role=moray); do zlogin $uuid grep getPredicate /opt/smartdc/moray/node_modules/.bin/backfill >/dev/null && echo Moray zone $uuid is good || echo Moray zone $uuid needs a newer backfill script; done
-
-**Only if you get "Moray zone $uuid needs a newer backfill script"** then run
-this (where $moray_uuid is from the previous command):
-
-    cp ./backfill-for-ufds-upgrade /zones/$moray_uuid/root/opt/smartdc/moray/node_modules/moray/bin/backfill
-
-Upgrade:
-
-    ./upgrade-ufds.sh upgrade-images 2>&1 | tee ufds-$(date +%s).log
-
-To rollback UFDS:
-
-    ./rollback-ufds.sh rollback-images 2>&1 | tee ufds-rollback-$(date +%s).log
-
-TODO: for upgrades of UFDS where the *old* UFDS is already passed all the
-index updates... we will be wasting time doing unnecessary backfills. We should
-discover that and only backfill as necessary.
-
-
-
-## upgrade zone: amon, dhcpd, sdc, napi, fwapi, papi, cloudapi, ca, vmapi, cnapi, adminui, workflow, mahi, amonredis, redis, assets
-
-    ./upgrade-all.sh upgrade-images 2>&1 | tee all-other-zones-$(date +%s).log
-
-
-To rollback:
-
-    # WARNING: The 'rollback-images' generated above currently includes *all*
-    # roles. Not just the ones you've upgraded. Generally that is fine, the
-    # rollback will be a no-op, but you might want to edit this file first
-    # to *just* include the zones in 'upgrade-images'.
-
-    mv default newdefault
-    mv olddefault default
-    mv scripts newscripts
-    mv oldscripts scripts
-    mv tools.tar.gz newtools.tar.gz
-    mv oldtools.tar.gz tools.tar.gz
-    ./upgrade-tools.sh 2>&1 | tee rollback-tools-$(date +%s).log
-
-    ./upgrade-all.sh rollback-images 2>&1 | tee all-other-zones-rollback-$(date +%s).log
-
-
-
-## Upgrading Compute Node tools
-
-Update GZ tools on CNs (in /opt/smartdc/bin).
-
-    cp /usbkey/extra/joysetup/cn_tools.tar.gz ./old_cn_tools.tar.gz
-    /usbkey/scripts/update_cn_tools -f ./cn_tools.tar.gz
-
-To rollback:
-
-    /usbkey/scripts/update_cn_tools -f ./old_cn_tools.tar.gz
-
-
-
-## upgrade zone: sapi
-
-IMPORTANT: If this is upgrade a SAPI that dates from *before*
-[HEAD-1804](https://devhub.joyent.com/jira/browse/HEAD-1804) changes (where
-setup/boot scripts were moved *into* the images), you'll first need to tweak
-the existing old SAPI:
-
-    sdc-login sapi
-    vi /opt/smartdc/sapi/lib/server/attributes.js
-    # Add 'SAPI_MODE' to the allowed_keys in `sanitizeMetadata()`.
-    svcadm restart sapi
-
-
-Then back in the GZ:
-
-    ./upgrade-sapi.sh upgrade-images 2>&1 | tee upgrade-sapi-$(date +%s).log
-
-
-
-## Upgrade zone: Manatee
-
-For a standard upgrade, this is a manual process (for now):
-1. check sdc-manatee-stat to get the current manatee status.
-2. Starting with the async replica, do the following to each:
-    a. disable manatee-sitter
-    b. wait for zone to disappear completely from sdc-manatee-stat
-    c. reprovision with new image
-    d. wait for the zone to reappear in sdc-manatee-stat
-3. repeat for the sync replica
-4. repeat for the primary
-
-After disabling the primary, there will be a very brief period where the stack
-is unavailable as components reconnect. Otherwise there is no downtime.
-
-### MANATEE-133
-
-MANATEE-133 presents a flag day that breaks backwards-compatibility with
-older versions of manatee, and requires a complete restart of manatee. In SDC,
-this would ordinarily prevent provisioning entirely. We get around this by
-upgrading two existing manatees in-place, the reprovisioning the entire cluster
-as above. The procedure for this is:
-
-    ./manatee-v2-upgrade.sh <image_uuid>
-
-In more detail, what goes on is:
-1. disable async, sync replicas
-2. upgrade primary using tarball of new manatee code
-3. disable primary, bring it back up
-4. upgrade sync using tarball
-    (at this point the stack is back up, and we have a minimal writable
-     manatee cluster)
-5. upgrade async using full reprovision
-6. upgrade sync using full reprovision
-7. upgrade primary using full reprovision
-
-
-
-## upgrade zone: binder
-
-1. Ensure manatee is in "one node write mode".
-   TODO: why? To avoid MANATEE-188?
-
-2. Run this:
-
-        ./upgrade-binder.sh upgrade-images 2>&1 | tee upgrade-binder-$(date +%s).log
-
-
-
-
-## upgrade zone: manatee (*after* MORAY-138)
-
-TODO
-
-
-
-## Special case: Upgrading just a specific agent
-
-First get the latest agent tarball from /Joyent_Dev/builds/...
-and then use the "upgrade-one-agent.sh" tool:
-
-    ./upgrade-one-agent.sh <agent-tarball> 2>&1 | tee upgrade-one-agent-$(date +%s).log
-
-
-
-
-## Upgrading a CN platform
-
-
-TODO
-
-
-## Upgrading the platform
-
-First you must make the platform available in the DC by (a) downloading it
-and (b) running the "install-platform.sh" script on the headnode.
-Internally, platforms builds are uploaded to Manta here:
-
-    [manta /Joyent_Dev/public/builds/platform/master-20140211T152333Z/platform]$ ls
-    platform-master-20140211T152333Z.tgz
-    ...
-
-Then it is made available to the DC as follows:
-
-    [root@headnode (my-dc) /var/tmp]# /usbkey/scripts/install-platform.sh  ./platform-master-20140211T152333Z.tgz
-    ==> Mounting USB key
-    ==> Staging 20140211T152333Z
-    ######################################################################## 100.0%
-    ==> Unpacking 20140211T152333Z to /mnt/usbkey/os
-    ==> This may take a while...
-    ==> Copying 20140211T152333Z to /usbkey/os
-    ==> Unmounting USB Key
-    ==> Adding to list of available platforms
-    ==> Done!
-
-Then (c) you assign the node in question to boot to the new platform. If the
-target node is a compute node (CN) then this is done via CNAPI. For example:
-
-    [root@headnode (my-dc) /var/tmp/tmick/img-mgmt-v2]# sdc-cnapi /boot/00000000-0000-0000-0000-002590943670
-    HTTP/1.1 200 OK
-    ...
-    {
-      "platform": "20130111T180733Z",
-      "kernel_args": {
-        "hostname": "00-25-90-94-36-70",
-        "rabbitmq": "guest:guest:10.3.1.23:5672",
-        "rabbitmq_dns": "guest:guest:rabbitmq.my-dc.joyent.us:5672"
-      },
-      "default_console": "vga",
-      "serial": "ttyb"
-    }
-
-    [root@headnode (my-dc) /var/tmp]# sdc-cnapi /boot/00000000-0000-0000-0000-002590943670 -X POST -d '{"platform": "20131210T060639Z"}'
-    HTTP/1.1 204 No Content
-    ...
-
-    [root@headnode (my-dc) /var/tmp]# sdc-cnapi /boot/00000000-0000-0000-0000-002590943670
-    HTTP/1.1 200 OK
-    ...
-    {
-      "platform": "20131210T060639Z",
-      "kernel_args": {
-        "hostname": "00-25-90-94-36-70",
-        "rabbitmq": "guest:guest:10.3.1.23:5672",
-        "rabbitmq_dns": "guest:guest:rabbitmq.my-dc.joyent.us:5672"
-      },
-      "default_console": "vga",
-      "serial": "ttyb"
-    }
-
-If the target node is the headnode (HN), then:
-
-    [root@headnode (my-dc) /var/tmp]# /usbkey/scripts/switch-platform.sh 20140211T152333Z
-    ...
-
-
-Then (d) you reboot the platform. Typically you'd want to be watching the
-server boot on its console.
-
-    [root@headnode (my-dc) /var/tmp]# sdc-cnapi /servers/00000000-0000-0000-0000-002590943670/reboot -X POST
-    HTTP/1.1 202 Accepted
-    ...
-    {
-      "job_uuid": "4351dc6a-dd89-4fd9-9def-cd6b082b2c8b"
-    }
-
-or simply
-
-    [root@headnode (my-dc) /var/tmp]# shutdown -y -i6 -g0
-
-
-
-## Remove the DC from maint mode
-
-    ./dc-maint-end.sh 2>&1 | tee dc-main-end-$(date +%s).log
-
-
-
-## To remove the DAPI zone and service:
-
-Once versions of CNAPI and VMAPI have been installed which support DAPI living
-inside CNAPI as a library, the independent DAPI zone is no longer needed.
-Note: we need to have a VMAPI with a provision workflow at least 7.0.32.
-
-Run the following script to clean up:
-
-    ./delete-dapi.sh 2>&1 | tee delete-dapi-$(date +%s).log
-
-
-## To make a changelog:
-
-    ./get-changes.sh upgrade-images.sh > changelog.sh
-
-    # changelog.sh is a script that assumes it runs in a directory where
-    # all the relevant service repos are present in subdirectories named
-    # identically to their role. E.g., cloning CA creates 'cloud-analytics'
-    # by default; it would need to be renamed to 'ca' for this script.
-
-
-
-## Future improvements
-
-- upgrade-ufds.sh should automatically determine what backfilling needs to
-  be done. Old notes on this:
-
-        # If you upgraded ufds, it's important that you also backfill missing column
-        # data as UFDS does not do this automatically. To do this you'll need to
-        # look at:
-        #
-        # git log -p sapi_manifests/ufds/template
-        #
-        # in the ufds.git repo to figure out which columns need to be backfilled,
-        # then run something like:
-        #
-        # /opt/smartdc/moray/node_modules/moray/bin]# ./backfill -i name -i version ufds_o_smartdc
-        #
-        # in the moray zone. See JPC-1302 for some more usage ideas.
-
-- Should we `dc-maint-{start,end}.sh` for provision pipeline upgrades?
-  I.e. for napi, imgapi, fwapi, papi, vmapi, cnapi.
-
-- We need an LB in front of cloudapi to maint-window it.
diff --git a/incr-upgrade-scripts/add-agent-services.sh b/incr-upgrade-scripts/add-agent-services.sh
deleted file mode 100755
index 03941a3d..00000000
--- a/incr-upgrade-scripts/add-agent-services.sh
+++ /dev/null
@@ -1,75 +0,0 @@
-#!/usr/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-set -o xtrace
-set -o errexit
-set -o pipefail
-
-TOP=$(cd $(dirname $0)/; pwd)
-if [[ ! -f "$TOP/upgrade-all.sh" ]]; then
-    echo "$0: fatal error: must run this from the incr-upgrade dir" >&2
-    exit 1
-fi
-
-SDCAPP=$(sdc-sapi /applications?name=sdc | json -Ha uuid)
-MIN_VALID_SAPI_VERSION=20140703
-
-# SAPI versions can have the following two forms:
-#
-#   release-20140724-20140724T171248Z-gf4a5bed
-#   master-20140724T174534Z-gccfea7e
-#
-# We need at least a MIN_VALID_SAPI_VERSION image so type=agent suport is there.
-# When the SAPI version doesn't match the expected format we ignore this script
-#
-valid_sapi=$(sdc-imgadm get $(sdc-vmapi /vms/$(vmadm lookup alias=~^sapi) | json -H image_uuid) \
-    | json -e \
-    "var splitVersion = this.version.split('-');
-    if (splitVersion[0] === 'master') {
-        this.validSapi = splitVersion[1].substr(0, 8) >= '$MIN_VALID_SAPI_VERSION';
-    } else if (splitVersion[0] === 'release') {
-        this.validSapi = splitVersion[1] >= '$MIN_VALID_SAPI_VERSION';
-    } else {
-        this.validSapi = false;
-    }
-    " | json validSapi)
-
-if [[ ${valid_sapi} == "false" ]]; then
-    echo "Datacenter does not have the minimum SAPI version needed for adding
-        service agents. No need to run add-agent-services.sh"
-    exit 0
-fi
-
-function service_exists()
-{
-    local service_name=$1
-    local service_uuid=$(sdc-sapi "/services?name=$service_name&type=agent" | json -Ha uuid)
-
-    if [[ -n ${service_uuid} ]]; then
-        return 0
-    else
-        return 1
-    fi
-}
-
-# Add the SAPI service
-SERVICES="vm-agent net-agent cn-agent"
-for service in $SERVICES; do
-    if ! service_exists "$service"; then
-        json -f ./sapi/$service/service.json \
-            | json -e "this.application_uuid=\"$SDCAPP\"" \
-            > ./$service-service.json
-        sdc-sapi /services -X POST -d@./$service-service.json
-        echo "Service $service added to SAPI"
-    else
-        echo "Service $service exists already"
-    fi
-done
diff --git a/incr-upgrade-scripts/add-amonredis.sh b/incr-upgrade-scripts/add-amonredis.sh
deleted file mode 100755
index 4b8d21c8..00000000
--- a/incr-upgrade-scripts/add-amonredis.sh
+++ /dev/null
@@ -1,68 +0,0 @@
-#!/usr/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-set -o xtrace
-set -o errexit
-
-TOP=$(cd $(dirname $0)/; pwd)
-if [[ ! -f "$TOP/upgrade-all.sh" ]]; then
-    echo "$0: fatal error: must run this from the incr-upgrade dir" >&2
-    exit 1
-fi
-
-# Add the SAPI 'amonredis' service:
-SDCAPP=$(sdc-sapi /applications?name=sdc | json -Ha uuid)
-SAPIURL=$(sdc-sapi /services?name=redis | json -Ha 'metadata["sapi-url"]')
-ASSETSIP=$(sdc-sapi /services?name=redis | json -Ha 'metadata["assets-ip"]')
-USERSCRIPT=$(/usr/node/bin/node -e 'console.log(JSON.stringify(require("fs").readFileSync("/usbkey/default/user-script.common", "utf8")))')
-DOMAIN=$(sdc-sapi /applications?name=sdc | json -Ha metadata.datacenter_name).$(sdc-sapi /applications?name=sdc | json -Ha metadata.dns_domain)
-IMAGE_UUID=$(sdc-imgadm list name=amonredis -H -o uuid | tail -1)
-
-if [[ -z "$IMAGE_UUID" ]]; then
-    echo "$0: fatal error: no 'amonredis' image uuid in IMGAPI to use" >&2
-    exit 1
-fi
-
-json -f ./sapi/amonredis/amonredis_svc.json \
-    | json -e "this.application_uuid=\"$SDCAPP\"" \
-    | json -e "this.params.image_uuid=\"$IMAGE_UUID\"" \
-    | json -e "this.metadata[\"sapi-url\"]=\"$SAPIURL\"" \
-    | json -e "this.metadata[\"assets-ip\"]=\"$ASSETSIP\"" \
-    | json -e "this.metadata[\"user-script\"]=$USERSCRIPT" \
-    | json -e "this.metadata[\"SERVICE_DOMAIN\"]=\"amonredis.${DOMAIN}\"" \
-    > ./amonredis-service.json
-SERVICE_UUID=$(sdc-sapi /services -X POST -d@./amonredis-service.json | json -H uuid)
-
-
-cat <<EOM >./update-sdc-app.json
-{
-    "metadata" : {
-        "AMONREDIS_SERVICE" : "amonredis.$DOMAIN",
-        "amonredis_domain" : "amonredis.$DOMAIN"
-    }
-}
-EOM
-sapiadm update $SDCAPP -f ./update-sdc-app.json
-
-# Add amonredis' manifest
-M_UUID=$(sdc-sapi /manifests -X POST -d@./sapi/amonredis/manifest.json | json -H uuid)
-sdc-sapi /services/$SERVICE_UUID -X PUT -d"{\"manifests\":{\"redis\":\"$M_UUID\"}}"
-
-# Provision.
-cat <<EOM | sapiadm provision
-{
-    "service_uuid" : "$SERVICE_UUID",
-    "params" : {
-        "alias" : "amonredis0"
-    }
-}
-EOM
-
diff --git a/incr-upgrade-scripts/add-mahi.sh b/incr-upgrade-scripts/add-mahi.sh
deleted file mode 100755
index 3bba8dc2..00000000
--- a/incr-upgrade-scripts/add-mahi.sh
+++ /dev/null
@@ -1,98 +0,0 @@
-#!/usr/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Script to add "mahi" zone to an existing SDC 7.
-#
-#       ./add-mahi.sh IMAGE
-#
-# where "IMAGE" is a mahi image UUID to use. You can specify "latest"
-# to use the latest mahi image *in the local IMGAPI*.
-#
-
-export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-set -o xtrace
-set -o errexit
-
-TOP=$(cd $(dirname $0)/; pwd)
-source $TOP/libupgrade.sh
-
-
-#---- globals
-
-role=mahi
-image_name=manta-authcache
-
-
-#---- mainline
-
-NEW_IMAGE=$1
-if [[ -z "$NEW_IMAGE" ]]; then
-    echo "usage: ./add-mahi.sh IMAGE"
-    fatal "no IMAGE argument given"
-elif [[ "$NEW_IMAGE" == "latest" ]]; then
-    NEW_IMAGE=$(sdc-imgadm list --latest name=$image_name -H -o uuid)
-    if [[ -z "$NEW_IMAGE" ]]; then
-        fatal "no '$image_name' image found in local IMGAPI"
-    fi
-fi
-echo "Adding 'mahi' service and instance using image $NEW_IMAGE"
-
-
-./download-image.sh ${NEW_IMAGE}
-
-
-SDC_APP_UUID=$(sdc-sapi --no-headers /applications?name=sdc | json 0.uuid)
-DOMAIN=$(sdc-sapi /applications?name=sdc | json -Ha metadata.datacenter_name).$(sdc-sapi /applications?name=sdc | json -Ha metadata.dns_domain)
-USERSCRIPT=$(/usr/node/bin/node -e 'console.log(JSON.stringify(require("fs").readFileSync("/usbkey/default/user-script.common", "utf8")))')
-
-# Before attempting to create the service, let's double check it doesn't exist:
-SERVICE_UUID=$(sdc-sapi --no-headers /services?name=$role | json -Ha uuid)
-if [[ -n "$SERVICE_UUID" ]]; then
-    echo "Service $role already exists, moving into next step"
-else
-    json -f ./sapi/$role/"${role}"_svc.json \
-      | json -e "this.application_uuid=\"$SDC_APP_UUID\"" \
-      | json -e "this.metadata.SERVICE_DOMAIN=\"mahi.${DOMAIN}\"" \
-      | json -e "this.params.image_uuid=\"$NEW_IMAGE\"" \
-      | json -e "this.metadata[\"user-script\"]=$USERSCRIPT" \
-      | json -e "this.params.delegate_dataset=true" \
-      >./"${role}"-service.json
-
-    echo "Service $role does not exist. Attempting to create it"
-    SERVICE_UUID=$(sdc-sapi /services -X POST -d@./"${role}"-service.json | json -H uuid)
-    echo "Service UUID is '$SERVICE_UUID'"
-
-    cat <<EOM > ./update-sdc-app-for-$role.json
-{
-    "metadata" : {
-        "MAHI_SERVICE" : "mahi.$DOMAIN",
-        "mahi_domain" : "mahi.$DOMAIN"
-    }
-}
-EOM
-    sapiadm update $SDC_APP_UUID -f ./update-sdc-app-for-$role.json
-fi
-
-# provision!
-UFDS_ADMIN_UUID=$(bash /lib/sdc/config.sh -json |json ufds_admin_uuid)
-cat <<EOM | sapiadm -v provision
-{
-    "service_uuid" : "$SERVICE_UUID",
-    "params" : {
-        "owner_uuid": "$UFDS_ADMIN_UUID",
-        "alias" : "mahi0"
-    }
-}
-EOM
-
-echo "Done!"
-exit 0
diff --git a/incr-upgrade-scripts/add-papi.sh b/incr-upgrade-scripts/add-papi.sh
deleted file mode 100755
index a8d59177..00000000
--- a/incr-upgrade-scripts/add-papi.sh
+++ /dev/null
@@ -1,121 +0,0 @@
-#!/usr/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Script to add "papi" zone to existing SDC 7 setups
-# You can either add latest available image at updates-imgadm:
-#
-#     ./add-papi.sh
-#
-# or specify an image uuid/version as follows:
-#
-#   ./add-papi.sh d7a36bca-4fdd-466f-9086-a2a22447c257 papi-zfs-master-20130711T073353Z-g7dcddeb
-#
-export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-set -o xtrace
-set -o errexit
-
-role=papi
-
-# Get SDC Application UUID from SAPI
-SDC_APP_UUID=$(sdc-sapi --no-headers /applications?name=sdc|json 0.uuid)
-
-NEW_IMAGE=$1
-NEW_VERSION=$2
-
-if [[ ! -n $NEW_IMAGE ]]; then
-  echo "getting image details from updates-imgadm"
-  # Get latest image details from updates-imgadm
-  ary=($(updates-imgadm list name=$role -o uuid,name,version | tail -1))
-  NEW_IMAGE=${ary[0]}
-  NEW_VERSION="${ary[1]}-zfs-${ary[2]}"
-else
-  echo "Using the provided IMAGE UUID and VERSION"
-fi
-
-# Grab image manifest and file from updates-imgadm:
-MANIFEST_TMP="$NEW_VERSION.imgmanifest.tmp"
-MANIFEST="$NEW_VERSION.imgmanifest"
-
-IMG_FILE="$NEW_VERSION.gz"
-ADMIN_UUID=$(sdc-sapi --no-headers /applications?name=sdc | json -Ha metadata.ufds_admin_uuid)
-
-IS_IMAGE_IMPORTED=$(sdc-imgadm list -o uuid name=$role)
-
-if [[ -n "$IS_IMAGE_IMPORTED" ]]; then
-  echo "Image is already imported, moving into next step"
-else
-  # Get the original manifest
-  if [[ ! -e /var/tmp/$MANIFEST_TMP ]]; then
-    echo "Fetching image manifest"
-    updates-imgadm get "$NEW_IMAGE" > "$MANIFEST_TMP"
-    json -f $MANIFEST_TMP -e "this.owner=\"$ADMIN_UUID\"" > $MANIFEST
-  else
-    echo "Image Manifest already downloaded, moving into next step"
-  fi
-
-  if [[ ! -e /var/tmp/$IMG_FILE ]]; then
-    # Get the new image file:
-    updates-imgadm get-file $NEW_IMAGE > $IMG_FILE
-  else
-    echo "Image file already downloaded, moving into next step"
-  fi
-
-  echo "Importing image"
-  # Import the new image
-  sdc-imgadm import -m $MANIFEST -f $IMG_FILE
-fi
-
-DOMAIN=$(sdc-sapi /applications?name=sdc | json -Ha metadata.datacenter_name).$(sdc-sapi /applications?name=sdc | json -Ha metadata.dns_domain)
-USERSCRIPT=$(/usr/node/bin/node -e 'console.log(JSON.stringify(require("fs").readFileSync("/usbkey/default/user-script.common", "utf8")))')
-
-# Before attempting to create the service, let's double check it doesn't exist:
-SERVICE_UUID=$(sdc-sapi --no-headers /services?name=$role | json -Ha uuid)
-
-if [[ -n "$SERVICE_UUID" ]]; then
-  echo "Service $role already exists, moving into next step"
-else
-
-  json -f ./sapi/$role/"${role}"_svc.json \
-    | json -e "this.application_uuid=\"$SDC_APP_UUID\"" \
-    | json -e "this.metadata.SERVICE_DOMAIN=\"papi.${DOMAIN}\"" \
-    | json -e "this.params.image_uuid=\"$NEW_IMAGE\"" \
-    | json -e "this.metadata[\"user-script\"]=$USERSCRIPT" \
-    >./"${role}"-service.json
-
-  echo "Service $role does not exist. Attempting to create it"
-  SERVICE_UUID=$(sdc-sapi /services -X POST -d@./"${role}"-service.json | json -H uuid)
-  echo "Service UUID is '$SERVICE_UUID'"
-
-  cat <<EOM > ./update-sdc-app.json
-{
-    "metadata" : {
-        "PAPI_SERVICE" : "papi.$DOMAIN",
-        "papi_domain" : "papi.$DOMAIN"
-    }
-}
-EOM
-  sapiadm update $SDC_APP_UUID -f ./update-sdc-app.json
-
-fi
-
-# provision!
-cat <<EOM | sapiadm provision
-{
-    "service_uuid" : "$SERVICE_UUID",
-    "params" : {
-        "alias" : "papi0"
-    }
-}
-EOM
-
-echo "Done!"
-exit 0
diff --git a/incr-upgrade-scripts/add-sdc.sh b/incr-upgrade-scripts/add-sdc.sh
deleted file mode 100755
index 8eb243c2..00000000
--- a/incr-upgrade-scripts/add-sdc.sh
+++ /dev/null
@@ -1,124 +0,0 @@
-#!/usr/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Add a new 'sdc' core zone.
-#
-
-set -o xtrace
-set -o errexit
-
-# add sapi service:
-SDCAPP=$(sdc-sapi /applications?name=sdc | json -Ha uuid)
-SAPIURL=$(sdc-sapi /services?name=redis | json -Ha 'metadata["sapi-url"]')
-ASSETSIP=$(sdc-sapi /services?name=redis | json -Ha 'metadata["assets-ip"]')
-USERSCRIPT=$(/usr/node/bin/node -e 'console.log(JSON.stringify(require("fs").readFileSync("/usbkey/default/user-script.common", "utf8")))')
-DOMAIN=$(sdc-sapi /applications?name=sdc | json -Ha metadata.datacenter_name).$(sdc-sapi /applications?name=sdc | json -Ha metadata.dns_domain)
-IMAGE_UUID=$(sdc-imgadm list name=sdc -H -o uuid | tail -1)
-BILLING_ID=$(sdc-ldap search '(&(objectclass=sdcpackage)(name=sdc_768))' | grep '^uuid' | cut -d' ' -f2)
-
-if [[ -z "$IMAGE_UUID" ]]; then
-    echo "$0: fatal error: no 'sdc' image uuid in IMGAPI to use"
-    exit 1
-fi
-
-# We have a commited manually hacked version of the 'sdc' service JSON.
-# Some of those fields from usb-headnode/config/sapi/services/sdc/service.json
-# and some from fields that core zone setup would fill in from the package used.
-#
-# The *right* answer here is to pull many of the "params" from the appropriate
-# package.
-json -f ./sapi/sdc/sdc_svc.json \
-    | json -e "this.application_uuid=\"$SDCAPP\"" \
-    | json -e "this.params.image_uuid=\"$IMAGE_UUID\"" \
-    | json -e "this.params.billing_id=\"$BILLING_ID\"" \
-    | json -e "this.metadata[\"sapi-url\"]=\"$SAPIURL\"" \
-    | json -e "this.metadata[\"assets-ip\"]=\"$ASSETSIP\"" \
-    | json -e "this.metadata[\"user-script\"]=$USERSCRIPT" \
-    | json -e "this.metadata[\"SERVICE_DOMAIN\"]=\"sdc.${DOMAIN}\"" \
-    >./sdc-service.json
-SERVICE_UUID=$(sdc-sapi /services -X POST -d@./sdc-service.json | json -H uuid)
-
-cat <<EOM > ./update-sdc-app.json
-{
-    "metadata" : {
-        "SDC_SERVICE" : "sdc.$DOMAIN",
-        "sdc_domain" : "sdc.$DOMAIN"
-    }
-}
-EOM
-sapiadm update $SDCAPP -f ./update-sdc-app.json
-
-
-# new 'sdc' tool in /opt/smartdc/bin
-cp ./tools/sdc /opt/smartdc/bin/sdc
-
-
-# provision!
-cat <<EOM | sapiadm provision
-{
-    "service_uuid" : "$SERVICE_UUID",
-    "params" : {
-        "alias" : "sdc0"
-    }
-}
-EOM
-
-
-# Workaround for HEAD-1813: Add an external nic that is the primary so it is the
-# default gateway, but NOT first so that its resolvers are not first.
-sdc-vmapi /vms/$(vmadm lookup -1 alias=sdc0)?action=add_nics -X POST -d@- <<EOP
-{
-    "networks": [{"uuid": "$(sdc-napi /networks?name=external | json -H 0.uuid)", "primary": true}]
-}
-EOP
-sleep 10
-
-
-
-# Add the new SDC *app* manifests for the sdc key that the 'sdc' zone creates.
-sdc_app_uuid=$(sdc-sapi /applications?name=sdc | json -H 0.uuid)
-
-sdc_private_key_uuid=$(uuid)
-sdc-sapi /manifests -X POST -d@- <<EOP
-{
-    "uuid": "$sdc_private_key_uuid",
-    "name": "sdc_private_key",
-    "path": "/root/.ssh/sdc.id_rsa",
-    "post_cmd": "chmod 600 /root/.ssh/sdc.id_rsa",
-    "template": "{{{SDC_PRIVATE_KEY}}}"
-}
-EOP
-sdc-sapi /applications/$sdc_app_uuid -X PUT -d@- <<EOP
-{
-    "manifests": {
-        "sdc_private_key": "$sdc_private_key_uuid"
-    }
-}
-EOP
-
-sdc_public_key_uuid=$(uuid)
-sdc-sapi /manifests -X POST -d@- <<EOP
-{
-    "uuid": "$sdc_public_key_uuid",
-    "name": "sdc_public_key",
-    "path": "/root/.ssh/sdc.id_rsa.pub",
-    "post_cmd": "touch /root/.ssh/authorized_keys; sed -i '.bak' -e '/ sdc key$/d' /root/.ssh/authorized_keys; echo '' >>/root/.ssh/authorized_keys; cat /root/.ssh/sdc.id_rsa.pub >>/root/.ssh/authorized_keys",
-    "template": "{{{SDC_PUBLIC_KEY}}}"
-}
-EOP
-sdc-sapi /applications/$sdc_app_uuid -X PUT -d@- <<EOP
-{
-    "manifests": {
-        "sdc_public_key": "$sdc_public_key_uuid"
-    }
-}
-EOP
diff --git a/incr-upgrade-scripts/add-zk.sh b/incr-upgrade-scripts/add-zk.sh
deleted file mode 100755
index 4814588a..00000000
--- a/incr-upgrade-scripts/add-zk.sh
+++ /dev/null
@@ -1,109 +0,0 @@
-#!/usr/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Script to add "mahi" zone to existing SDC 7 setups
-# You can either add latest available image at updates-imgadm:
-#
-#     ./add-zk.sh
-#
-# or specify an image uuid/version as follows:
-#
-#   ./add-zk.sh d7a36bca-4fdd-466f-9086-a2a22447c257 sdc-zookeeper-zfs-master-20130711T073353Z-g7dcddeb
-#
-export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-set -o xtrace
-set -o errexit
-
-role=zookeeper
-
-# Get SDC Application UUID from SAPI
-SDC_APP_UUID=$(sdc-sapi --no-headers /applications?name=sdc|json 0.uuid)
-
-NEW_IMAGE=$1
-NEW_VERSION=$2
-
-if [[ ! -n $NEW_IMAGE ]]; then
-  echo "getting image details from updates-imgadm"
-  # Get latest image details from updates-imgadm
-  ary=($(updates-imgadm list name=sdc-zookeeper -o uuid,name,version | tail -1))
-  NEW_IMAGE=${ary[0]}
-  NEW_VERSION="${ary[1]}-zfs-${ary[2]}"
-else
-  echo "Using the provided IMAGE UUID and VERSION"
-fi
-
-# Grab image manifest and file from updates-imgadm:
-MANIFEST_TMP="$NEW_VERSION.imgmanifest.tmp"
-MANIFEST="$NEW_VERSION.imgmanifest"
-
-IMG_FILE="$NEW_VERSION.gz"
-ADMIN_UUID=$(sdc-sapi --no-headers /applications?name=sdc | json -Ha metadata.ufds_admin_uuid)
-
-IS_IMAGE_IMPORTED=$(sdc-imgadm list -o uuid name=sdc-zookeeper | grep $NEW_IMAGE || true)
-
-if [[ -n "$IS_IMAGE_IMPORTED" ]]; then
-  echo "Image is already imported, moving into next step"
-else
-  # Get the original manifest
-  if [[ ! -e /var/tmp/$MANIFEST_TMP ]]; then
-    echo "Fetching image manifest"
-    updates-imgadm get "$NEW_IMAGE" > "$MANIFEST_TMP"
-    json -f $MANIFEST_TMP -e "this.owner=\"$ADMIN_UUID\"" > $MANIFEST
-  else
-    echo "Image Manifest already downloaded, moving into next step"
-  fi
-
-  if [[ ! -e /var/tmp/$IMG_FILE ]]; then
-    # Get the new image file:
-    updates-imgadm get-file $NEW_IMAGE > $IMG_FILE
-  else
-    echo "Image file already downloaded, moving into next step"
-  fi
-
-  echo "Importing image"
-  # Import the new image
-  sdc-imgadm import -m $MANIFEST -f $IMG_FILE
-fi
-
-DOMAIN=$(sdc-sapi /applications?name=sdc | json -Ha metadata.datacenter_name).$(sdc-sapi /applications?name=sdc | json -Ha metadata.dns_domain)
-USERSCRIPT=$(/usr/node/bin/node -e 'console.log(JSON.stringify(require("fs").readFileSync("/usbkey/default/user-script.common", "utf8")))')
-
-# Before attempting to create the service, let's double check it doesn't exist:
-SERVICE_UUID=$(sdc-sapi --no-headers /services?name=$role | json -Ha uuid)
-
-if [[ -n "$SERVICE_UUID" ]]; then
-  echo "Service $role already exists, moving into next step"
-else
-  json -f ./sapi/$role/"${role}"_svc.json \
-    | json -e "this.application_uuid=\"$SDC_APP_UUID\"" \
-    | json -e "this.metadata.SERVICE_DOMAIN=\"zookeeper.${DOMAIN}\"" \
-    | json -e "this.params.image_uuid=\"$NEW_IMAGE\"" \
-    | json -e "this.metadata[\"user-script\"]=$USERSCRIPT" \
-    >./"${role}"-service.json
-
-  echo "Service $role does not exist. Attempting to create it"
-  SERVICE_UUID=$(sdc-sapi /services -X POST -d@./"${role}"-service.json | json -H uuid)
-  echo "Service UUID is '$SERVICE_UUID'"
-
-  cat <<EOM > ./update-sdc-app.json
-{
-    "metadata" : {
-        "ZOOKEEPER_SERVICE" : "zookeeper.$DOMAIN",
-        "zookeeper_domain" : "zookeeper.$DOMAIN"
-    }
-}
-EOM
-  sapiadm update $SDC_APP_UUID -f ./update-sdc-app.json
-fi
-
-echo "Zookeeper service installed & ready for provisioning."
-exit 0
diff --git a/incr-upgrade-scripts/backfill-for-ufds-upgrade b/incr-upgrade-scripts/backfill-for-ufds-upgrade
deleted file mode 100755
index 26f854f5..00000000
--- a/incr-upgrade-scripts/backfill-for-ufds-upgrade
+++ /dev/null
@@ -1,319 +0,0 @@
-#!/usr/bin/env node
-/**
- * -*- mode: js -*-
- * vim: set filetype=javascript :
- */
-
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright (c) 2014, Joyent, Inc.
- */
-
-/* Backfill a bucket in moray with data for a new index column.
- *
- * When a new field is to be indexed in a Moray bucket, a new column is added
- * for that field. Moray uses the value in that column for (a) indexed searching
- * and (b) as the value for that field in gets. The problem is that the starter
- * value for that cell is *empty*, so we must backfill it from the JSON blob
- * in that row's "_value". This script does that.
- *
- * Examples:
- *      Backfill the 'name' field in the 'wf_jobs' bucket using a limit (really
- *      a batch size) of 10.
- *      $ ./backfill -i name -l 10 wf_jobs
- *
- *      Backfill the 'version' field in the 'ufds_o_smartdc' bucket, limiting
- *      the processing the rows with 'objectclass' equal to 'sdcpackage' or
- *      'sdcimage'.
- *      $ ./backfill -i version -l 50 -P objectclass=sdcpackage \
- *           -P objectclass=sdcimage ufds_o_smartdc
- */
-
-
-var p = console.log;
-var path = require('path');
-var util = require('util'),
-    format = util.format;
-var bunyan = require('bunyan');
-var getopt = require('posix-getopt');
-var ProgressBar = require('progbar').ProgressBar;
-
-var moray = require('../lib');
-
-
-
-///--- Globals
-
-var LOG = bunyan.createLogger({
-    name: path.basename(process.argv[1]),
-    level: (process.env.LOG_LEVEL || 'info'),
-    stream: process.stderr,
-    serializers: bunyan.stdSerializers
-});
-
-// Total number of objects to backfill
-var TOTAL = 0;
-// Number of objects we've already backfilled:
-var PROCESSED = 0;
-var START = Date.now();
-
-
-///--- Functions
-
-function usage(msg) {
-    if (msg) {
-        console.error(msg);
-    }
-
-    var str = 'usage: ' + path.basename(process.argv[1]);
-    // "limit" here is really batch size.
-    str += ' [-v] [-h host] [-p port] [-i index] [-l batch-size] [-P predicate] bucket';
-    console.error(str);
-    process.exit(1);
-}
-
-function parseOptions() {
-    var option;
-    var opts = {
-            host: '127.0.0.1',
-            port: 2020,
-            indexes: [],
-            limit: 100,
-            predicates: {}
-    };
-    var parser = new getopt.BasicParser('vh:p:l:i:P:', process.argv);
-    var tmp;
-
-    while ((option = parser.getopt()) !== undefined && !option.error) {
-        switch (option.option) {
-        case 'h':
-            opts.host = option.optarg;
-            break;
-
-        case 'p':
-            opts.port = parseInt(option.optarg, 10);
-            break;
-
-        case 'i':
-            tmp = option.optarg;
-            opts.indexes.push(tmp);
-            break;
-
-        case 'l':
-            opts.limit = parseInt(option.optarg, 10);
-            break;
-
-        case 'P':
-            var equal = option.optarg.indexOf('=');
-            if (equal === -1) {
-                usage('error: "-P" arg is not of the form "field=value":'
-                    + option.optarg);
-            }
-            var field = option.optarg.slice(0, equal);
-            var value = option.optarg.slice(equal + 1);
-            if (!opts.predicates[field]) {
-                opts.predicates[field] = [];
-            }
-            opts.predicates[field].push(value);
-            break;
-
-
-        case 'v':
-            // Allows us to set -vvv -> this little hackery
-            // just ensures that we're never < TRACE
-            LOG.level(Math.max(bunyan.TRACE, (LOG.level() - 10)));
-            if (LOG.level() <= bunyan.DEBUG)
-                    LOG = LOG.child({src: true});
-            break;
-
-        default:
-            process.exit(1);
-            break;
-        }
-    }
-
-    if (parser.optind() >= process.argv.length) {
-        usage('missing required argument: "bucket"');
-    }
-
-    opts.name = process.argv[parser.optind()];
-    return (opts);
-}
-
-
-var options = parseOptions();
-
-
-function backfillBucket() {
-    var client = moray.createClient({
-        host: options.host,
-        log: LOG,
-        port: options.port
-    });
-    var cfg = options.config || {
-        options: options.options
-    };
-    var bar;
-
-    client.on('connect', function onConnect() {
-        var pred;
-        function getPredicate(cb) {
-            client.getBucket(options.name, function (err, bucket) {
-                if (err) return cb(err);
-                var ary = [];
-                options.indexes.forEach(function (i) {
-                    ary.push('\'%' + i + '%\'');
-                });
-                pred = 'from ' + options.name + ' where _value like any (array[' +
-                    ary.join(',') + '])';
-                Object.keys(options.predicates).forEach(function (field) {
-                    var isArray = bucket.index[field] && bucket.index[field].type[0] == '[';
-                    var values = options.predicates[field];
-                    if (isArray) {
-                        pred += format(' and %s in (array[\'%s\'])', field, values.join("'], array['"));
-                    } else {
-                        pred += format(' and %s in (\'%s\')', field, values.join("', '"));
-                    }
-                });
-                cb(null, pred);
-            });
-        }
-
-        function countObjects(cb) {
-            if (TOTAL === 0) {
-                var sql = 'select count(_id) ' + pred;
-                // console.log(sql);
-
-                var countReq = client.sql(sql);
-
-                countReq.once('error', function (err) {
-                        console.error(err.message);
-                        return cb(err);
-                });
-
-                countReq.on('record', function (obj) {
-                    if (typeof (obj) === 'object' && obj !== null) {
-                        TOTAL = Number(obj.count);
-                        console.log('Backfilling %d records', TOTAL);
-                        bar = new ProgressBar({
-                            size: TOTAL,
-                            filename: options.name
-                        });
-                    }
-                });
-
-                countReq.once('end', function () {
-                    return cb();
-                });
-            } else {
-                return cb();
-            }
-        }
-
-        function backfillObjects(offset, limit, cb) {
-            var done = 0;
-            var _2update = {};
-
-            function wait() {
-                if (done === limit || TOTAL === PROCESSED) {
-                    return cb();
-                } else {
-                    return setTimeout(wait, 1000);
-                }
-            }
-
-            var sql = 'select * ' + pred + ' order by _id limit ' + limit +
-                    ' offset ' + offset;
-
-            var req = client.sql(sql);
-
-            req.once('error', function (err) {
-                    console.error(err.message);
-                    return cb(err);
-            });
-
-            req.on('record', function (obj) {
-                if (obj) {
-                    _2update[obj._key] = obj;
-                }
-            });
-
-            req.on('end', function () {
-                Object.keys(_2update).forEach(function (key) {
-                    var data = JSON.parse(_2update[key]._value);
-                    var skip = true;
-                    for (var i = 0; i < options.indexes.length; i++) {
-                        // XXX Not sure about a UFDS field with multiple values.
-                        var idx = options.indexes[i];
-                        if (data.hasOwnProperty(idx)
-                            && String(data[idx]) !== _2update[key][idx]) {
-                            skip = false;
-                            break;
-                        }
-                    }
-                    bar.advance(1);
-                    if (skip) {
-                        done += 1;
-                        PROCESSED += 1;
-                        return;
-                    }
-                    client.putObject(options.name, key, data, function (err) {
-                        done += 1;
-                        PROCESSED += 1;
-                        if (err) {
-                            bar._write('error with _key "' + key + '":'
-                                + err.message, true);
-                        } else {
-                            // Note: hack into progbar's internal write so
-                            // we can erase the current progbar. This *sort*
-                            // of works. It is helpful for large sets with
-                            // few changes at least so good enough.
-                            bar._write('Updated ' + options.name
-                                + ' record with _key "' + key + '"\n', true);
-                        }
-                    });
-                });
-                return wait();
-            });
-
-        }
-
-        function processCb(err) {
-            if (err) {
-                console.log(err.message);
-                if (err.message ===
-                        'the underlying connection has been closed') {
-                    LOG.warn('Waiting for client to reconnect');
-                    client.once('connect', function reconnectCallback() {
-                        backfillObjects(PROCESSED, options.limit, processCb);
-                    });
-                }
-                return (false);
-            } else if (PROCESSED < TOTAL) {
-                return backfillObjects(PROCESSED, options.limit, processCb);
-            } else {
-                bar.end();
-                console.log('Backfill of %d objects done (in %d seconds)',
-                    TOTAL, (Date.now() - START) / 1000);
-                process.exit(0);
-            }
-        }
-
-        getPredicate(function (pErr, pred_) {
-            countObjects(function (err) {
-                if (err) {
-                    console.error(err.message);
-                }
-                backfillObjects(0, options.limit, processCb);
-            });
-        });
-    });
-
-}
-
-backfillBucket();
diff --git a/incr-upgrade-scripts/capi-305.sql b/incr-upgrade-scripts/capi-305.sql
deleted file mode 100644
index 84c86a54..00000000
--- a/incr-upgrade-scripts/capi-305.sql
+++ /dev/null
@@ -1,21 +0,0 @@
-ALTER TABLE ufds_o_smartdc ADD COLUMN objectclass_ary text[];
-ALTER TABLE ufds_o_smartdc ADD COLUMN pwdhistory_ary text[];
-ALTER TABLE ufds_o_smartdc ADD COLUMN pwdfailuretime_ary numeric[];
-WITH new_values AS (SELECT _id, regexp_split_to_array(objectclass, ',') AS objectclass_arr FROM ufds_o_smartdc ORDER BY _id) UPDATE ufds_o_smartdc AS tr SET objectclass_ary = nv.objectclass_arr FROM new_values nv WHERE nv._id = tr._id;
-WITH new_values AS (SELECT _id, regexp_split_to_array(pwdhistory, ',') AS pwdhistory_arr FROM ufds_o_smartdc WHERE pwdhistory IS NOT NULL ORDER BY _id) UPDATE ufds_o_smartdc AS tr SET pwdhistory_ary = nv.pwdhistory_arr FROM new_values nv WHERE nv._id = tr._id;
-WITH new_values AS (SELECT _id, ARRAY[pwdfailuretime::numeric] AS pwdfailuretime_arr FROM ufds_o_smartdc WHERE pwdfailuretime IS NOT NULL ORDER BY _id) UPDATE ufds_o_smartdc AS tr SET pwdfailuretime_ary = nv.pwdfailuretime_arr FROM new_values nv WHERE nv._id = tr._id;
-DROP INDEX IF EXISTS ufds_o_smartdc_objectclass_idx;
-DROP INDEX IF EXISTS ufds_o_smartdc_pwdfailuretime_idx;
-DROP INDEX IF EXISTS ufds_o_smartdc_pwdhistory_idx;
-ALTER TABLE ufds_o_smartdc DROP COLUMN IF EXISTS objectclass;
-ALTER TABLE ufds_o_smartdc DROP COLUMN IF EXISTS pwdhistory;
-ALTER TABLE ufds_o_smartdc DROP COLUMN IF EXISTS pwdfailuretime;
-ALTER TABLE ufds_o_smartdc RENAME COLUMN objectclass_ary to objectclass;
-ALTER TABLE ufds_o_smartdc RENAME COLUMN pwdhistory_ary to pwdhistory;
-ALTER TABLE ufds_o_smartdc RENAME COLUMN pwdfailuretime_ary to pwdfailuretime;
-CREATE INDEX ufds_o_smartdc_objectclass_idx ON ufds_o_smartdc USING gin (objectclass) WHERE (objectclass IS NOT NULL);
-CREATE INDEX ufds_o_smartdc_pwdfailuretime_idx ON ufds_o_smartdc USING gin (pwdfailuretime) WHERE (pwdfailuretime IS NOT NULL);
-CREATE INDEX ufds_o_smartdc_pwdhistory_idx ON ufds_o_smartdc USING gin (pwdhistory) WHERE (pwdhistory IS NOT NULL);
-REINDEX INDEX ufds_o_smartdc_objectclass_idx;
-REINDEX INDEX ufds_o_smartdc_pwdfailuretime_idx;
-REINDEX INDEX ufds_o_smartdc_pwdhistory_idx;
diff --git a/incr-upgrade-scripts/changelog-platform.sh b/incr-upgrade-scripts/changelog-platform.sh
deleted file mode 100755
index 2ad38020..00000000
--- a/incr-upgrade-scripts/changelog-platform.sh
+++ /dev/null
@@ -1,116 +0,0 @@
-#!/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Generate a changelog between two given platform date strings.
-#
-# Assumptions:
-# - assume the platform builds are from the "master" branch
-# - assumes the builds are still on /Joyent_Dev/stor/builds/platform
-#
-# Usage:
-#       ./changelog-platform.sh <src> <dst>
-#
-# Example:
-#       ./changelog-platform.sh 20140314T221527Z 20140324T202823Z
-#
-
-
-if [[ -n "$TRACE" ]]; then
-    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-    set -o xtrace
-fi
-set -o errexit
-set -o pipefail
-
-
-#---- globals
-
-TOP=$(cd $(dirname $0)/; pwd)
-
-# Repos from the "platform" key in mountain-gorilla.git/targets.json.
-repo_url_from_var=$(cat <<EOM
-{
-    "SMARTOS_LIVE_SHA": {"name": "smartos-live", "url": "git@github.com:joyent/smartos-live.git"},
-    "ILLUMOS_JOYENT_SHA": {"name": "illumos-joyent", "url": "git@github.com:joyent/illumos-joyent.git"},
-    "ILLUMOS_EXTRA_SHA": {"name": "illumos-extra", "url": "git@github.com:joyent/illumos-extra.git"},
-    "ILLUMOS_KVM_SHA": {"name": "illumos-kvm", "url": "git@github.com:joyent/illumos-kvm.git"},
-    "ILLUMOS_KVM_CMD_SHA": {"name": "illumos-kvm-cmd", "url": "git@github.com:joyent/illumos-kvm-cmd.git"},
-    "UR_AGENT_SHA": {"name": "ur-agent", "url": "git@github.com:joyent/sdc-ur-agent.git"},
-    "SDC_PLATFORM_SHA": {"name": "sdc-platform", "url": "git@github.com:joyent/sdc-platform.git"},
-    "MDATA_CLIENT_SHA": {"name": "mdata-client", "url": "git@github.com:joyent/mdata-client.git"}
-}
-EOM)
-
-
-#---- support routines
-
-function fatal
-{
-    echo "$0: fatal error: $*" >&2
-    exit 1
-}
-
-
-
-#---- mainline
-
-src_date=$1
-dst_date=$2
-[[ -n "$src_date" ]] || fatal "<src_date> was not given"
-[[ -n "$dst_date" ]] || fatal "<dst_date> was not given"
-
-echo "# SDC Platform $src_date..$dst_date"
-echo ""
-
-src_config_mk=$(mget /Joyent_Dev/stor/builds/platform/master-$src_date/config.mk | grep '_SHA=')
-dst_config_mk=$(mget /Joyent_Dev/stor/builds/platform/master-$dst_date/config.mk | grep '_SHA=')
-
-
-echo "$repo_url_from_var" | json --keys -a | while read key; do
-    repo_url=$(echo "$repo_url_from_var" | json $key.url)
-    repo_name=$(echo "$repo_url_from_var" | json $key.name)
-    src_sha=$(echo "$src_config_mk" | grep $key | cut -d= -f2)
-    dst_sha=$(echo "$dst_config_mk" | grep $key | cut -d= -f2)
-    echo "## $repo_name"
-    echo ""
-    if [[ -z "$src_sha" ]]; then
-        echo "error: could not find '$key' in /Joyent_Dev/stor/builds/platform/master-$src_date/config.mk"
-    elif [[ -z "$dst_sha" ]]; then
-        echo "error: could not find '$key' in /Joyent_Dev/stor/builds/platform/master-$dst_date/config.mk"
-    elif [[ "$src_sha" == "$dst_sha" ]]; then
-        echo "(no changes, $repo_url#$src_sha)"
-    else
-        echo "$repo_url#$src_sha..$dst_sha"
-        echo ""
-        repo_dir=$TOP/tmp/$repo_name
-        if [[ -d $repo_dir ]]; then
-            echo "  * git pull $repo_url" >&2
-            (cd $repo_dir && git pull >/dev/null)
-        else
-            echo "  * git clone $repo_url" >&2
-            mkdir -p $(dirname $repo_dir)
-            rm -rf $repo_dir.tmp
-            git clone $repo_url $repo_dir.tmp >/dev/null
-            mv $repo_dir.tmp $repo_dir
-        fi
-        echo '```'
-        # Compact git log, drop the timezone info for brevity.
-        (cd $repo_dir && \
-            git log --pretty=format:'[%ci] %h -%d %s <%an>' $src_sha..$dst_sha \
-            | sed -E 's/ [-+][0-9]{4}\]/]/')
-        echo '```'
-        # TODO: get full log, extract list of tickets and show ticket info
-    fi
-    echo ""
-    echo ""
-done
-
diff --git a/incr-upgrade-scripts/dc-maint-end.sh b/incr-upgrade-scripts/dc-maint-end.sh
deleted file mode 100755
index cb237c96..00000000
--- a/incr-upgrade-scripts/dc-maint-end.sh
+++ /dev/null
@@ -1,42 +0,0 @@
-#!/usr/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Take this DC out of maintenance mode:
-# - take cloudapi out of readonly mode
-#
-
-export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-set -o xtrace
-set -o errexit
-set -o pipefail
-
-TOP=$(cd $(dirname $0)/; pwd)
-source $TOP/libupgrade.sh
-
-
-#---- support routines
-
-function fatal
-{
-    echo "$0: fatal error: $*" >&2
-    exit 1
-}
-
-
-#---- mainline
-
-[[ $(sysinfo | json "Boot Parameters.headnode") == "true" ]] \
-    || fatal "not running on the headnode"
-
-cloudapi_readonly_mode false
-
-echo 'Done. DC is now *out of* maint mode.'
diff --git a/incr-upgrade-scripts/dc-maint-start.sh b/incr-upgrade-scripts/dc-maint-start.sh
deleted file mode 100755
index d5baa16e..00000000
--- a/incr-upgrade-scripts/dc-maint-start.sh
+++ /dev/null
@@ -1,45 +0,0 @@
-#!/usr/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Put this DC in maintenance mode:
-# - put cloudapi in readonly mode
-# - wait for a while for the wf queue to drain
-#
-
-export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-set -o xtrace
-set -o errexit
-set -o pipefail
-
-TOP=$(cd $(dirname $0)/; pwd)
-source $TOP/libupgrade.sh
-
-
-#---- support routines
-
-function fatal
-{
-    echo "$0: fatal error: $*" >&2
-    exit 1
-}
-
-
-#---- mainline
-
-[[ $(sysinfo | json "Boot Parameters.headnode") == "true" ]] \
-    || fatal "not running on the headnode"
-
-cloudapi_readonly_mode true
-wait_for_wf_drain
-
-echo "Done. DC is now in maint mode (cloudapi readonly, wf cleared)."
-
diff --git a/incr-upgrade-scripts/delete-dapi.sh b/incr-upgrade-scripts/delete-dapi.sh
deleted file mode 100755
index 8801db96..00000000
--- a/incr-upgrade-scripts/delete-dapi.sh
+++ /dev/null
@@ -1,41 +0,0 @@
-#!/usr/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Script to remove "dapi" zone, image and service in existing SDC 7 setups.
-#
-#     ./delete-dapi.sh
-#
-export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-set -o xtrace
-set -o errexit
-
-UFDS_ADMIN_UUID=$(bash /lib/sdc/config.sh -json | json ufds_admin_uuid)
-DAPI=$(vmadm lookup -1 state=running owner_uuid=$UFDS_ADMIN_UUID alias=dapi0)
-
-# check that we can support DAPI's removal
-sdc-cnapi --no-headers /allocate -X POST | json message | grep -q 'validation'
-
-# remove amon probes for the zone
-PROBES=$(sdc-amon /pub/admin/probes | json -Hc "this.agent === '$DAPI'" -a uuid)
-for uuid in $PROBES; do
-    sdc-amon /pub/admin/probes/$uuid -X DELETE
-done
-
-# remove dapi image(s)
-sdc-imgadm list name=dapi -H -o uuid | xargs -n1 sdc-imgadm delete
-
-# remove instance
-sdc-sapi /instances/$DAPI -X DELETE
-
-# remove service from SAPI
-SAPI=$(sdc-sapi /services?name=dapi | json -Ha uuid)
-sdc-sapi /services/$SAPI -X DELETE
diff --git a/incr-upgrade-scripts/download-all.sh b/incr-upgrade-scripts/download-all.sh
deleted file mode 100755
index f6572cec..00000000
--- a/incr-upgrade-scripts/download-all.sh
+++ /dev/null
@@ -1,57 +0,0 @@
-#!/usr/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Download and install all given images. Note that 'upgrade-all.sh' will do
-# this lazily as required. This is here to pre-download all images for a faster
-# upgrade of multiple roles.
-#
-# Usage:
-#   ./download-all.sh <upgrade-images-file>
-#
-
-set -o xtrace
-set -o errexit
-
-IMAGE_LIST=$1
-if [[ -z $1 ]]; then
-    echo "$0: error: no '<update-images-file>' given"
-    echo ""
-    echo "Usage: download-all.sh <update-images-file>"
-    exit 1
-fi
-source $IMAGE_LIST
-
-[[ -n "$SDC_IMAGE" ]] && ./download-image.sh $SDC_IMAGE
-[[ -n "$UFDS_IMAGE" ]] && ./download-image.sh $UFDS_IMAGE
-[[ -n "$ADMINUI_IMAGE" ]] && ./download-image.sh $ADMINUI_IMAGE
-[[ -n "$AMON_IMAGE" ]] && ./download-image.sh $AMON_IMAGE
-[[ -n "$AMONREDIS_IMAGE" ]] && ./download-image.sh $AMONREDIS_IMAGE
-[[ -n "$CA_IMAGE" ]] && ./download-image.sh $CA_IMAGE
-[[ -n "$CLOUDAPI_IMAGE" ]] && ./download-image.sh $CLOUDAPI_IMAGE
-[[ -n "$CNAPI_IMAGE" ]] && ./download-image.sh $CNAPI_IMAGE
-[[ -n "$DHCPD_IMAGE" ]] && ./download-image.sh $DHCPD_IMAGE
-[[ -n "$FWAPI_IMAGE" ]] && ./download-image.sh $FWAPI_IMAGE
-[[ -n "$IMGAPI_IMAGE" ]] && ./download-image.sh $IMGAPI_IMAGE
-[[ -n "$NAPI_IMAGE" ]] && ./download-image.sh $NAPI_IMAGE
-[[ -n "$SAPI_IMAGE" ]] && ./download-image.sh $SAPI_IMAGE
-[[ -n "$USAGEAPI_IMAGE" ]] && ./download-image.sh $USAGEAPI_IMAGE
-[[ -n "$VMAPI_IMAGE" ]] && ./download-image.sh $VMAPI_IMAGE
-[[ -n "$WORKFLOW_IMAGE" ]] && ./download-image.sh $WORKFLOW_IMAGE
-[[ -n "$SDCSSO_IMAGE" ]] && ./download-image.sh $SDCSSO_IMAGE
-[[ -n "$MORAY_IMAGE" ]] && ./download-image.sh $MORAY_IMAGE
-[[ -n "$MANATEE_IMAGE" ]] && ./download-image.sh $MANATEE_IMAGE
-[[ -n "$RABBITMQ_IMAGE" ]] && ./download-image.sh $RABBITMQ_IMAGE
-[[ -n "$PAPI_IMAGE" ]] && ./download-image.sh $PAPI_IMAGE
-[[ -n "$MAHI_IMAGE" ]] && ./download-image.sh $MAHI_IMAGE
-[[ -n "$ASSETS_IMAGE" ]] && ./download-image.sh $ASSETS_IMAGE
-[[ -n "$BINDER_IMAGE" ]] && ./download-image.sh $BINDER_IMAGE
-[[ -n "$ZOOKEEPER_IMAGE" ]] && ./download-image.sh $ZOOKEEPER_IMAGE
diff --git a/incr-upgrade-scripts/download-image.sh b/incr-upgrade-scripts/download-image.sh
deleted file mode 100755
index af5788a4..00000000
--- a/incr-upgrade-scripts/download-image.sh
+++ /dev/null
@@ -1,117 +0,0 @@
-#!/usr/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# download-image.sh: download and install an image from updates.joyent.com
-#
-# Note: We *should* just be using:
-#       sdc-imgadm import UUID -S https://updates.joyent.com
-# but we don't because we still haven't cleaned up 'owner' field handling in
-# images from public/private repos (e.g. from updates.joyent.com) where there
-# is no meaning user database, or at least meaningfully shareable user
-# database with the local DC.
-#
-
-if [[ -n "$TRACE" ]]; then
-    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-    set -o xtrace
-fi
-set -o errexit
-set -o pipefail
-
-
-#---- support routines
-
-function fatal
-{
-    echo "$0: fatal error: $*" >&2
-    exit 1
-}
-
-function import_image() {
-    local uuid=$1
-    local manifest=/var/tmp/${uuid}.manifest.$$
-    local file=$2
-    if [[ -z $file ]]; then
-        file=/var/tmp/${uuid}.file.$$
-    fi
-
-    SDC_IMGADM='/opt/smartdc/bin/sdc-imgadm'
-
-    set +o errexit
-    if [[ -n "$(${SDC_IMGADM} get ${uuid} 2>/dev/null || true)" ]]; then
-        echo "Image ${uuid} already installed."
-        return
-    fi
-
-    # Avoid using 'updates-imgadm' because really old ones don't know about
-    # updates.joyent.com channels and we want to get this image UUID out of
-    # whatever channel it is in.
-    #
-    # Use API version 2 to get 'channels' field that we need below.
-    curl -ksSf https://updates.joyent.com/images/$uuid?channel=* \
-        -H 'Accept-Version: ~2' \
-        >${manifest} \
-        || fatal "failed to get image $uuid manifest"
-    local origin=$(json -f $manifest origin)
-    if [[ -n "$origin" ]]; then
-        echo "Import origin image $origin"
-        import_image $origin
-    fi
-
-    bytes=$(json -f ${manifest} files.0.size)
-    name=$(json -f ${manifest} name)
-    version=$(json -f ${manifest} version)
-
-    if [[ -e $file ]]; then
-        local fsize=$(stat -c%s "$file")
-        if [[ $fsize != $bytes ]]; then
-            fatal "$file size mismatch: Manifest size $bytes, File size $fsize"
-        fi
-    else
-        printf "Downloading image $uuid ($name $version) file (%d MiB).\n" \
-            $(( ${bytes} / 1024 / 1024 ))
-        # Need to be specific on a channel for this endpoint.
-        local channel=$(json -f $manifest channels.0)
-        curl -ksSf https://updates.joyent.com/images/$uuid/file?channel=$channel >${file} \
-            || fatal "failed to get image $uuid file from updates.joyent.com"
-    fi
-
-    # Manifest tweaks for compat:
-    # - Set owner to the admin UUID to workaround older versions that don't
-    #   support the all-zero's owner work.
-    # - Remove 'channels' for the case of an upgraded 'updates-imgadm'
-    #   (i.e. we ran upgrade-tools.sh), but an IMGAPI pre-channels work.
-    ufds_admin_uuid=$(bash /lib/sdc/config.sh -json | json ufds_admin_uuid)
-    json -f $manifest \
-        -e "this.owner = '$ufds_admin_uuid'" \
-        -e "this.channels = undefined" \
-        > $manifest.tmp
-    mv $manifest.tmp $manifest
-
-    ${SDC_IMGADM} import -m ${manifest} -f ${file} \
-        || fatal "failed to import image ${uuid}"
-
-    if [[ -z "$(imgadm get $uuid 2>/dev/null)" ]]; then
-        imgadm import ${uuid} || fatal "failed to install image $uuid into zpool"
-    fi
-
-    rm -f ${manifest} ${file}
-}
-
-
-
-
-#---- mainline
-
-[[ $# -gt 0 ]] || fatal "usage: $0 <image uuid> [image file]"
-import_image $1 $2
-exit 0
diff --git a/incr-upgrade-scripts/gen-changelog.sh b/incr-upgrade-scripts/gen-changelog.sh
deleted file mode 100755
index 0d81d8ec..00000000
--- a/incr-upgrade-scripts/gen-changelog.sh
+++ /dev/null
@@ -1,149 +0,0 @@
-#!/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Generate a changelog from a given DC version summary to a 'upgrade-images'
-# file. The former can be generated by `sdc-versions.sh -j`
-# (https://mo.joyent.com/trentops/blob/master/bin/sdc-versions.sh) and the
-# latter by `gen-upgrade-images.sh` in this repo.
-#
-# Usage:
-#       ./gen-changelog.sh <sdc-versions-dump> <upgrade-images>
-#
-
-
-if [[ -n "$TRACE" ]]; then
-    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-    set -o xtrace
-fi
-set -o errexit
-set -o pipefail
-
-
-#---- globals
-
-TOP=$(cd $(dirname $0)/; pwd)
-
-# A start at this in the MG repo:
-#   json -f targets.json -e 'var s=this; Object.keys(s).forEach(function (k) { if (s[k].repos) s[k] = s[k].repos[0].url });'
-repo_url_from_service=$(cat <<EOM
-{
-  "smartlogin": "git@github.com:joyent/sdc-smart-login.git",
-  "incr-upgrade": "git@github.com:joyent/sdc-headnode.git",
-  "ca": "git@github.com:joyent/sdc-cloud-analytics.git",
-  "amon": "git@github.com:joyent/sdc-amon.git",
-  "assets": "git@github.com:joyent/sdc-assets.git",
-  "adminui": "git@github.com:joyent/sdc-adminui.git",
-  "dhcpd": "git@github.com:joyent/sdc-booter.git",
-  "redis": "git@github.com:joyent/sdc-redis.git",
-  "amonredis": "git@github.com:joyent/sdc-amonredis.git",
-  "rabbitmq": "git@github.com:joyent/sdc-rabbitmq.git",
-  "cloudapi": "git@github.com:joyent/sdc-cloudapi.git",
-  "ufds": "git@github.com:joyent/sdc-ufds.git",
-  "workflow": "git@github.com:joyent/sdc-workflow.git",
-  "vmapi": "git@github.com:joyent/sdc-vmapi.git",
-  "papi": "git@github.com:joyent/sdc-papi.git",
-  "imgapi": "git@github.com:joyent/sdc-imgapi.git",
-  "sdc": "git@github.com:joyent/sdc-sdc.git",
-  "imgapi-cli": "git@github.com:joyent/sdc-imgapi-cli.git",
-  "heartbeater": "git@github.com:joyent/sdc-heartbeater-agent.git",
-  "provisioner": "git@github.com:joyent/sdc-provisioner-agent.git",
-  "hagfish-watcher": "git@github.com:joyent/sdc-hagfish-watcher.git",
-  "firewaller": "git@github.com:joyent/sdc-firewaller-agent.git",
-  "cnapi": "git@github.com:joyent/sdc-cnapi.git",
-  "fwapi": "git@github.com:joyent/sdc-fwapi.git",
-  "napi": "git@github.com:joyent/sdc-napi.git",
-  "sapi": "git@github.com:joyent/sdc-sapi.git",
-  "binder": "git@github.com:joyent/binder.git",
-  "manatee": "git@github.com:joyent/sdc-manatee.git",
-  "moray": "git@github.com:joyent/moray.git",
-  "manta": "git@github.com:joyent/sdc-manta.git"
-}
-EOM)
-
-
-#---- support routines
-
-function fatal
-{
-    echo "$0: fatal error: $*" >&2
-    exit 1
-}
-
-
-
-#---- mainline
-
-src=$1
-dst=$2
-[[ -f "$src" ]] || fatal "<sdc-versions-dump> is not an existing file: $src"
-[[ -f "$dst" ]] || fatal "<upgrade-images> is not an existing file: $dst"
-
-echo "# SDC upgrade changelog"
-echo ""
-echo '```'
-cat $dst
-echo '```'
-echo ""
-echo ""
-
-echo "# incr-upgrade"
-echo ""
-echo "TODO"
-echo ""
-echo ""
-
-echo "# agents"
-echo ""
-echo "TODO"
-echo ""
-echo ""
-
-
-cat $dst | grep 'export ' | while read line; do
-    service=$(echo "$line" | sed -E 's/^.* ([A-Z0-9]+)_IMAGE=.*$/\1/' \
-        | tr 'A-Z' 'a-z')
-    to_sha=$(echo "$line" | sed -E 's/^.* version=.*-g([0-9a-f]{7}) .*$/\1/')
-    if [[ ${#to_sha} != 7 ]]; then
-        # We couldn't parse "version=..." out of the line. Let's hit
-        # updates.jo for that info.
-        to_uuid=$(echo "$line" | cut -d'=' -f2 | cut -d' ' -f1)
-        to_version=$(updates-imgadm get $to_uuid | json version)
-        to_sha=$(echo $to_version | sed -E 's/^.*-g([0-9a-f]{7})$/\1/')
-    fi
-    [[ ${#to_sha} == 7 ]] || fatal "could not determine git sha for image: '$line'"
-    from_sha=$(json -f $src -ga -c "this.service === '$service'" git)
-    repo_url=$(echo "$repo_url_from_service" | json $service)
-    echo "# $service ($repo_url $from_sha..$to_sha)"
-    echo ""
-    repo_dir=$TOP/tmp/$service
-    if [[ -d $repo_dir ]]; then
-        echo "Git pull $repo_url" >&2
-        (cd $repo_dir && git pull >/dev/null)
-    else
-        echo "Git clone $repo_url" >&2
-        mkdir -p $(dirname $repo_dir)
-        rm -rf $repo_dir.tmp
-        git clone $repo_url $repo_dir.tmp >/dev/null
-        mv $repo_dir.tmp $repo_dir
-    fi
-    echo '```'
-    # Compact git log, drop the timezone info for brevity.
-    (cd $repo_dir && \
-        git log --pretty=format:'[%ci] %h -%d %s <%an>' $from_sha..$to_sha \
-        | sed -E 's/ [-+][0-9]{4}\]/]/')
-    echo ""
-    echo '```'
-    # TODO: get full log, extract list of tickets and show ticket info
-    echo ""
-    echo ""
-done
-
diff --git a/incr-upgrade-scripts/gen-upgrade-images.sh b/incr-upgrade-scripts/gen-upgrade-images.sh
deleted file mode 100755
index 7ad4d66b..00000000
--- a/incr-upgrade-scripts/gen-upgrade-images.sh
+++ /dev/null
@@ -1,106 +0,0 @@
-#!/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Helper script to generate an 'upgrade-images' file to be used for
-# an SDC upgrade.
-#
-# Usage:
-#       ./gen-upgrade-images.sh [SERVICES...]
-#
-# By default this will find the latest image for *all* services (with some
-# exceptions for services that are typically not upgraded). A subset of
-# service names can be specified, e.g.:
-#
-#       ./gen-upgrade-images.sh imgapi vmapi
-#
-
-
-if [[ -n "$TRACE" ]]; then
-    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-    set -o xtrace
-fi
-set -o errexit
-set -o pipefail
-
-TOP=$(cd $(dirname $0)/; pwd)
-
-
-#---- support routines
-
-function fatal
-{
-    echo "$0: fatal error: $*" >&2
-    exit 1
-}
-
-
-
-
-#---- mainline
-
-services=$*
-if [[ -z "$services" ]]; then
-    # If running in usb-headnode.git clone, then use list of services in
-    # config dir.
-    if [[ -d "$TOP/../config/sapi/services" ]]; then
-        services=$(ls -1 $TOP/../config/sapi/services)
-    # If running on a setup SDC headnode, then use the list of services in
-    # SAPI.
-    elif [[ -n "$(sdc-sapi /applications?name=sdc | json -H 0.uuid || true)" ]]; then
-        sdc_app=$(sdc-sapi /applications?name=sdc | json -H 0.uuid)
-        services=$(sdc-sapi "/services?application_uuid=$sdc_app&type=vm" | json -Ha name)
-    fi
-    # Excluded by default:
-    # - redis, amonredis: typically don't need to upgrade these
-    # - binder, dhcpd: don't have upgrade logic for these. ZK in binder to fear
-    # - manatee, moray: typically HA, don't have automatic upgrade logic for
-    #   those upgrades
-    # - manta: typically handled for manta upgrade handling
-    # - sdcsso: no longer part of sdc core
-    services=$(echo "$services" \
-        | grep -v amonredis \
-        | grep -v binder \
-        | grep -v dapi \
-        | grep -v dhcpd \
-        | grep -v manta \
-        | grep -v manatee \
-        | grep -v moray \
-        | grep -v redis \
-        | grep -v sdcsso \
-        | sort \
-        | xargs)
-fi
-#echo "services: '$services'
-
-
-for service in $services; do
-    # Map service to image name.
-    image_name=$service
-    if [[ $service == "moray" ]]; then
-        image_name=manta-moray
-    elif [[ $service == "manta" ]]; then
-        image_name=manta-deployment
-    elif [[ $service == "binder" ]]; then
-        image_name=manta-nameservice
-    elif [[ $service == "manatee" ]]; then
-        image_name=sdc-postgres
-    elif [[ $service == "mahi" ]]; then
-        image_name=manta-authcache
-    fi
-    #echo "# get latest '$image_name' image for service '$service'" 2>&1
-    image_data=$(updates-imgadm list --latest -j version=~master name=$image_name | json -- -1)
-    image_uuid=$(echo "$image_data" | json uuid)
-    image_version=$(echo "$image_data" | json version)
-    printf "export %9s_IMAGE=%s  # version=%s image_name=%s\n" \
-        $(echo $service | tr 'a-z' 'A-Z') $image_uuid $image_version $image_name
-done
-
diff --git a/incr-upgrade-scripts/get-changes.sh b/incr-upgrade-scripts/get-changes.sh
deleted file mode 100755
index b8c24292..00000000
--- a/incr-upgrade-scripts/get-changes.sh
+++ /dev/null
@@ -1,76 +0,0 @@
-#!/usr/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# get-changes.sh: gets changes between deployed and upgrade versions of
-# a service.
-
-# set -o errexit
-# set -o xtrace
-
-function fatal {
-    echo "$(basename $0): fatal error: $*" >&2
-    exit 1
-}
-
-
-if [[ -z $1 ]]; then
-    fatal "Usage: get-changes.sh imagefile.sh"
-fi
-IMAGE_LIST=$1
-source ${IMAGE_LIST}
-
-ROLES="cnapi vmapi workflow"
-
-function get_git_sha
-{
-    local VERSION=$1
-}
-
-function get_upgrade_image
-{
-    # use updates-imgadm
-    local ROLE=$1
-    local VAR=${ROLE^^}_IMAGE
-    local UUID=${!VAR}
-    echo $(updates-imgadm get $UUID | json -a version)
-}
-
-function get_current_image
-{
-    local ROLE=$1
-    local UUID=$(vmadm lookup -j -o image_uuid,tags tags.smartdc_role=$ROLE | json -a image_uuid)
-    echo $(sdc-imgadm get $UUID | json -a version | tail -1)
-}
-
-function print_diff
-{
-    local ROLE=$1
-    local CURRENT=$(get_current_image $ROLE)
-    CURRENT=$(expr match "$CURRENT" '.*\(-g[0-9a-f]*\)')
-    local UPGRADE=$(get_upgrade_image $ROLE)
-    UPGRADE=$(expr match "$UPGRADE" '.*\(-g[0-9a-f]*\)')
-    echo "echo \"## $ROLE\" >> /tmp/upgrade.md"
-    echo "echo ' ' >> /tmp/upgrade.md"
-    echo "cd $ROLE"
-    echo "git pull"
-    echo "git log --oneline ${CURRENT:2}..${UPGRADE:2} >> /tmp/upgrade.md"
-    echo "cd .."
-    echo "echo ' ' >> /tmp/upgrade.md"
-    echo "echo ' ' >> /tmp/upgrade.md"
-}
-
-echo "touch /tmp/upgrade.md"
-echo "echo \"# UPGRADE CHANGES\" >> /tmp/upgrade.md"
-echo "echo ' ' >> /tmp/upgrade.md"
-for ROLE in $ROLES; do
-    print_diff $ROLE
-done
diff --git a/incr-upgrade-scripts/libupgrade.sh b/incr-upgrade-scripts/libupgrade.sh
deleted file mode 100755
index 8d98aa1f..00000000
--- a/incr-upgrade-scripts/libupgrade.sh
+++ /dev/null
@@ -1,260 +0,0 @@
-#!/usr/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Utilities for the incr-upgrade scripts.
-#
-
-export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-set -o xtrace
-set -o errexit
-set -o pipefail
-
-
-#---- support routines
-
-function fatal
-{
-    echo "$0: fatal error: $*" >&2
-    exit 1
-}
-
-
-function wait_for_wf_drain {
-    local running
-    local queued
-
-    echo "Wait up to 5 minutes for workflow to drain of running/queued jobs."
-    for i in {1..60}; do
-        sleep 5
-        echo -n '.'
-        # If sdc zone is rebooting, then can't call sdc-vmapi here, just
-        # presume the job is still running.
-        running="$(sdc-workflow /jobs?limit=20\&execution=running | json -Ha uuid)"
-        if [[ -n "$running" ]]; then
-            continue
-        fi
-        queued="$(sdc-workflow /jobs?limit=20\&execution=queued | json -Ha uuid)"
-        if [[ -n "$queued" ]]; then
-            continue
-        fi
-        break
-    done
-    echo ""
-    if [[ -n "$running" || -n "$queued" ]]; then
-        fatal "workflow did not drain of running and queued jobs"
-    fi
-    echo "Workflow cleared of running and queued jobs."
-}
-
-
-
-function wait_until_zone_in_dns() {
-    local uuid=$1
-    local alias=$2
-    local domain=$3
-    [[ -n "$uuid" ]] || fatal "wait_until_zone_in_dns: no 'uuid' given"
-    [[ -n "$alias" ]] || fatal "wait_until_zone_in_dns: no 'alias' given"
-    [[ -n "$domain" ]] || fatal "wait_until_zone_in_dns: no 'domain' given"
-
-    local ip=$(vmadm get $uuid | json nics.0.ip)
-    [[ -n "$ip" ]] || fatal "no IP for the new $alias ($uuid) zone"
-
-    echo "Wait up to 5 minutes for $alias zone to enter DNS."
-    for i in {1..60}; do
-        sleep 5
-        echo '.'
-        in_dns=$(dig $domain +short | (grep $ip || true))
-        if [[ "$in_dns" == "$ip" ]]; then
-            break
-        fi
-    done
-    in_dns=$(dig $domain +short | (grep $ip || true))
-    if [[ "$in_dns" != "$ip" ]]; then
-        fatal "New $alias ($uuid) zone's IP $ip did not enter DNS: 'dig $domain +short | grep $ip'"
-    fi
-}
-
-
-function wait_until_zone_out_of_dns() {
-    local uuid=$1
-    local alias=$2
-    local domain=$3
-    local ip=$4
-    [[ -n "$uuid" ]] || fatal "wait_until_zone_out_of_dns: no 'uuid' given"
-    [[ -n "$alias" ]] || fatal "wait_until_zone_out_of_dns: no 'alias' given"
-    [[ -n "$domain" ]] || fatal "wait_until_zone_out_of_dns: no 'domain' given"
-    if [[ -z "$ip" ]]; then
-        ip=$(vmadm get $uuid | json nics.0.ip)
-    fi
-    [[ -n "$ip" ]] || fatal "no IP for the new $alias ($uuid) zone"
-
-    echo "Wait up to 5 minutes for $alias zone to leave DNS."
-    for i in {1..60}; do
-        sleep 5
-        echo '.'
-        in_dns=$(dig $domain +short | (grep $ip || true))
-        if [[ -z "$in_dns" ]]; then
-            break
-        fi
-    done
-    in_dns=$(dig $domain +short | (grep $ip || true))
-    if [[ -n "$in_dns" ]]; then
-        fatal "New $alias ($uuid) zone's IP $ip did not leave DNS: 'dig $domain +short | grep $ip'"
-    fi
-}
-
-
-
-# Set cloudapi readonly mode.
-#
-# Usage:
-#   cloudapi_readonly_mode true         # put in readonly mode
-#   cloudapi_readonly_mode false        # take out of readonly mode
-function cloudapi_readonly_mode {
-    local readonly=$1
-    if [[ "$readonly" != "true" && "$readonly" != "false" ]]; then
-        fatal "invalid argument: $readonly (must be 'true' or 'false')"
-    fi
-
-    UFDS_ADMIN_UUID=$(bash /lib/sdc/config.sh -json | json ufds_admin_uuid)
-    SDC_APP=$(sdc-sapi /applications?name=sdc | json -H 0.uuid)
-    [[ -n "$SDC_APP" ]] || fatal "could not determine 'sdc' SAPI app"
-    CLOUDAPI_SVC=$(sdc-sapi /services?name=cloudapi\&application_uuid=$SDC_APP | json -H 0.uuid)
-    [[ -n "$CLOUDAPI_SVC" ]] || fatal "could not determine sdc 'cloudapi' SAPI svc"
-    CLOUDAPI_ZONE=$(vmadm lookup -1 state=running owner_uuid=$UFDS_ADMIN_UUID alias=~cloudapi)
-    [[ -n "$CLOUDAPI_ZONE" ]] || fatal "could not find cloudapi zone on headnode"
-
-    # Get current setting.
-    curr=$(sdc-sapi /services/$CLOUDAPI_SVC | json -H metadata.CLOUDAPI_READONLY)
-    if [[ "$curr" == "$readonly" ]]; then
-        echo "cloudapi is already configured for CLOUDAPI_READONLY=$curr"
-        return
-    fi
-    sdc-sapi /services/$CLOUDAPI_SVC -X PUT -d"{\"metadata\":{\"CLOUDAPI_READONLY\":$readonly}}"
-
-    # TODO: Do this for N cloudapi instances.
-    zlogin ${CLOUDAPI_ZONE} "/opt/smartdc/config-agent/build/node/bin/node /opt/smartdc/config-agent/agent.js -s"
-    # Workaround PUBAPI-802 and manually restart each cloudapi instance.
-    svcs -z $CLOUDAPI_ZONE -Ho fmri cloudapi | xargs -n1 svcadm -z $CLOUDAPI_ZONE restart
-
-    # TODO: add readonly status to /--ping on cloudapi and watch for that.
-}
-
-
-
-# Update the customer_metadata.user-script on a zone in preparation for
-# 'vmadm reprovision'. Also save it in "user-scripts/" for possible rollback.
-function update_svc_user_script {
-    local uuid=$1
-    local image_uuid=$2
-    local current_image_uuid=$(vmadm get $uuid | json image_uuid)
-    local alias=$(vmadm get $uuid | json alias)
-
-    # If we have a user-script for this zone/image here we must be doing a
-    # rollback so we want to use that user-script. If we don't have one, we
-    # save the current one for future rollback.
-    mkdir -p user-scripts
-    if [[ -f user-scripts/${alias}.${image_uuid}.user-script ]]; then
-        NEW_USER_SCRIPT=user-scripts/${alias}.${image_uuid}.user-script
-    else
-        vmadm get ${uuid} | json customer_metadata."user-script" \
-            > user-scripts/${alias}.${current_image_uuid}.user-script
-        [[ -s user-scripts/${alias}.${current_image_uuid}.user-script ]] \
-            || fatal "Failed to create ${alias}.${current_image_uuid}.user-script"
-
-        if [[ -f /usbkey/default/user-script.common ]]; then
-            NEW_USER_SCRIPT=/usbkey/default/user-script.common
-        else
-            fatal "Unable to find user-script for ${alias}"
-        fi
-    fi
-    /usr/vm/sbin/add-userscript ${NEW_USER_SCRIPT} | vmadm update ${uuid}
-
-    # Update user-script for future provisions.
-    mkdir -p sapi-updates
-    local service_uuid=$(sdc-sapi /instances/${uuid} | json -H service_uuid)
-    /usr/vm/sbin/add-userscript ${NEW_USER_SCRIPT} \
-        | json -e "this.payload={metadata: this.set_customer_metadata}" payload \
-        > sapi-updates/${service_uuid}.update
-    sdc-sapi /services/${service_uuid} -X PUT -d @sapi-updates/${service_uuid}.update
-}
-
-# Check for a delegated dataset and add one if none exists.
-
-# Usage:
-#   ensure_delegated_dataset binder true    # reboot zone if dataset was added
-#   ensure_delegated_dataset sapi false     # do not reboot
-function ensure_delegated_dataset {
-    local service_name=$1
-    local reboot_after=$2
-
-    [[ -n "$service_name" ]] || \
-        fatal "ensure_delegated_dataset: no 'service_name' given"
-
-    if [[ "$reboot_after" != "true" && "$reboot_after" != "false" ]]; then
-        fatal "invalid argument: $reboot_after (must be 'true' or 'false')"
-    fi
-
-    local sdc_app=$(sdc-sapi /applications?name=sdc | json -H 0.uuid)
-    [[ -n "$sdc_app" ]] || \
-        fatal "ensure_delegated_dataset: could not determine 'sdc' app"
-
-    local service_json=$(sdc-sapi /services?name=$service_name\&application_uuid=$sdc_app | json -Ha)
-    [[ -n "service_json" ]] || \
-        fatal "ensure_delegated_dataset: could not fetch sdc $service_name service"
-
-    local service_uuid=$(echo "$service_json" | json uuid)
-    [[ -n "service_uuid" ]] || \
-        fatal "ensure_delegated_dataset: could not determine sdc $service_name service uuid"
-
-    local has_dataset=$(echo "$service_json" | json params.delegate_dataset)
-
-    if [[ "$has_dataset" != "true" ]]; then
-        echo '{ "params": { "delegate_dataset": true } }' | \
-            sapiadm update "$service_uuid"
-    [[ $? == 0 ]] || fatal "ensure_delegated_dataset: unable to set delegate_dataset on $service_name service."
-
-
-        # -- Verify it got there
-        local verify_dataset=$(sdc-sapi /services?name=$service_name\&application_uuid=$sdc_app | json -Ha params.delegate_dataset)
-        [[ "$verify_dataset" == "true" ]] || \
-            fatal "sapiadm updated the $service_name service but it didn't take"
-    fi
-
-    # Add a delegated dataset to the existing zone, if needed
-    local ufds_admin_uuid=$(bash /lib/sdc/config.sh -json | json ufds_admin_uuid)
-    local cur_uuid=$(vmadm lookup -1 state=running owner_uuid=$ufds_admin_uuid alias=~^$service_name)
-    local dataset="zones/$cur_uuid/data"
-    local vmapi_dataset=$(sdc-vmapi /vms/$cur_uuid | json -Ha datasets.0)
-
-    if [[ "$dataset" != "$vmapi_dataset" ]]; then
-        zfs list "$dataset" && rc=$? || rc=$?
-        if [[ $rc != 0 ]]; then
-            zfs create $dataset
-            [[ $? == 0 ]] || fatal "Unable to create $service_name zfs dataset"
-        fi
-
-        zfs set zoned=on $dataset
-        [[ $? == 0 ]] || fatal "Unable to set zoned=on on $service_name dataset"
-
-        zonecfg -z $cur_uuid "add dataset; set name=${dataset}; end"
-        [[ $? == 0 ]] || fatal "Unable to set dataset on $service_name zone"
-
-        VMADM_dataset=$(vmadm get $cur_uuid | json datasets.0)
-        [[ "$dataset" == "$VMADM_dataset" ]] || \
-            fatal "Set dataset on $service_name zone, but getting did not work"
-
-        if [[ "$reboot_after" == "true" ]]; then
-            vmadm reboot $cur_uuid
-        fi
-    fi
-}
diff --git a/incr-upgrade-scripts/manatee-v2-in-situ-upgrade.sh b/incr-upgrade-scripts/manatee-v2-in-situ-upgrade.sh
deleted file mode 100755
index 2cd704af..00000000
--- a/incr-upgrade-scripts/manatee-v2-in-situ-upgrade.sh
+++ /dev/null
@@ -1,78 +0,0 @@
-#!/usr/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-LOG_FILENAME=/tmp/manatee-v2-in-situ-upgrade.$$.log
-exec 4>${LOG_FILENAME}
-export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-export BASH_XTRACEFD=4
-PATH=/opt/smartdc/bin:/usr/sbin:/usr/bin:$PATH
-
-set -o errexit
-set -o xtrace
-set -o pipefail
-
-function fatal
-{
-    echo "FATAL: $*" >&2
-    exit 2
-}
-
-function usage
-{
-    cat >&2 <<EOF
-Usage: $0 <server_uuid> <instance_uuid> <tarball_path>
-EOF
-    exit 1
-}
-# params
-
-echo "!! log file is ${LOG_FILENAME}"
-
-manatee_server=$1
-if [[ -z ${manatee_server} ]]; then
-    usage
-fi
-
-manatee_instance=$2
-if [[ -z ${manatee_instance} ]]; then
-    usage
-fi
-
-tarball=$3
-if [[ -z ${tarball} || ! -f ${tarball} ]]; then
-    usage
-fi
-
-script=$(dirname $0)/manatee-v2-remote-upgrade.sh
-if [[ ! -f ${script} ]]; then
-    fatal "Can't find ${script}"
-fi
-
-function upload_upgrade
-{
-    local upgrade_path=$1
-
-    sdc-oneachnode -n ${manatee_server} "mkdir -p ${upgrade_path}"
-    sdc-oneachnode -n ${manatee_server} -g ${tarball} -d ${upgrade_path}
-    sdc-oneachnode -n ${manatee_server} -g ${script} -d ${upgrade_path}
-}
-
-function run_script
-{
-    local upgrade_path=$1
-    local tarball_path=${upgrade_path}/$(basename ${tarball})
-    sdc-oneachnode -T 300 -n ${manatee_server} "bash ${upgrade_path}/manatee-v2-remote-upgrade.sh ${manatee_instance} ${tarball_path}"
-}
-
-# mainline
-
-upload_upgrade /var/tmp/manatee-upgrade.$$
-run_script /var/tmp/manatee-upgrade.$$
diff --git a/incr-upgrade-scripts/manatee-v2-remote-upgrade.sh b/incr-upgrade-scripts/manatee-v2-remote-upgrade.sh
deleted file mode 100755
index ef006ef2..00000000
--- a/incr-upgrade-scripts/manatee-v2-remote-upgrade.sh
+++ /dev/null
@@ -1,220 +0,0 @@
-#!/usr/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-LOG_FILENAME=/tmp/manatee-v2-remote-upgrade.$$.log
-exec 4>${LOG_FILENAME}
-export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-export BASH_XTRACEFD=4
-PATH=/opt/smartdc/bin:/usr/sbin:/usr/bin:$PATH
-
-set -o errexit
-set -o xtrace
-set -o pipefail
-
-function fatal
-{
-    echo "FATAL: $*" >&2
-    exit 2
-}
-
-function usage
-{
-    cat >&2 <<EOF
-Usage: $0 <instance_uuid> <tarball_path>
-EOF
-    exit 1
-}
-
-function manatee_stat
-{
-    # manatee-stat exists in different places depending on the manatee version
-    local m_stat=
-    if [[ -f /zones/${manatee_instance}/root/opt/smartdc/manatee/bin/manatee-stat ]]; then
-        m_stat="/opt/smartdc/manatee/bin/manatee-stat -p \$ZK_IPS"
-    elif [[ -f /zones/${manatee_instance}/root/opt/smartdc/manatee/node_modules/manatee/bin/manatee-stat ]]; then
-        m_stat="/opt/smartdc/manatee/node_modules/manatee/bin/manatee-stat -p \$ZK_IPS"
-    elif [[ -f /zones/${manatee_instance}/root/opt/smartdc/manatee/node_modules/.bin/manatee-stat ]]; then
-        m_stat="/opt/smartdc/manatee/node_modules/.bin/manatee-stat -p \$ZK_IPS"
-    else
-        fatal "Can't find manatee-stat."
-    fi
-    local result=$(zlogin ${manatee_instance} "source /opt/smartdc/etc/zk_ips.sh; ${m_stat}");
-    echo ${result}
-}
-
-function wait_for_manatee
-{
-    local expect=$1
-    local result=
-    local count=0
-
-    while [[ ${result} != ${expect} ]]; do
-        result=$(manatee_stat | json -e '
-            if (Object.keys(this.sdc).length===0) {
-                this.mode = "empty";
-            } else if (this.sdc.primary && this.sdc.sync && this.sdc.async) {
-                var up = this.sdc.async.repl && !this.sdc.async.repl.length && Object.keys(this.sdc.async.repl).length === 0;
-                if (up && this.sdc.sync.repl && this.sdc.sync.repl.sync_state == "async") {
-                    this.mode = "async";
-                }
-            } else if (this.sdc.primary && this.sdc.sync) {
-                var up = this.sdc.sync.repl && !this.sdc.sync.repl.length && Object.keys(this.sdc.sync.repl).length === 0;
-                if (up && this.sdc.primary.repl && this.sdc.primary.repl.sync_state == "sync") {
-                    this.mode = "sync";
-                }
-            } else if (this.sdc.primary) {
-                var up = this.sdc.primary.repl && !this.sdc.primary.repl.length && Object.keys(this.sdc.primary.repl).length === 0;
-                if (up) {
-                    this.mode = "primary";
-                }
-            }
-
-            if (!this.mode) {
-                this.mode = "transition";
-            }' mode)
-        if [[ ${result} == ${expect} ]]; then
-            continue;
-        elif [[ ${count} -gt 24 ]]; then
-            fatal "Timeout (120s) waiting for manatee to reach ${expect}"
-        else
-            count=$((${count} + 1))
-            sleep 5
-        fi
-    done
-}
-
-function crack_tarball
-{
-    local dest=/zones/${manatee_instance}/root/opt/smartdc
-    if [[ ! -d ${dest} ]]; then
-        fatal "No such destination: ${dest}"
-    fi
-    mkdir -p ${dest}/manatee-new
-    tar zxf ${tarball} -C ${dest}/manatee-new
-}
-
-function swap_code
-{
-    # this can race with config-agent
-    svcadm -z ${manatee_instance} disable config-agent
-    zlogin ${manatee_instance} mv /opt/smartdc/manatee /opt/smartdc/manatee-old
-    zlogin ${manatee_instance} mv /opt/smartdc/manatee-new /opt/smartdc/manatee
-    svcadm -z ${manatee_instance} enable config-agent
-}
-
-function ensure_correct_config
-{
-
-    svcadm -z ${manatee_instance} disable -s config-agent
-    zlogin ${manatee_instance} rm -f /opt/smartdc/manatee/etc/sitter.json
-    svcadm -z ${manatee_instance} enable -s config-agent
-
-    # wait until config appears
-    local count=0
-    while [[ ! -f /zones/${manatee_instance}/root/opt/smartdc/manatee/etc/sitter.json ]]; do
-        if [[ ${count} -gt 12 ]]; then
-            fatal "Timeout waiting for config in ${manatee_instance}"
-        else
-            count=$((${count} + 1))
-            sleep 5
-        fi
-    done
-}
-
-# postgres.sdc.conf has a @@SHARED_BUFFERS@@ variable that requires replacement
-function ensure_postgres_conf
-{
-    cp /zones/${manatee_instance}/root/opt/smartdc/manatee/etc/postgresql.sdc.conf \
-       /zones/${manatee_instance}/root/opt/smartdc/manatee/etc/postgresql.sdc.conf.in
-
-    local shared_buffers="$(( $(zlogin ${manatee_instance} prtconf -m) / 4 ))MB"
-    sed -e "s#@@SHARED_BUFFERS@@#$shared_buffers#g" \
-       /zones/${manatee_instance}/root/opt/smartdc/manatee/etc/postgresql.sdc.conf.in \
-       > /zones/${manatee_instance}/root/opt/smartdc/manatee/etc/postgresql.sdc.conf
-}
-
-function import_smf
-{
-    zlogin ${manatee_instance} svccfg import /opt/smartdc/manatee/smf/manifests/sitter.xml
-}
-
-function touch_sync_state
-{
-    cookieLocation=$(zlogin ${manatee_instance} json -f /opt/smartdc/manatee/etc/sitter.json \
-                     postgresMgrCfg.syncStateCheckerCfg.cookieLocation)
-    if [[ ! -f ${cookieLocation} ]]; then
-        zlogin ${manatee_instance} touch ${cookieLocation}
-        zlogin ${manatee_instance} chown postgres:postgres ${cookieLocation}
-    fi
-}
-
-# seems unnecessary, but PATH variable in the smf manifest doesn't seem
-# to be respected in this situation?
-function node_version
-{
-    local old_node=/opt/local/bin/node
-    local new_node=/opt/smartdc/manatee/build/node/bin/node
-    zlogin ${manatee_instance} mv ${old_node} /opt/local/bin/node0.8
-    zlogin ${manatee_instance} ln -s ${new_node} ${old_node}
-}
-
-# if sitter up, get current state
-#   bring sitter down
-#   wait for state-1
-# endif
-# get current state
-# bring sitter up
-# wait for state+1
-function restart_sitter
-{
-    local state=$(svcs -Ho state -z ${manatee_instance} manatee-sitter)
-    local final_state=
-    if [[ ${state} == "online" ]]; then
-        # assume this is for single-node restart.
-        svcadm -z ${manatee_instance} disable manatee-sitter
-        wait_for_manatee empty
-        final_state="primary"
-    elif [[ ${state} == "disabled" ]]; then
-        final_state="sync"
-    else
-        fatal "Manatee ${manatee_instance} in unexpected state ${state}"
-    fi
-    svcadm -z ${manatee_instance} enable manatee-sitter
-    wait_for_manatee ${final_state}
-}
-
-# vars, params
-
-manatee_instance=$1
-if [[ -z ${manatee_instance} ]]; then
-    usage
-fi
-
-tarball=$2
-if [[ ! -f ${tarball} ]]; then
-    usage
-fi
-
-echo "!! log file is ${LOG_FILENAME}"
-
-# mainline
-
-crack_tarball
-swap_code
-ensure_correct_config
-ensure_postgres_conf
-import_smf
-touch_sync_state
-node_version
-restart_sitter
-
-echo "done."
-
diff --git a/incr-upgrade-scripts/manatee-v2-upgrade.sh b/incr-upgrade-scripts/manatee-v2-upgrade.sh
deleted file mode 100755
index 3540e4cb..00000000
--- a/incr-upgrade-scripts/manatee-v2-upgrade.sh
+++ /dev/null
@@ -1,247 +0,0 @@
-#!/usr/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-LOG_FILENAME=/tmp/manatee-v2-upgrade.$$.log
-exec 4>${LOG_FILENAME}
-export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-export BASH_XTRACEFD=4
-PATH=/opt/smartdc/bin:/usr/sbin:/usr/bin:$PATH
-
-set -o errexit
-set -o xtrace
-set -o pipefail
-
-function fatal
-{
-    echo "FATAL: $*" >&2
-    exit 2
-}
-
-function usage
-{
-    cat >&2 <<EOF
-Usage: $0 <image_uuid>
-EOF
-    exit 1
-}
-
-# params
-image_uuid=$1
-if [[ -z ${image_uuid} ]]; then
-    usage
-fi
-
-function create_tarball
-{
-    tarball=/tmp/manatee-v2-upgrade.tgz
-    if [[ -f ${tarball} ]]; then
-        rm ${tarball}
-    fi
-    local image_uuid=$1
-    local source_path=/zones/${image_uuid}/root/opt/smartdc/manatee
-    pushd ${source_path}
-    tar zcf ${tarball} .
-    popd
-}
-
-local_manatee=$(vmadm lookup state=running tags.smartdc_role=manatee | tail -1)
-
-function manatee_stat
-{
-    # manatee-stat exists in different places depending on the manatee version,
-    # and therefore on the stage of the upgrade; find it explicitly.
-    local m_stat=
-    local result=
-    if [[ -f /zones/${local_manatee}/root/opt/smartdc/manatee/bin/manatee-stat ]]; then
-        m_stat="/opt/smartdc/manatee/bin/manatee-stat -p \$ZK_IPS"
-    elif [[ -f /zones/${local_manatee}/root/opt/smartdc/manatee/node_modules/manatee/bin/manatee-stat ]]; then
-        m_stat="/opt/smartdc/manatee/node_modules/manatee/bin/manatee-stat -p \$ZK_IPS"
-    elif [[ -f /zones/${local_manatee}/root/opt/smartdc/manatee/node_modules/.bin/manatee-stat ]]; then
-        m_stat="/opt/smartdc/manatee/node_modules/.bin/manatee-stat -p \$ZK_IPS"
-    else
-        fatal "Can't find manatee-stat."
-    fi
-    if [[ ! -f /zones/${local_manatee}/root/opt/smartdc/etc/zk_ips.sh ]]; then
-        # race condition on the creation of zk_ips when the local manatee
-        # is reprovisioning/rebooting.
-        result="{}"
-    else
-        result=$(zlogin ${local_manatee} "source /opt/smartdc/etc/zk_ips.sh; ${m_stat}");
-    fi
-    echo ${result}
-}
-
-function wait_for_manatee
-{
-    local expect=$1
-    local result=
-    local count=0
-    echo "Waiting for manatee to reach ${expect}"
-    while [[ ${result} != ${expect} ]]; do
-        result=$(manatee_stat | json -e '
-            if (!this.sdc) {
-                this.mode = "transition";
-            } else if (Object.keys(this.sdc).length===0) {
-                this.mode = "empty";
-            } else if (this.sdc.primary && this.sdc.sync && this.sdc.async) {
-                var up = this.sdc.async.repl && !this.sdc.async.repl.length && Object.keys(this.sdc.async.repl).length === 0;
-                if (up && this.sdc.sync.repl && this.sdc.sync.repl.sync_state == "async") {
-                    this.mode = "async";
-                }
-            } else if (this.sdc.primary && this.sdc.sync) {
-                var up = this.sdc.sync.repl && !this.sdc.sync.repl.length && Object.keys(this.sdc.sync.repl).length === 0;
-                if (up && this.sdc.primary.repl && this.sdc.primary.repl.sync_state == "sync") {
-                    this.mode = "sync";
-                }
-            } else if (this.sdc.primary) {
-                var up = this.sdc.primary.repl && !this.sdc.primary.repl.length && Object.keys(this.sdc.primary.repl).length === 0;
-                if (up) {
-                    this.mode = "primary";
-                }
-            }
-
-            if (!this.mode) {
-                this.mode = "transition";
-            }' mode)
-        if [[ ${result} == ${expect} ]]; then
-            continue;
-        elif [[ ${count} -gt 180 ]]; then
-            fatal "Timeout (15m) waiting for manatee to reach ${target}"
-        else
-            count=$((${count} + 1))
-            sleep 5
-        fi
-    done
-}
-
-function find_manatees
-{
-    primary_manatee=$(manatee_stat | json -Ha sdc.primary.zoneId)
-    if [[ -z ${primary_manatee} ]]; then
-        echo ""
-        fatal "Can't find primary manatee"
-    fi
-    primary_server=$(sdc-vmapi /vms/${primary_manatee} | json -Ha server_uuid)
-    if [[ $? != 0 || -z ${primary_server} ]]; then
-        echo ""
-        fatal "Can't find server for primary: ${primary_manatee}"
-    fi
-    sync_manatee=$(manatee_stat | json -Ha sdc.sync.zoneId)
-    if [[ -z ${sync_manatee} ]]; then
-        echo ""
-        fatal "Can't find sync manatee"
-    fi
-    sync_server=$(sdc-vmapi /vms/${sync_manatee} | json -Ha server_uuid)
-    if [[ $? != 0 || -z ${sync_server} ]]; then
-        echo ""
-        fatal "Can't find server for sync: ${sync_manatee}"
-    fi
-    async_manatee=$(manatee_stat | json -Ha sdc.async.zoneId)
-    if [[ -z ${async_manatee} ]]; then
-        echo ""
-        fatal "Can't find async manatee"
-    fi
-    async_server=$(sdc-vmapi /vms/${async_manatee} | json -Ha server_uuid)
-    if [[ $? != 0 || -z ${async_server} ]]; then
-        echo ""
-        fatal "Can't find server for async: ${async_manatee}"
-    fi
-}
-
-function disable_manatee
-{
-    local server=$1
-    local zone=$2
-    echo "Disabling manatee services in ${zone}"
-    sdc-oneachnode -n ${server} \
-    "svcadm -z ${zone} disable -s manatee-sitter;\
-     svcadm -z ${zone} disable -s manatee-snapshotter;\
-     svcadm -z ${zone} disable -s manatee-backupserver;"
-    if [[ $? != 0 ]]; then
-        echo ""
-        fatal "Couldn't disable manatee services in ${zone}"
-    fi
-}
-
-function reprovision_manatee
-{
-    local server=$1
-    local instance=$2
-    local current_image=$(sdc-vmapi /vms/${instance} -f | json image_uuid)
-
-    if [[ ${current_image} == ${image_uuid} ]]; then
-        echo "Manatee ${zone} already at image ${image_uuid}, skipping."
-    else
-        echo "Reprovisioning ${instance} to ${image_uuid}..."
-        sdc-oneachnode -n ${server} \
-            "imgadm import ${image_uuid}"
-        sdc-oneachnode -n ${server} \
-            "echo '{}' | json -e \"this.image_uuid='${image_uuid}'\" \
-            | vmadm reprovision ${instance}"
-    fi
-}
-
-# mainline
-
-echo "!! log file is ${LOG_FILENAME}"
-
-./download-image.sh ${image_uuid}
-
-echo "Creating upgrade tarball."
-create_tarball ${image_uuid}
-
-find_manatees
-
-echo "*** manatee upgrade initial state:"
-echo "  current primary: ${primary_manatee} on ${primary_server}"
-echo "     current sync: ${sync_manatee} on ${sync_server}"
-echo "    current async: ${async_manatee} on ${async_server}"
-
-echo "Disabling async ${async_manatee}"
-disable_manatee ${async_server} ${async_manatee}
-wait_for_manatee sync
-
-echo "Disabling sync ${sync_manatee}"
-disable_manatee ${sync_server} ${sync_manatee}
-wait_for_manatee primary
-
-echo "(1/5) Upgrading primary manatee in place"
-echo "      ${primary_manatee} on ${primary_server}"
-./manatee-v2-in-situ-upgrade.sh ${primary_server} ${primary_manatee} ${tarball}
-
-echo "(2/5) Upgrading sync manatee in place"
-echo "      ${sync_manatee} on ${sync_server}"
-./manatee-v2-in-situ-upgrade.sh ${sync_server} ${sync_manatee} ${tarball}
-
-# reprovision async
-echo "(3/5) Reprovisioning async manatee"
-echo "      ${async_manatee} on ${async_server}"
-disable_manatee ${async_server} ${async_manatee}
-wait_for_manatee sync
-reprovision_manatee ${async_server} ${async_manatee} ${image_uuid}
-wait_for_manatee async
-
-echo "(4/5) Reprovisioning sync manatee"
-echo "      ${sync_manatee} on ${sync_server}"
-disable_manatee ${sync_server} ${sync_manatee}
-wait_for_manatee sync
-reprovision_manatee ${sync_server} ${sync_manatee} ${image_uuid}
-wait_for_manatee async
-
-echo "(5/5) Reprovisioning (previously) primary manatee"
-echo "      ${primary_manatee} on ${primary_server}"
-disable_manatee ${primary_server} ${primary_manatee}
-wait_for_manatee sync
-reprovision_manatee ${primary_server} ${primary_manatee} ${image_uuid}
-wait_for_manatee async
-
-echo "Upgrade complete."
-
diff --git a/incr-upgrade-scripts/rollback-imgapi.sh b/incr-upgrade-scripts/rollback-imgapi.sh
deleted file mode 100644
index d9ffc0d1..00000000
--- a/incr-upgrade-scripts/rollback-imgapi.sh
+++ /dev/null
@@ -1,13 +0,0 @@
-#!/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-SKIP_IMGAPI_MIGRATIONS=1 ./upgrade-imgapi.sh "$@"
-
diff --git a/incr-upgrade-scripts/rollback-rabbitmq.sh b/incr-upgrade-scripts/rollback-rabbitmq.sh
deleted file mode 100644
index 16a2d7ec..00000000
--- a/incr-upgrade-scripts/rollback-rabbitmq.sh
+++ /dev/null
@@ -1,12 +0,0 @@
-#!/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-./upgrade-rabbitmq.sh "$@"
diff --git a/incr-upgrade-scripts/rollback-ufds.sh b/incr-upgrade-scripts/rollback-ufds.sh
deleted file mode 100755
index b28e9fd5..00000000
--- a/incr-upgrade-scripts/rollback-ufds.sh
+++ /dev/null
@@ -1,115 +0,0 @@
-#!/usr/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# rollback-ufds.sh: Rollback a UFDS just upgraded with upgrade-ufds.sh.
-#
-
-export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-set -o xtrace
-set -o errexit
-set -o pipefail
-
-
-#---- support routines
-
-function fatal
-{
-    echo "$0: fatal error: $*" >&2
-    exit 1
-}
-
-
-
-#---- mainline
-
-# -- Gather info
-
-if [[ $# -ne 1 ]]; then
-    fatal "Usage: rollback-ufds.sh <rollback-images>"
-fi
-[[ ! -f "$1" ]] && fatal "'$1' does not exist"
-UFDS_IMAGE=$(grep '^export UFDS_IMAGE' $1 | tail -1 | cut -d= -f2 | awk '{print $1}')
-if [[ -z ${UFDS_IMAGE} ]]; then
-    fatal "\$UFDS_IMAGE not defined"
-fi
-[[ $(sysinfo | json "Boot Parameters.headnode") == "true" ]] \
-    || fatal "not running on the headnode"
-
-SDC_APP=$(sdc-sapi /applications?name=sdc | json -H 0.uuid)
-[[ -n "$SDC_APP" ]] || fatal "could not determine 'sdc' SAPI app"
-UFDS_SVC=$(sdc-sapi /services?name=ufds\&application_uuid=$SDC_APP | json -H 0.uuid)
-[[ -n "$UFDS_SVC" ]] || fatal "could not determine sdc 'ufds' SAPI service"
-UFDS_DOMAIN=$(bash /lib/sdc/config.sh -json | json ufds_domain)
-[[ -n "$UFDS_DOMAIN" ]] || fatal "no 'ufds_domain' in sdc config"
-UFDS_ADMIN_UUID=$(bash /lib/sdc/config.sh -json | json ufds_admin_uuid)
-
-# Get the old zone. Assert we have exactly one on the HN.
-CUR_UUID=$(vmadm lookup -1 state=running owner_uuid=$UFDS_ADMIN_UUID alias=~ufds)
-[[ -n "${CUR_UUID}" ]] \
-    || fatal "there is not exactly one running ufdsN zone";
-CUR_ALIAS=$(vmadm get $CUR_UUID | json alias)
-CUR_IMAGE=$(vmadm get $CUR_UUID | json image_uuid)
-
-# Make sure have the UFDS data to retore.
-DUMP_PATH=moray_ufds_backup.sql
-[[ -f "$DUMP_PATH" ]] || fatal "no UFDS data dump: '$DUMP_PATH' does not exist"
-
-MANATEE_ZONE=$(vmadm lookup state=running owner_uuid=$UFDS_ADMIN_UUID tags.smartdc_role=manatee)
-[[ -n "$MANATEE_ZONE" ]] || fatal "no manatee zone on the HN that we can use"
-MORAY_ZONE=$(vmadm lookup alias=~moray | head -1)
-[[ -n "$MORAY_ZONE" ]] || fatal "no moray zone on the HN that we can use"
-
-
-# -- Do the UFDS upgrade.
-
-# Rollback the ufds0 zone.
-# WARNING: Presuming that ufds0 is the one to rollback.
-[[ $CUR_ALIAS == "ufds0" ]] || fatal "current UFDS zone is not 'ufds0'"
-empty=/var/tmp/empty
-rm -f $empty
-touch $empty
-REALLY_UPGRADE_UFDS=1 UFDS_IMAGE=$UFDS_IMAGE ./upgrade-all.sh -f $empty
-
-# Restore the buckets.
-# 1. disable ufds services
-UFDS_FMRIS=$(svcs -z $CUR_UUID -a -Ho fmri | (grep ufds- || true))
-echo "$UFDS_FMRIS" | xargs -n1 svcadm -z $CUR_UUID disable
-
-# 2. drop the ufds buckets
-DELBUCKET="/opt/smartdc/moray/build/node/bin/node /opt/smartdc/moray/node_modules/.bin/delbucket"
-zlogin $MORAY_ZONE $DELBUCKET ufds_o_smartdc || true
-zlogin $MORAY_ZONE $DELBUCKET ufds_cn_changelog || true
-
-# 3. restart ufds services (ufds-master will create its buckets properly)
-echo "$UFDS_FMRIS" | xargs -n1 svcadm -z $CUR_UUID enable
-# Wait for buckets to be created.
-echo "Wait up to a minute for ufds_o_smartdc bucket to be re-created."
-GETBUCKET="/opt/smartdc/moray/build/node/bin/node /opt/smartdc/moray/node_modules/.bin/getbucket"
-for i in {1..12}; do
-    sleep 5
-    echo -n '.'
-    bucket=$( (zlogin $MORAY_ZONE $GETBUCKET ufds_o_smartdc 2>/dev/null || true) | json name )
-    if [[ "$bucket" == "ufds_o_smartdc" ]]; then
-        break
-    fi
-done
-bucket=$( (zlogin $MORAY_ZONE $GETBUCKET ufds_o_smartdc 2>/dev/null || true) | json name )
-if [[ "$bucket" != "ufds_o_smartdc" ]]; then
-    fatal "'ufds_o_smartdc' bucket was not created by ufds-master after one minute"
-fi
-
-
-
-# Restore the UFDS data.
-cp $DUMP_PATH /zones/$MANATEE_ZONE/root/var/tmp/moray_ufds_backup.sql
-zlogin $MANATEE_ZONE "psql -U moray moray --command='DROP TABLE ufds_o_smartdc; DROP TABLE ufds_cn_changelog; DROP TABLE ufds_o_smartdc_locking_serial; DROP table ufds_cn_changelog_locking_serial; DROP SEQUENCE ufds_cn_changelog_serial; DROP SEQUENCE ufds_o_smartdc_serial;'"
-zlogin $MANATEE_ZONE 'psql -U moray moray </var/tmp/moray_ufds_backup.sql'
diff --git a/incr-upgrade-scripts/sapi/amonredis/amonredis_svc.json b/incr-upgrade-scripts/sapi/amonredis/amonredis_svc.json
deleted file mode 100644
index 2e56c89b..00000000
--- a/incr-upgrade-scripts/sapi/amonredis/amonredis_svc.json
+++ /dev/null
@@ -1,31 +0,0 @@
-{
-  "name": "amonredis",
-  "params": {
-    "delegate_dataset": true,
-    "package_name": "sdc_1024",
-    "image_uuid": "REPLACED BY SCRIPT",
-    "maintain_resolvers": true,
-    "networks": [
-      "admin"
-    ],
-    "tags": {
-      "smartdc_role": "amonredis",
-      "smartdc_type": "core"
-    },
-    "cpu_shares": 1024,
-    "cpu_cap": 300,
-    "zfs_io_priority": 10,
-    "max_lwps": 1000,
-    "max_physical_memory": 1024,
-    "max_locked_memory": 1024,
-    "max_swap": 2048,
-    "quota": "25",
-    "package_version": "1.0.0",
-    "billing_id": "4769a8f9-de51-4c1e-885f-c3920cc68137",
-    "customer_metadata": {}
-  },
-  "metadata": {
-    "SERVICE_NAME": "amonredis"
-  },
-  "manifests": {}
-}
diff --git a/incr-upgrade-scripts/sapi/amonredis/manifest.json b/incr-upgrade-scripts/sapi/amonredis/manifest.json
deleted file mode 100644
index 242f1d6e..00000000
--- a/incr-upgrade-scripts/sapi/amonredis/manifest.json
+++ /dev/null
@@ -1,6 +0,0 @@
-{
-  "name": "redis",
-  "path": "/opt/redis/etc/redis.conf",
-  "template": "daemonize yes\npidfile /var/run/redis.pid\n# \"port 6379\" is the default\nloglevel notice\nlogfile /var/log/redis/redis.log\n# Snapshotting:\n#   after 60 sec if at least 1 key changed\n# Default of only every 15 *minutes* for 1 key change is too long for us here.\nsave 60 1\ndir /data/redis\n",
-  "post_cmd": "/usr/sbin/svcadm restart redis"
-}
diff --git a/incr-upgrade-scripts/sapi/cn-agent/service.json b/incr-upgrade-scripts/sapi/cn-agent/service.json
deleted file mode 100644
index ba295897..00000000
--- a/incr-upgrade-scripts/sapi/cn-agent/service.json
+++ /dev/null
@@ -1,16 +0,0 @@
-{
-    "name": "cn-agent",
-    "type": "agent",
-    "params": {
-        "tags": {
-            "smartdc_role": "cn-agent",
-            "smartdc_type": "core"
-        }
-    },
-    "metadata": {
-        "SERVICE_NAME": "cn-agent",
-        "CN_AGENT_LOG_LEVEL": "info"
-    },
-    "manifests": {
-    }
-}
diff --git a/incr-upgrade-scripts/sapi/mahi/mahi_svc.json b/incr-upgrade-scripts/sapi/mahi/mahi_svc.json
deleted file mode 100644
index 898e690d..00000000
--- a/incr-upgrade-scripts/sapi/mahi/mahi_svc.json
+++ /dev/null
@@ -1,27 +0,0 @@
-{
-    "name": "mahi",
-    "params": {
-        "cpu_cap": 300,
-        "max_lwps": 1000,
-        "max_physical_memory": 1024,
-        "max_swap": 2048,
-        "quota": 25,
-        "billing_id": "00000000-0000-0000-0000-000000000000",
-        "vcpus": 1,
-        "zfs_io_priority": 10,
-        "package_name": "sdc_1024",
-        "package_version": "1.0.0",
-        "image_uuid": "IMAGE_UUID",
-        "maintain_resolvers": true,
-        "networks": [ "admin" ],
-        "tags": {
-            "smartdc_role": "mahi",
-            "smartdc_type": "core"
-        }
-    },
-    "metadata": {
-        "SERVICE_NAME": "mahi"
-    },
-    "manifests": {
-    }
-}
diff --git a/incr-upgrade-scripts/sapi/net-agent/service.json b/incr-upgrade-scripts/sapi/net-agent/service.json
deleted file mode 100644
index a63687b2..00000000
--- a/incr-upgrade-scripts/sapi/net-agent/service.json
+++ /dev/null
@@ -1,16 +0,0 @@
-{
-    "name": "net-agent",
-    "type": "agent",
-    "params": {
-        "tags": {
-            "smartdc_role": "net-agent",
-            "smartdc_type": "core"
-        }
-    },
-    "metadata": {
-        "SERVICE_NAME": "net-agent",
-        "NET_AGENT_LOG_LEVEL": "info"
-    },
-    "manifests": {
-    }
-}
diff --git a/incr-upgrade-scripts/sapi/papi/papi_svc.json b/incr-upgrade-scripts/sapi/papi/papi_svc.json
deleted file mode 100644
index eef02479..00000000
--- a/incr-upgrade-scripts/sapi/papi/papi_svc.json
+++ /dev/null
@@ -1,28 +0,0 @@
-{
-    "name": "papi",
-    "params": {
-        "cpu_cap": 300,
-        "max_lwps": 1000,
-        "max_physical_memory": 1024,
-        "max_swap": 2048,
-        "quota": 25,
-        "billing_id": "00000000-0000-0000-0000-000000000000",
-        "vcpus": 1,
-        "zfs_io_priority": 10,
-        "package_name": "sdc_1024",
-        "package_version": "1.0.0",
-        "image_uuid": "06a881a0-4232-4400-a234-480b9ad24117",
-        "maintain_resolvers": true,
-        "networks": [ "admin" ],
-        "tags": {
-            "smartdc_role": "papi",
-            "smartdc_type": "core"
-        }
-    },
-    "metadata": {
-        "SERVICE_NAME": "papi",
-        "SERVICE_IS_FIRST_BOOT": true
-    },
-    "manifests": {
-    }
-}
diff --git a/incr-upgrade-scripts/sapi/sdc/sdc_svc.json b/incr-upgrade-scripts/sapi/sdc/sdc_svc.json
deleted file mode 100644
index d40cb64b..00000000
--- a/incr-upgrade-scripts/sapi/sdc/sdc_svc.json
+++ /dev/null
@@ -1,31 +0,0 @@
-{
-  "name": "sdc",
-  "params": {
-    "package_name": "sdc_768",
-    "image_uuid": "REPLACED IN SCRIPT",
-    "maintain_resolvers": true,
-    "networks": [
-      "admin"
-    ],
-    "firewall_enabled": true,
-    "tags": {
-      "smartdc_role": "sdc",
-      "smartdc_type": "core"
-    },
-    "cpu_shares": 256,
-    "cpu_cap": 250,
-    "zfs_io_priority": 10,
-    "max_lwps": 1000,
-    "max_physical_memory": 768,
-    "max_locked_memory": 768,
-    "max_swap": 1536,
-    "quota": "25",
-    "package_version": "1.0.0",
-    "billing_id": "REPLACED IN SCRIPT",
-    "customer_metadata": {}
-  },
-  "metadata": {
-    "SERVICE_NAME": "sdc"
-  },
-  "manifests": {}
-}
diff --git a/incr-upgrade-scripts/sapi/vm-agent/service.json b/incr-upgrade-scripts/sapi/vm-agent/service.json
deleted file mode 100644
index b9e12418..00000000
--- a/incr-upgrade-scripts/sapi/vm-agent/service.json
+++ /dev/null
@@ -1,16 +0,0 @@
-{
-    "name": "vm-agent",
-    "type": "agent",
-    "params": {
-        "tags": {
-            "smartdc_role": "vm-agent",
-            "smartdc_type": "core"
-        }
-    },
-    "metadata": {
-        "SERVICE_NAME": "vm-agent",
-        "VM_AGENT_LOG_LEVEL": "info"
-    },
-    "manifests": {
-    }
-}
diff --git a/incr-upgrade-scripts/sapi/zookeeper/zookeeper_svc.json b/incr-upgrade-scripts/sapi/zookeeper/zookeeper_svc.json
deleted file mode 100644
index b94a9171..00000000
--- a/incr-upgrade-scripts/sapi/zookeeper/zookeeper_svc.json
+++ /dev/null
@@ -1,30 +0,0 @@
-{
-  "name": "zookeeper",
-  "params": {
-    "archive_on_delete": true,
-    "package_name": "sdc_256",
-    "maintain_resolvers": true,
-    "networks": [
-      "admin"
-    ],
-    "tags": {
-      "smartdc_role": "zookeeper",
-      "smartdc_type": "core"
-    },
-    "delegate_dataset": true,
-    "cpu_shares": 256,
-    "cpu_cap": 150,
-    "zfs_io_priority": 10,
-    "max_lwps": 1000,
-    "max_physical_memory": 256,
-    "max_locked_memory": 256,
-    "max_swap": 512,
-    "quota": "25",
-    "package_version": "1.0.0",
-    "billing_id": "00000000-0000-0000-0000-000000000000",
-    "customer_metadata": {}
-  },
-  "metadata": {
-    "SERVICE_NAME": "zookeeper"
-  }
-}
diff --git a/incr-upgrade-scripts/sdc-agent-healthcheck.sh b/incr-upgrade-scripts/sdc-agent-healthcheck.sh
deleted file mode 100755
index 0d509616..00000000
--- a/incr-upgrade-scripts/sdc-agent-healthcheck.sh
+++ /dev/null
@@ -1,50 +0,0 @@
-#!/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-. /lib/sdc/config.sh
-
-load_sdc_config
-
-export AMQP_HOST=$CONFIG_rabbitmq_domain
-
-overall=0
-
-while read rec
-do
-    eval $(echo "$rec" | awk  '{ printf("uuid=%s\nsetup=%s\nversion=%s", $1, $2, $3); }')
-
-    if [ "$setup" == "true" ]; then
-        if [ "$version" == "" ]; then
-            agents="provisioner-v2 zonetracker-v2 ur heartbeat"
-        else
-            agents="provisioner zonetracker ur heartbeat"
-        fi
-    else
-        agents="ur"
-    fi
-
-    for agent in $agents; do
-        echo -n "$uuid $agent "
-
-        ping-agent $uuid  $agent timeout=10000 2>&1 | egrep -s "req_id:"
-
-        if [ $? -eq '0' ]; then
-            status=ok
-        else
-            status=error
-            overall=1
-        fi
-
-        echo "$status"
-    done
-done < <(sdc-cnapi "/servers?extras=sysinfo" | json -Hga uuid setup sysinfo."SDC Version")
-
-exit $overall
\ No newline at end of file
diff --git a/incr-upgrade-scripts/upgrade-all.sh b/incr-upgrade-scripts/upgrade-all.sh
deleted file mode 100755
index 9c7b9d53..00000000
--- a/incr-upgrade-scripts/upgrade-all.sh
+++ /dev/null
@@ -1,183 +0,0 @@
-#!/usr/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Upgrade given SDC zones to latest images
-#
-# Usage:
-#   ./upgrade-all.sh [-f] <upgrade-images-file>
-#
-# Options:
-#   -f      Force reprovision even if to the same image. This will also
-#           skip importing the possibly missing image into IMGAPI -- useful
-#           for dealing with a broken IMGAPI, but could surprise. Lesson:
-#           don't use '-f' lightly.
-#
-
-export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-set -o xtrace
-set -o errexit
-#set -o pipefail
-
-TOP=$(cd $(dirname $0)/; pwd)
-source $TOP/libupgrade.sh
-
-
-PATH=/opt/smartdc/bin:$PATH
-
-UPDATES_IMGADM='/usr/node/bin/node /opt/smartdc/imgapi-cli/bin/updates-imgadm'
-
-
-
-function fatal {
-    echo "$(basename $0): fatal error: $*" >&2
-    exit 1
-}
-
-function get_latest_image {
-    local image_name=$1
-    export image=$($UPDATES_IMGADM list name=${image_name} version=~master \
-        | tail -1 | awk '{print $1}') || fatal "failed to get latest image"
-}
-
-function get_instance_uuid {
-    local alias=$1
-    export uuid=$(sdc-vmapi /vms?alias=${alias}\&state=active | json -Ha uuid | head -n 1) || \
-        fatal "failed to get instance UUID"
-}
-
-function upgrade_zone {
-    local role=$1
-    local alias=$2
-    local image_uuid=$3
-
-    get_instance_uuid ${alias}
-    local instance_uuid=${uuid}
-
-    if [[ -z ${instance_uuid} ]]; then
-        echo "No zone with alias ${alias}"
-        return 0
-    fi
-
-    local current_image_uuid=$(vmadm get ${instance_uuid} | json -H image_uuid)
-    local current_alias=$(vmadm get ${instance_uuid} | json -H alias)
-
-    if [[ ${current_image_uuid} == ${image_uuid} && -z "$force" ]]; then
-        printf "Instance %s (%s) already using image %s." \
-            ${instance_uuid} ${current_alias} ${image_uuid}
-        return 0
-    fi
-
-    # If 'force=true' and we already have $image_uuid in the local zpool,
-    # then *skip* download-image.sh. This allows us to bypass IMGAPI in-case
-    # it is broken, at the cost of not having imported it to IMGAPI.
-    if [[ -n "$force" && -n "$( (imgadm get $image_uuid 2>/dev/null || true) )" ]]; then
-        echo "Have image $image_uuid in local zpool and force=$force, skipping image download."
-    else
-        ./download-image.sh ${image_uuid} || fatal "failed to download image"
-    fi
-
-    set +o errexit
-    imgadm get ${image_uuid} >/dev/null 2>&1
-    if [[ $? -ne 0 ]]; then
-        imgadm import ${image_uuid} || fatal "failed to install image"
-    fi
-    set -o errexit
-
-    # XXX work around OS-2275
-    local quota=$(vmadm get ${instance_uuid} | json quota)
-    if [[ ${quota} == 0 ]]; then
-        printf "Adding default quota of 25GiB for instance %s." \
-            ${instance_uuid}
-        vmadm update ${instance_uuid} quota=25
-    fi
-
-    update_svc_user_script ${uuid} ${image_uuid}
-
-    # Fix up SAPI's service to refer to new image.
-    service_uuid=$(sdc-sapi /instances/${uuid} | json -H service_uuid)
-    cat <<EOM | sdc-sapi /services/$service_uuid -X PUT -d@-
-{
-    "params": {
-        "image_uuid": "${image_uuid}"
-    }
-}
-EOM
-
-    echo '{}' | json -e "this.image_uuid = '${image_uuid}'" |
-        vmadm reprovision ${instance_uuid}
-
-    printf "Instance %s (%s) reprovisioned with image %s\n" \
-        ${instance_uuid} ${current_alias} ${image_uuid}
-
-    sleep 60  # To allow zone to start back up
-
-    return 0
-}
-
-
-
-#---- mainline
-
-
-force=
-if [[ "$1" == "-f" ]]; then
-    shift
-    force=true
-fi
-
-IMAGE_LIST=$1
-if [[ -z $1 ]]; then
-    echo "Usage: upgrade-all.sh <update-images-file>"
-    echo ""
-    fatal "$0: error: no '<update-images-file>' given"
-fi
-[[ -f $IMAGE_LIST ]] || fatal "'$IMAGE_LIST' does not exist"
-source $IMAGE_LIST
-env | grep IMAGE
-
-# XXX Don't upgrade the following zones: binder, manatee, manta, moray, and
-# ufds.  Binder, manatee and moray will not work, manta is unnecessary, and
-# don't do UFDS to minimize customer impact.
-#
-# XXX JoshW says it's pointless to upgrade redis
-# XXX Trent presumes it is currently pointless to upgrade amonredis
-#
-# XXX - workflow should probably go before CNAPI in general, as CNAPI fires
-# off a number of sysinfo jobs.
-# SAPI is upgraded separately through upgrade-sapi.sh.
-
-[[ -n "$SDC_IMAGE" ]] && upgrade_zone sdc sdc0 $SDC_IMAGE
-[[ -n "$ADMINUI_IMAGE" ]] && upgrade_zone adminui adminui0 $ADMINUI_IMAGE
-[[ -n "$AMON_IMAGE" ]] && upgrade_zone amon amon0 $AMON_IMAGE
-[[ -n "$AMONREDIS_IMAGE" ]] && upgrade_zone amonredis amonredis0 $AMONREDIS_IMAGE
-[[ -n "$CLOUDAPI_IMAGE" ]] && upgrade_zone cloudapi cloudapi0 $CLOUDAPI_IMAGE
-[[ -n "$WORKFLOW_IMAGE" ]] && upgrade_zone workflow workflow0 $WORKFLOW_IMAGE
-[[ -n "$CNAPI_IMAGE" ]] && upgrade_zone cnapi cnapi0 $CNAPI_IMAGE
-[[ -n "$DHCPD_IMAGE" ]] && upgrade_zone dhcpd dhcpd0 $DHCPD_IMAGE
-[[ -n "$FWAPI_IMAGE" ]] && upgrade_zone fwapi fwapi0 $FWAPI_IMAGE
-[[ -n "$NAPI_IMAGE" ]] && upgrade_zone napi napi0 $NAPI_IMAGE
-[[ -n "$VMAPI_IMAGE" ]] && upgrade_zone vmapi vmapi0 $VMAPI_IMAGE
-[[ -n "$PAPI_IMAGE" ]] && upgrade_zone papi papi0 $PAPI_IMAGE
-[[ -n "$MAHI_IMAGE" ]] && upgrade_zone mahi mahi0 $MAHI_IMAGE
-[[ -n "$REDIS_IMAGE" ]] && upgrade_zone redis redis0 $REDIS_IMAGE
-[[ -n "$ASSETS_IMAGE" ]] && upgrade_zone assets assets0 $ASSETS_IMAGE
-[[ -n "$CA_IMAGE" ]] && upgrade_zone ca ca0 $CA_IMAGE
-
-# Guard on UFDS upgrade here so that "./upgrade-all.sh" is not used
-# *directly* to upgrade UFDS. Instead use "upgrade-ufds.sh" and
-# "rollback-ufds.sh".
-[[ -n "$REALLY_UPGRADE_UFDS" && -n "$UFDS_IMAGE" ]] && upgrade_zone ufds ufds0 $UFDS_IMAGE
-# Ditto for rabbitmq and others.
-[[ -n "$REALLY_UPGRADE_RABBITMQ" && -n "$RABBITMQ_IMAGE" ]] && upgrade_zone rabbitmq rabbitmq0 $RABBITMQ_IMAGE
-[[ -n "$REALLY_UPGRADE_IMGAPI" && -n "$IMGAPI_IMAGE" ]] && upgrade_zone imgapi "${IMGAPI_ALIAS:-imgapi0}" $IMGAPI_IMAGE
-
-exit 0
diff --git a/incr-upgrade-scripts/upgrade-binder.sh b/incr-upgrade-scripts/upgrade-binder.sh
deleted file mode 100755
index 83f4955b..00000000
--- a/incr-upgrade-scripts/upgrade-binder.sh
+++ /dev/null
@@ -1,94 +0,0 @@
-#!/usr/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# upgrade-binder.sh:
-#   - get current binder past flag days
-#   - reprovision binder
-
-export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-set -o xtrace
-set -o errexit
-set -o pipefail
-
-TOP=$(cd $(dirname $0)/; pwd)
-source $TOP/libupgrade.sh
-
-
-#---- mainline
-
-# -- Check usage and skip out if no upgrade necessary.
-
-if [[ $# -ne 1 ]]; then
-    echo "Usage: upgrade-binder.sh <upgrade-images-file>"
-    exit 1
-fi
-[[ ! -f "$1" ]] && fatal "'$1' does not exist"
-source $1
-if [[ -z ${BINDER_IMAGE} ]]; then
-    fatal "\$BINDER_IMAGE not defined"
-fi
-[[ $(sysinfo | json "Boot Parameters.headnode") == "true" ]] \
-    || fatal "not running on the headnode"
-
-# Get the old zone. Assert we have exactly one on the HN.
-UFDS_ADMIN_UUID=$(bash /lib/sdc/config.sh -json | json ufds_admin_uuid)
-CUR_UUID=$(vmadm lookup -1 state=running owner_uuid=$UFDS_ADMIN_UUID alias=~^binder)
-[[ -n "${CUR_UUID}" ]] \
-    || fatal "there is not exactly one running binderN zone";
-CUR_ALIAS=$(vmadm get $CUR_UUID | json alias)
-CUR_IMAGE=$(vmadm get $CUR_UUID | json image_uuid)
-DATASET="zones/$CUR_UUID/data"
-
-# Don't bother if already on this image.
-if [[ $CUR_IMAGE == $BINDER_IMAGE ]]; then
-    echo "$0: already using image $CUR_IMAGE for zone $CUR_UUID ($CUR_ALIAS)"
-    exit 0
-fi
-
-
-# -- Get the new image.
-./download-image.sh ${BINDER_IMAGE}
-[[ $? == 0 ]] || fatal "Unable to download/install binder image $BINDER_IMAGE"
-
-
-SDC_APP=$(sdc-sapi /applications?name=sdc | json -H 0.uuid)
-[[ -n "$SDC_APP" ]] || fatal "could not determine 'sdc' BINDER app"
-BINDER_JSON=$(sdc-sapi /services?name=binder\&application_uuid=$SDC_APP | json -Ha)
-[[ -n "$BINDER_JSON" ]] || fatal "could not fetch sdc 'binder' BINDER service"
-BINDER_SVC=$(echo "$BINDER_JSON" | json uuid)
-[[ -n "$BINDER_SVC" ]] || fatal "could not determine sdc 'binder' BINDER service"
-
-
-# -- Get binder past MANTA-2297 (adding a delegate dataset)
-ensure_delegated_dataset "binder" "true"
-[[ $? == 0 ]] || fatal "could not ensure binder delegated dataset"
-
-
-# -- Update service data in BINDER.
-update_svc_user_script $CUR_UUID $BINDER_IMAGE
-sapiadm update $BINDER_SVC params.image_uuid=$BINDER_IMAGE
-
-# -- Upgrade zone.
-
-# Move the zk db to the delegated dataset (if we need to, more MANTA-2297)
-if [[ -e /zones/$CUR_UUID/root/var/db/zookeeper/myid ]]; then
-    zlogin $CUR_UUID "svcadm disable -s zookeeper && \
-                      touch /var/db/zookeeper/.moved && \
-                      cp -a /var/db/zookeeper /$DATASET/. && \
-                      svcadm enable -s zookeeper"
-    echo 'Sleeping to let ZK come back'
-    sleep 90
-fi
-
-sapiadm reprovision $CUR_UUID $BINDER_IMAGE
-
-echo "Done binder upgrade."
diff --git a/incr-upgrade-scripts/upgrade-imgapi.sh b/incr-upgrade-scripts/upgrade-imgapi.sh
deleted file mode 100755
index 226316a8..00000000
--- a/incr-upgrade-scripts/upgrade-imgapi.sh
+++ /dev/null
@@ -1,112 +0,0 @@
-#!/usr/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# upgrade-imgapi.sh:
-#   - reprovision imgapi zone
-#   - run imgapi migrations (SKIP_IMGAPI_MIGRATIONS=1 envvar to skip that)
-#
-
-export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-set -o xtrace
-set -o errexit
-set -o pipefail
-
-
-
-#---- support routines
-
-function fatal
-{
-    echo "$0: fatal error: $*" >&2
-    exit 1
-}
-
-
-#---- mainline
-
-if [[ $# -ne 1 ]]; then
-    echo "Usage: upgrade-imgapi.sh upgrade-images"
-    exit 1
-fi
-
-IMGAPI_IMAGE=$(source $1 >/dev/null; echo $IMGAPI_IMAGE)
-if [[ -z ${IMGAPI_IMAGE} ]]; then
-    fatal "\$IMGAPI_IMAGE not defined"
-fi
-[[ $(sysinfo | json "Boot Parameters.headnode") == "true" ]] \
-    || fatal "not running on the headnode"
-
-# Get the old imgapi zone. Assert we have exactly one on the HN.
-UFDS_ADMIN_UUID=$(bash /lib/sdc/config.sh -json |json ufds_admin_uuid)
-CURRENT_UUID=$(vmadm lookup -1 state=running owner_uuid=$UFDS_ADMIN_UUID alias=~imgapi)
-[[ -n "${CURRENT_UUID}" ]] \
-    || fatal "there is not exactly one running imgapi zone";
-CURRENT_ALIAS=$(vmadm get $CURRENT_UUID | json alias)
-CURRENT_IMAGE=$(vmadm get $CURRENT_UUID | json image_uuid)
-
-# Don't bother if already on this image.
-if [[ $CURRENT_IMAGE == $IMGAPI_IMAGE ]]; then
-    echo "$0: already using image $CURRENT_IMAGE for zone $CURRENT_UUID ($CURRENT_ALIAS)"
-    exit 0
-fi
-
-
-# Bail if the imgapi zone is so old it doesn't have a delegate dataset.
-num_imgapi_datasets=$(vmadm get $CURRENT_UUID | json datasets.length)
-if [[ "$num_imgapi_datasets" != 1 ]]; then
-    fatal "Current imgapi zone ($CURRENT_UUID) has no delegate dataset. Upgrading it would loose image file data!"
-fi
-
-
-empty=/var/tmp/empty
-rm -f $empty
-touch $empty
-REALLY_UPGRADE_IMGAPI=1 IMGAPI_ALIAS=$CURRENT_ALIAS IMGAPI_IMAGE=$IMGAPI_IMAGE ./upgrade-all.sh $empty
-
-
-# "SKIP_IMGAPI_MIGRATIONS" is to allow rollback-imgapi.sh to use this script.
-if [[ -z "$SKIP_IMGAPI_MIGRATIONS" ]]; then
-    # At the time of writing we are pretty sure we only need to worry about
-    # imgapi's in the field need migrations from 006 and up.
-    # TODO: tie this to imgapi versions appropriately.
-    echo ''
-    echo '* * *'
-    echo 'Run imgapi migrations.'
-    echo '* * *'
-    echo ''
-    zlogin $CURRENT_UUID svcadm disable imgapi
-# Per discussion on mib@ for the CM-172 update, accidentally left
-# sdcimage entries in UFDS can make upgrading a pain: potentially
-# requires clean up of bogus image entries. We now presume
-# all SDC installs are past the IMGAPI change needing migration-007.
-#    echo 'migration-006-cleanup-manta-storage.js'
-#    zlogin $CURRENT_UUID 'cd /opt/smartdc/imgapi && /opt/smartdc/imgapi/build/node/bin/node lib/migrations/migration-006-cleanup-manta-storage.js'
-#    echo ''
-#    echo 'migration-007-ufds-to-moray.js'
-#    zlogin $CURRENT_UUID 'cd /opt/smartdc/imgapi && /opt/smartdc/imgapi/build/node/bin/node lib/migrations/migration-007-ufds-to-moray.js'
-    echo ''
-    echo 'migration-008-new-storage-layout.js'
-    zlogin $CURRENT_UUID 'cd /opt/smartdc/imgapi && /opt/smartdc/imgapi/build/node/bin/node lib/migrations/migration-008-new-storage-layout.js'
-    echo ''
-    echo 'migration-009-backfill-archive.js'
-    zlogin $CURRENT_UUID 'cd /opt/smartdc/imgapi && /opt/smartdc/imgapi/build/node/bin/node lib/migrations/migration-009-backfill-archive.js'
-    echo ''
-    echo 'migration-010-backfill-billing_tags.js'
-    zlogin $CURRENT_UUID 'cd /opt/smartdc/imgapi && /opt/smartdc/imgapi/build/node/bin/node lib/migrations/migration-010-backfill-billing_tags.js'
-    echo ''
-    echo 'migration-011-backfill-published_at.js'
-    zlogin $CURRENT_UUID 'cd /opt/smartdc/imgapi && /opt/smartdc/imgapi/build/node/bin/node lib/migrations/migration-011-backfill-published_at.js'
-    zlogin $CURRENT_UUID svcadm enable imgapi
-fi
-
-
-echo 'Done imgapi upgrade.'
diff --git a/incr-upgrade-scripts/upgrade-mahi.sh b/incr-upgrade-scripts/upgrade-mahi.sh
deleted file mode 100755
index b57a1167..00000000
--- a/incr-upgrade-scripts/upgrade-mahi.sh
+++ /dev/null
@@ -1,87 +0,0 @@
-#!/usr/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# upgrade-mahi:
-#   - add delegated dataset to mahi zone if none exists
-#   - reprovision mahi
-
-
-export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-set -o xtrace
-set -o errexit
-set -o pipefail
-
-TOP=$(cd $(dirname $0)/; pwd)
-source $TOP/libupgrade.sh
-
-#---- mainline
-
-# -- Check usage and skip out if no upgrade necessary.
-
-if [[ $# -ne 1 ]]; then
-    echo "Usage: upgrade-mahi.sh <upgrade-images-file>"
-    exit 1
-fi
-[[ ! -f "$1" ]] && fatal "'$1' does not exist"
-source $1
-if [[ -z ${MAHI_IMAGE} ]]; then
-    fatal "\$MAHI_IMAGE not defined"
-fi
-[[ $(sysinfo | json "Boot Parameters.headnode") == "true" ]] \
-    || fatal "not running on the headnode"
-
-# Get the old zone. Assert we have exactly one on the HN.
-UFDS_ADMIN_UUID=$(bash /lib/sdc/config.sh -json | json ufds_admin_uuid)
-CUR_UUID=$(vmadm lookup -1 state=running owner_uuid=$UFDS_ADMIN_UUID alias=~^mahi)
-[[ -n "${CUR_UUID}" ]] \
-    || fatal "there is not exactly one running mahiN zone";
-CUR_ALIAS=$(vmadm get $CUR_UUID | json alias)
-CUR_IMAGE=$(vmadm get $CUR_UUID | json image_uuid)
-DATASET="zones/$CUR_UUID/data"
-
-# Don't bother if already on this image.
-if [[ $CUR_IMAGE == $MAHI_IMAGE ]]; then
-    echo "$0: already using image $CUR_IMAGE for zone $CUR_UUID ($CUR_ALIAS)"
-    exit 0
-fi
-
-# -- Get the new image.
-./download-image.sh ${MAHI_IMAGE}
-[[ $? == 0 ]] || fatal "Unable to download/install mahi image $MAHI_IMAGE"
-
-SDC_APP=$(sdc-sapi /applications?name=sdc | json -H 0.uuid)
-[[ -n "$SDC_APP" ]] || fatal "could not determine 'sdc' MAHI app"
-MAHI_JSON=$(sdc-sapi /services?name=mahi\&application_uuid=$SDC_APP | json -Ha)
-[[ -n "$MAHI_JSON" ]] || fatal "could not fetch sdc 'mahi' MAHI service"
-MAHI_SVC=$(echo "$MAHI_JSON" | json uuid)
-[[ -n "$MAHI_SVC" ]] || fatal "could not determine sdc 'mahi' MAHI service"
-
-ensure_delegated_dataset "mahi" "false"
-[[ $? == 0 ]] || fatal "could not ensure mahi delegated dataset"
-
-# -- Update service data in MAHI.
-update_svc_user_script $CUR_UUID $MAHI_IMAGE
-sapiadm update $MAHI_SVC params.image_uuid=$MAHI_IMAGE
-
-# move the redis db to the delegated dataset if we need to
-if [[ -e /zones/$CUR_UUID/root/var/db/redis/dump.db ]]; then
-    zlogin $CUR_UUID "svcadm disable -s mahi-server && \
-                      svcadm disable -s mahi-replicator && \
-                      touch /var/db/redis/.moved && \
-                      cp -a /var/db/redis/dump.db /mahi/redis && \
-                      svcadm enable -s mahi-replicator && \
-                      svcadm enable -s mahi-server"
-fi
-
-sapiadm reprovision $CUR_UUID $MAHI_IMAGE
-
-echo "Done mahi upgrade."
diff --git a/incr-upgrade-scripts/upgrade-moray.sh b/incr-upgrade-scripts/upgrade-moray.sh
deleted file mode 100755
index 9b001973..00000000
--- a/incr-upgrade-scripts/upgrade-moray.sh
+++ /dev/null
@@ -1,167 +0,0 @@
-#!/usr/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# upgrade-moray.sh: provision a new moray on the HN, then delete the old
-# one once the new one is in DNS.
-#
-
-export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-set -o xtrace
-set -o errexit
-set -o pipefail
-
-
-function fatal
-{
-    echo "$0: fatal error: $*" >&2
-    exit 1
-}
-
-
-
-#---- mainline
-
-if [[ $# -ne 1 ]]; then
-    echo "Usage: upgrade-moray.sh upgrade-images"
-    exit 1
-fi
-
-IMAGE_LIST=$1
-source $IMAGE_LIST
-
-if [[ -z ${MORAY_IMAGE} ]]; then
-    fatal "\$MORAY_IMAGE not defined"
-fi
-[[ $(sysinfo | json "Boot Parameters.headnode") == "true" ]] \
-    || fatal "not running on the headnode"
-
-# Get the old moray. Assert we have exactly one on the HN.
-UFDS_ADMIN_UUID=$(bash /lib/sdc/config.sh -json |json ufds_admin_uuid)
-CURRENT_UUID=$(vmadm lookup -1 state=running owner_uuid=$UFDS_ADMIN_UUID alias=~moray)
-[[ -n "${CURRENT_UUID}" ]] \
-    || fatal "there is not exactly one running morayN zone";
-CURRENT_ALIAS=$(vmadm get $CURRENT_UUID | json alias)
-CURRENT_IMAGE=$(vmadm get $CURRENT_UUID | json image_uuid)
-
-# Don't bother if already on this image.
-if [[ $CURRENT_IMAGE == $MORAY_IMAGE ]]; then
-    echo "$0: already using image $CURRENT_IMAGE for zone $CURRENT_UUID ($CURRENT_ALIAS)"
-    exit 0
-fi
-
-./download-image.sh ${MORAY_IMAGE}
-
-
-# Fix up SAPI's moray service to refer to new image.
-# Be careful to use the moray service for the *sdc* application, not manta's.
-SDC_APP=$(sdc-sapi /applications?name=sdc | json -H 0.uuid)
-[[ -n "$SDC_APP" ]] || fatal "could not determine 'sdc' SAPI app"
-MORAY_SVC=$(sdc-sapi /services?name=moray\&application_uuid=$SDC_APP | json -H 0.uuid)
-[[ -n "$MORAY_SVC" ]] || fatal "could not determine sdc 'moray' SAPI service"
-cat <<EOM | sdc-sapi /services/$MORAY_SVC -X PUT -d@-
-{
-    "params": {
-        "image_uuid": "$MORAY_IMAGE"
-    }
-}
-EOM
-
-# Add new required metadata if necessary.
-MORAY_MAX_PG_CONNS=$(sdc-sapi /services/$MORAY_SVC | json -H metadata.MORAY_MAX_PG_CONNS)
-if [[ -z "$MORAY_MAX_PG_CONNS" ]]; then
-    cat <<EOM | sdc-sapi /services/$MORAY_SVC -X PUT -d@-
-{
-    "metadata": {
-        "MORAY_MAX_PG_CONNS": 15
-    }
-}
-EOM
-fi
-
-
-# Since we're making a new zone, use the latest user-script.
-if [[ -f /usbkey/default/user-script.common ]]; then
-    NEW_USER_SCRIPT=/usbkey/default/user-script.common
-else
-    fatal "Unable to find user-script for ${alias}"
-fi
-/usr/vm/sbin/add-userscript /usbkey/default/user-script.common \
-    | json -e "this.payload={metadata: this.set_customer_metadata}" payload \
-    | sdc-sapi /services/$MORAY_SVC -X PUT -d@-
-
-
-# Provision a new moray instance
-CURR_N=$(echo $CURRENT_ALIAS | sed -E 's/moray([0-9]+)/\1/')
-NEW_N=$(( $CURR_N + 1 ))
-NEW_ALIAS=moray$NEW_N
-cat <<EOM | sapiadm provision
-{
-    "service_uuid": "$MORAY_SVC",
-    "params": {
-        "owner_uuid": "$UFDS_ADMIN_UUID",
-        "alias": "$NEW_ALIAS"
-    }
-}
-EOM
-NEW_UUID=$(vmadm lookup -1 alias=$NEW_ALIAS)
-[[ -n "$NEW_UUID" ]] || fatal "could not find new $NEW_ALIAS zone"
-
-
-# Poorman's wait for new moray to setup.
-sleep 30
-NEW_SVC_ERRS=$(svcs -z $NEW_UUID -x)
-if [[ -n "$NEW_SVC_ERRS" ]]; then
-    echo "$NEW_SVC_ERRS" >&2
-    fatal "new $NEW_ALIAS ($NEW_UUID) zone has svc errors"
-fi
-
-# Poorman's wait for new moray to show up in DNS.
-NEW_IP=$(vmadm get $NEW_UUID | json nics.0.ip)
-[[ -n "$NEW_IP" ]] || fatal "no IP for the new $NEW_ALIAS ($NEW_UUID) zone"
-MORAY_DOMAIN=$(bash /lib/sdc/config.sh -json | json moray_domain)
-[[ -n "$MORAY_DOMAIN" ]] || fatal "no 'moray_domain' in sdc config"
-sleep 60  # Lame sleep to wait for new moray to get in DNS.
-dig $MORAY_DOMAIN +short | grep $NEW_IP
-
-
-# Take the original moray out of DNS.
-zlogin $CURRENT_UUID svcadm disable registrar
-echo "Give it two minutes for $CURRENT_ALIAS to drop out of DNS: 'dig $MORAY_DOMAIN +short | grep -v $NEW_IP'"
-sleep 120  # Lame sleep instead of polling.
-EXTRA_IPS=$(dig $MORAY_DOMAIN +short | (grep -v $NEW_IP || true))
-[[ -z "$EXTRA_IPS" ]] || fatal "old $CURRENT_ALIAS zone is not out of DNS: 'dig $MORAY_DOMAIN +short'"
-
-
-# TODO: Destroy the original Moray instance.
-# For now we just stop the origin moray zone and show the commands to fully
-# destroy it.
-vmadm stop $CURRENT_UUID
-MORAY_SVC_MANIFESTS=$(sdc-sapi /services/$MORAY_SVC | json -H  manifests \
-    | json -e 'this._=Object.keys(this).map(function (k) { return this[k] })' _  \
-    | json -a | xargs)
-
-set +o xtrace
-echo ''
-echo '* * *'
-echo 'Run the following to destroy to original moray instance.'
-echo 'This is not done automatically because paranoia. It has been stopped.'
-echo "    sdc-sapi /instances/$CURRENT_UUID -X DELETE"
-if [[ -n "$MORAY_SVC_MANIFESTS" ]]; then
-    echo ''
-    echo 'Then delete any the (now obsolete) moray SAPI service manifests:'
-    for uuid in $MORAY_SVC_MANIFESTS; do
-        echo "    sdc-sapi /manifests/$uuid -X DELETE"
-    done
-    echo "    sdc-sapi /services/$MORAY_SVC | json -He 'this._={manifests:this.manifests}' _ | sdc-sapi /services/$MORAY_SVC -X PUT -d@-"
-fi
-echo '* * *'
-
diff --git a/incr-upgrade-scripts/upgrade-one-agent.sh b/incr-upgrade-scripts/upgrade-one-agent.sh
deleted file mode 100755
index fae522d9..00000000
--- a/incr-upgrade-scripts/upgrade-one-agent.sh
+++ /dev/null
@@ -1,137 +0,0 @@
-#!/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Upgrade a single agent on CNs in this DC.
-#
-
-if [[ -n "$TRACE" ]]; then
-    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-    set -o xtrace
-fi
-set -o errexit
-set -o pipefail
-
-
-NAME=$(basename $0)
-START=$(date +%s)
-
-
-#---- support functions
-
-function usage {
-    if [[ -n "$1" ]]; then
-        echo "error: $1"
-        echo ""
-    fi
-    echo "Usage:"
-    echo "  $NAME [<options>] <agent-tarball>       # install to SDC 7 CNs"
-    echo "  $NAME [<options>] -6 <agent-tarball>    # ... to SDC 6.5 CNs"
-    echo "  $NAME [<options>] -6 -7 <agent-tarball> # ... to both 6.5 and 7 CNs"
-    echo ""
-    echo "Options:"
-    echo "  -6            Install to SDC 6.5 CNs."
-    echo "  -7            Explicitly install to SDC 7 CNs. This is the default."
-    echo "                However if '-6' is also specified, then '-7' is"
-    echo "                necessary to install to SDC 7 CNs as well."
-    echo ""
-    echo "Examples:"
-    echo "  ./upgrade-one-agent.sh amon-agent-master-20140309T052321Z-ga873a6c.tgz"
-    exit 1
-}
-
-function fatal {
-    echo "$(basename $0): error: $1" >&2
-    exit 1
-}
-
-function errexit {
-    if [[ $1 -eq 0 ]]; then
-        END=$(date +%s)
-        echo "$NAME: Success. Upgrade took $(($END - $START)) seconds." >&2
-        exit 0
-    else
-        echo "$NAME: Failed. Exit status: $1"
-        exit $1
-    fi
-}
-
-
-
-#---- mainline
-
-trap 'errexit $?' EXIT
-
-DO_6=false
-DO_7=
-while getopts "h67" c; do
-    case "$c" in
-    h)
-        usage
-        ;;
-    6)
-        DO_6=true
-        ;;
-    7)
-        DO_7=true
-        ;;
-    *)
-        usage "illegal option -- $OPTARG"
-        ;;
-    esac
-done
-if [[ -z "$DO_7" ]]; then
-    if [[ "$DO_6" == "true" ]]; then
-        DO_7=false
-    else
-        DO_7=true
-    fi
-fi
-shift $((OPTIND - 1))
-
-TARBALL=$1
-[[ -z ${TARBALL} ]] && usage
-[[ ! -f ${TARBALL} ]] && fatal "file '${TARBALL}' not found"
-
-# Cannot be in /tmp, else we'll overwrite it during the upgrade of this
-# node.
-# TODO: this guard fails if relative path given.
-[[ "$(dirname $TARBALL)" == "/tmp" ]] \
-    && fatal "input agent tarball cannot be in /tmp: $TARBALL"
-
-
-FILENAME=$(basename ${TARBALL})
-OEN_ARGS="-a -t 10 -T 600"
-
-echo "Copy $FILENAME to /tmp on all CNs."
-sdc-oneachnode $OEN_ARGS "rm -f /tmp/${FILENAME}" || true
-sdc-oneachnode $OEN_ARGS -g $TARBALL -d /tmp
-
-if [[ "$DO_6" == "true" ]]; then
-    echo ""
-    echo "Installing $FILENAME to SDC 6.5 CNs."
-    sdc-oneachnode $OEN_ARGS "
-        [ -d /opt/smartdc/agents/lib ] && exit 0;   # looks like SDC 7
-        set -o errexit
-        /opt/smartdc/agents/bin/agents-npm install /tmp/$FILENAME
-        rm /tmp/$FILENAME"
-fi
-
-if [[ "$DO_7" == "true" ]]; then
-    echo ""
-    echo "Installing $FILENAME to SDC 7 CNs."
-    sdc-oneachnode $OEN_ARGS "
-        [ ! -d /opt/smartdc/agents/lib ] && exit 0;   # looks like SDC 6.5
-        set -o errexit
-        /opt/smartdc/agents/bin/apm install /tmp/$FILENAME
-        rm /tmp/$FILENAME"
-fi
-
diff --git a/incr-upgrade-scripts/upgrade-other.sh b/incr-upgrade-scripts/upgrade-other.sh
deleted file mode 100755
index 49e99b12..00000000
--- a/incr-upgrade-scripts/upgrade-other.sh
+++ /dev/null
@@ -1,305 +0,0 @@
-#!/usr/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Upgrade other "stuff". Manual upgrade requirements that come up.
-# See the "other upgrades" section in README.md.
-#
-
-if [[ -n "$TRACE" ]]; then
-    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-    set -o xtrace
-fi
-set -o errexit
-set -o pipefail
-
-
-#---- support stuff
-
-function fatal
-{
-    echo "$0: fatal error: $*"
-    exit 1
-}
-
-
-#---- mainline
-
-# -- HEAD-1910, OS-2654: maintain_resolvers=true
-
-# 1. Update the sapi services.
-SDC_APP=$(sdc-sapi /applications?name=sdc | json -H 0.uuid)
-[[ -n "$SDC_APP" ]] || fatal "could not determine 'sdc' SAPI app"
-for data in $(sdc-sapi /services?application_uuid=$SDC_APP | json -H -a uuid name params.maintain_resolvers -d,); do
-    svc_uuid=$(echo "$data" | cut -d, -f1)
-    svc_name=$(echo "$data" | cut -d, -f2)
-    maintain_resolvers=$(echo "$data" | cut -d, -f3)
-    if [[ "$maintain_resolvers" != "true" ]]; then
-        echo "Set params.maintain_resolvers on service $svc_uuid ($svc_name)."
-        echo '{"params": {"maintain_resolvers": true}}' | sapiadm update $svc_uuid
-    fi
-done
-
-# TODO(HEAD-1910): only do the upgrade for core VMs that are on a platform
-# >=  20140212T195911Z.
-#
-## 2. Update current core VMs. To work, this depends on ZAPI-472,
-##    https://mo.joyent.com/vmapi/commit/8f3a47d, which added 'update' workflow
-##    version 7.0.7. So we need at least that version.
-#ufds_admin_uuid=$(bash /lib/sdc/config.sh -json | json ufds_admin_uuid)
-#update_workflow_vers=$(sdc-workflow /workflows \
-#    | json -Ha -c '/^update-[\d\.]+$/.test(this.name)' -e 'this.ver=this.name.split("-").slice(-1)[0]' ver | sort)
-## TODO: I'm not sure how to check semver *greater than or equal* to 7.0.7,
-##       so just checking for 7.0.7 presence.
-#if [[ "$(echo "$update_workflow_vers" | grep '7\.0\.7' || true)" == "7.0.7" ]]; then
-#    sdc-vmapi /vms?state=active\&owner_uuid=$ufds_admin_uuid \
-#        | json -Ha uuid alias maintain_resolvers \
-#        | while read uuid alias maintain_resolvers; do
-#        if [[ "$maintain_resolvers" != "true" ]]; then
-#            echo "Set maintain_resolvers=true on VM $uuid ($alias)."
-#            sdc-vmapi /vms/$uuid?action=update -X POST -d '{"maintain_resolvers": true}' \
-#                | sdc sdc-waitforjob
-#        fi
-#    done
-#else
-#    echo "Skip HEAD-1910 upgrade until VMAPI upgraded with ZAPI-472."
-#fi
-
-
-# -- HEAD-1916: SERVICE_DOMAIN on papi svc, PAPI_SERVICE/papi_domain on sdc app
-
-SDC_APP=$(sdc-sapi /applications?name=sdc | json -H 0.uuid)
-DOMAIN=$(sdc-sapi /applications/$SDC_APP | json -H metadata.datacenter_name).$(sdc-sapi /applications/$SDC_APP | json -H metadata.dns_domain)
-sapi_url=$(sdc-sapi /applications/$SDC_APP | json -H metadata.sapi-url)
-
-papi_domain=papi.$DOMAIN
-papi_service=$(sdc-sapi /services?name=papi | json -H 0.uuid)
-if [[ -n "$papi_service" ]]; then
-    echo "Upgrade PAPI service vars in SAPI."
-    sapiadm update $papi_service metadata.SERVICE_DOMAIN=$papi_domain
-    sapiadm update $papi_service metadata.sapi-url=$sapi_url
-    sapiadm update $SDC_APP metadata.PAPI_SERVICE=$papi_domain
-    sapiadm update $SDC_APP metadata.papi_domain=$papi_domain
-fi
-
-mahi_domain=mahi.$DOMAIN
-mahi_service=$(sdc-sapi /services?name=mahi | json -H 0.uuid)
-if [[ -n "$mahi_service" ]]; then
-    echo "Upgrade MAHI service vars in SAPI."
-    sapiadm update $mahi_service metadata.SERVICE_DOMAIN=$mahi_domain
-    sapiadm update $mahi_service metadata.sapi-url=$sapi_url
-    sapiadm update $SDC_APP metadata.MAHI_SERVICE=$mahi_domain
-    sapiadm update $SDC_APP metadata.mahi_domain=$mahi_domain
-fi
-
-
-# -- INTRO-701, should have at last 4GiB mem cap on ca zone
-
-ca_svc=$(sdc-sapi /services?name=ca | json -H 0.uuid)
-ca_max_physical_memory=$(sdc-sapi /services/$ca_svc | json -H params.max_physical_memory)
-if [[ $ca_max_physical_memory != "4096" ]]; then
-    echo "Update 'ca' SAPI service max_physical_memory, etc."
-    sapiadm update $ca_svc params.max_physical_memory=4096
-    sapiadm update $ca_svc params.max_locked_memory=4096
-    sapiadm update $ca_svc params.max_swap=8192
-    sapiadm update $ca_svc params.zfs_io_priority=20
-    sapiadm update $ca_svc params.cpu_cap=400
-    sapiadm update $ca_svc params.package_name=sdc_4096
-fi
-ca_zone_uuid=$(vmadm lookup -1 state=running alias=ca0)
-ca_zone_max_physical_memory=$(vmadm get $ca_zone_uuid | json max_physical_memory)
-if [[ $ca_zone_max_physical_memory != "4096" ]]; then
-    echo "Update 'ca0' zone mem cap to 4096."
-    vmadm update $ca_zone_uuid max_physical_memory=4096
-    vmadm update $ca_zone_uuid max_locked_memory=4096
-    vmadm update $ca_zone_uuid max_swap=8192
-    vmadm update $ca_zone_uuid zfs_io_priority=20
-    vmadm update $ca_zone_uuid cpu_cap=400
-fi
-
-# XXX HEAD-1931. get min package values, perhaps with relevant files copied from
-#     usb-headnode.git to incr-upgrade pkg. Should we have a sdc_FOO package
-#     for each service, and then just update them and resize zones as
-#     appropriate?
-#
-#     TODO: Do current new build values match the following?
-#
-#     Until have that, then comment the following out.
-if false; then
-    # rabbit 16384
-    sdc_app=$(sdc-sapi /applications?name=sdc | json -H 0.uuid)
-    rabbitmq_svc=$(sdc-sapi /services?application_uuid=$sdc_app\&name=rabbitmq | json -H 0.uuid)
-    sapiadm update $rabbitmq_svc params.max_physical_memory=16384
-    sapiadm update $rabbitmq_svc params.max_locked_memory=16384
-    sapiadm update $rabbitmq_svc params.max_shm_memory=16384
-    sapiadm update $rabbitmq_svc params.max_swap=32768
-    rabbitmq_zone_uuid=$(vmadm lookup -1 state=running alias=rabbitmq0)
-    vmadm update $rabbitmq_zone_uuid max_physical_memory=16384
-    vmadm update $rabbitmq_zone_uuid max_locked_memory=16384
-    vmadm update $rabbitmq_zone_uuid max_shm_memory=16384
-    vmadm update $rabbitmq_zone_uuid max_swap=32768
-    # manatee 16384 (see OS-3809 about needed max_shm_memory changes to
-    # track max_physical_memory for postgres config)
-    sdc_app=$(sdc-sapi /applications?name=sdc | json -H 0.uuid)
-    manatee_svc=$(sdc-sapi /services?application_uuid=$sdc_app\&name=manatee | json -H 0.uuid)
-    sapiadm update $manatee_svc params.max_physical_memory=16384
-    sapiadm update $manatee_svc params.max_locked_memory=16384
-    sapiadm update $manatee_svc params.max_shm_memory=16384
-    sapiadm update $manatee_svc params.max_swap=32768
-    manatee_zone_uuid=$(vmadm lookup -1 state=running alias=manatee0)
-    vmadm update $manatee_zone_uuid max_physical_memory=16384
-    vmadm update $manatee_zone_uuid max_locked_memory=16384
-    vmadm update $manatee_zone_uuid max_shm_memory=16384
-    vmadm update $manatee_zone_uuid max_swap=32768
-    # moray 8192
-    sdc_app=$(sdc-sapi /applications?name=sdc | json -H 0.uuid)
-    moray_svc=$(sdc-sapi /services?application_uuid=$sdc_app\&name=moray | json -H 0.uuid)
-    sapiadm update $moray_svc params.max_physical_memory=8192
-    sapiadm update $moray_svc params.max_locked_memory=8192
-    sapiadm update $moray_svc params.max_shm_memory=8192
-    sapiadm update $moray_svc params.max_swap=16384
-    moray_zone_uuid=$(vmadm lookup -1 state=running alias=~moray)
-    vmadm update $moray_zone_uuid max_physical_memory=8192
-    vmadm update $moray_zone_uuid max_locked_memory=8192
-    vmadm update $moray_zone_uuid max_shm_memory=8192
-    vmadm update $moray_zone_uuid max_swap=16384
-    # cloudapi 8192
-    sdc_app=$(sdc-sapi /applications?name=sdc | json -H 0.uuid)
-    cloudapi_svc=$(sdc-sapi /services?application_uuid=$sdc_app\&name=cloudapi | json -H 0.uuid)
-    sapiadm update $cloudapi_svc params.max_physical_memory=8192
-    sapiadm update $cloudapi_svc params.max_locked_memory=8192
-    sapiadm update $cloudapi_svc params.max_shm_memory=8192
-    sapiadm update $cloudapi_svc params.max_swap=16384
-    cloudapi_zone_uuid=$(vmadm lookup -1 state=running alias=~cloudapi)
-    vmadm update $cloudapi_zone_uuid max_physical_memory=8192
-    vmadm update $cloudapi_zone_uuid max_locked_memory=8192
-    vmadm update $cloudapi_zone_uuid max_shm_memory=8192
-    vmadm update $cloudapi_zone_uuid max_swap=16384
-    # napi 1024
-    sdc_app=$(sdc-sapi /applications?name=sdc | json -H 0.uuid)
-    napi_svc=$(sdc-sapi /services?application_uuid=$sdc_app\&name=napi | json -H 0.uuid)
-    sapiadm update $napi_svc params.max_physical_memory=1024
-    sapiadm update $napi_svc params.max_locked_memory=1024
-    sapiadm update $napi_svc params.max_shm_memory=1024
-    sapiadm update $napi_svc params.max_swap=2048
-    napi_zone_uuid=$(vmadm lookup -1 state=running alias=napi0)
-    vmadm update $napi_zone_uuid max_physical_memory=1024
-    vmadm update $napi_zone_uuid max_locked_memory=1024
-    vmadm update $napi_zone_uuid max_shm_memory=1024
-    vmadm update $napi_zone_uuid max_swap=2048
-    # amon 1024
-    sdc_app=$(sdc-sapi /applications?name=sdc | json -H 0.uuid)
-    amon_svc=$(sdc-sapi /services?application_uuid=$sdc_app\&name=amon | json -H 0.uuid)
-    sapiadm update $amon_svc params.max_physical_memory=1024
-    sapiadm update $amon_svc params.max_locked_memory=1024
-    sapiadm update $amon_svc params.max_swap=2048
-    amon_zone_uuid=$(vmadm lookup -1 state=running alias=amon0)
-    vmadm update $amon_zone_uuid max_physical_memory=1024
-    vmadm update $amon_zone_uuid max_locked_memory=1024
-    vmadm update $amon_zone_uuid max_swap=2048
-    # sdc 1024
-    sdc_app=$(sdc-sapi /applications?name=sdc | json -H 0.uuid)
-    sdc_svc=$(sdc-sapi /services?application_uuid=$sdc_app\&name=sdc | json -H 0.uuid)
-    sapiadm update $sdc_svc params.max_physical_memory=1024
-    sapiadm update $sdc_svc params.max_locked_memory=1024
-    sapiadm update $sdc_svc params.max_swap=2048
-    sdc_zone_uuid=$(vmadm lookup -1 state=running alias=sdc0)
-    vmadm update $sdc_zone_uuid max_physical_memory=1024
-    vmadm update $sdc_zone_uuid max_locked_memory=1024
-    vmadm update $sdc_zone_uuid max_swap=2048
-    # sapi 768
-    sdc_app=$(sdc-sapi /applications?name=sdc | json -H 0.uuid)
-    sapi_svc=$(sdc-sapi /services?application_uuid=$sdc_app\&name=sapi | json -H 0.uuid)
-    sapiadm update $sapi_svc params.max_physical_memory=768
-    sapiadm update $sapi_svc params.max_locked_memory=768
-    sapiadm update $sapi_svc params.max_shm_memory=768
-    sapiadm update $sapi_svc params.max_swap=1536
-    sapi_zone_uuid=$(vmadm lookup -1 state=running alias=sapi0)
-    vmadm update $sapi_zone_uuid max_physical_memory=768
-    vmadm update $sapi_zone_uuid max_locked_memory=768
-    vmadm update $sapi_zone_uuid max_shm_memory=768
-    vmadm update $sapi_zone_uuid max_swap=1536
-    # dhcpd 256
-    sdc_app=$(sdc-sapi /applications?name=sdc | json -H 0.uuid)
-    dhcpd_svc=$(sdc-sapi /services?application_uuid=$sdc_app\&name=dhcpd | json -H 0.uuid)
-    sapiadm update $dhcpd_svc params.max_physical_memory=256
-    sapiadm update $dhcpd_svc params.max_locked_memory=256
-    sapiadm update $dhcpd_svc params.max_swap=512
-    dhcpd_zone_uuid=$(vmadm lookup -1 state=running alias=dhcpd0)
-    vmadm update $dhcpd_zone_uuid max_physical_memory=256
-    vmadm update $dhcpd_zone_uuid max_locked_memory=256
-    vmadm update $dhcpd_zone_uuid max_swap=512
-    # binder 1024
-    sdc_app=$(sdc-sapi /applications?name=sdc | json -H 0.uuid)
-    binder_svc=$(sdc-sapi /services?application_uuid=$sdc_app\&name=binder | json -H 0.uuid)
-    sapiadm update $binder_svc params.max_physical_memory=1024
-    sapiadm update $binder_svc params.max_locked_memory=1024
-    sapiadm update $binder_svc params.max_swap=2048
-    binder_zone_uuid=$(vmadm lookup -1 state=running alias=binder0)
-    vmadm update $binder_zone_uuid max_physical_memory=1024
-    vmadm update $binder_zone_uuid max_locked_memory=1024
-    vmadm update $binder_zone_uuid max_swap=2048
-fi
-
-# -- HEAD-1958/HEAD-1961 region_name
-
-grep region_name /usbkey/config >/dev/null 2>&1 && rc=$? || rc=$?
-if [ $rc != 0 ]; then
-    # Prompt for the region_name
-    echo "A region name for this datacenter is required for upgrade."
-    while [ -z "$region_name" ]; do
-        echo -n "Enter region name: "
-        read region_name
-
-        echo -n "Is ${region_name} correct [y/N]? "
-        read region_correct
-        if [ "$region_correct" != "y" ]; then
-            unset region_name
-        fi
-    done
-
-    # Update the usbkey
-    /usbkey/scripts/mount-usb.sh >/dev/null 2>&1
-    if [ $? != 0 ]; then
-        echo "Error: unable to mount the USB stick"
-        exit 1
-    fi
-
-    cp /mnt/usbkey/config /tmp/config.$$
-    echo "region_name=$region_name" >> /tmp/config.$$
-    cp /tmp/config.$$ /mnt/usbkey/config
-
-    # Update the usbkey cache
-    cp -p /mnt/usbkey/config /usbkey/config
-
-    umount /mnt/usbkey
-
-    # Update SAPI
-    sapi_sdc_uuid=$(sdc-sapi /applications?name=sdc | json -Ha uuid)
-    if [ -z "$sapi_sdc_uuid" ]; then
-        fatal "Unable to fetch the sapi application uuid."
-    fi
-    sapiadm update $sapi_sdc_uuid metadata.region_name=$region_name
-    if [ $? != 0 ]; then
-        fatal "Unable to update the sapi sdc application with $region_name."
-    fi
-fi
-
-# -- HEAD-2127: Add sapi_domain to /usbkey/extra/joysetup/node.config
-
-grep sapi_domain /usbkey/extra/joysetup/node.config >/dev/null 2>&1 && rc=$? || rc=$?
-if [ $rc != 0 ]; then
-    sapi_domain=sapi.$DOMAIN
-
-    cp /usbkey/extra/joysetup/node.config /tmp/node.config.$$
-    echo "sapi_domain='$sapi_domain'" >> /tmp/node.config.$$
-    cp /tmp/node.config.$$ /usbkey/extra/joysetup/node.config
-fi
diff --git a/incr-upgrade-scripts/upgrade-rabbitmq.sh b/incr-upgrade-scripts/upgrade-rabbitmq.sh
deleted file mode 100755
index 25b364cd..00000000
--- a/incr-upgrade-scripts/upgrade-rabbitmq.sh
+++ /dev/null
@@ -1,81 +0,0 @@
-#!/usr/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# upgrade-rabbitmq.sh:
-#   - reprovision rabbitmq0 zone
-#   - sdc-agent-healthcheck
-#
-# It is suggested this is gated by:
-#   ./dc-maint-start.sh
-#   ...
-#   ./dc-maint-end.sh
-#
-
-export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-set -o xtrace
-set -o errexit
-set -o pipefail
-
-
-
-#---- support routines
-
-function fatal
-{
-    echo "$0: fatal error: $*" >&2
-    exit 1
-}
-
-
-#---- mainline
-
-if [[ $# -ne 1 ]]; then
-    echo "Usage: upgrade-rabbitmq.sh upgrade-images"
-    exit 1
-fi
-
-RABBITMQ_IMAGE=$(source $1 >/dev/null; echo $RABBITMQ_IMAGE)
-if [[ -z ${RABBITMQ_IMAGE} ]]; then
-    fatal "\$RABBITMQ_IMAGE not defined"
-fi
-[[ $(sysinfo | json "Boot Parameters.headnode") == "true" ]] \
-    || fatal "not running on the headnode"
-
-# Get the old rabbitmq zone. Assert we have exactly one on the HN.
-UFDS_ADMIN_UUID=$(bash /lib/sdc/config.sh -json |json ufds_admin_uuid)
-CURRENT_UUID=$(vmadm lookup -1 state=running owner_uuid=$UFDS_ADMIN_UUID alias=~rabbitmq)
-[[ -n "${CURRENT_UUID}" ]] \
-    || fatal "there is not exactly one running rabbitmqN zone";
-CURRENT_ALIAS=$(vmadm get $CURRENT_UUID | json alias)
-CURRENT_IMAGE=$(vmadm get $CURRENT_UUID | json image_uuid)
-
-# Don't bother if already on this image.
-if [[ $CURRENT_IMAGE == $RABBITMQ_IMAGE ]]; then
-    echo "$0: already using image $CURRENT_IMAGE for zone $CURRENT_UUID ($CURRENT_ALIAS)"
-    exit 0
-fi
-
-empty=/var/tmp/empty
-rm -f $empty
-touch $empty
-REALLY_UPGRADE_RABBITMQ=1 RABBITMQ_IMAGE=$RABBITMQ_IMAGE ./upgrade-all.sh $empty
-
-echo ''
-echo '* * *'
-echo 'Wait 30s (sleeps are lame) before running agent healthcheck.'
-sleep 30
-echo 'Check agent health after rabbit upgrade (full log to agent-healthcheck.log):'
-bash sdc-agent-healthcheck.sh | tee agent-healthcheck.log | (grep error || echo "(no errors)")
-echo '* * *'
-
-echo 'Done rabbitmq upgrade.'
-
diff --git a/incr-upgrade-scripts/upgrade-sapi.sh b/incr-upgrade-scripts/upgrade-sapi.sh
deleted file mode 100755
index 105ac9bc..00000000
--- a/incr-upgrade-scripts/upgrade-sapi.sh
+++ /dev/null
@@ -1,167 +0,0 @@
-#!/usr/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# upgrade-sapi.sh:
-#   - provision sapi1 zone and wait until in DNS (presuming curr SAPI is 'sapi0')
-#   - stop sapi0 zone
-#   - upgrade sapi0 and wait until in DNS
-#   - destroy sapi1
-#
-# We do this dance because upgrading SAPI in "full" mode requires a SAPI around.
-
-export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-set -o xtrace
-set -o errexit
-set -o pipefail
-
-TOP=$(cd $(dirname $0)/; pwd)
-source $TOP/libupgrade.sh
-
-if [[ ! -f "$TOP/add-agent-services.sh" ]]; then
-    echo "$0: fatal error: add-agent-services.sh not found on the incr-upgrade dir" >&2
-    exit 1
-fi
-
-#---- mainline
-
-# -- Check usage and skip out if no upgrade necessary.
-
-if [[ $# -ne 1 ]]; then
-    echo "Usage: upgrade-sapi.sh <upgrade-images-file>"
-    exit 1
-fi
-[[ ! -f "$1" ]] && fatal "'$1' does not exist"
-source $1
-if [[ -z ${SAPI_IMAGE} ]]; then
-    fatal "\$SAPI_IMAGE not defined"
-fi
-[[ $(sysinfo | json "Boot Parameters.headnode") == "true" ]] \
-    || fatal "not running on the headnode"
-
-# Get the old zone. Assert we have exactly one on the HN.
-UFDS_ADMIN_UUID=$(bash /lib/sdc/config.sh -json | json ufds_admin_uuid)
-CUR_UUID=$(vmadm lookup -1 state=running owner_uuid=$UFDS_ADMIN_UUID alias=~^sapi)
-[[ -n "${CUR_UUID}" ]] \
-    || fatal "there is not exactly one running sapiN zone";
-CUR_ALIAS=$(vmadm get $CUR_UUID | json alias)
-CUR_IMAGE=$(vmadm get $CUR_UUID | json image_uuid)
-
-# Don't bother if already on this image.
-if [[ $CUR_IMAGE == $SAPI_IMAGE ]]; then
-    echo "$0: already using image $CUR_IMAGE for zone $CUR_UUID ($CUR_ALIAS)"
-    exit 0
-fi
-
-
-SDC_APP=$(sdc-sapi /applications?name=sdc | json -H 0.uuid)
-[[ -n "$SDC_APP" ]] || fatal "could not determine 'sdc' SAPI app"
-SAPI_JSON=$(sdc-sapi /services?name=sapi\&application_uuid=$SDC_APP | json -Ha)
-[[ -n "$SAPI_JSON" ]] || fatal "could not fetch sdc 'sapi' SAPI service"
-SAPI_SVC=$(echo "$SAPI_JSON" | json uuid)
-[[ -n "$SAPI_SVC" ]] || fatal "could not determine sdc 'sapi' SAPI service"
-SAPI_DOMAIN=$(bash /lib/sdc/config.sh -json | json sapi_domain)
-[[ -n "$SAPI_DOMAIN" ]] || fatal "no 'sapi_domain' in sdc config"
-
-CUR_MODE=$(sdc-sapi --no-headers /mode)
-[[ "$CUR_MODE" == "full" ]] \
-    || fatal "SAPI is not in 'full' mode ($CUR_MODE). Cannot upgrade this."
-
-
-# -- Get sapi past SAPI-219 (adding a delegate dataset)
-ensure_delegated_dataset "sapi" "false"
-[[ $? == 0 ]] || fatal "could not ensure sapi delegated dataset"
-
-
-# -- Get the new image.
-./download-image.sh ${SAPI_IMAGE}
-[[ $? == 0 ]] || fatal "Unable to download/install sapi image $SAPI_IMAGE"
-
-
-# -- Provision a new upgraded zone.
-
-# Update service data in SAPI.
-sapiadm update $SAPI_SVC params.image_uuid=$SAPI_IMAGE
-update_svc_user_script $CUR_UUID $SAPI_IMAGE
-
-# Workaround SAPI-199.
-SAPI_URL="http://$SAPI_DOMAIN"
-sapiadm update $SAPI_SVC metadata.sapi-url=$SAPI_URL   # workaround SAPI-199
-echo "{\"set_customer_metadata\": {\"sapi-url\": \"$SAPI_URL\"}}" |
-    vmadm update ${CUR_UUID}
-
-# Provision a new instance.
-CUR_N=$(echo $CUR_ALIAS | sed -E 's/sapi([0-9]+)/\1/')
-NEW_N=$(( $CUR_N + 1 ))
-NEW_ALIAS=sapi$NEW_N
-cat <<EOM | sapiadm provision
-{
-    "service_uuid": "$SAPI_SVC",
-    "params": {
-        "owner_uuid": "$UFDS_ADMIN_UUID",
-        "alias": "$NEW_ALIAS"
-    }
-}
-EOM
-NEW_UUID=$(vmadm lookup -1 owner_uuid=$UFDS_ADMIN_UUID alias=$NEW_ALIAS)
-[[ -n "$NEW_UUID" ]] || fatal "could not find new $NEW_ALIAS zone"
-
-# Wait for new IP to enter DNS.
-wait_until_zone_in_dns $NEW_UUID $NEW_ALIAS $SAPI_DOMAIN
-
-
-# -- Phase out the "NEW" sapi zone. Just want to keep the original "CUR" one.
-
-CUR_IP=$(vmadm get $CUR_UUID | json nics.0.ip)
-NEW_IP=$(vmadm get $NEW_UUID | json nics.0.ip)
-
-# TODO: instead of waiting to get out of DNS, then back in, would be faster
-#    to not bother and just wait until a ping check on the sapi service is
-#    up.
-zlogin ${CUR_UUID} svcadm disable registrar
-wait_until_zone_out_of_dns $CUR_UUID $CUR_ALIAS $SAPI_DOMAIN $CUR_IP
-
-# Add "SAPI_MODE" to workaround SAPI-197. This will be unnecessary on SAPI
-# images after SAPI-167/SAPI-211 (where "SAPI_MODE" is replaced by
-# "SAPI_PROTO_MODE=true").
-echo '{"set_customer_metadata": {"SAPI_MODE": "full"}}' |
-    vmadm update ${CUR_UUID}
-
-echo '{}' | json -e "this.image_uuid = '${SAPI_IMAGE}'" |
-    vmadm reprovision ${CUR_UUID}
-wait_until_zone_in_dns $CUR_UUID $CUR_ALIAS $SAPI_DOMAIN $CUR_IP
-
-curl http://$CUR_IP/instances/$NEW_UUID -X DELETE
-wait_until_zone_out_of_dns $NEW_UUID $NEW_ALIAS $SAPI_DOMAIN $NEW_IP
-
-# Because we shuffle back to sapi0 we don't need to update to 'sapiadm'
-# symlink. In case that fails and you are stuck with sapi1, this might be
-# useful:
-#    SAPI_UUID=$(vmadm lookup alias=~sapi)
-#    rm -f /opt/smartdc/bin/sapiadm
-#    ln -s /zones/${SAPI_UUID}/root/opt/smartdc/config-agent/cmd/sapiadm.js \
-#        /opt/smartdc/bin/sapiadm
-
-# Run the SAPI backfill script if available
-zlogin ${CUR_UUID} /usr/bin/bash <<HERE
-if [[ -f /opt/smartdc/sapi/tools/sapi-backfill-service-type.js ]]; then
-    /opt/smartdc/sapi/build/node/bin/node /opt/smartdc/sapi/tools/sapi-backfill-service-type.js
-fi
-
-if [[ -f /opt/smartdc/sapi/tools/sapi-backfill-instance-type.js ]]; then
-    /opt/smartdc/sapi/build/node/bin/node /opt/smartdc/sapi/tools/sapi-backfill-instance-type.js
-fi
-HERE
-
-# Run the add-agent-services.sh script
-./add-agent-services.sh
-
-echo "Done sapi upgrade."
diff --git a/incr-upgrade-scripts/upgrade-tools.sh b/incr-upgrade-scripts/upgrade-tools.sh
deleted file mode 100755
index 528746d7..00000000
--- a/incr-upgrade-scripts/upgrade-tools.sh
+++ /dev/null
@@ -1,93 +0,0 @@
-#!/usr/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# Upgrade the tools from usb-headnode.git/tools/... to /opt/smartdc/bin
-# This requires a local copy of that 'tools/...' dir.
-#
-# Limitation: for now we are ignoring updates to tools-modules/... and
-# tools-man/...
-#
-
-if [[ -n "$TRACE" ]]; then
-    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-    set -o xtrace
-fi
-set -o errexit
-set -o pipefail
-
-
-#---- support stuff
-
-function fatal
-{
-    echo "$0: fatal error: $*"
-    exit 1
-}
-
-
-#---- mainline
-
-[[ $(sysinfo | json "Boot Parameters.headnode") == "true" ]] \
-    || fatal "not running on the headnode"
-[[ ! -f "./tools.tar.gz" ]] && fatal "there is no './tools.tar.gz' from which to upgrade!"
-
-# Guard on having an 'sdc' zone. If the HN doesn't have one, then the new
-# tools will all be broken.
-sdc_zone_uuid=$(vmadm lookup -1 state=running tags.smartdc_role=sdc)
-if [[ -z ${sdc_zone_uuid} ]]; then
-    fatal "this SDC headnode does not have an 'sdc' zone, cannot upgrade" \
-      "to the latest tools"
-fi
-
-# Ensure the /opt/smartdc/sdc symlink exists, and points to the 'sdc' zone
-rm -rf /opt/smartdc/sdc
-ln -s /zones/${sdc_zone_uuid}/root/opt/smartdc/sdc /opt/smartdc/sdc
-
-# Upgrade tools from the bundled tools tarball
-/usr/bin/tar xzof tools.tar.gz -C /opt/smartdc
-
-# Remove problematic files from old sdc-clients-light versions
-EMPTY_FILES="/opt/smartdc/node_modules/sdc-clients/node_modules/semver.js"
-for empty_file in $EMPTY_FILES; do
-    [[ -f $empty_file ]] && rm $empty_file
-done
-
-[[ ! -d "./scripts" ]] && fatal "there is no './scripts' dir from which to upgrade!"
-
-
-echo 'Mount USB key and upgrade [/mnt]/usbkey/scripts.'
-
-
-/usbkey/scripts/mount-usb.sh
-if [[ ! -d "/mnt/usbkey/scripts" ]]; then
-    echo "unable to mount /mnt/usbkey" >&2
-    exit 1
-fi
-
-cp -Rp /usbkey/scripts pre-upgrade.scripts.$(date +%s)
-rm -rf /mnt/usbkey/scripts /usbkey/scripts
-cp -Rp scripts /mnt/usbkey/scripts
-cp -Rp scripts /usbkey/scripts
-cp scripts/joysetup.sh /usbkey/extra/joysetup/
-cp scripts/agentsetup.sh /usbkey/extra/joysetup/
-
-if [[ -f /usbkey/tools.tar.gz ]]; then
-    cp /usbkey/tools.tar.gz pre-upgrade.tools.$(date +%s).tar.gz
-fi
-cp tools.tar.gz /usbkey/tools.tar.gz
-cp tools.tar.gz /mnt/usbkey/tools.tar.gz
-
-cp default/* /mnt/usbkey/default
-cp default/* /usbkey/default
-
-umount /mnt/usbkey
-
diff --git a/incr-upgrade-scripts/upgrade-ufds.sh b/incr-upgrade-scripts/upgrade-ufds.sh
deleted file mode 100755
index 9e7b9797..00000000
--- a/incr-upgrade-scripts/upgrade-ufds.sh
+++ /dev/null
@@ -1,261 +0,0 @@
-#!/usr/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# upgrade-ufds.sh:
-#   - NOTE: If this is the UFDS master, then, in general, all slaves should
-#     disable ufds-replicator until they themselves have been upgraded.
-#     Typically this should only be required for UFDS postgres schema
-#     migrations.
-#   - TODO: can we put portal in RO mode?
-#   - moray backup of ufds buckets
-#   - provision ufds1 zone and wait until in DNS (presuming curr UFDS is 'ufds0')
-#   - stop ufds0 zone
-#   - run `backfill` in moray zone (the backfill script is to fill in values
-#     for newly added indexes in the UFDS bucket in moray)
-#   - upgrade ufds0 and wait until in DNS
-#   - stop ufds1 (we don't need it anymore, delete it eventually)
-#
-
-export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-set -o xtrace
-set -o errexit
-set -o pipefail
-
-TOP=$(cd $(dirname $0)/; pwd)
-source $TOP/libupgrade.sh
-
-#---- mainline
-
-# -- Check usage and skip out if no upgrade necessary.
-
-if [[ $# -ne 1 ]]; then
-    fatal "Usage: upgrade-ufds.sh upgrade-images"
-fi
-[[ ! -f "$1" ]] && fatal "'$1' does not exist"
-source $1
-
-if [[ -z ${UFDS_IMAGE} ]]; then
-    fatal "\$UFDS_IMAGE not defined"
-fi
-[[ $(sysinfo | json "Boot Parameters.headnode") == "true" ]] \
-    || fatal "not running on the headnode"
-
-SDC_APP=$(sdc-sapi /applications?name=sdc | json -H 0.uuid)
-[[ -n "$SDC_APP" ]] || fatal "could not determine 'sdc' SAPI app"
-UFDS_SVC=$(sdc-sapi /services?name=ufds\&application_uuid=$SDC_APP | json -H 0.uuid)
-[[ -n "$UFDS_SVC" ]] || fatal "could not determine sdc 'ufds' SAPI service"
-UFDS_DOMAIN=$(bash /lib/sdc/config.sh -json | json ufds_domain)
-[[ -n "$UFDS_DOMAIN" ]] || fatal "no 'ufds_domain' in sdc config"
-
-# Get the old zone. Assert we have exactly one on the HN.
-UFDS_ADMIN_UUID=$(bash /lib/sdc/config.sh -json | json ufds_admin_uuid)
-CUR_UUID=$(vmadm lookup -1 state=running owner_uuid=$UFDS_ADMIN_UUID alias=~ufds)
-[[ -n "${CUR_UUID}" ]] \
-    || fatal "there is not exactly one running ufdsN zone";
-CUR_ALIAS=$(vmadm get $CUR_UUID | json alias)
-CUR_IMAGE=$(vmadm get $CUR_UUID | json image_uuid)
-
-# Don't bother if already on this image.
-if [[ $CUR_IMAGE == $UFDS_IMAGE ]]; then
-    echo "$0: already using image $CUR_IMAGE for zone $CUR_UUID ($CUR_ALIAS)"
-    exit 0
-fi
-
-# -- Get the new image.
-./download-image.sh $UFDS_IMAGE || fatal "failed to download image $UFDS_IMAGE"
-
-
-# -- Do the UFDS upgrade.
-
-
-# We need moray details both, for backfill and to check ufds bucket version:
-
-# Work around EPIPE in 'vmadm lookup' (OS-2604)
-MORAY_UUIDS=$(vmadm lookup alias=~^moray owner_uuid=$UFDS_ADMIN_UUID state=running)
-MORAY_UUID=$(echo "$MORAY_UUIDS" | head -1)
-
-# We can get ufds version from the config file of the ufds running instance:
-VERSION=$(zlogin $(vmadm lookup -1 alias=$CUR_ALIAS) 'cat /opt/smartdc/ufds/etc/config.json' | json moray.version)
-
-# Fetches the uuid/ip of the primary manatee, required for backup and
-# sql schema migrations.
-function get_primary_manatee
-{
-    HN_MANATEE_UUID=$(vmadm lookup -1 state=running alias=~manatee)
-
-    # BEGIN BASHSTYLED
-    # manatee zones of certain vintages prevent bare 'manatee-stat' from
-    # working. Other vintages have the tool in a different location, but
-    # work OK.
-    #XXX This is broken for old manatee's.
-    if [[ -f /zones/${HN_MANATEE_UUID}/root/opt/smartdc/manatee/bin/manatee-stat ]]; then
-        MANATEE_STAT=$(zlogin $HN_MANATEE_UUID '
-            source .bashrc;
-            /opt/smartdc/manatee/build/node/bin/node /opt/smartdc/manatee/bin/manatee-stat
-            ' </dev/null)
-    else
-        MANATEE_STAT=$(zlogin $HN_MANATEE_UUID '
-            source .bashrc; manatee-stat' </dev/null)
-    fi
-    # END BASHSTYLED
-
-    PRIMARY_MANATEE_UUID=$(echo ${MANATEE_STAT} | json sdc.primary.zoneId)
-    PRIMARY_MANATEE_IP=$(echo $MANATEE_STAT | json sdc.primary.ip)
-}
-
-get_primary_manatee
-
-# Upgrade DB if needed
-# This function takes care of SQL schema upgrades which must run before the
-# ufds-master service boots. It's very likely that each one of the upgrades
-# into this function will run only once into the whole setup lifecycle.
-# TODO: Remove from here once all the existing SDC7 setups have been upgraded
-# past this point.
-function update_ufds_sql_schema {
-  set +o errexit
-
-  if [[ "$VERSION" -le "6" ]]; then
-    # primary manatee must be on the headnode for the following
-    if [[ $PRIMARY_MANATEE_UUID != $HN_MANATEE_UUID ]]; then
-        fatal "The primary manatee must be on the headnode for this ugprade"
-    fi
-
-    echo "Upgrading ufds_o_smartdc bucket."
-    while read SQL
-    do
-      zlogin $PRIMARY_MANATEE_UUID \
-        "psql -U moray -h $PRIMARY_MANATEE_IP -d moray -c \"${SQL}\"" \
-        </dev/null
-    done < ./capi-305.sql
-    echo "ufds_o_smartdc schema upgraded."
-  else
-    echo "Skipping capi-305 schema upgrade."
-  fi
-
-  set -o errexit
-}
-
-update_ufds_sql_schema
-
-
-# Backup data.
-# zlogin $LOCAL_MANATEE_UUID "pg_dump -U moray -t 'ufds*' moray" >./moray_ufds_backup.sql
-
-# Backs up (pg_dump) to /var/tmp on the primary manatee's compute node.
-function backup_ufds_data
-{
-    # get the primary's CN
-    local PRIMARY_MANATEE_UUID
-    PRIMARY_MANATEE_UUID=$(echo ${MANATEE_STAT} | json sdc.primary.zoneId)
-    local PRIMARY_MANATEE_CN
-    PRIMARY_MANATEE_CN=$(sdc-vmapi /vms/$PRIMARY_MANATEE_UUID \
-        | json -Ha server_uuid)
-    local PRIMARY_MANATEE_ALIAS
-    PRIMARY_MANATEE_ALIAS=$(sdc-cnapi /servers/$PRIMARY_MANATEE_UUID \
-        | json -Ha alias)
-
-    local BACKUP_FILE=/var/tmp/moray_ufds_backup.$$.sql
-
-    # backup to the primary node.
-    # BASHSTYLED
-    sdc-oneachnode -n $PRIMARY_MANATEE_CN "zlogin $PRIMARY_MANATEE_UUID \"pg_dump -U moray -t 'ufds*' moray\" >$BACKUP_FILE"
-
-    echo "UFDS backed up to $BACKUP_FILE on host $PRIMARY_MANATEE_UUID"
-}
-backup_ufds_data
-
-# Update UFDS service in SAPI.
-# WARNING: hardcoded values here, should really derive from canonical ufds
-# service JSON somewhere.
-sapiadm update $UFDS_SVC params.max_physical_memory=8192
-sapiadm update $UFDS_SVC params.max_locked_memory=8192
-sapiadm update $UFDS_SVC params.max_swap=8448
-sapiadm update $UFDS_SVC params.image_uuid=$UFDS_IMAGE
-update_svc_user_script $CUR_UUID $UFDS_IMAGE
-
-# Provision a new ufds instance.
-CUR_N=$(echo $CUR_ALIAS | sed -E 's/ufds([0-9]+)/\1/')
-NEW_N=$(( $CUR_N + 1 ))
-NEW_ALIAS=ufds$NEW_N
-cat <<EOM | sapiadm provision
-{
-    "service_uuid": "$UFDS_SVC",
-    "params": {
-        "owner_uuid": "$UFDS_ADMIN_UUID",
-        "alias": "$NEW_ALIAS"
-    }
-}
-EOM
-NEW_UUID=$(vmadm lookup -1 alias=$NEW_ALIAS)
-[[ -n "$NEW_UUID" ]] || fatal "could not find new $NEW_ALIAS zone"
-
-# Wait for new IP to enter DNS.
-wait_until_zone_in_dns $NEW_UUID $NEW_ALIAS $UFDS_DOMAIN
-
-# Stop old ufds.
-vmadm stop $CUR_UUID
-
-
-# Backfill.
-if [ "$VERSION" -le "6" ]; then
-  echo "Backfill (stage 1)"
-  zlogin $MORAY_UUID /opt/smartdc/moray/build/node/bin/node \
-      /opt/smartdc/moray/node_modules/.bin/backfill \
-      -i name -i version -i givenname -i expires_at -i company \
-      -P objectclass=sdcimage \
-      -P objectclass=sdcpackage \
-      -P objectclass=amonprobe \
-      -P objectclass=amonprobegroup \
-      -P objectclass=datacenter \
-      -P objectclass=authdev \
-      -P objectclass=foreigndc \
-      ufds_o_smartdc </dev/null
-
-  echo "Backfill (stage 2)"
-  zlogin $MORAY_UUID /opt/smartdc/moray/build/node/bin/node \
-      /opt/smartdc/moray/node_modules/.bin/backfill \
-      -i name -i version -i givenname -i expires_at -i company \
-      -P objectclass=sdckey \
-      ufds_o_smartdc </dev/null
-else
-  echo "Skipping backfill, given bucket version is greater than 6"
-fi
-
-# Upgrade "old" ufds zone.
-# TODO: I *believe* we can have two UFDS' running during backfill.
-echo '{}' | json -e "this.image_uuid = '${UFDS_IMAGE}'" |
-    vmadm reprovision ${CUR_UUID}
-
-if [ "$VERSION" -le "6" ]; then
-  echo "Backfill (stage 3)"
-  zlogin $MORAY_UUID /opt/smartdc/moray/build/node/bin/node \
-      /opt/smartdc/moray/node_modules/.bin/backfill \
-      -i name -i version -i givenname -i expires_at -i company \
-      ufds_o_smartdc </dev/null
-else
-  echo "Skipping backfill, given bucket version is greater than 6"
-fi
-
-# -- Phase out the "NEW" ufds zone. Just want to keep the original "CUR" one.
-wait_until_zone_in_dns $CUR_UUID $CUR_ALIAS $UFDS_DOMAIN
-zlogin $NEW_UUID svcadm disable registrar
-wait_until_zone_out_of_dns $NEW_UUID $NEW_ALIAS $UFDS_DOMAIN
-vmadm stop $NEW_UUID
-
-set +o xtrace
-echo ''
-echo '* * *'
-echo "Run the following to destroy the $NEW_ALIAS instance used for upgrade."
-echo 'This is not done automatically because paranoia. It has been stopped.'
-echo "    sdc-sapi /instances/$NEW_UUID -X DELETE"
-echo '* * *'
-echo "Done."
diff --git a/incr-upgrade-scripts/version-list.sh b/incr-upgrade-scripts/version-list.sh
deleted file mode 100755
index 51233a15..00000000
--- a/incr-upgrade-scripts/version-list.sh
+++ /dev/null
@@ -1,55 +0,0 @@
-#!/usr/bin/bash
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-#
-
-#
-# Copyright (c) 2014, Joyent, Inc.
-#
-
-#
-# version-list.sh: list image uuids and corresponding git shas of
-# deployed images.
-#
-# Limitations:
-# - This process can't handle multiple instances (e.g. two morays on beta-4)
-# - Presumes all core zones are on the HN.
-#
-
-
-if [[ -n "$TRACE" ]]; then
-    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
-    set -o xtrace
-fi
-set -o errexit
-set -o pipefail
-
-
-function fatal
-{
-    echo "$0: fatal error: $*" >&2
-    exit 1
-}
-
-function warn
-{
-    echo "$0: warn: $*" >&2
-}
-
-
-ufds_admin_uuid=$(bash /lib/sdc/config.sh -json | json ufds_admin_uuid)
-corezones=$(sdc-vmapi /vms?owner_uuid=$ufds_admin_uuid\&state=running \
-    | json -H -c 'this.tags && this.tags.smartdc_role' -e 'this.role=this.tags.smartdc_role')
-for line in $(echo "$corezones" | json -a role alias uuid image_uuid -d: | sort); do
-    role=$(echo "$line" | cut -d: -f1)
-    alias=$(echo "$line" | cut -d: -f2)
-    image_uuid=$(echo "$line" | cut -d: -f4)
-    echo $alias >&2
-    stamp=$((sdc-imgadm get $image_uuid || true) | json version)
-    if [[ -z "$stamp" ]]; then
-        stamp="(not found in imgapi)"
-    fi
-    echo "export $(echo $role | tr 'a-z' 'A-Z')_IMAGE=$image_uuid    # alias=$alias, stamp=$stamp"
-done
-- 
2.21.0

