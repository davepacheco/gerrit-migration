From 6c57599c847f07fe4166e1e7f079bd79e455b31c Mon Sep 17 00:00:00 2001
From: Orlando Vazquez <ovazquez@gmail.com>
Date: Mon, 13 Aug 2018 09:01:43 -0700
Subject: [PATCH] TRITON-677 CNAPI gets stuck in a loop while trying to expire
 a ticket which is queued, which is also at the "top" of the waitlist queue
 for thats server/scope/id

---
 lib/models/waitlist.js                | 61 +++++++++++--------
 test/waitlist/test-waitlist-expiry.js | 88 ++++++++++++++++++++++++++-
 2 files changed, 124 insertions(+), 25 deletions(-)

diff --git a/lib/models/waitlist.js b/lib/models/waitlist.js
index 047d80f..4eb257b 100644
--- a/lib/models/waitlist.js
+++ b/lib/models/waitlist.js
@@ -158,31 +158,32 @@ function WaitlistDirectorOnUpdate(timestamp, tickets) {
     assert.optionalDate(timestamp, 'timestamp');
     assert.array(tickets, 'tickets');
 
-    self.log.trace('onUpdate with %d tickets', tickets.length);
+    if (tickets.length) {
+        self.log.info({ tickets: tickets },
+            'onUpdate with %d tickets', tickets.length);
+    }
+
     async.forEach(
         tickets,
         function _forEachTicket(ticket, next) {
             var i;
             // Check if ticket needs to be expired.
-            if (ticket.status === TICKET_STATUS_EXPIRED &&
-                self.callbacks[ticket.uuid]) {
-                self.log.info(
-                    'ticket %s expired, invoking %d callbacks',
-                    ticket.uuid, self.callbacks[ticket.uuid].length);
-                // If ticket went into 'active' status, kick off callbacks.
-                var expErr = new VError('ticket has expired');
-                for (i in self.callbacks[ticket.uuid]) {
-                    self.callbacks[ticket.uuid][i](expErr);
-                }
-                delete self.callbacks[ticket.uuid];
-                next();
-                return;
-            // Check if a pending (active/queued) ticket is expired but not
-            // marked as such.
-            } else if (ticket.status !== TICKET_STATUS_FINISHED &&
+            if (ticket.status !== TICKET_STATUS_FINISHED &&
+                       ticket.status !== TICKET_STATUS_EXPIRED &&
                        timestamp &&
                        timestamp.toISOString() > ticket.expires_at) {
                 ModelWaitlist.expireTicket(ticket.uuid, function (err) {
+                    if (self.callbacks[ticket.uuid]) {
+                        self.log.info(
+                            'ticket %s expired, invoking %d callbacks',
+                            ticket.uuid, self.callbacks[ticket.uuid].length);
+                        var expErr = new VError('ticket has expired');
+                        for (i in self.callbacks[ticket.uuid]) {
+                            self.callbacks[ticket.uuid][i](expErr);
+                        }
+                        delete self.callbacks[ticket.uuid];
+                    }
+
                     if (err) {
                         self.log.error(err);
                         next(err);
@@ -357,22 +358,22 @@ function ModelWaitlistTicketsUpdatedSince(opts, callback) {
     var filter;
     var findOpts;
 
-    self.log.trace('checking for tickets since %s', opts.timestamp);
+    self.log.debug('checking for tickets since %s', opts.timestamp);
 
     if (opts.timestamp) {
         var ts = new Date(opts.timestamp);
         var escts = common.filterEscape(ts.toISOString());
 
         // Return any tickets which:
-        // - are not finished|expired and have been updated since the
-        //   last check.
-        // - are not are not marked as finished or expired but have an
-        //   expiry date which has been exceeded.
+        // - Were updated since the last check and are not finished or expired.
+        // - Are not are not marked as finished or expired but have an expiry
+        //   date which has been exceeded.
         filter = sprintf(
             '(&' +
                 '(!(status=finished))' +
                 '(!(status=expired))' +
-                '(|(updated_at>=%s)(!(expires_at>=%s)))' +
+                '(|(updated_at>=%s)' +
+                '(!(expires_at>=%s)))' +
             ')',
             escts, escts);
     } else {
@@ -396,6 +397,11 @@ function ModelWaitlistTicketsUpdatedSince(opts, callback) {
             self.log.info({ tickets: tickets }, 'new ticket(s)');
         }
 
+//         tickets = tickets.filter(function (t) {
+//             return !(t.status === TICKET_STATUS_EXPIRED
+//                 && t.expires_at < escts);
+//         });
+
         callback(err, tickets);
     });
 };
@@ -604,6 +610,7 @@ function modelWaitlistFindNextTickets(opts, callback) {
     assert.string(opts.server_uuid, 'opts.server_uuid');
     assert.optionalNumber(opts.limit, 'opts.limit');
     assert.optionalBool(opts.omitActive, 'opts.omitActive');
+    assert.optionalUuid(opts.omitTicketUuid, 'opts.omitTicketUuid');
 
     var filter = sprintf(
         '(&' +
@@ -611,6 +618,8 @@ function modelWaitlistFindNextTickets(opts, callback) {
             '(scope=%s)' +
             '(id=%s)' +
             (opts.omitActive ? '(!(status=active))' : '') +
+            (opts.omitTicketUuid
+                ? '(!(uuid=' + opts.omitTicketUuid + '))' : '') +
             '(!(status=finished))' +
             '(!(status=expired))' +
         ')', opts.server_uuid, opts.scope, opts.id);
@@ -689,6 +698,9 @@ function ModelWaitlistUpdateTicketActivateNext(opts, callback) {
                     return;
                 }
 
+                self.log.info({ result: result },
+                    'modifyTicketActivateNext: getTicket result');
+
                 ticket = result.ticket;
                 ticketEtag = result.etag;
                 ticket.updated_at = (new Date()).toISOString();
@@ -744,6 +756,7 @@ function ModelWaitlistUpdateTicketActivateNext(opts, callback) {
                 server_uuid: ticket.server_uuid,
                 limit: 1,
                 omitActive: true,
+                omitTicketUuid: ticket.uuid,
                 id: ticket.id,
                 scope: ticket.scope
             },
@@ -795,7 +808,7 @@ function ModelWaitlistUpdateTicketActivateNext(opts, callback) {
 
         // Actually execute the batch.
         function batchUpdate(next) {
-            self.log.debug({
+            self.log.info({
                 batch: batchOperations
             }, 'performing batch operation to activate next ticket');
 
diff --git a/test/waitlist/test-waitlist-expiry.js b/test/waitlist/test-waitlist-expiry.js
index 7043ec1..fd8ee15 100644
--- a/test/waitlist/test-waitlist-expiry.js
+++ b/test/waitlist/test-waitlist-expiry.js
@@ -230,10 +230,96 @@ function testExpireSingleTicketStartNext(test) {
     });
 }
 
+
+/*
+ * Test a situation in which we have an active ticket and a subsequent ticket,
+ * which is queued, expires. We should be able to wait on the queued ticket and
+ * have our callback called when the ticket expires.
+ */
+
+function testExpireQueuedTicket(test) {
+    test.expect(16);
+    var expireTimeSeconds0 = 600;
+    var expireTimeSeconds1 = 2;
+    var ticket1;
+
+    // This ticket will be active first.
+    var ticketPayload0 = {
+        scope: 'test-expire-queued',
+        id: '123',
+        expires_at: (
+            new Date((new Date().valueOf()) +
+                      expireTimeSeconds0 * 1000)).toISOString()
+    };
+
+    // This ticket will expire while queued.
+    var ticketPayload1 = {
+        scope: 'test-expire-queued',
+        id: '123',
+        expires_at: (
+            new Date((new Date().valueOf()) +
+                      expireTimeSeconds1 * 1000)).toISOString()
+    };
+
+    async.waterfall([
+        function (next) {
+            client.post(wlurl, ticketPayload0, function (err, req, res, t) {
+                test.deepEqual(err, null);
+                test.equal(res.statusCode, 202,
+                           'POST waitlist ticket returned 202');
+                test.ok(res, 'got a response');
+                test.ok(t, 'got an ticket');
+                test.ok(t.uuid, 'got a ticket uuid');
+
+                next();
+            });
+        },
+        function (next) {
+            client.post(wlurl, ticketPayload1, function (err, req, res, t) {
+                ticket1 = t;
+                test.deepEqual(err, null);
+                test.equal(res.statusCode, 202,
+                           'POST waitlist ticket returned 202');
+                test.ok(res, 'got a response');
+                test.ok(t, 'got an ticket');
+                ticket1 = t;
+                test.ok(t.uuid, 'got a ticket uuid');
+
+                next();
+            });
+        },
+        function (next) {
+            var waiturl = sprintf('/tickets/%s/wait', ticket1.uuid);
+            var timeout = setTimeout(function () {
+                var errMsg = 'cnapi got stuck';
+                test.ok(false, errMsg);
+                next(new Error(errMsg));
+            }, 5000);
+
+            client.get(waiturl, getcb);
+            function getcb(err, req, res, v) {
+                clearTimeout(timeout);
+                test.ok(err, 'expected an error');
+                test.equal(err.message, 'ticket has expired');
+                test.equal(err.restCode, 'InternalError');
+                test.equal(err.statusCode, 500);
+                test.ok(true);
+                next();
+            }
+        }
+    ],
+    function (error) {
+        test.equal(error, null);
+        test.done();
+    });
+}
+
 module.exports = {
     setUp: setup,
     tearDown: teardown,
     'expire single ticket': testExpireSingleTicket,
     'create two tickets expire first, start next':
-        testExpireSingleTicketStartNext
+        testExpireSingleTicketStartNext,
+    'create two tickets, second one expires':
+        testExpireQueuedTicket
 };
-- 
2.21.0

