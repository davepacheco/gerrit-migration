From cbdfc99c45866c83ef90b454b30da12798eaa70c Mon Sep 17 00:00:00 2001
From: Todd Whiteman <todd.whiteman@joyent.com>
Date: Thu, 26 Oct 2017 12:26:41 -0700
Subject: [PATCH] IMGAPI-651 do not set min_platform for lx images

---
 CHANGES.md    |  10 +++++
 lib/images.js | 120 ++++++++++++++------------------------------------
 package.json  |   2 +-
 3 files changed, 43 insertions(+), 89 deletions(-)

diff --git a/CHANGES.md b/CHANGES.md
index c1a6958..30ce77d 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -1,5 +1,15 @@
 # IMGAPI changelog
 
+## 4.0.12
+
+- IMGAPI-651 for lx-dataset images `imgadm publish ...` inherits min_platform
+  from the origin image (or removes it for non-incremental images) when an
+  older imgadm version < 3.7.4 is used.
+- Dropped obsolete IMGAPI-312 workaround, which would set min_platform for
+  SmartOS images when the version of imgadm did not already set min_platform.
+- Dropped obsolete IMGAPI-251 workaround, which ensured incremental images set
+  min_platform to a version that included imgadm incremental image support.
+
 ## 4.0.11
 
 - joyent/node-docker-registry-client#23 Namespace validation too strict
diff --git a/lib/images.js b/lib/images.js
index fc6cfd4..1285da1 100644
--- a/lib/images.js
+++ b/lib/images.js
@@ -52,20 +52,6 @@ var UUID_RE = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;
 var ICON_CONTENT_TYPES = ['image/jpeg', 'image/gif', 'image/png'];
 
 
-/*
- * IMGAPI-251: If we're creating an incremental image, then we want to
- * make sure it is only used to provision on a server with an imgadm
- * that supports incremental images... or on any 6.5 platform (presuming
- * it has the latest provisioner agent which handles the origin image
- * installation).
- */
-var IMGAPI_251_MIN_PLATFORM = {
-    '7.0': '20130729T063445Z',
-    // The oldest 6.5 platform in the JPC fleet at time of writing.
-    // See IMGAPI-286.
-    '6.5': '20120614T001014Z'
-};
-
 //---- Image model
 
 /**
@@ -1799,16 +1785,8 @@ function apiCreateImageFromVm(req, res, callback) {
     if (manifest.uuid === undefined) {
         manifest.uuid = lib_uuid.v4();
     }
-    // Workaround IMGAPI-251: see note above.
-    if (incremental && !(manifest.requirements &&
-                         manifest.requirements.min_platform)) {
-        if (!manifest.requirements)
-            manifest.requirements = {};
-        manifest.requirements.min_platform = IMGAPI_251_MIN_PLATFORM;
-    }
 
     var vm;
-    var vmServer;
     var prepareImageScript;
     async.waterfall([
         // Ensure the vm is on a CN with sufficient platform (IMGAPI-298).
@@ -1842,7 +1820,6 @@ function apiCreateImageFromVm(req, res, callback) {
                     return next(new errors.InternalError(err, format(
                         'could not get server "%s" details', serverUuid)));
                 }
-                vmServer = server;
 
                 var serverVersion;
                 var sdcVersion = server.sysinfo['SDC Version'];
@@ -1901,30 +1878,6 @@ function apiCreateImageFromVm(req, res, callback) {
             next();
         },
 
-        /*
-         * Workaround IMGAPI-312: 'imgadm create' for *smartos* images
-         * needs to set min_platform to the current platform version
-         * to avoid bw binary incompat. imgadm v2.6.2 does this. We
-         * need it for imgadm <2.6.2 in the wild.
-         *
-         * This intentionally overrides a possible 'min_platform' setting
-         * above.
-         */
-        function workaroundImgapi312(next) {
-            if (vm.brand !== 'kvm' /* i.e. this is smartos */) {
-                if (!manifest.requirements)
-                    manifest.requirements = {};
-                manifest.requirements.min_platform = {};
-                manifest.requirements.min_platform[
-                    vmServer.sysinfo['SDC Version']]
-                        = vmServer.current_platform;
-                log.info({min_platform: manifest.requirements.min_platform},
-                    'set smartos image creation min_platform ' +
-                    '(workaround IMGAPI-312)');
-            }
-            next();
-        },
-
         function getPrepareImageScript(next) {
             var protoImageUuid;
             if (vm.brand === 'kvm') {
@@ -2040,6 +1993,7 @@ function apiAdminImportImage(req, res, callback) {
     var log = req.log;
     var app = req._app;
     var data = req.body;
+    var originImage;
 
     if (req.query.account) {
         return callback(new errors.OperatorOnlyError());
@@ -2095,6 +2049,7 @@ function apiAdminImportImage(req, res, callback) {
                 if (err && err.restCode === 'ResourceNotFound') {
                     next(new errors.OriginDoesNotExistError(err, data.origin));
                 } else {
+                    originImage = origin;
                     next(err);
                 }
             });
@@ -2126,6 +2081,36 @@ function apiAdminImportImage(req, res, callback) {
                 owner: data.owner
             }, next);
         },
+        /*
+         * IMGAPI-651: 'imgadm publish' for *lx-dataset* images must inherit
+         * min_platform setting (or remove the min_platform setting if there
+         * is no origin image) when imgadm < v3.7.4.
+         */
+        function workaroundImgapi651(next) {
+            if (data.type === 'lx-dataset' &&
+                    data.requirements &&
+                    data.requirements.min_platform &&
+                    !semverGter(imgadmVersionFromReq(req), '3.7.4')) {
+                if (originImage && originImage.requirements &&
+                        originImage.requirements.min_platform) {
+                    log.info({
+                            origin: originImage.uuid,
+                            old_min_platform: data.requirements.min_platform,
+                            new_min_platform:
+                                originImage.requirements.min_platform
+                        },
+                        'inherit min_platform from lx origin image ' +
+                        '(IMGAPI-651)');
+                    data.requirements.min_platform =
+                        objCopy(originImage.requirements.min_platform);
+                } else {
+                    log.info({min_platform: data.requirements.min_platform},
+                        'removing min_platform for lx image (IMGAPI-651)');
+                    delete data.requirements.min_platform;
+                }
+            }
+            next();
+        },
         function createIt(next) {
             log.info({data: data}, 'AdminImportImage: create it');
             Image.create(app, data, true, false, next);
@@ -2144,47 +2129,6 @@ function apiAdminImportImage(req, res, callback) {
         },
         function addItToDb(image, next) {
             if (placeholder) {
-                /*
-                 * Because of OS-2651 we need to workaround IMGAPI-312 *again*!
-                 * SmartOS custom images need a min_platform of the current
-                 * platform of the source VM.
-                 *
-                 * The appropriate min_platform was set on the placeholder.
-                 * Use that.
-                 */
-                if (image.os === 'smartos' &&
-                    !imgadmVersionFromReq(req))
-                {
-                    image.requirements.min_platform =
-                        placeholder.requirements.min_platform;
-                    image.raw.requirements = image.requirements;
-                    log.info({min_platform: image.requirements.min_platform,
-                        image: image.uuid}, 'restoring smartos image ' +
-                        'min_platform (workaround IMGAPI-312 again)');
-                }
-
-                /*
-                 * Workaround OS-2651: This was a bug where imgadm create would
-                 * wipe out a given `manifest.requirements`. The fix was added
-                 * in imgadm 2.6.1. In that version imgadm was changed to
-                 * identify itself in the user-agent header. Use that to scope
-                 * down the workaround.
-                 */
-                if (Object.keys(image.requirements).length === 0 &&
-                    placeholder.requirements.min_platform['6.5'] ===
-                        IMGAPI_251_MIN_PLATFORM['6.5'] &&
-                    placeholder.requirements.min_platform['7.0'] ===
-                        IMGAPI_251_MIN_PLATFORM['7.0'] &&
-                    !imgadmVersionFromReq(req))
-                {
-                    log.info({requirements: placeholder.raw.requirements,
-                        image: image.uuid},
-                        'restoring placeholder image requirements ' +
-                        '(workaround OS-2651)');
-                    image.raw.requirements = placeholder.raw.requirements;
-                    image.requirements = placeholder.requirements;
-                }
-
                 Image.modify(app, image, req.log, function (err) {
                     if (err) {
                         log.error({uuid: image.uuid},
diff --git a/package.json b/package.json
index 2f89b56..4425d93 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "imgapi",
   "description": "Image API to manage images for SDC 7",
-  "version": "4.0.11",
+  "version": "4.0.12",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
-- 
2.21.0

