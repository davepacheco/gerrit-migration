From 0a74bef3a44021379de8d8dc09a94017b11e1836 Mon Sep 17 00:00:00 2001
From: Todd Whiteman <todd.whiteman@joyent.com>
Date: Mon, 29 May 2017 15:56:05 -0700
Subject: [PATCH] DOCKER-1060 `docker network ls` failing on network pools

---
 lib/backends/sdc/networks.js         | 57 ++++++++++++++++++++--------
 test/integration/api-network.test.js | 22 ++++++++++-
 2 files changed, 61 insertions(+), 18 deletions(-)

diff --git a/lib/backends/sdc/networks.js b/lib/backends/sdc/networks.js
index 7d0c7e3..a50a1e4 100644
--- a/lib/backends/sdc/networks.js
+++ b/lib/backends/sdc/networks.js
@@ -75,30 +75,55 @@ function getNapiClient(config) {
 //    },
 //    "Labels": null
 // }
-function napiNetworkToDockerNetwork(net, opts, callback) {
+function napiNetworkToDockerNetwork(network, opts, callback) {
 
     // TODO: Lookup 'Containers' that are using this network. Note that
     // `docker network ls` doesn't display these containers, it will be visible
     // in `docker network inspect foo`, though docker is sending the same JSON
     // data for both ls and inspect.
 
-    callback(null, {
+    var isNetworkPool = Array.isArray(network.networks) ? true : false;
+    var scope;
+
+    if (isNetworkPool) {
+        scope = 'pool';
+    } else if (network.fabric) {
+        scope = 'overlay';
+    } else {
+        scope = 'external';
+    }
+
+    var result = {
         Driver: 'Triton',
-        Id: utils.networkUuidToDockerId(net.uuid),
+        Id: utils.networkUuidToDockerId(network.uuid),
         IPAM: {
             Driver: 'default',
-            Options: null,
-            Config: [ {
-                Subnet: net.subnet,
-                Gateway: net.gateway
-            } ]
+            Options: null
         },
-        Name: net.name,
-        Options: {
-            'com.docker.network.driver.mtu': net.mtu.toString()
-        },
-        Scope: net.fabric ? 'overlay' : 'external'
-    });
+        Name: network.name,
+        Options: {},
+        Scope: scope
+    };
+
+    // Note: Network pools don't have specific subnet or mtu details, just a
+    // collection of network uuids that reside in the pool.
+    if (isNetworkPool) {
+        callback(null, result);
+        return;
+    }
+
+    result.Config = [
+        {
+            Subnet: network.subnet,
+            Gateway: network.gateway
+        }
+    ];
+    if (network.mtu) {
+        result.Options['com.docker.network.driver.mtu']
+            = network.mtu.toString();
+    }
+
+    callback(null, result);
 }
 
 /**
@@ -141,8 +166,8 @@ function getNapiNetworksForAccount(opts, callback) {
         // want to later filter out all networks that are in a pool.
         pools.forEach(function (pool) {
             networks.push(pool);
-            pool.networks.forEach(function (net) {
-                networksInPools[net.uuid] = true;
+            pool.networks.forEach(function (network_uuid) {
+                networksInPools[network_uuid] = true;
             });
         });
 
diff --git a/test/integration/api-network.test.js b/test/integration/api-network.test.js
index 989ed6d..4151493 100644
--- a/test/integration/api-network.test.js
+++ b/test/integration/api-network.test.js
@@ -83,6 +83,24 @@ test('docker network ls', function (tt) {
                 t.ok(net.IPAM, 'checking net.IPAM existance');
                 t.ok(net.Options, 'checking net.Options existance');
                 t.ok(net.Scope, 'checking net.Scope existance');
+                if (net.Scope === 'pool') {
+                    t.equal(Object.keys(net.Options).length, 0,
+                        'net.Options object should be empty');
+                } else {
+                    t.ok(net.Scope === 'overlay' || net.Scope === 'external',
+                        'checking net.Scope is overlay or external');
+                    t.equal(Object.keys(net.Options).length, 1,
+                        'net.Options object should have one entry');
+                    t.ok(net.Options['com.docker.network.driver.mtu'],
+                        'checking net.Options mtu existance');
+                    t.ok(net.Config, 'checking net.Config existance');
+                    t.ok(net.Config[0], 'checking net.Config[0] existance');
+                    t.ok(net.Config[0].Subnet,
+                        'checking net.Config[0].Subnet existance');
+                    // Some networks don't have a gateway (at least in
+                    // nightly-1 test rig), so we don't do a test for the
+                    // `Gateway` field
+                }
             });
             if (FABRICS_ENABLED) {
                 var aliceMyFabricNetworks = networks.filter(function (net) {
@@ -91,8 +109,8 @@ test('docker network ls', function (tt) {
 
                 t.equal(aliceMyFabricNetworks.length, 1,
                     'expect 1 My-Fabric-Network');
-                t.equal(aliceMyFabricNetworks[0].Scope, 'Overlay',
-                    'Ensure Scope === Overlay');
+                t.equal(aliceMyFabricNetworks[0].Scope, 'overlay',
+                    'Ensure Scope === overlay');
             }
             t.end();
         });
-- 
2.21.0

