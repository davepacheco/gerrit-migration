From e42b8d0505a819630c1220d17161257e20149993 Mon Sep 17 00:00:00 2001
From: Todd Whiteman <todd.whiteman@joyent.com>
Date: Mon, 7 Oct 2019 13:10:46 -0700
Subject: [PATCH] TRITON-1910 vminfod timeout when updating ram on bhyve vm

---
 src/vm/node_modules/VM.js         | 11 +++++--
 src/vm/tests/test-update-bhyve.js | 54 +++++++++++++++++++++++++++++--
 2 files changed, 59 insertions(+), 6 deletions(-)

diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index 28b33dfd..48eff549 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -4658,9 +4658,13 @@ function fixPayloadMemory(payload, vmobj, log)
 
         if ((ram + min_overhead) > max_phys) {
             payload.max_physical_memory = (ram + min_overhead);
+            log.info({old: max_phys, new: payload.max_physical_memory},
+                'adding min overhead to max_physical_memory');
         }
         if ((ram + min_overhead) > max_locked) {
             payload.max_locked_memory = (ram + min_overhead);
+            log.info({old: max_locked, new: payload.max_locked_memory},
+                'adding min overhead to max_locked_memory');
         }
     }
 
@@ -16608,11 +16612,12 @@ exports.update = function (uuid, payload, options, callback)
                         var v = value;
 
                         if (newkey !== 'ram') {
-                            if (keys.indexOf(newkey) > -1) {
+                            if (payload.hasOwnProperty(newkey)) {
                                 /*
                                  * The key we are attempting to set as a result
-                                 * of the "ram" key being set is set explicitly
-                                 * in the original payload - skip it
+                                 * of the "ram" key being set is explicitly set
+                                 * in the original payload (or in the normalized
+                                 * payload) - skip it.
                                  */
                                 return;
                             }
diff --git a/src/vm/tests/test-update-bhyve.js b/src/vm/tests/test-update-bhyve.js
index 86314bbd..1b27e098 100644
--- a/src/vm/tests/test-update-bhyve.js
+++ b/src/vm/tests/test-update-bhyve.js
@@ -25,6 +25,7 @@
 
 var async = require('/usr/node/node_modules/async');
 var execFile = require('child_process').execFile;
+var properties = require('/usr/vm/node_modules/props');
 var VM = require('/usr/vm/node_modules/VM');
 var vmtest = require('../common/vmtest.js');
 
@@ -532,9 +533,13 @@ test('update bhyve VM flexible_disk_size', function (t) {
     });
 });
 
+var unique_id = 0;
+
 function test_update_ram(ram)
 {
-    test('update ram ' + ram, function (t) {
+    unique_id += 1; // Ensures each test has it's own unique id.
+
+    test('update ram ' + ram + ' (' +unique_id + ')', function (t) {
         VM.update(vm_uuid, {'ram': ram}, function (err) {
             if (err) {
                 t.ok(false, 'error updating VM: ' + err.message);
@@ -567,11 +572,54 @@ function test_update_ram(ram)
 }
 
 // Now something bigger
-test_update_ram(1024);
-// We started at 1024, double that
 test_update_ram(2048);
 // Update to a lower value should lower everything...
 test_update_ram(1024);
+// Update to use the same size (should be a no-op).
+test_update_ram(1024);
+
+// TRITON-1910 Test the setting both ram and max_physical_memory together.
+test('update mixed mem properties on BHYVE VM', function (t) {
+    var mixed_mem_properties = {
+        'ram': 2048,
+        'max_physical_memory': 2048
+    };
+
+    var payload = JSON.parse(JSON.stringify(mixed_mem_properties));
+
+    VM.update(vm_uuid, payload, function (err) {
+        if (err) {
+            t.ok(false, 'error updating VM: ' + err.message);
+            t.end();
+            return;
+        }
+
+        VM.load(vm_uuid, function (err2, obj) {
+            if (err2) {
+                t.ok(false, 'failed reloading VM');
+                t.end();
+                return;
+            }
+
+            var min_overhead = (properties.BRAND_OPTIONS['bhyve'].features.
+                min_memory_overhead);
+            var ram = mixed_mem_properties.ram;
+
+            t.ok((obj.ram === ram), 'vm.ram: ' + obj.ram + ' expected: ' + ram);
+            t.ok((obj.max_locked_memory === (ram + min_overhead)),
+                'vm.max_locked_memory: ' + obj.max_locked_memory + ' expected: '
+                + (ram + min_overhead));
+            // All other memory values should be the same as the locked memory.
+            t.ok((obj.max_swap === (ram + min_overhead)), 'vm.max_swap: '
+                + obj.max_swap + ' expected: ' + (ram + min_overhead));
+            t.ok((obj.max_physical_memory === (ram + min_overhead)),
+                'vm.max_physical_memory: ' + obj.max_physical_memory
+                + ' expected: ' + (ram + min_overhead));
+
+            t.end();
+        });
+    });
+});
 
 // now try *just* updating swap
 test('update bhyve VM max_swap', function (t) {
-- 
2.17.2 (Apple Git-113)

