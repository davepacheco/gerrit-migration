From 7247c697163069111f60103b090168f32047ccc1 Mon Sep 17 00:00:00 2001
From: Mike Zeller <mike@mikezeller.net>
Date: Mon, 19 Mar 2018 05:20:57 +0000
Subject: [PATCH] OS-XXXX add a refhash for VL3 lookups

---
 .../uts/common/io/overlay/overlay_target.c    | 39 ++++++++++++++++++-
 1 file changed, 37 insertions(+), 2 deletions(-)

diff --git a/usr/src/uts/common/io/overlay/overlay_target.c b/usr/src/uts/common/io/overlay/overlay_target.c
index 0e4a826fac..ac216dc46d 100644
--- a/usr/src/uts/common/io/overlay/overlay_target.c
+++ b/usr/src/uts/common/io/overlay/overlay_target.c
@@ -141,8 +141,6 @@ overlay_entry_cache_destructor(void *buf, void *arg)
 	mutex_destroy(&ote->ote_lock);
 }
 
-/* TODO: we will need to modify these to hash/cmp DCID + MAC */
-
 static uint64_t
 overlay_mac_hash(const void *v)
 {
@@ -157,6 +155,32 @@ overlay_mac_cmp(const void *a, const void *b)
 	return (bcmp(a, b, ETHERADDRL));
 }
 
+static uint64_t
+overlay_vl3_hash(const void *v)
+{
+	const overlay_target_entry_t *ote = v;
+	uint32_t crc = -1U;
+
+	CRC32(crc, &ote->ote_dcid, sizeof (ote->ote_dcid), crc, crc32_table);
+	CRC32(crc, &ote->ote_vlan, sizeof (ote->ote_vlan), crc, crc32_table);
+	CRC32(crc, &ote->ote_ip, sizeof (ote->ote_ip), crc, crc32_table);
+	return (crc);
+}
+
+static int
+overlay_vl3_cmp(const void *a, const void *b)
+{
+	const overlay_target_entry_t *l = a, *r = b;
+
+	if (l->ote_dcid != r->ote_dcid)
+		return (1);
+
+	if (l->ote_vlan != r->ote_vlan)
+		return (1);
+
+	return (bcmp(&l->ote_ip, &r->ote_ip, sizeof (struct in6_addr)));
+}
+
 /* ARGSUSED */
 static void
 overlay_target_entry_dtor(void *arg)
@@ -165,6 +189,9 @@ overlay_target_entry_dtor(void *arg)
 
 	ote->ote_flags = 0;
 	bzero(ote->ote_addr, ETHERADDRL);
+	bzero(&ote->ote_ip, sizeof (struct in6_addr));
+	ote->ote_dcid = 0;
+	ote->ote_vlan = 0;
 	ote->ote_ott = NULL;
 	ote->ote_odd = NULL;
 	freemsgchain(ote->ote_chead);
@@ -522,6 +549,7 @@ overlay_target_associate(overlay_target_hdl_t *thdl, void *arg)
 		bcopy(&ota->ota_point, &ott->ott_u.ott_point,
 		    sizeof (overlay_target_point_t));
 	} else {
+		// VL2
 		ott->ott_u.ott_dyn.ott_dhash = refhash_create(OVERLAY_HSIZE,
 		    overlay_mac_hash, overlay_mac_cmp,
 		    overlay_target_entry_dtor, sizeof (overlay_target_entry_t),
@@ -530,6 +558,13 @@ overlay_target_associate(overlay_target_hdl_t *thdl, void *arg)
 		avl_create(&ott->ott_u.ott_dyn.ott_tree, overlay_mac_avl,
 		    sizeof (overlay_target_entry_t),
 		    offsetof(overlay_target_entry_t, ote_avllink));
+
+		// VL3
+		ott->ott_u.ott_dyn.ott_l3dhash = refhash_create(OVERLAY_HSIZE,
+		    overlay_vl3_hash, overlay_vl3_cmp,
+		    overlay_target_entry_dtor, sizeof (overlay_target_entry_t),
+		    offsetof(overlay_target_entry_t, ote_reflink), 0, KM_SLEEP);
+		// XXX need avl? See note in overlay_target_t
 	}
 	mutex_enter(&odd->odd_lock);
 	if (odd->odd_flags & OVERLAY_F_VARPD) {
-- 
2.21.0

