From ea1b57edf4e86386f3fab40c1017844c8de35324 Mon Sep 17 00:00:00 2001
From: Daniel Kontsek <daniel@kontsek.sk>
Date: Wed, 9 Aug 2017 12:42:47 +0200
Subject: [PATCH] vmadm should check for VNC port conflicts

Currently it is possible to configure the same vnc_port for two virtual machines.
In this case, the VMs start correctly and there is nothing in the their logs.
However, the vmadmd service goes to maintenance state and in its service log
there is a `Uncaught Error: listen EADDRINUSE` message.

Change-Id: I82191446d57fd2680c634ce343d81a3a88c6a829
---
 src/vm/node_modules/VM.js          | 27 +++++++++++++++++++++------
 src/vm/tests/test-net-conflicts.js |  5 +++++
 2 files changed, 26 insertions(+), 6 deletions(-)

diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index 2f1c8009..92b4e1f5 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -1674,12 +1674,13 @@ function hasConflictingIP(nic, ip, nic_tag, vlan_id) {
     return false;
 }
 
-function lookupConflicts(macs, ips, ipNics, vrids, log, callback) {
+function lookupConflicts(macs, ips, ipNics, vrids, vnc_port, log, callback) {
     var load_fields;
     var load_opts;
     var tracers_obj;
 
-    load_fields = ['brand', 'state', 'nics', 'uuid', 'zonename', 'zone_state'];
+    load_fields = ['brand', 'state', 'nics', 'uuid', 'zonename', 'zone_state',
+        'vnc_port'];
     load_opts = {fields: load_fields, log: log};
 
     assert(log, 'no logger passed to lookupConflicts()');
@@ -1691,10 +1692,12 @@ function lookupConflicts(macs, ips, ipNics, vrids, log, callback) {
     }
 
     log.debug('checking for conflicts with '
-        + JSON.stringify(macs) + ', ' + JSON.stringify(ips) + ' and '
-        + JSON.stringify(vrids));
+        + JSON.stringify(macs) + ', ' + JSON.stringify(ips) + ', '
+        + JSON.stringify(vrids) + ' and ' + JSON.stringify(vnc_port));
+
+    if (macs.length === 0 && ips.length === 0 && vrids.length === 0
+        && !vnc_port) {
 
-    if (macs.length === 0 && ips.length === 0 && vrids.length === 0) {
         log.debug('returning from conflict check (nothing to check)');
         callback(null, false);
         return;
@@ -1747,6 +1750,12 @@ function lookupConflicts(macs, ips, ipNics, vrids, log, callback) {
             }
         }
 
+        if (vm.vnc_port && vnc_port && vm.vnc_port === vnc_port) {
+            log.error('Found conflict: ' + vm.uuid + ' already has VNC port '
+                + vnc_port);
+            conflict = true;
+        }
+
         cb(conflict);
     }, load_opts, function (err, results) {
         if (err) {
@@ -4273,6 +4282,7 @@ function checkPayloadProperties(payload, vmobj, log, callback)
     var tracers_obj;
     var update_nic;
     var update_nics = {};
+    var vnc_port = null;
     var vrids = [];
     var zvol;
 
@@ -4998,6 +5008,11 @@ function checkPayloadProperties(payload, vmobj, log, callback)
         return;
     }
 
+    // Fetch vnc_port for uniqueness check in lookupConflicts()
+    if (payload.hasOwnProperty('vnc_port') && payload.vnc_port > 0) {
+        vnc_port = payload.vnc_port;
+    }
+
     props = ['zfs_root_recsize', 'zfs_data_recsize'];
     for (prop in props) {
         prop = props[prop];
@@ -5047,7 +5062,7 @@ function checkPayloadProperties(payload, vmobj, log, callback)
 
     async.series([
         function (cb) {
-            lookupConflicts(macs, ips, ipNics, vrids, log,
+            lookupConflicts(macs, ips, ipNics, vrids, vnc_port, log,
                     function (error, conflict) {
                 if (error) {
                     cb(error);
diff --git a/src/vm/tests/test-net-conflicts.js b/src/vm/tests/test-net-conflicts.js
index d267265f..fef2ce27 100644
--- a/src/vm/tests/test-net-conflicts.js
+++ b/src/vm/tests/test-net-conflicts.js
@@ -219,3 +219,8 @@ test('add additional nic with same MAC', function(t) {
         }
     ]);
 });
+
+should_fail_with_conflict('KVM with same VNC port',
+  {brand: 'kvm', vnc_port: 12345},
+  {brand: 'kvm', vnc_port: 12345}
+);
-- 
2.21.0

