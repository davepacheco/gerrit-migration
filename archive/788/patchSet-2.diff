From 1900f60014c4736e861626dfc971f1eeaa0d9c6b Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Wed, 26 Oct 2016 21:19:03 +0000
Subject: [PATCH] NAPI-376 Handle old route gateways that weren't properly
 serialized

---
 lib/models/network.js |  7 ++++--
 lib/util/ip.js        | 54 +++++++++++++++++++++++++++++++++++++++----
 2 files changed, 54 insertions(+), 7 deletions(-)

diff --git a/lib/models/network.js b/lib/models/network.js
index 4d86dfc..2fe3ff2 100644
--- a/lib/models/network.js
+++ b/lib/models/network.js
@@ -994,7 +994,8 @@ function Network(params) {
 
     assert.ok(subnet_start, 'subnet_start');
 
-    var subnet = ipaddr.createCIDR(subnet_start, params.subnet_bits);
+    var subnet = params.subnet ? ipaddr.createCIDR(params.subnet) :
+        ipaddr.createCIDR(subnet_start, params.subnet_bits);
 
     assert.ok(subnet, 'subnet');
 
@@ -1058,7 +1059,9 @@ function Network(params) {
             } else {
                 key = util_ip.toIPAddr(r).toString();
             }
-            this.params.routes[key] = util_ip.toIPAddr(routes[r]);
+
+            // Fixup old route gateways that didn't get serialized.
+            this.params.routes[key] = util_ip.fixupIPAddr(routes[r]);
         }
     }
 
diff --git a/lib/util/ip.js b/lib/util/ip.js
index 91302e1..fdab11f 100644
--- a/lib/util/ip.js
+++ b/lib/util/ip.js
@@ -21,6 +21,34 @@ var net = require('net');
 var MAX_IPV4 = 4294967295;
 
 
+function invalidOctet(octet) {
+    return isNaN(octet) || (octet < 0) || (octet > 255);
+}
+
+
+/*
+ * Converts an array of four octets into a numeric representation
+ * of an IPv4 address.
+ */
+function octetsToNumber(octets) {
+    if (octets.length !== 4) {
+        return null;
+    }
+
+    var a = Number(octets[0]);
+    var b = Number(octets[1]);
+    var c = Number(octets[2]);
+    var d = Number(octets[3]);
+
+    if (invalidOctet(a) || invalidOctet(b) ||
+        invalidOctet(c) || invalidOctet(d)) {
+        return null;
+    }
+
+    return (a * 16777216) + (b * 65536) + (c * 256) + d;
+}
+
+
 /*
  * Converts a dotted IPv4 address (eg: 1.2.3.4) to its integer value
  */
@@ -29,11 +57,7 @@ function addressToNumber(addr) {
         return null;
     }
 
-    var octets = addr.split('.');
-    return Number(octets[0]) * 16777216 +
-        Number(octets[1]) * 65536 +
-        Number(octets[2]) * 256 +
-        Number(octets[3]);
+    return octetsToNumber(addr.split('.'));
 }
 
 
@@ -55,6 +79,25 @@ function toIPAddr(addr) {
 }
 
 
+/*
+ * Old versions of NAPI used to fail to serialize IP addresses, like when
+ * writing out the gateway addresses for the "routes" object. This resulted
+ * in objects being written to Moray based on ipaddr.js's object, and looked
+ * like { "octets": [ 1, 2, 3, 4 ] }.
+ *
+ * Since ipaddr.js was okay accepting these objects back in this form when
+ * fetching from Moray, this went unnoticed until after switching to ip6addr.
+ * We now need to fix them up in the places where we failed to serialize them.
+ */
+function fixupIPAddr(addr) {
+    if (typeof (addr) === 'object' && addr.hasOwnProperty('octets')) {
+        return toIPAddr(octetsToNumber(addr.octets));
+    } else {
+        return toIPAddr(addr);
+    }
+}
+
+
 function ipAddrPlus(addr, summand) {
     var changed = addr.offset(summand);
     if (changed === null) {
@@ -152,6 +195,7 @@ module.exports = {
     aton: addressToNumber,
     bitsToNetmask: bitsToNetmask,
     compareTo: compareTo,
+    fixupIPAddr: fixupIPAddr,
     ipAddrMinus: ipAddrMinus,
     ipAddrPlus: ipAddrPlus,
     isRFC1918: isRFC1918,
-- 
2.21.0

