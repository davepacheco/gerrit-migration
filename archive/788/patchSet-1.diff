From 146644b5b6cea32ba4a844324ab253893d8f815d Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Wed, 26 Oct 2016 21:19:03 +0000
Subject: [PATCH] NAPI-376 Handle old route gateways that weren't properly
 serialized

---
 lib/models/network.js |  4 +++-
 lib/util/ip.js        | 35 +++++++++++++++++++++++++++++++----
 2 files changed, 34 insertions(+), 5 deletions(-)

diff --git a/lib/models/network.js b/lib/models/network.js
index 4d86dfc..edae3bc 100644
--- a/lib/models/network.js
+++ b/lib/models/network.js
@@ -1058,7 +1058,9 @@ function Network(params) {
             } else {
                 key = util_ip.toIPAddr(r).toString();
             }
-            this.params.routes[key] = util_ip.toIPAddr(routes[r]);
+
+            // Fixup old route gateways that didn't get serialized.
+            this.params.routes[key] = util_ip.fixupIPAddr(routes[r]);
         }
     }
 
diff --git a/lib/util/ip.js b/lib/util/ip.js
index 91302e1..867b78c 100644
--- a/lib/util/ip.js
+++ b/lib/util/ip.js
@@ -21,6 +21,18 @@ var net = require('net');
 var MAX_IPV4 = 4294967295;
 
 
+/*
+ * Converts an array of four octets into a long representation
+ * of an IPv4 address.
+ */
+function octetsToNumber(octets) {
+    return Number(octets[0]) * 16777216 +
+        Number(octets[1]) * 65536 +
+        Number(octets[2]) * 256 +
+        Number(octets[3]);
+}
+
+
 /*
  * Converts a dotted IPv4 address (eg: 1.2.3.4) to its integer value
  */
@@ -30,10 +42,11 @@ function addressToNumber(addr) {
     }
 
     var octets = addr.split('.');
-    return Number(octets[0]) * 16777216 +
-        Number(octets[1]) * 65536 +
-        Number(octets[2]) * 256 +
-        Number(octets[3]);
+    if (octets.length !== 4) {
+        return null;
+    }
+
+    return octetsToNumber(octets);
 }
 
 
@@ -55,6 +68,19 @@ function toIPAddr(addr) {
 }
 
 
+/*
+ * If we have an old ipaddr.js object that wasn't properly serialized to a
+ * string before being written to Moray, we check for it and fix it up here.
+ */
+function fixupIPAddr(addr) {
+    if (typeof (addr) === 'object' && addr.hasOwnProperty('octets')) {
+        return toIPAddr(octetsToNumber(addr.octets));
+    } else {
+        return toIPAddr(addr);
+    }
+}
+
+
 function ipAddrPlus(addr, summand) {
     var changed = addr.offset(summand);
     if (changed === null) {
@@ -152,6 +178,7 @@ module.exports = {
     aton: addressToNumber,
     bitsToNetmask: bitsToNetmask,
     compareTo: compareTo,
+    fixupIPAddr: fixupIPAddr,
     ipAddrMinus: ipAddrMinus,
     ipAddrPlus: ipAddrPlus,
     isRFC1918: isRFC1918,
-- 
2.21.0

