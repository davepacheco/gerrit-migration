From 2a5a9383cce78cddadc9864195fbe8e528684002 Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex.wilson@joyent.com>
Date: Tue, 29 Nov 2016 07:51:44 -0500
Subject: [PATCH] joyent/node-cueball#54 skip AAAA lookups on machines with no
 v6 address

---
 lib/resolver.js  | 28 ++++++++++++++++---
 test/dns.test.js | 70 ++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 95 insertions(+), 3 deletions(-)

diff --git a/lib/resolver.js b/lib/resolver.js
index 3f1e625..6e64563 100644
--- a/lib/resolver.js
+++ b/lib/resolver.js
@@ -34,6 +34,7 @@ const mod_ipaddr = require('ipaddr.js');
 const mod_fs = require('fs');
 const mod_crypto = require('crypto');
 const mod_verror = require('verror');
+const mod_os = require('os');
 
 const FSM = mod_mooremachine.FSM;
 const EventEmitter = mod_events.EventEmitter;
@@ -464,10 +465,31 @@ CueBallDNSResolver.prototype.state_srv_error = function (S) {
 	}
 };
 
+const NIC_CACHE_TTL = 60000;
+var nicCache = undefined;
+
 CueBallDNSResolver.prototype.state_aaaa = function (S) {
-	this.r_srvRem = this.r_srvs.slice();
-	this.r_nextV6 = undefined;
-	S.gotoState('aaaa_next');
+	var now = new Date();
+	var last = CueBallDNSResolver._nicCacheUpdated;
+	if (last === undefined || now.getTime() - last > NIC_CACHE_TTL) {
+		nicCache = mod_os.networkInterfaces();
+		CueBallDNSResolver._nicCacheUpdated = now.getTime();
+	}
+	var nics = nicCache;
+	var haveV6 = false;
+	Object.keys(nics).forEach(function (k) {
+		nics[k].forEach(function (addr) {
+			if (addr.family === 'IPv6' && addr.address !== '::1')
+				haveV6 = true;
+		});
+	});
+	if (haveV6) {
+		this.r_srvRem = this.r_srvs.slice();
+		this.r_nextV6 = undefined;
+		S.gotoState('aaaa_next');
+	} else {
+		S.gotoState('a');
+	}
 };
 
 CueBallDNSResolver.prototype.state_aaaa_next = function (S) {
diff --git a/test/dns.test.js b/test/dns.test.js
index e98b746..1b7131f 100644
--- a/test/dns.test.js
+++ b/test/dns.test.js
@@ -17,6 +17,7 @@ const mod_resolver = require('../lib/resolver');
 const mod_nsc = require('mname-client');
 const mod_mname = require('mname');
 const mod_proto = mod_mname.Protocol;
+const mod_os = require('os');
 
 var sandbox;
 var nsclients = [];
@@ -25,6 +26,27 @@ var recovery = {
 	default: {timeout: 1000, retries: 3, delay: 100 }
 };
 
+var INT_NO_V6 = {
+	'lo0': [
+		{ address: '::1', family: 'IPv6' }
+	],
+	'foo0': [
+		{ address: '1.2.3.4', family: 'IPv4' }
+	]
+};
+
+var INT_V6 = {
+	'lo0': [
+		{ address: '::1', family: 'IPv6' }
+	],
+	'foo0': [
+		{ address: '1.2.3.4', family: 'IPv4' },
+		{ address: 'fe80::1:2:3:4', family: 'IPv6' }
+	]
+};
+
+var interfaces = INT_V6;
+
 function emptyPacket() {
 	return ({
 		header: {
@@ -186,6 +208,9 @@ DummyDnsClient.prototype.lookup = function (options, cb) {
 mod_tape.test('setup sandbox', function (t) {
 	sandbox = mod_sinon.sandbox.create();
 	sandbox.stub(mod_nsc, 'DnsClient', DummyDnsClient);
+	sandbox.stub(mod_os, 'networkInterfaces', function () {
+		return (interfaces);
+	});
 	t.end();
 });
 
@@ -411,6 +436,51 @@ mod_tape.test('short TTL', function (t) {
 	res.start();
 });
 
+mod_tape.test('short-cut on non-ipv6', function (t) {
+	interfaces = INT_NO_V6;
+	mod_resolver.DNSResolver._nicCacheUpdated = undefined;
+	var res = new mod_resolver.DNSResolver({
+		domain: 'srv.ok',
+		service: '_foo._tcp',
+		defaultPort: 112,
+		resolvers: ['1.2.3.4'],
+		recovery: recovery
+	});
+	var backends = [];
+	res.on('added', function (key, backend) {
+		backends.push(backend);
+	});
+	res.on('stateChanged', function (st) {
+		if (st === 'failed') {
+			t.fail();
+			res.stop();
+			t.end();
+		} else if (st === 'running') {
+			t.equal(backends.length, 1);
+			t.strictEqual(backends[0].address, '1.2.3.4');
+			t.strictEqual(backends[0].port, 111);
+
+			t.equal(nsclients.length, 1);
+			var history = nsclients[0].history.map(function (f) {
+				return (f.domain + '/' + f.type);
+			});
+			t.deepEqual(history, [
+				'_foo._tcp.srv.ok/SRV',
+				'a.ok/A',
+				'aaaa.ok/A',
+				'a.ok/A'
+			]);
+
+			nsclients[0].history = [];
+
+			res.stop();
+			interfaces = INT_V6;
+			t.end();
+		}
+	});
+	res.start();
+});
+
 mod_tape.test('cleanup sandbox', function (t) {
 	sandbox.restore();
 	t.end();
-- 
2.21.0

