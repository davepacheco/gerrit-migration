commit e97706db5624b5e9746d6b84aac3bc7e46f87cce (refs/changes/35/435/1)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2016-09-08T18:39:36+00:00 (3 years, 1 month ago)
    
    FWAPI-250 fwadm(1M) fails to flush logs correctly

diff --git a/src/fw/lib/util/log.js b/src/fw/lib/util/log.js
index f652f59e..ff1b52ca 100644
--- a/src/fw/lib/util/log.js
+++ b/src/fw/lib/util/log.js
@@ -211,13 +211,19 @@ OpenOnErrorFileStream.prototype.end1 = function () {
 
 // used until first ERROR or higher, then opens file and ensures future writes
 // go to .write2()
-OpenOnErrorFileStream.prototype.write1 = function (rec) {
+OpenOnErrorFileStream.prototype.write1 = function (rec, cb) {
+    var ret;
     if (rec.level >= bunyan.ERROR || this.log_to_file) {
         this._startWriting(bunyan.TRACE, rec);
-        return this.write(rec);
+        ret = this.write(rec, cb);
     } else {
-        return this.ringbuffer.write(rec);
+        ret = this.ringbuffer.write(rec);
+        if (cb) {
+            cb();
+        }
     }
+
+    return ret;
 };
 
 
@@ -419,7 +425,8 @@ function finishErr(log, err, msg) {
  */
 function flushLogs(logs, callback) {
     if (!logs) {
-        return callback();
+        callback();
+        return;
     }
 
     var streams = [];
@@ -428,7 +435,8 @@ function flushLogs(logs, callback) {
     }
 
     if (logs.length === 0) {
-        return callback();
+        callback();
+        return;
     }
 
     logs.forEach(function (log) {
@@ -439,29 +447,22 @@ function flushLogs(logs, callback) {
         streams = streams.concat(log.streams);
     });
 
-    var toClose = streams.length;
-    var closed = 0;
-
-    function _doneClose() {
-        closed++;
-        if (closed == toClose) {
-            return callback();
-        }
-    }
-
-    streams.forEach(function (str) {
-        if (!str || !str.stream) {
-            return _doneClose();
-        }
-
-        str.stream.once('drain', function () {
-            _doneClose();
-        });
+    vasync.forEachParallel({
+        inputs: streams,
+        func: function (str, cb) {
+            if (!str || !str.stream) {
+                cb();
+                return;
+            }
 
-        if (str.stream.write('')) {
-            _doneClose();
+            if (str.stream instanceof fs.WriteStream
+                || str.stream instanceof OpenOnErrorFileStream) {
+                str.stream.write('', cb);
+            } else {
+                cb();
+            }
         }
-    });
+    }, callback);
 }
 
 
