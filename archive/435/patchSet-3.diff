From 8585edcbc12f231289f751b1567e206b1991c49a Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Fri, 2 Sep 2016 23:22:44 +0000
Subject: [PATCH] FWAPI-250 fwadm(1M) fails to flush logs correctly Reviewed
 by: Trent Mick <trent.mick@joyent.com>

---
 src/fw/lib/util/log.js | 64 ++++++++++++++++++++++--------------------
 1 file changed, 34 insertions(+), 30 deletions(-)

diff --git a/src/fw/lib/util/log.js b/src/fw/lib/util/log.js
index f652f59e..11bed3fc 100644
--- a/src/fw/lib/util/log.js
+++ b/src/fw/lib/util/log.js
@@ -20,7 +20,7 @@
  *
  * CDDL HEADER END
  *
- * Copyright (c) 2014, Joyent, Inc. All rights reserved.
+ * Copyright 2016, Joyent, Inc. All rights reserved.
  *
  *
  * fwadm: logging and associated utils
@@ -211,20 +211,29 @@ OpenOnErrorFileStream.prototype.end1 = function () {
 
 // used until first ERROR or higher, then opens file and ensures future writes
 // go to .write2()
-OpenOnErrorFileStream.prototype.write1 = function (rec) {
+OpenOnErrorFileStream.prototype.write1 = function (rec, cb) {
+    var ret;
     if (rec.level >= bunyan.ERROR || this.log_to_file) {
         this._startWriting(bunyan.TRACE, rec);
-        return this.write(rec);
+        ret = this.write(rec, cb);
     } else {
-        return this.ringbuffer.write(rec);
+        ret = this.ringbuffer.write(rec);
+        if (cb) {
+            cb();
+        }
     }
+
+    return ret;
 };
 
 
 // used when writing to file
-OpenOnErrorFileStream.prototype.write2 = function (rec) {
-    var str = JSON.stringify(rec, bunyan.safeCycles()) + '\n';
-    this.stream.write(str);
+OpenOnErrorFileStream.prototype.write2 = function (rec, cb) {
+    var str = rec;
+    if (typeof (str) !== 'string') {
+        str = JSON.stringify(rec, bunyan.safeCycles()) + '\n';
+    }
+    this.stream.write(str, cb);
 };
 
 
@@ -419,7 +428,8 @@ function finishErr(log, err, msg) {
  */
 function flushLogs(logs, callback) {
     if (!logs) {
-        return callback();
+        callback();
+        return;
     }
 
     var streams = [];
@@ -428,7 +438,8 @@ function flushLogs(logs, callback) {
     }
 
     if (logs.length === 0) {
-        return callback();
+        callback();
+        return;
     }
 
     logs.forEach(function (log) {
@@ -439,29 +450,22 @@ function flushLogs(logs, callback) {
         streams = streams.concat(log.streams);
     });
 
-    var toClose = streams.length;
-    var closed = 0;
-
-    function _doneClose() {
-        closed++;
-        if (closed == toClose) {
-            return callback();
-        }
-    }
-
-    streams.forEach(function (str) {
-        if (!str || !str.stream) {
-            return _doneClose();
-        }
-
-        str.stream.once('drain', function () {
-            _doneClose();
-        });
+    vasync.forEachParallel({
+        inputs: streams,
+        func: function (str, cb) {
+            if (!str || !str.stream) {
+                cb();
+                return;
+            }
 
-        if (str.stream.write('')) {
-            _doneClose();
+            if (str.stream instanceof fs.WriteStream
+                || str.stream instanceof OpenOnErrorFileStream) {
+                str.stream.write('', cb);
+            } else {
+                cb();
+            }
         }
-    });
+    }, callback);
 }
 
 
-- 
2.21.0

