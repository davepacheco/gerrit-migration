{"project":"joyent/node-libmanta","branch":"master","id":"I6cb76afdc524143de0fde7ff10093d5f06270d4b","number":"2710","subject":"MANTA-3438 Muskie startup should not block on Moray.init","owner":{"name":"Kelly McLaughlin","email":"kelly.mclaughlin@joyent.com","username":"kellymclaughlin"},"url":"https://cr.joyent.us/2710","commitMessage":"MANTA-3438 Muskie startup should not block on Moray.init\n","createdOn":1507070920,"lastUpdated":1507242697,"open":false,"status":"ABANDONED","comments":[{"timestamp":1507070920,"reviewer":{"name":"Kelly McLaughlin","email":"kelly.mclaughlin@joyent.com","username":"kellymclaughlin"},"message":"Uploaded patch set 1."},{"timestamp":1507070922,"reviewer":{"name":"Kelly McLaughlin","email":"kelly.mclaughlin@joyent.com","username":"kellymclaughlin"},"message":"Patch Set 1:\n\nNew commits:\n    \n    commit 04ed0f2d09141b00543f01a8a79b1061d87bfd67\n    \n    MANTA-3438: Muskie startup should not block on Moray.init\n    Use postgres transactional advisory locks to avoid concurrent execution of\n    CREATE FUNCTION statements for the same function that result in \u0027tuple\n    concurrently updated\u0027 errors."},{"timestamp":1507070946,"reviewer":{"name":"Joyent Automation","username":"joyent-automation"},"message":"Patch Set 1: CI-Testing+1\n\n\"make check\" passed ok"},{"timestamp":1507075916,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Patch Set 1:\n\n(3 comments)\n\nThanks!\n\nWe only allow one change per ticket, so you\u0027ll probably want to file a new ticket for either this change or #2709."},{"timestamp":1507140104,"reviewer":{"name":"Kelly McLaughlin","email":"kelly.mclaughlin@joyent.com","username":"kellymclaughlin"},"message":"Patch Set 1:\n\n\u003e (3 comments)\n \u003e \n \u003e Thanks!\n \u003e \n \u003e We only allow one change per ticket, so you\u0027ll probably want to\n \u003e file a new ticket for either this change or #2709.\n\nOh ok, then I might just open two issues for each and let the original just serve as the umbrella for them all. Thanks for the heads up."},{"timestamp":1507140939,"reviewer":{"name":"Kelly McLaughlin","email":"kelly.mclaughlin@joyent.com","username":"kellymclaughlin"},"message":"Patch Set 1:\n\n(2 comments)"},{"timestamp":1507144134,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Patch Set 1:\n\n(2 comments)"},{"timestamp":1507150544,"reviewer":{"name":"Kelly McLaughlin","email":"kelly.mclaughlin@joyent.com","username":"kellymclaughlin"},"message":"Patch Set 1:\n\n(1 comment)"},{"timestamp":1507151258,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Patch Set 1:\n\n(1 comment)"},{"timestamp":1507153569,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Patch Set 1:\n\nI should have added: using a constant is just for simplicity, but I don\u0027t object to using an md5sum instead.  The thing I\u0027m more worried about is making sure we restrict our use of the available key space.  What about taking the md5sum, mod\u0027ing by 10,000, and adding 10 billion? (Those numbers are mostly made up, but I suggest 10B so that not near a boundary that other people are likely to pick.)"},{"timestamp":1507242697,"reviewer":{"name":"Kelly McLaughlin","email":"kelly.mclaughlin@joyent.com","username":"kellymclaughlin"},"message":"Abandoned\n\nReplacing this CR with https://cr.joyent.us/#/c/2733 that references the specific issue broken out for this change."}],"currentPatchSet":{"number":"1","revision":"6cb76afdc524143de0fde7ff10093d5f06270d4b","parents":["f9d436c6978c30d48372784f2fe973cc565df24d"],"ref":"refs/changes/10/2710/1","uploader":{"name":"Kelly McLaughlin","email":"kelly.mclaughlin@joyent.com","username":"kellymclaughlin"},"createdOn":1507070920,"author":{"name":"Kelly McLaughlin","email":"kelly.mclaughlin@joyent.com","username":"kellymclaughlin"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1507070946,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"comments":[{"file":"lib/trigger_dircount.plpgsql","line":44,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"This approach seems good.  I\u0027m just not sure about the key.  It seems like this algorithm causes us to use the entire key space and if anything else used advisory locks (ever), we might conflict.  What about just carving out a specific reserved value and always using that here?  We\u0027d potentially conflict with a newer version of this function, but that might be desirable, and if not, the new implementation could always add a second reserved value."},{"file":"lib/trigger_dircount.plpgsql","line":44,"reviewer":{"name":"Kelly McLaughlin","email":"kelly.mclaughlin@joyent.com","username":"kellymclaughlin"},"message":"I\u0027m not sure I follow about the keyspace concern. My idea was to convert the function name to an integer value using an MD5 digest of the function name. Then if the name changes, the lock key will also change based on the new version of the function, but the key value is a constant value per version of each function. We could just use hardcoded reserved integer values, but I was hoping this way would have a greater chance of being updated as the function is and not just forgotten about and also reduce the chances of accidental duplication or reuse of keys."},{"file":"lib/trigger_dircount.plpgsql","line":44,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"The bigger problem is that the keyspace is global to the whole database, as I understand it.  So if anything else in Manta ever wanted to use advisory locks for everything, there\u0027s no set of keys that it could use that wouldn\u0027t conflict with this lock.  (For example, if the implementation of Moray started using advisory locks for some totally separate purpose, it could wind up using the same lock number that we\u0027re using here.)\n\nBut also, it\u0027s not clear to me that if the function changes (e.g., we ship count_manta_directories_v4) that we _want_ that to use a different lock.  I don\u0027t think we can know now whether we want it to be the same lock or not.  But if we ever add a new version, at that time, we can decide if we want it to be the same lock and then update this implementation accordingly."},{"file":"lib/trigger_dircount.plpgsql","line":44,"reviewer":{"name":"Kelly McLaughlin","email":"kelly.mclaughlin@joyent.com","username":"kellymclaughlin"},"message":"It is true that another use case could accidentally select the same key value, though if we adopted the same practice to derive the keys any time we want to use advisory locks then it seems very unlikely we would have a collision. But really any method of choosing a key is susceptible to this problem. We could certainly solve it by establishing some form of organization-wide lock on key values like a wiki page or git repo where you reserve an advisory key for use when you begin implementing a new lock. This only works though as long as everyone is diligent about updating it over time. \n\nAs for whether the key should change if the function changes I was thinking in terms of canary deployments of a new muskie version or a rolling upgrade situation where we have muskie zones running on multiple versions for some period of time. If we\u0027re adding count_manta_directories_v4 for example there is no concurrency issue with adding functions named count_manta_directories_v3 and count_manta_directories_v4 so I wouldn\u0027t want to create unnecessary locking in a situation where muskie instances with different function versions were restarting simultaneously. It\u0027s likely a situation we won\u0027t run into all that often so maybe it\u0027s not a big deal either way, but that was my thought process behind it."},{"file":"lib/trigger_dircount.plpgsql","line":44,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"It\u0027s true that the key space problem always exists.  However, if we at least segment off a piece of the keyspace now, then we could later do any of the things you mentioned to avoid conflicts in the future.  If today we just md5 the function\u0027s name and say that the lock identifier is not the responsibility of someone modifying this code in the future, then I don\u0027t think there\u0027s any way to robustly avoid a conflict with other advisory locks in the future.  It feels like it has to be the responsibility of someone modifying this code to determine what the scope of the lock should be."},{"file":"lib/trigger_update.plpgsql","line":142,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Same note as in the other file."},{"file":"lib/trigger_update.plpgsql","line":160,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Would you mind mentioning the restyling in the ticket?\n\n(Sorry for the previous inconsistency with the other plpgsql file.)"},{"file":"lib/trigger_update.plpgsql","line":160,"reviewer":{"name":"Kelly McLaughlin","email":"kelly.mclaughlin@joyent.com","username":"kellymclaughlin"},"message":"Hah, my emacs before-save hooks snuck this by me as well, but if it brings it consistent with other files I\u0027ll leave it and will comment in the new ticket I open for this."},{"file":"lib/trigger_update.plpgsql","line":160,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Either way works for me."}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"lib/trigger_dircount.plpgsql","type":"MODIFIED","insertions":22,"deletions":-17},{"file":"lib/trigger_update.plpgsql","type":"MODIFIED","insertions":76,"deletions":-58}],"sizeInsertions":98,"sizeDeletions":-75},"patchSets":[{"number":"1","revision":"6cb76afdc524143de0fde7ff10093d5f06270d4b","parents":["f9d436c6978c30d48372784f2fe973cc565df24d"],"ref":"refs/changes/10/2710/1","uploader":{"name":"Kelly McLaughlin","email":"kelly.mclaughlin@joyent.com","username":"kellymclaughlin"},"createdOn":1507070920,"author":{"name":"Kelly McLaughlin","email":"kelly.mclaughlin@joyent.com","username":"kellymclaughlin"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"CI-Testing","description":"CI-Testing","value":"1","grantedOn":1507070946,"by":{"name":"Joyent Automation","username":"joyent-automation"}}],"comments":[{"file":"lib/trigger_dircount.plpgsql","line":44,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"This approach seems good.  I\u0027m just not sure about the key.  It seems like this algorithm causes us to use the entire key space and if anything else used advisory locks (ever), we might conflict.  What about just carving out a specific reserved value and always using that here?  We\u0027d potentially conflict with a newer version of this function, but that might be desirable, and if not, the new implementation could always add a second reserved value."},{"file":"lib/trigger_dircount.plpgsql","line":44,"reviewer":{"name":"Kelly McLaughlin","email":"kelly.mclaughlin@joyent.com","username":"kellymclaughlin"},"message":"I\u0027m not sure I follow about the keyspace concern. My idea was to convert the function name to an integer value using an MD5 digest of the function name. Then if the name changes, the lock key will also change based on the new version of the function, but the key value is a constant value per version of each function. We could just use hardcoded reserved integer values, but I was hoping this way would have a greater chance of being updated as the function is and not just forgotten about and also reduce the chances of accidental duplication or reuse of keys."},{"file":"lib/trigger_dircount.plpgsql","line":44,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"The bigger problem is that the keyspace is global to the whole database, as I understand it.  So if anything else in Manta ever wanted to use advisory locks for everything, there\u0027s no set of keys that it could use that wouldn\u0027t conflict with this lock.  (For example, if the implementation of Moray started using advisory locks for some totally separate purpose, it could wind up using the same lock number that we\u0027re using here.)\n\nBut also, it\u0027s not clear to me that if the function changes (e.g., we ship count_manta_directories_v4) that we _want_ that to use a different lock.  I don\u0027t think we can know now whether we want it to be the same lock or not.  But if we ever add a new version, at that time, we can decide if we want it to be the same lock and then update this implementation accordingly."},{"file":"lib/trigger_dircount.plpgsql","line":44,"reviewer":{"name":"Kelly McLaughlin","email":"kelly.mclaughlin@joyent.com","username":"kellymclaughlin"},"message":"It is true that another use case could accidentally select the same key value, though if we adopted the same practice to derive the keys any time we want to use advisory locks then it seems very unlikely we would have a collision. But really any method of choosing a key is susceptible to this problem. We could certainly solve it by establishing some form of organization-wide lock on key values like a wiki page or git repo where you reserve an advisory key for use when you begin implementing a new lock. This only works though as long as everyone is diligent about updating it over time. \n\nAs for whether the key should change if the function changes I was thinking in terms of canary deployments of a new muskie version or a rolling upgrade situation where we have muskie zones running on multiple versions for some period of time. If we\u0027re adding count_manta_directories_v4 for example there is no concurrency issue with adding functions named count_manta_directories_v3 and count_manta_directories_v4 so I wouldn\u0027t want to create unnecessary locking in a situation where muskie instances with different function versions were restarting simultaneously. It\u0027s likely a situation we won\u0027t run into all that often so maybe it\u0027s not a big deal either way, but that was my thought process behind it."},{"file":"lib/trigger_dircount.plpgsql","line":44,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"It\u0027s true that the key space problem always exists.  However, if we at least segment off a piece of the keyspace now, then we could later do any of the things you mentioned to avoid conflicts in the future.  If today we just md5 the function\u0027s name and say that the lock identifier is not the responsibility of someone modifying this code in the future, then I don\u0027t think there\u0027s any way to robustly avoid a conflict with other advisory locks in the future.  It feels like it has to be the responsibility of someone modifying this code to determine what the scope of the lock should be."},{"file":"lib/trigger_update.plpgsql","line":142,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Same note as in the other file."},{"file":"lib/trigger_update.plpgsql","line":160,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Would you mind mentioning the restyling in the ticket?\n\n(Sorry for the previous inconsistency with the other plpgsql file.)"},{"file":"lib/trigger_update.plpgsql","line":160,"reviewer":{"name":"Kelly McLaughlin","email":"kelly.mclaughlin@joyent.com","username":"kellymclaughlin"},"message":"Hah, my emacs before-save hooks snuck this by me as well, but if it brings it consistent with other files I\u0027ll leave it and will comment in the new ticket I open for this."},{"file":"lib/trigger_update.plpgsql","line":160,"reviewer":{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},"message":"Either way works for me."}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"lib/trigger_dircount.plpgsql","type":"MODIFIED","insertions":22,"deletions":-17},{"file":"lib/trigger_update.plpgsql","type":"MODIFIED","insertions":76,"deletions":-58}],"sizeInsertions":98,"sizeDeletions":-75}],"allReviewers":[{"name":"David Pacheco","email":"dap@joyent.com","username":"davepacheco"},{"name":"Kelly McLaughlin","email":"kelly.mclaughlin@joyent.com","username":"kellymclaughlin"},{"name":"Joyent Automation","username":"joyent-automation"}]}