From 0d857afdcca13355f54abaf6bf05e8b473afa69f Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Mon, 2 Oct 2017 19:25:22 +0200
Subject: [PATCH] SAPI-291 Update moray-client to latest

---
 etc/config.coal.json                 |  18 ++-
 lib/server/attributes.js             |  33 ++--
 lib/server/endpoints/applications.js |  45 +++---
 lib/server/endpoints/history.js      |  14 +-
 lib/server/endpoints/instances.js    |  15 +-
 lib/server/endpoints/manifests.js    |  14 +-
 lib/server/endpoints/services.js     |  21 +--
 lib/server/model.js                  | 215 +++++++++++++++------------
 lib/server/stor/moray.js             | 167 +++++++++++----------
 lib/server/stor/moray_local.js       |  11 +-
 package.json                         |   6 +-
 sapi_manifests/sapi/template         |   6 +-
 12 files changed, 312 insertions(+), 253 deletions(-)

diff --git a/etc/config.coal.json b/etc/config.coal.json
index ca94146..4195c64 100644
--- a/etc/config.coal.json
+++ b/etc/config.coal.json
@@ -6,16 +6,24 @@
 	"mode": "proto",
 	"datacenter_name": "coal",
 	"moray": {
-		"host": "10.99.99.13",
-		"port": 2020
+		"srvDomain": "moray.coal.joyent.us",
+		"cueballOptions": {
+			"resolvers": ["binder.coal.joyent.us"]
+		}
+	},
+	"cnapi": {
+		"url": "http://cnapi.coal.joyent.us"
 	},
 	"vmapi": {
-		"url": "http://10.99.99.23"
+		"url": "http://vmapi.coal.joyent.us"
 	},
 	"napi": {
-		"url": "http://10.99.99.10"
+		"url": "http://napi.coal.joyent.us"
 	},
 	"imgapi": {
-		"url": "http://10.99.99.17"
+		"url": "http://imgapi.coal.joyent.us"
+	},
+	"papi": {
+		"url": "http://papi.coal.joyent.us"
 	}
 }
diff --git a/lib/server/attributes.js b/lib/server/attributes.js
index 856fd33..7231f70 100644
--- a/lib/server/attributes.js
+++ b/lib/server/attributes.js
@@ -28,6 +28,7 @@ var assert = require('assert-plus');
 var async = require('async');
 var util = require('util');
 var vasync = require('vasync');
+var verror = require('verror');
 
 var sprintf = require('util').format;
 
@@ -285,7 +286,8 @@ function generateZoneParams(uuid, cb) {
             if (objs.instance.type === 'agent') {
                 log.info('no generateZoneParams for %s, ' +
                     'service type agent', uuid);
-                return (subcb(null, {}));
+                subcb(null, {});
+                return;
             }
 
             var attributes = assembleAttributes(
@@ -310,16 +312,18 @@ function generateZoneParams(uuid, cb) {
             params.customer_metadata =
                 sanitizeMetadata(attributes.metadata);
 
-            if (!params.networks)
-                return (subcb(null, params));
+            if (!params.networks) {
+                subcb(null, params);
+                return;
+            }
 
             resolveNetworks.call(self, params.networks, params.owner_uuid,
                 function (err, uuids) {
-                if (err &&
-                    err.name !== 'UnsupportedOperationError') {
-                    log.error(err, 'failed to resolve ' +
-                        'networks');
-                    return (subcb(err));
+                if (err && !verror.hasCauseWithName(
+                    err, 'UnsupportedOperationError')) {
+                        log.error(err, 'failed to resolve networks');
+                        subcb(err);
+                        return;
                 }
 
                 /*
@@ -328,16 +332,17 @@ function generateZoneParams(uuid, cb) {
                  * UUIDs.  In proto mode, the zone won't
                  * actually be created.
                  */
-                if (err &&
-                    err.name === 'UnsupportedOperationError') {
-                    assert.ok(self.model.proto_mode);
-                    return (subcb(null, params));
+                if (err && verror.hasCauseWithName(
+                    err, 'UnsupportedOperationError')) {
+                        assert.ok(self.model.proto_mode);
+                        subcb(null, params);
+                        return;
                 }
 
                 delete params.networks;
                 params.networks = uuids;
 
-                return (subcb(null, params));
+                subcb(null, params);
             });
         }
     ], cb);
@@ -437,7 +442,7 @@ function validParams(params, cb) {
     resolveNetworks.call(self, params.networks, params.owner_uuid,
         function (err) {
         if (err &&
-            err.name === 'UnsupportedOperationError' &&
+            verror.hasCauseWithName(err, 'UnsupportedOperationError') &&
             self.model.proto_mode) {
             log.info('skipping validation of ' +
                 'network names in proto mode');
diff --git a/lib/server/endpoints/applications.js b/lib/server/endpoints/applications.js
index 9253b5c..b52dd5e 100644
--- a/lib/server/endpoints/applications.js
+++ b/lib/server/endpoints/applications.js
@@ -5,15 +5,15 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
  * lib/endpoints/applications.js: SAPI endpoints to manage applications
  */
 
-var assert = require('assert-plus');
 var restify = require('restify');
+var verror = require('verror');
 
 var validateParams =
     require('./validation').validateParams;
@@ -49,14 +49,14 @@ Applications.create = function (req, res, next) {
     model.createApplication(params, function (err, app) {
         if (err) {
             model.log.error(err, 'failed to create application');
-            return (next(err));
+            next(err);
+            return;
         }
 
         res.send(app);
-        return (next());
+        next();
+        return;
     });
-
-    return (null);
 };
 
 Applications.list = function (req, res, next) {
@@ -75,11 +75,12 @@ Applications.list = function (req, res, next) {
     model.listApplications(filters, opts, function (err, apps) {
         if (err) {
             model.log.error(err, 'failed to list applications');
-            return (next(err));
+            next(err);
+            return;
         }
 
         res.send(apps);
-        return (next());
+        next();
     });
 };
 
@@ -87,10 +88,12 @@ Applications.get = function (req, res, next) {
     var model = this.model;
 
     model.getApplication(req.params.uuid, function (err, app) {
-        if (err)
-            return (next(err));
+        if (err) {
+            next(err);
+            return;
+        }
         res.send(app);
-        return (next());
+        next();
     });
 };
 
@@ -119,36 +122,38 @@ Applications.update = function (req, res, next) {
         action !== 'replace' &&
         action !== 'delete') {
         model.log.error({ action: action }, 'invalid action');
-        return (next(new restify.InvalidArgumentError()));
+        next(new restify.InvalidArgumentError());
+        return;
     }
 
     model.updateApplication(uuid, changes, action, function (err, app) {
         if (err) {
             model.log.error(err, 'failed to update application');
-            return (next(err));
+            next(err);
+            return;
         }
 
         res.send(app);
-        return (next());
+        next();
     });
-
-    return (null);
 };
 
 Applications.del = function (req, res, next) {
     var model = this.model;
 
     model.delApplication(req.params.uuid, function (err) {
-        if (err && err.name === 'ObjectNotFoundError') {
+        if (err && verror.hasCauseWithName(err, 'ObjectNotFoundError')) {
             res.send(404);
-            return (next());
+            next();
+            return;
         } else if (err) {
             model.log.error(err, 'failed to delete application');
-            return (next(err));
+            next(err);
+            return;
         }
 
         res.send(204);
-        return (next());
+        next();
     });
 };
 
diff --git a/lib/server/endpoints/history.js b/lib/server/endpoints/history.js
index c50c0e1..2ee9d98 100644
--- a/lib/server/endpoints/history.js
+++ b/lib/server/endpoints/history.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -13,8 +13,8 @@
  */
 
 var util = require('util');
-var assert = require('assert-plus');
 var restify = require('restify');
+var verror = require('verror');
 
 var validateParams =
     require('./validation').validateParams;
@@ -132,16 +132,18 @@ History.del = function (req, res, next) {
     var model = this.model;
 
     model.delHistory(req.params.uuid, function (err) {
-        if (err && err.name === 'ObjectNotFoundError') {
+        if (err && verror.hasCauseWithName(err, 'ObjectNotFoundError')) {
             res.send(404);
-            return (next());
+            next();
+            return;
         } else if (err) {
             model.log.error(err, 'failed to delete history item');
-            return (next(err));
+            next(err);
+            return;
         }
 
         res.send(204);
-        return (next());
+        next();
     });
 };
 
diff --git a/lib/server/endpoints/instances.js b/lib/server/endpoints/instances.js
index b479630..4f9cf43 100644
--- a/lib/server/endpoints/instances.js
+++ b/lib/server/endpoints/instances.js
@@ -5,16 +5,15 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
  * lib/server/endpoints/instances.js: SAPI endpoints to manage instances
  */
 
-var assert = require('assert-plus');
-var async = require('async');
 var restify = require('restify');
+var verror = require('verror');
 
 var semverGter = require('../../common/util').semverGter;
 var validateParams =
@@ -251,16 +250,18 @@ Instances.del = function (req, res, next) {
     req.connection.setTimeout(10 * 60 * 1000);
 
     model.delInstance(req.params.uuid, function (err) {
-        if (err && err.name === 'ObjectNotFoundError') {
+        if (err && verror.hasCauseWithName(err, 'ObjectNotFoundError')) {
             res.send(404);
-            return (next());
+            next();
+            return;
         } else if (err) {
             model.log.error(err, 'failed to delete instance');
-            return (next(err));
+            next(err);
+            return;
         }
 
         res.send(204);
-        return (next());
+        next();
     });
 };
 
diff --git a/lib/server/endpoints/manifests.js b/lib/server/endpoints/manifests.js
index 321ca68..6a2d62c 100644
--- a/lib/server/endpoints/manifests.js
+++ b/lib/server/endpoints/manifests.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -13,9 +13,9 @@
  *     manifests
  */
 
-var assert = require('assert-plus');
 var restify = require('restify');
 var semver = require('semver');
+var verror = require('verror');
 
 var validateParams =
     require('./validation').validateParams;
@@ -100,16 +100,18 @@ Manifests.del = function (req, res, next) {
     var model = this.model;
 
     model.delManifest(req.params.uuid, function (err) {
-        if (err && err.name === 'ObjectNotFoundError') {
+        if (err && verror.hasCauseWithName(err, 'ObjectNotFoundError')) {
             res.send(404);
-            return (next());
+            next();
+            return;
         } else if (err) {
             model.log.error(err, 'failed to delete manifest');
-            return (next(err));
+            next(err);
+            return;
         }
 
         res.send(204);
-        return (next());
+        next();
     });
 };
 
diff --git a/lib/server/endpoints/services.js b/lib/server/endpoints/services.js
index f01fa5d..46a6b82 100644
--- a/lib/server/endpoints/services.js
+++ b/lib/server/endpoints/services.js
@@ -5,15 +5,15 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
  * lib/server/endpoints/services.js: SAPI endpoints to manage services
  */
 
-var assert = require('assert-plus');
 var restify = require('restify');
+var verror = require('verror');
 
 var semverGter = require('../../common/util').semverGter;
 var validateParams =
@@ -86,14 +86,13 @@ Services.create = function (req, res, next) {
     model.createService(params, function (err, svc) {
         if (err) {
             model.log.error(err, 'failed to create service');
-            return (next(err));
+            next(err);
+            return;
         }
 
         res.send(serialize(svc, req.getVersion()));
-        return (next());
+        next();
     });
-
-    return (null);
 };
 
 Services.list = function (req, res, next) {
@@ -183,16 +182,18 @@ Services.del = function (req, res, next) {
     var model = this.model;
 
     model.delService(req.params.uuid, function (err) {
-        if (err && err.name === 'ObjectNotFoundError') {
+        if (err && verror.hasCauseWithName(err, 'ObjectNotFoundError')) {
             res.send(404);
-            return (next());
+            next();
+            return;
         } else if (err) {
             model.log.error(err, 'failed to delete service');
-            return (next(err));
+            next(err);
+            return;
         }
 
         res.send(204);
-        return (next());
+        next();
     });
 };
 
diff --git a/lib/server/model.js b/lib/server/model.js
index 05c4e35..c8caeba 100644
--- a/lib/server/model.js
+++ b/lib/server/model.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -15,13 +15,12 @@
 
 var async = require('async');
 var assert = require('assert-plus');
-var fs = require('fs');
-var jsprim = require('jsprim');
 var once = require('once');
 var restify = require('restify');
 var sdc = require('sdc-clients');
 var node_uuid = require('node-uuid');
 var vasync = require('vasync');
+var verror = require('verror');
 
 var Attributes = require('./attributes');
 var VMAPIPlus = require('./vmapiplus');
@@ -60,7 +59,8 @@ function Model(config) {
     assert.object(config.log, 'config.log');
 
     assert.object(config.moray, 'config.moray');
-    assert.string(config.moray.host, 'config.moray.host');
+    assert.optionalString(config.moray.host, 'config.moray.host');
+    assert.optionalString(config.moray.srvDomain, 'config.moray.srvDomain');
 
     assert.object(config.cnapi, 'config.cnapi');
     assert.string(config.cnapi.url, 'config.cnapi.url');
@@ -156,7 +156,8 @@ Model.prototype.initClients = function (cb) {
         function initStor(subcb) {
             if (self.proto_mode) {
                 self.stor = self.local_stor;
-                return (subcb());
+                subcb();
+                return;
             }
             var m = 'Detected moray error on startup.  Most ' +
                 'likely going to serve data from the local ' +
@@ -191,11 +192,12 @@ Model.prototype.initClients = function (cb) {
              * server_uuid from the metadata API.
              */
             var cmd = '/usr/sbin/mdata-get sdc:server_uuid';
-            exec(cmd, function (err, stdout, stderr) {
+            exec(cmd, function mdataGetCb(err, stdout) {
                 if (err) {
                     log.error(err,
                         'failed to get server_uuid');
-                    return (subcb(err));
+                    subcb(err);
+                    return;
                 }
 
                 self.server_uuid = stdout.trim();
@@ -272,7 +274,8 @@ function updateObject(bucket, uuid, change, action, tries, cb) {
                 var m = sprintf(
                     'updateObject failed: no record for bucket %s object %s',
                     bucket, uuid);
-                return (subcb(new Error(m)));
+                subcb(new Error(m));
+                return;
             }
             var obj = self.attributes.applyChange(
                 record.value, change, action);
@@ -284,7 +287,8 @@ function updateObject(bucket, uuid, change, action, tries, cb) {
                 var valid = validateSchema(obj['metadata_schema'],
                     obj['metadata']);
                 if (valid !== null) {
-                    return (subcb(valid));
+                    subcb(valid);
+                    return;
                 }
             }
 
@@ -304,7 +308,7 @@ function updateObject(bucket, uuid, change, action, tries, cb) {
 
             self.stor.putObject(bucket, uuid, obj, opts,
                 function (err) {
-                if (err && err.name === 'EtagConflictError' &&
+                if (err && verror.hasCauseWithName(err, 'EtagConflictError') &&
                     tries > 0) {
                     log.info('put of %s failed with ' +
                         'etag conflict; retrying',
@@ -318,13 +322,14 @@ function updateObject(bucket, uuid, change, action, tries, cb) {
                     setTimeout(updateObject.bind(self,
                         bucket, uuid, change, action,
                         tries - 1, cb), 1000);
-                    return (null);
+                    return;
                 } else if (err) {
                     log.error(err, 'failed to put object');
-                    return (subcb(err));
+                    subcb(err);
+                    return;
                 }
 
-                return (subcb(null));
+                subcb();
             });
         },
         function (subcb) {
@@ -335,12 +340,13 @@ function updateObject(bucket, uuid, change, action, tries, cb) {
     ], function (err, obj) {
         if (err) {
             log.error(err, 'failed to update object');
-            return (cb(err));
+            cb(err);
+            return;
         }
 
         log.debug('updated object %s', uuid);
 
-        return (cb(null, obj));
+        cb(null, obj);
     });
 }
 
@@ -497,10 +503,10 @@ Model.prototype.createApplication = function createApplication(
     }, 'creating application %s', app.uuid);
 
     async.waterfall([
-        function (subcb) {
+        function validateAttrs(subcb) {
             self.attributes.validate(app, options, subcb);
         },
-        function (subcb) {
+        function validateSchemaAndSaveApp(subcb) {
             /*
              * Before we can put a new Application, we must first validate its
              * schema against itself, if it exists.
@@ -510,7 +516,8 @@ Model.prototype.createApplication = function createApplication(
             if ('metadata_schema' in app && 'metadata' in app) {
                 valid = validateSchema(app['metadata_schema'], app['metadata']);
                 if (valid !== null) {
-                    return (subcb(valid));
+                    subcb(valid);
+                    return;
                 }
             }
 
@@ -519,10 +526,11 @@ Model.prototype.createApplication = function createApplication(
                 if (err) {
                     log.error(err, 'failed to put ' +
                         'application %s', app.uuid);
-                    return (subcb(err));
+                    subcb(err);
+                    return;
                 }
 
-                return (subcb(null));
+                subcb(null);
             });
         }
     ], function (err, result) {
@@ -724,14 +732,16 @@ Model.prototype.createInstance = function createInstance(inst, cb) {
     var service;
 
     async.waterfall([
-        function (subcb) {
+        function validateAttrs(subcb) {
             self.attributes.validate(inst, subcb);
         },
-        function (subcb) {
+        function getSvc(subcb) {
             self.getService(inst.service_uuid,
-                    function (err, instService) {
-                        if (err)
-                            return (subcb(err));
+                    function getSvcCb(err, instService) {
+                        if (err) {
+                            subcb(err);
+                            return;
+                        }
 
                         service = instService;
                         /*
@@ -742,23 +752,25 @@ Model.prototype.createInstance = function createInstance(inst, cb) {
                         subcb();
                     });
         },
-        function (subcb) {
+        function createInst(subcb) {
             self.stor.putObject(BUCKETS.instances, inst.uuid, inst,
                 function (err) {
                 if (err) {
                     log.error(err, 'failed to put ' +
                         'instance %s', inst.uuid);
-                    return (subcb(err));
+                    subcb(err);
+                    return;
                 }
 
-                return (subcb(null));
+                subcb();
             });
         },
-        function (subcb) {
+        function deployInst(subcb) {
             if (inst.type === 'agent') {
                 log.info('skipping provision of %s since ' +
                     'instance type is agent', inst.uuid);
-                return (subcb(null));
+                subcb();
+                return;
             }
 
             var opts = {
@@ -854,20 +866,22 @@ Model.prototype.upgradeInstance = function (uuid, image_uuid, cb) {
     var inst;
 
     async.waterfall([
-        function (subcb) {
+        function getInst(subcb) {
             self.getInstance(uuid, function (err, obj) {
-                if (err)
-                    return (subcb(err));
-
+                if (err) {
+                    subcb(err);
+                    return;
+                }
                 inst = obj;
-                return (subcb(null));
+                subcb();
             });
         },
-        function (subcb) {
+        function tearDownInst(subcb) {
             if (inst.type === 'agent') {
                 log.info('skipping teardown of %s since ' +
                     'instance type is agent', uuid);
-                return (subcb(null));
+                subcb();
+                return;
             }
 
             /*
@@ -877,28 +891,31 @@ Model.prototype.upgradeInstance = function (uuid, image_uuid, cb) {
              */
             runTeardownHook.call(self, inst, subcb);
         },
-        function (subcb) {
+        function reprovisionInst(subcb) {
             if (inst.type === 'agent') {
                 log.info('skipping reprovision of %s since ' +
                     'instance type is agent', uuid);
-                return (subcb(null));
+                subcb();
+                return;
             }
 
             if (self.proto_mode) {
                 log.info('in proto mode, not upgrading VM');
-                return (subcb(null, inst));
+                subcb(null, inst);
+                return;
             }
 
             self.vmapiplus.reprovisionVm(uuid, image_uuid,
-                function (err) {
+                function reprovisionCb(err) {
                 if (err) {
                     log.error(err,
                         'failed to reprovision VM %s',
                         uuid);
-                    return (subcb(err));
+                    subcb(err);
+                    return;
                 }
 
-                return (subcb(null, inst));
+                subcb(null, inst);
             });
         }
     ], cb);
@@ -914,57 +931,64 @@ Model.prototype.delInstance = function (uuid, cb) {
     var inst;
 
     async.waterfall([
-        function (subcb) {
+        function getInst(subcb) {
             self.getInstance(uuid, function (err, obj) {
-                if (err)
-                    return (subcb(err));
-
+                if (err) {
+                    subcb(err);
+                    return;
+                }
                 inst = obj;
-                return (subcb(null));
+                subcb();
             });
         },
-        function (subcb) {
+        function runTearDown(subcb) {
             if (inst.type === 'agent') {
                 log.info('skipping teardown of %s since ' +
                     'instance type is agent', uuid);
-                return (subcb(null));
+                subcb();
+                return;
             }
 
             runTeardownHook.call(self, inst, subcb);
         },
-        function (subcb) {
+        function deleteInst(subcb) {
             if (inst.type === 'agent') {
                 log.info('skipping deletion of %s since + ' +
                     'instance type is agent', uuid);
-                return (subcb(null));
+                subcb();
+                return;
             }
 
             if (self.proto_mode) {
                 log.info('in proto mode, no VM to delete');
-                return (subcb(null));
+                subcb();
+                return;
             }
 
-            self.vmapiplus.deleteVm(uuid, function (err) {
+            self.vmapiplus.deleteVm(uuid, function delVmCb(err) {
                 if (err) {
                     log.error(err,
                         'failed to delete VM %s', uuid);
-                    return (subcb(err));
+                    subcb(err);
+                    return;
                 }
 
-                return (subcb(null));
+                subcb();
+                return;
             });
         },
-        function (subcb) {
+        function delObj(subcb) {
             self.stor.delObject(BUCKETS.instances, uuid,
-                function (err) {
+                function delObjCb(err) {
                 if (err) {
                     log.warn(err, 'failed to ' +
                         'delete instance object %s',
                         uuid);
-                    return (subcb(err));
+                    subcb(err);
+                    return;
                 }
 
-                return (subcb(null));
+                subcb();
             });
         }
     ], cb);
@@ -980,37 +1004,40 @@ function runTeardownHook(inst, cb) {
 
     if (self.proto_mode) {
         log.info('in proto mode, no need to run teardown-hook');
-        return (cb(null));
+        cb();
+        return;
     }
 
     var script;
     var server_uuid;
 
     async.waterfall([
-        function (subcb) {
+        function genZoneParams(subcb) {
             self.attributes.generateZoneParams(inst.uuid, subcb);
         },
-        function (params, subcb) {
+        function setTeardownHook(params, subcb) {
             if (!params || !params['teardown-hook']) {
                 log.info('no params[\'teardown-hook\'] ' +
                     ' for instance %s', inst.uuid);
-                return (cb(null));
+                cb();
+                return;
             }
 
             script = params['teardown-hook'];
             subcb();
         },
-        function (subcb) {
-            verifyZoneExists.call(self, inst.uuid,
-                function (err, vm) {
-                if (err)
-                    return (cb(err));
+        function verifyInst(subcb) {
+            verifyZoneExists.call(self, inst.uuid, function (err, vm) {
+                if (err) {
+                    cb(err);
+                    return;
+                }
 
                 server_uuid = vm.server_uuid;
                 subcb();
             });
         },
-        function (subcb) {
+        function execTeardownHook(subcb) {
             script = sprintf('/usr/sbin/zlogin %s "%s"',
                 inst.uuid, script);
 
@@ -1020,7 +1047,7 @@ function runTeardownHook(inst, cb) {
             }, 'running teardown-hook script');
 
             self.cnapi.commandExecute(server_uuid, script,
-                function (suberr) {
+                function cmdExecCb(suberr) {
                 if (suberr) {
                     log.error(suberr, 'failed to execute ' +
                         'command on %s', server_uuid);
@@ -1029,7 +1056,8 @@ function runTeardownHook(inst, cb) {
                         new mod_errors.TeardownHookError(
                         suberr.message);
 
-                    return (subcb(suberr));
+                    subcb(suberr);
+                    return;
                 }
 
                 log.info('executed command on %s', server_uuid);
@@ -1039,8 +1067,6 @@ function runTeardownHook(inst, cb) {
     ], function (err) {
         cb(err);
     });
-
-    return (null);
 }
 
 function deployInstance(inst, opts, cb) {
@@ -1085,26 +1111,27 @@ function verifyZoneExists(uuid, cb) {
     if (self.proto_mode) {
         log.info('skipping verification of %s since in proto mode',
             uuid);
-        return (cb(null, true));
+        cb(null, true);
+        return;
     }
 
     log.info('checking to ensure zone %s exists', uuid);
 
     self.vmapi.getVm({ uuid: uuid }, function (err, vm) {
-        if (err && err.name === 'ResourceNotFoundError') {
+        if (err && verror.hasCauseWithName(err, 'ResourceNotFoundError')) {
             var msg = sprintf('no such zone: %s', uuid);
             log.warn(msg);
-            return (cb(new restify.InvalidArgumentError(msg)));
+            cb(new restify.InvalidArgumentError(msg));
+            return;
         } else if (err) {
             log.error(err, 'failed to get VM %s', uuid);
-            return (cb(err));
+            cb(err);
+            return;
         }
 
         log.info('VM %s exists', uuid);
-        return (cb(null, vm));
+        cb(null, vm);
     });
-
-    return (null);
 }
 
 function provisionZone(params, opts, cb) {
@@ -1118,26 +1145,26 @@ function provisionZone(params, opts, cb) {
     if (self.proto_mode) {
         log.info('skipping provision of %s since in proto mode',
             params.uuid);
-        return (cb(null));
+        cb(null);
+        return;
     }
 
     log.info('checking to see if %s already exists', params.uuid);
 
-    self.vmapi.getVm({ uuid: params.uuid }, function (err, vm) {
-        if (err && err.name === 'ResourceNotFoundError') {
+    self.vmapi.getVm({ uuid: params.uuid }, function getVmCb(err, vm) {
+        if (err && verror.hasCauseWithName(err, 'ResourceNotFoundError')) {
             log.debug({ params: params, opts: opts }, 'provisioning zone');
             self.vmapiplus.createVm(params, opts, cb);
             return;
         } else if (err) {
             log.error(err, 'failed to get zone %s', params.uuid);
-            return (cb(err));
+            cb(err);
+            return;
         }
 
-        log.info('zone %s already exists', params.uuid);
-        return (cb(null));
+        log.info('zone %s already exists', vm.uuid);
+        cb(null);
     });
-
-    return (null);
 }
 
 
@@ -1301,11 +1328,12 @@ function loadObjects(opts, cb) {
     // "just works".  The wonky thing is that it will rewrite all the
     // objects in old.  But since the DBs should be in sync, it's just
     // extra writes.
-    self.stor.listObjectValues(bucket, {}, {}, function (err, objs) {
+    self.stor.listObjectValues(bucket, {}, {}, function listObjCb(err, objs) {
         if (err) {
             log.error(err,
                 'failed to read objects from %s', bucket);
-            return (cb(err));
+            cb(err);
+            return;
         }
 
         if (modfunc)
@@ -1404,7 +1432,7 @@ function doUpgradeToFullMode(cb) {
             // have to worry about running 'mdata-put' on a
             // rollback.
             var cmd = '/usr/sbin/mdata-delete SAPI_PROTO_MODE';
-            exec(cmd, function (err, stdout, stderr) {
+            exec(cmd, function execCmdCb(err, stdout, stderr) {
                 if (err) {
                     log.error({
                     err: err,
@@ -1412,7 +1440,8 @@ function doUpgradeToFullMode(cb) {
                     stderr: stderr
                     }, 'error mdata-delete\'ing ' +
                     'SAPI_PROTO_MODE');
-                    return (subcb(err));
+                    subcb(err);
+                    return;
                 }
                 log.info('mdata-delete\'d SAPI_PROTO_MODE');
                 subcb();
diff --git a/lib/server/stor/moray.js b/lib/server/stor/moray.js
index 8884ad7..f7d2723 100644
--- a/lib/server/stor/moray.js
+++ b/lib/server/stor/moray.js
@@ -5,13 +5,15 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
  * lib/server/stor/moray.js: moray interface
  */
 
+var mod_net = require('net');
+
 var async = require('async');
 var assert = require('assert-plus');
 var jsprim = require('jsprim');
@@ -20,6 +22,7 @@ var LRU = require('lru-cache');
 var moray = require('moray');
 var once = require('once');
 var vasync = require('vasync');
+var verror = require('verror');
 
 var mod_errors = require('../errors');
 
@@ -57,7 +60,8 @@ MorayStorage.prototype.init = function init(cb) {
     setTimeout(function initTimeout() {
         if (!cb.called) {
             log.error('MorayStorage init timeout.');
-            return (cb());
+            cb();
+            return;
         }
     }, 10000);
 
@@ -68,20 +72,27 @@ MorayStorage.prototype.init = function init(cb) {
         cb();
     });
 
-    config.port = config.port ? parseInt(config.port, 10) : 2020;
-
-    var retry = config.retry || {};
-    this.local = moray.createClient({
-        connectTimeout: config.connectTimeout,
-        log: log,
-        host: config.host,
-        port: config.port,
-        retry: (config.retry === false ? false : {
-            retries: retry.retries || Infinity,
-            minTimeout: retry.minTimeout || 1000,
-            maxTimeout: retry.maxTimeout || 60000
-        })
-    });
+    var localMorayCfg;
+
+    if (config.srvDomain) {
+        localMorayCfg = {
+            srvDomain: config.srvDomain,
+            log: log
+        };
+
+        if (config.cueballOptions) {
+            localMorayCfg.cueballOptions = config.cueballOptions;
+        }
+    } else {
+        config.port = config.port ? parseInt(config.port, 10) : 2020;
+        localMorayCfg = {
+            port: config.port,
+            host: config.host,
+            log: log
+        };
+    }
+
+    this.local = moray.createClient(localMorayCfg);
 
     init_barrier.start('local_moray');
 
@@ -89,19 +100,26 @@ MorayStorage.prototype.init = function init(cb) {
      * If specified, create a second connect to the master moray instance.
      */
     if (config.master_host && config.master_port) {
+
         config.master_port = parseInt(config.master_port, 10);
 
-        this.master = moray.createClient({
-            connectTimeout: config.connectTimeout,
-            log: log,
-            host: config.master_host,
-            port: config.master_port,
-            retry: (config.retry === false ? false : {
-                retries: retry.retries || Infinity,
-                minTimeout: retry.minTimeout || 1000,
-                maxTimeout: retry.maxTimeout || 60000
-            })
-        });
+        if (mod_net.isIP(config.master_host)) {
+           this.master = moray.createClient({
+                connectTimeout: config.connectTimeout,
+                log: log,
+                host: config.master_host,
+                port: config.master_port
+            });
+        } else {
+           this.master = moray.createClient({
+                connectTimeout: config.connectTimeout,
+                log: log,
+                srvDomain: config.master_host,
+                cueballOptions: {
+                    defaultPort: config.master_port
+                }
+            });
+        }
 
         log.info('initializing master moray client');
 
@@ -121,8 +139,10 @@ MorayStorage.prototype.init = function init(cb) {
             'moray: setting up');
 
         initBuckets.call(self, client, function (err) {
-            if (err)
-                return (cb(err));
+            if (err) {
+                cb(err);
+                return;
+            }
 
             log.info({ tag: tag, client: client.toString() },
                 'moray: all buckets created');
@@ -132,7 +152,6 @@ MorayStorage.prototype.init = function init(cb) {
     }
 
     function onConnect(tag, client) {
-        client.removeListener('error', onError);
         log.info({ tag: tag, client: client.toString() },
             'moray: connected');
 
@@ -153,37 +172,12 @@ MorayStorage.prototype.init = function init(cb) {
         setup(tag, client);
     }
 
-    function onError(client, err) {
-        // Moray will connect when it comes up, so just log an error.
-        log.error(err, 'moray: connection failed');
-    }
-
-    function onConnectAttempt(number, delay) {
-        var level;
-        if (number === 0) {
-            level = 'info';
-        } else if (number < 5) {
-            level = 'warn';
-        } else {
-            level = 'error';
-        }
-
-        log[level]({
-            attempt: number,
-            delay: delay
-        }, 'moray: connection attempted');
-    }
-
     this.local.once('connect',
         onConnect.bind(this, 'local_moray', this.local));
-    this.local.once('error', onError.bind(this, this.local));
-    this.local.on('connectAttempt', onConnectAttempt);
 
     if (this.master) {
         this.master.once('connect',
             onConnect.bind(this, 'master_moray', this.master));
-        this.master.once('error', onError.bind(this, this.master));
-        this.master.on('connectAttempt', onConnectAttempt);
     }
 
     init_barrier.done('sync');
@@ -285,24 +279,26 @@ function createBucket(client, name, cfg, cb) {
     assert.object(cfg, 'cfg');
     assert.func(cb, 'cb');
 
-    client.getBucket(name, function (err, bucket) {
+    client.getBucket(name, function (err) {
         if (!err) {
             log.info({ client: client.toString() },
                 'moray: bucket %s already exists', name);
-            return (cb(null));
+            cb(null);
+            return;
         }
 
-        if (err && err.name !== 'BucketNotFoundError') {
+        if (err && verror.hasCauseWithName(err, 'BucketNotFoundError')) {
             log.error(err, 'failed to get bucket %s', name);
-            return (cb(err));
+            cb(err);
+            return;
         }
 
         client.createBucket(name, cfg, function (suberr) {
             if (suberr) {
                 log.error(suberr,
                     'failed to create bucket %s', name);
-                return (cb(
-                    new Error('failed to create bucket')));
+                cb(new Error('failed to create bucket'));
+                return;
             }
 
             log.info({ client: client.toString() },
@@ -314,13 +310,11 @@ function createBucket(client, name, cfg, cb) {
             self.object_caches[name] = LRU({
                 max: 1000,
                 maxAge: 15 * 1000,  /* 15 seconds */
-                length: function (item) { return (1); }
+                length: function () { return (1); }
             });
 
-            return (cb(null));
+            cb();
         });
-
-        return (null);
     });
 }
 
@@ -361,7 +355,7 @@ function putObject(bucket, uuid, obj, opts, cb) {
     client.putObject(bucket, uuid, obj, opts, function (err, res) {
         if (err) {
             log.error(err, 'failed to put object %s', uuid);
-            return (cb(err));
+            cb(err);
         }
 
         var record = {};
@@ -427,21 +421,25 @@ MorayStorage.prototype.delObject = function delObject(bucket, uuid, cb) {
             log.debug('deleting object %s from cache', uuid);
             self.object_caches[bucket].del(uuid);
         }
-        cb(null);
+        cb();
     };
 
     this.local.delObject(bucket, uuid, function (err) {
-        if (err && err.name !== 'ObjectNotFoundError')
-            return (cb(err));
+        if (err && verror.hasCauseWithName(err, 'ObjectNotFoundError')) {
+            cb(err);
+            return;
+        }
 
-        if (!err)
-            return (onFinish());
+        if (!err) {
+            onFinish();
+            return;
+        }
 
-        assert.ok(err && err.name === 'ObjectNotFoundError');
+        assert.ok(err && verror.hasCauseWithName(err, 'ObjectNotFoundError'));
 
         if (!self.master) {
-            return (cb(new mod_errors.ObjectNotFoundError(
-                err.message)));
+            cb(new mod_errors.ObjectNotFoundError(err.message));
+            return;
         }
 
         log.debug('deleting object %s from master', uuid);
@@ -452,14 +450,17 @@ MorayStorage.prototype.delObject = function delObject(bucket, uuid, cb) {
          */
         self.master.delObject(bucket, uuid, function (suberr) {
             if (suberr &&
-                suberr.name !== 'ObjectNotFoundError')
-                return (cb(suberr));
+                verror.hasCauseWithName(suberr, 'ObjectNotFoundError')) {
+                cb(suberr);
+                return;
+            }
 
-            if (!suberr)
-                return (onFinish());
+            if (!suberr) {
+                onFinish();
+                return;
+            }
 
-            return (cb(new mod_errors.ObjectNotFoundError(
-                err.message)));
+            cb(new mod_errors.ObjectNotFoundError(err.message));
         });
     });
 };
@@ -590,12 +591,14 @@ function findObjectsPaginated(client, bucket, filter, cb) {
         try {
             var res = client.findObjects(bucket, filter, opts);
         } catch (e) {
-            return (subcb(e));
+            subcb(e);
+            return;
         }
 
         // This is also a symtom of moray not being available.
         if (res === null) {
-            return (subcb(new Error('moray client error')));
+            subcb(new Error('moray client error'));
+            return;
         }
 
         res.on('record', function (record) {
diff --git a/lib/server/stor/moray_local.js b/lib/server/stor/moray_local.js
index e0a7b30..6d65a47 100644
--- a/lib/server/stor/moray_local.js
+++ b/lib/server/stor/moray_local.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 /*
@@ -15,6 +15,8 @@
 
 var assert = require('assert-plus');
 var vasync = require('vasync');
+var verror = require('verror');
+
 var util = require('../../common/util');
 
 module.exports = MorayLocalStorage;
@@ -52,10 +54,9 @@ function is500(err) {
         'Error',         // Postgres is down
         'error'                  // ZK is down
     ];
-    while (err && err.cause && err.cause()) {
-        err = err.cause();
-    }
-    return (names.indexOf(err.name) !== -1);
+    return (names.some(function (name) {
+        return (verror.hasCauseWithName(err, name));
+    }));
 }
 
 function findHistory(uuid, cb) {
diff --git a/package.json b/package.json
index 2c22464..c789b8c 100644
--- a/package.json
+++ b/package.json
@@ -15,7 +15,7 @@
     "ldapjs": "git+https://github.com/mcavage/node-ldapjs.git#0a88109",
     "lru-cache": "2.3.0",
     "mkdirp": "0.3.4",
-    "moray": "git+https://github.com/joyent/node-moray.git#b84ef0e",
+    "moray": "3.2.1",
     "node-uuid": "1.4.0",
     "once": "1.3.0",
     "optimist": "0.3.5",
@@ -23,8 +23,8 @@
     "sdc-clients": "9.2.0",
     "semver": "3.0.1",
     "sprintf-js": "0.0.7",
-    "vasync": "1.5.0",
-    "verror": "^1.6.1"
+    "vasync": "^1.6.3",
+    "verror": "^1.10.0"
   },
   "devDependencies": {
     "nodeunit": "0.9.1",
diff --git a/sapi_manifests/sapi/template b/sapi_manifests/sapi/template
index 7765f83..3aea439 100644
--- a/sapi_manifests/sapi/template
+++ b/sapi_manifests/sapi/template
@@ -5,8 +5,10 @@
 	},
 	"datacenter_name": "{{{datacenter_name}}}",
 	"moray": {
-		"host": "{{{MORAY_SERVICE}}}",
-		"port": 2020,
+		"srvDomain": "{{MORAY_SERVICE}}",
+		"cueballOptions": {
+			"resolvers": ["{{{BINDER_SERVICE}}}"]
+		},
 		"master_host": "{{{MASTER_MORAY_IP}}}",
 		"master_port": "{{{MASTER_MORAY_PORT}}}"
 	},
-- 
2.21.0

