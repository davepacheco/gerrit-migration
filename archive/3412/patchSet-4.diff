From 03830f8ea379758c13afc9267c8545b4efb59ae3 Mon Sep 17 00:00:00 2001
From: Josh Wilsdon <josh@wilsdon.ca>
Date: Tue, 20 Feb 2018 14:06:17 -0800
Subject: [PATCH] TRITON-125 add cloudapi support for bhyve Reviewed by:
 Marsell Kukuljevic <marsell@joyent.com> Reviewed by: Trent Mick
 <trentm@gmail.com> Approved by: Trent Mick <trentm@gmail.com>

---
 docs/index.md               | 47 +++++++++++++++-----------
 lib/machines.js             | 67 ++++++++++++++++++++++++++-----------
 package.json                |  2 +-
 plugins/provision_limits.js |  4 +--
 4 files changed, 77 insertions(+), 43 deletions(-)

diff --git a/docs/index.md b/docs/index.md
index 79c332d..ba0d7fd 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -12,7 +12,7 @@ markdown2extras: tables, code-friendly
 -->
 
 <!--
-    Copyright 2017, Joyent, Inc.
+    Copyright 2018, Joyent, Inc.
 -->
 
 
@@ -355,7 +355,7 @@ so that you do not need to select individual settings, such as RAM or disk size.
 
 ## Managing SSH keys
 
-For instance which don't have a `brand` of `kvm` (see
+For instances which don't have a `brand` of `kvm` or `bhyve` (see
 `triton instance list -o id,brand` or `sdc-listmachines`), you can manage the
 SSH keys that allow logging into the instance via CloudAPI.  For example, to
 rotate keys:
@@ -376,9 +376,9 @@ To use the new key, you will need to update the environment variables:
 At this point you could delete your other key from the system; see
 [Cleaning Up](#cleaning-up) for a quick example.
 
-You cannot manage the SSH keys of instances with a `brand` of `kvm`. Hardware
-virtual machines are static, and whatever keys were in your account at instance
-creation time are used, provided the OS inside KVM is a *nix.
+You cannot manage the SSH keys of instances with a `brand` of `kvm` or `bhyve`.
+Hardware virtual machines are static, and whatever keys were in your account at
+instance creation time are used, provided the OS inside KVM is a *nix.
 
 
 ## Creating Analytics
@@ -908,6 +908,12 @@ The set of supported *API versions* is given in the ping endpoint:
 
 The section describes API changes in CloudAPI versions.
 
+### 8.6.0
+
+- CreateMachine now accepts the `brand` field for specifying the brand of the
+  instance to create. This is currently only useful when provisioning a
+  virtualmachine in a datacenter that supports both kvm (default) and bhyve.
+
 ## 8.5.0
 
 - CreateMachine and AddNic now accept specifying a [network
@@ -4290,18 +4296,18 @@ characters only).
 Your instance will initially be not available for login (Triton must provision
 and boot it); you can poll [GetMachine](#GetMachine) for its status.  When the
 `state` field is equal to `running`, you can log in.  If the instance is a
-`brand` other than `kvm`, you can usually use any of the SSH keys managed
-under the [keys section](#keys) of CloudAPI to login as any POSIX user on the
-OS.  You can add/remove keys over time, and the instance will automatically work
-with that set.
-
-If the the instance has a brand `kvm`, and of a UNIX-derived OS (e.g. Linux),
-you *must* have keys uploaded before provisioning; that entire set of keys will
-be written out to `/root/.ssh/authorized_keys` in the new instance, and you can
-SSH in using one of those keys.  Changing the keys over time under your account
-will not affect a running hardware virtual machine in any way; those keys are
-statically written at provisioning-time only, and you will need to manually
-manage them on the instance itself.
+`brand` other than `kvm` or `bhyve`, you can usually use any of the SSH keys
+managed under the [keys section](#keys) of CloudAPI to login as any POSIX user
+on the OS.  You can add/remove keys over time, and the instance will
+automatically work with that set.
+
+If the the instance has a brand `kvm` or `bhyve`, and of a UNIX-derived OS (e.g.
+Linux), you *must* have keys uploaded before provisioning; that entire set of
+keys will be written out to `/root/.ssh/authorized_keys` in the new instance,
+and you can SSH in using one of those keys.  Changing the keys over time under
+your account will not affect a running hardware virtual machine in any way;
+those keys are statically written at provisioning-time only, and you will need
+to manually manage them on the instance itself.
 
 If the image you create an instance from is set to generate passwords for you,
 the username/password pairs will be returned in the metadata response as a
@@ -4347,6 +4353,7 @@ be changed later within the instance, if desired.
 
 **Field** | **Type** | **Description**
 --------- | -------- | ---------------
+brand     | String   | Optionally specify brand for this instance. Currently only useful to distinguish between bhyve and kvm in datacenters that support both. Possible values: "bhyve", "joyent", "kvm".
 name      | String   | Friendly name for this instance; default is the first 8 characters of the machine id. If the name includes the string {{shortId}}, any instances of that tag within the name will be replaced by the first 8 characters of the machine id.
 package   | String   | Id of the package to use on provisioning, obtained from [ListPackages](#ListPackages)
 image     | String   | The image UUID (the "id" field in [ListImages](#ListImages))
@@ -4805,8 +4812,8 @@ or
 Resize an instance to a new [package](#packages) (a.k.a. instance type).
 
 Resizing is only supported for containers (instances which are not hardware
-virtual machines -- they have `brand=kvm`). Hardware virtual machines cannot
-be resized.
+virtual machines -- they have `brand=kvm` or `brand=bhyve`). Hardware virtual
+machines cannot be resized.
 
 Resizing is not guaranteed to work, especially when resizing upwards in
 resources. It is best-effort, and may fail. Resizing downwards will usually
@@ -5053,7 +5060,7 @@ snapshots, you can boot the instance from a previous snapshot.
 
 Snapshots are not usable with other instances; they are a point-in-time snapshot
 of the current instance. Snapshots can also only be taken of instances that are
-*not* of brand 'kvm'.
+*not* of brand 'kvm' or 'bhyve'.
 
 Since instance instances use a copy-on-write filesystem, snapshots take up
 increasing amounts of space as the filesystem changes over time. There is a
diff --git a/lib/machines.js b/lib/machines.js
index da6017f..1ae8960 100644
--- a/lib/machines.js
+++ b/lib/machines.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -52,6 +52,10 @@ var DEFAULT_NETWORKS = [EXTERNAL_NIC_TAG, INTERNAL_NIC_TAG];
 var PKG_USED_PARAMS = ['uuid', 'max_physical_memory', 'name', 'version',
         'networks', 'active', 'default', 'owner_uuids', 'fss', 'os'];
 
+var DEFAULT_CONTAINER_BRAND = 'joyent';
+var DEFAULT_HVM_BRAND = 'kvm';
+var VALID_BRANDS = ['bhyve', 'joyent', 'kvm'];
+
 var sprintf = util.format;
 
 
@@ -128,7 +132,8 @@ function translate(machine, req)  {
     var msg = {
         id: machine.uuid,
         name: machine.alias,
-        type: machine.brand === 'kvm' ? 'virtualmachine' : 'smartmachine',
+        type: ['kvm', 'bhyve'].indexOf(machine.brand) === -1
+            ? 'smartmachine' : 'virtualmachine',
         brand: machine.brand,
         state: translateState(machine.state),
         image: machine.image_uuid,
@@ -266,10 +271,16 @@ function getListOptions(req) {
 
     switch (req.params.type) {
     case 'smartmachine':
-        opts.predicate = '{ "ne": [ "brand", "kvm" ] }';
+        opts.predicate = '{ "and" [ ' +
+            '{ "ne": [ "brand", "kvm" ] }, ' +
+            '{ "ne": [ "brand", "bhyve" ] }' +
+            ' ] }';
         break;
     case 'virtualmachine':
-        opts.predicate = '{ "eq": [ "brand", "kvm" ] }';
+        opts.predicate = '{ "or": [ ' +
+                '{ "eq": [ "brand", "kvm" ] }, ' +
+                '{ "eq": [ "brand", "bhyve" ] }' +
+                ' ] }';
         break;
     case undefined:
         break;
@@ -347,7 +358,12 @@ function getCreateOptions(req) {
 
     var brand = img.requirements && img.requirements.brand;
     if (!brand) {
-        brand = img.brand || (img.type === 'zvol' ? 'kvm' : 'joyent');
+        if (req.params.brand && VALID_BRANDS.indexOf(req.params.brand) !== -1) {
+            brand = req.params.brand;
+        } else {
+            brand = img.brand || (img.type === 'zvol'
+                ? DEFAULT_HVM_BRAND : DEFAULT_CONTAINER_BRAND);
+        }
     }
 
     var opts = {
@@ -365,12 +381,18 @@ function getCreateOptions(req) {
         opts.cpu_shares = Math.ceil(pkg.fss);
     }
 
-    if (brand === 'kvm') {
+    if (['bhyve', 'kvm'].indexOf(brand) !== -1) {
         opts.disks = [
             { image_uuid: img.uuid },
             { size: parseInt(pkg.quota, 10) }
         ];
 
+        if (brand === 'bhyve') {
+            // With bhyve we also need to always set boot=true for the image
+            // disk. This avoids the problem described in OS-6604.
+            opts.disks[0].boot = true;
+        }
+
         // PUBAPI-652: Fixed 10GiB quota for root dataset of all the KVM
         // machines. User data isn't stored in a zone's root dataset, but a
         // separate one.
@@ -885,32 +907,37 @@ function loadMachine(req, res, next) {
             },
             function _getImg(_, cb) {
                 if (req.datasets) {
-                    return cb(null, req.datasets);
+                    cb(null, req.datasets);
+                    return;
                 }
 
-                req.params.image = (machine.image_uuid) ? machine.image_uuid :
-                    (machine.brand === 'kvm' && machine.disks[0].image_uuid) ?
-                    machine.disks[0].image_uuid : null;
+                if (machine.image_uuid) {
+                    req.params.image = machine.image_uuid;
+                } else if (['bhyve', 'kvm'].indexOf(machine.brand) !== -1 &&
+                    machine.disks[0].image_uuid) {
 
-                if (req.params.image === null) {
-                    return cb(new ResourceNotFoundError('Cannot find ' +
-                        'machine image'));
+                    req.params.image = machine.disks[0].image_uuid;
+                } else {
+                    cb(new ResourceNotFoundError('Cannot find machine image'));
+                    return;
                 }
 
-                return images.loadImage(req, function (err, img) {
+                images.loadImage(req, function (err, img) {
                     if (err) {
                         if (err.statusCode && err.statusCode === 404) {
                             // IMGAPI-328: Users can destroy custom images
                             req.datasets = [];
-                            return cb(null, req.datasets);
+                            cb(null, req.datasets);
+                            return;
                         }
-                        return cb(err);
+                        cb(err);
+                        return;
                     }
                     req.dataset = img;
                     req.log.debug({image: req.dataset},
                         'selected image loaded');
                     req.datasets = [img];
-                    return cb(null, req.datasets);
+                    cb(null, req.datasets);
                 });
             },
             function _getPkg(_, cb) {
@@ -1271,10 +1298,10 @@ function create(req, res, next) {
     }
 
     if (reqParams && reqParams.volumes && reqParams.volumes.length > 0) {
-        if (opts.brand === 'kvm') {
-            // At this time we do not support NFS volumes with KVM
+        if (['bhyve', 'kvm'].indexOf(opts.brand) !== -1) {
+            // At this time we do not support NFS volumes with bhyve or KVM
             return next(new InvalidArgumentError('volumes not yet supported ' +
-                'with brand "kvm"'));
+                'with brand "' + opts.brand + '"'));
         }
 
         if (!req.config.experimental_cloudapi_automount_nfs_shared_volumes) {
diff --git a/package.json b/package.json
index 11ad5a3..bf7ba42 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
     "name": "cloudapi",
     "description": "SmartDataCenter CloudAPI",
-    "version": "8.5.0",
+    "version": "8.6.0",
     "author": "Joyent (joyent.com)",
     "private": true,
     "engines": {
diff --git a/plugins/provision_limits.js b/plugins/provision_limits.js
index 8881b75..9182fad 100644
--- a/plugins/provision_limits.js
+++ b/plugins/provision_limits.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -290,7 +290,7 @@ module.exports = {
                         allVms = vms.map(function (vm) {
                             images.filter(function (i) {
                                 if (i.uuid === vm.image_uuid ||
-                                    (vm.brand === 'kvm' &&
+                                    (['bhyve', 'kvm'].indexOf(vm.brand) > -1 &&
                                     i.uuid === vm.disks[0].image_uuid)) {
                                     vm.image_name = i.name;
                                     vm.os = i.os;
-- 
2.21.0

