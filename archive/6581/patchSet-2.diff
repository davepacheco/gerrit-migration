From 8a16aac6498fe450d8cc6ae203ec4a34c311f203 Mon Sep 17 00:00:00 2001
From: Cody Peter Mello <cody.mello@joyent.com>
Date: Wed, 10 Jul 2019 16:38:56 +0000
Subject: [PATCH] TRITON-1808 NAPI returns "deadlock detected" for conflicting
 requests

---
 lib/models/nic/common.js | 59 ++++++++++++++++++++++++++++++++++++++--
 1 file changed, 57 insertions(+), 2 deletions(-)

diff --git a/lib/models/nic/common.js b/lib/models/nic/common.js
index 9a2185e..d050040 100644
--- a/lib/models/nic/common.js
+++ b/lib/models/nic/common.js
@@ -38,6 +38,42 @@ var getPoolIntersections = util_intersect.getPoolIntersections;
 
 // --- Internal helpers
 
+/**
+ * When we send a batch request to Moray, it executes the requested operations
+ * in the specified order. Since our transactions acquire row-level locks for
+ * each row that we touch, we need to make sure that they are always acquired
+ * in the same order, so that we don't end up with a lock order violation. If
+ * this happens, Postgres will send back the error "deadlock detected".
+ *
+ * It's alright for us to change the initial order that the requests were
+ * placed in the batch since none should share the same bucket/key pair; NAPI
+ * just needs to manipulate multiple objects in the same transaction.
+ *
+ * Note that we sort on the "bucket" in _descending_ alphabetical order. This
+ * is intentional, so that we get the following order when deleting a NIC in
+ * NAPI:
+ *
+ *   - napi_nics
+ *   - napi_networks (when deleting a fabric gateway NIC)
+ *   - napi_ips_*
+ *
+ * This ensures that we'll try to delete the NIC object before we try updating
+ * the network and IP objects, so that when we have racing DELETE requests we
+ * get an ObjectNotFoundError back from Moray, instead of an EtagConflictError.
+ */
+function compareRequests(a, b) {
+    if (a.bucket < b.bucket) {
+        return 1;
+    } else if (a.bucket > b.bucket) {
+        return -1;
+    } else if (a.key < b.key) {
+        return -1;
+    } else if (a.key > b.key) {
+        return 1;
+    } else {
+        return 0;
+    }
+}
 
 /**
  * If an owner_uuid has been specified, and we haven't been explicitly
@@ -484,9 +520,28 @@ function commitBatch(opts, callback) {
     assert.object(opts.log, 'opts.log');
     assert.arrayOfObject(opts.batch, 'opts.batch');
 
-    opts.log.info({ batch: opts.batch }, 'commitBatch: enter');
+    /*
+     * Split out the Portolan updates so that we preserve their
+     * current order.
+     */
+    var nbatch = [];
+    var pbatch = [];
+
+    opts.batch.forEach(function (r) {
+        if (r.bucket.indexOf('portolan') === -1) {
+            nbatch.push(r);
+        } else {
+            pbatch.push(r);
+        }
+    });
+
+    nbatch.sort(compareRequests);
+
+    var batch = nbatch.concat(pbatch);
+
+    opts.log.info({ batch: batch }, 'commitBatch: enter');
 
-    opts.app.moray.batch(opts.batch, function (err, res) {
+    opts.app.moray.batch(batch, function (err, res) {
         if (err) {
             opts.log.error(err, 'commitBatch error');
             callback(err);
-- 
2.21.0

