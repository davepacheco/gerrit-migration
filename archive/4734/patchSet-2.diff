commit 07c25b92eee91e21ff8f4c84c790456ae3865652 (refs/changes/34/4734/2)
Author: Kody A Kantor <kody@kkantor.com>
Date:   2018-08-23T17:59:15+00:00 (1 year, 2 months ago)
    
    joyent/pgstatsmon#17 pgstatsmon should support discovering backend IPs via nic_tag regex
    joyent/pgstatsmon#18 pgstatsmon shouldn't try to create functions that depend on missing functions

diff --git a/CHANGES.md b/CHANGES.md
index d0dde09..2ef4314 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -1,6 +1,12 @@
 # pgstatsmon Changelog
 
-## Not yet released.
+## Not yet released
+None
+
+## 1.1.0
+* #18 pgstatsmon shouldn't try to create functions that depend on missing functions
+* #17 pgstatsmon should support discovering backend IPs via nic_tag regex
+* #14 Collect metrics about vacuum progress
 * #13 pgstatsmon could poll pg_statio_user_tables and pg_statio_user_indexes
 
 ## 1.0.0
diff --git a/docs/overview.md b/docs/overview.md
index 88558f7..34d04da 100644
--- a/docs/overview.md
+++ b/docs/overview.md
@@ -14,7 +14,8 @@ static parameters are ignored.
 If you have a Triton installation you can instruct pgstatsmon to poll VMAPI
 for information about deployed (and running) Postgres instances. pgstatsmon
 will poll VMAPI at a user-defined interval. VMAPI VM and NIC tags must be
-provided to help pgstatsmon find the proper instances.
+provided to help pgstatsmon find the proper instances. The NIC tag is in the
+form of a regular expression.
 
 Only one VMAPI can currently be targeted. This means that if you have a three
 datacenter Triton deployment you will need to stand up three instances of
@@ -91,23 +92,21 @@ When pgstatsmon first encounters a new backend it attempts to do a few things.
 - Connects to the database as the 'postgres' user
 - Check if the database is a synchronous or asynchronous peer. If it is,
   pgstatsmon doesn't perform the rest of these steps
+- Collects the database server version number
 - Creates a non-superuser (defined in the pgstatsmon configuration file) that
   pgstatsmon will use on subsequent Postgres connection attempts
-- Creates two functions to allow pgstatsmon to glean information about Postgres
-  that is usually hidden from non-superusers
-  * get_stat_activity()
-    * Returns an unfiltered version of pg_stat_activity. When queried by a
-      non-superuser pg_stat_activity will hide queries from superusers (like
-      autovacuum operations).
-  * get_stat_replication()
-    * Returns an unfiltered version of pg_stat_replication. When queried by a
-      non-superuser pg_stat_replication will display very little information.
-      This function allows pgstatsmon to track things like WAL positions.
+- Creates functions to allow pgstatsmon to glean information about Postgres
+  that is usually hidden from non-superusers. Examples of these are
+  'get_stat_activity()' and 'get_stat_replication()'.
 
 If this initial setup operation fails for some reason, pgstatsmon will continue
 to attempt to run the setup on every metric collection 'tick' and skip metric
 collection for the backend needing to be set up.
 
+If one of the initial setup steps is known to be incompatible with certain
+PG versions it is skipped, which may result in query errors during metric
+collection.
+
 ## Metrics collected
 
 pgstatsmon collects a lot of metrics from Postgres. The most up-to-date list of
diff --git a/lib/dbinit.js b/lib/dbinit.js
index ded6064..6977b1f 100644
--- a/lib/dbinit.js
+++ b/lib/dbinit.js
@@ -109,6 +109,33 @@ function stop_if_standby(args, callback) {
 	});
 }
 
+/*
+ * Get the version number of the Postgres server. This is used later to
+ * determine whether or not we should set up some of the stat collection
+ * functions (replication stats, vacuum progress stats).
+ */
+function get_db_version(args, callback) {
+	var query;
+	var res;
+	var server_version_num;
+
+	server_version_num = 'server_version_num';
+	query = mod_util.format('SHOW %s', server_version_num);
+
+	res = args.client.query(query);
+	res.once('row', function (row) {
+		args.pg_version = row[server_version_num];
+	});
+
+	res.on('error', function (err) {
+		callback(err);
+	});
+
+	res.on('end', function () {
+		callback();
+	});
+}
+
 /*
  * create a restricted Postgres user for pgstatsmon
  */
@@ -166,6 +193,11 @@ function create_activity_function(args, callback) {
  * create a function for pgstatsmon to view unfiltered pg_stat_replication stats
  */
 function create_replication_function(args, callback) {
+	if (args.pg_version < 90400) {
+		/* not supported */
+		callback();
+		return;
+	}
 	var query;
 	query = 'CREATE OR REPLACE FUNCTION public.get_stat_replication()'
 	    + ' RETURNS SETOF pg_stat_replication AS \'SELECT * FROM'
@@ -179,6 +211,11 @@ function create_replication_function(args, callback) {
  * create a function for pgstatsmon to gather vacuum progress
  */
 function create_progress_vacuum_function(args, callback) {
+	if (args.pg_version < 90600) {
+		/* not supported */
+		callback();
+		return;
+	}
 	var query;
 	query = 'CREATE OR REPLACE FUNCTION public.get_stat_progress_vacuum('
 	+ 'out relname name, '
@@ -255,12 +292,14 @@ function setup_monitoring_user(args, callback) {
 	var log = args.log;
 	var arg = {
 		'conf': args,
-		'client': null
+		'client': null,
+		'pg_version': null
 	};
 	mod_vasync.pipeline({
 		'funcs': [
 			connect_to_database,
 			stop_if_standby,
+			get_db_version,
 			create_user,
 			create_activity_function,
 		        create_replication_function,
diff --git a/package.json b/package.json
index fadf786..64be016 100644
--- a/package.json
+++ b/package.json
@@ -18,7 +18,7 @@
 		"restify": "6.3.4",
 		"vasync": "2.2.0",
 		"verror": "1.10.0",
-		"vmapi-resolver": "1.0.0"
+		"vmapi-resolver": "2.0.0"
 	},
 	"author": "Joyent, Inc",
 	"license": "MPL-2.0"
