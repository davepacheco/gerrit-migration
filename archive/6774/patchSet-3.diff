commit 4ba4c4524f4d2f1a3d5ba869f9d7caa2cfaf5435
Author: Alex Wilson <alex@uq.edu.au>
Date:   2019-08-12T03:54:03+00:00 (8 weeks ago)
    
    joyent/node-mahi#3 filtering of roles to ones from the owning account should be done in libmahi, not in muskie/marlin
    Reviewed by: Robert Mustacchi <rm@joyent.com>
    Approved by: Robert Mustacchi <rm@joyent.com>

diff --git a/lib/client.js b/lib/client.js
index 363df52..ff8fed7 100644
--- a/lib/client.js
+++ b/lib/client.js
@@ -412,6 +412,8 @@ MahiClient.prototype.authorize = function authorize(opts) {
 
     assert.arrayOfString(opts.conditions.activeRoles,
             'opts.conditions.activeRoles');
+    assert.optionalArrayOfString(opts.conditions.activeXAcctRoles,
+            'opts.conditions.activeXAcctRoles');
 
     var self = this;
     if (!self.evaluator) {
@@ -427,7 +429,20 @@ MahiClient.prototype.authorize = function authorize(opts) {
 
     var resourceTags = resource.roles;
     var owner = resource.owner;
-    var activeRoles = opts.conditions.activeRoles;
+
+    /*
+     * Systems that are xacct role aware may end up sharing their produced
+     * authContext with a non-xacct-role-aware system which has an old version
+     * of this code. If this happens and we dumped xacct roles into activeRoles,
+     * it could lead to improper authorization of requests due to activating
+     * roles belonging to a different account to the resource owner.
+     *
+     * As a workaround, we make sure to always place xacct roles into
+     * the "activeXAcctRoles" property instead, which only newer versions of
+     * this code will look at.
+     */
+    var activeRoles = opts.conditions.activeRoles.concat(
+        opts.conditions.activeXAcctRoles || []);
 
     /* The final context we will give to aperture. */
     var context = {
@@ -536,8 +551,21 @@ MahiClient.prototype.authorize = function authorize(opts) {
              * Otherwise ignore this role membership -- admin roles can't have
              * any attached policy.
              */
+            continue;
+        }
+
+        /*
+         * We do this here and not before the ADMIN_ROLE_NAME check because of
+         * the isOperator inheritance of sub-users on an operator account.
+         *
+         * In all other cases, we never want to authorize an action based on
+         * a role that belongs to a different account.
+         */
+        if (owner.account.uuid !== role.account) {
+            continue;
+        }
 
-        } else if (resourceTags.indexOf(activeRoles[i]) >= 0) {
+        if (resourceTags.indexOf(activeRoles[i]) >= 0) {
             /* Ordinary non-admin roles are processed below. */
             matchingRoles.push(activeRoles[i]);
             role.rules.forEach(function (rule) {
