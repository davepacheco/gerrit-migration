commit c4e93823dd61bfacd55ad494c62ccd4a285646a9 (refs/changes/45/945/4)
Author: Orlando Vazquez <ovazquez@gmail.com>
Date:   2016-11-28T01:14:49-08:00 (2 years, 10 months ago)
    
    CNAPI-679 CNAPI should use node v4.x

diff --git a/Makefile b/Makefile
index d0955e0..0c13979 100644
--- a/Makefile
+++ b/Makefile
@@ -42,11 +42,11 @@ JSSTYLE_FLAGS	= -o indent=4,doxygen,unparenthesized-return=0
 SMF_MANIFESTS_IN = smf/manifests/cnapi.xml.in
 SMF_DTD		= $(REPO_ROOT)/tools/service_bundle.dtd.1
 
-NODE_PREBUILT_VERSION=v0.10.42
+NODE_PREBUILT_VERSION=v4.6.1
 NODE_PREBUILT_TAG=zone
 ifeq ($(shell uname -s),SunOS)
-	# Allow building on a SmartOS image other than sdc-smartos@1.6.3.
-	NODE_PREBUILT_IMAGE=fd2cc906-8938-11e3-beab-4359c665ac99
+	# Allow building on other than image sdc-minimal-multiarch-lts@15.4.1.
+	NODE_PREBUILT_IMAGE=18b094b0-eb01-11e5-80c1-175dac7ddf02
 endif
 
 COAL ?= root@10.99.99.7
diff --git a/lib/apis/moray.js b/lib/apis/moray.js
index 7f556a0..ce2681e 100644
--- a/lib/apis/moray.js
+++ b/lib/apis/moray.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
 /*
@@ -16,6 +16,7 @@ var moray_client = require('moray');
 var assert = require('assert-plus');
 var bunyan = require('bunyan');
 var async = require('async');
+var VError = require('verror');
 
 var BUCKETS = {
     'servers': {
@@ -120,13 +121,7 @@ Moray.prototype.connect = function () {
             serializers: bunyan.stdSerializers
         }),
         reconnect: true,
-        noCache: true,
-        connectTimeout: 10000,
-        retry: {
-            retries: Infinity,
-            minTimeout: 1000,
-            maxTimeout: 16000
-        }
+        noCache: true
     });
 
     function onConnect() {
@@ -166,18 +161,20 @@ Moray.prototype.ensureClientReady = function (callback) {
                         return;
                     }
 
-                    if (error.name === 'ConnectTimeoutError') {
+                    if (VError.hasCauseWithName(error, 'ConnectTimeoutError')) {
                         setTimeout(next, 1000);
                         return;
                     }
 
-                    if (error.name === 'BucketNotFoundError') {
+                    if (VError.hasCauseWithName(error, 'BucketNotFoundError')) {
                         run = false;
                         next();
                         return;
                     }
 
-                    if (error.name !== 'NoDatabasePeersError') {
+                    if (!VError.hasCauseWithName(error,
+                                                 'NoDatabasePeersError'))
+                    {
                         self.log.info(
                             'Received %s from moray', error.message);
                         self.log.info({ error: error });
@@ -221,7 +218,9 @@ Moray.prototype.initializeBuckets = function (callback) {
 
                     function onbucket(error) {
                         if (error) {
-                            if (error.name === 'BucketNotFoundError') {
+                            if (VError.hasCauseWithName(error,
+                                                        'BucketNotFoundError'))
+                            {
                                 self.log.info(
                                     'Moray bucket \'%s\','
                                     + ' does not yet exist, we will create it',
@@ -256,7 +255,9 @@ Moray.prototype.initializeBuckets = function (callback) {
                 function (error, obj) {
                     if (error) {
 
-                        if (error.name === 'ObjectNotFoundError') {
+                        if (VError.hasCauseWithName(error,
+                                                    'ObjectNotFoundError'))
+                        {
                             var ModelServer = require('../models/server');
                             self.log.info(
                                 'Default object does not yet exist, creating'
diff --git a/lib/app.js b/lib/app.js
index b5f4d11..87c26ce 100644
--- a/lib/app.js
+++ b/lib/app.js
@@ -21,7 +21,7 @@ var execFile = require('child_process').execFile;
 var fs = require('fs');
 var http = require('http');
 var https = require('https');
-var verror = require('verror');
+var VError = require('verror');
 var Logger = require('bunyan');
 var restify = require('restify');
 var sdcClients = require('sdc-clients');
@@ -165,7 +165,7 @@ App.prototype.start = function () {
 
                     var match = stdout.trim().match(uname_re);
                     if (!match) {
-                        wfcb(new verror.VError(util.format(
+                        wfcb(new VError(util.format(
                             'could not parse uname -v output: %j',
                             stdout)));
                         return;
@@ -544,7 +544,7 @@ App.prototype.onVmsUpdate = function (uuid, heartbeat, callback) {
             function (updateError) {
                 if (updateError) {
                     self.log.error(
-                        new verror.VError(
+                        new VError(
                         updateError,
                         'updating server record with heartbeat'));
                     return;
diff --git a/lib/common.js b/lib/common.js
index 18f6bd0..4d0a0dc 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -5,11 +5,11 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
 var fs = require('fs');
-var uuid = require('node-uuid');
+var libuuid = require('libuuid');
 var qs = require('querystring');
 
 
@@ -72,7 +72,7 @@ function timestamp() {
 
 
 function genId() {
-    return uuid.v4();
+    return libuuid.create();
 }
 
 
diff --git a/lib/endpoints/index.js b/lib/endpoints/index.js
index c1909d4..2c37dd7 100644
--- a/lib/endpoints/index.js
+++ b/lib/endpoints/index.js
@@ -11,7 +11,7 @@
 var fs = require('fs');
 var util = require('util');
 var path = require('path');
-var verror = require('verror');
+var VError = require('verror');
 var restify = require('restify');
 var assert = require('assert-plus');
 
@@ -169,7 +169,7 @@ function ensure(opts) {
     prepopulate.forEach(function (resource) {
         if (!PREPOPULATE_FNS.hasOwnProperty(resource)) {
             throw (
-                new verror.VError(
+                new VError(
                     'unknown resource for prepopulation, %s', resource));
         }
 
@@ -182,7 +182,7 @@ function ensure(opts) {
     connected.forEach(function (service) {
         if (!CONNECTION_CHECKS.hasOwnProperty(service)) {
             throw (
-                new verror.VError(
+                new VError(
                     'unknown service for precondition check, %s', service));
         }
 
diff --git a/lib/endpoints/servers.js b/lib/endpoints/servers.js
index ef81a3c..ef28e5d 100644
--- a/lib/endpoints/servers.js
+++ b/lib/endpoints/servers.js
@@ -20,7 +20,7 @@ var qs = require('querystring');
 var restify = require('restify');
 var sprintf = require('sprintf').sprintf;
 var util = require('util');
-var verror = require('verror');
+var VError = require('verror');
 
 var common = require('../common');
 var dapiAlloc = require('dapi/lib/allocator');
@@ -417,7 +417,7 @@ Server.update = function (req, res, next) {
                 }
 
                 if (!platforms.hasOwnProperty(change.boot_platform)) {
-                    cb(new verror.VError('failed to find given platform image,'
+                    cb(new VError('failed to find given platform image,'
                         + ' %s', change.boot_platform));
                     return;
                 }
@@ -435,7 +435,7 @@ Server.update = function (req, res, next) {
 
             req.stash.server.getRaw(function (error, server) {
                 if (error) {
-                    cb(new verror.VError('failed to fetch vms'));
+                    cb(new VError('failed to fetch vms'));
                     return;
                 }
 
diff --git a/lib/endpoints/tasks.js b/lib/endpoints/tasks.js
index 6ec11d4..0349f89 100644
--- a/lib/endpoints/tasks.js
+++ b/lib/endpoints/tasks.js
@@ -5,11 +5,12 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
 var restify = require('restify');
 var async = require('async');
+var VError = require('verror');
 var ModelServer = require('../models/server');
 var buckets = require('../apis/moray').BUCKETS;
 
@@ -33,7 +34,9 @@ Task.get = function (req, res, next) {
         buckets.tasks.name,
         req.params.taskid,
         function (error, obj) {
-            if (error && error.name === 'ObjectNotFoundError') {
+            if (error && VError.hasCauseWithName(error,
+                                                 'ObjectNotFoundError'))
+            {
                 next(new restify.ResourceNotFoundError(
                     'no such task found'));
                 return;
@@ -87,7 +90,9 @@ Task.wait = function (req, res, next) {
             req.params.taskid,
             { noCache: true },
             function (err, obj) {
-                if (err && err.name === 'ObjectNotFoundError') {
+                if (err && VError.hasCauseWithName(err,
+                                                   'ObjectNotFoundError'))
+                {
                     next(new restify.ResourceNotFoundError(
                         'no such task found'));
                     return;
diff --git a/lib/endpoints/vms.js b/lib/endpoints/vms.js
index 0a89554..ab94e9e 100644
--- a/lib/endpoints/vms.js
+++ b/lib/endpoints/vms.js
@@ -17,7 +17,7 @@ var sprintf = require('sprintf').sprintf;
 var url = require('url');
 var dns = require('dns');
 var async = require('async');
-var verror = require('verror');
+var VError = require('verror');
 var sdcClients = require('sdc-clients');
 
 var validation = require('../validation/endpoints');
@@ -606,7 +606,7 @@ VM.create = function create(req, res, next) {
             // Resolve the imgapi address on cn-agent's behalf.
             dns.resolve(hostname, function (error, addrs) {
                 if (error) {
-                    cb(new verror.VError(error,
+                    cb(new VError(error,
                          'failed to resolve imgapi address %s', hostname));
                     return;
                 }
@@ -634,7 +634,7 @@ VM.create = function create(req, res, next) {
 
             getManifest(imgapi_url, originUuid, function (err, manifest) {
                 if (err) {
-                    cb(new verror.VError(err,
+                    cb(new VError(err,
                         'failed to fetch origin manifest'));
                     return;
                 }
diff --git a/lib/endpoints/zfs.js b/lib/endpoints/zfs.js
index 12bff3b..a18258d 100644
--- a/lib/endpoints/zfs.js
+++ b/lib/endpoints/zfs.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
 /*
@@ -34,8 +34,12 @@ function ZFS() {}
 
 ZFS.listDatasets = function (req, res, next) {
     var server = req.stash.server;
+    var opts = {
+        params: req.params,
+        req: req
+    };
 
-    server.zfsTask('zfs_list_datasets', req.params, function (err, results) {
+    server.zfsTask('zfs_list_datasets', opts, function (err, results) {
         if (err) {
             return (next(new restify.InternalError(
                 'cannot list datasets:' + err.message)));
@@ -62,8 +66,12 @@ ZFS.listDatasets = function (req, res, next) {
 
 ZFS.createDataset = function (req, res, next) {
     var server = req.stash.server;
+    var opts = {
+        params: req.params,
+        req: req
+    };
 
-    server.zfsTask('zfs_create_dataset', req.params, function (err) {
+    server.zfsTask('zfs_create_dataset', opts, function (err) {
         if (err) {
             return (next(new restify.InternalError(
                 'cannot create dataset:' + err.message)));
@@ -92,13 +100,17 @@ ZFS.createDataset = function (req, res, next) {
 
 ZFS.createSnapshot = function (req, res, next) {
     var server = req.stash.server;
-
     var name = req.params.name;
     var snapshot = req.params.dataset + '@' + name;
 
+    var opts = {
+        params: { dataset: snapshot },
+        req: req
+    };
+
     server.zfsTask(
         'zfs_snapshot_dataset',
-        { dataset: snapshot },
+        opts,
         function (err) {
             if (err) {
                 next(new restify.InternalError(
@@ -132,9 +144,14 @@ ZFS.rollbackSnapshot = function (req, res, next) {
     var name = req.params.name;
     var snapshot = req.params.dataset + '@' + name;
 
+    var opts = {
+        params: { dataset: snapshot },
+        req: req
+    };
+
     server.zfsTask(
         'zfs_rollback_dataset',
-        { dataset: snapshot },
+        opts,
         function (err) {
             if (err) {
                 next(new restify.InternalError(
@@ -163,7 +180,12 @@ ZFS.rollbackSnapshot = function (req, res, next) {
 ZFS.listSnapshots = function (req, res, next) {
     var server = req.stash.server;
 
-    server.zfsTask('zfs_list_snapshots', req.params, function (err, results) {
+    var opts = {
+        params: req.params,
+        req: req
+    };
+
+    server.zfsTask('zfs_list_snapshots', opts, function (err, results) {
         if (err) {
             return (next(new restify.InternalError(
                 'cannot list snapshots:' + err.message)));
@@ -208,12 +230,17 @@ function findProps(params) {
 ZFS.getAllProperties = function (req, res, next) {
     var server = req.stash.server;
 
-    var options = {};
+    var params = {};
     var properties = findProps(req.params);
     if (properties.length > 0)
-        options.properties = properties;
+        params.properties = properties;
+
+    var opts = {
+        params: params,
+        req: req
+    };
 
-    server.zfsTask('zfs_get_properties', options, function (err, results) {
+    server.zfsTask('zfs_get_properties', opts, function (err, results) {
         if (err) {
             return (next(new restify.InternalError(
                 'cannot get properties:' + err.message)));
@@ -253,15 +280,18 @@ ZFS.getProperties = function (req, res, next) {
     var server = req.stash.server;
     var dataset = req.params.dataset;
 
-    var options = {};
-    options.dataset = dataset;
+    var params = {};
+    params.dataset = dataset;
     var properties = findProps(req.params);
     if (properties.length > 0)
-        options.properties = properties;
+        params.properties = properties;
 
-    // XXX Handle case where pool is specified or not
+    var opts = {
+        params: params,
+        req: req
+    };
 
-    server.zfsTask('zfs_get_properties', options, function (err, results) {
+    server.zfsTask('zfs_get_properties', opts, function (err, results) {
         if (err) {
             return (next(new restify.InternalError(
                 'cannot get properties:' + err.message)));
@@ -299,7 +329,12 @@ ZFS.getProperties = function (req, res, next) {
 ZFS.setProperties = function (req, res, next) {
     var server = req.stash.server;
 
-    server.zfsTask('zfs_set_properties', req.params, function (err) {
+    var opts = {
+        params: req.params,
+        req: req
+    };
+
+    server.zfsTask('zfs_set_properties', opts, function (err) {
         if (err) {
             return (next(new restify.InternalError(
                 'cannot set properties:' + err.message)));
@@ -327,7 +362,13 @@ ZFS.setProperties = function (req, res, next) {
 ZFS.destroyDataset = function (req, res, next) {
     var server = req.stash.server;
 
-    server.zfsTask('zfs_destroy_dataset', req.params, function (err) {
+    var opts = {
+        params: req.params,
+        req: req
+    };
+
+
+    server.zfsTask('zfs_destroy_dataset', opts, function (err) {
         if (err) {
             return (next(new restify.InternalError(
                 'cannot destroy dataset:' + err.message)));
@@ -354,7 +395,12 @@ ZFS.destroyDataset = function (req, res, next) {
 ZFS.listZpools = function (req, res, next) {
     var server = req.stash.server;
 
-    server.zfsTask('zfs_list_pools', req.params, function (err, results) {
+    var opts = {
+        params: req.params,
+        req: req
+    };
+
+    server.zfsTask('zfs_list_pools', opts, function (err, results) {
         if (err) {
             return (next(new restify.InternalError(
                 'cannot list pools:' + err.message)));
diff --git a/lib/models/image.js b/lib/models/image.js
index 9d0f5cf..40fb1b7 100644
--- a/lib/models/image.js
+++ b/lib/models/image.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
 /*
@@ -16,7 +16,6 @@
 var async = require('async');
 var sprintf = require('sprintf').sprintf;
 var util = require('util');
-var nodeuuid = require('node-uuid');
 
 var ModelBase = require('./base');
 var ModelServer;
diff --git a/lib/models/server.js b/lib/models/server.js
index 334d75e..d7a2f1a 100644
--- a/lib/models/server.js
+++ b/lib/models/server.js
@@ -21,7 +21,7 @@ var qs = require('querystring');
 var restify = require('restify');
 var sprintf = require('sprintf').sprintf;
 var util = require('util');
-var verror = require('verror');
+var VError = require('verror');
 var once = require('once');
 
 var buckets = require('../apis/moray').BUCKETS;
@@ -380,8 +380,7 @@ ModelServer.setDefaultServer = function (values, callback) {
                 if (putError) {
                     self.log.error('Could not store default server');
                     callback(
-                        verror.VError(putError,
-                            'failed to store default server'));
+                        VError(putError, 'failed to store default server'));
                     return;
                 }
                 callback();
@@ -400,8 +399,7 @@ ModelServer.updateDefaultServer = function (values, callback) {
         function (error, obj) {
             if (error) {
                 self.log.error(error, 'Could not store default server');
-                callback(new verror.VError(
-                    error, 'failed to store default server'));
+                callback(new VError(error, 'failed to store default server'));
                 return;
             }
 
@@ -462,8 +460,8 @@ ModelServer.updateDefaultServer = function (values, callback) {
                 function (putError) {
                     if (putError) {
                         self.log.error('Could not store default server');
-                        callback(verror.VError(
-                            putError, 'failed to store default server'));
+                        callback(VError(putError,
+                                        'failed to store default server'));
                         return;
                     }
                     callback();
@@ -686,7 +684,7 @@ function (heartbeat, callback) {
     function getServer(cb) {
         self.getRaw(function (err, so, s) {
             if (err) {
-                cb(new verror.VError(err, 'retrieving server on heartbeat'));
+                cb(new VError(err, 'retrieving server on heartbeat'));
                 return;
             }
 
@@ -849,7 +847,9 @@ ModelServer.prototype.getRaw = function (extras, callback) {
             buckets.servers.name,
             uuid,
             function (error, obj) {
-                if (error && error.name === 'ObjectNotFoundError') {
+                if (error && VError.hasCauseWithName(error,
+                                                     'ObjectNotFoundError'))
+                {
                     self.exists = false;
                     self.log.error('Server %s not found in moray', uuid);
 
@@ -872,7 +872,8 @@ ModelServer.prototype.getRaw = function (extras, callback) {
                         uuid,
                         function (getStatusError, statusObj) {
                             if (getStatusError &&
-                                getStatusError.name === 'ObjectNotFoundError')
+                                VError.hasCauseWithName(getStatusError,
+                                                        'ObjectNotFoundError'))
                             {
                                 self.log.error(
                                     'last_heartbeat for %s not found in moray',
@@ -1254,7 +1255,7 @@ function Server$getLastHeartbeat(callback) {
         onGetObject);
 
     function onGetObject(error, obj) {
-        if (error && error.name === 'ObjectNotFoundError') {
+        if (error && VError.hasCauseWithName(error, 'ObjectNotFoundError')) {
             self.log.error(
                 'last_heartbeat for %s not found in moray', uuid);
             callback();
@@ -1690,8 +1691,7 @@ ModelServer.getBootParamsDefault = function (callback) {
         'default',
         function (getError, obj) {
             if (getError) {
-                callback(
-                    new verror.VError(getError, 'getting default object'));
+                callback(new VError(getError, 'getting default object'));
                 return;
             }
 
@@ -1917,8 +1917,8 @@ ModelServer.prototype.updateBootParams = function (bootParams, callback) {
 
         self.modify(server, function (modifyError) {
             if (error) {
-                callback(new verror.VError(
-                    modifyError, 'modifying server boot param'));
+                callback(new VError(modifyError,
+                                    'modifying server boot param'));
                 return;
             }
             callback();
@@ -2133,12 +2133,12 @@ function (opts) {
         function (wfcb) {
             self.getRaw(function (err, server) {
                 if (err) {
-                    wfcb(new verror.VError(err, err));
+                    wfcb(new VError(err, err));
                    return;
                 }
 
                 if (!server) {
-                    wfcb(new verror.VError('server not found'));
+                    wfcb(new VError('server not found'));
                    return;
                 }
 
@@ -2146,7 +2146,7 @@ function (opts) {
                     serverAdminIp = firstAdminIp(server.sysinfo);
                 } catch (e) {
                     callback(
-                        new verror.VError(e, 'parsing server ip address'));
+                        new VError(e, 'parsing server ip address'));
                     return;
                 }
 
@@ -2176,7 +2176,8 @@ function (opts) {
 
             client = restify.createJsonClient(cOpts);
 
-            log.info('posting task to %s%s', cOpts.url, rOpts.path);
+            log.info('posting task to %s%s (req_id=%s)',
+                     cOpts.url, rOpts.path, req_id);
 
             // write initial task to moray
             // post http request
@@ -2218,7 +2219,7 @@ function (opts) {
                             err, taskstatus.id, taskstatus);
                     });
 
-                    var e = new verror.VError(err, 'posting task to cn-agent');
+                    var e = new VError(err, 'posting task to cn-agent');
                     log.error(e, 'posting task to cn-agent');
                     if (obj) {
                         e.orig = obj;
@@ -2306,19 +2307,19 @@ ModelServer.prototype.sendRequest = function (opts, cb) {
         function getAdminIpFromSysinfo(wfcb) {
             self.getRaw(function (err, server) {
                 if (err) {
-                    wfcb(new verror.VError(err, err));
+                    wfcb(new VError(err, err));
                    return;
                 }
 
                 if (!server) {
-                    wfcb(new verror.VError('server not found'));
+                    wfcb(new VError('server not found'));
                    return;
                 }
 
                 try {
                     serverAdminIp = firstAdminIp(server.sysinfo);
                 } catch (e) {
-                    cb(new verror.VError(e, 'parsing server ip address'));
+                    cb(new VError(e, 'parsing server ip address'));
                     return;
                 }
 
@@ -2361,7 +2362,7 @@ ModelServer.prototype.sendRequest = function (opts, cb) {
     });
 };
 
-ModelServer.prototype.zfsTask = function (task, options, callback) {
+ModelServer.prototype.zfsTask = function (task, opts, callback) {
     var self = this;
 
     var request = {
@@ -2372,14 +2373,13 @@ ModelServer.prototype.zfsTask = function (task, options, callback) {
         synccb: function (error, result) {
             callback(error, result);
         },
-        req_id: options.req_id,
-        params: options
+        req_id: opts.req.getId(),
+        params: opts.params
     };
 
     self.sendTaskRequest(request);
 };
 
-
 /**
  * Return a VM model.
  */
diff --git a/lib/models/vm.js b/lib/models/vm.js
index f914029..7c62c10 100644
--- a/lib/models/vm.js
+++ b/lib/models/vm.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2016, Joyent, Inc.
  */
 
 /*
@@ -17,7 +17,6 @@ var async = require('async');
 var assert = require('assert-plus');
 var sprintf = require('sprintf').sprintf;
 var util = require('util');
-var nodeuuid = require('node-uuid');
 var sdcClients = require('sdc-clients');
 
 var ModelBase = require('./base');
diff --git a/lib/models/waitlist.js b/lib/models/waitlist.js
index 5e3f332..be13ae9 100644
--- a/lib/models/waitlist.js
+++ b/lib/models/waitlist.js
@@ -15,11 +15,11 @@
 
 var assert = require('assert-plus');
 var async = require('async');
-var libuuid = require('node-uuid');
+var libuuid = require('libuuid');
 var once = require('once');
 var sprintf = require('sprintf').sprintf;
 var vasync = require('vasync');
-var verror = require('verror');
+var VError = require('verror');
 var jsprim = require('jsprim');
 
 var ModelBase = require('./base');
@@ -152,7 +152,7 @@ WaitlistDirector.prototype.onUpdate = function (timestamp, tickets) {
                 // If ticket went into 'active' status, kick off callbacks.
                 for (i in self.callbacks[ticket.uuid]) {
                     self.callbacks[ticket.uuid][i](
-                        new verror.VError('ticket has expired'));
+                        new VError('ticket has expired'));
                 }
                 delete self.callbacks[ticket.uuid];
                 fecb();
@@ -209,13 +209,13 @@ WaitlistDirector.prototype.waitForTicketByUuid = function (uuid, callback) {
 
     ModelWaitlist.getTicket(uuid, function (error, t) {
         if (error) {
-            callback(new verror.VError('fetching ticket %s', uuid));
+            callback(new VError('fetching ticket %s', uuid));
             return;
         }
 
         // If the ticket doesn't exist in moray, it doesn't exist period.
         if (!t) {
-            callback(new verror.VError('no such ticket %s', uuid));
+            callback(new VError('no such ticket %s', uuid));
             return;
         }
 
@@ -229,7 +229,7 @@ WaitlistDirector.prototype.waitForTicketByUuid = function (uuid, callback) {
         if (t.status === 'expired') {
             self.log.warn(
                 'ticket %s found expired', uuid);
-             callback(new verror.VError('ticket %s is expired', uuid));
+             callback(new VError('ticket %s is expired', uuid));
              return;
         }
 
@@ -388,14 +388,13 @@ ModelWaitlist.ticketRelease = function (ticket_uuid, callback) {
             ModelWaitlist.getTicket(ticket_uuid,
                 function (geterror, respticket) {
                     if (geterror) {
-                        wfcb(verror.VError(
-                            geterror, 'failed to load ticket %s', ticket_uuid));
+                        wfcb(VError(geterror, 'failed to load ticket %s',
+                                    ticket_uuid));
                         return;
                     }
 
                     if (!respticket) {
-                        wfcb(
-                            verror.VError('no such ticket %s', ticket_uuid));
+                        wfcb(VError('no such ticket %s', ticket_uuid));
                         return;
                     }
 
@@ -407,8 +406,7 @@ ModelWaitlist.ticketRelease = function (ticket_uuid, callback) {
             wl = new ModelWaitlist({ uuid: ticket.server_uuid });
             wl.getServerQueue(function (err, respserverqueue, res) {
                 if (err) {
-                    wfcb(verror.VError(
-                        err, 'loading waitlist queue for server %s',
+                    wfcb(VError(err, 'loading waitlist queue for server %s',
                         ticket.server_uuid));
                     return;
                 }
@@ -546,7 +544,7 @@ ModelWaitlist.getTicket = function (uuid, callback) {
         buckets.waitlist_tickets.name, uuid, onGet);
 
     function onGet(error, obj) {
-        if (error && error.name === 'ObjectNotFoundError') {
+        if (error && VError.hasCauseWithName(error, 'ObjectNotFoundError')) {
             self.log.error('Ticket %s not found in moray', uuid);
             callback();
             return;
@@ -572,7 +570,7 @@ ModelWaitlist.prototype.getServerQueue = function (callback) {
         self.uuid,
         function (err, response) {
             var res = { etag: null };
-            if (err && err.name === 'ObjectNotFoundError') {
+            if (err && VError.hasCauseWithName(err, 'ObjectNotFoundError')) {
                 self.log.error(
                     'Ticket queue for %s not found in moray',
                     self.uuid);
@@ -638,14 +636,14 @@ ModelWaitlist.prototype.ensureServerQueue = function (callback) {
                 serverqueue,
                 { etag: etag },
                 function (err, response) {
-                    if (err && (err.name === 'EtagConflictError' ||
-                               (err.name === 'UniqueAttributeError')))
+                    if (err &&
+                       (VError.hasCauseWithName(err, 'EtagConflictError') ||
+                       (VError.hasCauseWithName(err, 'UniqueAttributeError'))))
                     {
                         attempts++;
-                        self.log.warn(
-                            'waitlist (%s) collision on queue ' +
+                        self.log.warn({ err: err },
+                            'waitlist collision on queue ' +
                             'initialization after %s attempts, retrying',
-                            err.name,
                             attempts);
                         process.nextTick(function () {
                             self.ensureServerQueue(wfcb);
@@ -743,8 +741,9 @@ function (ticket, serverqueue, etag, callback) {
         },
         function (wfcb) {
             moray.batch(data, function (err, meta) {
-                if (err && (err.name === 'EtagConflictError' ||
-                           (err.name === 'UniqueAttributeError')))
+                if (err &&
+                   (VError.hasCauseWithName(err, 'EtagConflictError') ||
+                   (VError.hasCauseWithName(err, 'UniqueAttributeError'))))
                 {
                     process.nextTick(function () {
                         self.ensureServerQueue(function (err2, resp) {
@@ -856,8 +855,9 @@ function (ticket, serverqueue, etag, callback) {
         },
         function (wfcb) {
             moray.batch(data, function (err, meta) {
-                if (err && (err.name === 'EtagConflictError' ||
-                           (err.name === 'UniqueAttributeError')))
+                if (err &&
+                   (VError.hasCauseWithName(err, 'EtagConflictError') ||
+                   (VError.hasCauseWithName(err, 'UniqueAttributeError'))))
                 {
                     process.nextTick(function () {
                         self.ensureServerQueue(function (err2, resp) {
@@ -971,8 +971,9 @@ function (ticket, serverqueue, etag, callback) {
             self.log.info({ batch: data },
                           'doing batch write after finishing %s', ticket.uuid);
             moray.batch(data, function (err, meta) {
-                if (err && (err.name === 'EtagConflictError' ||
-                           (err.name === 'UniqueAttributeError')))
+                if (err &&
+                   (VError.hasCauseWithName(err, 'EtagConflictError') ||
+                   (VError.hasCauseWithName(err, 'UniqueAttributeError'))))
                 {
                     process.nextTick(function () {
                         self.ensureServerQueue(function (err2, resp) {
@@ -1046,8 +1047,8 @@ function (ticket, serverqueue, etag, callback) {
 
     var moray = ModelWaitlist.getMoray();
     moray.batch(data, function (err, meta) {
-        if (err && (err.name === 'EtagConflictError' ||
-                   (err.name === 'UniqueAttributeError')))
+        if (err && (VError.hasCauseWithName(err, 'EtagConflictError') ||
+                   (VError.hasCauseWithName(err, 'UniqueAttributeError'))))
         {
             process.nextTick(function () {
                 self.ensureServerQueue(function (err2, resp) {
@@ -1079,7 +1080,7 @@ ModelWaitlist.prototype.createTicket = function (params, callback) {
     assert.string(params.id, 'params.id');
     assert.string(params.expires_at, 'params.expires_at');
 
-    var ticket_uuid = libuuid.v4();
+    var ticket_uuid = libuuid.create();
 
     var serverqueue = null;
     var etag = null;
@@ -1180,14 +1181,14 @@ ModelWaitlist.prototype.expireTicket = function (ticket_uuid, callback) {
             ModelWaitlist.getTicket(ticket_uuid,
                 function (geterror, respticket) {
                     if (geterror) {
-                        wfcb(new verror.VError(
+                        wfcb(new VError(
                             geterror, 'failed to load ticket %s',
                             ticket_uuid));
                         return;
                     }
 
                     if (!respticket) {
-                        wfcb(new verror.VError(
+                        wfcb(new VError(
                             'no such ticket %s', ticket_uuid));
                         return;
                     }
@@ -1202,7 +1203,7 @@ ModelWaitlist.prototype.expireTicket = function (ticket_uuid, callback) {
             wl = new ModelWaitlist({ uuid: ticket.server_uuid });
             wl.getServerQueue(function (err, respserverqueue, res) {
                 if (err) {
-                    callback(verror.VError(
+                    callback(VError(
                         err, 'loading waitlist queue for server %s',
                         ticket.server_uuid));
                     return;
@@ -1249,14 +1250,13 @@ function (ticket_uuid, callback) {
             ModelWaitlist.getTicket(ticket_uuid,
                 function (geterror, respticket) {
                     if (geterror) {
-                        wfcb(new verror.VError(
-                            geterror, 'failed to load ticket %s', ticket_uuid));
+                        wfcb(new VError(geterror, 'failed to load ticket %s',
+                                        ticket_uuid));
                         return;
                     }
 
                     if (!respticket) {
-                        wfcb(new verror.VError(
-                            'no such ticket %s', ticket_uuid));
+                        wfcb(new VError('no such ticket %s', ticket_uuid));
                         return;
                     }
 
@@ -1270,7 +1270,7 @@ function (ticket_uuid, callback) {
             wl = new ModelWaitlist({ uuid: ticket.server_uuid });
             wl.getServerQueue(function (err, respserverqueue, res) {
                 if (err) {
-                    callback(verror.VError(
+                    callback(VError(
                         err, 'loading waitlist queue for server %s',
                         ticket.server_uuid));
                     return;
@@ -1432,7 +1432,7 @@ ModelWaitlist.prototype.updateTicket = function (uuid, params, callback) {
     ModelWaitlist.getTicket(uuid, function (geterror, ticket) {
         if (geterror) {
             callback(
-                verror.VError(geterror, 'failed to retrieve ticket %s', uuid));
+                VError(geterror, 'failed to retrieve ticket %s', uuid));
             return;
         }
 
@@ -1449,7 +1449,7 @@ ModelWaitlist.prototype.updateTicket = function (uuid, params, callback) {
             function (puterror) {
                 if (puterror) {
                     callback(
-                        verror.VError(puterror,
+                        VError(puterror,
                             'failed to store updated ticket'));
                     return;
                 }
diff --git a/lib/server.js b/lib/server.js
index b76ffc4..b920924 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -12,6 +12,7 @@ var os = require('os');
 var restify = require('restify');
 var restifyValidator = require('restify-validator');
 var trace_event = require('trace-event');
+var formatJSON = require('restify/lib/formatters/json');
 
 var endpoints = require('./endpoints/index');
 var request_seq_id = 0;
@@ -21,7 +22,14 @@ function createServer(options) {
     var cnapi = restify.createServer({
         name: 'Compute Node API',
         log: options.log,
-        handleUpgrades: true
+        handleUpgrades: true,
+        formatters: {
+            'application/json': formatJSON,
+            'text/plain': formatJSON,
+            'application/octet-stream': formatJSON,
+            'application/x-json-stream': formatJSON,
+            '*/*': formatJSON
+        }
     });
 
     cnapi.use(restify.requestLogger());
diff --git a/lib/validation/endpoints.js b/lib/validation/endpoints.js
index ed9ae95..fad2296 100644
--- a/lib/validation/endpoints.js
+++ b/lib/validation/endpoints.js
@@ -6,7 +6,7 @@
  */
 
 var sprintf = require('sprintf').sprintf;
-var verror = require('verror');
+var VError = require('verror');
 var restify = require('restify');
 var restify_validator = require('restify-validator');
 
@@ -85,7 +85,7 @@ function ensureParamsValid(req, res, paramRules, opts) {
             switch (ruleName) {
                 case 'optional':
                     if (Number(ruleIdx) !== 0) {
-                        throw new verror.VError(
+                        throw new VError(
                             'Rule \'optional\' first must be'
                             + ' first rule specified ruleIdx (%s)',
                             ruleIdx);
@@ -217,7 +217,7 @@ function ensureParamsValid(req, res, paramRules, opts) {
             }
 
             if (!assertion[ruleName]) {
-                throw new verror.VError('Unknown rule: %s', ruleName);
+                throw new VError('Unknown rule: %s', ruleName);
             }
 
             assertion[ruleName].apply(assertion, rule.slice(1));
diff --git a/package.json b/package.json
index 693c140..5393433 100644
--- a/package.json
+++ b/package.json
@@ -5,35 +5,32 @@
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
-    "amqp": "git+https://github.com/postwait/node-amqp.git#7a421793796bf66f5741282624c3db3ae266b3b5",
-    "assert-plus": "0.1.5",
+    "amqp": "git+https://github.com/postwait/node-amqp.git#1d30ce1",
+    "assert-plus": "1.0.0",
     "async": "1.5.2",
-    "bunyan": "1.3.4",
+    "bunyan": "1.8.5",
     "dapi": "git+https://github.com/joyent/sdc-designation.git#db24809071ed2c2e5fe26fbd0b8d27d4b0f01d0a",
-    "deep-equal": "git+https://github.com/substack/node-deep-equal.git#b2cfeb95da6982f8bc2e676231820a3a47385db3",
+    "deep-equal": "1.0.1",
     "dox": "0.4.1",
     "effluent-logger": "git+https://github.com/joshwilsdon/effluent-logger.git#d662f161a07f94045ad2afb45442931511c40e51",
-    "filed": "0.0.5",
-    "jsprim": "1.3.0",
-    "memwatch": "git+https://github.com/lloyd/node-memwatch.git#475ce024a53c74ad5baff27003b81499896e81a5",
-    "moray": "git+https://github.com/joyent/node-moray.git#fd5781bc",
-    "node-uuid": "1.2.0",
-    "nodeunit": "0.9.1",
-    "once": "1.3.0",
-    "restify": "^3.0.1",
-    "restify-validator": "0.3.0",
-    "sdc-clients": "git+https://github.com/joyent/node-sdc-clients.git#121bd661b8301a040677f65a289d59043171ce01",
-    "sprintf": "0.1.1",
+    "jsprim": "1.3.1",
+    "moray": "2.0.1",
+    "libuuid": "0.2.1",
+    "nodeunit": "0.10.2",
+    "once": "1.4.0",
+    "restify": "4.3.0",
+    "restify-validator": "0.3.1",
+    "sdc-clients": "10.0.3",
+    "sprintf": "0.1.5",
     "trace-event": "1.3.0",
-    "vasync": "git+https://github.com/davepacheco/node-vasync.git#e8743bb07a09dd83ea2df7e6d241c8a78b67aec6",
-    "verror": "1.3.4",
-    "watershed": "0.3.0",
-    "wf-client": "git+https://github.com/joyent/sdc-wf-client.git#a8590b497e40aea87610fa1c370fcbed64f43367",
+    "vasync": "1.6.4",
+    "verror": "1.9.0",
+    "wf-client": "0.2.0",
     "wf-shared": "git+https://github.com/joyent/sdc-wf-shared.git#9aed2e8"
   },
   "devDependencies": {
     "ejs": "^2.4.1",
-    "file": "0.2.1"
+    "file": "0.2.2"
   },
   "sdcDependencies": {
     "config-agent": ">=1.1.0"
diff --git a/scripts/cnapi-delete-all-servers.sh b/scripts/cnapi-delete-all-servers.sh
index b09820d..53bd340 100755
--- a/scripts/cnapi-delete-all-servers.sh
+++ b/scripts/cnapi-delete-all-servers.sh
@@ -6,7 +6,7 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2016, Joyent, Inc.
 #
 
 set -x xtrace
@@ -21,6 +21,8 @@ zlogin $UUID svcadm disable cnapi
 zlogin $UUID /opt/smartdc/cnapi/{build/node/bin/node,node_modules/.bin/delbucket} -h $CONFIG_moray_admin_ips cnapi_servers &
 zlogin $UUID /opt/smartdc/cnapi/{build/node/bin/node,node_modules/.bin/delbucket} -h $CONFIG_moray_admin_ips cnapi_waitlist_tickets &
 zlogin $UUID /opt/smartdc/cnapi/{build/node/bin/node,node_modules/.bin/delbucket} -h $CONFIG_moray_admin_ips cnapi_waitlist_queues &
+zlogin $UUID /opt/smartdc/cnapi/{build/node/bin/node,node_modules/.bin/delbucket} -h $CONFIG_moray_admin_ips cnapi_status &
+zlogin $UUID /opt/smartdc/cnapi/{build/node/bin/node,node_modules/.bin/delbucket} -h $CONFIG_moray_admin_ips cnapi_tasks &
 
 wait
 zlogin $UUID svcadm enable cnapi
