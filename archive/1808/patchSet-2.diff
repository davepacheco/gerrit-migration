From 093397a7bdc2f58cac85b3e845ce8ffdf196a9f3 Mon Sep 17 00:00:00 2001
From: Todd Whiteman <todd.whiteman@joyent.com>
Date: Wed, 19 Apr 2017 09:23:48 -0700
Subject: [PATCH] DOCKER-722 `docker network *` support

---
 lib/endpoints/index.js    |   3 +-
 lib/endpoints/networks.js | 140 ++++++++++++++++++++++++++++++++++++++
 2 files changed, 142 insertions(+), 1 deletion(-)
 create mode 100644 lib/endpoints/networks.js

diff --git a/lib/endpoints/index.js b/lib/endpoints/index.js
index 46afc2b..18141cf 100644
--- a/lib/endpoints/index.js
+++ b/lib/endpoints/index.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 
@@ -25,6 +25,7 @@ var toRegister = {
     '/exec': require('./exec'),
     '/images': require('./images'),
     '/info': require('./info'),
+    '/networks': require('./networks'),
     '/version': require('./version')
 };
 
diff --git a/lib/endpoints/networks.js b/lib/endpoints/networks.js
new file mode 100644
index 0000000..c5ac33a
--- /dev/null
+++ b/lib/endpoints/networks.js
@@ -0,0 +1,140 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+var restify = require('restify');
+
+var errors = require('../errors');
+
+
+
+// ---- endpoint handlers
+
+/**
+ * GET /networks
+ */
+function networkList(req, res, next) {
+    return next(new errors.NotImplementedError('network ls'));
+}
+
+
+/**
+ * POST /networks/create
+ */
+function networkCreate(req, res, next) {
+    return next(new errors.NotImplementedError('network create'));
+}
+
+
+/**
+ * DELETE /networks/:id
+ */
+function networkDelete(req, res, next) {
+    return next(new errors.NotImplementedError('network rm'));
+}
+
+
+/**
+ * GET /networks/:id
+ */
+function networkInspect(req, res, next) {
+    return next(new errors.NotImplementedError('network inspect'));
+}
+
+
+/**
+ * POST /networks/:id/connect
+ */
+function networkConnect(req, res, next) {
+    return next(new errors.NotImplementedError('network connect'));
+}
+
+
+/**
+ * POST /networks/:id/disconnect
+ */
+function networkDisconnect(req, res, next) {
+    return next(new errors.NotImplementedError('network disconnect'));
+}
+
+
+/**
+ * POST /networks/prune
+ */
+function networkPrune(req, res, next) {
+    return next(new errors.NotImplementedError('network prune'));
+}
+
+
+
+/**
+ * Register all endpoints with the restify server
+ */
+function register(http, before) {
+
+    function reqParamsId(req, res, next) {
+        req.params.id = unescape(req.params[1]);
+        next();
+    }
+
+    function getNetwork(req, res, next) {
+        // TODO: Find the network.
+        //req.network = findNetwork();
+        next();
+    }
+
+    var queryParserOpts = {
+        mapParams: false,
+        // See: ZAPI-744:
+        allowDots: false,
+        plainObjects: false
+    };
+    var queryParser = restify.queryParser(queryParserOpts);
+
+    // GET '/:apiversion/networks'
+    http.get({ path: /^(\/v[^\/]+)?\/networks$/, name: 'NetworkList' },
+        before, queryParser, networkList);
+
+    // POST '/:apiversion/networks/create'
+    http.post({ path: /^(\/v[^\/]+)?\/networks\/create$/,
+        name: 'NetworkCreate' },
+        before,
+        restify.bodyParser(),
+        //validate.createNetwork,
+        queryParser,
+        networkCreate);
+
+    // DELETE '/:apiversion/networks/:id'
+    http.del({ path: /^(\/v[^\/]+)?\/networks\/([^\/]+)$/,
+        name: 'NetworkDelete' }, before, reqParamsId, getNetwork,
+        networkDelete);
+
+    // GET '/:apiversion/networks/:id'
+    http.get({ path: /^(\/v[^\/]+)?\/networks\/([^\/]+)$/,
+        name: 'NetworkInspect' }, before, reqParamsId, getNetwork,
+        networkInspect);
+
+    // POST '/:apiversion/networks/:id/connect'
+    http.post({ path: /^(\/v[^\/]+)?\/networks\/([^\/]+)\/connect$/,
+        name: 'NetworkConnect' }, before, reqParamsId, getNetwork,
+        networkConnect);
+
+    // POST '/:apiversion/networks/:id/disconnect'
+    http.post({ path: /^(\/v[^\/]+)?\/networks\/([^\/]+)\/disconnect$/,
+        name: 'NetworkDisconnect' }, before, reqParamsId, getNetwork,
+        networkDisconnect);
+
+    // POST '/:apiversion/networks/prune'
+    http.post({ path: /^(\/v[^\/]+)?\/networks\/prune$/,
+        name: 'NetworkPrune' }, before, networkPrune);
+}
+
+module.exports = {
+    register: register
+};
-- 
2.21.0

