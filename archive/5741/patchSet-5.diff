commit b3d18bb95f99d70902e049dee0caab43cc27ea84
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2019-06-03T18:24:55+00:00 (4 months ago)
    
    joyent/node-lockfd#10 Update to newer ESLint

diff --git a/tools/eslint.node.conf b/.eslintrc
similarity index 72%
rename from tools/eslint.node.conf
rename to .eslintrc
index 698df05..38c7c05 100644
--- a/tools/eslint.node.conf
+++ b/.eslintrc
@@ -15,6 +15,11 @@
         "node": true
     },
     "rules": {
+        // Style:
+        "func-style": [ "error", "declaration" ],
+        "multiline-comment-style": [ "error", "starred-block" ],
+
+        // Disabled:
         "brace-style": "off",
         "no-mixed-spaces-and-tabs": "off"
     }
diff --git a/.gitignore b/.gitignore
index 255673d..9ffbc78 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,6 +1,6 @@
 .*.swp
 /0-npm-stamp
-/downloads/
+/build
 /lib/*.node
 /main.js
 /node/
diff --git a/.jshintrc b/.jshintrc
deleted file mode 100644
index 8a5125e..0000000
--- a/.jshintrc
+++ /dev/null
@@ -1,13 +0,0 @@
-{
-	"smarttabs": true,
-	"sub": true,
-	"node": true,
-	"unused": "vars",
-	"undef": true,
-	"eqeqeq": true,
-	"latedef": "nofunc",
-	"quotmark": "single",
-	"trailing": true,
-	"maxlen": 80,
-	"funcscope": true
-}
diff --git a/.npmignore b/.npmignore
index f8fc4d4..2516eea 100644
--- a/.npmignore
+++ b/.npmignore
@@ -1,6 +1,15 @@
+.*.swp
+*.tgz
+/0-npm-stamp
 /Makefile
+/build
 /deps
 /test
 /tools
 /.gitmodules
 /.npmignore
+/.eslintrc
+/lib/*.node
+/src/*.o
+/src/mapfile_node
+/src/v8plus_*
diff --git a/Makefile b/Makefile
index de581d3..cd18593 100644
--- a/Makefile
+++ b/Makefile
@@ -5,19 +5,23 @@
 #
 
 #
-# Copyright 2016, Joyent, Inc.
+# Copyright 2019, Joyent, Inc.
 #
 
 #
 # node-lockfd Makefile
 #
 
+NAME	:= lockfd
+
 #
 # Tools
 #
 
 TAPE	:= ./node_modules/.bin/tape
-NPM	:= npm
+NODE := node
+NPM := $(shell which npm)
+NPM_EXEC=$(NPM)
 
 #
 # Files
@@ -26,34 +30,28 @@ NPM	:= npm
 JS_FILES	:= $(shell find lib test -name '*.js')
 JSSTYLE_FILES	= $(JS_FILES)
 JSSTYLE_FLAGS	= -f tools/jsstyle.conf
-ESLINT		= ./node_modules/.bin/eslint
-ESLINT_CONF	= tools/eslint.node.conf
 ESLINT_FILES	= $(JS_FILES)
 JSON_FILES	:= package.json
 LOCKFD_BINDING	:= ./lib/lockfd_binding.node
 
 include ./tools/mk/Makefile.defs
 
-TOP             := $(shell pwd)
+TOP	:= $(shell pwd)
 
 #
 # Repo-specific targets
 #
 
 .PHONY: all
-all: $(LOCKFD_BINDING) | ./node_modules
-	$(NPM) install
+all: $(LOCKFD_BINDING)
 
-./node_modules:
+./node_modules/v8plus: | $(NPM_EXEC)
 	$(NPM) install
 
-$(LOCKFD_BINDING): | ./node_modules
+$(LOCKFD_BINDING): | ./node_modules/v8plus
 	cd src && make
 
-$(ESLINT):
-	$(NPM) install
-
-$(TAPE):
+$(TAPE): | $(NPM_EXEC)
 	$(NPM) install
 
 CLEAN_FILES += $(LOCKFD_BINDING) src/lockfd.o src/v8plus_errno.h ./node_modules
@@ -66,10 +64,6 @@ test: $(TAPE)
 		[[ $$? == "0" ]] || exit 1; \
 	done)
 
-.PHONY: check
-check:: $(ESLINT)
-	$(ESLINT) -c $(ESLINT_CONF) $(ESLINT_FILES)
-
 # Ensure CHANGES.md and package.json have the same version.
 .PHONY: versioncheck
 versioncheck:
diff --git a/package.json b/package.json
index 9c4b9c1..c11b237 100644
--- a/package.json
+++ b/package.json
@@ -14,8 +14,8 @@
   },
   "devDependencies": {
     "tape": "4.5.1",
-    "eslint": "2.13.1",
-    "eslint-plugin-joyent": "1.0.1"
+    "eslint": "4.13.1",
+    "eslint-plugin-joyent": "~2.1.0"
   },
   "license": "MIT"
 }
diff --git a/test/unit/flock.test.js b/test/unit/flock.test.js
index e81713f..a0cedf5 100644
--- a/test/unit/flock.test.js
+++ b/test/unit/flock.test.js
@@ -32,6 +32,7 @@ function asyncTestRun(t, path, ltype, callback) {
 				mod_fs.closeSync(fd1);
 				mod_fs.closeSync(fd2);
 				callback(results);
+				return;
 			}
 		});
 	}
@@ -63,6 +64,7 @@ function syncTestRun(_, path, ltype, callback) {
 		} else if (done === 2) {
 			mod_fs.closeSync(fd1);
 			callback(results);
+			return;
 		}
 	}
 
diff --git a/tools/mk/Makefile.defs b/tools/mk/Makefile.defs
index 85139d7..81caa42 100644
--- a/tools/mk/Makefile.defs
+++ b/tools/mk/Makefile.defs
@@ -1,4 +1,3 @@
-# -*- mode: makefile -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,16 +5,27 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright 2019 Joyent, Inc.
 #
 
 #
 # Makefile.defs: common defines.
+
+#
+# NOTE: This makefile comes from the "eng" repo. If you find yourself changing
+# this file, you should ensure that you test all consumers of it, since
+# eng.git is a git submodule of several repositories. After testing, push
+# changes to the eng.git gerrit project as normal, then do the following for
+# each component that uses eng.git, likely reusing the original ticket subject
+# for the commit message as was used for the eng.git push.
+#
+#    $ git submodule update --remote deps/eng
+#    $ git add deps/eng
+#    $ git commit -m "TOOLS-xxxx some description" deps/eng
+#
+# Then push those changes to gerrit as usual for review.
 #
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
+
 #
 # This makefile defines some useful defines. Include it at the top of
 # your Makefile.
@@ -28,8 +38,22 @@
 #			the TIMESTAMP envvar (used by MG-based builds).
 #	STAMP		A build stamp to use in built package names.
 #
+#	MAKE_STAMPS_DIR	The directory in which make stamp files are to be
+#			created.  See comments below on expensive targets.
+#
+#	CACHE_DIR	A directory tree in which temporary files may be
+#			collected by download, tarball extraction, etc.  This
+#			directory is completely removed by "make distclean".
+#			Files in this directory are not intended to be shipped.
+#
 
-TOP := $(shell pwd)
+#
+# Note that variables that start with "ENGBLD_" are ones we expect developers
+# may want to override in their environment, usually to modify build output
+# destinations, but sometimes to modify the behavior of the build.
+#
+
+TOP ?= $(shell pwd)
 
 #
 # Mountain Gorilla-spec'd versioning.
@@ -49,3 +73,143 @@ STAMP := $(BRANCH)-$(TIMESTAMP)-$(_GITDESCRIBE)
 
 # node-gyp will print build info useful for debugging with V=1
 export V=1
+
+CACHE_DIR ?=		cache
+DISTCLEAN_FILES +=	$(CACHE_DIR)
+
+# Many components assemble *-pkg*.gz tarballs as build products
+CLEAN_FILES +=  $(NAME)-pkg*.gz
+
+#
+# EXPENSIVE TARGETS AND MAKE STAMP FILES
+#
+# Targets which are expensive to run and lack a single file that marks
+# completion are difficult to track with make; e.g., "npm install".  One
+# solution to this problem is to create "stamp" files with symbolic names which
+# are created as the final step in a complex make rule in order to mark
+# completion.
+#
+# In order to make these more uniform, and easier to target with "make clean",
+# we will attempt to store them under a single directory.  Note that these
+# files are never targets for shipping in build artefacts.
+#
+# Stamp-backed targets come in several parts.  First, a macro should be defined
+# which names a file in the MAKE_STAMPS_DIR directory.  Then, a target which
+# creates this stamp file must be provided.  The recipe for this target should
+# use MAKE_STAMP_REMOVE and MAKE_STAMP_CREATE to perform the appropriate stamp
+# management.
+#
+# For example:
+#
+# --- Makefile.*.defs:
+#
+#	$(STAMP_EXPENSIVE_RESULT) := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# --- Makefile.*.targ:
+#
+#	$(STAMP_EXPENSIVE_RESULT): input/file another/input/file
+#		$(MAKE_STAMP_REMOVE)
+#		rm -rf output_tree/  # <--- ensure a clean slate
+#		expensive_program -o output_tree/ $^
+#		$(MAKE_STAMP_CREATE)
+#
+# NOTE: Every stamp file is exposed as an implicit "stamp-$STAMP_NAME" target.
+# The example above could be built manually by invoking:
+#
+#	make stamp-expensive-result
+#
+MAKE_STAMPS_DIR ?=	make_stamps
+CLEAN_FILES +=		$(MAKE_STAMPS_DIR)
+
+MAKE_STAMP_REMOVE =	mkdir -p $(@D); rm -f $(@)
+MAKE_STAMP_CREATE =	mkdir -p $(@D); touch $(@)
+
+#
+# Nearly all components in Triton/Manta currently require the build machine to
+# be running this platform image, validated as part of validate-buildenv.sh.
+# Makefiles that allow newer platforms should override this.
+#
+BUILD_PLATFORM=20151126T062538Z
+
+#
+# The manta path where the bits-upload target stores build artifacts, via
+# ./deps/eng/tools/bits-upload.sh. This can be a Manta path, or an absolute
+# filesystem path. If the latter, be sure to also set
+# $ENGBLD_BITS_UPLOAD_LOCAL=true, see below.
+#
+ENGBLD_DEST_OUT_PATH ?= /public/builds
+
+#
+# Makefiles must declare whether they need to construct a ZFS image
+# by setting ENGBLD_USE_BUILDIMAGE to 'true'. We use this mechanism
+# so that we can conditionally add a buildimage dependency to the
+# 'bits-upload' target.
+#
+ifeq ($(ENGBLD_USE_BUILDIMAGE), true)
+BUILDIMAGE_TARG = buildimage
+else
+BUILDIMAGE_TARG =
+endif
+
+#
+# If bits-upload should use a local dest_dir, set that argument based on
+# $ENGBLD_BITS_UPLOAD_LOCAL in the environment.
+#
+ifeq ($(ENGBLD_BITS_UPLOAD_LOCAL), true)
+BITS_UPLOAD_LOCAL_ARG = -L
+else
+BITS_UPLOAD_LOCAL_ARG =
+endif
+
+#
+# If bits-upload should publish images to updates.joyent.com, set that argument
+# based on $ENGBLD_BITS_UPLOAD_IMGAPI in the environment.
+#
+ifeq ($(ENGBLD_BITS_UPLOAD_IMGAPI), true)
+BITS_UPLOAD_IMGAPI_ARG = -p
+else
+BITS_UPLOAD_IMGAPI_ARG =
+endif
+
+#
+# A directory for build artifacts, used by the bits-upload, publish and
+# buildimage targets. If BITS_DIR is set, use that instead, to remain
+# compatible with MG-driven builds.
+#
+ENGBLD_BITS_DIR ?= $(TOP)/bits
+ifdef BITS_DIR
+  ENGBLD_BITS_DIR = $(BITS_DIR)
+endif
+
+#
+# A pointer to the buildimage tool, and a stamp-name used to install
+# its dependencies.
+#
+BUILDIMAGE = $(TOP)/deps/eng/tools/buildimage/bin/buildimage
+STAMP_BUILDIMAGE_PREP := $(MAKE_STAMPS_DIR)/buildimage-prep
+
+#
+# Metadata needed by buildimage to construct the image.
+# This gets used when generating the image's manifest file.
+#
+BUILDIMAGE_VERSION	?= $(STAMP)
+BUILDIMAGE_STAGEDIR = /tmp/buildimage-$(NAME)-$(STAMP)
+BUILDIMAGE_MF           ?= \
+    {"name": "$(BUILDIMAGE_NAME)",\
+    "description": "$(BUILDIMAGE_DESC)",\
+    "version": "$(BUILDIMAGE_VERSION)",\
+    "tags": {"smartdc_service": true}\
+    }
+
+#
+# Crude detection of whether we're likely to need to use
+# pfexec to gain root-like privileges. Note that this means
+# $(PFEXEC) will only be defined if we're running the build
+# as non-root.
+#
+UID = $(shell /usr/bin/id -u)
+ifeq ($(UID), 0)
+    PFEXEC=
+else
+    PFEXEC=/usr/bin/pfexec
+endif
diff --git a/tools/mk/Makefile.deps b/tools/mk/Makefile.deps
index 1cffbe7..1153809 100644
--- a/tools/mk/Makefile.deps
+++ b/tools/mk/Makefile.deps
@@ -1,4 +1,3 @@
-# -*- mode: makefile -*-
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,20 +5,26 @@
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2019, Joyent, Inc.
 #
 
 #
 # Makefile.deps: Makefile for including common tools as dependencies
 #
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
+
+#
+# NOTE: This makefile comes from the "eng" repo. If you find yourself changing
+# this file, you should ensure that you test all consumers of it, since
+# eng.git is a git submodule of several repositories. After testing, push
+# changes to the eng.git gerrit project as normal, then do the following for
+# each component that uses eng.git, likely reusing the original ticket subject
+# for the commit message as was used for the eng.git push.
+#
+#    $ git submodule update --remote deps/eng
+#    $ git add deps/eng
+#    $ git commit -m "TOOLS-xxxx some description" deps/eng
 #
-# This file is separate from Makefile.targ so that teams can choose
-# independently whether to use the common targets in Makefile.targ and the
-# common tools here.
+# Then push those changes to gerrit as usual for review.
 #
 
 #
@@ -44,6 +49,39 @@ JSSTYLE		?= $(JSSTYLE_EXEC)
 
 $(JSSTYLE_EXEC): | deps/jsstyle/.git
 
+#
+# eslint
+#
+ESLINT_EXEC	?= node_modules/.bin/eslint
+ifdef NODE
+    ESLINT	:= $(NODE) $(ESLINT_EXEC)
+else
+    ESLINT	?= $(ESLINT_EXEC)
+endif
+
+# Install eslint.
+#
+# The install of specific modules is to allow running "make check"
+# without having to do a complete install of all npm dependencies.
+#
+# NPM_EXEC will be defined if either of "Makefile.{node,node_prebuilt}.defs"
+# is included.
+ifdef NPM
+$(ESLINT_EXEC): package.json | $(NPM_EXEC)
+	ESLINT_VER=$$($(NODE) -e 'console.log(require("./package.json").devDependencies["eslint"] || "")') && \
+	    ESLINT_JOY_VER=$$($(NODE) -e 'console.log(require("./package.json").devDependencies["eslint-plugin-joyent"] || "")') && \
+	    [[ -n $$ESLINT_VER && -n $$ESLINT_JOY_VER ]] && \
+	    $(NPM) install --no-save eslint@$$ESLINT_VER eslint-plugin-joyent@$$ESLINT_JOY_VER && \
+	    touch $(ESLINT_EXEC)
+else
+$(ESLINT_EXEC): package.json
+	ESLINT_VER=$$(node -e 'console.log(require("./package.json").devDependencies["eslint"] || "")') && \
+	    ESLINT_JOY_VER=$$(node -e 'console.log(require("./package.json").devDependencies["eslint-plugin-joyent"] || "")') && \
+	    [[ -n $$ESLINT_VER && -n $$ESLINT_JOY_VER ]] && \
+	    npm install --no-save eslint@$$ESLINT_VER eslint-plugin-joyent@$$ESLINT_JOY_VER && \
+	    touch $(ESLINT_EXEC)
+endif
+
 #
 # restdown
 #
diff --git a/tools/mk/Makefile.targ b/tools/mk/Makefile.targ
index 16b15aa..a9e1044 100644
--- a/tools/mk/Makefile.targ
+++ b/tools/mk/Makefile.targ
@@ -1,40 +1,72 @@
-# -*- mode: makefile -*-
-#
+
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 #
 
 #
-# Copyright (c) 2014, Joyent, Inc.
+# Copyright (c) 2019, Joyent, Inc.
 #
 
 #
 # Makefile.targ: common targets.
 #
-# NOTE: This makefile comes from the "eng" repo. It's designed to be dropped
-# into other repos as-is without requiring any modifications. If you find
-# yourself changing this file, you should instead update the original copy in
-# eng.git and then update your repo to use the new version.
+
+#
+# NOTE: This makefile comes from the "eng" repo. If you find yourself changing
+# this file, you should ensure that you test all consumers of it, since
+# eng.git is a git submodule of several repositories. After testing, push
+# changes to the eng.git gerrit project as normal, then do the following for
+# each component that uses eng.git, likely reusing the original ticket subject
+# for the commit message as was used for the eng.git push.
+#
+#    $ git submodule update --remote deps/eng
+#    $ git add deps/eng
+#    $ git commit -m "TOOLS-xxxx some description" deps/eng
+#
+# Then push those changes to gerrit as usual for review.
+#
+
 #
 # This Makefile defines several useful targets and rules. You can use it by
 # including it from a Makefile that specifies some of the variables below.
 #
 # Targets defined in this Makefile:
 #
-#	check	Checks JavaScript files for lint and style
-#		Checks bash scripts for syntax
-#		Checks SMF manifests for validity against the SMF DTD
+#	bits-upload	Upload the bits produced by the component Makefile's
+#			'publish' target to Manta or a local filesystem,
+#			optionally publishing images to updates.joyent.com
+#
+#	bits-upload-latest
+#			As above, but use the bits/<component>/latest-build-stamp
+#			file to determine the $(STAMP) of the uploaded bits
 #
-#	clean	Removes built files
+#	buildimage	Builds an image
+#	check		Checks JavaScript files for lint and style
+#			Checks bash scripts for syntax
+#			Checks SMF manifests for validity against the SMF DTD
+#			Checks rust files using `cargo check`
 #
-#	docs	Builds restdown documentation in docs/
+#	clean		Removes built files
 #
-#	prepush	Depends on "check" and "test"
+#	docs		Builds restdown documentation in docs/
 #
-#	test	Does nothing (you should override this)
+#	prepublish	Is depended upon by "publish", saves the $(STAMP)
+#			of our last published bits, used by bits-upload.sh,
+#			as well as data about the build environment
 #
-#	xref	Generates cscope (source cross-reference index)
+#	prepush		Depends on "check" and "test"
+#
+#	show-buildenv	Emits the pkgsrc version required for this component,
+#			if available
+#
+#	test		Does nothing (you should override this)
+#
+#	validate-buildenv
+#			Runs a series of checks to determine if the build
+#			environment is valid for this component
+#
+#	xref		Generates cscope (source cross-reference index)
 #
 # For details on what these targets are supposed to do, see the Joyent
 # Engineering Guide.
@@ -70,13 +102,28 @@
 #
 #	JSSTYLE_FILES	JavaScript files to be style-checked
 #
+#	RUST_CODE	Set this to enable rust code syntax checks.
+#
 # You can also override these variables:
 #
 #	BASH		Path to bash (default: "bash")
 #
+#	BUILD		top-level directory for node binaries, generated docs,
+#			and any other build output (default: "build")
+#
+#	CARGO		Path to cargo (default: "cargo")
+#
 #	CSCOPE_DIRS	Directories to search for source files for the cscope
 #			index. (default: ".")
 #
+#	ENGBLD_BITS_UPLOAD_OVERRIDE
+#			Set this to allow a component Makefile to declare its
+#			own 'bits-upload' and 'bits-upload-latest' targets
+#
+#	ESLINT		Path to eslint (default: "eslint")
+#
+#	ESLINT_FLAGS	Additional flags to pass through to eslint
+#
 #	JSL		Path to JavaScriptLint (default: "jsl")
 #
 #	JSL_FLAGS_NODE	Additional flags to pass through to JSL
@@ -98,10 +145,12 @@
 # Defaults for the various tools we use.
 #
 BASH		?= bash
-BASHSTYLE	?= tools/bashstyle
+BASHSTYLE   	?= $(NODE) deps/eng/tools/bashstyle
+CARGO		?= cargo
 CP		?= cp
 CSCOPE		?= cscope
 CSCOPE_DIRS	?= .
+ESLINT		?= eslint
 JSL		?= jsl
 JSON		?= json
 JSSTYLE		?= jsstyle
@@ -122,8 +171,8 @@ endif
 #
 # Defaults for other fixed values.
 #
-BUILD		= build
-DISTCLEAN_FILES += $(BUILD)
+BUILD		?= build
+DISTCLEAN_FILES += $(BUILD) bits
 DOC_BUILD	= $(BUILD)/docs/public
 
 #
@@ -190,6 +239,12 @@ check-json: $(JSON_FILES:%=%.jsonchk)
 # a variable for the target itself *only if* the list of input files is
 # non-empty.  This avoids invoking the tool if there are no files to check.
 #
+
+ESLINT_TARGET = $(if $(ESLINT_FILES), check-eslint)
+.PHONY: check-eslint
+check-eslint: $(ESLINT_EXEC)
+	$(ESLINT) $(ESLINT_FLAGS) $(ESLINT_FILES)
+
 JSL_NODE_TARGET = $(if $(JSL_FILES_NODE), check-jsl-node)
 .PHONY: check-jsl-node
 check-jsl-node: $(JSL_EXEC)
@@ -208,8 +263,13 @@ JSSTYLE_TARGET = $(if $(JSSTYLE_FILES), check-jsstyle)
 check-jsstyle:  $(JSSTYLE_EXEC)
 	$(JSSTYLE) $(JSSTYLE_FLAGS) $(JSSTYLE_FILES)
 
+RUST_CHECK_TARGET = $(if $(RUST_CODE), check-rust)
+.PHONY: check-rust
+check-rust:
+	$(CARGO) check
+
 .PHONY: check
-check:: check-jsl check-json $(JSSTYLE_TARGET) check-bash
+check:: $(ESLINT_TARGET) check-jsl check-json $(JSSTYLE_TARGET) check-bash $(RUST_CHECK_TARGET)
 	@echo check ok
 
 .PHONY: clean
@@ -264,7 +324,7 @@ DOC_MEDIA_FILES_BUILD := $(DOC_MEDIA_FILES:%=$(DOC_BUILD)/media/%)
 # to get there.
 #
 .PHONY: docs
-docs:							\
+docs::							\
 	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.html)		\
 	$(DOC_FILES:%$(RESTDOWN_EXT)=$(DOC_BUILD)/%.json)		\
 	$(DOC_MEDIA_FILES_BUILD)
@@ -294,6 +354,7 @@ CLEAN_FILES +=					\
 $(DOC_MEDIA_FILES_BUILD): | $(DOC_MEDIA_DIRS_BUILD)
 
 $(DOC_BUILD)/%: docs/% | $(DOC_BUILD)
+	$(MKDIR) $(shell dirname $@)
 	$(CP) $< $@
 
 docs/%.json docs/%.html: docs/%$(RESTDOWN_EXT) | $(DOC_BUILD) $(RESTDOWN_EXEC) \
@@ -316,3 +377,184 @@ test:
 
 .PHONY: prepush
 prepush: check test
+
+#
+# Ensure we have a sane build environment. The script includes an escape
+# hatch in case of emergencies. set ENGBLD_SKIP_VALIDATE_BUILDENV=true in the
+# environment to have it always pass.
+#
+.PHONY: validate-buildenv
+validate-buildenv:
+	$(TOP)/deps/eng/tools/validate-buildenv.sh
+
+.PHONY: show-buildenv
+show-buildenv:
+	@$(TOP)/deps/eng/tools/validate-buildenv.sh -r
+
+#
+# Everything should depend on us having a valid build environment.
+#
+all release publish buildimage: validate-buildenv
+
+publish: prepublish
+
+#
+# Store some information about the build environment. The latest-build-stamp
+# file is used if running the 'bits-upload-latest' target. See bits-upload.sh.
+# When generating npm-ls.json output, we ignore errors since older versions
+# of npm seem to sometimes install packages that /opt/tools/bin/npm deems
+# "invalid". That shouldn't be allowed to fail the build.
+#
+.PHONY: prepublish
+prepublish:
+	-mkdir -p $(ENGBLD_BITS_DIR)/$(NAME)
+	echo $(STAMP) > $(ENGBLD_BITS_DIR)/$(NAME)/latest-build-stamp
+	@echo "Generating $(ENGBLD_BITS_DIR)/$(NAME)/build-environment"
+	@if [[ "$$(uname -s)" == "SunOS" ]]; then \
+		MAKE_PID=$$(/usr/bin/ps -o ppid= -p $$$$); \
+		BUILD_IMG_UUID=$$($(PFEXEC) /usr/sbin/mdata-get sdc:image_uuid); \
+		echo hostname: $$(/usr/bin/hostname) > $(ENGBLD_BITS_DIR)/$(NAME)/build-environment; \
+		/usr/bin/cat /etc/pkgsrc_version >> $(ENGBLD_BITS_DIR)/$(NAME)/build-environment; \
+		echo image_uuid: $$BUILD_IMG_UUID >> $(ENGBLD_BITS_DIR)/$(NAME)/build-environment; \
+	fi
+	@echo "Generating $(ENGBLD_BITS_DIR)/$(NAME)/npm-ls.json"
+	-/opt/tools/bin/npm ls --json > $(ENGBLD_BITS_DIR)/$(NAME)/npm-ls.json
+
+
+#
+# Transform the boolean into the appropriate cli flag
+#
+ifdef BUILDIMAGE_DO_PKGSRC_UPGRADE
+BUILDIMAGE_DO_PKGSRC_UPGRADE_ARGS=-u
+endif
+
+
+#
+# The list of pkgsrc packages that should be installed in the
+# image that the 'buildimage' target constructs. Set here rather than
+# in Makefile.defs to ensure it's always computed after $(BUILDIMAGE_PKGSRC)
+# is set.
+#
+ifdef BUILDIMAGE_PKGSRC
+BUILDIMAGE_PKGSRC_ARGS = -p $$(echo $(BUILDIMAGE_PKGSRC) | sed -e 's/ /,/g')
+else
+BUILDIMAGE_PKGSRC_ARGS =
+endif
+
+#
+# BUILDIMAGE_PKG should nearly always be set to $(TOP)/$(RELEASE_TARBALL),
+# but ensure RELEASE_TARBALL is set before setting that default.
+#
+ifeq ($(ENGBLD_USE_BUILDIMAGE), true)
+
+ifndef BUILDIMAGE_PKG
+  ifndef RELEASE_TARBALL
+    $(error "Error: RELEASE_TARBALL must be set before including Makefile.targ")
+  else
+    BUILDIMAGE_PKG=$(TOP)/$(RELEASE_TARBALL)
+  endif
+endif
+
+endif
+
+#
+# We add a guard to ensure that users haven't invoked 'make buildimage'
+# by accident. It's better to bail out early with an clear error message
+# if a user has not declared that their component should $ENGBLD_USE_BUILDIMAGE.
+#
+.PHONY: buildimage
+buildimage: stamp-buildimage-prep release $(AGENTS:%=%-prebuilt)
+	if [[ "$(ENGBLD_USE_BUILDIMAGE)" != "true" ]]; then \
+		echo "This component is not configured to use buildimage."; \
+		echo "Set 'ENGBLD_USE_BUILDIMAGE=true' in the component Makefile otherwise."; \
+		exit 1; \
+	fi
+	mkdir -p $(ENGBLD_BITS_DIR)/$(NAME)
+	mkdir -p $(BUILDIMAGE_STAGEDIR)
+	cd $(BUILDIMAGE_STAGEDIR) ; \
+	$(TOP)/deps/eng/tools/buildimage-extract-pkg.sh $(BUILDIMAGE_PKG)
+	$(PFEXEC) chown -R root:root $(BUILDIMAGE_STAGEDIR)
+	cd $(BUILDIMAGE_STAGEDIR); \
+	$(PFEXEC) $(BUILDIMAGE) \
+		-i $(BASE_IMAGE_UUID) \
+		-d $(BUILDIMAGE_STAGEDIR)/root \
+		-m '$(BUILDIMAGE_MF)' \
+		$(BUILDIMAGE_DO_PKGSRC_UPGRADE_ARGS) \
+		$(BUILDIMAGE_PKGSRC_ARGS) \
+		-a \
+		-P $(NAME)-zfs
+	cp /tmp/$(NAME)-zfs-$(BUILDIMAGE_VERSION).zfs.gz $(ENGBLD_BITS_DIR)/$(NAME)
+	cp /tmp/$(NAME)-zfs-$(BUILDIMAGE_VERSION).imgmanifest $(ENGBLD_BITS_DIR)/$(NAME)
+	cp /tmp/$(NAME)-zfs-$(BUILDIMAGE_VERSION).pkgaudit $(ENGBLD_BITS_DIR)/$(NAME)
+	$(PFEXEC) rm /tmp/$(NAME)-zfs-$(BUILDIMAGE_VERSION).zfs.gz
+	$(PFEXEC) rm /tmp/$(NAME)-zfs-$(BUILDIMAGE_VERSION).imgmanifest
+	$(PFEXEC) rm /tmp/$(NAME)-zfs-$(BUILDIMAGE_VERSION).pkgaudit
+	$(PFEXEC) rm -rf $(BUILDIMAGE_STAGEDIR)
+
+#
+# Upload the build products from this component's ./bits directory
+# to either manta or a filesystem path. We allow consumers to override
+# this, supplying their own custom bits-upload* targets by setting
+# ENGBLD_BITS_UPLOAD_OVERRIDE.
+#
+ifndef ENGBLD_BITS_UPLOAD_OVERRIDE
+.PHONY: bits-upload
+bits-upload: publish $(BUILDIMAGE_TARG)
+	$(TOP)/deps/eng/tools/bits-upload.sh \
+		-b $(BRANCH) \
+		-B "$(TRY_BRANCH)" \
+		$(BITS_UPLOAD_LOCAL_ARG) \
+		$(BITS_UPLOAD_IMGAPI_ARG) \
+		-d $(ENGBLD_DEST_OUT_PATH)/$(NAME) \
+		-D $(ENGBLD_BITS_DIR) \
+		-n $(NAME) \
+		-t $(STAMP)
+
+#
+# A convenience target that doesn't require us to do a full build. We derive
+# the timestamp for the bits being uploaded from the latest-build-stamp file
+# in build/bits directory, produced by the 'prepublish' target.
+#
+.PHONY: bits-upload-latest
+bits-upload-latest:
+	$(TOP)/deps/eng/tools/bits-upload.sh \
+		-b $(BRANCH) \
+		-B "$(TRY_BRANCH)" \
+		$(BITS_UPLOAD_LOCAL_ARG) \
+		$(BITS_UPLOAD_IMGAPI_ARG) \
+		-d $(ENGBLD_DEST_OUT_PATH)/$(NAME) \
+		-D $(ENGBLD_BITS_DIR) \
+		-n $(NAME)
+endif
+
+#
+# Do an npm install for the dependencies of buildimage itself.
+#
+$(STAMP_BUILDIMAGE_PREP):
+	$(MAKE_STAMP_REMOVE); \
+	cd $(TOP)/deps/eng/tools/buildimage; \
+	$(MAKE) buildimage-prep
+	$(MAKE_STAMP_CREATE)
+
+#
+# This rule automatically exposes every "stamp" file as a target that can be
+# invoked manually as "stamp-$STAMP_NAME".  For example, if a stamp has been
+# defined thus:
+#
+#	STAMP_EXPENSIVE_RESULT := $(MAKE_STAMPS_DIR)/expensive-result
+#
+# ... this can be invoked manually as "make stamp-expensive-result".  Note that
+# these phony targets are essentially just for interactive usage.  Targets
+# should be specified to depend on the macro containing the stamp file name.
+#
+# See also the comments in "Makefile.defs".
+#
+stamp-%: $(MAKE_STAMPS_DIR)/%
+	@:
+
+#
+# Allow for easier Makefile debugging. 'make print-FOO' will emit the value
+# of $(FOO).
+#
+print-%:
+	@echo '$*=$($*)'
