{"project":"joyent/illumos-joyent","branch":"master","id":"Id43a49656532bc493e2adc48a2522e385285ff9b","number":"2572","subject":"Bits for review","owner":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"url":"https://cr.joyent.us/2572","commitMessage":"Bits for review\n","createdOn":1505410578,"lastUpdated":1515102248,"open":false,"status":"ABANDONED","comments":[{"timestamp":1505410578,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Uploaded patch set 1."},{"timestamp":1505410686,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Patch Set 2: Commit message was updated."},{"timestamp":1505439156,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 2:\n\n(152 comments)\n\nWhile there\u0027s a lot of feedback here, there\u0027s a lot of good stuff here. I haven\u0027t gone through the ike related bits and was focusing on a lot of the surround."},{"timestamp":1505444502,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 2:\n\n(11 comments)\n\nMore to come..."},{"timestamp":1505510706,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 2:\n\n(14 comments)\n\nStill more to come..."},{"timestamp":1505527518,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Patch Set 2:\n\n(43 comments)\n\nSome initial comments -- I\u0027ll get to more of them next week."},{"timestamp":1505747516,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Patch Set 2:\n\n(56 comments)\n\nCurrent batch of responses.. Still more to come.."},{"timestamp":1505749724,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 2:\n\n(1 comment)"},{"timestamp":1505760641,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 2:\n\n(16 comments)\n\nMore to come."},{"timestamp":1505768323,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Patch Set 2:\n\n(12 comments)\n\nMore responses..."},{"timestamp":1505771175,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 2:\n\n(8 comments)\n\nMore to come."},{"timestamp":1505782767,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 2:\n\n(8 comments)\n\nPardon the mere trickle tonight."},{"timestamp":1505793138,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Patch Set 2:\n\n(11 comments)"},{"timestamp":1505835034,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 2:\n\n(10 comments)\n\nI think this is it for now.  Will have to read your comments and/or wait for the next update."},{"timestamp":1505854648,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 2:\n\n(1 comment)\n\nWhile looking at NAT_T stuff..."},{"timestamp":1505926681,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Patch Set 2:\n\n(7 comments)"},{"timestamp":1505931379,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 2:\n\n(1 comment)"},{"timestamp":1505954597,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Patch Set 2:\n\n(36 comments)"},{"timestamp":1505960848,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Uploaded patch set 3."},{"timestamp":1506017996,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Uploaded patch set 4."},{"timestamp":1506228494,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 4:\n\n(6 comments)\n\nNeed to add in.ikev2d to usr/src/pkg.  I\u0027d just find in.iked and place entries nearby (SUNWcs.mf)."},{"timestamp":1506345966,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Patch Set 4:\n\n(2 comments)"},{"timestamp":1506348467,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Patch Set 4:\n\n(5 comments)"},{"timestamp":1506348491,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Uploaded patch set 5."},{"timestamp":1506350105,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 5:\n\n(2 comments)\n\nThanks."},{"timestamp":1506629437,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Patch Set 5: Code-Review+1\n\n(1 comment)\n\nOne last comment, and I\u0027m good.  What I saw of RM\u0027s you seemed to get, but he is the final word on it.\n\nMy +1 means, proceeed (but it\u0027s dependent on that one last comment about large-generator MODP groups)."},{"timestamp":1507251151,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Patch Set 5:\n\n(27 comments)\n\nHi, it looks like a chunk of my original comments were not addresses or responded to. I\u0027ve tried to call out some of the ones I noticed, but I may have missed some. Note some of these are replies to some of the pre-existing chains."},{"timestamp":1515102248,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Abandoned\n\nRestart with new round of reviews"}],"currentPatchSet":{"number":"5","revision":"d43a49656532bc493e2adc48a2522e385285ff9b","parents":["5f08c4f76a87c4eccd6faed949f31aae4d5c24ea"],"ref":"refs/changes/72/2572/5","uploader":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"createdOn":1506348491,"author":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1506629437,"by":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"}}],"comments":[{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/dh.c","line":326,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Please add large-generator MODP groups?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","line":57,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Please add a comment explaining why this is required (though I understand intuitively why)."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa_init.c","line":828,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"We should use a macro for raw constants. I\u0027d suggest trying to find something like NBBY if it\u0027s defined (the common value used in the kernel for this)."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/main.c","line":152,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I usually recommend your own daemonizing routine versus daemon itself. There are a lot of steps that you\u0027ll want to use for this that aren\u0027t being covered today. See for example the varpd daemonization or the bits that Alex has in progress for rfd 77."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/main.c","line":178,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Probably worth making sure close is successful."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":92,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Any reason we can\u0027t define them in a common header file for consumers then?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":442,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Are you sure you want reallocarray and not recallocarray?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":445,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I\u0027m not sure what this comment is trying to tell me. What is \u0027this\u0027 in this statement?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","line":159,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"So, is it the case that the programmer controls 100% of this and there\u0027s no way user related data can influence this?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":305,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"do we need to explicit_bzero the buffer here even on failure as their could be useful contents still left on the stack, no?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.c","line":195,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"This condition checking seems racy. Shouldn\u0027t the act of suspending exclude a resume until the suspend has fully finished? As this is written, someone can come in and start a suspend at this point (assume you get descheduled after releasing the rw lock. If someone else comes in and starts waking up even a single one, you\u0027ll never end up hitting the condition.\n\nWe should probably make sure worker suspension / resumption is 100% exclusive. In other words a resume should block while a suspend is ongoing and the same is true of the opposite."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.c","line":226,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Is there a reason semantically that this call does not block for all of the workers to be woken up where as suspend does?"}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/Makefile","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/Makefile","type":"ADDED","insertions":58,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/Makefile.com","type":"ADDED","insertions":113,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/THIRDPARTYLICENSE","type":"ADDED","insertions":26,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/THIRDPARTYLICENSE.descrip","type":"ADDED","insertions":1,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/amd64/Makefile","type":"ADDED","insertions":30,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.c","type":"ADDED","insertions":211,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.h","type":"ADDED","insertions":170,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config_parse.c","type":"ADDED","insertions":1650,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/defs.h","type":"ADDED","insertions":229,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/dh.c","type":"ADDED","insertions":407,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/dh.h","type":"ADDED","insertions":39,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","type":"ADDED","insertions":284,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.h","type":"ADDED","insertions":37,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ike.h","type":"ADDED","insertions":120,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev1.h","type":"ADDED","insertions":174,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev1_pkt.c","type":"ADDED","insertions":78,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2.h","type":"ADDED","insertions":532,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_common.c","type":"ADDED","insertions":713,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_common.h","type":"ADDED","insertions":69,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_cookie.c","type":"ADDED","insertions":337,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_cookie.h","type":"ADDED","insertions":40,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_enum.c","type":"ADDED","insertions":430,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_enum.h","type":"ADDED","insertions":41,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_pkt.c","type":"ADDED","insertions":1445,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_pkt.h","type":"ADDED","insertions":114,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_proto.c","type":"ADDED","insertions":497,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_proto.h","type":"ADDED","insertions":44,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.c","type":"ADDED","insertions":1047,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.h","type":"ADDED","insertions":218,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa_init.c","type":"ADDED","insertions":872,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ilist.h","type":"ADDED","insertions":156,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/inbound.c","type":"ADDED","insertions":330,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/inbound.h","type":"ADDED","insertions":37,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/main.c","type":"ADDED","insertions":402,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pfkey.c","type":"ADDED","insertions":738,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","type":"ADDED","insertions":506,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.h","type":"ADDED","insertions":112,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","type":"ADDED","insertions":833,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","type":"ADDED","insertions":245,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt_impl.h","type":"ADDED","insertions":64,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/preshared.c","type":"ADDED","insertions":2041,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/preshared.h","type":"ADDED","insertions":212,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","type":"ADDED","insertions":415,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.h","type":"ADDED","insertions":64,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/random.c","type":"ADDED","insertions":109,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/random.h","type":"ADDED","insertions":77,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/timer.c","type":"ADDED","insertions":273,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/timer.h","type":"ADDED","insertions":68,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/util.c","type":"ADDED","insertions":181,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.c","type":"ADDED","insertions":493,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.h","type":"ADDED","insertions":90,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/i386/Makefile","type":"ADDED","insertions":29,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/sparcv9/Makefile","type":"ADDED","insertions":30,"deletions":0},{"file":"usr/src/lib/libipsecutil/common/ikedoor.h","type":"MODIFIED","insertions":1,"deletions":0},{"file":"usr/src/lib/libipsecutil/common/ipsec_util.h","type":"MODIFIED","insertions":6,"deletions":0}],"sizeInsertions":17539,"sizeDeletions":-1},"patchSets":[{"number":"1","revision":"b2cb8d7aa0458a9d09a03cbbe466b0928c9861e0","parents":["1ee89f3ab0fcdfbd337595dc3b86031c68704474"],"ref":"refs/changes/72/2572/1","uploader":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"createdOn":1505410578,"author":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"isDraft":false,"kind":"REWORK","files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/Makefile","type":"ADDED","insertions":58,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/Makefile.com","type":"ADDED","insertions":104,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/THIRDPARTYLICENSE","type":"ADDED","insertions":26,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/THIRDPARTYLICENSE.descrip","type":"ADDED","insertions":1,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/amd64/Makefile","type":"ADDED","insertions":30,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.c","type":"ADDED","insertions":205,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.h","type":"ADDED","insertions":160,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config_parse.c","type":"ADDED","insertions":1649,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/defs.h","type":"ADDED","insertions":240,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/dh.c","type":"ADDED","insertions":418,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/dh.h","type":"ADDED","insertions":40,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","type":"ADDED","insertions":275,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.h","type":"ADDED","insertions":37,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ike.h","type":"ADDED","insertions":117,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev1.h","type":"ADDED","insertions":174,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev1_pkt.c","type":"ADDED","insertions":78,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2.h","type":"ADDED","insertions":528,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_common.c","type":"ADDED","insertions":712,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_common.h","type":"ADDED","insertions":69,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_cookie.c","type":"ADDED","insertions":287,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_cookie.h","type":"ADDED","insertions":41,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_enum.c","type":"ADDED","insertions":430,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_enum.h","type":"ADDED","insertions":41,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_pkt.c","type":"ADDED","insertions":1369,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_pkt.h","type":"ADDED","insertions":114,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_proto.c","type":"ADDED","insertions":531,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_proto.h","type":"ADDED","insertions":44,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.c","type":"ADDED","insertions":1051,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.h","type":"ADDED","insertions":210,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa_init.c","type":"ADDED","insertions":822,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ilist.h","type":"ADDED","insertions":156,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/inbound.c","type":"ADDED","insertions":324,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/inbound.h","type":"ADDED","insertions":37,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/main.c","type":"ADDED","insertions":362,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pfkey.c","type":"ADDED","insertions":738,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","type":"ADDED","insertions":433,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.h","type":"ADDED","insertions":104,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","type":"ADDED","insertions":841,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","type":"ADDED","insertions":221,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt_impl.h","type":"ADDED","insertions":69,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/preshared.c","type":"ADDED","insertions":2041,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/preshared.h","type":"ADDED","insertions":212,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","type":"ADDED","insertions":349,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.h","type":"ADDED","insertions":63,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/random.c","type":"ADDED","insertions":109,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/random.h","type":"ADDED","insertions":71,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/timer.c","type":"ADDED","insertions":270,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/timer.h","type":"ADDED","insertions":68,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/util.c","type":"ADDED","insertions":169,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.c","type":"ADDED","insertions":543,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.h","type":"ADDED","insertions":85,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/i386/Makefile","type":"ADDED","insertions":29,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/sparcv9/Makefile","type":"ADDED","insertions":30,"deletions":0},{"file":"usr/src/lib/libipsecutil/common/ikedoor.h","type":"MODIFIED","insertions":1,"deletions":0},{"file":"usr/src/lib/libipsecutil/common/ipsec_util.h","type":"MODIFIED","insertions":6,"deletions":0}],"sizeInsertions":17192,"sizeDeletions":0},{"number":"2","revision":"85982c36c60f0040a5ee17ef13189245e28cbff6","parents":["1ee89f3ab0fcdfbd337595dc3b86031c68704474"],"ref":"refs/changes/72/2572/2","uploader":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"createdOn":1505410686,"author":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"isDraft":false,"kind":"NO_CODE_CHANGE","comments":[{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/Makefile.com","line":53,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"whitespace?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/Makefile.com","line":53,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/Makefile.com","line":58,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Can we delete this?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/Makefile.com","line":58,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/Makefile.com","line":61,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I can\u0027t find this macro. Is it required?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/Makefile.com","line":64,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Why not for everything?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/Makefile.com","line":64,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Unless it\u0027s changed when this was done (way back), defining that also means that boolean_t uses _B_TRUE, _B_FALSE.  I found being different from the rest of illumos-gate to be rather annoying, so confined the use of the define to just the one file that needed the X/Open sockets (and kept that file rather small to minimize the chance of conflicting definitions)."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/Makefile.com","line":64,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Can you further elaborate on the comment to explain this?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.c","line":99,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Yeah, right here.  Would be a shorter line and equally legible if it read (l.sau_sin-\u003esin_addr.s_addr \u003d\u003d r-\u003ecfa_start4)"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.c","line":99,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.c","line":102,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"It occurs to me that if you\u0027re supporting ranges, you can transform a prefix read out of a file into a range and eliminate the CFA_*_PREFIX code altogether.\n\nNOTE:  *Our* IKEv1 didn\u0027t support ranges (and IPsec SPD still doesn\u0027t), which is why things like ikeadm(1M) have prefixes.  Prefixes are a subset of ranges.  I believe this is why RFC 430x specified them.  (Such a Steve Kent formalism.  :) )\n\nIf you have ranges internally, you don\u0027t need distinct prefix representation."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.c","line":102,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Good idea -- I\u0027m all for smaller, simpler code :)\n\nStrange on the ranges -- ike.config(4) states that both \u0027local_addr\u0027 and \u0027remote_addr\u0027 support \u0027\u003cIPaddr/prefix/range\u003e\u0027 which I read to mean any one of those three which is why I added support for parsing all three."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.c","line":102,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Parsing !\u003d storing.  You should parse all three.  You should store only as range."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.h","line":32,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Any reason these are enums instead of #defines that match up with numbers in RFC 7296?\n\nAhh, because this has to deal with rules/config.  Is a mapping required? Where is this mapping?  (Maybe comment on it?)"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.h","line":32,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Yes -- the existing config file format does not line up with with the ID{i,r} payload allows (RFC7296 only allows a single address -- either IPV4 or IPV6), so a mapping function will need to be written.  This isn\u0027t used until the AUTH exchange, but this part is here to allow parsing of an ike.config file (even though this bit is currently ignored since we\u0027re only as far as the IKE_SA_INIT exchange)."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.h","line":65,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"#defines for easier union member access?  (cfa_start[46], cfa_end[46])?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.h","line":65,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.h","line":77,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Same here... name the union members idu_X, and use #defines."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.h","line":77,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.h","line":106,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"See my other comment, you need multiple remote IDs.\n\nAlso, maybe a monotonically increasing rule number to be assigned in here somewhere?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.h","line":106,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config_parse.c","line":42,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"((size_t)(1024 * 1024))"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config_parse.c","line":42,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config_parse.c","line":131,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"What about remote_id? Shouldn\u0027t that have KWF_MULTI? Here\u0027s something from \"ikeadm dump rule\" on my HDC:\n\nREMID: Identity descriptors:\nREMID: Includes:\nREMID:    emy.joyent.us\nREMID:    72.2.118.217"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config_parse.c","line":131,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config_parse.c","line":142,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Comment about ECDSA sigs in the future? Or is it omitted to not set expectations?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config_parse.c","line":142,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"It\u0027s not mentioned in ike.config which is why it\u0027s missing.  For now (at least) I just wanted to be able to successfully parse any existing ike.config (with the one exception of adding the \u0027immediate\u0027 keyword just to be able to test the IKE_SA_INIT exchange -- that keyword may get removed once the pfkey bits are plumbed in and the AUTH exchange is working."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config_parse.c","line":660,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Also XXX/TODO, one thing people wanted in ike.config(4) was a way to say \"oakley_group modp2048\" or \"oakley_group ecp521\"."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config_parse.c","line":660,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Excellent idea."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config_parse.c","line":1106,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Same here as Oakley group above.  (And does IKEv2 have this?  Or are you keeping it for a possible IKEv1 future?)"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config_parse.c","line":1106,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Yes -- you can optionally include a DH transform in a IKEV2 as part of establishing a CHILD SA."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/defs.h","line":89,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"And coming soon:  pmsg_osau/pmsg_odau."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/defs.h","line":141,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Is there a way to do a construction of something like this such that we get the return value? Otherwise, understanding why this failed will be pretty hard."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/defs.h","line":141,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"For some reason, I never saw the VERIFY0() macro which does the same thing (and appears to include the return value if I\u0027m reading it right).  Unless you have objections to that, I\u0027ll remove this and replace it\u0027s use with VERIFY0."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/defs.h","line":156,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Given that we may abort, I think it may be clearer to not make this inline, unless you\u0027re seeing this show up in a flamegraph."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/defs.h","line":156,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"A port is a uint16_t."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/defs.h","line":156,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"The intention was to use with bunyan which only accepts UINT64, INT64, UINT32, and INT32 (and the value is passed as a vararg), so I wanted to try to minimize lots of casting when using it."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/defs.h","line":156,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"It probably would have been done as a macro, however I\u0027ve been preferring inline functions to macros since it seems like you get better compile-time checking (and better error messages).  An alternative might be to add BUNYAN_T_SOCKADDR to libbunyan which takes a \u0027struct sockaddr_storage *\u0027 for it\u0027s value and prints the \u0027address:port\u0027 -- as that\u0027s pretty much what these two macros are used for."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/defs.h","line":156,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"So, I agree 100% with functions over macros. My main point was that I wouldn\u0027t prematurely turn this into an inline function unless you believe it\u0027s actually going to solve something. You\u0027re giving up a bunch of debugability by doing so. If a flamegraph shows that this is hot, then we can always inline it later. But I suspect the crypto costs will dwarf this far and away."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/defs.h","line":169,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Let\u0027s not use NULL and use something that should be an int?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/defs.h","line":169,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Whoops--cribbed too much from the ss_addr() function :).  I will fix for now -- though obviously if we agree the BUNYAN_T_SOCKADDR suggestion above is better, this (and ss_addr() will end up being removed)."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/defs.h","line":173,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Given that we may abort, I think it may be clearer to not make this inline, unless you\u0027re seeing this show up in a flamegraph."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/defs.h","line":173,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"See above -- if we go the BUNYAN_T_SOCKADDR route, this will be removed.  If not I\u0027ll move it to a regular function."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/defs.h","line":190,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Given that we may abort, I think it may be clearer to not make this inline, unless you\u0027re seeing this show up in a flamegraph."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/defs.h","line":190,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Similar answer as other ss_*() functions."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/defs.h","line":226,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I\u0027d strongly recommend prefixes on these globals. Otherwise trying to find log or port is going to be hard."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/defs.h","line":226,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"my_fmri resides in libipsecutil, which is used by the closed libike.so, so I don\u0027t think that one can change, but the others should be able to."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/defs.h","line":226,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"OK. Then let\u0027s change the others. Trying to find port is going to be a nightmare."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/dh.c","line":30,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Per ECC comment below, you\u0027ll need to extend this or have a distinct ecc_groups list."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/dh.c","line":30,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"I expect there will need to be adjustments to this file once I can figure out how the ECC related IKEv2 RFCs and PKCS11 map to one another.  Unfortunately, PKCS11 and the IKE RFCs seem to be using different terminology when referring to the various ECC components, PKCS11 seems to want ASN1 OIDs to identify curves, which all makes it look like a bit of a pain to get it working and is probably going to have to take a decent amount of source diving to figure out how the ECC stuff in usr/src/common/crypto is wired up to PKCS11 and then figure out how that maps to the terms used in the IKE RFCs, so I opted to start with just the DH stuff for now since that was significantly more straightforward."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/dh.c","line":328,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"IKEv1 also supports larger-generator groups:\n\n                 22 (MODP 1024-bit, with 160-bit Prime Order Subgroup)\n                 23 (MODP 2048-bit, with 224-bit Prime Order Subgroup)\n                 24 (MODP 2048-bit, with 256-bit Prime Order Subgroup)\n\nRFC 5114 (which also contains the NIST ECC groups).  No ECC for now either?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/dh.c","line":328,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"See above.  I do plan to have ECC support as part of the minimally viable version, however given the research needed to get ECC working, I figured at least having one that did DH would allow for more play/testing in the meantime, since it\u0027s unknown how long it\u0027ll take to sort that out (I\u0027m hoping it\u0027ll not be too bad, but it\u0027s an unknown quantity to me at least -- I also was unsuccessful in trying to find examples)."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/dh.c","line":367,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"What if this ends up being invalid?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/dh.c","line":367,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"I\u0027m not sure where the right place would be to add this (since this pops up lots of places -- perhaps as part of the worker big-theory statement), but basically each worker thread gets it\u0027s own handle at worker thread creation.  If the session handle creation fails, the thread creation fails, so a worker thread always has a valid PKCS#11 session handle.  I should change this though to just use worker-\u003ew_p11h -- the illumos-gate CTF tools have problems with TLS, so originally this was just a small function wrapper around pthread_getspecific()."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/dh.c","line":367,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"At least making it a comment in p11h() that explains that it\u0027s okay and explains how the pkcs functions will handle that."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/dh.c","line":415,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Does it really make sense to return zero in the case of a NULL group? Should it be possible for a user to give us a group that doesn\u0027t exist?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/dh.c","line":415,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"With the updates to the code, this actually turns out to be a dead function.  It will be removed."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","line":45,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"It\u0027s here AND in the Makefile?  Why not lose the #ifdef lint?  Or is there some compilation subtlety I\u0027m missing?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","line":45,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"I suspect it\u0027s old cruft.  I\u0027ll take it out for now.  If it needs to go back, I\u0027ll try to figure out why specifically and re-add it with a better message -- if I had to guess, perhaps the define wasn\u0027t originally getting set in the Makefile when doing lint."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","line":80,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"So we\u0027re assign a socklen_t to this, which is an unsigned value. I don\u0027t think we should use the signed value here."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","line":80,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","line":85,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Why do we have two iovec structs here? Is the second one designed to be an invalid buffer or something? Mostly just asking since iovlen is set to one below."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","line":85,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Not sure.. was possibly old code before I started on it. I\u0027ll change it to one and see if it changes anything (recvmsg(3XNET) suggests it should be ok)."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","line":111,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Do callers ever call with non-blocking set, if so, should we log if we get EAGAIN?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","line":111,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"It should always be blocking.  The socket is waited on by an event port and then this is called (prior to re-associating the socket with the event port).  As far as I know, if a PORT_SOURCE_FD event is received, then you should be able to call recvmsg() on that socket without it being blocked.  Since it\u0027s UDP, it each recvmsg() call should correspond to a single datagram."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","line":127,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"How does this case happen? How could we return more data than the buffer in question holds?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","line":127,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Honestly, I\u0027m not entirely sure as all the extra socket bits here (minus the bunyan logging) was in the original code dropped from Sun (and I have no clue where any of this is documented, if at all).  I think since it\u0027s UDP and this a datagram at a time (i.e. message based, not a stream or any sort of framing concerns), it seems like it\u0027s possible that we could receive a datagram larger than the buffer given to hold it)."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","line":127,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"I found it -- recvmsg(3XNET) -- since these are datagrams, and we block all signals on all inbound threads (we have a dedicated thread that receives all signals for a process and turns them into port events), we cannot be interrupted by a signal, and we must read the entire contents of the datagram in one recvmsg(3XNET) call -- if our buffer is too small, the excess bytes are discarded."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","line":127,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"So, the way that the manual page describes this is that the MSG_TRUNC flag will be set when this condition occurs. Are you certain that the actual returned value will be larger than the buffer? This seems to be being derived from the uio_resid field, which will be sized based on the passed in buffer. So I believe that this check will not accomplish what you\u0027re intending."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","line":147,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Is this in native host endian and if not, should we be translating fields like the sin6_port to native endian as we go to simplify things for consumers?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","line":147,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"I can\u0027t find anything definitive, though I thought struct sockaddr_{in,in6} are assumed to store their values in network byte order, so it might be surprising if they\u0027re not.  Since JPC doesn\u0027t have IPV6, this bit hasn\u0027t been tested yet, though it\u0027s largely the IPV6 equivalent of the IPV4 code (which has been tested, and whose results are kept in network byte order)"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","line":155,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"So, you\u0027re setting the index down below if its IN6_IS_ADDR_LINKLOCAL or IN6_IS_ADDR_MULTICAST. Should we be doing the reverse up here? Or should that below case change?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","line":155,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"I\u0027m surprised mutlicast is below, as we aren\u0027t doing any group key management yet.  If this was inherited, I may have brought it all the way intact from racoon2."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","line":160,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Rather than overloading otolen, can we use a boolean_t to track it being set? As otherwise we\u0027re going to hit signed / unsigned issues."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","line":160,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","line":166,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Why do you cast here but not above (though hopefully we can get rid of both by making otolen unsigned."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","line":166,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"It\u0027s unsigned now, so the cast is gone."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","line":192,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Same question here on the number of iovecs."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","line":192,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","line":243,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"See comment in the recv function that\u0027s related to the reverse setting."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","line":265,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Can we guarantee that this only happens because of programmer error? There\u0027s no way a user could get us to use a different family?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","line":265,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","line":269,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Can we put { } around the multi-line if body?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","line":269,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.h","line":26,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"You use uchar_t here, but you\u0027re using uint8_t in the source."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.h","line":26,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.h","line":30,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"You use uchar_t here, but uint8_t in the code. Can we be consistent?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.h","line":30,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.h","line":31,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"These are using the restrict keyword, which you\u0027re not using in the main source code."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.h","line":31,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev1_pkt.c","line":1,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"This and its header file may need to be left out of minimal-viable IKEv2, but I\u0027ll leave that call to another reviewer."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2.h","line":2,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Is this one in 3rd-party license as well?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2.h","line":40,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Include the I-D link for GSA stuff:\n\nhttps://tools.ietf.org/html/draft-yeung-g-ikev2-11"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2.h","line":40,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2.h","line":249,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Ahh, now there\u0027s a future kernel RFE..."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_common.c","line":197,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Maybe have (ok \u0026\u0026 i \u003c ARRAY_SIZE..) instead?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_common.c","line":197,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_common.c","line":635,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"This is the IKEv2 equivalent of p2_pfs in IKEv1\u0027s ike.config(4), right?  Should you consult the rule here?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_common.c","line":635,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Yes it is the equivalent of the value.  Since it\u0027s not part of the acquire function, my thought (this may change once the IKE_AUTH code is written) is that data-\u003ead_dh gets set from the dh parameter in ikev2_sa_match_acquire() which would be given the value from the appropriate rule."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_common.c","line":641,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Make a note that ESN needs to be indicated in PF_KEY somehow in the future."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_common.c","line":641,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_cookie.c","line":39,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Possibly a bigger-theory statement about how you\u0027re using a timer to advance the cookie value?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_cookie.c","line":39,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_pkt.c","line":60,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"It\u0027s been a while... you need to know the initiator/responder status for packet encoding, but it IS possible for a responder to start a new exchange, right?  (Imagine the responder side has more aggressive soft-lifetime expiration...)"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_pkt.c","line":60,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"I originally had this wrong, but RFC7296 3.1 explains it better (ISTR that previous versions might not had done as well a job clarifying this):\n\n *  R (Response) - This bit indicates that this message is a\n         response to a message containing the same Message ID.  This bit\n         MUST be cleared in all request messages and MUST be set in all\n         responses.  An IKE endpoint MUST NOT generate a response to a\n         message that is marked as being a response (with one exception;\n         see Section 2.21.2).\n *  I (Initiator) - This bit MUST be set in messages sent by the\n         original initiator of the IKE SA and MUST be cleared in\n         messages sent by the original responder.  It is used by the\n         recipient to determine which eight octets of the SPI were\n         generated by the recipient.  This bit changes to reflect who\n         initiated the last rekey of the IKE SA.\n\nEach side also maintains it\u0027s own outbound message ID for new exchanges, and it\u0027s possible (and even likely) the two will diverge if one side is initiating more exchanges than the other.  Since lifetimes are managed \u0027locally\u0027 (i.e. not negotiated), whichever side has the smaller lifetimes for SAs (IKE or IPsec) will end up initiating more exchanges, regardless of which side initiated the original IKE SA."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_pkt.c","line":705,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Long-term it\u0027s going to be start/end (ranges).  Short-term, it\u0027s going to be sadb_address_t (prefixlen + sockaddr) until the theoretical PF_KEYv3 or 2.more-major-changes involving REGISTER flags.  Think about that now, please. We don\u0027t want more kernel changes beyond OPS/OPD and 64-bit KMC support."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_pkt.c","line":1035,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"This probably more appropriate for ike_sa.h, but what if a peer has more than one vendor ID to offer up?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_pkt.c","line":1035,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"check_vendor() in ike_sa_init.c iterates through all of the VENDOR payloads and sets the vendor type if it sees a vendor payload we recognize (currently just the one I created). I haven\u0027t seen anything to date that\u0027d suggest we care too much about values from other implementations (we\u0027re just using it ourselves to determine if it\u0027s permissible to enforce padding validation on the SK payload), but either way I don\u0027t think we\u0027ll be too boxed in -- we can always adjust ike_sa_t to have feature flags based on VENDOR payloads if that becomes the case."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_pkt.c","line":1234,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Hmmmm. Is there a way to quickly index what\u0027s there, and then, in specific-packet-type processing, run a reality check function that consumes the index, and some set of args from the caller?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_pkt.c","line":1234,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"When we create a packet from a given buffer (i.e. an inbound packet), we create the index of payloads (pkt_t.pkt_payloads and if needed, pkt_t.pkt_payloads_extra) and that verifies all the payload lengths are sane (since it has to traverse all the payloads to create the index anyway).  My thought was that this would do the first line IKEv2 specific stuff.   I was going to split up the validation for the other exchanges since those can\u0027t happen until after the packet\u0027s been decrypted and it\u0027s ICV has been verified -- we\u0027d still likely want to verify the ISAKMP header and SK payload values before we even attempt decryption or signature validation since it\u0027s likely if those are wrong, the decryption or signature validation are going to fail."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_pkt.c","line":1246,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Ahh, this could be said indexing function..."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_pkt.c","line":1246,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"No, this just allows us to log a useful summary of the contents of the packet.  The indexing is in pkt.c (since the payload header and packet header are the same for IKEv1 and IKEv2 the thought that those things could use a common implementation, with v1/v2 specific logic added on top and calling the pkt_t functions for the stuff that\u0027s common between the two (though most of the IKEv1 stuff is obviously not present yet)."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_proto.c","line":125,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"I can\u0027t remember... is this reassignment still necessary?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_proto.c","line":125,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"It\u0027s mostly to keep things from getting a bit unwieldy.  For every exchange except an IKE_SA_INIT exchange, this is redundant, however for IKE_SA_INIT exchanges, if we are the responder, the local_spi from the inbound packet will always be 0, so we  must reset the value from either the newly created larval IKE SA, or from an existing IKE SA (which would also be larval, but already exists because this packet could be a retransmission or a retry after an INVALID_KE_PAYLOAD response from us)."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_proto.c","line":126,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Refhold of i2sa needed too?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_proto.c","line":126,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"I\u0027ll add a comment -- either function (ikev2_sa_get or ikev2_try_new_sa) both return refheld ike_sa_t\u0027s that we give to the packet."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_proto.c","line":140,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Well-commented, thanks."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_proto.c","line":140,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Thanks :)  Things get so hairy here I really tried to make sure this was as clear as possible, if only for my own sanity."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_proto.c","line":256,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Do we wish to insert rate-limiting logic here to avoid amplification attacks?  Or is that better done elsewhere?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_proto.c","line":256,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Possibly.  RFC7296 talks about rate-limiting in the context of unprotected error messages, but isn\u0027t clear if a responder MUST retransmit the last response when it receives a retransmit of the last request it received, or if it can throttle the response.  There might be a larger discussion here that might be better done outside of confines of a code review to determine what we want to do, mitigations, etc."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_proto.c","line":371,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"If the answer is no, you\u0027ll get lint complaining about len assigned-not-used."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_proto.c","line":371,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.c","line":72,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Is this used anywhere?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.c","line":72,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Yes -- it\u0027s used to set the initial size of the buckets in ikev2_sa_init (the thought was that it could potentially be set during startup to override the default)."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.c","line":182,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Likely not worth the time to fix, but this feels redundant given we know init_pkt \u003d\u003d NULL \u003d\u003d\u003e initiator, or based in the \"I\" flag in init_pkt..."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.c","line":182,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Yeah -- that\u0027s what I was alluding to in lines 191-193.  This was written prior (the bulk of it years ago) to writing the code for the IKE_SA_INIT exchange (and of course the the IKE SA rekey code has not yet been written), so it wasn\u0027t clear at the time if it would be needed or not.  It still may be useful for an IKE SA rekey, so it\u0027d probably be good to revisit once that\u0027s done."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.c","line":260,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Does lint or gcc complain if you compile this 64-bit?  If so, perhaps (.... \"0x%016\" PRIx64 \"\", I2SA....) ?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.c","line":260,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"gcc at least doesn\u0027t though the PRI* macros are probably a better option, so I\u0027ll update it."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.c","line":333,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Won\u0027t i2sa be invalid once refcnt drops from 1 to 0, making this check invalid post-free? You may need to preload a counter or something else... and what else will refhold it?  Shouldn\u0027t you just I2SA_REFRELE() once and know it goes away?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.c","line":333,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.c","line":376,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Does schedule_timeout() reference-hold the SA, or put another way, do all event-port callbacks need to refrele upon completion?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.c","line":376,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"It depends on what is passed into schedule_timeout() -- Right now it could be a packet or an IKE SA, so it depends on the timeout, also depends on what the callback does -- for example the packet retransmit wouldn\u0027t release until the retransmit limit has been reached."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.c","line":382,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Should be a traversal with lots of ikev2_sa_condemn().  Maybe even suspending packet reception too?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.c","line":610,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"You could rename the argument \"remote_spi\".  (Did I write this? If so, I apologize...)"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.c","line":610,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Nope, you\u0027re innocent :)  I\u0027ll fix this."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.c","line":634,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Same PRIx64 thing as before."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.c","line":634,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.c","line":765,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"No answers for these questions yet, huh?  BTW, NAT testing is going to be essential, AND I do think we may want to be able to configure the \"500\" and \"4500\" to other numbers if need be."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.h","line":86,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"I see three linkages above, does the block comment need to change?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.h","line":86,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Maybe, though maybe not -- I think I\u0027d like to defer it until after the review -- the newest one was originally intended to be for the worker the IKE SA was bound to.  However if we move away from that as has been talked about, it\u0027ll likely go away (and then it wouldn\u0027t need to change).\nBut rm has also done some work (not integrated yet) on porting the kernel rehash bits to user land, which might be useful here, and might change this again, so it might be worth nothing that this needs to be revisited after that has been sorted out if that seems reasonable."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.h","line":102,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Ahhh... you need to have multiple ones here, or at least acknowledge the possibility of more for the future."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.h","line":102,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"I can add a comment -- it really depends on how we want to utilize the vendor payloads.  Initially, I just wanted a way to be able to determine if we are talking to another instance of our in.ikev2d (vs. someone else\u0027s) so we could follow Alex\u0027s suggestion of validating the padding in SK payloads."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.h","line":156,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Why the extra nonce data?  I thought these were used once and thrown away on CREATE_CHILD_SA and AUTH exchanges?\n\nAlso, should this be a simple linked list?  (Maybe later after getting-it-to-work?)"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.h","line":156,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Each child SA requires the exchange of nonces, though for the first CHILD SA, the nonces from the IKE_SA_INIT exchange are used for both the IKE SA and the first CHILD SA (created in the AUTH exchange), so I\u0027m guessing (at this point) we\u0027ll need a place to stash the nonce values (as I\u0027m unsure at this point how long we\u0027ll keep the initial IKE_SA_INIT packets).  Once the IKE_AUTH and CREATE_CHILD_SA exchanges are written, it may turn out they aren\u0027t necessary (and they just turn into temporary reminders for myself).\n\nAs for the linked list, that was just a guess as to how these will be tracked.  I strongly suspect once the interactions with pf_key as well as any delete informational exchanges are flushed out, that there will be changes here."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa_init.c","line":574,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Really?!?  This seems unnecessary.  We generate SPIs as opaque 64-bit objects for equality testing only.  Why do any swapping at all?\n\nThe ONLY time to swap would be for printing purposes, I\u0027d think."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa_init.c","line":574,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"With the removal of the local-byte-order copy of the header, we just use the values straight from the actual header (which are set when the packet is created)."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa_init.c","line":600,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Per earlier comments, at some point (maybe not now) this will have to become more sophisticated."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa_init.c","line":600,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"It really depends on on how much custom behavior we want to add (either for our own purposes, or as compatibility with other known implementations).  Any values we don\u0027t recognize, we just ignore."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ilist.h","line":33,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Any particular reason to inline these?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ilist.h","line":33,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Only because they\u0027d otherwise had probably been done as a macro, but I\u0027ve grown to prefer inline functions over macros when either will work -- they seem to give better compilation error messages, while doing the same thing."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/inbound.c","line":53,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I\u0027d recommend a theory statement around the purpose of an inbound and how it fits into the broader picture of ikev2."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/inbound.c","line":86,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I don\u0027t believe you should always continue in the face of failure. There are non-transient conditions that probably indicate we should abort, like:\n\n* EFAULT\n* EINAVL\n* EBADF\n* EBADFD\n\nThere maybe others."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/inbound.c","line":86,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/inbound.c","line":86,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"So the implementation here isn\u0027t quite right. There are also transient failures that you should continue in the front of. You should really be checking errno and acting accordingly. While I suspect that signals are masked form whatever\u0027s calling this, if somehow you got an EINTR or similar, then I don\u0027t believe we should be aborting. Also, are you sure you want to exit? If you got an EFAULT or anything else, surely you\u0027d want a core dump to figure out why that happened."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/inbound.c","line":118,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Is there a reason that we\u0027re not specifying a non-blocking flag in this? If we\u0027ve been woken up and some other thread somehow also got woken up, won\u0027t we end up blocked here?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/inbound.c","line":118,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"I don\u0027t think it\u0027s possible to have two threads woken up on the same socket.  My understanding is that once a socket becomes readable (as we\u0027ve associated for POLLIN events), it generates a single event, which should be delivered to a single thread amongst those waiting for it.  At that point, no other events should be generated from that socket until it has been re-associated to the event port (which doesn\u0027t happen until after we\u0027ve received the pending message)."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/inbound.c","line":120,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I think it\u0027s worth a comment here to note that we\u0027re re-arming this socket immediately so that other threads can operate."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/inbound.c","line":120,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/inbound.c","line":188,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"For the future, if we support outright replacements for 500 and 4500, this will need to adapt..."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/inbound.c","line":227,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"It appears that this will always bind to the unspecified address of the appropriate family. Is that intentional? Should that be something that\u0027s configurable in the zone?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/inbound.c","line":227,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Currently yes -- this follows how the current in.iked works and how it\u0027s configuration is specified.  Rules in the configuration file specify which local addresses are used, so one could prevent any  IKE negotiation from occurring on a particular address by omitting any particular addresses.  However there is no reason we can\u0027t adjust the behavior and allow for specifying specific addresses (or maybe even interface names as well) with perhaps a default of \u0027all addresses\u0027 if none are specified.\n\nOnce the basic functionality was there, I was planning on having some discussions on how to evolve the current configuration format (as used by in.iked) -- both in terms of possible ways of simplifying the work involved for a standard, sane configuration (for some to-be-determined definition of standard and sane), for ease of integration within Triton, and because IKEv2 explicitly supports remote access VPN, we would want additional configuration support for that eventually (though probably not part of that minimum functional version discussed)."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/inbound.c","line":227,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"\u003e this follows how the current in.iked works and how it\u0027s configuration is specified.\n\nNope.  The current in.iked (because it does NOT do sendfromto()/recvfromto()) queries the routing socket for available local IPs and binds to each one.  Do \"pfiles `pgrep iked`\" sometime and have a look."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/inbound.c","line":227,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"To restate it slightly differently, in.iked doesn\u0027t have any documented way of binding to specific addresses, suggesting it listens on all ports (as a side note, querying the routing socket seems a bit of a peculiar way to get the list of addresses vs. getifaddrs()"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/inbound.h","line":28,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I\u0027d strongly recommend prefixes on these."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/main.c","line":65,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"On non-debug I recommend always turning on the \"guards\" settings. Given the security sensitivity of this daemon, we should be willing to pay the extra cost for that."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/main.c","line":65,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/main.c","line":135,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Why are we ignoring the return value?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/main.c","line":135,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Are there any situations where read(2)s all succeed on a file, but close(2) fails?  Any failure in processing the configuration is a fatal error, and process_config will not return."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/main.c","line":139,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"We should probably do traditional daemonizing work here."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/main.c","line":139,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Yes -- it\u0027s just been left out so far since it wasn\u0027t necessary for the testing (and would never be used)."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/main.c","line":139,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Also, in the not-now-but-later department:  ikeadm door and SMF stuff."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/main.c","line":189,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Maybe worth a macro to describe where 500 comes from?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/main.c","line":189,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"We can, I think there is \u0027IPPORT_IKE\u0027 defined in some header file -- though this function will go away once further bits are implemented.\n\nIn the final version (and the \u0027minimally functional version\u0027), either a remote host will kick off the establishment of an IKE SA, or the kernel (via pf_key(7P)) will send a request to in.ikev2d to create a key and select algorithms for some IPsec traffic.  If no IKE SA exists with the peer, it will start the exchange with the peer, and then use the established IKE SA to generate and exchange the key + algs.  Since that pf_key(7P) stuff isn\u0027t wired up yet to kickoff the creation of an IKE SA, this is just here as a stub to take that place for testing during development."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/main.c","line":189,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pfkey.c","line":92,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"If there aren\u0027t routines in libipsecutil to help here, there should be. Please let me know."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pfkey.c","line":92,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Not exactly -- print_sadb_msg() just does a switch() on the value and prints it out to the given FILE* argument."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pfkey.c","line":92,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"We should put this table into libipsecutil then."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pfkey.c","line":551,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"More specifically, if KM1 is set, it\u0027s time to kick off a CREATE_CHILD_SA."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pfkey.c","line":575,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Likely sending a DELETE notification."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pfkey.c","line":601,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Either 1.) find an existing IKE SA and go to CREATE_CHILD_SA\u003c or 2.) Initiate IKE_SA_INIT."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":48,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Can we get a bit of a theory statement here that talks about how various PCKS11 objects are mapped to handles and threads? In particular, I\u0027m curious about the guarantees that a given thread (and thus handle) that created an object, will be the one that destroys it. As while it seems there\u0027s a global set of handles, it\u0027s not clear to me if an object allocated by one handle can be freed by another."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":53,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"These pieces of data appear to be possible to access from multiple threads concurrently. Is there a reason that no locking is employed here? A comment describing the intended synchronization of this data would be useful."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":53,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I strongly recommend prefixes for global data."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":101,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"The encr_data is explicitly sized and has an extra set of zero entries which could presumably be used to tell how far one should read. How is auth_data supposed to be sized and how are users supposed to know they haven\u0027t gone too far?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":101,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"It actually doesn\u0027t have an explicit 0 entry -- just the last few entries just currently don\u0027t have PKCS#11 defined mechanisms (however the stringified algorithm name is still useful to have for diagnostic purposes).  However I will explicitly size auth_data and include the comments in pkcs11.h on sizing and how they\u0027re intended to be used."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":147,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Other places use EXIT_FAILURE, should we as well here?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":147,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":152,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Other places use EXIT_FAILURE, should we as well here?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":152,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":157,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Other places use EXIT_FAILURE, should we as well here?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":157,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":164,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Other places use EXIT_FAILURE, should we as well here?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":164,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":169,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Can we use macros which explain where these values come from? Seems to be the pkcs string length + 1."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":169,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":202,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"See comment in pkcs11_init() about buffer sizes."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":202,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":212,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Maybe make this a macro?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":212,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":320,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"What, if anything, guarantees that we don\u0027t dereference past the maximum number of entries in these arrays?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":320,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"I\u0027ll add some VERIFYs for paranoia, but this is only called when signing packets.  We only ever do that after we have successfully negotiated the algorithms to use (if unsuccessful, the IKE SA is destroyed and we never get to the point of signing packets).  The negotiation process should guarantee that we never select an unknown algorithm, so it should always pass valid values here."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":372,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"What stops multiple threads from exiting simultaneously? It seems like we should use some form of locking here?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":372,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"For some reason when I did this, I was thinking it\u0027d only be called from the main thread (TID 1), however that\u0027s wrong.  I\u0027ll add a mutex to protect this."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":382,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"This should probably use recallocarray()."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":382,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":404,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"handles is global, but it seems like this is being called per-thread. What stops us from clobbering and racing in this data? Shouldn\u0027t we be using a global lock on this data?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":404,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.h","line":88,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Can you add a comment here about where the maximum sizes for consumers are?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.h","line":88,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":62,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Was worried for a sec until I realized pkt_ctor() set pkt_ptr."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":120,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Given that you took pains to note void * as restrict at +118, should you continue that here?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":120,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"I always thought it could only be used for function parameters, but it appears to work for variable declarations as well, so I\u0027ll fix it."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":164,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Did this really mean to be -\u003d? If so, can we please get that commented?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":164,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"No, that was a typo :)"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":167,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"This comment didn\u0027t make sense to me, given that down below we actually go through and are doing operations on uint32/uint64 structures."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":167,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"nifty.n_spisize is uint8_t, though since it\u0027s copied to a local struct, there should be no alignment issues either way.  I\u0027ll remove the comment since it\u0027s not really relevant."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":179,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Why do we copy a zero in the case of a 32-bit spi, but we copy the actual spi in the 64-bit case? If that was intentional, it deserves a comment."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":179,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"This is replaced with a common function that reads the SPI of the given size."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":226,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Should this VERIFY(!pss-\u003epss_pkt-\u003epkt_done); like others?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":258,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Let\u0027s add umem_recallocarray with all the overflow checks instead of implementing it manually?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":258,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I still believe we should do this."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":275,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Should this VERIFY(!pss-\u003epss_pkt-\u003epkt_done); like others?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":304,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Let\u0027s add umem_recallocarray with all the overflow checks instead of implementing it manually?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":304,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I still believe we should do this."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":329,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"What ensures that this length can\u0027t overflow and become truncated?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":329,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"The check on line 334 makes sure of it -- we never do anything with this unless that check succeeds, but I\u0027ll move this statement to after that so it\u0027s more obvious"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":340,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Is this cast needed?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":340,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Nope"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":354,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Should this VERIFY(!pss-\u003epss_pkt-\u003epkt_done); like others?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":354,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"pkt_add_payload() will verify this"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":395,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Do we need this cast?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":395,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Nope"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":398,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Probably worth a comment that the space was already allocated, hence it\u0027s safe to VERIFY."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":398,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":443,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I have the same overflow and addition questions as in pkt_add_xform_attr_tlv."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":448,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Please see the comments on pkt_add_xform_attr_tlv. They all apply here."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":488,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Can we get some macro for this, so folks know where this comes from?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":488,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":489,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Maybe use UINT16_MAX? It would have to be \u003c\u003d then."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":489,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"It\u0027s actually a bit under that (since the length includes the length of the header).  I\u0027ll create a #define for it."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":491,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"For this and all the others you can also use VERIFY0."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":491,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"I\u0027d prefer to use VERIFY for this -- since (at least in my mind) I want whatever is in ()s to denote \u0027success\u0027 or \u0027ok\u0027, using VERIFY0 would make the negation less obvious -- so a bit different than a function that returns 0 on success (which for those, I have updated them to use VERIFY0)."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":501,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Why do we use the BE macros here versus the hton macros elewhere?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":501,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"The payload structures are internally aligned (i.e. the offsets of the fields of a given payload struct align how you would expect), however there is no guarantee the payload itself starts on an aligned boundary, and there is no way we can pad it to align it.  So we can freely dereference locally defined instances of the struct, but (for portability) need to use the BE_IN* macros when referencing pointers into a packet.\n\nThese structures (proposals, transforms, transform attributes) all embed like a russian doll (proposals inside the payload, transforms inside proposals, and transform attributes inside transforms).  Each of these structures have a length field that includes all of the embedded structures, so as we add each one, we have to update successive length fields, none of which are guaranteed to be aligned."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":501,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"It\u0027s not clear to me how the BE_IN16 macros are actually helping with this. Aren\u0027t you assuming that the address taken in those macros are actually aligned? If you want to guarantee alignment, isn\u0027t the only way to actually bcopy the data elsewhere? Are the casting games that these macros play actually accurate?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":502,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Is there something that guarantees this addition won\u0027t be larger than a uint16_t and thus be truncated when writing out?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":506,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Is there something that guarantees this addition won\u0027t be larger than a uint16_t and thus be truncated when writing out?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":510,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Is there something that guarantees this addition won\u0027t be larger than a uint16_t and thus be truncated when writing out?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":513,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"It may be worth a comment for the unfamiliar as to why we add the size of the attr here but not to the other actual structures that we\u0027ve written out as I\u0027m not sure why at this time."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":513,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I think this still holds?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":518,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Should this VERIFY(!pss-\u003epss_pkt-\u003epkt_done); like others?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":518,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"It calls pkt_add_payload() to add the payload header (among other things), so that should catch it (can think of this function as a special case of pkt_add_payload())."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":527,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"pkt_add_payload takes a uint16_t size, should this be a uint16_t and what ensures we don\u0027t overflow?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":527,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"It seems that all of the questions here related to the overflow, the size of len, etc. still seem relevant?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":530,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"See above overflow question."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":539,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"We\u0027re assigning to n_type twice. Here and up two lines."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":539,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":542,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"See above overflow question at +527."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":550,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"We\u0027re assigning to type twice. Here and up two lines."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":550,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":554,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"So, this seems a bit inconsistent in terms of handling the out of space cases. If pkt_add_payload calls above fail, we\u0027ll fail. Where as here we assert that there\u0027s enough space programmatically. What\u0027s guaranteed that and why should this abort versus fail? I guess, why is it not a programmer error above, but is here. Unlike other cases, I\u0027m not sure I see us reserve space, specifically."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":554,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Lines 527 + 532/544 should guarantee that there is enough room for it (and return failure), so this is just confirming that."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":562,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Should this VERIFY(!pss-\u003epss_pkt-\u003epkt_done); like others?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":562,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"pkt_add_payload() will take care of it."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":565,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"What ensures that this doesn\u0027t overflow the pkt_add_payload uint16_t datatype and get truncated?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":579,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Can we comment on why the alignment bits are required here? Is this just to make sure that we can successfully dereference the pkt_hdr structure\u0027s we\u0027re manipulating or something else?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":579,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":597,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Can we comment on why the alignment bits are required here? Is this just to make sure that we can successfully dereference the pkt_hdr structure\u0027s we\u0027re manipulating or something else?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":597,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":600,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Like I said on MM\u0027s #os channel earlier, this seems wasteful."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":641,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Probably useful to include the truncated size in this message."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":641,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":670,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"So, what are the intended semantics of PKT_WALK_STOP. It looks like it\u0027s not used. I wonder if we should or shouldn\u0027t check it."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":677,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"If we drop PKT_WALK_STOP then I guess this can just be ret. Given that we don\u0027t use it and it seems semantically similar to PKT_WALK_STOP, it may be simpler to just drop it."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":702,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Should this be a ikev2_pay_type_t? It\u0027s only ever called with enums of that type. Alternatively, should it be a uint8_t if that\u0027s what we\u0027re comparing it to?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":702,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Similar to pkt_get_notify, this will also eventually be used with IKEv1 which uses it\u0027s own enum (though as it turns out, at least for the payload type, they explicitly made the IKEv1 and IKEv2 payload type values not overlap each other, so we could potentially have one \u0027ike_payload_type_t\u0027 that has the IKEV1_PAYLOAD_* and IKEV2_PAYLOAD_* values and use that here.\n\nHowever at least for now, I\u0027ll change it to uint8_t"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":707,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Can this be a #define somewhere with an explanation of where it comes from?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":707,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"With changing type to uint8_t, I\u0027ll remove these as all it\u0027s doing is making sure the value 8 bits."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":710,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Can you explain why this is needed? Maybe add a comment. I ask, because I don\u0027t see any callers that use it."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":710,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Doh!  The illumos vendor detection in ike_sa_init.c should use this (I think that code was written before this was).  There are some payloads that can appear multiple times.  The intention is that you can use this to iterate through payloads of a given type via something like \u0027for (pay \u003d pkt_get_payload(pkt, IKEV2_PAYLOAD_VENDOR); pay !\u003d NULL; pay \u003d pkt_get_payload(pkt, IKEV2_PAYLOAD_VENDOR, pay)) { ... }\u0027, so we need to start looking for the next payload of the given type starting after the one we just returned.\n\npkt_get_notify() works in a similar way, but based of the type of the notify payload (the check_nat() function in ike_sa_init.c does use this to iterate through the NAT detection payloads).\n\nThis will be used more with the AUTH exchange where there could be multiple CERT and CERTREQ payloads that we will need to iterate through."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":710,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"This should be a comment. I don\u0027t think I\u0027d have the ability to walk up to the code and understand this."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":712,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"pkt_payload_count is a uint16_t. Any reason to use a size_t?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":712,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Just habit for loops to use size_t, but I can change it."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":745,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Any reason this isn\u0027t a ikev2_notify_type_t? Alternatively, should this be a uint16_t, since that\u0027s what we\u0027re casting it to?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":745,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"We could probably do uint16_t -- notify payloads between IKEv1 and IKEv2 are very similar (IKEv1 has an additional field that was removed in IKEv2), and the pkt_* functions are intended to be for stuff in IKEv1 and IKEv2 packets that are in common (or very similar).\n\nHowever the notify types values between the two are different, so we can\u0027t use an enum here."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":749,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"If we change the type of type to uint16_t, these really wouldn\u0027t make any sense I don\u0027t think."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":781,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Is it really the case that no user derived input can reach here and we abort? I\u0027m just trying to understand this versus the bit at +767 say."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":781,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"SPIs are either 64-bit values (for IKE) or 32-bit for AH and ESP (as well as fibre-channel, though we don\u0027t support encrypted fibre-channel).  The spilen value is determined based on the type of SA we\u0027re dealing with, so not directly from user input.  In certain instances, no SPI value is added and the values from the IKE packet header are used instead, so the only valid values are 8, 4, or 0."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":841,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Why are these required?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":841,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"My understanding of how C99 inline functions work is that you have to specify a \u0027parking lot\u0027 (for lack of a better term) where it will put the code of an inline function in case the compiler decides to not inline a function (since barring compiler flags indicating otherwise, inline is by default treated as a hint)."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":841,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I have to admit, this makes me feel somewhat dubious about the decision to inline these functions. Is the debugability tradeoff really worth it?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","line":61,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Why don\u0027t we? It\u0027d help to know where this number came from."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","line":61,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"I\u0027ll add a larger comment -- but in all of the known exchanges, none of them should  typically include more than 16 payloads (that\u0027s actually rounded up).   The only exception would be if one includes a large number of certificates or certificate chains while doing authentication."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","line":71,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Where did this number come from?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","line":71,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Similarly, all the document exchanges should typically include fewer than 8 notification payloads, so it was a rounded up value from that."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","line":73,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Where did 8k come from? An RFC, some impact on jumbo, something else?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","line":73,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Sun :)  The real answer is I think it\u0027s just an arbitrarily large amount that should handle all reasonable requests (but statically sizes to allow it to be allocated from a umem_cache)."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","line":73,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Also, the RFC suggests accepting up to 3000 bytes, so 8192 is just the next higher power of two.  I\u0027ll add a comment referencing the recommended supported packet sizes from RFC7296, and since this should only possibly occur once the encrypted channel is setup, we can also send a notification (essentially an error message) to the peer if they try to send something too large, though that code would need to be added."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","line":137,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"What if this underflows?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","line":137,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"pkt_len (I\u0027ll change the ASSERTs there to VERIFYs) should guarantee it\u0027s output is \u003c\u003d MAX_PACKET_SIZE"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","line":146,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"What if this underflows and thus wraps around at runtime?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","line":146,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"We could go ahead and change the ASSERT3P()s to VERIFY3P()s -- the one at 145 should guarantee it can never underflow."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","line":146,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Ummm, can some grinning weirdo with a fuzzer mess you up in this case?  Doing VERIFY on read-side before processing seems reckless."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","line":146,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Actually it turns out nothing uses this anymore, so I\u0027ll remove it.\n\nThough just for completeness, the pkt_t creation fails if the header or payload lengths don\u0027t all agree, so the intention was that it should have been validated before this was used."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","line":152,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Should this be more assertive or should we check and error in case we hit this at runtime so we don\u0027t just dereference garbage?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","line":152,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"I\u0027ll change it to a VERIFY"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","line":161,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Can we get a comment as to what guarantees this. This is incredibly non-obvious and it\u0027s not clear why it\u0027s safe."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","line":161,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"I\u0027ll add a comment -- basically ike_payload_t is defined as having byte alignment and pp_ptr always points to the byte after the ike_payload_t header (even with empty payloads)."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","line":168,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Should this be more assertive or should we check and error in case we hit this at runtime so we don\u0027t just dereference garbage?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","line":168,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"I\u0027ll change it to a VERIFY"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","line":177,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Can we use htobe32? I find the more common functions make the intent a bit clearer."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","line":177,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Unfortunately, IKE doesn\u0027t align any of their structures, so aside from the initial header, every structure can have arbitrary alignment within the packet (and the structures are defined such that we cannot add our own padding to force alignment).  The BE_OUTnn macros appear to be explicitly for dereferencing potentially unaligned pointers, while I don\u0027t believe htobe32() would.  This is probably a moot point for X86 which doesn\u0027t care about alignment, but it\u0027d be needly making things harder to port to any future platforms that do."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","line":177,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"That\u0027s an ISAKMP-ism that should\u0027ve been nuked with IKEv2, but wasn\u0027t.  :("},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","line":184,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Same thing on htobe64?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","line":184,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Similar comment as above."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/preshared.c","line":176,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Ranges?  Or was that just future-planning in preshared.h?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/preshared.c","line":181,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"I was going to mention something about aggressive mode in preshared.h, but I\u0027ll mention it here.  I wonder if you should just get rid of mode altogether?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/preshared.c","line":2015,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"I generally like this idea.  This is one case, IMHO, where we should completely break with the past and have simple, three-field, preshared keys.  local_id/type/val, remote_id/type/val, and key."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/preshared.c","line":2015,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"I\u0027m not sure who gets credit for this -- this file is almost completely unchanged from the last Sun/Oracle drop before things closed, so I\u0027m unsure of the author.\n\nHowever, it\u0027s certainly something we can do as we start the IKE_AUTH exchange"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/preshared.h","line":43,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"If we are supporting prefixes and ranges (and in.iked already supports prefixes), we should probably NOT use sockaddrs, but use one AF argument for all addresses, then have space low/high for each of local \u0026 remote.\n\nAnd as before, if I wrote this bit, I apologize for not thinking it through."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/preshared.h","line":43,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"The preshared.[ch] are almost (if not) completely as-is from the old code drop, so probably was your code (since this really doesn\u0027t get touched until the IKE_AUTH exchange, I\u0027ve not really touched it) :)\n\nBut not a big deal either way.  I was thinking about eventually going through this as well as the config parsing code to see what things could be shared between the two."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/preshared.h","line":82,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"I can\u0027t remember why these aren\u0027t just stolen from net/pfkeyv2.h.  Maybe when I hit preshared.c it\u0027ll be clear."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":26,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Can we get a theory statement that covers a few points:\n\n* The general purpose of this and how it fits into the broader picture?\n* How serialization or other guarantees are in place to ensure that two threads can\u0027t be in the same place at the same time?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":26,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done.  The short answer (which I\u0027ll elaborate on in the additional comments) is that this is what takes the DH/EC shared key and nonce payloads to generate a pseudo-random stream for a given SA (either IKE, AH, or ESP) whose output are the keys used for encryption and signing.  As such, the lifetime of a prfp_t is just the lifetime of the calling function (each new SA will have a new prfp_t initialized with new values)."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":50,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Should we check that p11h() didn\u0027t return CK_INVALID_HANDLE before calling this?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":50,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"See the other comments -- this is only called by worker threads (I can add a VERIFY to that), which must have a PKCS#11 session handle assigned to them at creation, so this can never fail."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":61,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Does the PKCS#11 spec (sorry to make you dive there) say anything?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":61,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"PCKS#11 is not very clear, though looking at the pkcs11_softtoken implementation, it appears a failure resets the state, so should be unnecessary."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":175,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Is it possible for tlen to be zero after this or is that guaranteed by prfplus_update()?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":175,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"The prfplus_update() function generates a new block (of size prfp-\u003eprop_tbuflen) of data and resets prfp-\u003eprfp_pos (the position within the block) to 0, so it cannot.  In reality, tlen is always equal to prfp-\u003eprfp_tbuflen at this point, though it was set this way mostly just for consistency with how tlen (how much is left in the current block) is calculated at the top of the loop at line 167."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":178,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"So, outlen doesn\u0027t seem to change to reflect the amount of data written. Should this be outlen - n to reflect that data has been written? Otherwise, if we get towards the end of the buffer couldn\u0027t we overrun it as out + n + tlen \u003e outlen?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":178,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Yes -- I had reworked this from the 4-5 year old version I had done to try to simplify this and missed this.  Since this is used to create the keys in the IKE_SA_INIT exchange, but the keys themselves aren\u0027t used until the next change (which hasn\u0027t been written yet) this hadn\u0027t been tested yet"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":198,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Can we add a comment that explains the iteration count and when this might happen or why? Maybe a macro for the 0xff?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":198,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"I\u0027ll add a macro \u0027PRFP_ITER_MAX\u0027 with a comment noting that RFC7296 only specifies up to 255 iterations of the PRF alg.  The rest of the details are hopefully explained in the comments for prfplus_init() (if it\u0027s still unclear, please let me know)."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":224,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Can we use a macro for this value so we\u0027re not encoding it in several places?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":224,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":227,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"This makes me want a umem_excise that does this and potentially other things on the buffer."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":227,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Or a flag to *mem_alloc() which indicates excise-on-free? (There are kmem applications for this as well.)"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":252,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"So this is going to basically do an alloca. Are we sure that we\u0027re going to always have enough stack space and that len is always going to be a reasonable value?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":252,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"I can add a comment, but the keys being created are actual keys used for encryption and signing (e.g. AES, HMAC_SHA512, etc).  The largest key size currently defined is 256 bits (i.e. 32 bytes).  We could define a \u0027IKEV2_MAX_KEYLEN\u0027 or such and put a verify before it\u0027s allocated if that\u0027d be preferred, or just add a comment noting that len should small enough to allow that."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":260,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"What happens if this returns an invalid handle?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":260,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"This only happens on a worker thread, so there is always a session handle defined for the worker."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":269,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Can we put { and } around the multi-line if?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":269,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":292,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Is zero meant to represent an invalid identifier here? As otherwise it seems to imply CKM_RSA_PKCS_KEY_PAIR_GEN right?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":292,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"CKM_INVALID_MECHANISM (aka. 0xffffffff, -1, or MAX_UINT32) may be more appropriate here."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":292,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"There is no provision in PKCS#11 to indicate \u0027no or unknown mechanism type\u0027 -- there is CKR_MECHANISM_VALID, but PKCS#11 appears to treat the mechanism IDs and return values as distinct ID spaces, so returning a CKR_ value when one is expecting a CKM_ value is probably wrong.\n\nThe problem is there\u0027s no currently defined PKCS#11 mechanism for those PRFs.  We could probably just make those \u0027INVALID(\"unsupported PRF function\")\u0027 as the SA negotiation code should never allow us to agree upon a PRF we don\u0027t support (if it does, it is an application bug)."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":317,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Should this be a constant somewhere?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":317,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":319,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Macro somewhere for this?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":319,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":344,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Can we use constants like SHA256_DIGEST_LENGTH (from sys/sha2.h, etc. instead of raw numbers?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":344,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.h","line":34,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Can we use a macro for this so we don\u0027t encode it in several places?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.h","line":34,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/random.c","line":56,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"If you use getrandom() then you don\u0027t need to keep these FDs around. If you do, you may want to mark them O_CLOEXEC, etc."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/random.c","line":82,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Replace with getrandom()?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/random.c","line":82,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"I wasn\u0027t aware this had been added to SmartOS (or Illumos) -- it appears there is no man page for it on SmartOS.  There is a man page for getentropy(3C) however."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/random.c","line":82,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Right, there was no manual page because it\u0027s private to the system. We should use it. Or really just ditch this all and use arc4random(). I can\u0027t really imagine there\u0027s any good reason to distinguish between the two cases and play all the games with the inline functions and reading more and truncating off for some reason."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/random.c","line":87,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Why do we assume that we can\u0027t get an interrupt or other short read?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/random.c","line":87,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"All signals for the process are handled by a single detached thread (that then delivers them as user events to the main thread via port_send(3C).  random(7D) says that the read should block until the requested amount of data is available (unless it\u0027s set non-blocking, which we do not do there), so there should be no other way short of a fatal error (ENXIO) that the read should fail."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/random.c","line":91,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Should we consider using something like arc4random() for this?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/random.c","line":91,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"We could -- almost all of this file predates Oracle closing off Solaris (with the rest being just minor tweaks around the error messages by me), so it predates a lot of stuff."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/random.c","line":96,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Replace with getrandom()?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/random.c","line":101,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Why do we assume that we can\u0027t get an interrupt or other short read?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/random.c","line":101,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Similar to random_high(), it\u0027s never called from a thread that can receive signals and urandom is guaranteed to never block according to random(7D)."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/random.h","line":29,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Can you comment why some are inline and others aren\u0027t?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/random.h","line":29,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/timer.c","line":73,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Verify?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/timer.c","line":73,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/timer.c","line":183,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Because we rely on the use of arg \u003d\u003d NULL as a key to remove all timeouts of a given type, we should probably not allow a NULL arg. Alternatively, we should return a specific key that can be used to find the specific entry to remove again later."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/timer.c","line":183,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/timer.c","line":200,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"You may want to use an avl tree for this insert, especially if the number of items to search is large."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/timer.c","line":200,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"I was going to see how bad it was in practice -- since the number of different events is small, and their timeouts are fixed (i.e. we never set an IKE SA creation timeout to different values for different SAs) one thing I was thinking of would be to traverse in reverse order instead of at the front (with the thinking being that most new timeouts should fire at a time that\u0027s after the already scheduled timeouts).  This is also kept per worker vs. a global list.\n\nHowever, I do like the periodic lib you linked to, so it\u0027s very possible I\u0027ll be going down that route."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/timer.c","line":213,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Check for overflow as caller does not."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/timer.c","line":213,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/timer.c","line":236,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"What is when supposed to represent? Based on callers it seems like te_time - now will in the general case be negative because we\u0027ve processed it which means that te_time was less than a previous in time now."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/timer.c","line":236,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"This should be signed -- it\u0027s how long (in ms) from now when the event will fire.  The only time this might be negative though is when processing the timers.  When creating or cancelling timers, they have not fired yet, so te-\u003ete_time should usually be in the future (it is possible that something scheduled _very_ soon in the future might pass it\u0027s deadline between the time the event was created and when it was logged, which means it\u0027ll fire on the next time through the worker loop)."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/timer.c","line":236,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"This is going to be a call generator. If it gets called every time we process events and it ends up negative that\u0027s going to be very confusing."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/util.c","line":29,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"This comment was a bit confusing. Did you mean to say it was the same case as above?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/util.c","line":29,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Yes, I\u0027ll fix that."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/util.c","line":75,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Can the daemon not drive on from this?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/util.c","line":75,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/util.c","line":169,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Do you know why we need to define all these here?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/util.c","line":169,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Looking it back up, these should actually be \u0027extern inline\u0027, not just \u0027extern\u0027.\n\nLike the other inline functions, the compiler will instantiate a non-inline version of the functions for instances where it cannot inline a call to them.  Unlike C++ where it happens randomly (or possibly multiple times in different compilation units), with C99 one has to explicitly indicate where the non-inlined versions should go, which is what these statements do.  These are all used in lieu of macros since they can usually give much nicer error messages on compilation errors than macros."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.c","line":57,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Can you describe the lock ordering rules that are in use between this and the worker lock, etc."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.c","line":64,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"If you want, you can statically initialize this with ERRORCHECKMUTEX."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.c","line":65,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I\u0027d recommend using prefixes."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.c","line":85,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Can you describe what you\u0027re actually looking for? You can still actually check before doing the multiplication, no?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.c","line":142,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Can you state where they have been done?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.c","line":188,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Do we need to worry about the wi_data on wq_items?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.c","line":188,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"No -- the data is passed to whatever handles the particular message type and it will dispose of it when appropriate"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.c","line":217,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"This function appears unused. I\u0027m not sure what its intended semantics are."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.c","line":220,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Maybe it\u0027s worth a comment describing the conditions that indicate why we would suspend everything and what would cause us to resume them. Maybe add that to the theory statement?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.c","line":220,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.c","line":249,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"So it appears that nsuspended is incremented when we suspend, but not decremented when we resume. Is it decremented some other way? If not, will we only ever be able to send the signal that we\u0027re done, once?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.c","line":249,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.c","line":341,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"If you don\u0027t want the CONSTCOND you can use for (;;)"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.c","line":426,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Did you mean to do an assignment or something else here?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.c","line":437,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Should this be treated with the default case and make sure that the packet is freed?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.c","line":437,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Seems like this is still a thing?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.c","line":459,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Given that you\u0027re using an rwlock down below on the workers array, shouldn\u0027t we be using it up here when we\u0027re looking at the sizing and attempting to resize it? Otherwise, it seems like something else could come in while this is going on and throw things off."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.c","line":466,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"It looks like this is trying to recallocarray; however, I don\u0027t see any place where we copy over the old worker allocation to the new one. Is that intentional?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.h","line":46,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Can you describe the life time of the data that comes from wi_data? Is it owned by the worker or something else? Is it designed such that it is never dynamically allocated, etc."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.h","line":46,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/Makefile","type":"ADDED","insertions":58,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/Makefile.com","type":"ADDED","insertions":104,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/THIRDPARTYLICENSE","type":"ADDED","insertions":26,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/THIRDPARTYLICENSE.descrip","type":"ADDED","insertions":1,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/amd64/Makefile","type":"ADDED","insertions":30,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.c","type":"ADDED","insertions":205,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.h","type":"ADDED","insertions":160,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config_parse.c","type":"ADDED","insertions":1649,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/defs.h","type":"ADDED","insertions":240,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/dh.c","type":"ADDED","insertions":418,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/dh.h","type":"ADDED","insertions":40,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","type":"ADDED","insertions":275,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.h","type":"ADDED","insertions":37,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ike.h","type":"ADDED","insertions":117,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev1.h","type":"ADDED","insertions":174,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev1_pkt.c","type":"ADDED","insertions":78,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2.h","type":"ADDED","insertions":528,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_common.c","type":"ADDED","insertions":712,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_common.h","type":"ADDED","insertions":69,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_cookie.c","type":"ADDED","insertions":287,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_cookie.h","type":"ADDED","insertions":41,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_enum.c","type":"ADDED","insertions":430,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_enum.h","type":"ADDED","insertions":41,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_pkt.c","type":"ADDED","insertions":1369,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_pkt.h","type":"ADDED","insertions":114,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_proto.c","type":"ADDED","insertions":531,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_proto.h","type":"ADDED","insertions":44,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.c","type":"ADDED","insertions":1051,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.h","type":"ADDED","insertions":210,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa_init.c","type":"ADDED","insertions":822,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ilist.h","type":"ADDED","insertions":156,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/inbound.c","type":"ADDED","insertions":324,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/inbound.h","type":"ADDED","insertions":37,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/main.c","type":"ADDED","insertions":362,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pfkey.c","type":"ADDED","insertions":738,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","type":"ADDED","insertions":433,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.h","type":"ADDED","insertions":104,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","type":"ADDED","insertions":841,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","type":"ADDED","insertions":221,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt_impl.h","type":"ADDED","insertions":69,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/preshared.c","type":"ADDED","insertions":2041,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/preshared.h","type":"ADDED","insertions":212,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","type":"ADDED","insertions":349,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.h","type":"ADDED","insertions":63,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/random.c","type":"ADDED","insertions":109,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/random.h","type":"ADDED","insertions":71,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/timer.c","type":"ADDED","insertions":270,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/timer.h","type":"ADDED","insertions":68,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/util.c","type":"ADDED","insertions":169,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.c","type":"ADDED","insertions":543,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.h","type":"ADDED","insertions":85,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/i386/Makefile","type":"ADDED","insertions":29,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/sparcv9/Makefile","type":"ADDED","insertions":30,"deletions":0},{"file":"usr/src/lib/libipsecutil/common/ikedoor.h","type":"MODIFIED","insertions":1,"deletions":0},{"file":"usr/src/lib/libipsecutil/common/ipsec_util.h","type":"MODIFIED","insertions":6,"deletions":0}],"sizeInsertions":17192,"sizeDeletions":0},{"number":"3","revision":"20e09857ada41c54d9ae7fd617c699d6c588ad6e","parents":["5f08c4f76a87c4eccd6faed949f31aae4d5c24ea"],"ref":"refs/changes/72/2572/3","uploader":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"createdOn":1505960848,"author":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"isDraft":false,"kind":"REWORK","files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/Makefile","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/Makefile","type":"ADDED","insertions":58,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/Makefile.com","type":"ADDED","insertions":103,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/THIRDPARTYLICENSE","type":"ADDED","insertions":26,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/THIRDPARTYLICENSE.descrip","type":"ADDED","insertions":1,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/amd64/Makefile","type":"ADDED","insertions":30,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.c","type":"ADDED","insertions":211,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.h","type":"ADDED","insertions":170,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config_parse.c","type":"ADDED","insertions":1647,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/defs.h","type":"ADDED","insertions":228,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/dh.c","type":"ADDED","insertions":407,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/dh.h","type":"ADDED","insertions":39,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","type":"ADDED","insertions":280,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.h","type":"ADDED","insertions":37,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ike.h","type":"ADDED","insertions":120,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev1.h","type":"ADDED","insertions":174,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev1_pkt.c","type":"ADDED","insertions":78,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2.h","type":"ADDED","insertions":532,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_common.c","type":"ADDED","insertions":713,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_common.h","type":"ADDED","insertions":69,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_cookie.c","type":"ADDED","insertions":333,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_cookie.h","type":"ADDED","insertions":41,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_enum.c","type":"ADDED","insertions":430,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_enum.h","type":"ADDED","insertions":41,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_pkt.c","type":"ADDED","insertions":1437,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_pkt.h","type":"ADDED","insertions":114,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_proto.c","type":"ADDED","insertions":497,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_proto.h","type":"ADDED","insertions":44,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.c","type":"ADDED","insertions":1050,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.h","type":"ADDED","insertions":218,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa_init.c","type":"ADDED","insertions":867,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ilist.h","type":"ADDED","insertions":156,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/inbound.c","type":"ADDED","insertions":329,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/inbound.h","type":"ADDED","insertions":37,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/main.c","type":"ADDED","insertions":404,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pfkey.c","type":"ADDED","insertions":738,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","type":"ADDED","insertions":506,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.h","type":"ADDED","insertions":112,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","type":"ADDED","insertions":831,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","type":"ADDED","insertions":250,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt_impl.h","type":"ADDED","insertions":70,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/preshared.c","type":"ADDED","insertions":2041,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/preshared.h","type":"ADDED","insertions":212,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","type":"ADDED","insertions":411,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.h","type":"ADDED","insertions":64,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/random.c","type":"ADDED","insertions":109,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/random.h","type":"ADDED","insertions":77,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/timer.c","type":"ADDED","insertions":276,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/timer.h","type":"ADDED","insertions":68,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/util.c","type":"ADDED","insertions":181,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.c","type":"ADDED","insertions":496,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.h","type":"ADDED","insertions":90,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/i386/Makefile","type":"ADDED","insertions":29,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/sparcv9/Makefile","type":"ADDED","insertions":30,"deletions":0},{"file":"usr/src/lib/libipsecutil/common/ikedoor.h","type":"MODIFIED","insertions":1,"deletions":0},{"file":"usr/src/lib/libipsecutil/common/ipsec_util.h","type":"MODIFIED","insertions":6,"deletions":0}],"sizeInsertions":17520,"sizeDeletions":-1},{"number":"4","revision":"b0a293b58d116dc8613b639989554e09b2520c32","parents":["5f08c4f76a87c4eccd6faed949f31aae4d5c24ea"],"ref":"refs/changes/72/2572/4","uploader":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"createdOn":1506017996,"author":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"isDraft":false,"kind":"REWORK","comments":[{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/Makefile.com","line":70,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Oh, ignore this -- just trying to diagnose some lint warnings that got in.  It looks like lint may have some dislike of inline functions that I\u0027ll need to dig into at some point (I\u0027d like to be as surgical as I can in disabling lint checks, though it\u0027s not there yet)"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.c","line":136,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Upon further review... I wonder if there should be greater-than/less-than macros for IPv6 addresses?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.c","line":136,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"I could rewrite this as a macro or inline function if that\u0027d  be a bit nicer"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.h","line":86,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Generally, the publicly-usable bits don\u0027t have \u0027u\u0027 in them.  I\u0027d change the union to have idu_* names, and the #defines to have id_* names."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.h","line":86,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"As it turns out, having \u0027id_len\u0027 as a macro breaks pkcs11t.h (oh if only unnamed unions appeared before C11).. so this will all use ciu_* / ci_ prefixes which seem to be ok"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.h","line":86,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/defs.h","line":146,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Okay, didn\u0027t realize at the time this was bunyan fodder.  A quick comment above might be useful."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/defs.h","line":146,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","line":92,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"NIT: next power of 2 after 3000 is 4096.  I still like 8k as the limit, however."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","line":92,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Doh."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","line":92,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Done"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":243,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"NIT: \"... reached max (0x%x)\", PRFP_ITER_MAX,...) , just in case we change it?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":243,"reviewer":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"message":"Unfortunately bunyan doesn\u0027t currently allow printf(3C)-style formatting strings.  RFC7296 itself doesn\u0027t define PRF+ beyond 255 iterations, so the only thing we could do would be to redefine it to a smaller value."}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/Makefile","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/Makefile","type":"ADDED","insertions":58,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/Makefile.com","type":"ADDED","insertions":113,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/THIRDPARTYLICENSE","type":"ADDED","insertions":26,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/THIRDPARTYLICENSE.descrip","type":"ADDED","insertions":1,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/amd64/Makefile","type":"ADDED","insertions":30,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.c","type":"ADDED","insertions":211,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.h","type":"ADDED","insertions":170,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config_parse.c","type":"ADDED","insertions":1650,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/defs.h","type":"ADDED","insertions":229,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/dh.c","type":"ADDED","insertions":407,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/dh.h","type":"ADDED","insertions":39,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","type":"ADDED","insertions":284,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.h","type":"ADDED","insertions":37,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ike.h","type":"ADDED","insertions":120,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev1.h","type":"ADDED","insertions":174,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev1_pkt.c","type":"ADDED","insertions":78,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2.h","type":"ADDED","insertions":532,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_common.c","type":"ADDED","insertions":713,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_common.h","type":"ADDED","insertions":69,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_cookie.c","type":"ADDED","insertions":337,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_cookie.h","type":"ADDED","insertions":40,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_enum.c","type":"ADDED","insertions":430,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_enum.h","type":"ADDED","insertions":41,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_pkt.c","type":"ADDED","insertions":1445,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_pkt.h","type":"ADDED","insertions":114,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_proto.c","type":"ADDED","insertions":497,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_proto.h","type":"ADDED","insertions":44,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.c","type":"ADDED","insertions":1047,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.h","type":"ADDED","insertions":218,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa_init.c","type":"ADDED","insertions":872,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ilist.h","type":"ADDED","insertions":156,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/inbound.c","type":"ADDED","insertions":330,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/inbound.h","type":"ADDED","insertions":37,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/main.c","type":"ADDED","insertions":402,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pfkey.c","type":"ADDED","insertions":738,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","type":"ADDED","insertions":506,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.h","type":"ADDED","insertions":112,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","type":"ADDED","insertions":833,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","type":"ADDED","insertions":245,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt_impl.h","type":"ADDED","insertions":64,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/preshared.c","type":"ADDED","insertions":2041,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/preshared.h","type":"ADDED","insertions":212,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","type":"ADDED","insertions":415,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.h","type":"ADDED","insertions":64,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/random.c","type":"ADDED","insertions":109,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/random.h","type":"ADDED","insertions":77,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/timer.c","type":"ADDED","insertions":273,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/timer.h","type":"ADDED","insertions":68,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/util.c","type":"ADDED","insertions":181,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.c","type":"ADDED","insertions":493,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.h","type":"ADDED","insertions":90,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/i386/Makefile","type":"ADDED","insertions":29,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/sparcv9/Makefile","type":"ADDED","insertions":30,"deletions":0},{"file":"usr/src/lib/libipsecutil/common/ikedoor.h","type":"MODIFIED","insertions":1,"deletions":0},{"file":"usr/src/lib/libipsecutil/common/ipsec_util.h","type":"MODIFIED","insertions":6,"deletions":0}],"sizeInsertions":17539,"sizeDeletions":-1},{"number":"5","revision":"d43a49656532bc493e2adc48a2522e385285ff9b","parents":["5f08c4f76a87c4eccd6faed949f31aae4d5c24ea"],"ref":"refs/changes/72/2572/5","uploader":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"createdOn":1506348491,"author":{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},"isDraft":false,"kind":"REWORK","approvals":[{"type":"Code-Review","description":"Code-Review","value":"1","grantedOn":1506629437,"by":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"}}],"comments":[{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/dh.c","line":326,"reviewer":{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"},"message":"Please add large-generator MODP groups?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","line":57,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Please add a comment explaining why this is required (though I understand intuitively why)."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa_init.c","line":828,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"We should use a macro for raw constants. I\u0027d suggest trying to find something like NBBY if it\u0027s defined (the common value used in the kernel for this)."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/main.c","line":152,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I usually recommend your own daemonizing routine versus daemon itself. There are a lot of steps that you\u0027ll want to use for this that aren\u0027t being covered today. See for example the varpd daemonization or the bits that Alex has in progress for rfd 77."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/main.c","line":178,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Probably worth making sure close is successful."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":92,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Any reason we can\u0027t define them in a common header file for consumers then?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","line":442,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Are you sure you want reallocarray and not recallocarray?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","line":445,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"I\u0027m not sure what this comment is trying to tell me. What is \u0027this\u0027 in this statement?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","line":159,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"So, is it the case that the programmer controls 100% of this and there\u0027s no way user related data can influence this?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","line":305,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"do we need to explicit_bzero the buffer here even on failure as their could be useful contents still left on the stack, no?"},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.c","line":195,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"This condition checking seems racy. Shouldn\u0027t the act of suspending exclude a resume until the suspend has fully finished? As this is written, someone can come in and start a suspend at this point (assume you get descheduled after releasing the rw lock. If someone else comes in and starts waking up even a single one, you\u0027ll never end up hitting the condition.\n\nWe should probably make sure worker suspension / resumption is 100% exclusive. In other words a resume should block while a suspend is ongoing and the same is true of the opposite."},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.c","line":226,"reviewer":{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},"message":"Is there a reason semantically that this call does not block for all of the workers to be woken up where as suspend does?"}],"files":[{"file":"/COMMIT_MSG","type":"ADDED","insertions":7,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/Makefile","type":"MODIFIED","insertions":1,"deletions":-1},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/Makefile","type":"ADDED","insertions":58,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/Makefile.com","type":"ADDED","insertions":113,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/THIRDPARTYLICENSE","type":"ADDED","insertions":26,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/THIRDPARTYLICENSE.descrip","type":"ADDED","insertions":1,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/amd64/Makefile","type":"ADDED","insertions":30,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.c","type":"ADDED","insertions":211,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config.h","type":"ADDED","insertions":170,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/config_parse.c","type":"ADDED","insertions":1650,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/defs.h","type":"ADDED","insertions":229,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/dh.c","type":"ADDED","insertions":407,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/dh.h","type":"ADDED","insertions":39,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.c","type":"ADDED","insertions":284,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/fromto.h","type":"ADDED","insertions":37,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ike.h","type":"ADDED","insertions":120,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev1.h","type":"ADDED","insertions":174,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev1_pkt.c","type":"ADDED","insertions":78,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2.h","type":"ADDED","insertions":532,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_common.c","type":"ADDED","insertions":713,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_common.h","type":"ADDED","insertions":69,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_cookie.c","type":"ADDED","insertions":337,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_cookie.h","type":"ADDED","insertions":40,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_enum.c","type":"ADDED","insertions":430,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_enum.h","type":"ADDED","insertions":41,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_pkt.c","type":"ADDED","insertions":1445,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_pkt.h","type":"ADDED","insertions":114,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_proto.c","type":"ADDED","insertions":497,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_proto.h","type":"ADDED","insertions":44,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.c","type":"ADDED","insertions":1047,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa.h","type":"ADDED","insertions":218,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ikev2_sa_init.c","type":"ADDED","insertions":872,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/ilist.h","type":"ADDED","insertions":156,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/inbound.c","type":"ADDED","insertions":330,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/inbound.h","type":"ADDED","insertions":37,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/main.c","type":"ADDED","insertions":402,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pfkey.c","type":"ADDED","insertions":738,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.c","type":"ADDED","insertions":506,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkcs11.h","type":"ADDED","insertions":112,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.c","type":"ADDED","insertions":833,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt.h","type":"ADDED","insertions":245,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/pkt_impl.h","type":"ADDED","insertions":64,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/preshared.c","type":"ADDED","insertions":2041,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/preshared.h","type":"ADDED","insertions":212,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.c","type":"ADDED","insertions":415,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/prf.h","type":"ADDED","insertions":64,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/random.c","type":"ADDED","insertions":109,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/random.h","type":"ADDED","insertions":77,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/timer.c","type":"ADDED","insertions":273,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/timer.h","type":"ADDED","insertions":68,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/util.c","type":"ADDED","insertions":181,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.c","type":"ADDED","insertions":493,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/common/worker.h","type":"ADDED","insertions":90,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/i386/Makefile","type":"ADDED","insertions":29,"deletions":0},{"file":"usr/src/cmd/cmd-inet/usr.lib/in.ikev2/sparcv9/Makefile","type":"ADDED","insertions":30,"deletions":0},{"file":"usr/src/lib/libipsecutil/common/ikedoor.h","type":"MODIFIED","insertions":1,"deletions":0},{"file":"usr/src/lib/libipsecutil/common/ipsec_util.h","type":"MODIFIED","insertions":6,"deletions":0}],"sizeInsertions":17539,"sizeDeletions":-1}],"allReviewers":[{"name":"Robert Mustacchi","email":"rm+illumos@fingolfin.org","username":"rmustacc"},{"name":"Jason King","email":"jason.king@joyent.com","username":"jasonbking"},{"name":"Dan McDonald","email":"danmcd@joyent.com","username":"danmcd"}]}