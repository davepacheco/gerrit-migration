commit 907506a17ede0bd75831585f170d55234b71972a (refs/changes/17/4517/4)
Author: Chris Burroughs <chris.burroughs@joyent.com>
Date:   2018-08-01T20:44:52+00:00 (1 year, 2 months ago)
    
    TRITON-313 walk back sdcadm steps export sugar
    Reviewed by: Trent Mick <trentm@gmail.com>
    Approved by: Trent Mick <trentm@gmail.com>

diff --git a/lib/cli/do_add_new_agent_svcs.js b/lib/cli/do_add_new_agent_svcs.js
index 9742a89..fba2923 100644
--- a/lib/cli/do_add_new_agent_svcs.js
+++ b/lib/cli/do_add_new_agent_svcs.js
@@ -18,7 +18,7 @@ function do_add_new_agent_svcs(_subcmd, _opts, _args, cb) {
         'Warning: "sdcadm experimental add-new-agent-svcs" is deprecated.');
     console.error('Use "sdcadm experimental update-other" or');
     console.error('"sdcadm experimental update-agents".\n');
-    steps.sapiEnsureAgentServices({
+    steps.sapi.ensureAgentServices({
         progress: this.progress,
         sdcadm: this.sdcadm,
         log: this.log
diff --git a/lib/cli/do_create.js b/lib/cli/do_create.js
index 5fa7065..2e49664 100644
--- a/lib/cli/do_create.js
+++ b/lib/cli/do_create.js
@@ -94,9 +94,9 @@ Create.prototype.execute = function cExecute(opts, args, cb) {
             });
         },
 
-        steps.serversServersFromServerNames, // ctx.serverNames -> ctx.servers
-        steps.serversEnsureServersSetup,
-        steps.serversEnsureServersRunning,
+        steps.servers.serversFromServerNames, // ctx.serverNames -> ctx.servers
+        steps.servers.ensureServersSetup,
+        steps.servers.ensureServersRunning,
 
         function getSvcs(_, next) {
             self.sdcadm.getServices({}, function (err, svcs_) {
diff --git a/lib/cli/do_fix_core_vm_resolvers.js b/lib/cli/do_fix_core_vm_resolvers.js
index 8bab208..040915c 100644
--- a/lib/cli/do_fix_core_vm_resolvers.js
+++ b/lib/cli/do_fix_core_vm_resolvers.js
@@ -28,7 +28,7 @@ function do_fix_core_vm_resolvers(subcmd, opts, args, cb) {
         return;
     }
 
-    steps.checkCoreVmInstancesResolvers({
+    steps.binder.checkCoreVmInstancesResolvers({
         sdcadm: self.sdcadm,
         progress: progress,
         log: log,
@@ -53,7 +53,7 @@ function do_fix_core_vm_resolvers(subcmd, opts, args, cb) {
             return;
         }
 
-        steps.updateCoreVmsResolvers({
+        steps.binder.updateCoreVmsResolvers({
             sdcadm: self.sdcadm,
             progress: progress,
             log: log,
diff --git a/lib/cli/do_update_agents.js b/lib/cli/do_update_agents.js
index 7653bf0..df8e90e 100644
--- a/lib/cli/do_update_agents.js
+++ b/lib/cli/do_update_agents.js
@@ -533,7 +533,7 @@ UpdateAgents.prototype.exec = function exec(callback) {
             });
         },
 
-        steps.sapiEnsureAgentServices,
+        steps.sapi.ensureAgentServices,
         self._stepDownloadAgentsshar.bind(self),
 
         function copyFileToAssetsDir(_, next) {
@@ -889,7 +889,7 @@ UpdateAgents.prototype.exec = function exec(callback) {
             });
         },
 
-        steps.noRabbitEnable
+        steps.noRabbit.noRabbitEnable
 
     ]}, function finishUpdateAgents(err) {
         if (err === true) { // early abort signal
diff --git a/lib/cli/do_update_other.js b/lib/cli/do_update_other.js
index 826d42a..c9e4c25 100644
--- a/lib/cli/do_update_other.js
+++ b/lib/cli/do_update_other.js
@@ -136,7 +136,7 @@ function do_update_other(subcmd, opts, args, cb) {
                 return;
             }
 
-            steps.noRabbitEnable(ctx, next);
+            steps.noRabbit.noRabbitEnable(ctx, next);
         },
 
         function getServices(ctx, next) {
@@ -611,7 +611,7 @@ function do_update_other(subcmd, opts, args, cb) {
                 func: function updateSizeParametersOne(svcName, done) {
                     assert.object(ctx.svcFromName[svcName]);
 
-                    steps.updateSizeParameters({
+                    steps.updateVmSize.updateSizeParameters({
                         progress: progress,
                         service: ctx.svcFromName[svcName],
                         log: self.log,
@@ -833,7 +833,7 @@ function do_update_other(subcmd, opts, args, cb) {
             });
         },
 
-        steps.sapiEnsureAgentServices,
+        steps.sapi.ensureAgentServices,
 
         /*
          * Previously CloudAPI configuration did not include an external
diff --git a/lib/post-setup/cmon.js b/lib/post-setup/cmon.js
index a3f5fb4..0fa9e6b 100644
--- a/lib/post-setup/cmon.js
+++ b/lib/post-setup/cmon.js
@@ -81,7 +81,7 @@ function do_cmon(subcmd, opts, args, cb) {
     };
 
     vasync.pipeline({arg: context, funcs: [
-        steps.sapiAssertFullMode,
+        steps.sapi.assertFullMode,
         function ensureSdcApp(_, next) {
             self.sdcadm.ensureSdcApp({}, next);
         },
diff --git a/lib/post-setup/cns.js b/lib/post-setup/cns.js
index b409492..7c6ff42 100644
--- a/lib/post-setup/cns.js
+++ b/lib/post-setup/cns.js
@@ -71,7 +71,7 @@ function do_cns(subcmd, opts, args, cb) {
         didSomething: false
     };
     vasync.pipeline({arg: context, funcs: [
-        steps.sapiAssertFullMode,
+        steps.sapi.assertFullMode,
         function ensureSdcApp(_, next) {
             self.sdcadm.ensureSdcApp({}, next);
         },
diff --git a/lib/post-setup/docker.js b/lib/post-setup/docker.js
index 0dd708c..158f043 100644
--- a/lib/post-setup/docker.js
+++ b/lib/post-setup/docker.js
@@ -77,7 +77,7 @@ function do_docker(subcmd, opts, args, cb) {
         urConnection: null
     };
     vasync.pipeline({arg: context, funcs: [
-        steps.sapiAssertFullMode,
+        steps.sapi.assertFullMode,
         function ensureSdcApp(_, next) {
             self.sdcadm.ensureSdcApp({}, next);
         },
@@ -113,7 +113,7 @@ function do_docker(subcmd, opts, args, cb) {
          * SDC Docker usage means biting the bullet and switching to the
          * "new" agents (cn-agent, vm-agent, net-agent) via the "no_rabbit"
          */
-        steps.noRabbitEnable,
+        steps.noRabbit.noRabbitEnable,
 
         function getDockerSvc(ctx, next) {
             self.sdcadm.sapi.listServices({
diff --git a/lib/post-setup/ha-binder.js b/lib/post-setup/ha-binder.js
index 7c15b26..56f8e57 100644
--- a/lib/post-setup/ha-binder.js
+++ b/lib/post-setup/ha-binder.js
@@ -417,7 +417,7 @@ function do_ha_binder(subcmd, opts, args, cb) {
                 next();
                 return;
             }
-            steps.getCoreZkConfig(commonOpts, function (err, zkCtx) {
+            steps.zookeeper.getCoreZkConfig(commonOpts, function (err, zkCtx) {
                 if (err) {
                     next(err);
                     return;
@@ -483,7 +483,7 @@ function do_ha_binder(subcmd, opts, args, cb) {
                 next();
                 return;
             }
-            steps.backupZKData(Object.assign({
+            steps.zookeeper.backupZKData(Object.assign({
                 ctx: ctx
             }, commonOpts), function backupCb(err, stamp) {
                 if (err) {
@@ -596,7 +596,7 @@ function do_ha_binder(subcmd, opts, args, cb) {
             vasync.forEachParallel({
                 inputs: newVms,
                 func: function replaceZkData(vm, nextVm) {
-                    steps.replaceZKData(Object.assign({
+                    steps.zookeeper.replaceZKData(Object.assign({
                         vm: vm,
                         stamp: ctx.stamp
                     }, commonOpts), nextVm);
@@ -611,7 +611,7 @@ function do_ha_binder(subcmd, opts, args, cb) {
                 return;
             }
 
-            steps.updateCoreZkConfig(Object.assign({
+            steps.zookeeker.updateCoreZkConfig(Object.assign({
                 ctx: ctx
             }, commonOpts), next);
         },
@@ -621,7 +621,7 @@ function do_ha_binder(subcmd, opts, args, cb) {
                 next();
                 return;
             }
-            steps.clearZKBackup({
+            steps.zookeeper.clearZKBackup({
                 progress: self.progress,
                 vm: vms[0],
                 stamp: ctx.stamp,
@@ -676,7 +676,7 @@ function do_ha_binder(subcmd, opts, args, cb) {
 
         function updateCoreVmsResolvers(ctx, next) {
             self.progress('Updating core SDC VMs resolvers');
-            steps.checkCoreVmInstancesResolvers(Object.assign({
+            steps.binder.checkCoreVmInstancesResolvers(Object.assign({
                 ctx: ctx
             }, commonOpts), function checkResolversCb(err, resolvers) {
                 if (err) {
@@ -691,7 +691,7 @@ function do_ha_binder(subcmd, opts, args, cb) {
                         resolvers[r].expected.join(', '));
                 });
 
-                steps.updateCoreVmsResolvers(Object.assign({
+                steps.binder.updateCoreVmsResolvers(Object.assign({
                     fixableResolvers: resolvers
                 }, commonOpts), next);
             });
diff --git a/lib/post-setup/ha-manatee.js b/lib/post-setup/ha-manatee.js
index 9981ff7..5e1d124 100644
--- a/lib/post-setup/ha-manatee.js
+++ b/lib/post-setup/ha-manatee.js
@@ -234,7 +234,7 @@ function do_ha_manatee(subcmd, opts, args, cb) {
              * Before we reconfigure Manatee, make sure any updates to the
              * service and instance parameters have been applied.
              */
-            steps.updateSizeParameters({
+            steps.updateVmSize.updateSizeParameters({
                 progress: self.progress,
                 service: svc,
                 log: self.log,
diff --git a/lib/post-setup/volapi.js b/lib/post-setup/volapi.js
index 470d602..2172b97 100644
--- a/lib/post-setup/volapi.js
+++ b/lib/post-setup/volapi.js
@@ -160,7 +160,7 @@ function do_volapi(subcmd, opts, args, cb) {
     var VOLAPI_DOMAIN;
 
     vasync.pipeline({arg: context, funcs: [
-        steps.sapiAssertFullMode,
+        steps.sapi.assertFullMode,
         function ensureSdcApp(_, next) {
             self.sdcadm.ensureSdcApp({}, next);
         },
diff --git a/lib/procedures/create-service-instance-v1.js b/lib/procedures/create-service-instance-v1.js
index 974d3f5..b6c3506 100644
--- a/lib/procedures/create-service-instance-v1.js
+++ b/lib/procedures/create-service-instance-v1.js
@@ -103,7 +103,7 @@ CreateServiceInstanceV1.prototype.execute = function csiv1Execute(opts, cb) {
                     next();
                     return;
                 }
-                steps.sapiFixInstanceAlias({
+                steps.sapi.fixInstanceAlias({
                     sdcadm: sdcadm,
                     instances: ctx.instances
                 }, function fixInstCb(fixInstErr, fixedInsts) {
diff --git a/lib/procedures/update-agent-v1.js b/lib/procedures/update-agent-v1.js
index e4abf16..e611040 100644
--- a/lib/procedures/update-agent-v1.js
+++ b/lib/procedures/update-agent-v1.js
@@ -243,7 +243,7 @@ UpdateAgentV1.prototype.execute = function uaExecute(opts, callback) {
                 });
             },
 
-            steps.noRabbitEnable,
+            steps.noRabbit.noRabbitEnable,
 
             function updateAgentOnServers(_, next) {
                 if (process.stderr.isTTY) {
diff --git a/lib/procedures/update-manatee-v2.js b/lib/procedures/update-manatee-v2.js
index 1044b96..523b553 100644
--- a/lib/procedures/update-manatee-v2.js
+++ b/lib/procedures/update-manatee-v2.js
@@ -436,7 +436,7 @@ UpdateManateeV2.prototype.execute = function manateev2Execute(opts, cb) {
              * been increased to an appropriate minimum size before updating.
              */
             function updateManateeSizeParameters(_, next) {
-                steps.updateSizeParameters({
+                steps.updateVmSize.updateSizeParameters({
                     progress: progress,
                     service: change.service,
                     log: log,
diff --git a/lib/steps/README.md b/lib/steps/README.md
index 520e70c..b28ecba 100644
--- a/lib/steps/README.md
+++ b/lib/steps/README.md
@@ -42,20 +42,16 @@ usage can be:
 
     // ...
     vasync.pipeline({arg: contextArg, funcs: [
-        steps.widgetDoACommonThing,
-        steps.widgetDoAnotherCommonThing,
+        steps.widget.doACommonThing,
+        steps.widget.doAnotherCommonThing,
         function aStepSpecificToHere(arg, next) {
             // ...
         },
-        steps.wuzzleFinishWithThisCommonThing
+        steps.wuzzle.finishWithThisCommonThing
     ]}, function (err) {
         // ...
     });
 
-Naming: Each step file is a "namespace". All exported functions should be
-prefixed with that namespace. Name the file 'like-this.js' with all its
-functions name `likeThisFoo` and `likeThisBarBling`.
-
 
 # TODO
 
diff --git a/lib/steps/index.js b/lib/steps/index.js
index dbcb9a5..cc6cd7b 100644
--- a/lib/steps/index.js
+++ b/lib/steps/index.js
@@ -5,40 +5,25 @@
  */
 
 /*
- * Copyright 2018 Joyent, Inc.
+ * Copyright (c) 2018 Joyent, Inc.
  */
 
 /*
  * The collection of "step" functions. Re-usable chunks of sdcadm code.
  * See the "README.md".
  */
-
-var format = require('util').format;
-
-
+'use strict';
 
 // --- exports
 
-module.exports = {};
-
-[
-    'no-rabbit',
-    'update_vm_size',
-    'sapi',
-    'servers',
-    'binder',
-    'zookeeper',
-    'dnsdomain'
-].forEach(function (modName) {
-    var mod = require('./' + modName);
-    Object.keys(mod).forEach(function (symbol) {
-        if (module.exports.hasOwnProperty(symbol)) {
-            throw new Error(format('duplicate symbol in steps/%s.js: %s',
-                modName, symbol));
-        }
-        module.exports[symbol] = mod[symbol];
-    });
-});
-module.exports.usbkey = require('./usbkey');
+module.exports = {
+    dnsdomain: require('./dnsdomain'),
+    noRabbit: require('./noRabbit'),
+    sapi: require('./sapi'),
+    servers: require('./servers'),
+    updateVmSize: require('./updateVmSize'),
+    usbkey: require('./usbkey'),
+    zookeeper: require('./zookeeper')
+};
 
 // vim: set softtabstop=4 shiftwidth=4:
diff --git a/lib/steps/no-rabbit.js b/lib/steps/noRabbit.js
similarity index 100%
rename from lib/steps/no-rabbit.js
rename to lib/steps/noRabbit.js
diff --git a/lib/steps/sapi.js b/lib/steps/sapi.js
index 2cc3d50..e655dad 100644
--- a/lib/steps/sapi.js
+++ b/lib/steps/sapi.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2018 Joyent, Inc.
+ * Copyright (c) 2018 Joyent, Inc.
  *
  * Steps for doing some things with SAPI.
  */
@@ -28,7 +28,7 @@ var DRY_RUN = false; // An off-switch for dev/testing.
  * marlin agent.
  *
  */
-function sapiEnsureAgentServices(arg, cb) {
+function ensureAgentServices(arg, cb) {
     assert.object(arg, 'arg');
     assert.func(arg.progress, 'arg.progress');
     assert.object(arg.log, 'arg.log');
@@ -248,7 +248,7 @@ function sapiEnsureAgentServices(arg, cb) {
 }
 
 
-function sapiAssertFullMode(arg, cb) {
+function assertFullMode(arg, cb) {
     assert.object(arg, 'arg');
     assert.object(arg.sdcadm, 'arg.sdcadm');
     assert.func(cb, 'cb');
@@ -281,7 +281,7 @@ function sapiAssertFullMode(arg, cb) {
  * @param {Function} cb: Callback of the form f(err, instances);
  */
 
-function sapiFixInstanceAlias(arg, cb) {
+function fixInstanceAlias(arg, cb) {
     assert.object(arg, 'arg');
     assert.object(arg.sdcadm, 'arg.sdcadm');
     assert.array(arg.instances, 'arg.instances');
@@ -350,9 +350,9 @@ function sapiFixInstanceAlias(arg, cb) {
 // --- exports
 
 module.exports = {
-    sapiEnsureAgentServices: sapiEnsureAgentServices,
-    sapiAssertFullMode: sapiAssertFullMode,
-    sapiFixInstanceAlias: sapiFixInstanceAlias
+    ensureAgentServices: ensureAgentServices,
+    assertFullMode: assertFullMode,
+    fixInstanceAlias: fixInstanceAlias
 };
 
 // vim: set softtabstop=4 shiftwidth=4:
diff --git a/lib/steps/servers.js b/lib/steps/servers.js
index b04951e..1ff673d 100644
--- a/lib/steps/servers.js
+++ b/lib/steps/servers.js
@@ -59,7 +59,7 @@ function _cnapiServerFromName(args, cb) {
  * `args.serverName` and sets `args.server` to the CNAPI server object,
  * or errors (via `cb(err)`).
  */
-function serversServerFromServerName(args, cb) {
+function serverFromServerName(args, cb) {
     assert.object(args, 'args');
     assert.object(args.log, 'args.log');
     assert.object(args.sdcadm, 'args.sdcadm');
@@ -83,7 +83,7 @@ function serversServerFromServerName(args, cb) {
  * `args.serverNames` and sets `args.servers` to the CNAPI server
  * objects, or errors (via `cb(err)`).
  */
-function serversServersFromServerNames(args, cb) {
+function serversFromServerNames(args, cb) {
     assert.object(args, 'args');
     assert.object(args.log, 'args.log');
     assert.object(args.sdcadm, 'args.sdcadm');
@@ -124,7 +124,7 @@ function serversServersFromServerNames(args, cb) {
  * A function appropriate for `vasync.pipeline` funcs that iterates through
  * `args.servers` and errors if any of them are not setup.
  */
-function serversEnsureServersSetup(args, cb) {
+function ensureServersSetup(args, cb) {
     assert.object(args, 'args');
     assert.object(args.log, 'args.log');
     assert.arrayOfObject(args.servers, 'args.servers');
@@ -148,7 +148,7 @@ function serversEnsureServersSetup(args, cb) {
  * A function appropriate for `vasync.pipeline` funcs that iterates through
  * `args.servers` and errors if any of them are not running.
  */
-function serversEnsureServersRunning(args, cb) {
+function ensureServersRunning(args, cb) {
     assert.object(args, 'args');
     assert.object(args.log, 'args.log');
     assert.arrayOfObject(args.servers, 'args.servers');
@@ -171,10 +171,10 @@ function serversEnsureServersRunning(args, cb) {
 // --- exports
 
 module.exports = {
-    serversServerFromServerName: serversServerFromServerName,
-    serversServersFromServerNames: serversServersFromServerNames,
-    serversEnsureServersSetup: serversEnsureServersSetup,
-    serversEnsureServersRunning: serversEnsureServersRunning
+    serverFromServerName: serverFromServerName,
+    serversFromServerNames: serversFromServerNames,
+    ensureServersSetup: ensureServersSetup,
+    ensureServersRunning: ensureServersRunning
 };
 
 // vim: set softtabstop=4 shiftwidth=4:
diff --git a/lib/steps/update_vm_size.js b/lib/steps/updateVmSize.js
similarity index 100%
rename from lib/steps/update_vm_size.js
rename to lib/steps/updateVmSize.js
