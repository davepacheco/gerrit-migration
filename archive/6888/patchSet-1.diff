commit fd9eedba194e175310388f9906775c77e054846d
Author: rhb2 <robert.bogart@joyent.com>
Date:   2019-09-11T19:06:32+00:00 (4 weeks ago)
    
    MANTA-4542 Implement alternate process_task() functions for rebalancer agent

diff --git a/Cargo.toml b/Cargo.toml
index aff4b40..562ad4f 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -7,6 +7,14 @@ edition = "2018"
 [profile.dev]
 panic = "abort"
 
+[features]
+# No features by default
+default = []
+
+# Always mark a task as success without attempting to even download it.  This
+# is for TESTING PURPOSES ONLY!
+always_pass = []
+
 [dependencies]
 base64 = "0.10.1"
 uuid = { version = "0.7.4", features = ["v4"] }
diff --git a/README.md b/README.md
index 5a77998..8b16b52 100644
--- a/README.md
+++ b/README.md
@@ -66,3 +66,21 @@ cargo check
 cargo clippy
 cargo test
 ```
+
+## Testing
+
+There is a certain flavor of the rebalancer agent that allow for more convenient
+testing of the zone -- namely one that receives a (properly formed) assignment
+and blindly marks all tasks within it as "Complete" instead of actually doing
+the leg work of processing each task.  This is intended for scenarios where
+functional verification of the happy path in the rebalancer zone.  As this
+project evolves, other modes will likely be introduced.
+
+To build the version of the agent described above, a special flag must be
+passed to the compiled to enable the feature:
+
+```
+cargo build --features "always_pass"
+```
+
+Note: By default, this feature will never be enabled.
diff --git a/src/agent.rs b/src/agent.rs
index 8f21e9b..24f4a35 100644
--- a/src/agent.rs
+++ b/src/agent.rs
@@ -620,6 +620,13 @@ fn download(
     }
 }
 
+#[cfg(feature = "always_pass")]
+fn process_task(task: &mut Task) {
+    task.set_status(TaskStatus::Complete);
+    return;
+}
+
+#[cfg(not(feature = "always_pass"))]
 fn process_task(task: &mut Task) {
     let file_path = manta_file_path(&task.owner, &task.object_id);
     let path = Path::new(&file_path);
@@ -953,7 +960,7 @@ mod tests {
             match opt {
                 None => {
                     if expected != TaskStatus::Complete {
-                        panic!("Missing expected list of failed tasks.");
+                        panic!("Assignment succeeded when it should not.");
                     }
                 }
                 Some(tasks) => {
