commit 948a96d263b717cacc08662268d02c1328ee30c6 (refs/changes/65/4665/1)
Author: Tim Foster <tim.foster@joyent.com>
Date:   2018-08-13T10:41:18+00:00 (1 year, 2 months ago)
    
    MANTA-3870 operator-guide needs updated marlin NAT instructions

diff --git a/docs/operator-guide.md b/docs/operator-guide.md
index 783d1da..ce206da 100644
--- a/docs/operator-guide.md
+++ b/docs/operator-guide.md
@@ -3341,19 +3341,19 @@ configured a hardware NAT on the private network that the compute zones use, but
 in development, this connectivity is usually absent.  As a result, among other
 things, mlogin(1) doesn't work.
 
-If you want to set up NAT for your marlin compute zones in development, you can
-do so by creating a NAT zone.  The following procedure is inspired by the
+To up NAT for our marlin compute zones in development, we can do so
+by creating a NAT zone. The following procedure is inspired by the
 analogous [SmartOS
 procedure](http://wiki.smartos.org/display/DOC/NAT+using+Etherstubs).
 
 First, create a VMAPI CreateVM payload that looks like this:
 
     {
-        "uuid": "49f6a6d6-82df-11e3-bb95-4f10bd8af0dd",
-        "owner_uuid": "66bc8d77-2024-4a88-ba2a-e5e85e565059",
+        "uuid": "18af1ec0-9976-11e8-b80d-bfdc56a11139",
+        "owner_uuid": "60575e4e-ab96-40ae-8913-a0597b009afa",
         "brand": "joyent",
         "ram": 256,
-        "image_uuid": "01b2c898-945f-11e1-a523-af1afbe22822",
+        "image_uuid": "fd2cc906-8938-11e3-beab-4359c665ac99",
         "networks": [ {
                 "name": "external",
                 "primary": true
@@ -3363,7 +3363,7 @@ First, create a VMAPI CreateVM payload that looks like this:
 
         "alias": "forwarder",
         "hostname": "forwarder",
-        "server_uuid": "00000000-0000-0000-0000-002590943378"
+        "server_uuid": "564d3f7a-1bee-1af9-2711-bed3da5551c6"
     }
 
 **Be sure to make the following changes:**
@@ -3371,31 +3371,146 @@ First, create a VMAPI CreateVM payload that looks like this:
 * **uuid** should be a randomly-generated uuid (e.g., from the uuid(1) command)
 * **owner_uuid** should be poseidon's uuid (i.e., from "sdc-ldap search
   objectclass=sdcperson")
-* **server_uuid** should be your development server's uuid (e.g., "sdc-cnapi
+* **server_uuid** should be our development server's uuid (e.g., "sdc-cnapi
   /servers | json -Ha uuid")
 
 The **image_uuid** can be any reasonable SmartOS image.  The above example
 uses smartos-1.6.3, since it's currently guaranteed to be available.
 
-Once you've made those changes, you can create the VM with:
-
-    $ sdc-vm create -f YOURFILE.json
-
-Once the VM is provisioned, you'll want to explicitly enable IP spoofing in the
-zone.  Construct an "update" file like this one:
-
-    {
-            "update_nics": [ {
-                    "mac": "90:b8:d0:5f:bc:e4",
-                    "allow_ip_spoofing": "1"
-            }, {
-                    "mac": "90:b8:d0:c4:87:54",
-                    "allow_ip_spoofing": "1"
-            } ]
-    }
-
-**Be sure to update the two "mac" properties based on the MACs assigned to the
-zone you created above.**  See "vmadm get YOUR_VM_UUID | json nics".
+Once we've made those changes, we can create the VM with:
+
+    $ sdc-vm create -f our_payload.json
+
+Once the VM is provisioned, we must explicitly enable IP spoofing
+in the zone.  To do this, we need to find the mac addresses of the two vnics
+assigned to the 'forwarder' zone:
+
+    [root@headnode (coal-1) ~]# MACS=$(/opt/smartdc/bin/sdc-vmapi --no-headers
+        /vms/18af1ec0-9976-11e8-b80d-bfdc56a11139 | json nics | json -a mac)
+
+then use sdc-napi to update their configuration:
+
+    [root@headnode (coal-1) ~]# for mac in $MACS; do
+        sdc-napi /nics/$mac -X PUT -d@- <<< '{"allow_ip_spoofing": true}'
+    done
+
+We can verify this configuration has been applied by looking at the link
+properties for the 'forwarder' zone from the headnode where we can see
+that the 'ip-nospoof' value is now missing from the 'protection' property
+on each link:
+
+    [root@headnode (coal-1) ~]# dladm show-linkprop -p protection -z 18af1ec0-9976-11e8-b80d-bfdc56a11139
+    LINK         PROPERTY        PERM VALUE          DEFAULT        POSSIBLE
+    net0         protection      rw   mac-nospoof,   --             mac-nospoof,
+                                      restricted,                   restricted,
+                                      dhcp-nospoof                  ip-nospoof,
+                                                                    dhcp-nospoof
+    net1         protection      rw   mac-nospoof,   --             mac-nospoof,
+                                      restricted,                   restricted,
+                                      dhcp-nospoof                  ip-nospoof,
+                                                                    dhcp-nospoof
+
+Next we can login to the 'forwarder' zone and add the NAT configuration.
+
+In this example, our 'external' network IP is 10.88.88.8 on the 'net0' interface
+and our 'mantanat' network is 10.66.66.7 on the 'net1' interface. The IP
+addresses in your 'forwarder' zone may differ.
+
+    [root@forwarder ~]# ifconfig
+    lo0: flags=2001000849<UP,LOOPBACK,RUNNING,MULTICAST,IPv4,VIRTUAL> mtu 8232 index 1
+    	inet 127.0.0.1 netmask ff000000
+    net0: flags=1100843<UP,BROADCAST,RUNNING,MULTICAST,ROUTER,IPv4> mtu 1500 index 2
+    	inet 10.88.88.8 netmask ffffff00 broadcast 10.88.88.255
+    	ether 90:b8:d0:7d:da:ca
+    net1: flags=1100843<UP,BROADCAST,RUNNING,MULTICAST,ROUTER,IPv4> mtu 1500 index 3
+    	inet 10.66.66.7 netmask ffffff00 broadcast 10.66.66.255
+    	ether 90:b8:d0:7c:8f:a8
+    lo0: flags=2002000849<UP,LOOPBACK,RUNNING,MULTICAST,IPv6,VIRTUAL> mtu 8252 index 1
+    	inet6 ::1/128
+
+Use the following ipnat.conf file:
+
+    [root@forwarder ~]# cat /etc/ipf/ipnat.conf
+    map net0 10.66.66.0/24 -> 0/32 portmap tcp/udp auto
+    map net0 10.66.66.0/24 -> 0/32
+
+Allow IP forwarding:
+
+    [root@forwarder ~]# routeadm -u -e ipv4-forwarding
+
+Then enable ipfilter:
+
+    [root@forwarder ~]# svcadm enable ipfilter
+
+Now we need to set the default gateway of the 'mantanat' network to point to
+our NAT-enabled 'forwarder' zone. To do this, determine the uuid of
+the mantanat network:
+
+    [root@headnode (coal-1) ~]# UUID=$(sdc-napi /networks |
+        json -ac 'this.name === "mantanat"' uuid)
+
+Now set the gateway to point at the IP address of the mantanat interface in the
+forwarder zone:
+
+    [root@headnode (coal-1) ~]# sdc-napi /networks/$UUID -X PUT \
+        -d@- <<< '{"gateway": "10.66.66.7"}'
+
+Having done this, we should see that when logging into any of the marlin
+compute zones, our default gateway has changed, and we are able to reach
+external addresses:
+
+    [root@headnode (coal-1) ~]# vmadm list | grep marlin
+    0be5c6c1-8ae2-4249-ab64-8c6f1c54363e  OS    1024     running           marlin.coal.example.com-0be5c6c1
+    ab73226d-1a76-40c3-8a33-7dd731da20ed  OS    1024     running           marlin.coal.example.com-ab73226d
+    [root@headnode (coal-1) ~]# zlogin 0be5c6c1-8ae2-4249-ab64-8c6f1c54363e
+    .
+    .
+    .
+    [root@0be5c6c1-8ae2-4249-ab64-8c6f1c54363e ~]# netstat -rn | grep default
+    default              10.66.66.7           UG        1          2 net0
+    [root@0be5c6c1-8ae2-4249-ab64-8c6f1c54363e ~]# ifconfig
+    lo0: flags=2001000849<UP,LOOPBACK,RUNNING,MULTICAST,IPv4,VIRTUAL> mtu 8232 index 1
+    	inet 127.0.0.1 netmask ff000000
+    net0: flags=1000843<UP,BROADCAST,RUNNING,MULTICAST,IPv4> mtu 1500 index 2
+    	inet 10.66.66.5 netmask ffffff00 broadcast 10.66.66.255
+    	ether 90:b8:d0:3f:37:e0
+    lo0: flags=2002000849<UP,LOOPBACK,RUNNING,MULTICAST,IPv6,VIRTUAL> mtu 8252 index 1
+    	inet6 ::1/128
+    [root@0be5c6c1-8ae2-4249-ab64-8c6f1c54363e ~]# nslookup www.joyent.com
+    Server:         8.8.8.8
+    Address:        8.8.8.8#53
+
+    Non-authoritative answer:
+    .
+    .
+    .
+
+We should also see that there are active sessions in the NAT tables in our
+'forwarder' zone:
+
+    [root@forwarder ~]# ipnat -l
+    List of active MAP/Redirect filters:
+    map net0 10.66.66.0/24 -> 0.0.0.0/32 portmap tcp/udp auto
+    map net0 10.66.66.0/24 -> 0.0.0.0/32
+
+    List of active sessions:
+    MAP 10.66.66.6      51662 <- -> 10.88.88.8      2538  [8.8.8.8 53]
+    MAP 10.66.66.6      40025 <- -> 10.88.88.8      2745  [8.8.8.8 53]
+
+At this point, we should be able to use mlogin with our usual manta
+credentials:
+
+    [root@test-machine ~]# env | grep MANTA
+    MANTA_USER=poseidon
+    MANTA_KEY_ID=50:c1:03:95:31:4c:6a:a2:ff:f6:4c:f0:58:24:50:72
+    MANTA_URL=https://10.88.88.7
+    MANTA_TLS_INSECURE=true
+    [root@test-machine ~]# mlogin
+     * created interactive job -- 27305f4c-61b7-ef62-bb7e-97aa871a263c
+     * waiting for session... | established
+    poseidon@manta # mdata-get sdc:uuid
+    0be5c6c1-8ae2-4249-ab64-8c6f1c54363e
+    poseidon@manta #
 
 
 ## Configuration
