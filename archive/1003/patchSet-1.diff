commit 58a1fafea9102fa616d61f94c5dd825e54f7fa7a (refs/changes/03/1003/1)
Author: Chris Burroughs <chris.burroughs@joyent.com>
Date:   2016-11-30T13:56:05-05:00 (2 years, 10 months ago)
    
    ./bin/triton instance create base-64@16.3.0 g4-highcpu-128M

diff --git a/lib/do_instance/do_create.js b/lib/do_instance/do_create.js
index 0562dc1..cc0c636 100644
--- a/lib/do_instance/do_create.js
+++ b/lib/do_instance/do_create.js
@@ -22,7 +22,6 @@ var mat = require('../metadataandtags');
 
 
 function do_create(subcmd, opts, args, cb) {
-    var self = this;
     if (opts.help) {
         this.do_help('help', {}, [subcmd], cb);
         return;
@@ -31,9 +30,10 @@ function do_create(subcmd, opts, args, cb) {
     }
 
     var log = this.top.log;
-    var cloudapi = this.top.tritonapi.cloudapi;
+    var tritonapi = this.top.tritonapi;
 
-    vasync.pipeline({arg: {}, funcs: [
+    vasync.pipeline({arg: {cli: this.top}, funcs: [
+        common.cliSetupTritonApi,
         /* BEGIN JSSTYLED */
         /*
          * Parse --affinity options for validity to `ctx.affinities`.
@@ -158,7 +158,7 @@ function do_create(subcmd, opts, args, cb) {
                         nearFar.push(aff.val);
                         nextAff();
                     } else {
-                        self.top.tritonapi.getInstance({
+                        tritonapi.getInstance({
                             id: aff.val,
                             fields: ['id']
                         }, function (err, inst) {
@@ -222,7 +222,7 @@ function do_create(subcmd, opts, args, cb) {
                 name: args[0],
                 useCache: true
             };
-            self.top.tritonapi.getImage(_opts, function (err, img) {
+            tritonapi.getImage(_opts, function (err, img) {
                 if (err) {
                     return next(err);
                 }
@@ -243,7 +243,7 @@ function do_create(subcmd, opts, args, cb) {
                 return;
             }
 
-            self.top.tritonapi.getPackage(id, function (err, pkg) {
+            tritonapi.getPackage(id, function (err, pkg) {
                 if (err) {
                     return next(err);
                 }
@@ -261,7 +261,7 @@ function do_create(subcmd, opts, args, cb) {
             vasync.forEachPipeline({
                 inputs: opts.network,
                 func: function getOneNetwork(name, nextNet) {
-                    self.top.tritonapi.getNetwork(name, function (err, net) {
+                    tritonapi.getNetwork(name, function (err, net) {
                         if (err) {
                             nextNet(err);
                         } else {
@@ -316,7 +316,7 @@ function do_create(subcmd, opts, args, cb) {
                 return next();
             }
 
-            cloudapi.createMachine(createOpts, function (err, inst) {
+            tritonapi.cloudapi.createMachine(createOpts, function (err, inst) {
                 if (err) {
                     next(new errors.TritonError(err,
                         'error creating instance'));
@@ -352,8 +352,8 @@ function do_create(subcmd, opts, args, cb) {
                         ctx.inst.state = 'running';
                         waitCb(null, ctx.inst);
                     }, 5000);
-                }
-                : cloudapi.waitForMachineStates.bind(cloudapi));
+                } : tritonapi.cloudapi.waitForMachineStates.bind(
+                    tritonapi.cloudapi));
 
             waiter({
                 id: ctx.inst.id,
