commit 41b18509b59934f3aafda510dae3078d616c5aa0 (refs/changes/53/2153/1)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2017-06-26T15:59:09-07:00 (2 years, 3 months ago)
    
    joyent/node-zkstream#16 clean up exports and docs, add comments

diff --git a/README.md b/README.md
index 894c3e8..cc077ff 100644
--- a/README.md
+++ b/README.md
@@ -8,7 +8,7 @@ API
 
 ## Client
 
-### `mod_zkstream.connect(options[, cb])`
+### `new mod_zkstream.Client(options)`
 
 Opens a new ZooKeeper connection and returns the Client instance.
 
@@ -24,6 +24,30 @@ Closes the connection.
 Parameters:
  - `cb`: an optional Function, called once the connection has ended
 
+### Events
+
+#### `connect`
+
+Emitted when the client successfully connects to a ZooKeeper server, either
+for the first time, or on subsequent reconnects after an error and failover
+on to a different server.
+
+#### `failed`
+
+Emitted when the client has exhausted its retry policy and cannot connect
+to any ZooKeeper servers.
+
+#### `expire`
+
+Emitted when the client's ZK session has expired. All ephemeral nodes created
+by this client will have now disappeared from the view of other clients, and
+any watchers will be invalid (will no longer emit events).
+
+#### `close`
+
+Emitted when the client has shut down at the request of a call to
+`Client#close`.
+
 ### `Client#ping([cb])`
 
 Manually pings the ZooKeeper server. Automatic pings occur every 2 seconds
diff --git a/lib/client.js b/lib/client.js
new file mode 100644
index 0000000..f74941d
--- /dev/null
+++ b/lib/client.js
@@ -0,0 +1,439 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * Copyright (c) 2016, Joyent, Inc.
+ */
+
+module.exports = { Client: ZKClient };
+
+const mod_fsm = require('mooremachine');
+const mod_assert = require('assert-plus');
+const mod_consts = require('./zk-consts');
+const mod_util = require('util');
+const mod_stream = require('stream');
+const mod_errors = require('./errors');
+const mod_jsbn = require('jsbn');
+const mod_events = require('events');
+const mod_zkstreams = require('./zk-streams');
+const mod_net = require('net');
+const mod_bunyan = require('bunyan');
+const mod_cueball = require('cueball');
+const mod_zks = require('./zk-session');
+const mod_verror = require('verror');
+const mod_vasync = require('vasync');
+const mod_cfsm = require('./connection-fsm');
+
+function ZKClient(opts) {
+	mod_assert.object(opts, 'options');
+
+	mod_assert.optionalObject(opts.log, 'options.log');
+	if (opts.log == undefined) {
+		this.zc_log = mod_bunyan.createLogger({
+			name: 'zkstream',
+			component: 'ZKClient'
+		});
+	} else {
+		this.zc_log = opts.log.child({
+			component: 'ZKClient'
+		});
+	}
+
+	mod_assert.optionalArrayOfObject(opts.servers, 'options.servers');
+	if (opts.servers === undefined) {
+		mod_assert.string(opts.address, 'options.address');
+		mod_assert.number(opts.port, 'options.port');
+		this.zc_servers = [
+			{ address: opts.address, port: opts.port }
+		];
+	} else {
+		this.zc_servers = opts.servers;
+		this.zc_servers.forEach(function (srv) {
+			mod_assert.string(srv.address, 'servers[].address');
+			mod_assert.number(srv.port, 'servers[].port');
+		});
+	}
+	mod_assert.optionalNumber(opts.sessionTimeout,
+	    'options.sessionTimeout');
+	this.zc_sessionTimeout = opts.sessionTimeout;
+	if (this.zc_sessionTimeout === undefined)
+		this.zc_sessionTimeout = 30000;
+
+	this.zc_session = undefined;
+	this.zc_oldSession = undefined;
+
+	this.zc_resolver = new mod_cueball.StaticIpResolver({
+		defaultPort: 2181,
+		backends: this.zc_servers
+	});
+
+	this.zc_set = new mod_cueball.ConnectionSet({
+		resolver: this.zc_resolver,
+		log: this.zc_log,
+		recovery: {
+			connect: {
+				timeout: 3000,
+				retries: 3,
+				delay: 500
+			},
+			default: {
+				timeout: 5000,
+				retries: 3,
+				delay: 1000
+			}
+		},
+		target: 1,
+		maximum: 3,
+		connectionHandlesError: true,
+		constructor: this._makeConnection.bind(this)
+	});
+
+	this.zc_set.on('added', this._onSetAdded.bind(this));
+	this.zc_set.on('removed', this._onSetRemoved.bind(this));
+	this.zc_set.on('stateChanged', this._onSetStateChanged.bind(this));
+
+	this.zc_conns = {};
+	this.zc_hdls = {};
+
+	mod_fsm.FSM.call(this, 'normal');
+}
+mod_util.inherits(ZKClient, mod_fsm.FSM);
+
+ZKClient.prototype.state_normal = function (S) {
+	this._newSession();
+	this.zc_resolver.start();
+	S.on(this, 'closeAsserted', function () {
+		S.gotoState('closing');
+	});
+};
+
+ZKClient.prototype.state_closing = function (S) {
+	var done = 0;
+	var self = this;
+
+	S.on(this.zc_session, 'stateChanged', function (st) {
+		if ((st === 'closed' || st === 'expired') && ++done == 3) {
+			S.gotoState('closed');
+		}
+	});
+
+	S.on(this.zc_set, 'stateChanged', function (st) {
+		if (st === 'stopped' && ++done == 3) {
+			S.gotoState('closed');
+		}
+	});
+
+	S.on(this.zc_resolver, 'stateChanged', function (st) {
+		if (st === 'stopped' && ++done == 3) {
+			S.gotoState('closed');
+		}
+	});
+
+	if (this.zc_session.isInState('closed') ||
+	    this.zc_session.isInState('expired')) {
+		++done;
+	}
+	if (this.zc_set.isInState('stopped'))
+		++done;
+	if (this.zc_resolver.isInState('stopped'))
+		++done;
+	if (done == 3) {
+		S.gotoState('closed');
+	} else {
+		this.zc_set.stop();
+		this.zc_resolver.stop();
+		this.zc_session.close();
+	}
+
+	S.interval(5000, function () {
+		self.zc_log.trace('still waiting for zk client to shut down, ' +
+		    '%d/3 done', done);
+	});
+};
+
+ZKClient.prototype.state_closed = function (S) {
+	this.emit('close');
+};
+
+ZKClient.prototype.close = function () {
+	this.emit('closeAsserted');
+};
+
+ZKClient.prototype._newSession = function () {
+	var self = this;
+	if (!this.isInState('normal'))
+		return;
+	var s = new mod_zks.ZKSession({
+		timeout: this.zc_sessionTimeout,
+		log: this.zc_log
+	});
+	this.zc_session = s;
+	function initialHandler(st) {
+		if (st === 'attached') {
+			s.removeListener('stateChanged', initialHandler);
+			s.on('stateChanged', finalHandler);
+
+			/*
+			 * This is a bit yucky, but we don't want to emit
+			 * 'connect' until someone can safely call .list() or
+			 * similar functions on us.
+			 *
+			 * So we have to sync up with the ConnectionFSM here,
+			 * as well as the ZKSession.
+			 */
+			var c = s.getConnection();
+			if (c.isInState('connected')) {
+				setImmediate(function () {
+					self.emit('connect');
+				});
+			} else {
+				c.on('stateChanged', onConnCh);
+				function onConnCh(cst) {
+					if (cst === 'connected') {
+						c.removeListener(
+						    'stateChanged', onConnCh);
+						self.emit('connect');
+					}
+				}
+			}
+		}
+	}
+	function finalHandler(st) {
+		if (st === 'expired') {
+			self.emit('expire');
+		}
+	}
+	this.zc_session.on('stateChanged', initialHandler);
+};
+
+ZKClient.prototype.getSession = function () {
+	if (!this.isInState('normal'))
+		return (undefined);
+	if (this.zc_session.isInState('expired') ||
+	    this.zc_session.isInState('closed')) {
+		this.zc_oldSession = this.zc_session;
+		this._newSession();
+	}
+	return (this.zc_session);
+};
+
+ZKClient.prototype._onSetAdded = function (key, conn, hdl) {
+	this.zc_conns[key] = conn;
+	this.zc_hdls[key] = hdl;
+};
+
+ZKClient.prototype._onSetRemoved = function (key) {
+	var hdl = this.zc_hdls[key];
+	var conn = this.zc_conns[key];
+	mod_assert.object(hdl);
+	delete (this.zc_hdls[key]);
+	conn.destroy();
+	delete (this.zc_conns[key]);
+	hdl.release();
+};
+
+ZKClient.prototype._onSetStateChanged = function (st) {
+	var self = this;
+	if (st === 'failed') {
+		setImmediate(function () {
+			self.emit('failed', new Error('Failed to connect to ' +
+			    'ZK (exhausted initial retry policy)'));
+		});
+	}
+};
+
+ZKClient.prototype._makeConnection = function (backend) {
+	var c = new mod_cfsm.ZKConnectionFSM({
+		client: this,
+		backend: backend,
+		log: this.zc_log
+	});
+	c.connect();
+	return (c);
+};
+
+ZKClient.prototype.currentConnection = function () {
+	return (this.getSession().getConnection());
+};
+
+ZKClient.prototype.ping = function (cb) {
+	var conn = this.currentConnection();
+	if (conn === undefined)
+		throw (new Error('Not connected to ZooKeeper'));
+	return (conn.ping(cb));
+};
+
+ZKClient.prototype.list = function (path, cb) {
+	mod_assert.string(path, 'path');
+	mod_assert.optionalFunc(cb, 'callback');
+	var conn = this.currentConnection();
+	if (conn === undefined)
+		throw (new Error('Not connected to ZooKeeper'));
+	var req = conn.request({
+		opcode: 'GET_CHILDREN2',
+		path: path,
+		watch: false
+	});
+	if (cb) {
+		req.once('reply', function onReply(pkt) {
+			cb(null, pkt.children, pkt.stat);
+		});
+		req.once('error', cb);
+	}
+	return (req);
+};
+
+ZKClient.prototype.get = function (path, cb) {
+	mod_assert.string(path, 'path');
+	mod_assert.optionalFunc(cb, 'callback');
+	var conn = this.currentConnection();
+	if (conn === undefined)
+		throw (new Error('Not connected to ZooKeeper'));
+	var req = conn.request({
+		opcode: 'GET_DATA',
+		path: path,
+		watch: false
+	});
+	if (cb) {
+		req.once('reply', function onReply(pkt) {
+			cb(null, pkt.data, pkt.stat);
+		});
+		req.once('error', cb);
+	}
+	return (req);
+};
+
+ZKClient.prototype.create = function (path, data, options, cb) {
+	mod_assert.string(path, 'path');
+	mod_assert.buffer(data, 'data');
+	mod_assert.optionalObject(options, 'options');
+	mod_assert.optionalFunc(cb, 'callback');
+	if (options === undefined)
+		options = {};
+	mod_assert.optionalArrayOfObject(options.acl, 'options.acl');
+	mod_assert.optionalArrayOfString(options.flags, 'options.flags');
+
+	if (options.acl === undefined) {
+		options.acl = [ {
+		    id: { scheme: 'world', id: 'anyone' },
+		    perms: ['read', 'write', 'create', 'delete', 'admin']
+		} ];
+	}
+
+	if (options.flags === undefined) {
+		options.flags = [];
+	}
+
+	var conn = this.currentConnection();
+	if (conn === undefined)
+		throw (new Error('Not connected to ZooKeeper'));
+	var req = conn.request({
+		opcode: 'CREATE',
+		path: path,
+		data: data,
+		acl: options.acl,
+		flags: options.flags
+	});
+	if (cb) {
+		req.once('reply', function onReply(pkt) {
+			cb(null, pkt.path);
+		});
+		req.once('error', cb);
+	}
+	return (req);
+};
+
+ZKClient.prototype.set = function (path, data, version, cb) {
+	mod_assert.string(path, 'path');
+	mod_assert.buffer(data, 'data');
+	mod_assert.optionalNumber(version, 'version');
+	mod_assert.optionalFunc(cb, 'callback');
+
+	if (version === undefined)
+		version = -1;
+
+	var conn = this.currentConnection();
+	if (conn === undefined)
+		throw (new Error('Not connected to ZooKeeper'));
+	var req = conn.request({
+		opcode: 'SET_DATA',
+		path: path,
+		data: data,
+		version: version
+	});
+	if (cb) {
+		req.once('reply', function onReply(pkt) {
+			cb(null, pkt.path);
+		});
+		req.once('error', cb);
+	}
+	return (req);
+};
+
+ZKClient.prototype.delete = function (path, version, cb) {
+	mod_assert.string(path, 'path');
+	mod_assert.number(version, 'version');
+	mod_assert.optionalFunc(cb, 'callback');
+
+	var conn = this.currentConnection();
+	if (conn === undefined)
+		throw (new Error('Not connected to ZooKeeper'));
+	var req = conn.request({
+		opcode: 'DELETE',
+		path: path,
+		version: version
+	});
+	if (cb) {
+		req.once('reply', function onReply(pkt) {
+			cb(null);
+		});
+		req.once('error', cb);
+	}
+	return (req);
+};
+
+ZKClient.prototype.stat = function (path, cb) {
+	mod_assert.string(path, 'path');
+	mod_assert.optionalFunc(cb, 'callback');
+
+	var conn = this.currentConnection();
+	if (conn === undefined)
+		throw (new Error('Not connected to ZooKeeper'));
+	var req = conn.request({
+		opcode: 'EXISTS',
+		path: path,
+		watch: false
+	});
+	if (cb) {
+		req.once('reply', function onReply(pkt) {
+			cb(null, pkt.stat);
+		});
+		req.once('error', cb);
+	}
+	return (req);
+};
+
+ZKClient.prototype.sync = function (path, cb) {
+	mod_assert.string(path, 'path');
+	mod_assert.optionalFunc(cb, 'callback');
+
+	var conn = this.currentConnection();
+	if (conn === undefined)
+		throw (new Error('Not connected to ZooKeeper'));
+	var req = conn.request({
+		opcode: 'SYNC',
+		path: path
+	});
+	if (cb) {
+		req.once('reply', function onReply(pkt) {
+			cb(null);
+		});
+		req.once('error', cb);
+	}
+	return (req);
+};
+
+ZKClient.prototype.watcher = function (path) {
+	return (this.getSession().watcher(path));
+};
diff --git a/lib/client-fsm.js b/lib/connection-fsm.js
similarity index 55%
rename from lib/client-fsm.js
rename to lib/connection-fsm.js
index 5665086..9150745 100644
--- a/lib/client-fsm.js
+++ b/lib/connection-fsm.js
@@ -6,7 +6,7 @@
  * Copyright (c) 2016, Joyent, Inc.
  */
 
-module.exports = { Client: ZKClient };
+module.exports = { ZKConnectionFSM: ZKConnectionFSM };
 
 const mod_fsm = require('mooremachine');
 const mod_assert = require('assert-plus');
@@ -24,412 +24,6 @@ const mod_zks = require('./zk-session');
 const mod_verror = require('verror');
 const mod_vasync = require('vasync');
 
-function ZKClient(opts) {
-	mod_assert.object(opts, 'options');
-
-	mod_assert.optionalObject(opts.log, 'options.log');
-	if (opts.log == undefined) {
-		this.zc_log = mod_bunyan.createLogger({
-			name: 'zkstream',
-			component: 'ZKClient'
-		});
-	} else {
-		this.zc_log = opts.log.child({
-			component: 'ZKClient'
-		});
-	}
-
-	mod_assert.optionalArrayOfObject(opts.servers, 'options.servers');
-	if (opts.servers === undefined) {
-		mod_assert.string(opts.address, 'options.address');
-		mod_assert.number(opts.port, 'options.port');
-		this.zc_servers = [
-			{ address: opts.address, port: opts.port }
-		];
-	} else {
-		this.zc_servers = opts.servers;
-		this.zc_servers.forEach(function (srv) {
-			mod_assert.string(srv.address, 'servers[].address');
-			mod_assert.number(srv.port, 'servers[].port');
-		});
-	}
-	mod_assert.optionalNumber(opts.sessionTimeout,
-	    'options.sessionTimeout');
-	this.zc_sessionTimeout = opts.sessionTimeout;
-	if (this.zc_sessionTimeout === undefined)
-		this.zc_sessionTimeout = 30000;
-
-	this.zc_session = undefined;
-	this.zc_oldSession = undefined;
-
-	this.zc_resolver = new mod_cueball.StaticIpResolver({
-		defaultPort: 2181,
-		backends: this.zc_servers
-	});
-
-	this.zc_set = new mod_cueball.ConnectionSet({
-		resolver: this.zc_resolver,
-		log: this.zc_log,
-		recovery: {
-			connect: {
-				timeout: 3000,
-				retries: 3,
-				delay: 500
-			},
-			default: {
-				timeout: 5000,
-				retries: 3,
-				delay: 1000
-			}
-		},
-		target: 1,
-		maximum: 3,
-		connectionHandlesError: true,
-		constructor: this._makeConnection.bind(this)
-	});
-
-	this.zc_set.on('added', this._onSetAdded.bind(this));
-	this.zc_set.on('removed', this._onSetRemoved.bind(this));
-	this.zc_set.on('stateChanged', this._onSetStateChanged.bind(this));
-
-	this.zc_conns = {};
-	this.zc_hdls = {};
-
-	mod_fsm.FSM.call(this, 'normal');
-}
-mod_util.inherits(ZKClient, mod_fsm.FSM);
-
-ZKClient.prototype.state_normal = function (S) {
-	this._newSession();
-	this.zc_resolver.start();
-	S.on(this, 'closeAsserted', function () {
-		S.gotoState('closing');
-	});
-};
-
-ZKClient.prototype.state_closing = function (S) {
-	var done = 0;
-	var self = this;
-
-	S.on(this.zc_session, 'stateChanged', function (st) {
-		if ((st === 'closed' || st === 'expired') && ++done == 3) {
-			S.gotoState('closed');
-		}
-	});
-
-	S.on(this.zc_set, 'stateChanged', function (st) {
-		if (st === 'stopped' && ++done == 3) {
-			S.gotoState('closed');
-		}
-	});
-
-	S.on(this.zc_resolver, 'stateChanged', function (st) {
-		if (st === 'stopped' && ++done == 3) {
-			S.gotoState('closed');
-		}
-	});
-
-	if (this.zc_session.isInState('closed') ||
-	    this.zc_session.isInState('expired')) {
-		++done;
-	}
-	if (this.zc_set.isInState('stopped'))
-		++done;
-	if (this.zc_resolver.isInState('stopped'))
-		++done;
-	if (done == 3) {
-		S.gotoState('closed');
-	} else {
-		this.zc_set.stop();
-		this.zc_resolver.stop();
-		this.zc_session.close();
-	}
-
-	S.interval(5000, function () {
-		self.zc_log.trace('still waiting for zk client to shut down, ' +
-		    '%d/3 done', done);
-	});
-};
-
-ZKClient.prototype.state_closed = function (S) {
-	this.emit('close');
-};
-
-ZKClient.prototype.close = function () {
-	this.emit('closeAsserted');
-};
-
-ZKClient.prototype._newSession = function () {
-	var self = this;
-	if (!this.isInState('normal'))
-		return;
-	var s = new mod_zks.ZKSession({
-		timeout: this.zc_sessionTimeout,
-		log: this.zc_log
-	});
-	this.zc_session = s;
-	function initialHandler(st) {
-		if (st === 'attached') {
-			s.removeListener('stateChanged', initialHandler);
-			s.on('stateChanged', finalHandler);
-			var c = s.getConnection();
-			if (c.isInState('connected')) {
-				setImmediate(function () {
-					self.emit('connect');
-				});
-			} else {
-				c.on('stateChanged', onConnCh);
-				function onConnCh(st) {
-					if (st === 'connected') {
-						c.removeListener(
-						    'stateChanged', onConnCh);
-						self.emit('connect');
-					}
-				}
-			}
-		}
-	}
-	function finalHandler(st) {
-		if (st === 'expired') {
-			self.emit('expire');
-		}
-	}
-	this.zc_session.on('stateChanged', initialHandler);
-};
-
-ZKClient.prototype.getSession = function () {
-	if (!this.isInState('normal'))
-		return (undefined);
-	if (this.zc_session.isInState('expired') ||
-	    this.zc_session.isInState('closed')) {
-		this.zc_oldSession = this.zc_session;
-		this._newSession();
-	}
-	return (this.zc_session);
-};
-
-ZKClient.prototype._onSetAdded = function (key, conn, hdl) {
-	this.zc_conns[key] = conn;
-	this.zc_hdls[key] = hdl;
-};
-
-ZKClient.prototype._onSetRemoved = function (key) {
-	var hdl = this.zc_hdls[key];
-	var conn = this.zc_conns[key];
-	mod_assert.object(hdl);
-	delete (this.zc_hdls[key]);
-	conn.destroy();
-	delete (this.zc_conns[key]);
-	hdl.release();
-};
-
-ZKClient.prototype._onSetStateChanged = function (st) {
-	var self = this;
-	if (st === 'failed') {
-		setImmediate(function () {
-			self.emit('failed', new Error('Failed to connect to ' +
-			    'ZK (exhausted initial retry policy)'));
-		});
-	}
-};
-
-ZKClient.prototype._makeConnection = function (backend) {
-	var c = new ZKConnectionFSM({
-		client: this,
-		backend: backend,
-		log: this.zc_log
-	});
-	c.connect();
-	return (c);
-};
-
-ZKClient.prototype.currentConnection = function () {
-	return (this.getSession().getConnection());
-};
-
-ZKClient.prototype.ping = function (cb) {
-	var conn = this.currentConnection();
-	if (conn === undefined)
-		throw (new Error('Not connected to ZooKeeper'));
-	return (conn.ping(cb));
-};
-
-ZKClient.prototype.list = function (path, cb) {
-	mod_assert.string(path, 'path');
-	mod_assert.optionalFunc(cb, 'callback');
-	var conn = this.currentConnection();
-	if (conn === undefined)
-		throw (new Error('Not connected to ZooKeeper'));
-	var req = conn.request({
-		opcode: 'GET_CHILDREN2',
-		path: path,
-		watch: false
-	});
-	if (cb) {
-		req.once('reply', function onReply(pkt) {
-			cb(null, pkt.children, pkt.stat);
-		});
-		req.once('error', cb);
-	}
-	return (req);
-};
-
-ZKClient.prototype.get = function (path, cb) {
-	mod_assert.string(path, 'path');
-	mod_assert.optionalFunc(cb, 'callback');
-	var conn = this.currentConnection();
-	if (conn === undefined)
-		throw (new Error('Not connected to ZooKeeper'));
-	var req = conn.request({
-		opcode: 'GET_DATA',
-		path: path,
-		watch: false
-	});
-	if (cb) {
-		req.once('reply', function onReply(pkt) {
-			cb(null, pkt.data, pkt.stat);
-		});
-		req.once('error', cb);
-	}
-	return (req);
-};
-
-ZKClient.prototype.create = function (path, data, options, cb) {
-	mod_assert.string(path, 'path');
-	mod_assert.buffer(data, 'data');
-	mod_assert.optionalObject(options, 'options');
-	mod_assert.optionalFunc(cb, 'callback');
-	if (options === undefined)
-		options = {};
-	mod_assert.optionalArrayOfObject(options.acl, 'options.acl');
-	mod_assert.optionalArrayOfString(options.flags, 'options.flags');
-
-	if (options.acl === undefined) {
-		options.acl = [ {
-		    id: { scheme: 'world', id: 'anyone' },
-		    perms: ['read', 'write', 'create', 'delete', 'admin']
-		} ];
-	}
-
-	if (options.flags === undefined) {
-		options.flags = [];
-	}
-
-	var conn = this.currentConnection();
-	if (conn === undefined)
-		throw (new Error('Not connected to ZooKeeper'));
-	var req = conn.request({
-		opcode: 'CREATE',
-		path: path,
-		data: data,
-		acl: options.acl,
-		flags: options.flags
-	});
-	if (cb) {
-		req.once('reply', function onReply(pkt) {
-			cb(null, pkt.path);
-		});
-		req.once('error', cb);
-	}
-	return (req);
-};
-
-ZKClient.prototype.set = function (path, data, version, cb) {
-	mod_assert.string(path, 'path');
-	mod_assert.buffer(data, 'data');
-	mod_assert.optionalNumber(version, 'version');
-	mod_assert.optionalFunc(cb, 'callback');
-
-	if (version === undefined)
-		version = -1;
-
-	var conn = this.currentConnection();
-	if (conn === undefined)
-		throw (new Error('Not connected to ZooKeeper'));
-	var req = conn.request({
-		opcode: 'SET_DATA',
-		path: path,
-		data: data,
-		version: version
-	});
-	if (cb) {
-		req.once('reply', function onReply(pkt) {
-			cb(null, pkt.path);
-		});
-		req.once('error', cb);
-	}
-	return (req);
-};
-
-ZKClient.prototype.delete = function (path, version, cb) {
-	mod_assert.string(path, 'path');
-	mod_assert.number(version, 'version');
-	mod_assert.optionalFunc(cb, 'callback');
-
-	var conn = this.currentConnection();
-	if (conn === undefined)
-		throw (new Error('Not connected to ZooKeeper'));
-	var req = conn.request({
-		opcode: 'DELETE',
-		path: path,
-		version: version
-	});
-	if (cb) {
-		req.once('reply', function onReply(pkt) {
-			cb(null);
-		});
-		req.once('error', cb);
-	}
-	return (req);
-};
-
-ZKClient.prototype.stat = function (path, cb) {
-	mod_assert.string(path, 'path');
-	mod_assert.optionalFunc(cb, 'callback');
-
-	var conn = this.currentConnection();
-	if (conn === undefined)
-		throw (new Error('Not connected to ZooKeeper'));
-	var req = conn.request({
-		opcode: 'EXISTS',
-		path: path,
-		watch: false
-	});
-	if (cb) {
-		req.once('reply', function onReply(pkt) {
-			cb(null, pkt.stat);
-		});
-		req.once('error', cb);
-	}
-	return (req);
-};
-
-ZKClient.prototype.sync = function (path, cb) {
-	mod_assert.string(path, 'path');
-	mod_assert.optionalFunc(cb, 'callback');
-
-	var conn = this.currentConnection();
-	if (conn === undefined)
-		throw (new Error('Not connected to ZooKeeper'));
-	var req = conn.request({
-		opcode: 'SYNC',
-		path: path
-	});
-	if (cb) {
-		req.once('reply', function onReply(pkt) {
-			cb(null);
-		});
-		req.once('error', cb);
-	}
-	return (req);
-};
-
-ZKClient.prototype.watcher = function (path) {
-	return (this.getSession().watcher(path));
-};
-
-
-
 function ZKConnectionFSM(opts) {
 	mod_assert.object(opts, 'options');
 	mod_assert.object(opts.log, 'options.log');
diff --git a/lib/index.js b/lib/index.js
index 978f233..0048ba0 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -6,40 +6,56 @@
  * Copyright (c) 2016, Joyent, Inc.
  */
 
-const mod_client = require('./client-fsm');
+const mod_client = require('./client');
 const mod_errors = require('./errors');
 const mod_assert = require('assert-plus');
 const mod_net = require('net');
 
+/*
+ * Overview
+ * ========
+ *
+ * +----------------------------+
+ * |           ZKClient         |
+ * +----------------------------+
+ *         |                |
+ * +---------------+  +---------+
+ * |ZKConnectionFSM|--|ZKSession|
+ * +---------------+  +---------+
+ *            |
+ *      +-------------------+
+ *      |ZK(En|De)codeStream|
+ *      +-------------------+
+ *               |
+ *           +--------+
+ *           |ZKBuffer|
+ *           +--------+
+ *               |
+ *          +----------+
+ *          |JuteBuffer|
+ *          +----------+
+ *
+ * The ZKClient (in client.js, exported as just "Client") is the public-facing
+ * API of the library.
+ *
+ * The client sets up a cueball ConnectionSet which constructs ZKConnectionFSMs.
+ * It also manages a ZKSession instance which tracks our virtual session with
+ * ZK (which we can re-attach to from some other server once established).
+ *
+ * ZKConnectionFSM informs the active ZKSession instance directly when a new
+ * connection has been established (and ZKSession is responsible for deciding
+ * how to proceed with re-attaching to the old session or creating a new one).
+ *
+ * The ZKConnectionFSM communicates with ZK using the ZKEncodeStream and
+ * ZKDecodeStream, which manage the ZK framing format.
+ *
+ * The actual packet payloads are decoded and encoded using the code in
+ * ZKBuffer (with utilities provided by JuteBuffer).
+ */
+
 module.exports = {
-	connect: connect,
 	Client: mod_client.Client,
 	ZKError: mod_errors.ZKError,
 	ZKProtocolError: mod_errors.ZKProtocolError,
 	ZKPingTimeoutError: mod_errors.ZKPingTimeoutError
 };
-
-function connect(options, cb) {
-	mod_assert.object(options, 'options');
-	mod_assert.optionalFunc(cb, 'callback');
-
-	var zkc = new mod_client.Client(options);
-	if (cb) {
-		function onStateChanged(st) {
-			if (st === 'connected') {
-				zkc.removeListener('stateChanged',
-				    onStateChanged);
-				zkc.removeListener('error', onError);
-				cb(null, zkc);
-			}
-		}
-		function onError(err) {
-			cb(err);
-		}
-		zkc.on('stateChanged', onStateChanged);
-		zkc.on('error', onError);
-	}
-	zkc.connect();
-
-	return (zkc);
-}
diff --git a/package.json b/package.json
index c9e3d74..f182ef8 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "zkstream",
-  "version": "0.7.0",
+  "version": "0.8.0",
   "description": "",
   "main": "lib/index.js",
   "dependencies": {
