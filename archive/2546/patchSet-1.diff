commit 1279a3dcfa02af6521e0011523ba4db32de3c876 (refs/changes/46/2546/1)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2017-09-12T02:58:54+00:00 (2 years, 1 month ago)
    
    MORAY-431 Errors after query has timed out are emitted when there are no "error" listeners

diff --git a/lib/pg.js b/lib/pg.js
index 41207de..8199af6 100644
--- a/lib/pg.js
+++ b/lib/pg.js
@@ -206,12 +206,33 @@ PGClient.prototype.query = function clientQuery(sql, args) {
 
     if (this._queryTimeout > 0) {
         timer = setTimeout(function onRowTimeout() {
-            // Don't rollback, since it may or may not
-            // make it to the server; just force a connection
-            // close to happen once the conn is out of the
-            // pool
+            /*
+             * Don't ROLLBACK, since it may or may not make
+             * it to the server, and the query we just timed
+             * out may have placed things in a weird state;
+             * just force a connection close to happen once
+             * the connection is out of the pool.
+             */
             self._moray_had_err = true;
-            done('error', new QueryTimeoutError(sql));
+
+            /*
+             * We're timing out the query inside Moray, but
+             * the Postgres query is still running. It may
+             * still have an error, or the connection could
+             * still have problems of its own, so we make
+             * sure to install a new handler to log anything
+             * that eventually occurs.
+             */
+            qCleanup(req, null);
+            req.on('error', function errorAfterTimeout(err) {
+                log.warn({
+                    req_id: reqid,
+                    client: self,
+                    err: err
+                }, 'query: error after timeout');
+            });
+            res.emit('error', new QueryTimeoutError(sql));
+            qCleanup(null, res);
         }, this._queryTimeout);
     }
 
@@ -315,6 +336,11 @@ PGClient.prototype.rollback = function transactionRollback(cb) {
         return;
     }
 
+    if (self._moray_had_err) {
+        _cb();
+        return;
+    }
+
     var q = self.query('ROLLBACK');
 
     q.once('error', function (err) {
