From d267de8f31202329caf6d30b836e0992ff37033a Mon Sep 17 00:00:00 2001
From: dyep49 <dyep49@gmail.com>
Date: Wed, 14 Mar 2018 13:59:58 -0700
Subject: [PATCH] TRITON-223 Use node-triton-metrics for VMAPI metrics
 collection

---
 docs/index.md                                 |  34 +----
 lib/metrics.js                                | 125 ------------------
 lib/vmapi.js                                  |   3 +-
 package.json                                  |   4 +-
 server.js                                     |  19 ++-
 .../vmapi-server-with-throwing-handler.js     |   2 +-
 test/vms.data-migrations.test.js              |   2 +-
 ...index-moray-bucket-transient-error.test.js |   2 +-
 ...e-moray-bucket-non-transient-error.test.js |   2 +-
 ...e-moray-bucket-removes-index-fails.test.js |   2 +-
 ...pdate-moray-bucket-transient-error.test.js |   2 +-
 ...vms.update-moray-bucket-versioning.test.js |   2 +-
 12 files changed, 21 insertions(+), 178 deletions(-)
 delete mode 100644 lib/metrics.js

diff --git a/docs/index.md b/docs/index.md
index e223851..c70154b 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -435,39 +435,7 @@ The `dataMigrations` property is composed of two sub-properties:
 
 # Metrics
 
-VMAPI exposes metrics via [node-artedi](https://github.com/joyent/node-artedi).
-For development, it is probably easiest to use `curl` to scrape metrics:
-
-```
-$ curl http://:<ADMIN_IP>:8881/metrics
-```
-The metrics are returned in Prometheus v0.0.4 text format.
-
-The following metrics are collected:
-
-- http_requests_completed
-- http_request_duration_seconds
-
-Each of the metrics returned include the following metadata labels:
-
-- datacenter (Datacenter name e.g. us-east-1)
-- service (Service name e.g. vmapi)
-- instance (Instance UUID)
-- server (Server UUID)
-- method (e.g. 'PUT')
-- status_code (e.g. 200)
-- route (e.g. 'listvms')
-- user_agent
-
-The metric collection facility provided is intended to be consumed by a monitoring service like a Prometheus or InfluxDB server.
-
-Notably, some metadata labels are not being collected due to their potential
-for high cardinality. Metadata labels that have a large number of unique
-values cause memory strain on metric client processes (vmapi) as well as
-metric servers (Prometheus). It's important to understand what kind of an
-effect on the entire system the addition of metrics and metadata labels can have
-before adding them. This is an issue that would likely not appear in a
-development or staging environment.
+VMAPI exposes metrics via [node-triton-metrics](https://github.com/joyent/node-triton-metrics) on `http://<ADMIN_IP>:8881/metrics.`
 
 # VMs
 
diff --git a/lib/metrics.js b/lib/metrics.js
deleted file mode 100644
index 02923de..0000000
--- a/lib/metrics.js
+++ /dev/null
@@ -1,125 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright 2018 Joyent, Inc.
- */
-
-/*
- * Artedi metrics.
- */
-
-var artedi = require('artedi');
-var assert = require('assert-plus');
-var restify = require('restify');
-var VError = require('verror');
-
-function getMetricsHandler(collector) {
-    function getMetrics(req, res, next) {
-        /*
-         * Restify GET requests will keep socket open until entire request
-         * body is read. req.resume() is used to prevent connection leaks.
-         *
-         * More information at:
-         * https://jira.joyent.us/browse/MANTA-3338
-         * https://cr.joyent.us/#/c/2823/1/lib/other.js
-         */
-        req.on('end', function collectMetrics() {
-            collector.collect(artedi.FMT_PROM,
-                function sendMetrics(err, metrics) {
-                if (err) {
-                    next(new VError(err, 'error retrieving metrics'));
-                    return;
-                }
-                /* BEGIN JSSTYLED */
-                /*
-                 * Content-Type header is set to indicate the Prometheus
-                 * exposition format version
-                 *
-                 * More information at:
-                 * https://github.com/prometheus/docs/blob/master/content/docs/instrumenting/exposition_formats.md#format-version-004
-                 */
-                /* END JSSTYLED */
-                res.setHeader('Content-Type', 'text/plain; version=0.0.4');
-                res.send(metrics);
-                next();
-            });
-        });
-        req.resume();
-    }
-    var chain = [ getMetrics ];
-    return chain;
-}
-
-function MetricsManager(config) {
-    assert.object(config, 'config');
-    assert.object(config.log, 'config.log');
-    assert.object(config.labels, 'config.labels');
-    assert.string(config.address, 'config.address');
-    assert.number(config.port, 'config.port');
-
-    var collector = artedi.createCollector({ labels: config.labels });
-    this.collector = collector;
-
-    this.requestCounter = this.collector.counter({
-        name: 'http_requests_completed',
-        help: 'count of requests completed'
-    });
-
-    this.timeHistogram = this.collector.histogram({
-        name: 'http_request_duration_seconds',
-        help: 'total time to process requests'
-    });
-
-    this.address = config.address;
-    this.log = config.log;
-    this.port = config.port;
-    this.server = restify.createServer({ severName: 'Metrics' });
-    this.server.get('/metrics', getMetricsHandler(collector));
-}
-
-MetricsManager.prototype.listen = function startMetricsServer(callback) {
-    var self = this;
-
-    self.server.listen(self.port, self.address, function serverStarted() {
-        self.log.info('metrics server started on port %d', self.port);
-        callback();
-    });
-};
-
-MetricsManager.prototype.update = function updateMetrics(req, res, route, err) {
-
-    var routeName = route ? (route.name || route) : 'unknown';
-    var userAgent = req.userAgent();
-
-    // Only the first token is added to the label to prevent cardinality issues
-    var shortUserAgent = userAgent ? userAgent.split(' ')[0] : 'unknown';
-
-    var labels = {
-        route: routeName,
-        method: req.method,
-        user_agent: shortUserAgent,
-        status_code: res.statusCode
-    };
-
-    var latency = res.getHeader('X-Response-Time');
-    if (typeof (latency) !== 'number') {
-        latency = Date.now() - req._time;
-    }
-
-    var latencySeconds = latency / 1000;
-
-    this.requestCounter.increment(labels);
-    this.timeHistogram.observe(latencySeconds, labels);
-};
-
-function createMetricsManager(options) {
-    return new MetricsManager(options);
-}
-
-module.exports = {
-    createMetricsManager: createMetricsManager
-};
diff --git a/lib/vmapi.js b/lib/vmapi.js
index 4e42b5c..3bea4e2 100644
--- a/lib/vmapi.js
+++ b/lib/vmapi.js
@@ -236,7 +236,8 @@ VmapiApp.prototype._initApis = function _initApis(options) {
         })(req, res, route, err);
     });
 
-    this.server.on('after', metricsManager.update.bind(metricsManager));
+    this.server.on('after', metricsManager.collectRestifyMetrics
+        .bind(metricsManager));
 
     // Init Server middleware
     this.setMiddleware();
diff --git a/package.json b/package.json
index 2f7d67b..fad45ac 100644
--- a/package.json
+++ b/package.json
@@ -1,11 +1,10 @@
 {
   "name": "vmapi",
   "description": "VMs API",
-  "version": "9.5.0",
+  "version": "9.5.1",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
-    "artedi": "1.2.1",
     "assert-plus": "1.0.0",
     "async": "0.7.0",
     "backoff": "2.5.0",
@@ -28,6 +27,7 @@
     "sprintf": "0.1.1",
     "strsplit": "1.0.0",
     "trace-event": "1.3.0",
+    "triton-metrics": "0.1.0",
     "triton-tags": "^1.1.4",
     "vasync": "2.2.0",
     "verror": "1.10.0",
diff --git a/server.js b/server.js
index e3011f7..37757ef 100644
--- a/server.js
+++ b/server.js
@@ -35,7 +35,7 @@ var VOLAPI = require('sdc-clients').VOLAPI;
 var WFAPI = require('./lib/apis/wfapi');
 
 var configLoader = require('./lib/config-loader');
-var createMetricsManager = require('./lib/metrics').createMetricsManager;
+var createMetricsManager = require('triton-metrics').createMetricsManager;
 var DataMigrationsController = require('./lib/data-migrations/controller');
 var dataMigrationsLoader = require('./lib/data-migrations/loader');
 var morayInit = require('./lib/moray/moray-init.js');
@@ -260,21 +260,20 @@ function startVmapiService() {
             next();
         },
         function createMetricsCollector(_, next) {
-            var metricsLog = vmapiLog.child({component: 'metrics'});
-
-            var metricsConfig = {
+            metricsManager = createMetricsManager({
                 address: config.adminIp,
-                log: metricsLog,
-                labels: {
+                log: vmapiLog.child({component: 'metrics'}),
+                port: 8881,
+                restify: restify,
+                staticLabels: {
                     datacenter: config.datacenterName,
                     instance: config.instanceUuid,
                     server: config.serverUuid,
                     service: config.serviceName
-                },
-                port: 8881
-            };
+                }
+            });
 
-            metricsManager = createMetricsManager(metricsConfig);
+            metricsManager.createRestifyMetrics();
             metricsManager.listen(function metricsServerStarted() {
                 next();
             });
diff --git a/test/fixtures/vmapi-server-with-throwing-handler.js b/test/fixtures/vmapi-server-with-throwing-handler.js
index eaa921c..397b082 100644
--- a/test/fixtures/vmapi-server-with-throwing-handler.js
+++ b/test/fixtures/vmapi-server-with-throwing-handler.js
@@ -25,7 +25,7 @@ function throwingRestifyHandler(req, res, next) {
 }
 
 var mockedMetricsManager = {
-    update: function () {}
+    collectRestifyMetrics: function () {}
 };
 
 var mockedWfapiClient = {
diff --git a/test/vms.data-migrations.test.js b/test/vms.data-migrations.test.js
index 059d16d..19e21bd 100644
--- a/test/vms.data-migrations.test.js
+++ b/test/vms.data-migrations.test.js
@@ -29,7 +29,7 @@ var testMoray = require('./lib/moray.js');
 var VmapiApp = require('../lib/vmapi');
 
 var MOCKED_METRICS_MANAGER = {
-    update: function () {}
+    collectRestifyMetrics: function () {}
 };
 
 var MOCKED_WFAPI_CLIENT = {
diff --git a/test/vms.reindex-moray-bucket-transient-error.test.js b/test/vms.reindex-moray-bucket-transient-error.test.js
index e13b6d5..927fb70 100644
--- a/test/vms.reindex-moray-bucket-transient-error.test.js
+++ b/test/vms.reindex-moray-bucket-transient-error.test.js
@@ -71,7 +71,7 @@ exports.moray_init_transient_error = function (t) {
     var origMorayReindexBucket;
 
     var mockedMetricsManager = {
-        update: function () {}
+        collectRestifyMetrics: function () {}
     };
 
     var mockedWfapiClient = {
diff --git a/test/vms.update-moray-bucket-non-transient-error.test.js b/test/vms.update-moray-bucket-non-transient-error.test.js
index 2733c3a..2718a21 100644
--- a/test/vms.update-moray-bucket-non-transient-error.test.js
+++ b/test/vms.update-moray-bucket-non-transient-error.test.js
@@ -85,7 +85,7 @@ var morayBucketsConfigWithError = {
 
 exports.moray_init_non_transient_error = function (t) {
     var mockedMetricsManager = {
-        update: function () {}
+        collectRestifyMetrics: function () {}
     };
 
     var mockedWfapiClient = {
diff --git a/test/vms.update-moray-bucket-removes-index-fails.test.js b/test/vms.update-moray-bucket-removes-index-fails.test.js
index 5151654..1f3b6fe 100644
--- a/test/vms.update-moray-bucket-removes-index-fails.test.js
+++ b/test/vms.update-moray-bucket-removes-index-fails.test.js
@@ -85,7 +85,7 @@ exports.moray_init_invalid_index_removal = function (t) {
     var vmapiApp;
 
     var mockedMetricsManager = {
-        update: function () {}
+        collectRestifyMetrics: function () {}
     };
 
     var mockedWfapiClient = {
diff --git a/test/vms.update-moray-bucket-transient-error.test.js b/test/vms.update-moray-bucket-transient-error.test.js
index a72c70a..286c86c 100644
--- a/test/vms.update-moray-bucket-transient-error.test.js
+++ b/test/vms.update-moray-bucket-transient-error.test.js
@@ -39,7 +39,7 @@ exports.moray_init_transient_error = function (t) {
     var origMorayClientGetBucket;
 
     var mockedMetricsManager = {
-        update: function () {}
+        collectRestifyMetrics: function () {}
     };
 
     var mockedWfapiClient = {
diff --git a/test/vms.update-moray-bucket-versioning.test.js b/test/vms.update-moray-bucket-versioning.test.js
index 274107a..bb90f20 100644
--- a/test/vms.update-moray-bucket-versioning.test.js
+++ b/test/vms.update-moray-bucket-versioning.test.js
@@ -27,7 +27,7 @@ var testMoray = require('./lib/moray.js');
 var VmapiApp = require('../lib/vmapi');
 
 var MOCKED_METRICS_MANAGER = {
-    update: function () {}
+    collectRestifyMetrics: function () {}
 };
 
 var MOCKED_WFAPI_CLIENT = {
-- 
2.21.0

