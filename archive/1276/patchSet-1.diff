commit 137f6f700bea2fd803ac8eaca4a3bcd8a1eb5e8d (refs/changes/76/1276/1)
Author: Alex Wilson <alex.wilson@joyent.com>
Date:   2017-01-18T16:07:39-08:00 (2 years, 9 months ago)
    
    CNS-193 want support for ACME DNS challenges

diff --git a/docs/metadata.md b/docs/metadata.md
index 1a2213c..3dcf54c 100644
--- a/docs/metadata.md
+++ b/docs/metadata.md
@@ -132,3 +132,14 @@ Possible values:
  - `"down"` (String)
  - `"up"` (String)
  - Any other string value (will be considered the same as `"up"`)
+
+### `triton.cns.acme-challenge`
+
+Can be set to publish data in a TXT record under `_acme-challenge.$name` for
+all DNS names for this instance.
+
+Used with the ACME certificate issuance protocol, to prove ownership of a
+particular domain.
+
+Possible values:
+ - Any URL-safe base64 string
diff --git a/lib/consts.js b/lib/consts.js
index d292f18..1bde191 100644
--- a/lib/consts.js
+++ b/lib/consts.js
@@ -18,5 +18,6 @@ module.exports = {
 	USER_EN_FLAG: 'triton_cns_enabled',
 	INST_EN_TAG: 'triton.cns.disable',
 	INST_EN_FLAG: 'triton.cns.status',
+	INST_ACME_KEY: 'triton.cns.acme-challenge',
 	INST_PTR_TAG: 'triton.cns.reverse_ptr'
 };
diff --git a/lib/vm-to-zones.js b/lib/vm-to-zones.js
index dee294f..5d2f51a 100644
--- a/lib/vm-to-zones.js
+++ b/lib/vm-to-zones.js
@@ -170,24 +170,47 @@ function addInstance(zones, vm, ent, config) {
 		}
 	}
 
+	function addACME(name) {
+		if (vm.customer_metadata === undefined)
+			return;
+		var chal = vm.customer_metadata[consts.INST_ACME_KEY];
+		if (chal !== undefined) {
+			name = '_acme-challenge.' + name;
+			if (!zones[ent.zone])
+				zones[ent.zone] = {};
+			if (!zones[ent.zone][name])
+				zones[ent.zone][name] = [];
+			var recs = zones[ent.zone][name];
+			recs.push({
+				constructor: 'TXT',
+				args: [chal]
+			});
+		}
+	}
+
 	var revName = primaryName(vm, config);
 
 	var n = vm.uuid + '.inst.' + vm.owner.uuid;
 	addName(n);
+	addACME(n);
 
 	if (config.use_login && vm.owner.login.length < 63) {
-		addName(vm.uuid + '.inst.' + dnsify(vm.owner.login));
+		n = vm.uuid + '.inst.' + dnsify(vm.owner.login);
+		addName(n);
+		addACME(n);
 	}
 
 	if (config.use_alias && vm.alias && vm.alias.length < 63) {
 		n = dnsify(vm.alias) + '.inst.' + vm.owner.uuid;
 		addName(n);
+		addACME(n);
 	}
 
 	if (config.use_login && config.use_alias && vm.alias &&
 	    vm.alias.length < 63 && vm.owner.login.length < 63) {
 		n = dnsify(vm.alias) + '.inst.' + dnsify(vm.owner.login);
 		addName(n);
+		addACME(n);
 	}
 
 	revName = revName + '.' + ent.zone;
diff --git a/test/unit/vm-to-zones.test.js b/test/unit/vm-to-zones.test.js
index 6763828..14adf68 100644
--- a/test/unit/vm-to-zones.test.js
+++ b/test/unit/vm-to-zones.test.js
@@ -493,6 +493,60 @@ test('service with srvs', function (t) {
 	t.end();
 });
 
+test('acme challenge support', function (t) {
+	var config = {
+	    use_alias: true,
+	    forward_zones: {
+		'foo': {}
+	    },
+	    reverse_zones: {}
+	};
+	var challenge = 'OL92GcAcYP0DTCTVwMU46dpu73dAhu5XD6ahQiDg54M';
+	var vm = {
+	    uuid: 'abc123',
+	    alias: 'test',
+	    services: [],
+	    listInstance: true,
+	    listServices: true,
+	    owner: {
+		uuid: 'def432'
+	    },
+	    customer_metadata: {
+		'triton.cns.acme-challenge': challenge
+	    },
+	    nics: [
+		{
+		    ip: '1.2.3.4',
+		    zones: ['foo']
+		}
+	    ]
+	};
+	var zones = buildZonesFromVm(vm, config, log);
+	t.deepEqual(Object.keys(zones).sort(), ['3.2.1.in-addr.arpa', 'foo']);
+
+	t.deepEqual(Object.keys(zones['foo']).sort(),
+	    ['_acme-challenge.abc123.inst.def432',
+	    '_acme-challenge.test.inst.def432', 'abc123.cmon',
+	    'abc123.inst.def432', 'test.inst.def432']);
+	t.deepEqual(Object.keys(zones['3.2.1.in-addr.arpa']), ['4']);
+
+	var fwd = zones['foo']['test.inst.def432'];
+	t.deepEqual(fwd, [
+	    {constructor: 'A', args: ['1.2.3.4']},
+	    {constructor: 'TXT', args: ['abc123']}
+	]);
+	var acme = zones['foo']['_acme-challenge.test.inst.def432'];
+	t.deepEqual(acme, [
+	    {constructor: 'TXT', args: [challenge]}
+	]);
+	var rev = zones['3.2.1.in-addr.arpa']['4'];
+	t.deepEqual(rev, [
+	    {constructor: 'PTR', args: ['test.inst.def432.foo']}
+	]);
+
+	t.end();
+});
+
 test('cmon everywhere', function (t) {
 	var config = {
 	    forward_zones: {
