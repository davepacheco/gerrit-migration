From be6976efa0b4aba0b5011286366e16dc097938cb Mon Sep 17 00:00:00 2001
From: "Joshua M. Clulow" <jmc@joyent.com>
Date: Fri, 10 Feb 2017 03:32:41 +0000
Subject: [PATCH] joyent/node-manta#299 mget -o does not handle multiple object
 arguments

---
 bin/mget          | 140 ++++++++++-------
 test/mget.test.js | 381 ++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 468 insertions(+), 53 deletions(-)
 create mode 100644 test/mget.test.js

diff --git a/bin/mget b/bin/mget
index 2a7b979..bb10c2c 100755
--- a/bin/mget
+++ b/bin/mget
@@ -5,19 +5,17 @@
  */
 
 var fs = require('fs');
-var http = require('http');
 var path = require('path-platform');
-var url = require('url');
 
+var assert = require('assert-plus');
 var bunyan = require('bunyan');
 var dashdash = require('dashdash');
+var progbar = require('progbar');
+var vasync = require('vasync');
 
 var manta = require('../lib');
 
 
-
-///--- Globals
-
 var NAME = path.basename(process.argv[1]);
 var LOG = bunyan.createLogger({
     name: NAME,
@@ -60,9 +58,6 @@ var OPTIONS_PARSER = dashdash.createParser({
 });
 
 
-
-///--- Functions
-
 function ifError(err) {
     if (err) {
         console.error('mget: ' + err.toString());
@@ -118,73 +113,112 @@ function parseOptions() {
 }
 
 
-function printEntry(obj) {
-    console.log('%j', obj);
-}
+function downloadOne(dlo, done) {
+    assert.object(dlo, 'dlo');
+    assert.bool(dlo.dlo_progress, 'dlo.dlo_progress');
+    assert.bool(dlo.dlo_devtty, 'dlo.dlo_devtty');
+    assert.string(dlo.dlo_path, 'dlo.dlo_path');
+    assert.object(dlo.dlo_client, 'dlo.dlo_client');
+    assert.object(dlo.dlo_output, 'dlo.dlo_output');
+    assert.func(done, 'done');
 
+    dlo.dlo_client.get(dlo.dlo_path, function (err, stream, res) {
+        if (err) {
+            done(err);
+            return;
+        }
+
+        var bar;
+        var src = stream;
+        if (dlo.dlo_progress) {
+            var baropts = {
+                filename: dlo.dlo_path,
+                devtty: dlo.dlo_devtty
+            };
+            var clen = parseInt(res.headers['content-length'], 10);
+            if (clen >= 0) {
+                baropts.size = clen;
+            } else {
+                baropts.nosize = true;
+            }
+            bar = new progbar.ProgressBar(baropts);
+
+            /*
+             * We insert the progress bar stream between the response from
+             * Manta and the local destination.  Note that we _do_ propagate
+             * the "end" event here (see below), as that is what directs the
+             * progress bar to finish drawing and clean up.
+             */
+            src = stream.pipe(bar.stream());
+        }
 
+        /*
+         * The default behaviour of Stream#pipe() is to propagate the "end"
+         * event automatically from source to destination stream.  As we are
+         * potentially concatenating several response streams into one
+         * target location, we need to disable this behaviour.  We then call
+         * Stream#end() manually once all streams are complete.
+         */
+        src.pipe(dlo.dlo_output, { end: false });
+
+        src.on('end', function () {
+            done();
+        });
+    });
+}
 
-///--- Mainline
 
 (function main() {
     var opts = parseOptions();
     var client = manta.createBinClient(opts);
-    var i = -1;
-    var out = process.stdout;
     var drawProgressBar = true;
 
-    function get() {
-        var p = opts.paths[++i];
-        if (!p) {
-            client.close();
-            return;
-        }
-
-        client.get(p, function (err, stream, res) {
+    var downloadAll = function (output, closeOutput) {
+        assert.object(output, 'output');
+        assert.bool(closeOutput, 'closeOutput');
+
+        vasync.forEachPipeline({
+            inputs: opts.paths,
+            func: function (p, next) {
+                downloadOne({
+                    dlo_client: client,
+                    dlo_progress: opts.progress || drawProgressBar,
+                    dlo_devtty: opts.progress || false,
+                    dlo_path: p,
+                    dlo_output: output
+                }, next);
+            }
+        }, function (err) {
             ifError(err);
 
-            var bar;
-            var src = stream;
-            if (opts.progress || drawProgressBar) {
-                var baropts = {
-                    filename: p,
-                    devtty: opts.progress
-                };
-                var clen =
-                    parseInt(res.headers['content-length'],
-                             10);
-                if (clen >= 0) {
-                    baropts.size = clen;
-                } else {
-                    baropts.nosize = true;
-                }
-                bar = new manta.ProgressBar(baropts);
-                src = stream.pipe(bar.stream());
+            if (closeOutput) {
+                output.end();
             }
-
-            src.pipe(out);
-
-            src.on('end', function () {
-                get();
-            });
+            client.close();
         });
-    }
+    };
 
     if (opts.quiet || !Boolean(process.stderr.isTTY))
         drawProgressBar = false;
 
     if (opts.output) {
-        out = fs.createWriteStream(opts.output);
-        out.on('open', get.bind(this));
+        var file = fs.createWriteStream(opts.output);
+        file.on('open', function () {
+            downloadAll(file, true);
+        });
     } else {
-        if (out.isTTY) {
+        /*
+         * If no output file was selected, fall back to stdout.  Note
+         * that Node does not allow the consumer to call Stream#end()
+         * on the stdout stream.
+         */
+        if (process.stdout.isTTY) {
             /*
-             * If we're outputting to a TTY, then we don't
-             * want to draw the progress bar as it will likely
-             * clobber the output.
+             * If we're outputting to a TTY, then we don't want to draw the
+             * progress bar as it will likely clobber the output.
              */
             drawProgressBar = false;
         }
-        get();
+        downloadAll(process.stdout, false);
     }
 })();
diff --git a/test/mget.test.js b/test/mget.test.js
new file mode 100644
index 0000000..e6b7774
--- /dev/null
+++ b/test/mget.test.js
@@ -0,0 +1,381 @@
+/*
+ * Copyright 2017 Joyent, Inc.
+ */
+
+/*
+ * Test the "mget" command.
+ */
+
+var assert = require('assert-plus');
+var forkExecWait = require('forkexec').forkExecWait;
+var fs = require('fs');
+var libuuid = require('uuid');
+var path = require('path');
+var vasync = require('vasync');
+var sprintf = require('extsprintf').sprintf;
+
+var logging = require('./lib/logging');
+
+
+var log = logging.createLogger();
+
+var BINDIR = path.resolve(__dirname, '../bin');
+var MGET = path.resolve(BINDIR, 'mget');
+var MMKDIR = path.resolve(BINDIR, 'mmkdir');
+var MPUT = path.resolve(BINDIR, 'mput');
+var MRM = path.resolve(BINDIR, 'mrm');
+
+var TMPDIR = process.env.TMPDIR || '/tmp';
+
+var TESTDIR = sprintf('/%s/stor/node-manta-test-mget-%s',
+    process.env.MANTA_USER || 'admin',
+    libuuid.v4().split('-')[0]);
+var TESTTREE = [
+    {
+        path: TESTDIR,
+        type: 'directory'
+    }
+];
+
+/*
+ * Create three regular UNIX text files (linefeed separated, with a terminating
+ * linefeed).
+ */
+var i;
+for (i = 1; i <= 3; i++) {
+    TESTTREE.push({
+        path: sprintf('%s/%02d.txt', TESTDIR, i),
+        type: 'object',
+        content: sprintf('%s\nfile (%02d)\n',
+            [ 'first', 'second', 'third' ][i - 1], i)
+    });
+}
+
+/*
+ * Create three data files that contain only a single character.  Of particular
+ * note is the lack of a trailing linefeed.
+ */
+for (i = 1; i <= 3; i++) {
+    TESTTREE.push({
+        path: sprintf('%s/%02d.data', TESTDIR, i),
+        type: 'object',
+        content: sprintf('%s', String.fromCharCode('a'.charCodeAt(0) + i - 1))
+    });
+}
+
+
+// ---- helper functions
+
+function test(name, testfunc) {
+    module.exports[name] = testfunc;
+}
+
+function unlinkIfExists(targ) {
+    try {
+        fs.unlinkSync(targ);
+    } catch (ex) {
+        if (ex.code === 'ENOENT')
+            return;
+
+        throw (ex);
+    }
+}
+
+
+// ---- tests
+
+test('setup: create test tree at ' + TESTDIR, function (t) {
+    var tmpFile = path.join(TMPDIR, 'node-manta-test-tmp-file-' + process.pid);
+
+    vasync.forEachPipeline({
+        inputs: TESTTREE,
+        func: function createTreeItem(item, next) {
+            log.trace({ item: item }, 'create test tree item');
+
+            switch (item.type) {
+            case 'directory':
+                forkExecWait({argv: [MMKDIR, '-p', item.path]}, next);
+                return;
+
+            case 'object':
+                /*
+                 * Would like a 'stdin' option to `forkExecWait`. For now I'll
+                 * quick hack with a local file. An alternative would be
+                 * to use the manta client.
+                 */
+                vasync.pipeline({ funcs: [
+                    function mkTmpFile(_, next2) {
+                        fs.writeFile(tmpFile, item.content, next2);
+                    },
+                    function mputIt(_, next2) {
+                        forkExecWait({
+                            argv: [ MPUT, '-f', tmpFile, item.path ]
+                        }, next2);
+                    },
+                    function rmTmpFile(_, next2) {
+                        fs.unlink(tmpFile, next2);
+                    }
+                ]}, next);
+                return;
+
+            default:
+                t.ifError(new Error('invalid test tree type: ' + item.type));
+                return;
+            }
+        }
+    }, function (err) {
+        t.ifError(err, err);
+        t.done();
+    });
+});
+
+
+/*
+ * Download one data file, emitting its contents on stdout.  This data file has
+ * no terminating linefeed.  This test ensures we do not accidentally add one
+ * in.
+ */
+test('mget TESTDIR/02.data', function (t) {
+    var argv = [
+        MGET,
+        sprintf('%s/%02d.data', TESTDIR, 2)
+    ];
+
+    /*
+     * We expect "mget" to download the file and emit it on stdout, without a
+     * terminating linefeed.
+     */
+    var expected = 'b';
+
+    forkExecWait({
+        argv: argv
+    }, function (err, info) {
+        t.ifError(err, err);
+
+        t.equal(info.stderr, '', 'no stderr');
+        t.equal(info.stdout, expected, 'stdout from mget');
+
+        t.done();
+    });
+});
+
+
+/*
+ * Download three data files which exist, emitting their contents on stdout.
+ * These data files have no terminating linefeed.  This test ensures we do not
+ * accidentally add any in.
+ */
+test('mget TESTDIR/01.data TESTDIR/02.data TESTDIR/03.data', function (t) {
+    var argv = [
+        MGET,
+        sprintf('%s/%02d.data', TESTDIR, 1),
+        sprintf('%s/%02d.data', TESTDIR, 2),
+        sprintf('%s/%02d.data', TESTDIR, 3)
+    ];
+
+    /*
+     * We expect "mget" to download the three files and emit them on stdout in
+     * order, without interstitial linefeeds.
+     */
+    var expected = 'abc';
+
+    forkExecWait({
+        argv: argv
+    }, function (err, info) {
+        t.ifError(err, err);
+
+        t.equal(info.stderr, '', 'no stderr');
+        t.equal(info.stdout, expected, 'stdout from mget');
+
+        t.done();
+    });
+});
+
+
+/*
+ * Download three files which exist, emitting their contents on stdout.
+ */
+test('mget TESTDIR/01.txt TESTDIR/02.txt TESTDIR/03.txt', function (t) {
+    var argv = [
+        MGET,
+        sprintf('%s/%02d.txt', TESTDIR, 1),
+        sprintf('%s/%02d.txt', TESTDIR, 2),
+        sprintf('%s/%02d.txt', TESTDIR, 3)
+    ];
+
+    /*
+     * We expect "mget" to download the three files and emit them to stdout in
+     * order.
+     */
+    var expected = [
+        'first',
+        'file (01)',
+        'second',
+        'file (02)',
+        'third',
+        'file (03)'
+    ].join('\n') + '\n';
+
+    forkExecWait({
+        argv: argv
+    }, function (err, info) {
+        t.ifError(err, err);
+
+        t.equal(info.stderr, '', 'no stderr');
+        t.equal(info.stdout, expected, 'stdout from mget');
+
+        t.done();
+    });
+});
+
+
+/*
+ * Download three files which exist, and store the output in a named file
+ * using the "-o" flag.
+ */
+test('mget -o TMPFILE TESTDIR/01.txt TESTDIR/02.txt TESTDIR/03.txt',
+    function (t) {
+
+    var tmpFile = path.join(TMPDIR, 'node-manta-test-tmp-file-' + process.pid);
+    var argv = [
+        MGET, '-o', tmpFile,
+        sprintf('%s/%02d.txt', TESTDIR, 1),
+        sprintf('%s/%02d.txt', TESTDIR, 2),
+        sprintf('%s/%02d.txt', TESTDIR, 3)
+    ];
+
+    /*
+     * We expect "mget" to download the three files and store the contents in
+     * the temporary file we nominated.
+     */
+    var expected = [
+        'first',
+        'file (01)',
+        'second',
+        'file (02)',
+        'third',
+        'file (03)'
+    ].join('\n') + '\n';
+
+    unlinkIfExists(tmpFile);
+
+    forkExecWait({
+        argv: argv
+    }, function (err, info) {
+        t.ifError(err, err);
+
+        t.equal(info.stdout, '', 'no stdout');
+        t.equal(info.stderr, '', 'no stderr');
+
+        var fileData = fs.readFileSync(tmpFile, 'utf8');
+        t.equal(fileData, expected, 'file data from mget');
+
+        unlinkIfExists(tmpFile);
+
+        t.done();
+    });
+});
+
+
+/*
+ * Download two files that do exist, then one that does not exist, then a
+ * fourth and final file which exists.  We expect that the contents of the
+ * first two files are concatenated together on stdout, but that the output
+ * would then terminate early because the third file is not found.
+ */
+test('mget TESTDIR/01.txt TESTDIR/02.txt TESTDIR/XX.txt TESTDIR/03.txt',
+    function (t) {
+
+    var argv = [
+        MGET,
+        sprintf('%s/%02d.txt', TESTDIR, 1),
+        sprintf('%s/%02d.txt', TESTDIR, 2),
+        sprintf('%s/%s.txt', TESTDIR, 'XX'),
+        sprintf('%s/%02d.txt', TESTDIR, 3)
+    ];
+
+    /*
+     * We expect "mget" to download the two files and store the contents in the
+     * temporary file we nominated.  It will then fail to download the file
+     * that does not exist, and the program will stop.
+     */
+    var expected = [
+        'first',
+        'file (01)',
+        'second',
+        'file (02)'
+    ].join('\n') + '\n';
+
+    forkExecWait({
+        argv: argv
+    }, function (err, info) {
+        t.ok(err, 'must fail');
+
+        t.ok(info.stderr.match(/^mget: ResourceNotFoundError/, 'stderr'));
+        t.equal(info.stdout, expected, 'expected stdout');
+
+        t.done();
+    });
+});
+
+
+/*
+ * Download two files that do exist, then one that does not exist, then a
+ * fourth and final file which exists.  We expect that the contents of the
+ * first two files are concatenated together in the output file, but that the
+ * output would then terminate early because the third file is not found.
+ */
+test('mget -o TMPFILE TESTDIR/01.txt TESTDIR/02.txt TESTDIR/XX.txt ' +
+    'TESTDIR/03.txt', function (t) {
+
+    var tmpFile = path.join(TMPDIR, 'node-manta-test-tmp-file-' + process.pid);
+    var argv = [
+        MGET, '-o', tmpFile,
+        sprintf('%s/%02d.txt', TESTDIR, 1),
+        sprintf('%s/%02d.txt', TESTDIR, 2),
+        sprintf('%s/%s.txt', TESTDIR, 'XX'),
+        sprintf('%s/%02d.txt', TESTDIR, 3)
+    ];
+
+    /*
+     * We expect "mget" to download the two files and store the contents in the
+     * temporary file we nominated.  It will then fail to download the file
+     * that does not exist, and the program will stop.
+     */
+    var expected = [
+        'first',
+        'file (01)',
+        'second',
+        'file (02)'
+    ].join('\n') + '\n';
+
+    unlinkIfExists(tmpFile);
+
+    forkExecWait({
+        argv: argv
+    }, function (err, info) {
+        t.ok(err, 'must fail');
+
+        t.ok(info.stderr.match(/^mget: ResourceNotFoundError/, 'stderr'));
+        t.equal(info.stdout, '', 'no stdout');
+
+        var fileData = fs.readFileSync(tmpFile, 'utf8');
+        t.equal(fileData, expected, 'file data from mget');
+
+        unlinkIfExists(tmpFile);
+
+        t.done();
+    });
+});
+
+
+test('cleanup: rm test tree ' + TESTDIR, function (t) {
+    // Sanity checks that we don't `mrm -r` a non-test dir.
+    assert.ok(TESTDIR);
+    assert.ok(TESTDIR.indexOf('node-manta-test') !== -1);
+
+    forkExecWait({ argv: [ MRM, '-r', TESTDIR ]}, function (err) {
+        t.ifError(err, err);
+        t.done();
+    });
+});
-- 
2.21.0

