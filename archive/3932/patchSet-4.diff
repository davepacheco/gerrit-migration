commit b66ef7e03329d6785f7d7c846adca57cfb6578c3 (refs/changes/32/3932/4)
Author: Jorge Schrauwen <sjorge@blackdot.be>
Date:   2018-05-10T13:23:21+02:00 (1 year, 5 months ago)
    
    OS-6926 vmadm should support ahci disks for bhyve

diff --git a/src/vm/man/vmadm.1m.md b/src/vm/man/vmadm.1m.md
index 7747905c..d8b252c0 100644
--- a/src/vm/man/vmadm.1m.md
+++ b/src/vm/man/vmadm.1m.md
@@ -904,7 +904,7 @@ tab-complete UUIDs rather than having to type them out for every command.
         use virtio. If not, use ide or scsi depending on the drivers in your
         guest.
 
-        type: string (one of ['virtio','ide','scsi'])
+        type: string (one of ['virtio','ide','scsi'] for KVM or one of ['virtio','ahci'] for BHYVE)
         vmtype: KVM
         listable: yes (see above)
         create: yes
diff --git a/src/vm/node_modules/VM.js b/src/vm/node_modules/VM.js
index 416316d5..67d30012 100644
--- a/src/vm/node_modules/VM.js
+++ b/src/vm/node_modules/VM.js
@@ -280,11 +280,15 @@ function ensureLogging(side_effects)
     start_logging();
 }
 
-exports.DISK_MODELS = [
+exports.KVM_DISK_MODELS = [
     'virtio',
     'ide',
     'scsi'
 ];
+exports.BHYVE_DISK_MODELS = [
+    'virtio',
+    'ahci'
+];
 
 exports.VGA_TYPES = [
     'cirrus',
@@ -4347,6 +4351,7 @@ function checkPayloadProperties(payload, vmobj, log, callback)
     var current_primary_ips = [];
     var current_vrids = [];
     var disk;
+    var disk_models;
     var dst;
     var field;
     var filesys;
@@ -4591,6 +4596,9 @@ function checkPayloadProperties(payload, vmobj, log, callback)
         for (disk in payload.add_disks) {
             if (payload.add_disks.hasOwnProperty(disk)) {
                 zvol = payload.add_disks[disk];
+                disk_models = (brand == 'bhyve') ?
+                    VM.BHYVE_DISK_MODELS :
+                    VM.KVM_DISK_MODELS;
 
                 // path is only allowed in 2 cases when adding a disk:
                 //
@@ -4648,10 +4656,10 @@ function checkPayloadProperties(payload, vmobj, log, callback)
                             + 'disk: ' + JSON.stringify(zvol)));
                         return;
                     }
-                } else if (VM.DISK_MODELS.indexOf(zvol.model) === -1) {
+                } else if (disk_models.indexOf(zvol.model) === -1) {
                     callback(new Error('"' + zvol.model + '"'
-                        + ' is not a valid disk model. Valid are: '
-                        + VM.DISK_MODELS.join(',')));
+                        + ' is not a valid disk model for ' + brand + ' brand.'
+                        + ' Valid are: ' + disk_models.join(',')));
                     return;
                 }
             }
@@ -4662,6 +4670,9 @@ function checkPayloadProperties(payload, vmobj, log, callback)
         for (disk in payload.update_disks) {
             if (payload.update_disks.hasOwnProperty(disk)) {
                 zvol = payload.update_disks[disk];
+                disk_models = (brand == 'bhyve') ?
+                    VM.BHYVE_DISK_MODELS :
+                    VM.KVM_DISK_MODELS;
 
                 // Disks cannot have refreservation=auto on update.
                 // Only create.
@@ -4676,6 +4687,7 @@ function checkPayloadProperties(payload, vmobj, log, callback)
                         callback(new Error('invalid compression type for '
                             + 'disk, must be one of: '
                             + VM.COMPRESSION_TYPES.join(', ')));
+                        return;
                     }
                 }
 
@@ -4684,6 +4696,16 @@ function checkPayloadProperties(payload, vmobj, log, callback)
                         + 'after creation'));
                     return;
                 }
+
+                // Disk model must also be checked for update_disks
+                if (zvol.hasOwnProperty('model')) {
+                    if (disk_models.indexOf(zvol.model) === -1) {
+                        callback(new Error('"' + zvol.model + '"'
+                            + ' is not a valid disk model for ' + brand + ' brand.'
+                            + ' Valid are: ' + disk_models.join(',')));
+                        return;
+                    }
+                }
             }
         }
     }
diff --git a/src/vm/sbin/vmadm.js b/src/vm/sbin/vmadm.js
index f6043a54..5bdc513c 100755
--- a/src/vm/sbin/vmadm.js
+++ b/src/vm/sbin/vmadm.js
@@ -333,9 +333,10 @@ function parseStartArgs(args)
                 if (!model || !p || p.length === 0 || model.length === 0) {
                     usage('Parameter to ' + key + ' must be: path,model');
                 }
-                if (VM.DISK_MODELS.indexOf(model) === -1) {
+                // only check for KVM_DISK_MODELS (bhyve not yet supported)
+                if (VM.KVM_DISK_MODELS.indexOf(model) === -1) {
                     usage('Invalid model "' + model + '": model must be one '
-                        + 'of: ' + VM.DISK_MODELS.join(','));
+                        + 'of: ' + VM.KVM_DISK_MODELS.join(','));
                 }
                 if (!extra.disks) {
                     extra.disks = [];
