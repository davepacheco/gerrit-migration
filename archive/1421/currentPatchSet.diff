From 81ae8f16a016be05edea09b87210cae73dd220ff Mon Sep 17 00:00:00 2001
From: YangYong3 <yy1111.yang@samsung.com>
Date: Fri, 3 Feb 2017 17:39:14 +0900
Subject: [PATCH] joyent/node-triton#169 rbac CLI key, policy, role, user not
 working ..

---
 lib/do_rbac/do_key.js    |  44 +++++++++--------
 lib/do_rbac/do_policy.js |  85 +++++++++++++++++---------------
 lib/do_rbac/do_role.js   |  98 ++++++++++++++++++++-----------------
 lib/do_rbac/do_user.js   | 103 ++++++++++++++++++++-------------------
 4 files changed, 177 insertions(+), 153 deletions(-)

diff --git a/lib/do_rbac/do_key.js b/lib/do_rbac/do_key.js
index dbff62c..e4b149e 100644
--- a/lib/do_rbac/do_key.js
+++ b/lib/do_rbac/do_key.js
@@ -26,25 +26,29 @@ function _showUserKey(opts, cb) {
     assert.string(opts.userId, 'opts.userId');
     assert.string(opts.id, 'opts.id');
     assert.func(cb, 'cb');
-    var cli = opts.cli;
 
-    cli.tritonapi.cloudapi.getUserKey({
-        userId: opts.userId,
-        // Currently `cloudapi.getUserKey` isn't picky about the `name` being
-        // passed in as the `opts.fingerprint` arg.
-        fingerprint: opts.id
-    }, function onUserKey(err, userKey) {
-        if (err) {
-            cb(err);
-            return;
-        }
+    var tritonapi = opts.cli.tritonapi;
+    common.cliSetupTritonApi({cli: opts.cli}, function onSetup(setupErr) {
 
-        if (opts.json) {
-            console.log(JSON.stringify(userKey));
-        } else {
-            console.log(common.chomp(userKey.key));
-        }
-        cb();
+        tritonapi.cloudapi.getUserKey({
+            userId: opts.userId,
+            // Currently `cloudapi.getUserKey` isn't picky about
+            // the `name` being
+            // passed in as the `opts.fingerprint` arg.
+            fingerprint: opts.id
+        }, function onUserKey(err, userKey) {
+            if (err) {
+                cb(err);
+                return;
+            }
+
+            if (opts.json) {
+                console.log(JSON.stringify(userKey));
+            } else {
+                console.log(common.chomp(userKey.key));
+            }
+            cb();
+        });
     });
 }
 
@@ -61,7 +65,8 @@ function _deleteUserKeys(opts, cb) {
         return;
     }
 
-    vasync.pipeline({funcs: [
+    vasync.pipeline({arg: {cli: cli}, funcs: [
+        common.cliSetupTritonApi,
         function confirm(_, next) {
             if (opts.yes) {
                 return next();
@@ -120,7 +125,8 @@ function _addUserKey(opts, cb) {
     assert.func(cb, 'cb');
     var cli = opts.cli;
 
-    vasync.pipeline({arg: {}, funcs: [
+    vasync.pipeline({arg: {cli: cli}, funcs: [
+        common.cliSetupTritonApi,
         function gatherDataStdin(ctx, next) {
             if (opts.file !== '-') {
                 return next();
diff --git a/lib/do_rbac/do_policy.js b/lib/do_rbac/do_policy.js
index 3e6b278..80b27ab 100644
--- a/lib/do_rbac/do_policy.js
+++ b/lib/do_rbac/do_policy.js
@@ -37,34 +37,38 @@ function _showPolicy(opts, cb) {
     assert.object(opts.cli, 'opts.cli');
     assert.string(opts.id, 'opts.id');
     assert.func(cb, 'cb');
-    var cli = opts.cli;
 
-    cli.tritonapi.cloudapi.getPolicy({
-        id: opts.id
-    }, function onPolicy(err, policy) {
-        if (err) {
-            cb(err);
-            return;
-        }
+    var tritonapi = opts.cli.tritonapi;
+    common.cliSetupTritonApi({cli: opts.cli}, function onSetup(setupErr) {
 
-        if (opts.json) {
-            console.log(JSON.stringify(policy));
-        } else {
-            console.log('name: %s', policy.name);
-            delete policy.name;
-            var rules = policy.rules;
-            delete policy.rules;
-            Object.keys(policy).forEach(function (key) {
-                console.log('%s: %s', key, policy[key]);
-            });
-            // Do rules last because it is the sole multiline field. The
-            // rules can tend to be long, so we want to use multiline output.
-            console.log('rules:');
-            if (rules && rules.length) {
-                console.log('    ' + rules.join('\n    '));
+        tritonapi.cloudapi.getPolicy({
+            id: opts.id
+        }, function onPolicy(err, policy) {
+            if (err) {
+                cb(err);
+                return;
             }
-        }
-        cb();
+
+            if (opts.json) {
+                console.log(JSON.stringify(policy));
+            } else {
+                console.log('name: %s', policy.name);
+                delete policy.name;
+                var rules = policy.rules;
+                delete policy.rules;
+                Object.keys(policy).forEach(function (key) {
+                    console.log('%s: %s', key, policy[key]);
+                });
+                // Do rules last because it is the sole multiline field. The
+                // rules can tend to be long, so we want to use multiline
+                // output.
+                console.log('rules:');
+                if (rules && rules.length) {
+                    console.log('    ' + rules.join('\n    '));
+                }
+            }
+            cb();
+        });
     });
 }
 
@@ -203,19 +207,20 @@ function _editPolicy(opts, cb) {
         });
     }
 
+    common.cliSetupTritonApi({cli: cli}, function onSetup(setupErr) {
+        cli.tritonapi.cloudapi.getPolicy({
+            id: opts.id
+        }, function onPolicy(err, policy_) {
+            if (err) {
+                return cb(err);
+            }
 
-    cli.tritonapi.cloudapi.getPolicy({
-        id: opts.id
-    }, function onPolicy(err, policy_) {
-        if (err) {
-            return cb(err);
-        }
-
-        policy = policy_;
-        filename = format('%s-policy-%s.txt', cli.tritonapi.profile.account,
-            policy.name);
-        origText = _yamlishFromPolicy(policy);
-        editAttempt(origText);
+            policy = policy_;
+            filename = format('%s-policy-%s.txt', cli.tritonapi.profile.account,
+                policy.name);
+            origText = _yamlishFromPolicy(policy);
+            editAttempt(origText);
+        });
     });
 }
 
@@ -232,7 +237,8 @@ function _deletePolicies(opts, cb) {
         return;
     }
 
-    vasync.pipeline({funcs: [
+    vasync.pipeline({arg: {cli: cli}, funcs: [
+        common.cliSetupTritonApi,
         function confirm(_, next) {
             if (opts.yes) {
                 return next();
@@ -286,7 +292,8 @@ function _addPolicy(opts, cb) {
 
     var data;
 
-    vasync.pipeline({funcs: [
+    vasync.pipeline({arg: {cli: cli}, funcs: [
+        common.cliSetupTritonApi,
         function gatherDataStdin(_, next) {
             if (opts.file !== '-') {
                 return next();
diff --git a/lib/do_rbac/do_role.js b/lib/do_rbac/do_role.js
index 4fb56a7..30b68de 100644
--- a/lib/do_rbac/do_role.js
+++ b/lib/do_rbac/do_role.js
@@ -54,43 +54,45 @@ function _showRole(opts, cb) {
     assert.object(opts.cli, 'opts.cli');
     assert.string(opts.id, 'opts.id');
     assert.func(cb, 'cb');
-    var cli = opts.cli;
 
-    cli.tritonapi.cloudapi.getRole({id: opts.id}, function onRole(err, role) {
-        if (err) {
-            cb(err);
-            return;
-        }
+    var tritonapi = opts.cli.tritonapi;
+    common.cliSetupTritonApi({cli: opts.cli}, function onSetup(setupErr) {
+        tritonapi.cloudapi.getRole({id: opts.id}, function onRole(err, role) {
+            if (err) {
+                cb(err);
+                return;
+            }
 
-        if (opts.json) {
-            console.log(JSON.stringify(role));
-        } else {
-            var keys = Object.keys(role);
-            keys.sort(function cmpKeys(a, b) {
-                var idxA = SHOW_ORDER_FIELDS.indexOf(a);
-                var idxB = SHOW_ORDER_FIELDS.indexOf(b);
-                if (idxA === -1 && idxB === -1) {
-                    return 0;
-                } else if (idxA === -1) {
-                    return -1;
-                } else if (idxB === -1) {
-                    return 1;
-                } else if (idxA < idxB) {
-                    return -1;
-                } else if (idxA > idxB) {
-                    return 1;
-                }
-            });
+            if (opts.json) {
+                console.log(JSON.stringify(role));
+            } else {
+                var keys = Object.keys(role);
+                keys.sort(function cmpKeys(a, b) {
+                    var idxA = SHOW_ORDER_FIELDS.indexOf(a);
+                    var idxB = SHOW_ORDER_FIELDS.indexOf(b);
+                    if (idxA === -1 && idxB === -1) {
+                        return 0;
+                    } else if (idxA === -1) {
+                        return -1;
+                    } else if (idxB === -1) {
+                        return 1;
+                    } else if (idxA < idxB) {
+                        return -1;
+                    } else if (idxA > idxB) {
+                        return 1;
+                    }
+                });
 
-            keys.forEach(function (key) {
-                var val = role[key];
-                if (Array.isArray(val)) {
-                    val = val.join(', ');
-                }
-                console.log('%s: %s', key, val);
-            });
-        }
-        cb();
+                keys.forEach(function (key) {
+                    var val = role[key];
+                    if (Array.isArray(val)) {
+                        val = val.join(', ');
+                    }
+                    console.log('%s: %s', key, val);
+                });
+            }
+            cb();
+        });
     });
 }
 
@@ -201,17 +203,19 @@ function _editRole(opts, cb) {
         });
     }
 
+    common.cliSetupTritonApi({cli: cli}, function onSetup(setupErr) {
+        cli.tritonapi.cloudapi.getRole({id: opts.id},
+            function onRole(err, role_) {
+            if (err) {
+                return cb(err);
+            }
 
-    cli.tritonapi.cloudapi.getRole({id: opts.id}, function onRole(err, role_) {
-        if (err) {
-            return cb(err);
-        }
-
-        role = role_;
-        filename = format('%s-role-%s.txt', cli.tritonapi.profile.account,
-            role.name);
-        origText = _yamlishFromRole(role);
-        editAttempt(origText);
+            role = role_;
+            filename = format('%s-role-%s.txt', cli.tritonapi.profile.account,
+                role.name);
+            origText = _yamlishFromRole(role);
+            editAttempt(origText);
+        });
     });
 }
 
@@ -228,7 +232,8 @@ function _deleteRoles(opts, cb) {
         return;
     }
 
-    vasync.pipeline({funcs: [
+    vasync.pipeline({arg: {cli: opts.cli}, funcs: [
+        common.cliSetupTritonApi,
         function confirm(_, next) {
             if (opts.yes) {
                 return next();
@@ -282,7 +287,8 @@ function _addRole(opts, cb) {
 
     var data;
 
-    vasync.pipeline({funcs: [
+    vasync.pipeline({arg: {cli: opts.cli}, funcs: [
+        common.cliSetupTritonApi,
         function gatherDataStdin(_, next) {
             if (opts.file !== '-') {
                 return next();
diff --git a/lib/do_rbac/do_user.js b/lib/do_rbac/do_user.js
index b3a755a..3866f87 100644
--- a/lib/do_rbac/do_user.js
+++ b/lib/do_rbac/do_user.js
@@ -55,44 +55,46 @@ function _showUser(opts, cb) {
     assert.optionalBool(opts.roles, 'opts.roles');
     assert.optionalBool(opts.keys, 'opts.keys');
     assert.func(cb, 'cb');
-    var cli = opts.cli;
-
-    cli.tritonapi.getUser({
-        id: opts.id,
-        roles: opts.roles,
-        keys: opts.keys
-    }, function onUser(err, user) {
-        if (err) {
-            return cb(err);
-        }
 
-        if (opts.json) {
-            console.log(JSON.stringify(user));
-        } else {
-            var skip = {keys: true, roles: true, default_roles: true};
-            Object.keys(user).forEach(function (field) {
-                if (skip[field]) {
-                    return;
-                }
-                console.log('%s: %s', field, user[field]);
-            });
-            if (opts.roles) {
-                console.log('roles:');
-                user.roles.forEach(
-                    function (r) { console.log('    ' + r); });
-                console.log('default_roles:');
-                user.default_roles.forEach(
-                    function (r) { console.log('    ' + r); });
+    var tritonapi = opts.cli.tritonapi;
+    common.cliSetupTritonApi({cli: opts.cli}, function onSetup(setupErr) {
+        tritonapi.getUser({
+            id: opts.id,
+            roles: opts.roles,
+            keys: opts.keys
+        }, function onUser(err, user) {
+            if (err) {
+                return cb(err);
             }
-            if (opts.keys) {
-                console.log('keys:');
-                user.keys.forEach(function (key) {
-                    console.log('    %s%s', key.fingerprint,
-                        key.name ? format(' (%s)', key.name) : '');
+
+            if (opts.json) {
+                console.log(JSON.stringify(user));
+            } else {
+                var skip = {keys: true, roles: true, default_roles: true};
+                Object.keys(user).forEach(function (field) {
+                    if (skip[field]) {
+                        return;
+                    }
+                    console.log('%s: %s', field, user[field]);
                 });
+                if (opts.roles) {
+                    console.log('roles:');
+                    user.roles.forEach(
+                        function (r) { console.log('    ' + r); });
+                    console.log('default_roles:');
+                    user.default_roles.forEach(
+                        function (r) { console.log('    ' + r); });
+                }
+                if (opts.keys) {
+                    console.log('keys:');
+                    user.keys.forEach(function (key) {
+                        console.log('    %s%s', key.fingerprint,
+                            key.name ? format(' (%s)', key.name) : '');
+                    });
+                }
             }
-        }
-        cb();
+            cb();
+        });
     });
 }
 
@@ -193,20 +195,21 @@ function _editUser(opts, cb) {
         });
     }
 
+    common.cliSetupTritonApi({cli: cli}, function onSetup(setupErr) {
+        cli.tritonapi.getUser({
+            id: opts.id,
+            roles: opts.roles
+        }, function onUser(err, user_) {
+            if (err) {
+                return cb(err);
+            }
 
-    cli.tritonapi.getUser({
-        id: opts.id,
-        roles: opts.roles
-    }, function onUser(err, user_) {
-        if (err) {
-            return cb(err);
-        }
-
-        user = user_;
-        filename = format('%s-user-%s.txt', cli.tritonapi.profile.account,
-            user.login);
-        origText = _yamlishFromUser(user);
-        editAttempt(origText);
+            user = user_;
+            filename = format('%s-user-%s.txt', cli.tritonapi.profile.account,
+                user.login);
+            origText = _yamlishFromUser(user);
+            editAttempt(origText);
+        });
     });
 }
 
@@ -223,7 +226,8 @@ function _deleteUsers(opts, cb) {
         return;
     }
 
-    vasync.pipeline({funcs: [
+    vasync.pipeline({arg: {cli: opts.cli}, funcs: [
+        common.cliSetupTritonApi,
         function confirm(_, next) {
             if (opts.yes) {
                 return next();
@@ -277,7 +281,8 @@ function _addUser(opts, cb) {
 
     var data;
 
-    vasync.pipeline({funcs: [
+    vasync.pipeline({arg: {cli: opts.cli}, funcs: [
+        common.cliSetupTritonApi,
         function gatherDataStdin(_, next) {
             if (opts.file !== '-') {
                 return next();
-- 
2.21.0

