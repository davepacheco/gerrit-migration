From 13988fde5248fa4b7665315f6464498773a4048d Mon Sep 17 00:00:00 2001
From: Trent Mick <trentm@gmail.com>
Date: Thu, 1 Jun 2017 15:18:33 -0700
Subject: [PATCH] IMGAPI-628 imgapi-standalone-rotate-key Reviewed by: Josh
 Wilsdon <josh@wilsdon.ca>

---
 bin/imgapi-manta-setup              | 108 +++++++++----
 bin/imgapi-standalone-rotate-key    | 233 ++++++++++++++++++++++++++++
 boot/standalone/new-inst-key.sh     |  35 +++++
 boot/standalone/setup.sh            |  15 +-
 docs/operator-guide.md              |  44 ++++++
 tools/redeploy-staging-updatesjo.sh |   7 +-
 6 files changed, 409 insertions(+), 33 deletions(-)
 create mode 100755 bin/imgapi-standalone-rotate-key
 create mode 100755 boot/standalone/new-inst-key.sh

diff --git a/bin/imgapi-manta-setup b/bin/imgapi-manta-setup
index affb62f..e7843fd 100755
--- a/bin/imgapi-manta-setup
+++ b/bin/imgapi-manta-setup
@@ -83,6 +83,13 @@ var OPTIONS = [
         type: 'bool',
         help: 'Print this help and exit.'
     },
+    {
+        names: ['force', 'f'],
+        type: 'bool',
+        default: false,
+        help: 'Force re-creation of a new key, even if there is already one '
+            + 'setup. This can be useful for key rotation.'
+    },
     {
         names: ['remote', 'r'],
         type: 'bool',
@@ -320,41 +327,85 @@ function getSdcApp(config, callback) {
  *
  * ...
  * @param callback {Function} `function (err, key)`
+ *      where `key` is an object of the form returned by `generateKey`,
+ *      i.e. with "name", "priv", "pub" and "id" fields.
  */
-function ensureImgapiSapiServiceSetup(config, sdcApp, mantaUrl, mantaInsecure,
-        mantaRemote, callback) {
+function ensureImgapiSapiServiceSetup(args, callback) {
+    assert.object(args, 'args');
+    assert.object(args.config, 'args.config');
+    assert.object(args.sdcApp, 'args.sdcApp');
+    assert.string(args.mantaUrl, 'args.mantaUrl');
+    assert.bool(args.mantaInsecure, 'args.mantaInsecure');
+    assert.bool(args.mantaRemote, 'args.mantaRemote');
+    assert.bool(args.forceUpdate, 'args.forceUpdate');
+
+    var key;
+    var keyName = format('%s imgapi key',
+        args.sdcApp.metadata.datacenter_name);
     var sapi = new sdcClients.SAPI({
-        url: 'http://' + config.sapi_service,
+        url: 'http://' + args.config.sapi_service,
         log: log,
         agent: false
     });
+    var svc;
 
-    var svc, key;
     async.series([
         function (next) {
-            log.info('check whether the imgapi SAPI svc is setup for manta');
-            var searchOpts = {name: 'imgapi', application_uuid: sdcApp.uuid};
+            var searchOpts = {
+                name: 'imgapi',
+                application_uuid: args.sdcApp.uuid
+            };
             sapi.listServices(searchOpts, function (sErr, svcs) {
                 if (sErr)
                     return next(sErr);
                 svc = svcs[0];
-                if (!svc.metadata.IMGAPI_MANTA_URL ||
-                    !svc.metadata.IMGAPI_MANTA_USER ||
-                    !svc.metadata.IMGAPI_MANTA_INSECURE ||
-                    !svc.metadata.IMGAPI_MANTA_REMOTE ||
-                    !svc.metadata.IMGAPI_PUBLIC_KEY ||
-                    !svc.metadata.IMGAPI_PRIVATE_KEY ||
-                    !svc.metadata.IMGAPI_KEY_ID)
-                {
-                    return next();
+
+                if (args.forceUpdate) {
+                    log.info({forceUpdate: args.forceUpdate},
+                        'forcing key re-generation');
+                    next();
+                    return;
+                }
+
+                var expectedFields = [
+                    'IMGAPI_MANTA_URL',
+                    'IMGAPI_MANTA_USER',
+                    'IMGAPI_MANTA_INSECURE',
+                    'IMGAPI_MANTA_REMOTE',
+                    'IMGAPI_PUBLIC_KEY',
+                    'IMGAPI_PRIVATE_KEY',
+                    'IMGAPI_KEY_ID'
+                ];
+                var missingFields = [];
+                expectedFields.forEach(function (field) {
+                    if (!Object.prototype.hasOwnProperty.call(
+                        svc.metadata, field))
+                    {
+                        missingFields.append(field);
+                    }
+                });
+                if (missingFields.length > 0) {
+                    log.info({missingFields: missingFields},
+                        'SAPI imgapi svc is *not* fully setup for Manta: '
+                        + 'missing %d metadata fields', missingFields.length);
+                    next();
+                } else {
+                    log.info(
+                        {keyId: svc.metadata.IMGAPI_KEY_ID, keyName: keyName},
+                        'SAPI imgapi svc already has a key for use with '
+                        + 'Manta: skipping generating a new key');
+                    key = {
+                        name: keyName,
+                        pub: svc.metadata.IMGAPI_PUBLIC_KEY,
+                        priv: svc.metadata.IMGAPI_PRIVATE_KEY,
+                        id: svc.metadata.IMGAPI_KEY_ID
+                    };
+                    next(true); // signal to exit early, everything is good
                 }
-                next(true); // signal to exit early, everything is good
             });
         },
         function (next) {
-            log.info('generate a new key');
-            var keyName = format('%s imgapi key',
-                sdcApp.metadata.datacenter_name);
+            log.info({keyName: keyName}, 'generate a new key');
             generateKey(keyName, function (kErr, key_) {
                 if (kErr)
                     return next(kErr);
@@ -365,10 +416,10 @@ function ensureImgapiSapiServiceSetup(config, sdcApp, mantaUrl, mantaInsecure,
         },
         function (next) {
             var md = {
-                IMGAPI_MANTA_URL: mantaUrl,
-                IMGAPI_MANTA_USER: config.ufds_admin_login,
-                IMGAPI_MANTA_INSECURE: mantaInsecure,
-                IMGAPI_MANTA_REMOTE: mantaRemote,
+                IMGAPI_MANTA_URL: args.mantaUrl,
+                IMGAPI_MANTA_USER: args.config.ufds_admin_login,
+                IMGAPI_MANTA_INSECURE: args.mantaInsecure,
+                IMGAPI_MANTA_REMOTE: args.mantaRemote,
                 IMGAPI_PRIVATE_KEY: key.priv,
                 IMGAPI_PUBLIC_KEY: key.pub,
                 IMGAPI_KEY_ID: key.id
@@ -486,9 +537,14 @@ function main() {
         },
 
         function (next) {
-            ensureImgapiSapiServiceSetup(CONFIG, sdcApp, mantaUrl,
-                opts.insecure, opts.remote,
-                function (sErr, key_) {
+            ensureImgapiSapiServiceSetup({
+                config: CONFIG,
+                sdcApp: sdcApp,
+                mantaUrl: mantaUrl,
+                mantaInsecure: opts.insecure,
+                mantaRemote: opts.remote,
+                forceUpdate: opts.force
+            }, function (sErr, key_) {
                     key = key_;
                     next(sErr);
                 }
diff --git a/bin/imgapi-standalone-rotate-key b/bin/imgapi-standalone-rotate-key
new file mode 100755
index 0000000..979803e
--- /dev/null
+++ b/bin/imgapi-standalone-rotate-key
@@ -0,0 +1,233 @@
+#!/bin/bash
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+# Copyright 2017 Joyent, Inc.
+#
+
+#
+# Rotate the instance key for this standalone IMGAPI instance.
+# This is meant to be run from within the IMGAPI instance.
+#
+
+if [[ -n "$TRACE" ]]; then
+    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
+    set -o xtrace
+fi
+set -o errexit
+set -o pipefail
+
+
+#---- support stuff
+
+function usage () {
+    echo "Usage:"
+    echo "    imgapi-standalone-rotate-key [OPTIONS]"
+    echo ""
+    echo "Options:"
+    echo "    -h          Show this help and exit."
+    echo ""
+    echo "This command will guide through the process of rotating the"
+    echo "instance SSH key used by this standalone IMGAPI instance for"
+    echo "authenticating with Manta."
+    echo ""
+    echo "Note: An IMGAPI instance does not in general know how to talk to an"
+    echo "appropriate CloudAPI with which to add the new key. The script will"
+    echo "pause waiting for the operator to manually add the new pubkey."
+}
+
+function fatal {
+    echo "$0: fatal error: $*"
+    exit 1
+}
+
+function errexit {
+    [[ $1 -ne 0 ]] || exit 0
+    fatal "error exit status $1"
+}
+
+function imgapi_wait_until_running {
+    for i in {1..9}; do
+        sleep 0.5
+        if imgapi_is_running; then
+            break
+        fi
+    done
+    imgapi_is_running || fatal 'imgapi did not start'
+}
+
+function imgapi_is_running {
+    local response=$(curl -iSs -H accept:application/json \
+        localhost:8080/ping 2>/dev/null)
+    if [[ $(echo "$response" | json -qH ping) == "pong" ]]; then
+        return 0
+    else
+        return 1
+    fi
+}
+
+
+#---- mainline
+
+trap 'errexit $?' EXIT
+
+while getopts "h" opt
+do
+    case "$opt" in
+        h)
+            usage
+            exit 0
+            ;;
+        *)
+            usage
+            exit 1
+            ;;
+    esac
+done
+shift $((OPTIND - 1))
+
+
+configMode=$(node /opt/smartdc/imgapi/lib/config.js mode)
+[[ "$configMode" == "public" || "$configMode" == "private" ]] \
+    || fatal "this is not a standalone IMGAPI: config mode=$configMode"
+configManta=$(node /opt/smartdc/imgapi/lib/config.js manta)
+[[ -n "$configManta" ]] || fatal "this IMGAPI doesn't used manta"
+
+
+echo "This command will guide you through the process of rotating the"
+echo "instance SSH key used by this standalone IMGAPI instance for"
+echo "authenticating with Manta."
+echo ""
+printf "Do you want to continue? [y/N] "
+read answer
+echo ""
+if [[ "$answer" != "y" && "$answer" != "Y" ]]; then
+    echo "Aborting."
+    exit 0
+fi
+
+# 1. Create the new key
+echo "# Generating new key (in /data/imgapi/etc/newinstkey)"
+/opt/smartdc/boot/standalone/new-inst-key.sh
+
+newPubKeyPath=$(ls /data/imgapi/etc/newinstkey/imgapi-*.pub)
+keyId=$(ssh-keygen -E sha256 -lf $newPubKeyPath | awk '{print $2}')
+keyIdMd5=$(ssh-keygen -E md5 -lf $newPubKeyPath | awk '{print $2}' | cut -d: -f2-)
+keyBase=$(basename $newPubKeyPath .pub)
+newPrivKeyPath=/data/imgapi/etc/newinstkey/$keyBase
+
+# 2. Write pubkey to mdata so outside tooling can use it for setup.
+echo ""
+echo "# Writing new pubkey to metadata.instPubKey"
+mdata-put instPubKey < $newPubKeyPath
+
+# 3. Tell operator to update key, and wait for it to get through.
+mantaUrl=$(echo "$configManta" | json url)
+mantaUser=$(echo "$configManta" | json user)
+instAlias=$(mdata-get sdc:alias)
+echo ""
+echo "* * *"
+echo "You must now add the new key to the Manta user this IMGAPI is using:"
+echo "    Manta URL:    $mantaUrl"
+echo "    Manta user:   $mantaUser"
+echo "    Public key:   $newPubKeyPath"
+echo "    Key id:       $keyId"
+echo "    Key id (md5): $keyIdMd5"
+echo ""
+echo "If this Manta belongs to the same cloud as your the Triton CLI profile"
+echo "owning this IMGAPI instance, then the following should work to update"
+echo "the key:"
+echo "    triton inst get $instAlias | json metadata.instPubKey | triton key add -"
+echo ""
+printf "Press Enter to continue when you have updated the key..."
+read
+echo "* * *"
+
+echo ""
+echo "# Waiting up to 5 minutes for key to propagate for Manta access"
+export MANTA_URL=$mantaUrl
+export MANTA_USER=$mantaUser
+export MANTA_KEY_ID=$keyId
+if [[ "$(echo "$configManta" | json insecure)" == "true" ]]; then
+    export MANTA_TLS_INSECURE=1
+fi
+mantaRootDir=$(echo "$configManta" | json rootDir)
+ln -s $newPubKeyPath ~/.ssh/
+ln -s $newPrivKeyPath ~/.ssh/
+
+for i in $(seq 60); do
+    sleep 5
+    accessCheckStatus=$(minfo "$mantaRootDir" | head -1 | awk '{print $2}')
+    if [[ $accessCheckStatus == "200" ]]; then
+        echo "  [$(date '+%Y%m%dT%H%M%S')] can connect to Manta with new key"
+        break
+    elif [[ $accessCheckStatus == "403" ]]; then
+        echo "  [$(date '+%Y%m%dT%H%M%S')] cannot yet access Manta ($accessCheckStatus)"
+    else
+        fatal "error: unexpected response from minfo: $accessCheckStatus"
+    fi
+done
+if [[ $accessCheckStatus != "200" ]]; then
+    fatal "error: could not connect to Manta with the new key after ~5m"
+    exit 1
+fi
+
+echo "Waiting an additional 30s for all Manta web heads to get the new key"
+sleep 30
+
+# 4. Move the new key in place, update the IMGAPI config, and restart.
+echo ""
+echo "# Switching imgapi service to the new key"
+echo "Move new key into place (in /data/imgapi/etc and ~/.ssh)"
+mv $newPubKeyPath $newPrivKeyPath /data/imgapi/etc/
+chown nobody:nobody /data/imgapi/etc/$keyBase{,.pub}
+ln -sf /data/imgapi/etc/$keyBase ~/.ssh/
+ln -sf /data/imgapi/etc/$keyBase.pub ~/.ssh/
+rmdir /data/imgapi/etc/newinstkey
+
+echo "Update config (/data/imgapi/etc/imgapi.config.json)"
+mkdir -p /data/imgapi/etc/oldinstkeys
+cp /data/imgapi/etc/imgapi.config.json /data/imgapi/etc/oldinstkeys/
+json -If /data/imgapi/etc/imgapi.config.json \
+    -e "this.manta.key='/data/imgapi/etc/$keyBase'" \
+    -e "this.manta.keyId='$keyId'"
+chown nobody:nobody /data/imgapi/etc/imgapi.config.json
+
+echo "Moving old key to /data/imgapi/etc/oldinstkeys"
+oldPrivKeyPath=$(echo "$configManta" | json key)
+if [[ -n "$oldPrivKeyPath" ]]; then
+    if [[ -f $oldPrivKeyPath ]]; then
+        oldKeyIdMd5=$(ssh-keygen -E md5 -lf $oldPrivKeyPath | awk '{print $2}' | cut -d: -f2-)
+        [[ -n "$oldPrivKeyPath" ]] || fatal "no 'key' on config.manta"
+        mv -f $oldPrivKeyPath $oldPrivKeyPath.pub /data/imgapi/etc/oldinstkeys/
+    fi
+    rm -f ~/.ssh/$(basename $oldPrivKeyPath)*
+fi
+
+echo "Restarting imgapi service"
+svcState=$(svcs -H -o state imgapi)
+if [[ "$svcState" == "maintenance" ]]; then
+    svcadm clear imgapi
+else
+    svcadm disable -s imgapi
+    svcadm enable -s imgapi
+fi
+imgapi_wait_until_running
+
+echo ""
+echo "* * *"
+echo "IMGAPI key successfully rotated."
+echo ""
+echo "You may now remove old 'imgapi-*' key(s) from the Manta user:"
+echo "    Manta URL:    $mantaUrl"
+echo "    Manta user:   $mantaUser"
+if [[ -n "$oldKeyIdMd5" ]]; then
+    echo "    Key id (md5): $oldKeyIdMd5"
+    echo "For example, the following may work:"
+    echo "    triton key rm -y $oldKeyIdMd5"
+fi
+echo "* * *"
+
+exit 0
diff --git a/boot/standalone/new-inst-key.sh b/boot/standalone/new-inst-key.sh
new file mode 100755
index 0000000..b9aab92
--- /dev/null
+++ b/boot/standalone/new-inst-key.sh
@@ -0,0 +1,35 @@
+#!/usr/bin/bash
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+#
+# Copyright 2017 Joyent, Inc.
+#
+
+#
+# Generate a new instance key, and write it to /data/imgapi/etc/newinstkey
+#
+# This will also remove any imgapi-* files in that dir. I.e. the contract is
+# that after successful return, there will be a single key in that dir.
+#
+
+if [[ -n "$TRACE" ]]; then
+    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
+    set -o xtrace
+fi
+set -o errexit
+set -o pipefail
+
+
+keyType=ecdsa
+nodeName=imgapi-$(mdata-get sdc:alias)-$(zonename | cut -d- -f1)
+keyName=$nodeName-$(date -u '+%Y%m%dT%H%M%S')
+keyDir=/data/imgapi/etc/newinstkey
+
+mkdir -p $keyDir
+rm -rf $keyDir/imgapi-*
+ssh-keygen -t $keyType -b 256 -N "" \
+    -C "$keyName" -f $keyDir/$keyName.id_$keyType
diff --git a/boot/standalone/setup.sh b/boot/standalone/setup.sh
index 83e77ce..04d3186 100755
--- a/boot/standalone/setup.sh
+++ b/boot/standalone/setup.sh
@@ -62,11 +62,16 @@ if [[ ! -d /data/imgapi ]]; then
     mkdir -p /data/imgapi/etc
     [[ ! -f /data/imgapi/etc/imgapi-*.id_ecdsa ]] \
         || fatal "unexpected existing IMGAPI instance key files: /data/imgapi/etc/imgapi-*.id_ecdsa"
-    keyName=$NODENAME-$(date -u '+%Y%m%d')
-    ssh-keygen -t ecdsa -b 256 -N "" \
-        -C "$keyName" -f /data/imgapi/etc/$keyName.id_ecdsa
+
+    /opt/smartdc/boot/standalone/new-inst-key.sh
+    newPubKeyPath=$(ls /data/imgapi/etc/newinstkey/imgapi-*.pub)
+    keyBase=$(basename $newPubKeyPath .pub)
+    newPrivKeyPath=/data/imgapi/etc/newinstkey/$keyBase
+    mv $newPubKeyPath /data/imgapi/etc/
+    mv $newPrivKeyPath /data/imgapi/etc/
+
     # Write pubkey to mdata so outside tooling can use it for setup.
-    mdata-put instPubKey < /data/imgapi/etc/$keyName.id_ecdsa.pub
+    mdata-put instPubKey < /data/imgapi/etc/$keyBase.pub
 
     # Self-signed cert
     /opt/local/bin/openssl req -x509 -nodes -subj '/CN=*' -newkey rsa:2048 \
@@ -85,7 +90,7 @@ if [[ ! -d /data/imgapi ]]; then
     # imgapi SMF service runs as 'nobody'
     chown nobody:nobody /data/imgapi
     chown nobody:nobody /data/imgapi/etc
-    chown nobody:nobody /data/imgapi/etc/$keyName.id_ecdsa{,.pub}
+    chown nobody:nobody /data/imgapi/etc/$keyBase{,.pub}
     chown nobody:nobody /data/imgapi/etc/cert.pem
     chown nobody:nobody /data/imgapi/etc/imgapi.config.json
     chown nobody:nobody /data/imgapi/etc/authkeys
diff --git a/docs/operator-guide.md b/docs/operator-guide.md
index 6530fc7..4bc1502 100644
--- a/docs/operator-guide.md
+++ b/docs/operator-guide.md
@@ -94,6 +94,7 @@ When the 'config-agent' running in the imgapi zone picks up this change
 `"allowLocalCreateImageFromVm": true` (see [the Configuration
 section](#configuration) above).
 
+
 # Standalone Setup
 
 A standalone IMGAPI instance is just a regular instance. However two reasons
@@ -270,6 +271,7 @@ Then, even if your instance is recycled and replaced, DNS will still work.
 And when imgapi supports multiple instances (for HA), DNS will map to all your
 instances using the "myimages" cns tag.
 
+
 # Update
 
 DC-mode:
@@ -298,6 +300,48 @@ This will handle importing the identified 'imgapi' image to the DC, tweaking
 its permissions, and reprovisioning the instance to the new image.
 
 
+# Key rotation
+
+Both DC-mode and standalone IMGAPI instances use an SSH key to talk to Manta
+for file storage (if configured to use Manta). This section describes how
+to rotate that key.
+
+## Key rotation: DC-mode
+
+A DC-mode IMGAPI that is configured to use Manta is setup in one of two ways:
+
+1. with a local manta (in the same region), the 'admin' account, and using a key
+   generated by the setup script (`imgapi-manta-setup`); or
+
+2. with a possibly external manta, using a key provided to the setup script
+   (`imgapi-external-manta-setup`).
+
+In both cases the IMGAPI key can be rotated by re-running the script:
+
+    # 1.
+    # Note: Use the "--force" option to force re-generation of the key.
+    sdc-login -l imgapi
+    imgapi-manta-setup --force MANTA-URL | bunyan
+
+    # 2.
+    sdc-login -l imgapi
+    imgapi-external-manta-setup <manta-url> <manta-user> <path-to-new-priv-key> | bunyan
+
+
+## Key rotation: Standalone
+
+Login to the instance and run:
+
+    imgapi-standalone-rotate-key
+
+This will walk you through the process of rotating the key: A new key will
+be generated. You will need to manually add that key to the appropriate
+Manta user (in general a standalone IMGAPI instance doesn't know or have
+access to the appropriate CloudAPI on which to add a key). The script will
+wait until that key is available and then update the imgapi service as
+appropriate.
+
+
 # Health
 
 DC-mode:
diff --git a/tools/redeploy-staging-updatesjo.sh b/tools/redeploy-staging-updatesjo.sh
index 862c46a..72c6f6f 100755
--- a/tools/redeploy-staging-updatesjo.sh
+++ b/tools/redeploy-staging-updatesjo.sh
@@ -160,6 +160,9 @@ triton keys -H -o name \
 # picked up on first startup.
 echo ""
 echo "# Deploy authkeys"
+export MANTA_URL=$mantaUrl
+export MANTA_USER=$mantaUser
+export MANTA_KEY_ID=$profileKeyId
 mmkdir -p ~~/stor/$MBASEDIR/authkeys
 triton keys -A | mput ~~/stor/$MBASEDIR/authkeys/${profileAccount}.keys
 
@@ -202,8 +205,8 @@ triton inst get $ALIAS | json metadata.instPubKey | triton key add -
 # There currently isn't a good way to wait for a new key to make it through
 # Manta. Polling to check for a successful auth can pass on one request
 # and then fail later on another request if one hits separate Manta webapis.
-echo "Waiting for 2 minutes in hopes that Manta takes up the new key by then..."
-sleep 120
+echo "Waiting for 5 minutes in hopes that Manta takes up the new key by then..."
+sleep 600
 
 # Step 4 (from IMGAPI Operator Guide): imgapi-standalone-restore
 echo ""
-- 
2.21.0

