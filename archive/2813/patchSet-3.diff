From a6cbb1f9d0ad92903855c32dc69dece03e7e1008 Mon Sep 17 00:00:00 2001
From: Jan Wyszynski <jan.wyszynski@joyent.com>
Date: Wed, 18 Oct 2017 19:38:00 +0000
Subject: [PATCH] joyent/node-zkstream#25 add createWithEmptyParents client api

---
 lib/client.js      | 67 ++++++++++++++++++++++++++++++++++++++++++++++
 test/basic.test.js | 44 ++++++++++++++++++++++++++++++
 2 files changed, 111 insertions(+)

diff --git a/lib/client.js b/lib/client.js
index 5e50a44..b87fb54 100644
--- a/lib/client.js
+++ b/lib/client.js
@@ -355,6 +355,73 @@ ZKClient.prototype.create = function (path, data, options, cb) {
 	req.once('error', cb);
 };
 
+ZKClient.prototype.createWithEmptyParents = function (path, data, options, cb) {
+	mod_assert.string(path, 'path');
+	mod_assert.buffer(data, 'data');
+	mod_assert.optionalObject(options, 'options');
+	mod_assert.func(cb, 'callback');
+	if (options === undefined || options === null)
+		options = {};
+	mod_assert.optionalArrayOfObject(options.acl, 'options.acl');
+	mod_assert.optionalArrayOfString(options.flags, 'options.flags');
+
+	if (options.acl === undefined || options.acl === null) {
+		options.acl = [ {
+			id: { scheme: 'world', id: 'anyone' },
+			perms: ['read', 'write', 'create', 'delete', 'admin']
+		} ];
+	}
+
+	if (options.flags === undefined || options.flags === null) {
+		options.flags = [];
+	}
+
+	var conn = this.currentConnection();
+	if (conn === undefined || !conn.isInState('connected')) {
+		setImmediate(cb, new mod_errors.ZKNotConnectedError());
+		return;
+	}
+
+	var currentPath = '';
+	var nodes = path.split('/').slice(1);
+	var nullBuffer = new Buffer('null', 'ascii');
+	var count = 0;
+
+	var self = this;
+	mod_vasync.forEachPipeline({
+		func: function (node, next) {
+			currentPath = currentPath + '/' + node;
+			count++;
+			var last = (count === nodes.length);
+			var nodeData = (last) ? data : nullBuffer;
+
+			self.create(currentPath, nodeData, options,
+			    function (err, pktPath) {
+				if (!err || (!last && err &&
+				    err.code === 'NODE_EXISTS')) {
+				    mod_assert.ok(pktPath === currentPath,
+				        'unexpected path from create');
+				    if (last) {
+					next(null, pktPath);
+				    } else {
+					next();
+				    }
+				} else {
+				    next(err);
+				}
+			    });
+		},
+		inputs: nodes
+	}, function (err, results) {
+		if (err) {
+			cb(err);
+		} else {
+			cb(null, results.successes[
+				    results.successes.length - 1]);
+		}
+	});
+};
+
 ZKClient.prototype.set = function (path, data, version, cb) {
 	mod_assert.string(path, 'path');
 	mod_assert.buffer(data, 'data');
diff --git a/test/basic.test.js b/test/basic.test.js
index 7f35312..ca03e72 100644
--- a/test/basic.test.js
+++ b/test/basic.test.js
@@ -11,6 +11,7 @@ const mod_zk = require('./zkserver');
 const mod_zkc = require('../lib/index');
 const mod_net = require('net');
 const mod_bunyan = require('bunyan');
+const mod_vasync = require('vasync');
 
 var log = mod_bunyan.createLogger({
 	name: 'zkstream-test',
@@ -298,6 +299,49 @@ mod_tape.test('create a new node', function (t) {
 	});
 });
 
+mod_tape.test('create node with empty parents', function (t) {
+	var zkc = new mod_zkc.Client({
+	    log: log,
+	    address: '127.0.0.1',
+	    port: 2181
+	});
+
+	zkc.on('close', function () {
+	    t.end();
+	});
+
+	zkc.on('connect', function () {
+	    mod_vasync.pipeline({
+		    funcs: [
+			function (_, callback) {
+				var d = new Buffer('hi there', 'ascii');
+				zkc.createWithEmptyParents('/hi/there', d, {},
+				    function (err, path) {
+					t.strictEqual(path, '/hi/there');
+					callback(err);
+				    });
+			},
+			function (_, callback) {
+				zk.cli('get', '/hi', function (err, output) {
+				    t.strictEqual(output, 'null\n');
+				    callback(err);
+				});
+			},
+			function (_, callback) {
+				zk.cli('get', '/hi/there',
+				    function (err, output) {
+					t.strictEqual(output, 'hi there\n');
+					callback(err);
+				    });
+			}
+		    ]
+	    }, function (err, results) {
+		t.error(err);
+		zkc.close();
+	    });
+	});
+});
+
 mod_tape.test('create a large node', function (t) {
 	var zkc = new mod_zkc.Client({
 		log: log,
-- 
2.21.0

