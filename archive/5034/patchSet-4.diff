commit a9660f995a3bea8d05a69589febec7f6700c0ddc (refs/changes/34/5034/4)
Author: Jason King <jason.king@joyent.com>
Date:   2018-11-12T20:56:39+00:00 (11 months ago)
    
    OS-7345 Add support to mdb for anonymous/unnamed structs and unions.

diff --git a/usr/src/cmd/mdb/common/mdb/mdb_ctf.c b/usr/src/cmd/mdb/common/mdb/mdb_ctf.c
index 534c92f5dc..6dba6bd2ef 100644
--- a/usr/src/cmd/mdb/common/mdb/mdb_ctf.c
+++ b/usr/src/cmd/mdb/common/mdb/mdb_ctf.c
@@ -838,6 +838,7 @@ static int
 member_info_cb(const char *name, mdb_ctf_id_t id, ulong_t off, void *data)
 {
 	mbr_info_t *mbrp = data;
+	int kind, ret;
 
 	if (strcmp(name, mbrp->mbr_member) == 0) {
 		if (mbrp->mbr_offp != NULL)
@@ -848,7 +849,29 @@ member_info_cb(const char *name, mdb_ctf_id_t id, ulong_t off, void *data)
 		return (1);
 	}
 
-	return (0);
+	/*
+	 * C11 as well as earlier GNU extensions allow an embedded struct
+	 * or union to be unnamed as long as there are no unambiguous member
+	 * names.  If we encounter a SOU member with a 0-length name,
+	 * recurse into it and see if any of them match.
+	 */
+	if (strlen(name) != 0)
+		return (0);
+
+	kind = mdb_ctf_type_kind(id);
+	if (kind == CTF_ERR)
+		return (-1);
+	if (kind != CTF_K_STRUCT && kind != CTF_K_UNION)
+		return (0);
+
+	ret = mdb_ctf_member_iter(id, member_info_cb, mbrp);
+	if (ret == -1)
+		return (-1);
+	if (ret == 0)
+		return (0);
+
+	*(mbrp->mbr_offp) += off;
+	return (1);
 }
 
 int
@@ -858,6 +881,8 @@ mdb_ctf_member_info(mdb_ctf_id_t id, const char *member, ulong_t *offp,
 	mbr_info_t mbr;
 	int rc;
 
+	*offp = 0;
+
 	mbr.mbr_member = member;
 	mbr.mbr_offp = offp;
 	mbr.mbr_typep = typep;
diff --git a/usr/src/cmd/mdb/common/mdb/mdb_print.c b/usr/src/cmd/mdb/common/mdb/mdb_print.c
index fe74265b68..9ced4d71f1 100644
--- a/usr/src/cmd/mdb/common/mdb/mdb_print.c
+++ b/usr/src/cmd/mdb/common/mdb/mdb_print.c
@@ -25,7 +25,7 @@
 
 /*
  * Copyright (c) 2012, 2014 by Delphix. All rights reserved.
- * Copyright 2015 Joyent, Inc.
+ * Copyright 2018 Joyent, Inc.
  * Copyright (c) 2014 Nexenta Systems, Inc. All rights reserved.
  */
 
@@ -1698,9 +1698,16 @@ elt_print(const char *name, mdb_ctf_id_t id, mdb_ctf_id_t base,
 		}
 	}
 
+#define	SHOW_ANON(_pfx, _name) \
+	(strlen(_name) == 0 && ((_pfx) == NULL || strlen(_pfx) == 0))
+
 	if (depth != 0 ||
-	    ((pap->pa_flags & PA_SHOWNAME) && pap->pa_prefix != NULL))
-		mdb_printf("%s ", pap->pa_flags & PA_SHOWVAL ? " =" : "");
+	    ((pap->pa_flags & PA_SHOWNAME) && pap->pa_prefix != NULL)) {
+		mdb_printf("%s%s ",
+		    SHOW_ANON(pap->pa_prefix, name) ? "(anon)" : "",
+		    pap->pa_flags & PA_SHOWVAL ? " =" : "");
+	}
+#undef	SHOW_ANON
 
 	if (depth == 0 && pap->pa_prefix != NULL)
 		name = pap->pa_prefix;
@@ -2420,8 +2427,10 @@ cmd_print(uintptr_t addr, uint_t flags, int argc, const mdb_arg_t *argv)
 				kind = mdb_ctf_type_kind(rid);
 				if (last_deref && IS_SOU(kind)) {
 					char *end;
+					size_t len = strlen(member);
 					(void) mdb_snprintf(buf, sizeof (buf),
-					    "%s", member);
+					    "%s", (len == 0) ?
+					    "<anon>" : member);
 					end = strrchr(buf, '[');
 					*end = '\0';
 					pa.pa_suffix = "->";
