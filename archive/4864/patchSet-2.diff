From 1d63b207657ba08df4ee2da8949df3f617538f58 Mon Sep 17 00:00:00 2001
From: Marsell Kukuljevic <marsell@joyent.com>
Date: Mon, 24 Sep 2018 18:54:11 +1200
Subject: [PATCH] =?UTF-8?q?TRITON-786=20dapi=20needs=20to=20learn=20about?=
 =?UTF-8?q?=20"HVM=20API"=20from=20sysinfo=20Reviewed=20by:=20Mike=20Gerdt?=
 =?UTF-8?q?s=20<mike.gerdts@joyent.com>=20Reviewed=20by:=20Pedro=20Palaz?=
 =?UTF-8?q?=C3=B3n=20Candel=20<pedro@joyent.com>=20Approved=20by:=20Pedro?=
 =?UTF-8?q?=20Palaz=C3=B3n=20Candel=20<pedro@joyent.com>?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 lib/algorithms/hard-filter-hvm.js       | 12 +++--
 package.json                            |  2 +-
 test/algorithms/hard-filter-hvm.test.js | 61 +++++++++++++++++++++++++
 3 files changed, 70 insertions(+), 5 deletions(-)

diff --git a/lib/algorithms/hard-filter-hvm.js b/lib/algorithms/hard-filter-hvm.js
index 8b5bc72..fba981a 100644
--- a/lib/algorithms/hard-filter-hvm.js
+++ b/lib/algorithms/hard-filter-hvm.js
@@ -14,15 +14,13 @@
  *	* prevent brand=bhyve VMs from being provisioned to servers that don't
  *	  have 'Bhyve Capable' set to true in their sysinfo.
  *	* prevent brand=bhyve VMs from being provisioned to servers that have
- *	  existing kvm VMs.
- *	* prevent brand=kvm VMs from being provisioned to servers that have
- *	  existing bhyve VMs.
+ *	  existing kvm VMs (or vice versa) if 'HVM API' is not set.
  *	* prevent brand=bhyve VMs from being provisioned to servers that don't
  *	  support the requested number of vcpus.
  *
  * Note that calculate-ticketed-vms.js will have added in-flight VMs to the
  * server.vms arrays, so we will also refuse to provision bhyve to a system that
- * has an in-progress kvm provision and vice versa.
+ * has an in-progress kvm provision, and vice versa, if 'HVM API' is not set.
  */
 
 var assert = require('assert-plus');
@@ -98,6 +96,12 @@ function filterHVM(servers, opts, cb) {
 			}
 		}
 
+		// CNs with 'HVM API' are capable of running different HVMs
+		// at the same time without conflict
+		if (sysinfo['HVM API']) {
+			return (true);
+		}
+
 		for (var i = 0; i !== vmNames.length; i++) {
 			var vm = vms[vmNames[i]];
 
diff --git a/package.json b/package.json
index 7e4a972..932f70e 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
   "name": "dapi",
   "description": "SmartDataCenter Designation API",
-  "version": "8.3.0",
+  "version": "8.4.0",
   "author": "Joyent (joyent.com)",
   "private": true,
   "dependencies": {
diff --git a/test/algorithms/hard-filter-hvm.test.js b/test/algorithms/hard-filter-hvm.test.js
index 411ac8c..9b35453 100644
--- a/test/algorithms/hard-filter-hvm.test.js
+++ b/test/algorithms/hard-filter-hvm.test.js
@@ -155,6 +155,64 @@ test('filterHVM() with kvm and existing bhyve', function (t) {
 });
 
 
+test('filterHVM() with bhyve and existing kvm on HVM API CN', function (t) {
+	var servers = [ {
+		sysinfo: {
+			'Bhyve Capable': true,
+			'HVM API': true
+		},
+		uuid: 'f667e0fa-33db-48da-a5d0-9fe837ce93fc',
+		vms: [ {
+			brand: 'kvm',
+			uuid: '3ac37ee8-16a9-11e8-a114-9bd01a859c7f'
+		}]
+	}, {
+		sysinfo: { 'Bhyve Capable': true },
+		uuid: '4fe12d99-f013-4983-9e39-6e2f35b37aec',
+		vms: []
+	} ];
+
+	var expectServers = servers;
+	var expectReasons = {};
+	var opts = {
+		vm:  { brand: 'bhyve', ram: 512, vcpus: 1 },
+		pkg: {},
+		defaults: {}
+	};
+
+	checkFilter(t, servers, opts, expectServers, expectReasons);
+});
+
+
+test('filterHVM() with kvm and existing bhyve on HVM API CN', function (t) {
+	var servers = [ {
+		sysinfo: {
+			'Bhyve Capable': true,
+			'HVM API': true
+		},
+		uuid: 'f667e0fa-33db-48da-a5d0-9fe837ce93fc',
+		vms: [ {
+			brand: 'bhyve',
+			uuid: '3ac37ee8-16a9-11e8-a114-9bd01a859c7f'
+		} ]
+	}, {
+		sysinfo: { 'Bhyve Capable': true },
+		uuid: '4fe12d99-f013-4983-9e39-6e2f35b37aec',
+		vms: []
+	} ];
+
+	var expectServers = servers;
+	var expectReasons = {};
+	var opts = {
+		vm:  { brand: 'kvm', ram: 512 },
+		pkg: {},
+		defaults: {}
+	};
+
+	checkFilter(t, servers, opts, expectServers, expectReasons);
+});
+
+
 test('filterHVM() with no servers', function (t) {
 	var servers = [];
 
@@ -200,6 +258,7 @@ test('filterHVM() vcpus total less than bhyve -- over', function (t) {
 	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
+
 // Same as above but with 32 and it should succeed
 test('filterHVM() vcpus total less than bhyve -- under', function (t) {
 	var servers = [ {
@@ -224,6 +283,7 @@ test('filterHVM() vcpus total less than bhyve -- under', function (t) {
 	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
+
 // 0 is too few
 test('filterHVM() 0 vcpus bhyve', function (t) {
 	var servers = [ {
@@ -252,6 +312,7 @@ test('filterHVM() 0 vcpus bhyve', function (t) {
 	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
+
 // 1 is fine
 test('filterHVM() 1 vcpus bhyve', function (t) {
 	var servers = [ {
-- 
2.21.0

