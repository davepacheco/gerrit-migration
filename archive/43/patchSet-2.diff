commit 1af1a1532ee311e1fddfe0d6e1a01eff65ce539f (refs/changes/43/43/2)
Author: Pedro P. Candel <pedro@joyent.com>
Date:   2016-07-11T14:38:35+02:00 (3 years, 3 months ago)
    
    TOOLS-1336: sdcadm should also update USB keys
    Reviewed by: Joshua M. Clulow <jmc@joyent.com>

diff --git a/lib/cli/do_update_gz_tools.js b/lib/cli/do_update_gz_tools.js
index 00c2819..41b51a0 100644
--- a/lib/cli/do_update_gz_tools.js
+++ b/lib/cli/do_update_gz_tools.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016 Joyent, Inc.
  */
 
 var errors = require('../errors');
@@ -79,7 +79,7 @@ do_update_gz_tools.options = [
         'default': 5,
         help: 'Number of concurrent servers downloading cn_tools file or ' +
             'being updated simultaneously. Default: 5',
-        helpArg: 'N'
+        helpArg: 'CONCURRENCY'
     }
 ];
 do_update_gz_tools.help = (
diff --git a/lib/common.js b/lib/common.js
index f2ffa52..aadc2b3 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -1576,6 +1576,34 @@ function unmountUsbKey(log, cb) {
     });
 }
 
+function copyFile(src, dst, cb) {
+    assert.string(src, 'src');
+    assert.string(dst, 'dst');
+    assert.func(cb, 'cb');
+
+    function onErr(err) {
+        return cb(new errors.InternalError({
+            message: format('Error copying file %s to %s', src, dst),
+            cause: err
+        }));
+    }
+
+    var readStream = fs.createReadStream(src);
+    var writeStream = fs.createWriteStream(dst);
+
+    readStream.once('error', onErr);
+    writeStream.once('error', onErr);
+
+    writeStream.on('open', function () {
+        readStream.pipe(writeStream);
+    });
+
+    writeStream.once('finish', function () {
+        cb();
+        return;
+    });
+}
+
 //---- exports
 
 module.exports = {
@@ -1610,6 +1638,7 @@ module.exports = {
     urDiscovery: urDiscovery,
     isUsbKeyMounted: isUsbKeyMounted,
     mountUsbKey: mountUsbKey,
-    unmountUsbKey: unmountUsbKey
+    unmountUsbKey: unmountUsbKey,
+    copyFile: copyFile
 };
 // vim: set softtabstop=4 shiftwidth=4:
diff --git a/lib/sdcadm.js b/lib/sdcadm.js
index 68dd3ae..e64ae40 100644
--- a/lib/sdcadm.js
+++ b/lib/sdcadm.js
@@ -22,6 +22,7 @@ var fs = require('fs');
 var http  = require('http');
 var https = require('https');
 var path = require('path');
+var net = require('net');
 var crypto = require('crypto');
 var mkdirp = require('mkdirp');
 var once = require('once');
@@ -2179,25 +2180,21 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
                 common.execFilePlus({argv: argv, log: self.log}, next);
             },
 
-            // REVIEW: Note that /usbkey/scripts/update_cn_tools behaviour is
-            // to left all these backup files around. Do we want to cleanup
-            // such files or is it OK to keep them, given they're not in the
-            // USB key but into cache dir?
             function backupCNToolsFile(_, next) {
                 if (!fs.existsSync('/usbkey/extra/joysetup/cn_tools.tar.gz')) {
                     next();
                     return;
                 }
-                // Keep same format used by /usbkey/scripts/update_cn_tools
-                var cnToolsTimestamp = new Date().toISOString().
-                    replace(/[\-|:|T]/g, '').split('.')[0];
-                var argv = [
-                    'mv',
-                    '/usbkey/extra/joysetup/cn_tools.tar.gz',
-                    '/usbkey/extra/joysetup/cn_tools.' + cnToolsTimestamp +
-                        '.tar.gz'
-                ];
-                common.execFilePlus({argv: argv, log: self.log}, next);
+                var cnToolsTimestamp = new Date().toISOString();
+                fs.rename('/usbkey/extra/joysetup/cn_tools.tar.gz',
+                      '/usbkey/extra/joysetup/cn_tools.' + cnToolsTimestamp +
+                      '.tar.gz', function (err) {
+                          if (err) {
+                              return next(new errors.InternalError(err));
+                          }
+                          next();
+                          return;
+                      });
             },
 
             function removeScriptsDir(_, next) {
@@ -2227,12 +2224,10 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
             },
 
             function copyCnToolsToUSBKey(_, next) {
-                var argv = [
-                    'cp',
+                common.copyFile(
                     tmpToolsDir + '/cn_tools.tar.gz',
-                    '/usbkey/extra/joysetup/cn_tools.tar.gz'
-                ];
-                common.execFilePlus({argv: argv, log: self.log}, next);
+                    '/usbkey/extra/joysetup/cn_tools.tar.gz',
+                    next);
             },
 
             function copyDefaultDirToUsbKey(_, next) {
@@ -2314,7 +2309,8 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
     }
 
     var context = {
-        urconn: null
+        urconn: null,
+        serversToUpdate: null
     };
 
     vasync.pipeline({arg: context, funcs: [
@@ -2469,13 +2465,15 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
         },
 
        /*
-        * cn_tools and USB keys update across CNs
+        * Deploy updated compute node tools throughout the data center,
+        * and update boot files on the USB key of machines which have one.
         * Check for Ur availability first, as we cannot proceed without
         * it:
         */
         function urDiscoveryGetReady(ctx, next) {
             if (justDownload) {
-                return next();
+                next();
+                return;
             }
 
             self.getUrConnection(function (err, urconn) {
@@ -2498,51 +2496,69 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
 
         function findServersToUpdate(ctx, next) {
             if (justDownload) {
-                return next();
+                next();
+                return;
             }
             progress('Finding servers to update');
-            // Do we want to update all the servers or just setup ones?
+            /*
+             * The compute node tools are installed into the ZFS pool, which is
+             * created during compute node setup.  As such, this process does
+             * not currently apply to compute nodes that have not yet been set
+             * up.
+             */
             self.cnapi.listServers({
                 setup: true
             }, function (err, servers) {
                 if (err) {
-                    return next(new errors.SDCClientError(err, 'cnapi'));
+                    next(new errors.SDCClientError(err, 'cnapi'));
+                    return;
+                }
+                if (!ctx.serversToUpdate) {
+                    ctx.serversToUpdate = servers;
                 }
-                ctx.serversToUpdate = servers;
                 next();
             });
         },
 
         function urDiscovery(ctx, next) {
             if (justDownload) {
-                return next();
+                next();
+                return;
             }
 
             common.urDiscovery({
                 sdcadm: self,
                 progress: progress,
                 nodes: ctx.serversToUpdate.map(
-                    function (s) { return s.uuid; }),
+                    function (s) {
+                        return s.uuid;
+                    }),
                 urconn: ctx.urconn
             }, function (err, urAvailServers) {
                 if (err) {
-                    return next(err);
+                    next(err);
+                    return;
                 }
                 ctx.urServersToUpdate = urAvailServers;
-                return next();
+                next();
+                return;
             });
         },
 
         function updateCNTools(ctx, next) {
             if (justDownload) {
-                return next();
+                next();
+                return;
             }
 
             progress('Starting cn_tools update on %d servers',
                 ctx.urServersToUpdate.length);
 
+            assert.ok(net.isIPv4(self.config.assets_admin_ip),
+                'self.config.assets_admin_ip IPv4');
+
             var tools_url = format('http://%s/extra/joysetup/cn_tools.tar.gz',
-                    self.config.assets_admin_ip);
+                self.config.assets_admin_ip);
 
             var downloadAndExtractCmd = [
                 '',
@@ -2551,18 +2567,22 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
                 '',
                 'if ! /usr/bin/curl -sSf "${TOOLS_URL}" -o ' +
                     '"${TOOLS_FILE}"; then',
-                '    rm -f "${TOOLS_FILE}"',
+                '    /usr/bin/rm -f "${TOOLS_FILE}"',
                 '    echo "failed to download tools tarball"',
                 '    exit 1',
                 'fi',
                 '',
-                'mkdir -p /opt/smartdc',
+                'if ! /usr/bin/mkdir -p /opt/smartdc; then',
+                '    echo "failed to create /opt/smartdc"',
+                '    exit 1',
+                'fi',
+                '',
                 'if ! /usr/bin/tar xzof "${TOOLS_FILE}" -C /opt/smartdc; then',
-                '    rm -f "${TOOLS_FILE}"',
+                '    /usr/bin/rm -f "${TOOLS_FILE}"',
                 '    echo "failed to extract tools tarball"',
                 '    exit 2',
                 'fi',
-                'rm -f "${TOOLS_FILE}"',
+                '/usr/bin/rm -f "${TOOLS_FILE}"',
                 '',
                 'exit 0',
                 ''
@@ -2570,8 +2590,9 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
 
             var updateUSBKeyCmd = [
                 '',
-                '/opt/smartdc/bin/sdc-usbkey update --ignore-missing',
-                'if [[ "$?" -ne "0" ]]; then',
+                '',
+                'if ! /opt/smartdc/bin/sdc-usbkey update --ignore-missing; ' +
+                    'then',
                 '   exit $?',
                 'fi',
                 '',
@@ -2584,12 +2605,12 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
                 inputs: [
                     {
                         str: downloadAndExtractCmd,
-                        progbarName: 'Download and extract cn_tools',
+                        progbarName: 'Update compute node tools',
                         timeout: 10 * 60 * 1000
                     },
                     {
                         str: updateUSBKeyCmd,
-                        progbarName: 'Update USBKey',
+                        progbarName: 'Update USB key contents',
                         timeout: 10 * 60 * 1000
                     }
                 ],
@@ -2615,14 +2636,16 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
                         queueOpts.progbar = bar;
                         bar.advance(0); // Draw initial progbar at 0.
                     }
-                    self.log.trace(
-                        {command: cmd.str, concurrency: options.rate},
-                        'runUrQueue');
+                    self.log.trace({
+                        command: cmd.str,
+                        concurrency: options.concurrency
+                    }, 'runUrQueue');
 
                     var rq = ur.runQueue(queueOpts, function (err, results) {
                         if (err) {
-                            return nextCmd(new errors.UpdateError(
+                            nextCmd(new errors.UpdateError(
                                 err, 'unexpected runQueue error'));
+                            return;
                         }
 
                         var errs = [];
@@ -2644,7 +2667,11 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
                     });
 
                     rq.on('success', function onSuccess(server, result) {
-                        // A non-zero exit from the command is a "success".
+                      /*
+                       * The "success" event means that the process was
+                       * successfully started and ran to completion, but we
+                       * still need to check for a non-zero exit status.
+                       */
                         if (result.exit_status !== 0) {
                             var errmsg = format(
                                 '%s failed on server %s (%s): %j',
