From ee47647ab1e94b9c7fa5bb3a264d989e889066bd Mon Sep 17 00:00:00 2001
From: "Pedro P. Candel" <pedro@joyent.com>
Date: Fri, 8 Jul 2016 18:16:41 +0200
Subject: [PATCH] TOOLS-1336: sdcadm should also update USB keys Reviewed by:
 Joshua M. Clulow <jmc@joyent.com>

---
 lib/cli/do_update_gz_tools.js |  13 +-
 lib/common.js                 |  31 +++-
 lib/sdcadm.js                 | 276 +++++++++++++++++++++++++++++++++-
 3 files changed, 313 insertions(+), 7 deletions(-)

diff --git a/lib/cli/do_update_gz_tools.js b/lib/cli/do_update_gz_tools.js
index 4bdcb61..41b51a0 100644
--- a/lib/cli/do_update_gz_tools.js
+++ b/lib/cli/do_update_gz_tools.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2016 Joyent, Inc.
  */
 
 var errors = require('../errors');
@@ -47,7 +47,8 @@ function do_update_gz_tools(subcmd, opts, args, cb) {
         image: opts.latest ? 'latest' : args[0],
         progress: progress,
         justDownload: opts.just_download,
-        forceReinstall: opts.force_reinstall
+        forceReinstall: opts.force_reinstall,
+        concurrency: opts.concurrency
     }, finish);
 
 }
@@ -71,6 +72,14 @@ do_update_gz_tools.options = [
         names: ['just-download'],
         type: 'bool',
         help: 'Download the GZ Tools installer for later usage.'
+    },
+    {
+        names: ['concurrency', 'j'],
+        type: 'integer',
+        'default': 5,
+        help: 'Number of concurrent servers downloading cn_tools file or ' +
+            'being updated simultaneously. Default: 5',
+        helpArg: 'CONCURRENCY'
     }
 ];
 do_update_gz_tools.help = (
diff --git a/lib/common.js b/lib/common.js
index 8bbc00c..b2af177 100644
--- a/lib/common.js
+++ b/lib/common.js
@@ -1565,6 +1565,34 @@ function unmountUsbKey(log, cb) {
     });
 }
 
+function copyFile(src, dst, cb) {
+    assert.string(src, 'src');
+    assert.string(dst, 'dst');
+    assert.func(cb, 'cb');
+
+    function onErr(err) {
+        return cb(new errors.InternalError({
+            message: format('Error copying file %s to %s', src, dst),
+            cause: err
+        }));
+    }
+
+    var readStream = fs.createReadStream(src);
+    var writeStream = fs.createWriteStream(dst);
+
+    readStream.once('error', onErr);
+    writeStream.once('error', onErr);
+
+    writeStream.on('open', function () {
+        readStream.pipe(writeStream);
+    });
+
+    writeStream.once('finish', function () {
+        cb();
+        return;
+    });
+}
+
 //---- exports
 
 module.exports = {
@@ -1598,6 +1626,7 @@ module.exports = {
     urDiscovery: urDiscovery,
     isUsbKeyMounted: isUsbKeyMounted,
     mountUsbKey: mountUsbKey,
-    unmountUsbKey: unmountUsbKey
+    unmountUsbKey: unmountUsbKey,
+    copyFile: copyFile
 };
 // vim: set softtabstop=4 shiftwidth=4:
diff --git a/lib/sdcadm.js b/lib/sdcadm.js
index f2fda51..267f3b2 100644
--- a/lib/sdcadm.js
+++ b/lib/sdcadm.js
@@ -21,6 +21,7 @@ var fs = require('fs');
 var http  = require('http');
 var https = require('https');
 var path = require('path');
+var net = require('net');
 var crypto = require('crypto');
 var mkdirp = require('mkdirp');
 var sdcClients = require('sdc-clients');
@@ -2177,6 +2178,23 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
                 common.execFilePlus({argv: argv, log: self.log}, next);
             },
 
+            function backupCNToolsFile(_, next) {
+                if (!fs.existsSync('/usbkey/extra/joysetup/cn_tools.tar.gz')) {
+                    next();
+                    return;
+                }
+                var cnToolsTimestamp = new Date().toISOString();
+                fs.rename('/usbkey/extra/joysetup/cn_tools.tar.gz',
+                      '/usbkey/extra/joysetup/cn_tools.' + cnToolsTimestamp +
+                      '.tar.gz', function (err) {
+                          if (err) {
+                              return next(new errors.InternalError(err));
+                          }
+                          next();
+                          return;
+                      });
+            },
+
             function removeScriptsDir(_, next) {
                 var argv = [
                     'rm', '-rf',
@@ -2203,6 +2221,13 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
                 common.execFilePlus({argv: argv, log: self.log}, next);
             },
 
+            function copyCnToolsToUSBKey(_, next) {
+                common.copyFile(
+                    tmpToolsDir + '/cn_tools.tar.gz',
+                    '/usbkey/extra/joysetup/cn_tools.tar.gz',
+                    next);
+            },
+
             function copyDefaultDirToUsbKey(_, next) {
                 var cmd = ['cp', tmpToolsDir + '/default/*',
                     '/mnt/usbkey/default'];
@@ -2281,7 +2306,12 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
         });
     }
 
-    vasync.pipeline({funcs: [
+    var context = {
+        urconn: null,
+        serversToUpdate: null
+    };
+
+    vasync.pipeline({arg: context, funcs: [
         function getChannelIfNeeded(_, next) {
             self.getDefaultChannel(function (err, channel) {
                 // Will not fail the whole operation due to channel not found
@@ -2335,6 +2365,7 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
 
             });
         },
+
         function ensureSdcInstance(_, next) {
             var filters = {
                 state: 'active',
@@ -2353,6 +2384,7 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
                 return next();
             });
         },
+
         function saveHistory(_, next) {
             if (justDownload) {
                 return next();
@@ -2374,6 +2406,7 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
                 return next();
             });
         },
+
         function downloadTarball(_, next) {
             if (filepath) {
                 progress('Using gz-tools tarball file %s', filepath);
@@ -2394,6 +2427,7 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
                 }
             }
         },
+
         function decompressTarball(_, next) {
             if (justDownload) {
                 deleteOnFinish = false;
@@ -2413,24 +2447,257 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
         function validateTarballContents(_, next) {
             validateTarballFiles(next);
         },
+
         function (_, next) {
             if (justDownload) {
                 return next();
             }
             updateSdcFiles(next);
         },
+
         function (_, next) {
             if (justDownload) {
                 return next();
             }
             updateScripts(next);
         },
-        function (_, next) {
+
+       /*
+        * Deploy updated compute node tools throughout the data center,
+        * and update boot files on the USB key of machines which have one.
+        * Check for Ur availability first, as we cannot proceed without
+        * it:
+        */
+        function urDiscoveryGetReady(ctx, next) {
             if (justDownload) {
-                return next();
+                next();
+                return;
+            }
+
+            self.getUrConnection(function (err, urconn) {
+                if (err) {
+                    self.log.debug({
+                        err: err
+                    }, 'ur error');
+                    next(new errors.InternalError({
+                        cause: err,
+                        message: 'ur not available (check RabbitMQ)'
+                    }));
+                    return;
+                }
+
+                self.log.debug('ur connected');
+                ctx.urconn = urconn;
+                next();
+            });
+        },
+
+        function findServersToUpdate(ctx, next) {
+            if (justDownload) {
+                next();
+                return;
+            }
+            progress('Finding servers to update');
+            /*
+             * The compute node tools are installed into the ZFS pool, which is
+             * created during compute node setup.  As such, this process does
+             * not currently apply to compute nodes that have not yet been set
+             * up.
+             */
+            self.cnapi.listServers({
+                setup: true
+            }, function (err, servers) {
+                if (err) {
+                    next(new errors.SDCClientError(err, 'cnapi'));
+                    return;
+                }
+                if (!ctx.serversToUpdate) {
+                    ctx.serversToUpdate = servers;
+                }
+                next();
+            });
+        },
+
+        function urDiscovery(ctx, next) {
+            if (justDownload) {
+                next();
+                return;
             }
-            updateCnTools(next);
+
+            common.urDiscovery({
+                sdcadm: self,
+                progress: progress,
+                nodes: ctx.serversToUpdate.map(
+                    function (s) {
+                        return s.uuid;
+                    }),
+                urconn: ctx.urconn
+            }, function (err, urAvailServers) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+                ctx.urServersToUpdate = urAvailServers;
+                next();
+                return;
+            });
+        },
+
+        function updateCNTools(ctx, next) {
+            if (justDownload) {
+                next();
+                return;
+            }
+
+            progress('Starting cn_tools update on %d servers',
+                ctx.urServersToUpdate.length);
+
+            assert.ok(net.isIPv4(self.config.assets_admin_ip),
+                'self.config.assets_admin_ip IPv4');
+
+            var tools_url = format('http://%s/extra/joysetup/cn_tools.tar.gz',
+                self.config.assets_admin_ip);
+
+            var downloadAndExtractCmd = [
+                '',
+                'TOOLS_URL="' + tools_url + '"',
+                'TOOLS_FILE="/tmp/cn_tools.$$.tar.gz"',
+                '',
+                'if ! /usr/bin/curl -sSf "${TOOLS_URL}" -o ' +
+                    '"${TOOLS_FILE}"; then',
+                '    /usr/bin/rm -f "${TOOLS_FILE}"',
+                '    echo "failed to download tools tarball"',
+                '    exit 1',
+                'fi',
+                '',
+                'if ! /usr/bin/mkdir -p /opt/smartdc; then',
+                '    echo "failed to create /opt/smartdc"',
+                '    exit 1',
+                'fi',
+                '',
+                'if ! /usr/bin/tar xzof "${TOOLS_FILE}" -C /opt/smartdc; then',
+                '    /usr/bin/rm -f "${TOOLS_FILE}"',
+                '    echo "failed to extract tools tarball"',
+                '    exit 2',
+                'fi',
+                '/usr/bin/rm -f "${TOOLS_FILE}"',
+                '',
+                'exit 0',
+                ''
+            ].join('\n');
+
+            var updateUSBKeyCmd = [
+                '',
+                '',
+                'if ! /opt/smartdc/bin/sdc-usbkey update --ignore-missing; ' +
+                    'then',
+                '   exit $?',
+                'fi',
+                '',
+                'exit 0',
+                ''
+            ].join('\n');
+
+
+            vasync.forEachPipeline({
+                inputs: [
+                    {
+                        str: downloadAndExtractCmd,
+                        progbarName: 'Update compute node tools',
+                        timeout: 10 * 60 * 1000
+                    },
+                    {
+                        str: updateUSBKeyCmd,
+                        progbarName: 'Update USB key contents',
+                        timeout: 10 * 60 * 1000
+                    }
+                ],
+                func: function runUrQueue(cmd, nextCmd) {
+                    assert.object(ctx.urconn, 'ctx.urconn');
+                    var queueOpts = {
+                        sdcadm: self,
+                        urConnection: ctx.urconn,
+                        log: self.log,
+                        progress: progress,
+                        command: cmd.str,
+                        concurrency: options.concurrency,
+                        timeout: cmd.timeout
+                    };
+
+                    var bar;
+                    if (process.stderr.isTTY) {
+                        bar = new ProgressBar({
+                            size: ctx.urServersToUpdate.length,
+                            bytes: false,
+                            filename: cmd.progbarName
+                        });
+                        queueOpts.progbar = bar;
+                        bar.advance(0); // Draw initial progbar at 0.
+                    }
+                    self.log.trace({
+                        command: cmd.str,
+                        concurrency: options.concurrency
+                    }, 'runUrQueue');
+
+                    var rq = ur.runQueue(queueOpts, function (err, results) {
+                        if (err) {
+                            nextCmd(new errors.UpdateError(
+                                err, 'unexpected runQueue error'));
+                            return;
+                        }
+
+                        var errs = [];
+                        results.forEach(function (r) {
+                            if (r.error || r.result.exit_status !== 0) {
+                                errs.push(new errors.UpdateError(format(
+                                    '%s failed on server %s (%s): %j',
+                                    cmd.progbarName, r.uuid, r.hostname,
+                                    r.error || r.result)));
+                            }
+                        });
+                        if (errs.length === 1) {
+                            nextCmd(errs[0]);
+                        } else if (errs.length > 1) {
+                            nextCmd(new errors.MultiError(errs));
+                        } else {
+                            nextCmd();
+                        }
+                    });
+
+                    rq.on('success', function onSuccess(server, result) {
+                      /*
+                       * The "success" event means that the process was
+                       * successfully started and ran to completion, but we
+                       * still need to check for a non-zero exit status.
+                       */
+                        if (result.exit_status !== 0) {
+                            var errmsg = format(
+                                '%s failed on server %s (%s): %j',
+                                cmd.progbarName, server.uuid,
+                                server.hostname, result);
+                            if (cmd.logFile) {
+                                errmsg += ' (log file on server: ' +
+                                    cmd.logFile + ')';
+                            }
+                            if (bar) {
+                                bar.log(errmsg);
+                            } else {
+                                console.log(errmsg);
+                            }
+                        }
+                    });
+
+                    rq.start();
+                    ctx.urServersToUpdate.forEach(function (us) {
+                        rq.add_server(us);
+                    });
+                    rq.close();
+                }
+            }, function doneCmds(err, _) {
+                next(err);
+            });
         },
+
         function (_, next) {
             if (deleteOnFinish) {
                 cleanup(next);
@@ -2438,6 +2705,7 @@ SdcAdm.prototype.updateGzTools = function updateGzTools(options, callback) {
                 next();
             }
         }
+
     ]}, function (err) {
         if (justDownload) {
             callback(err);
-- 
2.21.0

