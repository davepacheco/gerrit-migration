commit 655b478e95133b7e0b1aa30abeecce630a81b2f7
Author: Russell Brown <russell.brown@joyent.com>
Date:   2019-03-29T15:12:41+00:00 (6 months ago)
    
    MANTA-3959 muskie should spread GET load to sharks evenly

diff --git a/lib/obj.js b/lib/obj.js
index 7d82bb9..f32b1f7 100644
--- a/lib/obj.js
+++ b/lib/obj.js
@@ -896,7 +896,9 @@ function streamFromSharks(req, res, next) {
         }
     });
 
-    req.metadata.sharks.forEach(function (s) {
+    var shuffledSharks = utils.shuffle(req.metadata.sharks);
+
+    shuffledSharks.forEach(function (s) {
         queue.push(sharkClient.getClient({
             connectTimeout: req.sharkConfig.connectTimeout,
             log: req.log,
diff --git a/lib/picker.js b/lib/picker.js
index 30db397..20359fb 100644
--- a/lib/picker.js
+++ b/lib/picker.js
@@ -49,6 +49,7 @@
 
 var EventEmitter = require('events').EventEmitter;
 var util = require('util');
+var utils = require('./utils');
 
 var assert = require('assert-plus');
 var jsprim = require('jsprim');
@@ -324,19 +325,6 @@ function random(min, max, skip) {
 }
 
 
-// Fisher-Yates shuffle - courtesy of http://bost.ocks.org/mike/shuffle/
-function shuffle(array) {
-    var m = array.length, t, i;
-    while (m) {
-        i = Math.floor(Math.random() * m--);
-        t = array[m];
-        array[m] = array[i];
-        array[i] = t;
-    }
-    return (array);
-}
-
-
 /**
  * Modified binary-search. We're looking for the point in the set at which all
  * servers have at least the requested amount of space.  Logically you would
@@ -528,7 +516,7 @@ Picker.prototype.choose = function choose(opts, cb) {
         return;
     }
 
-    dcs = shuffle(dcs);
+    dcs = utils.shuffle(dcs);
 
     /*
      * Pick a random shark from the next DC in the round robin ordering.  If it
diff --git a/lib/utils.js b/lib/utils.js
index 434ac7e..7802230 100644
--- a/lib/utils.js
+++ b/lib/utils.js
@@ -53,30 +53,23 @@ function shallowCopy(obj) {
     return (copy);
 }
 
-
+// Fisher-Yates shuffle - courtesy of http://bost.ocks.org/mike/shuffle/
 function shuffle(array) {
-    var current;
-    var tmp;
-    var top = array.length;
-
-    if (top) {
-        while (--top) {
-            current = Math.floor(Math.random() * (top + 1));
-            tmp = array[current];
-            array[current] = array[top];
-            array[top] = tmp;
-        }
+    var m = array.length, t, i;
+    while (m) {
+        i = Math.floor(Math.random() * m--);
+        t = array[m];
+        array[m] = array[i];
+        array[i] = t;
     }
-
     return (array);
 }
 
 
-
 ///--- Exports
 
 module.exports = {
     interleave: interleave,
     shallowCopy: shallowCopy,
     shuffle: shuffle
-};
\ No newline at end of file
+};
diff --git a/package.json b/package.json
index 3e07661..f152cc4 100644
--- a/package.json
+++ b/package.json
@@ -53,6 +53,7 @@
         "node-uuid": "1.4.1",
         "forkexec": "^1.0.0",
         "smartdc-auth": "^2.5.7"
+        "jsverify": "^0.8.4"
     },
     "scripts": {
         "start": "./build/node/bin/node ./main.js",
diff --git a/test/shuffle.test.js b/test/shuffle.test.js
new file mode 100644
index 0000000..35e6691
--- /dev/null
+++ b/test/shuffle.test.js
@@ -0,0 +1,49 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2019, Joyent, Inc.
+ */
+
+var mod_util = require('../lib/utils.js');
+var jsc = require('jsverify');
+
+///--- Constants
+
+///--- Tests
+
+/**
+ * shuffleTest is a property test. jsverify generates 100 random
+ * arrays, and checks that the property defined always holds. The
+ * property this tests is that the mod_utils.shuffle function does not
+ * add or remove elements from an array. It does not check that
+ * shuffle actually shuffles, only that the contents of the original
+ * array all remain present when shuffle.
+ */
+exports.shuffleTest = function (t) {
+    var propRes =
+        jsc.checkForall(jsc.nearray(jsc.nat), function propShuff(arr) {
+            var prevLength = arr.length;
+            // NOTE: copy the array so we can compare the original to the
+            // shuffled, as shuffle shuffles in place
+            var shuffled = mod_util.shuffle(arr.slice());
+
+            if (shuffled.length === prevLength) {
+                shuffled.sort();
+                arr.sort();
+                return (arr.reduce(function elementsEqual(acc, e, idx) {
+                    return (acc && shuffled[idx] === e);
+                }, true));
+            } else {
+                return (false);
+            }
+        });
+
+    // use equals, as propRes is a report object on property failure,
+    // but it's contents are logged by jsverify
+    t.ok(propRes === true, 'Property:: shuffle maintains arr contents');
+    t.done();
+};
