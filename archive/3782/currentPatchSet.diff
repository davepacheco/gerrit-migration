From 40d0fc2f058d922e05fa7a619528d8771dcb5004 Mon Sep 17 00:00:00 2001
From: dyep49 <dyep49@gmail.com>
Date: Thu, 12 Apr 2018 15:49:09 -0700
Subject: [PATCH] =?UTF-8?q?WORKFLOW-222=20artedi=20metrics=20for=20job=20t?=
 =?UTF-8?q?imes=20Reviewed=20by:=20Pedro=20Palaz=C3=B3n=20Candel=20<pedro@?=
 =?UTF-8?q?joyent.com>?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 lib/api.js          |  53 +++++++++++++++-----
 lib/runner.js       | 115 +++++++++++++++++++++++++++++++++++++++-----
 package.json        |  11 +++--
 test/api.test.js    |   8 +--
 test/runner.test.js |   8 +--
 5 files changed, 158 insertions(+), 37 deletions(-)

diff --git a/lib/api.js b/lib/api.js
index ac1e5d6..b01a862 100644
--- a/lib/api.js
+++ b/lib/api.js
@@ -1,6 +1,7 @@
 // Copyright 2014 Pedro P. Candel <kusorbox@gmail.com> All rights reserved.
-// Copyright (c) 2017, Joyent, Inc.
+// Copyright (c) 2018, Joyent, Inc.
 
+var assert = require('assert-plus');
 var restify = require('restify');
 var util = require('util');
 var uuid = require('uuid');
@@ -11,20 +12,13 @@ var trace_event = require('trace-event');
 var vm = require('vm');
 var Logger = require('bunyan');
 var Factory = require('../lib/index').Factory;
+var createMetricsManager = require('triton-metrics').createMetricsManager;
 
 
 var API = module.exports = function (opts) {
-    if (typeof (opts) !== 'object') {
-        throw new TypeError('opts (Object) required');
-    }
-
-    if (typeof (opts.backend) !== 'object') {
-        throw new TypeError('opts.backend (Object) required');
-    }
-
-    if (typeof (opts.api) !== 'object') {
-        throw new TypeError('opts.api (Object) required');
-    }
+    assert.object(opts, 'opts');
+    assert.object(opts.backend, 'opts.backend');
+    assert.object(opts.api, 'opts.api');
 
     var log;
 
@@ -56,7 +50,33 @@ var API = module.exports = function (opts) {
     }
 
     opts.api.log = log;
+
+    if (opts.metrics) {
+        assert.string(opts.metrics.adminIp, 'opts.metrics.adminIp');
+        assert.string(opts.metrics.datacenterName,
+            'opts.metrics.datacenterName');
+        assert.string(opts.metrics.instanceUuid, 'opts.metrics.instanceUuid');
+        assert.string(opts.metrics.serverUuid, 'opts.metrics.serverUuid');
+        assert.string(opts.metrics.serviceName, 'opts.metrics.serviceName');
+
+        var metricsManager = createMetricsManager({
+            address: opts.metrics.adminIp,
+            log: log.child({ component: 'metrics' }),
+            port: opts.metrics.port || 8882,
+            restify: restify,
+            staticLabels: {
+                datacenter: opts.metrics.datacenterName,
+                instance: opts.metrics.instanceUuid,
+                server: opts.metrics.serverUuid,
+                service: opts.metrics.serviceName
+            }
+        });
+        metricsManager.createRestifyMetrics();
+        opts.backend.opts.metricsManager = metricsManager;
+    }
+
     var server = restify.createServer(opts.api);
+
     var Backend = require(opts.backend.module);
     opts.backend.opts.log = log;
     var backend = Backend(opts.backend.opts);
@@ -198,6 +218,11 @@ var API = module.exports = function (opts) {
         })(req, res, route, err);
     });
 
+    if (metricsManager) {
+        server.on('after', metricsManager.collectRestifyMetrics
+            .bind(metricsManager));
+    }
+
     // Define handlers:
     function listWorkflows(req, res, next) {
         backend.getWorkflows(req.params, function (err, workflows) {
@@ -761,6 +786,10 @@ var API = module.exports = function (opts) {
                 log.info('API backend initialized');
             });
 
+            if (metricsManager) {
+                metricsManager.listen(function () {});
+            }
+
             return server.listen(port_or_path, function () {
                 log.info('%s listening at %s', server.name, server.url);
                 return onInit();
diff --git a/lib/runner.js b/lib/runner.js
index 5af7590..ae23c67 100644
--- a/lib/runner.js
+++ b/lib/runner.js
@@ -1,5 +1,5 @@
 // Copyright 2013 Pedro P. Candel <kusorbox@gmail.com> All rights reserved.
-// Copyright (c) 2017, Joyent, Inc.
+// Copyright (c) 2018, Joyent, Inc.
 
 var assert = require('assert-plus');
 var util = require('util');
@@ -12,6 +12,8 @@ var WorkflowJobRunner = require('./job-runner');
 var Factory = require('../lib/index').Factory;
 var exists = fs.exists || path.exists;
 var trace_event = require('trace-event');
+var createMetricsManager = require('triton-metrics').createMetricsManager;
+var restify = require('restify');
 
 // - opts - configuration options:
 //    - identifier: Unique identifier for this runner.
@@ -26,17 +28,9 @@ var trace_event = require('trace-event');
 //               By default, only the global timeouts are passed to the tasks
 //               sandbox.
 var WorkflowRunner = module.exports = function (opts) {
-    if (typeof (opts) !== 'object') {
-        throw new TypeError('opts (Object) required');
-    }
-
-    if (typeof (opts.backend) !== 'object') {
-        throw new TypeError('opts.backend (Object) required');
-    }
-
-    if (typeof (opts.dtrace) !== 'object') {
-        throw new TypeError('opts.dtrace (Object) required');
-    }
+    assert.object(opts, 'opts');
+    assert.object(opts.backend, 'opts.backend');
+    assert.object(opts.dtrace, 'opts.dtrace');
 
     if (typeof (opts.runner) !== 'object') {
         opts.runner = {};
@@ -103,6 +97,103 @@ var WorkflowRunner = module.exports = function (opts) {
         log = bunyan.createLogger(opts.logger);
     }
 
+    if (opts.metrics) {
+        assert.string(opts.metrics.adminIp, 'opts.metrics.adminIp');
+        assert.string(opts.metrics.datacenterName,
+            'opts.metrics.datacenterName');
+        assert.string(opts.metrics.instanceUuid, 'opts.metrics.instanceUuid');
+        assert.string(opts.metrics.serverUuid, 'opts.metrics.serverUuid');
+        assert.string(opts.metrics.serviceName, 'opts.metrics.serviceName');
+
+        var metricsManager = createMetricsManager({
+            address: opts.metrics.adminIp,
+            log: log.child({ component: 'metrics' }),
+            port: opts.metrics.port || 8881,
+            restify: restify,
+            staticLabels: {
+                datacenter: opts.metrics.datacenterName,
+                instance: opts.metrics.instanceUuid,
+                server: opts.metrics.serverUuid,
+                service: opts.metrics.serviceName
+            }
+        });
+
+        var metricJobCounter = metricsManager.collector.counter({
+            name: 'wf_jobs_total',
+            help: 'count of Workflow jobs completed'
+        });
+
+        var metricJobTimeHistogram = metricsManager.collector.histogram({
+            name: 'wfjob_duration_seconds',
+            help: 'total time to complete a Workflow job'
+        });
+
+        var metricJobOverheadTimeHistogram = metricsManager
+            .collector.histogram({
+            name: 'wf_job_overhead_seconds',
+            help: 'total overhead time for a Workflow job'
+        });
+
+        var collectJobMetrics = function (job) {
+            var labels = {
+                name: job.name,
+                execution: job.execution
+            };
+
+            metricJobCounter.increment(labels);
+
+            function calculateDuration(job) {
+                var durationSeconds;
+                if (job.chain_results.length) {
+                    var lastTask = job.
+                        chain_results[job.chain_results.length - 1];
+                    var endMs = new Date(lastTask.finished_at).getTime();
+                    var startMs = new Date(job.created_at).getTime();
+                    durationSeconds = (endMs - startMs) / 1000;
+                } else {
+                    durationSeconds = job.elapsed;
+                }
+
+                return durationSeconds;
+            }
+
+            // Sum the time between job creation and job start and the time
+            // between tasks
+            function calculateOverhead(job) {
+                var jobCreated = new Date(job.created_at).getTime();
+                var firstJobStarted = new Date(job.chain_results[0].started_at)
+                    .getTime();
+                var startOverhead = (firstJobStarted - jobCreated) / 1000;
+                var overheadSeconds = job.chain_results.reduce(
+                    function sumOverhead(total, result, idx, chainResults) {
+                    var nextTask = chainResults[idx + 1];
+                    if (nextTask) {
+                        var nextTaskStartMs = new Date(nextTask.started_at)
+                            .getTime();
+                        var currentTaskEndMs = new Date(result.finished_at)
+                            .getTime();
+                        total = (nextTaskStartMs - currentTaskEndMs) / 1000
+                            + total;
+                    }
+
+                    return total;
+                }, startOverhead);
+
+                return overheadSeconds;
+            }
+
+            metricJobTimeHistogram.observe(calculateDuration(job), labels);
+            metricJobOverheadTimeHistogram.
+                observe(calculateOverhead(job), labels);
+        };
+
+        metricsManager.createMetrics('jobMetrics', collectJobMetrics);
+
+        metricsManager.listen(function () {});
+        opts.runner.metricsManager = metricsManager;
+        opts.backend.opts.metricsManager = metricsManager;
+    }
+
     opts.backend.log = log;
     var backend = Backend(opts.backend.opts);
 
diff --git a/package.json b/package.json
index 1b4069c..7544fa7 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,7 @@
 {
     "name": "wf",
     "description": "Tasks Workflows orchestration API and runners",
-    "version": "1.1.0",
+    "version": "1.2.0",
     "repository": {
         "type": "git",
         "url": "git://github.com/kusor/node-workflow.git"
@@ -24,14 +24,15 @@
     "main": "lib/index.js",
     "dependencies": {
         "assert-plus": "1.0.0",
-        "uuid": "3.0.1",
-        "bunyan": "1.8.1",
-        "vasync": "1.6.4",
         "backoff": "1.2.0",
+        "bunyan": "1.8.1",
         "clone": "0.1.6",
         "restify": "4.1.1",
         "sigyan": "0.2.0",
-        "trace-event": "1.3.0"
+        "trace-event": "1.3.0",
+        "triton-metrics": "0.1.1",
+        "uuid": "3.0.1",
+        "vasync": "1.6.4"
     },
     "scripts": {
         "test": "./node_modules/.bin/tap ./test/*.test.js"
diff --git a/test/api.test.js b/test/api.test.js
index d4a2485..166ec5e 100644
--- a/test/api.test.js
+++ b/test/api.test.js
@@ -1,5 +1,5 @@
 // Copyright 2012 Pedro P. Candel <kusorbox@gmail.com>. All rights reserved.
-// Copyright (c) 2017, Joyent, Inc.
+// Copyright (c) 2018, Joyent, Inc.
 
 var test = require('tap').test,
     uuid = require('uuid'),
@@ -35,7 +35,7 @@ var REQ_ID = uuid();
 test('throws on missing opts', function (t) {
     t.throws(function () {
         return API();
-    }, new TypeError('opts (Object) required'));
+    }, 'The "options" argument must be of type object');
     t.end();
 });
 
@@ -43,7 +43,7 @@ test('throws on missing opts', function (t) {
 test('throws on missing backend', function (t) {
     t.throws(function () {
         return API(config);
-    }, new TypeError('opts.backend (Object) required'));
+    }, 'The "options.backend" argument must be of type object');
     t.end();
 });
 
@@ -53,7 +53,7 @@ test('throws on missing opts.api', function (t) {
 
     t.throws(function () {
         return API(config);
-    }, new TypeError('opts.api (Object) required'));
+    }, 'The "options.api" argument must be of type object');
     t.end();
 });
 
diff --git a/test/runner.test.js b/test/runner.test.js
index f8af832..f3381f8 100644
--- a/test/runner.test.js
+++ b/test/runner.test.js
@@ -1,5 +1,5 @@
 // Copyright 2012 Pedro P. Candel <kusorbox@gmail.com>. All rights reserved.
-// Copyright (c) 2017, Joyent, Inc.
+// Copyright (c) 2018, Joyent, Inc.
 
 var util = require('util');
 var path = require('path');
@@ -75,7 +75,7 @@ var DTRACE = createDTrace('workflow');
 test('throws on missing opts', function (t) {
     t.throws(function () {
         return WorkflowRunner();
-    }, new TypeError('opts (Object) required'));
+    }, 'The "opts" argument must be of type object');
     t.end();
 });
 
@@ -83,7 +83,7 @@ test('throws on missing opts', function (t) {
 test('throws on missing backend', function (t) {
     t.throws(function () {
         return WorkflowRunner(config);
-    }, new TypeError('opts.backend (Object) required'));
+    }, 'The "opts.backend" argument must be of type object');
     t.end();
 });
 
@@ -92,7 +92,7 @@ test('throws on missing dtrace', function (t) {
     config = helper.config();
     t.throws(function () {
         return WorkflowRunner(config);
-    }, new TypeError('opts.dtrace (Object) required'));
+    }, 'The "opts.dtrace" argument must be of type object');
     t.end();
 });
 
-- 
2.21.0

