From e6f5c3938d130c88c55ff91ec3d912765cd77847 Mon Sep 17 00:00:00 2001
From: Trent Mick <trentm@gmail.com>
Date: Wed, 13 Mar 2019 11:51:14 -0700
Subject: [PATCH] TRITON-884 remove cloud analytics (ca) from Triton Reviewed
 by: Marsell Kukuljevic <marsell@joyent.com> Approved by: Marsell Kukuljevic
 <marsell@joyent.com>

---
 CHANGES.md                    |   6 +
 README.md                     |   2 +-
 bin/sdc-createinstrumentation |  77 --------
 bin/sdc-deleteinstrumentation |  57 ------
 bin/sdc-describeanalytics     |  47 -----
 bin/sdc-getinstrumentation    |  61 -------
 bin/sdc-listinstrumentations  |  46 -----
 lib/cli_common.js             |   8 -
 lib/cloudapi.js               | 327 +---------------------------------
 package.json                  |   4 +-
 10 files changed, 12 insertions(+), 623 deletions(-)
 delete mode 100755 bin/sdc-createinstrumentation
 delete mode 100755 bin/sdc-deleteinstrumentation
 delete mode 100755 bin/sdc-describeanalytics
 delete mode 100755 bin/sdc-getinstrumentation
 delete mode 100755 bin/sdc-listinstrumentations

diff --git a/CHANGES.md b/CHANGES.md
index 4e45984..f46b874 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -1,5 +1,11 @@
 # node-smartdc Changelog
 
+## 9.0.0
+
+- [Backwad incompatible] TRITON-884 - Drop support for Cloud Analytics.
+  Cloud Analytics has been removed from Triton. See
+  [TRITON-884](https://smartos.org/bugview/TRITON-884) for details.
+
 ## 8.1.0
 
 - PUBAPI-1219 - add --cns-enable and --cns-disable options to
diff --git a/README.md b/README.md
index 96cc793..34d893b 100644
--- a/README.md
+++ b/README.md
@@ -150,7 +150,7 @@ Once you've played around and are done, you can delete this machine.
     $ sdc-getmachine f8f995da-086f-e8f5-c062-992139432c4f
     Object is Gone (410)
 
-There's a lot more you can do, like manage snapshots, analytics, keys, tags,
+There's a lot more you can do, like manage snapshots, keys, tags,
 etc. For the *Joyent* cloud, you can read more at <https://docs.joyent.com>.
 
 
diff --git a/bin/sdc-createinstrumentation b/bin/sdc-createinstrumentation
deleted file mode 100755
index a2d37db..0000000
--- a/bin/sdc-createinstrumentation
+++ /dev/null
@@ -1,77 +0,0 @@
-#!/usr/bin/env node
-// -*- mode: js -*-
-// vim: set filetype=javascript :
-// Copyright 2013 Joyent, Inc.  All rights reserved.
-
-var url = require('url');
-
-var common = require('../lib/cli_common');
-
-
-
-// --- Globals
-
-var Options = {
-    'account': String,
-    'api-version': String,
-    'clone': Number,
-    'debug': Boolean,
-    'decomposition': String,
-    'help': Boolean,
-    'keyId': String,
-    'module': String,
-    'predicate': String,
-    'stat': String,
-    'url': url,
-    'version': Boolean,
-    'verbose': Boolean,
-    'user': String,
-    'role': String
-};
-
-var ShortOptions = {
-    'a': ['--account'],
-    'c': ['--clone'],
-    'd': ['--debug'],
-    'h': ['--help'],
-    '?': ['--help'],
-    'k': ['--keyId'],
-    'm': ['--module'],
-    'n': ['--decomposition'],
-    'p': ['--predicate'],
-    's': ['--stat'],
-    'u': ['--url'],
-    'v': ['--verbose'],
-    'A': ['--user']
-};
-
-var usageStr = common.buildUsageString(Options);
-usageStr += common.buildDetailedUsageString(Options);
-
-// --- Mainline
-
-common.parseArguments(Options, ShortOptions, function (parsed) {
-    var opts = {};
-    if (parsed.module) {
-        opts.module = parsed.module;
-    }
-
-    if (parsed.stat) {
-        opts.stat = parsed.stat;
-    }
-
-    if (parsed.decomposition) {
-        opts.decomposition = parsed.decomposition;
-    }
-
-    if (parsed.predicate) {
-        opts.predicate = parsed.predicate;
-    }
-
-    if (typeof (parsed.clone) !== 'undefined') {
-        opts.clone = parsed.clone;
-    }
-
-    var client = common.newClient(parsed);
-    client.createInstrumentation(opts, common.callback);
-}, usageStr);
diff --git a/bin/sdc-deleteinstrumentation b/bin/sdc-deleteinstrumentation
deleted file mode 100755
index 63ef281..0000000
--- a/bin/sdc-deleteinstrumentation
+++ /dev/null
@@ -1,57 +0,0 @@
-#!/usr/bin/env node
-// -*- mode: js -*-
-// vim: set filetype=javascript :
-// Copyright 2013 Joyent, Inc.  All rights reserved.
-
-var url = require('url');
-
-var common = require('../lib/cli_common');
-
-
-
-// --- Globals
-
-var Options = {
-    'account': String,
-    'api-version': String,
-    'debug': Boolean,
-    'help': Boolean,
-    'keyId': String,
-    'url': url,
-    'version': Boolean,
-    'verbose': Boolean,
-    'user': String,
-    'role': String
-};
-
-var ShortOptions = {
-    'a': ['--account'],
-    'd': ['--debug'],
-    'h': ['--help'],
-    '?': ['--help'],
-    'k': ['--keyId'],
-    'u': ['--url'],
-    'v': ['--verbose'],
-    'A': ['--user']
-};
-
-var usageStr = common.buildUsageString(Options) + ' instrumentation_id';
-usageStr += common.buildDetailedUsageString(Options);
-
-
-// --- Mainline
-
-common.parseArguments(Options, ShortOptions, function (parsed) {
-    if (parsed.argv.remain.length < 1) {
-        common.usage(usageStr, 1, 'instrumentation required');
-    }
-
-
-    var client = common.newClient(parsed);
-
-    parsed.argv.remain.forEach(function (inst) {
-        var id = parseInt(inst, 10);
-        client.deleteInstrumentation(id, common.callback);
-    });
-
-}, usageStr);
diff --git a/bin/sdc-describeanalytics b/bin/sdc-describeanalytics
deleted file mode 100755
index 9be064e..0000000
--- a/bin/sdc-describeanalytics
+++ /dev/null
@@ -1,47 +0,0 @@
-#!/usr/bin/env node
-// -*- mode: js -*-
-// vim: set filetype=javascript :
-// Copyright 2013 Joyent, Inc.  All rights reserved.
-
-var url = require('url');
-
-var common = require('../lib/cli_common');
-
-
-
-// --- Globals
-
-var Options = {
-    'account': String,
-    'api-version': String,
-    'debug': Boolean,
-    'help': Boolean,
-    'keyId': String,
-    'url': url,
-    'version': Boolean,
-    'verbose': Boolean,
-    'user': String,
-    'role': String
-};
-
-var ShortOptions = {
-    'a': ['--account'],
-    'd': ['--debug'],
-    'h': ['--help'],
-    '?': ['--help'],
-    'k': ['--keyId'],
-    'u': ['--url'],
-    'v': ['--verbose'],
-    'A': ['--user']
-};
-
-
-var usageStr = common.buildUsageString(Options);
-usageStr += common.buildDetailedUsageString(Options);
-
-// --- Mainline
-
-common.parseArguments(Options, ShortOptions, function (parsed) {
-    var client = common.newClient(parsed);
-    client.describeAnalytics(common.callback);
-}, usageStr);
diff --git a/bin/sdc-getinstrumentation b/bin/sdc-getinstrumentation
deleted file mode 100755
index f156617..0000000
--- a/bin/sdc-getinstrumentation
+++ /dev/null
@@ -1,61 +0,0 @@
-#!/usr/bin/env node
-// -*- mode: js -*-
-// vim: set filetype=javascript :
-// Copyright 2013 Joyent, Inc.  All rights reserved.
-
-var url = require('url');
-
-var common = require('../lib/cli_common');
-
-
-
-// --- Globals
-
-var Options = {
-    'account': String,
-    'api-version': String,
-    'debug': Boolean,
-    'help': Boolean,
-    'keyId': String,
-    'value': Boolean,
-    'url': url,
-    'version': Boolean,
-    'verbose': Boolean,
-    'user': String,
-    'role': String
-};
-
-var ShortOptions = {
-    'a': ['--account'],
-    'd': ['--debug'],
-    'h': ['--help'],
-    '?': ['--help'],
-    'k': ['--keyId'],
-    'u': ['--url'],
-    'v': ['--value'],  // DEPRECATED
-    'A': ['--user']
-};
-
-var usageStr = common.buildUsageString(Options) + ' instrumentation_id';
-usageStr += common.buildDetailedUsageString(Options);
-
-
-// --- Mainline
-
-common.parseArguments(Options, ShortOptions, function (parsed) {
-    if (parsed.argv.remain.length < 1) {
-        common.usage(usageStr, 1, 'instrumentation required');
-    }
-
-
-    var client = common.newClient(parsed);
-
-    parsed.argv.remain.forEach(function (inst) {
-        var id = parseInt(inst, 10);
-        if (parsed.value) {
-            return client.getInstrumentationValue(id, parsed, common.callback);
-        }
-
-        return client.getInstrumentation(id, common.callback);
-    });
-}, usageStr);
diff --git a/bin/sdc-listinstrumentations b/bin/sdc-listinstrumentations
deleted file mode 100755
index 6f52cff..0000000
--- a/bin/sdc-listinstrumentations
+++ /dev/null
@@ -1,46 +0,0 @@
-#!/usr/bin/env node
-// -*- mode: js -*-
-// vim: set filetype=javascript :
-// Copyright 2013 Joyent, Inc.  All rights reserved.
-
-var url = require('url');
-
-var common = require('../lib/cli_common');
-
-
-
-// --- Globals
-
-var Options = {
-    'account': String,
-    'api-version': String,
-    'debug': Boolean,
-    'help': Boolean,
-    'keyId': String,
-    'url': url,
-    'version': Boolean,
-    'verbose': Boolean,
-    'user': String,
-    'role': String
-};
-
-var ShortOptions = {
-    'a': ['--account'],
-    'd': ['--debug'],
-    'h': ['--help'],
-    '?': ['--help'],
-    'k': ['--keyId'],
-    'u': ['--url'],
-    'v': ['--verbose'],
-    'A': ['--user']
-};
-
-var usageStr = common.buildUsageString(Options);
-usageStr += common.buildDetailedUsageString(Options);
-
-// --- Mainline
-
-common.parseArguments(Options, ShortOptions, function (parsed) {
-    var client = common.newClient(parsed);
-    client.listInstrumentations(common.callback);
-}, usageStr);
diff --git a/lib/cli_common.js b/lib/cli_common.js
index 848a219..13d762b 100644
--- a/lib/cli_common.js
+++ b/lib/cli_common.js
@@ -38,14 +38,6 @@ var MasterOptions = {
     // firewall
     enabled: 'enable entity',
     rule: 'firewall rule',
-    // instruments
-    clone: 'an existing instrumentation (i.e. it\'s id number)',
-    decomposition:
-        'an array of arrays for breaking down the data (default: none)',
-    'module': 'the CA module (i.e. syscall)',
-    predicate: 'JSON string to filter data (default: none)',
-    stat: 'the CA stat (i.e. syscalls)',
-    value: 'value of stat (i.e. syscalls)',
     // instance
     metadata: 'metadata associated with this instance',
     'metadata-file':
diff --git a/lib/cloudapi.js b/lib/cloudapi.js
index 3a415c1..57e883f 100644
--- a/lib/cloudapi.js
+++ b/lib/cloudapi.js
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 var assert = require('assert-plus');
@@ -51,12 +51,6 @@ var SNAPSHOTS = MACHINE + '/snapshots';
 var SNAPSHOT = SNAPSHOTS + '/%s';
 var TAGS = MACHINE + '/tags';
 var TAG = TAGS + '/%s';
-var ANALYTICS = ROOT + '/analytics';
-var INSTS = ANALYTICS + '/instrumentations';
-var INST = INSTS + '/%s';
-var INST_RAW = INST + '/value/raw';
-var INST_HMAP = INST + '/value/heatmap/image';
-var INST_HMAP_DETAILS = INST + '/value/heatmap/details';
 var USAGE = ROOT + '/usage/%s';
 var MACHINE_USAGE = MACHINE + '/usage/%s';
 var AUDIT = MACHINE + '/audit';
@@ -2082,321 +2076,6 @@ CloudAPI.prototype.deleteMachineMetadata = deleteMachineMetadata;
 CloudAPI.prototype.DeleteMachineMetadata = deleteMachineMetadata;
 
 
-/**
- * Dumps the "metrics" used in all requets to /analytics.
- *
- * Returns a big object.
- *
- * @param {String} account (optional) the login name of the account.
- * @param {Function} callback of the form f(err, metrics).
- * @param {Boolean} noCache optional flag to force skipping the cache.
- * @throws {TypeError} on bad input.
- */
-function describeAnalytics(account, callback, noCache) {
-    var self = this;
-
-    if (typeof (account) === 'function') {
-        callback = account;
-        account = this.account;
-    }
-    if (!callback || typeof (callback) !== 'function')
-        throw new TypeError('callback (function) required');
-    if (typeof (account) === 'object')
-        account = account.login;
-
-    var path = sprintf(ANALYTICS, account);
-
-    return self._request(path, null, function reqCb(req) {
-        return self._get(req, callback, noCache);
-    });
-}
-CloudAPI.prototype.describeAnalytics = describeAnalytics;
-CloudAPI.prototype.DescribeAnalytics = describeAnalytics;
-CloudAPI.prototype.getMetrics = describeAnalytics;
-CloudAPI.prototype.GetMetrics = describeAnalytics;
-
-
-/**
- * Creates an instrumentation under your account.
- *
- * Returns an object.
- *
- * @param {String} account (optional) the login name of the account.
- * @param {Object} opts instrumentation options. (see CA docs).
- * @param {Function} callback of the form f(err, instrumentation).
- * @param {Boolean} noCache optional flag to force skipping the cache.
- * @throws {TypeError} on bad input.
- */
-function createInstrumentation(account, opts, callback, noCache) {
-    var self = this;
-
-    if (typeof (opts) === 'function') {
-        callback = opts;
-        opts = account;
-        account = this.account;
-    }
-    if (typeof (callback) !== 'function')
-        throw new TypeError('callback (function) required');
-    if (!opts || typeof (opts) !== 'object')
-        throw new TypeError('opts (object) required');
-    if (typeof (account) === 'object')
-        account = account.login;
-
-    return self._request(sprintf(INSTS, account), opts, function reqCb(req) {
-        return self._post(req, callback);
-    });
-}
-CloudAPI.prototype.createInst = createInstrumentation;
-CloudAPI.prototype.createInstrumentation = createInstrumentation;
-CloudAPI.prototype.CreateInstrumentation = createInstrumentation;
-
-
-/**
- * Lists instrumentations under your account.
- *
- * Returns an array of objects.
- *
- * @param {String} account (optional) the login name of the account.
- * @param {Function} callback of the form f(err, schema).
- * @param {Boolean} noCache optional flag to force skipping the cache.
- * @throws {TypeError} on bad input.
- */
-function listInstrumentations(account, callback, noCache) {
-    var self = this;
-
-    if (typeof (account) === 'function') {
-        noCache = callback;
-        callback = account;
-        account = this.account;
-    }
-    if (!callback || typeof (callback) !== 'function')
-        throw new TypeError('callback (function) required');
-    if (typeof (account) === 'object')
-        account = account.login;
-
-    return self._request(sprintf(INSTS, account), null, function reqCb(req) {
-        return self._get(req, callback, noCache);
-    });
-}
-CloudAPI.prototype.listInsts = listInstrumentations;
-CloudAPI.prototype.listInstrumentations = listInstrumentations;
-CloudAPI.prototype.ListInstrumentations = listInstrumentations;
-
-
-/**
- * Gets an instrumentation under your account.
- *
- * Returns an object.
- *
- * @param {String} account (optional) the login name of the account.
- * @param {Number} inst either the id, or can be the object returned
- *                 in list or create.
- * @param {Function} callback of the form f(err, instrumentation).
- * @param {Boolean} noCache optional flag to force skipping the cache.
- * @throws {TypeError} on bad input.
- */
-function getInstrumentation(account, inst, callback, noCache) {
-    var self = this;
-
-    if (typeof (inst) === 'function') {
-        noCache = callback;
-        callback = inst;
-        inst = account;
-        account = this.account;
-    }
-
-    if (!inst || (typeof (inst) !== 'object' && typeof (inst) !== 'number'))
-        throw new TypeError('inst (object|number) required');
-    if (!callback || typeof (callback) !== 'function')
-        throw new TypeError('callback (function) required');
-    if (typeof (account) === 'object')
-        account = account.login;
-
-    var name = (typeof (inst) === 'object' ? inst.id : inst);
-    var path = sprintf(INST, account, name);
-
-    return self._request(path, null, function reqCb(req) {
-        return self._get(req, callback, noCache);
-    });
-}
-CloudAPI.prototype.getInst = getInstrumentation;
-CloudAPI.prototype.getInstrumentation = getInstrumentation;
-CloudAPI.prototype.GetInstrumentation = getInstrumentation;
-
-
-/**
- * Gets an instrumentation raw value under your account.
- *
- * This call is not cachable.
- *
- * Returns an object.
- *
- * @param {String} account (optional) the login name of the account.
- * @param {Number} inst either the id, or can be the object returned
- *                 in list or create.
- * @param {Object} options instrumentation options. (see CA docs).
- * @param {Function} callback of the form f(err, instrumentation).
- * @throws {TypeError} on bad input.
- */
-function getInstrumentationValue(account, inst, options, callback) {
-    var self = this;
-
-    if (typeof (options) === 'function') {
-        callback = options;
-        options = inst;
-        inst = account;
-        account = this.account;
-    }
-    if (typeof (options) !== 'object')
-        throw new TypeError('options (object) required');
-    if (typeof (inst) !== 'object' && typeof (inst) !== 'number')
-        throw new TypeError('inst (object|number) required');
-    if (!callback || typeof (callback) !== 'function')
-        throw new TypeError('callback (function) required');
-    if (typeof (account) === 'object')
-        account = account.login;
-
-    var name = (typeof (inst) === 'object' ? inst.id : inst);
-    var path = sprintf(INST_RAW, account, name);
-
-    return self._request(path, null, function reqCb(req) {
-        _addToQuery(req, options);
-        return self._get(req, callback, true);
-    });
-}
-CloudAPI.prototype.getInstValue = getInstrumentationValue;
-CloudAPI.prototype.getInstrumentationValue = getInstrumentationValue;
-CloudAPI.prototype.GetInstrumentationValue = getInstrumentationValue;
-
-
-/**
- * Gets an instrumentation heatmap image under your account.
- *
- * This call is not cachable.
- *
- * Returns an object.
- *
- * @param {String} account (optional) the login name of the account.
- * @param {Number} inst either the id, or can be the object returned
- *                 in list or create.
- * @param {Object} options object, from command line.
- * @param {Function} callback of the form f(err, instrumentation).
- * @throws {TypeError} on bad input.
- */
-function getInstrumentationHeatmap(account, inst, options, callback) {
-    var self = this;
-
-    if (typeof (options) === 'function') {
-        callback = options;
-        options = inst;
-        inst = account;
-        account = this.account;
-    }
-
-    if (!inst || (typeof (inst) !== 'object' && typeof (inst) !== 'number'))
-        throw new TypeError('inst (object|number) required');
-    if (!options || typeof (options) !== 'object')
-        throw new TypeError('options (object) required');
-    if (!callback || typeof (callback) !== 'function')
-        throw new TypeError('callback (function) required');
-    if (typeof (account) === 'object')
-        account = account.login;
-
-    var name = (typeof (inst) === 'object' ? inst.id : inst);
-    var path = sprintf(INST_HMAP, account, name);
-
-    return self._request(path, null, function reqCb(req) {
-        _addToQuery(req, options);
-        return self._get(req, callback, true);
-    });
-}
-CloudAPI.prototype.getInstHmap = getInstrumentationHeatmap;
-CloudAPI.prototype.getInstrumentationHeatmap = getInstrumentationHeatmap;
-CloudAPI.prototype.GetInstrumentationHeatmap = getInstrumentationHeatmap;
-
-
-/**
- * Gets an instrumentation heatmap image details.
- *
- * This call is not cachable.
- *
- * Returns an object.
- *
- * @param {String} account (optional) the login name of the account.
- * @param {Number} inst either the id, or can be the object returned
- *                 in list or create.
- * @param {Object} options with x and y, as {Number}. Required.
- * @param {Function} callback of the form f(err, instrumentation).
- * @throws {TypeError} on bad input.
- */
-function getInstrumentationHeatmapDetails(account, inst, options, callback) {
-    var self = this;
-
-    if (typeof (options) === 'function') {
-        callback = options;
-        options = inst;
-        inst = account;
-        account = this.account;
-    }
-    if (!inst || (typeof (inst) !== 'object' && typeof (inst) !== 'number'))
-        throw new TypeError('inst (object|number) required');
-    if (!options || typeof (options) !== 'object')
-        throw new TypeError('options (object) required');
-    if (!callback || typeof (callback) !== 'function')
-        throw new TypeError('callback (function) required');
-    if (typeof (account) === 'object')
-        account = account.login;
-
-    var name = (typeof (inst) === 'object' ? inst.id : inst);
-    var path = sprintf(INST_HMAP_DETAILS, account, name);
-
-    return self._request(path, null, function reqCb(req) {
-        _addToQuery(req, options);
-        return self._get(req, callback, true);
-    });
-}
-CloudAPI.prototype.getInstHmapDetails = getInstrumentationHeatmapDetails;
-CloudAPI.prototype.getInstrumentationHeatmapDetails =
-    getInstrumentationHeatmapDetails;
-CloudAPI.prototype.GetInstrumentationHeatmapDetails =
-    getInstrumentationHeatmapDetails;
-
-
-/**
- * Deletes an instrumentation under your account.
- *
- * @param {String} account (optional) the login name of the account.
- * @param {Number} inst either the id, or can be the object returned
- *                 in list or create.
- * @param {Function} callback of the form f(err).
- * @throws {TypeError} on bad input.
- */
-function deleteInstrumentation(account, inst, callback) {
-    var self = this;
-
-    if (typeof (inst) === 'function') {
-        callback = inst;
-        inst = account;
-        account = this.account;
-    }
-    if (!inst || (typeof (inst) !== 'object' && typeof (inst) !== 'number'))
-        throw new TypeError('inst (object|number) required');
-    if (!callback || typeof (callback) !== 'function')
-        throw new TypeError('callback (function) required');
-    if (typeof (account) === 'object')
-        account = account.login;
-
-    var name = (typeof (inst) === 'object' ? inst.id + '' : inst);
-    var path = sprintf(INST, account, name);
-
-    return self._request(path, null, function reqCb(req) {
-        return self._del(req, callback);
-    });
-}
-CloudAPI.prototype.delInst = deleteInstrumentation;
-CloudAPI.prototype.deleteInstrumentation = deleteInstrumentation;
-CloudAPI.prototype.DeleteInstrumentation = deleteInstrumentation;
-
 
 /**
  * Gets a usage object of all machines in cloud within a period
@@ -3896,7 +3575,7 @@ function getRoleTags(account, resource, cb) {
     var validResources = [
         'machines', 'users', 'roles', 'packages',
         'images', 'policies', 'keys', 'datacenters',
-        'analytics', 'fwrules', 'networks', 'instrumentations'
+        'fwrules', 'networks'
     ];
 
     if (p[0] && validResources.indexOf(p[0]) === -1) {
@@ -3977,7 +3656,7 @@ function setRoleTags(account, resource, roleTags, cb) {
     var validResources = [
         'machines', 'users', 'roles', 'packages',
         'images', 'policies', 'keys', 'datacenters',
-        'analytics', 'fwrules', 'networks', 'instrumentations'
+        'fwrules', 'networks'
     ];
 
     if (p[0] && validResources.indexOf(p[0]) === -1) {
diff --git a/package.json b/package.json
index f1d765a..d1ca706 100644
--- a/package.json
+++ b/package.json
@@ -1,8 +1,8 @@
 {
   "author": "Joyent, Inc. http://www.joyent.com",
   "name": "smartdc",
-  "description": "Client SDK and CLI for the Joyent SmartDataCenter API",
-  "version": "8.1.0",
+  "description": "Old Client SDK and CLI for the Joyent SmartDataCenter API",
+  "version": "9.0.0",
   "repository": {
       "type": "git",
       "url": "git://github.com/joyent/node-smartdc.git"
-- 
2.21.0

