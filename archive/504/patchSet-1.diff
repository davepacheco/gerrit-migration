From 00a7a97dcb7a6b260ce879559c0f27fd9f6ee27b Mon Sep 17 00:00:00 2001
From: Marsell Kukuljevic <marsell@joyent.com>
Date: Wed, 21 Sep 2016 01:06:32 +1200
Subject: [PATCH] DAPI-323 - Add support for async calls in pipeline

---
 lib/algorithms/calculate-server-unreserved.js |  14 +-
 lib/algorithms/calculate-ticketed-vms.js      |  13 +-
 lib/algorithms/hard-filter-capness.js         |  11 +-
 lib/algorithms/hard-filter-headnode.js        |  19 +-
 lib/algorithms/hard-filter-invalid-servers.js |  10 +-
 lib/algorithms/hard-filter-large-servers.js   |  20 +-
 lib/algorithms/hard-filter-locality-hints.js  |  15 +-
 lib/algorithms/hard-filter-min-cpu.js         |  19 +-
 lib/algorithms/hard-filter-min-disk.js        |  23 +-
 lib/algorithms/hard-filter-min-ram.js         |  17 +-
 .../hard-filter-overprovision-ratios.js       |  17 +-
 lib/algorithms/hard-filter-owners-servers.js  |  15 +-
 .../hard-filter-platform-versions.js          |  15 +-
 lib/algorithms/hard-filter-reserved.js        |  11 +-
 lib/algorithms/hard-filter-reservoir.js       |  11 +-
 lib/algorithms/hard-filter-running.js         |  17 +-
 lib/algorithms/hard-filter-setup.js           |  18 +-
 lib/algorithms/hard-filter-sick-servers.js    |  11 +-
 lib/algorithms/hard-filter-traits.js          |  19 +-
 lib/algorithms/hard-filter-vlans.js           |  17 +-
 lib/algorithms/hard-filter-vm-count.js        |  11 +-
 lib/algorithms/hard-filter-volumes-from.js    |  11 +-
 lib/algorithms/identity.js                    |  11 +-
 lib/algorithms/override-overprovisioning.js   |  15 +-
 lib/algorithms/score-current-platform.js      |  14 +-
 lib/algorithms/score-next-reboot.js           |  12 +-
 lib/algorithms/score-num-owner-zones.js       |  14 +-
 lib/algorithms/score-uniform-random.js        |  14 +-
 lib/algorithms/score-unreserved-disk.js       |   9 +-
 lib/algorithms/score-unreserved-ram.js        |  14 +-
 lib/algorithms/soft-filter-locality-hints.js  |  10 +-
 lib/allocator.js                              | 277 +++----
 lib/scorers.js                                |   2 +-
 .../calculate-server-unreserved.test.js       |  57 +-
 .../algorithms/calculate-ticketed-vms.test.js | 130 ++--
 test/algorithms/common.js                     |  31 +
 test/algorithms/hard-filter-capness.test.js   |  62 +-
 test/algorithms/hard-filter-headnode.test.js  |  51 +-
 .../hard-filter-invalid-servers.test.js       |  41 +-
 .../hard-filter-large-servers.test.js         |  45 +-
 .../hard-filter-locality-hints.test.js        | 314 ++++----
 test/algorithms/hard-filter-min-cpu.test.js   | 305 ++++----
 test/algorithms/hard-filter-min-disk.test.js  | 367 ++++-----
 test/algorithms/hard-filter-min-ram.test.js   | 303 ++++----
 .../hard-filter-overprovision-ratios.test.js  |  73 +-
 test/algorithms/hard-filter-owners-servers.js | 138 ++--
 .../hard-filter-platform-versions.test.js     | 353 ++++-----
 test/algorithms/hard-filter-reserved.test.js  |  34 +-
 test/algorithms/hard-filter-reservoir.test.js |  34 +-
 test/algorithms/hard-filter-running.test.js   | 106 +--
 test/algorithms/hard-filter-setup.test.js     |  72 +-
 .../hard-filter-sick-servers.test.js          |  35 +-
 test/algorithms/hard-filter-traits.test.js    | 719 ++++++++----------
 test/algorithms/hard-filter-vlans.test.js     | 160 ++--
 test/algorithms/hard-filter-vm-count.test.js  |  68 +-
 .../hard-filter-volumes-from.test.js          |  50 +-
 test/algorithms/identity.test.js              |  32 +-
 .../override-overprovisioning.test.js         | 357 +++++----
 .../algorithms/score-current-platform.test.js |  81 +-
 test/algorithms/score-next-reboot.test.js     | 158 ++--
 test/algorithms/score-num-owner-zones.test.js | 165 ++--
 test/algorithms/score-uniform-random.test.js  |  72 +-
 test/algorithms/score-unreserved-disk.test.js | 108 +--
 test/algorithms/score-unreserved-ram.test.js  | 185 ++---
 .../soft-filter-locality-hints.test.js        | 267 +++----
 test/allocator.test.js                        | 717 ++++++++++-------
 test/integration.test.js                      |  47 +-
 67 files changed, 3116 insertions(+), 3347 deletions(-)

diff --git a/lib/algorithms/calculate-server-unreserved.js b/lib/algorithms/calculate-server-unreserved.js
index 145efa3..6c3ef24 100644
--- a/lib/algorithms/calculate-server-unreserved.js
+++ b/lib/algorithms/calculate-server-unreserved.js
@@ -31,13 +31,23 @@
  * disregarding it.
  */
 
+var assert = require('assert-plus');
+
+
 var DEFAULT_SERVER_OVERPROVISIONING = { ram: 1.0, disk: 1.0, cpu: 4.0 };
 var MB = 1024 * 1024;
 var GB = 1024 * MB;
 var POOL_USABLE_RATIO = 0.94;
 
 
-function calculateServerUnreserved(log, servers) {
+function
+calculateServerUnreserved(log, servers, constraints, cb)
+{
+	assert.object(log);
+	assert.arrayOfObject(servers);
+	assert.object(constraints);
+	assert.func(cb);
+
 	servers.forEach(function (server) {
 		var vms;
 		var overprovisionCpu;
@@ -100,7 +110,7 @@ function calculateServerUnreserved(log, servers) {
 		server.unreserved_ram = Math.floor(server.unreserved_ram);
 	});
 
-	return ([servers]);
+	return (cb(null, servers, {}));
 }
 
 function
diff --git a/lib/algorithms/calculate-ticketed-vms.js b/lib/algorithms/calculate-ticketed-vms.js
index 3b9230f..7a42d9c 100644
--- a/lib/algorithms/calculate-ticketed-vms.js
+++ b/lib/algorithms/calculate-ticketed-vms.js
@@ -20,11 +20,20 @@
  * to be near the beginning of the chain.
  */
 
+var assert = require('assert-plus');
+
+
 var GiB = 1024 * 1024 * 1024;
 
+
 function
-addTicketedVms(log, servers, constraints)
+addTicketedVms(log, servers, constraints, cb)
 {
+	assert.object(log);
+	assert.arrayOfObject(servers);
+	assert.object(constraints);
+	assert.func(cb);
+
 	var serversWithOpenTickets = findOpenTickets(constraints.tickets);
 
 	servers = servers.filter(function (server) {
@@ -64,7 +73,7 @@ addTicketedVms(log, servers, constraints)
 		return (true);
 	});
 
-	return ([servers]);
+	return (cb(null, servers, {}));
 }
 
 function
diff --git a/lib/algorithms/hard-filter-capness.js b/lib/algorithms/hard-filter-capness.js
index 5013cfe..5342970 100644
--- a/lib/algorithms/hard-filter-capness.js
+++ b/lib/algorithms/hard-filter-capness.js
@@ -32,9 +32,16 @@
  * mentioned above altogether.
  */
 
+var assert = require('assert-plus');
+
 function
-filterCapness(log, servers, constraints)
+filterCapness(log, servers, constraints, cb)
 {
+	assert.object(log);
+	assert.arrayOfObject(servers);
+	assert.object(constraints);
+	assert.func(cb);
+
 	var pkg = constraints.pkg;
 	var reasons = {};
 
@@ -57,7 +64,7 @@ filterCapness(log, servers, constraints)
 		return (true);
 	});
 
-	return ([adequateServers, reasons]);
+	return (cb(null, adequateServers, reasons));
 }
 
 function
diff --git a/lib/algorithms/hard-filter-headnode.js b/lib/algorithms/hard-filter-headnode.js
index c7ad7c7..a075af2 100644
--- a/lib/algorithms/hard-filter-headnode.js
+++ b/lib/algorithms/hard-filter-headnode.js
@@ -12,18 +12,29 @@
  * Filters out headnodes from server selection.
  */
 
+var assert = require('assert-plus');
+
 function
-filterHeadnode(log, servers, constraints)
+filterHeadnode(log, servers, constraints, cb)
 {
+	assert.object(log);
+	assert.arrayOfObject(servers);
+	assert.object(constraints);
+	assert.func(cb);
+
+	var reasons = {};
+
 	var override = constraints.defaults.filter_headnode;
-	if (typeof (override) !== 'undefined' && !override)
-		return ([servers]);
+	if (typeof (override) !== 'undefined' && !override) {
+		reasons.skip = 'Do not filter out headnodes';
+		return (cb(null, servers, reasons));
+	}
 
 	var adequateServers = servers.filter(function (server) {
 		return (!server.headnode);
 	});
 
-	return ([adequateServers]);
+	return (cb(null, adequateServers, reasons));
 }
 
 module.exports = {
diff --git a/lib/algorithms/hard-filter-invalid-servers.js b/lib/algorithms/hard-filter-invalid-servers.js
index 109b27e..b171250 100644
--- a/lib/algorithms/hard-filter-invalid-servers.js
+++ b/lib/algorithms/hard-filter-invalid-servers.js
@@ -12,11 +12,17 @@
  * Returns servers objects which pass validation.
  */
 
+var assert = require('assert-plus');
 var validations = require('../validations');
 
 function
-filterInvalidServers(log, servers, constraints)
+filterInvalidServers(log, servers, constraints, cb)
 {
+	assert.object(log);
+	assert.arrayOfObject(servers);
+	assert.object(constraints);
+	assert.func(cb);
+
 	var reasons = {};
 
 	var validServers = servers.filter(function (server) {
@@ -39,7 +45,7 @@ filterInvalidServers(log, servers, constraints)
 		return (!msg);
 	});
 
-	return ([validServers, reasons]);
+	return (cb(null, validServers, reasons));
 }
 
 module.exports = {
diff --git a/lib/algorithms/hard-filter-large-servers.js b/lib/algorithms/hard-filter-large-servers.js
index 4ca048d..47be57b 100644
--- a/lib/algorithms/hard-filter-large-servers.js
+++ b/lib/algorithms/hard-filter-large-servers.js
@@ -16,21 +16,31 @@
  * to satisfy large allocations -- such allocations are uncommon but valuable.
  */
 
+var assert = require('assert-plus');
+
 /* by default, 15% of servers are kept for large allocations */
 var LARGE_POOL_RATIO = 0.15;
 
 function
-filterLargeServers(log, servers, constraints)
+filterLargeServers(log, servers, constraints, cb)
 {
+	assert.object(log);
+	assert.arrayOfObject(servers);
+	assert.object(constraints);
+	assert.func(cb);
+
 	var pool;
+	var reasons = {};
 	var largePoolSize = servers.length * LARGE_POOL_RATIO;
 	var override = constraints.defaults.filter_large_servers;
 
-	if (typeof (override) !== 'undefined' && !override)
-		return ([servers]);
+	if (typeof (override) !== 'undefined' && !override) {
+		reasons.skip = 'Do not filter out large servers';
+		return (cb(null, servers, reasons));
+	}
 
 	if (largePoolSize < 1)
-		return ([servers]);
+		return (cb(null, servers, reasons));
 
 	/* shallow copy to avoid mutating order of referred array */
 	servers = servers.slice(0);
@@ -41,7 +51,7 @@ filterLargeServers(log, servers, constraints)
 
 	pool = servers.slice(largePoolSize, servers.length);
 
-	return ([pool]);
+	return (cb(null, pool, reasons));
 }
 
 module.exports = {
diff --git a/lib/algorithms/hard-filter-locality-hints.js b/lib/algorithms/hard-filter-locality-hints.js
index 8df318b..7db9372 100644
--- a/lib/algorithms/hard-filter-locality-hints.js
+++ b/lib/algorithms/hard-filter-locality-hints.js
@@ -26,17 +26,19 @@ var shared = require('./shared/locality-hints');
  * Filter `servers` according to `constraints.vm.locality` rules.
  */
 function
-filterHardLocality(log, servers, constraints)
+filterHardLocality(log, servers, constraints, cb)
 {
 	assert.object(log, 'log');
 	assert.arrayOfObject(servers, 'servers');
 	assert.object(constraints, 'constraints');
 	assert.uuid(constraints.vm.owner_uuid, 'constraints.vm.owner_uuid');
+	assert.func(cb);
+
 	var ownerUuid = constraints.vm.owner_uuid;
+	var reasons = {};
 
-	if (servers.length === 0) {
-		return ([servers]);
-	}
+	if (servers.length === 0)
+		return (cb(null, servers, reasons));
 
 	// Parse "locality". See format notes in soft-filter-locality-hints.js
  	// top comment.
@@ -45,11 +47,10 @@ filterHardLocality(log, servers, constraints)
 	var locality = constraints.vm.locality || {};
 	assert.optionalBool(locality.strict, 'locality.strict');
 	var strict = Boolean(locality.strict);
-	var reasons = {};
 
 	if (!strict) {
 		reasons.skip = 'No strict locality requested';
-		return ([servers, reasons]);
+		return (cb(null, servers, reasons));
 	}
 
 	var far = shared.normNearFar(locality.far, 'locality.far');
@@ -70,7 +71,7 @@ filterHardLocality(log, servers, constraints)
 		}
 	}
 
-	return ([servers, reasons]);
+	return (cb(null, servers, reasons));
 }
 
 
diff --git a/lib/algorithms/hard-filter-min-cpu.js b/lib/algorithms/hard-filter-min-cpu.js
index 2882fdc..b662163 100644
--- a/lib/algorithms/hard-filter-min-cpu.js
+++ b/lib/algorithms/hard-filter-min-cpu.js
@@ -13,24 +13,33 @@
  * allocation.
  */
 
+var assert = require('assert-plus');
+
 function
-filterMinCpu(log, servers, constraints)
+filterMinCpu(log, servers, constraints, cb)
 {
+	assert.object(log);
+	assert.arrayOfObject(servers);
+	assert.object(constraints);
+	assert.func(cb);
+
 	var override = constraints.defaults.filter_min_resources;
 	var vm       = constraints.vm;
 	var pkg      = constraints.pkg;
 	var reasons  = {};
 	var filter;
 
-	if (typeof (override) !== 'undefined' && !override)
-		return ([servers]);
+	if (typeof (override) !== 'undefined' && !override) {
+		reasons.skip = 'Do not filter out based on minimum free CPU';
+		return (cb(null, servers, reasons));
+	}
 
 	if (!vm.cpu_cap && pkg && pkg.cpu_cap)
 		vm.cpu_cap = pkg.cpu_cap;
 
 	/* VM allocation without a cpu_cap is also valid */
 	if (!vm.cpu_cap)
-		return ([servers]);
+		return (cb(null, servers, reasons));
 
 	if (pkg && pkg.overprovision_cpu) {
 		var requestedCpu = vm.cpu_cap / pkg.overprovision_cpu;
@@ -65,7 +74,7 @@ filterMinCpu(log, servers, constraints)
 		};
 	}
 
-	return ([servers.filter(filter), reasons]);
+	return (cb(null, servers.filter(filter), reasons));
 }
 
 module.exports = {
diff --git a/lib/algorithms/hard-filter-min-disk.js b/lib/algorithms/hard-filter-min-disk.js
index 803c53f..33ffe66 100644
--- a/lib/algorithms/hard-filter-min-disk.js
+++ b/lib/algorithms/hard-filter-min-disk.js
@@ -13,12 +13,19 @@
  * allocation.
  */
 
+var assert = require('assert-plus');
+
 var MiB = 1024 * 1024;
 var FUDGE_MB = 10 * 1024; // leave 10GiB additional space, just in case
 
 function
-filterMinDisk(log, servers, constraints)
+filterMinDisk(log, servers, constraints, cb)
 {
+	assert.object(log);
+	assert.arrayOfObject(servers);
+	assert.object(constraints);
+	assert.func(cb);
+
 	var override = constraints.defaults.filter_min_resources;
 	var img = constraints.img;
 	var pkg = constraints.pkg;
@@ -26,12 +33,16 @@ filterMinDisk(log, servers, constraints)
 	var reasons = {};
 	var filter;
 
-	if (typeof (override) !== 'undefined' && !override)
-		return ([servers]);
+	if (typeof (override) !== 'undefined' && !override) {
+		reasons.skip = 'Do not filter out based on minimum free disk';
+		return (cb(null, servers, reasons));
+	}
 
 	/* VM allocation without a quota is also valid */
-	if (!vm.quota && !(pkg && pkg.quota))
-		return ([servers]);
+	if (!vm.quota && !(pkg && pkg.quota)) {
+		reasons.skip = 'Vm and pkg have no quota';
+		return (cb(null, servers, reasons));
+	}
 
 	if (pkg && pkg.overprovision_disk) {
 		var requestedDisk;
@@ -80,7 +91,7 @@ filterMinDisk(log, servers, constraints)
 		};
 	}
 
-	return ([servers.filter(filter), reasons]);
+	return (cb(null, servers.filter(filter), reasons));
 }
 
 module.exports = {
diff --git a/lib/algorithms/hard-filter-min-ram.js b/lib/algorithms/hard-filter-min-ram.js
index bac22ee..01056ad 100644
--- a/lib/algorithms/hard-filter-min-ram.js
+++ b/lib/algorithms/hard-filter-min-ram.js
@@ -13,17 +13,26 @@
  * allocation.
  */
 
+var assert = require('assert-plus');
+
 function
-filterMinRam(log, servers, constraints)
+filterMinRam(log, servers, constraints, cb)
 {
+	assert.object(log);
+	assert.arrayOfObject(servers);
+	assert.object(constraints);
+	assert.func(cb);
+
 	var override = constraints.defaults.filter_min_resources;
 	var vm = constraints.vm;
 	var pkg = constraints.pkg;
 	var reasons = {};
 	var filter;
 
-	if (typeof (override) !== 'undefined' && !override)
-		return ([servers]);
+	if (typeof (override) !== 'undefined' && !override) {
+		reasons.skip = 'Do not filter out based on minimum free RAM';
+		return (cb(null, servers, reasons));
+	}
 
 	if (pkg && pkg.overprovision_ram) {
 		var requestedRam = vm.ram;
@@ -60,7 +69,7 @@ filterMinRam(log, servers, constraints)
 		};
 	}
 
-	return ([servers.filter(filter), reasons]);
+	return (cb(null, servers.filter(filter), reasons));
 }
 
 module.exports = {
diff --git a/lib/algorithms/hard-filter-overprovision-ratios.js b/lib/algorithms/hard-filter-overprovision-ratios.js
index ed71445..84d68da 100644
--- a/lib/algorithms/hard-filter-overprovision-ratios.js
+++ b/lib/algorithms/hard-filter-overprovision-ratios.js
@@ -23,6 +23,8 @@
  *   that VM due to the 2.0 VMs on that server.
  */
 
+var assert = require('assert-plus');
+
 var OP_KEY_MATCH = [['cpu',  'overprovision_cpu' ],
 					['ram',  'overprovision_ram' ],
 					['disk', 'overprovision_disk'],
@@ -30,13 +32,20 @@ var OP_KEY_MATCH = [['cpu',  'overprovision_cpu' ],
 					['net',  'overprovision_net' ]];
 
 function
-filterOverprovisionRatios(log, servers, constraints)
+filterOverprovisionRatios(log, servers, constraints, cb)
 {
+	assert.object(log);
+	assert.arrayOfObject(servers);
+	assert.object(constraints);
+	assert.func(cb);
+
 	var pkg = constraints.pkg;
 	var reasons = {};
 
-	if (!pkg)
-		return ([servers, reasons]);
+	if (!pkg) {
+		reasons.skip = 'No pkg provided';
+		return (cb(null, servers, reasons));
+	}
 
 	OP_KEY_MATCH.forEach(function (pair) {
 		var serverKey = pair[0];
@@ -58,7 +67,7 @@ filterOverprovisionRatios(log, servers, constraints)
 		});
 	});
 
-	return ([servers, reasons]);
+	return (cb(null, servers, reasons));
 }
 
 /*
diff --git a/lib/algorithms/hard-filter-owners-servers.js b/lib/algorithms/hard-filter-owners-servers.js
index b516868..baa32fc 100644
--- a/lib/algorithms/hard-filter-owners-servers.js
+++ b/lib/algorithms/hard-filter-owners-servers.js
@@ -24,16 +24,24 @@
  * plugin.
  */
 
+var assert = require('assert-plus');
+
+
 function
-filterServersByOwners(log, servers, constraints)
+filterServersByOwners(log, servers, constraints, cb)
 {
+	assert.object(log);
+	assert.arrayOfObject(servers);
+	assert.object(constraints);
+	assert.func(cb);
+
 	var ownerUuid = constraints.vm.owner_uuid;
 	var filters = constraints.defaults.filter_owner_server;
 	var reasons = {};
 
 	if (!filters) {
 		reasons.skip = 'No filter_owner_server default to run';
-		return ([servers, reasons]);
+		return (cb(null, servers, reasons));
 	}
 
 	if (filters[ownerUuid]) {
@@ -43,11 +51,10 @@ filterServersByOwners(log, servers, constraints)
 		servers = filterNotOwners(log, servers, filters, reasons);
 	}
 
-	return ([servers, reasons]);
+	return (cb(null, servers, reasons));
 }
 
 
-
 /*
  * Return servers which the owner's snippet returns true for.
  */
diff --git a/lib/algorithms/hard-filter-platform-versions.js b/lib/algorithms/hard-filter-platform-versions.js
index 13c6d7b..a5e7f4a 100644
--- a/lib/algorithms/hard-filter-platform-versions.js
+++ b/lib/algorithms/hard-filter-platform-versions.js
@@ -17,9 +17,18 @@
  * Assumes a setup server, so make sure to run hard-filter-setup first.
  */
 
+var assert = require('assert-plus');
+
 var VERSION_RE = /^\d+\.\d+$/;
 
-function filterPlatformVersions(log, servers, constraints) {
+function
+filterPlatformVersions(log, servers, constraints, cb)
+{
+	assert.object(log);
+	assert.arrayOfObject(servers);
+	assert.object(constraints);
+	assert.func(cb);
+
 	var reasons = {};
 
 	var pkgMinPlatforms = constraints.pkg && constraints.pkg.min_platform;
@@ -34,7 +43,7 @@ function filterPlatformVersions(log, servers, constraints) {
 
 	var img = constraints.img;
 	if (!img.requirements)
-		return ([servers, reasons]);
+		return (cb(null, servers, reasons));
 
 	var imgMinPlatforms = img.requirements.min_platform;
 	if (imgMinPlatforms)
@@ -44,7 +53,7 @@ function filterPlatformVersions(log, servers, constraints) {
 	if (imgMaxPlatforms)
 		servers = filterMaxPlatforms(imgMaxPlatforms, servers, reasons);
 
-	return ([servers, reasons]);
+	return (cb(null, servers, reasons));
 }
 
 /* mutates reasons arg, if provided */
diff --git a/lib/algorithms/hard-filter-reserved.js b/lib/algorithms/hard-filter-reserved.js
index 1ca8269..1ba6acb 100644
--- a/lib/algorithms/hard-filter-reserved.js
+++ b/lib/algorithms/hard-filter-reserved.js
@@ -12,14 +12,21 @@
  * Returns servers which are not reserved.
  */
 
+var assert = require('assert-plus');
+
 function
-filterReserved(log, servers)
+filterReserved(log, servers, constraints, cb)
 {
+	assert.object(log);
+	assert.arrayOfObject(servers);
+	assert.object(constraints);
+	assert.func(cb);
+
 	var adequateServers = servers.filter(function (server) {
 		return (!server.reserved);
 	});
 
-	return ([adequateServers]);
+	return (cb(null, adequateServers, {}));
 }
 
 module.exports = {
diff --git a/lib/algorithms/hard-filter-reservoir.js b/lib/algorithms/hard-filter-reservoir.js
index 482a7bc..9f2ee0e 100644
--- a/lib/algorithms/hard-filter-reservoir.js
+++ b/lib/algorithms/hard-filter-reservoir.js
@@ -12,14 +12,21 @@
  * Returns servers which are not in the reservoir.
  */
 
+var assert = require('assert-plus');
+
 function
-filterReservoir(log, servers)
+filterReservoir(log, servers, constraints, cb)
 {
+	assert.object(log);
+	assert.arrayOfObject(servers);
+	assert.object(constraints);
+	assert.func(cb);
+
 	var adequateServers = servers.filter(function (server) {
 		return (!server.reservoir);
 	});
 
-	return ([adequateServers]);
+	return (cb(null, adequateServers, {}));
 }
 
 module.exports = {
diff --git a/lib/algorithms/hard-filter-running.js b/lib/algorithms/hard-filter-running.js
index 91624ad..81f1793 100644
--- a/lib/algorithms/hard-filter-running.js
+++ b/lib/algorithms/hard-filter-running.js
@@ -17,14 +17,23 @@
  * plugin cannot make any assumptions about the presence and format of data.
  */
 
+var assert = require('assert-plus');
+
 function
-filterRunning(log, servers, constraints)
+filterRunning(log, servers, constraints, cb)
 {
+	// servers may not be the expected array
+	assert.object(log);
+	assert.object(constraints);
+	assert.func(cb);
+
 	var reasons = {};
 	var adequateServers;
 
-	if (!Array.isArray(servers))
-		return ([servers]);
+	if (!Array.isArray(servers)) {
+		reasons.skip = 'servers variable is not an array';
+		return (cb(null, servers, reasons));
+	}
 
 	adequateServers = servers.filter(function (server) {
 		if (!server || typeof (server) !== 'object')
@@ -41,7 +50,7 @@ filterRunning(log, servers, constraints)
 		return (false);
 	});
 
-	return ([adequateServers, reasons]);
+	return (cb(null, adequateServers, reasons));
 }
 
 module.exports = {
diff --git a/lib/algorithms/hard-filter-setup.js b/lib/algorithms/hard-filter-setup.js
index 8bc0dc6..9562825 100644
--- a/lib/algorithms/hard-filter-setup.js
+++ b/lib/algorithms/hard-filter-setup.js
@@ -17,13 +17,23 @@
  * plugin cannot make any assumptions about the presence and format of data.
  */
 
+var assert = require('assert-plus');
+
 function
-filterSetup(log, servers)
+filterSetup(log, servers, constraints, cb)
 {
+	// servers may not be the expected array
+	assert.object(log);
+	assert.object(constraints);
+	assert.func(cb);
+
 	var adequateServers;
+	var reasons = {};
 
-	if (!Array.isArray(servers))
-		return ([servers]);
+	if (!Array.isArray(servers)) {
+		reasons.skip = 'servers variable is not an array';
+		return (cb(null, servers, reasons));
+	}
 
 	adequateServers = servers.filter(function (server) {
 		if (!server || typeof (server) !== 'object')
@@ -32,7 +42,7 @@ filterSetup(log, servers)
 		return (server.setup);
 	});
 
-	return ([adequateServers]);
+	return (cb(null, adequateServers, reasons));
 }
 
 module.exports = {
diff --git a/lib/algorithms/hard-filter-sick-servers.js b/lib/algorithms/hard-filter-sick-servers.js
index cdf0a9b..1a8606d 100644
--- a/lib/algorithms/hard-filter-sick-servers.js
+++ b/lib/algorithms/hard-filter-sick-servers.js
@@ -20,11 +20,18 @@
  * failed allocations on a server in the last 24h, it skips that server.
  */
 
+var assert = require('assert-plus');
+
 var DAY_IN_MS = 24 * 60 * 60 * 1000;
 
 function
-filterSickServers(log, servers, constraints)
+filterSickServers(log, servers, constraints, cb)
 {
+	assert.object(log);
+	assert.arrayOfObject(servers);
+	assert.object(constraints);
+	assert.func(cb);
+
 	var reasons = {};
 
 	var adequateServers = servers.filter(function (server) {
@@ -36,7 +43,7 @@ filterSickServers(log, servers, constraints)
 		return (!err);
 	});
 
-	return ([adequateServers, reasons]);
+	return (cb(null, adequateServers, reasons));
 }
 
 function
diff --git a/lib/algorithms/hard-filter-traits.js b/lib/algorithms/hard-filter-traits.js
index 3e6c3c8..9d74645 100644
--- a/lib/algorithms/hard-filter-traits.js
+++ b/lib/algorithms/hard-filter-traits.js
@@ -17,9 +17,16 @@
  *    Server+Roles+and+Server+Allocation+Constraints
  */
 
+var assert = require('assert-plus');
+
 function
-filterTraits(log, servers, constraints)
+filterTraits(log, servers, constraints, cb)
 {
+	assert.object(log);
+	assert.arrayOfObject(servers);
+	assert.object(constraints);
+	assert.func(cb);
+
 	var imgTraits = constraints.img.traits;
 	var vmTraits  = (constraints.vm.traits ||
 		(constraints.pkg && constraints.pkg.traits));
@@ -29,11 +36,11 @@ filterTraits(log, servers, constraints)
 	var adequateServers;
 
 	if (!requestedTraits)
-		return (traitless(servers, reasons));
+		return (traitless(servers, reasons, cb));
 
 	traitNames = Object.keys(requestedTraits);
 	if (traitNames.length === 0)
-		return (traitless(servers, reasons));
+		return (traitless(servers, reasons, cb));
 
 	log.trace('Filtering with VM traits:', requestedTraits);
 
@@ -69,7 +76,7 @@ filterTraits(log, servers, constraints)
 		return (true);
 	});
 
-	return ([adequateServers, reasons]);
+	return (cb(null, adequateServers, reasons));
 }
 
 /*
@@ -138,7 +145,7 @@ traitMatch(serverTrait, vmTrait)
  * Returns servers that don't have trait entries.
  */
 function
-traitless(servers, reasons)
+traitless(servers, reasons, cb)
 {
 	var traitlessServers = servers.filter(function (server) {
 		var isTraitless = server.traits === undefined ||
@@ -153,7 +160,7 @@ traitless(servers, reasons)
 		return (isTraitless);
 	});
 
-	return ([traitlessServers, reasons]);
+	return (cb(null, traitlessServers, reasons));
 }
 
 /*
diff --git a/lib/algorithms/hard-filter-vlans.js b/lib/algorithms/hard-filter-vlans.js
index 09db249..aaf51e4 100644
--- a/lib/algorithms/hard-filter-vlans.js
+++ b/lib/algorithms/hard-filter-vlans.js
@@ -23,15 +23,24 @@
  * consideration.
  */
 
+var assert = require('assert-plus');
+
 function
-filterVlans(log, servers, constraints)
+filterVlans(log, servers, constraints, cb)
 {
+	assert.object(log);
+	assert.arrayOfObject(servers);
+	assert.object(constraints);
+	assert.func(cb);
+
 	var requestedVlans = constraints.vm.nic_tags;
 	var reasons = {};
 	var adequateServers;
 
-	if (!requestedVlans)
-		return ([servers]);
+	if (!requestedVlans) {
+		reasons.skip = 'No nic_tags to filter on';
+		return (cb(null, servers, reasons));
+	}
 
 	adequateServers = servers.filter(function (server) {
 		var interfaces = server.sysinfo['Network Interfaces'];
@@ -76,7 +85,7 @@ filterVlans(log, servers, constraints)
 		return (true);
 	});
 
-	return ([adequateServers, reasons]);
+	return (cb(null, adequateServers, reasons));
 }
 
 function
diff --git a/lib/algorithms/hard-filter-vm-count.js b/lib/algorithms/hard-filter-vm-count.js
index f2ad7ed..8f24f73 100644
--- a/lib/algorithms/hard-filter-vm-count.js
+++ b/lib/algorithms/hard-filter-vm-count.js
@@ -17,12 +17,19 @@
  * number of VMs will be removed.
  */
 
+var assert = require('assert-plus');
+
 /* Default maximum number of VMs that can occupy a single server */
 var DEFAULT_VM_LIMIT = 224;
 
 function
-filterVmCount(log, servers, constraints)
+filterVmCount(log, servers, constraints, cb)
 {
+	assert.object(log);
+	assert.arrayOfObject(servers);
+	assert.object(constraints);
+	assert.func(cb);
+
 	var vmLimit = +constraints.defaults.filter_vm_limit || DEFAULT_VM_LIMIT;
 	var reasons = {};
 
@@ -45,7 +52,7 @@ filterVmCount(log, servers, constraints)
 		return (true);
 	});
 
-	return ([adequateServers, reasons]);
+	return (cb(null, adequateServers, reasons));
 }
 
 module.exports = {
diff --git a/lib/algorithms/hard-filter-volumes-from.js b/lib/algorithms/hard-filter-volumes-from.js
index 6c319e2..5373df1 100644
--- a/lib/algorithms/hard-filter-volumes-from.js
+++ b/lib/algorithms/hard-filter-volumes-from.js
@@ -13,9 +13,16 @@
  * volumes.
  */
 
+var assert = require('assert-plus');
+
 function
-filterVolumesFrom(log, servers, constraints)
+filterVolumesFrom(log, servers, constraints, cb)
 {
+	assert.object(log);
+	assert.arrayOfObject(servers);
+	assert.object(constraints);
+	assert.func(cb);
+
 	var adequateServers = servers;
 	var reasons = {};
 
@@ -57,7 +64,7 @@ filterVolumesFrom(log, servers, constraints)
 		return (true);
 	});
 
-	return ([adequateServers, reasons]);
+	return (cb(null, adequateServers, reasons));
 }
 
 module.exports = {
diff --git a/lib/algorithms/identity.js b/lib/algorithms/identity.js
index ed87306..1aba694 100644
--- a/lib/algorithms/identity.js
+++ b/lib/algorithms/identity.js
@@ -12,10 +12,17 @@
  * An identity function; returns the same servers it received.
  */
 
+var assert = require('assert-plus');
+
 function
-identity(log, servers)
+identity(log, servers, constraints, cb)
 {
-	return ([servers]);
+	assert.object(log);
+	assert.arrayOfObject(servers);
+	assert.object(constraints);
+	assert.func(cb);
+
+	return (cb(null, servers, {}));
 }
 
 module.exports = {
diff --git a/lib/algorithms/override-overprovisioning.js b/lib/algorithms/override-overprovisioning.js
index 3d3ed63..765843a 100644
--- a/lib/algorithms/override-overprovisioning.js
+++ b/lib/algorithms/override-overprovisioning.js
@@ -28,18 +28,27 @@
  * surprising things that are a pain to clean up will likely happen.
  */
 
+var assert = require('assert-plus');
+
 // Default overprovision ratios.
 var DEFAULT_CPU  = 4;
 var DEFAULT_RAM  = 1;
 var DEFAULT_DISK = 1;
 
 function
-overrideOverprovisioning(log, servers, constraints)
+overrideOverprovisioning(log, servers, constraints, cb)
 {
+	assert.object(log);
+	assert.arrayOfObject(servers);
+	assert.object(constraints);
+	assert.func(cb);
+
+	var reasons = {};
 	var defaults = constraints.defaults;
 
 	if (defaults.disable_override_overprovisioning) {
-		return ([servers]);
+		reasons.skip = 'Do not override overprovisioning numbers';
+		return (cb(null, servers, reasons));
 	}
 
 	var cpuRatio  = +defaults.overprovision_ratio_cpu || DEFAULT_CPU;
@@ -66,7 +75,7 @@ overrideOverprovisioning(log, servers, constraints)
 		delete pkg.overprovision_io;
 	}
 
-	return ([servers]);
+	return (cb(null, servers, reasons));
 }
 
 module.exports = {
diff --git a/lib/algorithms/score-current-platform.js b/lib/algorithms/score-current-platform.js
index c7ce7a5..17971c1 100644
--- a/lib/algorithms/score-current-platform.js
+++ b/lib/algorithms/score-current-platform.js
@@ -21,6 +21,7 @@
  * platform versions receive higher score increases.
  */
 
+var assert = require('assert-plus');
 var score = require('../scorers').linearBuckets;
 var f = require('util').format;
 
@@ -30,13 +31,18 @@ var WEEK = 7 * 24 * 60 * 60 * 1000; // in ms
 
 
 function
-scoreCurrentPlatform(log, servers, constraints)
+scoreCurrentPlatform(log, servers, constraints, cb)
 {
+	assert.object(log);
+	assert.arrayOfObject(servers);
+	assert.object(constraints);
+	assert.func(cb);
+
 	var reasons = {};
 
-	if (servers.length < 2) {
+	if (servers.length <= 1) {
 		reasons.skip = 'One or fewer servers';
-		return ([servers, reasons]);
+		return (cb(null, servers, reasons));
 	}
 
 	// slice() to create a shallow copy
@@ -66,7 +72,7 @@ scoreCurrentPlatform(log, servers, constraints)
 	// add scores to servers
 	score(log, buckets, Math.abs(weight), reasons);
 
-	return ([servers, reasons]);
+	return (cb(null, servers, reasons));
 }
 
 
diff --git a/lib/algorithms/score-next-reboot.js b/lib/algorithms/score-next-reboot.js
index 997ffe2..513d40b 100644
--- a/lib/algorithms/score-next-reboot.js
+++ b/lib/algorithms/score-next-reboot.js
@@ -21,6 +21,7 @@
  * be rebooted sooner receive higher score increases.
  */
 
+var assert = require('assert-plus');
 var score = require('../scorers').linearBuckets;
 
 
@@ -28,13 +29,18 @@ var WEEK = 7 * 24 * 60 * 60 * 1000; // in ms
 
 
 function
-scoreNextReboot(log, servers, constraints)
+scoreNextReboot(log, servers, constraints, cb)
 {
+	assert.object(log);
+	assert.arrayOfObject(servers);
+	assert.object(constraints);
+	assert.func(cb);
+
 	var reasons = {};
 
 	if (servers.length < 2) {
 		reasons.skip = 'One or fewer servers';
-		return ([servers, reasons]);
+		return (cb(null, servers, reasons));
 	}
 
 	var buckets = [];
@@ -94,7 +100,7 @@ scoreNextReboot(log, servers, constraints)
 	score(log, buckets, Math.abs(weight), reasons);
 
 	// return unsorted servers (but with mutated scores)
-	return ([servers, reasons]);
+	return (cb(null, servers, reasons));
 }
 
 
diff --git a/lib/algorithms/score-num-owner-zones.js b/lib/algorithms/score-num-owner-zones.js
index 113986d..a48423b 100644
--- a/lib/algorithms/score-num-owner-zones.js
+++ b/lib/algorithms/score-num-owner-zones.js
@@ -25,14 +25,20 @@
  * to the current owner receive an upper score increase of MIN_OWNER_WEIGHT.
  */
 
+var assert = require('assert-plus');
 var score = require('../scorers').linear;
 
 var MIN_OWNER_WEIGHT = 2;
 
 
 function
-scoreNumOwnerZones(log, servers, constraints)
+scoreNumOwnerZones(log, servers, constraints, cb)
 {
+	assert.object(log);
+	assert.arrayOfObject(servers);
+	assert.object(constraints);
+	assert.func(cb);
+
 	var ownerUuid = constraints.vm.owner_uuid;
 	var reasons = {};
 
@@ -47,7 +53,7 @@ scoreNumOwnerZones(log, servers, constraints)
 			reasons.skip = 'pkg or default set to spread with: ' +
 				serverSpread;
 
-			return ([servers, reasons]);
+			return (cb(null, servers, reasons));
 		}
 	}
 
@@ -55,7 +61,7 @@ scoreNumOwnerZones(log, servers, constraints)
 	var weight = compatWeight || +defaults.weight_num_owner_zones;
 	if (!weight) {
 		reasons.skip = 'Resolved score weight to 0; no changes';
-		return ([servers, reasons]);
+		return (cb(null, servers, reasons));
 	}
 
 	var deltas = {};
@@ -94,7 +100,7 @@ scoreNumOwnerZones(log, servers, constraints)
 		reasons[uuid] += '; ' + deltas[uuid] + ' owner zones found';
 	});
 
-	return ([servers, reasons]);
+	return (cb(null, servers, reasons));
 }
 
 
diff --git a/lib/algorithms/score-uniform-random.js b/lib/algorithms/score-uniform-random.js
index 33110c4..3c1da77 100644
--- a/lib/algorithms/score-uniform-random.js
+++ b/lib/algorithms/score-uniform-random.js
@@ -20,14 +20,20 @@
  * up to RANDOM_WEIGHT.
  */
 
+var assert = require('assert-plus');
 var score = require('../scorers').linear;
 
 var RANDOM_WEIGHT = 2;
 
 
 function
-scoreUniformRandom(log, servers, constraints)
+scoreUniformRandom(log, servers, constraints, cb)
 {
+	assert.object(log);
+	assert.arrayOfObject(servers);
+	assert.object(constraints);
+	assert.func(cb);
+
 	var reasons = {};
 
 	// backwards compat
@@ -42,7 +48,7 @@ scoreUniformRandom(log, servers, constraints)
 			reasons.skip = 'pkg or default set to spread with: ' +
 				serverSpread;
 
-			return ([servers, reasons]);
+			return (cb(null, servers, reasons));
 		}
 	}
 
@@ -50,7 +56,7 @@ scoreUniformRandom(log, servers, constraints)
 		+constraints.defaults.weight_uniform_random;
 	if (!weight) {
 		reasons.skip = 'Resolved score weight to 0; no changes';
-		return ([servers, reasons]);
+		return (cb(null, servers, reasons));
 	}
 
 	/* shallow copy to avoid mutating order of referred array */
@@ -68,7 +74,7 @@ scoreUniformRandom(log, servers, constraints)
 	// sortedServers and servers
 	score(log, sortedServers, Math.abs(weight), reasons);
 
-	return ([servers, reasons]);
+	return (cb(null, servers, reasons));
 }
 
 
diff --git a/lib/algorithms/score-unreserved-disk.js b/lib/algorithms/score-unreserved-disk.js
index 4cb339d..0c868b7 100644
--- a/lib/algorithms/score-unreserved-disk.js
+++ b/lib/algorithms/score-unreserved-disk.js
@@ -24,11 +24,12 @@
  * change any scores.
  */
 
+var assert = require('assert-plus');
 var score = require('../scorers').linear;
 
 
 function
-scoreUnreservedDisk(log, servers, constraints)
+scoreUnreservedDisk(log, servers, constraints, cb)
 {
 	var reasons = {};
 
@@ -41,13 +42,13 @@ scoreUnreservedDisk(log, servers, constraints)
 	if (serverSpread) {
 		reasons.skip = 'pkg or default set to spread with: ' +
 			serverSpread;
-		return ([servers, reasons]);
+		return (cb(null, servers, reasons));
 	}
 
 	var weight = +constraints.defaults.weight_unreserved_disk;
 	if (weight === 0) {
 		reasons.skip = 'Resolved score weight to 0; no changes';
-		return ([servers, reasons]);
+		return (cb(null, servers, reasons));
 	}
 
 	// shallow copy to avoid mutating order of referred array
@@ -62,7 +63,7 @@ scoreUnreservedDisk(log, servers, constraints)
 	// sortedServers and servers
 	score(log, sortedServers, Math.abs(weight), reasons);
 
-	return ([servers, reasons]);
+	return (cb(null, servers, reasons));
 }
 
 
diff --git a/lib/algorithms/score-unreserved-ram.js b/lib/algorithms/score-unreserved-ram.js
index 701ab90..5ad54f8 100644
--- a/lib/algorithms/score-unreserved-ram.js
+++ b/lib/algorithms/score-unreserved-ram.js
@@ -24,6 +24,7 @@
  * MAX_RAM_WEIGHT respectively.
  */
 
+var assert = require('assert-plus');
 var score = require('../scorers').linear;
 
 var MIN_RAM_WEIGHT = 2;
@@ -31,22 +32,27 @@ var MAX_RAM_WEIGHT = -2;
 
 
 function
-scoreUnreservedRam(log, servers, constraints)
+scoreUnreservedRam(log, servers, constraints, cb)
 {
+	assert.object(log);
+	assert.arrayOfObject(servers);
+	assert.object(constraints);
+	assert.func(cb);
+
 	var reasons = {};
 
 	// backwards compat
 	var compatWeight = getCompatWeight(constraints);
 	if (compatWeight === 0) {
 		reasons.skip = 'pkg or default set to score with other plugin';
-		return ([servers, reasons]);
+		return (cb(null, servers, reasons));
 	}
 
 	var weight = compatWeight ||
 		+constraints.defaults.weight_unreserved_ram;
 	if (!weight) {
 		reasons.skip = 'Resolved score weight to 0; no changes';
-		return ([servers, reasons]);
+		return (cb(null, servers, reasons));
 	}
 
 	// shallow copy to avoid mutating order of referred array
@@ -61,7 +67,7 @@ scoreUnreservedRam(log, servers, constraints)
 	// sortedServers and servers
 	score(log, sortedServers, Math.abs(weight), reasons);
 
-	return ([servers, reasons]);
+	return (cb(null, servers, reasons));
 }
 
 
diff --git a/lib/algorithms/soft-filter-locality-hints.js b/lib/algorithms/soft-filter-locality-hints.js
index 42fb826..4c43309 100644
--- a/lib/algorithms/soft-filter-locality-hints.js
+++ b/lib/algorithms/soft-filter-locality-hints.js
@@ -135,16 +135,17 @@ var shared = require('./shared/locality-hints');
  * Filter `servers` according to `constraints.vm.locality` rules.
  */
 function
-filterSoftLocality(log, servers, constraints)
+filterSoftLocality(log, servers, constraints, cb)
 {
 	assert.object(log, 'log');
 	assert.arrayOfObject(servers, 'servers');
 	assert.object(constraints, 'constraints');
 	assert.uuid(constraints.vm.owner_uuid, 'constraints.vm.owner_uuid');
 	var ownerUuid = constraints.vm.owner_uuid;
+	var reasons = {};
 
 	if (servers.length === 0) {
-		return ([servers]);
+		return (cb(null, servers, reasons));
 	}
 
 	// Parse "locality". See format notes in top-comment.
@@ -155,7 +156,6 @@ filterSoftLocality(log, servers, constraints)
 	var strict = Boolean(locality.strict);
 	var far = shared.normNearFar(locality.far, 'locality.far');
 	var near = shared.normNearFar(locality.near, 'locality.near');
-	var reasons = {};
 
 	if (near.length === 0 && far.length === 0) {
 		// Default behaviour: basic attempt to spread out the
@@ -164,7 +164,7 @@ filterSoftLocality(log, servers, constraints)
 	} else if (strict) {
 		reasons.skip = 'Strict locality requested and no spreading ' +
 			'needed';
-		return ([servers, reasons]);
+		return (cb(null, servers, reasons));
 	} else {
 		// Process `far` first (far wins over near, see notes above).
 		if (far.length > 0) {
@@ -178,7 +178,7 @@ filterSoftLocality(log, servers, constraints)
 		}
 	}
 
-	return ([servers, reasons]);
+	return (cb(null, servers, reasons));
 }
 
 
diff --git a/lib/allocator.js b/lib/allocator.js
index 51c1cfa..c0701fb 100644
--- a/lib/allocator.js
+++ b/lib/allocator.js
@@ -49,6 +49,7 @@
  * returned.
  */
 
+var assert = require('assert-plus');
 var mod_fs = require('fs');
 var create_uuid = require('node-uuid');
 
@@ -92,22 +93,15 @@ var Allocator = module.exports = function (log, description, defaults)
  * Takes a list of servers, and applies the algorithms to the list of servers to
  * select one for this allocation.
  */
-Allocator.prototype.allocate = function (servers, vm, img, pkg, tickets)
+Allocator.prototype.allocate = function (servers, vm, img, pkg, tickets, cb)
 {
 	var self = this;
-	var constraints;
-	var result;
-	var server;
-	var visitedAlgorithms;
-	var remainingServers;
-	var reasonsRemoved;
-	var stepSummary;
 
 	if (pkg) {
 		pkg = self._massagePkgData(pkg);
 	}
 
-	constraints = {
+	var constraints = {
 		vm: vm,
 		img: img,
 		pkg: pkg,
@@ -119,25 +113,28 @@ Allocator.prototype.allocate = function (servers, vm, img, pkg, tickets)
 		s.score = 0;
 	});
 
-	result = self._dispatch(self.allocServerExpr, servers, constraints);
-
-	// get server with highest score
-	if (result[0].length > 1) {
-		server = result[0].reduce(function (s1, s2) {
-			return (s1.score > s2.score ? s1 : s2);
-		});
-	} else {
-		server = result[0][0];
-	}
+	self._dispatch(self.allocServerExpr, servers, constraints,
+			function (err, filteredServers, visitedAlgorithms,
+			remainingServers, reasonsRemoved) {
+		if (err) {
+			return (cb(err));
+		}
 
-	visitedAlgorithms = result[1];
-	remainingServers = result[2];
-	reasonsRemoved = result[3];
+		// get server with highest score
+		var server;
+		if (filteredServers.length > 1) {
+			server = filteredServers.reduce(function (s1, s2) {
+				return (s1.score > s2.score ? s1 : s2);
+			});
+		} else {
+			server = filteredServers[0];
+		}
 
-	stepSummary = self._createPluginSummary(servers,
-	    visitedAlgorithms, remainingServers, reasonsRemoved);
+		var stepSummary = self._createPluginSummary(servers,
+			visitedAlgorithms, remainingServers, reasonsRemoved);
 
-	return ([server, stepSummary]);
+		return (cb(null, server, stepSummary));
+	});
 };
 
 
@@ -150,7 +147,7 @@ Allocator.prototype.allocate = function (servers, vm, img, pkg, tickets)
  * If a server isn't setup or valid, the reason for it being removed is also
  * indicated.
  */
-Allocator.prototype.serverCapacity = function (servers)
+Allocator.prototype.serverCapacity = function (servers, cb)
 {
 	var self = this;
 
@@ -158,33 +155,33 @@ Allocator.prototype.serverCapacity = function (servers)
 		s.score = 0;
 	});
 
-	var result = self._dispatch(self.serverCapacityExpr, servers, {});
-	var reasonsRemoved;
-	var serversUnreserved;
-	var reasons;
-
-	servers = result[0];
-	reasonsRemoved = result[3];
-
-	/* extract unreserved_ values from each server */
-	serversUnreserved = {};
-	servers.forEach(function (server) {
-		serversUnreserved[server.uuid] = {
-			cpu: server.unreserved_cpu,	/* centi-CPUs */
-			ram: server.unreserved_ram,	/* MiB */
-			disk: server.unreserved_disk	/* MiB */
-		};
-	});
-
-	/* merge all the reasons (why a server was removed) hashes into one */
-	reasons = {};
-	reasonsRemoved.forEach(function (serverReasons) {
-		for (var key in serverReasons) {
-			reasons[key] = serverReasons[key];
+	self._dispatch(self.serverCapacityExpr, servers, {},
+			function (err, filteredServers, visitedAlgorithms,
+			remainingServers, reasonsRemoved) {
+		if (err) {
+			return (cb(err));
 		}
-	});
 
-	return ([serversUnreserved, reasons]);
+		/* extract unreserved_ values from each server */
+		var serversUnreserved = {};
+		filteredServers.forEach(function (server) {
+			serversUnreserved[server.uuid] = {
+				cpu: server.unreserved_cpu,	/* centi-CPUs */
+				ram: server.unreserved_ram,	/* MiB */
+				disk: server.unreserved_disk	/* MiB */
+			};
+		});
+
+		/* merge all the reasons (why a server was removed) hashes */
+		var reasons = {};
+		reasonsRemoved.forEach(function (serverReasons) {
+			for (var key in serverReasons) {
+				reasons[key] = serverReasons[key];
+			}
+		});
+
+		return (cb(err, serversUnreserved, reasons));
+	});
 };
 
 
@@ -192,146 +189,106 @@ Allocator.prototype.serverCapacity = function (servers)
  * Takes an array of plugins with a command prefix, and dispatches the array
  * of plugins to a function that can handle the command prefix. There are
  * two recognized commands: 'pipe' and 'or'.
- */
-Allocator.prototype._dispatch = function (algorithms, servers, constraints)
-{
-	var self = this;
-	var result;
-	var command;
-
-	/* we don't use shift(), to avoid modifying the referenced object */
-	command = algorithms[0];
-	algorithms = algorithms.slice(1, algorithms.length);
-
-	if (command === 'pipe' || command === 'or')
-		self.log.trace('Dispatching on "' + command + '"');
-
-	if (command === 'pipe') {
-		result = self._pipe(algorithms, servers, constraints);
-	} else if (command === 'or') {
-		result = self._or(algorithms, servers, constraints);
-	} else {
-		self.log.error('Bad sexp command: ' + command);
-		process.exit(1);
-	}
-
-	return (result);
-};
-
-
-/*
- * Takes an array of plugins, and forms a pipeline between all of them. A list
+ *
+ * When the command is 'pipe': forms a pipeline between all plugins. A list
  * of servers is fed in to the first plugin, the servers the first plugin
  * returns are fed to the second plugin, and so on; this continues until all
  * plugins (or sub-expressions) are run, or until a plugin returns no servers.
+ *
+ * When the command is 'or': feeds the same list of servers to each plugin in
+ * turn until a plugin returns a non-empty list of servers.
  */
-Allocator.prototype._pipe = function (algorithms, servers, constraints)
+Allocator.prototype._dispatch =
+function (algorithms, initialServers, constraints, cb)
 {
 	var self = this;
 	var log = self.log;
-	var visitedAlgorithms = [];
+	var visitedAlgos = [];
 	var remainingServers = [];
-	var reasonsRemoved = [];
+	var reasons = [];
+	var algorithm;
+	var startTime;
 
-	for (var i = 0; i < algorithms.length && servers.length !== 0; i++) {
-		var algorithm = algorithms[i];
-		var startTime;
-		var reasons;
-		var serverUuids;
-		var timeElapsed;
+	/* we don't use shift(), to avoid modifying the referenced object */
+	var command = algorithms[0];
+	self.log.trace('Dispatching on "' + command + '"');
+	assert.ok(command === 'pipe' || command === 'or', 'command valid');
+	algorithms = algorithms.slice(1, algorithms.length);
 
-		if (Array.isArray(algorithm)) {
-			var results = self._dispatch(algorithm,
-			    servers, constraints);
-			servers = results[0];
-			visitedAlgorithms =
-			    visitedAlgorithms.concat(results[1]);
-			remainingServers = remainingServers.concat(results[2]);
-			reasonsRemoved = reasonsRemoved.concat(results[3]);
-			continue;
+	function ranAlgorithms(err, servers, _visitedAlgos, _remainingServers,
+			_reasons) {
+		if (err) {
+			return (cb(err));
 		}
 
-		startTime = new Date();
+		visitedAlgos = visitedAlgos.concat(_visitedAlgos);
+		remainingServers = remainingServers.concat(_remainingServers);
+		reasons = reasons.concat(_reasons);
 
-		results = algorithm.run(log, servers, constraints);
-		servers = results[0];
-		reasons = results[1];
+		return (step(servers));
+	}
+
+	function ranAlgorithm(err, servers, _reasons) {
+		if (err) {
+			return (cb(err));
+		}
 
-		visitedAlgorithms.push(algorithm);
-		reasonsRemoved.push(reasons);
+		reasons.push(_reasons);
+		visitedAlgos.push(algorithm);
 
-		serverUuids = servers.map(function (s) { return s.uuid; });
+		var serverUuids = servers.map(function (s) {
+			return (s.uuid);
+		});
 		remainingServers.push(serverUuids);
 
-		timeElapsed = Math.floor(new Date() - startTime);
+		var timeDelta = Math.floor(new Date() - startTime);
 		log.debug({ serverUuids: serverUuids },
-		    '%s returned %d server(s) in %d ms',
-		    algorithm.name, serverUuids.length, timeElapsed);
+			'%s returned %d server(s) in %d ms',
+			algorithm.name, serverUuids.length, timeDelta);
+
+		return (step(servers));
 	}
 
-	return ([ servers, visitedAlgorithms,
-	    remainingServers, reasonsRemoved ]);
-};
+	var idx = 0;
+	function step(stepServers) {
+		if (idx === algorithms.length) {
+			return (cb(null, stepServers, visitedAlgos,
+				remainingServers, reasons));
+		}
 
+		if ((command === 'pipe' && stepServers.length === 0) ||
+		    (command === 'or' && stepServers.length > 0)) {
+			return (cb(null, stepServers, visitedAlgos,
+				remainingServers, reasons));
+		}
 
-/*
- * Takes an array of plugins, and feeds the list of servers to each plugin in
- * turn until a plugin returns a non-empty list of servers.
- */
-Allocator.prototype._or = function (algorithms, initialServers, constraints)
-{
-	var self = this;
-	var log = self.log;
-	var visitedAlgorithms = [];
-	var remainingServers = [];
-	var reasonsRemoved = [];
-	var servers = [];
+		algorithm = algorithms[idx];
+		idx += 1;
 
-	for (var i = 0; i < algorithms.length; i++) {
-		var algorithm = algorithms[i];
+		var argServers;
+		if (command === 'pipe') {
+			argServers = stepServers;
+		} else { // command === 'or'
+			argServers = initialServers;
+		}
 
 		if (Array.isArray(algorithm)) {
-			var results = self._dispatch(algorithm,
-			    initialServers, constraints);
-			servers = results[0];
-			visitedAlgorithms =
-			    visitedAlgorithms.concat(results[1]);
-			remainingServers = remainingServers.concat(results[2]);
-			reasonsRemoved = reasonsRemoved.concat(results[3]);
+			self._dispatch(algorithm, argServers, constraints,
+				ranAlgorithms);
 		} else {
-			var startTime;
-			var result;
-			var reasons;
-			var serverUuids;
-			var timeElapsed;
-
 			startTime = new Date();
-
-			result = algorithm.run(log,
-				initialServers, constraints);
-			servers = result[0];
-			reasons = result[1];
-
-			visitedAlgorithms.push(algorithm);
-			reasonsRemoved.push(reasons);
-
-			serverUuids = servers.map(function (s) {
-				return (s.uuid);
-			});
-			remainingServers.push(serverUuids);
-
-			timeElapsed = Math.floor(new Date() - startTime);
-			log.debug({ serverUuids: serverUuids },
-			    '%s returned %d server(s) in %d ms',
-			    algorithm.name, serverUuids.length, timeElapsed);
+			algorithm.run(log, argServers, constraints,
+				ranAlgorithm);
 		}
 
-		if (servers.length > 0)
-			break;
+		return (null); // to silence linter
 	}
 
-	return ([ servers, visitedAlgorithms,
-	    remainingServers, reasonsRemoved ]);
+	if (command === 'pipe') {
+		step(initialServers);
+	} else { // command === 'or'
+		step([]);
+	}
 };
 
 
diff --git a/lib/scorers.js b/lib/scorers.js
index 1b6b0a9..21c45b6 100644
--- a/lib/scorers.js
+++ b/lib/scorers.js
@@ -8,7 +8,7 @@
  * Copyright (c) 2016, Joyent, Inc.
  */
 
-var assert = require('assert');
+var assert = require('assert-plus');
 
 
 /*
diff --git a/test/algorithms/calculate-server-unreserved.test.js b/test/algorithms/calculate-server-unreserved.test.js
index 2876ec3..eab2823 100644
--- a/test/algorithms/calculate-server-unreserved.test.js
+++ b/test/algorithms/calculate-server-unreserved.test.js
@@ -186,33 +186,35 @@ test('calculateServerUnreserved()', function (t) {
 	];
 
 	var constraints = {};
-	var results = filter.run(log, serversInfo, constraints);
-	var servers = results[0];
-	var reasons = results[1];
-	t.deepEqual(servers, serversInfo);
-	t.deepEqual(reasons, undefined);
+	filter.run(log, serversInfo, constraints,
+			function (err, servers, reasons) {
+		t.ifError(err);
 
-	t.equal(servers[0].unreserved_disk, 1912954);
-	t.equal(servers[0].unreserved_ram,  209);
-	t.equal(servers[0].unreserved_cpu,  1425);
+		t.deepEqual(servers, serversInfo);
+		t.deepEqual(reasons, {});
 
-	t.equal(servers[1].unreserved_disk, 1925242);
-	t.equal(servers[1].unreserved_ram,  1924);
-	t.equal(servers[1].unreserved_cpu,  2225);
+		t.equal(servers[0].unreserved_disk, 1912954);
+		t.equal(servers[0].unreserved_ram,  209);
+		t.equal(servers[0].unreserved_cpu,  1425);
 
-	t.equal(servers[2].unreserved_disk, 3906805);
-	t.equal(servers[2].unreserved_ram,  4331);
-	t.equal(servers[2].unreserved_cpu,  2500);
+		t.equal(servers[1].unreserved_disk, 1925242);
+		t.equal(servers[1].unreserved_ram,  1924);
+		t.equal(servers[1].unreserved_cpu,  2225);
 
-	t.equal(servers[3].unreserved_disk, 3865845);
-	t.equal(servers[3].unreserved_ram,  2965);
-	t.equal(servers[3].unreserved_cpu,  2750);
+		t.equal(servers[2].unreserved_disk, 3906805);
+		t.equal(servers[2].unreserved_ram,  4331);
+		t.equal(servers[2].unreserved_cpu,  2500);
 
-	t.equal(servers[4].unreserved_disk, 922746);
-	t.equal(servers[4].unreserved_ram,  209);
-	t.equal(servers[4].unreserved_cpu,  1425);
+		t.equal(servers[3].unreserved_disk, 3865845);
+		t.equal(servers[3].unreserved_ram,  2965);
+		t.equal(servers[3].unreserved_cpu,  2750);
 
-	t.end();
+		t.equal(servers[4].unreserved_disk, 922746);
+		t.equal(servers[4].unreserved_ram,  209);
+		t.equal(servers[4].unreserved_cpu,  1425);
+
+		t.end();
+	});
 });
 
 
@@ -220,14 +222,15 @@ test('calculateServerUnreserved() with no servers', function (t) {
 	var serversInfo = [];
 	var constraints = {};
 
-	var results = filter.run(log, serversInfo, constraints);
-	var servers = results[0];
-	var reasons = results[1];
+	filter.run(log, serversInfo, constraints,
+			function (err, servers, reasons) {
+		t.ifError(err);
 
-	t.deepEqual(servers, []);
-	t.deepEqual(reasons, undefined);
+		t.deepEqual(servers, []);
+		t.deepEqual(reasons, {});
 
-	t.end();
+		t.end();
+	});
 });
 
 
diff --git a/test/algorithms/calculate-ticketed-vms.test.js b/test/algorithms/calculate-ticketed-vms.test.js
index 119055f..4846f07 100644
--- a/test/algorithms/calculate-ticketed-vms.test.js
+++ b/test/algorithms/calculate-ticketed-vms.test.js
@@ -11,14 +11,14 @@
 var test = require('tape');
 var filter = require('../../lib/algorithms/calculate-ticketed-vms.js');
 
-var log = {
+var LOG = {
 	trace: function () { return (true); },
 	debug: function () { return (true); }
 };
 
 var GiB = 1024 * 1024 * 1024;
 
-var serversInfo = [ {
+var SERVERS = [ {
 	uuid: '7f9b1a24-dd28-430e-92ed-604fed51772b',
 	disk_kvm_zvol_volsize_bytes: 25 * GiB,
 	disk_zone_quota_bytes: 5 * GiB,
@@ -81,7 +81,7 @@ var serversInfo = [ {
 	disk_zone_quota_bytes: 0
 } ];
 
-var tickets = [ {
+var TICKETS = [ {
 	// this should be skipped, since it's finished
 	uuid: '2fffa3a4-1dd9-4eab-a324-b49854b169e9',
 	server_uuid: '67e48c2e-45bb-400a-bc7d-3143894aacfa',
@@ -199,85 +199,91 @@ var tickets = [ {
 	}
 } ];
 
+
 test('calculate ticketed VMs', function (t) {
-	var constraints = { tickets: tickets };
-	var results = filter.run(log, serversInfo, constraints);
-	var servers = results[0];
-	var reasons = results[1];
-	// t.deepEqual(servers, serversInfo);
-	t.deepEqual(reasons, undefined);
+	var ownerUuid = '930896af-bf8c-48d4-885c-6573a94b1853';
+
+	var constraints = { tickets: TICKETS };
+	filter.run(LOG, SERVERS, constraints, function (err, servers, reasons) {
+		t.ifError(err);
 
-	t.deepEqual(servers[0], serversInfo[0]);
+		// t.deepEqual(servers, serversInfo);
+		t.deepEqual(reasons, {});
 
-	var server = servers[1];
-	delete server.vms['8e54da2f-996f-491c-92ff-1b1d6c48f314'].last_modified;
-	t.deepEqual(server, {
-		uuid: '67e48c2e-45bb-400a-bc7d-3143894aacfa',
-		disk_kvm_zvol_volsize_bytes: 0,
-		disk_zone_quota_bytes: 10 * GiB,
-		vms: {
-			'8e54da2f-996f-491c-92ff-1b1d6c48f314': {
-				uuid: '8e54da2f-996f-491c-92ff-1b1d6c48f314',
-				owner_uuid: '930896af-bf8c-48d4-885c-' +
-					'6573a94b1853',
-				max_physical_memory: 768,
-				cpu_cap: 150,
-				quota: 10,
-				brand: 'smartos',
-				zone_state: 'running',
-				state: 'running'
+		t.deepEqual(servers[0], SERVERS[0]);
+
+		var vmUuid = '8e54da2f-996f-491c-92ff-1b1d6c48f314';
+		var server = servers[1];
+		delete server.vms[vmUuid].last_modified;
+		t.deepEqual(server, {
+			uuid: '67e48c2e-45bb-400a-bc7d-3143894aacfa',
+			disk_kvm_zvol_volsize_bytes: 0,
+			disk_zone_quota_bytes: 10 * GiB,
+			vms: {
+				'8e54da2f-996f-491c-92ff-1b1d6c48f314': {
+					uuid: vmUuid,
+					owner_uuid: ownerUuid,
+					max_physical_memory: 768,
+					cpu_cap: 150,
+					quota: 10,
+					brand: 'smartos',
+					zone_state: 'running',
+					state: 'running'
+				}
 			}
-		}
-	});
+		});
 
-	server = servers[2];
-	delete server.vms['cbd5b6b3-861d-44d1-a2b7-65ea39ada45a'].last_modified;
-	t.deepEqual(server, {
-		uuid: '0c104a5b-1844-4205-821b-f0c989ccf6e7',
-		disk_kvm_zvol_volsize_bytes: 25 * GiB,
-		disk_zone_quota_bytes: 10 * GiB, // for root kvm dataset
-		vms: {
-			'cbd5b6b3-861d-44d1-a2b7-65ea39ada45a': {
-				uuid: 'cbd5b6b3-861d-44d1-a2b7-65ea39ada45a',
-				owner_uuid: '930896af-bf8c-48d4-885c-' +
-					'6573a94b1853',
-				max_physical_memory: 3072,
-				cpu_cap: 600,
-				quota: 10,
-				brand: 'kvm',
-				zone_state: 'running',
-				state: 'running'
+		vmUuid = 'cbd5b6b3-861d-44d1-a2b7-65ea39ada45a';
+		server = servers[2];
+		delete server.vms[vmUuid].last_modified;
+		t.deepEqual(server, {
+			uuid: '0c104a5b-1844-4205-821b-f0c989ccf6e7',
+			disk_kvm_zvol_volsize_bytes: 25 * GiB,
+			disk_zone_quota_bytes: 10 * GiB, // for root kvm dataset
+			vms: {
+				'cbd5b6b3-861d-44d1-a2b7-65ea39ada45a': {
+					uuid: vmUuid,
+					owner_uuid: ownerUuid,
+					max_physical_memory: 3072,
+					cpu_cap: 600,
+					quota: 10,
+					brand: 'kvm',
+					zone_state: 'running',
+					state: 'running'
+				}
 			}
-		}
-	});
+		});
 
-	t.end();
+		t.end();
+	});
 });
 
+
 test('calculate ticketed VMs with no servers', function (t) {
-	var constraints = { tickets: tickets };
+	var constraints = { tickets: TICKETS };
 
-	var results = filter.run(log, [], constraints);
-	var servers = results[0];
-	var reasons = results[1];
+	filter.run(LOG, [], constraints, function (err, servers, reasons) {
+		t.ifError(err);
 
-	t.deepEqual(servers, []);
-	t.deepEqual(reasons, undefined);
+		t.deepEqual(servers, []);
+		t.deepEqual(reasons, {});
 
-	t.end();
+		t.end();
+	});
 });
 
+
 test('calculate ticketed VMs with no tickets', function (t) {
 	var constraints = { tickets: [] };
 
-	var results = filter.run(log, serversInfo, constraints);
-	var servers = results[0];
-	var reasons = results[1];
+	filter.run(LOG, SERVERS, constraints, function (err, servers, reasons) {
+		t.ifError(err);
 
-	t.deepEqual(servers, serversInfo);
-	t.deepEqual(reasons, undefined);
+		t.deepEqual(servers, SERVERS);
+		t.deepEqual(reasons, {});
 
-	t.end();
+		t.end();
+	});
 });
 
 test('name', function (t) {
diff --git a/test/algorithms/common.js b/test/algorithms/common.js
index 5443511..8f9f1b0 100644
--- a/test/algorithms/common.js
+++ b/test/algorithms/common.js
@@ -8,12 +8,43 @@
  * Copyright (c) 2016, Joyent, Inc.
  */
 
+var assert = require('assert-plus');
+
 
 function clone(obj) {
 	return (JSON.parse(JSON.stringify(obj)));
 }
 
 
+function createPluginChecker(plugin, log) {
+	assert.object(plugin);
+	assert.object(log);
+
+	return function checkPlugin(t, givenServers, constraints, expectServers,
+			expectReasons) {
+		assert.object(t);
+		assert.object(constraints);
+		assert.object(expectReasons);
+		assert.arrayOfObject(givenServers);
+		assert.arrayOfObject(expectServers);
+
+		plugin.run(log, clone(givenServers), constraints,
+				function (err, servers, reasons) {
+			assert.arrayOfObject(servers);
+			assert.object(reasons);
+
+			t.ifError(err);
+
+			t.deepEqual(servers, expectServers);
+			t.deepEqual(reasons, expectReasons);
+
+			t.end();
+		});
+	};
+}
+
+
 module.exports = {
+	createPluginChecker: createPluginChecker,
 	clone: clone
 };
diff --git a/test/algorithms/hard-filter-capness.test.js b/test/algorithms/hard-filter-capness.test.js
index e4f3871..205e281 100644
--- a/test/algorithms/hard-filter-capness.test.js
+++ b/test/algorithms/hard-filter-capness.test.js
@@ -10,14 +10,15 @@
 
 var test = require('tape');
 var filter = require('../../lib/algorithms/hard-filter-capness.js');
+var common = require('./common.js');
 
 
-var log = {
+var LOG = {
 	trace: function () { return (true); },
 	debug: function () { return (true); }
 };
 
-var servers = [ {
+var SERVERS = [ {
 	uuid: 'cdfe84c4-f7cc-4104-bc24-45f786bce762',
 	vms : {
 		'e34f6924-59ba-4242-8633-4aad203d060f': {
@@ -67,70 +68,57 @@ var servers = [ {
 } ];
 
 
-test('filterCapness() with package with cpu_cap', function (t) {
-	var expectedServers = [ servers[0], servers[4] ];
-	var constraints = {
-		vm: {},
-		pkg: { cpu_cap: 100 }
-	};
-
-	var results = filter.run(log, servers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+var checkFilter = common.createPluginChecker(filter, LOG);
 
-	t.deepEqual(filteredServers, expectedServers);
 
-	t.deepEqual(reasons, {
+test('filterCapness() with package with cpu_cap', function (t) {
+	var expectServers = [ SERVERS[0], SERVERS[4] ];
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'49878ba3-e28e-48c6-83c7-21dca018e69b': 'VM c9e59c1c-555d-4646-8791-606ef9429d93 has no cpu_cap, while the package does',
   		'8564ad6c-bfbc-475e-8b53-46bee1058a58': 'VM 3c8ef669-4a79-4eaa-bb0b-1fd413328844 has no cpu_cap, while the package does',
   		'45808bd4-a66c-400f-b138-4ff3bdd76d4c': 'VM 7650edda-e451-4b51-8168-3dbbcf2e71c1 has no cpu_cap, while the package does'
 		/* END JSSTYLED */
-	});
-
-	t.end();
-});
-
+	};
 
-test('filterCapness() with package without cpu_cap', function (t) {
-	var expectedServers = [ servers[1], servers[4] ];
 	var constraints = {
 		vm: {},
-		pkg: {}
+		pkg: { cpu_cap: 100 }
 	};
 
-	var results = filter.run(log, servers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
 
-	t.deepEqual(filteredServers, expectedServers);
 
-	t.deepEqual(reasons, {
+test('filterCapness() with package without cpu_cap', function (t) {
+	var expectServers = [ SERVERS[1], SERVERS[4] ];
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'cdfe84c4-f7cc-4104-bc24-45f786bce762': 'VM e34f6924-59ba-4242-8633-4aad203d060f has a cpu_cap, while the package does not',
   		'8564ad6c-bfbc-475e-8b53-46bee1058a58': 'VM 56b0465c-97f6-46f1-8d13-e8d87a3de558 has a cpu_cap, while the package does not',
   		'45808bd4-a66c-400f-b138-4ff3bdd76d4c': 'VM acc16d76-42f6-414b-92ce-557e72663c58 has a cpu_cap, while the package does not'
 		/* END JSSTYLED */
-	});
+	};
 
-	t.end();
+	var constraints = {
+		vm: {},
+		pkg: {}
+	};
+
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('filterCapness() with no servers', function (t) {
+	var expectServers = [];
+	var expectReasons = {};
+
 	var constraints = {
 		vm: {},
 		pkg: {}
 	};
 
-	var results = filter.run(log, [], constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, []);
-	t.deepEqual(reasons, {});
-
-	t.end();
+	checkFilter(t, [], constraints, expectServers, expectReasons);
 });
 
 
diff --git a/test/algorithms/hard-filter-headnode.test.js b/test/algorithms/hard-filter-headnode.test.js
index 962e06b..ac48d36 100644
--- a/test/algorithms/hard-filter-headnode.test.js
+++ b/test/algorithms/hard-filter-headnode.test.js
@@ -10,50 +10,51 @@
 
 var test = require('tape');
 var filter = require('../../lib/algorithms/hard-filter-headnode.js');
+var common = require('./common.js');
 
 
-var log = {
+var LOG = {
 	trace: function () { return (true); },
 	debug: function () { return (true); }
 };
 
+var SERVERS = [
+	{ memory_available_bytes: 256 },
+	{ memory_available_bytes: 512, headnode: true },
+	{ memory_available_bytes: 768, headnode: false }
+];
 
-test('filterHeadnode()', function (t) {
-	var givenServers = [
-		{ memory_available_bytes: 256 },
-		{ memory_available_bytes: 512, headnode: true },
-		{ memory_available_bytes: 768, headnode: false }
-	];
 
-	var expectedServers = [ givenServers[0], givenServers[2] ];
+var checkFilter = common.createPluginChecker(filter, LOG);
+
+
+test('filterHeadnode() 1', function (t) {
+	var expectServers = [ SERVERS[0], SERVERS[2] ];
+	var expectReasons = {};
+
 	var constraints = { defaults: {} };
 
-	var results = filter.run(log, givenServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
 
-	t.deepEqual(filteredServers, expectedServers);
-	t.deepEqual(reasons, undefined);
 
-	constraints = { defaults: { filter_headnode: false } };
-	results = filter.run(log, givenServers, constraints);
-	t.deepEqual(results[0], givenServers);
+test('filterHeadnode() 2', function (t) {
+	var expectServers = SERVERS;
+	var expectReasons = { skip: 'Do not filter out headnodes' };
 
-	t.end();
+	var constraints = { defaults: { filter_headnode: false } };
+
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('filterHeadnode() with no servers', function (t) {
-	var constraints = { defaults: {} };
-
-	var results = filter.run(log, [], constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+	var expectServers = [];
+	var expectReasons = {};
 
-	t.equal(filteredServers.length, 0);
-	t.deepEqual(reasons, undefined);
+	var constraints = { defaults: {} };
 
-	t.end();
+	checkFilter(t, [], constraints, expectServers, expectReasons);
 });
 
 
diff --git a/test/algorithms/hard-filter-invalid-servers.test.js b/test/algorithms/hard-filter-invalid-servers.test.js
index f4c5ff1..1d318d5 100644
--- a/test/algorithms/hard-filter-invalid-servers.test.js
+++ b/test/algorithms/hard-filter-invalid-servers.test.js
@@ -11,28 +11,27 @@
 var test = require('tape');
 var mod_fs = require('fs');
 var filter = require('../../lib/algorithms/hard-filter-invalid-servers.js');
+var common = require('./common.js');
 
 
-var log = {
+var LOG = {
 	trace: function () { return (true); },
 	debug: function () { return (true); },
 	warn:  function () { return (true); }
 };
 
 
-test('filterInvalidServers()', function (t) {
-	var serversInfo = JSON.parse(mod_fs.readFileSync(__dirname +
-	    '/hf-invalid-servers.json'));
+var checkFilter = common.createPluginChecker(filter, LOG);
 
-	var constraints = {};
 
-	var results = filter.run(log, serversInfo, constraints);
-	var servers = results[0];
-	var reasons = results[1];
-	t.equal(servers.length, 1);
-	t.deepEqual(servers[0].uuid, '2bb4c1de-16b5-11e4-8e8e-07469af29312');
+test('filterInvalidServers()', function (t) {
+	var servers = JSON.parse(mod_fs.readFileSync(__dirname +
+		'/hf-invalid-servers.json'));
 
-	var expectedReasons = {
+	var expectServers = servers.filter(function (server) {
+		return (server.uuid === '2bb4c1de-16b5-11e4-8e8e-07469af29312');
+	});
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'dd5dac66-b4be-4b75-859b-b375bc577e90': 'property "vms.b3d04682-536f-4f09-8170-1954e45e9e1c.owner_uuid": is missing and it is required',
 		'390d2a35-8b54-449a-a82d-6c0c623afc8c': 'property "memory_total_bytes": is missing and it is required',
@@ -42,26 +41,22 @@ test('filterInvalidServers()', function (t) {
 		'bc19a132-a1d7-408d-a8b3-73453c7d4f0b': 'property "vms.d95e64c8-da45-4b81-a044-89e26db43cbc.state": is missing and it is required',
 		'e4c4b6ee-3cfa-11e6-9214-28cfe91f7d53': 'property "disk_pool_alloc_bytes": is missing and it is required'
 		/* END JSSTYLED */
-
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	t.end();
+	var constraints = {};
+
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
 });
 
 
 test('filterInvalidServers() with no servers', function (t) {
-	var serversInfo = [];
-	var constraints = {};
-
-	var results = filter.run(log, serversInfo, constraints);
-	var servers = results[0];
-	var reasons = results[1];
+	var expectServers = [];
+	var expectReasons = {};
 
-	t.deepEqual(servers, []);
-	t.deepEqual(reasons, {});
+	var servers = [];
+	var constraints = {};
 
-	t.end();
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
 });
 
 
diff --git a/test/algorithms/hard-filter-large-servers.test.js b/test/algorithms/hard-filter-large-servers.test.js
index 87a7f45..6c20c44 100644
--- a/test/algorithms/hard-filter-large-servers.test.js
+++ b/test/algorithms/hard-filter-large-servers.test.js
@@ -10,54 +10,53 @@
 
 var test = require('tape');
 var filter = require('../../lib/algorithms/hard-filter-large-servers.js');
+var common = require('./common.js');
 
 
-var log = {
+var LOG = {
 	trace: function () { return (true); },
 	debug: function () { return (true); }
 };
 
 
-var givenServers = [];
+var SERVERS = [];
 for (var ii = 0; ii < 20; ii++)
-	givenServers.push({ unreserved_ram: ii * 8 * 1024 });
+	SERVERS.push({ unreserved_ram: ii * 8 * 1024 });
+
+
+var checkFilter = common.createPluginChecker(filter, LOG);
 
 
 test('filterLargeServers()', function (t) {
-	var expectedServers =
-	    givenServers.slice(0, givenServers.length - 3).reverse();
+	var expectServers = SERVERS.slice(0, SERVERS.length - 3).reverse();
+	var expectReasons = {};
+
 	var constraints = { defaults: {} };
 
-	var results = filter.run(log, givenServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
 
-	t.deepEqual(filteredServers, expectedServers);
-	t.deepEqual(reasons, undefined);
 
-	constraints = { defaults: { filter_large_servers: false } };
-	results = filter.run(log, givenServers, constraints);
-	t.deepEqual(results[0], givenServers);
+test('filterLargeServers() with override', function (t) {
+	var expectServers = SERVERS;
+	var expectReasons = { skip: 'Do not filter out large servers' };
 
-	t.end();
+	var constraints = { defaults: { filter_large_servers: false } };
+
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('filterLargeServers with no servers', function (t) {
-	var servers = [];
+	var expectServers = [];
+	var expectReasons = {};
+
 	var constraints = {
 		vm: { ram: 34 * 1024 }, // in MiB
 		defaults: {}
 	};
 
-	var results = filter.run(log, servers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, []);
-	t.deepEqual(reasons, undefined);
-
-	t.end();
+	checkFilter(t, [], constraints, expectServers, expectReasons);
 });
 
 
diff --git a/test/algorithms/hard-filter-locality-hints.test.js b/test/algorithms/hard-filter-locality-hints.test.js
index 615e1e5..16efd79 100644
--- a/test/algorithms/hard-filter-locality-hints.test.js
+++ b/test/algorithms/hard-filter-locality-hints.test.js
@@ -10,19 +10,18 @@
 
 var genUuid = require('node-uuid');
 var test = require('tape');
-
 var filter = require('../../lib/algorithms/hard-filter-locality-hints.js');
+var common = require('./common.js');
 
 
 // --- globals
 
-var log = {
+var LOG = {
 	trace: function () { return (true); },
 	debug: function () { return (true); }
 };
 
-var ownerUuid = 'b0bbbbbb-9172-4c58-964e-fe58a9989708';
-
+var OWNER_UUID = 'b0bbbbbb-9172-4c58-964e-fe58a9989708';
 
 // --- internal support stuff
 
@@ -33,10 +32,10 @@ genVms(numVms, numOwnerVms)
 
 	var data = [];
 	for (var i = 0; i !== numOwnerVms; i++) {
-		data.push([genUuid(), {owner_uuid: ownerUuid}]);
+		data.push([genUuid(), { owner_uuid: OWNER_UUID }]);
 	}
 	for (i = 0; i !== numVms - numOwnerVms; i++) {
-		data.push([genUuid(), {owner_uuid: genUuid()}]);
+		data.push([genUuid(), { owner_uuid: genUuid() }]);
 	}
 
 	shuffleArray(data);
@@ -48,6 +47,9 @@ genVms(numVms, numOwnerVms)
 }
 
 
+var checkFilter = common.createPluginChecker(filter, LOG);
+
+
 /**
  * Randomize array element order in-place.
  * Using Fisher-Yates shuffle algorithm.
@@ -78,33 +80,27 @@ test('name', function (t) {
 	t.end();
 });
 
+
 test('no locality, no servers', function (t) {
-	var servers = [];
-	var constraints = { vm: { owner_uuid: ownerUuid } };
+	var expectServers = [];
+	var expectReasons = {};
 
-	var results = filter.run(log, servers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+	var constraints = { vm: { owner_uuid: OWNER_UUID } };
 
-	t.equal(filteredServers.length, 0);
-	t.deepEqual(reasons, undefined);
-	t.end();
+	checkFilter(t, [], constraints, expectServers, expectReasons);
 });
 
+
 test('locality, no servers', function (t) {
-	var servers = [];
+	var expectServers = [];
+	var expectReasons = {};
+
 	var constraints = { vm: {
-		owner_uuid: ownerUuid,
+		owner_uuid: OWNER_UUID,
 		locality: { near: '468994e6-d53d-c74c-8245-3273a86dc3d9' }
 	}};
 
-	var results = filter.run(log, servers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.equal(filteredServers.length, 0);
-	t.deepEqual(reasons, undefined);
-	t.end();
+	checkFilter(t, [], constraints, expectServers, expectReasons);
 });
 
 
@@ -112,7 +108,7 @@ test('locality scenario A', function (tt) {
 	var servers = [
 		{ hostname: 'cn0', uuid: 'cafe0000-14b6-8040-8d36-54a1e5ec2ef9',
 			vms: genVms(3, 2) },
-		// cn1 has no VMs owned by `ownerUuid`.
+		// cn1 has no VMs owned by OWNER_UUID.
 		{ hostname: 'cn1', uuid: 'cafe1111-14b6-8040-8d36-54a1e5ec2ef9',
 			vms: genVms(3, 0) },
 		{ hostname: 'cn2', uuid: 'cafe2222-14b6-8040-8d36-54a1e5ec2ef9',
@@ -125,12 +121,12 @@ test('locality scenario A', function (tt) {
 
 	function ownerVmOnServer(idx) {
 		return Object.keys(servers[idx].vms).filter(function (v) {
-			return (servers[idx].vms[v].owner_uuid === ownerUuid);
+			return (servers[idx].vms[v].owner_uuid === OWNER_UUID);
 		})[0];
 	}
 	function nonOwnerVmOnServer(idx) {
 		return Object.keys(servers[idx].vms).filter(function (v) {
-			return (servers[idx].vms[v].owner_uuid !== ownerUuid);
+			return (servers[idx].vms[v].owner_uuid !== OWNER_UUID);
 		})[0];
 	}
 
@@ -142,191 +138,163 @@ test('locality scenario A', function (tt) {
 	tt.test('  non-strict far', function (t) {
 		var expServers = servers;
 		var expReasons = { skip: 'No strict locality requested' };
-
-		var results = filter.run(log, servers, { vm: {
-			owner_uuid: ownerUuid,
+		var constraints = { vm: {
+			owner_uuid: OWNER_UUID,
 			locality: { far: ownerVmOnServer0 }
-		}});
-		var filteredServers = results[0];
-		var reasons = results[1];
-		t.deepEqual(filteredServers, expServers);
-		t.deepEqual(reasons, expReasons);
+		} };
 
-		t.end();
+		checkFilter(t, servers, constraints, expServers, expReasons);
 	});
 
-	tt.test('  strict far', function (t) {
-		// Test with 'far' as a string.
-		var results = filter.run(log, servers, { vm: {
-			owner_uuid: ownerUuid,
-			locality: { strict: true, far: ownerVmOnServer0 }
-		}});
-		var filteredServers = results[0];
-		var reasons = results[1];
+	tt.test('  strict far (string)', function (t) {
+		var expServers = [
+			servers[1], servers[2], servers[3], servers[4]
+		];
 
-		var expServers = [servers[1], servers[2], servers[3],
-			servers[4]];
 		var expReasons = {};
 		expReasons[servers[0].uuid]
 			= 'exclude: inst!=' + ownerVmOnServer0;
 
-		t.deepEqual(filteredServers, expServers);
-		t.deepEqual(reasons, expReasons);
+		var constraints = { vm: {
+			owner_uuid: OWNER_UUID,
+			// test with 'far' as a string.
+			locality: { strict: true, far: ownerVmOnServer0 }
+		} };
 
-		// And test with 'far' as an array.
-		results = filter.run(log, servers, { vm: {
-			owner_uuid: ownerUuid,
-			locality: { strict: true, far: [ownerVmOnServer0] }
-		}});
-		filteredServers = results[0];
-		reasons = results[1];
+		checkFilter(t, servers, constraints, expServers, expReasons);
+	});
 
-		t.deepEqual(filteredServers, expServers);
-		t.deepEqual(reasons, expReasons);
+	tt.test('  strict far (array)', function (t) {
+		var expServers = [
+			servers[1], servers[2], servers[3], servers[4]
+		];
 
-		t.end();
+		var expReasons = {};
+		expReasons[servers[0].uuid]
+			= 'exclude: inst!=' + ownerVmOnServer0;
+
+		var constraints = { vm: {
+			owner_uuid: OWNER_UUID,
+			// test with 'far' as an array
+			locality: { strict: true, far: [ownerVmOnServer0] }
+		} };
+
+		checkFilter(t, servers, constraints, expServers, expReasons);
 	});
 
 	tt.test('  non-strict near', function (t) {
-		var results = filter.run(log, servers, { vm: {
-			owner_uuid: ownerUuid,
-			locality: { strict: false, near: [ownerVmOnServer3] }
-		}});
-		var filteredServers = results[0];
-		var reasons = results[1];
-
 		var expServers = servers;
 		var expReasons = { skip: 'No strict locality requested' };
-		t.deepEqual(filteredServers, expServers);
-		t.deepEqual(reasons, expReasons);
 
-		t.end();
+		var constraints = { vm: {
+			owner_uuid: OWNER_UUID,
+			locality: { strict: false, near: [ownerVmOnServer3] }
+		} };
+
+		checkFilter(t, servers, constraints, expServers, expReasons);
 	});
 
 	tt.test('  strict near', function (t) {
-		var results = filter.run(log, servers, { vm: {
-			owner_uuid: ownerUuid,
-			locality: { strict: true, near: [ownerVmOnServer3] }
-		}});
-		var filteredServers = results[0];
-		var reasons = results[1];
-
 		var expServers = [servers[3]];
 		var expReasons = {};
 		expReasons[servers[3].uuid]
 			= 'include: inst==' + ownerVmOnServer3;
-		t.deepEqual(filteredServers, expServers);
-		t.deepEqual(reasons, expReasons);
 
-		t.end();
+		var constraints = { vm: {
+			owner_uuid: OWNER_UUID,
+			locality: { strict: true, near: [ownerVmOnServer3] }
+		} };
+
+		checkFilter(t, servers, constraints, expServers, expReasons);
 	});
 
-	tt.test('  strict near non-existant-VM', function (t) {
-		var nonExistantVm = '9c6d1ace-3676-5c4f-9a83-55de5ddb4b55';
-		var results = filter.run(log, servers, { vm: {
-			owner_uuid: ownerUuid,
-			locality: { strict: true, near: [nonExistantVm] }
-		}});
-		var filteredServers = results[0];
-		var reasons = results[1];
+	tt.test('  strict near non-existent-VM', function (t) {
+		var nonExistentVm = '9c6d1ace-3676-5c4f-9a83-55de5ddb4b55';
 
 		var expServers = [];
-		var expReasons = {};
-		expReasons['*'] = 'exclude: inst==' + nonExistantVm;
-		t.deepEqual(filteredServers, expServers);
-		t.deepEqual(reasons, expReasons);
+		var expReasons =  { '*' : 'exclude: inst==' + nonExistentVm };
 
-		t.end();
+		var constraints = { vm: {
+			owner_uuid: OWNER_UUID,
+			locality: { strict: true, near: [nonExistentVm] }
+		} };
+
+		checkFilter(t, servers, constraints, expServers, expReasons);
 	});
 
-	tt.test('  strict far non-existant-VM', function (t) {
-		var nonExistantVm = 'f795e38f-1fce-3a49-b6e9-a62f07a559fc';
-		var results = filter.run(log, servers, { vm: {
-			owner_uuid: ownerUuid,
-			locality: { strict: true, far: [nonExistantVm] }
-		}});
-		var filteredServers = results[0];
-		var reasons = results[1];
+	tt.test('  strict far non-existent-VM', function (t) {
+		var nonExistentVm = 'f795e38f-1fce-3a49-b6e9-a62f07a559fc';
 
 		var expServers = servers;
 		var expReasons = {};
-		t.deepEqual(filteredServers, expServers);
-		t.deepEqual(reasons, expReasons);
 
-		t.end();
+		var constraints = { vm: {
+			owner_uuid: OWNER_UUID,
+			locality: { strict: true, far: [nonExistentVm] }
+		} };
+
+		checkFilter(t, servers, constraints, expServers, expReasons);
 	});
 
 	tt.test('  strict near, ignores non-owner VMs', function (t) {
-		var results = filter.run(log, servers, { vm: {
-			owner_uuid: ownerUuid,
-			locality: { strict: true, near: [nonOwnerVmOnServer3] }
-		}});
-		var filteredServers = results[0];
-		var reasons = results[1];
-
 		var expServers = [];
-		var expReasons = {'*': 'exclude: inst==' + nonOwnerVmOnServer3};
-		t.deepEqual(filteredServers, expServers);
-		t.deepEqual(reasons, expReasons);
+		var expReasons = {
+			'*': 'exclude: inst==' + nonOwnerVmOnServer3
+		};
 
-		t.end();
+		var constraints = { vm: {
+			owner_uuid: OWNER_UUID,
+			locality: { strict: true, near: [nonOwnerVmOnServer3] }
+		} };
+
+		checkFilter(t, servers, constraints, expServers, expReasons);
 	});
 
 	tt.test('  strict far, ignores non-owner VMs', function (t) {
-		var results = filter.run(log, servers, { vm: {
-			owner_uuid: ownerUuid,
-			locality: { strict: true, far: [nonOwnerVmOnServer3] }
-		}});
-		var filteredServers = results[0];
-		var reasons = results[1];
-
 		var expServers = servers;
 		var expReasons = {};
-		t.deepEqual(filteredServers, expServers);
-		t.deepEqual(reasons, expReasons);
 
-		t.end();
+		var constraints = { vm: {
+			owner_uuid: OWNER_UUID,
+			locality: { strict: true, far: [nonOwnerVmOnServer3] }
+		} };
+
+		checkFilter(t, servers, constraints, expServers, expReasons);
 	});
 
 	tt.test('  strict near that filters out all servers', function (t) {
 		var near = [ownerVmOnServer3, ownerVmOnServer4];
-		var results = filter.run(log, servers, { vm: {
-			owner_uuid: ownerUuid,
-			locality: { strict: true, near: near }
-		}});
-		var filteredServers = results[0];
-		var reasons = results[1];
 
 		var expServers = [];
-		var expReasons = {'*': 'exclude: inst==' + near.join(',')};
-		t.deepEqual(filteredServers, expServers);
-		t.deepEqual(reasons, expReasons);
+		var expReasons = { '*': 'exclude: inst==' + near.join(',') };
 
-		t.end();
+		var constraints = { vm: {
+			owner_uuid: OWNER_UUID,
+			locality: { strict: true, near: near }
+		} };
+
+		checkFilter(t, servers, constraints, expServers, expReasons);
 	});
 
 	tt.test('  far and near', function (t) {
-		var results = filter.run(log, servers, { vm: {
-			owner_uuid: ownerUuid,
-			locality: {
-				strict: true,
-				near: [ownerVmOnServer4],
-				far: [ownerVmOnServer3]
-			}
-		}});
-		var filteredServers = results[0];
-		var reasons = results[1];
-
 		var expServers = [servers[4]];
+
 		var expReasons = {};
 		expReasons[servers[4].uuid]
 			= 'include: inst==' + ownerVmOnServer4;
 		expReasons[servers[3].uuid]
 			= 'exclude: inst!=' + ownerVmOnServer3;
-		t.deepEqual(filteredServers, expServers);
-		t.deepEqual(reasons, expReasons);
 
-		t.end();
+		var constraints = { vm: {
+			owner_uuid: OWNER_UUID,
+			locality: {
+				strict: true,
+				near: [ownerVmOnServer4],
+				far: [ownerVmOnServer3]
+			}
+		} };
+
+		checkFilter(t, servers, constraints, expServers, expReasons);
 	});
 });
 
@@ -345,12 +313,12 @@ test('locality scenario B: large set', function (tt) {
 
 	function ownerVmOnServer(idx) {
 		return Object.keys(servers[idx].vms).filter(function (v) {
-			return (servers[idx].vms[v].owner_uuid === ownerUuid);
+			return (servers[idx].vms[v].owner_uuid === OWNER_UUID);
 		})[0];
 	}
 	function nonOwnerVmOnServer(idx) {
 		return Object.keys(servers[idx].vms).filter(function (v) {
-			return (servers[idx].vms[v].owner_uuid !== ownerUuid);
+			return (servers[idx].vms[v].owner_uuid !== OWNER_UUID);
 		})[0];
 	}
 
@@ -358,35 +326,45 @@ test('locality scenario B: large set', function (tt) {
 	var ownerVmOnServer997 = ownerVmOnServer(997);
 
 	tt.test('  strict near', function (t) {
-		var start = Date.now();
-		var results = filter.run(log, servers, { vm: {
-			owner_uuid: ownerUuid,
+		var constraints = { vm: {
+			owner_uuid: OWNER_UUID,
 			locality: { strict: true, near: [ownerVmOnServer997] }
-		}});
-		var end = Date.now();
-		var elapsed = end - start;
-		var filteredServers = results[0];
+		} };
 
-		t.equal(filteredServers.length, 1);
-		t.ok(elapsed < 50, '<50ms elapsed: ' + elapsed + 'ms');
+		var start = Date.now();
+		filter.run(LOG, servers, constraints,
+				function (err, filteredServers, reasons) {
+			t.ifError(err);
 
-		t.end();
+			var end = Date.now();
+			var elapsed = end - start;
+
+			t.equal(filteredServers.length, 1);
+			t.ok(elapsed < 50, '<50ms elapsed: ' + elapsed + 'ms');
+
+			t.end();
+		});
 	});
 
 	tt.test('  strict far', function (t) {
-		var start = Date.now();
-		var results = filter.run(log, servers, { vm: {
-			owner_uuid: ownerUuid,
+		var constraints = { vm: {
+			owner_uuid: OWNER_UUID,
 			locality: { strict: true, far: [
 				ownerVmOnServer42, ownerVmOnServer997] }
-		}});
-		var end = Date.now();
-		var elapsed = end - start;
-		var filteredServers = results[0];
+		} };
 
-		t.equal(filteredServers.length, 998);
-		t.ok(elapsed < 50, '<50ms elapsed: ' + elapsed + 'ms');
+		var start = Date.now();
+		filter.run(LOG, servers, constraints,
+				function (err, filteredServers, reasons) {
+			t.ifError(err);
+
+			var end = Date.now();
+			var elapsed = end - start;
 
-		t.end();
+			t.equal(filteredServers.length, 998);
+			t.ok(elapsed < 50, '<50ms elapsed: ' + elapsed + 'ms');
+
+			t.end();
+		});
 	});
 });
diff --git a/test/algorithms/hard-filter-min-cpu.test.js b/test/algorithms/hard-filter-min-cpu.test.js
index 581c156..a092bce 100644
--- a/test/algorithms/hard-filter-min-cpu.test.js
+++ b/test/algorithms/hard-filter-min-cpu.test.js
@@ -10,39 +10,47 @@
 
 var test = require('tape');
 var filter = require('../../lib/algorithms/hard-filter-min-cpu.js');
+var common = require('./common.js');
 
 
-var log = {
+var LOG = {
 	trace: function () { return (true); },
 	debug: function () { return (true); }
 };
 
 
+var checkFilter = common.createPluginChecker(filter, LOG);
+
+
 test('filterMinCpu()', function (t) {
-	var givenServers = [
-		{
-			uuid: '79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf',
-			unreserved_cpu: 400,
-			overprovision_ratios: {}
-		},
-		{
-			uuid: '9324d37d-e160-4a9d-a6d8-39a519634398',
-			unreserved_cpu: 590,
-			overprovision_ratios: {}
-		},
-		{
-			uuid: 'f07f6c2c-8f9c-4b77-89fe-4b777dff5826',
-			unreserved_cpu: 610,
-			overprovision_ratios: { cpu: 1.0 }
-		},
-		{
-			uuid: '69003dc2-1122-4851-8a2a-fccb609e4e84',
-			unreserved_cpu: 900,
-			overprovision_ratios: { cpu: 1.0 }
-		}
-	];
-
-	var expectedServers = givenServers.slice(0, 2);
+	var servers = [ {
+		uuid: '79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf',
+		unreserved_cpu: 400,
+		overprovision_ratios: {}
+	}, {
+		uuid: '9324d37d-e160-4a9d-a6d8-39a519634398',
+		unreserved_cpu: 590,
+		overprovision_ratios: {}
+	}, {
+		uuid: 'f07f6c2c-8f9c-4b77-89fe-4b777dff5826',
+		unreserved_cpu: 610,
+		overprovision_ratios: { cpu: 1.0 }
+	}, {
+		uuid: '69003dc2-1122-4851-8a2a-fccb609e4e84',
+		unreserved_cpu: 900,
+		overprovision_ratios: { cpu: 1.0 }
+	} ];
+
+	var expectServers = servers.slice(0, 2);
+	var expectReasons = {
+		'f07f6c2c-8f9c-4b77-89fe-4b777dff5826':
+			'Package gave no CPU overprovision ratio, ' +
+			'but server has ratio 1',
+		'69003dc2-1122-4851-8a2a-fccb609e4e84':
+			'Package gave no CPU overprovision ratio, ' +
+			'but server has ratio 1'
+	};
+
 	var constraints = {
 		vm: { cpu_cap: 900 },
 		img: {},
@@ -50,91 +58,65 @@ test('filterMinCpu()', function (t) {
 		defaults: {}
 	};
 
-	var results = filter.run(log, givenServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, expectedServers);
-
-	var expectedReasons = {
-		'f07f6c2c-8f9c-4b77-89fe-4b777dff5826':
-		    'Package gave no CPU overprovision ratio, ' +
-		    'but server has ratio 1',
-		'69003dc2-1122-4851-8a2a-fccb609e4e84':
-		    'Package gave no CPU overprovision ratio, ' +
-		    'but server has ratio 1'
-	};
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
 });
 
 
 test('filterMinCpu() without pkg', function (t) {
-	var givenServers = [
-		{
-			uuid: '79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf',
-			unreserved_cpu: 400,
-			overprovision_ratios: {}
-		},
-		{
-			uuid: '9324d37d-e160-4a9d-a6d8-39a519634398',
-			unreserved_cpu: 590,
-			overprovision_ratios: {}
-		},
-		{
-			uuid: 'f07f6c2c-8f9c-4b77-89fe-4b777dff5826',
-			unreserved_cpu: 610,
-			overprovision_ratios: { cpu: 1.0 }
-		},
-		{
-			uuid: '69003dc2-1122-4851-8a2a-fccb609e4e84',
-			unreserved_cpu: 900,
-			overprovision_ratios: { cpu: 1.0 }
-		}
-	];
-
-	var expectedServers = givenServers;
+	var servers = [ {
+		uuid: '79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf',
+		unreserved_cpu: 400,
+		overprovision_ratios: {}
+	}, {
+		uuid: '9324d37d-e160-4a9d-a6d8-39a519634398',
+		unreserved_cpu: 590,
+		overprovision_ratios: {}
+	}, {
+		uuid: 'f07f6c2c-8f9c-4b77-89fe-4b777dff5826',
+		unreserved_cpu: 610,
+		overprovision_ratios: { cpu: 1.0 }
+	}, {
+		uuid: '69003dc2-1122-4851-8a2a-fccb609e4e84',
+		unreserved_cpu: 900,
+		overprovision_ratios: { cpu: 1.0 }
+	} ];
+
+	var expectServers = servers;
+	var expectReasons = {};
+
 	var constraints = {
 		vm: { cpu_cap: 900 },
 		img: {},
 		defaults: {}
 	};
 
-	var results = filter.run(log, givenServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, expectedServers);
-	t.deepEqual(reasons, {});
-
-	t.end();
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
 });
 
 
 test('filterMinCpu() with override', function (t) {
-	var givenServers = [
-		{
-			uuid: '79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf',
-			unreserved_cpu: 400,
-			overprovision_ratios: { cpu: 1.0 }
-		},
-		{
-			uuid: '9324d37d-e160-4a9d-a6d8-39a519634398',
-			unreserved_cpu: 590,
-			overprovision_ratios: { cpu: 1.0 }
-		},
-		{
-			uuid: 'f07f6c2c-8f9c-4b77-89fe-4b777dff5826',
-			unreserved_cpu: 610,
-			overprovision_ratios: { cpu: 1.0 }
-		},
-		{
-			uuid: '69003dc2-1122-4851-8a2a-fccb609e4e84',
-			unreserved_cpu: 900,
-			overprovision_ratios: { cpu: 1.0 }
-		}
-	];
+	var servers = [ {
+		uuid: '79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf',
+		unreserved_cpu: 400,
+		overprovision_ratios: { cpu: 1.0 }
+	}, {
+		uuid: '9324d37d-e160-4a9d-a6d8-39a519634398',
+		unreserved_cpu: 590,
+		overprovision_ratios: { cpu: 1.0 }
+	}, {
+		uuid: 'f07f6c2c-8f9c-4b77-89fe-4b777dff5826',
+		unreserved_cpu: 610,
+		overprovision_ratios: { cpu: 1.0 }
+	}, {
+		uuid: '69003dc2-1122-4851-8a2a-fccb609e4e84',
+		unreserved_cpu: 900,
+		overprovision_ratios: { cpu: 1.0 }
+	} ];
+
+	var expectServers = servers;
+	var expectReasons = {
+		skip: 'Do not filter out based on minimum free CPU'
+	};
 
 	var constraints = {
 		vm: { cpu_cap: 900 },
@@ -143,39 +125,39 @@ test('filterMinCpu() with override', function (t) {
 		defaults: { filter_min_resources: false }
 	};
 
-	var results = filter.run(log, givenServers, constraints);
-
-	t.deepEqual(results[0], givenServers);
-
-	t.end();
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
 });
 
 
 test('filterMinCpu() with overprovision ratios', function (t) {
-	var givenServers = [
-		{
-			uuid: '79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf',
-			unreserved_cpu: 400,
-			overprovision_ratios: { cpu: 1.0 }
-		},
-		{
-			uuid: '9324d37d-e160-4a9d-a6d8-39a519634398',
-			unreserved_cpu: 590,
-			overprovision_ratios: { cpu: 1.0 }
-		},
-		{
-			uuid: 'f07f6c2c-8f9c-4b77-89fe-4b777dff5826',
-			unreserved_cpu: 610,
-			overprovision_ratios: { cpu: 1.0 }
-		},
-		{
-			uuid: '69003dc2-1122-4851-8a2a-fccb609e4e84',
-			unreserved_cpu: 900,
-			overprovision_ratios: { cpu: 1.0 }
-		}
-	];
-
-	var expectedServers = givenServers.slice(2, 4);
+	var servers = [ {
+		uuid: '79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf',
+		unreserved_cpu: 400,
+		overprovision_ratios: { cpu: 1.0 }
+	}, {
+		uuid: '9324d37d-e160-4a9d-a6d8-39a519634398',
+		unreserved_cpu: 590,
+		overprovision_ratios: { cpu: 1.0 }
+	}, {
+		uuid: 'f07f6c2c-8f9c-4b77-89fe-4b777dff5826',
+		unreserved_cpu: 610,
+		overprovision_ratios: { cpu: 1.0 }
+	}, {
+		uuid: '69003dc2-1122-4851-8a2a-fccb609e4e84',
+		unreserved_cpu: 900,
+		overprovision_ratios: { cpu: 1.0 }
+	} ];
+
+	var expectServers = servers.slice(2, 4);
+	var expectReasons = {
+		'79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf':
+			'VM\'s calculated 600 CPU is less than ' +
+			'server\'s spare 400',
+		'9324d37d-e160-4a9d-a6d8-39a519634398':
+			'VM\'s calculated 600 CPU is less than ' +
+			'server\'s spare 590'
+	};
+
 	var constraints = {
 		vm:  { cpu_cap: 900 },
 		img: {},
@@ -183,58 +165,40 @@ test('filterMinCpu() with overprovision ratios', function (t) {
 		defaults: {}
 	};
 
-	var results = filter.run(log, givenServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, expectedServers);
-
-	var expectedReasons = {
-		'79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf':
-		    'VM\'s calculated 600 CPU is less than server\'s spare 400',
-		'9324d37d-e160-4a9d-a6d8-39a519634398':
-		    'VM\'s calculated 600 CPU is less than server\'s spare 590'
-	};
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
 });
 
 
 test('filterMinCpu with no cpu', function (t) {
-	var givenServers = [
-		{
-			uuid: '79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf',
-			unreserved_cpu: 400,
-			overprovision_ratios: { cpu: 1.0 }
-		},
-		{
-			uuid: 'f07f6c2c-8f9c-4b77-89fe-4b777dff5826',
-			unreserved_cpu: 600,
-			overprovision_ratios: { cpu: 1.0 }
-		},
-		{
-			uuid: '69003dc2-1122-4851-8a2a-fccb609e4e84',
-			unreserved_cpu: 650,
-			overprovision_ratios: { cpu: 1.0 }
-		}
-	];
+	var servers = [ {
+		uuid: '79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf',
+		unreserved_cpu: 400,
+		overprovision_ratios: { cpu: 1.0 }
+	}, {
+		uuid: 'f07f6c2c-8f9c-4b77-89fe-4b777dff5826',
+		unreserved_cpu: 600,
+		overprovision_ratios: { cpu: 1.0 }
+	}, {
+		uuid: '69003dc2-1122-4851-8a2a-fccb609e4e84',
+		unreserved_cpu: 650,
+		overprovision_ratios: { cpu: 1.0 }
+	} ];
+
+	var expectServers = servers;
+	var expectReasons = {};
 
 	var constraints = { vm: {}, img: {}, pkg: {}, defaults: {} };
 
-	var results = filter.run(log, givenServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, givenServers);
-	t.deepEqual(reasons, undefined);
-
-	t.end();
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
 });
 
 
 test('filterMinCpu() with no servers', function (t) {
 	var servers = [];
+
+	var expectServers = [];
+	var expectReasons = {};
+
 	var constraints = {
 		vm:  { cpu_cap: 900 },
 		img: {},
@@ -242,16 +206,7 @@ test('filterMinCpu() with no servers', function (t) {
 		defaults: {}
 	};
 
-	var results = filter.run(log, servers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.equal(filteredServers.length, 0);
-
-	var expectedReasons = {};
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
 });
 
 
diff --git a/test/algorithms/hard-filter-min-disk.test.js b/test/algorithms/hard-filter-min-disk.test.js
index 605fd50..3de51bd 100644
--- a/test/algorithms/hard-filter-min-disk.test.js
+++ b/test/algorithms/hard-filter-min-disk.test.js
@@ -10,42 +10,50 @@
 
 var test = require('tape');
 var filter = require('../../lib/algorithms/hard-filter-min-disk.js');
+var common = require('./common.js');
 
 
 var MiB = 1024 * 1024;
 var GiB = 1024 * MiB;
 
-var log = {
+var LOG = {
 	trace: function () { return (true); },
 	debug: function () { return (true); }
 };
 
 
+var checkFilter = common.createPluginChecker(filter, LOG);
+
+
 test('filterMinDisk()', function (t) {
-	var givenServers = [
-		{
-			uuid: '79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf',
-			unreserved_disk: 2560,
-			overprovision_ratios: {}
-		},
-		{
-			uuid: '9324d37d-e160-4a9d-a6d8-39a519634398',
-			unreserved_disk: 5110,
-			overprovision_ratios: {}
-		},
-		{
-			uuid: 'f07f6c2c-8f9c-4b77-89fe-4b777dff5826',
-			unreserved_disk: 5120,
-			overprovision_ratios: { disk: 1.0 }
-		},
-		{
-			uuid: '69003dc2-1122-4851-8a2a-fccb609e4e84',
-			unreserved_disk: 7680,
-			overprovision_ratios: { disk: 1.0 }
-		}
-	];
-
-	var expectedServers = givenServers.slice(0, 2);
+	var servers = [ {
+		uuid: '79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf',
+		unreserved_disk: 2560,
+		overprovision_ratios: {}
+	}, {
+		uuid: '9324d37d-e160-4a9d-a6d8-39a519634398',
+		unreserved_disk: 5110,
+		overprovision_ratios: {}
+	}, {
+		uuid: 'f07f6c2c-8f9c-4b77-89fe-4b777dff5826',
+		unreserved_disk: 5120,
+		overprovision_ratios: { disk: 1.0 }
+	}, {
+		uuid: '69003dc2-1122-4851-8a2a-fccb609e4e84',
+		unreserved_disk: 7680,
+		overprovision_ratios: { disk: 1.0 }
+	} ];
+
+	var expectServers = servers.slice(0, 2);
+	var expectReasons = {
+		'f07f6c2c-8f9c-4b77-89fe-4b777dff5826':
+			'Package gave no disk overprovision ratio, but ' +
+			'server has ratio 1',
+		'69003dc2-1122-4851-8a2a-fccb609e4e84':
+			'Package gave no disk overprovision ratio, but ' +
+			'server has ratio 1'
+	};
+
 	var constraints = {
 		vm: { quota: 5120 },
 		img: {},
@@ -53,91 +61,65 @@ test('filterMinDisk()', function (t) {
 		defaults: {}
 	};
 
-	var results = filter.run(log, givenServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, expectedServers);
-
-	var expectedReasons = {
-		'f07f6c2c-8f9c-4b77-89fe-4b777dff5826':
-		    'Package gave no disk overprovision ratio, but server ' +
-		    'has ratio 1',
-		'69003dc2-1122-4851-8a2a-fccb609e4e84':
-		    'Package gave no disk overprovision ratio, but server ' +
-		    'has ratio 1'
-	};
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
 });
 
 
 test('filterMinDisk() without pkg', function (t) {
-	var givenServers = [
-		{
-			uuid: '79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf',
-			unreserved_disk: 2560,
-			overprovision_ratios: {}
-		},
-		{
-			uuid: '9324d37d-e160-4a9d-a6d8-39a519634398',
-			unreserved_disk: 5110,
-			overprovision_ratios: {}
-		},
-		{
-			uuid: 'f07f6c2c-8f9c-4b77-89fe-4b777dff5826',
-			unreserved_disk: 5120,
-			overprovision_ratios: { disk: 1.0 }
-		},
-		{
-			uuid: '69003dc2-1122-4851-8a2a-fccb609e4e84',
-			unreserved_disk: 7680,
-			overprovision_ratios: { disk: 1.0 }
-		}
-	];
-
-	var expectedServers = givenServers;
+	var servers = [ {
+		uuid: '79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf',
+		unreserved_disk: 2560,
+		overprovision_ratios: {}
+	}, {
+		uuid: '9324d37d-e160-4a9d-a6d8-39a519634398',
+		unreserved_disk: 5110,
+		overprovision_ratios: {}
+	}, {
+		uuid: 'f07f6c2c-8f9c-4b77-89fe-4b777dff5826',
+		unreserved_disk: 5120,
+		overprovision_ratios: { disk: 1.0 }
+	}, {
+		uuid: '69003dc2-1122-4851-8a2a-fccb609e4e84',
+		unreserved_disk: 7680,
+		overprovision_ratios: { disk: 1.0 }
+	} ];
+
+	var expectServers = servers;
+	var expectReasons = {};
+
 	var constraints = {
 		vm: { quota: 5120 },
 		img: {},
 		defaults: {}
 	};
 
-	var results = filter.run(log, givenServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, expectedServers);
-	t.deepEqual(reasons, {});
-
-	t.end();
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
 });
 
 
 test('filterMinDisk() with override', function (t) {
-	var givenServers = [
-		{
-			uuid: '79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf',
-			unreserved_disk: 2560,
-			overprovision_ratios: { disk: 1.0 }
-		},
-		{
-			uuid: '9324d37d-e160-4a9d-a6d8-39a519634398',
-			unreserved_disk: 5110,
-			overprovision_ratios: { disk: 1.0 }
-		},
-		{
-			uuid: 'f07f6c2c-8f9c-4b77-89fe-4b777dff5826',
-			unreserved_disk: 5120,
-			overprovision_ratios: { disk: 1.0 }
-		},
-		{
-			uuid: '69003dc2-1122-4851-8a2a-fccb609e4e84',
-			unreserved_disk: 7680,
-			overprovision_ratios: { disk: 1.0 }
-		}
-	];
+	var servers = [ {
+		uuid: '79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf',
+		unreserved_disk: 2560,
+		overprovision_ratios: { disk: 1.0 }
+	}, {
+		uuid: '9324d37d-e160-4a9d-a6d8-39a519634398',
+		unreserved_disk: 5110,
+		overprovision_ratios: { disk: 1.0 }
+	}, {
+		uuid: 'f07f6c2c-8f9c-4b77-89fe-4b777dff5826',
+		unreserved_disk: 5120,
+		overprovision_ratios: { disk: 1.0 }
+	}, {
+		uuid: '69003dc2-1122-4851-8a2a-fccb609e4e84',
+		unreserved_disk: 7680,
+		overprovision_ratios: { disk: 1.0 }
+	} ];
+
+	var expectServers = servers;
+	var expectReasons = {
+		skip: 'Do not filter out based on minimum free disk'
+	};
 
 	var constraints = {
 		vm: { quota: 5120 },
@@ -146,39 +128,39 @@ test('filterMinDisk() with override', function (t) {
 		defaults: { filter_min_resources: false }
 	};
 
-	var results = filter.run(log, givenServers, constraints);
-
-	t.deepEqual(results[0], givenServers);
-
-	t.end();
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
 });
 
 
 test('filterMinDisk() with overprovision ratios - kvm', function (t) {
-	var givenServers = [
-		{
-			uuid: '79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf',
-			unreserved_disk: 25600,
-			overprovision_ratios: { disk: 1.0 }
-		},
-		{
-			uuid: '9324d37d-e160-4a9d-a6d8-39a519634398',
-			unreserved_disk: 50000,
-			overprovision_ratios: { disk: 1.0 }
-		},
-		{
-			uuid: 'f07f6c2c-8f9c-4b77-89fe-4b777dff5826',
-			unreserved_disk: 51200,
-			overprovision_ratios: { disk: 1.0 }
-		},
-		{
-			uuid: '69003dc2-1122-4851-8a2a-fccb609e4e84',
-			unreserved_disk: 76800,
-			overprovision_ratios: { disk: 1.0 }
-		}
-	];
-
-	var expectedServers = givenServers.slice(2, 4);
+	var servers = [ {
+		uuid: '79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf',
+		unreserved_disk: 25600,
+		overprovision_ratios: { disk: 1.0 }
+	}, {
+		uuid: '9324d37d-e160-4a9d-a6d8-39a519634398',
+		unreserved_disk: 50000,
+		overprovision_ratios: { disk: 1.0 }
+	}, {
+		uuid: 'f07f6c2c-8f9c-4b77-89fe-4b777dff5826',
+		unreserved_disk: 51200,
+		overprovision_ratios: { disk: 1.0 }
+	}, {
+		uuid: '69003dc2-1122-4851-8a2a-fccb609e4e84',
+		unreserved_disk: 76800,
+		overprovision_ratios: { disk: 1.0 }
+	} ];
+
+	var expectServers = servers.slice(2, 4);
+	var expectReasons = {
+		'79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf':
+			'VM\'s calculated 50326 MiB disk is more than ' +
+			'server\'s spare 25600 MiB',
+		'9324d37d-e160-4a9d-a6d8-39a519634398':
+			'VM\'s calculated 50326 MiB disk is more than ' +
+			'server\'s spare 50000 MiB'
+	};
+
 	var constraints = {
 		vm:  { quota: 10 }, // in GiB
 		img: {
@@ -195,51 +177,36 @@ test('filterMinDisk() with overprovision ratios - kvm', function (t) {
 		defaults: {}
 	};
 
-	var results = filter.run(log, givenServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
+});
 
-	t.deepEqual(filteredServers, expectedServers);
 
-	var expectedReasons = {
+test('filterMinDisk() with overprovision ratios - zone', function (t) {
+	var servers = [ {
+		uuid: '79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf',
+		unreserved_disk: 25600,
+		overprovision_ratios: { disk: 1.0 }
+	}, {
+		uuid: '9324d37d-e160-4a9d-a6d8-39a519634398',
+		unreserved_disk: 50000,
+		overprovision_ratios: { disk: 1.0 }
+	}, {
+		uuid: 'f07f6c2c-8f9c-4b77-89fe-4b777dff5826',
+		unreserved_disk: 51200,
+		overprovision_ratios: { disk: 1.0 }
+	}, {
+		uuid: '69003dc2-1122-4851-8a2a-fccb609e4e84',
+		unreserved_disk: 76800,
+		overprovision_ratios: { disk: 1.0 }
+	} ];
+
+	var expectServers = servers.slice(1, 4);
+	var expectReasons = {
 		'79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf':
-		    'VM\'s calculated 50326 MiB disk is more than ' +
-		    'server\'s spare 25600 MiB',
-		'9324d37d-e160-4a9d-a6d8-39a519634398':
-		    'VM\'s calculated 50326 MiB disk is more than ' +
-		    'server\'s spare 50000 MiB'
+			'VM\'s calculated 30188 MiB disk is more than ' +
+			'server\'s spare 25600 MiB'
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	t.end();
-});
-
-
-test('filterMinDisk() with overprovision ratios - zone', function (t) {
-	var givenServers = [
-		{
-			uuid: '79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf',
-			unreserved_disk: 25600,
-			overprovision_ratios: { disk: 1.0 }
-		},
-		{
-			uuid: '9324d37d-e160-4a9d-a6d8-39a519634398',
-			unreserved_disk: 50000,
-			overprovision_ratios: { disk: 1.0 }
-		},
-		{
-			uuid: 'f07f6c2c-8f9c-4b77-89fe-4b777dff5826',
-			unreserved_disk: 51200,
-			overprovision_ratios: { disk: 1.0 }
-		},
-		{
-			uuid: '69003dc2-1122-4851-8a2a-fccb609e4e84',
-			unreserved_disk: 76800,
-			overprovision_ratios: { disk: 1.0 }
-		}
-	];
-
-	var expectedServers = givenServers.slice(1, 4);
 	var constraints = {
 		vm:  { quota: 29 }, // in GiB
 		img: {
@@ -255,25 +222,16 @@ test('filterMinDisk() with overprovision ratios - zone', function (t) {
 		defaults: {}
 	};
 
-	var results = filter.run(log, givenServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, expectedServers);
-
-	var expectedReasons = {
-		'79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf':
-		    'VM\'s calculated 30188 MiB disk is more than ' +
-		    'server\'s spare 25600 MiB'
-	};
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
 });
 
 
 test('filterMinDisk() with no servers', function (t) {
 	var servers = [];
+
+	var expectServers = [];
+	var expectReasons = {};
+
 	var constraints = {
 		vm: { quota: 5 }, // in GiB
 		img: {
@@ -286,46 +244,31 @@ test('filterMinDisk() with no servers', function (t) {
 		defaults: {}
 	};
 
-	var results = filter.run(log, servers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.equal(filteredServers.length, 0);
-	t.deepEqual(reasons, {});
-
-	t.end();
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
 });
 
 
 test('filterMinDisk() with no disk', function (t) {
-	var givenServers = [
-		{
-			uuid: '79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf',
-			unreserved_disk: 2560,
-			overprovision_ratios: { disk: 1.0 }
-		},
-		{
-			uuid: '9324d37d-e160-4a9d-a6d8-39a519634398',
-			unreserved_disk: 5110,
-			overprovision_ratios: { disk: 1.0 }
-		},
-		{
-			uuid: 'f07f6c2c-8f9c-4b77-89fe-4b777dff5826',
-			unreserved_disk: 5120,
-			overprovision_ratios: { disk: 1.0 }
-		}
-	];
+	var servers = [ {
+		uuid: '79cc8d8a-1754-46d7-bd2c-ab5fe7f8c7bf',
+		unreserved_disk: 2560,
+		overprovision_ratios: { disk: 1.0 }
+	}, {
+		uuid: '9324d37d-e160-4a9d-a6d8-39a519634398',
+		unreserved_disk: 5110,
+		overprovision_ratios: { disk: 1.0 }
+	}, {
+		uuid: 'f07f6c2c-8f9c-4b77-89fe-4b777dff5826',
+		unreserved_disk: 5120,
+		overprovision_ratios: { disk: 1.0 }
+	} ];
+
+	var expectServers = servers;
+	var expectReasons = { skip: 'Vm and pkg have no quota' };
 
 	var constraints = { vm: {}, img: {}, pkg: {}, defaults: {} };
 
-	var results = filter.run(log, givenServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, givenServers);
-	t.deepEqual(reasons, undefined);
-
-	t.end();
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
 });
 
 
diff --git a/test/algorithms/hard-filter-min-ram.test.js b/test/algorithms/hard-filter-min-ram.test.js
index 11cb7e6..fc71352 100644
--- a/test/algorithms/hard-filter-min-ram.test.js
+++ b/test/algorithms/hard-filter-min-ram.test.js
@@ -10,170 +10,140 @@
 
 var test = require('tape');
 var filter = require('../../lib/algorithms/hard-filter-min-ram.js');
+var common = require('./common.js');
 
 
-var log = {
+var LOG = {
 	trace: function () { return (true); },
 	debug: function () { return (true); }
 };
 
 
-test('filterMinRam()', function (t) {
-	var givenServers = [
-		{
-			uuid: 'f667e0fa-33db-48da-a5d0-9fe837ce93fc',
-			unreserved_ram: 256, overprovision_ratios: {}
-		},
-		{
-			uuid: '4fe12d99-f013-4983-9e39-6e2f35b37aec',
-			unreserved_ram: 511, overprovision_ratios: {}
-		},
-		{
-			uuid: '7a8c759c-2a82-4d9b-bed4-7049b71197cb',
-			unreserved_ram: 512,
-			overprovision_ratios: { ram: 1.0 }
-		},
-		{
-			uuid: 'f60f7e40-2e92-47b8-8686-1b46a85dd35f',
-			unreserved_ram: 768,
-			overprovision_ratios: { ram: 1.0 }
-		}
-	];
-
-	var expectedServers = givenServers.slice(0, 2);
-	var constraints = { vm: { ram: 512 }, pkg: {}, defaults: {} };
-
-	var results = filter.run(log, givenServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+var checkFilter = common.createPluginChecker(filter, LOG);
 
-	t.deepEqual(filteredServers, expectedServers);
 
-	var expectedReasons = {
+test('filterMinRam()', function (t) {
+	var servers = [ {
+		uuid: 'f667e0fa-33db-48da-a5d0-9fe837ce93fc',
+		unreserved_ram: 256, overprovision_ratios: {}
+	}, {
+		uuid: '4fe12d99-f013-4983-9e39-6e2f35b37aec',
+		unreserved_ram: 511, overprovision_ratios: {}
+	}, {
+		uuid: '7a8c759c-2a82-4d9b-bed4-7049b71197cb',
+		unreserved_ram: 512,
+		overprovision_ratios: { ram: 1.0 }
+	}, {
+		uuid: 'f60f7e40-2e92-47b8-8686-1b46a85dd35f',
+		unreserved_ram: 768,
+		overprovision_ratios: { ram: 1.0 }
+	} ];
+
+	var expectServers = servers.slice(0, 2);
+	var expectReasons = {
 		'7a8c759c-2a82-4d9b-bed4-7049b71197cb':
-		    'Package gave no RAM overprovision ratio, ' +
-		    'but server has ratio 1',
+			'Package gave no RAM overprovision ratio, but server ' +
+			'has ratio 1',
 		'f60f7e40-2e92-47b8-8686-1b46a85dd35f':
-		    'Package gave no RAM overprovision ratio, ' +
-		    'but server has ratio 1'
+			'Package gave no RAM overprovision ratio, but server ' +
+			'has ratio 1'
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	t.end();
+	var constraints = { vm: { ram: 512 }, pkg: {}, defaults: {} };
+
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
 });
 
 
 test('filterMinRam() with KVM', function (t) {
-	var givenServers = [
-		{
-			uuid: 'f667e0fa-33db-48da-a5d0-9fe837ce93fc',
-			unreserved_ram: 256,
-			overprovision_ratios: { ram: 2.0 }
-		},
-		{
-			uuid: '4fe12d99-f013-4983-9e39-6e2f35b37aec',
-			unreserved_ram: 511,
-			overprovision_ratios: { ram: 2.0 }
-		},
-		{
-			uuid: '7a8c759c-2a82-4d9b-bed4-7049b71197cb',
-			unreserved_ram: 512,
-			overprovision_ratios: { ram: 2.0 }
-		},
-		{
-			uuid: 'f60f7e40-2e92-47b8-8686-1b46a85dd35f',
-			unreserved_ram: 768,
-			overprovision_ratios: { ram: 2.0 }
-		}
-	];
-
-	var expectedServers = givenServers.slice(2, 4);
+	var servers = [ {
+		uuid: 'f667e0fa-33db-48da-a5d0-9fe837ce93fc',
+		unreserved_ram: 256,
+		overprovision_ratios: { ram: 2.0 }
+	}, {
+		uuid: '4fe12d99-f013-4983-9e39-6e2f35b37aec',
+		unreserved_ram: 511,
+		overprovision_ratios: { ram: 2.0 }
+	}, {
+		uuid: '7a8c759c-2a82-4d9b-bed4-7049b71197cb',
+		unreserved_ram: 512,
+		overprovision_ratios: { ram: 2.0 }
+	}, {
+		uuid: 'f60f7e40-2e92-47b8-8686-1b46a85dd35f',
+		unreserved_ram: 768,
+		overprovision_ratios: { ram: 2.0 }
+	} ];
+
+	var expectReasons = {
+		'f667e0fa-33db-48da-a5d0-9fe837ce93fc':
+			'VM\'s calculated 512 RAM is less than server\'s ' +
+			'spare 256',
+		'4fe12d99-f013-4983-9e39-6e2f35b37aec':
+			'VM\'s calculated 512 RAM is less than server\'s ' +
+			'spare 511'
+	};
+
+	var expectServers = servers.slice(2, 4);
 	var constraints = {
 		vm: { ram: 512, brand: 'kvm' },
 		pkg: { overprovision_ram: 2.0 },
 		defaults: {}
 	};
 
-	var results = filter.run(log, givenServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, expectedServers);
-
-	var expectedReasons = {
-		'f667e0fa-33db-48da-a5d0-9fe837ce93fc':
-			'VM\'s calculated 512 RAM is less than ' +
-			'server\'s spare 256',
-		'4fe12d99-f013-4983-9e39-6e2f35b37aec':
-			'VM\'s calculated 512 RAM is less than ' +
-			'server\'s spare 511'
-	};
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
 });
 
 
 test('filterMinRam() without pkg', function (t) {
-	var givenServers = [
-		{
-			uuid: 'f667e0fa-33db-48da-a5d0-9fe837ce93fc',
-			unreserved_ram: 256, overprovision_ratios: {}
-		},
-		{
-			uuid: '4fe12d99-f013-4983-9e39-6e2f35b37aec',
-			unreserved_ram: 511, overprovision_ratios: {}
-		},
-		{
-			uuid: '7a8c759c-2a82-4d9b-bed4-7049b71197cb',
-			unreserved_ram: 512,
-			overprovision_ratios: { ram: 1.0 }
-		},
-		{
-			uuid: 'f60f7e40-2e92-47b8-8686-1b46a85dd35f',
-			unreserved_ram: 768,
-			overprovision_ratios: { ram: 1.0 }
-		}
-	];
-
-	var expectedServers = givenServers;
+	var servers = [ {
+		uuid: 'f667e0fa-33db-48da-a5d0-9fe837ce93fc',
+		unreserved_ram: 256, overprovision_ratios: {}
+	}, {
+		uuid: '4fe12d99-f013-4983-9e39-6e2f35b37aec',
+		unreserved_ram: 511, overprovision_ratios: {}
+	}, {
+		uuid: '7a8c759c-2a82-4d9b-bed4-7049b71197cb',
+		unreserved_ram: 512,
+		overprovision_ratios: { ram: 1.0 }
+	}, {
+		uuid: 'f60f7e40-2e92-47b8-8686-1b46a85dd35f',
+		unreserved_ram: 768,
+		overprovision_ratios: { ram: 1.0 }
+	} ];
+
+	var expectServers = servers;
+	var expectReasons = {};
+
 	var constraints = {
 		vm: { ram: 512 },
 		defaults: {}
 	};
 
-	var results = filter.run(log, givenServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, expectedServers);
-	t.deepEqual(reasons, {});
-
-	t.end();
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
 });
 
 
 test('filterMinRam() with override', function (t) {
-	var givenServers = [
-		{
-			uuid: 'f667e0fa-33db-48da-a5d0-9fe837ce93fc',
-			unreserved_ram: 256, overprovision_ratios: {}
-		},
-		{
-			uuid: '4fe12d99-f013-4983-9e39-6e2f35b37aec',
-			unreserved_ram: 511, overprovision_ratios: {}
-		},
-		{
-			uuid: '7a8c759c-2a82-4d9b-bed4-7049b71197cb',
-			unreserved_ram: 512,
-			overprovision_ratios: { ram: 1.0 }
-		},
-		{
-			uuid: 'f60f7e40-2e92-47b8-8686-1b46a85dd35f',
-			unreserved_ram: 768,
-			overprovision_ratios: { ram: 1.0 }
-		}
-	];
+	var servers = [ {
+		uuid: 'f667e0fa-33db-48da-a5d0-9fe837ce93fc',
+		unreserved_ram: 256, overprovision_ratios: {}
+	}, {
+		uuid: '4fe12d99-f013-4983-9e39-6e2f35b37aec',
+		unreserved_ram: 511, overprovision_ratios: {}
+	}, {
+		uuid: '7a8c759c-2a82-4d9b-bed4-7049b71197cb',
+		unreserved_ram: 512,
+		overprovision_ratios: { ram: 1.0 }
+	}, {
+		uuid: 'f60f7e40-2e92-47b8-8686-1b46a85dd35f',
+		unreserved_ram: 768,
+		overprovision_ratios: { ram: 1.0 }
+	} ];
+
+	var expectServers = servers;
+	var expectReasons = {
+		skip: 'Do not filter out based on minimum free RAM'
+	};
 
 	var constraints = {
 		vm: { ram: 512 },
@@ -181,75 +151,56 @@ test('filterMinRam() with override', function (t) {
 		defaults: { filter_min_resources: false }
 	};
 
-	var results = filter.run(log, givenServers, constraints);
-
-	t.deepEqual(results[0], givenServers);
-
-	t.end();
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
 });
 
 
 test('filterMinRam() with overprovision ratios', function (t) {
-	var givenServers = [
-		{
-			uuid: 'f667e0fa-33db-48da-a5d0-9fe837ce93fc',
-			unreserved_ram: 256, overprovision_ratios: { ram: 1.0 }
-		},
-		{
-			uuid: '4fe12d99-f013-4983-9e39-6e2f35b37aec',
-			unreserved_ram: 511, overprovision_ratios: { ram: 1.0 }
-		},
-		{
-			uuid: '7a8c759c-2a82-4d9b-bed4-7049b71197cb',
-			unreserved_ram: 512, overprovision_ratios: { ram: 1.0 }
-		},
-		{
-			uuid: 'f60f7e40-2e92-47b8-8686-1b46a85dd35f',
-			unreserved_ram: 768, overprovision_ratios: { ram: 1.0 }
-		}
-	];
-
-	var expectedServers = givenServers.slice(2, 4);
-	var constraints = {
-		vm: { ram: 768 },
-		pkg: { overprovision_ram: 1.5 },
-		defaults: {}
-	};
-
-	var results = filter.run(log, givenServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, expectedServers);
-
-	var expectedReasons = {
+	var servers = [ {
+		uuid: 'f667e0fa-33db-48da-a5d0-9fe837ce93fc',
+		unreserved_ram: 256, overprovision_ratios: { ram: 1.0 }
+	}, {
+		uuid: '4fe12d99-f013-4983-9e39-6e2f35b37aec',
+		unreserved_ram: 511, overprovision_ratios: { ram: 1.0 }
+	}, {
+		uuid: '7a8c759c-2a82-4d9b-bed4-7049b71197cb',
+		unreserved_ram: 512, overprovision_ratios: { ram: 1.0 }
+	}, {
+		uuid: 'f60f7e40-2e92-47b8-8686-1b46a85dd35f',
+		unreserved_ram: 768, overprovision_ratios: { ram: 1.0 }
+	} ];
+
+	var expectServers = servers.slice(2, 4);
+	var expectReasons = {
 		'f667e0fa-33db-48da-a5d0-9fe837ce93fc':
 		    'VM\'s calculated 512 RAM is less than server\'s spare 256',
 		'4fe12d99-f013-4983-9e39-6e2f35b37aec':
 		    'VM\'s calculated 512 RAM is less than server\'s spare 511'
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	t.end();
+	var constraints = {
+		vm: { ram: 768 },
+		pkg: { overprovision_ram: 1.5 },
+		defaults: {}
+	};
+
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
 });
 
 
 test('filterMinRam() with no servers', function (t) {
 	var servers = [];
+
+	var expectServers = [];
+	var expectReasons = {};
+
 	var constraints = {
 		vm: { ram: 512 },
 		pkg: { overprovision_ram: 1.0 },
 		defaults: {}
 	};
 
-	var results = filter.run(log, servers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.equal(filteredServers.length, 0);
-	t.deepEqual(reasons, {});
-
-	t.end();
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
 });
 
 
diff --git a/test/algorithms/hard-filter-overprovision-ratios.test.js b/test/algorithms/hard-filter-overprovision-ratios.test.js
index dbb9c83..f2374a6 100644
--- a/test/algorithms/hard-filter-overprovision-ratios.test.js
+++ b/test/algorithms/hard-filter-overprovision-ratios.test.js
@@ -11,14 +11,15 @@
 var test = require('tape');
 var filter = require('../../lib/algorithms/' +
     'hard-filter-overprovision-ratios.js');
+var common = require('./common.js');
 
 
-var log = {
+var LOG = {
 	trace: function () { return (true); },
 	debug: function () { return (true); }
 };
 
-var givenServers = [
+var SERVERS = [
 	{
 		uuid: '98b6985f-f102-4c4f-a2e3-eda731a8b0dc',
 		overprovision_ratios: { ram: 1.0 }
@@ -53,22 +54,13 @@ var givenServers = [
 ];
 
 
-test('filterOverprovisionRatios()', function (t) {
-	var results;
-	var reasons;
-	var constraints;
-	var filteredServers;
-	var expectedServers;
-	var expectedReasons;
-
-	expectedServers = [ givenServers[0], givenServers[2], givenServers[6],
-	    givenServers[7], givenServers[9] ];
-	constraints = { pkg: { overprovision_ram: 1.0 } };
-	results = filter.run(log, givenServers, constraints);
-	filteredServers = results[0];
-	reasons = results[1];
-	t.deepEqual(filteredServers, expectedServers);
-	expectedReasons = {
+var checkFilter = common.createPluginChecker(filter, LOG);
+
+
+test('filterOverprovisionRatios() 1', function (t) {
+	var expectServers = [ SERVERS[0], SERVERS[2], SERVERS[6], SERVERS[7],
+		SERVERS[9] ];
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'f8d517d8-80a3-47e3-a108-b9e4b6f8556a': 'Package over-provision ratio of 1.00 does not match server\'s 1.01',
 		'd71a3405-25e1-46d0-8906-ad4ffadb00fb': 'Package over-provision ratio of 1.00 does not match server\'s 2.00',
@@ -77,15 +69,16 @@ test('filterOverprovisionRatios()', function (t) {
 		'cfac7af7-22d4-4f85-af3b-ce35c1c41f92': 'Package over-provision ratio of 1.00 does not match server\'s 0.99'
 		/* END JSSTYLED */
 	};
-	t.deepEqual(reasons, expectedReasons);
-
-	constraints = { pkg: { overprovision_ram: 1.5 } };
-	expectedServers = givenServers.slice(4, 5);
-	results = filter.run(log, givenServers, constraints);
-	filteredServers = results[0];
-	reasons = results[1];
-	t.deepEqual(filteredServers, expectedServers);
-	expectedReasons = {
+
+	var constraints = { pkg: { overprovision_ram: 1.0 } };
+
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
+
+
+test('filterOverprovisionRatios() 2', function (t) {
+	var expectServers = SERVERS.slice(4, 5);
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'98b6985f-f102-4c4f-a2e3-eda731a8b0dc': 'Package over-provision ratio of 1.50 does not match server\'s 1.00',
 		'f8d517d8-80a3-47e3-a108-b9e4b6f8556a': 'Package over-provision ratio of 1.50 does not match server\'s 1.01',
@@ -98,34 +91,30 @@ test('filterOverprovisionRatios()', function (t) {
 		'1ce9c2d4-f9ef-436f-81d8-d233a970cd99': 'Package over-provision ratio of 1.50 does not match server\'s 1.00'
 		/* END JSSTYLED */
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	t.end();
+	var constraints = { pkg: { overprovision_ram: 1.5 } };
+
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('filterOverprovisionRatios() without pkg', function (t) {
-	var constraints = {};
-
-	var results = filter.run(log, givenServers, constraints);
-	var filteredServers = results[0];
+	var expectServers = SERVERS;
+	var expectReasons = { skip: 'No pkg provided' };
 
-	t.deepEqual(filteredServers, givenServers);
+	var constraints = {};
 
-	t.end();
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('filterOverprovisionRatios() with no servers', function (t) {
-	var servers = [];
-	var constraints = { pkg: { overprovision_ram: 1.0 } };
-
-	var results = filter.run(log, servers, constraints);
-	var filteredServers = results[0];
+	var expectServers = [];
+	var expectReasons = {};
 
-	t.equal(filteredServers.length, 0);
+	var constraints = { pkg: { overprovision_ram: 1.0 } };
 
-	t.end();
+	checkFilter(t, [], constraints, expectServers, expectReasons);
 });
 
 
diff --git a/test/algorithms/hard-filter-owners-servers.js b/test/algorithms/hard-filter-owners-servers.js
index 859c2f4..9d9575e 100644
--- a/test/algorithms/hard-filter-owners-servers.js
+++ b/test/algorithms/hard-filter-owners-servers.js
@@ -10,15 +10,16 @@
 
 var test = require('tape');
 var filter = require('../../lib/algorithms/hard-filter-owners-servers.js');
+var common = require('./common.js');
 
 
-var log = {
+var LOG = {
 	error: function () { return (true); },
 	trace: function () { return (true); },
 	debug: function () { return (true); }
 };
 
-var testServers = [ {
+var SERVERS = [ {
 	uuid: '33ce31d0-f376-4efd-ad41-f17c430b9782',
 	unreserved_ram: 1024
 }, {
@@ -30,67 +31,64 @@ var testServers = [ {
 } ];
 
 
+var checkFilter = common.createPluginChecker(filter, LOG);
+
+
 test('filterServersByOwners() with owner', function (t) {
-	var expectedServers = [testServers[1]];
+	var expectServers = [SERVERS[1]];
+	var expectReasons = {
+			/* JSSTYLED */
+			'*': 'Servers pass filter for owner 2316e149-1562-47ff-abea-00bda80d0e7f: server.uuid === "b8ab34e9-2914-48c4-af75-5c6440240ce1"'
+	};
+
 	var constraints = {
 		defaults: {
 			filter_owner_server: {
-				/* JSSTYLED */
+				/* BEGIN JSSTYLED */
 				'2316e149-1562-47ff-abea-00bda80d0e7f': 'server.uuid === "b8ab34e9-2914-48c4-af75-5c6440240ce1"',
-				'10a4ca4c-26e9-11e6-a0db-28cfe91f7d53':
-					'server.unreserved_ram > 1024'
+				'10a4ca4c-26e9-11e6-a0db-28cfe91f7d53': 'server.unreserved_ram > 1024'
+				/* END JSSTYLED */
 			}
 		},
 		vm: { owner_uuid: '2316e149-1562-47ff-abea-00bda80d0e7f' }
 	};
 
-	var results = filter.run(log, testServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, expectedServers);
-	t.deepEqual(reasons, {
-		/* JSSTYLED */
-		'*': 'Servers pass filter for owner 2316e149-1562-47ff-abea-00bda80d0e7f: server.uuid === "b8ab34e9-2914-48c4-af75-5c6440240ce1"'
-	});
-
-	t.end();
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('filterServersByOwners() without owner', function (t) {
-	var expectedServers = [testServers[0]];
+	var expectServers = [SERVERS[0]];
+	var expectReasons = {
+		/* BEGIN JSSTYLED */
+		'b8ab34e9-2914-48c4-af75-5c6440240ce1': 'Removed by filter for owner 2316e149-1562-47ff-abea-00bda80d0e7f',
+		'ff962080-5e04-463c-87b7-1f83d5b8c949': 'Removed by filter for owner 10a4ca4c-26e9-11e6-a0db-28cfe91f7d53'
+		/* END JSSTYLED */
+	};
+
 	var constraints = {
 		defaults: {
 			filter_owner_server: {
-				/* JSSTYLED */
+				/* BEGIN JSSTYLED */
 				'2316e149-1562-47ff-abea-00bda80d0e7f': 'server.uuid === "b8ab34e9-2914-48c4-af75-5c6440240ce1"',
-				'10a4ca4c-26e9-11e6-a0db-28cfe91f7d53':
-					'server.unreserved_ram > 1024'
+				'10a4ca4c-26e9-11e6-a0db-28cfe91f7d53': 'server.unreserved_ram > 1024'
+				/* END JSSTYLED */
 			}
 		},
 		vm: { owner_uuid: '9094b92e-26e9-11e6-b476-28cfe91f7d53' }
 	};
 
-	var results = filter.run(log, testServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, expectedServers);
-	t.deepEqual(reasons, {
-		/* BEGIN JSSTYLED */
-		'b8ab34e9-2914-48c4-af75-5c6440240ce1': 'Removed by filter for owner 2316e149-1562-47ff-abea-00bda80d0e7f',
-		'ff962080-5e04-463c-87b7-1f83d5b8c949': 'Removed by filter for owner 10a4ca4c-26e9-11e6-a0db-28cfe91f7d53'
-		/* END JSSTYLED */
-	});
-
-
-	t.end();
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('filterServersByOwners() with owner and bad code', function (t) {
-	var expectedServers = [];
+	var expectServers = [];
+	var expectReasons = {
+		'*': 'Error running filter for owner ' +
+			'2316e149-1562-47ff-abea-00bda80d0e7f: sdasd ++'
+	};
+
 	var constraints = {
 		defaults: {
 			filter_owner_server: {
@@ -103,22 +101,17 @@ test('filterServersByOwners() with owner and bad code', function (t) {
 		vm: { owner_uuid: '2316e149-1562-47ff-abea-00bda80d0e7f' }
 	};
 
-	var results = filter.run(log, testServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, expectedServers);
-	t.deepEqual(reasons, {
-		'*': 'Error running filter for owner ' +
-			'2316e149-1562-47ff-abea-00bda80d0e7f: sdasd ++'
-	});
-
-	t.end();
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('filterServersByOwners() without owner and bad code', function (t) {
-	var expectedServers = [];
+	var expectServers = [];
+	var expectReasons = {
+		'*': 'Error running filter for owner ' +
+			'2316e149-1562-47ff-abea-00bda80d0e7f: sdasd ++'
+	};
+
 	var constraints = {
 		defaults: {
 			filter_owner_server: {
@@ -131,43 +124,32 @@ test('filterServersByOwners() without owner and bad code', function (t) {
 		vm: { owner_uuid: 'cce25c36-26eb-11e6-a8f3-28cfe91f7d53' }
 	};
 
-	var results = filter.run(log, testServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, expectedServers);
-	t.deepEqual(reasons, {
-		'*': 'Error running filter for owner ' +
-			'2316e149-1562-47ff-abea-00bda80d0e7f: sdasd ++'
-	});
-
-
-	t.end();
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('filterServersByOwners() with no default', function (t) {
-	var expectedServers = testServers;
+	var expectServers = SERVERS;
+	var expectReasons = {
+		skip: 'No filter_owner_server default to run'
+	};
+
 	var constraints = {
 		defaults: {},
 		vm: { owner_uuid: 'cce25c36-26eb-11e6-a8f3-28cfe91f7d53' }
 	};
 
-	var results = filter.run(log, testServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, expectedServers);
-	t.deepEqual(reasons, {
-		skip: 'No filter_owner_server default to run'
-	});
-
-	t.end();
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('filterServersByOwners() with no servers', function (t) {
-	var servers = [];
+	var expectServers = [];
+	var expectReasons =  {
+		'*': 'Servers pass filter for owner ' +
+			'6d6d49a9-f190-41d9-8077-d6b67b55a55b: server.ram > 128'
+	};
+
 	var constraints = {
 		defaults: {
 			filter_owner_server: {
@@ -180,17 +162,7 @@ test('filterServersByOwners() with no servers', function (t) {
 		}
 	};
 
-	var results = filter.run(log, servers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.equal(filteredServers.length, 0);
-	t.deepEqual(reasons, {
-		'*': 'Servers pass filter for owner ' +
-			'6d6d49a9-f190-41d9-8077-d6b67b55a55b: server.ram > 128'
-	});
-
-	t.end();
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
diff --git a/test/algorithms/hard-filter-platform-versions.test.js b/test/algorithms/hard-filter-platform-versions.test.js
index f132ad1..f89dd38 100644
--- a/test/algorithms/hard-filter-platform-versions.test.js
+++ b/test/algorithms/hard-filter-platform-versions.test.js
@@ -10,15 +10,16 @@
 
 var test = require('tape');
 var filter = require('../../lib/algorithms/hard-filter-platform-versions.js');
+var common = require('./common.js');
 
 
-var log = {
+var LOG = {
 	trace: function () { return (true); },
 	debug: function () { return (true); }
 };
 
 
-var testServers = genServers([
+var SERVERS = genServers([
 	['b6d9d432-16bd-41b5-b3ac-7e3986380c37', '6.5', '20121218T203452Z'],
 	['aa652df0-7954-4cbb-9243-3cbb2c99b7be', '6.5', '20121210T203034Z'],
 	/* null should default to 6.5 */
@@ -32,25 +33,32 @@ var testServers = genServers([
 ]);
 
 
-test('filterPlatformVersions() no platform versions', function (t) {
-	var expectedServers = testServers;
-	var constraints = { vm: {}, img: {}, pkg: {}, defaults: {} };
+var checkFilter = common.createPluginChecker(filter, LOG);
+
 
-	var results = filter.run(log, testServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+test('filterPlatformVersions() no platform versions', function (t) {
+	var expectServers = SERVERS;
+	var expectReasons = {};
 
-	t.deepEqual(filteredServers, expectedServers);
-	t.deepEqual(reasons, {});
+	var constraints = { vm: {}, img: {}, pkg: {}, defaults: {} };
 
-	t.end();
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('filterPlatformVersions() min platform requirements for images',
 		function (t) {
-	var expectedServers = testServers.slice(5, 9);
-	expectedServers.unshift(testServers[3]);
+	var expectServers = SERVERS.slice(5, 9);
+	expectServers.unshift(SERVERS[3]);
+
+	var expectReasons = {
+		/* BEGIN JSSTYLED */
+		'b6d9d432-16bd-41b5-b3ac-7e3986380c37': 'Image or package requires min platforms {"7.0":"20121211T203034Z"}, but server has {"6.5":"20121218T203452Z"}',
+		'aa652df0-7954-4cbb-9243-3cbb2c99b7be': 'Image or package requires min platforms {"7.0":"20121211T203034Z"}, but server has {"6.5":"20121210T203034Z"}',
+		'5d4de22f-e082-43ae-83ec-9957be55f2e1': 'Image or package requires min platforms {"7.0":"20121211T203034Z"}, but server has {"6.5":"20130129T122401Z"}',
+		'9728b8c3-ecbd-4af9-94b0-a1b26e6e5cc0': 'Image or package requires min platforms {"7.0":"20121211T203034Z"}, but server has {"7.0":"20121210T203034Z"}'
+		/* END JSSTYLED */
+	};
 
 	var constraints = {
 		vm:  {},
@@ -63,13 +71,16 @@ test('filterPlatformVersions() min platform requirements for images',
 		defaults: {}
 	};
 
-	var results = filter.run(log, testServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
 
-	t.deepEqual(filteredServers, expectedServers);
 
-	var expectedReasons = {
+test('filterPlatformVersions() min platform requirements for packages',
+		function (t) {
+	var expectServers = SERVERS.slice(5, 9);
+	expectServers.unshift(SERVERS[3]);
+
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'b6d9d432-16bd-41b5-b3ac-7e3986380c37': 'Image or package requires min platforms {"7.0":"20121211T203034Z"}, but server has {"6.5":"20121218T203452Z"}',
 		'aa652df0-7954-4cbb-9243-3cbb2c99b7be': 'Image or package requires min platforms {"7.0":"20121211T203034Z"}, but server has {"6.5":"20121210T203034Z"}',
@@ -77,16 +88,6 @@ test('filterPlatformVersions() min platform requirements for images',
 		'9728b8c3-ecbd-4af9-94b0-a1b26e6e5cc0': 'Image or package requires min platforms {"7.0":"20121211T203034Z"}, but server has {"7.0":"20121210T203034Z"}'
 		/* END JSSTYLED */
 	};
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
-});
-
-
-test('filterPlatformVersions() min platform requirements for packages',
-		function (t) {
-	var expectedServers = testServers.slice(5, 9);
-	expectedServers.unshift(testServers[3]);
 
 	var constraints = {
 		vm:  {},
@@ -95,48 +96,15 @@ test('filterPlatformVersions() min platform requirements for packages',
 		defaults: {}
 	};
 
-	var results = filter.run(log, testServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, expectedServers);
-
-	var expectedReasons = {
-		/* BEGIN JSSTYLED */
-		'b6d9d432-16bd-41b5-b3ac-7e3986380c37': 'Image or package requires min platforms {"7.0":"20121211T203034Z"}, but server has {"6.5":"20121218T203452Z"}',
-		'aa652df0-7954-4cbb-9243-3cbb2c99b7be': 'Image or package requires min platforms {"7.0":"20121211T203034Z"}, but server has {"6.5":"20121210T203034Z"}',
-		'5d4de22f-e082-43ae-83ec-9957be55f2e1': 'Image or package requires min platforms {"7.0":"20121211T203034Z"}, but server has {"6.5":"20130129T122401Z"}',
-		'9728b8c3-ecbd-4af9-94b0-a1b26e6e5cc0': 'Image or package requires min platforms {"7.0":"20121211T203034Z"}, but server has {"7.0":"20121210T203034Z"}'
-		/* END JSSTYLED */
-	};
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('filterPlatformVersions() max platform requirements', function (t) {
-	var expectedServers = testServers.slice(0, 3);
-	expectedServers.push(testServers[4]);
-
-	var constraints = {
-		vm:  {},
-		img: {
-			requirements: {
-				max_platform: {'7.0': '20121211T203034Z'}
-			}
-		},
-		pkg: {},
-		defaults: {}
-	};
+	var expectServers = SERVERS.slice(0, 3);
+	expectServers.push(SERVERS[4]);
 
-	var results = filter.run(log, testServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, expectedServers);
-
-	var expectedReasons = {
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'c15641a8-1dad-4b96-be1e-6aa694395aee': 'Image or package requires max platforms {"7.0":"20121211T203034Z"}, but server has {"7.0":"20121218T203452Z"}',
 		'c98b17b0-d4f9-4a93-b4da-85ee6a065f8a': 'Image or package requires max platforms {"7.0":"20121211T203034Z"}, but server has {"7.0":"20130129T122401Z"}',
@@ -145,34 +113,26 @@ test('filterPlatformVersions() max platform requirements', function (t) {
 		'26dbdcdc-ed50-4169-b27f-e12f27c20026': 'Image or package requires max platforms {"7.0":"20121211T203034Z"}, but server has {"7.1":"20130129T122401Z"}'
 		/* END JSSTYLED */
 	};
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
-});
-
-
-test('filterPlatformVersions() minmax platform requirements 1', function (t) {
-	var expectedServers = testServers.slice(0, 1);
 
 	var constraints = {
 		vm:  {},
 		img: {
 			requirements: {
-				min_platform: {'6.5': '20121211T203034Z'},
-				max_platform: {'6.5': '20130128T203034Z'}
+				max_platform: {'7.0': '20121211T203034Z'}
 			}
 		},
 		pkg: {},
 		defaults: {}
 	};
 
-	var results = filter.run(log, testServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
+
 
-	t.deepEqual(filteredServers, expectedServers);
+test('filterPlatformVersions() minmax platform requirements 1', function (t) {
+	var expectServers = SERVERS.slice(0, 1);
 
-	var expectedReasons = {
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'aa652df0-7954-4cbb-9243-3cbb2c99b7be': 'Image or package requires min platforms {"6.5":"20121211T203034Z"}, but server has {"6.5":"20121210T203034Z"}',
 		'5d4de22f-e082-43ae-83ec-9957be55f2e1': 'Image or package requires max platforms {"6.5":"20130128T203034Z"}, but server has {"6.5":"20130129T122401Z"}',
@@ -184,75 +144,58 @@ test('filterPlatformVersions() minmax platform requirements 1', function (t) {
 		'26dbdcdc-ed50-4169-b27f-e12f27c20026': 'Image or package requires max platforms {"6.5":"20130128T203034Z"}, but server has {"7.1":"20130129T122401Z"}'
 		/* END JSSTYLED */
 	};
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
-});
-
-
-test('filterPlatformVersions() minmax platform requirements 2', function (t) {
-	var expectedServers = testServers.slice(2, 6);
-	expectedServers.unshift(testServers[0]);
-	expectedServers[expectedServers.length] = testServers[7];
 
 	var constraints = {
 		vm:  {},
 		img: {
 			requirements: {
 				min_platform: {'6.5': '20121211T203034Z'},
-				max_platform: {'7.1': '20121217T203452Z'}
+				max_platform: {'6.5': '20130128T203034Z'}
 			}
 		},
 		pkg: {},
 		defaults: {}
 	};
 
-	var results = filter.run(log, testServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
+
 
-	t.deepEqual(filteredServers, expectedServers);
+test('filterPlatformVersions() minmax platform requirements 2', function (t) {
+	var expectServers = SERVERS.slice(2, 6);
+	expectServers.unshift(SERVERS[0]);
+	expectServers[expectServers.length] = SERVERS[7];
 
-	var expectedReasons = {
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'aa652df0-7954-4cbb-9243-3cbb2c99b7be': 'Image or package requires min platforms {"6.5":"20121211T203034Z"}, but server has {"6.5":"20121210T203034Z"}',
 		'9902bee1-fe4a-4f77-93db-951ed5c501bb': 'Image or package requires max platforms {"7.1":"20121217T203452Z"}, but server has {"7.1":"20121218T203452Z"}',
 		'26dbdcdc-ed50-4169-b27f-e12f27c20026': 'Image or package requires max platforms {"7.1":"20121217T203452Z"}, but server has {"7.1":"20130129T122401Z"}'
 		/* END JSSTYLED */
 	};
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
-});
-
-
-test('filterPlatformVersions() minmax platform requirements 3', function (t) {
-	var expectedServers = testServers.slice(3, 6);
-	expectedServers.unshift(testServers[0]);
-	expectedServers[expectedServers.length] = testServers[7];
 
 	var constraints = {
 		vm:  {},
 		img: {
 			requirements: {
 				min_platform: {'6.5': '20121211T203034Z'},
-				max_platform: {
-					'6.5': '20130101T122401Z',
-					'7.1': '20121217T203452Z'
-				}
+				max_platform: {'7.1': '20121217T203452Z'}
 			}
 		},
 		pkg: {},
 		defaults: {}
 	};
 
-	var results = filter.run(log, testServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
+
 
-	t.deepEqual(filteredServers, expectedServers);
+test('filterPlatformVersions() minmax platform requirements 3', function (t) {
+	var expectServers = SERVERS.slice(3, 6);
+	expectServers.unshift(SERVERS[0]);
+	expectServers[expectServers.length] = SERVERS[7];
 
-	var expectedReasons = {
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'aa652df0-7954-4cbb-9243-3cbb2c99b7be': 'Image or package requires min platforms {"6.5":"20121211T203034Z"}, but server has {"6.5":"20121210T203034Z"}',
 		'5d4de22f-e082-43ae-83ec-9957be55f2e1': 'Image or package requires max platforms {"6.5":"20130101T122401Z","7.1":"20121217T203452Z"}, but server has {"6.5":"20130129T122401Z"}',
@@ -260,15 +203,37 @@ test('filterPlatformVersions() minmax platform requirements 3', function (t) {
 		'26dbdcdc-ed50-4169-b27f-e12f27c20026': 'Image or package requires max platforms {"6.5":"20130101T122401Z","7.1":"20121217T203452Z"}, but server has {"7.1":"20130129T122401Z"}'
 		/* END JSSTYLED */
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	t.end();
+	var constraints = {
+		vm:  {},
+		img: {
+			requirements: {
+				min_platform: {'6.5': '20121211T203034Z'},
+				max_platform: {
+					'6.5': '20130101T122401Z',
+					'7.1': '20121217T203452Z'
+				}
+			}
+		},
+		pkg: {},
+		defaults: {}
+	};
+
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('filterPlatformVersions() minmax platform requirements 4', function (t) {
-	var expectedServers = testServers.slice(2, 7);
-	expectedServers.unshift(testServers[0]);
+	var expectServers = SERVERS.slice(2, 7);
+	expectServers.unshift(SERVERS[0]);
+
+	var expectReasons = {
+		/* BEGIN JSSTYLED */
+		'aa652df0-7954-4cbb-9243-3cbb2c99b7be': 'Image or package requires min platforms {"6.5":"20121211T203034Z","7.1":"20121211T203034Z"}, but server has {"6.5":"20121210T203034Z"}',
+		'f1a33640-8657-4572-8061-31e1ecebbade': 'Image or package requires min platforms {"6.5":"20121211T203034Z","7.1":"20121211T203034Z"}, but server has {"7.1":"20121210T203034Z"}',
+		'26dbdcdc-ed50-4169-b27f-e12f27c20026': 'Image or package requires max platforms {"7.1":"20121219T203452Z"}, but server has {"7.1":"20130129T122401Z"}'
+		/* END JSSTYLED */
+	};
 
 	var constraints = {
 		vm:  {},
@@ -285,29 +250,22 @@ test('filterPlatformVersions() minmax platform requirements 4', function (t) {
 		defaults: {}
 	};
 
-	var results = filter.run(log, testServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
+
 
-	t.deepEqual(filteredServers, expectedServers);
+test('filterPlatformVersions() minmax platform requirements 5', function (t) {
+	var expectServers = SERVERS.slice(2, 6);
+	expectServers.unshift(SERVERS[0]);
+	expectServers[expectServers.length] = SERVERS[7];
 
-	var expectedReasons = {
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
-		'aa652df0-7954-4cbb-9243-3cbb2c99b7be': 'Image or package requires min platforms {"6.5":"20121211T203034Z","7.1":"20121211T203034Z"}, but server has {"6.5":"20121210T203034Z"}',
-		'f1a33640-8657-4572-8061-31e1ecebbade': 'Image or package requires min platforms {"6.5":"20121211T203034Z","7.1":"20121211T203034Z"}, but server has {"7.1":"20121210T203034Z"}',
-		'26dbdcdc-ed50-4169-b27f-e12f27c20026': 'Image or package requires max platforms {"7.1":"20121219T203452Z"}, but server has {"7.1":"20130129T122401Z"}'
+		'aa652df0-7954-4cbb-9243-3cbb2c99b7be': 'Image or package requires min platforms {"6.5":"20121218T203452Z"}, but server has {"6.5":"20121210T203034Z"}',
+		'9902bee1-fe4a-4f77-93db-951ed5c501bb': 'Image or package requires max platforms {"7.1":"20121217T203452Z"}, but server has {"7.1":"20121218T203452Z"}',
+		'26dbdcdc-ed50-4169-b27f-e12f27c20026': 'Image or package requires max platforms {"7.1":"20121217T203452Z"}, but server has {"7.1":"20130129T122401Z"}'
 		/* END JSSTYLED */
 	};
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
-});
-
-
-test('filterPlatformVersions() minmax platform requirements 5', function (t) {
-	var expectedServers = testServers.slice(2, 6);
-	expectedServers.unshift(testServers[0]);
-	expectedServers[expectedServers.length] = testServers[7];
 
 	var constraints = {
 		vm: {},
@@ -321,29 +279,22 @@ test('filterPlatformVersions() minmax platform requirements 5', function (t) {
 		defaults: {}
 	};
 
-	var results = filter.run(log, testServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
+
 
-	t.deepEqual(filteredServers, expectedServers);
+test('filterPlatformVersions() ignore non-versions', function (t) {
+	var expectServers = SERVERS.slice(2, 6);
+	expectServers.unshift(SERVERS[0]);
+	expectServers[expectServers.length] = SERVERS[7];
 
-	var expectedReasons = {
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
-		'aa652df0-7954-4cbb-9243-3cbb2c99b7be': 'Image or package requires min platforms {"6.5":"20121218T203452Z"}, but server has {"6.5":"20121210T203034Z"}',
+		'aa652df0-7954-4cbb-9243-3cbb2c99b7be': 'Image or package requires min platforms {"6.5":"20121211T203034Z"}, but server has {"6.5":"20121210T203034Z"}',
 		'9902bee1-fe4a-4f77-93db-951ed5c501bb': 'Image or package requires max platforms {"7.1":"20121217T203452Z"}, but server has {"7.1":"20121218T203452Z"}',
 		'26dbdcdc-ed50-4169-b27f-e12f27c20026': 'Image or package requires max platforms {"7.1":"20121217T203452Z"}, but server has {"7.1":"20130129T122401Z"}'
 		/* END JSSTYLED */
 	};
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
-});
-
-
-test('filterPlatformVersions() ignore non-versions', function (t) {
-	var expectedServers = testServers.slice(2, 6);
-	expectedServers.unshift(testServers[0]);
-	expectedServers[expectedServers.length] = testServers[7];
 
 	var constraints = {
 		vm:  {},
@@ -363,28 +314,14 @@ test('filterPlatformVersions() ignore non-versions', function (t) {
 		defaults: {}
 	};
 
-	var results = filter.run(log, testServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, expectedServers);
-
-	var expectedReasons = {
-		/* BEGIN JSSTYLED */
-		'aa652df0-7954-4cbb-9243-3cbb2c99b7be': 'Image or package requires min platforms {"6.5":"20121211T203034Z"}, but server has {"6.5":"20121210T203034Z"}',
-		'9902bee1-fe4a-4f77-93db-951ed5c501bb': 'Image or package requires max platforms {"7.1":"20121217T203452Z"}, but server has {"7.1":"20121218T203452Z"}',
-		'26dbdcdc-ed50-4169-b27f-e12f27c20026': 'Image or package requires max platforms {"7.1":"20121217T203452Z"}, but server has {"7.1":"20130129T122401Z"}'
-		/* END JSSTYLED */
-	};
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('filterPlatformVersions() with filter_docker_min_platform, no Docker',
 function (t) {
-	var expectedServers = testServers;
+	var expectServers = SERVERS;
+	var expectReasons = {};
 
 	var constraints = {
 		vm: {},
@@ -395,29 +332,29 @@ function (t) {
 		}
 	};
 
-	var results = filter.run(log, testServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, expectedServers);
-
-	var expectedReasons = {};
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('filterPlatformVersions() with filter_docker_min_platform, VM is Docker',
 function (t) {
-	var expectedServers = [
-		testServers[3],
-		testServers[5],
-		testServers[6],
-		testServers[7],
-		testServers[8]
+	var expectServers = [
+		SERVERS[3],
+		SERVERS[5],
+		SERVERS[6],
+		SERVERS[7],
+		SERVERS[8]
 	];
 
+	var expectReasons = {
+		/* BEGIN JSSTYLED */
+		'5d4de22f-e082-43ae-83ec-9957be55f2e1': 'Image or package requires min platforms {"7.0":"20121218T203452Z"}, but server has {"6.5":"20130129T122401Z"}',
+		'9728b8c3-ecbd-4af9-94b0-a1b26e6e5cc0': 'Image or package requires min platforms {"7.0":"20121218T203452Z"}, but server has {"7.0":"20121210T203034Z"}',
+		'aa652df0-7954-4cbb-9243-3cbb2c99b7be': 'Image or package requires min platforms {"7.0":"20121218T203452Z"}, but server has {"6.5":"20121210T203034Z"}',
+		'b6d9d432-16bd-41b5-b3ac-7e3986380c37': 'Image or package requires min platforms {"7.0":"20121218T203452Z"}, but server has {"6.5":"20121218T203452Z"}'
+		/* END JSSTYLED */
+	};
+
 	var constraints = {
 		vm: {
 			docker: true
@@ -429,53 +366,27 @@ function (t) {
 		}
 	};
 
-	var results = filter.run(log, testServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, expectedServers);
-
-	var expectedReasons = {
-		/* BEGIN JSSTYLED */
-		'5d4de22f-e082-43ae-83ec-9957be55f2e1': 'Image or package requires min platforms {"7.0":"20121218T203452Z"}, but server has {"6.5":"20130129T122401Z"}',
-		'9728b8c3-ecbd-4af9-94b0-a1b26e6e5cc0': 'Image or package requires min platforms {"7.0":"20121218T203452Z"}, but server has {"7.0":"20121210T203034Z"}',
-		'aa652df0-7954-4cbb-9243-3cbb2c99b7be': 'Image or package requires min platforms {"7.0":"20121218T203452Z"}, but server has {"6.5":"20121210T203034Z"}',
-		'b6d9d432-16bd-41b5-b3ac-7e3986380c37': 'Image or package requires min platforms {"7.0":"20121218T203452Z"}, but server has {"6.5":"20121218T203452Z"}'
-		/* END JSSTYLED */
-	};
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('filterPlatformVersions() no pkg', function (t) {
-	var expectedServers = testServers;
-	var constraints = { vm: {}, img: {}, defaults: {} };
-
-	var results = filter.run(log, testServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+	var expectServers = SERVERS;
+	var expectReasons = {};
 
-	t.deepEqual(filteredServers, expectedServers);
-	t.deepEqual(reasons, {});
+	var constraints = { vm: {}, img: {}, defaults: {} };
 
-	t.end();
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('filterPlatformVersions() with no servers', function (t) {
-	var givenServers = [];
-	var constraints = { vm: {}, img: {}, pkg: {}, defaults: {} };
-
-	var results = filter.run(log, givenServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+	var expectServers = [];
+	var expectReasons = {};
 
-	t.equal(filteredServers.length, 0);
-	t.deepEqual(reasons, {});
+	var constraints = { vm: {}, img: {}, pkg: {}, defaults: {} };
 
-	t.end();
+	checkFilter(t, [], constraints, expectServers, expectReasons);
 });
 
 
diff --git a/test/algorithms/hard-filter-reserved.test.js b/test/algorithms/hard-filter-reserved.test.js
index 2b45ade..da71351 100644
--- a/test/algorithms/hard-filter-reserved.test.js
+++ b/test/algorithms/hard-filter-reserved.test.js
@@ -10,47 +10,41 @@
 
 var test = require('tape');
 var filter = require('../../lib/algorithms/hard-filter-reserved.js');
+var common = require('./common.js');
 
 
-var log = {
+var LOG = {
 	trace: function () { return (true); },
 	debug: function () { return (true); }
 };
 
 
+var checkFilter = common.createPluginChecker(filter, LOG);
+
+
 test('filterReserved()', function (t) {
-	var givenServers = [
+	var servers = [
 		{ memory_available_bytes: 128, reserved: false },
 		{ memory_available_bytes: 384 },
 		{ memory_available_bytes: 768, reserved: true }
 	];
 
-	var expectedServers = givenServers.slice(0, 2);
-	var constraints = {};
+	var expectServers = servers.slice(0, 2);
+	var expectReasons = {};
 
-	var results = filter.run(log, givenServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, expectedServers);
-	t.deepEqual(reasons, undefined);
+	var constraints = {};
 
-	t.end();
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
 });
 
 
 test('filterReserved() with no servers', function (t) {
-	var servers = [];
-	var constraints = {};
-
-	var results = filter.run(log, servers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+	var expectServers = [];
+	var expectReasons = {};
 
-	t.equal(filteredServers.length, 0);
-	t.deepEqual(reasons, undefined);
+	var constraints = {};
 
-	t.end();
+	checkFilter(t, [], constraints, expectServers, expectReasons);
 });
 
 
diff --git a/test/algorithms/hard-filter-reservoir.test.js b/test/algorithms/hard-filter-reservoir.test.js
index bc0380c..7c99a22 100644
--- a/test/algorithms/hard-filter-reservoir.test.js
+++ b/test/algorithms/hard-filter-reservoir.test.js
@@ -10,47 +10,41 @@
 
 var test = require('tape');
 var filter = require('../../lib/algorithms/hard-filter-reservoir.js');
+var common = require('./common.js');
 
 
-var log = {
+var LOG = {
 	trace: function () { return (true); },
 	debug: function () { return (true); }
 };
 
 
+var checkFilter = common.createPluginChecker(filter, LOG);
+
+
 test('filterReservoir()', function (t) {
-	var givenServers = [
+	var servers = [
 		{ memory_available_bytes: 128, reservoir: false },
 		{ memory_available_bytes: 384 },
 		{ memory_available_bytes: 768, reservoir: true }
 	];
 
-	var expectedServers = givenServers.slice(0, 2);
-	var constraints = {};
+	var expectServers = servers.slice(0, 2);
+	var expectReasons = {};
 
-	var results = filter.run(log, givenServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, expectedServers);
-	t.deepEqual(reasons, undefined);
+	var constraints = {};
 
-	t.end();
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
 });
 
 
 test('filterReservoir() with no servers', function (t) {
-	var servers = [];
-	var constraints = {};
-
-	var results = filter.run(log, servers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+	var expectServers = [];
+	var expectReasons = {};
 
-	t.equal(filteredServers.length, 0);
-	t.deepEqual(reasons, undefined);
+	var constraints = {};
 
-	t.end();
+	checkFilter(t, [], constraints, expectServers, expectReasons);
 });
 
 
diff --git a/test/algorithms/hard-filter-running.test.js b/test/algorithms/hard-filter-running.test.js
index ba7336a..a25d07b 100644
--- a/test/algorithms/hard-filter-running.test.js
+++ b/test/algorithms/hard-filter-running.test.js
@@ -10,102 +10,102 @@
 
 var test = require('tape');
 var filter = require('../../lib/algorithms/hard-filter-running.js');
+var common = require('./common.js');
 
 
-var log = {
+var LOG = {
 	trace: function () { return (true); },
 	debug: function () { return (true); }
 };
 
 
-test('filterRunning()', function (t) {
-	var givenServers = [
-		{ uuid: '2c86607e-7cdd-4d6b-a7db-16d91efe770c' },
-		{
-			uuid: '7ddf3e13-5386-41bd-96b9-a85825013d44',
-			status: 'running'
-		},
-		{
-			uuid: '242ef61f-2b26-42f1-a626-8ccf32738128',
-			status: 'running'
-		},
-		{
-			uuid: 'ac211712-34e6-45ac-b9e9-9165f6af3cfc',
-			status: 'offline'
-		}
-	];
+var checkFilter = common.createPluginChecker(filter, LOG);
 
-	var expectedServers = givenServers.slice(1, 3);
-	var constraints = {};
 
-	var results = filter.run(log, givenServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, expectedServers);
-	var expectedReasons = {
+test('filterRunning()', function (t) {
+	var servers = [ {
+		uuid: '2c86607e-7cdd-4d6b-a7db-16d91efe770c'
+	}, {
+		uuid: '7ddf3e13-5386-41bd-96b9-a85825013d44',
+		status: 'running'
+	}, {
+		uuid: '242ef61f-2b26-42f1-a626-8ccf32738128',
+		status: 'running'
+	}, {
+		uuid: 'ac211712-34e6-45ac-b9e9-9165f6af3cfc',
+		status: 'offline'
+	} ];
+
+	var expectServers = servers.slice(1, 3);
+	var expectReasons = {
 		'2c86607e-7cdd-4d6b-a7db-16d91efe770c':
 		    'Server has status: undefined',
 		'ac211712-34e6-45ac-b9e9-9165f6af3cfc':
 		    'Server has status: offline'
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	t.end();
+	var constraints = {};
+
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
 });
 
 
 test('filterRunning() with no servers', function (t) {
-	var servers = [];
-	var constraints = {};
-
-	var results = filter.run(log, servers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+	var expectServers = [];
+	var expectReasons = {};
 
-	t.equal(filteredServers.length, 0);
-	t.deepEqual(reasons, {});
+	var constraints = {};
 
-	t.end();
+	checkFilter(t, [], constraints, expectServers, expectReasons);
 });
 
 
 test('filterRunning() with malformed servers 1', function (t) {
-	var servers = 'foo';
+	var badServers = 'foo';
+
+	var expectServers = badServers;
+	var expectReasons = { skip: 'servers variable is not an array' };
+
 	var constraints = {};
 
-	var results = filter.run(log, servers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+	filter.run(LOG, badServers, constraints,
+			function (err, servers, reasons) {
+		t.ifError(err);
 
-	t.equal(filteredServers, 'foo');
-	t.deepEqual(reasons, undefined);
+		t.deepEqual(servers, expectServers);
+		t.deepEqual(reasons, expectReasons);
 
-	t.end();
+		t.end();
+	});
 });
 
 
 test('filterRunning() with malformed servers 2', function (t) {
-	var servers = [
+	var givenServers = [
 		'foo',
 		{ uuid: '2c86607e-7cdd-4d6b-a7db-16d91efe770c',
 		    status: 'running' },
 		{ uuid: '242ef61f-2b26-42f1-a626-8ccf32738128',
 		    status: 'rebooting' }
 	];
-	var constraints = {};
-
-	var results = filter.run(log, servers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
 
-	t.deepEqual(filteredServers, servers.slice(1, 2));
-	t.deepEqual(reasons, {
+	var expectServers = givenServers.slice(1, 2);
+	var expectReasons = {
 		'242ef61f-2b26-42f1-a626-8ccf32738128':
 		    'Server has status: rebooting'
-	});
+	};
 
-	t.end();
+	var constraints = {};
+
+	filter.run(LOG, givenServers, constraints,
+			function (err, servers, reasons) {
+		t.ifError(err);
+
+		t.deepEqual(servers, expectServers);
+		t.deepEqual(reasons, expectReasons);
+
+		t.end();
+	});
 });
 
 
diff --git a/test/algorithms/hard-filter-setup.test.js b/test/algorithms/hard-filter-setup.test.js
index 942db2b..4e02f7e 100644
--- a/test/algorithms/hard-filter-setup.test.js
+++ b/test/algorithms/hard-filter-setup.test.js
@@ -10,78 +10,82 @@
 
 var test = require('tape');
 var filter = require('../../lib/algorithms/hard-filter-setup.js');
+var common = require('./common.js');
 
 
-var log = {
+var LOG = {
 	trace: function () { return (true); },
 	debug: function () { return (true); }
 };
 
 
+var checkFilter = common.createPluginChecker(filter, LOG);
+
+
 test('filterSetup()', function (t) {
-	var givenServers = [
+	var servers = [
 		{ memory_available_bytes: 128 },
 		{ memory_available_bytes: 256, setup: true },
 		{ memory_available_bytes: 512, setup: false },
 		{ memory_available_bytes: 768, setup: true }
 	];
 
-	var expectedServers = [ givenServers[1], givenServers[3] ];
-	var constraints = {};
-
-	var results = filter.run(log, givenServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+	var expectServers = [ servers[1], servers[3] ];
+	var expectReasons = {};
 
-	t.deepEqual(filteredServers, expectedServers);
-	t.deepEqual(reasons, undefined);
+	var constraints = {};
 
-	t.end();
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
 });
 
 
 test('filterSetup() with no servers', function (t) {
-	var servers = [];
-	var constraints = {};
-
-	var results = filter.run(log, servers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+	var expectServers = [];
+	var expectReasons = {};
 
-	t.equal(filteredServers.length, 0);
-	t.deepEqual(reasons, undefined);
+	var constraints = {};
 
-	t.end();
+	checkFilter(t, [], constraints, expectServers, expectReasons);
 });
 
 
 test('filterSetup() with malformed servers 1', function (t) {
-	var servers = 'foo';
+	var badServers = 'foo';
+
+	var expectServers = badServers;
+	var expectReasons = { skip: 'servers variable is not an array' };
+
 	var constraints = {};
 
-	var results = filter.run(log, servers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+	filter.run(LOG, badServers, constraints,
+			function (err, servers, reasons) {
+		t.ifError(err);
 
-	t.equal(filteredServers, 'foo');
-	t.deepEqual(reasons, undefined);
+		t.deepEqual(servers, expectServers);
+		t.deepEqual(reasons, expectReasons);
 
-	t.end();
+		t.end();
+	});
 });
 
 
 test('filterSetup() with malformed servers 2', function (t) {
-	var servers = [ 'foo', { setup: true }, { setup: false } ];
+	var givenServers = [ 'foo', { setup: true }, { setup: false } ];
+
+	var expectServers = [ givenServers[1] ];
+	var expectReasons = {};
+
 	var constraints = {};
 
-	var results = filter.run(log, servers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+	filter.run(LOG, givenServers, constraints,
+			function (err, servers, reasons) {
+		t.ifError(err);
 
-	t.deepEqual(filteredServers, [ { setup: true } ]);
-	t.deepEqual(reasons, undefined);
+		t.deepEqual(servers, expectServers);
+		t.deepEqual(reasons, expectReasons);
 
-	t.end();
+		t.end();
+	});
 });
 
 
diff --git a/test/algorithms/hard-filter-sick-servers.test.js b/test/algorithms/hard-filter-sick-servers.test.js
index 7cd0c29..fb00f4b 100644
--- a/test/algorithms/hard-filter-sick-servers.test.js
+++ b/test/algorithms/hard-filter-sick-servers.test.js
@@ -10,16 +10,20 @@
 
 var test = require('tape');
 var filter = require('../../lib/algorithms/hard-filter-sick-servers.js');
+var common = require('./common.js');
 
 
-var log = {
+var LOG = {
 	trace: function () { return (true); },
 	debug: function () { return (true); }
 };
 
 
+var checkFilter = common.createPluginChecker(filter, LOG);
+
+
 test('filterSickServers()', function (t) {
-	var givenServers = [ {
+	var servers = [ {
 		/* should be included because doesn't have two failures */
 		uuid: '647d5e40-bab5-465e-b351-311eec116822',
 		vms: {
@@ -121,34 +125,23 @@ test('filterSickServers()', function (t) {
 		uuid: '4b557554-43ee-4281-86d5-cb6332762d6f'
 	} ];
 
-	var expectedServers = [ givenServers[0], givenServers[1],
-	    givenServers[3], givenServers[4], givenServers[5],
-	    givenServers[6] ];
+	var expectServers = [ servers[0], servers[1], servers[3], servers[4],
+		servers[5], servers[6] ];
 
-	var results = filter.run(log, givenServers, {});
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, expectedServers);
-	t.deepEqual(reasons, {
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'5625eacc-e173-4bb0-9c22-b1a80d8dfa39': 'VMs c9b7d347-7f98-48ee-8b8a-165f749e7ced and 70d46ece-1158-423c-b3a6-e569f688e0b5 failed consecutively the past 24h'
 		/* END JSSTYLED */
-	});
+	};
 
-	t.end();
+	var constraints = {};
+
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
 });
 
 
 test('filterSickServers() with no servers', function (t) {
-	var results = filter.run(log, [], {});
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.equal(filteredServers.length, 0);
-	t.deepEqual(reasons, {});
-
-	t.end();
+	checkFilter(t, [], {}, [], {});
 });
 
 
diff --git a/test/algorithms/hard-filter-traits.test.js b/test/algorithms/hard-filter-traits.test.js
index b215b45..4db3970 100644
--- a/test/algorithms/hard-filter-traits.test.js
+++ b/test/algorithms/hard-filter-traits.test.js
@@ -10,54 +10,41 @@
 
 var test = require('tape');
 var filter = require('../../lib/algorithms/hard-filter-traits.js');
+var common = require('./common.js');
 
 
-var log = {
+var LOG = {
 	trace: function () { return (true); },
 	debug: function () { return (true); }
 };
 
-
-test('filterTraits() for VMs', function (t) {
-	var givenServers = [
-		{
-			uuid: 'de52bbab-a12d-4e11-8292-c4141031553c',
-			traits: { ssd: true,  users: 'john' }
-		},
-		{
-			uuid: '56b19a96-bd79-4b0d-bf31-6287500e653c',
-			traits: { ssd: true,  users: ['john', 'jane'] }
-		},
-		{
-			uuid: '11a7ea8e-a9ee-4101-852d-cd47536b9ff0',
-			traits: { ssd: true  }
-		},
-		{
-			uuid: 'c2edd722-16cd-4b2f-9436-5cde12cf0eb0',
-			traits: { ssd: false }
-		},
-		{
-			uuid: 'f459c92d-1b50-4cea-9412-8d7af4acfc31',
-			traits: { users: ['jack', 'jane'] }
-		},
-		{
-			uuid: '70675b48-a989-466a-9cde-8b65fa2df12e',
-			traits: { users: 'john' }
-		}
-	];
-
-	var results;
-	var reasons;
-	var constraints;
-	var filteredServers;
-	var expectedReasons;
-
-	constraints = { vm: { traits: { ssd: true } }, img: {} };
-	results = filter.run(log, givenServers, constraints);
-	filteredServers = results[0];
-	reasons = results[1];
-	t.deepEqual(filteredServers, givenServers.slice(2, 3));
-	expectedReasons = {
+var SERVERS = [ {
+	uuid: 'de52bbab-a12d-4e11-8292-c4141031553c',
+	traits: { ssd: true,  users: 'john' }
+}, {
+	uuid: '56b19a96-bd79-4b0d-bf31-6287500e653c',
+	traits: { ssd: true,  users: ['john', 'jane'] }
+}, {
+	uuid: '11a7ea8e-a9ee-4101-852d-cd47536b9ff0',
+	traits: { ssd: true  }
+}, {
+	uuid: 'c2edd722-16cd-4b2f-9436-5cde12cf0eb0',
+	traits: { ssd: false }
+}, {
+	uuid: 'f459c92d-1b50-4cea-9412-8d7af4acfc31',
+	traits: { users: ['jack', 'jane'] }
+}, {
+	uuid: '70675b48-a989-466a-9cde-8b65fa2df12e',
+	traits: { users: 'john' }
+} ];
+
+
+var checkFilter = common.createPluginChecker(filter, LOG);
+
+
+test('filterTraits() for VMs 1', function (t) {
+	var expectServers = SERVERS.slice(2, 3);
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'de52bbab-a12d-4e11-8292-c4141031553c': 'Combined vm/pkg/img traits require {"ssd":true} but server has {"ssd":true,"users":"john"}',
 		'56b19a96-bd79-4b0d-bf31-6287500e653c': 'Combined vm/pkg/img traits require {"ssd":true} but server has {"ssd":true,"users":["john","jane"]}',
@@ -66,14 +53,16 @@ test('filterTraits() for VMs', function (t) {
 		'70675b48-a989-466a-9cde-8b65fa2df12e': 'ssd comparison failed: undefined property'
 		/* END JSSTYLED */
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	constraints = { vm: { traits: { ssd: false } }, img: {} };
-	results = filter.run(log, givenServers, constraints);
-	filteredServers = results[0];
-	reasons = results[1];
-	t.deepEqual(filteredServers, givenServers.slice(3, 4));
-	expectedReasons = {
+	var constraints = { vm: { traits: { ssd: true } }, img: {} };
+
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
+
+
+test('filterTraits() for VMs 2', function (t) {
+	var expectServers = SERVERS.slice(3, 4);
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'de52bbab-a12d-4e11-8292-c4141031553c': 'Combined vm/pkg/img traits require {"ssd":false} but server has {"ssd":true,"users":"john"}',
 		'56b19a96-bd79-4b0d-bf31-6287500e653c': 'Combined vm/pkg/img traits require {"ssd":false} but server has {"ssd":true,"users":["john","jane"]}',
@@ -82,14 +71,17 @@ test('filterTraits() for VMs', function (t) {
 		'70675b48-a989-466a-9cde-8b65fa2df12e': 'ssd comparison failed: undefined property'
 		/* END JSSTYLED */
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	constraints = { vm: { traits: { users: 'john' } }, img: {} };
-	results = filter.run(log, givenServers, constraints);
-	filteredServers = results[0];
-	reasons = results[1];
-	t.deepEqual(filteredServers, givenServers.slice(5, 6));
-	expectedReasons = {
+	var constraints = { vm: { traits: { ssd: false } }, img: {} };
+
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
+
+
+
+test('filterTraits() for VMs 3', function (t) {
+	var expectServers = SERVERS.slice(5, 6);
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'de52bbab-a12d-4e11-8292-c4141031553c': 'Combined vm/pkg/img traits require {"users":"john"} but server has {"ssd":true,"users":"john"}',
 		'56b19a96-bd79-4b0d-bf31-6287500e653c': 'Combined vm/pkg/img traits require {"users":"john"} but server has {"ssd":true,"users":["john","jane"]}',
@@ -98,14 +90,16 @@ test('filterTraits() for VMs', function (t) {
 		'f459c92d-1b50-4cea-9412-8d7af4acfc31': 'users comparison failed: server trait array did not contain trait'
 		/* END JSSTYLED */
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	constraints = { vm: { traits: { users: 'jack' } }, img: {} };
-	results = filter.run(log, givenServers, constraints);
-	filteredServers = results[0];
-	reasons = results[1];
-	t.deepEqual(filteredServers, givenServers.slice(4, 5));
-	expectedReasons = {
+	var constraints = { vm: { traits: { users: 'john' } }, img: {} };
+
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
+
+
+test('filterTraits() for VMs 4', function (t) {
+	var expectServers = SERVERS.slice(4, 5);
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'de52bbab-a12d-4e11-8292-c4141031553c': 'Combined vm/pkg/img traits require {"users":"jack"} but server has {"ssd":true,"users":"john"}',
 		'56b19a96-bd79-4b0d-bf31-6287500e653c': 'Combined vm/pkg/img traits require {"users":"jack"} but server has {"ssd":true,"users":["john","jane"]}',
@@ -114,14 +108,16 @@ test('filterTraits() for VMs', function (t) {
 		'70675b48-a989-466a-9cde-8b65fa2df12e': 'users comparison failed: strings did not match'
 		/* END JSSTYLED */
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	constraints = { vm: { traits: { ssd: true, users: 'jane' } }, img: {} };
-	results = filter.run(log, givenServers, constraints);
-	filteredServers = results[0];
-	reasons = results[1];
-	t.deepEqual(filteredServers, givenServers.slice(1, 2));
-	expectedReasons = {
+	var constraints = { vm: { traits: { users: 'jack' } }, img: {} };
+
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
+
+
+test('filterTraits() for VMs 5', function (t) {
+	var expectServers = SERVERS.slice(1, 2);
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'de52bbab-a12d-4e11-8292-c4141031553c': 'users comparison failed: strings did not match',
 		'11a7ea8e-a9ee-4101-852d-cd47536b9ff0': 'Combined vm/pkg/img traits require {"ssd":true,"users":"jane"} but server has {"ssd":true}',
@@ -130,19 +126,19 @@ test('filterTraits() for VMs', function (t) {
 		'70675b48-a989-466a-9cde-8b65fa2df12e': 'Combined vm/pkg/img traits require {"ssd":true,"users":"jane"} but server has {"users":"john"}'
 		/* END JSSTYLED */
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	constraints = {
-		vm: {
-			traits: { ssd: false, users: 'jane' }
-		},
-		img: {}
+	var constraints = {
+		vm: { traits: { ssd: true, users: 'jane' } }, img: {}
 	};
-	results = filter.run(log, givenServers, constraints);
-	filteredServers = results[0];
-	reasons = results[1];
-	t.deepEqual(filteredServers, []);
-	expectedReasons = {
+
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
+
+
+
+test('filterTraits() for VMs 6', function (t) {
+	var expectServers = [];
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'de52bbab-a12d-4e11-8292-c4141031553c': 'ssd comparison failed: boolean did not match',
 		'56b19a96-bd79-4b0d-bf31-6287500e653c': 'ssd comparison failed: boolean did not match',
@@ -152,14 +148,18 @@ test('filterTraits() for VMs', function (t) {
 		'70675b48-a989-466a-9cde-8b65fa2df12e': 'Combined vm/pkg/img traits require {"ssd":false,"users":"jane"} but server has {"users":"john"}'
 		/* END JSSTYLED */
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	constraints = { vm: { traits: { users: ['john', 'jane' ] } }, img: {} };
-	results = filter.run(log, givenServers, constraints);
-	filteredServers = results[0];
-	reasons = results[1];
-	t.deepEqual(filteredServers, givenServers.slice(4, 6));
-	expectedReasons = {
+	var constraints = {
+		vm: { traits: { ssd: false, users: 'jane' } }, img: {}
+	};
+
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
+
+
+test('filterTraits() for VMs 7', function (t) {
+	var expectServers = SERVERS.slice(4, 6);
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'de52bbab-a12d-4e11-8292-c4141031553c': 'Combined vm/pkg/img traits require {"users":["john","jane"]} but server has {"ssd":true,"users":"john"}',
 		'56b19a96-bd79-4b0d-bf31-6287500e653c': 'Combined vm/pkg/img traits require {"users":["john","jane"]} but server has {"ssd":true,"users":["john","jane"]}',
@@ -167,52 +167,18 @@ test('filterTraits() for VMs', function (t) {
 		'c2edd722-16cd-4b2f-9436-5cde12cf0eb0': 'users comparison failed: undefined property'
 		/* END JSSTYLED */
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	t.end();
-});
+	var constraints = {
+		vm: { traits: { users: ['john', 'jane' ] } }, img: {}
+	};
 
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
 
-test('filterTraits() for image manifests', function (t) {
-	var givenServers = [
-		{
-			uuid: 'de52bbab-a12d-4e11-8292-c4141031553c',
-			traits: { ssd: true,  users: 'john' }
-		},
-		{
-			uuid: '56b19a96-bd79-4b0d-bf31-6287500e653c',
-			traits: { ssd: true,  users: ['john', 'jane'] }
-		},
-		{
-			uuid: '11a7ea8e-a9ee-4101-852d-cd47536b9ff0',
-			traits: { ssd: true  }
-		},
-		{
-			uuid: 'c2edd722-16cd-4b2f-9436-5cde12cf0eb0',
-			traits: { ssd: false }
-		},
-		{
-			uuid: 'f459c92d-1b50-4cea-9412-8d7af4acfc31',
-			traits: { users: ['jack', 'jane'] }
-		},
-		{
-			uuid: '70675b48-a989-466a-9cde-8b65fa2df12e',
-			traits: { users: 'john' }
-		}
-	];
 
-	var results;
-	var reasons;
-	var expectedReasons;
-	var constraints;
-	var filteredServers;
-
-	constraints = { vm: {}, pkg: {}, img: { traits: { ssd: true } } };
-	results = filter.run(log, givenServers, constraints);
-	filteredServers = results[0];
-	reasons = results[1];
-	t.deepEqual(filteredServers, givenServers.slice(2, 3));
-	expectedReasons = {
+test('filterTraits() for image manifests 1', function (t) {
+	var expectServers = SERVERS.slice(2, 3);
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'de52bbab-a12d-4e11-8292-c4141031553c': 'Combined vm/pkg/img traits require {"ssd":true} but server has {"ssd":true,"users":"john"}',
 		'56b19a96-bd79-4b0d-bf31-6287500e653c': 'Combined vm/pkg/img traits require {"ssd":true} but server has {"ssd":true,"users":["john","jane"]}',
@@ -221,14 +187,16 @@ test('filterTraits() for image manifests', function (t) {
 		'70675b48-a989-466a-9cde-8b65fa2df12e': 'ssd comparison failed: undefined property'
 		/* END JSSTYLED */
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	constraints = { vm: {}, pkg: {}, img: { traits: { ssd: false } } };
-	results = filter.run(log, givenServers, constraints);
-	filteredServers = results[0];
-	reasons = results[1];
-	t.deepEqual(filteredServers, givenServers.slice(3, 4));
-	expectedReasons = {
+	var constraints = { vm: {}, pkg: {}, img: { traits: { ssd: true } } };
+
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
+
+
+test('filterTraits() for image manifests 2', function (t) {
+	var expectServers = SERVERS.slice(3, 4);
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'de52bbab-a12d-4e11-8292-c4141031553c': 'Combined vm/pkg/img traits require {"ssd":false} but server has {"ssd":true,"users":"john"}',
 		'56b19a96-bd79-4b0d-bf31-6287500e653c': 'Combined vm/pkg/img traits require {"ssd":false} but server has {"ssd":true,"users":["john","jane"]}',
@@ -237,14 +205,16 @@ test('filterTraits() for image manifests', function (t) {
 		'70675b48-a989-466a-9cde-8b65fa2df12e': 'ssd comparison failed: undefined property'
 		/* END JSSTYLED */
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	constraints = { vm: {}, pkg: {}, img: { traits: { users: 'john' } } };
-	results = filter.run(log, givenServers, constraints);
-	filteredServers = results[0];
-	reasons = results[1];
-	t.deepEqual(filteredServers, givenServers.slice(5, 6));
-	expectedReasons = {
+	var constraints = { vm: {}, pkg: {}, img: { traits: { ssd: false } } };
+
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
+
+
+test('filterTraits() for image manifests 3', function (t) {
+	var expectServers = SERVERS.slice(5, 6);
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'de52bbab-a12d-4e11-8292-c4141031553c': 'Combined vm/pkg/img traits require {"users":"john"} but server has {"ssd":true,"users":"john"}',
 		'56b19a96-bd79-4b0d-bf31-6287500e653c': 'Combined vm/pkg/img traits require {"users":"john"} but server has {"ssd":true,"users":["john","jane"]}',
@@ -253,14 +223,18 @@ test('filterTraits() for image manifests', function (t) {
 		'f459c92d-1b50-4cea-9412-8d7af4acfc31': 'users comparison failed: server trait array did not contain trait'
 		/* END JSSTYLED */
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	constraints = { vm: {}, pkg: {}, img: { traits: { users: 'jack' } } };
-	results = filter.run(log, givenServers, constraints);
-	filteredServers = results[0];
-	reasons = results[1];
-	t.deepEqual(filteredServers, givenServers.slice(4, 5));
-	expectedReasons = {
+	var constraints = {
+		vm: {}, pkg: {}, img: { traits: { users: 'john' } }
+	};
+
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
+
+
+test('filterTraits() for image manifests 4', function (t) {
+	var expectServers = SERVERS.slice(4, 5);
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'de52bbab-a12d-4e11-8292-c4141031553c': 'Combined vm/pkg/img traits require {"users":"jack"} but server has {"ssd":true,"users":"john"}',
 		'56b19a96-bd79-4b0d-bf31-6287500e653c': 'Combined vm/pkg/img traits require {"users":"jack"} but server has {"ssd":true,"users":["john","jane"]}',
@@ -269,18 +243,18 @@ test('filterTraits() for image manifests', function (t) {
 		'70675b48-a989-466a-9cde-8b65fa2df12e': 'users comparison failed: strings did not match'
 		/* END JSSTYLED */
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	constraints = {
-		vm: {},
-		pkg: {},
-		img: { traits: { ssd: true, users: 'jane' } }
+	var constraints = {
+		vm: {}, pkg: {}, img: { traits: { users: 'jack' } }
 	};
-	results = filter.run(log, givenServers, constraints);
-	filteredServers = results[0];
-	reasons = results[1];
-	t.deepEqual(filteredServers, givenServers.slice(1, 2));
-	expectedReasons = {
+
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
+
+
+test('filterTraits() for image manifests 5', function (t) {
+	var expectServers = SERVERS.slice(1, 2);
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'de52bbab-a12d-4e11-8292-c4141031553c': 'users comparison failed: strings did not match',
 		'11a7ea8e-a9ee-4101-852d-cd47536b9ff0': 'Combined vm/pkg/img traits require {"ssd":true,"users":"jane"} but server has {"ssd":true}',
@@ -289,18 +263,18 @@ test('filterTraits() for image manifests', function (t) {
 		'70675b48-a989-466a-9cde-8b65fa2df12e': 'Combined vm/pkg/img traits require {"ssd":true,"users":"jane"} but server has {"users":"john"}'
 		/* END JSSTYLED */
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	constraints = {
-		vm: {},
-		pkg: {},
-		img: { traits: { ssd: false, users: 'jane' } }
+	var constraints = {
+		vm: {}, pkg: {}, img: { traits: { ssd: true, users: 'jane' } }
 	};
-	results = filter.run(log, givenServers, constraints);
-	filteredServers = results[0];
-	reasons = results[1];
-	t.deepEqual(filteredServers, []);
-	expectedReasons = {
+
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
+
+
+test('filterTraits() for image manifests 6', function (t) {
+	var expectServers = [];
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'de52bbab-a12d-4e11-8292-c4141031553c': 'ssd comparison failed: boolean did not match',
 		'56b19a96-bd79-4b0d-bf31-6287500e653c': 'ssd comparison failed: boolean did not match',
@@ -310,18 +284,18 @@ test('filterTraits() for image manifests', function (t) {
 		'70675b48-a989-466a-9cde-8b65fa2df12e': 'Combined vm/pkg/img traits require {"ssd":false,"users":"jane"} but server has {"users":"john"}'
 		/* END JSSTYLED */
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	constraints = {
-		vm: {},
-		pkg: {},
-		img: { traits: { users: ['john', 'jane'] } }
+	var constraints = {
+		vm: {}, pkg: {}, img: { traits: { ssd: false, users: 'jane' } }
 	};
-	results = filter.run(log, givenServers, constraints);
-	filteredServers = results[0];
-	reasons = results[1];
-	t.deepEqual(filteredServers, givenServers.slice(4, 6));
-	expectedReasons = {
+
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
+
+
+test('filterTraits() for image manifests 7', function (t) {
+	var expectServers = SERVERS.slice(4, 6);
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'de52bbab-a12d-4e11-8292-c4141031553c': 'Combined vm/pkg/img traits require {"users":["john","jane"]} but server has {"ssd":true,"users":"john"}',
 		'56b19a96-bd79-4b0d-bf31-6287500e653c': 'Combined vm/pkg/img traits require {"users":["john","jane"]} but server has {"ssd":true,"users":["john","jane"]}',
@@ -329,57 +303,18 @@ test('filterTraits() for image manifests', function (t) {
 		'c2edd722-16cd-4b2f-9436-5cde12cf0eb0': 'users comparison failed: undefined property'
 		/* END JSSTYLED */
 	};
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
-});
 
+	var constraints = {
+		vm: {}, pkg: {}, img: { traits: { users: ['john', 'jane'] } }
+	};
 
-test('filterTraits() for VMs and manifests', function (t) {
-	var givenServers = [
-		{
-			uuid: 'de52bbab-a12d-4e11-8292-c4141031553c',
-			traits: { ssd: true,  users: 'john' }
-		},
-		{
-			uuid: '56b19a96-bd79-4b0d-bf31-6287500e653c',
-			traits: { ssd: true,  users: ['john', 'jane'] }
-		},
-		{
-			uuid: '11a7ea8e-a9ee-4101-852d-cd47536b9ff0',
-			traits: { ssd: true  }
-		},
-		{
-			uuid: 'c2edd722-16cd-4b2f-9436-5cde12cf0eb0',
-			traits: { ssd: false }
-		},
-		{
-			uuid: 'f459c92d-1b50-4cea-9412-8d7af4acfc31',
-			traits: { users: ['jack', 'jane'] }
-		},
-		{
-			uuid: '70675b48-a989-466a-9cde-8b65fa2df12e',
-			traits: { users: 'john' }
-		}
-	];
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
 
-	var results;
-	var reasons;
-	var expectedReasons;
-	var constraints;
-	var filteredServers;
 
-	/* image manifest overrides VM package */
-	constraints = {
-		vm:  { traits: { ssd: false } },
-		img: { traits: { ssd: true } },
-		pkg: {}
-	};
-	results = filter.run(log, givenServers, constraints);
-	filteredServers = results[0];
-	reasons = results[1];
-	t.deepEqual(filteredServers, givenServers.slice(2, 3));
-	expectedReasons = {
+test('filterTraits() for VMs and manifests 1', function (t) {
+	var expectServers = SERVERS.slice(2, 3);
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'de52bbab-a12d-4e11-8292-c4141031553c': 'Combined vm/pkg/img traits require {"ssd":true} but server has {"ssd":true,"users":"john"}',
 		'56b19a96-bd79-4b0d-bf31-6287500e653c': 'Combined vm/pkg/img traits require {"ssd":true} but server has {"ssd":true,"users":["john","jane"]}',
@@ -388,19 +323,21 @@ test('filterTraits() for VMs and manifests', function (t) {
 		'70675b48-a989-466a-9cde-8b65fa2df12e': 'ssd comparison failed: undefined property'
 		/* END JSSTYLED */
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	/* should merge values between the two */
-	constraints = {
-		vm:  { traits: { ssd: true } },
-		img: { traits: { users: 'john' } },
+	/* image manifest overrides VM package */
+	var constraints = {
+		vm:  { traits: { ssd: false } },
+		img: { traits: { ssd: true } },
 		pkg: {}
 	};
-	results = filter.run(log, givenServers, constraints);
-	filteredServers = results[0];
-	reasons = results[1];
-	t.deepEqual(filteredServers, givenServers.slice(0, 2));
-	expectedReasons = {
+
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
+
+
+test('filterTraits() for VMs and manifests 2', function (t) {
+	var expectServers = SERVERS.slice(0, 2);
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'11a7ea8e-a9ee-4101-852d-cd47536b9ff0': 'Combined vm/pkg/img traits require {"ssd":true,"users":"john"} but server has {"ssd":true}',
 		'c2edd722-16cd-4b2f-9436-5cde12cf0eb0': 'Combined vm/pkg/img traits require {"ssd":true,"users":"john"} but server has {"ssd":false}',
@@ -408,14 +345,21 @@ test('filterTraits() for VMs and manifests', function (t) {
 		'70675b48-a989-466a-9cde-8b65fa2df12e': 'Combined vm/pkg/img traits require {"ssd":true,"users":"john"} but server has {"users":"john"}'
 		/* END JSSTYLED */
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	constraints = { vm: { traits: { ssd: true } }, img: {}, pkg: {} };
-	results = filter.run(log, givenServers, constraints);
-	filteredServers = results[0];
-	reasons = results[1];
-	t.deepEqual(filteredServers, givenServers.slice(2, 3));
-	expectedReasons = {
+	/* should merge values between the two */
+	var constraints = {
+		vm:  { traits: { ssd: true } },
+		img: { traits: { users: 'john' } },
+		pkg: {}
+	};
+
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
+
+
+test('filterTraits() for VMs and manifests 3', function (t) {
+	var expectServers = SERVERS.slice(2, 3);
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'de52bbab-a12d-4e11-8292-c4141031553c': 'Combined vm/pkg/img traits require {"ssd":true} but server has {"ssd":true,"users":"john"}',
 		'56b19a96-bd79-4b0d-bf31-6287500e653c': 'Combined vm/pkg/img traits require {"ssd":true} but server has {"ssd":true,"users":["john","jane"]}',
@@ -424,64 +368,57 @@ test('filterTraits() for VMs and manifests', function (t) {
 		'70675b48-a989-466a-9cde-8b65fa2df12e': 'ssd comparison failed: undefined property'
 		/* END JSSTYLED */
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	constraints = { vm: {}, img: { traits: { ssd: true } }, pkg: {} };
-	results = filter.run(log, givenServers, constraints);
-	filteredServers = results[0];
-	reasons = results[1];
-	t.deepEqual(filteredServers, givenServers.slice(2, 3));
-	t.deepEqual(reasons, expectedReasons);
+	var constraints = { vm: { traits: { ssd: true } }, img: {}, pkg: {} };
 
-	t.end();
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
-test('filterTraits() for packages and manifests', function (t) {
-	var givenServers = [
-		{
-			uuid: 'de52bbab-a12d-4e11-8292-c4141031553c',
-			traits: { ssd: true,  users: 'john' }
-		},
-		{
-			uuid: '56b19a96-bd79-4b0d-bf31-6287500e653c',
-			traits: { ssd: true,  users: ['john', 'jane'] }
-		},
-		{
-			uuid: '11a7ea8e-a9ee-4101-852d-cd47536b9ff0',
-			traits: { ssd: true  }
-		},
-		{
-			uuid: 'c2edd722-16cd-4b2f-9436-5cde12cf0eb0',
-			traits: { ssd: false }
-		},
-		{
-			uuid: 'f459c92d-1b50-4cea-9412-8d7af4acfc31',
-			traits: { users: ['jack', 'jane'] }
-		},
-		{
-			uuid: '70675b48-a989-466a-9cde-8b65fa2df12e',
-			traits: { users: 'john' }
-		}
-	];
+test('filterTraits() for VMs and manifests 4', function (t) {
+	var expectServers = SERVERS.slice(2, 3);
+	var expectReasons = {
+		/* BEGIN JSSTYLED */
+		'de52bbab-a12d-4e11-8292-c4141031553c': 'Combined vm/pkg/img traits require {"ssd":true} but server has {"ssd":true,"users":"john"}',
+		'56b19a96-bd79-4b0d-bf31-6287500e653c': 'Combined vm/pkg/img traits require {"ssd":true} but server has {"ssd":true,"users":["john","jane"]}',
+		'c2edd722-16cd-4b2f-9436-5cde12cf0eb0': 'ssd comparison failed: boolean did not match',
+		'f459c92d-1b50-4cea-9412-8d7af4acfc31': 'ssd comparison failed: undefined property',
+		'70675b48-a989-466a-9cde-8b65fa2df12e': 'ssd comparison failed: undefined property'
+		/* END JSSTYLED */
+	};
+
+	var constraints = { vm: {}, img: { traits: { ssd: true } }, pkg: {} };
+
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
 
-	var results;
-	var reasons;
-	var expectedReasons;
-	var constraints;
-	var filteredServers;
+
+test('filterTraits() for packages and manifests 1', function (t) {
+	var expectServers = SERVERS.slice(2, 3);
+	var expectReasons = {
+		/* BEGIN JSSTYLED */
+		'de52bbab-a12d-4e11-8292-c4141031553c': 'Combined vm/pkg/img traits require {"ssd":true} but server has {"ssd":true,"users":"john"}',
+		'56b19a96-bd79-4b0d-bf31-6287500e653c': 'Combined vm/pkg/img traits require {"ssd":true} but server has {"ssd":true,"users":["john","jane"]}',
+		'c2edd722-16cd-4b2f-9436-5cde12cf0eb0': 'ssd comparison failed: boolean did not match',
+		'f459c92d-1b50-4cea-9412-8d7af4acfc31': 'ssd comparison failed: undefined property',
+		'70675b48-a989-466a-9cde-8b65fa2df12e': 'ssd comparison failed: undefined property'
+		/* END JSSTYLED */
+	};
 
 	/* image manifest overrides package */
-	constraints = {
+	var constraints = {
 		vm:  {},
 		img: { traits: { ssd: true  } },
 		pkg: { traits: { ssd: false } }
 	};
-	results = filter.run(log, givenServers, constraints);
-	filteredServers = results[0];
-	reasons = results[1];
-	t.deepEqual(filteredServers, givenServers.slice(2, 3));
-	expectedReasons = {
+
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
+
+
+test('filterTraits() for packages and manifests 2', function (t) {
+	var expectServers = SERVERS.slice(2, 3);
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'de52bbab-a12d-4e11-8292-c4141031553c': 'Combined vm/pkg/img traits require {"ssd":true} but server has {"ssd":true,"users":"john"}',
 		'56b19a96-bd79-4b0d-bf31-6287500e653c': 'Combined vm/pkg/img traits require {"ssd":true} but server has {"ssd":true,"users":["john","jane"]}',
@@ -490,46 +427,62 @@ test('filterTraits() for packages and manifests', function (t) {
 		'70675b48-a989-466a-9cde-8b65fa2df12e': 'ssd comparison failed: undefined property'
 		/* END JSSTYLED */
 	};
-	t.deepEqual(reasons, expectedReasons);
 
 	/* VM overrides package */
-	constraints = {
+	var constraints = {
 		vm:  { traits: { ssd: true  } },
 		img: {},
 		pkg: { traits: { ssd: false } }
 	};
-	results = filter.run(log, givenServers, constraints);
-	filteredServers = results[0];
-	reasons = results[1];
-	t.deepEqual(filteredServers, givenServers.slice(2, 3));
-	t.deepEqual(reasons, expectedReasons);
+
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
+
+
+test('filterTraits() for packages and manifests 3', function (t) {
+	var expectServers = SERVERS.slice(0, 2);
+	var expectReasons = {
+		/* BEGIN JSSTYLED */
+		'11a7ea8e-a9ee-4101-852d-cd47536b9ff0': 'Combined vm/pkg/img traits require {"ssd":true,"users":"john"} but server has {"ssd":true}',
+		'c2edd722-16cd-4b2f-9436-5cde12cf0eb0': 'Combined vm/pkg/img traits require {"ssd":true,"users":"john"} but server has {"ssd":false}',
+		'f459c92d-1b50-4cea-9412-8d7af4acfc31': 'Combined vm/pkg/img traits require {"ssd":true,"users":"john"} but server has {"users":["jack","jane"]}',
+		'70675b48-a989-466a-9cde-8b65fa2df12e': 'Combined vm/pkg/img traits require {"ssd":true,"users":"john"} but server has {"users":"john"}'
+		/* END JSSTYLED */
+	};
 
 	/* should merge values between the two */
-	constraints = {
+	var constraints = {
 		vm:  {},
 		img: { traits: { users: 'john' } },
 		pkg: { traits: { ssd: true	 } }
 	};
-	results = filter.run(log, givenServers, constraints);
-	filteredServers = results[0];
-	reasons = results[1];
-	t.deepEqual(filteredServers, givenServers.slice(0, 2));
-	expectedReasons = {
+
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
+
+
+
+test('filterTraits() for packages and manifests 4', function (t) {
+	var expectServers = SERVERS.slice(2, 3);
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
-		'11a7ea8e-a9ee-4101-852d-cd47536b9ff0': 'Combined vm/pkg/img traits require {"ssd":true,"users":"john"} but server has {"ssd":true}',
-		'c2edd722-16cd-4b2f-9436-5cde12cf0eb0': 'Combined vm/pkg/img traits require {"ssd":true,"users":"john"} but server has {"ssd":false}',
-		'f459c92d-1b50-4cea-9412-8d7af4acfc31': 'Combined vm/pkg/img traits require {"ssd":true,"users":"john"} but server has {"users":["jack","jane"]}',
-		'70675b48-a989-466a-9cde-8b65fa2df12e': 'Combined vm/pkg/img traits require {"ssd":true,"users":"john"} but server has {"users":"john"}'
+		'de52bbab-a12d-4e11-8292-c4141031553c': 'Combined vm/pkg/img traits require {"ssd":true} but server has {"ssd":true,"users":"john"}',
+		'56b19a96-bd79-4b0d-bf31-6287500e653c': 'Combined vm/pkg/img traits require {"ssd":true} but server has {"ssd":true,"users":["john","jane"]}',
+		'c2edd722-16cd-4b2f-9436-5cde12cf0eb0': 'ssd comparison failed: boolean did not match',
+		'f459c92d-1b50-4cea-9412-8d7af4acfc31': 'ssd comparison failed: undefined property',
+		'70675b48-a989-466a-9cde-8b65fa2df12e': 'ssd comparison failed: undefined property'
 		/* END JSSTYLED */
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	constraints = { vm:  {}, img: {}, pkg: { traits: { ssd: true } } };
-	results = filter.run(log, givenServers, constraints);
-	filteredServers = results[0];
-	reasons = results[1];
-	t.deepEqual(filteredServers, givenServers.slice(2, 3));
-	expectedReasons = {
+	var constraints = { vm:  {}, img: {}, pkg: { traits: { ssd: true } } };
+
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+});
+
+
+test('filterTraits() for packages and manifests 5', function (t) {
+	var expectServers = SERVERS.slice(2, 3);
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'de52bbab-a12d-4e11-8292-c4141031553c': 'Combined vm/pkg/img traits require {"ssd":true} but server has {"ssd":true,"users":"john"}',
 		'56b19a96-bd79-4b0d-bf31-6287500e653c': 'Combined vm/pkg/img traits require {"ssd":true} but server has {"ssd":true,"users":["john","jane"]}',
@@ -538,62 +491,53 @@ test('filterTraits() for packages and manifests', function (t) {
 		'70675b48-a989-466a-9cde-8b65fa2df12e': 'ssd comparison failed: undefined property'
 		/* END JSSTYLED */
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	constraints = { vm:  {}, img: { traits: { ssd: true } }, pkg: {} };
-	results = filter.run(log, givenServers, constraints);
-	filteredServers = results[0];
-	reasons = results[1];
-	t.deepEqual(filteredServers, givenServers.slice(2, 3));
-	t.deepEqual(reasons, expectedReasons);
+	var constraints = { vm:  {}, img: { traits: { ssd: true } }, pkg: {} };
 
-	t.end();
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
-test('filterTraits() with no traits on server', function (t) {
-	var results;
-	var reasons;
-	var expectedReasons;
-	var givenServers = [ {
+test('filterTraits() with no traits on server 1', function (t) {
+	var servers = [ {
 		uuid: '097e339f-1a49-48b2-bec7-ae92a037c22a',
 		requested_ram: 256
 	} ];
-	var constraints;
-	var filteredServers;
 
-	constraints = { vm: { traits: {} }, img: { traits: {} }, pkg: {} };
-	results = filter.run(log, givenServers, constraints);
-	filteredServers = results[0];
-	reasons = results[1];
-	t.deepEqual(filteredServers, givenServers);
-	t.deepEqual(reasons, {});
+	var expectServers = servers;
+	var expectReasons = {};
 
-	constraints = {
-		vm: { traits: { ssd: false } },
-		img: { traits: {} },
-		pkg: {}
-	};
-	results = filter.run(log, givenServers, constraints);
-	filteredServers = results[0];
-	reasons = results[1];
-	t.equal(filteredServers.length, 0);
-	expectedReasons = {
+	var constraints = { vm: { traits: {} }, img: { traits: {} }, pkg: {} };
+
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
+});
+
+
+test('filterTraits() with no traits on server 2', function (t) {
+	var servers = [ {
+		uuid: '097e339f-1a49-48b2-bec7-ae92a037c22a',
+		requested_ram: 256
+	} ];
+
+	var expectServers = [];
+	var expectReasons = {
 		'097e339f-1a49-48b2-bec7-ae92a037c22a':
 		    'Combined vm/pkg/img traits require {"ssd":false} ' +
 		    'but server has undefined'
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	t.end();
+	var constraints = {
+		vm: { traits: { ssd: false } },
+		img: { traits: {} },
+		pkg: {}
+	};
+
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
 });
 
 
-test('filterTraits() with no traits on VM or manifest', function (t) {
-	var results;
-	var reasons;
-	var expectedReasons;
-	var givenServers = [
+test('filterTraits() with no traits on VM or manifest 1', function (t) {
+	var servers = [
 		{
 			uuid: '636203ab-ae96-4d5c-aaf1-00f030958bee',
 			traits: { ssd: true }
@@ -601,39 +545,46 @@ test('filterTraits() with no traits on VM or manifest', function (t) {
 		{ uuid: 'cc0c7133-2bdd-4f49-93ae-f24350e8c4d2', traits: {} },
 		{ uuid: 'a8c4fc80-9987-4778-9c04-743393c50398' }
 	];
-	var constraints;
-	var filteredServers;
-
-	constraints = { vm: { traits: {} }, img: { traits: {} }, pkg: {} };
-	results = filter.run(log, givenServers, constraints);
-	filteredServers = results[0];
-	reasons = results[1];
-	t.deepEqual(filteredServers, givenServers.slice(1, 3));
-	expectedReasons = {
+
+	var expectServers = servers.slice(1, 3);
+	var expectReasons = {
 		'636203ab-ae96-4d5c-aaf1-00f030958bee':
 		    'Combined vm/pkg/img require no traits ' +
 		    'but server has {"ssd":true}'
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	constraints = { vm: {}, img: {}, pkg: {} };
-	results = filter.run(log, givenServers, constraints);
-	filteredServers = results[0];
-	reasons = results[1];
-	t.deepEqual(filteredServers, givenServers.slice(1, 3));
-	expectedReasons = {
+	var constraints = { vm: { traits: {} }, img: { traits: {} }, pkg: {} };
+
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
+});
+
+
+
+test('filterTraits() with no traits on VM or manifest 2', function (t) {
+	var servers = [
+		{
+			uuid: '636203ab-ae96-4d5c-aaf1-00f030958bee',
+			traits: { ssd: true }
+		},
+		{ uuid: 'cc0c7133-2bdd-4f49-93ae-f24350e8c4d2', traits: {} },
+		{ uuid: 'a8c4fc80-9987-4778-9c04-743393c50398' }
+	];
+
+	var expectServers = servers.slice(1, 3);
+	var expectReasons = {
 		'636203ab-ae96-4d5c-aaf1-00f030958bee':
 		    'Combined vm/pkg/img require no traits ' +
 		    'but server has {"ssd":true}'
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	t.end();
+	var constraints = { vm: {}, img: {}, pkg: {} };
+
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
 });
 
 
 test('filterTraits() with no package', function (t) {
-	var givenServers = [
+	var servers = [
 		{
 			uuid: '636203ab-ae96-4d5c-aaf1-00f030958bee',
 			traits: { ssd: true }
@@ -641,36 +592,24 @@ test('filterTraits() with no package', function (t) {
 		{ uuid: 'cc0c7133-2bdd-4f49-93ae-f24350e8c4d2', traits: {} },
 		{ uuid: 'a8c4fc80-9987-4778-9c04-743393c50398' }
 	];
-	var constraints = { vm: { ram: 512 }, img: {} };
 
-	var results = filter.run(log, givenServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, givenServers.slice(1, 3));
-	var expectedReasons = {
+	var expectServers = servers.slice(1, 3);
+	var expectReasons = {
 		'636203ab-ae96-4d5c-aaf1-00f030958bee':
 		    'Combined vm/pkg/img require no traits ' +
 		    'but server has {"ssd":true}'
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	t.end();
+	var constraints = { vm: { ram: 512 }, img: {} };
+
+	checkFilter(t, servers, constraints, expectServers, expectReasons);
 });
 
 
 test('filterTraits() with no servers', function (t) {
-	var servers = [];
 	var constraints = { vm: { ram: 512 }, pkg: {}, img: {} };
 
-	var results = filter.run(log, servers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.equal(filteredServers.length, 0);
-	t.deepEqual(reasons, {});
-
-	t.end();
+	checkFilter(t, [], constraints, [], {});
 });
 
 
diff --git a/test/algorithms/hard-filter-vlans.test.js b/test/algorithms/hard-filter-vlans.test.js
index e15ef33..88304c0 100644
--- a/test/algorithms/hard-filter-vlans.test.js
+++ b/test/algorithms/hard-filter-vlans.test.js
@@ -8,16 +8,17 @@
  * Copyright (c) 2015, Joyent, Inc.
  */
 
+var assert = require('assert-plus');
 var test = require('tape');
 var filter = require('../../lib/algorithms/hard-filter-vlans.js');
 
 
-var log = {
+var LOG = {
 	trace: function () { return (true); },
 	debug: function () { return (true); }
 };
 
-var servers = [
+var SERVERS = [
 	{
 		uuid: '00009386-8c67-b674-587f-101f1db2eda7',
 		sysinfo: {
@@ -131,21 +132,28 @@ runTest(t, vlans, expectedUuids, expectedReasons)
 {
 	var constraints = { vm: { nic_tags: vlans } };
 
-	var results = filter.run(log, servers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+	filter.run(LOG, SERVERS, constraints, function (err, servers, reasons) {
+		assert.arrayOfObject(servers);
+		assert.object(reasons);
 
-	var serverUuids = filteredServers.map(function (s) { return s.uuid; });
+		t.ifError(err);
 
-	t.deepEqual(serverUuids.sort(), expectedUuids);
-	t.deepEqual(reasons, expectedReasons);
+		var serverUuids = servers.map(function (s) { return s.uuid; });
+
+		t.deepEqual(serverUuids.sort(), expectedUuids);
+		t.deepEqual(reasons, expectedReasons);
+
+		t.end();
+	});
 }
 
 
-test('filterVlans() on single vlan', function (t) {
-	var expectedUuids = [ '00009386-8c67-b674-587f-101f1db2eda7',
-		'222266d7-465d-4c22-b26e-a6707a22390e' ];
-	var expectedReasons = {
+test('filterVlans() on single vlan 1', function (t) {
+	var expectUuids = [
+		'00009386-8c67-b674-587f-101f1db2eda7',
+		'222266d7-465d-4c22-b26e-a6707a22390e'
+	];
+	var expectReasons = {
 		'1111e5f9-75e6-43e8-a016-a85835b377e1':
 			'NIC e1000g0 for tag "external" is down',
 		'3333059f-8ce2-4573-b56a-4ed2db802ea8':
@@ -157,12 +165,18 @@ test('filterVlans() on single vlan', function (t) {
 		'666660a9-4174-4e97-91d3-4becd075d280':
 			'Server missing vlan "external"'
 	};
-	runTest(t, ['external'], expectedUuids, expectedReasons);
 
-	expectedUuids = [ '00009386-8c67-b674-587f-101f1db2eda7',
+	runTest(t, ['external'], expectUuids, expectReasons);
+});
+
+
+test('filterVlans() on single vlan 2', function (t) {
+	var expectUuids = [
+		'00009386-8c67-b674-587f-101f1db2eda7',
 		'1111e5f9-75e6-43e8-a016-a85835b377e1',
-		'222266d7-465d-4c22-b26e-a6707a22390e' ];
-	expectedReasons = {
+		'222266d7-465d-4c22-b26e-a6707a22390e'
+	];
+	var expectReasons = {
 		'3333059f-8ce2-4573-b56a-4ed2db802ea8':
 			'Server missing vlan "admin"',
 		'44448d4e-c4a6-484c-ae49-0ff5cc2e293c':
@@ -172,10 +186,14 @@ test('filterVlans() on single vlan', function (t) {
 		'666660a9-4174-4e97-91d3-4becd075d280':
 			'Server missing vlan "admin"'
 	};
-	runTest(t, ['admin'], expectedUuids, expectedReasons);
 
-	expectedUuids = [ '222266d7-465d-4c22-b26e-a6707a22390e' ];
-	expectedReasons = {
+	runTest(t, ['admin'], expectUuids, expectReasons);
+});
+
+
+test('filterVlans() on single vlan 3', function (t) {
+	var expectUuids = [ '222266d7-465d-4c22-b26e-a6707a22390e' ];
+	var expectReasons = {
 		'00009386-8c67-b674-587f-101f1db2eda7':
 			'Server missing vlan "customer12"',
 		'1111e5f9-75e6-43e8-a016-a85835b377e1':
@@ -189,9 +207,14 @@ test('filterVlans() on single vlan', function (t) {
 		'666660a9-4174-4e97-91d3-4becd075d280':
 			'Server missing vlan "customer12"'
 	};
-	runTest(t, ['customer12'], expectedUuids, expectedReasons);
 
-	expectedUuids = [ '00009386-8c67-b674-587f-101f1db2eda7',
+	runTest(t, ['customer12'], expectUuids, expectReasons);
+});
+
+
+test('filterVlans() on single vlan 4', function (t) {
+	var expectUuids = [
+		'00009386-8c67-b674-587f-101f1db2eda7',
 		'1111e5f9-75e6-43e8-a016-a85835b377e1',
 		'222266d7-465d-4c22-b26e-a6707a22390e',
 		'3333059f-8ce2-4573-b56a-4ed2db802ea8',
@@ -199,10 +222,15 @@ test('filterVlans() on single vlan', function (t) {
 		'5555fa4e-144f-43e1-809f-70404573b076',
 		'666660a9-4174-4e97-91d3-4becd075d280'
 	];
-	expectedReasons = {};
-	runTest(t, [], expectedUuids, expectedReasons);
+	var expectReasons = {};
+
+	runTest(t, [], expectUuids, expectReasons);
+});
 
-	expectedReasons = {
+
+test('filterVlans() on single vlan 5', function (t) {
+	var expectUuids = [];
+	var expectReasons = {
 		'00009386-8c67-b674-587f-101f1db2eda7':
 			'Server missing vlan "doesnotexist"',
 		'1111e5f9-75e6-43e8-a016-a85835b377e1':
@@ -218,17 +246,19 @@ test('filterVlans() on single vlan', function (t) {
 		'666660a9-4174-4e97-91d3-4becd075d280':
 			'Server missing vlan "doesnotexist"'
 	};
-	runTest(t, ['doesnotexist'], [], expectedReasons);
 
-	t.end();
+	runTest(t, ['doesnotexist'], expectUuids, expectReasons);
 });
 
 
-test('filterVlans() on multiple vlans', function (t) {
-	var expectedUuids = [ '00009386-8c67-b674-587f-101f1db2eda7',
-		'222266d7-465d-4c22-b26e-a6707a22390e' ];
-	var expectedReasons = { '1111e5f9-75e6-43e8-a016-a85835b377e1':
-		'NIC e1000g0 for tag "external" is down',
+test('filterVlans() on multiple vlans 1', function (t) {
+	var expectUuids = [
+		'00009386-8c67-b674-587f-101f1db2eda7',
+		'222266d7-465d-4c22-b26e-a6707a22390e'
+	];
+	var expectReasons = {
+		'1111e5f9-75e6-43e8-a016-a85835b377e1':
+			'NIC e1000g0 for tag "external" is down',
 		'3333059f-8ce2-4573-b56a-4ed2db802ea8':
 			'Server missing vlan "external"',
 		'44448d4e-c4a6-484c-ae49-0ff5cc2e293c':
@@ -238,10 +268,19 @@ test('filterVlans() on multiple vlans', function (t) {
 		'666660a9-4174-4e97-91d3-4becd075d280':
 			'Server missing vlan "external"'
 	};
-	runTest(t, ['external', 'admin'], expectedUuids, expectedReasons);
 
-	expectedReasons = { '1111e5f9-75e6-43e8-a016-a85835b377e1':
-		'NIC e1000g0 for tag "external" is down',
+	runTest(t, ['external', 'admin'], expectUuids, expectReasons);
+});
+
+
+test('filterVlans() on multiple vlans 2', function (t) {
+	var expectUuids = [
+		'00009386-8c67-b674-587f-101f1db2eda7',
+		'222266d7-465d-4c22-b26e-a6707a22390e'
+	];
+	var expectReasons = {
+		'1111e5f9-75e6-43e8-a016-a85835b377e1':
+			'NIC e1000g0 for tag "external" is down',
 		'3333059f-8ce2-4573-b56a-4ed2db802ea8':
 			'Server missing vlan "admin"',
 		'44448d4e-c4a6-484c-ae49-0ff5cc2e293c':
@@ -251,10 +290,14 @@ test('filterVlans() on multiple vlans', function (t) {
 		'666660a9-4174-4e97-91d3-4becd075d280':
 			'Server missing vlan "admin"'
 	};
-	runTest(t, ['admin', 'external'], expectedUuids, expectedReasons);
 
-	expectedUuids = [ '222266d7-465d-4c22-b26e-a6707a22390e' ];
-	expectedReasons = {
+	runTest(t, ['admin', 'external'], expectUuids, expectReasons);
+});
+
+
+test('filterVlans() on multiple vlans 3', function (t) {
+	var expectUuids = [ '222266d7-465d-4c22-b26e-a6707a22390e' ];
+	var expectReasons = {
 		'00009386-8c67-b674-587f-101f1db2eda7':
 			'Server missing vlan "customer12"',
 		'1111e5f9-75e6-43e8-a016-a85835b377e1':
@@ -268,10 +311,16 @@ test('filterVlans() on multiple vlans', function (t) {
 		'666660a9-4174-4e97-91d3-4becd075d280':
 			'Server missing vlan "customer12"'
 	};
-	runTest(t, ['customer12', 'admin', 'external'], expectedUuids,
-		expectedReasons);
 
-	expectedReasons = {
+	runTest(t, ['customer12', 'admin', 'external'], expectUuids,
+		expectReasons);
+});
+
+
+
+test('filterVlans() on multiple vlans 4', function (t) {
+	var expectUuids = [];
+	var expectReasons = {
 		'00009386-8c67-b674-587f-101f1db2eda7':
 			'Server missing vlan "doesnotexist"',
 		'1111e5f9-75e6-43e8-a016-a85835b377e1':
@@ -287,9 +336,8 @@ test('filterVlans() on multiple vlans', function (t) {
 		'666660a9-4174-4e97-91d3-4becd075d280':
 			'Server missing vlan "admin"'
 	};
-	runTest(t, ['admin', 'doesnotexist'], [], expectedReasons);
 
-	t.end();
+	runTest(t, ['admin', 'doesnotexist'], expectUuids, expectReasons);
 });
 
 
@@ -297,21 +345,22 @@ test('filterVlans() with no servers', function (t) {
 	var emptyServers = [];
 	var constraints = { vm: { nic_tags: ['admin'] } };
 
-	var results = filter.run(log, emptyServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+	filter.run(LOG, emptyServers, constraints,
+			function (err, servers, reasons) {
+		t.ifError(err);
 
-	t.equal(filteredServers.length, 0);
-	t.deepEqual(reasons, {});
+		t.deepEqual(servers, []);
+		t.deepEqual(reasons, {});
 
-	t.end();
+		t.end();
+	});
 });
 
 
 test('filterVlans() on single overlay tag', function (t) {
-	var expectedUuids = [ '3333059f-8ce2-4573-b56a-4ed2db802ea8',
+	var expectUuids = [ '3333059f-8ce2-4573-b56a-4ed2db802ea8',
 		'5555fa4e-144f-43e1-809f-70404573b076' ];
-	var expectedReasons = {
+	var expectReasons = {
 		'44448d4e-c4a6-484c-ae49-0ff5cc2e293c':
 			'NIC e1000g0 for tag "sdc_overlay" is down',
 		'00009386-8c67-b674-587f-101f1db2eda7':
@@ -323,15 +372,14 @@ test('filterVlans() on single overlay tag', function (t) {
 		'666660a9-4174-4e97-91d3-4becd075d280':
 			'Server missing vlan "sdc_overlay"'
 	};
-	runTest(t, ['sdc_overlay'], expectedUuids, expectedReasons);
 
-	t.end();
+	runTest(t, ['sdc_overlay'], expectUuids, expectReasons);
 });
 
 
 test('filterVlans() on overlay tag and vlan', function (t) {
-	var expectedUuids = [ '5555fa4e-144f-43e1-809f-70404573b076' ];
-	var expectedReasons = {
+	var expectUuids = [ '5555fa4e-144f-43e1-809f-70404573b076' ];
+	var expectReasons = {
 		'44448d4e-c4a6-484c-ae49-0ff5cc2e293c':
 			'NIC e1000g0 for tag "sdc_overlay" is down',
 		'00009386-8c67-b674-587f-101f1db2eda7':
@@ -345,10 +393,8 @@ test('filterVlans() on overlay tag and vlan', function (t) {
 		'666660a9-4174-4e97-91d3-4becd075d280':
 			'Server missing vlan "sdc_overlay"'
 	};
-	runTest(t, ['sdc_overlay', 'customer13'], expectedUuids,
-		expectedReasons);
 
-	t.end();
+	runTest(t, ['sdc_overlay', 'customer13'], expectUuids, expectReasons);
 });
 
 
diff --git a/test/algorithms/hard-filter-vm-count.test.js b/test/algorithms/hard-filter-vm-count.test.js
index fb3c75c..b253746 100644
--- a/test/algorithms/hard-filter-vm-count.test.js
+++ b/test/algorithms/hard-filter-vm-count.test.js
@@ -11,14 +11,15 @@
 var test = require('tape');
 var genUuid = require('node-uuid');
 var filter = require('../../lib/algorithms/hard-filter-vm-count.js');
+var common = require('./common.js');
 
 
-var log = {
+var LOG = {
 	trace: function () { return (true); },
 	debug: function () { return (true); }
 };
 
-var testServers = [ {
+var SERVERS = [ {
 	uuid: '33ce31d0-f376-4efd-ad41-f17c430b9782',
 	vms: {
 		'bb11d2de-a9c4-496a-9203-e9eb433fd906': {},
@@ -45,29 +46,25 @@ var testServers = [ {
 } ];
 
 
-test('filterVmCount()', function (t) {
-	var expectedServers = [ testServers[1], testServers[3] ];
-	var constraints = { defaults: { filter_vm_limit: 3 } };
-
-	var results = filter.run(log, testServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+var checkFilter = common.createPluginChecker(filter, LOG);
 
-	t.deepEqual(filteredServers, expectedServers);
 
-	var expectedReasons = {
+test('filterVmCount()', function (t) {
+	var expectServers = [ SERVERS[1], SERVERS[3] ];
+	var expectReasons = {
 		'33ce31d0-f376-4efd-ad41-f17c430b9782':
 			'Server has 3 VMs (limit is 3)',
 		'ff962080-5e04-463c-87b7-1f83d5b8c949':
 			'Server has 4 VMs (limit is 3)'
 	};
-	t.deepEqual(reasons, expectedReasons);
 
-	t.end();
+	var constraints = { defaults: { filter_vm_limit: 3 } };
+
+	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
-test('filterVmCount() with no limit', function (t) {
+test('filterVmCount() with no given limit, less than 224 VMs', function (t) {
 	var server = {
 		uuid: '0e07a7a2-92a2-4e59-915a-45ceae9cb75c',
 		vms: {}
@@ -78,43 +75,44 @@ test('filterVmCount() with no limit', function (t) {
 		server.vms[genUuid()] = {};
 	}
 
+	var expectServers = [server];
+	var expectReasons = {};
+
 	var constraints = { defaults: {} };
 
-	var results = filter.run(log, [server], constraints);
-	var filteredServers = results[0];
+	checkFilter(t, [server], constraints, expectServers, expectReasons);
+});
+
 
-	t.deepEqual(filteredServers, [server]);
 
-	// should filter out server with >=224 VMs
-	server.vms[genUuid()] = {};
+test('filterVmCount() with no given limit, less than 224 VMs', function (t) {
+	var server = {
+		uuid: '0e07a7a2-92a2-4e59-915a-45ceae9cb75c',
+		vms: {}
+	};
 
-	results = filter.run(log, [server], constraints);
-	filteredServers = results[0];
-	var reasons = results[1];
+	// should not filter out server with <224 VMs
+	for (var i = 0; i !== 224; i++) {
+		server.vms[genUuid()] = {};
+	}
 
-	t.deepEqual(filteredServers, []);
 
-	t.deepEqual(reasons, {
+	var expectServers = [];
+	var expectReasons = {
 		'0e07a7a2-92a2-4e59-915a-45ceae9cb75c':
 			'Server has 224 VMs (limit is 224)'
-	});
+	};
 
-	t.end();
+	var constraints = { defaults: {} };
+
+	checkFilter(t, [server], constraints, expectServers, expectReasons);
 });
 
 
 test('filterVmCount() with no servers', function (t) {
-	var servers = [];
 	var constraints = { defaults: { filter_vm_limit: 3 } };
 
-	var results = filter.run(log, servers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.equal(filteredServers.length, 0);
-	t.deepEqual(reasons, {});
-
-	t.end();
+	checkFilter(t, [], constraints, [], {});
 });
 
 
diff --git a/test/algorithms/hard-filter-volumes-from.test.js b/test/algorithms/hard-filter-volumes-from.test.js
index 0a48f8e..efc8066 100644
--- a/test/algorithms/hard-filter-volumes-from.test.js
+++ b/test/algorithms/hard-filter-volumes-from.test.js
@@ -10,13 +10,14 @@
 
 var test = require('tape');
 var filter = require('../../lib/algorithms/hard-filter-volumes-from.js');
+var common = require('./common.js');
 
 
-var log = {
+var LOG = {
 	trace: function () { return (true); }
 };
 
-var servers = [
+var SERVERS = [
 	{
 		uuid: 'd8ea612d-7440-411e-8e34-e6bf1adeb008',
 		vms: {
@@ -45,6 +46,9 @@ var servers = [
 ];
 
 
+var checkFilter = common.createPluginChecker(filter, LOG);
+
+
 test('filterVolumesFrom()', function (t) {
 	var vm = {
 		docker: true, // just something non-null for this test
@@ -56,13 +60,8 @@ test('filterVolumesFrom()', function (t) {
 		}
 	};
 
-	var results = filter.run(log, servers, { vm: vm });
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, [servers[2]]);
-
-	var expectedReasons = {
+	var expectServers = [ SERVERS[2] ];
+	var expectReasons = {
 		/* BEGIN JSSTYLED */
 		'd8ea612d-7440-411e-8e34-e6bf1adeb008': 'VM needs volumes from 679c97ea-065b-4a4f-9629-3aabde21cb45, which was not found on server',
 		'07d6d108-f4ed-4f2c-9b09-949f99de2b5d': 'VM needs volumes from 0d0690a2-06a7-41cb-a0a4-55d5e37519e7, which was not found on server',
@@ -70,9 +69,7 @@ test('filterVolumesFrom()', function (t) {
 		/* END JSSTYLED */
 	};
 
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkFilter(t, SERVERS, { vm: vm }, expectServers, expectReasons);
 });
 
 
@@ -87,14 +84,7 @@ test('filterVolumesFrom() with no servers', function (t) {
 		}
 	};
 
-	var results = filter.run(log, [], { vm: vm });
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, []);
-	t.deepEqual(reasons, {});
-
-	t.end();
+	checkFilter(t, [], { vm: vm }, [], {});
 });
 
 
@@ -103,14 +93,10 @@ test('filterVolumesFrom() with no metadata', function (t) {
 		docker: true // just something non-null for this test
 	};
 
-	var results = filter.run(log, servers, { vm: vm });
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, servers);
-	t.deepEqual(reasons, {});
+	var expectServers = SERVERS;
+	var expectReasons = {};
 
-	t.end();
+	checkFilter(t, SERVERS, { vm: vm }, expectServers, expectReasons);
 });
 
 
@@ -120,14 +106,10 @@ test('filterVolumesFrom() with no volumesfrom', function (t) {
 		internal_metadata: {}
 	};
 
-	var results = filter.run(log, servers, { vm: vm });
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(filteredServers, servers);
-	t.deepEqual(reasons, {});
+	var expectServers = SERVERS;
+	var expectReasons = {};
 
-	t.end();
+	checkFilter(t, SERVERS, { vm: vm }, expectServers, expectReasons);
 });
 
 
diff --git a/test/algorithms/identity.test.js b/test/algorithms/identity.test.js
index c33d338..4729fde 100644
--- a/test/algorithms/identity.test.js
+++ b/test/algorithms/identity.test.js
@@ -10,47 +10,37 @@
 
 var test = require('tape');
 var identity = require('../../lib/algorithms/identity.js');
+var common = require('./common.js');
 
 
-var log = {
+var LOG = {
 	trace: function () { return (true); },
 	debug: function () { return (true); }
 };
 
 
+var checkPlugin = common.createPluginChecker(identity, LOG);
+
+
 test('identity()', function (t) {
-	var givenServers = [
+	var servers = [
 		{ unreserved_ram: 256 },
 		{ unreserved_ram: 511 },
 		{ unreserved_ram: 512 },
 		{ unreserved_ram: 768 }
 	];
 
-	var constraints = {};
-
-	var results = identity.run(log, givenServers, constraints);
-	var servers = results[0];
-	var reasons = results[1];
+	var expectServers = servers;
+	var expectReasons = {};
 
-	t.deepEqual(servers, givenServers);
-	t.deepEqual(reasons, undefined);
+	var constraints = {};
 
-	t.end();
+	checkPlugin(t, servers, constraints, expectServers, expectReasons);
 });
 
 
 test('identity() with no servers', function (t) {
-	var givenServers = [];
-	var constraints = {};
-
-	var results = identity.run(log, givenServers, constraints);
-	var servers = results[0];
-	var reasons = results[1];
-
-	t.equal(servers.length, 0);
-	t.deepEqual(reasons, undefined);
-
-	t.end();
+	checkPlugin(t, [], {}, [], {});
 });
 
 
diff --git a/test/algorithms/override-overprovisioning.test.js b/test/algorithms/override-overprovisioning.test.js
index 61caeca..615cce4 100644
--- a/test/algorithms/override-overprovisioning.test.js
+++ b/test/algorithms/override-overprovisioning.test.js
@@ -8,174 +8,165 @@
  * Copyright (c) 2014, Joyent, Inc.
  */
 
+var assert = require('assert-plus');
 var test = require('tape');
-var filter = require('../../lib/algorithms/override-overprovisioning.js');
+var plugin = require('../../lib/algorithms/override-overprovisioning.js');
+var common = require('./common.js');
 
 
-var log = {
+var LOG = {
 	trace: function () { return (true); },
 	debug: function () { return (true); }
 };
 
-
-test('disable overprovisioning', function (t) {
-	var givenServers = [
-		{ unreserved_cpu: 1 },
-		{ unreserved_cpu: 2, overprovision_ratios: {} },
-		{ unreserved_cpu: 3, overprovision_ratios: { cpu:  1 } },
-		{ unreserved_cpu: 4, overprovision_ratios: { disk: 3 } }
-	];
-
-	var expectedServers = [
-		{
-			unreserved_cpu: 1,
-			overprovision_ratios: { cpu: 4, ram: 1, disk: 1 }
-		},
-		{
-			unreserved_cpu: 2,
-			overprovision_ratios: { cpu: 4, ram: 1, disk: 1 }
-		},
-		{
-			unreserved_cpu: 3,
-			overprovision_ratios: { cpu: 4, ram: 1, disk: 1 }
-		},
-		{
-			unreserved_cpu: 4,
-			overprovision_ratios: { cpu: 4, ram: 1, disk: 1 }
-		}
-	];
-
+var SERVERS = [
+	{ unreserved_cpu: 1 },
+	{ unreserved_cpu: 2, overprovision_ratios: {} },
+	{ unreserved_cpu: 3, overprovision_ratios: { cpu:  1 } },
+	{ unreserved_cpu: 4, overprovision_ratios: { disk: 3 } }
+];
+
+var EXPECT_SERVERS = [ {
+	unreserved_cpu: 1,
+	overprovision_ratios: { cpu: 4, ram: 1, disk: 1 }
+}, {
+	unreserved_cpu: 2,
+	overprovision_ratios: { cpu: 4, ram: 1, disk: 1 }
+}, {
+	unreserved_cpu: 3,
+	overprovision_ratios: { cpu: 4, ram: 1, disk: 1 }
+}, {
+	unreserved_cpu: 4,
+	overprovision_ratios: { cpu: 4, ram: 1, disk: 1 }
+} ];
+
+var EXPECT_REASONS = {};
+
+
+test('disable overprovisioning 1', function (t) {
 	var pkg = {};
 	var constraints = { pkg: pkg, defaults: {} };
 
-	var results = filter.run(log, givenServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+	plugin.run(LOG, SERVERS, constraints,
+			function (err, servers, reasons) {
+		assert.arrayOfObject(servers);
+		assert.object(reasons);
+
+		t.ifError(err);
 
-	t.deepEqual(filteredServers, expectedServers);
-	t.deepEqual(pkg, {
-		overprovision_cpu: 4,
-		overprovision_ram: 1,
-		overprovision_disk: 1
+		t.deepEqual(servers, EXPECT_SERVERS);
+		t.deepEqual(reasons, EXPECT_REASONS);
+
+		t.deepEqual(pkg, {
+			overprovision_cpu: 4,
+			overprovision_ram: 1,
+			overprovision_disk: 1
+		});
+
+		t.end();
 	});
-	t.deepEqual(reasons, undefined);
+});
 
-	pkg = {
+
+test('disable overprovisioning 2', function (t) {
+	var pkg = {
 		overprovision_cpu: 1,
 		overprovision_ram: 2,
 		overprovision_disk: 1,
 		overprovision_io: 1,
 		overprovision_net: 1
 	};
-	constraints = { pkg: pkg, defaults: {} };
 
-	filter.run(log, givenServers, constraints);
+	var constraints = { pkg: pkg, defaults: {} };
 
-	t.deepEqual(pkg, {
-		overprovision_cpu: 4,
-		overprovision_ram: 1,
-		overprovision_disk: 1
-	});
+	plugin.run(LOG, SERVERS, constraints,
+			function (err, servers, reasons) {
+		assert.arrayOfObject(servers);
+		assert.object(reasons);
 
-	t.end();
+		t.ifError(err);
+
+		t.deepEqual(servers, EXPECT_SERVERS);
+		t.deepEqual(reasons, EXPECT_REASONS);
+
+		t.deepEqual(pkg, {
+			overprovision_cpu: 4,
+			overprovision_ram: 1,
+			overprovision_disk: 1
+		});
+
+		t.end();
+	});
 });
 
 
 test('disable overprovisioning without pkg', function (t) {
-	var givenServers = [
-		{ unreserved_cpu: 1 },
-		{ unreserved_cpu: 2, overprovision_ratios: {} },
-		{ unreserved_cpu: 3, overprovision_ratios: { cpu:  1 } },
-		{ unreserved_cpu: 4, overprovision_ratios: { disk: 3 } }
-	];
-
-	var expectedServers = [
-		{
-			unreserved_cpu: 1,
-			overprovision_ratios: { cpu: 4, ram: 1, disk: 1 }
-		},
-		{
-			unreserved_cpu: 2,
-			overprovision_ratios: { cpu: 4, ram: 1, disk: 1 }
-		},
-		{
-			unreserved_cpu: 3,
-			overprovision_ratios: { cpu: 4, ram: 1, disk: 1 }
-		},
-		{
-			unreserved_cpu: 4,
-			overprovision_ratios: { cpu: 4, ram: 1, disk: 1 }
-		}
-	];
-
 	var constraints = { defaults: {} };
+	var expectConstraints = common.clone(constraints);
+	var expectReasons = {};
 
-	var results = filter.run(log, givenServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+	plugin.run(LOG, SERVERS, constraints,
+			function (err, servers, reasons) {
+		assert.arrayOfObject(servers);
+		assert.object(reasons);
 
-	t.deepEqual(filteredServers, expectedServers);
-	t.deepEqual(reasons, undefined);
+		t.ifError(err);
 
-	t.end();
+		t.deepEqual(servers, EXPECT_SERVERS);
+		t.deepEqual(reasons, expectReasons);
+
+		// just checking pkg attr wasn't added
+		t.deepEqual(constraints, expectConstraints);
+
+		t.end();
+	});
 });
 
 
 test('disable overprovisioning with disable_override_overprovisioning',
 function (t) {
-	var givenServers = [
-		{ unreserved_cpu: 1 },
-		{ unreserved_cpu: 2, overprovision_ratios: {} },
-		{ unreserved_cpu: 3, overprovision_ratios: { cpu:  1 } },
-		{ unreserved_cpu: 4, overprovision_ratios: { disk: 3 } }
-	];
-
 	// deep copy
-	var expectedServers = JSON.parse(JSON.stringify(givenServers));
+	var expectServers = JSON.parse(JSON.stringify(SERVERS));
+	var expectReasons = {
+		skip: 'Do not override overprovisioning numbers'
+	};
 
 	var pkg = {};
 	var constraints = { pkg: pkg, defaults: {
 		disable_override_overprovisioning: true
 	} };
 
-	var results = filter.run(log, givenServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+	plugin.run(LOG, SERVERS, constraints,
+			function (err, servers, reasons) {
+		assert.arrayOfObject(servers);
+		assert.object(reasons);
 
-	t.deepEqual(filteredServers, expectedServers);
-	t.deepEqual(pkg, {});
-	t.deepEqual(reasons, undefined);
+		t.ifError(err);
 
-	t.end();
+		t.deepEqual(servers, expectServers);
+		t.deepEqual(reasons, expectReasons);
+
+		t.deepEqual(pkg, {});
+
+		t.end();
+	});
 });
 
 
-test('disable overprovisioning with override_overprovision_*', function (t) {
-	var givenServers = [
-		{ unreserved_cpu: 1 },
-		{ unreserved_cpu: 2, overprovision_ratios: {} },
-		{ unreserved_cpu: 3, overprovision_ratios: { cpu:  1 } },
-		{ unreserved_cpu: 4, overprovision_ratios: { disk: 3 } }
-	];
-
-	var expectedServers = [
-		{
-			unreserved_cpu: 1,
-			overprovision_ratios: { cpu: 6, ram: 0.75, disk: 0.5 }
-		},
-		{
-			unreserved_cpu: 2,
-			overprovision_ratios: { cpu: 6, ram: 0.75, disk: 0.5 }
-		},
-		{
-			unreserved_cpu: 3,
-			overprovision_ratios: { cpu: 6, ram: 0.75, disk: 0.5 }
-		},
-		{
-			unreserved_cpu: 4,
-			overprovision_ratios: { cpu: 6, ram: 0.75, disk: 0.5 }
-		}
-	];
+test('disable overprovisioning with override_overprovision_* 1', function (t) {
+	var expectServers = [ {
+		unreserved_cpu: 1,
+		overprovision_ratios: { cpu: 6, ram: 0.75, disk: 0.5 }
+	}, {
+		unreserved_cpu: 2,
+		overprovision_ratios: { cpu: 6, ram: 0.75, disk: 0.5 }
+	}, {
+		unreserved_cpu: 3,
+		overprovision_ratios: { cpu: 6, ram: 0.75, disk: 0.5 }
+	}, {
+		unreserved_cpu: 4,
+		overprovision_ratios: { cpu: 6, ram: 0.75, disk: 0.5 }
+	} ];
 
 	var pkg = {};
 	var constraints = { pkg: pkg, defaults: {
@@ -184,99 +175,97 @@ test('disable overprovisioning with override_overprovision_*', function (t) {
 		overprovision_ratio_disk: 0.5
 	} };
 
-	var results = filter.run(log, givenServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+	plugin.run(LOG, SERVERS, constraints,
+			function (err, servers, reasons) {
+		assert.arrayOfObject(servers);
+		assert.object(reasons);
+
+		t.ifError(err);
+
+		t.deepEqual(servers, expectServers);
+		t.deepEqual(reasons, EXPECT_REASONS);
 
-	t.deepEqual(filteredServers, expectedServers);
-	t.deepEqual(pkg, {
-		overprovision_cpu: 6,
-		overprovision_ram: 0.75,
-		overprovision_disk: 0.5
+		t.deepEqual(pkg, {
+			overprovision_cpu: 6,
+			overprovision_ram: 0.75,
+			overprovision_disk: 0.5
+		});
+
+		t.end();
 	});
-	t.deepEqual(reasons, undefined);
+});
+
 
-	pkg = {
+test('disable overprovisioning with override_overprovision_* 2', function (t) {
+	var expectServers = [ {
+		unreserved_cpu: 1,
+		overprovision_ratios: { cpu: 6, ram: 0.75, disk: 0.5 }
+	}, {
+		unreserved_cpu: 2,
+		overprovision_ratios: { cpu: 6, ram: 0.75, disk: 0.5 }
+	}, {
+		unreserved_cpu: 3,
+		overprovision_ratios: { cpu: 6, ram: 0.75, disk: 0.5 }
+	}, {
+		unreserved_cpu: 4,
+		overprovision_ratios: { cpu: 6, ram: 0.75, disk: 0.5 }
+	} ];
+
+
+	var pkg = {
 		overprovision_cpu: 1,
 		overprovision_ram: 2,
 		overprovision_disk: 1,
 		overprovision_io: 1,
 		overprovision_net: 1
 	};
-	constraints = { pkg: pkg, defaults: {
+
+	var constraints = { pkg: pkg, defaults: {
 		overprovision_ratio_cpu: 6,
 		overprovision_ratio_ram: 0.75,
 		overprovision_ratio_disk: 0.5
 	} };
 
-	filter.run(log, givenServers, constraints);
+	plugin.run(LOG, SERVERS, constraints,
+			function (err, servers, reasons) {
+		assert.arrayOfObject(servers);
+		assert.object(reasons);
 
-	t.deepEqual(pkg, {
-		overprovision_cpu: 6,
-		overprovision_ram: 0.75,
-		overprovision_disk: 0.5
-	});
+		t.ifError(err);
 
-	t.end();
-});
-
-
-test('disable overprovisioning without pkg', function (t) {
-	var givenServers = [
-		{ unreserved_cpu: 1 },
-		{ unreserved_cpu: 2, overprovision_ratios: {} },
-		{ unreserved_cpu: 3, overprovision_ratios: { cpu:  1 } },
-		{ unreserved_cpu: 4, overprovision_ratios: { disk: 3 } }
-	];
-
-	var expectedServers = [
-		{
-			unreserved_cpu: 1,
-			overprovision_ratios: { cpu: 4, ram: 1, disk: 1 }
-		},
-		{
-			unreserved_cpu: 2,
-			overprovision_ratios: { cpu: 4, ram: 1, disk: 1 }
-		},
-		{
-			unreserved_cpu: 3,
-			overprovision_ratios: { cpu: 4, ram: 1, disk: 1 }
-		},
-		{
-			unreserved_cpu: 4,
-			overprovision_ratios: { cpu: 4, ram: 1, disk: 1 }
-		}
-	];
-
-	var constraints = { defaults: {} };
+		t.deepEqual(servers, expectServers);
+		t.deepEqual(reasons, EXPECT_REASONS);
 
-	var results = filter.run(log, givenServers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+		t.deepEqual(pkg, {
+			overprovision_cpu: 6,
+			overprovision_ram: 0.75,
+			overprovision_disk: 0.5
+		});
 
-	t.deepEqual(filteredServers, expectedServers);
-	t.deepEqual(reasons, undefined);
+		t.end();
+	});
 
-	t.end();
 });
 
 
 test('disable overprovisioning with no servers', function (t) {
-	var servers = [];
 	var constraints = { pkg: {}, defaults: {} };
 
-	var results = filter.run(log, servers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+	plugin.run(LOG, [], constraints, function (err, servers, reasons) {
+		assert.arrayOfObject(servers);
+		assert.object(reasons);
 
-	t.equal(filteredServers.length, 0);
-	t.deepEqual(reasons, undefined);
+		t.ifError(err);
 
-	t.end();
+		t.deepEqual(servers, []);
+		t.deepEqual(reasons, {});
+
+		t.end();
+	});
 });
 
 
 test('name', function (t) {
-	t.equal(typeof (filter.name), 'string');
+	t.equal(typeof (plugin.name), 'string');
 	t.end();
 });
diff --git a/test/algorithms/score-current-platform.test.js b/test/algorithms/score-current-platform.test.js
index 9ace855..8de8953 100644
--- a/test/algorithms/score-current-platform.test.js
+++ b/test/algorithms/score-current-platform.test.js
@@ -10,7 +10,8 @@
 
 var test = require('tape');
 var scorer = require('../../lib/algorithms/score-current-platform.js');
-var clone = require('./common').clone;
+var common = require('./common');
+var clone  = common.clone;
 
 
 var LOG = {
@@ -45,16 +46,19 @@ var SERVERS = [ {
 } ];
 
 
+var checkScorer = common.createPluginChecker(scorer, LOG);
+
+
 test('scoreCurrentPlatform()', function (t) {
-	var expectedServers = clone(SERVERS);
-	expectedServers[0].score = 4;
-	expectedServers[1].score = 4;
-	expectedServers[2].score = 4;
-	expectedServers[3].score = 3;
-	expectedServers[4].score = 2;
-	expectedServers[5].score = 1;
-
-	var expectedReasons = {
+	var expectServers = clone(SERVERS);
+	expectServers[0].score = 4;
+	expectServers[1].score = 4;
+	expectServers[2].score = 4;
+	expectServers[3].score = 3;
+	expectServers[4].score = 2;
+	expectServers[5].score = 1;
+
+	var expectReasons = {
 		'8973fb43-29da-474c-97b8-7c513c602a24': 'increased score by 3',
 		'cc8c8619-21a8-403f-a4db-3061b38d5881': 'increased score by 3',
 		'd68d4508-b153-4f3c-8121-b84c23848dcb': 'increased score by 3',
@@ -67,27 +71,20 @@ test('scoreCurrentPlatform()', function (t) {
 		defaults: { weight_current_platform: 3 }
 	};
 
-	var results = scorer.run(LOG, clone(SERVERS), constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, expectedServers);
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('scoreCurrentPlatform() with negative weight', function (t) {
-	var expectedServers = clone(SERVERS);
-	expectedServers[0].score = 1;
-	expectedServers[1].score = 1;
-	expectedServers[2].score = 1;
-	expectedServers[3].score = 2;
-	expectedServers[4].score = 3;
-	expectedServers[5].score = 4;
-
-	var expectedReasons = {
+	var expectServers = clone(SERVERS);
+	expectServers[0].score = 1;
+	expectServers[1].score = 1;
+	expectServers[2].score = 1;
+	expectServers[3].score = 2;
+	expectServers[4].score = 3;
+	expectServers[5].score = 4;
+
+	var expectReasons = {
 		'8973fb43-29da-474c-97b8-7c513c602a24': 'increased score by 0',
 		'cc8c8619-21a8-403f-a4db-3061b38d5881': 'increased score by 0',
 		'd68d4508-b153-4f3c-8121-b84c23848dcb': 'increased score by 0',
@@ -100,38 +97,26 @@ test('scoreCurrentPlatform() with negative weight', function (t) {
 		defaults: { weight_current_platform: -3 }
 	};
 
-	var results = scorer.run(LOG, clone(SERVERS), constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, expectedServers);
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('scoreCurrentPlatform() with one server', function (t) {
-	var results = scorer.run(LOG, [clone(SERVERS[0])], {});
-	var servers = results[0];
-	var reasons = results[1];
+	var servers = [ SERVERS[0] ];
 
-	t.deepEqual(servers, [SERVERS[0]]);
-	t.deepEqual(reasons, { skip: 'One or fewer servers' });
+	var expectServers = servers;
+	var expectReasons = { skip: 'One or fewer servers' };
 
-	t.end();
+	var constraints = {};
+
+	checkScorer(t, servers, constraints, expectServers, expectReasons);
 });
 
 
 test('scoreCurrentPlatform() with no servers', function (t) {
-	var results = scorer.run(LOG, [], {});
-	var servers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(servers, []);
-	t.deepEqual(reasons, { skip: 'One or fewer servers' });
+	var expectReasons = { skip: 'One or fewer servers' };
 
-	t.end();
+	checkScorer(t, [], {}, [], expectReasons);
 });
 
 
diff --git a/test/algorithms/score-next-reboot.test.js b/test/algorithms/score-next-reboot.test.js
index c33b4db..53bc4f8 100644
--- a/test/algorithms/score-next-reboot.test.js
+++ b/test/algorithms/score-next-reboot.test.js
@@ -10,7 +10,8 @@
 
 var test = require('tape');
 var scorer = require('../../lib/algorithms/score-next-reboot.js');
-var clone = require('./common').clone;
+var common = require('./common');
+var clone  = common.clone;
 
 
 var LOG = {
@@ -18,50 +19,60 @@ var LOG = {
 	debug: function () { return (true); }
 };
 
-
-test('scoreNextReboot()', function (t) {
-	var now = new Date();
-	function delta(days) {
-		var addMs = days * 24 * 60 * 60 * 1000;
-		return (new Date(+now + addMs).toISOString());
-	}
-
-	var givenServers = [ {
-		uuid: '62ccf0e0-268f-4f82-838a-218e4798d6c2',
-		score: 1,
-		next_reboot: delta(75)
-	}, {
-		uuid: 'ad60a3e7-497c-4876-b074-79bf041b7086',
-		score: 1,
-		next_reboot: delta(70)
-	}, {
-		uuid: '7fbf5802-26b0-4e14-bbce-87e44c6aa926',
-		score: 1,
-		next_reboot: delta(10)
-	}, {
-		uuid: '0cb6d02c-a0de-4edd-95fd-30a71a397f71',
-		score: 1
-	}, {
-		uuid: '44710ff2-57e6-45df-9d87-9844fd3c216f',
-		score: 1,
-		next_reboot: delta(-35),
-		last_boot: delta(-30)
-	}, {
-		uuid: '3b4157cd-8f2e-4d57-b7a0-bb43bea5455c',
-		score: 1,
-		next_reboot: delta(0),
-		last_boot: delta(-30)
-	} ];
-
-	var expectedServers = clone(givenServers);
-	expectedServers[0].score = 3;
-	expectedServers[1].score = 3;
-	expectedServers[2].score = 2;
-	expectedServers[3].score = 4;
-	expectedServers[4].score = 4;
-	expectedServers[5].score = 1;
-
-	var expectedReasons = {
+var SERVERS = [ {
+	uuid: '62ccf0e0-268f-4f82-838a-218e4798d6c2',
+	score: 1,
+	next_reboot: delta(75)
+}, {
+	uuid: 'ad60a3e7-497c-4876-b074-79bf041b7086',
+	score: 1,
+	next_reboot: delta(70)
+}, {
+	uuid: '7fbf5802-26b0-4e14-bbce-87e44c6aa926',
+	score: 1,
+	next_reboot: delta(10)
+}, {
+	uuid: '0cb6d02c-a0de-4edd-95fd-30a71a397f71',
+	score: 1
+}, {
+	uuid: '44710ff2-57e6-45df-9d87-9844fd3c216f',
+	score: 1,
+	next_reboot: delta(-35),
+	last_boot: delta(-30)
+}, {
+	uuid: '3b4157cd-8f2e-4d57-b7a0-bb43bea5455c',
+	score: 1,
+	next_reboot: delta(0),
+	last_boot: delta(-30)
+} ];
+
+
+// helpers ---
+
+
+var checkScorer = common.createPluginChecker(scorer, LOG);
+
+var now;
+function delta(days) {
+	now = now || new Date();
+	var addMs = days * 24 * 60 * 60 * 1000;
+	return (new Date(+now + addMs).toISOString());
+}
+
+
+// tests ---
+
+
+test('scoreNextReboot() - positive weight', function (t) {
+	var expectServers = clone(SERVERS);
+	expectServers[0].score = 3;
+	expectServers[1].score = 3;
+	expectServers[2].score = 2;
+	expectServers[3].score = 4;
+	expectServers[4].score = 4;
+	expectServers[5].score = 1;
+
+	var expectReasons = {
 		'0cb6d02c-a0de-4edd-95fd-30a71a397f71':
 			'increased score by 3',
 		'3b4157cd-8f2e-4d57-b7a0-bb43bea5455c':
@@ -80,23 +91,20 @@ test('scoreNextReboot()', function (t) {
 		defaults: { weight_next_reboot: 3 }
 	};
 
-	var results = scorer.run(LOG, clone(givenServers), constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, expectedServers);
-	t.deepEqual(reasons, expectedReasons);
+	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
+});
 
-	// now try with a negative weight ---
 
-	expectedServers[0].score = 2;
-	expectedServers[1].score = 2;
-	expectedServers[2].score = 3;
-	expectedServers[3].score = 1;
-	expectedServers[4].score = 1;
-	expectedServers[5].score = 4;
+test('scoreNextReboot() - negative weight', function (t) {
+	var expectServers = clone(SERVERS);
+	expectServers[0].score = 2;
+	expectServers[1].score = 2;
+	expectServers[2].score = 3;
+	expectServers[3].score = 1;
+	expectServers[4].score = 1;
+	expectServers[5].score = 4;
 
-	expectedReasons = {
+	var expectReasons = {
 		'0cb6d02c-a0de-4edd-95fd-30a71a397f71':
 			'increased score by 0',
 		'3b4157cd-8f2e-4d57-b7a0-bb43bea5455c':
@@ -111,48 +119,34 @@ test('scoreNextReboot()', function (t) {
 			'increased score by 1'
 	};
 
-	constraints = {
+	var constraints = {
 		defaults: { weight_next_reboot: -3 }
 	};
 
-	results = scorer.run(LOG, clone(givenServers), constraints);
-	scoredServers = results[0];
-	reasons = results[1];
-
-	t.deepEqual(scoredServers, expectedServers);
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('scoreNextReboot() with one server', function (t) {
-	var givenServers = [ {
+	var servers = [ {
 		uuid: '62ccf0e0-268f-4f82-838a-218e4798d6c2',
 		score: 1,
 		next_reboot: '2016-04-20T14:01:56.447Z'
 	} ];
 
-	var results = scorer.run(LOG, givenServers, {});
-	var servers = results[0];
-	var reasons = results[1];
+	var expectServers = servers;
+	var expectReasons = { skip: 'One or fewer servers' };
 
-	t.deepEqual(servers, clone(givenServers));
-	t.deepEqual(reasons, { skip: 'One or fewer servers' });
+	var constraints = {};
 
-	t.end();
+	checkScorer(t, servers, constraints, expectServers, expectReasons);
 });
 
 
 test('scoreNextReboot() with no servers', function (t) {
-	var results = scorer.run(LOG, [], {});
-	var servers = results[0];
-	var reasons = results[1];
+	var expectReasons = { skip: 'One or fewer servers' };
 
-	t.deepEqual(servers, []);
-	t.deepEqual(reasons, { skip: 'One or fewer servers' });
-
-	t.end();
+	checkScorer(t, [], {}, [], expectReasons);
 });
 
 
diff --git a/test/algorithms/score-num-owner-zones.test.js b/test/algorithms/score-num-owner-zones.test.js
index 27da37a..f4cb7f6 100644
--- a/test/algorithms/score-num-owner-zones.test.js
+++ b/test/algorithms/score-num-owner-zones.test.js
@@ -10,7 +10,8 @@
 
 var test = require('tape');
 var scorer = require('../../lib/algorithms/score-num-owner-zones.js');
-var clone = require('./common').clone;
+var common = require('./common');
+var clone  = common.clone;
 
 
 var OWNER_UUID = 'e6667010-7831-462f-ba1f-e345f8288106';
@@ -96,13 +97,16 @@ var SERVERS = [ {
 } ];
 
 
+var checkScorer = common.createPluginChecker(scorer, LOG);
+
+
 test('scoreNumOwnerZones()', function (t) {
-	var expectedServers = clone(SERVERS);
-	expectedServers[0].score = 1;
-	expectedServers[1].score = 3;
-	expectedServers[2].score = 5;
+	var expectServers = clone(SERVERS);
+	expectServers[0].score = 1;
+	expectServers[1].score = 3;
+	expectServers[2].score = 5;
 
-	var expectedReasons = {
+	var expectReasons = {
 		'b38dc3a0-eb00-11e5-943f-8bc57e287d0d':
 			'increased score by 0; 12 owner zones found',
 		'c141a106-eb00-11e5-ae33-b7201124575a':
@@ -118,24 +122,17 @@ test('scoreNumOwnerZones()', function (t) {
 		}
 	};
 
-	var results = scorer.run(LOG, clone(SERVERS), constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, expectedServers);
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('scoreNumOwnerZones() with negative default weight', function (t) {
-	var expectedServers = clone(SERVERS);
-	expectedServers[0].score = 5;
-	expectedServers[1].score = 3;
-	expectedServers[2].score = 1;
+	var expectServers = clone(SERVERS);
+	expectServers[0].score = 5;
+	expectServers[1].score = 3;
+	expectServers[2].score = 1;
 
-	var expectedReasons = {
+	var expectReasons = {
 		'b38dc3a0-eb00-11e5-943f-8bc57e287d0d':
 			'increased score by 4; 12 owner zones found',
 		'c141a106-eb00-11e5-ae33-b7201124575a':
@@ -151,20 +148,13 @@ test('scoreNumOwnerZones() with negative default weight', function (t) {
 		}
 	};
 
-	var results = scorer.run(LOG, clone(SERVERS), constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, expectedServers);
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('scoreNumOwnerZones() with zero default weight', function (t) {
-	var expectedServers = clone(SERVERS);
-	var expectedReasons = {
+	var expectServers = clone(SERVERS);
+	var expectReasons = {
 		skip: 'Resolved score weight to 0; no changes'
 	};
 
@@ -175,24 +165,17 @@ test('scoreNumOwnerZones() with zero default weight', function (t) {
 		}
 	};
 
-	var results = scorer.run(LOG, clone(SERVERS), constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, expectedServers);
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('scoreNumOwnerZones() with min-owner default set', function (t) {
-	var expectedServers = clone(SERVERS);
-	expectedServers[0].score = 1;
-	expectedServers[1].score = 2;
-	expectedServers[2].score = 3;
+	var expectServers = clone(SERVERS);
+	expectServers[0].score = 1;
+	expectServers[1].score = 2;
+	expectServers[2].score = 3;
 
-	var expectedReasons = {
+	var expectReasons = {
 		'b38dc3a0-eb00-11e5-943f-8bc57e287d0d':
 			'increased score by 0; 12 owner zones found',
 		'c141a106-eb00-11e5-ae33-b7201124575a':
@@ -209,20 +192,13 @@ test('scoreNumOwnerZones() with min-owner default set', function (t) {
 		}
 	};
 
-	var results = scorer.run(LOG, clone(SERVERS), constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, expectedServers);
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('scoreNumOwnerZones() with unrelated spread default set', function (t) {
-	var expectedServers = clone(SERVERS);
-	var expectedReasons = {
+	var expectServers = clone(SERVERS);
+	var expectReasons = {
 		skip: 'pkg or default set to spread with: min-ram'
 	};
 
@@ -234,24 +210,17 @@ test('scoreNumOwnerZones() with unrelated spread default set', function (t) {
 		}
 	};
 
-	var results = scorer.run(LOG, clone(SERVERS), constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, expectedServers);
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('scoreNumOwnerZones() with min-owner package attr set', function (t) {
-	var expectedServers = clone(SERVERS);
-	expectedServers[0].score = 1;
-	expectedServers[1].score = 2;
-	expectedServers[2].score = 3;
+	var expectServers = clone(SERVERS);
+	expectServers[0].score = 1;
+	expectServers[1].score = 2;
+	expectServers[2].score = 3;
 
-	var expectedReasons = {
+	var expectReasons = {
 		'b38dc3a0-eb00-11e5-943f-8bc57e287d0d':
 			'increased score by 0; 12 owner zones found',
 		'c141a106-eb00-11e5-ae33-b7201124575a':
@@ -266,24 +235,17 @@ test('scoreNumOwnerZones() with min-owner package attr set', function (t) {
 		pkg: { alloc_server_spread: 'min-owner' }
 	};
 
-	var results = scorer.run(LOG, clone(SERVERS), constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, expectedServers);
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('scoreNumOwnerZones() with package and default set', function (t) {
-	var expectedServers = clone(SERVERS);
-	expectedServers[0].score = 1;
-	expectedServers[1].score = 2;
-	expectedServers[2].score = 3;
+	var expectServers = clone(SERVERS);
+	expectServers[0].score = 1;
+	expectServers[1].score = 2;
+	expectServers[2].score = 3;
 
-	var expectedReasons = {
+	var expectReasons = {
 		'b38dc3a0-eb00-11e5-943f-8bc57e287d0d':
 			'increased score by 0; 12 owner zones found',
 		'c141a106-eb00-11e5-ae33-b7201124575a':
@@ -301,20 +263,13 @@ test('scoreNumOwnerZones() with package and default set', function (t) {
 		}
 	};
 
-	var results = scorer.run(LOG, clone(SERVERS), constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, expectedServers);
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('scoreNumOwnerZones() with unrelated package attr set', function (t) {
-	var expectedServers = clone(SERVERS);
-	var expectedReasons = {
+	var expectServers = clone(SERVERS);
+	var expectReasons = {
 		skip: 'pkg or default set to spread with: max-ram'
 	};
 
@@ -324,22 +279,16 @@ test('scoreNumOwnerZones() with unrelated package attr set', function (t) {
 		pkg: { alloc_server_spread: 'max-ram' }
 	};
 
-	var results = scorer.run(LOG, clone(SERVERS), constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, expectedServers);
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('scoreNumOwnerZones() with one server', function (t) {
-	var expectedServers = [clone(SERVERS[0])];
-	expectedServers[0].score = 5;
+	var servers = [SERVERS[0]];
+	var expectServers = clone(servers);
+	expectServers[0].score = 5;
 
-	var expectedReasons = {
+	var expectReasons = {
 		'b38dc3a0-eb00-11e5-943f-8bc57e287d0d':
 			'increased score by 4; 12 owner zones found'
 	};
@@ -349,14 +298,7 @@ test('scoreNumOwnerZones() with one server', function (t) {
 		defaults: { weight_num_owner_zones: 4 }
 	};
 
-	var results = scorer.run(LOG, [clone(SERVERS[0])], constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, expectedServers);
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkScorer(t, servers, constraints, expectServers, expectReasons);
 });
 
 
@@ -366,14 +308,7 @@ test('scoreNumOwnerZones() without servers', function (t) {
 		defaults: { weight_num_owner_zones: 4 }
 		};
 
-	var results = scorer.run(LOG, [], constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, []);
-	t.deepEqual(reasons, {});
-
-	t.end();
+	checkScorer(t, [], constraints, [], {});
 });
 
 
diff --git a/test/algorithms/score-uniform-random.test.js b/test/algorithms/score-uniform-random.test.js
index dc60641..c5c9662 100644
--- a/test/algorithms/score-uniform-random.test.js
+++ b/test/algorithms/score-uniform-random.test.js
@@ -10,7 +10,8 @@
 
 var test = require('tape');
 var scorer = require('../../lib/algorithms/score-uniform-random.js');
-var clone = require('./common').clone;
+var common = require('./common');
+var clone  = common.clone;
 
 
 var LOG = {
@@ -30,11 +31,15 @@ var SERVERS = [ {
 } ];
 
 
+var checkScorer = common.createPluginChecker(scorer, LOG);
+
+
 test('scoreUniformRandom()', function (t) {
 	var constraints = { defaults: { weight_uniform_random: 4 } };
 	checkRandom(t, constraints, 5);
 });
 
+
 test('scoreUniformRandom() with pkg set spread', function (t) {
 	var constraints = {
 		defaults: { weight_uniform_random: 4 },
@@ -71,6 +76,11 @@ test('scoreUniformRandom() with defaults and package attr', function (t) {
 
 
 test('scoreUniformRandom() skip wrong spread', function (t) {
+	var expectServers = SERVERS;
+	var expectReasons = {
+		skip: 'pkg or default set to spread with: min-owner'
+	};
+
 	var constraints = {
 		defaults: {
 			weight_uniform_random: 4,
@@ -78,20 +88,19 @@ test('scoreUniformRandom() skip wrong spread', function (t) {
 		}
 	};
 
-	var results = scorer.run(LOG, clone(SERVERS), constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
+	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
+});
+
 
-	t.deepEqual(scoredServers, SERVERS);
-	t.deepEqual(reasons, {
+test('scoreUniformRandom() skip wrong spread', function (t) {
+	var expectServers = SERVERS;
+	var expectReasons = {
 		skip: 'pkg or default set to spread with: min-owner'
-	});
+	};
 
-	constraints = { pkg: {}, defaults: { server_spread: 'min-owner' } };
-	results = scorer.run(LOG, clone(SERVERS), constraints);
-	t.deepEqual(results[0], SERVERS);
+	var constraints = { pkg: {}, defaults: { server_spread: 'min-owner' } };
 
-	t.end();
+	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
@@ -106,26 +115,37 @@ checkRandom(t, constraints, expectedMax)
 {
 	var scores = SERVERS.map(function () { return ([]); });
 
-	for (var i = 0; i !== 25; i++) {
-		var results = scorer.run(LOG, clone(SERVERS), constraints);
-		var scored = results[0];
-		var reasons = results[1];
+	function iter(num) {
+		if (num === 0) {
+			return (checkScores());
+		}
 
-		t.ok(reasons);
+		return scorer.run(LOG, clone(SERVERS), constraints,
+				function (err, servers, reasons) {
+			t.ifError(err);
 
-		for (var j = 0; j !== SERVERS.length; j++) {
-			t.equal(scored[j].uuid, SERVERS[j].uuid);
-			scores[j].push(scored[j].score);
-		}
+			t.ok(reasons);
+
+			for (var j = 0; j !== SERVERS.length; j++) {
+				t.equal(servers[j].uuid, SERVERS[j].uuid);
+				scores[j].push(servers[j].score);
+			}
+
+			iter(num - 1);
+		});
 	}
 
-	for (var k = 0; k !== SERVERS.length; k++) {
-		var min = Math.min.apply(Math, scores[k]);
-		var max = Math.max.apply(Math, scores[k]);
+	function checkScores() {
+		for (var k = 0; k !== SERVERS.length; k++) {
+			var min = Math.min.apply(Math, scores[k]);
+			var max = Math.max.apply(Math, scores[k]);
+
+			t.equal(min, 1);
+			t.equal(max, expectedMax);
+		}
 
-		t.equal(min, 1);
-		t.equal(max, expectedMax);
+		t.end();
 	}
 
-	t.end();
+	iter(25);
 }
diff --git a/test/algorithms/score-unreserved-disk.test.js b/test/algorithms/score-unreserved-disk.test.js
index fb7da05..24be95d 100644
--- a/test/algorithms/score-unreserved-disk.test.js
+++ b/test/algorithms/score-unreserved-disk.test.js
@@ -9,8 +9,9 @@
  */
 
 var test = require('tape');
-var clone = require('./common').clone;
 var scorer = require('../../lib/algorithms/score-unreserved-disk.js');
+var common = require('./common');
+var clone  = common.clone;
 
 
 var LOG = {
@@ -33,13 +34,16 @@ var SERVERS = [ {
 } ];
 
 
+var checkScorer = common.createPluginChecker(scorer, LOG);
+
+
 test('scoreUnreservedDisk()', function (t) {
-	var expectedServers = clone(SERVERS);
-	expectedServers[0].score = 5;
-	expectedServers[1].score = 1;
-	expectedServers[2].score = 3;
+	var expectServers = clone(SERVERS);
+	expectServers[0].score = 5;
+	expectServers[1].score = 1;
+	expectServers[2].score = 3;
 
-	var expectedReasons = {
+	var expectReasons = {
 		'ef23ad0e-1802-4929-af61-387e9071d39f': 'increased score by 4',
 		'330ea9b9-0b4a-425d-8fc5-d31ccbfcc0cd': 'increased score by 0',
 		'd3409329-e847-40a1-a924-119eacb69d9c': 'increased score by 2'
@@ -49,24 +53,17 @@ test('scoreUnreservedDisk()', function (t) {
 		defaults: { weight_unreserved_disk: 4 }
 	};
 
-	var results = scorer.run(LOG, clone(SERVERS), constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, expectedServers);
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('scoreUnreservedDisk() with negative default weight', function (t) {
-	var expectedServers = clone(SERVERS);
-	expectedServers[0].score = 1;
-	expectedServers[1].score = 5;
-	expectedServers[2].score = 3;
+	var expectServers = clone(SERVERS);
+	expectServers[0].score = 1;
+	expectServers[1].score = 5;
+	expectServers[2].score = 3;
 
-	var expectedReasons = {
+	var expectReasons = {
 		'ef23ad0e-1802-4929-af61-387e9071d39f': 'increased score by 0',
 		'330ea9b9-0b4a-425d-8fc5-d31ccbfcc0cd': 'increased score by 4',
 		'd3409329-e847-40a1-a924-119eacb69d9c': 'increased score by 2'
@@ -76,20 +73,13 @@ test('scoreUnreservedDisk() with negative default weight', function (t) {
 		defaults: { weight_unreserved_disk: -4 }
 	};
 
-	var results = scorer.run(LOG, clone(SERVERS), constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, expectedServers);
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('scoreUnreservedDisk() with zero default weight', function (t) {
-	var expectedServers = SERVERS;
- 	var expectedReasons = {
+	var expectServers = SERVERS;
+ 	var expectReasons = {
 		'skip': 'Resolved score weight to 0; no changes'
 	};
 
@@ -97,20 +87,13 @@ test('scoreUnreservedDisk() with zero default weight', function (t) {
 		defaults: { weight_unreserved_disk: 0 }
 	};
 
-	var results = scorer.run(LOG, clone(SERVERS), constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, expectedServers);
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('scoreUnreservedDisk() with any spread default set', function (t) {
-	var expectedServers = clone(SERVERS);
-	var expectedReasons = {
+	var expectServers = SERVERS;
+	var expectReasons = {
 		skip: 'pkg or default set to spread with: min-owner'
 	};
 
@@ -121,20 +104,13 @@ test('scoreUnreservedDisk() with any spread default set', function (t) {
 		}
 	};
 
-	var results = scorer.run(LOG, clone(SERVERS), constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, expectedServers);
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('scoreUnreservedDisk() with any package attr set', function (t) {
-	var expectedServers = clone(SERVERS);
-	var expectedReasons = {
+	var expectServers = SERVERS;
+	var expectReasons = {
 		skip: 'pkg or default set to spread with: min-ram'
 	};
 
@@ -145,22 +121,16 @@ test('scoreUnreservedDisk() with any package attr set', function (t) {
 		pkg: { alloc_server_spread: 'min-ram' }
 	};
 
-	var results = scorer.run(LOG, clone(SERVERS), constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, expectedServers);
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('scoreUnreservedDisk() with one server', function (t) {
-	var expectedServers = [ clone(SERVERS[0]) ];
-	expectedServers[0].score = 5;
+	var servers = [ SERVERS[0] ];
+	var expectServers = clone(servers);
+	expectServers[0].score = 5;
 
-	var expectedReasons = {
+	var expectReasons = {
 		'ef23ad0e-1802-4929-af61-387e9071d39f': 'increased score by 4'
 	};
 
@@ -168,14 +138,7 @@ test('scoreUnreservedDisk() with one server', function (t) {
 		defaults: { weight_unreserved_disk: 4 }
 	};
 
-	var results = scorer.run(LOG, clone([SERVERS[0]]), constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, expectedServers);
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkScorer(t, servers, constraints, expectServers, expectReasons);
 });
 
 
@@ -184,14 +147,7 @@ test('scoreUnreservedDisk() without servers', function (t) {
 		defaults: { weight_unreserved_disk: 4 }
 	};
 
-	var results = scorer.run(LOG, [], constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, []);
-	t.deepEqual(reasons, {});
-
-	t.end();
+	checkScorer(t, [], constraints, [], {});
 });
 
 
diff --git a/test/algorithms/score-unreserved-ram.test.js b/test/algorithms/score-unreserved-ram.test.js
index 946724c..75119fa 100644
--- a/test/algorithms/score-unreserved-ram.test.js
+++ b/test/algorithms/score-unreserved-ram.test.js
@@ -9,8 +9,9 @@
  */
 
 var test = require('tape');
-var clone = require('./common').clone;
 var scorer = require('../../lib/algorithms/score-unreserved-ram.js');
+var common = require('./common');
+var clone  = common.clone;
 
 
 var LOG = {
@@ -33,13 +34,16 @@ var SERVERS = [ {
 } ];
 
 
+var checkScorer = common.createPluginChecker(scorer, LOG);
+
+
 test('scoreUnreservedRam()', function (t) {
-	var expectedServers = clone(SERVERS);
-	expectedServers[0].score = 5;
-	expectedServers[1].score = 1;
-	expectedServers[2].score = 3;
+	var expectServers = clone(SERVERS);
+	expectServers[0].score = 5;
+	expectServers[1].score = 1;
+	expectServers[2].score = 3;
 
-	var expectedReasons = {
+	var expectReasons = {
 		'26888f40-bae2-4b68-9053-c91bc82de296': 'increased score by 4',
 		'55d40d4b-296c-42c5-b8f2-295d094b7206': 'increased score by 0',
 		'926c4009-93ed-4fd0-99d5-f3e73676f10d': 'increased score by 2'
@@ -49,24 +53,17 @@ test('scoreUnreservedRam()', function (t) {
 		defaults: { weight_unreserved_ram: 4 }
 	};
 
-	var results = scorer.run(LOG, clone(SERVERS), constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, expectedServers);
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('scoreUnreservedRam() with negative default weight', function (t) {
-	var expectedServers = clone(SERVERS);
-	expectedServers[0].score = 1;
-	expectedServers[1].score = 5;
-	expectedServers[2].score = 3;
+	var expectServers = clone(SERVERS);
+	expectServers[0].score = 1;
+	expectServers[1].score = 5;
+	expectServers[2].score = 3;
 
-	var expectedReasons = {
+	var expectReasons = {
 		'26888f40-bae2-4b68-9053-c91bc82de296': 'increased score by 0',
 		'55d40d4b-296c-42c5-b8f2-295d094b7206': 'increased score by 4',
 		'926c4009-93ed-4fd0-99d5-f3e73676f10d': 'increased score by 2'
@@ -76,20 +73,13 @@ test('scoreUnreservedRam() with negative default weight', function (t) {
 		defaults: { weight_unreserved_ram: -4 }
 	};
 
-	var results = scorer.run(LOG, clone(SERVERS), constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, expectedServers);
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('scoreUnreservedRam() with zero default weight', function (t) {
-	var expectedServers = SERVERS;
- 	var expectedReasons = {
+	var expectServers = SERVERS;
+ 	var expectReasons = {
 		skip: 'Resolved score weight to 0; no changes'
 	};
 
@@ -97,24 +87,17 @@ test('scoreUnreservedRam() with zero default weight', function (t) {
 		defaults: { weight_unreserved_ram: 0 }
 	};
 
-	var results = scorer.run(LOG, clone(SERVERS), constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, expectedServers);
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('scoreUnreservedRam() with min-ram default set', function (t) {
-	var expectedServers = clone(SERVERS);
-	expectedServers[0].score = 3;
-	expectedServers[1].score = 1;
-	expectedServers[2].score = 2;
+	var expectServers = clone(SERVERS);
+	expectServers[0].score = 3;
+	expectServers[1].score = 1;
+	expectServers[2].score = 2;
 
-	var expectedReasons = {
+	var expectReasons = {
 		'26888f40-bae2-4b68-9053-c91bc82de296': 'increased score by 2',
 		'55d40d4b-296c-42c5-b8f2-295d094b7206': 'increased score by 0',
 		'926c4009-93ed-4fd0-99d5-f3e73676f10d': 'increased score by 1'
@@ -127,24 +110,17 @@ test('scoreUnreservedRam() with min-ram default set', function (t) {
 		}
 	};
 
-	var results = scorer.run(LOG, clone(SERVERS), constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, expectedServers);
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('scoreUnreservedRam() with max-ram default set', function (t) {
-	var expectedServers = clone(SERVERS);
-	expectedServers[0].score = 1;
-	expectedServers[1].score = 3;
-	expectedServers[2].score = 2;
+	var expectServers = clone(SERVERS);
+	expectServers[0].score = 1;
+	expectServers[1].score = 3;
+	expectServers[2].score = 2;
 
-	var expectedReasons = {
+	var expectReasons = {
 		'26888f40-bae2-4b68-9053-c91bc82de296': 'increased score by 0',
 		'55d40d4b-296c-42c5-b8f2-295d094b7206': 'increased score by 2',
 		'926c4009-93ed-4fd0-99d5-f3e73676f10d': 'increased score by 1'
@@ -157,20 +133,13 @@ test('scoreUnreservedRam() with max-ram default set', function (t) {
 		}
 	};
 
-	var results = scorer.run(LOG, clone(SERVERS), constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, expectedServers);
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('scoreUnreservedRam() with unrelated spread default set', function (t) {
-	var expectedServers = clone(SERVERS);
-	var expectedReasons = {
+	var expectServers = SERVERS;
+	var expectReasons = {
 		skip: 'pkg or default set to score with other plugin'
 	};
 
@@ -181,24 +150,17 @@ test('scoreUnreservedRam() with unrelated spread default set', function (t) {
 		}
 	};
 
-	var results = scorer.run(LOG, clone(SERVERS), constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, expectedServers);
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('scoreUnreservedRam() with package attr set', function (t) {
-	var expectedServers = clone(SERVERS);
-	expectedServers[0].score = 3;
-	expectedServers[1].score = 1;
-	expectedServers[2].score = 2;
+	var expectServers = clone(SERVERS);
+	expectServers[0].score = 3;
+	expectServers[1].score = 1;
+	expectServers[2].score = 2;
 
-	var expectedReasons = {
+	var expectReasons = {
 		'26888f40-bae2-4b68-9053-c91bc82de296': 'increased score by 2',
 		'55d40d4b-296c-42c5-b8f2-295d094b7206': 'increased score by 0',
 		'926c4009-93ed-4fd0-99d5-f3e73676f10d': 'increased score by 1'
@@ -211,24 +173,17 @@ test('scoreUnreservedRam() with package attr set', function (t) {
 		pkg: { alloc_server_spread: 'min-ram' }
 	};
 
-	var results = scorer.run(LOG, clone(SERVERS), constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, expectedServers);
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('scoreUnreservedRam() with package and default set', function (t) {
-	var expectedServers = clone(SERVERS);
-	expectedServers[0].score = 3;
-	expectedServers[1].score = 1;
-	expectedServers[2].score = 2;
+	var expectServers = clone(SERVERS);
+	expectServers[0].score = 3;
+	expectServers[1].score = 1;
+	expectServers[2].score = 2;
 
-	var expectedReasons = {
+	var expectReasons = {
 		'26888f40-bae2-4b68-9053-c91bc82de296': 'increased score by 2',
 		'55d40d4b-296c-42c5-b8f2-295d094b7206': 'increased score by 0',
 		'926c4009-93ed-4fd0-99d5-f3e73676f10d': 'increased score by 1'
@@ -242,20 +197,13 @@ test('scoreUnreservedRam() with package and default set', function (t) {
 		pkg: { alloc_server_spread: 'min-ram' }
 	};
 
-	var results = scorer.run(LOG, clone(SERVERS), constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, expectedServers);
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('scoreUnreservedRam() with unrelated package attr set', function (t) {
-	var expectedServers = clone(SERVERS);
-	var expectedReasons = {
+	var expectServers = SERVERS;
+	var expectReasons = {
 		skip: 'pkg or default set to score with other plugin'
 	};
 
@@ -266,22 +214,17 @@ test('scoreUnreservedRam() with unrelated package attr set', function (t) {
 		pkg: { alloc_server_spread: 'min-owner' }
 	};
 
-	var results = scorer.run(LOG, clone(SERVERS), constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, expectedServers);
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
 });
 
 
 test('scoreUnreservedRam() with one server', function (t) {
-	var expectedServers = [ clone(SERVERS[0]) ];
-	expectedServers[0].score = 5;
+	var servers = [ SERVERS[0] ];
+
+	var expectServers = clone(servers);
+	expectServers[0].score = 5;
 
-	var expectedReasons = {
+	var expectReasons = {
 		'26888f40-bae2-4b68-9053-c91bc82de296': 'increased score by 4'
 	};
 
@@ -289,14 +232,7 @@ test('scoreUnreservedRam() with one server', function (t) {
 		defaults: { weight_unreserved_ram: 4 }
 	};
 
-	var results = scorer.run(LOG, clone([SERVERS[0]]), constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, expectedServers);
-	t.deepEqual(reasons, expectedReasons);
-
-	t.end();
+	checkScorer(t, servers, constraints, expectServers, expectReasons);
 });
 
 
@@ -305,14 +241,7 @@ test('scoreUnreservedRam() without servers', function (t) {
 		defaults: { weight_unreserved_ram: 4 }
 	};
 
-	var results = scorer.run(LOG, [], constraints);
-	var scoredServers = results[0];
-	var reasons = results[1];
-
-	t.deepEqual(scoredServers, []);
-	t.deepEqual(reasons, {});
-
-	t.end();
+	checkScorer(t, [], constraints, [], {});
 });
 
 
diff --git a/test/algorithms/soft-filter-locality-hints.test.js b/test/algorithms/soft-filter-locality-hints.test.js
index 8d629cb..a364ee9 100644
--- a/test/algorithms/soft-filter-locality-hints.test.js
+++ b/test/algorithms/soft-filter-locality-hints.test.js
@@ -10,22 +10,27 @@
 
 var genUuid = require('node-uuid');
 var test = require('tape');
-
 var filter = require('../../lib/algorithms/soft-filter-locality-hints.js');
+var common = require('./common.js');
 
 
 // --- globals
 
-var log = {
+
+var LOG = {
 	trace: function () { return (true); },
 	debug: function () { return (true); }
 };
 
-var ownerUuid = 'b0bbbbbb-9172-4c58-964e-fe58a9989708';
+var OWNER_UUID = 'b0bbbbbb-9172-4c58-964e-fe58a9989708';
 
 
 // --- internal support stuff
 
+
+var checkFilter = common.createPluginChecker(filter, LOG);
+
+
 function
 genVms(numVms, numOwnerVms)
 {
@@ -33,10 +38,10 @@ genVms(numVms, numOwnerVms)
 
 	var data = [];
 	for (var i = 0; i !== numOwnerVms; i++) {
-		data.push([genUuid(), {owner_uuid: ownerUuid}]);
+		data.push([ genUuid(), { owner_uuid: OWNER_UUID } ]);
 	}
 	for (i = 0; i !== numVms - numOwnerVms; i++) {
-		data.push([genUuid(), {owner_uuid: genUuid()}]);
+		data.push([ genUuid(), { owner_uuid: genUuid() } ]);
 	}
 
 	shuffleArray(data);
@@ -73,38 +78,27 @@ function randInt(min, max) {
 
 // --- tests
 
+
 test('name', function (t) {
 	t.equal(typeof (filter.name), 'string');
 	t.end();
 });
 
-test('no locality, no servers', function (t) {
-	var servers = [];
-	var constraints = { vm: { owner_uuid: ownerUuid } };
 
-	var results = filter.run(log, servers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
+test('no locality, no servers', function (t) {
+	var constraints = { vm: { owner_uuid: OWNER_UUID } };
 
-	t.equal(filteredServers.length, 0);
-	t.deepEqual(reasons, undefined);
-	t.end();
+	checkFilter(t, [], constraints, [], {});
 });
 
+
 test('locality, no servers', function (t) {
-	var servers = [];
 	var constraints = { vm: {
-		owner_uuid: ownerUuid,
+		owner_uuid: OWNER_UUID,
 		locality: { near: '468994e6-d53d-c74c-8245-3273a86dc3d9' }
 	}};
 
-	var results = filter.run(log, servers, constraints);
-	var filteredServers = results[0];
-	var reasons = results[1];
-
-	t.equal(filteredServers.length, 0);
-	t.deepEqual(reasons, undefined);
-	t.end();
+	checkFilter(t, [], constraints, [], {});
 });
 
 
@@ -125,12 +119,12 @@ test('locality scenario A', function (tt) {
 
 	function ownerVmOnServer(idx) {
 		return Object.keys(servers[idx].vms).filter(function (v) {
-			return (servers[idx].vms[v].owner_uuid === ownerUuid);
+			return (servers[idx].vms[v].owner_uuid === OWNER_UUID);
 		})[0];
 	}
 	function nonOwnerVmOnServer(idx) {
 		return Object.keys(servers[idx].vms).filter(function (v) {
-			return (servers[idx].vms[v].owner_uuid !== ownerUuid);
+			return (servers[idx].vms[v].owner_uuid !== OWNER_UUID);
 		})[0];
 	}
 
@@ -140,158 +134,129 @@ test('locality scenario A', function (tt) {
 	var ownerVmOnServer4 = ownerVmOnServer(4);
 
 	tt.test('  no locality -> owner spread', function (t) {
-		var results = filter.run(log, servers, { vm: {
-			owner_uuid: ownerUuid
-		}});
-		var filteredServers = results[0];
-		var reasons = results[1];
+		var expServers = [ servers[1] ];
 
-		var expServers = [servers[1]];
 		var expReasons = {};
 		[0, 2, 3, 4].forEach(function (idx) {
 			expReasons[servers[idx].uuid]
 				= 'exclude: spread by owner';
 		});
-		t.deepEqual(filteredServers, expServers);
-		t.deepEqual(reasons, expReasons);
 
-		t.end();
+		var constraints = { vm: { owner_uuid: OWNER_UUID } };
+
+		checkFilter(t, servers, constraints, expServers, expReasons);
 	});
 
 	tt.test('  no locality -> owner spread (ignored)', function (t) {
-		var subsetServers = [servers[3], servers[4]];
-		var results = filter.run(log, subsetServers, { vm: {
-			owner_uuid: ownerUuid
-		}});
-		var filteredServers = results[0];
-		var reasons = results[1];
+		var subsetServers = [ servers[3], servers[4] ];
 
 		var expServers = subsetServers;
 		var expReasons = {
 			'*': 'exclude: spread by owner (ignored b/c non-strict)'
 		};
-		t.deepEqual(filteredServers, expServers);
-		t.deepEqual(reasons, expReasons);
 
-		t.end();
+		var constraints = { vm: { owner_uuid: OWNER_UUID } };
+
+		checkFilter(t, subsetServers, constraints, expServers,
+			expReasons);
 	});
 
-	tt.test('  non-strict far (multiple locality forms)', function (t) {
-		var expServers = [servers[1], servers[2], servers[3],
-			servers[4]];
+	tt.test('  non-strict far (string)', function (t) {
+		var expServers = servers.slice(1, 5);
 		var expReasons = {};
 		expReasons[servers[0].uuid]
 			= 'exclude: inst!=' + ownerVmOnServer0;
 
-		// Test with 'far' as a string.
-		var results = filter.run(log, servers, { vm: {
-			owner_uuid: ownerUuid,
+		var constraints = { vm: {
+			owner_uuid: OWNER_UUID,
 			locality: { far: ownerVmOnServer0 }
-		}});
-		var filteredServers = results[0];
-		var reasons = results[1];
-		t.deepEqual(filteredServers, expServers);
-		t.deepEqual(reasons, expReasons);
-
-		// And test with 'far' as an array.
-		results = filter.run(log, servers, { vm: {
-			owner_uuid: ownerUuid,
+		} };
+
+		checkFilter(t, servers, constraints, expServers, expReasons);
+	});
+
+	tt.test('  non-strict far (string)', function (t) {
+		var expServers = servers.slice(1, 5);
+		var expReasons = {};
+		expReasons[servers[0].uuid]
+			= 'exclude: inst!=' + ownerVmOnServer0;
+
+		var constraints = { vm: {
+			owner_uuid: OWNER_UUID,
 			locality: { far: [ownerVmOnServer0] }
-		}});
-		filteredServers = results[0];
-		reasons = results[1];
-		t.deepEqual(filteredServers, expServers);
-		t.deepEqual(reasons, expReasons);
+		} };
 
-		t.end();
+		checkFilter(t, servers, constraints, expServers, expReasons);
 	});
 
 	tt.test('  strict far', function (t) {
-		var results = filter.run(log, servers, { vm: {
-			owner_uuid: ownerUuid,
-			locality: { strict: true, far: [ownerVmOnServer0] }
-		}});
-		var filteredServers = results[0];
-		var reasons = results[1];
-
 		var expServers = servers;
 		var expReasons = {
 			skip: 'Strict locality requested and no spreading ' +
 				'needed'
 		};
-		t.deepEqual(filteredServers, expServers);
-		t.deepEqual(reasons, expReasons);
 
-		t.end();
+		var constraints = { vm: {
+			owner_uuid: OWNER_UUID,
+			locality: { strict: true, far: [ownerVmOnServer0] }
+		} };
+
+		checkFilter(t, servers, constraints, expServers, expReasons);
 	});
 
 	tt.test('  non-strict near', function (t) {
-		var results = filter.run(log, servers, { vm: {
-			owner_uuid: ownerUuid,
-			locality: { strict: false, near: [ownerVmOnServer3] }
-		}});
-		var filteredServers = results[0];
-		var reasons = results[1];
-
-		var expServers = [servers[3]];
+		var expServers = [ servers[3] ];
 		var expReasons = {};
 		expReasons[servers[3].uuid]
 			= 'include: inst==~' + ownerVmOnServer3;
-		t.deepEqual(filteredServers, expServers);
-		t.deepEqual(reasons, expReasons);
 
-		t.end();
+		var constraints = { vm: {
+			owner_uuid: OWNER_UUID,
+			locality: { strict: false, near: [ownerVmOnServer3] }
+		} };
+
+		checkFilter(t, servers, constraints, expServers, expReasons);
 	});
 
 	tt.test('  strict near', function (t) {
-		var results = filter.run(log, servers, { vm: {
-			owner_uuid: ownerUuid,
-			locality: { strict: true, near: [ownerVmOnServer3] }
-		}});
-		var filteredServers = results[0];
-		var reasons = results[1];
-
 		var expServers = servers;
 		var expReasons = {
 			skip: 'Strict locality requested and no spreading ' +
 				'needed'
 		};
-		t.deepEqual(filteredServers, expServers);
-		t.deepEqual(reasons, expReasons);
 
-		t.end();
+		var constraints = { vm: {
+			owner_uuid: OWNER_UUID,
+			locality: { strict: true, near: [ownerVmOnServer3] }
+		} };
+
+		checkFilter(t, servers, constraints, expServers, expReasons);
 	});
 
-	tt.test('  non-strict near non-existant-VM (gets ignored)',
+	tt.test('  non-strict near non-existent-VM (gets ignored)',
 	    function (t) {
-		var nonExistantVm = 'ef26f01e-200e-2a43-a056-cab333731e8f';
-		var results = filter.run(log, servers, { vm: {
-			owner_uuid: ownerUuid,
-			locality: { strict: false, near: [nonExistantVm] }
-		}});
-		var filteredServers = results[0];
-		var reasons = results[1];
+		var nonExistentVm = 'ef26f01e-200e-2a43-a056-cab333731e8f';
+		var constraints = { vm: {
+			owner_uuid: OWNER_UUID,
+			locality: { strict: false, near: [nonExistentVm] }
+		} };
 
 		var expServers = servers;
 		var expReasons = {
-			'*': 'exclude: inst==~' + nonExistantVm
+			'*': 'exclude: inst==~' + nonExistentVm
 				+ ' (ignored b/c non-strict)'
 		};
-		t.deepEqual(filteredServers, expServers);
-		t.deepEqual(reasons, expReasons);
 
-		t.end();
+		checkFilter(t, servers, constraints, expServers, expReasons);
 	});
 
 	// Here we expect to return all the CNs with *any* of the list VMs.
 	tt.test('  non-strict near, VMs on multiple CNs', function (t) {
 		var near = [ownerVmOnServer0, ownerVmOnServer2];
-		var results = filter.run(log, servers, { vm: {
-			owner_uuid: ownerUuid,
+		var constraints = { vm: {
+			owner_uuid: OWNER_UUID,
 			locality: { strict: false, near: near }
-		}});
-		var filteredServers = results[0];
-		var reasons = results[1];
+		} };
 
 		var expServers = [servers[0], servers[2]];
 		var expReasons = {};
@@ -299,32 +264,28 @@ test('locality scenario A', function (tt) {
 			= 'include: inst==~' + ownerVmOnServer0;
 		expReasons[servers[2].uuid]
 			= 'include: inst==~' + ownerVmOnServer2;
-		t.deepEqual(filteredServers, expServers);
-		t.deepEqual(reasons, expReasons);
 
-		t.end();
+		checkFilter(t, servers, constraints, expServers, expReasons);
 	});
 
 	tt.test('  non-strict far, that gets ignored', function (t) {
 		var far = [ownerVmOnServer3, ownerVmOnServer4];
-		var subsetServers = [servers[3], servers[4]];
-		var results = filter.run(log, subsetServers, { vm: {
-			owner_uuid: ownerUuid,
+		var constraints = { vm: {
+			owner_uuid: OWNER_UUID,
 			locality: { strict: false, far: far }
-		}});
-		var filteredServers = results[0];
-		var reasons = results[1];
+		} };
 
+		var subsetServers = [servers[3], servers[4]];
 		var expServers = subsetServers;
+
 		var expReasons = {};
 		expReasons[servers[3].uuid] = 'exclude: inst!='
 			+ ownerVmOnServer3 + ' (ignored b/c non-strict)';
 		expReasons[servers[4].uuid] = 'exclude: inst!='
 			+ ownerVmOnServer4 + ' (ignored b/c non-strict)';
-		t.deepEqual(filteredServers, expServers);
-		t.deepEqual(reasons, expReasons);
 
-		t.end();
+		checkFilter(t, subsetServers, constraints, expServers,
+			expReasons);
 	});
 });
 
@@ -343,12 +304,12 @@ test('locality scenario B: large set', function (tt) {
 
 	function ownerVmOnServer(idx) {
 		return Object.keys(servers[idx].vms).filter(function (v) {
-			return (servers[idx].vms[v].owner_uuid === ownerUuid);
+			return (servers[idx].vms[v].owner_uuid === OWNER_UUID);
 		})[0];
 	}
 	function nonOwnerVmOnServer(idx) {
 		return Object.keys(servers[idx].vms).filter(function (v) {
-			return (servers[idx].vms[v].owner_uuid !== ownerUuid);
+			return (servers[idx].vms[v].owner_uuid !== OWNER_UUID);
 		})[0];
 	}
 
@@ -356,35 +317,49 @@ test('locality scenario B: large set', function (tt) {
 	var ownerVmOnServer997 = ownerVmOnServer(997);
 
 	tt.test('  non-strict near', function (t) {
-		var start = Date.now();
-		var results = filter.run(log, servers, { vm: {
-			owner_uuid: ownerUuid,
+		var constraints = { vm: {
+			owner_uuid: OWNER_UUID,
 			locality: { strict: false, near: [ownerVmOnServer997] }
-		}});
-		var end = Date.now();
-		var elapsed = end - start;
-		var filteredServers = results[0];
+		} };
+
+		var givenServers = common.clone(servers);
+
+		var start = Date.now();
+		filter.run(LOG, givenServers, constraints,
+				function (err, filteredServers, reasons) {
+			t.ifError(err);
+
+			var end = Date.now();
+			var elapsed = end - start;
+			t.ok(elapsed < 50, '<50ms elapsed: ' + elapsed + 'ms');
 
-		t.equal(filteredServers.length, 1);
-		t.ok(elapsed < 50, '<50ms elapsed: ' + elapsed + 'ms');
+			t.equal(filteredServers.length, 1);
 
-		t.end();
+			t.end();
+		});
 	});
 
 	tt.test('  non-strict far', function (t) {
-		var start = Date.now();
-		var results = filter.run(log, servers, { vm: {
-			owner_uuid: ownerUuid,
+		var constraints = { vm: {
+			owner_uuid: OWNER_UUID,
 			locality: { strict: false, far: [
 				ownerVmOnServer42, ownerVmOnServer997] }
-		}});
-		var end = Date.now();
-		var elapsed = end - start;
-		var filteredServers = results[0];
+		} };
+
+		var givenServers = common.clone(servers);
+
+		var start = Date.now();
+		filter.run(LOG, givenServers, constraints,
+				function (err, filteredServers, reasons) {
+			t.ifError(err);
+
+			var end = Date.now();
+			var elapsed = end - start;
+			t.ok(elapsed < 50, '<50ms elapsed: ' + elapsed + 'ms');
 
-		t.equal(filteredServers.length, 998);
-		t.ok(elapsed < 50, '<50ms elapsed: ' + elapsed + 'ms');
+			t.equal(filteredServers.length, 998);
 
-		t.end();
+			t.end();
+		});
 	});
 });
diff --git a/test/allocator.test.js b/test/allocator.test.js
index 94726ec..a824c2a 100644
--- a/test/allocator.test.js
+++ b/test/allocator.test.js
@@ -8,6 +8,7 @@
  * Copyright (c) 2014, Joyent, Inc.
  */
 
+var assert = require('assert-plus');
 var test = require('tape');
 var common = require('./common');
 var Allocator = require('../lib/allocator.js');
@@ -72,120 +73,142 @@ var logStub = {
 
 test('algorithms pipeline', function (t) {
 	var serverStubs = [1, 2, 3, 4, 5];
-	var executed = [];
-	var allocator;
-	var results;
-	var serverStub;
 
 	var plugins = [
 		'pipe',
 		{
 			name: 'foo',
-			run: function (log, servers) {
-				t.ok(log.debug);
+			run: function (log, servers, constraints, cb) {
+				assert.object(log);
+				assert.array(servers);
+				assert.object(constraints);
+				assert.func(cb);
+
 				t.deepEqual(servers, serverStubs);
 
 				executed.push(1);
-				return ([[5, 4, 3, 2]]);
+				cb(null, [5, 4, 3, 2], {});
 			}
 		}, {
 			name: 'bar',
-			run: function (log, servers) {
-				t.ok(log.debug);
+			run: function (log, servers, constraints, cb) {
+				assert.object(log);
+				assert.array(servers);
+				assert.object(constraints);
+				assert.func(cb);
+
 				t.deepEqual(servers, [5, 4, 3, 2]);
 
 				executed.push(2);
-				return ([[2, 3]]);
+				cb(null, [2, 3], {});
 			}
 		}, {
 			name: 'baz',
-			run: function (log, servers) {
-				t.ok(log.debug);
+			run: function (log, servers, constraints, cb) {
+				assert.object(log);
+				assert.array(servers);
+				assert.object(constraints);
+				assert.func(cb);
+
 				t.deepEqual(servers, [2, 3]);
 
 				executed.push(3);
-				return ([[3]]);
+				cb(null, [3], {});
 			}
 		}
 	];
 
-	allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var executed = [];
+
+	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
 	allocator.allocServerExpr = plugins;
 
-	results = allocator.allocate(serverStubs, {}, {}, {});
-	serverStub = results[0];
-	t.equal(serverStub, 3);
-	t.deepEqual(executed, [1, 2, 3]);
+	allocator.allocate(serverStubs, {}, {}, {}, [], function (err, stub) {
+		t.ifError(err);
 
-	t.end();
+		t.equal(stub, 3);
+		t.deepEqual(executed, [1, 2, 3]);
+
+		t.end();
+	});
 });
 
 
 test('algorithms shortcuts with no servers', function (t) {
 	var serverStub = { uuid: '66e94ea4-6b6b-4b62-a886-799c227e6ae6' };
-	var executed = [];
-	var allocator;
-	var results;
-	var expected;
+
+	var expected = [ {
+		step: 'Received by DAPI',
+		remaining: [ '66e94ea4-6b6b-4b62-a886-799c227e6ae6' ]
+	}, {
+		step: 'foo',
+		remaining: [ '66e94ea4-6b6b-4b62-a886-799c227e6ae6' ]
+	}, {
+		step: 'bar',
+		remaining: [ '66e94ea4-6b6b-4b62-a886-799c227e6ae6' ]
+	}, {
+		step: 'baz',
+		remaining: []
+	} ];
 
 	var plugins = [
 		'pipe',
 		{
 			name: 'foo',
-			run: function () {
+			run: function (log, servers, constraints, cb) {
+				assert.object(log);
+				assert.array(servers);
+				assert.object(constraints);
+				assert.func(cb);
+
 				executed.push(1);
-				return ([[serverStub]]);
+				cb(null, [serverStub], {});
 			}
 		}, {
 			name: 'bar',
-			run: function () {
+			run: function (log, servers, constraints, cb) {
+				assert.object(log);
+				assert.array(servers);
+				assert.object(constraints);
+				assert.func(cb);
+
 				executed.push(2);
-				return ([[serverStub]]);
+				cb(null, [serverStub], {});
 			}
 		}, {
 			name: 'baz',
-			run: function () {
+			run: function (log, servers, constraints, cb) {
+				assert.object(log);
+				assert.array(servers);
+				assert.object(constraints);
+				assert.func(cb);
+
 				executed.push(3);
-				return ([[]]);
+				cb(null, [], {});
 			}
 		}, {
-			name: 'baz',
+			name: 'quux',
 			run: function () {
-				executed.push(4);
-				return ([[]]);
+				t.ok(false);
 			}
 		}
 	];
 
-	allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var executed = [];
+
+	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
 	allocator.allocServerExpr = plugins;
 
-	results = allocator.allocate([serverStub], {}, {}, {});
-	t.deepEqual(executed, [1, 2, 3]);
-	t.equal(results[0], undefined);
+	allocator.allocate([serverStub], {}, {}, {}, [],
+			function (err, stub, reasons) {
+		t.ifError(err);
+		t.deepEqual(executed, [1, 2, 3]);
+		t.equal(stub, undefined);
 
-	expected = [
-		{
-			step: 'Received by DAPI',
-			remaining: [ '66e94ea4-6b6b-4b62-a886-799c227e6ae6' ]
-		},
-		{
-			step: 'foo',
-			remaining: [ '66e94ea4-6b6b-4b62-a886-799c227e6ae6' ]
-		},
-		{
-			step: 'bar',
-			remaining: [ '66e94ea4-6b6b-4b62-a886-799c227e6ae6' ]
-		},
-		{
-			step: 'baz',
-			remaining: []
-		}
-	];
+		t.deepEqual(reasons, expected);
 
-	t.deepEqual(results[1], expected);
-
-	t.end();
+		t.end();
+	});
 });
 
 
@@ -196,80 +219,95 @@ test('dispatch 1', function (t) {
 		{ uuid: '1727e98c-50b0-46de-96dd-3b360f522ce7' },
 		{ uuid: '32f7e58c-3be8-4530-851a-2606bb8bc53f' }
 	];
-	var executed = [];
-	var allocator;
-	var results;
-	var expected;
+
+	var expected = [ {
+		step: 'Received by DAPI',
+		remaining: [ '66e94ea4-6b6b-4b62-a886-799c227e6ae6',
+			'94d987a9-968e-47ce-a959-4f14324bef7f',
+			'1727e98c-50b0-46de-96dd-3b360f522ce7',
+			'32f7e58c-3be8-4530-851a-2606bb8bc53f' ]
+	}, {
+		step: 'foo',
+		remaining: [ '66e94ea4-6b6b-4b62-a886-799c227e6ae6',
+			'1727e98c-50b0-46de-96dd-3b360f522ce7',
+			'32f7e58c-3be8-4530-851a-2606bb8bc53f' ]
+	}, {
+		step: 'bar',
+		remaining: []
+	}, {
+		step: 'baz',
+		remaining: [ '66e94ea4-6b6b-4b62-a886-799c227e6ae6' ]
+	} ];
 
 	var plugins = [
 		'pipe',
 		{
 			name: 'foo',
-			run: function (log, servers) {
+			run: function (log, servers, constraints, cb) {
+				assert.object(log);
+				assert.array(servers);
+				assert.object(constraints);
+				assert.func(cb);
+
 				t.deepEqual(servers, serverStubs);
 				executed.push(1);
-				return ([[serverStubs[0],
-				    serverStubs[2], serverStubs[3]]]);
+				cb(null, [serverStubs[0], serverStubs[2],
+					serverStubs[3]], {});
 			}
 		},
 		[
 			'or',
 			{
 				name: 'bar',
-				run: function (log, servers) {
+				run: function (log, servers, constraints, cb) {
+					assert.object(log);
+					assert.array(servers);
+					assert.object(constraints);
+					assert.func(cb);
+
 					t.deepEqual(servers,
 					    [serverStubs[0], serverStubs[2],
 					    serverStubs[3]]);
+
 					executed.push(2);
-					return ([[]]);
+
+					cb(null, [], {});
 				}
 			}, {
 				name: 'baz',
-				run: function (log, servers) {
+				run: function (log, servers, constraints, cb) {
+					assert.object(log);
+					assert.array(servers);
+					assert.object(constraints);
+					assert.func(cb);
+
 					t.deepEqual(servers,
 					    [serverStubs[0], serverStubs[2],
 					    serverStubs[3]]);
+
 					executed.push(3);
-					return ([serverStubs.slice(0, 1)]);
+
+					cb(null, serverStubs.slice(0, 1), {});
 				}
 			}
 		]
 	];
 
-	allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var executed = [];
+
+	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
 	allocator.allocServerExpr = plugins;
 
-	results = allocator.allocate(serverStubs, {}, {}, {});
-	t.deepEqual(executed, [1, 2, 3]);
-	t.deepEqual(results[0], serverStubs[0]);
+	allocator.allocate(serverStubs, {}, {}, {}, [],
+			function (err, stub, reasons) {
+		t.ifError(err);
 
-	expected = [
-		{
-			step: 'Received by DAPI',
-			remaining: [ '66e94ea4-6b6b-4b62-a886-799c227e6ae6',
-			    '94d987a9-968e-47ce-a959-4f14324bef7f',
-			    '1727e98c-50b0-46de-96dd-3b360f522ce7',
-			    '32f7e58c-3be8-4530-851a-2606bb8bc53f' ]
-		},
-		{
-			step: 'foo',
-			remaining: [ '66e94ea4-6b6b-4b62-a886-799c227e6ae6',
-			    '1727e98c-50b0-46de-96dd-3b360f522ce7',
-			    '32f7e58c-3be8-4530-851a-2606bb8bc53f' ]
-		},
-		{
-			step: 'bar',
-			remaining: []
-		},
-		{
-			step: 'baz',
-			remaining: [ '66e94ea4-6b6b-4b62-a886-799c227e6ae6' ]
-		}
-	];
-
-	t.deepEqual(results[1], expected);
+		t.deepEqual(executed, [1, 2, 3]);
+		t.deepEqual(stub, serverStubs[0]);
+		t.deepEqual(reasons, expected);
 
-	t.end();
+		t.end();
+	});
 });
 
 
@@ -280,73 +318,83 @@ test('dispatch 2', function (t) {
 		{ uuid: '1727e98c-50b0-46de-96dd-3b360f522ce7' },
 		{ uuid: '32f7e58c-3be8-4530-851a-2606bb8bc53f' }
 	];
-	var executed = [];
-	var allocator;
-	var results;
-	var expected;
+
+	var expected = [ {
+		step: 'Received by DAPI',
+		remaining: [ '66e94ea4-6b6b-4b62-a886-799c227e6ae6',
+			'94d987a9-968e-47ce-a959-4f14324bef7f',
+			'1727e98c-50b0-46de-96dd-3b360f522ce7',
+			'32f7e58c-3be8-4530-851a-2606bb8bc53f' ]
+	}, {
+		step: 'foo',
+		remaining: [ '66e94ea4-6b6b-4b62-a886-799c227e6ae6',
+			'1727e98c-50b0-46de-96dd-3b360f522ce7',
+			'32f7e58c-3be8-4530-851a-2606bb8bc53f' ]
+	}, {
+		step: 'bar',
+		remaining: [ '66e94ea4-6b6b-4b62-a886-799c227e6ae6' ]
+	} ];
 
 	var plugins = [
 		'pipe',
 		{
 			name: 'foo',
-			run: function (log, servers) {
+			run: function (log, servers, constraints, cb) {
+				assert.object(log);
+				assert.array(servers);
+				assert.object(constraints);
+				assert.func(cb);
+
 				t.deepEqual(servers, serverStubs);
 				executed.push(1);
-				return ([[serverStubs[0],
-				    serverStubs[2], serverStubs[3]]]);
+
+				cb(null, [serverStubs[0], serverStubs[2],
+					serverStubs[3]], {});
 			}
 		},
 		[
 			'or',
 			{
 				name: 'bar',
-				run: function (log, servers) {
+				run: function (log, servers, constraints, cb) {
+					assert.object(log);
+					assert.array(servers);
+					assert.object(constraints);
+					assert.func(cb);
+
 					t.deepEqual(servers,
 					    [serverStubs[0],
 					    serverStubs[2],
 					    serverStubs[3]]);
+
 					executed.push(2);
-					return ([serverStubs.slice(0, 1)]);
+
+					cb(null, serverStubs.slice(0, 1), {});
 				}
 			}, {
 				name: 'baz',
-				run: function (log, servers) {
+				run: function () {
 					t.ok(false);
 				}
 			}
 		]
 	];
 
-	allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
-	allocator.allocServerExpr = plugins;
+	var executed = [];
 
-	results = allocator.allocate(serverStubs, {}, {}, {});
-	t.deepEqual(executed, [1, 2]);
-	t.deepEqual(results[0], serverStubs[0]);
+	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	allocator.allocServerExpr = plugins;
 
-	expected = [
-		{
-			step: 'Received by DAPI',
-			remaining: [ '66e94ea4-6b6b-4b62-a886-799c227e6ae6',
-			    '94d987a9-968e-47ce-a959-4f14324bef7f',
-			    '1727e98c-50b0-46de-96dd-3b360f522ce7',
-			    '32f7e58c-3be8-4530-851a-2606bb8bc53f' ]
-		},
-		{
-			step: 'foo',
-			remaining: [ '66e94ea4-6b6b-4b62-a886-799c227e6ae6',
-			    '1727e98c-50b0-46de-96dd-3b360f522ce7',
-			    '32f7e58c-3be8-4530-851a-2606bb8bc53f' ]
-		},
-		{
-			step: 'bar',
-			remaining: [ '66e94ea4-6b6b-4b62-a886-799c227e6ae6' ]
-		}
-	];
+	allocator.allocate(serverStubs, {}, {}, {}, [],
+			function (err, stub, reasons) {
+		t.ifError(err);
 
-	t.deepEqual(results[1], expected);
+		t.deepEqual(executed, [1, 2]);
+		t.deepEqual(stub, serverStubs[0]);
+		t.deepEqual(reasons, expected);
 
-	t.end();
+		t.end();
+	});
 });
 
 
@@ -357,61 +405,68 @@ test('dispatch 3', function (t) {
 		{ uuid: '1727e98c-50b0-46de-96dd-3b360f522ce7' },
 		{ uuid: '32f7e58c-3be8-4530-851a-2606bb8bc53f' }
 	];
-	var executed = [];
-	var allocator;
-	var results;
-	var expected;
+
+	var expected = [
+		{
+			step: 'Received by DAPI',
+			remaining: [ '66e94ea4-6b6b-4b62-a886-799c227e6ae6',
+			    '94d987a9-968e-47ce-a959-4f14324bef7f',
+			    '1727e98c-50b0-46de-96dd-3b360f522ce7',
+			    '32f7e58c-3be8-4530-851a-2606bb8bc53f' ]
+		},
+		{
+			step: 'foo',
+			remaining: []
+		}
+	];
 
 	var plugins = [
 		'pipe',
 		{
 			name: 'foo',
-			run: function (log, servers) {
+			run: function (log, servers, constraints, cb) {
+				assert.object(log);
+				assert.array(servers);
+				assert.object(constraints);
+				assert.func(cb);
+
 				t.deepEqual(servers, serverStubs);
 				executed.push(1);
-				return ([[]]);
+
+				cb(null, [], {});
 			}
 		},
 		[
 			'or',
 			{
 				name: 'bar',
-				run: function (log, servers) {
+				run: function () {
 					t.ok(false);
 				}
 			}, {
 				name: 'baz',
-				run: function (log, servers) {
+				run: function () {
 					t.ok(false);
 				}
 			}
 		]
 	];
 
-	allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
-	allocator.allocServerExpr = plugins;
+	var executed = [];
 
-	results = allocator.allocate(serverStubs, {}, {}, {});
-	t.deepEqual(executed, [1]);
-	t.equal(results[0], undefined);
+	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	allocator.allocServerExpr = plugins;
 
-	expected = [
-		{
-			step: 'Received by DAPI',
-			remaining: [ '66e94ea4-6b6b-4b62-a886-799c227e6ae6',
-			    '94d987a9-968e-47ce-a959-4f14324bef7f',
-			    '1727e98c-50b0-46de-96dd-3b360f522ce7',
-			    '32f7e58c-3be8-4530-851a-2606bb8bc53f' ]
-		},
-		{
-			step: 'foo',
-			remaining: []
-		}
-	];
+	allocator.allocate(serverStubs, {}, {}, {}, [],
+			function (err, stub, reasons) {
+		t.ifError(err);
 
-	t.deepEqual(results[1], expected);
+		t.deepEqual(executed, [1]);
+		t.equal(stub, undefined);
+		t.deepEqual(reasons, expected);
 
-	t.end();
+		t.end();
+	});
 });
 
 
@@ -422,60 +477,82 @@ test('pipe 1', function (t) {
 		{ uuid: '1727e98c-50b0-46de-96dd-3b360f522ce7' },
 		{ uuid: '32f7e58c-3be8-4530-851a-2606bb8bc53f' }
 	];
-	var executed = [];
-	var allocator;
-	var results;
-	var serverStub;
-	var visitedAlgorithms;
-	var remainingServers;
 
 	var plugins = [
+		'pipe',
 		{
 			name: 'foo',
-			run: function (log, servers, constraints) {
+			run: function (log, servers, constraints, cb) {
+				assert.object(log);
+				assert.array(servers);
+				assert.object(constraints);
+				assert.func(cb);
+
 				t.deepEqual(constraints.vm, { foo: 1 });
 				t.deepEqual(servers, serverStubs);
+
 				executed.push(1);
-				return ([serverStubs.slice(0, 3)]);
+
+				cb(null, serverStubs.slice(0, 3), {});
 			}
 		}, {
 			name: 'bar',
-			run: function (log, servers, constraints) {
+			run: function (log, servers, constraints, cb) {
+				assert.object(log);
+				assert.array(servers);
+				assert.object(constraints);
+				assert.func(cb);
+
 				t.deepEqual(constraints.vm, { foo: 1 });
 				t.deepEqual(servers, serverStubs.slice(0, 3));
+
 				executed.push(2);
-				return ([serverStubs.slice(1, 3)]);
+
+				cb(null, serverStubs.slice(1, 3), {});
 			}
 		}, {
 			name: 'baz',
-			run: function (log, servers, constraints) {
+			run: function (log, servers, constraints, cb) {
+				assert.object(log);
+				assert.array(servers);
+				assert.object(constraints);
+				assert.func(cb);
+
 				t.deepEqual(constraints.vm, { foo: 1 });
 				t.deepEqual(servers, serverStubs.slice(1, 3));
+
 				executed.push(3);
-				return ([serverStubs.slice(2, 3)]);
+
+				cb(null, serverStubs.slice(2, 3), {});
 			}
 		}
 	];
 
-	allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var executed = [];
 
-	results = allocator._pipe(plugins, serverStubs, { vm: { foo: 1 } });
-	serverStub = results[0];
-	visitedAlgorithms = results[1];
-	remainingServers  = results[2];
+	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
 
-	t.deepEqual(serverStub, serverStubs.slice(2, 3));
-	t.deepEqual(executed, [1, 2, 3]);
-	t.deepEqual(visitedAlgorithms, plugins);
-	t.deepEqual(remainingServers,
-	    [ [ '66e94ea4-6b6b-4b62-a886-799c227e6ae6',
-	    '94d987a9-968e-47ce-a959-4f14324bef7f',
-	    '1727e98c-50b0-46de-96dd-3b360f522ce7' ],
-	    [ '94d987a9-968e-47ce-a959-4f14324bef7f',
-	    '1727e98c-50b0-46de-96dd-3b360f522ce7' ],
-	    [ '1727e98c-50b0-46de-96dd-3b360f522ce7' ] ]);
+	allocator._dispatch(plugins, serverStubs, { vm: { foo: 1 } },
+			function (err, serverStub, visitedAlgorithms,
+			remainingServers, reasons) {
+		t.ifError(err);
 
-	t.end();
+		t.deepEqual(serverStub, serverStubs.slice(2, 3));
+		t.deepEqual(executed, [1, 2, 3]);
+		t.deepEqual(visitedAlgorithms, plugins.slice(1, 4));
+		t.deepEqual(remainingServers, [ [
+			'66e94ea4-6b6b-4b62-a886-799c227e6ae6',
+			'94d987a9-968e-47ce-a959-4f14324bef7f',
+			'1727e98c-50b0-46de-96dd-3b360f522ce7'
+		], [
+			'94d987a9-968e-47ce-a959-4f14324bef7f',
+			'1727e98c-50b0-46de-96dd-3b360f522ce7'
+		], [
+			'1727e98c-50b0-46de-96dd-3b360f522ce7'
+		] ]);
+
+		t.end();
+	});
 });
 
 
@@ -486,55 +563,67 @@ test('pipe 2', function (t) {
 		{ uuid: '1727e98c-50b0-46de-96dd-3b360f522ce7' },
 		{ uuid: '32f7e58c-3be8-4530-851a-2606bb8bc53f' }
 	];
-	var executed = [];
-	var allocator;
-	var results;
-	var serverStub;
-	var visitedAlgorithms;
-	var remainingServers;
 
 	var plugins = [
+		'pipe',
 		{
 			name: 'foo',
-			run: function (log, servers, constraints) {
+			run: function (log, servers, constraints, cb) {
+				assert.object(log);
+				assert.array(servers);
+				assert.object(constraints);
+				assert.func(cb);
+
 				t.deepEqual(constraints.vm, { foo: 1 });
 				t.deepEqual(servers, serverStubs);
+
 				executed.push(1);
-				return ([serverStubs.slice(0, 3)]);
+
+				cb(null, serverStubs.slice(0, 3), {});
 			}
 		}, {
 			name: 'bar',
-			run: function (log, servers, constraints) {
+			run: function (log, servers, constraints, cb) {
+				assert.object(log);
+				assert.array(servers);
+				assert.object(constraints);
+				assert.func(cb);
+
 				t.deepEqual(constraints.vm, { foo: 1 });
 				t.deepEqual(servers, serverStubs.slice(0, 3));
+
 				executed.push(2);
-				return ([[]]);
+
+				cb(null, [], {});
 			}
 		}, {
 			name: 'baz',
-			run: function (log, args) {
+			run: function () {
 				t.ok(false);
 			}
 		}
 	];
 
-	allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var executed = [];
 
-	results = allocator._pipe(plugins, serverStubs, { vm: { foo: 1 } });
-	serverStub = results[0];
-	visitedAlgorithms = results[1];
-	remainingServers = results[2];
+	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
 
-	t.deepEqual(serverStub, []);
-	t.deepEqual(executed, [1, 2]);
-	t.deepEqual(visitedAlgorithms, plugins.slice(0, 2));
-	t.deepEqual(remainingServers,
-	    [ [ '66e94ea4-6b6b-4b62-a886-799c227e6ae6',
-	    '94d987a9-968e-47ce-a959-4f14324bef7f',
-	    '1727e98c-50b0-46de-96dd-3b360f522ce7' ],
-	    [] ]);
+	allocator._dispatch(plugins, serverStubs, { vm: { foo: 1 } },
+			function (err, serverStub, visitedAlgorithms,
+			remainingServers, reasons) {
+		t.ifError(err);
 
-	t.end();
+		t.deepEqual(serverStub, []);
+		t.deepEqual(executed, [1, 2]);
+		t.deepEqual(visitedAlgorithms, plugins.slice(1, 3));
+		t.deepEqual(remainingServers, [ [
+			'66e94ea4-6b6b-4b62-a886-799c227e6ae6',
+			'94d987a9-968e-47ce-a959-4f14324bef7f',
+			'1727e98c-50b0-46de-96dd-3b360f522ce7'
+		], [] ]);
+
+		t.end();
+	});
 });
 
 
@@ -545,52 +634,77 @@ test('or 1', function (t) {
 		{ uuid: '1727e98c-50b0-46de-96dd-3b360f522ce7' },
 		{ uuid: '32f7e58c-3be8-4530-851a-2606bb8bc53f' }
 	];
-	var executed = [];
 
 	var plugins = [
+		'or',
 		{
 			name: 'foo',
-			run: function (log, servers, constraints) {
+			run: function (log, servers, constraints, cb) {
+				assert.object(log);
+				assert.array(servers);
+				assert.object(constraints);
+				assert.func(cb);
+
 				t.deepEqual(constraints.vm, { foo: 1 });
 				t.deepEqual(servers, serverStubs);
+
 				executed.push(1);
-				return ([[]]);
+
+				cb(null, [], {});
 			}
 		}, {
 			name: 'bar',
-			run: function (log, servers, constraints) {
+			run: function (log, servers, constraints, cb) {
+				assert.object(log);
+				assert.array(servers);
+				assert.object(constraints);
+				assert.func(cb);
+
 				t.deepEqual(constraints.vm, { foo: 1 });
 				t.deepEqual(servers, serverStubs);
+
 				executed.push(2);
-				return ([[]]);
+
+				cb(null, [], {});
 			}
 		}, {
 			name: 'baz',
-			run: function (log, servers, constraints) {
+			run: function (log, servers, constraints, cb) {
+				assert.object(log);
+				assert.array(servers);
+				assert.object(constraints);
+				assert.func(cb);
+
 				t.deepEqual(constraints.vm, { foo: 1 });
 				t.deepEqual(servers, serverStubs);
+
 				executed.push(3);
-				return ([[]]);
+
+				cb(null, [], {});
 			}
 		}
 	];
 
+	var executed = [];
+
 	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
 
-	var results = allocator._or(plugins, serverStubs, { vm: { foo: 1 } });
-	var serverStub = results[0];
-	var visitedAlgorithms = results[1];
-	var remainingServers = results[2];
+	allocator._dispatch(plugins, serverStubs, { vm: { foo: 1 } },
+			function (err, serverStub, visitedAlgorithms,
+			remainingServers, reasons) {
+		t.ifError(err);
 
-	t.deepEqual(serverStub, []);
-	t.deepEqual(executed, [1, 2, 3]);
-	t.deepEqual(visitedAlgorithms, plugins);
-	t.deepEqual(remainingServers, [ [], [], [] ]);
+		t.deepEqual(serverStub, []);
+		t.deepEqual(executed, [1, 2, 3]);
+		t.deepEqual(visitedAlgorithms, plugins.slice(1, 4));
+		t.deepEqual(remainingServers, [ [], [], [] ]);
 
-	t.end();
+		t.end();
+	});
 });
 
 
+
 test('or 2', function (t) {
 	var serverStubs = [
 		{ uuid: '66e94ea4-6b6b-4b62-a886-799c227e6ae6' },
@@ -598,49 +712,66 @@ test('or 2', function (t) {
 		{ uuid: '1727e98c-50b0-46de-96dd-3b360f522ce7' },
 		{ uuid: '32f7e58c-3be8-4530-851a-2606bb8bc53f' }
 	];
-	var executed = [];
 
 	var plugins = [
+		'or',
 		{
 			name: 'foo',
-			run: function (log, servers, constraints) {
+			run: function (log, servers, constraints, cb) {
+				assert.object(log);
+				assert.array(servers);
+				assert.object(constraints);
+				assert.func(cb);
+
 				t.deepEqual(constraints.vm, { foo: 1 });
 				t.deepEqual(servers, serverStubs);
+
 				executed.push(1);
-				return ([[]]);
+
+				cb(null, [], {});
 			}
 		}, {
 			name: 'bar',
-			run: function (log, servers, constraints) {
+			run: function (log, servers, constraints, cb) {
+				assert.object(log);
+				assert.array(servers);
+				assert.object(constraints);
+				assert.func(cb);
+
 				t.deepEqual(constraints.vm, { foo: 1 });
 				t.deepEqual(servers, serverStubs);
+
 				executed.push(2);
-				return ([serverStubs.slice(0, 2)]);
+
+				cb(null, serverStubs.slice(0, 2), {});
 			}
 		}, {
 			name: 'baz',
-			run: function (log, servers, constraints) {
+			run: function () {
 				t.ok(false);
 			}
 		}
 	];
 
+	var executed = [];
+
 	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
 
-	var results = allocator._or(plugins, serverStubs, { vm: { foo: 1 } });
-	var serverStub		= results[0];
-	var visitedAlgorithms = results[1];
-	var remainingServers  = results[2];
+	allocator._dispatch(plugins, serverStubs, { vm: { foo: 1 } },
+			function (err, serverStub, visitedAlgorithms,
+			remainingServers, reasons) {
+		t.ifError(err);
 
-	t.deepEqual(serverStub, serverStubs.slice(0, 2));
-	t.deepEqual(executed, [1, 2]);
-	t.deepEqual(visitedAlgorithms, plugins.slice(0, 2));
-	t.deepEqual(remainingServers,
-	    [ [],
-	    [ '66e94ea4-6b6b-4b62-a886-799c227e6ae6',
-	    '94d987a9-968e-47ce-a959-4f14324bef7f' ] ]);
+		t.deepEqual(serverStub, serverStubs.slice(0, 2));
+		t.deepEqual(executed, [1, 2]);
+		t.deepEqual(visitedAlgorithms, plugins.slice(1, 3));
+		t.deepEqual(remainingServers, [ [], [
+			'66e94ea4-6b6b-4b62-a886-799c227e6ae6',
+			'94d987a9-968e-47ce-a959-4f14324bef7f'
+		] ]);
 
-	t.end();
+		t.end();
+	});
 });
 
 
@@ -671,6 +802,36 @@ test('create plugin summary', function (t) {
 		[]
 	];
 
+	var expected = [ {
+		step: 'Received by DAPI',
+		remaining: [ '66e94ea4-6b6b-4b62-a886-799c227e6ae6',
+			    '94d987a9-968e-47ce-a959-4f14324bef7f',
+			    '1727e98c-50b0-46de-96dd-3b360f522ce7',
+			    '32f7e58c-3be8-4530-851a-2606bb8bc53f' ]
+	}, {
+		step: 'foo',
+		remaining: [ '66e94ea4-6b6b-4b62-a886-799c227e6ae6',
+			    '94d987a9-968e-47ce-a959-4f14324bef7f',
+			    '32f7e58c-3be8-4530-851a-2606bb8bc53f' ],
+		reasons: {
+			'1727e98c-50b0-46de-96dd-3b360f522ce7': 'quux'
+		}
+	}, {
+		step: 'bar',
+		remaining: [ '94d987a9-968e-47ce-a959-4f14324bef7f',
+			    '32f7e58c-3be8-4530-851a-2606bb8bc53f' ],
+		reasons: {
+			'66e94ea4-6b6b-4b62-a886-799c227e6ae6': 'foo'
+		}
+	}, {
+		step: 'baz',
+		remaining: [],
+		reasons: {
+			'94d987a9-968e-47ce-a959-4f14324bef7f': 'bar',
+			'32f7e58c-3be8-4530-851a-2606bb8bc53f': 'baz'
+		}
+	} ];
+
 	var reasonsRemoved = [
 		{ '1727e98c-50b0-46de-96dd-3b360f522ce7': 'quux' },
 		{ '66e94ea4-6b6b-4b62-a886-799c227e6ae6': 'foo' },
@@ -684,41 +845,6 @@ test('create plugin summary', function (t) {
 	var summary = allocator._createPluginSummary(serverStubs,
 		visitedAlgorithms, remainingServers, reasonsRemoved);
 
-	var expected = [
-		{
-			step: 'Received by DAPI',
-			remaining: [ '66e94ea4-6b6b-4b62-a886-799c227e6ae6',
-			    '94d987a9-968e-47ce-a959-4f14324bef7f',
-			    '1727e98c-50b0-46de-96dd-3b360f522ce7',
-			    '32f7e58c-3be8-4530-851a-2606bb8bc53f' ]
-		},
-		{
-			step: 'foo',
-			remaining: [ '66e94ea4-6b6b-4b62-a886-799c227e6ae6',
-			    '94d987a9-968e-47ce-a959-4f14324bef7f',
-			    '32f7e58c-3be8-4530-851a-2606bb8bc53f' ],
-			reasons: {
-				'1727e98c-50b0-46de-96dd-3b360f522ce7': 'quux'
-			}
-		},
-		{
-			step: 'bar',
-			remaining: [ '94d987a9-968e-47ce-a959-4f14324bef7f',
-			    '32f7e58c-3be8-4530-851a-2606bb8bc53f' ],
-			reasons: {
-				'66e94ea4-6b6b-4b62-a886-799c227e6ae6': 'foo'
-			}
-		},
-		{
-			step: 'baz',
-			remaining: [],
-			reasons: {
-				'94d987a9-968e-47ce-a959-4f14324bef7f': 'bar',
-				'32f7e58c-3be8-4530-851a-2606bb8bc53f': 'baz'
-			}
-		}
-	];
-
 	t.deepEqual(summary, expected);
 
 	t.end();
@@ -820,10 +946,7 @@ test('create expression', function (t) {
 
 
 test('server capacity', function (t) {
-	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
-	var results = allocator.serverCapacity(common.getExampleServers());
-
-	var expectedResults = [ {
+	var expectedServers = {
 		'00000000-0000-0000-0000-00259094373c': {
 			cpu: 6100,
 			ram: 100627,
@@ -834,12 +957,18 @@ test('server capacity', function (t) {
 			ram: 105619,
 			disk: -27904
 		}
-	},
-	{
-		asdsa: 'Server has status: undefined'
-	} ];
+	};
 
-	t.deepEqual(results, expectedResults);
+	var expectedReasons = {
+		asdsa: 'Server has status: undefined'
+	};
 
-	t.end();
+	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	allocator.serverCapacity(common.getExampleServers(),
+			function (err, servers, reasons) {
+		t.ifError(err);
+		t.deepEqual(servers, expectedServers);
+		t.deepEqual(reasons, expectedReasons);
+		t.end();
+	});
 });
diff --git a/test/integration.test.js b/test/integration.test.js
index 5c93ae5..b652462 100644
--- a/test/integration.test.js
+++ b/test/integration.test.js
@@ -259,7 +259,10 @@ test('allocate 1', function (t) {
 			remaining: [
 				'00000000-0000-0000-0000-00259094373c',
 				'00000000-0000-0000-0000-0025909437d4'
-			]
+			],
+			reasons: {
+				skip: 'No nic_tags to filter on'
+			}
 		}, {
 			/* JSSTYLED */
 			step: 'Servers which meet image manifest platform requirements',
@@ -359,15 +362,17 @@ test('allocate 1', function (t) {
 	];
 
 	newAllocator(function (allocator) {
-		var res = allocator.allocate(SERVERS, VM, IMG, PKG, TICKETS);
-		var server = res[0];
-		var steps  = res[1];
+		allocator.allocate(SERVERS, VM, IMG, PKG, TICKETS,
+				function (err, server, steps) {
+			t.ifError(err);
 
-		t.equal(server.uuid, '00000000-0000-0000-0000-00259094373c');
-		t.equal(server.score, 3.5);
-		t.deepEqual(steps, expectedSteps);
+			t.equal(server.uuid,
+				'00000000-0000-0000-0000-00259094373c');
+			t.equal(server.score, 3.5);
+			t.deepEqual(steps, expectedSteps);
 
-		t.end();
+			t.end();
+		});
 	});
 });
 
@@ -446,7 +451,10 @@ test('allocate 2', function (t) {
 			remaining: [
 				'00000000-0000-0000-0000-00259094373c',
 				'00000000-0000-0000-0000-0025909437d4'
-			]
+			],
+			reasons: {
+				skip: 'No nic_tags to filter on'
+			}
 		}, {
 			/* JSSTYLED */
 			step: 'Servers which meet image manifest platform requirements',
@@ -487,7 +495,10 @@ test('allocate 2', function (t) {
 			step: 'Servers with same overprovision ratios as requested VM',
 			remaining: [
 				'00000000-0000-0000-0000-0025909437d4'
-			]
+			],
+			reasons: {
+				skip: 'No pkg provided'
+			}
 		}, {
 			step: 'Servers with enough unreserved RAM',
 			remaining: [
@@ -572,14 +583,16 @@ test('allocate 2', function (t) {
 	];
 
 	newAllocator(function (allocator) {
-		var res = allocator.allocate(SERVERS, VM, IMG, null, TICKETS);
-		var server = res[0];
-		var steps  = res[1];
+		allocator.allocate(SERVERS, VM, IMG, null, TICKETS,
+				function (err, server, steps) {
+			t.ifError(err);
 
-		t.equal(server.uuid, '00000000-0000-0000-0000-0025909437d4');
-		t.equal(server.score, 3.5);
-		t.deepEqual(steps, expectedSteps);
+			t.equal(server.uuid,
+				'00000000-0000-0000-0000-0025909437d4');
+			t.equal(server.score, 3.5);
+			t.deepEqual(steps, expectedSteps);
 
-		t.end();
+			t.end();
+		});
 	});
 });
-- 
2.21.0

