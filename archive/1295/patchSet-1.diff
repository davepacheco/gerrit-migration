From c09ef9006e97ebb6a36ce320ae2ea4be83359a26 Mon Sep 17 00:00:00 2001
From: Pedro Palazon Candel <pedro@joyent.com>
Date: Thu, 19 Jan 2017 17:23:40 +0100
Subject: [PATCH] TOOLS-1648 sdcadm post-setup cmon should setup cmon-agent

---
 lib/post-setup/cmon.js | 269 ++++++++++++++++++++++++++++++++++++++++-
 man/man1/sdcadm.1.ronn |  12 +-
 2 files changed, 274 insertions(+), 7 deletions(-)

diff --git a/lib/post-setup/cmon.js b/lib/post-setup/cmon.js
index 55dd976..9110371 100644
--- a/lib/post-setup/cmon.js
+++ b/lib/post-setup/cmon.js
@@ -5,9 +5,8 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
-
 /*
  * `sdcadm post-setup cmon` to create the 'cmon' service and its first
  * instance (on the headnode).
@@ -16,11 +15,16 @@
 var util = require('util'),
     format = util.format;
 var vasync = require('vasync');
+var assert = require('assert-plus');
+var ProgressBar = require('progbar').ProgressBar;
 
-var errors = require('../errors');
+var errors = require('../errors'),
+    SDCClientError = errors.SDCClientError,
+    UpdateError = errors.UpdateError,
+    MultiError = errors.MultiError;
 var DownloadImages = require('../procedures/download-images').DownloadImages;
 var shared = require('../procedures/shared');
-
+var common = require('../common');
 
 function do_cmon(subcmd, opts, args, cb) {
     var self = this;
@@ -31,6 +35,17 @@ function do_cmon(subcmd, opts, args, cb) {
         return cb(new errors.UsageError('too many args: ' + args));
     }
 
+    if (opts.servers) {
+        opts.servers = opts.servers.split(',');
+    }
+
+    // Progress bar
+    var bar;
+    var completed = 0;
+    // Given we may have errors for some CNs, and not from some others, we
+    // need to store errors and report at end:
+    var errs = [];
+
     var start = Date.now();
     var svcData = {
         name: 'cmon',
@@ -61,8 +76,12 @@ function do_cmon(subcmd, opts, args, cb) {
 
     var context = {
         imgsToDownload: [],
-        didSomething: false
+        didSomething: false,
+        serversToUpdate: null,
+        urConnection: null,
+        serverFromUuidOrHostname: {}
     };
+
     vasync.pipeline({arg: context, funcs: [
         function ensureSapiMode(_, next) {
             self.sdcadm.sapi.getMode(function (err, mode) {
@@ -151,6 +170,22 @@ function do_cmon(subcmd, opts, args, cb) {
             });
         },
 
+        function getLatestCmonAgentImage(ctx, next) {
+            var filter = {name: 'cmon-agent'};
+            self.sdcadm.updates.listImages(filter, function (err, images) {
+                if (err) {
+                    next(err);
+                } else if (images && images.length) {
+                    // TODO presuming sorted
+                    ctx.cmonAgentImg = images[images.length - 1];
+                    next();
+                } else {
+                    next(new errors.UpdateError(
+                                'no "cmon-agent" image found'));
+                }
+            });
+        },
+
         function haveImageAlready(ctx, next) {
             self.sdcadm.imgapi.getImage(ctx.cmonImg.uuid,
                     function (err, img_) {
@@ -163,6 +198,19 @@ function do_cmon(subcmd, opts, args, cb) {
             });
         },
 
+        function haveCmonAgentImageAlready(ctx, next) {
+            self.sdcadm.imgapi.getImage(ctx.cmonAgentImg.uuid,
+                    function (err, img_) {
+                if (err && err.body && err.body.code === 'ResourceNotFound') {
+                    ctx.imgsToDownload.push(ctx.cmonAgentImg);
+                } else if (err) {
+                    next(err);
+                    return;
+                }
+                next();
+            });
+        },
+
         function importImages(ctx, next) {
             if (ctx.imgsToDownload.length === 0) {
                 next();
@@ -193,7 +241,7 @@ function do_cmon(subcmd, opts, args, cb) {
             ctx.didSomething = true;
             svcData.params.image_uuid = ctx.cmonImg.uuid;
             svcData.metadata['user-script'] = ctx.userScript;
-            svcData.metadata['SERVICE_DOMAIN'] = svcDomain;
+            svcData.metadata.SERVICE_DOMAIN = svcDomain;
             svcData.params.billing_id = ctx.cmonPkg.uuid;
             delete svcData.params.package_name;
 
@@ -244,6 +292,197 @@ function do_cmon(subcmd, opts, args, cb) {
             });
         },
 
+        function getOrCreateCmonAgentSvc(ctx, next) {
+            self.progress('Cmon setup finished. Installing "cmon-agent"');
+            self.sdcadm.sapi.listServices({
+                name: 'cmon-agent'
+            }, function (err, svcs) {
+                if (err) {
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
+                }
+
+                if (svcs.length) {
+                    ctx.cmonAgentSvc = svcs[0];
+                    next();
+                    return;
+                }
+                self.progress('Creating "cmon-agent" servivce');
+                self.sdcadm.sapi.createService('cmon-agent',
+                        self.sdcadm.sdc.uuid, {
+                    params: {
+                        image_uuid: ctx.cmonAgentImg.uuid,
+                        tags: {
+                            smartdc_role: 'cmon-agent',
+                            smartdc_type: 'core'
+                        }
+                    },
+                    metadata: {
+                        SERVICE_NAME: 'cmon-agent'
+                    },
+                    type: 'agent'
+                }, function (er2, service) {
+                    if (er2) {
+                        next(new errors.SDCClientError(er2, 'sapi'));
+                        return;
+                    }
+                    ctx.cmonAgentSvc = service;
+                    next();
+                    return;
+                });
+            });
+        },
+
+        function findServersToUpdate(ctx, next) {
+            self.progress('Finding servers for cmon-agent setup');
+            self.sdcadm.cnapi.listServers({}, function (err, servers) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+                var i;
+                for (i = 0; i < servers.length; i++) {
+                    ctx.serverFromUuidOrHostname[servers[i].uuid] = servers[i];
+                    ctx.serverFromUuidOrHostname[servers[i].hostname] =
+                        servers[i];
+                }
+
+                if (opts.servers) {
+                    ctx.allServers = opts.servers.map(function (s) {
+                        return ctx.serverFromUuidOrHostname[s];
+                    }).filter(function (x) {
+                        return x !== undefined && x !== null;
+                    });
+                } else {
+                    ctx.allServers = servers;
+                }
+
+                ctx.serversToUpdate = ctx.allServers.filter(function (svr) {
+                    return svr.setup;
+                });
+
+                var unavailable = [];
+                ctx.serversToUpdate.forEach(function (srv) {
+                    if (srv.status !== 'running' ||
+                        (srv.status === 'running' &&
+                         srv.transitional_status !== '')) {
+                        unavailable.push(srv.uuid);
+                    }
+                });
+                if (unavailable.length) {
+                    next(new UpdateError(format(
+                        'The following servers are not available:\n%s\n' +
+                        'Please make sure of these servers availability ' +
+                        'or remove them from the list of servers to ' +
+                        'update before continue.', unavailable.join(','))));
+                    return;
+                }
+
+                next();
+            });
+        },
+
+        function updateAgentOnServers(ctx, next) {
+            if (process.stderr.isTTY) {
+                bar = new ProgressBar({
+                    size: ctx.serversToUpdate.length,
+                    bytes: false,
+                    filename: 'Installing cmon-agent'
+                });
+                bar.advance(0); // Draw initial progbar at 0.
+            }
+
+            // Check task completion by taskid
+            function waitUntilTaskCompletes(taskid, _cb) {
+                var counter = 0;
+                var limit = 60;
+                function _waitTask() {
+                    counter += 1;
+                    self.sdcadm.cnapi.getTask(taskid, function (err, task) {
+                        if (err) {
+                            _cb(new SDCClientError(err, 'cnapi'));
+                            return;
+                        }
+
+                        if (task.status === 'failure') {
+                            var msg = format('Task %s failed', taskid);
+                            if (task.history[0].event.error) {
+                                msg += ' with error: ' +
+                                    task.history[0].event.error.message;
+                            }
+                            _cb(new UpdateError(msg));
+                        } else if (task.status === 'complete') {
+                            _cb();
+                        } else if (counter < limit) {
+                            setTimeout(_waitTask, 5000);
+                        } else {
+                            var message = format(
+                                'Timeout(5m) waiting for task %s', taskid);
+                            self.progress(message);
+                            _cb(new UpdateError(message));
+                        }
+                    });
+                }
+                _waitTask();
+            }
+
+            function installAgent(server, callback) {
+                self.log.debug({
+                    arg: server
+                }, 'Installing cmon-agent instance');
+
+                self.sdcadm.cnapi.post({
+                    path: format('/servers/%s/install-agent', server.uuid)
+                }, {
+                    image_uuid: ctx.cmonAgentImg.uuid
+                }, function cnapiCb(er2, res) {
+                    if (er2) {
+                        callback(new SDCClientError(er2, 'cnapi'));
+                        return;
+                    }
+
+                    self.log.debug({
+                        svc: 'cmon-agent',
+                        server: server.uuid,
+                        image: ctx.cmonAgentImg.uuid
+                    }, 'Waiting for install_agent task to complete');
+
+                    waitUntilTaskCompletes(res.id, function (er3) {
+                        if (er3) {
+                            errs.push(er3);
+                        } else {
+                            self.log.debug({
+                                svc: 'cmon-agent',
+                                server: server.uuid
+                            }, 'cmon-agent successfully installed');
+                        }
+                        callback();
+                    });
+                });
+            }
+
+            var queue = vasync.queue(installAgent, opts.concurrency);
+            queue.push(ctx.serversToUpdate, function doneOne() {
+                if (bar) {
+                    completed += 1;
+                    bar.advance(completed);
+                }
+            });
+            queue.close();
+            queue.on('end', function queueDone() {
+                if (bar) {
+                    bar.end();
+                }
+                self.progress('cmon-agent setup has run in all servers.');
+                if (errs.length) {
+                    self.progress('Errors will be reported below:');
+                    next(new MultiError(errs));
+                } else {
+                    next();
+                }
+            });
+        },
+
         function done(ctx, next) {
             if (ctx.didSomething) {
                 self.progress('Setup "cmon" (%ds)',
@@ -265,11 +504,29 @@ do_cmon.options = [
         type: 'string',
         help: 'Update channel in which to look for the cmon image.',
         helpArg: 'CHANNEL'
+    },
+    {
+        names: ['concurrency', 'j'],
+        type: 'integer',
+        'default': 5,
+        help: 'Number of concurrent servers installing cmon-agent ' +
+            ' simultaneously. Default: 5',
+        helpArg: 'N'
+    },
+    {
+        names: ['servers', 's'],
+        type: 'string',
+        help: 'Comma separated list of servers (either hostnames or uuids) ' +
+            'where cmon-agent will be setup. If nothing is said, all the ' +
+            'setup servers.'
     }
 ];
 do_cmon.help = (
     'Create the "cmon" service and a first instance on the headnode.\n' +
     '\n' +
+    'Additionally, "cmon-agent" will be installed into the given\n' +
+    'servers (all the setup servers if nothing is specified).\n' +
+    '\n' +
     'Usage:\n' +
     '     {{name}} cmon\n' +
     '\n' +
diff --git a/man/man1/sdcadm.1.ronn b/man/man1/sdcadm.1.ronn
index 810cdb6..79e440c 100644
--- a/man/man1/sdcadm.1.ronn
+++ b/man/man1/sdcadm.1.ronn
@@ -490,12 +490,22 @@ Create the docker service and the docker instance on the headnode.
 
 Create the "cmon" service and a first instance on the headnode.
 
+Additionally, "cmon-agent" will be installed into the given
+servers (all the setup servers if nothing is specified).
+
 `-h, --help`
     Show this help.
 
 `-C CHANNEL, --channel=CHANNEL`
     Update channel in which to look for the cmon image.
 
+`-j N, --concurrency=N`
+    Number of concurrent servers installing cmon-agent simultaneously.
+    Default: 5.
+
+`-s ARG, --servers=ARG`
+    Comma separated list of servers (either hostnames or uuids) where
+    cmon-agent will be setup. If nothing is said, all the setup servers.
 
 ### sdcadm post-setup dev-headnode-prov
 
@@ -1028,4 +1038,4 @@ Installs a custom TLS certificate to be used by sdc-docker.
 
 ## COPYRIGHT
 
-sdcadm Copyright (c) 2016 Joyent Inc., All rights reserved.
+sdcadm Copyright (c) 2017 Joyent Inc., All rights reserved.
-- 
2.21.0

