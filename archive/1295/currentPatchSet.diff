commit 561165d1e8bbc74845a99b0fc19ab10890435c44 (refs/changes/95/1295/6)
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2017-01-26T19:04:52+01:00 (2 years, 8 months ago)
    
    TOOLS-1648 sdcadm post-setup cmon should setup cmon-agent
    Reviewed by: Trent Mick <trent.mick@joyent.com>

diff --git a/lib/cli/index.js b/lib/cli/index.js
index 6c5ad9a..1668cc5 100644
--- a/lib/cli/index.js
+++ b/lib/cli/index.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2016, Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
 
 /*
@@ -42,6 +42,31 @@ var pkg = require('../../package.json');
 var UUID_RE = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;
 
 
+//---- Custom dashdash option types
+
+function parseCommaSepStringNoEmpties(option, optstr, arg) {
+    /* JSSTYLED */
+    return arg.trim().split(/\s*,\s*/g).filter(function (part) {
+        return part;
+    });
+}
+
+cmdln.dashdash.addOptionType({
+    name: 'commaSepString',
+    takesArg: true,
+    helpArg: 'STRING',
+    parseArg: parseCommaSepStringNoEmpties
+});
+
+cmdln.dashdash.addOptionType({
+    name: 'arrayOfCommaSepString',
+    takesArg: true,
+    helpArg: 'STRING',
+    parseArg: parseCommaSepStringNoEmpties,
+    array: true,
+    arrayFlatten: true
+});
+
 
 //---- CLI class
 
diff --git a/lib/post-setup/cmon.js b/lib/post-setup/cmon.js
index 55dd976..47efb8f 100644
--- a/lib/post-setup/cmon.js
+++ b/lib/post-setup/cmon.js
@@ -5,22 +5,25 @@
  */
 
 /*
- * Copyright 2016 Joyent, Inc.
+ * Copyright 2017 Joyent, Inc.
  */
-
 /*
- * `sdcadm post-setup cmon` to create the 'cmon' service and its first
- * instance (on the headnode).
+ * `sdcadm post-setup cmon`
  */
 
 var util = require('util'),
     format = util.format;
 var vasync = require('vasync');
+var assert = require('assert-plus');
+var ProgressBar = require('progbar').ProgressBar;
 
-var errors = require('../errors');
+var errors = require('../errors'),
+    SDCClientError = errors.SDCClientError,
+    UpdateError = errors.UpdateError,
+    MultiError = errors.MultiError;
 var DownloadImages = require('../procedures/download-images').DownloadImages;
 var shared = require('../procedures/shared');
-
+var common = require('../common');
 
 function do_cmon(subcmd, opts, args, cb) {
     var self = this;
@@ -31,6 +34,13 @@ function do_cmon(subcmd, opts, args, cb) {
         return cb(new errors.UsageError('too many args: ' + args));
     }
 
+    // Progress bar
+    var bar;
+    var completed = 0;
+    // Given we may have errors for some CNs, and not from some others, we
+    // need to store errors and report at end:
+    var errs = [];
+
     var start = Date.now();
     var svcData = {
         name: 'cmon',
@@ -61,8 +71,12 @@ function do_cmon(subcmd, opts, args, cb) {
 
     var context = {
         imgsToDownload: [],
-        didSomething: false
+        didSomething: false,
+        serversToUpdate: null,
+        urConnection: null,
+        serverFromUuidOrHostname: {}
     };
+
     vasync.pipeline({arg: context, funcs: [
         function ensureSapiMode(_, next) {
             self.sdcadm.sapi.getMode(function (err, mode) {
@@ -133,6 +147,10 @@ function do_cmon(subcmd, opts, args, cb) {
         },
 
         function getLatestImage(ctx, next) {
+            if (ctx.cmonInst) {
+                next();
+                return;
+            }
             if (opts.channel) {
                 self.sdcadm.updates.channel = opts.channel;
             }
@@ -152,6 +170,10 @@ function do_cmon(subcmd, opts, args, cb) {
         },
 
         function haveImageAlready(ctx, next) {
+            if (ctx.cmonInst) {
+                next();
+                return;
+            }
             self.sdcadm.imgapi.getImage(ctx.cmonImg.uuid,
                     function (err, img_) {
                 if (err && err.body && err.body.code === 'ResourceNotFound') {
@@ -163,6 +185,41 @@ function do_cmon(subcmd, opts, args, cb) {
             });
         },
 
+        function haveCmonAgentImageAlready(ctx, next) {
+            self.sdcadm.imgapi.listImages({
+                name: 'cmon-agent'
+            }, function (err, images) {
+                if (err) {
+                    next(err);
+                } else if (images && images.length) {
+                    // TODO presuming sorted
+                    ctx.cmonAgentImg = images[images.length - 1];
+                    next();
+                }
+            });
+        },
+
+        function getLatestCmonAgentImage(ctx, next) {
+            if (ctx.cmonAgentImg) {
+                next();
+                return;
+            }
+            var filter = {name: 'cmon-agent'};
+            self.sdcadm.updates.listImages(filter, function (err, images) {
+                if (err) {
+                    next(err);
+                } else if (images && images.length) {
+                    // TODO presuming sorted
+                    ctx.cmonAgentImg = images[images.length - 1];
+                    ctx.imgsToDownload.push(ctx.cmonAgentImg);
+                    next();
+                } else {
+                    next(new errors.UpdateError(
+                                'no "cmon-agent" image found'));
+                }
+            });
+        },
+
         function importImages(ctx, next) {
             if (ctx.imgsToDownload.length === 0) {
                 next();
@@ -193,7 +250,7 @@ function do_cmon(subcmd, opts, args, cb) {
             ctx.didSomething = true;
             svcData.params.image_uuid = ctx.cmonImg.uuid;
             svcData.metadata['user-script'] = ctx.userScript;
-            svcData.metadata['SERVICE_DOMAIN'] = svcDomain;
+            svcData.metadata.SERVICE_DOMAIN = svcDomain;
             svcData.params.billing_id = ctx.cmonPkg.uuid;
             delete svcData.params.package_name;
 
@@ -244,9 +301,236 @@ function do_cmon(subcmd, opts, args, cb) {
             });
         },
 
+        function getOrCreateCmonAgentSvc(ctx, next) {
+            self.sdcadm.sapi.listServices({
+                name: 'cmon-agent'
+            }, function (err, svcs) {
+                if (err) {
+                    next(new errors.SDCClientError(err, 'sapi'));
+                    return;
+                }
+
+                if (svcs.length) {
+                    ctx.cmonAgentSvc = svcs[0];
+                    next();
+                    return;
+                }
+                self.progress('Creating "cmon-agent" service');
+                self.sdcadm.sapi.createService('cmon-agent',
+                        self.sdcadm.sdc.uuid, {
+                    params: {
+                        image_uuid: ctx.cmonAgentImg.uuid,
+                        tags: {
+                            smartdc_role: 'cmon-agent',
+                            smartdc_type: 'core'
+                        }
+                    },
+                    metadata: {
+                        SERVICE_NAME: 'cmon-agent'
+                    },
+                    type: 'agent'
+                }, function (er2, service) {
+                    if (er2) {
+                        next(new errors.SDCClientError(er2, 'sapi'));
+                        return;
+                    }
+                    ctx.cmonAgentSvc = service;
+                    next();
+                    return;
+                });
+            });
+        },
+
+        function findServersToUpdate(ctx, next) {
+            self.sdcadm.cnapi.listServers({
+                extras: 'agents'
+            }, function (err, servers) {
+                if (err) {
+                    next(err);
+                    return;
+                }
+                var i;
+                for (i = 0; i < servers.length; i++) {
+                    ctx.serverFromUuidOrHostname[servers[i].uuid] = servers[i];
+                    ctx.serverFromUuidOrHostname[servers[i].hostname] =
+                        servers[i];
+                }
+
+                if (opts.servers && opts.servers.length > 0) {
+                    ctx.serversToUpdate = opts.servers.map(function (s) {
+                        return ctx.serverFromUuidOrHostname[s];
+                    }).filter(function (x) {
+                        return x !== undefined && x !== null;
+                    });
+
+                    var unsetup = [];
+                    ctx.serversToUpdate.forEach(function (s) {
+                        if (!s.setup) {
+                            unsetup.push(s.uuid);
+                        }
+                    });
+
+                    if (unsetup.length) {
+                        next(new UpdateError(format(
+                            'The following servers are not setup:\n%s\n' +
+                            'Please make sure to setup these servers ' +
+                            'or remove them from the list of servers to ' +
+                            'update.',
+                            unsetup.join(','))));
+                        return;
+                    }
+                } else {
+                    ctx.serversToUpdate = servers.filter(function (svr) {
+                        return svr.setup;
+                    });
+                }
+
+                var notRunning = [];
+                ctx.serversToUpdate.forEach(function (srv) {
+                    if (srv.status !== 'running' ||
+                        (srv.status === 'running' &&
+                         srv.transitional_status !== '')) {
+                        notRunning.push(srv.uuid);
+                    }
+                });
+                if (notRunning.length) {
+                    next(new UpdateError(format(
+                        'The following servers are not running:\n%s\n' +
+                        'Please make sure of these servers are running ' +
+                        'or remove them from the list of servers to ' +
+                        'update.', notRunning.join(','))));
+                    return;
+                }
+
+                // Silently skip servers where we've already setup cmon-agent:
+                ctx.serversToUpdate = ctx.serversToUpdate.filter(function (s) {
+                    return !s.agents.some(function (a) {
+                        return (a.name === 'cmon-agent');
+                    });
+                });
+
+                next();
+            });
+        },
+
+        function updateAgentOnServers(ctx, next) {
+            if (!ctx.serversToUpdate.length) {
+                self.progress(
+                        '"cmon-agent" is already installed on all servers.');
+                next();
+                return;
+            }
+
+            if (process.stderr.isTTY) {
+                bar = new ProgressBar({
+                    size: ctx.serversToUpdate.length,
+                    bytes: false,
+                    filename: 'Installing cmon-agent'
+                });
+                bar.advance(0); // Draw initial progbar at 0.
+            }
+
+            ctx.didSomething = true;
+
+            // Check task completion by taskid
+            function waitUntilTaskCompletes(taskid, _cb) {
+                var counter = 0;
+                var limit = 60;
+                function _waitTask() {
+                    counter += 1;
+                    self.sdcadm.cnapi.getTask(taskid, function (err, task) {
+                        if (err) {
+                            _cb(new SDCClientError(err, 'cnapi'));
+                            return;
+                        }
+
+                        if (task.status === 'failure') {
+                            var msg = format('Task %s failed', taskid);
+                            if (task.history[0].event.error) {
+                                msg += ' with error: ' +
+                                    task.history[0].event.error.message;
+                            }
+                            _cb(new UpdateError(msg));
+                        } else if (task.status === 'complete') {
+                            _cb();
+                        } else if (counter < limit) {
+                            setTimeout(_waitTask, 5000);
+                        } else {
+                            var message = format(
+                                'Timeout (5m) waiting for task %s', taskid);
+                            self.progress(message);
+                            _cb(new UpdateError(message));
+                        }
+                    });
+                }
+                _waitTask();
+            }
+
+            function installAgent(server, callback) {
+                self.log.debug({
+                    server: server.uuid
+                }, 'Installing cmon-agent instance');
+
+                self.sdcadm.cnapi.post({
+                    path: format('/servers/%s/install-agent', server.uuid)
+                }, {
+                    image_uuid: ctx.cmonAgentImg.uuid
+                }, function cnapiCb(er2, res) {
+                    if (er2) {
+                        callback(new SDCClientError(er2, 'cnapi'));
+                        return;
+                    }
+
+                    self.log.debug({
+                        svc: 'cmon-agent',
+                        server: server.uuid,
+                        image: ctx.cmonAgentImg.uuid,
+                        taskId: res.id
+                    }, 'Waiting for install_agent task to complete');
+
+                    waitUntilTaskCompletes(res.id, function (er3) {
+                        if (er3) {
+                            errs.push(er3);
+                        }
+                        self.log.debug({
+                            err: er3,
+                            taskId: res.id,
+                            svc: 'cmon-agent',
+                            server: server.uuid
+                        }, 'agent_install task completed');
+                        callback();
+                    });
+                });
+            }
+
+            var queue = vasync.queue(installAgent, opts.concurrency);
+            queue.push(ctx.serversToUpdate, function doneOne() {
+                if (bar) {
+                    completed += 1;
+                    bar.advance(completed);
+                }
+            });
+            queue.close();
+            queue.on('end', function queueDone() {
+                if (bar) {
+                    bar.end();
+                }
+                if (errs.length) {
+                    self.progress(
+                        '"cmon-agent" install failed on %d server%s.',
+                        errs.length, (errs.length > 1 ? 's' : ''));
+                    next(new MultiError(errs));
+                } else {
+                    self.progress(
+                        'Successfully installed "cmon-agent" on all servers.');
+                    next();
+                }
+            });
+        },
+
         function done(ctx, next) {
             if (ctx.didSomething) {
-                self.progress('Setup "cmon" (%ds)',
+                self.progress('Setup "CMON" (%ds)',
                     Math.floor((Date.now() - start) / 1000));
             }
             next();
@@ -263,12 +547,32 @@ do_cmon.options = [
     {
         names: ['channel', 'C'],
         type: 'string',
-        help: 'Update channel in which to look for the cmon image.',
+        help: 'Update channel from which to get the "cmon" and ' +
+            '"cmon-agent" images.',
         helpArg: 'CHANNEL'
+    },
+    {
+        names: ['concurrency', 'j'],
+        type: 'integer',
+        'default': 5,
+        help: 'Number of concurrent servers to which to install cmon-agent' +
+            ' simultaneously. Default: 5',
+        helpArg: 'N'
+    },
+    {
+        names: ['servers', 's'],
+        type: 'arrayOfCommaSepString',
+        help: 'Comma-separate list of servers (hostname or UUID) on which ' +
+            'cmon-agent will be setup. If not specified, then cmon-agent ' +
+            'will be setup on all setup servers.'
     }
 ];
 do_cmon.help = (
-    'Create the "cmon" service and a first instance on the headnode.\n' +
+    'Setup the Container Monitor (CMON) system.\n' +
+    '\n' +
+    'This command will setup the "cmon" and "cmon-agent" services\n' +
+    'and create an initial instance of "cmon" on the headnode and\n' +
+    '"cmon-agent" on the specify (or all setup) servers.\n' +
     '\n' +
     'Usage:\n' +
     '     {{name}} cmon\n' +
diff --git a/man/man1/sdcadm.1.ronn b/man/man1/sdcadm.1.ronn
index 810cdb6..101281e 100644
--- a/man/man1/sdcadm.1.ronn
+++ b/man/man1/sdcadm.1.ronn
@@ -488,14 +488,26 @@ Create the docker service and the docker instance on the headnode.
 
 ### sdcadm post-setup cmon
 
-Create the "cmon" service and a first instance on the headnode.
+Setup the Container Monitor (CMON) system.
+
+This command will setup the "cmon" and "cmon-agent" services
+and create an initial instance of "cmon" on the headnode and
+"cmon-agent" on the specify (or all setup) servers.
 
 `-h, --help`
     Show this help.
 
 `-C CHANNEL, --channel=CHANNEL`
-    Update channel in which to look for the cmon image.
+    Update channel from which to get the "cmon" and "cmon-agent" images.
+
+`-j N, --concurrency=N`
+    Number of concurrent servers to which to install cmon-agent simultaneously.
+    Default: 5.
 
+`-s ARG, --servers=ARG`
+    Comma-separate list of servers (hostname or UUID) on which cmon-agent will
+    be setup. If not specified, then cmon-agent will be setup on all setup
+    servers.
 
 ### sdcadm post-setup dev-headnode-prov
 
@@ -1028,4 +1040,4 @@ Installs a custom TLS certificate to be used by sdc-docker.
 
 ## COPYRIGHT
 
-sdcadm Copyright (c) 2016 Joyent Inc., All rights reserved.
+sdcadm Copyright (c) 2017 Joyent Inc., All rights reserved.
