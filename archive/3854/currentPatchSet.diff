commit a8045972a35d2bbd5b9d8e48458ff5e4eb86d208 (refs/changes/54/3854/4)
Author: Cody Peter Mello <cody.mello@joyent.com>
Date:   2018-04-24T00:08:41+00:00 (1 year, 6 months ago)
    
    TRITON-283 Want ability to run NAPI instances with different bucket prefixes
    Reviewed by: Mike Zeller <mike.zeller@joyent.com>
    Approved by: Mike Zeller <mike.zeller@joyent.com>

diff --git a/lib/apis/moray.js b/lib/apis/moray.js
index 1e09c17..35aa29e 100644
--- a/lib/apis/moray.js
+++ b/lib/apis/moray.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -45,6 +45,10 @@ var TEST_PFX = 'test_';
  * Return a bucket name based on BUCKET_PFX
  */
 function bucketName(name) {
+    if (name.indexOf('napi_ips_') === 0) {
+        return name;
+    }
+
     return BUCKET_PFX + name;
 }
 
@@ -140,16 +144,22 @@ function initBucket(moray, bucket, callback) {
     assert.string(bucket.name, 'bucket.name');
     assert.object(bucket.schema, 'bucket.schema');
 
-    var name = bucketName(bucket.name);
+    var name = bucket.name;
     var schema = clone(bucket.schema);
 
-    // If we have a bucket prefix set, overwrite the name of the original
-    // bucket passed in, so that consumers in its model will use the correct
-    // prefixed name.
-    if (BUCKET_PFX !== '') {
-        moray.log.warn({ oldBucketName: bucket.name, newbucketName: name },
+    /*
+     * If we have a bucket prefix set and this is the first time looking at this
+     * bucket config, then update it to use the prefixed version so that any
+     * consumers in its model will use the correct prefixed name.
+     */
+    if (BUCKET_PFX !== '' && !bucket.name_prefixed) {
+        name = bucketName(bucket.name);
+
+        moray.log.warn({ oldBucketName: bucket.name, newBucketName: name },
             'initBucket: bucket prefix set: overriding name');
+
         bucket.name = name;
+        bucket.name_prefixed = true;
     }
 
     moray.getBucket(name, function (err, prevBucket) {
@@ -318,8 +328,8 @@ function listObjs(opts, callback) {
 /**
  * Set the bucket prefix to point at the test versions of the buckets
  */
-function setTestPrefix() {
-    BUCKET_PFX = TEST_PFX;
+function setTestPrefix(pfx) {
+    BUCKET_PFX = pfx;
 }
 
 
diff --git a/lib/models/index.js b/lib/models/index.js
index d3c684e..4f020b4 100644
--- a/lib/models/index.js
+++ b/lib/models/index.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -52,6 +52,14 @@ function initializeModels(app, callback) {
 
 module.exports = {
     init: initializeModels,
+
+    aggr: mod_aggr,
+    network_pool: mod_network_pool,
+    network: mod_network,
+    nic_tag: mod_nic_tag,
+    nic: mod_nic,
+    vlan: mod_vlan,
+
     models: [
         {
             constructor: mod_network_pool.NetworkPool,
diff --git a/lib/models/ip/common.js b/lib/models/ip/common.js
index 08e8f3a..86acd14 100644
--- a/lib/models/ip/common.js
+++ b/lib/models/ip/common.js
@@ -17,7 +17,6 @@
 var assert = require('assert-plus');
 var clone = require('clone');
 var constants = require('../../util/constants');
-var mod_moray = require('../../apis/moray');
 var util = require('util');
 var util_ip = require('../../util/ip');
 
@@ -271,8 +270,8 @@ function getIPKey(use_strings, ipaddr) {
  * Returns the bucket name for a network
  */
 function bucketName(networkUUID) {
-    return mod_moray.bucketName(util.format('napi_ips_%s',
-        networkUUID.replace(/-/g, '_')));
+    return util.format('napi_ips_%s',
+        networkUUID.replace(/-/g, '_'));
 }
 
 
diff --git a/lib/models/network.js b/lib/models/network.js
index e6777b0..08f7161 100644
--- a/lib/models/network.js
+++ b/lib/models/network.js
@@ -137,7 +137,7 @@ var IMMUTABLE_FABRIC_FIELDS = [
     'owner_uuids'
 ];
 
-var CONTAINING_NET_SQL = 'SELECT uuid FROM ' + BUCKET.name +
+var CONTAINING_NET_SQL = 'SELECT uuid FROM %s' +
     ' WHERE subnet >> $1 AND vlan_id = $2 AND nic_tag = $3';
 
 
@@ -2102,7 +2102,7 @@ function findContainingNetworks(opts, vlan_id, nic_tag, vnet_id, ip, callback) {
     assert.object(ip, 'ip');
     assert.func(callback, 'callback');
 
-    var sql = CONTAINING_NET_SQL;
+    var sql = util.format(CONTAINING_NET_SQL, BUCKET.name);
     var args = [ ip.toString(), vlan_id, nic_tag ];
 
     if (vnet_id !== undefined && vnet_id !== null) {
diff --git a/lib/napi.js b/lib/napi.js
index 61e0b96..ab237ae 100644
--- a/lib/napi.js
+++ b/lib/napi.js
@@ -21,6 +21,7 @@ var EffluentLogger = require('effluent-logger');
 var http = require('http');
 var https = require('https');
 var models = require('./models');
+var mod_apis_moray = require('./apis/moray');
 var mod_config = require('./config');
 var mod_init = require('./init');
 var mod_jsprim = require('jsprim');
@@ -86,6 +87,11 @@ function NAPI(opts) {
         constants.UNDERLAY_TAG = opts.config.overlay.underlayNicTag;
     }
 
+    if (opts.config.bucketPrefix) {
+        mod_apis_moray.setTestPrefix(
+            opts.config.bucketPrefix.replace(/-/g, '_'));
+    }
+
     var maxSockets = opts.config.maxHttpSockets || 100;
     opts.log.debug('Setting maxSockets to %d', maxSockets);
     http.globalAgent.maxSockets = maxSockets;
diff --git a/test/lib/config.js b/test/lib/config.js
index 228929a..eb4a1ec 100644
--- a/test/lib/config.js
+++ b/test/lib/config.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2015, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -64,6 +64,10 @@ if (!jsprim.hasKey(CONFIG.server, 'moray')) {
     };
 }
 
+if (jsprim.hasKey(process.env, 'NAPI_BUCKET_PREFIX')) {
+    CONFIG.server.bucketPrefix = process.env.NAPI_BUCKET_PREFIX;
+}
+
 CONFIG.moray = jsprim.deepCopy(CONFIG.server.moray);
 
 validateConfig(CONFIG.server);
diff --git a/test/lib/moray.js b/test/lib/moray.js
index b64c38d..a2a4e82 100644
--- a/test/lib/moray.js
+++ b/test/lib/moray.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright 2017, Joyent, Inc.
+ * Copyright (c) 2018, Joyent, Inc.
  */
 
 /*
@@ -17,6 +17,7 @@
 var assert = require('assert-plus');
 var mod_ip = require('../../lib/models/ip');
 var mod_mac = require('macaddr');
+var models = require('../../lib/models');
 
 
 // --- Internals
@@ -68,8 +69,10 @@ function getIPs(moray, network, callback) {
  * Gets a NIC record from Moray.
  */
 function getNic(moray, mac, callback) {
-    moray.getObject('napi_nics', mod_mac.parse(mac).toLong().toString(),
-        extractValue(callback));
+    var bucket = models.nic.bucket().name;
+    var key = mod_mac.parse(mac).toLong().toString();
+
+    moray.getObject(bucket, key, extractValue(callback));
 }
 
 
@@ -77,8 +80,9 @@ function getNic(moray, mac, callback) {
  * Counts all NIC records in Moray.
  */
 function countNics(moray, callback) {
+    var bucket = models.nic.bucket().name;
     var count = 0;
-    var res = moray.findObjects('napi_nics', '(mac=*)', { limit: 1 });
+    var res = moray.findObjects(bucket, '(mac=*)', { limit: 1 });
     res.on('error', callback);
     res.on('record', function (r) {
         count = r._count;
diff --git a/test/unit/aggregations.test.js b/test/unit/aggregations.test.js
index e4a49aa..1dbe458 100644
--- a/test/unit/aggregations.test.js
+++ b/test/unit/aggregations.test.js
@@ -25,6 +25,7 @@ var mod_nic = require('../lib/nic');
 var mod_nic_tag = require('../lib/nic-tag');
 var mod_server = require('../lib/server');
 var mod_uuid = require('node-uuid');
+var models = require('../../lib/models');
 var test = require('tape');
 var util = require('util');
 var vasync = require('vasync');
@@ -269,7 +270,7 @@ test('create', function (t) {
                 return t2.end();
             }
 
-            MORAY.getObject('napi_aggregations', exp.id,
+            MORAY.getObject(models.aggr.bucket().name, exp.id,
                 function (err2, morayObj) {
                 t2.ifError(err2, 'Getting aggregation should succeed');
                 t2.ok(morayObj, 'Got Moray object');
diff --git a/test/unit/network-pools.test.js b/test/unit/network-pools.test.js
index 822d917..aa385ea 100644
--- a/test/unit/network-pools.test.js
+++ b/test/unit/network-pools.test.js
@@ -26,6 +26,7 @@ var mod_tag = require('../lib/nic-tag');
 var mod_pool = require('../lib/pool');
 var mod_server = require('../lib/server');
 var mod_uuid = require('node-uuid');
+var models = require('../../lib/models');
 var repeat = require('../../lib/util/common').repeat;
 var test = require('tape');
 var util = require('util');
@@ -722,7 +723,7 @@ test('Update pool: remove owner_uuids', function (t) {
             delete POOLS[1].owner_uuids;
             t2.deepEqual(res, POOLS[1], 'owner_uuids removed');
 
-            MORAY.getObject('napi_network_pools', POOLS[1].uuid,
+            MORAY.getObject(models.network_pool.bucket().name, POOLS[1].uuid,
                 function (err2, morayObj) {
                 t2.ifError(err2, 'Getting pool should succeed');
                 t2.ok(!morayObj.value.hasOwnProperty('owner_uuids'),
@@ -754,7 +755,7 @@ test('Update pool: remove owner_uuids', function (t) {
             POOLS[1].owner_uuids = params.owner_uuids.sort();
             t2.deepEqual(res, POOLS[1], 'owner_uuids added');
 
-            MORAY.getObject('napi_network_pools', POOLS[1].uuid,
+            MORAY.getObject(models.network_pool.bucket().name, POOLS[1].uuid,
                 function (err2, morayObj) {
                 t2.ifError(err2, 'Getting pool should succeed');
                 t2.ok(morayObj, 'got moray object');
diff --git a/test/unit/networks.test.js b/test/unit/networks.test.js
index 4ab3fce..fe98b73 100644
--- a/test/unit/networks.test.js
+++ b/test/unit/networks.test.js
@@ -28,6 +28,7 @@ var mod_nic = require('../lib/nic');
 var mod_server = require('../lib/server');
 var mod_test_err = require('../lib/err');
 var mod_uuid = require('node-uuid');
+var models = require('../../lib/models');
 var test = require('tape');
 var util = require('util');
 var vasync = require('vasync');
@@ -1512,7 +1513,8 @@ test('Update network - unset owner_uuids', function (t) {
 
     t.test('moray state after create', function (t2) {
         exp = networks[0];
-        MORAY.getObject('napi_networks', exp.uuid, function (err, obj) {
+        MORAY.getObject(models.network.bucket().name, exp.uuid,
+            function (err, obj) {
             t2.ifError(err, 'Getting network shouldn\'t fail');
             t2.ok(obj, 'Have Moray obj');
 
@@ -1563,7 +1565,8 @@ test('Update network - unset owner_uuids', function (t) {
 
     t.test('moray state after update', function (t2) {
         exp = networks[0];
-        MORAY.getObject('napi_networks', exp.uuid, function (err, obj) {
+        MORAY.getObject(models.network.bucket().name, exp.uuid,
+            function (err, obj) {
             t2.ifError(err, 'Getting network shouldn\'t fail');
             t2.ok(obj, 'Have Moray obj');
 
@@ -1618,7 +1621,8 @@ test('Update network - unset owner_uuids', function (t) {
 
     t.test('moray state after empty array create', function (t2) {
         exp = networks[1];
-        MORAY.getObject('napi_networks', exp.uuid, function (err, obj) {
+        MORAY.getObject(models.network.bucket().name, exp.uuid,
+            function (err, obj) {
             t2.ifError(err, 'Getting network shouldn\'t fail');
             t2.ok(obj, 'Have Moray obj');
 
@@ -1655,7 +1659,8 @@ test('Update network - unset owner_uuids', function (t) {
 
     t.test('NAPI-186: owner_uuids=",," should be okay', function (t2) {
         // The string ',,' should be okay to return from Moray.
-        MORAY.getObject('napi_networks', exp.uuid, function (gErr, res) {
+        MORAY.getObject(models.network.bucket().name, exp.uuid,
+            function (gErr, res) {
             if (h.ifErr(t2, gErr, 'getObject() error')) {
                 t2.end();
                 return;
@@ -1664,7 +1669,7 @@ test('Update network - unset owner_uuids', function (t) {
             delete res.value.owner_uuids_arr;
             res.value.owner_uuids = ',,';
 
-            MORAY.putObject('napi_networks', exp.uuid, res.value,
+            MORAY.putObject(models.network.bucket().name, exp.uuid, res.value,
                 function (pErr) {
                 t2.ifError(pErr, 'Putting new network object should succeed');
 
@@ -1690,7 +1695,8 @@ test('Update network - unset owner_uuids', function (t) {
 
     t.test('owner_uuids_arr=[] should be okay', function (t2) {
         // An empty array should be okay to return from Moray.
-        MORAY.getObject('napi_networks', exp.uuid, function (gErr, res) {
+        MORAY.getObject(models.network.bucket().name, exp.uuid,
+            function (gErr, res) {
             if (h.ifErr(t2, gErr, 'getObject() error')) {
                 t2.end();
                 return;
@@ -1699,7 +1705,7 @@ test('Update network - unset owner_uuids', function (t) {
             res.value.owner_uuids_arr = [];
             exp.owner_uuids = [];
 
-            MORAY.putObject('napi_networks', exp.uuid, res.value,
+            MORAY.putObject(models.network.bucket().name, exp.uuid, res.value,
                 function (pErr) {
                 t2.ifError(pErr, 'Putting new network object should succeed');
 
diff --git a/test/unit/nic-tags.test.js b/test/unit/nic-tags.test.js
index 3e74b9a..87d4075 100644
--- a/test/unit/nic-tags.test.js
+++ b/test/unit/nic-tags.test.js
@@ -19,6 +19,7 @@ var common = require('../lib/common');
 var h = require('./helpers');
 var mod_err = require('../../lib/util/errors');
 var mod_server = require('../lib/server');
+var models = require('../../lib/models');
 var constants = require('../../lib/util/constants');
 var test = require('tape');
 
@@ -84,8 +85,13 @@ test('Create nic tag', function (t) {
         }
 
         t.equal(res.statusCode, 200, 'status code');
-        MORAY.getObject('napi_nic_tags', 'newtagname', function (mErr, added) {
-            t.ifError(mErr, 'Getting NIC tag should succeed');
+        MORAY.getObject(models.nic_tag.bucket().name, 'newtagname',
+            function (mErr, added) {
+            if (h.ifErr(t, mErr, 'Getting NIC tag should succeed')) {
+                t.end();
+                return;
+            }
+
             var expObj = {
                 name: 'newtagname',
                 uuid: added.value.uuid,
@@ -194,7 +200,7 @@ test('Create nic tag - with MTU', function (t) {
         }
 
         t.equal(res.statusCode, 200, 'status code - MTU');
-        MORAY.getObject('napi_nic_tags', 'newtagnamemtu',
+        MORAY.getObject(models.nic_tag.bucket().name, 'newtagnamemtu',
             function (mErr, added) {
             t.ifError(mErr, 'Getting NIC tag should succeed');
             var expObj = {
@@ -286,8 +292,13 @@ test('Create admin nic tag - with default MTU', function (t) {
         }
 
         t.equal(res.statusCode, 200, 'status code');
-        MORAY.getObject('napi_nic_tags', 'admin', function (mErr, added) {
-            t.ifError(mErr, 'Getting NIC tag should succeed');
+        MORAY.getObject(models.nic_tag.bucket().name, 'admin',
+            function (mErr, added) {
+            if (h.ifErr(t, mErr, 'Getting NIC tag should succeed')) {
+                t.end();
+                return;
+            }
+
             var expObj = {
                 name: 'admin',
                 uuid: added.value.uuid,
diff --git a/test/unit/nics.test.js b/test/unit/nics.test.js
index c7ac7e1..720d13d 100644
--- a/test/unit/nics.test.js
+++ b/test/unit/nics.test.js
@@ -29,6 +29,7 @@ var mod_nic = require('../lib/nic');
 var mod_nicTag = require('../lib/nic-tag');
 var mod_server = require('../lib/server');
 var mod_uuid = require('node-uuid');
+var models = require('../../lib/models');
 var test = require('tape');
 var util = require('util');
 var util_ip = require('../../lib/util/ip');
@@ -809,7 +810,7 @@ test('Provision nic: exceed MAC retries', function (t) {
         for (var i = 0; i < constants.MAC_RETRIES + 1; i++) {
             var fakeErr = new Error('Already exists');
             fakeErr.name = 'EtagConflictError';
-            fakeErr.context = { bucket: 'napi_nics' };
+            fakeErr.context = { bucket: models.nic.bucket().name };
             errs.push(fakeErr);
         }
         MORAY.setMockErrors({ batch: errs });
@@ -1057,7 +1058,7 @@ test('Provision nic: MAC retry', function (t) {
 
         var fakeErr = new Error('Already exists');
         fakeErr.name = 'EtagConflictError';
-        fakeErr.context = { bucket: 'napi_nics' };
+        fakeErr.context = { bucket: models.nic.bucket().name };
 
         MORAY.setMockErrors({ batch: [ fakeErr, fakeErr ] });
 
@@ -1120,7 +1121,7 @@ test('Provision nic: MAC retry', function (t) {
 
         var fakeErr = new Error('Already exists');
         fakeErr.name = 'EtagConflictError';
-        fakeErr.context = { bucket: 'napi_nics' };
+        fakeErr.context = { bucket: models.nic.bucket().name };
 
         MORAY.setMockErrors({ batch: [ fakeErr, fakeErr ] });
 
