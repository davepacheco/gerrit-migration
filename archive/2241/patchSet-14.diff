From 9469490d83d01b9a178bc5ea394b87461d8c5d36 Mon Sep 17 00:00:00 2001
From: Kody A Kantor <kody.kantor@gmail.com>
Date: Thu, 10 Aug 2017 17:06:48 +0000
Subject: [PATCH] MANTA-3258 muskie could expose metrics Reviewed by: David
 Pacheco <dap@joyent.com> Reviewed by: Jordan Hendricks
 <jordan.hendricks@joyent.com>

---
 README.md                      | 26 ++++++++++
 docs/internal/design.md        | 45 +++++++++++++++--
 etc/config.coal.json           |  5 +-
 lib/audit.js                   | 32 ++++++++++++
 lib/other.js                   | 21 +++++++-
 lib/server.js                  |  6 ++-
 main.js                        | 56 ++++++++++++++-------
 package.json                   |  2 +
 sapi_manifests/muskie/template |  5 +-
 test/helper.js                 | 45 ++++++++++++++++-
 test/monitoring.test.js        | 91 ++++++++++++++++++++++++++++++++++
 11 files changed, 307 insertions(+), 27 deletions(-)
 create mode 100644 test/monitoring.test.js

diff --git a/README.md b/README.md
index b3914d5..50d8ba6 100644
--- a/README.md
+++ b/README.md
@@ -66,6 +66,13 @@ prerequisites in your development environment:
       the corresponding `MUSKIE_` configuration variables described in step 4
       above.
 
+   c. If you would like, replace the "datacenter", "server\_uuid", and
+      "zone\_uuid" fields with appropriate values from your setup. If these
+      fields are not updated, the metric collection facility will use the
+      defaults provided in the file, which may not represent the real values of
+      your machine. This step is not required.
+
+
 In summary, you should make sure these environment variables are set properly:
 
 | **Environment variable** | **Details** |
@@ -138,6 +145,25 @@ If you're changing anything about the way muskie is deployed, configured, or
 started, you should definitely test creating a muskie image and deploying that
 into your Manta.  This is always a good idea anyway.
 
+## Metrics
+
+Muskie exposes metrics via [node-artedi](https://github.com/joyent/node-artedi).
+See the [design](./docs/internal/design.md) document for more information about
+the metrics that are exposed, and how to access them. For development, it is
+probably easiest to use `curl` to scrape metrics:
+
+```
+$ curl http://localhost:8881/metrics
+```
+
+Notably, some metadata labels are not being collected due to their potential
+for high cardinality.  Specifically, remote IP address, object owner, and caller
+username are not collected.  Metadata labels that have a large number of unique
+values cause memory strain on metric client processes (muskie) as well as
+metric servers (Prometheus).  It's important to understand what kind of an
+effect on the entire system the addition of metrics and metadata labels can have
+before adding them. This is an issue that would likely not appear in a
+development or staging environment.
 
 ## Notes on DNS and service discovery
 
diff --git a/docs/internal/design.md b/docs/internal/design.md
index f00a3ae..41a43ff 100644
--- a/docs/internal/design.md
+++ b/docs/internal/design.md
@@ -5,18 +5,18 @@
 -->
 
 <!--
-    Copyright (c) 2014, Joyent, Inc.
+    Copyright (c) 2017, Joyent, Inc.
 -->
 
 
 # Deployment Architecture
 
-Muskie is implemented as a [restify](https://github.com/mcavage/node-restify)
+Muskie is implemented as a [restify](https://github.com/restify/node-restify)
 service, and is deployed highly redundantly, both with a zone and in many
 zones.  In a typical production deployment, there are 16 muskie processes
 per zone, with an [HAProxy](http://www.haproxy.org/) instance sitting in
 front of them (in TCP mode).  All logging from muskies in a production
-setting is done through [rsyslog](http://www.rsyslog.com/) to
+setting is done through [bunyan](https://github.com/trentm/node-bunyan) to
 `/var/log/muskie.log`.  The HAProxy listens on both 80 and 81, where 80 is
 meant to mean "secure" requests, which either means non-TLS from the "internal"
 network (e.g., marlin) or TLS requests from the world.  81 is used to serve
@@ -43,6 +43,45 @@ periodically refreshes this and *always* selects storage nodes from the local
 cache on writes, as opposed to hitting Moray directly for this purpose.  This is
 purely in-memory so all muskie *processes* have a cached copy.
 
+# Monitoring
+
+There is a second server running in each muskie process to
+facilitate monitoring.  This is accessible at `http_insecure_port + 800`.  For
+example, the first (of 16 in production) muskie process within a zone usually
+runs on port 8081, so the monitoring server would be accesible on port 8881 from
+both the `manta` and `admin` networks.  The monitoring server exposes
+Kang debugging information and Prometheus application metrics.
+
+## Kang
+
+Kang debugging information is accessible from the route `GET /kang/snapshot`.
+For more information on Kang, see the documentation on
+[GitHub](https://github.com/davepacheco/kang/blob/master/README.md).
+
+## Metrics
+
+Application metrics can be retrieved from the route `GET /metrics`.  The metrics
+are returned in [Prometheus](https://prometheus.io/) v0.0.4 text format.
+
+The following metrics are collected:
+
+- Time-to-first-byte latency for all requests
+- End-to-end latency for all requests
+- Count of requests completed
+
+Each of the metrics returned include the following metadata labels:
+
+- Datacenter name (i.e. us-east-1)
+- CN UUID
+- Zone UUID
+- PID
+- Operation (i.e. 'putobject')
+- Method (i.e. 'PUT')
+- HTTP response status code (i.e. 203)
+
+The metric collection facility provided is intended to be consumed by a
+monitoring service like a Prometheus or InfluxDB server.
+
 # Logic
 
 ## PutObject
diff --git a/etc/config.coal.json b/etc/config.coal.json
index 68655c5..dfb8b7d 100644
--- a/etc/config.coal.json
+++ b/etc/config.coal.json
@@ -122,5 +122,8 @@
             "initialDelay": 1000
         },
         "clientTimeout": 120000
-    }
+    },
+    "datacenter": "coal.joyent.us",
+    "server_uuid": "f5c4d446-7639-11e7-8ded-c35deca5b8cc",
+    "zone_uuid": "dbb27e00-7639-11e7-bdd5-53e6dcb96c7f"
 }
diff --git a/lib/audit.js b/lib/audit.js
index d352464..8876d61 100644
--- a/lib/audit.js
+++ b/lib/audit.js
@@ -113,6 +113,25 @@ function billable(name, req) {
 function auditLogger(options) {
     assert.object(options, 'options');
     assert.object(options.log, 'options.log');
+    assert.object(options.collector, 'options.collector');
+
+    // A counter to track the number of HTTP requests serviced.
+    var request_counter = options.collector.counter({
+        name: 'http_requests_completed',
+        help: 'count of Muskie requests completed'
+    });
+
+    // A histogram to track the time to first byte.
+    var latency_histogram = options.collector.histogram({
+        name: 'http_request_latency_ms',
+        help: 'time-to-first-byte of Muskie requests'
+    });
+
+    // A histogram to track the time it took to fully process each HTTP request.
+    var time_histogram = options.collector.histogram({
+        name: 'http_request_time_ms',
+        help: 'total time to process Muskie requests'
+    });
 
     var log = options.log.child({
         audit: true,
@@ -251,6 +270,19 @@ function auditLogger(options) {
                 req._time;
         }
 
+        var labels = {
+            operation: name,
+            method: op || 'unknown',
+            statusCode: res.statusCode
+        };
+
+        request_counter.increment(labels);
+        time_histogram.observe(latency, labels);
+
+        if (obj.latencyToFirstByte) {
+            latency_histogram.observe(obj.latencyToFirstByte, labels);
+        }
+
         log.info(obj, 'handled: %d', res.statusCode);
 
         return (true);
diff --git a/lib/other.js b/lib/other.js
index c53333f..4b20013 100644
--- a/lib/other.js
+++ b/lib/other.js
@@ -5,15 +5,17 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var os = require('os');
 
 var assert = require('assert-plus');
+var artedi = require('artedi');
 var restify = require('restify');
 
 var common = require('./common');
+var errors = require('./errors');
 
 
 
@@ -360,7 +362,6 @@ function preflightRequest(req, res, next) {
 }
 
 
-
 ///--- Exports
 
 module.exports = {
@@ -379,6 +380,22 @@ module.exports = {
             preflightRequest
         ];
 
+        return (chain);
+    },
+    getMetricsHandler: function metricsHandler(collector) {
+        var chain = [
+            function getMetrics(req, res, next) {
+                collector.collect(artedi.FMT_PROM, function (err, metrics) {
+                    if (err) {
+                        next(new errors.InternalError(err));
+                        return;
+                    }
+                    res.setHeader('Content-Type', 'text/plain; version=0.0.4');
+                    res.send(metrics);
+                });
+                next();
+            }
+        ];
         return (chain);
     }
 };
diff --git a/lib/server.js b/lib/server.js
index e2056e4..a1e58a6 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -100,6 +100,7 @@ function formatJSON(req, res, body) {
 function createServer(options, clearProxy) {
     assert.object(options, 'options');
     assert.object(options.log, 'options.log');
+    assert.object(options.collector, 'options.collector');
 
     options.formatters = {
         'application/json': formatJSON,
@@ -414,6 +415,7 @@ function createServer(options, clearProxy) {
     });
 
     var _audit = audit.auditLogger({
+        collector: options.collector,
         log: log
     });
 
@@ -666,5 +668,7 @@ module.exports = {
 
     picker: picker,
 
-    startKangServer: other.startKangServer
+    startKangServer: other.startKangServer,
+
+    getMetricsHandler: other.getMetricsHandler
 };
diff --git a/main.js b/main.js
index e23fb92..ca21d71 100644
--- a/main.js
+++ b/main.js
@@ -14,6 +14,7 @@ var os = require('os');
 var path = require('path');
 
 var apertureConfig = require('aperture-config').config;
+var artedi = require('artedi');
 var assert = require('assert-plus');
 var bsyslog = require('bunyan-syslog');
 var bunyan = require('bunyan');
@@ -120,6 +121,15 @@ function configure() {
         });
     }
 
+    cfg.collector = artedi.createCollector({
+        labels: {
+            datacenter: cfg.datacenter,
+            server: cfg.server_uuid,
+            zonename: cfg.zone_uuid,
+            pid: process.pid
+        }
+    });
+
     if (LOG.level() <= bunyan.DEBUG)
         LOG = LOG.child({src: true});
 
@@ -206,6 +216,33 @@ function usage(parser, message)
     process.exit(2);
 }
 
+function createMonitoringServer(cfg) {
+    /*
+     * Set up the monitoring server. This exposes a cueball kang monitoring
+     * listener and an artedi-based metric collector.
+     *
+     * The cueball monitoring listener serves information about the cueball
+     * Pools and Sets for connections to mahi, sharks, other services, and also
+     * the moray client connections.
+     *
+     * The artedi-based metric collector is used to track various muskie
+     * metrics including operation latency, and request counts.
+     */
+    var kangOpts;
+    var monitorServer;
+    var port;
+    kangOpts = cueball.poolMonitor.toKangOptions();
+    port = cfg.port + 800;
+
+    monitorServer = restify.createServer({ serverName: 'Monitor' });
+    monitorServer.get('/metrics', app.getMetricsHandler(cfg.collector));
+    monitorServer.get(new RegExp('.*'), kang.knRestifyHandler(kangOpts));
+
+    monitorServer.listen(port, '0.0.0.0', function () {
+        LOG.info('monitoring server started on port %d', port);
+    });
+}
+
 function createCueballHttpAgent(cfg) {
     var sharkCfg = cfg.sharkConfig;
 
@@ -247,24 +284,6 @@ function createCueballHttpAgent(cfg) {
         }
     };
     SHARKAGENT = new cueball.HttpAgent(sharkCueball);
-
-    /*
-     * Set up the cueball kang monitoring listener. This serves information
-     * about all the cueball Pools and Sets in the entire process. This includes
-     * those managed by the Agents we create here, but also the Moray client
-     * Sets.
-     */
-    var kangOpts = cueball.poolMonitor.toKangOptions();
-    kangOpts.port = cfg.port + 800;
-    /*
-     * Note that we can't use kang.knStartServer here, as kang's restify
-     * version does not match ours and the two will clobber each other.
-     */
-    var kangServer = restify.createServer({ serverName: 'Kang' });
-    kangServer.get(new RegExp('.*'), kang.knRestifyHandler(kangOpts));
-    kangServer.listen(kangOpts.port, '0.0.0.0', function () {
-        LOG.info('cueball kang monitor started on port %d', kangOpts.port);
-    });
 }
 
 function createPickerClient(cfg) {
@@ -433,6 +452,7 @@ function version() {
     var cfg = configure();
 
     createCueballHttpAgent(cfg);
+    createMonitoringServer(cfg);
     createMarlinClient(cfg.marlin);
     createPickerClient(cfg.storage);
     createAuthCacheClient(cfg.auth);
diff --git a/package.json b/package.json
index 4c9e8a7..85b1ff9 100644
--- a/package.json
+++ b/package.json
@@ -10,6 +10,7 @@
     },
     "dependencies": {
         "aperture-config": "git+https://github.com/joyent/aperture-config.git#master",
+        "artedi": "1.0.0",
         "assert-plus": "0.1.5",
         "backoff": "2.3.0",
         "bunyan": "0.22.1",
@@ -40,6 +41,7 @@
     },
     "devDependencies": {
         "smartdc": "7.3.1",
+        "strsplit": "1.0.0",
         "manta": "4.3.0",
         "nodeunit": "0.9.1",
         "node-uuid": "1.4.1"
diff --git a/sapi_manifests/muskie/template b/sapi_manifests/muskie/template
index 6031b75..730ee92 100644
--- a/sapi_manifests/muskie/template
+++ b/sapi_manifests/muskie/template
@@ -200,6 +200,9 @@
           "initialDelay": 1000
       },
       "clientTimeout": 120000
-  }
+  },
+  "datacenter": "{{DATACENTER}}",
+  "server_uuid": "{{auto.SERVER_UUID}}",
+  "zone_uuid": "{{auto.ZONENAME}}"
 
 }
diff --git a/test/helper.js b/test/helper.js
index 1a5f8a9..7f67563 100644
--- a/test/helper.js
+++ b/test/helper.js
@@ -5,7 +5,7 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var domain = require('domain');
@@ -20,6 +20,7 @@ var manta = require('manta');
 var once = require('once');
 var restify = require('restify');
 var smartdc = require('smartdc');
+var VError = require('verror').VError;
 
 
 
@@ -28,6 +29,13 @@ var smartdc = require('smartdc');
 http.globalAgent.maxSockets = 50;
 https.globalAgent.maxSockets = 50;
 
+// Check the environment variables before we do anything else.
+var envErr = checkEnvironment();
+if (envErr) {
+    console.error('Environment error: ' + envErr.message);
+    process.exit(1);
+}
+
 var TOKEN_CFG = {
     salt: process.env.MUSKIE_SALT,
     key: process.env.MUSKIE_KEY,
@@ -39,6 +47,7 @@ var POSEIDON_ID = process.env.MUSKIE_POSEIDON_ID ||
         '930896af-bf8c-48d4-885c-6573a94b1853';
 
 
+
 ///--- Helpers
 
 function createLogger(name, stream) {
@@ -244,6 +253,39 @@ function signUrl(opts, expires, cb) {
     }, cb);
 }
 
+/*
+ * Loop through the required environment variables to make sure they are all
+ * set. If one or more are not set, the names of the variables are combined
+ * into an array and an error is returned.
+ */
+function checkEnvironment() {
+    var environment = {
+        'MANTA_URL': process.env.MANTA_URL,
+        'MANTA_USER': process.env.MANTA_USER,
+        'MANTA_KEY_ID': process.env.MANTA_KEY_ID,
+        'MANTA_TLS_INSECURE': process.env.MANTA_TLS_INSECURE,
+        'SDC_URL': process.env.SDC_URL,
+        'SDC_ACCOUNT': process.env.SDC_ACCOUNT,
+        'SDC_KEY_ID': process.env.SDC_KEY_ID,
+        'SDC_TESTING': process.env.SDC_TESTING,
+        'MUSKIE_IV': process.env.MUSKIE_IV,
+        'MUSKIE_KEY': process.env.MUSKIE_KEY,
+        'MUSKIE_SALT': process.env.MUSKIE_SALT
+    };
+
+    var unset = [];
+    Object.keys(environment).forEach(function (key)  {
+        if (typeof (environment[key]) !== 'string') {
+            unset.push(key);
+        }
+    });
+    if (unset.length > 0) {
+        var errString = unset.join(', ');
+        return (new VError('Environment variables ' + errString +
+            ' must be set'));
+    }
+}
+
 
 
 ///--- Exports
@@ -285,6 +327,7 @@ module.exports = {
             });
 
             d.run(function () {
+
                 setup.call(self, function (err) {
                     if (err) {
                         console.error('before:\n' + err.stack);
diff --git a/test/monitoring.test.js b/test/monitoring.test.js
new file mode 100644
index 0000000..fa36ec3
--- /dev/null
+++ b/test/monitoring.test.js
@@ -0,0 +1,91 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright (c) 2017, Joyent, Inc.
+ */
+
+if (require.cache[__dirname + '/helper.js'])
+    delete require.cache[__dirname + '/helper.js'];
+var helper = require('./helper.js');
+
+var restify = require('restify');
+var url = require('url');
+var jsprim = require('jsprim');
+
+var before = helper.before;
+var test = helper.test;
+
+///--- Tests
+
+before(function (cb) {
+    this.kangPath = '/kang/snapshot';
+    this.metricsPath = '/metrics';
+
+    /*
+     * Since the monitoring server runs on a separate port (http_port + 800),
+     * we need to do some slicing and dicing of the user-provided MANTA_URL.
+     *
+     * Note: This requires that the user follows the README and set MANTA_URL
+     * to point to a running Muskie instance. This will fail if MANTA_URL
+     * points to a loadbalancer, or doesn't include a port number.
+     */
+
+    var parsed_url = url.parse(process.env.MANTA_URL);
+    if (typeof (parsed_url.port) !== 'string') {
+        cb(new Error('MANTA_URL must include a valid port number'));
+        return;
+    }
+
+    // Take the :port section of the URL and add 800.
+    var port = jsprim.parseInteger(parsed_url.port);
+    if (typeof (port) !== 'number') {
+        // parseInteger() returned an error, not a number.
+        cb(new Error('error parsing MANTA_URL port: ' +  port.message));
+        return;
+    }
+    port += 800;
+
+    parsed_url.port = port;
+    parsed_url.host = null;
+
+    // Construct a new url string.
+    this.monitor_url = url.format(parsed_url);
+
+    cb();
+});
+
+test('kang handler running', function (t) {
+    var client = restify.createJsonClient({
+        connectTimeout: 250,
+        rejectUnauthorized: false,
+        retry: false,
+        url: this.monitor_url
+    });
+    client.get(this.kangPath, function (err, req, res, obj) {
+        t.ifError(err);
+        t.ok(res);
+        t.equal(res.statusCode, 200);
+        t.ok(obj);
+        t.end();
+    });
+});
+
+test('metric handler running', function (t) {
+    var client = restify.createStringClient({
+        connectTimeout: 250,
+        rejectUnauthorized: false,
+        retry: false,
+        url: this.monitor_url
+    });
+    client.get(this.metricsPath, function (err, req, res, data) {
+        t.ifError(err);
+        t.ok(res);
+        t.equal(res.statusCode, 200);
+        t.ok(data);
+        t.end();
+    });
+});
-- 
2.21.0

