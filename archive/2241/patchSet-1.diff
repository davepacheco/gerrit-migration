From 9e7efce83d098dba8a78a80f6b7b6d361ad7d3cc Mon Sep 17 00:00:00 2001
From: Kody A Kantor <kody.kantor@gmail.com>
Date: Thu, 20 Jul 2017 17:45:14 +0000
Subject: [PATCH] MANTA-3258 muskie could expose metrics

---
 lib/audit.js                   | 36 ++++++++++++++++++++++++++++++++++
 lib/other.js                   | 23 ++++++++++++++++++++--
 lib/server.js                  |  7 ++++++-
 main.js                        | 30 ++++++++++++++++++++--------
 package.json                   |  1 +
 sapi_manifests/muskie/template |  5 ++++-
 6 files changed, 90 insertions(+), 12 deletions(-)

diff --git a/lib/audit.js b/lib/audit.js
index d352464..d04209f 100644
--- a/lib/audit.js
+++ b/lib/audit.js
@@ -113,6 +113,25 @@ function billable(name, req) {
 function auditLogger(options) {
     assert.object(options, 'options');
     assert.object(options.log, 'options.log');
+    assert.object(options.collector, 'options.collector');
+
+    // A counter to track the number of HTTP requests serviced.
+    var request_counter = options.collector.counter({
+        name: 'http_requests_completed',
+        help: 'count of Muskie requests completed'
+    });
+
+    // A histogram to track the time to first byte.
+    var latency_histogram = options.collector.histogram({
+        name: 'http_request_latency',
+        help: 'time-to-first-byte of Muskie requests'
+    });
+
+    // A histogram to track the time it took to fully process each HTTP request.
+    var time_histogram = options.collector.histogram({
+        name: 'http_request_time',
+        help: 'total time to process Muskie requests'
+    });
 
     var log = options.log.child({
         audit: true,
@@ -253,6 +272,23 @@ function auditLogger(options) {
 
         log.info(obj, 'handled: %d', res.statusCode);
 
+        request_counter.increment({
+            method: name,
+            code: res.statusCode
+        });
+
+        time_histogram.observe(latency, {
+            method: name,
+            code: res.statusCode
+        });
+
+        if (obj.latencyToFirstByte) {
+            latency_histogram.observe(obj.latencyToFirstByte, {
+                method: name,
+                code: res.statusCode
+            });
+        }
+
         return (true);
     }
 
diff --git a/lib/other.js b/lib/other.js
index c53333f..b2eedb3 100644
--- a/lib/other.js
+++ b/lib/other.js
@@ -5,15 +5,17 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var os = require('os');
 
 var assert = require('assert-plus');
+var artedi = require('artedi');
 var restify = require('restify');
 
 var common = require('./common');
+var errors = require('./errors');
 
 
 
@@ -359,6 +361,22 @@ function preflightRequest(req, res, next) {
     next();
 }
 
+function getMetricsHandler(collector) {
+    var chain = [
+        function _getMetrics(req, res, next) {
+            collector.collect(artedi.FMT_PROM, function (err, metrics) {
+                if (err) {
+                    next(new errors.InternalError(err));
+                    return;
+                }
+                res.setHeader('Content-Type', 'text/plain; version=0.0.4');
+                res.send(metrics);
+            });
+            next();
+        }
+    ];
+    return (chain);
+}
 
 
 ///--- Exports
@@ -380,5 +398,6 @@ module.exports = {
         ];
 
         return (chain);
-    }
+    },
+    getMetricsHandler: getMetricsHandler
 };
diff --git a/lib/server.js b/lib/server.js
index e2056e4..4fc3691 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -13,6 +13,7 @@ var fs = require('fs');
 var path = require('path');
 var url = require('url');
 
+var artedi = require('artedi');
 var assert = require('assert-plus');
 var bunyan = require('bunyan');
 var mime = require('mime');
@@ -100,6 +101,7 @@ function formatJSON(req, res, body) {
 function createServer(options, clearProxy) {
     assert.object(options, 'options');
     assert.object(options.log, 'options.log');
+    assert.object(options.collector, 'options.collector');
 
     options.formatters = {
         'application/json': formatJSON,
@@ -414,6 +416,7 @@ function createServer(options, clearProxy) {
     });
 
     var _audit = audit.auditLogger({
+        collector: options.collector,
         log: log
     });
 
@@ -658,6 +661,7 @@ function addMultipartUploadDataPlaneRoutes(server) {
     }, forbiddenHandler);
 }
 
+
 ///--- Exports
 
 module.exports = {
@@ -666,5 +670,6 @@ module.exports = {
 
     picker: picker,
 
-    startKangServer: other.startKangServer
+    startKangServer: other.startKangServer,
+    getMetricsHandler: other.getMetricsHandler
 };
diff --git a/main.js b/main.js
index e23fb92..7f4588b 100644
--- a/main.js
+++ b/main.js
@@ -14,6 +14,7 @@ var os = require('os');
 var path = require('path');
 
 var apertureConfig = require('aperture-config').config;
+var artedi = require('artedi');
 var assert = require('assert-plus');
 var bsyslog = require('bunyan-syslog');
 var bunyan = require('bunyan');
@@ -120,6 +121,14 @@ function configure() {
         });
     }
 
+    cfg.collector = artedi.createCollector({
+        labels: {
+            datacenter: cfg.datacenter,
+            server: cfg.server_uuid,
+            zonename: cfg.zone_uuid
+        }
+    });
+
     if (LOG.level() <= bunyan.DEBUG)
         LOG = LOG.child({src: true});
 
@@ -206,7 +215,7 @@ function usage(parser, message)
     process.exit(2);
 }
 
-function createCueballHttpAgent(cfg) {
+function createHttpAgent(cfg) {
     var sharkCfg = cfg.sharkConfig;
 
     /* Used for connections to mahi and other services. */
@@ -254,16 +263,21 @@ function createCueballHttpAgent(cfg) {
      * those managed by the Agents we create here, but also the Moray client
      * Sets.
      */
-    var kangOpts = cueball.poolMonitor.toKangOptions();
-    kangOpts.port = cfg.port + 800;
+    var monitorOpts = cueball.poolMonitor.toKangOptions();
+    monitorOpts.port = cfg.port + 800;
     /*
      * Note that we can't use kang.knStartServer here, as kang's restify
      * version does not match ours and the two will clobber each other.
+     *
+     * The kang server will also be the point from which monitoring systems
+     * may scrape metrics.
      */
-    var kangServer = restify.createServer({ serverName: 'Kang' });
-    kangServer.get(new RegExp('.*'), kang.knRestifyHandler(kangOpts));
-    kangServer.listen(kangOpts.port, '0.0.0.0', function () {
-        LOG.info('cueball kang monitor started on port %d', kangOpts.port);
+    var monitorServer = restify.createServer({ serverName: 'Monitor' });
+    monitorServer.get('/metrics', app.getMetricsHandler(cfg.collector));
+    monitorServer.get(new RegExp('.*'), kang.knRestifyHandler(monitorOpts));
+
+    monitorServer.listen(monitorOpts.port, '0.0.0.0', function () {
+        LOG.info('monitor server started on port %d', monitorOpts.port);
     });
 }
 
@@ -432,7 +446,7 @@ function version() {
 (function main() {
     var cfg = configure();
 
-    createCueballHttpAgent(cfg);
+    createHttpAgent(cfg);
     createMarlinClient(cfg.marlin);
     createPickerClient(cfg.storage);
     createAuthCacheClient(cfg.auth);
diff --git a/package.json b/package.json
index 160f8d8..ba248ee 100644
--- a/package.json
+++ b/package.json
@@ -10,6 +10,7 @@
     },
     "dependencies": {
         "aperture-config": "git+https://github.com/joyent/aperture-config.git#master",
+        "artedi": "1.0.0",
         "assert-plus": "0.1.5",
         "backoff": "2.3.0",
         "bunyan": "0.22.1",
diff --git a/sapi_manifests/muskie/template b/sapi_manifests/muskie/template
index 6031b75..730ee92 100644
--- a/sapi_manifests/muskie/template
+++ b/sapi_manifests/muskie/template
@@ -200,6 +200,9 @@
           "initialDelay": 1000
       },
       "clientTimeout": 120000
-  }
+  },
+  "datacenter": "{{DATACENTER}}",
+  "server_uuid": "{{auto.SERVER_UUID}}",
+  "zone_uuid": "{{auto.ZONENAME}}"
 
 }
-- 
2.21.0

