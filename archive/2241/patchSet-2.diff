commit 0529f529a97413619d8f1d2a3c37e854d00a93f9 (refs/changes/41/2241/2)
Author: Kody A Kantor <kody.kantor@gmail.com>
Date:   2017-07-27T19:37:53+00:00 (2 years, 2 months ago)
    
    MANTA-3258 muskie could expose metrics

diff --git a/lib/audit.js b/lib/audit.js
index d352464..8876d61 100644
--- a/lib/audit.js
+++ b/lib/audit.js
@@ -113,6 +113,25 @@ function billable(name, req) {
 function auditLogger(options) {
     assert.object(options, 'options');
     assert.object(options.log, 'options.log');
+    assert.object(options.collector, 'options.collector');
+
+    // A counter to track the number of HTTP requests serviced.
+    var request_counter = options.collector.counter({
+        name: 'http_requests_completed',
+        help: 'count of Muskie requests completed'
+    });
+
+    // A histogram to track the time to first byte.
+    var latency_histogram = options.collector.histogram({
+        name: 'http_request_latency_ms',
+        help: 'time-to-first-byte of Muskie requests'
+    });
+
+    // A histogram to track the time it took to fully process each HTTP request.
+    var time_histogram = options.collector.histogram({
+        name: 'http_request_time_ms',
+        help: 'total time to process Muskie requests'
+    });
 
     var log = options.log.child({
         audit: true,
@@ -251,6 +270,19 @@ function auditLogger(options) {
                 req._time;
         }
 
+        var labels = {
+            operation: name,
+            method: op || 'unknown',
+            statusCode: res.statusCode
+        };
+
+        request_counter.increment(labels);
+        time_histogram.observe(latency, labels);
+
+        if (obj.latencyToFirstByte) {
+            latency_histogram.observe(obj.latencyToFirstByte, labels);
+        }
+
         log.info(obj, 'handled: %d', res.statusCode);
 
         return (true);
diff --git a/lib/other.js b/lib/other.js
index c53333f..b2eedb3 100644
--- a/lib/other.js
+++ b/lib/other.js
@@ -5,15 +5,17 @@
  */
 
 /*
- * Copyright (c) 2014, Joyent, Inc.
+ * Copyright (c) 2017, Joyent, Inc.
  */
 
 var os = require('os');
 
 var assert = require('assert-plus');
+var artedi = require('artedi');
 var restify = require('restify');
 
 var common = require('./common');
+var errors = require('./errors');
 
 
 
@@ -359,6 +361,22 @@ function preflightRequest(req, res, next) {
     next();
 }
 
+function getMetricsHandler(collector) {
+    var chain = [
+        function _getMetrics(req, res, next) {
+            collector.collect(artedi.FMT_PROM, function (err, metrics) {
+                if (err) {
+                    next(new errors.InternalError(err));
+                    return;
+                }
+                res.setHeader('Content-Type', 'text/plain; version=0.0.4');
+                res.send(metrics);
+            });
+            next();
+        }
+    ];
+    return (chain);
+}
 
 
 ///--- Exports
@@ -380,5 +398,6 @@ module.exports = {
         ];
 
         return (chain);
-    }
+    },
+    getMetricsHandler: getMetricsHandler
 };
diff --git a/lib/server.js b/lib/server.js
index e2056e4..b39e462 100644
--- a/lib/server.js
+++ b/lib/server.js
@@ -100,6 +100,7 @@ function formatJSON(req, res, body) {
 function createServer(options, clearProxy) {
     assert.object(options, 'options');
     assert.object(options.log, 'options.log');
+    assert.object(options.collector, 'options.collector');
 
     options.formatters = {
         'application/json': formatJSON,
@@ -414,6 +415,7 @@ function createServer(options, clearProxy) {
     });
 
     var _audit = audit.auditLogger({
+        collector: options.collector,
         log: log
     });
 
@@ -666,5 +668,6 @@ module.exports = {
 
     picker: picker,
 
-    startKangServer: other.startKangServer
+    startKangServer: other.startKangServer,
+    getMetricsHandler: other.getMetricsHandler
 };
diff --git a/main.js b/main.js
index e23fb92..ca21d71 100644
--- a/main.js
+++ b/main.js
@@ -14,6 +14,7 @@ var os = require('os');
 var path = require('path');
 
 var apertureConfig = require('aperture-config').config;
+var artedi = require('artedi');
 var assert = require('assert-plus');
 var bsyslog = require('bunyan-syslog');
 var bunyan = require('bunyan');
@@ -120,6 +121,15 @@ function configure() {
         });
     }
 
+    cfg.collector = artedi.createCollector({
+        labels: {
+            datacenter: cfg.datacenter,
+            server: cfg.server_uuid,
+            zonename: cfg.zone_uuid,
+            pid: process.pid
+        }
+    });
+
     if (LOG.level() <= bunyan.DEBUG)
         LOG = LOG.child({src: true});
 
@@ -206,6 +216,33 @@ function usage(parser, message)
     process.exit(2);
 }
 
+function createMonitoringServer(cfg) {
+    /*
+     * Set up the monitoring server. This exposes a cueball kang monitoring
+     * listener and an artedi-based metric collector.
+     *
+     * The cueball monitoring listener serves information about the cueball
+     * Pools and Sets for connections to mahi, sharks, other services, and also
+     * the moray client connections.
+     *
+     * The artedi-based metric collector is used to track various muskie
+     * metrics including operation latency, and request counts.
+     */
+    var kangOpts;
+    var monitorServer;
+    var port;
+    kangOpts = cueball.poolMonitor.toKangOptions();
+    port = cfg.port + 800;
+
+    monitorServer = restify.createServer({ serverName: 'Monitor' });
+    monitorServer.get('/metrics', app.getMetricsHandler(cfg.collector));
+    monitorServer.get(new RegExp('.*'), kang.knRestifyHandler(kangOpts));
+
+    monitorServer.listen(port, '0.0.0.0', function () {
+        LOG.info('monitoring server started on port %d', port);
+    });
+}
+
 function createCueballHttpAgent(cfg) {
     var sharkCfg = cfg.sharkConfig;
 
@@ -247,24 +284,6 @@ function createCueballHttpAgent(cfg) {
         }
     };
     SHARKAGENT = new cueball.HttpAgent(sharkCueball);
-
-    /*
-     * Set up the cueball kang monitoring listener. This serves information
-     * about all the cueball Pools and Sets in the entire process. This includes
-     * those managed by the Agents we create here, but also the Moray client
-     * Sets.
-     */
-    var kangOpts = cueball.poolMonitor.toKangOptions();
-    kangOpts.port = cfg.port + 800;
-    /*
-     * Note that we can't use kang.knStartServer here, as kang's restify
-     * version does not match ours and the two will clobber each other.
-     */
-    var kangServer = restify.createServer({ serverName: 'Kang' });
-    kangServer.get(new RegExp('.*'), kang.knRestifyHandler(kangOpts));
-    kangServer.listen(kangOpts.port, '0.0.0.0', function () {
-        LOG.info('cueball kang monitor started on port %d', kangOpts.port);
-    });
 }
 
 function createPickerClient(cfg) {
@@ -433,6 +452,7 @@ function version() {
     var cfg = configure();
 
     createCueballHttpAgent(cfg);
+    createMonitoringServer(cfg);
     createMarlinClient(cfg.marlin);
     createPickerClient(cfg.storage);
     createAuthCacheClient(cfg.auth);
diff --git a/package.json b/package.json
index 160f8d8..ba248ee 100644
--- a/package.json
+++ b/package.json
@@ -10,6 +10,7 @@
     },
     "dependencies": {
         "aperture-config": "git+https://github.com/joyent/aperture-config.git#master",
+        "artedi": "1.0.0",
         "assert-plus": "0.1.5",
         "backoff": "2.3.0",
         "bunyan": "0.22.1",
diff --git a/sapi_manifests/muskie/template b/sapi_manifests/muskie/template
index 6031b75..730ee92 100644
--- a/sapi_manifests/muskie/template
+++ b/sapi_manifests/muskie/template
@@ -200,6 +200,9 @@
           "initialDelay": 1000
       },
       "clientTimeout": 120000
-  }
+  },
+  "datacenter": "{{DATACENTER}}",
+  "server_uuid": "{{auto.SERVER_UUID}}",
+  "zone_uuid": "{{auto.ZONENAME}}"
 
 }
