From 7c4c33d4e6f86c7d29717f98a8565343ecb33378 Mon Sep 17 00:00:00 2001
From: Trent Mick <trentm@gmail.com>
Date: Mon, 5 Dec 2016 15:15:17 -0800
Subject: [PATCH] DOCKER-932 docker sometimes returns success without
 completing pull DOCKER-980 "docker pull ..." auth error should yield a "image
 $name not found" error message

---
 lib/backends/sdc/images.js        | 106 +++++++++++++++++-------------
 package.json                      |   4 +-
 test/integration/cli-pull.test.js | 102 +++++++++++++++++-----------
 3 files changed, 124 insertions(+), 88 deletions(-)

diff --git a/lib/backends/sdc/images.js b/lib/backends/sdc/images.js
index b092a66..60cb190 100644
--- a/lib/backends/sdc/images.js
+++ b/lib/backends/sdc/images.js
@@ -1383,8 +1383,8 @@ function pullImage(opts, callback) {
     /*
      * Handle a pull error. This is a chunked transfer so we can't return
      * a restify error because headers have already been sent when the
-     * downloads have started. Therefore we pass the error back as a
-     * regular `{payload: <status message>}`.
+     * downloads have started. "docker/pkg/jsonmessage/jsonmessage.go" defines
+     * an error message format.
      *
      * In general we can't assume much about the `err` object, e.g. if it
      * is an early failure. However, we try to gracefully handle some
@@ -1410,42 +1410,55 @@ function pullImage(opts, callback) {
         opts.req.log.info({err: err, imgName: imgName,
             jobUuid: job && job.uuid}, 'imageCreate job error');
 
-        var payload;
+        var errmsg;
         if (err.code === 'ENOTFOUND') {
+            /* BEGIN JSSTYLED */
             /*
-             * `docker pull nope.example.com/nope` yields:
-             *      { [Error: getaddrinfo ENOTFOUND] code: 'ENOTFOUND' }
+             * Docker-docker:
+             *  $ docker pull nope.example.com/nope
+             *  Using default tag: latest
+             *  Error response from daemon: Get https://nope.example.com/v1/_ping: dial tcp: lookup nope.example.com on 192.168.65.1:53: no such host
+             *
+             * Triton-docker:
+             *  $ docker --tls pull nope.example.com/nope
+             *  Using default tag: latest
+             *  Pulling repository nope.example.com/nope
+             *  Error pulling image: (ENOTFOUND) nope.example.com host not found
+             *
+             * err={ [Error: getaddrinfo ENOTFOUND] code: 'ENOTFOUND' }
              */
-            payload = {
-                status: format('Error pulling image: (%s) %s host not found',
-                    err.code, opts.rat.index.name)
-            };
-        } else if (err.code === 'UnauthorizedError'
-                || err.code === 'Unauthorized') {
-            payload = {
-                status: format('Unauthorized error from registry %s trying to '
-                    + 'pull %s (%s)', opts.rat.index.name, opts.rat.remoteName,
-                    opts.req_id)
-            };
-        } else if (err.code === 'NotFoundError' || err.code === 'NotFound') {
-            // E.g. `docker pull quay.io/no-such-user`.
-            payload = {
-                status: format('Not Found (404) error from registry %s trying '
-                    + 'to pull %s: %s (%s)', opts.rat.index.name,
-                    opts.rat.remoteName, err.message, opts.req_id)
-            };
+            /* END JSSTYLED */
+            errmsg = format('Error pulling image: (%s) %s host not found',
+                err.code, opts.rat.index.name);
+        } else if (
+            /*
+             * --- UnauthorizedError
+             * Docker-docker:
+             *  $ docker pull trentm/busybox-i-am-in-you
+             *  Using default tag: latest
+             *  Pulling repository docker.io/trentm/busybox-i-am-in-you
+             *  Error: image trentm/busybox-i-am-in-you:latest not found
+             *
+             * --- NotFoundError
+             * E.g.: `docker pull quay.io/no-such-user`
+             */
+            err.code === 'UnauthorizedError' || err.code === 'NotFoundError')
+        {
+            errmsg = format('Error: image %s not found', imgName);
         } else if (err.code === 'DownloadError') {
             // E.g. A `DownloadError` from docker-registry-client.
-            payload = {
-                status: format('Error downloading %s: %s', imgName, err.message)
-            };
+            errmsg = format('Error downloading %s: %s', imgName, err.message);
         } else if (err.code === 'NotImplemented') {
             // E.g. OAuth auth to a Docker Registry before DOCKER-771.
-            payload = {
-                status: format('Could not pull from registry %s: %s',
-                    opts.rat.index.name, err.message)
-            };
+            errmsg = format('Could not pull from registry %s: %s',
+                opts.rat.index.name, err.message);
         } else {
+            /*
+             * E.g.: {"errors":[{"code":"UNAUTHORIZED",
+             *   "message":"authentication required",
+             *   "detail":[{"Type":"repository","Name":"library/no-such",
+             *      "Action":"pull"}]}]}
+             */
             var regErr;
             try {
                 regErr = JSON.parse(err.message);
@@ -1453,10 +1466,7 @@ function pullImage(opts, callback) {
                 /* pass */
             }
             if (!regErr || !regErr.errors) {
-                payload = {
-                    status: format('Error pulling image: Internal error (%s)',
-                        opts.req_id)
-                };
+                errmsg = 'Error pulling image: Internal error';
             } else if (regErr.errors.length === 1) {
                 var code = regErr.errors[0].code;
                 if (code === 'MANIFEST_UNKNOWN') {
@@ -1466,26 +1476,30 @@ function pullImage(opts, callback) {
                      * Per DOCKER-639, Docker-docker responds with:
                      *      Error: image hello-world:latest not found
                      */
-                    payload = {
-                        status: format('Error: image %s not found (%s)',
-                            imgName, opts.req_id)
-                    };
+                    errmsg = format('Error: image %s not found', imgName);
                 } else {
-                    payload = {
-                        status: format('Error pulling image: (%s) %s (%s)',
-                            code, regErr.errors[0].message, opts.req_id)
-                    };
+                    errmsg = format('Error pulling image: (%s) %s',
+                        code, regErr.errors[0].message);
                 }
             } else {
                 var errmsgs = regErr.errors.map(function (e) {
                     return format('(%s) %s', e.code, e.message); })
                     .join(', ');
-                payload = {
-                    status: format('Error pulling image: %s (%s)',
-                        errmsgs, opts.req_id)
-                };
+                errmsg = format('Error pulling image: %s', errmsgs);
             }
         }
+        /*
+         * Note: docker/pkg/jsonmessage/jsonmessage.go describes an optional
+         * 'errorDetail.code' field, though I don't know specific usage of
+         * this in Docker-'docker pull'.
+         */
+        errmsg += ' (' + opts.req_id + ')';
+        var payload = {
+            error: errmsg,  // deprecated field
+            errorDetail: {
+                message: errmsg
+            }
+        };
 
         opts.res.write(JSON.stringify(payload));
         opts.res.end();
diff --git a/package.json b/package.json
index cb137e8..2131f08 100644
--- a/package.json
+++ b/package.json
@@ -18,9 +18,9 @@
     "moray": "2.0.0",
     "once": "1.3.1",
     "openssl-wrapper": "0.2.1",
-    "restify": "4.2.0",
+    "restify": "4.3.0",
     "sdc-bunyan-serializers": "git+https://github.com/joyent/sdc-bunyan-serializers.git#a3e7780",
-    "sdc-clients": "10.0.1",
+    "sdc-clients": "10.0.3",
     "sprintf": "0.1.5",
     "sshpk": "1.10.0",
     "strsplit": "1.0.0",
diff --git a/test/integration/cli-pull.test.js b/test/integration/cli-pull.test.js
index e9ddcda..33bdb9a 100644
--- a/test/integration/cli-pull.test.js
+++ b/test/integration/cli-pull.test.js
@@ -19,77 +19,99 @@ var h = require('./helpers');
 var cli = require('../lib/cli');
 
 
-
 // --- Tests
 
-
 test('docker pull', function (tt) {
 
     tt.test('  setup: alice init', cli.init);
 
+
     /**
      * Check for reasonable error messages for some 'docker pull' failures.
      * Some related issues: DOCKER-639, DOCKER-689
      */
-    /*
-     * XXX: Skipped pending DOCKER-976.
+
+    /**
+     * Docker-docker 1.12:
+     *  $ docker pull no-such-repo
+     *  Using default tag: latest
+     *  Pulling repository docker.io/library/no-such-repo
+     *  Error: image library/no-such-repo not found
+     *  $ echo $?
+     *  1
+     *
+     * Note that Triton-docker won't have that "Pulling repository ..." line.
+     * In Docker-docker, that is from the docker v1 fallback pull attempt.
+     * I.e. cruft, IMO.
      */
-    tt.skip('  docker pull no-such-repo (error message)', function (t) {
+    tt.test('  docker pull no-such-repo', function (t) {
         cli.docker('pull no-such-repo', function (err, stdout, stderr) {
-            // JSSTYLED
-            // I.e. this error message: https://github.com/docker/distribution/blob/master/registry/api/errcode/register.go#L40
-            var unauthorizedMsgRe = /authentication required/;
-
-            /*
-             * Actually expect a zero exit status, because `docker pull`s
-             * JSON progress protocol doesn't handle communicating an error,
-             * AFAIK.
-             */
-            t.ifError(err, 'expected successful pull');
+            t.ok(err, 'expect failed pull: ' + err);
 
-            t.ok(/UNAUTHORIZED/.test(stdout), format(
-                'error code is "UNAUTHORIZED", from stdout: %j', stdout));
-
-            t.ok(unauthorizedMsgRe.test(stdout), format(
-                'error message matches %s, got %j', unauthorizedMsgRe, stdout));
+            t.ok(/^Error: image no-such-repo:latest not found/m.test(stderr),
+                format('stderr includes "Error: image $name not found", '
+                    + 'stdout=%j, stderr=%j', stdout, stderr));
+            t.ok(! /unauthorized/i.test(stderr), format('stderr does '
+                + '*not* contain "unauthorized", from stderr=%j', stderr));
 
             t.end();
         });
     });
 
-    /*
-     * XXX: Skipped pending DOCKER-976.
+    /* BEGIN JSSTYLED */
+    /**
+     * Docker-docker 1.12:
+     *  $ docker pull quay.io/no-such-user
+     *  Using default tag: latest
+     *  Error response from daemon: error parsing HTTP 404 response body: invalid character '<' looking for beginning of value: "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.</p>\n"
+     *
+     * Triton-docker:
+     *  $ docker --tls pull quay.io/no-such-user
+     *  Using default tag: latest
+     *  Error: image quay.io/no-such-user:latest not found (71a0653b...)
+     *
+     * I think Triton's is an improvement.
      */
-    tt.skip('  docker pull quay.io/no-such-user (error message)', function (t) {
+    /* END JSSTYLED */
+    tt.test('  docker pull quay.io/no-such-user', function (t) {
         cli.docker('pull quay.io/no-such-user',
                 function (err, stdout, stderr) {
-            var match;
+            t.ok(err, 'expect failed pull: ' + err);
 
-            // expect zero exit status, see above
-            t.ifError(err, 'expected successful pull');
+            t.ok(/^Error: image quay.io\/no-such-user:latest not found/m
+                    .test(stderr),
+                format('stderr includes "Error: image $name not found", '
+                    + 'stdout=%j, stderr=%j', stdout, stderr));
+            t.ok(! /unauthorized/i.test(stderr), format('stderr does '
+                + '*not* contain "unauthorized", from stderr=%j', stderr));
 
-            // JSSTYLED
-            match = /Not Found \(404\) error from registry quay.io trying to pull no-such-user/.test(stdout);
-
-            t.ok(match, 'expected that error is "Not Found ..."'
-                + (match ? '' : format(', got: %j', stdout)));
             t.end();
         });
     });
 
-    tt.test('  docker pull nope.example.com/nope (error message)',
-            function (t) {
+    /* BEGIN JSSTYLED */
+    /*
+     * Docker-docker 1.12:
+     *  $ docker pull nope.example.com/nope
+     *  Using default tag: latest
+     *  Error response from daemon: Get https://nope.example.com/v1/_ping: dial tcp: lookup nope.example.com on 8.8.8.8:53: no such host
+     *
+     * Triton-docker:
+     *  $ docker --tls pull nope.example.com/nope
+     *  Using default tag: latest
+     *  Error pulling image: (ENOTFOUND) nope.example.com host not found (...)
+     */
+    /* END JSSTYLED */
+    tt.test('  docker pull nope.example.com/nope', function (t) {
         cli.docker('pull nope.example.com/nope',
             function (err, stdout, stderr) {
-            var notFound;
+            t.ok(err, 'expect failed pull: ' + err);
 
-            // expect zero exit status, see above
-            t.ifError(err, 'expected successful pull');
+            /* JSSTYLED */
+            var pat = /^Error pulling image: \(ENOTFOUND\) nope.example.com host not found/m;
+            t.ok(pat.test(stderr), format('stderr matches %s, stderr=%j',
+                pat, stderr));
 
-            notFound
-                = /\(ENOTFOUND\) nope.example.com host not found/.test(stdout);
-            t.ok(notFound, 'error is "ENOTFOUND"'
-                + (notFound ? '' : ', got: ' + stdout));
             t.end();
         });
     });
-- 
2.21.0

