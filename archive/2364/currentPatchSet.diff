commit 3b110f47ad917e2cf6ffa8bca681ad90ed307bca (refs/changes/64/2364/1)
Author: Todd Whiteman <todd.whiteman@joyent.com>
Date:   2017-08-09T16:23:37-07:00 (2 years, 2 months ago)
    
    DOCKER-1086 Docker build copy and no trailing slash after a cached command

diff --git a/CHANGES.md b/CHANGES.md
index bbb9f1a..2e9835a 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -1,5 +1,9 @@
 # sdc-docker-build changelog
 
+## 1.3.3
+
+- DOCKER-1086 Docker build copy and no trailing slash after a cached command
+
 ## 1.3.2
 
 - DOCKER-929 Support the docker v2.2 manifest format.
diff --git a/lib/build.js b/lib/build.js
index 2d39412..9fcd7d2 100644
--- a/lib/build.js
+++ b/lib/build.js
@@ -693,7 +693,28 @@ Builder.prototype.cmdAdd = function cmdAdd(cmd, callback) {
     // Note: copyInfos are populated in the cmdAddPreFn.
     assert.arrayOfObject(cmd.ctx.copyInfos, 'cmd.ctx.copyInfos');
 
-    this.performCopy(cmd, cmd.ctx.copyInfos, callback);
+    var builder = this;
+
+    // DOCKER-935
+    // When the previous cmd was cached, update the copyInfo, as the previous
+    // copyInfo was generated when there was no real file content (as the
+    // zone had not been reprovisioned yet), and as such the copyInfo.destPath
+    // could be incorrect.
+    var lastLayer = builder.layers[builder.layers.length-1];
+    var lastCmd = lastLayer && lastLayer.cmd;
+    if (lastCmd && lastCmd.ctx && lastCmd.ctx.isCached) {
+        builder.log.info('cmdAdd: update copyInfo since last layer was cached');
+        builder.cmdAddPreFn(cmd, function _cmdAddPreFnCb(err) {
+            if (err) {
+                callback(err);
+                return;
+            }
+            builder.performCopy(cmd, cmd.ctx.copyInfos, callback);
+        });
+        return;
+    }
+
+    builder.performCopy(cmd, cmd.ctx.copyInfos, callback);
 };
 
 Builder.prototype.addArgEntry = function addArgEntry(name, value) {
@@ -1091,7 +1112,7 @@ Builder.prototype.doCheckCache = function doCheckCache(cmd, callback) {
             // The last command was cached, so reprovision to the last image.
             log.debug('doCheckCache: reprovisioning onto step %d, cmd: %s',
                 (builder.stepNo - 1), lastLayer.cmd.raw);
-            builder.reprovisionImage(cmd, builder.image.parent,
+            builder.reprovisionImage(lastLayer.cmd, builder.image.parent,
                     function _reprovImageCb(reprovErr) {
                 if (reprovErr) {
                     callback(reprovErr);
diff --git a/package.json b/package.json
index 6558882..39cbbaa 100644
--- a/package.json
+++ b/package.json
@@ -1,6 +1,6 @@
 {
   "name": "sdc-docker-build",
-  "version": "0.3.2",
+  "version": "0.3.3",
   "description": "Docker build helper module for sdc-docker",
   "keywords": [
     "dockerfile",
diff --git a/test/test_build.js b/test/test_build.js
index ac71b1c..a79eee2 100644
--- a/test/test_build.js
+++ b/test/test_build.js
@@ -29,6 +29,33 @@ var utils = require('../lib/utils');
 
 // - Globals
 
+var gBusyboxConfigDigest = 'sha256:cfa753dfea5e68a24366dfba16e6edf573'
+    + 'daa447abf65bc11619c1a98a3aff54';
+var gBusyboxShortId = gBusyboxConfigDigest.substr(7, 12);
+var gBusyboxImg = {
+    config_digest: gBusyboxConfigDigest,
+    image: {
+        config: {
+            Cmd: ['sh']
+        },
+        container_config: {
+            Cmd: ['/bin/sh', '-c', '#(nop) CMD ["sh"]']
+        },
+        history: [
+            {
+                created: '2016-10-07T21:03:58.16783626Z',
+                created_by: '/bin/sh -c #(nop) ADD file:ced3aa7577c8f970403004'
+                    + 'e45dd91e9240b1e3ee8bd109178822310bb5c4a4f7 in / '
+            },
+            {
+                created: '2016-10-07T21:03:58.469866982Z',
+                created_by: '/bin/sh -c #(nop)  CMD [\'sh\']',
+                empty_layer: true
+            }
+        ]
+    }
+};
+
 var testContextDir = path.join(__dirname, 'files');
 var tarExe = 'tar';
 if (process.platform === 'sunos') {
@@ -124,32 +151,19 @@ function testBuildContext(t, fpath, opts, callback) {
             result = t.buildTaskHandler(builder, task);
 
         } else if (task.type === 'image_reprovision') {
-            // Return a result for the busybox image task.
-            result = [null, {
-                'config_digest': 'sha256:cfa753dfea5e68a24366dfba16e6edf573'
-                            + 'daa447abf65bc11619c1a98a3aff54',
-                'image': {
-                    'config': {
-                        'Cmd': [ 'sh' ]
-                    },
-                    'container_config': {
-                        'Cmd': [ '/bin/sh', '-c', '#(nop) CMD ["sh"]' ]
-                    },
-                    'history': [
-                        {
-                                'created': '2016-10-07T21:03:58.16783626Z',
-                                'created_by': '/bin/sh -c #(nop) ADD file:ced3'
-                                    + 'aa7577c8f970403004e45dd91e9240b1e3ee8bd'
-                                    + '109178822310bb5c4a4f7 in / '
-                            },
-                            {
-                                'created': '2016-10-07T21:03:58.469866982Z',
-                                'created_by': '/bin/sh -c #(nop)  CMD [\'sh\']',
-                                'empty_layer': true
-                        }
-                    ]
+            assert.string(task.imageName, 'task.imageName');
+            var cachedImg = existingImages.filter(function _cacheFilter(img) {
+                assert.string(img.config_digest, 'img.config_digest');
+                return task.imageName === img.config_digest;
+            })[0];
+            if (cachedImg) {
+                if (cachedImg.filesystem) {
+                    addFilesystem(builder, '/', cachedImg.filesystem);
                 }
-            }];
+                result = [null, cachedImg];
+            } else {
+                result = [null, gBusyboxImg];
+            }
         } else if (task.type === 'run') {
             // Hook up the simple run command handler.
             tasks.push(task);
@@ -246,6 +260,35 @@ function verifyFilesystem(t, builder, containerPath, filesystem) {
     }
 }
 
+// Add the filesystem (a map of directories/files) into the container at the
+// given containerPath.
+function addFilesystem(builder, containerPath, filesystem) {
+    assert.object(builder, 'builder');
+    assert.string(containerPath, 'containerPath');
+    assert.object(filesystem, 'filesystem');
+
+    var entry;
+    var fullpath;
+    var i;
+    var name;
+    var names = Object.keys(filesystem);
+
+    for (i = 0; i < names.length; i++) {
+        name = names[i];
+        entry = filesystem[name];
+        fullpath = path.join(builder.containerRootDir, containerPath, name);
+        if (typeof (entry) === 'string') {
+            fs.writeFileSync(fullpath, entry);
+        } else {
+            assert.object(entry, name);
+            if (!fs.existsSync(fullpath)) {
+                fs.mkdirSync(fullpath);
+            }
+            addFilesystem(builder, path.join(containerPath, name), entry);
+        }
+    }
+}
+
 function handleExtractTarfile(builder, event, ignoreTarExtractionError) {
     var callback = event.callback;
     var extractDir = event.extractDir;
@@ -383,7 +426,8 @@ function dumpLogs(builder) {
     });
     if (records.length > 0) {
         console.log('  ---\n');
-        console.log('    Last %d log messages:\n', records.length, records);
+        console.log('    Last %d log messages:\n',
+            records.length, records.join('\n'));
         console.log('  ...\n');
     }
 }
@@ -517,7 +561,7 @@ tape('fromBusyboxLabel', function (t) {
         var messages = result.messages;
         var expectedMessages = [
             { type: 'stdout', message: 'Step 1/2 : FROM busybox\n' },
-            { type: 'stdout', message: ' ---> cfa753dfea5e\n' },
+            { type: 'stdout', message: ' ---> ' + gBusyboxShortId + '\n' },
             { type: 'stdout', message: 'Step 2/2 : LABEL sdcdocker="true"\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 2) },
             { type: 'stdout', message: util.format('Successfully built %s\n',
@@ -628,7 +672,7 @@ tape('addTarfile', function (t) {
         var vmId = builder.zoneUuid;
         var expectedMessages = [
             { type: 'stdout', message: 'Step 1/14 : FROM busybox\n' },
-            { type: 'stdout', message: ' ---> cfa753dfea5e\n' },
+            { type: 'stdout', message: ' ---> ' + gBusyboxShortId + '\n' },
 
             { type: 'stdout', message: 'Step 2/14 : ADD test.tar /\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 2) },
@@ -717,7 +761,7 @@ tape('addTarfileAsFile', function (t) {
         var vmId = builder.zoneUuid;
         var expectedMessages = [
             { type: 'stdout', message: 'Step 1/3 : FROM busybox\n' },
-            { type: 'stdout', message: ' ---> cfa753dfea5e\n' },
+            { type: 'stdout', message: ' ---> ' + gBusyboxShortId + '\n' },
 
             { type: 'stdout', message: 'Step 2/3 : ADD test.tar /test.tar\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 2) },
@@ -752,7 +796,7 @@ tape('addWildcard', function (t) {
         var vmId = builder.zoneUuid;
         var expectedMessages = [
             { type: 'stdout', message: 'Step 1/10 : FROM busybox\n' },
-            { type: 'stdout', message: ' ---> cfa753dfea5e\n' },
+            { type: 'stdout', message: ' ---> ' + gBusyboxShortId + '\n' },
             { type: 'stdout', message: 'Step 2/10 : COPY file*.txt /tmp/\n' },
             { type: 'stdout', message: getBuildStepOutput(builder, 2) },
             { type: 'stdout', message: 'Step 3/10 : RUN ls /tmp/file1.txt '
@@ -892,6 +936,82 @@ tape('copy to dir without trailing slash', function (t) {
 });
 
 
+// DOCKER-1086: Test copying a file to a directory, but leave out the trailing
+// slash. Following docker/docker this should be allowed. This test is meant to
+// ensure that the docker copy command works correctly when the previous command
+// was cached.
+tape('copy to dir without trailing slash (DOCKER-1086)', function (t) {
+    var configWorkdir = {
+        'AttachStdin': false,
+        'AttachStderr': false,
+        'AttachStdout': false,
+        'Cmd': ['/bin/sh', '-c', '#(nop) WORKDIR /adir'],
+        'Domainname': '',
+        'Entrypoint': null,
+        'Env': null,
+        'Hostname': '',
+        'Image': null,
+        'Labels': null,
+        'OnBuild': null,
+        'OpenStdin': false,
+        'StdinOnce': false,
+        'Tty': false,
+        'User': '',
+        'Volumes': null,
+        'WorkingDir': '/adir'
+    };
+
+    var fileAndContents = {
+        'Dockerfile': [
+            'FROM scratch',
+            'WORKDIR /adir',
+            'COPY file.txt .'
+        ].join('\n'),
+        'file.txt': 'hello'
+    };
+
+    var buildOpts = {
+        existingImages: [
+            {
+                config_digest: 'sha256:4672e708a636d238f3af151d33c9aeee14d7eab'
+                    + 'd60b564604d050ec200917177',
+                image: {
+                    config: configWorkdir,
+                    container_config: configWorkdir,
+                    history: [
+                        {
+                            created: '2017-08-10T12:00:00.000000000Z',
+                            created_by: '/bin/sh -c #(nop) WORKDIR /adir',
+                            empty_layer: true
+                        }
+                    ]
+                },
+                // Note: Filesystem is the complete files/dirs for this image.
+                filesystem: {
+                    'adir': {}
+                }
+            }
+        ]
+    };
+
+    testBuildContents(t, fileAndContents, buildOpts, function (err, result) {
+        var builder = result.builder;
+        if (showError(t, err, builder)) {
+            return;
+        }
+
+        var expectedFilesystem = {
+            'adir': {
+                'file.txt': fileAndContents['file.txt']
+            }
+        };
+        verifyFilesystem(t, builder, '/', expectedFilesystem);
+
+        testEnd(t, builder);
+    });
+});
+
+
 tape('workdir', function (t) {
     var fileAndContents = {
         'Dockerfile': [
