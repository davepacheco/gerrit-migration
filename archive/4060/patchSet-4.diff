commit 04939c65ea6b3b9adaa8a1a3ec87e736af11b57a (refs/changes/60/4060/4)
Author: Pedro Palazon Candel <pedro@joyent.com>
Date:   2018-06-01T18:21:02+02:00 (1 year, 4 months ago)
    
    TOOLS-1926 sdcadm health is stuck and won't exit

diff --git a/lib/sdcadm.js b/lib/sdcadm.js
index 27f3160..9dabd6d 100644
--- a/lib/sdcadm.js
+++ b/lib/sdcadm.js
@@ -401,6 +401,19 @@ SdcAdm.prototype.ensureSdcApp = function (arg, cb) {
                 appErr = new VError(appErr,
                     'Binder service seems to be down. ' +
                     'Please review it before proceeding');
+                // We need to stop the DNS Resolver we've attempted to create
+                // with Binder for DNS resolution, since binder is down. This
+                // resolver is created by Cueball's `resolverForIpOrDomain`
+                // and stored into CueBallDNSResolver object as a class level
+                // property. If we don't stop this resolver, sdcadm process
+                // will keep hanging and the resolver itself attempting to
+                // connect to binder, given we're using "softexit" to finish
+                // the sdcadm process:
+                var CueBallDNSResolver = require('cueball').DNSResolver;
+                var binderResolver = CueBallDNSResolver.bootstrapResolvers[
+                    format('binder.%s.%s', self.config.datacenter_name,
+                        self.config.dns_domain)];
+                binderResolver.stop();
             } else if (VError.hasCauseWithName(appErr, 'PoolFailedError')) {
                 appErr = new VError(appErr,
                     'SAPI service seems to be down. ' +
diff --git a/test/check-health.test.js b/test/check-health.test.js
index 64f2aae..ec570c3 100644
--- a/test/check-health.test.js
+++ b/test/check-health.test.js
@@ -11,7 +11,7 @@
 
 var test = require('tape').test;
 var exec = require('child_process').exec;
-
+var vasync = require('vasync');
 
 var common = require('./common');
 
@@ -213,7 +213,13 @@ test('sdcadm check-health with disabled papi', function (t) {
 
 
 test('sdcadm check-health -q with disabled papi', function (t) {
-    t.end();
+    exec('sdcadm check-health -q', function (err, stdout, stderr) {
+        t.equal(err && err.code, 1, 'errcode is 1');
+        t.equal('', stdout, 'empty stdout');
+        t.notEqual(stderr.indexOf('Some instances appear unhealthy'), -1,
+            'check-health stderr');
+        t.end();
+    });
 });
 
 
@@ -224,3 +230,45 @@ test('enable papi after health check', function (t) {
         t.end();
     });
 });
+
+// This test can cause everything to hang if we're not correctly taking care
+// of Cueball when Binder is down:
+test('check-health when binder is down', function (t) {
+    vasync.pipeline({
+        funcs: [
+            function disableBinder(_, next) {
+                exec('/usr/sbin/svcadm -z ' +
+                    '`/opt/smartdc/bin/sdc-vmname binder` disable binder',
+                    function disableBinderCb(err, stdout, stderr) {
+                        t.ifError(err);
+                        t.equal(stdout, '');
+                        t.equal(stderr, '');
+                        next();
+                    });
+            },
+            function checkHealth(_, next) {
+                exec('sdcadm check-health', function (err, stdout, stderr) {
+                    t.equal(err && err.code, 1, 'errcode is 1');
+                    t.equal(err.killed, false, 'process not killed');
+                    t.equal(stdout, '');
+                    t.notEqual(
+                        stderr.indexOf('Binder service seems to be down'), -1,
+                        'binder off stderr');
+                    next();
+                });
+            },
+            function enableBinder(_, next) {
+                exec('/usr/sbin/svcadm -z ' +
+                    '`/opt/smartdc/bin/sdc-vmname binder` enable binder',
+                    function disableBinderCb(err, stdout, stderr) {
+                        t.ifError(err);
+                        t.equal(stdout, '');
+                        t.equal(stderr, '');
+                        next();
+                    });
+            }
+        ]
+    }, function pipeCb(pipeErr) {
+        t.end(pipeErr);
+    });
+});
