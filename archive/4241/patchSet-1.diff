commit 175aaea79d34b63ebf8ca9aae0173a72d6127e36 (refs/changes/41/4241/1)
Author: Kelly McLaughlin <kelly.mclaughlin@joyent.com>
Date:   2018-06-15T17:50:46-06:00 (1 year, 4 months ago)
    
    joyent/pgstatsmon#14 Collect metrics about vacuum progress

diff --git a/lib/dbinit.js b/lib/dbinit.js
index 04d4d91..27c3714 100644
--- a/lib/dbinit.js
+++ b/lib/dbinit.js
@@ -175,6 +175,30 @@ function create_replication_function(args, callback) {
 	run_rowless_query(query, args, callback);
 }
 
+/*
+ * create a function for pgstatsmon to gather vacuum progress
+ */
+function create_progress_vacuum_function(args, callback) {
+	var query;
+	query = 'CREATE OR REPLACE FUNCTION public.get_stat_progress_vacuum()'
+	+ ' RETURNS SETOF vacuum_progress_stats AS'
+	+ ' \'SELECT T.relname AS relname,'
+	+ '	  S.param1+1 AS phase,'
+	+ '	  S.param2 AS heap_blks_total,'
+	+ '	  S.param3 AS heap_blks_scanned,'
+	+ '	  S.param4 AS heap_blks_vacuumed,'
+	+ '	  S.param5 AS index_vacuum_count,'
+	+ '	  S.param6 AS max_dead_tuples,'
+	+ '	  S.param7 AS num_dead_tuples'
+	+ ' FROM pg_stat_get_progress_info(\'\'VACUUM\'\') AS S '
+	+ ' JOIN pg_database D ON (S.datid = D.oid) '
+	+ ' JOIN pg_stat_all_tables As T ON (T.relid = S.relid)\''
+	+ ' LANGUAGE SQL VOLATILE'
+	+ ' SECURITY DEFINER;';
+
+	run_rowless_query(query, args, callback);
+}
+
 /*
  * wrapper function to run queries that don't return useful rows
  */
@@ -230,7 +254,8 @@ function setup_monitoring_user(args, callback) {
 			stop_if_standby,
 			create_user,
 			create_activity_function,
-			create_replication_function
+			create_replication_function,
+			create_progress_vacuum_function
 		],
 		'arg': arg
 	}, function (err, results) {
diff --git a/lib/pgstatsmon.js b/lib/pgstatsmon.js
index b6b074e..a9edc59 100644
--- a/lib/pgstatsmon.js
+++ b/lib/pgstatsmon.js
@@ -1078,6 +1078,12 @@ PgMon.prototype.record = function (pi, qi, datum)
 				return;
 			}
 
+			if (expires) {
+				metric.expires = g.expires;
+				metric.expiryPeriod = g.expiryPeriod;
+				metric.defaultValue = g.defaultValue;
+			}
+
 			mon.emitGauge(metric, new_value);
 		});
 	});
@@ -1267,7 +1273,10 @@ PrometheusTarget.prototype.emitGauge = function (metric, value)
 {
 	this.pe_collector.gauge({
 		name: metric.name,
-		help: metric.help
+		help: metric.help,
+		expires: metric.expires,
+		expiryPeriod: metric.expiryPeriod,
+		defaultValue: metric.defaultValue
 	}).set(value, metric.metadata);
 };
 
diff --git a/lib/queries.js b/lib/queries.js
index 5341466..3fdefc3 100644
--- a/lib/queries.js
+++ b/lib/queries.js
@@ -254,6 +254,37 @@ var queries = [ {
 	{ 'attr': 'tx_until_wraparound_autovacuum', 'help': 'transactions' +
 	    ' until the next wraparound autovacuum' }
     ]
+}, {
+    'name': 'pg_stat_progress_vacuum',
+    'statkey': 'relname',
+    'metadata': [ 'relname'],
+    'sql': [
+	'SELECT relname, ',
+	'	phase, ',
+	'	heap_blks_total, ',
+	'	heap_blks_scanned, ',
+	'	heap_blks_vacuumed, ',
+	'	index_vacuum_count, ',
+	'	max_dead_tuples, ',
+	'	num_dead_tuples ',
+	'FROM get_stat_progress_vacuum()'
+    ].join('\n'),
+    'gauges': [
+	  { 'attr': 'phase', 'help': 'p', 'expires': true,
+		'expiryPeriod': 120000 },
+	  { 'attr': 'heap_blks_total', 'help': 'b', 'expires': true,
+		'expiryPeriod': 120000 },
+	  { 'attr': 'heap_blks_scanned', 'help': 'c', 'expires': true,
+		'expiryPeriod': 120000 },
+	  { 'attr': 'heap_blks_vacuumed', 'help': 'd', 'expires': true,
+		'expiryPeriod': 120000 },
+	  { 'attr': 'index_vacuum_count', 'help': 'e', 'expires': true,
+		'expiryPeriod': 120000 },
+	  { 'attr': 'max_dead_tuples', 'help': 'f', 'expires': true,
+		'expiryPeriod': 120000 },
+	  { 'attr': 'num_dead_tuples', 'help': 'g', 'expires': true,
+		'expiryPeriod': 120000 }
+    ]
 }];
 
 /*
diff --git a/package.json b/package.json
index fc2eb4f..fadf786 100644
--- a/package.json
+++ b/package.json
@@ -7,7 +7,7 @@
 	},
 	"dependencies": {
 		"ajv": "5.5.1",
-		"artedi": "1.3.0",
+		"artedi": "1.4.0",
 		"assert-plus": "1.0.0",
 		"backoff": "2.5.0",
 		"bunyan": "1.8.10",
