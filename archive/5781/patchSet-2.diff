From f1e952c71f366b7daa960d7bbf0da9c611917f0b Mon Sep 17 00:00:00 2001
From: Trent Mick <trentm@gmail.com>
Date: Wed, 13 Mar 2019 11:00:48 -0700
Subject: [PATCH] TRITON-884 remove cloud analytics (ca) from Triton

---
 CHANGES.md      |   7 +-
 lib/ca.js       | 335 ------------------------------------------------
 lib/index.js    |   5 +-
 package.json    |   4 +-
 test/ca.test.js | 199 ----------------------------
 5 files changed, 8 insertions(+), 542 deletions(-)
 delete mode 100644 lib/ca.js
 delete mode 100644 test/ca.test.js

diff --git a/CHANGES.md b/CHANGES.md
index e42959c..1ee6033 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -8,7 +8,12 @@
 
 ## Not yet released
 
-- TRITON-1266 Allow a disk_uuid arg to `CreateDisk`.
+(nothing yet)
+
+## 13.0.0
+
+- [Backward incompatible] TRITON-884 Remove the Cloud Analytics (CA) client lib.
+- TRITON-1266 Allow a `disk_uuid` arg to `CreateDisk`.
 
 ## 12.2.0
 
diff --git a/lib/ca.js b/lib/ca.js
deleted file mode 100644
index 2653181..0000000
--- a/lib/ca.js
+++ /dev/null
@@ -1,335 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright 2016 Joyent, Inc.
- */
-
-var assert = require('assert');
-var restifyClients = require('restify-clients');
-var restifyErrors = require('restify-errors');
-var sprintf = require('util').format;
-
-
-// --- Globals
-
-var CA_FMT = '/ca/customers/%s';
-var INST_BASE_FMT = CA_FMT + '/instrumentations';
-var INST_FMT = INST_BASE_FMT + '/%s';
-var INST_CLONE_FMT = INST_FMT + '/clone';
-var RAW_FMT = INST_FMT + '/value/raw';
-var HEATMAP_IMG_FMT = INST_FMT + '/value/heatmap/image';
-var HEATMAP_DETAILS_FMT = INST_FMT + '/value/heatmap/details';
-
-
-// --- Helpers
-
-if (!String.prototype.capitalize) {
-    String.prototype.capitalize = function capitalize() {
-        return this.charAt(0).toUpperCase() + this.slice(1);
-    };
-}
-
-
-function translateError(err) {
-    assert.ok(err);
-
-    if (err.body && err.body.error) {
-        switch (err.body.error.code) {
-        case 'ECA_INVAL':
-        case 'ECA_EXISTS':
-        case 'ECA_INCOMPAT':
-            return new restifyErrors.InvalidArgumentError(
-                err.body.error.message);
-
-        case 'ECA_NOENT':
-            return new restifyErrors.ResourceNotFoundError(
-                err.body.error.message);
-
-        default:
-          // noop
-            break;
-        }
-    } else if (err.statusCode) {
-        switch (err.statusCode) {
-        case 400:
-            return new restifyErrors.RestError(400, 'BadRequest',
-                                       err.message || 'bad request');
-        case 404:
-            return new restifyErrors.ResourceNotFoundError(err.message ||
-                                                   'resource not found');
-
-        default:
-          // noop
-            break;
-        }
-    }
-
-    return new restifyErrors.InternalError('An unknown error occurred');
-}
-
-
-function commonCallback(callback) {
-    return function (err, req, res, data) {
-        if (err)
-          return callback(translateError(err));
-
-        return callback(null, data);
-    };
-}
-
-
-function assertArg(name, type, arg) {
-    if (typeof (arg) !== type)
-      throw new TypeError(name + ' (' + type.capitalize() + ') required');
-}
-
-
-// --- Exported CA Client
-
-/**
- * Constructor
- *
- * Note that in options you can pass in any parameters that the restify
- * RestClient constructor takes (for example retry/backoff settings).
- *
- * @param {Object} options
- *                  - url {String} CA location.
- *
- */
-function CA(options) {
-    assertArg('options', 'object', options);
-
-    options.headers = options.headers || {};
-    options.headers['x-api-version'] = 'ca/0.1.8';
-    this.client = restifyClients.createJsonClient(options);
-}
-module.exports = CA;
-
-
-/**
- * Terminate any open connections to the CA service.
- */
-CA.prototype.close = function close() {
-    this.client.close();
-};
-
-
-/**
- * Does a listing of the "root" CA endpoint.
- *
- * This hoss gives you the "schema" that CA supports.
- *
- * @param {String} customer a CAPI customer uuid.
- * @param {Function} callback of the form f(err, schema).
- */
-CA.prototype.listSchema = function (customer, callback) {
-    assertArg('customer', 'string', customer);
-    assertArg('callback', 'function', callback);
-
-    var path = sprintf(CA_FMT, customer);
-    return this.client.get(path, commonCallback(callback));
-};
-CA.prototype.getSchema = CA.prototype.listSchema;
-CA.prototype.list = CA.prototype.listSchema;
-CA.prototype.describe = CA.prototype.listSchema;
-
-
-/**
- * Lists all instrumentations created for a customer.
- *
- * @param {String} customer the CAPI customer uuid.
- * @param {Function} callback of the form f(err, instrumentations).
- */
-CA.prototype.listInstrumentations = function (customer, callback) {
-    assertArg('customer', 'string', customer);
-    assertArg('callback', 'function', callback);
-
-    var path = sprintf(INST_BASE_FMT, customer);
-    return this.client.get(path, commonCallback(callback));
-};
-
-
-/**
- * Creates a new CA instrumentation.
- *
- * Refer to the CA documentation for an explanation of what goes in params.
- *
- * @param {String} customer the CAPI customer uuid.
- * @param {Object} params the intstrumentation parameters.
- * @param {Function} callback of the form f(err, instrumentation).
- */
-CA.prototype.createInstrumentation = function (customer, params, callback) {
-    assertArg('customer', 'string', customer);
-    assertArg('params', 'object', params);
-    assertArg('callback', 'function', callback);
-
-    var path = sprintf(INST_BASE_FMT, customer);
-    return this.client.post(path, params, commonCallback(callback));
-};
-
-
-/**
- * Clones a CA instrumentation.
- *
- * Refer to the CA documentation for an explanation of what goes in params.
- *
- * @param {String} customer the CAPI customer uuid.
- * @param {String} id the CA instrumentation id.
- * @param {Object} params the intstrumentation parameters.
- * @param {Function} callback of the form f(err, instrumentation).
- */
-CA.prototype.cloneInstrumentation = function (customer,
-                                             instrumentation,
-                                             params,
-                                             callback) {
-    if (typeof (params) === 'function') {
-        callback = params;
-        params = {};
-    }
-    assertArg('customer', 'string', customer);
-    assertArg('instrumentation', 'string', instrumentation);
-    assertArg('params', 'object', params);
-    assertArg('callback', 'function', callback);
-
-    var path = sprintf(INST_CLONE_FMT, customer, instrumentation);
-    return this.client.post(path, params, commonCallback(callback));
-};
-
-
-/**
- * Retrieves a single instrumentation by CA instrumentation id.
- *
- * @param {String} customer the CAPI customer uuid.
- * @param {String} id the intstrumentation id.
- * @param {Function} callback of the form f(err, instrumentation).
- */
-CA.prototype.getInstrumentation = function getInstrumentation(customer,
-                                                              instrumentation,
-                                                              callback) {
-    assertArg('customer', 'string', customer);
-    assertArg('instrumentation', 'string', instrumentation);
-    assertArg('callback', 'function', callback);
-
-    var path = sprintf(INST_FMT, customer, instrumentation);
-    return this.client.get(path, commonCallback(callback));
-};
-
-
-/**
- * Retrieves a single "raw" instrumentation by CA instrumentation id.
- *
- * @param {String} customer the CAPI customer uuid.
- * @param {String} instrumentation the intstrumentation id.
- * @param {Object} params see the CA docs.
- * @param {Function} callback of the form f(err, instrumentation).
- */
-CA.prototype.getInstrumentationValueRaw = function (customer,
-                                                   instrumentation,
-                                                   params,
-                                                   callback) {
-    if (typeof (params) === 'function') {
-        callback = params;
-        params = {};
-    }
-    assertArg('customer', 'string', customer);
-    assertArg('instrumentation', 'string', instrumentation);
-    assertArg('params', 'object', params);
-    assertArg('callback', 'function', callback);
-
-    var request = {
-        path: sprintf(RAW_FMT, customer, instrumentation),
-        query: params
-    };
-    return this.client.get(request, commonCallback(callback));
-};
-CA.prototype.getInstrumentationValue = CA.prototype.getInstrumentationValueRaw;
-
-
-/**
- * Retrieves an instrumentation heatmap image from CA by instrumentation id.
- *
- * @param {String} customer the CAPI customer uuid.
- * @param {String} instrumentation the intstrumentation id.
- * @param {Object} params see the CA docs.
- * @param {Function} callback of the form f(err, heatmap).
- */
-CA.prototype.getHeatmapImage = function getHeatmapImage(customer,
-                                                        instrumentation,
-                                                        params,
-                                                        callback) {
-    if (typeof (params) === 'function') {
-        callback = params;
-        params = {};
-    }
-    assertArg('customer', 'string', customer);
-    assertArg('instrumentation', 'string', instrumentation);
-    assertArg('params', 'object', params);
-    assertArg('callback', 'function', callback);
-
-    var request = {
-        path: sprintf(HEATMAP_IMG_FMT, customer, instrumentation),
-        query: params
-    };
-    return this.client.get(request, commonCallback(callback));
-};
-CA.prototype.getHeatmap = CA.prototype.getHeatmapImage;
-CA.prototype.getInstrumentationHeatmap = CA.prototype.getHeatmap;
-CA.prototype.getInstrumentationHeatmapImage = CA.prototype.getHeatmap;
-
-
-
-/**
- * Retrieves an instrumentation heatmap detail from CA by instrumentation id.
- *
- * @param {String} customer the CAPI customer uuid.
- * @param {String} instrumentation the intstrumentation id.
- * @param {Object} params see the CA docs.
- * @param {Function} cb of the form f(err, details).
- */
-CA.prototype.getHeatmapDetails = function (customer,
-                                          instrumentation,
-                                          params,
-                                          callback) {
-    if (typeof (params) === 'function') {
-        callback = params;
-        params = {};
-    }
-    assertArg('customer', 'string', customer);
-    assertArg('instrumentation', 'string', instrumentation);
-    assertArg('params', 'object', params);
-    assertArg('callback', 'function', callback);
-
-    var request = {
-        path: sprintf(HEATMAP_DETAILS_FMT, customer, instrumentation),
-        query: params
-    };
-    return this.client.get(request, commonCallback(callback));
-};
-CA.prototype.getInstrumentationHeatmapDetails = CA.prototype.getHeatmapDetails;
-
-
-/**
- * Deletes an instrumentation from CA by instrumentation id.
- *
- * @param {String} customer the CAPI customer uuid.
- * @param {String} instrumentation the intstrumentation id.
- * @param {Function} callback of the form f(err, instrumentation).
- */
-CA.prototype.deleteInstrumentation = function (customer,
-                                              instrumentation,
-                                              callback) {
-
-    assertArg('customer', 'string', customer);
-    assertArg('instrumentation', 'string', instrumentation);
-    assertArg('callback', 'function', callback);
-
-    var request = {
-        path: sprintf(INST_FMT, customer, instrumentation)
-    };
-    return this.client.del(request, commonCallback(callback));
-};
-CA.prototype.destroyInstrumentation = CA.prototype.deleteInstrumentation;
diff --git a/lib/index.js b/lib/index.js
index 4ffc8e9..959b47c 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -5,16 +5,13 @@
  */
 
 /*
- * Copyright (c) 2018, Joyent, Inc.
+ * Copyright 2019 Joyent, Inc.
  */
 
 module.exports = {
     get Amon() {
         return require('./amon');
     },
-    get CA() {
-        return require('./ca');
-    },
     get FWAPI() {
         return require('./fwapi');
     },
diff --git a/package.json b/package.json
index 28dee30..3e2c4a6 100644
--- a/package.json
+++ b/package.json
@@ -1,8 +1,7 @@
 {
   "name": "sdc-clients",
   "description": "node.js client libraries for Triton core REST APIs.",
-  "version": "12.2.0",
-  "homepage": "http://www.joyent.com",
+  "version": "13.0.0",
   "repository": {
     "type": "git",
     "url": "git://github.com/joyent/node-sdc-clients.git"
@@ -18,7 +17,6 @@
     "lomstream": "1.1.0",
     "once": "^1.3.1",
     "restify-clients": "^1.6.0",
-    "restify-errors": "^3.0.0",
     "vasync": "^1.6.2",
     "verror": "^1.6.0",
     "sshpk": "^1.10.1",
diff --git a/test/ca.test.js b/test/ca.test.js
deleted file mode 100644
index 41cb78e..0000000
--- a/test/ca.test.js
+++ /dev/null
@@ -1,199 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-/*
- * Copyright 2017 Joyent, Inc.
- */
-
-var bunyan = require('bunyan');
-var test = require('tape');
-var util = require('util');
-var uuid = require('uuid');
-
-var CA = require('../lib/index').CA;
-
-
-// --- Globals
-
-var CA_URL = 'http://' + (process.env.CA_IP || '10.99.99.25') + ':23181';
-
-var ca = null;
-var customer = process.env.UFDS_ADMIN_UUID;
-var instrumentation = null;
-
-
-// --- Tests
-
-test('ca', function (tt) {
-    tt.test(' setup', function (t) {
-        ca = new CA({
-            url: CA_URL,
-            retry: {
-                retries: 1,
-                minTimeout: 1000
-            }
-        });
-        t.end();
-    });
-
-
-    tt.test(' list schema', function (t) {
-        ca.listSchema(customer, function (err, schema) {
-            t.ifError(err);
-            t.ok(schema);
-            t.end();
-        });
-    });
-
-
-    tt.test(' create instrumentation bad params', function (t) {
-        ca.createInstrumentation(customer, {}, function (err, inst) {
-            t.ok(err);
-            t.ok(!inst);
-            t.equal(err.statusCode, 409);
-            t.equal(err.restCode, 'InvalidArgument');
-            t.ok(err.message);
-            t.end();
-        });
-    });
-
-
-    tt.test(' create instrumentation', function (t) {
-        var params = {
-            module: 'fs',
-            stat: 'logical_ops',
-            decomposition: 'latency'
-        };
-        ca.createInstrumentation(customer, params, function (err, inst) {
-            var uri;
-            t.ifError(err, err);
-            t.ok(inst);
-            if (inst) {
-                uri = inst.uri;
-                instrumentation = uri.substr(uri.lastIndexOf('/') + 1);
-            }
-            t.end();
-        });
-    });
-
-
-    tt.test(' list instrumentations', function (t) {
-        ca.listInstrumentations(customer, function (err, instrumentations) {
-            t.ifError(err);
-            t.ok(instrumentations);
-            t.ok(instrumentations.length);
-            var i = instrumentations[instrumentations.length - 1];
-            t.equal(i.module, 'fs');
-            t.equal(i.stat, 'logical_ops');
-            t.end();
-        });
-    });
-
-
-    tt.test(' list instrumentations bogus customer', function (t) {
-        ca.listInstrumentations(uuid.v4(), function (err, insts) {
-            t.ifError(err);
-            t.ok(insts);
-            t.equal(insts.length, 0);
-            t.end();
-        });
-    });
-
-
-    tt.test(' get instrumentation bad', function (t) {
-        ca.getInstrumentation(customer, uuid.v4(), function (err, inst) {
-            t.ok(err);
-            t.ok(!inst);
-            t.equal(err.statusCode, 404);
-            t.equal(err.restCode, 'ResourceNotFound');
-            t.ok(err.message);
-            t.end();
-        });
-    });
-
-
-    tt.test(' get instrumentation', function (t) {
-        ca.getInstrumentation(customer, instrumentation, function (err, inst) {
-            t.ifError(err);
-            t.ok(inst);
-            t.end();
-        });
-    });
-
-
-    tt.test(' get heatmap', function (t) {
-        ca.getHeatmap(customer, instrumentation, function (err, heatmap) {
-            t.ifError(err);
-            t.ok(heatmap);
-            t.end();
-        });
-    });
-
-
-    tt.test(' get heatmap bad', function (t) {
-        ca.getHeatmap(customer, uuid.v4(), function (err, heatmap) {
-            t.ok(err);
-            t.ok(!heatmap);
-            t.equal(err.statusCode, 404);
-            t.equal(err.restCode, 'ResourceNotFound');
-            t.ok(err.message);
-
-            t.end();
-        });
-    });
-
-
-    tt.test(' get heatmap details bad', function (t) {
-        ca.getHeatmapDetails(customer, uuid.v4(), {
-            x: 10,
-            y: 20
-        }, function (err, heatmap) {
-            t.ok(err);
-            t.ok(!heatmap);
-            t.equal(err.statusCode, 404);
-            t.equal(err.restCode, 'ResourceNotFound');
-            t.ok(err.message);
-            t.end();
-        });
-    });
-
-
-    tt.test(' delete instrumentation bad', function (t) {
-        ca.deleteInstrumentation(customer, uuid.v4(), function (err) {
-            t.ok(err);
-            t.equal(err.statusCode, 404);
-            t.equal(err.restCode, 'ResourceNotFound');
-            t.ok(err.message);
-            t.end();
-        });
-    });
-
-
-    tt.test(' clone instrumentation', function (t) {
-        ca.cloneInstrumentation(customer, instrumentation,
-                function (err, inst) {
-            t.ifError(err);
-            ca.deleteInstrumentation(customer, inst.id, function (err2) {
-                t.ifError(err2);
-                t.end();
-            });
-        });
-    });
-
-
-    tt.test(' delete instrumentation', function (t) {
-        ca.deleteInstrumentation(customer, instrumentation, function (err) {
-            t.ifError(err);
-            t.end();
-        });
-    });
-
-
-    tt.test(' teardown', function (t) {
-        ca.close();
-        t.end();
-    });
-});
-- 
2.21.0

