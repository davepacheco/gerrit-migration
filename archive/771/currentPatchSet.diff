From 084bab208e0b7c16aa583ebb268d2886e066a4b8 Mon Sep 17 00:00:00 2001
From: Patrick Mooney <pmooney@pfmooney.com>
Date: Mon, 24 Oct 2016 22:41:25 +0000
Subject: [PATCH] OS-5740 dtrace helpers leaked during fork when lwp_create
 fails Reviewed by: Bryan Cantrill <bryan@joyent.com> Reviewed by: Ryan
 Zezeski <rpz@joyent.com> Approved by: Robert Mustacchi <rm@joyent.com>

---
 usr/src/uts/common/dtrace/dtrace.c  | 18 ++++++++++++++----
 usr/src/uts/common/os/dtrace_subr.c |  3 ++-
 usr/src/uts/common/os/exec.c        |  4 ++--
 usr/src/uts/common/os/exit.c        |  4 ++--
 usr/src/uts/common/os/fork.c        |  4 ++++
 usr/src/uts/common/sys/dtrace.h     |  4 ++--
 6 files changed, 26 insertions(+), 11 deletions(-)

diff --git a/usr/src/uts/common/dtrace/dtrace.c b/usr/src/uts/common/dtrace/dtrace.c
index ba87747b79..6ec6c5ae9d 100644
--- a/usr/src/uts/common/dtrace/dtrace.c
+++ b/usr/src/uts/common/dtrace/dtrace.c
@@ -15455,11 +15455,10 @@ dtrace_helpers_create(proc_t *p)
 }
 
 static void
-dtrace_helpers_destroy(void)
+dtrace_helpers_destroy(proc_t *p)
 {
 	dtrace_helpers_t *help;
 	dtrace_vstate_t *vstate;
-	proc_t *p = curproc;
 	int i;
 
 	mutex_enter(&dtrace_lock);
@@ -15474,10 +15473,21 @@ dtrace_helpers_destroy(void)
 	 * We're now going to lose the help from this process.
 	 */
 	p->p_dtrace_helpers = NULL;
-	dtrace_sync();
+	if (p == curproc) {
+		dtrace_sync();
+	} else {
+		/*
+		 * It is sometimes necessary to clean up dtrace helpers from a
+		 * an incomplete child process as part of a failed fork
+		 * operation.  In such situations, a dtrace_sync() call should
+		 * be unnecessary as the process should be devoid of threads,
+		 * much less any in probe context.
+		 */
+		VERIFY(p->p_stat == SIDL);
+	}
 
 	/*
-	 * Destory the helper actions.
+	 * Destroy the helper actions.
 	 */
 	for (i = 0; i < DTRACE_NHELPER_ACTIONS; i++) {
 		dtrace_helper_action_t *h, *next;
diff --git a/usr/src/uts/common/os/dtrace_subr.c b/usr/src/uts/common/os/dtrace_subr.c
index 44cfddad97..680f04a958 100644
--- a/usr/src/uts/common/os/dtrace_subr.c
+++ b/usr/src/uts/common/os/dtrace_subr.c
@@ -22,6 +22,7 @@
 /*
  * Copyright 2009 Sun Microsystems, Inc.  All rights reserved.
  * Use is subject to license terms.
+ * Copyright 2016 Joyent, Inc.
  */
 
 #include <sys/dtrace.h>
@@ -39,7 +40,7 @@
 void (*dtrace_cpu_init)(processorid_t);
 void (*dtrace_modload)(struct modctl *);
 void (*dtrace_modunload)(struct modctl *);
-void (*dtrace_helpers_cleanup)(void);
+void (*dtrace_helpers_cleanup)(proc_t *);
 void (*dtrace_helpers_fork)(proc_t *, proc_t *);
 void (*dtrace_cpustart_init)(void);
 void (*dtrace_cpustart_fini)(void);
diff --git a/usr/src/uts/common/os/exec.c b/usr/src/uts/common/os/exec.c
index c9fb160831..c330028d2b 100644
--- a/usr/src/uts/common/os/exec.c
+++ b/usr/src/uts/common/os/exec.c
@@ -26,7 +26,7 @@
 /*	Copyright (c) 1988 AT&T	*/
 /*	  All Rights Reserved  	*/
 /*
- * Copyright 2015, Joyent, Inc.  All rights reserved.
+ * Copyright 2016 Joyent, Inc.
  */
 
 #include <sys/types.h>
@@ -2087,7 +2087,7 @@ exec_args(execa_t *uap, uarg_t *args, intpdata_t *intp, void **auxvpp)
 	 */
 	if (p->p_dtrace_helpers != NULL) {
 		ASSERT(dtrace_helpers_cleanup != NULL);
-		(*dtrace_helpers_cleanup)();
+		(*dtrace_helpers_cleanup)(p);
 	}
 
 	mutex_enter(&p->p_lock);
diff --git a/usr/src/uts/common/os/exit.c b/usr/src/uts/common/os/exit.c
index 0e213deb21..41f5f29eee 100644
--- a/usr/src/uts/common/os/exit.c
+++ b/usr/src/uts/common/os/exit.c
@@ -21,7 +21,7 @@
 
 /*
  * Copyright (c) 1988, 2010, Oracle and/or its affiliates. All rights reserved.
- * Copyright 2015 Joyent, Inc. All rights reserved.
+ * Copyright 2016 Joyent, Inc.
  */
 
 /*	Copyright (c) 1984, 1986, 1987, 1988, 1989 AT&T	*/
@@ -488,7 +488,7 @@ proc_exit(int why, int what)
 	 */
 	if (p->p_dtrace_helpers != NULL) {
 		ASSERT(dtrace_helpers_cleanup != NULL);
-		(*dtrace_helpers_cleanup)();
+		(*dtrace_helpers_cleanup)(p);
 	}
 
 	/*
diff --git a/usr/src/uts/common/os/fork.c b/usr/src/uts/common/os/fork.c
index ecef1e879f..9fbce63a4c 100644
--- a/usr/src/uts/common/os/fork.c
+++ b/usr/src/uts/common/os/fork.c
@@ -642,6 +642,10 @@ forklwperr:
 
 	forklwp_fail(cp);
 	fork_fail(cp);
+	if (cp->p_dtrace_helpers != NULL) {
+		ASSERT(dtrace_helpers_cleanup != NULL);
+		(*dtrace_helpers_cleanup)(cp);
+	}
 	rctl_set_free(cp->p_rctls);
 	mutex_enter(&pidlock);
 
diff --git a/usr/src/uts/common/sys/dtrace.h b/usr/src/uts/common/sys/dtrace.h
index b1bb6d8dd2..4ee1a94510 100644
--- a/usr/src/uts/common/sys/dtrace.h
+++ b/usr/src/uts/common/sys/dtrace.h
@@ -25,7 +25,7 @@
  */
 
 /*
- * Copyright (c) 2013, Joyent, Inc. All rights reserved.
+ * Copyright 2016 Joyent, Inc.
  * Copyright (c) 2013 by Delphix. All rights reserved.
  */
 
@@ -2286,7 +2286,7 @@ extern void dtrace_membar_consumer(void);
 extern void (*dtrace_cpu_init)(processorid_t);
 extern void (*dtrace_modload)(struct modctl *);
 extern void (*dtrace_modunload)(struct modctl *);
-extern void (*dtrace_helpers_cleanup)();
+extern void (*dtrace_helpers_cleanup)(proc_t *);
 extern void (*dtrace_helpers_fork)(proc_t *parent, proc_t *child);
 extern void (*dtrace_cpustart_init)();
 extern void (*dtrace_cpustart_fini)();
-- 
2.21.0

