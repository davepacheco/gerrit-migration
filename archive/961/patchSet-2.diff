From e42a6df91b77eccae96162228a2d49d59de560e8 Mon Sep 17 00:00:00 2001
From: Yang Yong <yy1111.yang@samsung.com>
Date: Mon, 28 Nov 2016 16:56:39 +0900
Subject: [PATCH] joyent/node-triton#146 triton instance rename --wait

---
 lib/do_instance/do_rename.js |  33 +++++++----
 lib/tritonapi.js             | 105 ++++++++++++++++++++++++++++++++---
 2 files changed, 120 insertions(+), 18 deletions(-)

diff --git a/lib/do_instance/do_rename.js b/lib/do_instance/do_rename.js
index a89c306..c9776d7 100644
--- a/lib/do_instance/do_rename.js
+++ b/lib/do_instance/do_rename.js
@@ -4,14 +4,8 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/.
  */
 
-var common = require('../common');
 var errors = require('../errors');
 
-
-function perror(err) {
-    console.error('error: %s', err.message);
-}
-
 function do_rename(subcmd, opts, args, callback) {
     var self = this;
     if (opts.help) {
@@ -24,13 +18,17 @@ function do_rename(subcmd, opts, args, callback) {
         callback(new errors.UsageError('missing NEWNAME arg'));
         return;
     }
-    var cOpts = {id: args[0], name: args[1]};
-    self.top.tritonapi.renameInstance(cOpts, function (err) {
+
+    self.top.tritonapi.renameInstance({
+        id: args[0],
+        name: args[1],
+        wait: opts.wait,
+        waitTimeout: opts.wait_timeout * 1000
+    }, function (err) {
        if (err) {
            callback(err);
            return;
         }
-        console.log('Renamed instance %s to "%s"', cOpts.id, cOpts.name);
         callback();
     });
 }
@@ -41,6 +39,18 @@ do_rename.options = [
         names: ['help', 'h'],
         type: 'bool',
         help: 'Show this help.'
+    },
+    {
+        names: ['wait', 'w'],
+        type: 'bool',
+        help: 'Block until renaming instance is complete.'
+    },
+    {
+        names: ['wait-timeout'],
+        type: 'positiveInteger',
+        default: 120,
+        help: 'The number of seconds to wait before timing out with an error. '
+            + 'The default is 120 seconds.'
     }
 ];
 
@@ -53,7 +63,10 @@ do_rename.help = [
     '',
     '{{options}}',
     'Where "INST" is an instance name, id, or short id',
-    'and "NEWNAME" is an instance name.'
+    'and "NEWNAME" is an instance name.',
+    '',
+    'Changing instance name is asynchronous. Use "--wait" to not return until',
+    'the changes are completed.'
 ].join('\n');
 
 do_rename.completionArgtypes = ['tritoninstance', 'none'];
diff --git a/lib/tritonapi.js b/lib/tritonapi.js
index 36e39fc..e33b534 100644
--- a/lib/tritonapi.js
+++ b/lib/tritonapi.js
@@ -2124,33 +2124,122 @@ TritonApi.prototype.deletePolicy = function deletePolicy(opts, cb) {
 /**
  * rename a machine by id.
  *
- * @param {Object} opts
- *      - id {UUID} or The machine name or shortID Required.
- *      - {String} name. The machine name
- * @param {Function} callback of the form `function (err, res)`
+ * @pa ram {Object} opts
+ *      - {String} id: The instance ID Required.
+ *      - {String} name: Required change new name
+ *      - {Boolean} wait: Wait (via polling) until the tag update is complete.
+ *        Warning: A concurrent tag update to the same tags can result in this
+ *        polling being unable to notice the change. Use `waitTimeout` to
+ *        put an upper bound.
+ *      - {Number} waitTimeout: The number of milliseconds after which to
+ *        timeout (call `cb` with a timeout error) waiting. Only relevant if
+ *        `opts.wait === true`. Default is Infinity (i.e. it doesn't timeout).
+ * @param {Function} callback of the form `function (err)`
  */
 TritonApi.prototype.renameInstance = function renameInstance(opts, cb) {
     assert.string(opts.id, 'opts.id');
     assert.string(opts.name, 'opts.name');
+    assert.optionalBool(opts.wait, 'opts.wait');
+    assert.optionalNumber(opts.waitTimeout, 'opts.waitTimeout');
     assert.func(cb, 'cb');
+
     var self = this;
-    var res;
 
     vasync.pipeline({arg: {client: self, id: opts.id}, funcs: [
         _stepInstId,
 
         function renameMachine(arg, next) {
             self.cloudapi.renameMachine({id: arg.instId, name: opts.name},
-                function (err, _res) {
-                    res = _res;
+                function (err) {
                     next(err);
             });
+        },
+
+        function waitForNameChanges(arg, next) {
+            if (!opts.wait) {
+                console.log('Renamed instance %s to "%s"', opts.id, opts.name);
+                next();
+                return;
+            }
+            self.waitForInstanceRenameChanges({
+                pId: opts.id,
+                id: arg.instId,
+                timeout: opts.waitTimeout,
+                name: opts.name
+            }, next);
         }
     ]}, function (err) {
-        cb(err, res);
+        cb(err);
     });
 };
 
+/**
+ * Shared implementation for any methods to change instance name.
+ *
+ * @param {Object} opts
+ *      - {String} id: The instance ID Required.
+ *      - {String} pId: The instance ID, name, or short ID. Required.
+ *      - {String} name: Required change new name
+ *      - {Boolean} wait: Wait (via polling) until the tag update is complete.
+ *        Warning: A concurrent tag update to the same tags can result in this
+ *        polling being unable to notice the change. Use `waitTimeout` to
+ *        put an upper bound.
+ *      - {Number} waitTimeout: The number of milliseconds after which to
+ *        timeout (call `cb` with a timeout error) waiting. Only relevant if
+ *        `opts.wait === true`. Default is Infinity (i.e. it doesn't timeout).
+ * @param {Function} cb: `function (err)`
+ */
+
+TritonApi.prototype.waitForInstanceRenameChanges =
+function waitForInstanceRenameChanges(opts, cb) {
+    var self = this;
+    assert.object(opts, 'opts');
+    assert.uuid(opts.id, 'opts.id');
+    assert.string(opts.pId, 'opts.pId');
+    assert.optionalNumber(opts.timeout, 'opts.timeout');
+    var timeout = opts.hasOwnProperty('timeout') ? opts.timeout : Infinity;
+    assert.ok(timeout > 0, 'opts.timeout must be greater than zero');
+    assert.string(opts.name, 'opts.name');
+    assert.func(cb, 'cb');
+
+    /*
+     * Hardcoded 2s poll interval for now. Not yet configurable, being mindful
+     * of avoiding lots of clients naively swamping a CloudAPI and hitting
+     * throttling.
+     */
+    var POLL_INTERVAL = 2 * 1000;
+
+    var startTime = Date.now();
+
+    var poll = function () {
+        self.cloudapi.getMachine({id: opts.id}, function (err, machine) {
+            if (err) {
+                cb(err);
+                return;
+            }
+            if (opts.name === machine.name) {
+                var dur = common.humanDurationFromMs(Date.now() - startTime);
+                console.log('Renamed instance %s to "%s" (%s)',
+                    opts.pId, opts.name, dur);
+                cb();
+                return;
+
+            } else {
+                var elapsedTime = Date.now() - startTime;
+                if (elapsedTime > timeout) {
+                    cb(new errors.TimeoutError(format('timeout waiting for '
+                        + 'name changes on instance %s (elapsed %ds)',
+                        opts.id, Math.round(elapsedTime / 1000))));
+                } else {
+                    setTimeout(poll, POLL_INTERVAL);
+                }
+            }
+        });
+    };
+
+    setImmediate(poll);
+};
+
 //---- exports
 
 module.exports = {
-- 
2.21.0

