commit d2a2a31095ac43ebdb6dd7e1f436fb94a407007c (refs/changes/61/961/1)
Author: Yang Yong <yy1111.yang@samsung.com>
Date:   2016-11-29T10:13:03+09:00 (2 years, 10 months ago)
    
    joyent/node-triton#146 triton instance rename --wait

diff --git a/lib/cloudapi2.js b/lib/cloudapi2.js
index eab9822..343f772 100644
--- a/lib/cloudapi2.js
+++ b/lib/cloudapi2.js
@@ -884,6 +884,45 @@ function waitForMachineStates(opts, callback) {
     }
 };
 
+/**
+ * Wait for a machine to be renamed.
+ *
+ * @param {Object} options
+ *      - {String} id - machine UUID
+ *      - {String} name - desired name
+ *      - {Number} interval (optional) - time in ms to poll
+ * @param {Function} callback - called when state is reached or on error
+ */
+CloudApi.prototype.waitForInstanceNameChange =
+function waitForInstanceNameChange(opts, callback) {
+    var self = this;
+    assert.object(opts, 'opts');
+    assert.uuid(opts.id, 'opts.id');
+    assert.string(opts.name, 'opts.name');
+    assert.optionalNumber(opts.interval, 'opts.interval');
+    assert.func(callback, 'callback');
+    var interval = (opts.interval === undefined ? 1000 : opts.interval);
+    assert.ok(interval > 0, 'interval must be a positive number');
+
+    poll();
+
+    function poll() {
+        self.getMachine(opts.id, function (err, machine, res) {
+            if (err) {
+                callback(err, null, res);
+                return;
+            }
+
+            if (opts.name === machine.name) {
+                callback(null, machine, res);
+                return;
+            }
+            setTimeout(poll, interval);
+        });
+    }
+};
+
+
 /**
  * List the account's machines.
  * <http://apidocs.joyent.com/cloudapi/#ListMachines>
diff --git a/lib/do_instance/do_rename.js b/lib/do_instance/do_rename.js
index a89c306..905120b 100644
--- a/lib/do_instance/do_rename.js
+++ b/lib/do_instance/do_rename.js
@@ -24,14 +24,35 @@ function do_rename(subcmd, opts, args, callback) {
         callback(new errors.UsageError('missing NEWNAME arg'));
         return;
     }
+    var now = Date.now();
     var cOpts = {id: args[0], name: args[1]};
-    self.top.tritonapi.renameInstance(cOpts, function (err) {
+    self.top.tritonapi.renameInstance(cOpts, function (err, inst) {
        if (err) {
            callback(err);
            return;
         }
-        console.log('Renamed instance %s to "%s"', cOpts.id, cOpts.name);
-        callback();
+
+        if (!opts.wait) {
+            console.log('Renamed instance %s to "%s"', cOpts.id, cOpts.name);
+            callback();
+            return;
+        }
+
+        self.top.tritonapi.cloudapi.waitForInstanceNameChange({
+            id: inst.id,
+            name: cOpts.name
+         }, function (err2) {
+            if (err2) {
+                perror(err2);
+                callback(err2);
+                return;
+            }
+
+            var dur = common.humanDurationFromMs(Date.now() - now);
+            console.log('Renamed instance %s to "%s" (%s)',
+                cOpts.id, cOpts.name, dur);
+            callback();
+        });
     });
 }
 
@@ -41,6 +62,11 @@ do_rename.options = [
         names: ['help', 'h'],
         type: 'bool',
         help: 'Show this help.'
+    },
+    {
+        names: ['wait', 'w'],
+        type: 'bool',
+        help: 'Block until renaming instance is complete.'
     }
 ];
 
diff --git a/lib/tritonapi.js b/lib/tritonapi.js
index 36e39fc..7c1af0b 100644
--- a/lib/tritonapi.js
+++ b/lib/tritonapi.js
@@ -2142,6 +2142,7 @@ TritonApi.prototype.renameInstance = function renameInstance(opts, cb) {
         function renameMachine(arg, next) {
             self.cloudapi.renameMachine({id: arg.instId, name: opts.name},
                 function (err, _res) {
+                    _res.id = arg.instId;
                     res = _res;
                     next(err);
             });
