From c5bbc8a6ebb3d5f7b5306b117f02be492514e846 Mon Sep 17 00:00:00 2001
From: "Pedro P. Candel" <pedro@joyent.com>
Date: Mon, 29 Aug 2016 17:53:44 +0200
Subject: [PATCH] TOOLS-1534 sdcadm avail should ignore number of service
 instances

---
 lib/cli/do_avail.js     |   3 +-
 lib/procedures/index.js |  32 +++++++----
 lib/sdcadm.js           |   3 +-
 test/available.test.js  | 123 ++++++++++++++++++++++++++++++++++++++++
 4 files changed, 148 insertions(+), 13 deletions(-)
 create mode 100644 test/available.test.js

diff --git a/lib/cli/do_avail.js b/lib/cli/do_avail.js
index aeae126..cf6a528 100644
--- a/lib/cli/do_avail.js
+++ b/lib/cli/do_avail.js
@@ -106,7 +106,6 @@ Available.prototype.execute = function cExecute(opts, args, cb) {
         }
 
         var rows = [];
-
         var chgs = plan.changes.slice();
         chgs.forEach(function (ch) {
             /*
@@ -136,7 +135,7 @@ Available.prototype.execute = function cExecute(opts, args, cb) {
                     if (imgs.length === 1) {
                         installedImg = imgs[0];
                     }
-                } else {
+                } else if (ch.inst && ch.inst.Image) {
                     installedImg = ch.inst.image;
                 }
 
diff --git a/lib/procedures/index.js b/lib/procedures/index.js
index 7611c94..eb5acb7 100644
--- a/lib/procedures/index.js
+++ b/lib/procedures/index.js
@@ -81,7 +81,9 @@ function coordinatePlan(opts, cb) {
         'opts.serverFromUuidOrHostname');
     assert.optionalBool(opts.noVerbose, 'opts.noVerbose');
     assert.optionalArrayOfString(opts.servers, 'opts.servers');
+    assert.optionalBool(opts.justAvailable, 'opts.justAvailable');
     assert.func(cb, 'cb');
+
     var log = opts.log;
     var progress = opts.progress || function () {};
     var sdcadm = opts.sdcadm;
@@ -192,11 +194,16 @@ function coordinatePlan(opts, cb) {
                         // Push an instance-less service update
                         handle.push(change);
                     } else if (svcInsts.length !== 1) {
-                        log.debug({
-                                numInsts: svcInsts.length,
-                                svc: change.service.name
-                            }, 'UpdateStatelessServicesV1 skip change: ' +
-                            'not 1 inst');
+                        if (opts.justAvailable) {
+                            change.insts = svcInsts;
+                            handle.push(change);
+                        } else {
+                            log.debug({
+                                    numInsts: svcInsts.length,
+                                    svc: change.service.name
+                                }, 'UpdateStatelessServicesV1 skip change: ' +
+                                'not 1 inst');
+                        }
                     } else if (svcInsts[0].hostname !== currHostname) {
                         log.debug({
                                 svc: change.service.name,
@@ -286,11 +293,16 @@ function coordinatePlan(opts, cb) {
                     change.service.name === 'ufds')
                 {
                     if (svcInsts.length !== 1) {
-                        log.debug({
-                                numInsts: svcInsts.length,
-                                svc: change.service.name
-                            }, 'UpdateUFDSServiceV1 skip change: ' +
-                            'not 1 inst');
+                        if (opts.justAvailable) {
+                            change.insts = svcInsts;
+                            handle.push(change);
+                        } else {
+                            log.debug({
+                                    numInsts: svcInsts.length,
+                                    svc: change.service.name
+                                }, 'UpdateUFDSServiceV1 skip change: ' +
+                                'not 1 inst');
+                        }
                     } else if (svcInsts[0].hostname !== currHostname) {
                         log.debug({
                                 svc: change.service.name,
diff --git a/lib/sdcadm.js b/lib/sdcadm.js
index e33c8de..e74fc0d 100644
--- a/lib/sdcadm.js
+++ b/lib/sdcadm.js
@@ -3787,7 +3787,8 @@ SdcAdm.prototype.genUpdatePlan = function genUpdatePlan(options, cb) {
                 log: log,
                 progress: progress,
                 noVerbose: options.noVerbose,
-                servers: options.servers || []
+                servers: options.servers || [],
+                justAvailable: options.justAvailable
             }, function (err, procs_) {
                 plan.procs = procs_;
                 next(err);
diff --git a/test/available.test.js b/test/available.test.js
new file mode 100644
index 0000000..4ea3bed
--- /dev/null
+++ b/test/available.test.js
@@ -0,0 +1,123 @@
+/*
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+/*
+ * Copyright 2016, Joyent, Inc.
+ */
+
+
+var test = require('tape').test;
+
+var exec = require('child_process').exec;
+var util = require('util');
+
+var common = require('./common');
+
+var AVAIL_TITLES = ['SERVICE', 'IMAGE', 'VERSION'];
+
+
+function parseAvailOutput(t, output, expectedTitles) {
+    var availDetails = common.parseTextOut(output);
+    t.ok(availDetails.length > 0);
+
+    var titles = availDetails.shift();
+    t.deepEqual(titles, expectedTitles || AVAIL_TITLES,
+                'check column titles');
+
+    return availDetails;
+}
+
+
+test('sdcadm available --help', function (t) {
+    exec('sdcadm available --help', function (err, stdout, stderr) {
+        t.ifError(err);
+
+        t.notEqual(stdout.indexOf(
+                    'sdcadm avail(able) [<options>] [<svc>]'), -1);
+        t.equal(stderr, '');
+
+        t.end();
+    });
+});
+
+
+test('sdcadm avail', function (t) {
+    exec('sdcadm avail', function (err, stdout, stderr) {
+        t.ifError(err, 'Execution error');
+        t.equal(stderr, '', 'Empty stderr');
+
+        var availDetails = parseAvailOutput(t, stdout);
+        var foundSvcs = [];
+        availDetails.forEach(function (svc) {
+            t.equal(svc.length, 3, 'Service version and image');
+            t.equal(foundSvcs.indexOf(svc[0]), -1, 'Duplicated service');
+            foundSvcs.push(svc[0]);
+        });
+        t.end();
+    });
+
+});
+
+
+test('sdcadm available --all-images', function (t) {
+    exec('sdcadm available --all-images', function (err, stdout, stderr) {
+        t.ifError(err, 'Execution error');
+        t.equal(stderr, '', 'Empty stderr');
+
+        var availDetails = parseAvailOutput(t, stdout);
+        availDetails.forEach(function (svc) {
+            t.equal(svc.length, 3, 'Service version and image');
+        });
+        t.end();
+    });
+
+});
+
+
+test('sdcadm avail -a manta', function (t) {
+    exec('sdcadm avail -a manta', function (err, stdout, stderr) {
+        t.ifError(err, 'Execution error');
+        t.equal(stderr, '', 'Empty stderr');
+
+        var availDetails = parseAvailOutput(t, stdout);
+        availDetails.forEach(function (svc) {
+            t.equal(svc.length, 3, 'Service version and image');
+        });
+        t.end();
+    });
+
+});
+
+
+test('sdcadm avail unknown', function (t) {
+    exec('sdcadm avail unknown', function (err, stdout, stderr) {
+        t.ok(err, 'Unknown service error');
+        t.notEqual(stderr.indexOf(
+                    'unknown SDC instance or service "unknown"'), -1);
+        t.end();
+    });
+
+});
+
+
+test('sdcadm avail --json', function (t) {
+    exec('sdcadm avail --json', function (err, stdout, stderr) {
+        t.ifError(err, 'Execution error');
+        t.equal(stderr, '', 'Empty stderr');
+
+        var foundSvcs = [];
+        var jsonDetails = common.parseJsonOut(stdout);
+        jsonDetails.forEach(function (svc) {
+            t.ok(svc.service, 'Service name');
+            t.ok(svc.image, 'Available service Image');
+            t.ok(svc.version, 'Available service version');
+            t.equal(foundSvcs.indexOf(svc.service), -1, 'Duplicated service');
+            foundSvcs.push(svc.service);
+        });
+        t.end();
+    });
+
+});
-- 
2.21.0

