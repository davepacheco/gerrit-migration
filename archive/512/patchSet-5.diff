commit 96e30943385c535f082f1e32b47cb61090a23482 (refs/changes/12/512/5)
Author: Marsell Kukuljevic <marsell@joyent.com>
Date:   2016-11-30T22:57:09+13:00 (2 years, 10 months ago)
    
    DAPI-324 - Add support for external functions to pipeline.

diff --git a/Makefile b/Makefile
index 8a1d06f..4c42995 100644
--- a/Makefile
+++ b/Makefile
@@ -57,9 +57,13 @@ all: $(TAPE) $(REPO_DEPS)
 $(TAPE): | $(NPM_EXEC)
 	$(NPM) install
 
-.PHONY: test
+.PHONY: test plugins_test
 test: $(TAPE)
 	$(TAPE) test/*.test.js test/algorithms/*.test.js
 
+plugins_test: $(TAPE)
+	$(TAPE) test/algorithms/*.test.js
+
+
 include ./tools/mk/Makefile.deps
 include ./tools/mk/Makefile.targ
diff --git a/bin/sim.js b/bin/sim.js
index 830e27e..af0c472 100644
--- a/bin/sim.js
+++ b/bin/sim.js
@@ -380,15 +380,17 @@ function calculateServerUtilization(server) {
  */
 
 function createAllocator() {
-	var log = {
-		info:  function () {},
-		warn:  function () {},
-		debug: function () {},
-		error: function () {},
-		trace: function () {}
+	var sys = {
+		log: {
+			info:  function () {},
+			warn:  function () {},
+			debug: function () {},
+			error: function () {},
+			trace: function () {}
+		}
 	};
 
-	var allocator = new Allocator(log, ALLOC_CHAIN, ALLOC_DEFAULTS);
+	var allocator = new Allocator(sys, ALLOC_CHAIN, ALLOC_DEFAULTS);
 
 	return (allocator);
 }
diff --git a/lib/algorithms/calculate-server-unreserved.js b/lib/algorithms/calculate-server-unreserved.js
index 6c3ef24..d504ccd 100644
--- a/lib/algorithms/calculate-server-unreserved.js
+++ b/lib/algorithms/calculate-server-unreserved.js
@@ -41,12 +41,11 @@ var POOL_USABLE_RATIO = 0.94;
 
 
 function
-calculateServerUnreserved(log, servers, constraints, cb)
+calculateServerUnreserved(servers, opts, cb)
 {
-	assert.object(log);
-	assert.arrayOfObject(servers);
-	assert.object(constraints);
-	assert.func(cb);
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
 
 	servers.forEach(function (server) {
 		var vms;
diff --git a/lib/algorithms/calculate-ticketed-vms.js b/lib/algorithms/calculate-ticketed-vms.js
index 7a42d9c..5ef2168 100644
--- a/lib/algorithms/calculate-ticketed-vms.js
+++ b/lib/algorithms/calculate-ticketed-vms.js
@@ -27,14 +27,13 @@ var GiB = 1024 * 1024 * 1024;
 
 
 function
-addTicketedVms(log, servers, constraints, cb)
+addTicketedVms(servers, opts, cb)
 {
-	assert.object(log);
-	assert.arrayOfObject(servers);
-	assert.object(constraints);
-	assert.func(cb);
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
 
-	var serversWithOpenTickets = findOpenTickets(constraints.tickets);
+	var serversWithOpenTickets = findOpenTickets(opts.tickets);
 
 	servers = servers.filter(function (server) {
 		var tickets = serversWithOpenTickets[server.uuid];
diff --git a/lib/algorithms/hard-filter-capness.js b/lib/algorithms/hard-filter-capness.js
index 5342970..935ed45 100644
--- a/lib/algorithms/hard-filter-capness.js
+++ b/lib/algorithms/hard-filter-capness.js
@@ -35,17 +35,15 @@
 var assert = require('assert-plus');
 
 function
-filterCapness(log, servers, constraints, cb)
+filterCapness(servers, opts, cb)
 {
-	assert.object(log);
-	assert.arrayOfObject(servers);
-	assert.object(constraints);
-	assert.func(cb);
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
 
-	var pkg = constraints.pkg;
 	var reasons = {};
 
-	var pkgCapness = !!(constraints.vm.cpu_cap || (pkg && pkg.cpu_cap));
+	var pkgCapness = !!(opts.vm.cpu_cap || (opts.pkg && opts.pkg.cpu_cap));
 
 	var adequateServers = servers.filter(function checkServer(server) {
 		var vms = server.vms;
diff --git a/lib/algorithms/hard-filter-headnode.js b/lib/algorithms/hard-filter-headnode.js
index a075af2..c4feb9b 100644
--- a/lib/algorithms/hard-filter-headnode.js
+++ b/lib/algorithms/hard-filter-headnode.js
@@ -15,16 +15,15 @@
 var assert = require('assert-plus');
 
 function
-filterHeadnode(log, servers, constraints, cb)
+filterHeadnode(servers, opts, cb)
 {
-	assert.object(log);
-	assert.arrayOfObject(servers);
-	assert.object(constraints);
-	assert.func(cb);
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
 
 	var reasons = {};
 
-	var override = constraints.defaults.filter_headnode;
+	var override = opts.defaults.filter_headnode;
 	if (typeof (override) !== 'undefined' && !override) {
 		reasons.skip = 'Do not filter out headnodes';
 		return (cb(null, servers, reasons));
diff --git a/lib/algorithms/hard-filter-invalid-servers.js b/lib/algorithms/hard-filter-invalid-servers.js
index b171250..4acf214 100644
--- a/lib/algorithms/hard-filter-invalid-servers.js
+++ b/lib/algorithms/hard-filter-invalid-servers.js
@@ -16,13 +16,13 @@ var assert = require('assert-plus');
 var validations = require('../validations');
 
 function
-filterInvalidServers(log, servers, constraints, cb)
+filterInvalidServers(servers, opts, cb)
 {
-	assert.object(log);
-	assert.arrayOfObject(servers);
-	assert.object(constraints);
-	assert.func(cb);
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
 
+	var log = opts.log;
 	var reasons = {};
 
 	var validServers = servers.filter(function (server) {
diff --git a/lib/algorithms/hard-filter-large-servers.js b/lib/algorithms/hard-filter-large-servers.js
index 47be57b..67de1bd 100644
--- a/lib/algorithms/hard-filter-large-servers.js
+++ b/lib/algorithms/hard-filter-large-servers.js
@@ -22,17 +22,15 @@ var assert = require('assert-plus');
 var LARGE_POOL_RATIO = 0.15;
 
 function
-filterLargeServers(log, servers, constraints, cb)
+filterLargeServers(servers, opts, cb)
 {
-	assert.object(log);
-	assert.arrayOfObject(servers);
-	assert.object(constraints);
-	assert.func(cb);
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
 
-	var pool;
 	var reasons = {};
 	var largePoolSize = servers.length * LARGE_POOL_RATIO;
-	var override = constraints.defaults.filter_large_servers;
+	var override = opts.defaults.filter_large_servers;
 
 	if (typeof (override) !== 'undefined' && !override) {
 		reasons.skip = 'Do not filter out large servers';
@@ -49,7 +47,7 @@ filterLargeServers(log, servers, constraints, cb)
 		return (b.unreserved_ram - a.unreserved_ram);
 	});
 
-	pool = servers.slice(largePoolSize, servers.length);
+	var pool = servers.slice(largePoolSize, servers.length);
 
 	return (cb(null, pool, reasons));
 }
diff --git a/lib/algorithms/hard-filter-locality-hints.js b/lib/algorithms/hard-filter-locality-hints.js
index 7db9372..1e04943 100644
--- a/lib/algorithms/hard-filter-locality-hints.js
+++ b/lib/algorithms/hard-filter-locality-hints.js
@@ -23,18 +23,17 @@ var shared = require('./shared/locality-hints');
 
 
 /**
- * Filter `servers` according to `constraints.vm.locality` rules.
+ * Filter `servers` according to `opts.vm.locality` rules.
  */
 function
-filterHardLocality(log, servers, constraints, cb)
+filterHardLocality(servers, opts, cb)
 {
-	assert.object(log, 'log');
 	assert.arrayOfObject(servers, 'servers');
-	assert.object(constraints, 'constraints');
-	assert.uuid(constraints.vm.owner_uuid, 'constraints.vm.owner_uuid');
-	assert.func(cb);
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
 
-	var ownerUuid = constraints.vm.owner_uuid;
+	var ownerUuid = opts.vm.owner_uuid;
+	assert.uuid(ownerUuid, 'opts.vm.owner_uuid');
 	var reasons = {};
 
 	if (servers.length === 0)
@@ -42,9 +41,8 @@ filterHardLocality(log, servers, constraints, cb)
 
 	// Parse "locality". See format notes in soft-filter-locality-hints.js
  	// top comment.
-	assert.optionalObject(constraints.vm.locality,
-		'constraints.vm.locality');
-	var locality = constraints.vm.locality || {};
+	assert.optionalObject(opts.vm.locality, 'opts.vm.locality');
+	var locality = opts.vm.locality || {};
 	assert.optionalBool(locality.strict, 'locality.strict');
 	var strict = Boolean(locality.strict);
 
diff --git a/lib/algorithms/hard-filter-min-cpu.js b/lib/algorithms/hard-filter-min-cpu.js
index b662163..1ccfb4c 100644
--- a/lib/algorithms/hard-filter-min-cpu.js
+++ b/lib/algorithms/hard-filter-min-cpu.js
@@ -16,16 +16,15 @@
 var assert = require('assert-plus');
 
 function
-filterMinCpu(log, servers, constraints, cb)
+filterMinCpu(servers, opts, cb)
 {
-	assert.object(log);
-	assert.arrayOfObject(servers);
-	assert.object(constraints);
-	assert.func(cb);
-
-	var override = constraints.defaults.filter_min_resources;
-	var vm       = constraints.vm;
-	var pkg      = constraints.pkg;
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
+
+	var override = opts.defaults.filter_min_resources;
+	var vm       = opts.vm;
+	var pkg      = opts.pkg;
 	var reasons  = {};
 	var filter;
 
diff --git a/lib/algorithms/hard-filter-min-disk.js b/lib/algorithms/hard-filter-min-disk.js
index 33ffe66..b8e9147 100644
--- a/lib/algorithms/hard-filter-min-disk.js
+++ b/lib/algorithms/hard-filter-min-disk.js
@@ -19,17 +19,16 @@ var MiB = 1024 * 1024;
 var FUDGE_MB = 10 * 1024; // leave 10GiB additional space, just in case
 
 function
-filterMinDisk(log, servers, constraints, cb)
+filterMinDisk(servers, opts, cb)
 {
-	assert.object(log);
-	assert.arrayOfObject(servers);
-	assert.object(constraints);
-	assert.func(cb);
-
-	var override = constraints.defaults.filter_min_resources;
-	var img = constraints.img;
-	var pkg = constraints.pkg;
-	var vm  = constraints.vm;
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
+
+	var override = opts.defaults.filter_min_resources;
+	var img = opts.img;
+	var pkg = opts.pkg;
+	var vm  = opts.vm;
 	var reasons = {};
 	var filter;
 
@@ -80,7 +79,7 @@ filterMinDisk(log, servers, constraints, cb)
 				return (true);
 
 			// if pkg was not provided, assume ratio does not matter
-			if (!constraints.pkg)
+			if (!pkg)
 				return (true);
 
 			var msg = 'Package gave no disk overprovision ratio, ' +
diff --git a/lib/algorithms/hard-filter-min-ram.js b/lib/algorithms/hard-filter-min-ram.js
index 01056ad..d6e8377 100644
--- a/lib/algorithms/hard-filter-min-ram.js
+++ b/lib/algorithms/hard-filter-min-ram.js
@@ -16,16 +16,15 @@
 var assert = require('assert-plus');
 
 function
-filterMinRam(log, servers, constraints, cb)
+filterMinRam(servers, opts, cb)
 {
-	assert.object(log);
-	assert.arrayOfObject(servers);
-	assert.object(constraints);
-	assert.func(cb);
-
-	var override = constraints.defaults.filter_min_resources;
-	var vm = constraints.vm;
-	var pkg = constraints.pkg;
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
+
+	var override = opts.defaults.filter_min_resources;
+	var vm  = opts.vm;
+	var pkg = opts.pkg;
 	var reasons = {};
 	var filter;
 
@@ -58,7 +57,7 @@ filterMinRam(log, servers, constraints, cb)
 				return (true);
 
 			// if pkg was not provided, assume ratio does not matter
-			if (!constraints.pkg)
+			if (!pkg)
 				return (true);
 
 			var msg = 'Package gave no RAM overprovision ' +
diff --git a/lib/algorithms/hard-filter-overprovision-ratios.js b/lib/algorithms/hard-filter-overprovision-ratios.js
index 84d68da..d674dc5 100644
--- a/lib/algorithms/hard-filter-overprovision-ratios.js
+++ b/lib/algorithms/hard-filter-overprovision-ratios.js
@@ -32,14 +32,13 @@ var OP_KEY_MATCH = [['cpu',  'overprovision_cpu' ],
 					['net',  'overprovision_net' ]];
 
 function
-filterOverprovisionRatios(log, servers, constraints, cb)
+filterOverprovisionRatios(servers, opts, cb)
 {
-	assert.object(log);
-	assert.arrayOfObject(servers);
-	assert.object(constraints);
-	assert.func(cb);
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
 
-	var pkg = constraints.pkg;
+	var pkg = opts.pkg;
 	var reasons = {};
 
 	if (!pkg) {
diff --git a/lib/algorithms/hard-filter-owners-servers.js b/lib/algorithms/hard-filter-owners-servers.js
index baa32fc..60c7f2a 100644
--- a/lib/algorithms/hard-filter-owners-servers.js
+++ b/lib/algorithms/hard-filter-owners-servers.js
@@ -28,15 +28,15 @@ var assert = require('assert-plus');
 
 
 function
-filterServersByOwners(log, servers, constraints, cb)
+filterServersByOwners(servers, opts, cb)
 {
-	assert.object(log);
-	assert.arrayOfObject(servers);
-	assert.object(constraints);
-	assert.func(cb);
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
 
-	var ownerUuid = constraints.vm.owner_uuid;
-	var filters = constraints.defaults.filter_owner_server;
+	var log = opts.log;
+	var ownerUuid = opts.vm.owner_uuid;
+	var filters = opts.defaults.filter_owner_server;
 	var reasons = {};
 
 	if (!filters) {
diff --git a/lib/algorithms/hard-filter-platform-versions.js b/lib/algorithms/hard-filter-platform-versions.js
index a5e7f4a..d4a5bd1 100644
--- a/lib/algorithms/hard-filter-platform-versions.js
+++ b/lib/algorithms/hard-filter-platform-versions.js
@@ -22,26 +22,25 @@ var assert = require('assert-plus');
 var VERSION_RE = /^\d+\.\d+$/;
 
 function
-filterPlatformVersions(log, servers, constraints, cb)
+filterPlatformVersions(servers, opts, cb)
 {
-	assert.object(log);
-	assert.arrayOfObject(servers);
-	assert.object(constraints);
-	assert.func(cb);
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
 
 	var reasons = {};
 
-	var pkgMinPlatforms = constraints.pkg && constraints.pkg.min_platform;
+	var pkgMinPlatforms = opts.pkg && opts.pkg.min_platform;
 	if (pkgMinPlatforms)
 		servers = filterMinPlatforms(pkgMinPlatforms, servers, reasons);
 
-	var dkrMinPlatform = constraints.defaults.filter_docker_min_platform;
-	if (constraints.vm.docker && dkrMinPlatform) {
+	var dkrMinPlatform = opts.defaults.filter_docker_min_platform;
+	if (opts.vm.docker && dkrMinPlatform) {
 		var dkrMinPlatforms = { '7.0': dkrMinPlatform };
 		servers = filterMinPlatforms(dkrMinPlatforms, servers, reasons);
 	}
 
-	var img = constraints.img;
+	var img = opts.img;
 	if (!img.requirements)
 		return (cb(null, servers, reasons));
 
diff --git a/lib/algorithms/hard-filter-reserved.js b/lib/algorithms/hard-filter-reserved.js
index 1ba6acb..0576436 100644
--- a/lib/algorithms/hard-filter-reserved.js
+++ b/lib/algorithms/hard-filter-reserved.js
@@ -15,12 +15,11 @@
 var assert = require('assert-plus');
 
 function
-filterReserved(log, servers, constraints, cb)
+filterReserved(servers, opts, cb)
 {
-	assert.object(log);
-	assert.arrayOfObject(servers);
-	assert.object(constraints);
-	assert.func(cb);
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
 
 	var adequateServers = servers.filter(function (server) {
 		return (!server.reserved);
diff --git a/lib/algorithms/hard-filter-reservoir.js b/lib/algorithms/hard-filter-reservoir.js
index 9f2ee0e..0bba003 100644
--- a/lib/algorithms/hard-filter-reservoir.js
+++ b/lib/algorithms/hard-filter-reservoir.js
@@ -15,12 +15,11 @@
 var assert = require('assert-plus');
 
 function
-filterReservoir(log, servers, constraints, cb)
+filterReservoir(servers, opts, cb)
 {
-	assert.object(log);
-	assert.arrayOfObject(servers);
-	assert.object(constraints);
-	assert.func(cb);
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
 
 	var adequateServers = servers.filter(function (server) {
 		return (!server.reservoir);
diff --git a/lib/algorithms/hard-filter-running.js b/lib/algorithms/hard-filter-running.js
index 81f1793..a349f50 100644
--- a/lib/algorithms/hard-filter-running.js
+++ b/lib/algorithms/hard-filter-running.js
@@ -20,13 +20,13 @@
 var assert = require('assert-plus');
 
 function
-filterRunning(log, servers, constraints, cb)
+filterRunning(servers, opts, cb)
 {
 	// servers may not be the expected array
-	assert.object(log);
-	assert.object(constraints);
-	assert.func(cb);
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
 
+	var log = opts.log;
 	var reasons = {};
 	var adequateServers;
 
diff --git a/lib/algorithms/hard-filter-setup.js b/lib/algorithms/hard-filter-setup.js
index 9562825..0f9a69b 100644
--- a/lib/algorithms/hard-filter-setup.js
+++ b/lib/algorithms/hard-filter-setup.js
@@ -20,12 +20,11 @@
 var assert = require('assert-plus');
 
 function
-filterSetup(log, servers, constraints, cb)
+filterSetup(servers, opts, cb)
 {
 	// servers may not be the expected array
-	assert.object(log);
-	assert.object(constraints);
-	assert.func(cb);
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
 
 	var adequateServers;
 	var reasons = {};
diff --git a/lib/algorithms/hard-filter-sick-servers.js b/lib/algorithms/hard-filter-sick-servers.js
index 1a8606d..63bfb58 100644
--- a/lib/algorithms/hard-filter-sick-servers.js
+++ b/lib/algorithms/hard-filter-sick-servers.js
@@ -25,12 +25,11 @@ var assert = require('assert-plus');
 var DAY_IN_MS = 24 * 60 * 60 * 1000;
 
 function
-filterSickServers(log, servers, constraints, cb)
+filterSickServers(servers, opts, cb)
 {
-	assert.object(log);
-	assert.arrayOfObject(servers);
-	assert.object(constraints);
-	assert.func(cb);
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
 
 	var reasons = {};
 
diff --git a/lib/algorithms/hard-filter-traits.js b/lib/algorithms/hard-filter-traits.js
index 9d74645..a5826d7 100644
--- a/lib/algorithms/hard-filter-traits.js
+++ b/lib/algorithms/hard-filter-traits.js
@@ -20,16 +20,15 @@
 var assert = require('assert-plus');
 
 function
-filterTraits(log, servers, constraints, cb)
+filterTraits(servers, opts, cb)
 {
-	assert.object(log);
-	assert.arrayOfObject(servers);
-	assert.object(constraints);
-	assert.func(cb);
-
-	var imgTraits = constraints.img.traits;
-	var vmTraits  = (constraints.vm.traits ||
-		(constraints.pkg && constraints.pkg.traits));
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
+
+	var log = opts.log;
+	var imgTraits = opts.img.traits;
+	var vmTraits  = opts.vm.traits || (opts.pkg && opts.pkg.traits);
 	var requestedTraits = mergeTraits(vmTraits, imgTraits);
 	var reasons = {};
 	var traitNames;
diff --git a/lib/algorithms/hard-filter-vlans.js b/lib/algorithms/hard-filter-vlans.js
index aaf51e4..1f8cecf 100644
--- a/lib/algorithms/hard-filter-vlans.js
+++ b/lib/algorithms/hard-filter-vlans.js
@@ -26,14 +26,13 @@
 var assert = require('assert-plus');
 
 function
-filterVlans(log, servers, constraints, cb)
+filterVlans(servers, opts, cb)
 {
-	assert.object(log);
-	assert.arrayOfObject(servers);
-	assert.object(constraints);
-	assert.func(cb);
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
 
-	var requestedVlans = constraints.vm.nic_tags;
+	var requestedVlans = opts.vm.nic_tags;
 	var reasons = {};
 	var adequateServers;
 
diff --git a/lib/algorithms/hard-filter-vm-count.js b/lib/algorithms/hard-filter-vm-count.js
index 8f24f73..52d07ac 100644
--- a/lib/algorithms/hard-filter-vm-count.js
+++ b/lib/algorithms/hard-filter-vm-count.js
@@ -13,8 +13,8 @@
  *
  * By default, this plugin filters out servers with equal or more than
  * DEFAULT_VM_LIMIT VMs on it. However, if "filter_vm_limit" is set in the
- * constraint defaults, servers which have equal or more than than attribute's
- * number of VMs will be removed.
+ * defaults, servers which have equal or more than than attribute's number of
+ * VMs will be removed.
  */
 
 var assert = require('assert-plus');
@@ -23,14 +23,14 @@ var assert = require('assert-plus');
 var DEFAULT_VM_LIMIT = 224;
 
 function
-filterVmCount(log, servers, constraints, cb)
+filterVmCount(servers, opts, cb)
 {
-	assert.object(log);
-	assert.arrayOfObject(servers);
-	assert.object(constraints);
-	assert.func(cb);
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
 
-	var vmLimit = +constraints.defaults.filter_vm_limit || DEFAULT_VM_LIMIT;
+	var log = opts.log;
+	var vmLimit = +opts.defaults.filter_vm_limit || DEFAULT_VM_LIMIT;
 	var reasons = {};
 
 	log.trace('Filtering servers with more than', vmLimit, 'VMs');
diff --git a/lib/algorithms/hard-filter-volumes-from.js b/lib/algorithms/hard-filter-volumes-from.js
index 5373df1..f74a33b 100644
--- a/lib/algorithms/hard-filter-volumes-from.js
+++ b/lib/algorithms/hard-filter-volumes-from.js
@@ -16,18 +16,17 @@
 var assert = require('assert-plus');
 
 function
-filterVolumesFrom(log, servers, constraints, cb)
+filterVolumesFrom(servers, opts, cb)
 {
-	assert.object(log);
-	assert.arrayOfObject(servers);
-	assert.object(constraints);
-	assert.func(cb);
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
 
 	var adequateServers = servers;
 	var reasons = {};
 
 	function getMsg(serverUuid, vmUuid) {
-		log.trace('Due to volumes-from and missing source VM ' +
+		opts.log.trace('Due to volumes-from and missing source VM ' +
 		          vmUuid + ', omitting server: ' + serverUuid);
 		var msg = 'VM needs volumes from ' + vmUuid + ', which was ' +
 			'not found on server';
@@ -37,10 +36,10 @@ filterVolumesFrom(log, servers, constraints, cb)
 	adequateServers = servers.filter(function (server) {
 		var vms = server.vms;
 		var serverUuid = server.uuid;
-		var metadata = constraints.vm.internal_metadata;
+		var metadata = opts.vm.internal_metadata;
 
 		// this only applies to docker containers with volumes-from
-		if (!constraints.vm.docker || !metadata) {
+		if (!opts.vm.docker || !metadata) {
 			return (true);
 		}
 
diff --git a/lib/algorithms/identity.js b/lib/algorithms/identity.js
index 1aba694..6814c32 100644
--- a/lib/algorithms/identity.js
+++ b/lib/algorithms/identity.js
@@ -15,12 +15,11 @@
 var assert = require('assert-plus');
 
 function
-identity(log, servers, constraints, cb)
+identity(servers, opts, cb)
 {
-	assert.object(log);
-	assert.arrayOfObject(servers);
-	assert.object(constraints);
-	assert.func(cb);
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
 
 	return (cb(null, servers, {}));
 }
diff --git a/lib/algorithms/override-overprovisioning.js b/lib/algorithms/override-overprovisioning.js
index 765843a..ddc2453 100644
--- a/lib/algorithms/override-overprovisioning.js
+++ b/lib/algorithms/override-overprovisioning.js
@@ -36,15 +36,14 @@ var DEFAULT_RAM  = 1;
 var DEFAULT_DISK = 1;
 
 function
-overrideOverprovisioning(log, servers, constraints, cb)
+overrideOverprovisioning(servers, opts, cb)
 {
-	assert.object(log);
-	assert.arrayOfObject(servers);
-	assert.object(constraints);
-	assert.func(cb);
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
 
 	var reasons = {};
-	var defaults = constraints.defaults;
+	var defaults = opts.defaults;
 
 	if (defaults.disable_override_overprovisioning) {
 		reasons.skip = 'Do not override overprovisioning numbers';
@@ -65,7 +64,7 @@ overrideOverprovisioning(log, servers, constraints, cb)
 		server.overprovision_ratios = serverRatios;
 	});
 
-	var pkg = constraints.pkg;
+	var pkg = opts.pkg;
 
 	if (pkg) {
 		pkg.overprovision_cpu = cpuRatio;
diff --git a/lib/algorithms/score-current-platform.js b/lib/algorithms/score-current-platform.js
index eefb239..20549a7 100644
--- a/lib/algorithms/score-current-platform.js
+++ b/lib/algorithms/score-current-platform.js
@@ -27,12 +27,11 @@ var PLATFORM_RE = /^(\d{4})(\d\d)(\d\d)T(\d\d)(\d\d)(\d\d)Z$/;
 
 
 function
-scoreCurrentPlatform(log, servers, constraints, cb)
+scoreCurrentPlatform(servers, opts, cb)
 {
-	assert.object(log);
-	assert.arrayOfObject(servers);
-	assert.object(constraints);
-	assert.func(cb);
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
 
 	var reasons = {};
 
@@ -46,10 +45,10 @@ scoreCurrentPlatform(log, servers, constraints, cb)
 		return ([server, currentPlatform]);
 	});
 
-	var weight = +constraints.defaults.weight_current_platform;
+	var weight = +opts.defaults.weight_current_platform;
 
 	// add scores to servers
-	score(log, tuples, weight, reasons);
+	score(opts.log, tuples, weight, reasons);
 
 	return (cb(null, servers, reasons));
 }
diff --git a/lib/algorithms/score-next-reboot.js b/lib/algorithms/score-next-reboot.js
index 513d40b..8c383a0 100644
--- a/lib/algorithms/score-next-reboot.js
+++ b/lib/algorithms/score-next-reboot.js
@@ -29,12 +29,11 @@ var WEEK = 7 * 24 * 60 * 60 * 1000; // in ms
 
 
 function
-scoreNextReboot(log, servers, constraints, cb)
+scoreNextReboot(servers, opts, cb)
 {
-	assert.object(log);
-	assert.arrayOfObject(servers);
-	assert.object(constraints);
-	assert.func(cb);
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
 
 	var reasons = {};
 
@@ -92,12 +91,12 @@ scoreNextReboot(log, servers, constraints, cb)
 	if (bucket.length > 0)
 		buckets.push(bucket);
 
-	var weight = +constraints.defaults.weight_next_reboot;
+	var weight = +opts.defaults.weight_next_reboot;
 	if (weight < 0)
 		buckets.reverse();
 
 	// add scores to servers
-	score(log, buckets, Math.abs(weight), reasons);
+	score(opts.log, buckets, Math.abs(weight), reasons);
 
 	// return unsorted servers (but with mutated scores)
 	return (cb(null, servers, reasons));
diff --git a/lib/algorithms/score-num-owner-zones.js b/lib/algorithms/score-num-owner-zones.js
index 52a0f63..73bfbca 100644
--- a/lib/algorithms/score-num-owner-zones.js
+++ b/lib/algorithms/score-num-owner-zones.js
@@ -32,20 +32,20 @@ var MIN_OWNER_WEIGHT = 2;
 
 
 function
-scoreNumOwnerZones(log, servers, constraints, cb)
+scoreNumOwnerZones(servers, opts, cb)
 {
-	assert.object(log);
-	assert.arrayOfObject(servers);
-	assert.object(constraints);
-	assert.func(cb);
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
 
-	var ownerUuid = constraints.vm.owner_uuid;
+	var ownerUuid = opts.vm.owner_uuid;
+	var defaults = opts.defaults;
+	var pkg = opts.pkg;
 	var reasons = {};
 
 	// backwards compat
-	var serverSpread = (constraints.pkg &&
-		constraints.pkg.alloc_server_spread ||
-		constraints.defaults.server_spread);
+	var serverSpread = (pkg && pkg.alloc_server_spread) ||
+		defaults.server_spread;
 	if (serverSpread) {
 		if (serverSpread === 'min-owner') {
 			var compatWeight = MIN_OWNER_WEIGHT;
@@ -57,7 +57,6 @@ scoreNumOwnerZones(log, servers, constraints, cb)
 		}
 	}
 
-	var defaults = constraints.defaults;
 	var weight = compatWeight || +defaults.weight_num_owner_zones;
 	if (!weight) {
 		reasons.skip = 'Resolved score weight to 0.00; no changes';
@@ -93,7 +92,7 @@ scoreNumOwnerZones(log, servers, constraints, cb)
 
 	// alter scores; this mutates server objects referred to by both
 	// sortedServers and servers
-	score(log, orderedServers, Math.abs(weight), reasons);
+	score(opts.log, orderedServers, Math.abs(weight), reasons);
 
 	// update reasons with number of VMs found per server
 	Object.keys(deltas).forEach(function (uuid) {
diff --git a/lib/algorithms/score-uniform-random.js b/lib/algorithms/score-uniform-random.js
index 3c1da77..e99c8ba 100644
--- a/lib/algorithms/score-uniform-random.js
+++ b/lib/algorithms/score-uniform-random.js
@@ -27,19 +27,18 @@ var RANDOM_WEIGHT = 2;
 
 
 function
-scoreUniformRandom(log, servers, constraints, cb)
+scoreUniformRandom(servers, opts, cb)
 {
-	assert.object(log);
-	assert.arrayOfObject(servers);
-	assert.object(constraints);
-	assert.func(cb);
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
 
 	var reasons = {};
+	var pkg = opts.pkg;
 
 	// backwards compat
-	var serverSpread = (constraints.pkg &&
-		constraints.pkg.alloc_server_spread ||
-		constraints.defaults.server_spread);
+	var serverSpread = (pkg && pkg.alloc_server_spread) ||
+		opts.defaults.server_spread;
 
 	if (serverSpread) {
 		if (serverSpread === 'random') {
@@ -52,8 +51,7 @@ scoreUniformRandom(log, servers, constraints, cb)
 		}
 	}
 
-	var weight = compatWeight ||
-		+constraints.defaults.weight_uniform_random;
+	var weight = compatWeight || +opts.defaults.weight_uniform_random;
 	if (!weight) {
 		reasons.skip = 'Resolved score weight to 0; no changes';
 		return (cb(null, servers, reasons));
@@ -72,7 +70,7 @@ scoreUniformRandom(log, servers, constraints, cb)
 
 	// alter scores; this mutates server objects referred to by both
 	// sortedServers and servers
-	score(log, sortedServers, Math.abs(weight), reasons);
+	score(opts.log, sortedServers, Math.abs(weight), reasons);
 
 	return (cb(null, servers, reasons));
 }
diff --git a/lib/algorithms/score-unreserved-disk.js b/lib/algorithms/score-unreserved-disk.js
index 23cc111..cc75ada 100644
--- a/lib/algorithms/score-unreserved-disk.js
+++ b/lib/algorithms/score-unreserved-disk.js
@@ -29,23 +29,28 @@ var score = require('../scorers').linear;
 
 
 function
-scoreUnreservedDisk(log, servers, constraints, cb)
+scoreUnreservedDisk(servers, opts, cb)
 {
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
+
 	var reasons = {};
+	var pkg = opts.pkg;
 
 	// if any pkg or default server_spread attributes set, we return
 	// immediately, since unreserved_disk was never supported for any of
 	// them
-	var serverSpread = (constraints.pkg &&
-		constraints.pkg.alloc_server_spread ||
-		constraints.defaults.server_spread);
+	var serverSpread = (pkg && pkg.alloc_server_spread) ||
+		opts.defaults.server_spread;
+
 	if (serverSpread) {
 		reasons.skip = 'pkg or default set to spread with: ' +
 			serverSpread;
 		return (cb(null, servers, reasons));
 	}
 
-	var weight = +constraints.defaults.weight_unreserved_disk;
+	var weight = +opts.defaults.weight_unreserved_disk;
 	if (weight === 0) {
 		reasons.skip = 'Resolved score weight to 0.00; no changes';
 		return (cb(null, servers, reasons));
@@ -61,7 +66,7 @@ scoreUnreservedDisk(log, servers, constraints, cb)
 
 	// alter scores; this mutates server objects referred to by both
 	// sortedServers and servers
-	score(log, sortedServers, Math.abs(weight), reasons);
+	score(opts.log, sortedServers, Math.abs(weight), reasons);
 
 	return (cb(null, servers, reasons));
 }
diff --git a/lib/algorithms/score-unreserved-ram.js b/lib/algorithms/score-unreserved-ram.js
index 066421e..d7cdb03 100644
--- a/lib/algorithms/score-unreserved-ram.js
+++ b/lib/algorithms/score-unreserved-ram.js
@@ -32,24 +32,22 @@ var MAX_RAM_WEIGHT = -2;
 
 
 function
-scoreUnreservedRam(log, servers, constraints, cb)
+scoreUnreservedRam(servers, opts, cb)
 {
-	assert.object(log);
-	assert.arrayOfObject(servers);
-	assert.object(constraints);
-	assert.func(cb);
+	assert.arrayOfObject(servers, 'servers');
+	assert.object(opts, 'opts');
+	assert.func(cb, 'cb');
 
 	var reasons = {};
 
 	// backwards compat
-	var compatWeight = getCompatWeight(constraints);
+	var compatWeight = getCompatWeight(opts);
 	if (compatWeight === 0) {
 		reasons.skip = 'pkg or default set to score with other plugin';
 		return (cb(null, servers, reasons));
 	}
 
-	var weight = compatWeight ||
-		+constraints.defaults.weight_unreserved_ram;
+	var weight = compatWeight || +opts.defaults.weight_unreserved_ram;
 	if (!weight) {
 		reasons.skip = 'Resolved score weight to 0.00; no changes';
 		return (cb(null, servers, reasons));
@@ -65,7 +63,7 @@ scoreUnreservedRam(log, servers, constraints, cb)
 
 	// alter scores; this mutates server objects referred to by both
 	// sortedServers and servers
-	score(log, sortedServers, Math.abs(weight), reasons);
+	score(opts.log, sortedServers, Math.abs(weight), reasons);
 
 	return (cb(null, servers, reasons));
 }
@@ -76,10 +74,10 @@ scoreUnreservedRam(log, servers, constraints, cb)
  * or (deprecated) defaults.
  */
 function
-getCompatWeight(constraints)
+getCompatWeight(opts)
 {
-	var pkg = constraints.pkg;
-	var defaultSpread = constraints.defaults.server_spread;
+	var pkg = opts.pkg;
+	var defaultSpread = opts.defaults.server_spread;
 	var spread = (pkg && pkg.alloc_server_spread) || defaultSpread;
 
 	if (spread === undefined) {
diff --git a/lib/algorithms/soft-filter-locality-hints.js b/lib/algorithms/soft-filter-locality-hints.js
index 4c43309..5a7d095 100644
--- a/lib/algorithms/soft-filter-locality-hints.js
+++ b/lib/algorithms/soft-filter-locality-hints.js
@@ -40,7 +40,7 @@
  *	}
  *
  * The "locality" object is passed unchanged to this algoritm in
- * `constraints.vm.locality`.
+ * `opts.vm.locality`.
  *
  * # Reference
  *
@@ -132,16 +132,16 @@ var shared = require('./shared/locality-hints');
 
 
 /**
- * Filter `servers` according to `constraints.vm.locality` rules.
+ * Filter `servers` according to `opts.vm.locality` rules.
  */
 function
-filterSoftLocality(log, servers, constraints, cb)
+filterSoftLocality(servers, opts, cb)
 {
-	assert.object(log, 'log');
 	assert.arrayOfObject(servers, 'servers');
-	assert.object(constraints, 'constraints');
-	assert.uuid(constraints.vm.owner_uuid, 'constraints.vm.owner_uuid');
-	var ownerUuid = constraints.vm.owner_uuid;
+	assert.object(opts, 'opts');
+
+	var ownerUuid = opts.vm.owner_uuid;
+	assert.uuid(ownerUuid, 'opts.vm.owner_uuid');
 	var reasons = {};
 
 	if (servers.length === 0) {
@@ -149,9 +149,8 @@ filterSoftLocality(log, servers, constraints, cb)
 	}
 
 	// Parse "locality". See format notes in top-comment.
-	assert.optionalObject(constraints.vm.locality,
-		'constraints.vm.locality');
-	var locality = constraints.vm.locality || {};
+	assert.optionalObject(opts.vm.locality, 'opts.vm.locality');
+	var locality = opts.vm.locality || {};
 	assert.optionalBool(locality.strict, 'locality.strict');
 	var strict = Boolean(locality.strict);
 	var far = shared.normNearFar(locality.far, 'locality.far');
diff --git a/lib/allocator.js b/lib/allocator.js
index d920c35..fd85b73 100644
--- a/lib/allocator.js
+++ b/lib/allocator.js
@@ -15,16 +15,16 @@
  * the same.
  *
  * All plugins accept four arguments, and return two values. The arguments
- * consist of: log, servers, constraints. 'log' is what each plugin will
- * use for the logging of info, warning or error messages. 'servers' is an array
- * of servers left from the previous plugin. 'constraints' contains various
- * restrictions which must be maintained when selecting eligible servers.
+ * consist of: servers and opts. 'opts' contains various functions that plugins
+ * often use, such as logging or loading VM information. It also contains
+ * various restrictions which must be maintained when selecting eligible
+ * servers. 'servers' is an array of servers left after the previous plugin.
  *
- * All plugins return two values: servers, reasons. 'servers' is an array of
- * servers that the plugin deems acceptable for allocation. 'reasons' is a hash
- * with a textual description of why any server was removed by that plugin. Note
- * that some plugins don't return hashes, since their filtering is boolean in
- * nature, thus it should be obvious why a server was removed.
+ * All plugins return three values: err, servers, reasons. 'servers' is an array
+ * of servers that the plugin deems acceptable for allocation. 'reasons' is a
+ * hash with a textual description of why any server was removed by that plugin,
+ * although some plugins do not fill in the hash with such information because
+ * the reasons for the filtering is obvious (e.g. the plugin is boolean).
  *
  * Plugins form a tree, much like s-exps, where they form an expression. An
  * example of such an expression:
@@ -73,9 +73,13 @@ var availableAlgorithms;	/* what's available for use */
  * startup: it blocks on loading algorithm files, and terminates the program
  * when given a bad description.
  */
-var Allocator = module.exports = function (log, description, defaults)
+var Allocator = module.exports = function (opts, description, defaults)
 {
-	this.log = log;
+	assert.object(opts);
+	assert.array(description);
+	assert.object(defaults);
+
+	this.log = opts.log;
 	this.defaults = defaults;
 
 	if (!availableAlgorithms)
@@ -88,6 +92,7 @@ var Allocator = module.exports = function (log, description, defaults)
 	    availableAlgorithms);
 };
 
+
 /*
  * Takes a list of servers, and applies the algorithms to the list of servers to
  * select one for this allocation.
@@ -100,7 +105,8 @@ Allocator.prototype.allocate = function (servers, vm, img, pkg, tickets, cb)
 		pkg = self._massagePkgData(pkg);
 	}
 
-	var constraints = {
+	var opts = {
+		log: self.log,
 		vm: vm,
 		img: img,
 		pkg: pkg,
@@ -112,7 +118,7 @@ Allocator.prototype.allocate = function (servers, vm, img, pkg, tickets, cb)
 		s.score = 0;
 	});
 
-	self._dispatch(self.allocServerExpr, servers, constraints,
+	self._dispatch(self.allocServerExpr, servers, opts,
 			function (err, filteredServers, visitedAlgorithms,
 			remainingServers, reasonsRemoved) {
 		if (err) {
@@ -154,7 +160,11 @@ Allocator.prototype.serverCapacity = function (servers, cb)
 		s.score = 0;
 	});
 
-	self._dispatch(self.serverCapacityExpr, servers, {},
+	var opts = {
+		log: self.log
+	};
+
+	self._dispatch(self.serverCapacityExpr, servers, opts,
 			function (err, filteredServers, visitedAlgorithms,
 			remainingServers, reasonsRemoved) {
 		if (err) {
@@ -198,10 +208,11 @@ Allocator.prototype.serverCapacity = function (servers, cb)
  * turn until a plugin returns a non-empty list of servers.
  */
 Allocator.prototype._dispatch =
-function (algorithms, initialServers, constraints, cb)
+function (algorithms, initialServers, opts, cb)
 {
 	var self = this;
 	var log = self.log;
+
 	var visitedAlgos = [];
 	var remainingServers = [];
 	var reasons = [];
@@ -210,7 +221,7 @@ function (algorithms, initialServers, constraints, cb)
 
 	/* we don't use shift(), to avoid modifying the referenced object */
 	var command = algorithms[0];
-	self.log.trace('Dispatching on "' + command + '"');
+	log.trace('Dispatching on "' + command + '"');
 	assert.ok(command === 'pipe' || command === 'or', 'command valid');
 	algorithms = algorithms.slice(1, algorithms.length);
 
@@ -272,12 +283,11 @@ function (algorithms, initialServers, constraints, cb)
 		}
 
 		if (Array.isArray(algorithm)) {
-			self._dispatch(algorithm, argServers, constraints,
+			self._dispatch(algorithm, argServers, opts,
 				ranAlgorithms);
 		} else {
 			startTime = new Date();
-			algorithm.run(log, argServers, constraints,
-				ranAlgorithm);
+			algorithm.run(argServers, opts, ranAlgorithm);
 		}
 
 		return (null); // to silence linter
@@ -395,20 +405,21 @@ Allocator.prototype._loadAvailableAlgorithms = function ()
 Allocator.prototype._loadAlgorithm = function (shortName)
 {
 	var self = this;
+	var log = self.log;
 	var algoPath = ALGORITHMS_PATH + shortName;
 
 	var algorithm = require(algoPath);
 
 	if (!algorithm.run || typeof (algorithm.run) !== 'function') {
-		self.log.error('Algorithm "%s" does not have a run function',
+		log.error('Algorithm "%s" does not have a run function',
 		    shortName);
 		return (null);
 	} else if (!algorithm.name || typeof (algorithm.name) != 'string') {
-		self.log.error('Algorithm "%s" does not have a name',
+		log.error('Algorithm "%s" does not have a name',
 		    shortName);
 		return (null);
 	} else {
-		self.log.debug('Algorithm "%s" has been loaded', shortName);
+		log.debug('Algorithm "%s" has been loaded', shortName);
 		return (algorithm);
 	}
 };
diff --git a/test/algorithms/calculate-server-unreserved.test.js b/test/algorithms/calculate-server-unreserved.test.js
index eab2823..cd665d1 100644
--- a/test/algorithms/calculate-server-unreserved.test.js
+++ b/test/algorithms/calculate-server-unreserved.test.js
@@ -10,12 +10,7 @@
 
 var test = require('tape');
 var filter = require('../../lib/algorithms/calculate-server-unreserved.js');
-
-
-var log = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
+var common = require('./common.js');
 
 
 test('calculateServerUnreserved()', function (t) {
@@ -185,9 +180,8 @@ test('calculateServerUnreserved()', function (t) {
 		}
 	];
 
-	var constraints = {};
-	filter.run(log, serversInfo, constraints,
-			function (err, servers, reasons) {
+	var opts = common.addCommonOpts({});
+	filter.run(serversInfo, opts, function (err, servers, reasons) {
 		t.ifError(err);
 
 		t.deepEqual(servers, serversInfo);
@@ -220,10 +214,9 @@ test('calculateServerUnreserved()', function (t) {
 
 test('calculateServerUnreserved() with no servers', function (t) {
 	var serversInfo = [];
-	var constraints = {};
+	var opts = common.addCommonOpts({});
 
-	filter.run(log, serversInfo, constraints,
-			function (err, servers, reasons) {
+	filter.run(serversInfo, opts, function (err, servers, reasons) {
 		t.ifError(err);
 
 		t.deepEqual(servers, []);
diff --git a/test/algorithms/calculate-ticketed-vms.test.js b/test/algorithms/calculate-ticketed-vms.test.js
index 4846f07..8d748f2 100644
--- a/test/algorithms/calculate-ticketed-vms.test.js
+++ b/test/algorithms/calculate-ticketed-vms.test.js
@@ -10,11 +10,8 @@
 
 var test = require('tape');
 var filter = require('../../lib/algorithms/calculate-ticketed-vms.js');
+var common = require('./common.js');
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
 
 var GiB = 1024 * 1024 * 1024;
 
@@ -202,9 +199,9 @@ var TICKETS = [ {
 
 test('calculate ticketed VMs', function (t) {
 	var ownerUuid = '930896af-bf8c-48d4-885c-6573a94b1853';
+	var opts = common.addCommonOpts({ tickets: TICKETS });
 
-	var constraints = { tickets: TICKETS };
-	filter.run(LOG, SERVERS, constraints, function (err, servers, reasons) {
+	filter.run(SERVERS, opts, function (err, servers, reasons) {
 		t.ifError(err);
 
 		// t.deepEqual(servers, serversInfo);
@@ -260,9 +257,9 @@ test('calculate ticketed VMs', function (t) {
 
 
 test('calculate ticketed VMs with no servers', function (t) {
-	var constraints = { tickets: TICKETS };
+	var opts = common.addCommonOpts({ tickets: TICKETS });
 
-	filter.run(LOG, [], constraints, function (err, servers, reasons) {
+	filter.run([], opts, function (err, servers, reasons) {
 		t.ifError(err);
 
 		t.deepEqual(servers, []);
@@ -274,9 +271,9 @@ test('calculate ticketed VMs with no servers', function (t) {
 
 
 test('calculate ticketed VMs with no tickets', function (t) {
-	var constraints = { tickets: [] };
+	var opts = common.addCommonOpts({ tickets: [] });
 
-	filter.run(LOG, SERVERS, constraints, function (err, servers, reasons) {
+	filter.run(SERVERS, opts, function (err, servers, reasons) {
 		t.ifError(err);
 
 		t.deepEqual(servers, SERVERS);
diff --git a/test/algorithms/common.js b/test/algorithms/common.js
index 8f9f1b0..f905552 100644
--- a/test/algorithms/common.js
+++ b/test/algorithms/common.js
@@ -11,27 +11,50 @@
 var assert = require('assert-plus');
 
 
+var OPTS = {
+	log: {
+		debug: function () { return (true); },
+		error: function (err) { console.log(err); return true; },
+		info:  function () { return (true); },
+		trace: function () { return (true); },
+		warn:  function () { return (true); }
+	}
+};
+
+
 function clone(obj) {
 	return (JSON.parse(JSON.stringify(obj)));
 }
 
 
-function createPluginChecker(plugin, log) {
-	assert.object(plugin);
-	assert.object(log);
+function addCommonOpts(opts) {
+	assert.object(opts, 'opts');
 
-	return function checkPlugin(t, givenServers, constraints, expectServers,
+	Object.keys(OPTS).forEach(function (key) {
+		opts[key] = opts[key] || OPTS[key];
+	});
+
+	return (opts);
+}
+
+
+function createPluginChecker(plugin) {
+	assert.object(plugin, 'plugin');
+
+	return function checkPlugin(t, givenServers, opts, expectServers,
 			expectReasons) {
-		assert.object(t);
-		assert.object(constraints);
-		assert.object(expectReasons);
-		assert.arrayOfObject(givenServers);
-		assert.arrayOfObject(expectServers);
+		assert.object(t, 't');
+		assert.object(opts, 'opts');
+		assert.object(expectReasons, 'expectReasons');
+		assert.arrayOfObject(givenServers, 'givenServers');
+		assert.arrayOfObject(expectServers, 'expectServers');
+
+		opts = addCommonOpts(opts);
 
-		plugin.run(log, clone(givenServers), constraints,
+		plugin.run(clone(givenServers), opts,
 				function (err, servers, reasons) {
-			assert.arrayOfObject(servers);
-			assert.object(reasons);
+			assert.arrayOfObject(servers, 'servers');
+			assert.object(reasons, 'reasons');
 
 			t.ifError(err);
 
@@ -45,6 +68,7 @@ function createPluginChecker(plugin, log) {
 
 
 module.exports = {
+	addCommonOpts: addCommonOpts,
 	createPluginChecker: createPluginChecker,
 	clone: clone
 };
diff --git a/test/algorithms/hard-filter-capness.test.js b/test/algorithms/hard-filter-capness.test.js
index 205e281..d5506d3 100644
--- a/test/algorithms/hard-filter-capness.test.js
+++ b/test/algorithms/hard-filter-capness.test.js
@@ -13,11 +13,6 @@ var filter = require('../../lib/algorithms/hard-filter-capness.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
 var SERVERS = [ {
 	uuid: 'cdfe84c4-f7cc-4104-bc24-45f786bce762',
 	vms : {
@@ -68,7 +63,7 @@ var SERVERS = [ {
 } ];
 
 
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter);
 
 
 test('filterCapness() with package with cpu_cap', function (t) {
@@ -81,12 +76,9 @@ test('filterCapness() with package with cpu_cap', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = {
-		vm: {},
-		pkg: { cpu_cap: 100 }
-	};
+	var opts = { vm: {}, pkg: { cpu_cap: 100 } };
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -100,25 +92,18 @@ test('filterCapness() with package without cpu_cap', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = {
-		vm: {},
-		pkg: {}
-	};
+	var opts = { vm: {}, pkg: {} };
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
 test('filterCapness() with no servers', function (t) {
 	var expectServers = [];
 	var expectReasons = {};
+	var opts = { vm: {}, pkg: {} };
 
-	var constraints = {
-		vm: {},
-		pkg: {}
-	};
-
-	checkFilter(t, [], constraints, expectServers, expectReasons);
+	checkFilter(t, [], opts, expectServers, expectReasons);
 });
 
 
diff --git a/test/algorithms/hard-filter-headnode.test.js b/test/algorithms/hard-filter-headnode.test.js
index ac48d36..2b31100 100644
--- a/test/algorithms/hard-filter-headnode.test.js
+++ b/test/algorithms/hard-filter-headnode.test.js
@@ -13,11 +13,6 @@ var filter = require('../../lib/algorithms/hard-filter-headnode.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
 var SERVERS = [
 	{ memory_available_bytes: 256 },
 	{ memory_available_bytes: 512, headnode: true },
@@ -25,36 +20,33 @@ var SERVERS = [
 ];
 
 
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter);
 
 
 test('filterHeadnode() 1', function (t) {
 	var expectServers = [ SERVERS[0], SERVERS[2] ];
 	var expectReasons = {};
+	var opts = { defaults: {} };
 
-	var constraints = { defaults: {} };
-
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
 test('filterHeadnode() 2', function (t) {
 	var expectServers = SERVERS;
 	var expectReasons = { skip: 'Do not filter out headnodes' };
+	var opts = { defaults: { filter_headnode: false } };
 
-	var constraints = { defaults: { filter_headnode: false } };
-
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
 test('filterHeadnode() with no servers', function (t) {
 	var expectServers = [];
 	var expectReasons = {};
+	var opts = { defaults: {} };
 
-	var constraints = { defaults: {} };
-
-	checkFilter(t, [], constraints, expectServers, expectReasons);
+	checkFilter(t, [], opts, expectServers, expectReasons);
 });
 
 
diff --git a/test/algorithms/hard-filter-invalid-servers.test.js b/test/algorithms/hard-filter-invalid-servers.test.js
index 1d318d5..37ab87f 100644
--- a/test/algorithms/hard-filter-invalid-servers.test.js
+++ b/test/algorithms/hard-filter-invalid-servers.test.js
@@ -14,14 +14,7 @@ var filter = require('../../lib/algorithms/hard-filter-invalid-servers.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); },
-	warn:  function () { return (true); }
-};
-
-
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter);
 
 
 test('filterInvalidServers()', function (t) {
@@ -43,20 +36,19 @@ test('filterInvalidServers()', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = {};
+	var opts = {};
 
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
 test('filterInvalidServers() with no servers', function (t) {
 	var expectServers = [];
 	var expectReasons = {};
-
 	var servers = [];
-	var constraints = {};
+	var opts = {};
 
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
diff --git a/test/algorithms/hard-filter-large-servers.test.js b/test/algorithms/hard-filter-large-servers.test.js
index 6c20c44..f746efa 100644
--- a/test/algorithms/hard-filter-large-servers.test.js
+++ b/test/algorithms/hard-filter-large-servers.test.js
@@ -13,37 +13,29 @@ var filter = require('../../lib/algorithms/hard-filter-large-servers.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
-
 var SERVERS = [];
 for (var ii = 0; ii < 20; ii++)
 	SERVERS.push({ unreserved_ram: ii * 8 * 1024 });
 
 
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter);
 
 
 test('filterLargeServers()', function (t) {
 	var expectServers = SERVERS.slice(0, SERVERS.length - 3).reverse();
 	var expectReasons = {};
+	var opts = { defaults: {} };
 
-	var constraints = { defaults: {} };
-
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
 test('filterLargeServers() with override', function (t) {
 	var expectServers = SERVERS;
 	var expectReasons = { skip: 'Do not filter out large servers' };
+	var opts = { defaults: { filter_large_servers: false } };
 
-	var constraints = { defaults: { filter_large_servers: false } };
-
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -51,12 +43,12 @@ test('filterLargeServers with no servers', function (t) {
 	var expectServers = [];
 	var expectReasons = {};
 
-	var constraints = {
+	var opts = {
 		vm: { ram: 34 * 1024 }, // in MiB
 		defaults: {}
 	};
 
-	checkFilter(t, [], constraints, expectServers, expectReasons);
+	checkFilter(t, [], opts, expectServers, expectReasons);
 });
 
 
diff --git a/test/algorithms/hard-filter-locality-hints.test.js b/test/algorithms/hard-filter-locality-hints.test.js
index 54942d1..d052032 100644
--- a/test/algorithms/hard-filter-locality-hints.test.js
+++ b/test/algorithms/hard-filter-locality-hints.test.js
@@ -16,11 +16,6 @@ var common = require('./common.js');
 
 // --- globals
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
 var OWNER_UUID = 'b0bbbbbb-9172-4c58-964e-fe58a9989708';
 
 // --- internal support stuff
@@ -47,7 +42,7 @@ genVms(numVms, numOwnerVms)
 }
 
 
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter);
 
 
 /**
@@ -84,10 +79,9 @@ test('name', function (t) {
 test('no locality, no servers', function (t) {
 	var expectServers = [];
 	var expectReasons = {};
+	var opts = { vm: { owner_uuid: OWNER_UUID } };
 
-	var constraints = { vm: { owner_uuid: OWNER_UUID } };
-
-	checkFilter(t, [], constraints, expectServers, expectReasons);
+	checkFilter(t, [], opts, expectServers, expectReasons);
 });
 
 
@@ -95,12 +89,12 @@ test('locality, no servers', function (t) {
 	var expectServers = [];
 	var expectReasons = {};
 
-	var constraints = { vm: {
+	var opts = { vm: {
 		owner_uuid: OWNER_UUID,
 		locality: { near: '468994e6-d53d-c74c-8245-3273a86dc3d9' }
-	}};
+	} };
 
-	checkFilter(t, [], constraints, expectServers, expectReasons);
+	checkFilter(t, [], opts, expectServers, expectReasons);
 });
 
 
@@ -138,12 +132,12 @@ test('locality scenario A', function (tt) {
 	tt.test('  non-strict far', function (t) {
 		var expServers = servers;
 		var expReasons = { skip: 'No strict locality requested' };
-		var constraints = { vm: {
+		var opts = { vm: {
 			owner_uuid: OWNER_UUID,
 			locality: { far: ownerVmOnServer0 }
 		} };
 
-		checkFilter(t, servers, constraints, expServers, expReasons);
+		checkFilter(t, servers, opts, expServers, expReasons);
 	});
 
 	tt.test('  strict far (string)', function (t) {
@@ -155,13 +149,16 @@ test('locality scenario A', function (tt) {
 		expReasons[servers[0].uuid]
 			= 'exclude: inst!=' + ownerVmOnServer0;
 
-		var constraints = { vm: {
+		var opts = { vm: {
 			owner_uuid: OWNER_UUID,
 			// test with 'far' as a string.
-			locality: { strict: true, far: ownerVmOnServer0 }
+			locality: {
+				strict: true,
+				far: ownerVmOnServer0
+			}
 		} };
 
-		checkFilter(t, servers, constraints, expServers, expReasons);
+		checkFilter(t, servers, opts, expServers, expReasons);
 	});
 
 	tt.test('  strict far (array)', function (t) {
@@ -173,25 +170,31 @@ test('locality scenario A', function (tt) {
 		expReasons[servers[0].uuid]
 			= 'exclude: inst!=' + ownerVmOnServer0;
 
-		var constraints = { vm: {
+		var opts = { vm: {
 			owner_uuid: OWNER_UUID,
 			// test with 'far' as an array
-			locality: { strict: true, far: [ownerVmOnServer0] }
+			locality: {
+				strict: true,
+				far: [ownerVmOnServer0]
+			}
 		} };
 
-		checkFilter(t, servers, constraints, expServers, expReasons);
+		checkFilter(t, servers, opts, expServers, expReasons);
 	});
 
 	tt.test('  non-strict near', function (t) {
 		var expServers = servers;
 		var expReasons = { skip: 'No strict locality requested' };
 
-		var constraints = { vm: {
+		var opts = { vm: {
 			owner_uuid: OWNER_UUID,
-			locality: { strict: false, near: [ownerVmOnServer3] }
+			locality: {
+				strict: false,
+				near: [ownerVmOnServer3]
+			}
 		} };
 
-		checkFilter(t, servers, constraints, expServers, expReasons);
+		checkFilter(t, servers, opts, expServers, expReasons);
 	});
 
 	tt.test('  strict near', function (t) {
@@ -200,12 +203,15 @@ test('locality scenario A', function (tt) {
 		expReasons[servers[3].uuid]
 			= 'include: inst==' + ownerVmOnServer3;
 
-		var constraints = { vm: {
+		var opts = { vm: {
 			owner_uuid: OWNER_UUID,
-			locality: { strict: true, near: [ownerVmOnServer3] }
+			locality: {
+				strict: true,
+				near: [ownerVmOnServer3]
+			}
 		} };
 
-		checkFilter(t, servers, constraints, expServers, expReasons);
+		checkFilter(t, servers, opts, expServers, expReasons);
 	});
 
 	tt.test('  strict near non-existent-VM', function (t) {
@@ -214,12 +220,15 @@ test('locality scenario A', function (tt) {
 		var expServers = [];
 		var expReasons =  { '*' : 'exclude: inst==' + nonExistentVm };
 
-		var constraints = { vm: {
+		var opts = { vm: {
 			owner_uuid: OWNER_UUID,
-			locality: { strict: true, near: [nonExistentVm] }
+			locality: {
+				strict: true,
+				near: [nonExistentVm]
+			}
 		} };
 
-		checkFilter(t, servers, constraints, expServers, expReasons);
+		checkFilter(t, servers, opts, expServers, expReasons);
 	});
 
 	tt.test('  strict far non-existent-VM', function (t) {
@@ -228,12 +237,15 @@ test('locality scenario A', function (tt) {
 		var expServers = servers;
 		var expReasons = {};
 
-		var constraints = { vm: {
+		var opts = { vm: {
 			owner_uuid: OWNER_UUID,
-			locality: { strict: true, far: [nonExistentVm] }
+			locality: {
+				strict: true,
+				far: [nonExistentVm]
+			}
 		} };
 
-		checkFilter(t, servers, constraints, expServers, expReasons);
+		checkFilter(t, servers, opts, expServers, expReasons);
 	});
 
 	tt.test('  strict near, ignores non-owner VMs', function (t) {
@@ -242,24 +254,30 @@ test('locality scenario A', function (tt) {
 			'*': 'exclude: inst==' + nonOwnerVmOnServer3
 		};
 
-		var constraints = { vm: {
+		var opts = { vm: {
 			owner_uuid: OWNER_UUID,
-			locality: { strict: true, near: [nonOwnerVmOnServer3] }
+			locality: {
+				strict: true,
+				near: [nonOwnerVmOnServer3]
+			}
 		} };
 
-		checkFilter(t, servers, constraints, expServers, expReasons);
+		checkFilter(t, servers, opts, expServers, expReasons);
 	});
 
 	tt.test('  strict far, ignores non-owner VMs', function (t) {
 		var expServers = servers;
 		var expReasons = {};
 
-		var constraints = { vm: {
+		var opts = { vm: {
 			owner_uuid: OWNER_UUID,
-			locality: { strict: true, far: [nonOwnerVmOnServer3] }
+			locality: {
+				strict: true,
+				far: [nonOwnerVmOnServer3]
+			}
 		} };
 
-		checkFilter(t, servers, constraints, expServers, expReasons);
+		checkFilter(t, servers, opts, expServers, expReasons);
 	});
 
 	tt.test('  strict near that filters out all servers', function (t) {
@@ -268,12 +286,12 @@ test('locality scenario A', function (tt) {
 		var expServers = [];
 		var expReasons = { '*': 'exclude: inst==' + near.join(',') };
 
-		var constraints = { vm: {
+		var opts = { vm: {
 			owner_uuid: OWNER_UUID,
 			locality: { strict: true, near: near }
 		} };
 
-		checkFilter(t, servers, constraints, expServers, expReasons);
+		checkFilter(t, servers, opts, expServers, expReasons);
 	});
 
 	tt.test('  far and near', function (t) {
@@ -285,7 +303,7 @@ test('locality scenario A', function (tt) {
 		expReasons[servers[3].uuid]
 			= 'exclude: inst!=' + ownerVmOnServer3;
 
-		var constraints = { vm: {
+		var opts = { vm: {
 			owner_uuid: OWNER_UUID,
 			locality: {
 				strict: true,
@@ -294,7 +312,7 @@ test('locality scenario A', function (tt) {
 			}
 		} };
 
-		checkFilter(t, servers, constraints, expServers, expReasons);
+		checkFilter(t, servers, opts, expServers, expReasons);
 	});
 });
 
@@ -326,13 +344,16 @@ test('locality scenario B: large set', function (tt) {
 	var ownerVmOnServer997 = ownerVmOnServer(997);
 
 	tt.test('  strict near', function (t) {
-		var constraints = { vm: {
+		var opts = { vm: {
 			owner_uuid: OWNER_UUID,
-			locality: { strict: true, near: [ownerVmOnServer997] }
+			locality: {
+				strict: true,
+				near: [ownerVmOnServer997]
+			}
 		} };
 
 		var start = Date.now();
-		filter.run(LOG, servers, constraints,
+		filter.run(servers, opts,
 				function (err, filteredServers, reasons) {
 			t.ifError(err);
 
@@ -347,14 +368,16 @@ test('locality scenario B: large set', function (tt) {
 	});
 
 	tt.test('  strict far', function (t) {
-		var constraints = { vm: {
+		var opts = { vm: {
 			owner_uuid: OWNER_UUID,
-			locality: { strict: true, far: [
-				ownerVmOnServer42, ownerVmOnServer997] }
+			locality: {
+				strict: true,
+				far: [ownerVmOnServer42, ownerVmOnServer997]
+			}
 		} };
 
 		var start = Date.now();
-		filter.run(LOG, servers, constraints,
+		filter.run(servers, opts,
 				function (err, filteredServers, reasons) {
 			t.ifError(err);
 
diff --git a/test/algorithms/hard-filter-min-cpu.test.js b/test/algorithms/hard-filter-min-cpu.test.js
index a092bce..583e060 100644
--- a/test/algorithms/hard-filter-min-cpu.test.js
+++ b/test/algorithms/hard-filter-min-cpu.test.js
@@ -13,13 +13,7 @@ var filter = require('../../lib/algorithms/hard-filter-min-cpu.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
-
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter);
 
 
 test('filterMinCpu()', function (t) {
@@ -51,14 +45,14 @@ test('filterMinCpu()', function (t) {
 			'but server has ratio 1'
 	};
 
-	var constraints = {
+	var opts = {
 		vm: { cpu_cap: 900 },
 		img: {},
 		pkg: {},
 		defaults: {}
 	};
 
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
@@ -84,13 +78,13 @@ test('filterMinCpu() without pkg', function (t) {
 	var expectServers = servers;
 	var expectReasons = {};
 
-	var constraints = {
+	var opts = {
 		vm: { cpu_cap: 900 },
 		img: {},
 		defaults: {}
 	};
 
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
@@ -118,14 +112,14 @@ test('filterMinCpu() with override', function (t) {
 		skip: 'Do not filter out based on minimum free CPU'
 	};
 
-	var constraints = {
+	var opts = {
 		vm: { cpu_cap: 900 },
 		img: {},
 		pkg: {},
 		defaults: { filter_min_resources: false }
 	};
 
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
@@ -158,14 +152,14 @@ test('filterMinCpu() with overprovision ratios', function (t) {
 			'server\'s spare 590'
 	};
 
-	var constraints = {
+	var opts = {
 		vm:  { cpu_cap: 900 },
 		img: {},
 		pkg: { overprovision_cpu: 1.5 },
 		defaults: {}
 	};
 
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
@@ -187,9 +181,14 @@ test('filterMinCpu with no cpu', function (t) {
 	var expectServers = servers;
 	var expectReasons = {};
 
-	var constraints = { vm: {}, img: {}, pkg: {}, defaults: {} };
+	var opts = {
+		vm: {},
+		img: {},
+		pkg: {},
+		defaults: {}
+	};
 
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
@@ -199,14 +198,14 @@ test('filterMinCpu() with no servers', function (t) {
 	var expectServers = [];
 	var expectReasons = {};
 
-	var constraints = {
+	var opts = {
 		vm:  { cpu_cap: 900 },
 		img: {},
 		pkg: { overprovision_cpu: 1.0 },
 		defaults: {}
 	};
 
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
diff --git a/test/algorithms/hard-filter-min-disk.test.js b/test/algorithms/hard-filter-min-disk.test.js
index 3de51bd..94e172a 100644
--- a/test/algorithms/hard-filter-min-disk.test.js
+++ b/test/algorithms/hard-filter-min-disk.test.js
@@ -16,13 +16,7 @@ var common = require('./common.js');
 var MiB = 1024 * 1024;
 var GiB = 1024 * MiB;
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
-
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter);
 
 
 test('filterMinDisk()', function (t) {
@@ -54,14 +48,14 @@ test('filterMinDisk()', function (t) {
 			'server has ratio 1'
 	};
 
-	var constraints = {
-		vm: { quota: 5120 },
+	var opts = {
+		vm:  { quota: 5120 },
 		img: {},
 		pkg: {},
 		defaults: {}
 	};
 
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
@@ -87,13 +81,13 @@ test('filterMinDisk() without pkg', function (t) {
 	var expectServers = servers;
 	var expectReasons = {};
 
-	var constraints = {
-		vm: { quota: 5120 },
+	var opts = {
+		vm:  { quota: 5120 },
 		img: {},
 		defaults: {}
 	};
 
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
@@ -121,14 +115,14 @@ test('filterMinDisk() with override', function (t) {
 		skip: 'Do not filter out based on minimum free disk'
 	};
 
-	var constraints = {
-		vm: { quota: 5120 },
+	var opts = {
+		vm:  { quota: 5120 },
 		img: {},
 		pkg: {},
 		defaults: { filter_min_resources: false }
 	};
 
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
@@ -161,7 +155,7 @@ test('filterMinDisk() with overprovision ratios - kvm', function (t) {
 			'server\'s spare 50000 MiB'
 	};
 
-	var constraints = {
+	var opts = {
 		vm:  { quota: 10 }, // in GiB
 		img: {
 			type: 'zvol',
@@ -177,7 +171,7 @@ test('filterMinDisk() with overprovision ratios - kvm', function (t) {
 		defaults: {}
 	};
 
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
@@ -207,7 +201,7 @@ test('filterMinDisk() with overprovision ratios - zone', function (t) {
 			'server\'s spare 25600 MiB'
 	};
 
-	var constraints = {
+	var opts = {
 		vm:  { quota: 29 }, // in GiB
 		img: {
 			image_size: 10 * 1024, // in MiB
@@ -222,7 +216,7 @@ test('filterMinDisk() with overprovision ratios - zone', function (t) {
 		defaults: {}
 	};
 
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
@@ -232,7 +226,7 @@ test('filterMinDisk() with no servers', function (t) {
 	var expectServers = [];
 	var expectReasons = {};
 
-	var constraints = {
+	var opts = {
 		vm: { quota: 5 }, // in GiB
 		img: {
 			image_size: 1 * 1024, // in MiB
@@ -244,7 +238,7 @@ test('filterMinDisk() with no servers', function (t) {
 		defaults: {}
 	};
 
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
@@ -266,9 +260,14 @@ test('filterMinDisk() with no disk', function (t) {
 	var expectServers = servers;
 	var expectReasons = { skip: 'Vm and pkg have no quota' };
 
-	var constraints = { vm: {}, img: {}, pkg: {}, defaults: {} };
+	var opts = {
+		vm: {},
+		img: {},
+		pkg: {},
+		defaults: {}
+	};
 
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
diff --git a/test/algorithms/hard-filter-min-ram.test.js b/test/algorithms/hard-filter-min-ram.test.js
index fc71352..0a6604c 100644
--- a/test/algorithms/hard-filter-min-ram.test.js
+++ b/test/algorithms/hard-filter-min-ram.test.js
@@ -13,13 +13,7 @@ var filter = require('../../lib/algorithms/hard-filter-min-ram.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
-
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter);
 
 
 test('filterMinRam()', function (t) {
@@ -49,9 +43,13 @@ test('filterMinRam()', function (t) {
 			'has ratio 1'
 	};
 
-	var constraints = { vm: { ram: 512 }, pkg: {}, defaults: {} };
+	var opts = {
+		vm:  { ram: 512 },
+		pkg: {},
+		defaults: {}
+	};
 
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
@@ -84,13 +82,13 @@ test('filterMinRam() with KVM', function (t) {
 	};
 
 	var expectServers = servers.slice(2, 4);
-	var constraints = {
-		vm: { ram: 512, brand: 'kvm' },
+	var opts = {
+		vm:  { ram: 512, brand: 'kvm' },
 		pkg: { overprovision_ram: 2.0 },
 		defaults: {}
 	};
 
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
@@ -114,12 +112,12 @@ test('filterMinRam() without pkg', function (t) {
 	var expectServers = servers;
 	var expectReasons = {};
 
-	var constraints = {
+	var opts = {
 		vm: { ram: 512 },
 		defaults: {}
 	};
 
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
@@ -145,13 +143,13 @@ test('filterMinRam() with override', function (t) {
 		skip: 'Do not filter out based on minimum free RAM'
 	};
 
-	var constraints = {
-		vm: { ram: 512 },
+	var opts = {
+		vm:  { ram: 512 },
 		pkg: {},
 		defaults: { filter_min_resources: false }
 	};
 
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
@@ -178,13 +176,13 @@ test('filterMinRam() with overprovision ratios', function (t) {
 		    'VM\'s calculated 512 RAM is less than server\'s spare 511'
 	};
 
-	var constraints = {
-		vm: { ram: 768 },
+	var opts = {
+		vm:  { ram: 768 },
 		pkg: { overprovision_ram: 1.5 },
 		defaults: {}
 	};
 
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
@@ -194,13 +192,13 @@ test('filterMinRam() with no servers', function (t) {
 	var expectServers = [];
 	var expectReasons = {};
 
-	var constraints = {
-		vm: { ram: 512 },
+	var opts = {
+		vm:  { ram: 512 },
 		pkg: { overprovision_ram: 1.0 },
 		defaults: {}
 	};
 
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
diff --git a/test/algorithms/hard-filter-overprovision-ratios.test.js b/test/algorithms/hard-filter-overprovision-ratios.test.js
index f2374a6..9e243a0 100644
--- a/test/algorithms/hard-filter-overprovision-ratios.test.js
+++ b/test/algorithms/hard-filter-overprovision-ratios.test.js
@@ -14,11 +14,6 @@ var filter = require('../../lib/algorithms/' +
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
 var SERVERS = [
 	{
 		uuid: '98b6985f-f102-4c4f-a2e3-eda731a8b0dc',
@@ -54,7 +49,7 @@ var SERVERS = [
 ];
 
 
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter);
 
 
 test('filterOverprovisionRatios() 1', function (t) {
@@ -70,9 +65,9 @@ test('filterOverprovisionRatios() 1', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = { pkg: { overprovision_ram: 1.0 } };
+	var opts = { pkg: { overprovision_ram: 1.0 } };
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -92,29 +87,27 @@ test('filterOverprovisionRatios() 2', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = { pkg: { overprovision_ram: 1.5 } };
+	var opts = { pkg: { overprovision_ram: 1.5 } };
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
 test('filterOverprovisionRatios() without pkg', function (t) {
 	var expectServers = SERVERS;
 	var expectReasons = { skip: 'No pkg provided' };
+	var opts = {};
 
-	var constraints = {};
-
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
 test('filterOverprovisionRatios() with no servers', function (t) {
 	var expectServers = [];
 	var expectReasons = {};
+	var opts = { pkg: { overprovision_ram: 1.0 } };
 
-	var constraints = { pkg: { overprovision_ram: 1.0 } };
-
-	checkFilter(t, [], constraints, expectServers, expectReasons);
+	checkFilter(t, [], opts, expectServers, expectReasons);
 });
 
 
diff --git a/test/algorithms/hard-filter-owners-servers.js b/test/algorithms/hard-filter-owners-servers.js
index 9d9575e..77fc7d5 100644
--- a/test/algorithms/hard-filter-owners-servers.js
+++ b/test/algorithms/hard-filter-owners-servers.js
@@ -13,12 +13,6 @@ var filter = require('../../lib/algorithms/hard-filter-owners-servers.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	error: function () { return (true); },
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
 var SERVERS = [ {
 	uuid: '33ce31d0-f376-4efd-ad41-f17c430b9782',
 	unreserved_ram: 1024
@@ -31,7 +25,7 @@ var SERVERS = [ {
 } ];
 
 
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter);
 
 
 test('filterServersByOwners() with owner', function (t) {
@@ -41,7 +35,7 @@ test('filterServersByOwners() with owner', function (t) {
 			'*': 'Servers pass filter for owner 2316e149-1562-47ff-abea-00bda80d0e7f: server.uuid === "b8ab34e9-2914-48c4-af75-5c6440240ce1"'
 	};
 
-	var constraints = {
+	var opts = {
 		defaults: {
 			filter_owner_server: {
 				/* BEGIN JSSTYLED */
@@ -53,7 +47,7 @@ test('filterServersByOwners() with owner', function (t) {
 		vm: { owner_uuid: '2316e149-1562-47ff-abea-00bda80d0e7f' }
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -66,7 +60,7 @@ test('filterServersByOwners() without owner', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = {
+	var opts = {
 		defaults: {
 			filter_owner_server: {
 				/* BEGIN JSSTYLED */
@@ -78,7 +72,7 @@ test('filterServersByOwners() without owner', function (t) {
 		vm: { owner_uuid: '9094b92e-26e9-11e6-b476-28cfe91f7d53' }
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -89,7 +83,7 @@ test('filterServersByOwners() with owner and bad code', function (t) {
 			'2316e149-1562-47ff-abea-00bda80d0e7f: sdasd ++'
 	};
 
-	var constraints = {
+	var opts = {
 		defaults: {
 			filter_owner_server: {
 				'2316e149-1562-47ff-abea-00bda80d0e7f':
@@ -101,7 +95,7 @@ test('filterServersByOwners() with owner and bad code', function (t) {
 		vm: { owner_uuid: '2316e149-1562-47ff-abea-00bda80d0e7f' }
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -112,7 +106,7 @@ test('filterServersByOwners() without owner and bad code', function (t) {
 			'2316e149-1562-47ff-abea-00bda80d0e7f: sdasd ++'
 	};
 
-	var constraints = {
+	var opts = {
 		defaults: {
 			filter_owner_server: {
 				'2316e149-1562-47ff-abea-00bda80d0e7f':
@@ -124,7 +118,7 @@ test('filterServersByOwners() without owner and bad code', function (t) {
 		vm: { owner_uuid: 'cce25c36-26eb-11e6-a8f3-28cfe91f7d53' }
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -134,12 +128,12 @@ test('filterServersByOwners() with no default', function (t) {
 		skip: 'No filter_owner_server default to run'
 	};
 
-	var constraints = {
+	var opts = {
 		defaults: {},
 		vm: { owner_uuid: 'cce25c36-26eb-11e6-a8f3-28cfe91f7d53' }
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -150,7 +144,7 @@ test('filterServersByOwners() with no servers', function (t) {
 			'6d6d49a9-f190-41d9-8077-d6b67b55a55b: server.ram > 128'
 	};
 
-	var constraints = {
+	var opts = {
 		defaults: {
 			filter_owner_server: {
 				'6d6d49a9-f190-41d9-8077-d6b67b55a55b':
@@ -162,7 +156,7 @@ test('filterServersByOwners() with no servers', function (t) {
 		}
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
diff --git a/test/algorithms/hard-filter-platform-versions.test.js b/test/algorithms/hard-filter-platform-versions.test.js
index f89dd38..49cde38 100644
--- a/test/algorithms/hard-filter-platform-versions.test.js
+++ b/test/algorithms/hard-filter-platform-versions.test.js
@@ -13,12 +13,6 @@ var filter = require('../../lib/algorithms/hard-filter-platform-versions.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
-
 var SERVERS = genServers([
 	['b6d9d432-16bd-41b5-b3ac-7e3986380c37', '6.5', '20121218T203452Z'],
 	['aa652df0-7954-4cbb-9243-3cbb2c99b7be', '6.5', '20121210T203034Z'],
@@ -33,16 +27,15 @@ var SERVERS = genServers([
 ]);
 
 
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter);
 
 
 test('filterPlatformVersions() no platform versions', function (t) {
 	var expectServers = SERVERS;
 	var expectReasons = {};
+	var opts = { vm: {}, img: {}, pkg: {}, defaults: {} };
 
-	var constraints = { vm: {}, img: {}, pkg: {}, defaults: {} };
-
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -60,7 +53,7 @@ test('filterPlatformVersions() min platform requirements for images',
 		/* END JSSTYLED */
 	};
 
-	var constraints = {
+	var opts = {
 		vm:  {},
 		img: {
 			requirements: {
@@ -71,7 +64,7 @@ test('filterPlatformVersions() min platform requirements for images',
 		defaults: {}
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -89,14 +82,14 @@ test('filterPlatformVersions() min platform requirements for packages',
 		/* END JSSTYLED */
 	};
 
-	var constraints = {
+	var opts = {
 		vm:  {},
 		img: {},
 		pkg: { min_platform: {'7.0': '20121211T203034Z'} },
 		defaults: {}
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -114,7 +107,7 @@ test('filterPlatformVersions() max platform requirements', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = {
+	var opts = {
 		vm:  {},
 		img: {
 			requirements: {
@@ -125,7 +118,7 @@ test('filterPlatformVersions() max platform requirements', function (t) {
 		defaults: {}
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -145,7 +138,7 @@ test('filterPlatformVersions() minmax platform requirements 1', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = {
+	var opts = {
 		vm:  {},
 		img: {
 			requirements: {
@@ -157,7 +150,7 @@ test('filterPlatformVersions() minmax platform requirements 1', function (t) {
 		defaults: {}
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -174,7 +167,7 @@ test('filterPlatformVersions() minmax platform requirements 2', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = {
+	var opts = {
 		vm:  {},
 		img: {
 			requirements: {
@@ -186,7 +179,7 @@ test('filterPlatformVersions() minmax platform requirements 2', function (t) {
 		defaults: {}
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -204,7 +197,7 @@ test('filterPlatformVersions() minmax platform requirements 3', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = {
+	var opts = {
 		vm:  {},
 		img: {
 			requirements: {
@@ -219,7 +212,7 @@ test('filterPlatformVersions() minmax platform requirements 3', function (t) {
 		defaults: {}
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -235,7 +228,7 @@ test('filterPlatformVersions() minmax platform requirements 4', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = {
+	var opts = {
 		vm:  {},
 		img: {
 			requirements: {
@@ -250,7 +243,7 @@ test('filterPlatformVersions() minmax platform requirements 4', function (t) {
 		defaults: {}
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -267,7 +260,7 @@ test('filterPlatformVersions() minmax platform requirements 5', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = {
+	var opts = {
 		vm: {},
 		img: {
 			requirements: {
@@ -279,7 +272,7 @@ test('filterPlatformVersions() minmax platform requirements 5', function (t) {
 		defaults: {}
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -296,7 +289,7 @@ test('filterPlatformVersions() ignore non-versions', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = {
+	var opts = {
 		vm:  {},
 		img: {
 			requirements: {
@@ -314,7 +307,7 @@ test('filterPlatformVersions() ignore non-versions', function (t) {
 		defaults: {}
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -323,7 +316,7 @@ function (t) {
 	var expectServers = SERVERS;
 	var expectReasons = {};
 
-	var constraints = {
+	var opts = {
 		vm: {},
 		img: {},
 		pkg: {},
@@ -332,7 +325,7 @@ function (t) {
 		}
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -355,38 +348,32 @@ function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = {
-		vm: {
-			docker: true
-		},
+	var opts = {
+		vm: { docker: true },
 		img: {},
 		pkg: {},
-		defaults: {
-			filter_docker_min_platform: '20121218T203452Z'
-		}
+		defaults: { filter_docker_min_platform: '20121218T203452Z' }
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
 test('filterPlatformVersions() no pkg', function (t) {
 	var expectServers = SERVERS;
 	var expectReasons = {};
+	var opts = { vm: {}, img: {}, defaults: {} };
 
-	var constraints = { vm: {}, img: {}, defaults: {} };
-
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
 test('filterPlatformVersions() with no servers', function (t) {
 	var expectServers = [];
 	var expectReasons = {};
+	var opts = { vm: {}, img: {}, pkg: {}, defaults: {} };
 
-	var constraints = { vm: {}, img: {}, pkg: {}, defaults: {} };
-
-	checkFilter(t, [], constraints, expectServers, expectReasons);
+	checkFilter(t, [], opts, expectServers, expectReasons);
 });
 
 
diff --git a/test/algorithms/hard-filter-reserved.test.js b/test/algorithms/hard-filter-reserved.test.js
index da71351..b9da7d5 100644
--- a/test/algorithms/hard-filter-reserved.test.js
+++ b/test/algorithms/hard-filter-reserved.test.js
@@ -13,13 +13,7 @@ var filter = require('../../lib/algorithms/hard-filter-reserved.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
-
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter);
 
 
 test('filterReserved()', function (t) {
@@ -31,20 +25,18 @@ test('filterReserved()', function (t) {
 
 	var expectServers = servers.slice(0, 2);
 	var expectReasons = {};
+	var opts = {};
 
-	var constraints = {};
-
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
 test('filterReserved() with no servers', function (t) {
 	var expectServers = [];
 	var expectReasons = {};
+	var opts = {};
 
-	var constraints = {};
-
-	checkFilter(t, [], constraints, expectServers, expectReasons);
+	checkFilter(t, [], opts, expectServers, expectReasons);
 });
 
 
diff --git a/test/algorithms/hard-filter-reservoir.test.js b/test/algorithms/hard-filter-reservoir.test.js
index 7c99a22..04a78f8 100644
--- a/test/algorithms/hard-filter-reservoir.test.js
+++ b/test/algorithms/hard-filter-reservoir.test.js
@@ -13,13 +13,7 @@ var filter = require('../../lib/algorithms/hard-filter-reservoir.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
-
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter);
 
 
 test('filterReservoir()', function (t) {
@@ -31,20 +25,18 @@ test('filterReservoir()', function (t) {
 
 	var expectServers = servers.slice(0, 2);
 	var expectReasons = {};
+	var opts = {};
 
-	var constraints = {};
-
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
 test('filterReservoir() with no servers', function (t) {
 	var expectServers = [];
 	var expectReasons = {};
+	var opts = {};
 
-	var constraints = {};
-
-	checkFilter(t, [], constraints, expectServers, expectReasons);
+	checkFilter(t, [], opts, expectServers, expectReasons);
 });
 
 
diff --git a/test/algorithms/hard-filter-running.test.js b/test/algorithms/hard-filter-running.test.js
index a25d07b..f46c43e 100644
--- a/test/algorithms/hard-filter-running.test.js
+++ b/test/algorithms/hard-filter-running.test.js
@@ -13,13 +13,7 @@ var filter = require('../../lib/algorithms/hard-filter-running.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
-
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter);
 
 
 test('filterRunning()', function (t) {
@@ -44,19 +38,18 @@ test('filterRunning()', function (t) {
 		    'Server has status: offline'
 	};
 
-	var constraints = {};
+	var opts = {};
 
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
 test('filterRunning() with no servers', function (t) {
 	var expectServers = [];
 	var expectReasons = {};
+	var opts = {};
 
-	var constraints = {};
-
-	checkFilter(t, [], constraints, expectServers, expectReasons);
+	checkFilter(t, [], opts, expectServers, expectReasons);
 });
 
 
@@ -65,11 +58,9 @@ test('filterRunning() with malformed servers 1', function (t) {
 
 	var expectServers = badServers;
 	var expectReasons = { skip: 'servers variable is not an array' };
+	var opts = {};
 
-	var constraints = {};
-
-	filter.run(LOG, badServers, constraints,
-			function (err, servers, reasons) {
+	filter.run(badServers, opts, function (err, servers, reasons) {
 		t.ifError(err);
 
 		t.deepEqual(servers, expectServers);
@@ -95,10 +86,9 @@ test('filterRunning() with malformed servers 2', function (t) {
 		    'Server has status: rebooting'
 	};
 
-	var constraints = {};
+	var opts = {};
 
-	filter.run(LOG, givenServers, constraints,
-			function (err, servers, reasons) {
+	filter.run(givenServers, opts, function (err, servers, reasons) {
 		t.ifError(err);
 
 		t.deepEqual(servers, expectServers);
diff --git a/test/algorithms/hard-filter-setup.test.js b/test/algorithms/hard-filter-setup.test.js
index 4e02f7e..8584356 100644
--- a/test/algorithms/hard-filter-setup.test.js
+++ b/test/algorithms/hard-filter-setup.test.js
@@ -13,13 +13,7 @@ var filter = require('../../lib/algorithms/hard-filter-setup.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
-
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter);
 
 
 test('filterSetup()', function (t) {
@@ -32,20 +26,18 @@ test('filterSetup()', function (t) {
 
 	var expectServers = [ servers[1], servers[3] ];
 	var expectReasons = {};
+	var opts = {};
 
-	var constraints = {};
-
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
 test('filterSetup() with no servers', function (t) {
 	var expectServers = [];
 	var expectReasons = {};
+	var opts = {};
 
-	var constraints = {};
-
-	checkFilter(t, [], constraints, expectServers, expectReasons);
+	checkFilter(t, [], opts, expectServers, expectReasons);
 });
 
 
@@ -54,11 +46,9 @@ test('filterSetup() with malformed servers 1', function (t) {
 
 	var expectServers = badServers;
 	var expectReasons = { skip: 'servers variable is not an array' };
+	var opts = {};
 
-	var constraints = {};
-
-	filter.run(LOG, badServers, constraints,
-			function (err, servers, reasons) {
+	filter.run(badServers, opts, function (err, servers, reasons) {
 		t.ifError(err);
 
 		t.deepEqual(servers, expectServers);
@@ -74,11 +64,9 @@ test('filterSetup() with malformed servers 2', function (t) {
 
 	var expectServers = [ givenServers[1] ];
 	var expectReasons = {};
+	var opts = {};
 
-	var constraints = {};
-
-	filter.run(LOG, givenServers, constraints,
-			function (err, servers, reasons) {
+	filter.run(givenServers, opts, function (err, servers, reasons) {
 		t.ifError(err);
 
 		t.deepEqual(servers, expectServers);
diff --git a/test/algorithms/hard-filter-sick-servers.test.js b/test/algorithms/hard-filter-sick-servers.test.js
index fb00f4b..4dcd60f 100644
--- a/test/algorithms/hard-filter-sick-servers.test.js
+++ b/test/algorithms/hard-filter-sick-servers.test.js
@@ -13,13 +13,7 @@ var filter = require('../../lib/algorithms/hard-filter-sick-servers.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
-
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter);
 
 
 test('filterSickServers()', function (t) {
@@ -134,9 +128,9 @@ test('filterSickServers()', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = {};
+	var opts = {};
 
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
diff --git a/test/algorithms/hard-filter-traits.test.js b/test/algorithms/hard-filter-traits.test.js
index 4db3970..2af83b3 100644
--- a/test/algorithms/hard-filter-traits.test.js
+++ b/test/algorithms/hard-filter-traits.test.js
@@ -13,11 +13,6 @@ var filter = require('../../lib/algorithms/hard-filter-traits.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
 var SERVERS = [ {
 	uuid: 'de52bbab-a12d-4e11-8292-c4141031553c',
 	traits: { ssd: true,  users: 'john' }
@@ -39,7 +34,7 @@ var SERVERS = [ {
 } ];
 
 
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter);
 
 
 test('filterTraits() for VMs 1', function (t) {
@@ -54,9 +49,12 @@ test('filterTraits() for VMs 1', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = { vm: { traits: { ssd: true } }, img: {} };
+	var opts = {
+		vm: { traits: { ssd: true } },
+		img: {}
+	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -72,9 +70,12 @@ test('filterTraits() for VMs 2', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = { vm: { traits: { ssd: false } }, img: {} };
+	var opts = {
+		vm: { traits: { ssd: false } },
+		img: {}
+	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -91,9 +92,12 @@ test('filterTraits() for VMs 3', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = { vm: { traits: { users: 'john' } }, img: {} };
+	var opts = {
+		vm: { traits: { users: 'john' } },
+		img: {}
+	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -109,9 +113,12 @@ test('filterTraits() for VMs 4', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = { vm: { traits: { users: 'jack' } }, img: {} };
+	var opts = {
+		vm: { traits: { users: 'jack' } },
+		img: {}
+	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -127,11 +134,12 @@ test('filterTraits() for VMs 5', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = {
-		vm: { traits: { ssd: true, users: 'jane' } }, img: {}
+	var opts = {
+		vm: { traits: { ssd: true, users: 'jane' } },
+		img: {}
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -149,11 +157,12 @@ test('filterTraits() for VMs 6', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = {
-		vm: { traits: { ssd: false, users: 'jane' } }, img: {}
+	var opts = {
+		vm: { traits: { ssd: false, users: 'jane' } },
+		img: {}
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -168,11 +177,12 @@ test('filterTraits() for VMs 7', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = {
-		vm: { traits: { users: ['john', 'jane' ] } }, img: {}
+	var opts = {
+		vm: { traits: { users: ['john', 'jane' ] } },
+		img: {}
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -188,9 +198,13 @@ test('filterTraits() for image manifests 1', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = { vm: {}, pkg: {}, img: { traits: { ssd: true } } };
+	var opts = {
+		vm:  {},
+		pkg: {},
+		img: { traits: { ssd: true } }
+	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -206,9 +220,13 @@ test('filterTraits() for image manifests 2', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = { vm: {}, pkg: {}, img: { traits: { ssd: false } } };
+	var opts = {
+		vm:  {},
+		pkg: {},
+		img: { traits: { ssd: false } }
+	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -224,11 +242,13 @@ test('filterTraits() for image manifests 3', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = {
-		vm: {}, pkg: {}, img: { traits: { users: 'john' } }
+	var opts = {
+		vm:  {},
+		pkg: {},
+		img: { traits: { users: 'john' } }
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -244,11 +264,13 @@ test('filterTraits() for image manifests 4', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = {
-		vm: {}, pkg: {}, img: { traits: { users: 'jack' } }
+	var opts = {
+		vm:  {},
+		pkg: {},
+		img: { traits: { users: 'jack' } }
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -264,11 +286,13 @@ test('filterTraits() for image manifests 5', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = {
-		vm: {}, pkg: {}, img: { traits: { ssd: true, users: 'jane' } }
+	var opts = {
+		vm:  {},
+		pkg: {},
+		img: { traits: { ssd: true, users: 'jane' } }
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -285,11 +309,13 @@ test('filterTraits() for image manifests 6', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = {
-		vm: {}, pkg: {}, img: { traits: { ssd: false, users: 'jane' } }
+	var opts = {
+		vm:  {},
+		pkg: {},
+		img: { traits: { ssd: false, users: 'jane' } }
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -304,11 +330,13 @@ test('filterTraits() for image manifests 7', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = {
-		vm: {}, pkg: {}, img: { traits: { users: ['john', 'jane'] } }
+	var opts = {
+		vm:  {},
+		pkg: {},
+		img: { traits: { users: ['john', 'jane'] } }
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -325,13 +353,13 @@ test('filterTraits() for VMs and manifests 1', function (t) {
 	};
 
 	/* image manifest overrides VM package */
-	var constraints = {
+	var opts = {
 		vm:  { traits: { ssd: false } },
 		img: { traits: { ssd: true } },
 		pkg: {}
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -347,13 +375,13 @@ test('filterTraits() for VMs and manifests 2', function (t) {
 	};
 
 	/* should merge values between the two */
-	var constraints = {
+	var opts = {
 		vm:  { traits: { ssd: true } },
 		img: { traits: { users: 'john' } },
 		pkg: {}
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -369,9 +397,13 @@ test('filterTraits() for VMs and manifests 3', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = { vm: { traits: { ssd: true } }, img: {}, pkg: {} };
+	var opts = {
+		vm:  { traits: { ssd: true } },
+		img: {},
+		pkg: {}
+	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -387,9 +419,13 @@ test('filterTraits() for VMs and manifests 4', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = { vm: {}, img: { traits: { ssd: true } }, pkg: {} };
+	var opts = {
+		vm:  {},
+		img: { traits: { ssd: true } },
+		pkg: {}
+	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -406,13 +442,13 @@ test('filterTraits() for packages and manifests 1', function (t) {
 	};
 
 	/* image manifest overrides package */
-	var constraints = {
+	var opts = {
 		vm:  {},
 		img: { traits: { ssd: true  } },
 		pkg: { traits: { ssd: false } }
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -429,13 +465,13 @@ test('filterTraits() for packages and manifests 2', function (t) {
 	};
 
 	/* VM overrides package */
-	var constraints = {
+	var opts = {
 		vm:  { traits: { ssd: true  } },
 		img: {},
 		pkg: { traits: { ssd: false } }
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -451,13 +487,13 @@ test('filterTraits() for packages and manifests 3', function (t) {
 	};
 
 	/* should merge values between the two */
-	var constraints = {
+	var opts = {
 		vm:  {},
 		img: { traits: { users: 'john' } },
 		pkg: { traits: { ssd: true	 } }
 	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -474,9 +510,13 @@ test('filterTraits() for packages and manifests 4', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = { vm:  {}, img: {}, pkg: { traits: { ssd: true } } };
+	var opts = {
+		vm:  {},
+		img: {},
+		pkg: { traits: { ssd: true } }
+	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -492,9 +532,13 @@ test('filterTraits() for packages and manifests 5', function (t) {
 		/* END JSSTYLED */
 	};
 
-	var constraints = { vm:  {}, img: { traits: { ssd: true } }, pkg: {} };
+	var opts = {
+		vm:  {},
+		img: { traits: { ssd: true } },
+		pkg: {}
+	};
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -507,9 +551,13 @@ test('filterTraits() with no traits on server 1', function (t) {
 	var expectServers = servers;
 	var expectReasons = {};
 
-	var constraints = { vm: { traits: {} }, img: { traits: {} }, pkg: {} };
+	var opts = {
+		vm:  { traits: {} },
+		img: { traits: {} },
+		pkg: {}
+	};
 
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
@@ -526,13 +574,13 @@ test('filterTraits() with no traits on server 2', function (t) {
 		    'but server has undefined'
 	};
 
-	var constraints = {
-		vm: { traits: { ssd: false } },
+	var opts = {
+		vm:  { traits: { ssd: false } },
 		img: { traits: {} },
 		pkg: {}
 	};
 
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
@@ -553,9 +601,13 @@ test('filterTraits() with no traits on VM or manifest 1', function (t) {
 		    'but server has {"ssd":true}'
 	};
 
-	var constraints = { vm: { traits: {} }, img: { traits: {} }, pkg: {} };
+	var opts = {
+		vm:  { traits: {} },
+		img: { traits: {} },
+		pkg: {}
+	};
 
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
@@ -577,9 +629,13 @@ test('filterTraits() with no traits on VM or manifest 2', function (t) {
 		    'but server has {"ssd":true}'
 	};
 
-	var constraints = { vm: {}, img: {}, pkg: {} };
+	var opts = {
+		vm:  {},
+		img: {},
+		pkg: {}
+	};
 
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
@@ -600,16 +656,23 @@ test('filterTraits() with no package', function (t) {
 		    'but server has {"ssd":true}'
 	};
 
-	var constraints = { vm: { ram: 512 }, img: {} };
+	var opts = {
+		vm:  { ram: 512 },
+		img: {}
+	};
 
-	checkFilter(t, servers, constraints, expectServers, expectReasons);
+	checkFilter(t, servers, opts, expectServers, expectReasons);
 });
 
 
 test('filterTraits() with no servers', function (t) {
-	var constraints = { vm: { ram: 512 }, pkg: {}, img: {} };
+	var opts = {
+		vm:  { ram: 512 },
+		pkg: {},
+		img: {}
+	};
 
-	checkFilter(t, [], constraints, [], {});
+	checkFilter(t, [], opts, [], {});
 });
 
 
diff --git a/test/algorithms/hard-filter-vlans.test.js b/test/algorithms/hard-filter-vlans.test.js
index 88304c0..6f23397 100644
--- a/test/algorithms/hard-filter-vlans.test.js
+++ b/test/algorithms/hard-filter-vlans.test.js
@@ -11,13 +11,9 @@
 var assert = require('assert-plus');
 var test = require('tape');
 var filter = require('../../lib/algorithms/hard-filter-vlans.js');
+var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
 var SERVERS = [
 	{
 		uuid: '00009386-8c67-b674-587f-101f1db2eda7',
@@ -130,9 +126,9 @@ var SERVERS = [
 function
 runTest(t, vlans, expectedUuids, expectedReasons)
 {
-	var constraints = { vm: { nic_tags: vlans } };
+	var opts = common.addCommonOpts({ vm: { nic_tags: vlans }});
 
-	filter.run(LOG, SERVERS, constraints, function (err, servers, reasons) {
+	filter.run(SERVERS, opts, function (err, servers, reasons) {
 		assert.arrayOfObject(servers);
 		assert.object(reasons);
 
@@ -343,10 +339,9 @@ test('filterVlans() on multiple vlans 4', function (t) {
 
 test('filterVlans() with no servers', function (t) {
 	var emptyServers = [];
-	var constraints = { vm: { nic_tags: ['admin'] } };
+	var opts = common.addCommonOpts({ vm: { nic_tags: ['admin'] }});
 
-	filter.run(LOG, emptyServers, constraints,
-			function (err, servers, reasons) {
+	filter.run(emptyServers, opts, function (err, servers, reasons) {
 		t.ifError(err);
 
 		t.deepEqual(servers, []);
diff --git a/test/algorithms/hard-filter-vm-count.test.js b/test/algorithms/hard-filter-vm-count.test.js
index 28aacc6..1fc3b89 100644
--- a/test/algorithms/hard-filter-vm-count.test.js
+++ b/test/algorithms/hard-filter-vm-count.test.js
@@ -14,11 +14,6 @@ var filter = require('../../lib/algorithms/hard-filter-vm-count.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
 var SERVERS = [ {
 	uuid: '33ce31d0-f376-4efd-ad41-f17c430b9782',
 	vms: {
@@ -46,7 +41,7 @@ var SERVERS = [ {
 } ];
 
 
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter);
 
 
 test('filterVmCount()', function (t) {
@@ -58,9 +53,9 @@ test('filterVmCount()', function (t) {
 			'Server has 4 VMs (limit is 3)'
 	};
 
-	var constraints = { defaults: { filter_vm_limit: 3 } };
+	var opts = { defaults: { filter_vm_limit: 3 } };
 
-	checkFilter(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -77,10 +72,9 @@ test('filterVmCount() with no given limit, less than 224 VMs', function (t) {
 
 	var expectServers = [server];
 	var expectReasons = {};
+	var opts = { defaults: {} };
 
-	var constraints = { defaults: {} };
-
-	checkFilter(t, [server], constraints, expectServers, expectReasons);
+	checkFilter(t, [server], opts, expectServers, expectReasons);
 });
 
 
@@ -103,16 +97,16 @@ test('filterVmCount() with no given limit, less than 224 VMs', function (t) {
 			'Server has 224 VMs (limit is 224)'
 	};
 
-	var constraints = { defaults: {} };
+	var opts = { defaults: {} };
 
-	checkFilter(t, [server], constraints, expectServers, expectReasons);
+	checkFilter(t, [server], opts, expectServers, expectReasons);
 });
 
 
 test('filterVmCount() with no servers', function (t) {
-	var constraints = { defaults: { filter_vm_limit: 3 } };
+	var opts = { defaults: { filter_vm_limit: 3 } };
 
-	checkFilter(t, [], constraints, [], {});
+	checkFilter(t, [], opts, [], {});
 });
 
 
diff --git a/test/algorithms/hard-filter-volumes-from.test.js b/test/algorithms/hard-filter-volumes-from.test.js
index efc8066..a3eebca 100644
--- a/test/algorithms/hard-filter-volumes-from.test.js
+++ b/test/algorithms/hard-filter-volumes-from.test.js
@@ -13,10 +13,6 @@ var filter = require('../../lib/algorithms/hard-filter-volumes-from.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); }
-};
-
 var SERVERS = [
 	{
 		uuid: 'd8ea612d-7440-411e-8e34-e6bf1adeb008',
@@ -46,7 +42,7 @@ var SERVERS = [
 ];
 
 
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter);
 
 
 test('filterVolumesFrom()', function (t) {
@@ -69,7 +65,9 @@ test('filterVolumesFrom()', function (t) {
 		/* END JSSTYLED */
 	};
 
-	checkFilter(t, SERVERS, { vm: vm }, expectServers, expectReasons);
+	var opts = { vm: vm };
+
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -84,7 +82,9 @@ test('filterVolumesFrom() with no servers', function (t) {
 		}
 	};
 
-	checkFilter(t, [], { vm: vm }, [], {});
+	var opts = { vm: vm };
+
+	checkFilter(t, [], opts, [], {});
 });
 
 
@@ -95,8 +95,9 @@ test('filterVolumesFrom() with no metadata', function (t) {
 
 	var expectServers = SERVERS;
 	var expectReasons = {};
+	var opts = { vm: vm };
 
-	checkFilter(t, SERVERS, { vm: vm }, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -108,8 +109,9 @@ test('filterVolumesFrom() with no volumesfrom', function (t) {
 
 	var expectServers = SERVERS;
 	var expectReasons = {};
+	var opts = { vm: vm };
 
-	checkFilter(t, SERVERS, { vm: vm }, expectServers, expectReasons);
+	checkFilter(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
diff --git a/test/algorithms/identity.test.js b/test/algorithms/identity.test.js
index 4729fde..e08027d 100644
--- a/test/algorithms/identity.test.js
+++ b/test/algorithms/identity.test.js
@@ -13,13 +13,7 @@ var identity = require('../../lib/algorithms/identity.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
-
-var checkPlugin = common.createPluginChecker(identity, LOG);
+var checkPlugin = common.createPluginChecker(identity);
 
 
 test('identity()', function (t) {
@@ -32,10 +26,9 @@ test('identity()', function (t) {
 
 	var expectServers = servers;
 	var expectReasons = {};
+	var opts = {};
 
-	var constraints = {};
-
-	checkPlugin(t, servers, constraints, expectServers, expectReasons);
+	checkPlugin(t, servers, opts, expectServers, expectReasons);
 });
 
 
diff --git a/test/algorithms/override-overprovisioning.test.js b/test/algorithms/override-overprovisioning.test.js
index 615cce4..30299ba 100644
--- a/test/algorithms/override-overprovisioning.test.js
+++ b/test/algorithms/override-overprovisioning.test.js
@@ -14,11 +14,6 @@ var plugin = require('../../lib/algorithms/override-overprovisioning.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
 var SERVERS = [
 	{ unreserved_cpu: 1 },
 	{ unreserved_cpu: 2, overprovision_ratios: {} },
@@ -45,10 +40,12 @@ var EXPECT_REASONS = {};
 
 test('disable overprovisioning 1', function (t) {
 	var pkg = {};
-	var constraints = { pkg: pkg, defaults: {} };
+	var opts = common.addCommonOpts({
+		pkg: pkg,
+		defaults: {}
+	});
 
-	plugin.run(LOG, SERVERS, constraints,
-			function (err, servers, reasons) {
+	plugin.run(SERVERS, opts, function (err, servers, reasons) {
 		assert.arrayOfObject(servers);
 		assert.object(reasons);
 
@@ -77,10 +74,12 @@ test('disable overprovisioning 2', function (t) {
 		overprovision_net: 1
 	};
 
-	var constraints = { pkg: pkg, defaults: {} };
+	var opts = common.addCommonOpts({
+		pkg: pkg,
+		defaults: {}
+	});
 
-	plugin.run(LOG, SERVERS, constraints,
-			function (err, servers, reasons) {
+	plugin.run(SERVERS, opts, function (err, servers, reasons) {
 		assert.arrayOfObject(servers);
 		assert.object(reasons);
 
@@ -101,12 +100,11 @@ test('disable overprovisioning 2', function (t) {
 
 
 test('disable overprovisioning without pkg', function (t) {
-	var constraints = { defaults: {} };
-	var expectConstraints = common.clone(constraints);
+	var opts = common.addCommonOpts({ defaults: {} });
+	var expectOpts = common.clone(opts);
 	var expectReasons = {};
 
-	plugin.run(LOG, SERVERS, constraints,
-			function (err, servers, reasons) {
+	plugin.run(SERVERS, opts, function (err, servers, reasons) {
 		assert.arrayOfObject(servers);
 		assert.object(reasons);
 
@@ -116,7 +114,9 @@ test('disable overprovisioning without pkg', function (t) {
 		t.deepEqual(reasons, expectReasons);
 
 		// just checking pkg attr wasn't added
-		t.deepEqual(constraints, expectConstraints);
+		delete opts.log;
+		delete expectOpts.log;
+		t.deepEqual(opts, expectOpts);
 
 		t.end();
 	});
@@ -132,12 +132,14 @@ function (t) {
 	};
 
 	var pkg = {};
-	var constraints = { pkg: pkg, defaults: {
-		disable_override_overprovisioning: true
-	} };
+	var opts = common.addCommonOpts({
+		pkg: pkg,
+		defaults: {
+			disable_override_overprovisioning: true
+		}
+	});
 
-	plugin.run(LOG, SERVERS, constraints,
-			function (err, servers, reasons) {
+	plugin.run(SERVERS, opts, function (err, servers, reasons) {
 		assert.arrayOfObject(servers);
 		assert.object(reasons);
 
@@ -169,14 +171,16 @@ test('disable overprovisioning with override_overprovision_* 1', function (t) {
 	} ];
 
 	var pkg = {};
-	var constraints = { pkg: pkg, defaults: {
-		overprovision_ratio_cpu: 6,
-		overprovision_ratio_ram: 0.75,
-		overprovision_ratio_disk: 0.5
-	} };
-
-	plugin.run(LOG, SERVERS, constraints,
-			function (err, servers, reasons) {
+	var opts = common.addCommonOpts({
+		pkg: pkg,
+		defaults: {
+			overprovision_ratio_cpu: 6,
+			overprovision_ratio_ram: 0.75,
+			overprovision_ratio_disk: 0.5
+		}
+	});
+
+	plugin.run(SERVERS, opts, function (err, servers, reasons) {
 		assert.arrayOfObject(servers);
 		assert.object(reasons);
 
@@ -220,14 +224,16 @@ test('disable overprovisioning with override_overprovision_* 2', function (t) {
 		overprovision_net: 1
 	};
 
-	var constraints = { pkg: pkg, defaults: {
-		overprovision_ratio_cpu: 6,
-		overprovision_ratio_ram: 0.75,
-		overprovision_ratio_disk: 0.5
-	} };
+	var opts = common.addCommonOpts({
+		pkg: pkg,
+		defaults: {
+			overprovision_ratio_cpu: 6,
+			overprovision_ratio_ram: 0.75,
+			overprovision_ratio_disk: 0.5
+		}
+	});
 
-	plugin.run(LOG, SERVERS, constraints,
-			function (err, servers, reasons) {
+	plugin.run(SERVERS, opts, function (err, servers, reasons) {
 		assert.arrayOfObject(servers);
 		assert.object(reasons);
 
@@ -249,9 +255,9 @@ test('disable overprovisioning with override_overprovision_* 2', function (t) {
 
 
 test('disable overprovisioning with no servers', function (t) {
-	var constraints = { pkg: {}, defaults: {} };
+	var opts = common.addCommonOpts({ pkg: {}, defaults: {} });
 
-	plugin.run(LOG, [], constraints, function (err, servers, reasons) {
+	plugin.run([], opts, function (err, servers, reasons) {
 		assert.arrayOfObject(servers);
 		assert.object(reasons);
 
diff --git a/test/algorithms/score-current-platform.test.js b/test/algorithms/score-current-platform.test.js
index 3c02d7e..8f6ce83 100644
--- a/test/algorithms/score-current-platform.test.js
+++ b/test/algorithms/score-current-platform.test.js
@@ -15,11 +15,6 @@ var common = require('./common');
 var clone  = common.clone;
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
 var SERVERS = [ {
 	uuid: '8973fb43-29da-474c-97b8-7c513c602a24',
 	score: 1,
@@ -71,11 +66,9 @@ test('scoreCurrentPlatform()', function (t) {
 			'increased score by 0.00 to 1.00'
 	};
 
-	var constraints = {
-		defaults: { weight_current_platform: 3 }
-	};
+	var opts = { defaults: { weight_current_platform: 3 } };
 
-	checkFixedScorer(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFixedScorer(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -103,23 +96,19 @@ test('scoreCurrentPlatform() with negative weight', function (t) {
 			'increased score by 3.00 to 4.00'
 	};
 
-	var constraints = {
-		defaults: { weight_current_platform: -3 }
-	};
+	var opts = { defaults: { weight_current_platform: -3 } };
 
-	checkFixedScorer(t, SERVERS, constraints, expectServers, expectReasons);
+	checkFixedScorer(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
 test('scoreCurrentPlatform() with one server', function (t) {
 	var servers = [ SERVERS[0] ];
-
 	var expectServers = servers;
 	var expectReasons = { skip: 'One or fewer servers' };
+	var opts = {};
 
-	var constraints = {};
-
-	checkFixedScorer(t, servers, constraints, expectServers, expectReasons);
+	checkFixedScorer(t, servers, opts, expectServers, expectReasons);
 });
 
 
@@ -139,10 +128,16 @@ test('name', function (t) {
 // helpers ---
 
 
-function checkFixedScorer(t, givenServers, constraints, expectServers,
-		expectReasons) {
-	scorer.run(LOG, clone(givenServers), constraints,
-			function (err, servers, reasons) {
+function checkFixedScorer(t, givenServers, opts, expectServers, expectReasons) {
+	assert.object(t, 't');
+	assert.arrayOfObject(givenServers, 'givenServers');
+	assert.object(opts, 'opts');
+	assert.arrayOfObject(expectServers, 'expectServers');
+	assert.object(expectReasons, 'expectReasons');
+
+	opts = common.addCommonOpts(opts);
+
+	scorer.run(clone(givenServers), opts, function (err, servers, reasons) {
 		assert.arrayOfObject(servers);
 		assert.object(reasons);
 
diff --git a/test/algorithms/score-next-reboot.test.js b/test/algorithms/score-next-reboot.test.js
index 0b62534..005b14d 100644
--- a/test/algorithms/score-next-reboot.test.js
+++ b/test/algorithms/score-next-reboot.test.js
@@ -14,11 +14,6 @@ var common = require('./common');
 var clone  = common.clone;
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
 var SERVERS = [ {
 	uuid: '62ccf0e0-268f-4f82-838a-218e4798d6c2',
 	score: 1,
@@ -50,7 +45,7 @@ var SERVERS = [ {
 // helpers ---
 
 
-var checkScorer = common.createPluginChecker(scorer, LOG);
+var checkScorer = common.createPluginChecker(scorer);
 
 var now;
 function delta(days) {
@@ -87,11 +82,9 @@ test('scoreNextReboot() - positive weight', function (t) {
 			'increased score by 2.00 to 3.00'
 	};
 
-	var constraints = {
-		defaults: { weight_next_reboot: 3 }
-	};
+	var opts = { defaults: { weight_next_reboot: 3 } };
 
-	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
+	checkScorer(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -119,11 +112,9 @@ test('scoreNextReboot() - negative weight', function (t) {
 			'increased score by 1.00 to 2.00'
 	};
 
-	var constraints = {
-		defaults: { weight_next_reboot: -3 }
-	};
+	var opts = { defaults: { weight_next_reboot: -3 } };
 
-	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
+	checkScorer(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -136,17 +127,17 @@ test('scoreNextReboot() with one server', function (t) {
 
 	var expectServers = servers;
 	var expectReasons = { skip: 'One or fewer servers' };
+	var opts = {};
 
-	var constraints = {};
-
-	checkScorer(t, servers, constraints, expectServers, expectReasons);
+	checkScorer(t, servers, opts, expectServers, expectReasons);
 });
 
 
 test('scoreNextReboot() with no servers', function (t) {
 	var expectReasons = { skip: 'One or fewer servers' };
+	var opts = {};
 
-	checkScorer(t, [], {}, [], expectReasons);
+	checkScorer(t, [], opts, [], expectReasons);
 });
 
 
diff --git a/test/algorithms/score-num-owner-zones.test.js b/test/algorithms/score-num-owner-zones.test.js
index 0534057..f6ba7fe 100644
--- a/test/algorithms/score-num-owner-zones.test.js
+++ b/test/algorithms/score-num-owner-zones.test.js
@@ -16,11 +16,6 @@ var clone  = common.clone;
 
 var OWNER_UUID = 'e6667010-7831-462f-ba1f-e345f8288106';
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
 var SERVERS = [ {
 	uuid: 'b38dc3a0-eb00-11e5-943f-8bc57e287d0d',
 	unreserved_ram: 256,
@@ -97,7 +92,7 @@ var SERVERS = [ {
 } ];
 
 
-var checkScorer = common.createPluginChecker(scorer, LOG);
+var checkScorer = common.createPluginChecker(scorer);
 
 
 test('scoreNumOwnerZones()', function (t) {
@@ -115,14 +110,14 @@ test('scoreNumOwnerZones()', function (t) {
 			'increased score by 4.00 to 5.00; 0 owner zones found'
 	};
 
-	var constraints = {
-		vm: { owner_uuid: OWNER_UUID },
+	var opts = {
+		vm:  { owner_uuid: OWNER_UUID },
 		defaults: {
 			weight_num_owner_zones: 4
 		}
 	};
 
-	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
+	checkScorer(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -141,14 +136,14 @@ test('scoreNumOwnerZones() with negative default weight', function (t) {
 			'increased score by 0.00 to 1.00; 0 owner zones found'
 	};
 
-	var constraints = {
-		vm: { owner_uuid: OWNER_UUID },
+	var opts = {
+		vm:  { owner_uuid: OWNER_UUID },
 		defaults: {
 			weight_num_owner_zones: -4
 		}
 	};
 
-	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
+	checkScorer(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -158,14 +153,14 @@ test('scoreNumOwnerZones() with zero default weight', function (t) {
 		skip: 'Resolved score weight to 0.00; no changes'
 	};
 
-	var constraints = {
-		vm: { owner_uuid: OWNER_UUID },
+	var opts = {
+		vm:  { owner_uuid: OWNER_UUID },
 		defaults: {
 			weight_num_owner_zones: 0
 		}
 	};
 
-	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
+	checkScorer(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -184,15 +179,15 @@ test('scoreNumOwnerZones() with min-owner default set', function (t) {
 			'increased score by 2.00 to 3.00; 0 owner zones found'
 	};
 
-	var constraints = {
-		vm: { owner_uuid: OWNER_UUID },
+	var opts = {
+		vm:  { owner_uuid: OWNER_UUID },
 		defaults: {
 			weight_num_owner_zones: 4,
 			server_spread: 'min-owner'
 		}
 	};
 
-	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
+	checkScorer(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -202,15 +197,15 @@ test('scoreNumOwnerZones() with unrelated spread default set', function (t) {
 		skip: 'pkg or default set to spread with: min-ram'
 	};
 
-	var constraints = {
-		vm: { owner_uuid: OWNER_UUID },
+	var opts = {
+		vm:  { owner_uuid: OWNER_UUID },
 		defaults: {
 			weight_unreserved_ram: 4,
 			server_spread: 'min-ram'
 		}
 	};
 
-	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
+	checkScorer(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -229,13 +224,13 @@ test('scoreNumOwnerZones() with min-owner package attr set', function (t) {
 			'increased score by 2.00 to 3.00; 0 owner zones found'
 	};
 
-	var constraints = {
-		vm: { owner_uuid: OWNER_UUID },
-		defaults: { weight_unreserved_ram: 4 },
-		pkg: { alloc_server_spread: 'min-owner' }
+	var opts = {
+		vm:  { owner_uuid: OWNER_UUID },
+		pkg: { alloc_server_spread: 'min-owner' },
+		defaults: { weight_unreserved_ram: 4 }
 	};
 
-	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
+	checkScorer(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -254,8 +249,8 @@ test('scoreNumOwnerZones() with package and default set', function (t) {
 			'increased score by 2.00 to 3.00; 0 owner zones found'
 	};
 
-	var constraints = {
-		vm: { owner_uuid: OWNER_UUID },
+	var opts = {
+		vm:  { owner_uuid: OWNER_UUID },
 		pkg: { alloc_server_spread: 'min-owner' },
 		defaults: {
 			weight_unreserved_ram: 4,
@@ -263,7 +258,7 @@ test('scoreNumOwnerZones() with package and default set', function (t) {
 		}
 	};
 
-	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
+	checkScorer(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -273,13 +268,13 @@ test('scoreNumOwnerZones() with unrelated package attr set', function (t) {
 		skip: 'pkg or default set to spread with: max-ram'
 	};
 
-	var constraints = {
-		vm: { owner_uuid: OWNER_UUID },
-		defaults: { weight_unreserved_ram: 4 },
-		pkg: { alloc_server_spread: 'max-ram' }
+	var opts = {
+		vm:  { owner_uuid: OWNER_UUID },
+		pkg: { alloc_server_spread: 'max-ram' },
+		defaults: { weight_unreserved_ram: 4 }
 	};
 
-	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
+	checkScorer(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -293,22 +288,22 @@ test('scoreNumOwnerZones() with one server', function (t) {
 			'increased score by 4.00 to 5.00; 12 owner zones found'
 	};
 
-	var constraints = {
+	var opts = {
 		vm: { owner_uuid: OWNER_UUID },
 		defaults: { weight_num_owner_zones: 4 }
 	};
 
-	checkScorer(t, servers, constraints, expectServers, expectReasons);
+	checkScorer(t, servers, opts, expectServers, expectReasons);
 });
 
 
 test('scoreNumOwnerZones() without servers', function (t) {
-	var constraints = {
+	var opts = {
 		vm: { owner_uuid: OWNER_UUID },
 		defaults: { weight_num_owner_zones: 4 }
-		};
+	};
 
-	checkScorer(t, [], constraints, [], {});
+	checkScorer(t, [], opts, [], {});
 });
 
 
diff --git a/test/algorithms/score-uniform-random.test.js b/test/algorithms/score-uniform-random.test.js
index c5c9662..fb2b594 100644
--- a/test/algorithms/score-uniform-random.test.js
+++ b/test/algorithms/score-uniform-random.test.js
@@ -8,17 +8,13 @@
  * Copyright (c) 2016, Joyent, Inc.
  */
 
+var assert = require('assert-plus');
 var test = require('tape');
 var scorer = require('../../lib/algorithms/score-uniform-random.js');
 var common = require('./common');
 var clone  = common.clone;
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
 var SERVERS = [ {
 	uuid: '59eb4f1b-c9a7-41c7-8ab0-2142da53d62f',
 	score: 1
@@ -31,39 +27,40 @@ var SERVERS = [ {
 } ];
 
 
-var checkScorer = common.createPluginChecker(scorer, LOG);
+var checkScorer = common.createPluginChecker(scorer);
 
 
 test('scoreUniformRandom()', function (t) {
-	var constraints = { defaults: { weight_uniform_random: 4 } };
-	checkRandom(t, constraints, 5);
+	var opts = { defaults: { weight_uniform_random: 4 } };
+
+	checkRandom(t, opts, 5);
 });
 
 
 test('scoreUniformRandom() with pkg set spread', function (t) {
-	var constraints = {
+	var opts = {
 		defaults: { weight_uniform_random: 4 },
 		pkg: { alloc_server_spread: 'random' }
 	};
 
-	checkRandom(t, constraints, 3);
+	checkRandom(t, opts, 3);
 });
 
 
 test('scoreUniformRandom() with defaults set spread', function (t) {
-	var constraints = {
+	var opts = {
 		defaults: {
 			weight_uniform_random: 4,
 			server_spread: 'random'
 		}
 	};
 
-	checkRandom(t, constraints, 3);
+	checkRandom(t, opts, 3);
 });
 
 
 test('scoreUniformRandom() with defaults and package attr', function (t) {
-	var constraints = {
+	var opts = {
 		defaults: {
 			weight_uniform_random: 4,
 			server_spread: 'min-ram'
@@ -71,7 +68,7 @@ test('scoreUniformRandom() with defaults and package attr', function (t) {
 		pkg: { alloc_server_spread: 'random' }
 	};
 
-	checkRandom(t, constraints, 3);
+	checkRandom(t, opts, 3);
 });
 
 
@@ -81,14 +78,14 @@ test('scoreUniformRandom() skip wrong spread', function (t) {
 		skip: 'pkg or default set to spread with: min-owner'
 	};
 
-	var constraints = {
+	var opts = {
 		defaults: {
 			weight_uniform_random: 4,
 			server_spread: 'min-owner'
 		}
 	};
 
-	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
+	checkScorer(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -98,9 +95,12 @@ test('scoreUniformRandom() skip wrong spread', function (t) {
 		skip: 'pkg or default set to spread with: min-owner'
 	};
 
-	var constraints = { pkg: {}, defaults: { server_spread: 'min-owner' } };
+	var opts = {
+		defaults: { server_spread: 'min-owner' },
+		pkg: {}
+	};
 
-	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
+	checkScorer(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -111,8 +111,14 @@ test('name', function (t) {
 
 
 function
-checkRandom(t, constraints, expectedMax)
+checkRandom(t, opts, expectedMax)
 {
+	assert.object(t, 't');
+	assert.object(opts, 'opts');
+	assert.number(expectedMax, 'expectedMax');
+
+	opts = common.addCommonOpts(opts);
+
 	var scores = SERVERS.map(function () { return ([]); });
 
 	function iter(num) {
@@ -120,7 +126,7 @@ checkRandom(t, constraints, expectedMax)
 			return (checkScores());
 		}
 
-		return scorer.run(LOG, clone(SERVERS), constraints,
+		return scorer.run(clone(SERVERS), opts,
 				function (err, servers, reasons) {
 			t.ifError(err);
 
diff --git a/test/algorithms/score-unreserved-disk.test.js b/test/algorithms/score-unreserved-disk.test.js
index bc5e61f..9eba74f 100644
--- a/test/algorithms/score-unreserved-disk.test.js
+++ b/test/algorithms/score-unreserved-disk.test.js
@@ -14,11 +14,6 @@ var common = require('./common');
 var clone  = common.clone;
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
 var SERVERS = [ {
 	uuid: 'ef23ad0e-1802-4929-af61-387e9071d39f',
 	score: 1,
@@ -34,7 +29,7 @@ var SERVERS = [ {
 } ];
 
 
-var checkScorer = common.createPluginChecker(scorer, LOG);
+var checkScorer = common.createPluginChecker(scorer);
 
 
 test('scoreUnreservedDisk()', function (t) {
@@ -52,11 +47,9 @@ test('scoreUnreservedDisk()', function (t) {
 			'increased score by 2.00 to 3.00'
 	};
 
-	var constraints = {
-		defaults: { weight_unreserved_disk: 4 }
-	};
+	var opts = { defaults: { weight_unreserved_disk: 4 } };
 
-	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
+	checkScorer(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -75,11 +68,9 @@ test('scoreUnreservedDisk() with negative default weight', function (t) {
 			'increased score by 2.00 to 3.00'
 	};
 
-	var constraints = {
-		defaults: { weight_unreserved_disk: -4 }
-	};
+	var opts = { defaults: { weight_unreserved_disk: -4 } };
 
-	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
+	checkScorer(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -89,11 +80,9 @@ test('scoreUnreservedDisk() with zero default weight', function (t) {
 		'skip': 'Resolved score weight to 0.00; no changes'
 	};
 
-	var constraints = {
-		defaults: { weight_unreserved_disk: 0 }
-	};
+	var opts = { defaults: { weight_unreserved_disk: 0 } };
 
-	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
+	checkScorer(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -103,14 +92,14 @@ test('scoreUnreservedDisk() with any spread default set', function (t) {
 		skip: 'pkg or default set to spread with: min-owner'
 	};
 
-	var constraints = {
+	var opts = {
 		defaults: {
 			weight_unreserved_disk: 4,
 			server_spread: 'min-owner'
 		}
 	};
 
-	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
+	checkScorer(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -120,14 +109,14 @@ test('scoreUnreservedDisk() with any package attr set', function (t) {
 		skip: 'pkg or default set to spread with: min-ram'
 	};
 
-	var constraints = {
+	var opts = {
 		defaults: {
 			weight_unreserved_disk: 4
 		},
 		pkg: { alloc_server_spread: 'min-ram' }
 	};
 
-	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
+	checkScorer(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -141,20 +130,16 @@ test('scoreUnreservedDisk() with one server', function (t) {
 			'increased score by 4.00 to 5.00'
 	};
 
-	var constraints = {
-		defaults: { weight_unreserved_disk: 4 }
-	};
+	var opts = { defaults: { weight_unreserved_disk: 4 } };
 
-	checkScorer(t, servers, constraints, expectServers, expectReasons);
+	checkScorer(t, servers, opts, expectServers, expectReasons);
 });
 
 
 test('scoreUnreservedDisk() without servers', function (t) {
-	var constraints = {
-		defaults: { weight_unreserved_disk: 4 }
-	};
+	var opts = { defaults: { weight_unreserved_disk: 4 } };
 
-	checkScorer(t, [], constraints, [], {});
+	checkScorer(t, [], opts, [], {});
 });
 
 
diff --git a/test/algorithms/score-unreserved-ram.test.js b/test/algorithms/score-unreserved-ram.test.js
index 1a08e2d..1899093 100644
--- a/test/algorithms/score-unreserved-ram.test.js
+++ b/test/algorithms/score-unreserved-ram.test.js
@@ -14,11 +14,6 @@ var common = require('./common');
 var clone  = common.clone;
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
 var SERVERS = [ {
 	uuid: '26888f40-bae2-4b68-9053-c91bc82de296',
 	score: 1,
@@ -34,7 +29,7 @@ var SERVERS = [ {
 } ];
 
 
-var checkScorer = common.createPluginChecker(scorer, LOG);
+var checkScorer = common.createPluginChecker(scorer);
 
 
 test('scoreUnreservedRam()', function (t) {
@@ -52,11 +47,9 @@ test('scoreUnreservedRam()', function (t) {
 			'increased score by 2.00 to 3.00'
 	};
 
-	var constraints = {
-		defaults: { weight_unreserved_ram: 4 }
-	};
+	var opts = { defaults: { weight_unreserved_ram: 4 } };
 
-	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
+	checkScorer(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -75,11 +68,9 @@ test('scoreUnreservedRam() with negative default weight', function (t) {
 			'increased score by 2.00 to 3.00'
 	};
 
-	var constraints = {
-		defaults: { weight_unreserved_ram: -4 }
-	};
+	var opts = { defaults: { weight_unreserved_ram: -4 } };
 
-	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
+	checkScorer(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -89,11 +80,9 @@ test('scoreUnreservedRam() with zero default weight', function (t) {
 		skip: 'Resolved score weight to 0.00; no changes'
 	};
 
-	var constraints = {
-		defaults: { weight_unreserved_ram: 0 }
-	};
+	var opts = { defaults: { weight_unreserved_ram: 0 } };
 
-	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
+	checkScorer(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -112,14 +101,14 @@ test('scoreUnreservedRam() with min-ram default set', function (t) {
 			'increased score by 1.00 to 2.00'
 	};
 
-	var constraints = {
+	var opts = {
 		defaults: {
 			weight_unreserved_ram: 4,
 			server_spread: 'min-ram'
 		}
 	};
 
-	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
+	checkScorer(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -138,14 +127,14 @@ test('scoreUnreservedRam() with max-ram default set', function (t) {
 			'increased score by 1.00 to 2.00'
 	};
 
-	var constraints = {
+	var opts = {
 		defaults: {
 			weight_unreserved_ram: 4,
 			server_spread: 'max-ram'
 		}
 	};
 
-	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
+	checkScorer(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -155,14 +144,14 @@ test('scoreUnreservedRam() with unrelated spread default set', function (t) {
 		skip: 'pkg or default set to score with other plugin'
 	};
 
-	var constraints = {
+	var opts = {
 		defaults: {
 			weight_unreserved_ram: 4,
 			server_spread: 'min-owner'
 		}
 	};
 
-	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
+	checkScorer(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -181,14 +170,14 @@ test('scoreUnreservedRam() with package attr set', function (t) {
 			'increased score by 1.00 to 2.00'
 	};
 
-	var constraints = {
+	var opts = {
 		defaults: {
 			weight_unreserved_ram: 4
 		},
 		pkg: { alloc_server_spread: 'min-ram' }
 	};
 
-	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
+	checkScorer(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -207,7 +196,7 @@ test('scoreUnreservedRam() with package and default set', function (t) {
 			'increased score by 1.00 to 2.00'
 	};
 
-	var constraints = {
+	var opts = {
 		defaults: {
 			weight_unreserved_ram: 4,
 			server_spread: 'max-ram'
@@ -215,7 +204,7 @@ test('scoreUnreservedRam() with package and default set', function (t) {
 		pkg: { alloc_server_spread: 'min-ram' }
 	};
 
-	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
+	checkScorer(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -225,14 +214,14 @@ test('scoreUnreservedRam() with unrelated package attr set', function (t) {
 		skip: 'pkg or default set to score with other plugin'
 	};
 
-	var constraints = {
+	var opts = {
 		defaults: {
 			weight_unreserved_ram: 4
 		},
 		pkg: { alloc_server_spread: 'min-owner' }
 	};
 
-	checkScorer(t, SERVERS, constraints, expectServers, expectReasons);
+	checkScorer(t, SERVERS, opts, expectServers, expectReasons);
 });
 
 
@@ -247,20 +236,16 @@ test('scoreUnreservedRam() with one server', function (t) {
 			'increased score by 4.00 to 5.00'
 	};
 
-	var constraints = {
-		defaults: { weight_unreserved_ram: 4 }
-	};
+	var opts = { defaults: { weight_unreserved_ram: 4 } };
 
-	checkScorer(t, servers, constraints, expectServers, expectReasons);
+	checkScorer(t, servers, opts, expectServers, expectReasons);
 });
 
 
 test('scoreUnreservedRam() without servers', function (t) {
-	var constraints = {
-		defaults: { weight_unreserved_ram: 4 }
-	};
+	var opts = { defaults: { weight_unreserved_ram: 4 } };
 
-	checkScorer(t, [], constraints, [], {});
+	checkScorer(t, [], opts, [], {});
 });
 
 
diff --git a/test/algorithms/soft-filter-locality-hints.test.js b/test/algorithms/soft-filter-locality-hints.test.js
index efd455f..4a55e42 100644
--- a/test/algorithms/soft-filter-locality-hints.test.js
+++ b/test/algorithms/soft-filter-locality-hints.test.js
@@ -17,18 +17,13 @@ var common = require('./common.js');
 // --- globals
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
 var OWNER_UUID = 'b0bbbbbb-9172-4c58-964e-fe58a9989708';
 
 
 // --- internal support stuff
 
 
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter);
 
 
 function
@@ -86,19 +81,19 @@ test('name', function (t) {
 
 
 test('no locality, no servers', function (t) {
-	var constraints = { vm: { owner_uuid: OWNER_UUID } };
+	var opts = { vm: { owner_uuid: OWNER_UUID } };
 
-	checkFilter(t, [], constraints, [], {});
+	checkFilter(t, [], opts, [], {});
 });
 
 
 test('locality, no servers', function (t) {
-	var constraints = { vm: {
+	var opts = { vm: {
 		owner_uuid: OWNER_UUID,
 		locality: { near: '468994e6-d53d-c74c-8245-3273a86dc3d9' }
 	}};
 
-	checkFilter(t, [], constraints, [], {});
+	checkFilter(t, [], opts, [], {});
 });
 
 
@@ -142,9 +137,9 @@ test('locality scenario A', function (tt) {
 				= 'exclude: spread by owner';
 		});
 
-		var constraints = { vm: { owner_uuid: OWNER_UUID } };
+		var opts = { vm: { owner_uuid: OWNER_UUID } };
 
-		checkFilter(t, servers, constraints, expServers, expReasons);
+		checkFilter(t, servers, opts, expServers, expReasons);
 	});
 
 	tt.test('  no locality -> owner spread (ignored)', function (t) {
@@ -155,9 +150,9 @@ test('locality scenario A', function (tt) {
 			'*': 'exclude: spread by owner (ignored b/c non-strict)'
 		};
 
-		var constraints = { vm: { owner_uuid: OWNER_UUID } };
+		var opts = { vm: { owner_uuid: OWNER_UUID } };
 
-		checkFilter(t, subsetServers, constraints, expServers,
+		checkFilter(t, subsetServers, opts, expServers,
 			expReasons);
 	});
 
@@ -167,12 +162,12 @@ test('locality scenario A', function (tt) {
 		expReasons[servers[0].uuid]
 			= 'exclude: inst!=' + ownerVmOnServer0;
 
-		var constraints = { vm: {
+		var opts = { vm: {
 			owner_uuid: OWNER_UUID,
 			locality: { far: ownerVmOnServer0 }
 		} };
 
-		checkFilter(t, servers, constraints, expServers, expReasons);
+		checkFilter(t, servers, opts, expServers, expReasons);
 	});
 
 	tt.test('  non-strict far (string)', function (t) {
@@ -181,12 +176,12 @@ test('locality scenario A', function (tt) {
 		expReasons[servers[0].uuid]
 			= 'exclude: inst!=' + ownerVmOnServer0;
 
-		var constraints = { vm: {
+		var opts = { vm: {
 			owner_uuid: OWNER_UUID,
 			locality: { far: [ownerVmOnServer0] }
 		} };
 
-		checkFilter(t, servers, constraints, expServers, expReasons);
+		checkFilter(t, servers, opts, expServers, expReasons);
 	});
 
 	tt.test('  strict far', function (t) {
@@ -196,12 +191,12 @@ test('locality scenario A', function (tt) {
 				'needed'
 		};
 
-		var constraints = { vm: {
+		var opts = { vm: {
 			owner_uuid: OWNER_UUID,
 			locality: { strict: true, far: [ownerVmOnServer0] }
 		} };
 
-		checkFilter(t, servers, constraints, expServers, expReasons);
+		checkFilter(t, servers, opts, expServers, expReasons);
 	});
 
 	tt.test('  non-strict near', function (t) {
@@ -210,12 +205,12 @@ test('locality scenario A', function (tt) {
 		expReasons[servers[3].uuid]
 			= 'include: inst==~' + ownerVmOnServer3;
 
-		var constraints = { vm: {
+		var opts = { vm: {
 			owner_uuid: OWNER_UUID,
 			locality: { strict: false, near: [ownerVmOnServer3] }
 		} };
 
-		checkFilter(t, servers, constraints, expServers, expReasons);
+		checkFilter(t, servers, opts, expServers, expReasons);
 	});
 
 	tt.test('  strict near', function (t) {
@@ -225,18 +220,18 @@ test('locality scenario A', function (tt) {
 				'needed'
 		};
 
-		var constraints = { vm: {
+		var opts = { vm: {
 			owner_uuid: OWNER_UUID,
 			locality: { strict: true, near: [ownerVmOnServer3] }
 		} };
 
-		checkFilter(t, servers, constraints, expServers, expReasons);
+		checkFilter(t, servers, opts, expServers, expReasons);
 	});
 
 	tt.test('  non-strict near non-existent-VM (gets ignored)',
 	    function (t) {
 		var nonExistentVm = 'ef26f01e-200e-2a43-a056-cab333731e8f';
-		var constraints = { vm: {
+		var opts = { vm: {
 			owner_uuid: OWNER_UUID,
 			locality: { strict: false, near: [nonExistentVm] }
 		} };
@@ -247,13 +242,13 @@ test('locality scenario A', function (tt) {
 				+ ' (ignored b/c non-strict)'
 		};
 
-		checkFilter(t, servers, constraints, expServers, expReasons);
+		checkFilter(t, servers, opts, expServers, expReasons);
 	});
 
 	// Here we expect to return all the CNs with *any* of the list VMs.
 	tt.test('  non-strict near, VMs on multiple CNs', function (t) {
 		var near = [ownerVmOnServer0, ownerVmOnServer2];
-		var constraints = { vm: {
+		var opts = { vm: {
 			owner_uuid: OWNER_UUID,
 			locality: { strict: false, near: near }
 		} };
@@ -265,12 +260,12 @@ test('locality scenario A', function (tt) {
 		expReasons[servers[2].uuid]
 			= 'include: inst==~' + ownerVmOnServer2;
 
-		checkFilter(t, servers, constraints, expServers, expReasons);
+		checkFilter(t, servers, opts, expServers, expReasons);
 	});
 
 	tt.test('  non-strict far, that gets ignored', function (t) {
 		var far = [ownerVmOnServer3, ownerVmOnServer4];
-		var constraints = { vm: {
+		var opts = { vm: {
 			owner_uuid: OWNER_UUID,
 			locality: { strict: false, far: far }
 		} };
@@ -284,8 +279,7 @@ test('locality scenario A', function (tt) {
 		expReasons[servers[4].uuid] = 'exclude: inst!='
 			+ ownerVmOnServer4 + ' (ignored b/c non-strict)';
 
-		checkFilter(t, subsetServers, constraints, expServers,
-			expReasons);
+		checkFilter(t, subsetServers, opts, expServers, expReasons);
 	});
 });
 
@@ -317,15 +311,20 @@ test('locality scenario B: large set', function (tt) {
 	var ownerVmOnServer997 = ownerVmOnServer(997);
 
 	tt.test('  non-strict near', function (t) {
-		var constraints = { vm: {
-			owner_uuid: OWNER_UUID,
-			locality: { strict: false, near: [ownerVmOnServer997] }
-		} };
+		var opts = common.addCommonOpts({
+			vm: {
+				owner_uuid: OWNER_UUID,
+				locality: {
+					strict: false,
+					near: [ownerVmOnServer997]
+				}
+			}
+		});
 
 		var givenServers = common.clone(servers);
 
 		var start = Date.now();
-		filter.run(LOG, givenServers, constraints,
+		filter.run(givenServers, opts,
 				function (err, filteredServers, reasons) {
 			t.ifError(err);
 
@@ -340,16 +339,23 @@ test('locality scenario B: large set', function (tt) {
 	});
 
 	tt.test('  non-strict far', function (t) {
-		var constraints = { vm: {
-			owner_uuid: OWNER_UUID,
-			locality: { strict: false, far: [
-				ownerVmOnServer42, ownerVmOnServer997] }
-		} };
+		var opts = common.addCommonOpts({
+			vm: {
+				owner_uuid: OWNER_UUID,
+				locality: {
+					strict: false,
+					far: [
+						ownerVmOnServer42,
+						ownerVmOnServer997
+					]
+				}
+			}
+		});
 
 		var givenServers = common.clone(servers);
 
 		var start = Date.now();
-		filter.run(LOG, givenServers, constraints,
+		filter.run(givenServers, opts,
 				function (err, filteredServers, reasons) {
 			t.ifError(err);
 
diff --git a/test/allocator.test.js b/test/allocator.test.js
index a824c2a..063b56e 100644
--- a/test/allocator.test.js
+++ b/test/allocator.test.js
@@ -12,63 +12,9 @@ var assert = require('assert-plus');
 var test = require('tape');
 var common = require('./common');
 var Allocator = require('../lib/allocator.js');
+var addCommonOpts = require('./algorithms/common.js').addCommonOpts;
 
-
-var ALGO_DESC = [
-	'pipe', 'hard-filter-setup',
-		'hard-filter-running',
-		'hard-filter-invalid-servers',
-		'hard-filter-volumes-from',
-		'calculate-ticketed-vms',
-		'hard-filter-reserved',
-		'hard-filter-headnode',
-		'hard-filter-vm-count',
-		'hard-filter-capness',
-		'hard-filter-vlans',
-		'hard-filter-platform-versions',
-		'hard-filter-traits',
-		'hard-filter-owners-servers',
-		'hard-filter-sick-servers',
-		'calculate-server-unreserved',
-		'hard-filter-overprovision-ratios',
-		'hard-filter-min-ram',
-		'hard-filter-min-disk',
-		'hard-filter-min-cpu',
-		'hard-filter-locality-hints',
-		['or', 'hard-filter-reservoir',
-			'identity'],
-		['or', 'hard-filter-large-servers',
-			'identity' ],
-		'soft-filter-locality-hints',
-		'score-unreserved-ram',
-		'score-unreserved-disk',
-		'score-num-owner-zones',
-		'score-current-platform',
-		'score-next-reboot',
-		'score-uniform-random'
-];
-
-
-var DEFAULTS = {
-	weight_current_platform: 1,
-	weight_next_reboot: 0.5,
-	weight_num_owner_zones: 0,
-	weight_uniform_random: 0.5,
-	weight_unreserved_disk: 1,
-	weight_unreserved_ram: 2,
-	filter_headnode: true,
-	filter_min_resources: true,
-	filter_large_servers: true
-};
-
-
-var logStub = {
-	trace: function () { return true; },
-	debug: function () { return true; },
-	info:  function () { return true; },
-	warn:  function () { return true; },
-	error: function (err) { console.log(err); return true; }
-};
+var OPTS = addCommonOpts({});
 
 
 test('algorithms pipeline', function (t) {
@@ -78,10 +24,9 @@ test('algorithms pipeline', function (t) {
 		'pipe',
 		{
 			name: 'foo',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (servers, opts, cb) {
 				assert.array(servers);
-				assert.object(constraints);
+				assert.object(opts);
 				assert.func(cb);
 
 				t.deepEqual(servers, serverStubs);
@@ -91,10 +36,9 @@ test('algorithms pipeline', function (t) {
 			}
 		}, {
 			name: 'bar',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (servers, opts, cb) {
 				assert.array(servers);
-				assert.object(constraints);
+				assert.object(opts);
 				assert.func(cb);
 
 				t.deepEqual(servers, [5, 4, 3, 2]);
@@ -104,10 +48,9 @@ test('algorithms pipeline', function (t) {
 			}
 		}, {
 			name: 'baz',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (servers, opts, cb) {
 				assert.array(servers);
-				assert.object(constraints);
+				assert.object(opts);
 				assert.func(cb);
 
 				t.deepEqual(servers, [2, 3]);
@@ -120,7 +63,7 @@ test('algorithms pipeline', function (t) {
 
 	var executed = [];
 
-	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(OPTS, common.ALGO_DESC, common.DEFAULTS);
 	allocator.allocServerExpr = plugins;
 
 	allocator.allocate(serverStubs, {}, {}, {}, [], function (err, stub) {
@@ -155,10 +98,9 @@ test('algorithms shortcuts with no servers', function (t) {
 		'pipe',
 		{
 			name: 'foo',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (servers, opts, cb) {
 				assert.array(servers);
-				assert.object(constraints);
+				assert.object(opts);
 				assert.func(cb);
 
 				executed.push(1);
@@ -166,10 +108,9 @@ test('algorithms shortcuts with no servers', function (t) {
 			}
 		}, {
 			name: 'bar',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (servers, opts, cb) {
 				assert.array(servers);
-				assert.object(constraints);
+				assert.object(opts);
 				assert.func(cb);
 
 				executed.push(2);
@@ -177,10 +118,9 @@ test('algorithms shortcuts with no servers', function (t) {
 			}
 		}, {
 			name: 'baz',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (servers, opts, cb) {
 				assert.array(servers);
-				assert.object(constraints);
+				assert.object(opts);
 				assert.func(cb);
 
 				executed.push(3);
@@ -196,7 +136,7 @@ test('algorithms shortcuts with no servers', function (t) {
 
 	var executed = [];
 
-	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(OPTS, common.ALGO_DESC, common.DEFAULTS);
 	allocator.allocServerExpr = plugins;
 
 	allocator.allocate([serverStub], {}, {}, {}, [],
@@ -243,10 +183,9 @@ test('dispatch 1', function (t) {
 		'pipe',
 		{
 			name: 'foo',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (servers, opts, cb) {
 				assert.array(servers);
-				assert.object(constraints);
+				assert.object(opts);
 				assert.func(cb);
 
 				t.deepEqual(servers, serverStubs);
@@ -259,10 +198,9 @@ test('dispatch 1', function (t) {
 			'or',
 			{
 				name: 'bar',
-				run: function (log, servers, constraints, cb) {
-					assert.object(log);
+				run: function (servers, opts, cb) {
 					assert.array(servers);
-					assert.object(constraints);
+					assert.object(opts);
 					assert.func(cb);
 
 					t.deepEqual(servers,
@@ -275,10 +213,9 @@ test('dispatch 1', function (t) {
 				}
 			}, {
 				name: 'baz',
-				run: function (log, servers, constraints, cb) {
-					assert.object(log);
+				run: function (servers, opts, cb) {
 					assert.array(servers);
-					assert.object(constraints);
+					assert.object(opts);
 					assert.func(cb);
 
 					t.deepEqual(servers,
@@ -295,7 +232,7 @@ test('dispatch 1', function (t) {
 
 	var executed = [];
 
-	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(OPTS, common.ALGO_DESC, common.DEFAULTS);
 	allocator.allocServerExpr = plugins;
 
 	allocator.allocate(serverStubs, {}, {}, {}, [],
@@ -339,10 +276,9 @@ test('dispatch 2', function (t) {
 		'pipe',
 		{
 			name: 'foo',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (servers, opts, cb) {
 				assert.array(servers);
-				assert.object(constraints);
+				assert.object(opts);
 				assert.func(cb);
 
 				t.deepEqual(servers, serverStubs);
@@ -356,10 +292,9 @@ test('dispatch 2', function (t) {
 			'or',
 			{
 				name: 'bar',
-				run: function (log, servers, constraints, cb) {
-					assert.object(log);
+				run: function (servers, opts, cb) {
 					assert.array(servers);
-					assert.object(constraints);
+					assert.object(opts);
 					assert.func(cb);
 
 					t.deepEqual(servers,
@@ -382,7 +317,7 @@ test('dispatch 2', function (t) {
 
 	var executed = [];
 
-	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(OPTS, common.ALGO_DESC, common.DEFAULTS);
 	allocator.allocServerExpr = plugins;
 
 	allocator.allocate(serverStubs, {}, {}, {}, [],
@@ -424,10 +359,9 @@ test('dispatch 3', function (t) {
 		'pipe',
 		{
 			name: 'foo',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (servers, opts, cb) {
 				assert.array(servers);
-				assert.object(constraints);
+				assert.object(opts);
 				assert.func(cb);
 
 				t.deepEqual(servers, serverStubs);
@@ -454,7 +388,7 @@ test('dispatch 3', function (t) {
 
 	var executed = [];
 
-	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(OPTS, common.ALGO_DESC, common.DEFAULTS);
 	allocator.allocServerExpr = plugins;
 
 	allocator.allocate(serverStubs, {}, {}, {}, [],
@@ -482,13 +416,12 @@ test('pipe 1', function (t) {
 		'pipe',
 		{
 			name: 'foo',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (servers, opts, cb) {
 				assert.array(servers);
-				assert.object(constraints);
+				assert.object(opts);
 				assert.func(cb);
 
-				t.deepEqual(constraints.vm, { foo: 1 });
+				t.deepEqual(opts.vm, { foo: 1 });
 				t.deepEqual(servers, serverStubs);
 
 				executed.push(1);
@@ -497,13 +430,12 @@ test('pipe 1', function (t) {
 			}
 		}, {
 			name: 'bar',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (servers, opts, cb) {
 				assert.array(servers);
-				assert.object(constraints);
+				assert.object(opts);
 				assert.func(cb);
 
-				t.deepEqual(constraints.vm, { foo: 1 });
+				t.deepEqual(opts.vm, { foo: 1 });
 				t.deepEqual(servers, serverStubs.slice(0, 3));
 
 				executed.push(2);
@@ -512,13 +444,12 @@ test('pipe 1', function (t) {
 			}
 		}, {
 			name: 'baz',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (servers, opts, cb) {
 				assert.array(servers);
-				assert.object(constraints);
+				assert.object(opts);
 				assert.func(cb);
 
-				t.deepEqual(constraints.vm, { foo: 1 });
+				t.deepEqual(opts.vm, { foo: 1 });
 				t.deepEqual(servers, serverStubs.slice(1, 3));
 
 				executed.push(3);
@@ -530,7 +461,7 @@ test('pipe 1', function (t) {
 
 	var executed = [];
 
-	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(OPTS, common.ALGO_DESC, common.DEFAULTS);
 
 	allocator._dispatch(plugins, serverStubs, { vm: { foo: 1 } },
 			function (err, serverStub, visitedAlgorithms,
@@ -568,13 +499,12 @@ test('pipe 2', function (t) {
 		'pipe',
 		{
 			name: 'foo',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (servers, opts, cb) {
 				assert.array(servers);
-				assert.object(constraints);
+				assert.object(opts);
 				assert.func(cb);
 
-				t.deepEqual(constraints.vm, { foo: 1 });
+				t.deepEqual(opts.vm, { foo: 1 });
 				t.deepEqual(servers, serverStubs);
 
 				executed.push(1);
@@ -583,13 +513,12 @@ test('pipe 2', function (t) {
 			}
 		}, {
 			name: 'bar',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (servers, opts, cb) {
 				assert.array(servers);
-				assert.object(constraints);
+				assert.object(opts);
 				assert.func(cb);
 
-				t.deepEqual(constraints.vm, { foo: 1 });
+				t.deepEqual(opts.vm, { foo: 1 });
 				t.deepEqual(servers, serverStubs.slice(0, 3));
 
 				executed.push(2);
@@ -606,7 +535,7 @@ test('pipe 2', function (t) {
 
 	var executed = [];
 
-	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(OPTS, common.ALGO_DESC, common.DEFAULTS);
 
 	allocator._dispatch(plugins, serverStubs, { vm: { foo: 1 } },
 			function (err, serverStub, visitedAlgorithms,
@@ -639,13 +568,12 @@ test('or 1', function (t) {
 		'or',
 		{
 			name: 'foo',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (servers, opts, cb) {
 				assert.array(servers);
-				assert.object(constraints);
+				assert.object(opts);
 				assert.func(cb);
 
-				t.deepEqual(constraints.vm, { foo: 1 });
+				t.deepEqual(opts.vm, { foo: 1 });
 				t.deepEqual(servers, serverStubs);
 
 				executed.push(1);
@@ -654,13 +582,12 @@ test('or 1', function (t) {
 			}
 		}, {
 			name: 'bar',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (servers, opts, cb) {
 				assert.array(servers);
-				assert.object(constraints);
+				assert.object(opts);
 				assert.func(cb);
 
-				t.deepEqual(constraints.vm, { foo: 1 });
+				t.deepEqual(opts.vm, { foo: 1 });
 				t.deepEqual(servers, serverStubs);
 
 				executed.push(2);
@@ -669,13 +596,12 @@ test('or 1', function (t) {
 			}
 		}, {
 			name: 'baz',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (servers, opts, cb) {
 				assert.array(servers);
-				assert.object(constraints);
+				assert.object(opts);
 				assert.func(cb);
 
-				t.deepEqual(constraints.vm, { foo: 1 });
+				t.deepEqual(opts.vm, { foo: 1 });
 				t.deepEqual(servers, serverStubs);
 
 				executed.push(3);
@@ -687,7 +613,7 @@ test('or 1', function (t) {
 
 	var executed = [];
 
-	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(OPTS, common.ALGO_DESC, common.DEFAULTS);
 
 	allocator._dispatch(plugins, serverStubs, { vm: { foo: 1 } },
 			function (err, serverStub, visitedAlgorithms,
@@ -717,13 +643,12 @@ test('or 2', function (t) {
 		'or',
 		{
 			name: 'foo',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (servers, opts, cb) {
 				assert.array(servers);
-				assert.object(constraints);
+				assert.object(opts);
 				assert.func(cb);
 
-				t.deepEqual(constraints.vm, { foo: 1 });
+				t.deepEqual(opts.vm, { foo: 1 });
 				t.deepEqual(servers, serverStubs);
 
 				executed.push(1);
@@ -732,13 +657,12 @@ test('or 2', function (t) {
 			}
 		}, {
 			name: 'bar',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (servers, opts, cb) {
 				assert.array(servers);
-				assert.object(constraints);
+				assert.object(opts);
 				assert.func(cb);
 
-				t.deepEqual(constraints.vm, { foo: 1 });
+				t.deepEqual(opts.vm, { foo: 1 });
 				t.deepEqual(servers, serverStubs);
 
 				executed.push(2);
@@ -755,7 +679,7 @@ test('or 2', function (t) {
 
 	var executed = [];
 
-	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(OPTS, common.ALGO_DESC, common.DEFAULTS);
 
 	allocator._dispatch(plugins, serverStubs, { vm: { foo: 1 } },
 			function (err, serverStub, visitedAlgorithms,
@@ -841,7 +765,7 @@ test('create plugin summary', function (t) {
 		}
 	];
 
-	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(OPTS, common.ALGO_DESC, common.DEFAULTS);
 	var summary = allocator._createPluginSummary(serverStubs,
 		visitedAlgorithms, remainingServers, reasonsRemoved);
 
@@ -852,7 +776,7 @@ test('create plugin summary', function (t) {
 
 
 test('load available algorithms', function (t) {
-	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(OPTS, common.ALGO_DESC, common.DEFAULTS);
 	var algorithms = allocator._loadAvailableAlgorithms();
 
 	var names = Object.keys(algorithms).sort();
@@ -898,7 +822,7 @@ test('load available algorithms', function (t) {
 
 
 test('load algorithms', function (t) {
-	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(OPTS, common.ALGO_DESC, common.DEFAULTS);
 	var algorithm = allocator._loadAlgorithm('hard-filter-headnode');
 
 	t.equal(algorithm.name, 'Servers which are not headnodes');
@@ -921,7 +845,7 @@ test('create expression', function (t) {
 		]
 	];
 
-	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(OPTS, common.ALGO_DESC, common.DEFAULTS);
 	var availableAlgorithms = allocator._loadAvailableAlgorithms();
 	var expression = allocator._createExpression(description,
 	    availableAlgorithms);
@@ -963,7 +887,7 @@ test('server capacity', function (t) {
 		asdsa: 'Server has status: undefined'
 	};
 
-	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(OPTS, common.ALGO_DESC, common.DEFAULTS);
 	allocator.serverCapacity(common.getExampleServers(),
 			function (err, servers, reasons) {
 		t.ifError(err);
diff --git a/test/common.js b/test/common.js
index 3cffb09..17eee72 100644
--- a/test/common.js
+++ b/test/common.js
@@ -11,8 +11,55 @@
 var fs = require('fs');
 
 
-var servers;
+var ALGO_DESC = [
+	'pipe', 'hard-filter-setup',
+		'hard-filter-running',
+		'hard-filter-invalid-servers',
+		'hard-filter-volumes-from',
+		'calculate-ticketed-vms',
+		'hard-filter-reserved',
+		'hard-filter-headnode',
+		'hard-filter-vm-count',
+		'hard-filter-capness',
+		'hard-filter-vlans',
+		'hard-filter-platform-versions',
+		'hard-filter-traits',
+		'hard-filter-owners-servers',
+		'hard-filter-sick-servers',
+		'calculate-server-unreserved',
+		'hard-filter-overprovision-ratios',
+		'hard-filter-min-ram',
+		'hard-filter-min-cpu',
+		'hard-filter-min-disk',
+		'hard-filter-locality-hints',
+		['or', 'hard-filter-reservoir',
+		        'identity'],
+		['or', 'hard-filter-large-servers',
+		        'identity' ],
+		'soft-filter-locality-hints',
+		'score-unreserved-ram',
+		'score-unreserved-disk',
+		'score-num-owner-zones',
+		'score-current-platform',
+		'score-next-reboot',
+		'score-uniform-random'
+];
+
+
+var DEFAULTS = {
+	weight_current_platform: 1,
+	weight_next_reboot: 0.5,
+	weight_num_owner_zones: 0,
+	weight_uniform_random: 0.5,
+	weight_unreserved_disk: 1,
+	weight_unreserved_ram: 2,
+	filter_headnode: true,
+	filter_min_resources: true,
+	filter_large_servers: true
+};
+
 
+var servers;
 function getExampleServers() {
 	if (!servers)
 		servers = fs.readFileSync(__dirname + '/common.json');
@@ -23,5 +70,7 @@ function getExampleServers() {
 
 
 module.exports = {
+	ALGO_DESC: ALGO_DESC,
+	DEFAULTS: DEFAULTS,
 	getExampleServers: getExampleServers
 };
diff --git a/test/integration.test.js b/test/integration.test.js
index d97654a..826823f 100644
--- a/test/integration.test.js
+++ b/test/integration.test.js
@@ -11,15 +11,10 @@
 var test = require('tape');
 var Allocator = require('../lib/allocator.js');
 var common = require('./common');
+var addCommonOpts = require('./algorithms/common.js').addCommonOpts;
 
 
-var log = {
-	trace: function () {},
-	debug: function () {},
-	info:  function () {},
-	warn:  function () {},
-	error: function () {}
-};
+var OPTS = addCommonOpts({});
 
 
 var SERVERS = common.getExampleServers();
@@ -124,57 +119,9 @@ var TICKETS = [
 ];
 
 
-var ALGO_DESC = [
-	'pipe', 'hard-filter-setup',
-		'hard-filter-running',
-		'hard-filter-invalid-servers',
-		'hard-filter-volumes-from',
-		'calculate-ticketed-vms',
-		'hard-filter-reserved',
-		'hard-filter-headnode',
-		'hard-filter-vm-count',
-		'hard-filter-capness',
-		'hard-filter-vlans',
-		'hard-filter-platform-versions',
-		'hard-filter-traits',
-		'hard-filter-owners-servers',
-		'hard-filter-sick-servers',
-		'calculate-server-unreserved',
-		'hard-filter-overprovision-ratios',
-		'hard-filter-min-ram',
-		'hard-filter-min-disk',
-		'hard-filter-min-cpu',
-		'hard-filter-locality-hints',
-		['or', 'hard-filter-reservoir',
-			'identity'],
-		['or', 'hard-filter-large-servers',
-			'identity' ],
-		'soft-filter-locality-hints',
-		'score-unreserved-ram',
-		'score-unreserved-disk',
-		'score-num-owner-zones',
-		'score-current-platform',
-		'score-next-reboot',
-		'score-uniform-random'
-];
-
-
-var DEFAULTS = {
-	weight_current_platform: 1,
-	weight_next_reboot: 0.5,
-	weight_num_owner_zones: 0,
-	weight_uniform_random: 0.5,
-	weight_unreserved_disk: 1,
-	weight_unreserved_ram: 2,
-	filter_headnode: true,
-	filter_min_resources: true,
-	filter_large_servers: true
-};
-
-
 function newAllocator(cb)
 {
-	var allocator = new Allocator(log, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(OPTS, common.ALGO_DESC, common.DEFAULTS);
 
 	(function waitTilLoaded() {
 		if (!allocator.serverCapacityExpr)
@@ -298,10 +245,10 @@ test('allocate 1', function (t) {
 			step: 'Servers with enough unreserved RAM',
 			remaining: [ '00000000-0000-0000-0000-00259094373c' ]
 		}, {
-			step: 'Servers with enough unreserved disk',
+			step: 'Servers with enough unreserved CPU',
 			remaining: [ '00000000-0000-0000-0000-00259094373c' ]
 		}, {
-			step: 'Servers with enough unreserved CPU',
+			step: 'Servers with enough unreserved disk',
 			remaining: [ '00000000-0000-0000-0000-00259094373c' ]
 		}, {
 			step: 'Servers with requested hard locality considered',
@@ -506,12 +453,12 @@ test('allocate 2', function (t) {
 				'00000000-0000-0000-0000-0025909437d4'
 			]
 		}, {
-			step: 'Servers with enough unreserved disk',
+			step: 'Servers with enough unreserved CPU',
 			remaining: [
 				'00000000-0000-0000-0000-0025909437d4'
 			]
 		}, {
-			step: 'Servers with enough unreserved CPU',
+			step: 'Servers with enough unreserved disk',
 			remaining: [
 				'00000000-0000-0000-0000-0025909437d4'
 			]
