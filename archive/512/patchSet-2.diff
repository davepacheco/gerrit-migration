commit 3a81512e3effc3317f92a188471c9c1c54dade25 (refs/changes/12/512/2)
Author: Marsell Kukuljevic <marsell@joyent.com>
Date:   2016-10-24T22:36:50+13:00 (3 years ago)
    
    DAPI-324 - Add support for external functions to pipeline.

diff --git a/Makefile b/Makefile
index 8a1d06f..4c42995 100644
--- a/Makefile
+++ b/Makefile
@@ -57,9 +57,13 @@ all: $(TAPE) $(REPO_DEPS)
 $(TAPE): | $(NPM_EXEC)
 	$(NPM) install
 
-.PHONY: test
+.PHONY: test plugins_test
 test: $(TAPE)
 	$(TAPE) test/*.test.js test/algorithms/*.test.js
 
+plugins_test: $(TAPE)
+	$(TAPE) test/algorithms/*.test.js
+
+
 include ./tools/mk/Makefile.deps
 include ./tools/mk/Makefile.targ
diff --git a/bin/sim.js b/bin/sim.js
index 830e27e..af0c472 100644
--- a/bin/sim.js
+++ b/bin/sim.js
@@ -380,15 +380,17 @@ function calculateServerUtilization(server) {
  */
 
 function createAllocator() {
-	var log = {
-		info:  function () {},
-		warn:  function () {},
-		debug: function () {},
-		error: function () {},
-		trace: function () {}
+	var sys = {
+		log: {
+			info:  function () {},
+			warn:  function () {},
+			debug: function () {},
+			error: function () {},
+			trace: function () {}
+		}
 	};
 
-	var allocator = new Allocator(log, ALLOC_CHAIN, ALLOC_DEFAULTS);
+	var allocator = new Allocator(sys, ALLOC_CHAIN, ALLOC_DEFAULTS);
 
 	return (allocator);
 }
diff --git a/lib/algorithms/calculate-server-unreserved.js b/lib/algorithms/calculate-server-unreserved.js
index 6c3ef24..a3874fa 100644
--- a/lib/algorithms/calculate-server-unreserved.js
+++ b/lib/algorithms/calculate-server-unreserved.js
@@ -41,9 +41,9 @@ var POOL_USABLE_RATIO = 0.94;
 
 
 function
-calculateServerUnreserved(log, servers, constraints, cb)
+calculateServerUnreserved(sys, servers, constraints, cb)
 {
-	assert.object(log);
+	assert.object(sys);
 	assert.arrayOfObject(servers);
 	assert.object(constraints);
 	assert.func(cb);
diff --git a/lib/algorithms/calculate-ticketed-vms.js b/lib/algorithms/calculate-ticketed-vms.js
index 7a42d9c..78103d5 100644
--- a/lib/algorithms/calculate-ticketed-vms.js
+++ b/lib/algorithms/calculate-ticketed-vms.js
@@ -27,9 +27,9 @@ var GiB = 1024 * 1024 * 1024;
 
 
 function
-addTicketedVms(log, servers, constraints, cb)
+addTicketedVms(sys, servers, constraints, cb)
 {
-	assert.object(log);
+	assert.object(sys);
 	assert.arrayOfObject(servers);
 	assert.object(constraints);
 	assert.func(cb);
diff --git a/lib/algorithms/hard-filter-capness.js b/lib/algorithms/hard-filter-capness.js
index 5342970..d002666 100644
--- a/lib/algorithms/hard-filter-capness.js
+++ b/lib/algorithms/hard-filter-capness.js
@@ -35,9 +35,9 @@
 var assert = require('assert-plus');
 
 function
-filterCapness(log, servers, constraints, cb)
+filterCapness(sys, servers, constraints, cb)
 {
-	assert.object(log);
+	assert.object(sys);
 	assert.arrayOfObject(servers);
 	assert.object(constraints);
 	assert.func(cb);
diff --git a/lib/algorithms/hard-filter-headnode.js b/lib/algorithms/hard-filter-headnode.js
index a075af2..905e948 100644
--- a/lib/algorithms/hard-filter-headnode.js
+++ b/lib/algorithms/hard-filter-headnode.js
@@ -15,9 +15,9 @@
 var assert = require('assert-plus');
 
 function
-filterHeadnode(log, servers, constraints, cb)
+filterHeadnode(sys, servers, constraints, cb)
 {
-	assert.object(log);
+	assert.object(sys);
 	assert.arrayOfObject(servers);
 	assert.object(constraints);
 	assert.func(cb);
diff --git a/lib/algorithms/hard-filter-invalid-servers.js b/lib/algorithms/hard-filter-invalid-servers.js
index b171250..da5cdec 100644
--- a/lib/algorithms/hard-filter-invalid-servers.js
+++ b/lib/algorithms/hard-filter-invalid-servers.js
@@ -16,13 +16,14 @@ var assert = require('assert-plus');
 var validations = require('../validations');
 
 function
-filterInvalidServers(log, servers, constraints, cb)
+filterInvalidServers(sys, servers, constraints, cb)
 {
-	assert.object(log);
+	assert.object(sys);
 	assert.arrayOfObject(servers);
 	assert.object(constraints);
 	assert.func(cb);
 
+	var log = sys.log;
 	var reasons = {};
 
 	var validServers = servers.filter(function (server) {
diff --git a/lib/algorithms/hard-filter-large-servers.js b/lib/algorithms/hard-filter-large-servers.js
index 47be57b..4a79943 100644
--- a/lib/algorithms/hard-filter-large-servers.js
+++ b/lib/algorithms/hard-filter-large-servers.js
@@ -22,9 +22,9 @@ var assert = require('assert-plus');
 var LARGE_POOL_RATIO = 0.15;
 
 function
-filterLargeServers(log, servers, constraints, cb)
+filterLargeServers(sys, servers, constraints, cb)
 {
-	assert.object(log);
+	assert.object(sys);
 	assert.arrayOfObject(servers);
 	assert.object(constraints);
 	assert.func(cb);
diff --git a/lib/algorithms/hard-filter-locality-hints.js b/lib/algorithms/hard-filter-locality-hints.js
index 7db9372..daa1584 100644
--- a/lib/algorithms/hard-filter-locality-hints.js
+++ b/lib/algorithms/hard-filter-locality-hints.js
@@ -26,9 +26,9 @@ var shared = require('./shared/locality-hints');
  * Filter `servers` according to `constraints.vm.locality` rules.
  */
 function
-filterHardLocality(log, servers, constraints, cb)
+filterHardLocality(sys, servers, constraints, cb)
 {
-	assert.object(log, 'log');
+	assert.object(sys, 'sys');
 	assert.arrayOfObject(servers, 'servers');
 	assert.object(constraints, 'constraints');
 	assert.uuid(constraints.vm.owner_uuid, 'constraints.vm.owner_uuid');
diff --git a/lib/algorithms/hard-filter-min-cpu.js b/lib/algorithms/hard-filter-min-cpu.js
index b662163..d643d92 100644
--- a/lib/algorithms/hard-filter-min-cpu.js
+++ b/lib/algorithms/hard-filter-min-cpu.js
@@ -16,9 +16,9 @@
 var assert = require('assert-plus');
 
 function
-filterMinCpu(log, servers, constraints, cb)
+filterMinCpu(sys, servers, constraints, cb)
 {
-	assert.object(log);
+	assert.object(sys);
 	assert.arrayOfObject(servers);
 	assert.object(constraints);
 	assert.func(cb);
diff --git a/lib/algorithms/hard-filter-min-disk.js b/lib/algorithms/hard-filter-min-disk.js
index 33ffe66..f0a6d17 100644
--- a/lib/algorithms/hard-filter-min-disk.js
+++ b/lib/algorithms/hard-filter-min-disk.js
@@ -19,9 +19,9 @@ var MiB = 1024 * 1024;
 var FUDGE_MB = 10 * 1024; // leave 10GiB additional space, just in case
 
 function
-filterMinDisk(log, servers, constraints, cb)
+filterMinDisk(sys, servers, constraints, cb)
 {
-	assert.object(log);
+	assert.object(sys);
 	assert.arrayOfObject(servers);
 	assert.object(constraints);
 	assert.func(cb);
diff --git a/lib/algorithms/hard-filter-min-ram.js b/lib/algorithms/hard-filter-min-ram.js
index 01056ad..351a88b 100644
--- a/lib/algorithms/hard-filter-min-ram.js
+++ b/lib/algorithms/hard-filter-min-ram.js
@@ -16,9 +16,9 @@
 var assert = require('assert-plus');
 
 function
-filterMinRam(log, servers, constraints, cb)
+filterMinRam(sys, servers, constraints, cb)
 {
-	assert.object(log);
+	assert.object(sys);
 	assert.arrayOfObject(servers);
 	assert.object(constraints);
 	assert.func(cb);
diff --git a/lib/algorithms/hard-filter-overprovision-ratios.js b/lib/algorithms/hard-filter-overprovision-ratios.js
index 84d68da..e1e8428 100644
--- a/lib/algorithms/hard-filter-overprovision-ratios.js
+++ b/lib/algorithms/hard-filter-overprovision-ratios.js
@@ -32,9 +32,9 @@ var OP_KEY_MATCH = [['cpu',  'overprovision_cpu' ],
 					['net',  'overprovision_net' ]];
 
 function
-filterOverprovisionRatios(log, servers, constraints, cb)
+filterOverprovisionRatios(sys, servers, constraints, cb)
 {
-	assert.object(log);
+	assert.object(sys);
 	assert.arrayOfObject(servers);
 	assert.object(constraints);
 	assert.func(cb);
diff --git a/lib/algorithms/hard-filter-owners-servers.js b/lib/algorithms/hard-filter-owners-servers.js
index baa32fc..0ea2f82 100644
--- a/lib/algorithms/hard-filter-owners-servers.js
+++ b/lib/algorithms/hard-filter-owners-servers.js
@@ -28,13 +28,14 @@ var assert = require('assert-plus');
 
 
 function
-filterServersByOwners(log, servers, constraints, cb)
+filterServersByOwners(sys, servers, constraints, cb)
 {
-	assert.object(log);
+	assert.object(sys);
 	assert.arrayOfObject(servers);
 	assert.object(constraints);
 	assert.func(cb);
 
+	var log = sys.log;
 	var ownerUuid = constraints.vm.owner_uuid;
 	var filters = constraints.defaults.filter_owner_server;
 	var reasons = {};
diff --git a/lib/algorithms/hard-filter-platform-versions.js b/lib/algorithms/hard-filter-platform-versions.js
index a5e7f4a..7b6f7bb 100644
--- a/lib/algorithms/hard-filter-platform-versions.js
+++ b/lib/algorithms/hard-filter-platform-versions.js
@@ -22,9 +22,9 @@ var assert = require('assert-plus');
 var VERSION_RE = /^\d+\.\d+$/;
 
 function
-filterPlatformVersions(log, servers, constraints, cb)
+filterPlatformVersions(sys, servers, constraints, cb)
 {
-	assert.object(log);
+	assert.object(sys);
 	assert.arrayOfObject(servers);
 	assert.object(constraints);
 	assert.func(cb);
diff --git a/lib/algorithms/hard-filter-reserved.js b/lib/algorithms/hard-filter-reserved.js
index 1ba6acb..d793a4f 100644
--- a/lib/algorithms/hard-filter-reserved.js
+++ b/lib/algorithms/hard-filter-reserved.js
@@ -15,9 +15,9 @@
 var assert = require('assert-plus');
 
 function
-filterReserved(log, servers, constraints, cb)
+filterReserved(sys, servers, constraints, cb)
 {
-	assert.object(log);
+	assert.object(sys);
 	assert.arrayOfObject(servers);
 	assert.object(constraints);
 	assert.func(cb);
diff --git a/lib/algorithms/hard-filter-reservoir.js b/lib/algorithms/hard-filter-reservoir.js
index 9f2ee0e..8673256 100644
--- a/lib/algorithms/hard-filter-reservoir.js
+++ b/lib/algorithms/hard-filter-reservoir.js
@@ -15,9 +15,9 @@
 var assert = require('assert-plus');
 
 function
-filterReservoir(log, servers, constraints, cb)
+filterReservoir(sys, servers, constraints, cb)
 {
-	assert.object(log);
+	assert.object(sys);
 	assert.arrayOfObject(servers);
 	assert.object(constraints);
 	assert.func(cb);
diff --git a/lib/algorithms/hard-filter-running.js b/lib/algorithms/hard-filter-running.js
index 81f1793..d2bd24b 100644
--- a/lib/algorithms/hard-filter-running.js
+++ b/lib/algorithms/hard-filter-running.js
@@ -20,10 +20,10 @@
 var assert = require('assert-plus');
 
 function
-filterRunning(log, servers, constraints, cb)
+filterRunning(sys, servers, constraints, cb)
 {
 	// servers may not be the expected array
-	assert.object(log);
+	assert.object(sys);
 	assert.object(constraints);
 	assert.func(cb);
 
@@ -43,7 +43,7 @@ filterRunning(log, servers, constraints, cb)
 			return (true);
 
 		if (server.status === 'unknown')
-			log.warn('Server has unknown status:', server.uuid);
+			sys.log.warn('Server has unknown status:', server.uuid);
 
 		reasons[server.uuid] = 'Server has status: ' + server.status;
 
diff --git a/lib/algorithms/hard-filter-setup.js b/lib/algorithms/hard-filter-setup.js
index 9562825..9489346 100644
--- a/lib/algorithms/hard-filter-setup.js
+++ b/lib/algorithms/hard-filter-setup.js
@@ -20,10 +20,10 @@
 var assert = require('assert-plus');
 
 function
-filterSetup(log, servers, constraints, cb)
+filterSetup(sys, servers, constraints, cb)
 {
 	// servers may not be the expected array
-	assert.object(log);
+	assert.object(sys);
 	assert.object(constraints);
 	assert.func(cb);
 
diff --git a/lib/algorithms/hard-filter-sick-servers.js b/lib/algorithms/hard-filter-sick-servers.js
index 1a8606d..27fd462 100644
--- a/lib/algorithms/hard-filter-sick-servers.js
+++ b/lib/algorithms/hard-filter-sick-servers.js
@@ -25,9 +25,9 @@ var assert = require('assert-plus');
 var DAY_IN_MS = 24 * 60 * 60 * 1000;
 
 function
-filterSickServers(log, servers, constraints, cb)
+filterSickServers(sys, servers, constraints, cb)
 {
-	assert.object(log);
+	assert.object(sys);
 	assert.arrayOfObject(servers);
 	assert.object(constraints);
 	assert.func(cb);
diff --git a/lib/algorithms/hard-filter-traits.js b/lib/algorithms/hard-filter-traits.js
index 9d74645..4d7decb 100644
--- a/lib/algorithms/hard-filter-traits.js
+++ b/lib/algorithms/hard-filter-traits.js
@@ -20,13 +20,14 @@
 var assert = require('assert-plus');
 
 function
-filterTraits(log, servers, constraints, cb)
+filterTraits(sys, servers, constraints, cb)
 {
-	assert.object(log);
+	assert.object(sys);
 	assert.arrayOfObject(servers);
 	assert.object(constraints);
 	assert.func(cb);
 
+	var log = sys.log;
 	var imgTraits = constraints.img.traits;
 	var vmTraits  = (constraints.vm.traits ||
 		(constraints.pkg && constraints.pkg.traits));
diff --git a/lib/algorithms/hard-filter-vlans.js b/lib/algorithms/hard-filter-vlans.js
index aaf51e4..9bf2772 100644
--- a/lib/algorithms/hard-filter-vlans.js
+++ b/lib/algorithms/hard-filter-vlans.js
@@ -26,9 +26,9 @@
 var assert = require('assert-plus');
 
 function
-filterVlans(log, servers, constraints, cb)
+filterVlans(sys, servers, constraints, cb)
 {
-	assert.object(log);
+	assert.object(sys);
 	assert.arrayOfObject(servers);
 	assert.object(constraints);
 	assert.func(cb);
diff --git a/lib/algorithms/hard-filter-vm-count.js b/lib/algorithms/hard-filter-vm-count.js
index 8f24f73..d2e3804 100644
--- a/lib/algorithms/hard-filter-vm-count.js
+++ b/lib/algorithms/hard-filter-vm-count.js
@@ -23,13 +23,14 @@ var assert = require('assert-plus');
 var DEFAULT_VM_LIMIT = 224;
 
 function
-filterVmCount(log, servers, constraints, cb)
+filterVmCount(sys, servers, constraints, cb)
 {
-	assert.object(log);
+	assert.object(sys);
 	assert.arrayOfObject(servers);
 	assert.object(constraints);
 	assert.func(cb);
 
+	var log = sys.log;
 	var vmLimit = +constraints.defaults.filter_vm_limit || DEFAULT_VM_LIMIT;
 	var reasons = {};
 
diff --git a/lib/algorithms/hard-filter-volumes-from.js b/lib/algorithms/hard-filter-volumes-from.js
index 5373df1..6e6bef9 100644
--- a/lib/algorithms/hard-filter-volumes-from.js
+++ b/lib/algorithms/hard-filter-volumes-from.js
@@ -16,9 +16,9 @@
 var assert = require('assert-plus');
 
 function
-filterVolumesFrom(log, servers, constraints, cb)
+filterVolumesFrom(sys, servers, constraints, cb)
 {
-	assert.object(log);
+	assert.object(sys);
 	assert.arrayOfObject(servers);
 	assert.object(constraints);
 	assert.func(cb);
@@ -27,7 +27,7 @@ filterVolumesFrom(log, servers, constraints, cb)
 	var reasons = {};
 
 	function getMsg(serverUuid, vmUuid) {
-		log.trace('Due to volumes-from and missing source VM ' +
+		sys.log.trace('Due to volumes-from and missing source VM ' +
 		          vmUuid + ', omitting server: ' + serverUuid);
 		var msg = 'VM needs volumes from ' + vmUuid + ', which was ' +
 			'not found on server';
diff --git a/lib/algorithms/identity.js b/lib/algorithms/identity.js
index 1aba694..3b78a85 100644
--- a/lib/algorithms/identity.js
+++ b/lib/algorithms/identity.js
@@ -15,9 +15,9 @@
 var assert = require('assert-plus');
 
 function
-identity(log, servers, constraints, cb)
+identity(sys, servers, constraints, cb)
 {
-	assert.object(log);
+	assert.object(sys);
 	assert.arrayOfObject(servers);
 	assert.object(constraints);
 	assert.func(cb);
diff --git a/lib/algorithms/override-overprovisioning.js b/lib/algorithms/override-overprovisioning.js
index 765843a..d871637 100644
--- a/lib/algorithms/override-overprovisioning.js
+++ b/lib/algorithms/override-overprovisioning.js
@@ -36,9 +36,9 @@ var DEFAULT_RAM  = 1;
 var DEFAULT_DISK = 1;
 
 function
-overrideOverprovisioning(log, servers, constraints, cb)
+overrideOverprovisioning(sys, servers, constraints, cb)
 {
-	assert.object(log);
+	assert.object(sys);
 	assert.arrayOfObject(servers);
 	assert.object(constraints);
 	assert.func(cb);
diff --git a/lib/algorithms/score-current-platform.js b/lib/algorithms/score-current-platform.js
index eefb239..354d8e8 100644
--- a/lib/algorithms/score-current-platform.js
+++ b/lib/algorithms/score-current-platform.js
@@ -27,9 +27,9 @@ var PLATFORM_RE = /^(\d{4})(\d\d)(\d\d)T(\d\d)(\d\d)(\d\d)Z$/;
 
 
 function
-scoreCurrentPlatform(log, servers, constraints, cb)
+scoreCurrentPlatform(sys, servers, constraints, cb)
 {
-	assert.object(log);
+	assert.object(sys);
 	assert.arrayOfObject(servers);
 	assert.object(constraints);
 	assert.func(cb);
@@ -49,7 +49,7 @@ scoreCurrentPlatform(log, servers, constraints, cb)
 	var weight = +constraints.defaults.weight_current_platform;
 
 	// add scores to servers
-	score(log, tuples, weight, reasons);
+	score(sys.log, tuples, weight, reasons);
 
 	return (cb(null, servers, reasons));
 }
diff --git a/lib/algorithms/score-next-reboot.js b/lib/algorithms/score-next-reboot.js
index 513d40b..82145ca 100644
--- a/lib/algorithms/score-next-reboot.js
+++ b/lib/algorithms/score-next-reboot.js
@@ -29,9 +29,9 @@ var WEEK = 7 * 24 * 60 * 60 * 1000; // in ms
 
 
 function
-scoreNextReboot(log, servers, constraints, cb)
+scoreNextReboot(sys, servers, constraints, cb)
 {
-	assert.object(log);
+	assert.object(sys);
 	assert.arrayOfObject(servers);
 	assert.object(constraints);
 	assert.func(cb);
@@ -97,7 +97,7 @@ scoreNextReboot(log, servers, constraints, cb)
 		buckets.reverse();
 
 	// add scores to servers
-	score(log, buckets, Math.abs(weight), reasons);
+	score(sys.log, buckets, Math.abs(weight), reasons);
 
 	// return unsorted servers (but with mutated scores)
 	return (cb(null, servers, reasons));
diff --git a/lib/algorithms/score-num-owner-zones.js b/lib/algorithms/score-num-owner-zones.js
index 52a0f63..1e7c105 100644
--- a/lib/algorithms/score-num-owner-zones.js
+++ b/lib/algorithms/score-num-owner-zones.js
@@ -32,9 +32,9 @@ var MIN_OWNER_WEIGHT = 2;
 
 
 function
-scoreNumOwnerZones(log, servers, constraints, cb)
+scoreNumOwnerZones(sys, servers, constraints, cb)
 {
-	assert.object(log);
+	assert.object(sys);
 	assert.arrayOfObject(servers);
 	assert.object(constraints);
 	assert.func(cb);
@@ -93,7 +93,7 @@ scoreNumOwnerZones(log, servers, constraints, cb)
 
 	// alter scores; this mutates server objects referred to by both
 	// sortedServers and servers
-	score(log, orderedServers, Math.abs(weight), reasons);
+	score(sys.log, orderedServers, Math.abs(weight), reasons);
 
 	// update reasons with number of VMs found per server
 	Object.keys(deltas).forEach(function (uuid) {
diff --git a/lib/algorithms/score-uniform-random.js b/lib/algorithms/score-uniform-random.js
index 3c1da77..e39e70a 100644
--- a/lib/algorithms/score-uniform-random.js
+++ b/lib/algorithms/score-uniform-random.js
@@ -27,9 +27,9 @@ var RANDOM_WEIGHT = 2;
 
 
 function
-scoreUniformRandom(log, servers, constraints, cb)
+scoreUniformRandom(sys, servers, constraints, cb)
 {
-	assert.object(log);
+	assert.object(sys);
 	assert.arrayOfObject(servers);
 	assert.object(constraints);
 	assert.func(cb);
@@ -72,7 +72,7 @@ scoreUniformRandom(log, servers, constraints, cb)
 
 	// alter scores; this mutates server objects referred to by both
 	// sortedServers and servers
-	score(log, sortedServers, Math.abs(weight), reasons);
+	score(sys.log, sortedServers, Math.abs(weight), reasons);
 
 	return (cb(null, servers, reasons));
 }
diff --git a/lib/algorithms/score-unreserved-disk.js b/lib/algorithms/score-unreserved-disk.js
index 23cc111..a25f6e5 100644
--- a/lib/algorithms/score-unreserved-disk.js
+++ b/lib/algorithms/score-unreserved-disk.js
@@ -29,7 +29,7 @@ var score = require('../scorers').linear;
 
 
 function
-scoreUnreservedDisk(log, servers, constraints, cb)
+scoreUnreservedDisk(sys, servers, constraints, cb)
 {
 	var reasons = {};
 
@@ -61,7 +61,7 @@ scoreUnreservedDisk(log, servers, constraints, cb)
 
 	// alter scores; this mutates server objects referred to by both
 	// sortedServers and servers
-	score(log, sortedServers, Math.abs(weight), reasons);
+	score(sys.log, sortedServers, Math.abs(weight), reasons);
 
 	return (cb(null, servers, reasons));
 }
diff --git a/lib/algorithms/score-unreserved-ram.js b/lib/algorithms/score-unreserved-ram.js
index 066421e..bd03193 100644
--- a/lib/algorithms/score-unreserved-ram.js
+++ b/lib/algorithms/score-unreserved-ram.js
@@ -32,9 +32,9 @@ var MAX_RAM_WEIGHT = -2;
 
 
 function
-scoreUnreservedRam(log, servers, constraints, cb)
+scoreUnreservedRam(sys, servers, constraints, cb)
 {
-	assert.object(log);
+	assert.object(sys);
 	assert.arrayOfObject(servers);
 	assert.object(constraints);
 	assert.func(cb);
@@ -65,7 +65,7 @@ scoreUnreservedRam(log, servers, constraints, cb)
 
 	// alter scores; this mutates server objects referred to by both
 	// sortedServers and servers
-	score(log, sortedServers, Math.abs(weight), reasons);
+	score(sys.log, sortedServers, Math.abs(weight), reasons);
 
 	return (cb(null, servers, reasons));
 }
diff --git a/lib/algorithms/soft-filter-locality-hints.js b/lib/algorithms/soft-filter-locality-hints.js
index 4c43309..7d68080 100644
--- a/lib/algorithms/soft-filter-locality-hints.js
+++ b/lib/algorithms/soft-filter-locality-hints.js
@@ -135,9 +135,9 @@ var shared = require('./shared/locality-hints');
  * Filter `servers` according to `constraints.vm.locality` rules.
  */
 function
-filterSoftLocality(log, servers, constraints, cb)
+filterSoftLocality(sys, servers, constraints, cb)
 {
-	assert.object(log, 'log');
+	assert.object(sys, 'sys');
 	assert.arrayOfObject(servers, 'servers');
 	assert.object(constraints, 'constraints');
 	assert.uuid(constraints.vm.owner_uuid, 'constraints.vm.owner_uuid');
diff --git a/lib/allocator.js b/lib/allocator.js
index c0701fb..13276a9 100644
--- a/lib/allocator.js
+++ b/lib/allocator.js
@@ -15,16 +15,17 @@
  * the same.
  *
  * All plugins accept four arguments, and return two values. The arguments
- * consist of: log, servers, constraints. 'log' is what each plugin will
- * use for the logging of info, warning or error messages. 'servers' is an array
- * of servers left from the previous plugin. 'constraints' contains various
- * restrictions which must be maintained when selecting eligible servers.
+ * consist of: sys, servers, constraints. 'sys' contains various functions that
+ * plugins often use, such as logging or loading VM information. 'servers' is an
+ * array of servers left after the previous plugin. 'constraints' contains
+ * various restrictions which must be maintained when selecting eligible
+ * servers.
  *
- * All plugins return two values: servers, reasons. 'servers' is an array of
- * servers that the plugin deems acceptable for allocation. 'reasons' is a hash
- * with a textual description of why any server was removed by that plugin. Note
- * that some plugins don't return hashes, since their filtering is boolean in
- * nature, thus it should be obvious why a server was removed.
+ * All plugins return three values: err, servers, reasons. 'servers' is an array
+ * of servers that the plugin deems acceptable for allocation. 'reasons' is a
+ * hash with a textual description of why any server was removed by that plugin,
+ * although some plugins do not fill in the hash with such information because
+ * the reasons for the filtering is obvious (e.g. the plugin is boolean).
  *
  * Plugins form a tree, much like s-exps, where they form an expression. An
  * example of such an expression:
@@ -74,9 +75,14 @@ var availableAlgorithms;	/* what's available for use */
  * startup: it blocks on loading algorithm files, and terminates the program
  * when given a bad description.
  */
-var Allocator = module.exports = function (log, description, defaults)
+var Allocator = module.exports = function (sys, description, defaults)
 {
-	this.log = log;
+	assert.object(sys);
+	assert.object(sys.log);
+	assert.array(description);
+	assert.object(defaults);
+
+	this.sys = sys;
 	this.defaults = defaults;
 
 	if (!availableAlgorithms)
@@ -89,6 +95,7 @@ var Allocator = module.exports = function (log, description, defaults)
 	    availableAlgorithms);
 };
 
+
 /*
  * Takes a list of servers, and applies the algorithms to the list of servers to
  * select one for this allocation.
@@ -202,7 +209,8 @@ Allocator.prototype._dispatch =
 function (algorithms, initialServers, constraints, cb)
 {
 	var self = this;
-	var log = self.log;
+	var log = self.sys.log;
+
 	var visitedAlgos = [];
 	var remainingServers = [];
 	var reasons = [];
@@ -211,7 +219,7 @@ function (algorithms, initialServers, constraints, cb)
 
 	/* we don't use shift(), to avoid modifying the referenced object */
 	var command = algorithms[0];
-	self.log.trace('Dispatching on "' + command + '"');
+	log.trace('Dispatching on "' + command + '"');
 	assert.ok(command === 'pipe' || command === 'or', 'command valid');
 	algorithms = algorithms.slice(1, algorithms.length);
 
@@ -277,7 +285,7 @@ function (algorithms, initialServers, constraints, cb)
 				ranAlgorithms);
 		} else {
 			startTime = new Date();
-			algorithm.run(log, argServers, constraints,
+			algorithm.run(self.sys, argServers, constraints,
 				ranAlgorithm);
 		}
 
@@ -384,7 +392,7 @@ Allocator.prototype._loadAvailableAlgorithms = function ()
 		}
 	});
 
-	self.log.info('Loaded the following algorithms: ', algoNames);
+	self.sys.log.info('Loaded the following algorithms: ', algoNames);
 
 	return (loadedAlgorithms);
 };
@@ -396,20 +404,21 @@ Allocator.prototype._loadAvailableAlgorithms = function ()
 Allocator.prototype._loadAlgorithm = function (shortName)
 {
 	var self = this;
+	var log = self.sys.log;
 	var algoPath = ALGORITHMS_PATH + shortName;
 
 	var algorithm = require(algoPath);
 
 	if (!algorithm.run || typeof (algorithm.run) !== 'function') {
-		self.log.error('Algorithm "%s" does not have a run function',
+		log.error('Algorithm "%s" does not have a run function',
 		    shortName);
 		return (null);
 	} else if (!algorithm.name || typeof (algorithm.name) != 'string') {
-		self.log.error('Algorithm "%s" does not have a name',
+		log.error('Algorithm "%s" does not have a name',
 		    shortName);
 		return (null);
 	} else {
-		self.log.debug('Algorithm "%s" has been loaded', shortName);
+		log.debug('Algorithm "%s" has been loaded', shortName);
 		return (algorithm);
 	}
 };
@@ -425,7 +434,7 @@ Allocator.prototype._createExpression = function (description, algorithmLookup)
 	var expression = [];
 
 	var errExit = function (errMsg) {
-		self.log.error('Bad expression given: ' + errMsg);
+		self.sys.log.error('Bad expression given: ' + errMsg);
 		process.exit(1);
 	};
 
diff --git a/test/algorithms/calculate-server-unreserved.test.js b/test/algorithms/calculate-server-unreserved.test.js
index eab2823..fd194b2 100644
--- a/test/algorithms/calculate-server-unreserved.test.js
+++ b/test/algorithms/calculate-server-unreserved.test.js
@@ -10,12 +10,10 @@
 
 var test = require('tape');
 var filter = require('../../lib/algorithms/calculate-server-unreserved.js');
+var common = require('./common.js');
 
 
-var log = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
+var SYS = common.SYS;
 
 
 test('calculateServerUnreserved()', function (t) {
@@ -186,7 +184,7 @@ test('calculateServerUnreserved()', function (t) {
 	];
 
 	var constraints = {};
-	filter.run(log, serversInfo, constraints,
+	filter.run(SYS, serversInfo, constraints,
 			function (err, servers, reasons) {
 		t.ifError(err);
 
@@ -222,7 +220,7 @@ test('calculateServerUnreserved() with no servers', function (t) {
 	var serversInfo = [];
 	var constraints = {};
 
-	filter.run(log, serversInfo, constraints,
+	filter.run(SYS, serversInfo, constraints,
 			function (err, servers, reasons) {
 		t.ifError(err);
 
diff --git a/test/algorithms/calculate-ticketed-vms.test.js b/test/algorithms/calculate-ticketed-vms.test.js
index 4846f07..e48668a 100644
--- a/test/algorithms/calculate-ticketed-vms.test.js
+++ b/test/algorithms/calculate-ticketed-vms.test.js
@@ -10,12 +10,10 @@
 
 var test = require('tape');
 var filter = require('../../lib/algorithms/calculate-ticketed-vms.js');
+var common = require('./common.js');
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
 
+var SYS = common.SYS;
 var GiB = 1024 * 1024 * 1024;
 
 var SERVERS = [ {
@@ -204,7 +202,7 @@ test('calculate ticketed VMs', function (t) {
 	var ownerUuid = '930896af-bf8c-48d4-885c-6573a94b1853';
 
 	var constraints = { tickets: TICKETS };
-	filter.run(LOG, SERVERS, constraints, function (err, servers, reasons) {
+	filter.run(SYS, SERVERS, constraints, function (err, servers, reasons) {
 		t.ifError(err);
 
 		// t.deepEqual(servers, serversInfo);
@@ -262,7 +260,7 @@ test('calculate ticketed VMs', function (t) {
 test('calculate ticketed VMs with no servers', function (t) {
 	var constraints = { tickets: TICKETS };
 
-	filter.run(LOG, [], constraints, function (err, servers, reasons) {
+	filter.run(SYS, [], constraints, function (err, servers, reasons) {
 		t.ifError(err);
 
 		t.deepEqual(servers, []);
@@ -276,7 +274,7 @@ test('calculate ticketed VMs with no servers', function (t) {
 test('calculate ticketed VMs with no tickets', function (t) {
 	var constraints = { tickets: [] };
 
-	filter.run(LOG, SERVERS, constraints, function (err, servers, reasons) {
+	filter.run(SYS, SERVERS, constraints, function (err, servers, reasons) {
 		t.ifError(err);
 
 		t.deepEqual(servers, SERVERS);
diff --git a/test/algorithms/common.js b/test/algorithms/common.js
index 8f9f1b0..544adde 100644
--- a/test/algorithms/common.js
+++ b/test/algorithms/common.js
@@ -11,14 +11,25 @@
 var assert = require('assert-plus');
 
 
+var SYS = {
+	log: {
+		debug: function () { return (true); },
+		error: function (err) { console.log(err); return true; },
+		info:  function () { return (true); },
+		trace: function () { return (true); },
+		warn:  function () { return (true); }
+	}
+};
+
+
 function clone(obj) {
 	return (JSON.parse(JSON.stringify(obj)));
 }
 
 
-function createPluginChecker(plugin, log) {
+function createPluginChecker(plugin, sys) {
 	assert.object(plugin);
-	assert.object(log);
+	assert.object(sys);
 
 	return function checkPlugin(t, givenServers, constraints, expectServers,
 			expectReasons) {
@@ -28,7 +39,7 @@ function createPluginChecker(plugin, log) {
 		assert.arrayOfObject(givenServers);
 		assert.arrayOfObject(expectServers);
 
-		plugin.run(log, clone(givenServers), constraints,
+		plugin.run(sys, clone(givenServers), constraints,
 				function (err, servers, reasons) {
 			assert.arrayOfObject(servers);
 			assert.object(reasons);
@@ -45,6 +56,7 @@ function createPluginChecker(plugin, log) {
 
 
 module.exports = {
+	SYS: SYS,
 	createPluginChecker: createPluginChecker,
 	clone: clone
 };
diff --git a/test/algorithms/hard-filter-capness.test.js b/test/algorithms/hard-filter-capness.test.js
index 205e281..ec1ee83 100644
--- a/test/algorithms/hard-filter-capness.test.js
+++ b/test/algorithms/hard-filter-capness.test.js
@@ -13,11 +13,6 @@ var filter = require('../../lib/algorithms/hard-filter-capness.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
 var SERVERS = [ {
 	uuid: 'cdfe84c4-f7cc-4104-bc24-45f786bce762',
 	vms : {
@@ -68,7 +63,7 @@ var SERVERS = [ {
 } ];
 
 
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter, common.SYS);
 
 
 test('filterCapness() with package with cpu_cap', function (t) {
diff --git a/test/algorithms/hard-filter-headnode.test.js b/test/algorithms/hard-filter-headnode.test.js
index ac48d36..639eceb 100644
--- a/test/algorithms/hard-filter-headnode.test.js
+++ b/test/algorithms/hard-filter-headnode.test.js
@@ -13,11 +13,6 @@ var filter = require('../../lib/algorithms/hard-filter-headnode.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
 var SERVERS = [
 	{ memory_available_bytes: 256 },
 	{ memory_available_bytes: 512, headnode: true },
@@ -25,7 +20,7 @@ var SERVERS = [
 ];
 
 
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter, common.SYS);
 
 
 test('filterHeadnode() 1', function (t) {
diff --git a/test/algorithms/hard-filter-invalid-servers.test.js b/test/algorithms/hard-filter-invalid-servers.test.js
index 1d318d5..7484857 100644
--- a/test/algorithms/hard-filter-invalid-servers.test.js
+++ b/test/algorithms/hard-filter-invalid-servers.test.js
@@ -14,14 +14,7 @@ var filter = require('../../lib/algorithms/hard-filter-invalid-servers.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); },
-	warn:  function () { return (true); }
-};
-
-
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter, common.SYS);
 
 
 test('filterInvalidServers()', function (t) {
diff --git a/test/algorithms/hard-filter-large-servers.test.js b/test/algorithms/hard-filter-large-servers.test.js
index 6c20c44..58de19e 100644
--- a/test/algorithms/hard-filter-large-servers.test.js
+++ b/test/algorithms/hard-filter-large-servers.test.js
@@ -13,18 +13,12 @@ var filter = require('../../lib/algorithms/hard-filter-large-servers.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
-
 var SERVERS = [];
 for (var ii = 0; ii < 20; ii++)
 	SERVERS.push({ unreserved_ram: ii * 8 * 1024 });
 
 
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter, common.SYS);
 
 
 test('filterLargeServers()', function (t) {
diff --git a/test/algorithms/hard-filter-locality-hints.test.js b/test/algorithms/hard-filter-locality-hints.test.js
index 16efd79..aaac829 100644
--- a/test/algorithms/hard-filter-locality-hints.test.js
+++ b/test/algorithms/hard-filter-locality-hints.test.js
@@ -16,11 +16,7 @@ var common = require('./common.js');
 
 // --- globals
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
+var SYS = common.SYS;
 var OWNER_UUID = 'b0bbbbbb-9172-4c58-964e-fe58a9989708';
 
 // --- internal support stuff
@@ -47,7 +43,7 @@ genVms(numVms, numOwnerVms)
 }
 
 
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter, SYS);
 
 
 /**
@@ -332,7 +328,7 @@ test('locality scenario B: large set', function (tt) {
 		} };
 
 		var start = Date.now();
-		filter.run(LOG, servers, constraints,
+		filter.run(SYS, servers, constraints,
 				function (err, filteredServers, reasons) {
 			t.ifError(err);
 
@@ -354,7 +350,7 @@ test('locality scenario B: large set', function (tt) {
 		} };
 
 		var start = Date.now();
-		filter.run(LOG, servers, constraints,
+		filter.run(SYS, servers, constraints,
 				function (err, filteredServers, reasons) {
 			t.ifError(err);
 
diff --git a/test/algorithms/hard-filter-min-cpu.test.js b/test/algorithms/hard-filter-min-cpu.test.js
index a092bce..bedfdd7 100644
--- a/test/algorithms/hard-filter-min-cpu.test.js
+++ b/test/algorithms/hard-filter-min-cpu.test.js
@@ -13,13 +13,7 @@ var filter = require('../../lib/algorithms/hard-filter-min-cpu.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
-
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter, common.SYS);
 
 
 test('filterMinCpu()', function (t) {
diff --git a/test/algorithms/hard-filter-min-disk.test.js b/test/algorithms/hard-filter-min-disk.test.js
index 3de51bd..94a6344 100644
--- a/test/algorithms/hard-filter-min-disk.test.js
+++ b/test/algorithms/hard-filter-min-disk.test.js
@@ -16,13 +16,7 @@ var common = require('./common.js');
 var MiB = 1024 * 1024;
 var GiB = 1024 * MiB;
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
-
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter, common.SYS);
 
 
 test('filterMinDisk()', function (t) {
diff --git a/test/algorithms/hard-filter-min-ram.test.js b/test/algorithms/hard-filter-min-ram.test.js
index fc71352..e5eb9d0 100644
--- a/test/algorithms/hard-filter-min-ram.test.js
+++ b/test/algorithms/hard-filter-min-ram.test.js
@@ -13,13 +13,7 @@ var filter = require('../../lib/algorithms/hard-filter-min-ram.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
-
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter, common.SYS);
 
 
 test('filterMinRam()', function (t) {
diff --git a/test/algorithms/hard-filter-overprovision-ratios.test.js b/test/algorithms/hard-filter-overprovision-ratios.test.js
index f2374a6..d2224ba 100644
--- a/test/algorithms/hard-filter-overprovision-ratios.test.js
+++ b/test/algorithms/hard-filter-overprovision-ratios.test.js
@@ -14,11 +14,6 @@ var filter = require('../../lib/algorithms/' +
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
 var SERVERS = [
 	{
 		uuid: '98b6985f-f102-4c4f-a2e3-eda731a8b0dc',
@@ -54,7 +49,7 @@ var SERVERS = [
 ];
 
 
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter, common.SYS);
 
 
 test('filterOverprovisionRatios() 1', function (t) {
diff --git a/test/algorithms/hard-filter-owners-servers.js b/test/algorithms/hard-filter-owners-servers.js
index 9d9575e..720fd67 100644
--- a/test/algorithms/hard-filter-owners-servers.js
+++ b/test/algorithms/hard-filter-owners-servers.js
@@ -13,12 +13,6 @@ var filter = require('../../lib/algorithms/hard-filter-owners-servers.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	error: function () { return (true); },
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
 var SERVERS = [ {
 	uuid: '33ce31d0-f376-4efd-ad41-f17c430b9782',
 	unreserved_ram: 1024
@@ -31,7 +25,7 @@ var SERVERS = [ {
 } ];
 
 
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter, common.SYS);
 
 
 test('filterServersByOwners() with owner', function (t) {
diff --git a/test/algorithms/hard-filter-platform-versions.test.js b/test/algorithms/hard-filter-platform-versions.test.js
index f89dd38..ceaf1b5 100644
--- a/test/algorithms/hard-filter-platform-versions.test.js
+++ b/test/algorithms/hard-filter-platform-versions.test.js
@@ -13,12 +13,6 @@ var filter = require('../../lib/algorithms/hard-filter-platform-versions.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
-
 var SERVERS = genServers([
 	['b6d9d432-16bd-41b5-b3ac-7e3986380c37', '6.5', '20121218T203452Z'],
 	['aa652df0-7954-4cbb-9243-3cbb2c99b7be', '6.5', '20121210T203034Z'],
@@ -33,7 +27,7 @@ var SERVERS = genServers([
 ]);
 
 
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter, common.SYS);
 
 
 test('filterPlatformVersions() no platform versions', function (t) {
diff --git a/test/algorithms/hard-filter-reserved.test.js b/test/algorithms/hard-filter-reserved.test.js
index da71351..5524d7a 100644
--- a/test/algorithms/hard-filter-reserved.test.js
+++ b/test/algorithms/hard-filter-reserved.test.js
@@ -13,13 +13,7 @@ var filter = require('../../lib/algorithms/hard-filter-reserved.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
-
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter, common.SYS);
 
 
 test('filterReserved()', function (t) {
diff --git a/test/algorithms/hard-filter-reservoir.test.js b/test/algorithms/hard-filter-reservoir.test.js
index 7c99a22..4bb603e 100644
--- a/test/algorithms/hard-filter-reservoir.test.js
+++ b/test/algorithms/hard-filter-reservoir.test.js
@@ -13,13 +13,7 @@ var filter = require('../../lib/algorithms/hard-filter-reservoir.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
-
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter, common.SYS);
 
 
 test('filterReservoir()', function (t) {
diff --git a/test/algorithms/hard-filter-running.test.js b/test/algorithms/hard-filter-running.test.js
index a25d07b..4f189dd 100644
--- a/test/algorithms/hard-filter-running.test.js
+++ b/test/algorithms/hard-filter-running.test.js
@@ -13,13 +13,8 @@ var filter = require('../../lib/algorithms/hard-filter-running.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
-
-var checkFilter = common.createPluginChecker(filter, LOG);
+var SYS = common.SYS;
+var checkFilter = common.createPluginChecker(filter, SYS);
 
 
 test('filterRunning()', function (t) {
@@ -68,7 +63,7 @@ test('filterRunning() with malformed servers 1', function (t) {
 
 	var constraints = {};
 
-	filter.run(LOG, badServers, constraints,
+	filter.run(SYS, badServers, constraints,
 			function (err, servers, reasons) {
 		t.ifError(err);
 
@@ -97,7 +92,7 @@ test('filterRunning() with malformed servers 2', function (t) {
 
 	var constraints = {};
 
-	filter.run(LOG, givenServers, constraints,
+	filter.run(SYS, givenServers, constraints,
 			function (err, servers, reasons) {
 		t.ifError(err);
 
diff --git a/test/algorithms/hard-filter-setup.test.js b/test/algorithms/hard-filter-setup.test.js
index 4e02f7e..ef3b1d8 100644
--- a/test/algorithms/hard-filter-setup.test.js
+++ b/test/algorithms/hard-filter-setup.test.js
@@ -13,13 +13,8 @@ var filter = require('../../lib/algorithms/hard-filter-setup.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
-
-var checkFilter = common.createPluginChecker(filter, LOG);
+var SYS = common.SYS;
+var checkFilter = common.createPluginChecker(filter, SYS);
 
 
 test('filterSetup()', function (t) {
@@ -57,7 +52,7 @@ test('filterSetup() with malformed servers 1', function (t) {
 
 	var constraints = {};
 
-	filter.run(LOG, badServers, constraints,
+	filter.run(SYS, badServers, constraints,
 			function (err, servers, reasons) {
 		t.ifError(err);
 
@@ -77,7 +72,7 @@ test('filterSetup() with malformed servers 2', function (t) {
 
 	var constraints = {};
 
-	filter.run(LOG, givenServers, constraints,
+	filter.run(SYS, givenServers, constraints,
 			function (err, servers, reasons) {
 		t.ifError(err);
 
diff --git a/test/algorithms/hard-filter-sick-servers.test.js b/test/algorithms/hard-filter-sick-servers.test.js
index fb00f4b..699360c 100644
--- a/test/algorithms/hard-filter-sick-servers.test.js
+++ b/test/algorithms/hard-filter-sick-servers.test.js
@@ -13,13 +13,7 @@ var filter = require('../../lib/algorithms/hard-filter-sick-servers.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
-
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter, common.SYS);
 
 
 test('filterSickServers()', function (t) {
diff --git a/test/algorithms/hard-filter-traits.test.js b/test/algorithms/hard-filter-traits.test.js
index 4db3970..a0e6713 100644
--- a/test/algorithms/hard-filter-traits.test.js
+++ b/test/algorithms/hard-filter-traits.test.js
@@ -13,11 +13,6 @@ var filter = require('../../lib/algorithms/hard-filter-traits.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
 var SERVERS = [ {
 	uuid: 'de52bbab-a12d-4e11-8292-c4141031553c',
 	traits: { ssd: true,  users: 'john' }
@@ -39,7 +34,7 @@ var SERVERS = [ {
 } ];
 
 
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter, common.SYS);
 
 
 test('filterTraits() for VMs 1', function (t) {
diff --git a/test/algorithms/hard-filter-vlans.test.js b/test/algorithms/hard-filter-vlans.test.js
index 88304c0..b02191b 100644
--- a/test/algorithms/hard-filter-vlans.test.js
+++ b/test/algorithms/hard-filter-vlans.test.js
@@ -11,12 +11,10 @@
 var assert = require('assert-plus');
 var test = require('tape');
 var filter = require('../../lib/algorithms/hard-filter-vlans.js');
+var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
+var SYS = common.SYS;
 
 var SERVERS = [
 	{
@@ -132,7 +130,7 @@ runTest(t, vlans, expectedUuids, expectedReasons)
 {
 	var constraints = { vm: { nic_tags: vlans } };
 
-	filter.run(LOG, SERVERS, constraints, function (err, servers, reasons) {
+	filter.run(SYS, SERVERS, constraints, function (err, servers, reasons) {
 		assert.arrayOfObject(servers);
 		assert.object(reasons);
 
@@ -345,7 +343,7 @@ test('filterVlans() with no servers', function (t) {
 	var emptyServers = [];
 	var constraints = { vm: { nic_tags: ['admin'] } };
 
-	filter.run(LOG, emptyServers, constraints,
+	filter.run(SYS, emptyServers, constraints,
 			function (err, servers, reasons) {
 		t.ifError(err);
 
diff --git a/test/algorithms/hard-filter-vm-count.test.js b/test/algorithms/hard-filter-vm-count.test.js
index b253746..0e0a411 100644
--- a/test/algorithms/hard-filter-vm-count.test.js
+++ b/test/algorithms/hard-filter-vm-count.test.js
@@ -14,11 +14,6 @@ var filter = require('../../lib/algorithms/hard-filter-vm-count.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
 var SERVERS = [ {
 	uuid: '33ce31d0-f376-4efd-ad41-f17c430b9782',
 	vms: {
@@ -46,7 +41,7 @@ var SERVERS = [ {
 } ];
 
 
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter, common.SYS);
 
 
 test('filterVmCount()', function (t) {
diff --git a/test/algorithms/hard-filter-volumes-from.test.js b/test/algorithms/hard-filter-volumes-from.test.js
index efc8066..f43158c 100644
--- a/test/algorithms/hard-filter-volumes-from.test.js
+++ b/test/algorithms/hard-filter-volumes-from.test.js
@@ -13,10 +13,6 @@ var filter = require('../../lib/algorithms/hard-filter-volumes-from.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); }
-};
-
 var SERVERS = [
 	{
 		uuid: 'd8ea612d-7440-411e-8e34-e6bf1adeb008',
@@ -46,7 +42,7 @@ var SERVERS = [
 ];
 
 
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter, common.SYS);
 
 
 test('filterVolumesFrom()', function (t) {
diff --git a/test/algorithms/identity.test.js b/test/algorithms/identity.test.js
index 4729fde..c1f5da3 100644
--- a/test/algorithms/identity.test.js
+++ b/test/algorithms/identity.test.js
@@ -13,13 +13,7 @@ var identity = require('../../lib/algorithms/identity.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
-
-var checkPlugin = common.createPluginChecker(identity, LOG);
+var checkPlugin = common.createPluginChecker(identity, common.SYS);
 
 
 test('identity()', function (t) {
diff --git a/test/algorithms/override-overprovisioning.test.js b/test/algorithms/override-overprovisioning.test.js
index 615cce4..43aacff 100644
--- a/test/algorithms/override-overprovisioning.test.js
+++ b/test/algorithms/override-overprovisioning.test.js
@@ -14,10 +14,7 @@ var plugin = require('../../lib/algorithms/override-overprovisioning.js');
 var common = require('./common.js');
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
+var SYS = common.SYS;
 
 var SERVERS = [
 	{ unreserved_cpu: 1 },
@@ -47,7 +44,7 @@ test('disable overprovisioning 1', function (t) {
 	var pkg = {};
 	var constraints = { pkg: pkg, defaults: {} };
 
-	plugin.run(LOG, SERVERS, constraints,
+	plugin.run(SYS, SERVERS, constraints,
 			function (err, servers, reasons) {
 		assert.arrayOfObject(servers);
 		assert.object(reasons);
@@ -79,7 +76,7 @@ test('disable overprovisioning 2', function (t) {
 
 	var constraints = { pkg: pkg, defaults: {} };
 
-	plugin.run(LOG, SERVERS, constraints,
+	plugin.run(SYS, SERVERS, constraints,
 			function (err, servers, reasons) {
 		assert.arrayOfObject(servers);
 		assert.object(reasons);
@@ -105,7 +102,7 @@ test('disable overprovisioning without pkg', function (t) {
 	var expectConstraints = common.clone(constraints);
 	var expectReasons = {};
 
-	plugin.run(LOG, SERVERS, constraints,
+	plugin.run(SYS, SERVERS, constraints,
 			function (err, servers, reasons) {
 		assert.arrayOfObject(servers);
 		assert.object(reasons);
@@ -136,7 +133,7 @@ function (t) {
 		disable_override_overprovisioning: true
 	} };
 
-	plugin.run(LOG, SERVERS, constraints,
+	plugin.run(SYS, SERVERS, constraints,
 			function (err, servers, reasons) {
 		assert.arrayOfObject(servers);
 		assert.object(reasons);
@@ -175,7 +172,7 @@ test('disable overprovisioning with override_overprovision_* 1', function (t) {
 		overprovision_ratio_disk: 0.5
 	} };
 
-	plugin.run(LOG, SERVERS, constraints,
+	plugin.run(SYS, SERVERS, constraints,
 			function (err, servers, reasons) {
 		assert.arrayOfObject(servers);
 		assert.object(reasons);
@@ -226,7 +223,7 @@ test('disable overprovisioning with override_overprovision_* 2', function (t) {
 		overprovision_ratio_disk: 0.5
 	} };
 
-	plugin.run(LOG, SERVERS, constraints,
+	plugin.run(SYS, SERVERS, constraints,
 			function (err, servers, reasons) {
 		assert.arrayOfObject(servers);
 		assert.object(reasons);
@@ -251,7 +248,7 @@ test('disable overprovisioning with override_overprovision_* 2', function (t) {
 test('disable overprovisioning with no servers', function (t) {
 	var constraints = { pkg: {}, defaults: {} };
 
-	plugin.run(LOG, [], constraints, function (err, servers, reasons) {
+	plugin.run(SYS, [], constraints, function (err, servers, reasons) {
 		assert.arrayOfObject(servers);
 		assert.object(reasons);
 
diff --git a/test/algorithms/score-current-platform.test.js b/test/algorithms/score-current-platform.test.js
index 3c02d7e..d2a8719 100644
--- a/test/algorithms/score-current-platform.test.js
+++ b/test/algorithms/score-current-platform.test.js
@@ -15,11 +15,6 @@ var common = require('./common');
 var clone  = common.clone;
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
 var SERVERS = [ {
 	uuid: '8973fb43-29da-474c-97b8-7c513c602a24',
 	score: 1,
@@ -141,7 +136,7 @@ test('name', function (t) {
 
 function checkFixedScorer(t, givenServers, constraints, expectServers,
 		expectReasons) {
-	scorer.run(LOG, clone(givenServers), constraints,
+	scorer.run(common.SYS, clone(givenServers), constraints,
 			function (err, servers, reasons) {
 		assert.arrayOfObject(servers);
 		assert.object(reasons);
diff --git a/test/algorithms/score-next-reboot.test.js b/test/algorithms/score-next-reboot.test.js
index 0b62534..2a1ec11 100644
--- a/test/algorithms/score-next-reboot.test.js
+++ b/test/algorithms/score-next-reboot.test.js
@@ -14,11 +14,6 @@ var common = require('./common');
 var clone  = common.clone;
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
 var SERVERS = [ {
 	uuid: '62ccf0e0-268f-4f82-838a-218e4798d6c2',
 	score: 1,
@@ -50,7 +45,7 @@ var SERVERS = [ {
 // helpers ---
 
 
-var checkScorer = common.createPluginChecker(scorer, LOG);
+var checkScorer = common.createPluginChecker(scorer, common.SYS);
 
 var now;
 function delta(days) {
diff --git a/test/algorithms/score-num-owner-zones.test.js b/test/algorithms/score-num-owner-zones.test.js
index 0534057..b53f5a5 100644
--- a/test/algorithms/score-num-owner-zones.test.js
+++ b/test/algorithms/score-num-owner-zones.test.js
@@ -16,11 +16,6 @@ var clone  = common.clone;
 
 var OWNER_UUID = 'e6667010-7831-462f-ba1f-e345f8288106';
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
 var SERVERS = [ {
 	uuid: 'b38dc3a0-eb00-11e5-943f-8bc57e287d0d',
 	unreserved_ram: 256,
@@ -97,7 +92,7 @@ var SERVERS = [ {
 } ];
 
 
-var checkScorer = common.createPluginChecker(scorer, LOG);
+var checkScorer = common.createPluginChecker(scorer, common.SYS);
 
 
 test('scoreNumOwnerZones()', function (t) {
diff --git a/test/algorithms/score-uniform-random.test.js b/test/algorithms/score-uniform-random.test.js
index c5c9662..aa4a8e5 100644
--- a/test/algorithms/score-uniform-random.test.js
+++ b/test/algorithms/score-uniform-random.test.js
@@ -14,10 +14,7 @@ var common = require('./common');
 var clone  = common.clone;
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
+var SYS = common.SYS;
 
 var SERVERS = [ {
 	uuid: '59eb4f1b-c9a7-41c7-8ab0-2142da53d62f',
@@ -31,7 +28,7 @@ var SERVERS = [ {
 } ];
 
 
-var checkScorer = common.createPluginChecker(scorer, LOG);
+var checkScorer = common.createPluginChecker(scorer, SYS);
 
 
 test('scoreUniformRandom()', function (t) {
@@ -120,7 +117,7 @@ checkRandom(t, constraints, expectedMax)
 			return (checkScores());
 		}
 
-		return scorer.run(LOG, clone(SERVERS), constraints,
+		return scorer.run(SYS, clone(SERVERS), constraints,
 				function (err, servers, reasons) {
 			t.ifError(err);
 
diff --git a/test/algorithms/score-unreserved-disk.test.js b/test/algorithms/score-unreserved-disk.test.js
index bc5e61f..e32fcc5 100644
--- a/test/algorithms/score-unreserved-disk.test.js
+++ b/test/algorithms/score-unreserved-disk.test.js
@@ -14,11 +14,6 @@ var common = require('./common');
 var clone  = common.clone;
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
 var SERVERS = [ {
 	uuid: 'ef23ad0e-1802-4929-af61-387e9071d39f',
 	score: 1,
@@ -34,7 +29,7 @@ var SERVERS = [ {
 } ];
 
 
-var checkScorer = common.createPluginChecker(scorer, LOG);
+var checkScorer = common.createPluginChecker(scorer, common.SYS);
 
 
 test('scoreUnreservedDisk()', function (t) {
diff --git a/test/algorithms/score-unreserved-ram.test.js b/test/algorithms/score-unreserved-ram.test.js
index 1a08e2d..ae2325d 100644
--- a/test/algorithms/score-unreserved-ram.test.js
+++ b/test/algorithms/score-unreserved-ram.test.js
@@ -14,11 +14,6 @@ var common = require('./common');
 var clone  = common.clone;
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
 var SERVERS = [ {
 	uuid: '26888f40-bae2-4b68-9053-c91bc82de296',
 	score: 1,
@@ -34,7 +29,7 @@ var SERVERS = [ {
 } ];
 
 
-var checkScorer = common.createPluginChecker(scorer, LOG);
+var checkScorer = common.createPluginChecker(scorer, common.SYS);
 
 
 test('scoreUnreservedRam()', function (t) {
diff --git a/test/algorithms/soft-filter-locality-hints.test.js b/test/algorithms/soft-filter-locality-hints.test.js
index a364ee9..3ca577e 100644
--- a/test/algorithms/soft-filter-locality-hints.test.js
+++ b/test/algorithms/soft-filter-locality-hints.test.js
@@ -17,18 +17,14 @@ var common = require('./common.js');
 // --- globals
 
 
-var LOG = {
-	trace: function () { return (true); },
-	debug: function () { return (true); }
-};
-
+var SYS = common.SYS;
 var OWNER_UUID = 'b0bbbbbb-9172-4c58-964e-fe58a9989708';
 
 
 // --- internal support stuff
 
 
-var checkFilter = common.createPluginChecker(filter, LOG);
+var checkFilter = common.createPluginChecker(filter, common.SYS);
 
 
 function
@@ -325,7 +321,7 @@ test('locality scenario B: large set', function (tt) {
 		var givenServers = common.clone(servers);
 
 		var start = Date.now();
-		filter.run(LOG, givenServers, constraints,
+		filter.run(SYS, givenServers, constraints,
 				function (err, filteredServers, reasons) {
 			t.ifError(err);
 
@@ -349,7 +345,7 @@ test('locality scenario B: large set', function (tt) {
 		var givenServers = common.clone(servers);
 
 		var start = Date.now();
-		filter.run(LOG, givenServers, constraints,
+		filter.run(SYS, givenServers, constraints,
 				function (err, filteredServers, reasons) {
 			t.ifError(err);
 
diff --git a/test/allocator.test.js b/test/allocator.test.js
index a824c2a..2f3b288 100644
--- a/test/allocator.test.js
+++ b/test/allocator.test.js
@@ -12,63 +12,7 @@ var assert = require('assert-plus');
 var test = require('tape');
 var common = require('./common');
 var Allocator = require('../lib/allocator.js');
-
-
-var ALGO_DESC = [
-	'pipe', 'hard-filter-setup',
-		'hard-filter-running',
-		'hard-filter-invalid-servers',
-		'hard-filter-volumes-from',
-		'calculate-ticketed-vms',
-		'hard-filter-reserved',
-		'hard-filter-headnode',
-		'hard-filter-vm-count',
-		'hard-filter-capness',
-		'hard-filter-vlans',
-		'hard-filter-platform-versions',
-		'hard-filter-traits',
-		'hard-filter-owners-servers',
-		'hard-filter-sick-servers',
-		'calculate-server-unreserved',
-		'hard-filter-overprovision-ratios',
-		'hard-filter-min-ram',
-		'hard-filter-min-disk',
-		'hard-filter-min-cpu',
-		'hard-filter-locality-hints',
-		['or', 'hard-filter-reservoir',
-			'identity'],
-		['or', 'hard-filter-large-servers',
-			'identity' ],
-		'soft-filter-locality-hints',
-		'score-unreserved-ram',
-		'score-unreserved-disk',
-		'score-num-owner-zones',
-		'score-current-platform',
-		'score-next-reboot',
-		'score-uniform-random'
-];
-
-
-var DEFAULTS = {
-	weight_current_platform: 1,
-	weight_next_reboot: 0.5,
-	weight_num_owner_zones: 0,
-	weight_uniform_random: 0.5,
-	weight_unreserved_disk: 1,
-	weight_unreserved_ram: 2,
-	filter_headnode: true,
-	filter_min_resources: true,
-	filter_large_servers: true
-};
-
-
-var logStub = {
-	trace: function () { return true; },
-	debug: function () { return true; },
-	info:  function () { return true; },
-	warn:  function () { return true; },
-	error: function (err) { console.log(err); return true; }
-};
+var SYS = require('./algorithms/common.js').SYS;
 
 
 test('algorithms pipeline', function (t) {
@@ -78,8 +22,8 @@ test('algorithms pipeline', function (t) {
 		'pipe',
 		{
 			name: 'foo',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (sys, servers, constraints, cb) {
+				assert.object(sys);
 				assert.array(servers);
 				assert.object(constraints);
 				assert.func(cb);
@@ -91,8 +35,8 @@ test('algorithms pipeline', function (t) {
 			}
 		}, {
 			name: 'bar',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (sys, servers, constraints, cb) {
+				assert.object(sys);
 				assert.array(servers);
 				assert.object(constraints);
 				assert.func(cb);
@@ -104,8 +48,8 @@ test('algorithms pipeline', function (t) {
 			}
 		}, {
 			name: 'baz',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (sys, servers, constraints, cb) {
+				assert.object(sys);
 				assert.array(servers);
 				assert.object(constraints);
 				assert.func(cb);
@@ -120,7 +64,7 @@ test('algorithms pipeline', function (t) {
 
 	var executed = [];
 
-	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(SYS, common.ALGO_DESC, common.DEFAULTS);
 	allocator.allocServerExpr = plugins;
 
 	allocator.allocate(serverStubs, {}, {}, {}, [], function (err, stub) {
@@ -155,8 +99,8 @@ test('algorithms shortcuts with no servers', function (t) {
 		'pipe',
 		{
 			name: 'foo',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (sys, servers, constraints, cb) {
+				assert.object(sys);
 				assert.array(servers);
 				assert.object(constraints);
 				assert.func(cb);
@@ -166,8 +110,8 @@ test('algorithms shortcuts with no servers', function (t) {
 			}
 		}, {
 			name: 'bar',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (sys, servers, constraints, cb) {
+				assert.object(sys);
 				assert.array(servers);
 				assert.object(constraints);
 				assert.func(cb);
@@ -177,8 +121,8 @@ test('algorithms shortcuts with no servers', function (t) {
 			}
 		}, {
 			name: 'baz',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (sys, servers, constraints, cb) {
+				assert.object(sys);
 				assert.array(servers);
 				assert.object(constraints);
 				assert.func(cb);
@@ -196,7 +140,7 @@ test('algorithms shortcuts with no servers', function (t) {
 
 	var executed = [];
 
-	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(SYS, common.ALGO_DESC, common.DEFAULTS);
 	allocator.allocServerExpr = plugins;
 
 	allocator.allocate([serverStub], {}, {}, {}, [],
@@ -243,8 +187,8 @@ test('dispatch 1', function (t) {
 		'pipe',
 		{
 			name: 'foo',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (sys, servers, constraints, cb) {
+				assert.object(sys);
 				assert.array(servers);
 				assert.object(constraints);
 				assert.func(cb);
@@ -259,8 +203,8 @@ test('dispatch 1', function (t) {
 			'or',
 			{
 				name: 'bar',
-				run: function (log, servers, constraints, cb) {
-					assert.object(log);
+				run: function (sys, servers, constraints, cb) {
+					assert.object(sys);
 					assert.array(servers);
 					assert.object(constraints);
 					assert.func(cb);
@@ -275,8 +219,8 @@ test('dispatch 1', function (t) {
 				}
 			}, {
 				name: 'baz',
-				run: function (log, servers, constraints, cb) {
-					assert.object(log);
+				run: function (sys, servers, constraints, cb) {
+					assert.object(sys);
 					assert.array(servers);
 					assert.object(constraints);
 					assert.func(cb);
@@ -295,7 +239,7 @@ test('dispatch 1', function (t) {
 
 	var executed = [];
 
-	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(SYS, common.ALGO_DESC, common.DEFAULTS);
 	allocator.allocServerExpr = plugins;
 
 	allocator.allocate(serverStubs, {}, {}, {}, [],
@@ -339,8 +283,8 @@ test('dispatch 2', function (t) {
 		'pipe',
 		{
 			name: 'foo',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (sys, servers, constraints, cb) {
+				assert.object(sys);
 				assert.array(servers);
 				assert.object(constraints);
 				assert.func(cb);
@@ -356,8 +300,8 @@ test('dispatch 2', function (t) {
 			'or',
 			{
 				name: 'bar',
-				run: function (log, servers, constraints, cb) {
-					assert.object(log);
+				run: function (sys, servers, constraints, cb) {
+					assert.object(sys);
 					assert.array(servers);
 					assert.object(constraints);
 					assert.func(cb);
@@ -382,7 +326,7 @@ test('dispatch 2', function (t) {
 
 	var executed = [];
 
-	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(SYS, common.ALGO_DESC, common.DEFAULTS);
 	allocator.allocServerExpr = plugins;
 
 	allocator.allocate(serverStubs, {}, {}, {}, [],
@@ -424,8 +368,8 @@ test('dispatch 3', function (t) {
 		'pipe',
 		{
 			name: 'foo',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (sys, servers, constraints, cb) {
+				assert.object(sys);
 				assert.array(servers);
 				assert.object(constraints);
 				assert.func(cb);
@@ -454,7 +398,7 @@ test('dispatch 3', function (t) {
 
 	var executed = [];
 
-	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(SYS, common.ALGO_DESC, common.DEFAULTS);
 	allocator.allocServerExpr = plugins;
 
 	allocator.allocate(serverStubs, {}, {}, {}, [],
@@ -482,8 +426,8 @@ test('pipe 1', function (t) {
 		'pipe',
 		{
 			name: 'foo',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (sys, servers, constraints, cb) {
+				assert.object(sys);
 				assert.array(servers);
 				assert.object(constraints);
 				assert.func(cb);
@@ -497,8 +441,8 @@ test('pipe 1', function (t) {
 			}
 		}, {
 			name: 'bar',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (sys, servers, constraints, cb) {
+				assert.object(sys);
 				assert.array(servers);
 				assert.object(constraints);
 				assert.func(cb);
@@ -512,8 +456,8 @@ test('pipe 1', function (t) {
 			}
 		}, {
 			name: 'baz',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (sys, servers, constraints, cb) {
+				assert.object(sys);
 				assert.array(servers);
 				assert.object(constraints);
 				assert.func(cb);
@@ -530,7 +474,7 @@ test('pipe 1', function (t) {
 
 	var executed = [];
 
-	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(SYS, common.ALGO_DESC, common.DEFAULTS);
 
 	allocator._dispatch(plugins, serverStubs, { vm: { foo: 1 } },
 			function (err, serverStub, visitedAlgorithms,
@@ -568,8 +512,8 @@ test('pipe 2', function (t) {
 		'pipe',
 		{
 			name: 'foo',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (sys, servers, constraints, cb) {
+				assert.object(sys);
 				assert.array(servers);
 				assert.object(constraints);
 				assert.func(cb);
@@ -583,8 +527,8 @@ test('pipe 2', function (t) {
 			}
 		}, {
 			name: 'bar',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (sys, servers, constraints, cb) {
+				assert.object(sys);
 				assert.array(servers);
 				assert.object(constraints);
 				assert.func(cb);
@@ -606,7 +550,7 @@ test('pipe 2', function (t) {
 
 	var executed = [];
 
-	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(SYS, common.ALGO_DESC, common.DEFAULTS);
 
 	allocator._dispatch(plugins, serverStubs, { vm: { foo: 1 } },
 			function (err, serverStub, visitedAlgorithms,
@@ -639,8 +583,8 @@ test('or 1', function (t) {
 		'or',
 		{
 			name: 'foo',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (sys, servers, constraints, cb) {
+				assert.object(sys);
 				assert.array(servers);
 				assert.object(constraints);
 				assert.func(cb);
@@ -654,8 +598,8 @@ test('or 1', function (t) {
 			}
 		}, {
 			name: 'bar',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (sys, servers, constraints, cb) {
+				assert.object(sys);
 				assert.array(servers);
 				assert.object(constraints);
 				assert.func(cb);
@@ -669,8 +613,8 @@ test('or 1', function (t) {
 			}
 		}, {
 			name: 'baz',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (sys, servers, constraints, cb) {
+				assert.object(sys);
 				assert.array(servers);
 				assert.object(constraints);
 				assert.func(cb);
@@ -687,7 +631,7 @@ test('or 1', function (t) {
 
 	var executed = [];
 
-	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(SYS, common.ALGO_DESC, common.DEFAULTS);
 
 	allocator._dispatch(plugins, serverStubs, { vm: { foo: 1 } },
 			function (err, serverStub, visitedAlgorithms,
@@ -717,8 +661,8 @@ test('or 2', function (t) {
 		'or',
 		{
 			name: 'foo',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (sys, servers, constraints, cb) {
+				assert.object(sys);
 				assert.array(servers);
 				assert.object(constraints);
 				assert.func(cb);
@@ -732,8 +676,8 @@ test('or 2', function (t) {
 			}
 		}, {
 			name: 'bar',
-			run: function (log, servers, constraints, cb) {
-				assert.object(log);
+			run: function (sys, servers, constraints, cb) {
+				assert.object(sys);
 				assert.array(servers);
 				assert.object(constraints);
 				assert.func(cb);
@@ -755,7 +699,7 @@ test('or 2', function (t) {
 
 	var executed = [];
 
-	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(SYS, common.ALGO_DESC, common.DEFAULTS);
 
 	allocator._dispatch(plugins, serverStubs, { vm: { foo: 1 } },
 			function (err, serverStub, visitedAlgorithms,
@@ -841,7 +785,7 @@ test('create plugin summary', function (t) {
 		}
 	];
 
-	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(SYS, common.ALGO_DESC, common.DEFAULTS);
 	var summary = allocator._createPluginSummary(serverStubs,
 		visitedAlgorithms, remainingServers, reasonsRemoved);
 
@@ -852,7 +796,7 @@ test('create plugin summary', function (t) {
 
 
 test('load available algorithms', function (t) {
-	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(SYS, common.ALGO_DESC, common.DEFAULTS);
 	var algorithms = allocator._loadAvailableAlgorithms();
 
 	var names = Object.keys(algorithms).sort();
@@ -898,7 +842,7 @@ test('load available algorithms', function (t) {
 
 
 test('load algorithms', function (t) {
-	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(SYS, common.ALGO_DESC, common.DEFAULTS);
 	var algorithm = allocator._loadAlgorithm('hard-filter-headnode');
 
 	t.equal(algorithm.name, 'Servers which are not headnodes');
@@ -921,7 +865,7 @@ test('create expression', function (t) {
 		]
 	];
 
-	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(SYS, common.ALGO_DESC, common.DEFAULTS);
 	var availableAlgorithms = allocator._loadAvailableAlgorithms();
 	var expression = allocator._createExpression(description,
 	    availableAlgorithms);
@@ -963,7 +907,7 @@ test('server capacity', function (t) {
 		asdsa: 'Server has status: undefined'
 	};
 
-	var allocator = new Allocator(logStub, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(SYS, common.ALGO_DESC, common.DEFAULTS);
 	allocator.serverCapacity(common.getExampleServers(),
 			function (err, servers, reasons) {
 		t.ifError(err);
diff --git a/test/common.js b/test/common.js
index 3cffb09..17eee72 100644
--- a/test/common.js
+++ b/test/common.js
@@ -11,8 +11,55 @@
 var fs = require('fs');
 
 
-var servers;
+var ALGO_DESC = [
+	'pipe', 'hard-filter-setup',
+		'hard-filter-running',
+		'hard-filter-invalid-servers',
+		'hard-filter-volumes-from',
+		'calculate-ticketed-vms',
+		'hard-filter-reserved',
+		'hard-filter-headnode',
+		'hard-filter-vm-count',
+		'hard-filter-capness',
+		'hard-filter-vlans',
+		'hard-filter-platform-versions',
+		'hard-filter-traits',
+		'hard-filter-owners-servers',
+		'hard-filter-sick-servers',
+		'calculate-server-unreserved',
+		'hard-filter-overprovision-ratios',
+		'hard-filter-min-ram',
+		'hard-filter-min-cpu',
+		'hard-filter-min-disk',
+		'hard-filter-locality-hints',
+		['or', 'hard-filter-reservoir',
+		        'identity'],
+		['or', 'hard-filter-large-servers',
+		        'identity' ],
+		'soft-filter-locality-hints',
+		'score-unreserved-ram',
+		'score-unreserved-disk',
+		'score-num-owner-zones',
+		'score-current-platform',
+		'score-next-reboot',
+		'score-uniform-random'
+];
+
+
+var DEFAULTS = {
+	weight_current_platform: 1,
+	weight_next_reboot: 0.5,
+	weight_num_owner_zones: 0,
+	weight_uniform_random: 0.5,
+	weight_unreserved_disk: 1,
+	weight_unreserved_ram: 2,
+	filter_headnode: true,
+	filter_min_resources: true,
+	filter_large_servers: true
+};
+
 
+var servers;
 function getExampleServers() {
 	if (!servers)
 		servers = fs.readFileSync(__dirname + '/common.json');
@@ -23,5 +70,7 @@ function getExampleServers() {
 
 
 module.exports = {
+	ALGO_DESC: ALGO_DESC,
+	DEFAULTS: DEFAULTS,
 	getExampleServers: getExampleServers
 };
diff --git a/test/integration.test.js b/test/integration.test.js
index d97654a..4baea4e 100644
--- a/test/integration.test.js
+++ b/test/integration.test.js
@@ -11,15 +11,7 @@
 var test = require('tape');
 var Allocator = require('../lib/allocator.js');
 var common = require('./common');
-
-
-var log = {
-	trace: function () {},
-	debug: function () {},
-	info:  function () {},
-	warn:  function () {},
-	error: function () {}
-};
+var SYS = require('./algorithms/common.js').SYS;
 
 
 var SERVERS = common.getExampleServers();
@@ -124,57 +116,9 @@ var TICKETS = [
 ];
 
 
-var ALGO_DESC = [
-	'pipe', 'hard-filter-setup',
-		'hard-filter-running',
-		'hard-filter-invalid-servers',
-		'hard-filter-volumes-from',
-		'calculate-ticketed-vms',
-		'hard-filter-reserved',
-		'hard-filter-headnode',
-		'hard-filter-vm-count',
-		'hard-filter-capness',
-		'hard-filter-vlans',
-		'hard-filter-platform-versions',
-		'hard-filter-traits',
-		'hard-filter-owners-servers',
-		'hard-filter-sick-servers',
-		'calculate-server-unreserved',
-		'hard-filter-overprovision-ratios',
-		'hard-filter-min-ram',
-		'hard-filter-min-disk',
-		'hard-filter-min-cpu',
-		'hard-filter-locality-hints',
-		['or', 'hard-filter-reservoir',
-			'identity'],
-		['or', 'hard-filter-large-servers',
-			'identity' ],
-		'soft-filter-locality-hints',
-		'score-unreserved-ram',
-		'score-unreserved-disk',
-		'score-num-owner-zones',
-		'score-current-platform',
-		'score-next-reboot',
-		'score-uniform-random'
-];
-
-
-var DEFAULTS = {
-	weight_current_platform: 1,
-	weight_next_reboot: 0.5,
-	weight_num_owner_zones: 0,
-	weight_uniform_random: 0.5,
-	weight_unreserved_disk: 1,
-	weight_unreserved_ram: 2,
-	filter_headnode: true,
-	filter_min_resources: true,
-	filter_large_servers: true
-};
-
-
 function newAllocator(cb)
 {
-	var allocator = new Allocator(log, ALGO_DESC, DEFAULTS);
+	var allocator = new Allocator(SYS, common.ALGO_DESC, common.DEFAULTS);
 
 	(function waitTilLoaded() {
 		if (!allocator.serverCapacityExpr)
@@ -298,10 +242,10 @@ test('allocate 1', function (t) {
 			step: 'Servers with enough unreserved RAM',
 			remaining: [ '00000000-0000-0000-0000-00259094373c' ]
 		}, {
-			step: 'Servers with enough unreserved disk',
+			step: 'Servers with enough unreserved CPU',
 			remaining: [ '00000000-0000-0000-0000-00259094373c' ]
 		}, {
-			step: 'Servers with enough unreserved CPU',
+			step: 'Servers with enough unreserved disk',
 			remaining: [ '00000000-0000-0000-0000-00259094373c' ]
 		}, {
 			step: 'Servers with requested hard locality considered',
@@ -506,12 +450,12 @@ test('allocate 2', function (t) {
 				'00000000-0000-0000-0000-0025909437d4'
 			]
 		}, {
-			step: 'Servers with enough unreserved disk',
+			step: 'Servers with enough unreserved CPU',
 			remaining: [
 				'00000000-0000-0000-0000-0025909437d4'
 			]
 		}, {
-			step: 'Servers with enough unreserved CPU',
+			step: 'Servers with enough unreserved disk',
 			remaining: [
 				'00000000-0000-0000-0000-0025909437d4'
 			]
